
.vsteensy/build/mtp-test_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00010890 l    d  .fini	00000000 .fini
00010894 l    d  .ARM.exidx	00000000 .ARM.exidx
0001089c l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20001608 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60013a64 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000af10 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000a4d0 l     F .text.itcm	00000070 schedule_transfer
0000a540 l     F .text.itcm	00000036 run_callbacks
0000a578 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
0000a618 l     F .text.itcm	0000066c isr
20006d64 l     O .bss	00000004 endpointN_notify_mask
20006d68 l     O .bss	00000001 sof_usage
20006d74 l     O .bss	00000004 endpoint0_notify_mask
20006d78 l     O .bss	00000001 usb_reboot_timer
20006d80 l     O .bss	00000008 endpoint0_setupdata
20006d88 l     O .bss	00000008 reply_buffer
20006d90 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
20006dac l     O .bss	00000004 s_hotTemp
20006db0 l     O .bss	00000004 s_hot_ROOM
20006db4 l     O .bss	00000004 s_roomC_hotC
20006db8 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
20006df5 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 usb_desc.c
60001b40 l     O .text.progmem	0000000a qualifier_descriptor
20000c1c l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001608 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000160c l       .bss	00000000 object.8610
60001ba8 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000001c4 l     F .text.itcm	00000002 __tcf_0
00000bfc l     F .text.itcm	000000f0 _GLOBAL__sub_I_sd_str
20000140 l     O .data	0000001c cs
00000000 l    df *ABS*	00000000 SD.cpp
00003d9c l     F .text.itcm	00000060 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 Storage.cpp
00000f08 l     F .text.itcm	000000b8 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]
00001898 l     F .text.itcm	00000032 MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]
00000000 l    df *ABS*	00000000 MTP.cpp
00001934 l     F .text.itcm	00000080 MTPD::write(char const*, int) [clone .part.1]
00001a80 l     F .text.itcm	000000c8 MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]
00002e9c l     F .text.itcm	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
20000264 l     O .data	00000024 supported_op
20000288 l     O .data	00000014 propertyList
20005bc0 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20005bc4 l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
00000000 l    df *ABS*	00000000 SPI.cpp
000038fc l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00003dfc l     F .text.itcm	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00004918 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00004954 l     F .text.itcm	0000002c FsCache::sync() [clone .part.2]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00004fbc l     F .text.itcm	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFile.cpp
00005bc0 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00005d40 l     F .text.itcm	000000a4 FatFile::sync() [clone .part.38]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00006c24 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00006c60 l     F .text.itcm	00000058 FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000071ac l     F .text.itcm	0000002a lfnGetChar(DirLfn_t*, unsigned char)
000071d8 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00007d4c l     F .text.itcm	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00008158 l     F .text.itcm	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]
00008170 l     F .text.itcm	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008908 l     F .text.itcm	00000030 sdIrs()
00008938 l     F .text.itcm	00000018 isBusyCommandComplete()
00008950 l     F .text.itcm	00000010 isBusyCommandInhibit()
00008960 l     F .text.itcm	0000000c isBusyDMA()
0000896c l     F .text.itcm	00000014 isBusyFifoRead()
00008980 l     F .text.itcm	00000014 isBusyFifoWrite()
00008994 l     F .text.itcm	00000018 isBusyTransferComplete()
000089ac l     F .text.itcm	000000d0 setSdclk(unsigned long)
00008ae0 l     F .text.itcm	00000028 waitTimeout(bool (*)())
00008b08 l     F .text.itcm	0000004c yieldTimeout(bool (*)())
00008b64 l     F .text.itcm	00000044 enableGPIO(bool) [clone .part.0]
00008bc8 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00008c50 l     F .text.itcm	0000005c readReg16(unsigned long, void*)
00008cac l     F .text.itcm	0000002c isBusyCMD13()
00008cf4 l     F .text.itcm	00000020 waitDmaStatus() [clone .part.7]
00008d14 l     F .text.itcm	000000b8 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008f0c l     F .text.itcm	0000006c transferStop()
0000928c l     F .text.itcm	0000009c cardCMD6(unsigned long, unsigned char*)
20006084 l     O .bss	00000001 m_version2
20006088 l     O .bss	00000010 m_cid
20006098 l     O .bss	00000004 m_busyFcn
2000609c l     O .bss	00000001 m_highCapacity
200060a0 l     O .bss	00000004 m_ocr
200060a4 l     O .bss	00000004 m_rca
200060a8 l     O .bss	00000004 m_irqstat
20000c14 l     O .data	00000001 m_errorCode
200060ac l     O .bss	00000001 m_initDone
200060b0 l     O .bss	00000010 m_csd
200060c0 l     O .bss	00000001 m_dmaBusy
200060c4 l     O .bss	00000004 m_sdClkKhz
200060c8 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 usb1_mtp.c
00009a9c l     F .text.itcm	00000010 tx_event
00009aac l     F .text.itcm	00000010 rx_event
00009abc l     F .text.itcm	0000004c usb_mtp_wait
200060cc l     O .bss	00000800 txbuffer
200068cc l     O .bss	00000004 mtp_RXcount
200068d0 l     O .bss	00000001 tx_head
200068d4 l     O .bss	00000200 rx_buffer
20006ae0 l     O .bss	00000020 rx_transfer
20006b00 l     O .bss	00000080 tx_transfer
20006b80 l     O .bss	00000004 mtp_TXcount
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009d90 l     F .text.itcm	0000006c rx_queue_transfer
00009dfc l     F .text.itcm	000000b4 rx_event
00009eb0 l     F .text.itcm	00000098 usb_serial_flush_callback
00009f48 l     F .text.itcm	0000017c usb_serial_write.part.1
20006b84 l     O .bss	00000010 rx_index
20006b94 l     O .bss	00000002 tx_packet_size
20006b96 l     O .bss	00000001 tx_noautoflush
20006b97 l     O .bss	00000001 tx_head
20006ba0 l     O .bss	00000100 rx_transfer
20006ca0 l     O .bss	00000001 rx_tail
20006ca4 l     O .bss	00000009 rx_list
20006cae l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20006cb0 l     O .bss	00000010 rx_count
20006cc0 l     O .bss	00000004 rx_available
20006cc4 l     O .bss	00000001 rx_head
20006cc5 l     O .bss	00000001 transmit_previous_timeout
20006cc6 l     O .bss	00000002 tx_available
20006ce0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
0000b0e4 l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 yield.cpp
20006dbc l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
20000b20 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000e138 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
20000b40 l     O .data	00000010 zeroes.7258
20000b90 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
20000c60 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001b58 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001b60 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001b68 l     F .text.progmem	00000008 __sm_set_pool_veneer
60001b70 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001b78 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001b80 l     F .text.progmem	00000008 __memset_veneer
60001b88 l     F .text.progmem	00000008 __pwm_init_veneer
60001b90 l     F .text.progmem	00000008 __main_veneer
60001b98 l     F .text.progmem	00000008 __delay_veneer
60001ba0 l     F .text.progmem	00000008 __startup_late_hook_veneer
00010880 l     F .text.itcm	00000008 ___init_veneer
00000ed4 g     F .text.itcm	00000032 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00000d58 g     F .text.itcm	00000004 MTPStorage_SD::getNumStorage()
0000c3c0 g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
0000a300 g     F .text.itcm	0000000c usb_serial_available
0000c384 g     F .text.itcm	00000012 .hidden __aeabi_dcmple
0000d434 g     F .text.itcm	000000ba strcpy
00000d50 g     F .text.itcm	00000006 MTPStorage_SD::setStorageNumbers(char const**, int)
0000c2c0 g     F .text.itcm	0000007a .hidden __cmpdf2
0000af1c g     F .text.itcm	00000002 startup_default_late_hook
000090a4 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000b4cc  w    F .text.itcm	000000f0 yield
20006d6c g     O .bss	00000004 usb_timer1_callback
000069e0 g     F .text.itcm	00000244 FatFile::write(void const*, unsigned int)
0000c2c0 g     F .text.itcm	0000007a .hidden __eqdf2
000080cc  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
0000437c g     F .text.itcm	00000434 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20003714 g     O .bss	00000060 storage
60001a4c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
60001480 g     F .text.progmem	000003bc configure_external_ram
00001060 g     F .text.itcm	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000be30 g     F .text.itcm	0000005a .hidden __floatdidf
2000607c g     O .bss	00000004 FsDateTime::callback
0000b6f8 g     F .text.itcm	00000020 Print::println()
00004254 g     F .text.itcm	00000126 ExFatFile::seekSet(unsigned long long)
000080a0  w    F .text.itcm	00000004 SdSpiCard::errorCode() const
000000c0  w    F .text.itcm	0000000c File::flush()
0000cfec g     F .text.itcm	00000002 __malloc_unlock
00000220  w    F .text.itcm	000000bc SDFile::openNextFile(unsigned char)
20006080 g     O .bss	00000004 FsVolume::m_cwv
00005e54 g     F .text.itcm	0000010c FatFile::open(FatFile*, char const*, int)
600019bc g     F .text.progmem	00000058 analog_init
0000d67c g     F .text.itcm	0000004a _vdprintf_r
00003d24 g     F .text.itcm	0000006c SPIClass::setSCK(unsigned char)
20000c5c g     O .data	00000004 F_CPU_ACTUAL
200000c8  w    O .data	0000005c vtable for SDFile
0000ce84 g     F .text.itcm	000000c6 memmove
000018cc g     F .text.itcm	00000068 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0000da54 g     F .text.itcm	0000004c _Balloc
0001089c g       .ARM.exidx	00000000 __exidx_end
00006f2c g     F .text.itcm	00000060 FatPartition::freeChain(unsigned long)
20006dd0 g     O .bss	00000001 EventResponder::runningFromYield
000099f4 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
00008278 g     F .text.itcm	00000080 SdSpiCard::cardCommand(unsigned char, unsigned long)
000013ac g     F .text.itcm	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000b6cc g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
0000c2b0 g     F .text.itcm	0000008a .hidden __gtdf2
00007214 g     F .text.itcm	00000024 FatFile::lfnChecksum(unsigned char*)
0000c760 g     F .text.itcm	0000000c __errno
00000670  w    F .text.itcm	00000026 SDFile::isDirectory()
60001000 g     O .text.progmem	00000020 ImageVectorTable
00000880  w    F .text.itcm	00000028 File::~File()
20006dc0 g     O .bss	00000004 EventResponder::firstInterrupt
0000adcc g     F .text.itcm	00000004 usb_transfer_status
00001fb8 g     F .text.itcm	00000088 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000b030 g     F .text.itcm	00000090 sm_set_pool
000080d0  w    F .text.itcm	0000000e SdSpiCard::~SdSpiCard()
00007e20 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
00004ee8 g     F .text.itcm	0000003a ExFatPartition::rootLength()
000080a4  w    F .text.itcm	00000004 SdSpiCard::errorData() const
0000b6bc  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000500 g     O .data	00000370 digital_pin_to_info_PGM
20008ac0 g     O .bss	00000004 errno
000084c4 g     F .text.itcm	00000054 SdSpiCard::readOCR(unsigned long*)
00009a0c g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00007944 g     F .text.itcm	00000408 FatFile::open(FatFile*, fname_t*, int)
00004d14 g     F .text.itcm	0000004a ExFatPartition::fatGet(unsigned long, unsigned long*)
00010898 g       .text.itcm	00000000 _etext
00003954 g     F .text.itcm	000000d4 _spi_dma_rxISR0()
20001608 g       .bss	00000000 _sbss
00009a90 g     F .text.itcm	00000006 sdCsInit(unsigned char)
0000c34c g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
00008a88 g     F .text.itcm	0000000c SdioCard::errorData() const
000091b4 g     F .text.itcm	000000a0 SdioCard::writeSector(unsigned long, unsigned char const*)
60001bc0 g       *ABS*	00000000 _stextload
00000bf0 g     F .text.itcm	0000000c loop
0000ac84 g     F .text.itcm	00000064 usb_config_rx
00001e1c g     F .text.itcm	00000174 MTPD::GetStorageInfo(unsigned long)
00003f3c g     F .text.itcm	000000fc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000968c g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
000081d4 g     F .text.itcm	00000074 SdSpiCard::readData(unsigned char*, unsigned int)
20006dc4 g     O .bss	00000004 EventResponder::lastInterrupt
000007e8  w    F .text.itcm	00000096 SDFile::seek(unsigned long, int)
00007ea4 g     F .text.itcm	00000028 FsBaseFile::close()
00009c5c g     F .text.itcm	00000134 memcpy
0000c33c g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
000000a4  w    F .text.itcm	0000000c File::available()
00001740 g     F .text.itcm	00000158 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00004df8 g     F .text.itcm	00000080 ExFatPartition::freeChain(unsigned long)
00001480 g     F .text.itcm	00000180 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00006148 g     F .text.itcm	00000028 FatFile::peek()
0000f098 g     F .text.itcm	000016e4 _svfprintf_r
0000bdc0 g     F .text.itcm	00000022 .hidden __floatsidf
000001f0  w    F .text.itcm	00000014 SDFile::whoami()
20001624  w    O .bss	00000001 SDFile::name()::zeroterm
20006da4 g     O .bss	00000004 systick_millis_count
0000c2b8 g     F .text.itcm	00000082 .hidden __ltdf2
000056f8 g     F .text.itcm	000000dc ExFatFile::rename(ExFatFile*, char const*)
00009c38 g     F .text.itcm	00000024 usb_mtp_available
00003118 g     F .text.itcm	000007c8 MTPD::loop()
0000c43c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20006d98 g     O .bss	00000001 usb_configuration
00000084  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
0000afe0 g     F .text.itcm	00000050 sm_align_pool
00009254 g     F .text.itcm	00000038 SdioCard::syncDevice()
00008f7c g     F .text.itcm	000000bc SdioCard::writeData(unsigned char const*)
0000078c  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
00006170 g     F .text.itcm	00000052 FatFile::readDirCache(bool)
000000cc  w    F .text.itcm	0000000c File::seek(unsigned long, int)
60001a4c  w    O .text.progmem	00000018 usb_string_manufacturer_name
60001a14 g     O .text.progmem	00000008 usb_string_mtp
0000c7bc g     F .text.itcm	00000010 malloc
20000048  w    O .data	00000024 vtable for FsFile
000038e0  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
20000a30 g     O .data	000000c8 __mprec_tens
6000129c g     F .text.progmem	000000ec usb_init
000080b8  w    F .text.itcm	00000004 SdSpiCard::type() const
20006e00 g     O .bss	00000004 __malloc_top_pad
20008300 g     O .bss	00000004 systick_safe_read
000080e0 g     F .text.itcm	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
000057d4 g     F .text.itcm	00000122 ExFatFile::truncate()
20000ba0 g     O .data	00000000 .hidden __dso_handle
0000bda0 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000da38 g     F .text.itcm	0000001c _localeconv_r
20000ba4 g     O .data	0000001c sd_str
0000999c g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
0000dbd0 g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
00009b08 g     F .text.itcm	0000006c usb_mtp_configure
60001ad4 g     O .text.progmem	00000069 usb_config_descriptor_480
000000fc  w    F .text.itcm	0000000c File::operator bool()
00006d34 g     F .text.itcm	0000000e FatCache::sync()
0000c46c g     F .text.itcm	000002e2 .hidden __udivmoddi4
00002ae4 g     F .text.itcm	000001d0 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000bb1c g     F .text.itcm	00000000 .hidden __aeabi_drsub
00005bfc g     F .text.itcm	00000042 FatFile::addCluster()
0000d3d0 g     F .text.itcm	00000024 _sbrk_r
00008518 g     F .text.itcm	0000004a SdSpiCard::readRegister(unsigned char, void*)
00008ba8 g     F .text.itcm	00000020 SdioCard::type() const
00000098  w    F .text.itcm	0000000c File::write(void const*, unsigned int)
0000af18 g     F .text.itcm	00000002 startup_default_early_hook
6000102c g     F .text.progmem	00000270 ResetHandler
0000a380 g     F .text.itcm	00000020 usb_serial_getchar
000004f4  w    F .text.itcm	0000004c SDFile::name()
20006e2c g     O .bss	00000008 usb_cdc_line_coding
0000b130 g     F .text.itcm	0000000a digitalWrite
20006dc8 g     O .bss	00000004 EventResponder::lastYield
00003f0c g     F .text.itcm	00000030 ExFatFile::openRoot(ExFatVolume*)
00000350  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000c370 g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
20008400 g     O .bss	00000010 extmem_smalloc_pool
20006dfc g     O .bss	00000004 __malloc_max_sbrked_mem
00000620  w    F .text.itcm	00000010 SDFile::position()
0000b13c g     F .text.itcm	00000080 pinMode
00008810 g     F .text.itcm	00000042 SdSpiCard::writeStop()
00001600 g     F .text.itcm	00000036 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000bde4 g     F .text.itcm	0000003a .hidden __extendsfdf2
0000c0e0 g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
0000bb28 g     F .text.itcm	00000276 .hidden __adddf3
000022e0 g     F .text.itcm	00000090 MTPD::getObjectPropsSupported(unsigned long)
60013a64 g     O .text.csf	00000c00 hab_csf
000019b4 g     F .text.itcm	000000cc MTPD::writestring(char const*)
000088d4 g     F .text.itcm	00000032 SdSpiCard::writeData(unsigned char const*)
000000b0  w    F .text.itcm	00000010 File::peek()
00006f8c g     F .text.itcm	000000d4 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00000698  w    F .text.itcm	000000b8 SDClass::open(char const*, unsigned char)
00010894 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
0000be8c g     F .text.itcm	00000254 .hidden __aeabi_dmul
0000870c g     F .text.itcm	00000050 SdSpiCard::writeStart(unsigned long)
20006dcc g     O .bss	00000004 EventResponder::firstYield
20000914 g     O .data	00000004 _global_impure_ptr
00000d6c g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
0000039c  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000cff0 g     F .text.itcm	000003de _realloc_r
00000640  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0000c76c g     F .text.itcm	00000050 __libc_init_array
000005dc  w    F .text.itcm	00000044 SDFile::rewindDirectory()
000048cc g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00008a94 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
00005464 g     F .text.itcm	00000110 ExFatFile::addDirCluster()
00008880 g     F .text.itcm	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
20000af8 g     O .data	00000028 __mprec_bigtens
0000af20  w    F .text.itcm	0000008c HardFault_HandlerC
0000b6a4  w    F .text.itcm	00000004 usb_serial_class::clear()
0000bda0 g     F .text.itcm	0000001e .hidden __floatunsidf
0000afac g     F .text.itcm	00000030 _sbrk
6001245c g       *ABS*	00000000 _sdataload
0000de64 g     F .text.itcm	00000042 __mcmp
20000124  w    O .data	0000001c vtable for SDClass
000001b0  w    F .text.itcm	00000012 SDFile::operator bool()
20000c18 g     O .data	00000004 __brkval
20006cc8 g     O .bss	00000001 usb_cdc_line_rtsdtr
00000d5c g     F .text.itcm	0000000e MTPStorage_SD::getStorageName(unsigned long)
60001b4c g     F .text.progmem	00000000 _init
0000a0c4 g     F .text.itcm	00000002 usb_serial_reset
00005d14 g     F .text.itcm	0000002a FatFile::cacheDirEntry(unsigned char)
0000042c  w    F .text.itcm	00000062 SDClass::remove(char const*)
00000204  w    F .text.itcm	0000001c SDFile::close()
000003d0  w    F .text.itcm	0000005c SDFile::~SDFile()
60001a68 g     O .text.progmem	00000069 usb_config_descriptor_12
00009968 g     F .text.itcm	00000034 SdSpiArduinoDriver::begin(SdSpiConfig)
20008b00 g       .bss	00000000 _ebss
0000912c g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00001b48 g     F .text.itcm	0000025c MTPD::WriteDescriptor()
20000bc0 g     O .data	00000004 propertyListNum
00000750  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00006cb8 g     F .text.itcm	0000007a FatCache::read(unsigned long, unsigned char)
0000db34 g     F .text.itcm	00000040 __hi0bits
0000c3ec g     F .text.itcm	0000004e .hidden __fixdfsi
00005574 g     F .text.itcm	00000072 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20203080 g       .bss.dma	00000000 _heap_start
00001da4 g     F .text.itcm	00000076 MTPD::WriteStorageIDs()
00003d98  w    F .text.itcm	00000002 SDClass::~SDClass()
20001628 g     O .bss	000020ec sdx
00000880  w    F .text.itcm	00000028 File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20007000 g     O .bss	00000020 endpoint0_transfer_data
0000b7f8 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000b1bc g     F .text.itcm	000002b8 pwm_init
0000bb28 g     F .text.itcm	00000276 .hidden __aeabi_dadd
0000c2b8 g     F .text.itcm	00000082 .hidden __ledf2
0000d3f4 g     F .text.itcm	0000003e strcat
6000183c g     F .text.progmem	00000064 usb_pll_start
0000dd14 g     F .text.itcm	000000a0 __pow5mult
0000627c g     F .text.itcm	00000068 FatFile::rmdir()
0000be20 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00006e70 g     F .text.itcm	000000bc FatPartition::allocateCluster(unsigned long, unsigned long*)
00000590  w    F .text.itcm	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
000009a4 g     F .text.itcm	000001b8 storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)
20007020 g     O .bss	00000020 endpoint0_transfer_ack
20006e34 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ad80 g     F .text.itcm	00000028 usb_transmit
0000b684 g     F .text.itcm	00000020 systick_isr
0000011c  w    F .text.itcm	0000000c File::isDirectory()
00007d88 g     F .text.itcm	00000098 FatFile::getSFN(char*)
0000865c g     F .text.itcm	00000074 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20000c48 g     O .data	00000010 Serial
0000b6c4  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00007f4c g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000af18  w    F .text.itcm	00000002 startup_early_hook
00004ff8 g     F .text.itcm	000000c8 ExFatFile::addCluster()
2000006c  w    O .data	0000005c vtable for File
0000a2bc g     F .text.itcm	00000044 usb_serial_peekchar
0000c3ac g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
0000cd80 g     F .text.itcm	00000000 memchr
00006de4 g     F .text.itcm	0000008a FatPartition::fatPut(unsigned long, unsigned long)
0000b7fc g     F .text.itcm	000002c4 set_arm_clock
20006d9c g     O .bss	00000004 systick_cycle_count
20000c30 g     O .data	00000016 usb_string_serial_number_default
0000d868 g     F .text.itcm	000001d0 _free_r
00008f78 g     F .text.itcm	00000004 SdioCard::readStop()
0000498c g     F .text.itcm	0000008c FsCache::get(unsigned long, unsigned char)
0000c398 g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
0000b6b4  w    F .text.itcm	00000004 usb_serial_class::flush()
00000d78 g     F .text.itcm	00000028 MTPStorage_SD::freeClusters(unsigned long)
0000bb24 g     F .text.itcm	0000027a .hidden __aeabi_dsub
00007060 g     F .text.itcm	0000014c FatPartition::init(BlockDeviceInterface*, unsigned char)
000064f0 g     F .text.itcm	00000198 FatFile::mkdir(FatFile*, fname_t*)
20001604 g     O .data	00000004 __malloc_sbrk_base
0000b6ac  w    F .text.itcm	00000004 usb_serial_class::read()
00000160  w    F .text.itcm	0000000c File::rewindDirectory()
00007658 g     F .text.itcm	000001b4 FatFile::remove()
0000be20 g     F .text.itcm	0000006a .hidden __floatundidf
0000afdc  w    F .text.itcm	00000004 __cxa_pure_virtual
0000ddb4 g     F .text.itcm	000000ae __lshift
00006688 g     F .text.itcm	00000102 FatFile::mkdir(FatFile*, char const*, bool)
0000ad50 g     F .text.itcm	0000002e usb_prepare_transfer
00004f60 g     F .text.itcm	0000005a exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
0000af00 g     F .text.itcm	00000018 unused_interrupt_vector
0001077c g     F .text.itcm	00000100 __ssprint_r
600018a0 g     F .text.progmem	0000011c tempmon_init
20006d60 g     O .bss	00000004 usb_timer0_callback
0000e078 g     F .text.itcm	0000005e _vasnprintf_r
0000b7f0  w    F .text.itcm	00000002 serialEvent()
0000d728 g     F .text.itcm	000000a4 __register_exitproc
000047b0 g     F .text.itcm	0000011c ExFatFile::open(ExFatFile*, char const*, int)
0000d5dc g     F .text.itcm	000000a0 strncmp
000055e8 g     F .text.itcm	0000010e ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a30c g     F .text.itcm	00000074 usb_serial_flush_input
00004e78 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
000010f4 g     F .text.itcm	00000074 MTPStorage_SD::ConstructFilename(int, char*, int)
0000dbe4 g     F .text.itcm	00000130 __multiply
0000a3a0 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
20006e04 g     O .bss	00000028 __malloc_current_mallinfo
200002dc g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000dfbc g     F .text.itcm	000000ba __d2b
20006dd4 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
00008b54  w    F .text.itcm	0000000e SdioCard::~SdioCard()
00003e4c g     F .text.itcm	000000c0 ExFatFile::getName(char*, unsigned int)
00009038 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00009bd0 g     F .text.itcm	00000068 usb_mtp_send
0000c754 g     F .text.itcm	0000000c __cxa_atexit
00004038 g     F .text.itcm	000001ee ExFatFile::read(void*, unsigned int)
0000bdc0 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00000658  w    F .text.itcm	00000018 SDFile::peek()
00004a18 g     F .text.itcm	0000000e FsCache::sync()
00000d20 g     F .text.itcm	00000030 MTPStorage_SD::clusterSize(unsigned long)
20000bc4 g     O .data	00000050 SPI
0000ce20 g     F .text.itcm	00000062 memcmp
200008e8  w    O .data	00000028 vtable for usb_serial_class
00009a2c g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
00002ccc g     F .text.itcm	0000011c MTPD::GetObject(unsigned long)
00009a98 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20006da0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000c750  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
000051f0 g     F .text.itcm	00000072 ExFatFile::rmdir()
00002370 g     F .text.itcm	00000772 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000c0e0 g     F .text.itcm	000001d0 .hidden __divdf3
00008574 g     F .text.itcm	00000098 SdSpiCard::sectorCount()
00000cf0 g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
200011f8 g     O .data	00000408 __malloc_av_
00000388  w    F .text.itcm	00000014 SDFile::flush()
0000be8c g     F .text.itcm	00000254 .hidden __muldf3
0000a430 g     F .text.itcm	000000a0 usb_serial_flush_output
0000cfe8 g     F .text.itcm	00000002 __malloc_lock
000073a8 g     F .text.itcm	000002b0 FatFile::parsePathName(char const*, fname_t*, char const**)
20008800 g     O .bss	000002c0 _VectorsRam
00009a40 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000e0d8 g     F .text.itcm	0000005e _calloc_r
00003a28 g     F .text.itcm	00000230 SPIClass::begin()
00002de8 g     F .text.itcm	00000070 MTPD::read(char*, unsigned long)
00000cf4 g     F .text.itcm	0000002c MTPStorage_SD::clusterCount(unsigned long)
20000c46 g     O .data	00000001 yield_active_check_flags
000053fc g     F .text.itcm	00000066 ExFatFile::sync()
20006d70 g     O .bss	00000001 usb_high_speed
0000678c g     F .text.itcm	00000246 FatFile::rename(FatFile*, char const*)
00008cd8 g     F .text.itcm	0000001c SdioCard::isBusy()
000086d0 g     F .text.itcm	0000003a SdSpiCard::readStop()
0000cf4c g     F .text.itcm	0000009a memset
0000b7e0 g     F .text.itcm	00000010 main
20006df8 g     O .bss	00000004 __malloc_max_total_mem
00004a28 g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20203000 g     O .bss.dma	00000069 usb_descriptor_buffer
000058f8 g     F .text.itcm	000002c8 ExFatFile::write(void const*, unsigned int)
200001f4 g     O .data	0000005c vtable for MTPStorage_SD
00002ec8 g     F .text.itcm	00000154 MTPD::SendObjectInfo(unsigned long, unsigned long)
000002dc  w    F .text.itcm	0000005a SDFile::available()
000000f0  w    F .text.itcm	0000000c File::close()
0000b474 g     F .text.itcm	00000058 usb_init_serialnumber
60001bb4 g       .text.progmem	00000000 __init_array_end
0000e260 g     F .text.itcm	00000e34 _dtoa_r
0000c7dc g     F .text.itcm	00000570 _malloc_r
20006df4 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000d6e0 g     F .text.itcm	0000001a __ascii_wctomb
00007e20 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000be30 g     F .text.itcm	0000005a .hidden __aeabi_l2d
200002cc  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000b5bc g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00003d90 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
0000ae9c g     F .text.itcm	00000064 micros
00000128  w    F .text.itcm	00000038 File::openNextFile(unsigned char)
00005264 g     F .text.itcm	00000198 ExFatFile::syncDir()
0000d7cc g     F .text.itcm	0000009c _malloc_trim_r
60001a64 g     O .text.progmem	00000004 string0
0000a3cc g     F .text.itcm	00000018 usb_serial_write
0000af1c  w    F .text.itcm	00000002 startup_late_hook
0000b6b0  w    F .text.itcm	00000004 usb_serial_class::available()
60001b4a g     O .text.progmem	00000001 _serialEvent_default
00002e58 g     F .text.itcm	00000044 MTPD::readstring(char*)
000069d4 g     F .text.itcm	0000000c FatFile::sync()
00000540  w    F .text.itcm	00000050 SDClass::mkdir(char const*)
20008000 g     O .bss	00000300 endpoint_queue_head
60001a1c  w    O .text.progmem	0000002e usb_string_product_name
00001f90 g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000add0 g     F .text.itcm	000000cc delay
0000c2c0 g     F .text.itcm	0000007a .hidden __nedf2
00000da0 g     F .text.itcm	00000024 MTPStorage_SD::CloseIndex()
00010890 g     F .fini	00000000 _fini
00000108  w    F .text.itcm	00000014 File::name()
60001020 g     O .text.progmem	0000000c BootData
0000860c g     F .text.itcm	00000050 SdSpiCard::readStart(unsigned long)
000048dc g     F .text.itcm	0000003a ExFatFile::openNext(ExFatFile*, int)
0000b728 g     F .text.itcm	0000001e Print::printf(char const*, ...)
0000b7c8 g     F .text.itcm	00000016 Print::print(long)
00005de4 g     F .text.itcm	0000001e FatFile::close()
0000b0c0 g     F .text.itcm	00000024 Panic_Temp_isr
000000d8  w    F .text.itcm	0000000c File::position()
000008a8  w    F .text.itcm	00000064 SDFile::~SDFile()
00006d44 g     F .text.itcm	0000000c FatPartition::clusterStartSector(unsigned long) const
00008adc  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000338  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000198  w    F .text.itcm	00000018 File::write(unsigned char)
0000d6fc g     F .text.itcm	0000002c _write_r
20005bc8 g     O .bss	000004b4 SD
00008e38 g     F .text.itcm	000000d4 SdioCard::erase(unsigned long, unsigned long)
00003c58 g     F .text.itcm	0000006c SPIClass::setMOSI(unsigned char)
00009b74 g     F .text.itcm	0000005c usb_mtp_recv
20001088 g     O .data	00000004 _impure_ptr
20000000  w    O .data	00000024 vtable for Stream
00004228 g     F .text.itcm	0000002c ExFatFile::peek()
20000024  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000780c g     F .text.itcm	00000138 FatFile::lfnUniqueSfn(fname_t*)
00000778  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
00008074 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
00008a7c g     F .text.itcm	0000000c SdioCard::errorCode() const
00005f60 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000764  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001ba8 g       .text.progmem	00000000 __preinit_array_end
000080cc  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
00004adc g     F .text.itcm	00000134 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004cdc g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000875c g     F .text.itcm	000000b4 SdSpiCard::erase(unsigned long, unsigned long)
00001168 g     F .text.itcm	00000188 MTPStorage_SD::DeleteObject(unsigned long)
0000cd4c g     F .text.itcm	0000002a __ascii_mbtowc
00008194 g     F .text.itcm	0000003e SdSpiCard::isBusy()
20000450 g     O .data	00000058 vtable for SdSpiCard
0000856c  w    F .text.itcm	00000008 SdSpiCard::readCID(CID*)
00000b5c g     F .text.itcm	00000094 setup
20000870 g     O .data	00000078 usb_descriptor_list
00008c30 g     F .text.itcm	00000020 SdioCard::status()
00000ea0 g     F .text.itcm	00000032 MTPStorage_SD::ResetIndex()
00002cb4 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00000080  w    F .text.itcm	00000002 Print::flush()
000000e4  w    F .text.itcm	0000000c File::size()
00000490  w    F .text.itcm	00000062 SDClass::rmdir(char const*)
00005f70 g     F .text.itcm	000001d6 FatFile::read(void*, unsigned int)
00005e04 g     F .text.itcm	0000004e FatFile::openRoot(FatVolume*)
20068000 g       .text.csf	00000000 _estack
0000809c g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
00008564  w    F .text.itcm	00000008 SdSpiCard::readCSD(csd_t*)
0000016c  w    F .text.itcm	0000002c File::read()
0000a3e4 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00008248 g     F .text.itcm	00000030 SdSpiCard::waitNotBusy(unsigned short)
0000c35c g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
0000a0c8 g     F .text.itcm	00000108 usb_serial_configure
0000090c  w    F .text.itcm	00000030 File::~File()
0000b718  w    F .text.itcm	0000000e _write
20001608 g       .data	00000000 _edata
00004da8 g     F .text.itcm	0000004e ExFatPartition::fatPut(unsigned long, unsigned long)
20006da8 g     O .bss	00000001 external_psram_size
00002040 g     F .text.itcm	000002a0 MTPD::GetObjectInfo(unsigned long)
00008adc  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00008854 g     F .text.itcm	0000002c SdSpiCard::syncDevice()
00005c40 g     F .text.itcm	000000d4 FatFile::addDirCluster()
0000008c  w    F .text.itcm	0000000c File::read(void*, unsigned int)
0000b6b8  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000bac0 g     F .text.itcm	0000004e ultoa
00003d98  w    F .text.itcm	00000002 SDClass::~SDClass()
000082f8 g     F .text.itcm	000001cc SdSpiCard::begin(SdSpiConfig)
00007ecc g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00000fc0 g     F .text.itcm	0000004e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000b7f4 g     F .text.itcm	00000004 operator new(unsigned int)
0000b63c g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001600 g     O .data	00000004 __malloc_trim_threshold
0000b6a8  w    F .text.itcm	00000004 usb_serial_class::peek()
00001010 g     F .text.itcm	00000050 MTPStorage_SD::GetNextObjectHandle(unsigned long)
0000093c  w    F .text.itcm	00000068 MTPStorage_SD::~MTPStorage_SD()
20003780 g     O .bss	00002440 mtpd
0000dea8 g     F .text.itcm	00000114 __mdiff
00008acc g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
0000c3ec g     F .text.itcm	0000004e .hidden __aeabi_d2iz
00001638 g     F .text.itcm	00000108 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00004d60 g     F .text.itcm	00000048 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00008f78 g     F .text.itcm	00000004 SdioCard::writeStop()
000080bc  w    F .text.itcm	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00003e38 g     F .text.itcm	00000014 ExFatFile::close()
20000928 g     O .data	00000101 _ctype_
000080a8  w    F .text.itcm	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
60001ba8 g       .text.progmem	00000000 __init_array_start
0000c750  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00000dc4 g     F .text.itcm	000000dc MTPStorage_SD::OpenIndex()
0000c3c0 g     F .text.itcm	0000002c .hidden __unorddf2
20000c58 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
0000d500 g     F .text.itcm	000000dc strlen
00007238 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000c34c g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
0000c2b0 g     F .text.itcm	0000008a .hidden __gedf2
000061c4 g     F .text.itcm	000000b6 FatFile::seekSet(unsigned long)
60001a1c g     O .text.progmem	0000002e usb_string_product_name_default
0000d6c8 g     F .text.itcm	00000018 vdprintf
00008dcc g     F .text.itcm	0000006c SdioCard::sectorCount()
00007fac g     F .text.itcm	000000c8 FsVolume::begin(BlockDeviceInterface*)
00006424 g     F .text.itcm	000000cc FatFile::openNext(FatFile*, int)
200004a8 g     O .data	00000058 vtable for SdioCard
0000bde4 g     F .text.itcm	0000003a .hidden __aeabi_f2d
000010b4 g     F .text.itcm	00000040 MTPStorage_SD::close()
00007268 g     F .text.itcm	0000013e FatFile::getName(char*, unsigned int)
60001388 g     F .text.progmem	000000f8 configure_cache
0000093c  w    F .text.itcm	00000068 MTPStorage_SD::~MTPStorage_SD()
000012f0 g     F .text.itcm	000000bc MTPStorage_SD::rename(unsigned long, char const*)
00009748 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00009864 g     F .text.itcm	00000104 SdSpiArduinoDriver::activate()
00000cec g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
0000bb24 g     F .text.itcm	0000027a .hidden __subdf3
60001ba8 g       .text.progmem	00000000 __preinit_array_start
0000ada8 g     F .text.itcm	00000024 usb_receive
00004c10 g     F .text.itcm	000000cc ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000109c g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
000001c8  w    F .text.itcm	00000028 File::whoami()
0000db74 g     F .text.itcm	0000005a __lo0bits
000062e4 g     F .text.itcm	00000140 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00014660 g       *ABS*	00000000 _flashimagelen
0000bb10 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
000050c0 g     F .text.itcm	0000012e ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000b680 g     F .text.itcm	00000004 pendablesrvreq_isr
0000301c g     F .text.itcm	000000fc MTPD::SendObject()
0000007c  w    F .text.itcm	00000004 Print::availableForWrite()
2000108c g     O .data	0000016c __global_locale
00003cc4 g     F .text.itcm	00000060 SPIClass::setMISO(unsigned char)
00009328 g     F .text.itcm	00000364 SdioCard::begin(SdioConfig)
00004980 g     F .text.itcm	0000000c FsCache::invalidate()
0000a1d0 g     F .text.itcm	000000ec usb_serial_read
0000b748 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000ace8 g     F .text.itcm	00000068 usb_config_tx
00006d50 g     F .text.itcm	00000094 FatPartition::fatGet(unsigned long, unsigned long*)
0000c7cc g     F .text.itcm	00000010 free
0000dab4 g     F .text.itcm	00000080 __multadd
0000daa0 g     F .text.itcm	00000012 _Bfree
00000630  w    F .text.itcm	00000010 SDFile::size()
000003d0  w    F .text.itcm	0000005c SDFile::~SDFile()
20000c30  w    O .data	00000016 usb_string_serial_number
00004f24 g     F .text.itcm	0000003c exFatHashName(char const*, unsigned int, unsigned short)
000097b4 g     F .text.itcm	000000b0 SdioCard::readSector(unsigned long, unsigned char*)
00008ab0 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	................
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. C-..`........
60001010:	 ..`...`d:.`....

60001020 <BootData>:
60001020:	...``F......

6000102c <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000102c:	ldr	r3, [pc, #472]	; (60001208 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000102e:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001032:	ldr	r2, [pc, #472]	; (6000120c <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001034:	ldr	r0, [pc, #472]	; (60001210 <ResetHandler+0x1e4>)
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001036:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #468]	; (60001214 <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001040:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001044:	ldr	r2, [pc, #464]	; (60001218 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001046:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104c:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001054:	beq.n	60001076 <ResetHandler+0x4a>
	while (dest < dest_end) {
60001056:	ldr	r3, [pc, #456]	; (60001220 <ResetHandler+0x1f4>)
60001058:	cmp	r2, r3
6000105a:	bcs.n	60001076 <ResetHandler+0x4a>
6000105c:	mvns	r4, r2
6000105e:	mov	r0, r1
60001060:	add	r3, r4
60001062:	bic.w	r3, r3, #3
60001066:	adds	r3, #4
60001068:	add	r3, r1
		*dest++ = *src++;
6000106a:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	cmp	r0, r3
		*dest++ = *src++;
60001070:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001074:	bne.n	6000106a <ResetHandler+0x3e>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001076:	ldr	r2, [pc, #428]	; (60001224 <ResetHandler+0x1f8>)
60001078:	ldr	r1, [pc, #428]	; (60001228 <ResetHandler+0x1fc>)
6000107a:	cmp	r2, r1
6000107c:	beq.n	6000109e <ResetHandler+0x72>
	while (dest < dest_end) {
6000107e:	ldr	r3, [pc, #428]	; (6000122c <ResetHandler+0x200>)
60001080:	cmp	r2, r3
60001082:	bcs.n	6000109e <ResetHandler+0x72>
60001084:	mvns	r4, r2
60001086:	mov	r0, r1
60001088:	add	r3, r4
6000108a:	bic.w	r3, r3, #3
6000108e:	adds	r3, #4
60001090:	add	r3, r1
		*dest++ = *src++;
60001092:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	cmp	r0, r3
		*dest++ = *src++;
60001098:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109c:	bne.n	60001092 <ResetHandler+0x66>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
6000109e:	ldr	r2, [pc, #400]	; (60001230 <ResetHandler+0x204>)
600010a0:	ldr	r3, [pc, #400]	; (60001234 <ResetHandler+0x208>)
600010a2:	cmp	r2, r3
600010a4:	bcs.n	600010be <ResetHandler+0x92>
600010a6:	mvns	r0, r2
600010a8:	mov	r1, r2
		*dest++ = 0;
600010aa:	movs	r4, #0
600010ac:	add	r3, r0
600010ae:	bic.w	r3, r3, #3
600010b2:	adds	r3, #4
600010b4:	add	r3, r2
600010b6:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010ba:	cmp	r3, r1
600010bc:	bne.n	600010b6 <ResetHandler+0x8a>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010be:	ldr	r2, [pc, #376]	; (60001238 <ResetHandler+0x20c>)
600010c0:	mov.w	r1, #15728640	; 0xf00000
600010c4:	ldr	r3, [pc, #372]	; (6000123c <ResetHandler+0x210>)
600010c6:	str	r1, [r2, #0]
600010c8:	add.w	r1, r3, #704	; 0x2c0
600010cc:	ldr	r2, [pc, #368]	; (60001240 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010ce:	str.w	r2, [r3, #4]!
600010d2:	cmp	r1, r3
600010d4:	bne.n	600010ce <ResetHandler+0xa2>
600010d6:	ldr	r3, [pc, #364]	; (60001244 <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d8:	movs	r1, #128	; 0x80
600010da:	ldr	r2, [pc, #364]	; (60001248 <ResetHandler+0x21c>)
600010dc:	strb.w	r1, [r3], #1
600010e0:	cmp	r3, r2
600010e2:	bne.n	600010dc <ResetHandler+0xb0>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e4:	ldr	r4, [pc, #356]	; (6000124c <ResetHandler+0x220>)
600010e6:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ea:	ldr	r6, [pc, #356]	; (60001250 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010ec:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f0:	ldr.w	sl, [pc, #412]	; 60001290 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f4:	movs	r5, #0
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f6:	ldr	r3, [pc, #348]	; (60001254 <ResetHandler+0x228>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f8:	ldr.w	r9, [pc, #408]	; 60001294 <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fc:	ldr.w	r8, [pc, #408]	; 60001298 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001100:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001104:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001108:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000110c:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001110:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001114:	ldr	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001116:	ldr	r1, [pc, #240]	; (60001208 <ResetHandler+0x1dc>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001122:	ldr	r3, [r6, #36]	; 0x24
60001124:	bic.w	r3, r3, #127	; 0x7f
60001128:	orr.w	r3, r3, #64	; 0x40
6000112c:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001130:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001136:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113a:	ldr	r2, [pc, #284]	; (60001258 <ResetHandler+0x22c>)
6000113c:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
6000113e:	ldr	r3, [pc, #284]	; (6000125c <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001140:	ldr	r1, [pc, #284]	; (60001260 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001142:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001144:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001146:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001148:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000114c:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	ldr	r1, [pc, #272]	; (60001264 <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001152:	ldr	r2, [pc, #276]	; (60001268 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001154:	ldr	r0, [pc, #276]	; (6000126c <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115a:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r2, [pc, #272]	; (60001270 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001162:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #268]	; (60001274 <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001168:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r1, [pc, #264]	; (60001278 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	orr.w	r3, r3, #1
60001172:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001174:	ldr	r3, [r0, #0]
60001176:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001178:	bl	6000183c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000117c:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001180:	ldr	r0, [pc, #248]	; (6000127c <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001182:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001186:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118a:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000118e:	bl	60001b58 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001192:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001194:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x254>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001196:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119a:	ldr	r3, [pc, #232]	; (60001284 <ResetHandler+0x258>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119c:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000119e:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a0:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a4:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011a8:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ac:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b0:	ldr	r2, [r3, #56]	; 0x38
600011b2:	lsls	r2, r2, #31
600011b4:	bmi.n	600011c8 <ResetHandler+0x19c>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b6:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011ba:	ldr	r1, [pc, #204]	; (60001288 <ResetHandler+0x25c>)
600011bc:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011be:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c0:	ldr	r2, [r3, #56]	; 0x38
600011c2:	orr.w	r2, r2, #1
600011c6:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011c8:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x258>)
600011ca:	ldr	r4, [pc, #192]	; (6000128c <ResetHandler+0x260>)
600011cc:	ldr	r3, [r2, #8]
600011ce:	orr.w	r3, r3, #65537	; 0x10001
600011d2:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011d4:	bl	60001480 <configure_external_ram>
#endif
	startup_early_hook();
600011d8:	bl	60001b70 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011dc:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011de:	cmp	r3, #19
600011e0:	bls.n	600011dc <ResetHandler+0x1b0>
	usb_init();
600011e2:	bl	6000129c <usb_init>
	analog_init();
600011e6:	bl	600019bc <analog_init>
	pwm_init();
600011ea:	bl	60001b88 <__pwm_init_veneer>
	tempmon_init();
600011ee:	bl	600018a0 <tempmon_init>

	startup_late_hook();
600011f2:	bl	60001ba0 <__startup_late_hook_veneer>
600011f6:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f8:	cmp.w	r3, #300	; 0x12c
600011fc:	bcc.n	600011f6 <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fe:	bl	60001b60 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001202:	bl	60001b90 <__main_veneer>
60001206:	b.n	60001206 <ResetHandler+0x1da>
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaabf
60001210:	.word	0x00200007
60001214:	.word	0x20068000
60001218:	.word	0x00000000
6000121c:	.word	0x60001bc0
60001220:	.word	0x00010898
60001224:	.word	0x20000000
60001228:	.word	0x6001245c
6000122c:	.word	0x20001608
60001230:	.word	0x20001608
60001234:	.word	0x20008b00
60001238:	.word	0xe000ed88
6000123c:	.word	0x200087fc
60001240:	.word	0x0000af01
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x0000b681
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x0000b685
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20006d9c
6000127c:	.word	0x179a7b00
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20006da4
60001290:	.word	0x20008800
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	60001b78 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	60001b98 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #768	; 0x300
6000132a:	bl	60001b80 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20008000
6000137c:	.word	0x20008800
60001380:	.word	0x0000a619
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000138a:	ldr	r2, [pc, #160]	; (6000142c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000138e:	ldr	r3, [pc, #160]	; (60001430 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001390:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r4, [pc, #156]	; (60001434 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001396:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001398:	ldr.w	lr, [pc, #216]	; 60001474 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000139c:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139e:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013a0:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013a2:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013a6:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013aa:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013ac:	ldr.w	lr, [pc, #200]	; 60001478 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b0:	ldr	r7, [pc, #132]	; (60001438 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013b6:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013ba:	ldr	r6, [pc, #128]	; (6000143c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013bc:	ldr	r7, [pc, #128]	; (60001440 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013be:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c0:	ldr	r1, [pc, #128]	; (60001444 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013c4:	ldr	r6, [pc, #128]	; (60001448 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c6:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ca:	ldr	r7, [pc, #128]	; (6000144c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013cc:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d0:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013d4:	ldr	r6, [pc, #120]	; (60001450 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013d6:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013da:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013dc:	ldr.w	lr, [pc, #156]	; 6000147c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013e0:	ldr	r6, [pc, #112]	; (60001454 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e2:	ldr	r1, [pc, #116]	; (60001458 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013e4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013ec:	ldr	r7, [pc, #108]	; (6000145c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ee:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f0:	ldr	r6, [pc, #108]	; (60001460 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013f2:	ldr	r1, [pc, #112]	; (60001464 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013f4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
600013f8:	ldr	r7, [pc, #108]	; (60001468 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fa:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fc:	ldr	r6, [pc, #108]	; (6000146c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600013fe:	ldr	r1, [pc, #112]	; (60001470 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001400:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001402:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001404:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001406:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001408:	dsb	sy
	asm("isb");
6000140c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001410:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001414:	dsb	sy
	asm("isb");
60001418:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000141c:	ldr.w	r3, [r2, #-136]
60001420:	orr.w	r3, r3, #196608	; 0x30000
60001424:	str.w	r3, [r2, #-136]
60001428:	pop	{r4, r5, r6, r7, pc}
6000142a:	nop
6000142c:	.word	0xe000ed9c
60001430:	.word	0xe000eda0
60001434:	.word	0xe000ed94
60001438:	.word	0x00100009
6000143c:	.word	0x00200013
60001440:	.word	0x07020021
60001444:	.word	0x20008b00
60001448:	.word	0x20000014
6000144c:	.word	0x13080025
60001450:	.word	0x10000009
60001454:	.word	0x40000017
60001458:	.word	0x13100033
6000145c:	.word	0x60000018
60001460:	.word	0x070b002f
60001464:	.word	0x70000019
60001468:	.word	0x170b0037
6000146c:	.word	0x7000001a
60001470:	.word	0x130b002f
60001474:	.word	0x1000003f
60001478:	.word	0x03080025
6000147c:	.word	0x20200016

60001480 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001480:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001482:	ldr	r3, [pc, #564]	; (600016b8 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001484:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001486:	ldr	r6, [pc, #564]	; (600016bc <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001488:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000148a:	ldr	r1, [pc, #564]	; (600016c0 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000148c:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001490:	ldr	r5, [pc, #560]	; (600016c4 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001492:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001496:	ldr	r4, [pc, #560]	; (600016c8 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001498:	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000149a:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000149e:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600014a2:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600014a4:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600014a8:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014ac:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014b0:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014b4:	ldr	r1, [pc, #532]	; (600016cc <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014b6:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014ba:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014be:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600014c2:	ldr	r6, [pc, #524]	; (600016d0 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600014c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600014c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600014c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600014ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600014cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600014ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600014d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600014d6:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014da:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014de:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600014e2:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600014e6:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600014ea:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600014ee:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600014f2:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014f6:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600014f8:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600014fa:	ldr	r0, [pc, #472]	; (600016d4 <configure_external_ram+0x254>)
600014fc:	ands	r0, r3
600014fe:	ldr	r3, [pc, #472]	; (600016d8 <configure_external_ram+0x258>)
60001500:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001502:	ldr	r0, [pc, #472]	; (600016dc <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001504:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001506:	ldr.w	r3, [r6, #132]	; 0x84
6000150a:	orr.w	r3, r3, #12
6000150e:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001512:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001514:	ldr	r3, [r0, #0]
60001516:	orrs	r3, r6
60001518:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000151a:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000151c:	and.w	lr, r3, lr
60001520:	ldr	r3, [pc, #444]	; (600016e0 <configure_external_ram+0x260>)
60001522:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001526:	ldr.w	lr, [pc, #496]	; 60001718 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000152a:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000152c:	ldr	r3, [pc, #436]	; (600016e4 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000152e:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001530:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001534:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001536:	ldr	r7, [pc, #432]	; (600016e8 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001538:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000153c:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000153e:	ldr	r3, [r0, #12]
60001540:	bic.w	r3, r3, #120	; 0x78
60001544:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001546:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001548:	ands	r7, r3
6000154a:	ldr	r3, [pc, #416]	; (600016ec <configure_external_ram+0x26c>)
6000154c:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000154e:	ldr	r7, [pc, #408]	; (600016e8 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001550:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001552:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001554:	ands	r7, r3
60001556:	ldr	r3, [pc, #404]	; (600016ec <configure_external_ram+0x26c>)
60001558:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000155a:	ldr	r7, [pc, #404]	; (600016f0 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000155c:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000155e:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001560:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001562:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001566:	ldr	r7, [pc, #396]	; (600016f4 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001568:	bic.w	r3, r3, #63	; 0x3f
6000156c:	orr.w	r3, r3, #1
60001570:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001574:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001578:	ldr.w	lr, [pc, #388]	; 60001700 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000157c:	bic.w	r3, r3, #63	; 0x3f
60001580:	orr.w	r3, r3, #1
60001584:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001588:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000158a:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000158c:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000158e:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001592:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001594:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001596:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000159a:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000159c:	ldr	r3, [pc, #344]	; (600016f8 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000159e:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015a2:	ldr	r2, [pc, #344]	; (600016fc <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015a4:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015a6:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015aa:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015ac:	str.w	r1, [r3], #4
600015b0:	cmp	r3, r2
600015b2:	bne.n	600015ac <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015b4:	ldr	r3, [pc, #292]	; (600016dc <configure_external_ram+0x25c>)
600015b6:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015b8:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015ba:	orr.w	r2, r2, #1
600015be:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015c0:	ldr	r3, [r1, #0]
600015c2:	ldr	r2, [pc, #280]	; (600016dc <configure_external_ram+0x25c>)
600015c4:	ands.w	r3, r3, #1
600015c8:	bne.n	600015c0 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015ca:	ldr	r6, [pc, #308]	; (60001700 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015cc:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015ce:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015d2:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600015d6:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600015da:	ldr	r7, [pc, #296]	; (60001704 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015dc:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600015de:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015e2:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600015e4:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015e8:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600015ec:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015f0:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015f4:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600015f6:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fa:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600015fc:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001600:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001604:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001608:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000160c:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001610:	ldr	r6, [pc, #244]	; (60001708 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001612:	ldr	r5, [pc, #248]	; (6000170c <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001614:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001618:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000161c:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001620:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001624:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001628:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000162c:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001630:	ldr	r3, [r1, #20]
60001632:	ldr	r2, [pc, #168]	; (600016dc <configure_external_ram+0x25c>)
60001634:	lsls	r5, r3, #31
60001636:	bpl.n	60001630 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001638:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000163a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163c:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001640:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001642:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001644:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001648:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000164c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001650:	ldr	r3, [r1, #20]
60001652:	ldr	r2, [pc, #136]	; (600016dc <configure_external_ram+0x25c>)
60001654:	lsls	r4, r3, #31
60001656:	bpl.n	60001650 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001658:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000165a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000165c:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001660:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001662:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001664:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001668:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000166c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001670:	ldr	r3, [r1, #20]
60001672:	ldr	r2, [pc, #104]	; (600016dc <configure_external_ram+0x25c>)
60001674:	lsls	r0, r3, #31
60001676:	bpl.n	60001670 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001678:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000167a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000167c:	ldr	r0, [pc, #144]	; (60001710 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000167e:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001680:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001682:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001686:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000168a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000168e:	ldr	r3, [r1, #20]
60001690:	ldr	r2, [pc, #72]	; (600016dc <configure_external_ram+0x25c>)
60001692:	lsls	r3, r3, #31
60001694:	bpl.n	6000168e <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
60001696:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000169a:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000169e:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016a0:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016a2:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016a4:	cmp	r3, r1
600016a6:	beq.n	6000171c <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600016a8:	ldr	r3, [pc, #104]	; (60001714 <configure_external_ram+0x294>)
600016aa:	movs	r2, #0
600016ac:	str	r2, [r3, #0]
600016ae:	str	r2, [r3, #4]
600016b0:	str	r2, [r3, #8]
600016b2:	str	r2, [r3, #12]
	}
}
600016b4:	add	sp, #12
600016b6:	pop	{r4, r5, r6, r7, pc}
600016b8:	.word	0x401f8000
600016bc:	.word	0x000170f9
600016c0:	.word	0x0001b0f9
600016c4:	.word	0x000110f9
600016c8:	.word	0x000100f9
600016cc:	.word	0x401f8400
600016d0:	.word	0x400fc000
600016d4:	.word	0x1ffffcff
600016d8:	.word	0xa0000300
600016dc:	.word	0x402a4000
600016e0:	.word	0xffff0012
600016e4:	.word	0x00f737ff
600016e8:	.word	0x7cf0ff00
600016ec:	.word	0x80000040
600016f0:	.word	0x830f00ff
600016f4:	.word	0x00020063
600016f8:	.word	0x402a4200
600016fc:	.word	0x402a4300
60001700:	.word	0x5af05af0
60001704:	.word	0x3018049f
60001708:	.word	0x26013206
6000170c:	.word	0x0a180638
60001710:	.word	0x00030004
60001714:	.word	0x20008400
60001718:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000171c:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000171e:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001722:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001724:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001726:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000172a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000172e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001732:	ldr	r3, [r1, #20]
60001734:	ldr	r2, [pc, #236]	; (60001824 <configure_external_ram+0x3a4>)
60001736:	lsls	r7, r3, #31
60001738:	bpl.n	60001732 <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000173a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000173c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001740:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001742:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001744:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001746:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000174a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000174e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001752:	ldr	r3, [r1, #20]
60001754:	ldr	r2, [pc, #204]	; (60001824 <configure_external_ram+0x3a4>)
60001756:	lsls	r6, r3, #31
60001758:	bpl.n	60001752 <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000175a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000175c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001760:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001764:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001766:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001768:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000176c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001770:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001774:	ldr	r3, [r1, #20]
60001776:	ldr	r2, [pc, #172]	; (60001824 <configure_external_ram+0x3a4>)
60001778:	lsls	r5, r3, #31
6000177a:	bpl.n	60001774 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000177c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000177e:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001782:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001786:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001788:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000178a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000178e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001792:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001796:	ldr	r3, [r1, #20]
60001798:	ldr	r2, [pc, #136]	; (60001824 <configure_external_ram+0x3a4>)
6000179a:	lsls	r4, r3, #31
6000179c:	bpl.n	60001796 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000179e:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017a0:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017a4:	ldr	r0, [pc, #128]	; (60001828 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017a6:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017a8:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017aa:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017ae:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017b2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017b6:	ldr	r3, [r1, #20]
600017b8:	ldr	r2, [pc, #104]	; (60001824 <configure_external_ram+0x3a4>)
600017ba:	lsls	r0, r3, #31
600017bc:	bpl.n	600017b6 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
600017be:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017c2:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017c6:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017c8:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017ca:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017cc:	cmp	r3, r1
600017ce:	beq.n	600017f2 <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
600017d0:	ldr	r3, [pc, #88]	; (6000182c <configure_external_ram+0x3ac>)
600017d2:	movs	r2, #8
600017d4:	mov.w	r4, #8388608	; 0x800000
600017d8:	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600017da:	ldr	r1, [pc, #84]	; (60001830 <configure_external_ram+0x3b0>)
600017dc:	movs	r0, #0
600017de:	ldr	r2, [pc, #84]	; (60001834 <configure_external_ram+0x3b4>)
600017e0:	movs	r3, #1
600017e2:	str	r0, [sp, #0]
600017e4:	subs	r2, r2, r1
600017e6:	ldr	r0, [pc, #80]	; (60001838 <configure_external_ram+0x3b8>)
600017e8:	add	r2, r4
600017ea:	bl	60001b68 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
600017ee:	add	sp, #12
600017f0:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017f2:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017f6:	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017fa:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017fc:	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017fe:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001802:	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001806:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000180a:	ldr	r3, [r0, #20]
6000180c:	ldr	r1, [pc, #20]	; (60001824 <configure_external_ram+0x3a4>)
6000180e:	lsls	r3, r3, #31
60001810:	bpl.n	6000180a <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001812:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001814:	ldr	r3, [pc, #20]	; (6000182c <configure_external_ram+0x3ac>)
60001816:	movs	r2, #16
60001818:	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000181c:	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000181e:	strb	r2, [r3, #0]
60001820:	b.n	600017da <configure_external_ram+0x35a>
60001822:	nop
60001824:	.word	0x402a4000
60001828:	.word	0x00030004
6000182c:	.word	0x20006da8
60001830:	.word	0x70000000
60001834:	.word	0x70000000
60001838:	.word	0x20008400

6000183c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000183c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000183e:	ldr	r2, [pc, #92]	; (6000189c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001840:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001842:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001846:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000184a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000184e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001852:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001856:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001858:	tst.w	r3, #2
6000185c:	beq.n	6000186c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000185e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001860:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001862:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001864:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001866:	tst.w	r3, #2
6000186a:	bne.n	6000185e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000186c:	tst.w	r3, #8192	; 0x2000
60001870:	bne.n	60001876 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001872:	str	r5, [r2, #20]
			continue;
60001874:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001876:	tst.w	r3, #4096	; 0x1000
6000187a:	bne.n	60001880 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000187c:	str	r6, [r2, #20]
			continue;
6000187e:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001880:	cmp	r3, #0
60001882:	bge.n	60001856 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001884:	tst.w	r3, #65536	; 0x10000
60001888:	beq.n	6000188e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000188a:	str	r1, [r2, #24]
			continue;
6000188c:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000188e:	lsls	r3, r3, #25
60001890:	bmi.n	60001896 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001892:	str	r7, [r2, #20]
			continue;
60001894:	b.n	60001856 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001896:	pop	{r4, r5, r6, r7}
60001898:	bx	lr
6000189a:	nop
6000189c:	.word	0x400d8000

600018a0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018a0:	ldr	r2, [pc, #236]	; (60001990 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018a2:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018a6:	ldr	r1, [pc, #236]	; (60001994 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018a8:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018aa:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600018ac:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018ae:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018b2:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018b4:	ldr.w	lr, [pc, #256]	; 600019b8 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018b8:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018ba:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018be:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018c2:	ldr	r7, [pc, #212]	; (60001998 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018c4:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600018c6:	ubfx	r4, r3, #8, #12
600018ca:	ldr	r6, [pc, #208]	; (6000199c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018cc:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018d0:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018d4:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018d8:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018dc:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e0:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e4:	vmov	s15, r4
600018e8:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018ec:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018ee:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018f2:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018f6:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018fa:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018fc:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001900:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001904:	ldr	r5, [pc, #152]	; (600019a0 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001906:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000190a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000190c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001910:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001914:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001916:	vdiv.f32	s11, s14, s13
6000191a:	ldr	r6, [pc, #136]	; (600019a4 <tempmon_init+0x104>)
6000191c:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000191e:	ldr	r1, [pc, #136]	; (600019a8 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001920:	ldr	r4, [pc, #136]	; (600019ac <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001922:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001926:	vmov	s15, r3
6000192a:	ldr	r3, [pc, #132]	; (600019b0 <tempmon_init+0x110>)
6000192c:	str.w	r3, [r6, #320]	; 0x140
60001930:	vcvt.f32.u32	s15, s15
60001934:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001938:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000193c:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001940:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001944:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001948:	vmov	r3, s11
6000194c:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001950:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001954:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001958:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000195a:	and.w	r1, r1, r5, lsl #16
6000195e:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001962:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001966:	orrs	r3, r1
60001968:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000196c:	vmov	r3, s15
60001970:	ldr.w	r1, [r2, #272]	; 0x110
60001974:	ubfx	r3, r3, #0, #12
60001978:	orrs	r3, r1
6000197a:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000197e:	ldr	r3, [r2, #0]
60001980:	orr.w	r3, r3, #2
60001984:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001986:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001988:	ldr	r3, [pc, #40]	; (600019b4 <tempmon_init+0x114>)
6000198a:	movs	r2, #1
6000198c:	str	r2, [r3, #0]
6000198e:	pop	{r4, r5, r6, r7, pc}
60001990:	.word	0x400d8180
60001994:	.word	0x401f4400
60001998:	.word	0x20006db4
6000199c:	.word	0x20006db8
600019a0:	.word	0x20006db0
600019a4:	.word	0x20008800
600019a8:	.word	0x0fff0000
600019ac:	.word	0xe000e440
600019b0:	.word	0x0000b0c1
600019b4:	.word	0xe000e108
600019b8:	.word	0x20006dac

600019bc <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019bc:	ldr	r3, [pc, #68]	; (60001a04 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019be:	ldr	r1, [pc, #72]	; (60001a08 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019c0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019c2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019c4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600019c8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019ca:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019cc:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019d0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019d2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019d4:	orr.w	r0, r0, #768	; 0x300
600019d8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019da:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019dc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019de:	ldr	r3, [r2, #72]	; 0x48
600019e0:	lsls	r3, r3, #24
600019e2:	bmi.n	600019de <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019e4:	ldr	r3, [pc, #36]	; (60001a0c <analog_init+0x50>)
600019e6:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019ea:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019ec:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ee:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019f0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019f2:	ldr	r3, [r2, #72]	; 0x48
600019f4:	ands.w	r3, r3, #128	; 0x80
600019f8:	bne.n	600019f2 <analog_init+0x36>
	calibrating = 0;
600019fa:	ldr	r2, [pc, #20]	; (60001a10 <analog_init+0x54>)
600019fc:	strb	r3, [r2, #0]
}
600019fe:	pop	{r4, r5}
60001a00:	bx	lr
60001a02:	nop
60001a04:	.word	0x400fc000
60001a08:	.word	0x400c4000
60001a0c:	.word	0x400c8000
60001a10:	.word	0x20006df5

60001a14 <usb_string_mtp>:
60001a14:	..M.T.P.

60001a1c <usb_string_product_name_default>:
60001a1c:	..T.e.e.n.s.y. .
60001a2c:	M.T.P. .D.i.s.k.
60001a3c:	/.S.e.r.i.a.l...

60001a4c <usb_string_manufacturer_name_default>:
60001a4c:	..T.e.e.n.s.y.d.
60001a5c:	u.i.n.o.

60001a64 <string0>:
60001a64:	....

60001a68 <usb_config_descriptor_12>:
60001a68:	..i.....2.......
60001a78:	...........$....
60001a88:	$....$...$......
60001a98:	................
60001aa8:	.@......@.......
60001ab8:	........@......@
60001ac8:	............

60001ad4 <usb_config_descriptor_480>:
60001ad4:	..i.....2.......
60001ae4:	...........$....
60001af4:	$....$...$......
60001b04:	................
60001b14:	................
60001b24:	................
60001b34:	............

60001b40 <qualifier_descriptor>:
60001b40:	.......@..

60001b4a <_serialEvent_default>:
60001b4a:	..

60001b4c <_init>:
60001b4c:	push	{r3, r4, r5, r6, r7, lr}
60001b4e:	nop
60001b50:	pop	{r3, r4, r5, r6, r7}
60001b52:	pop	{r3}
60001b54:	mov	lr, r3
60001b56:	bx	lr

60001b58 <__set_arm_clock_veneer>:
60001b58:	ldr.w	pc, [pc]	; 60001b5c <__set_arm_clock_veneer+0x4>
60001b5c:	.word	0x0000b7fd

60001b60 <____libc_init_array_veneer>:
60001b60:	ldr.w	pc, [pc]	; 60001b64 <____libc_init_array_veneer+0x4>
60001b64:	.word	0x0000c76d

60001b68 <__sm_set_pool_veneer>:
60001b68:	ldr.w	pc, [pc]	; 60001b6c <__sm_set_pool_veneer+0x4>
60001b6c:	.word	0x0000b031

60001b70 <__startup_early_hook_veneer>:
60001b70:	ldr.w	pc, [pc]	; 60001b74 <__startup_early_hook_veneer+0x4>
60001b74:	.word	0x0000af19

60001b78 <__usb_init_serialnumber_veneer>:
60001b78:	ldr.w	pc, [pc]	; 60001b7c <__usb_init_serialnumber_veneer+0x4>
60001b7c:	.word	0x0000b475

60001b80 <__memset_veneer>:
60001b80:	ldr.w	pc, [pc]	; 60001b84 <__memset_veneer+0x4>
60001b84:	.word	0x0000cf4d

60001b88 <__pwm_init_veneer>:
60001b88:	ldr.w	pc, [pc]	; 60001b8c <__pwm_init_veneer+0x4>
60001b8c:	.word	0x0000b1bd

60001b90 <__main_veneer>:
60001b90:	ldr.w	pc, [pc]	; 60001b94 <__main_veneer+0x4>
60001b94:	.word	0x0000b7e1

60001b98 <__delay_veneer>:
60001b98:	ldr.w	pc, [pc]	; 60001b9c <__delay_veneer+0x4>
60001b9c:	.word	0x0000add1

60001ba0 <__startup_late_hook_veneer>:
60001ba0:	ldr.w	pc, [pc]	; 60001ba4 <__startup_late_hook_veneer+0x4>
60001ba4:	.word	0x0000af1d

60001ba8 <__init_array_start>:
60001ba8:	.word	0x00000045
60001bac:	.word	0x00000bfd
60001bb0:	.word	0x00003d9d

60001bb4 <__init_array_end>:
60001bb4:	.word	0xffffffff
60001bb8:	.word	0xffffffff
60001bbc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r1, #24
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	lsrs	r4, r2, #2
      42:	.short	0x0001

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	.word	0xf3af4808
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r1, #24
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	lsrs	r4, r2, #2
  ADC2_CFG = mode1;
      72:	.short	0x0001
  
  if(num >= 4){
      74:	asrs	r0, r1, #24
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      7c:	movs	r0, #0
      7e:	bx	lr

00000080 <Print::flush()>:
	virtual void flush()				{ }
      80:	bx	lr
      82:	nop

00000084 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
      84:	mov.w	r0, #4294967295
      88:	.word	0xbf004770

0000008c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
      8c:	ldr	r0, [r0, #16]
      8e:	.short	0xb110
      90:	ldr	r3, [r0, #0]
      92:	.short	0x6a9b
      94:	bx	r3
	}
      96:	.short	0x4770

00000098 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
      98:	ldr	r0, [r0, #16]
      9a:	.short	0xb110
      9c:	ldr	r3, [r0, #0]
      9e:	ldr	r3, [r3, #44]	; 0x2c
      a0:	.word	0x47704718

000000a4 <File::available()>:
	}
	virtual int available() {
		return (f) ? f->available() : 0;
      a4:	ldr	r0, [r0, #16]
      a6:	cbz	r0, ae <File::available()+0xa>
      a8:	ldr	r3, [r0, #0]
      aa:	ldr	r3, [r3, #16]
      ac:	bx	r3
	}
      ae:	bx	lr

000000b0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
      b0:	.word	0xb1106900
      b4:	ldr	r3, [r0, #0]
      b6:	ldr	r3, [r3, #24]
      b8:	.word	0xf04f4718
	}
      bc:	adds	r0, #255	; 0xff
      be:	bx	lr

000000c0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
      c0:	ldr	r0, [r0, #16]
      c2:	cbz	r0, ca <File::flush()+0xa>
      c4:	ldr	r3, [r0, #0]
      c6:	ldr	r3, [r3, #12]
      c8:	bx	r3
      ca:	bx	lr

000000cc <File::seek(unsigned long, int)>:
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
      cc:	.word	0xb1106900
      d0:	ldr	r3, [r0, #0]
      d2:	.short	0x6b1b
      d4:	bx	r3
	}
      d6:	.short	0x4770

000000d8 <File::position()>:
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
      d8:	ldr	r0, [r0, #16]
      da:	.short	0xb110
      dc:	ldr	r3, [r0, #0]
      de:	.short	0x6b5b
      e0:	bx	r3
	}
      e2:	.short	0x4770

000000e4 <File::size()>:
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
      e4:	ldr	r0, [r0, #16]
      e6:	cbz	r0, ee <File::size()+0xa>
      e8:	ldr	r3, [r0, #0]
      ea:	ldr	r3, [r3, #56]	; 0x38
      ec:	bx	r3
	}
      ee:	bx	lr

000000f0 <File::close()>:
	virtual void close() {
		if (f) f->close();
      f0:	ldr	r0, [r0, #16]
      f2:	cbz	r0, fa <File::close()+0xa>
      f4:	ldr	r3, [r0, #0]
      f6:	ldr	r3, [r3, #60]	; 0x3c
      f8:	bx	r3
      fa:	bx	lr

000000fc <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
      fc:	.word	0xb1106900
     100:	ldr	r3, [r0, #0]
     102:	ldr	r3, [r3, #64]	; 0x40
     104:	bx	r3
	}
     106:	bx	lr

00000108 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     108:	ldr	r0, [r0, #16]
     10a:	cbz	r0, 112 <File::name()+0xa>
     10c:	ldr	r3, [r0, #0]
     10e:	ldr	r3, [r3, #68]	; 0x44
     110:	bx	r3
	}
     112:	.short	0x4801
     114:	bx	lr
     116:	nop
     118:	lsls	r4, r6, #5
     11a:	movs	r0, #0

0000011c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     11c:	ldr	r0, [r0, #16]
     11e:	cbz	r0, 126 <File::isDirectory()+0xa>
     120:	ldr	r3, [r0, #0]
     122:	ldr	r3, [r3, #72]	; 0x48
     124:	bx	r3
	}
     126:	bx	lr

00000128 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     128:	.word	0x690bb538
     12c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     12e:	cbz	r3, 13c <File::openNextFile(unsigned char)+0x14>
     130:	.word	0x4619681d
     134:	ldr	r3, [r5, #76]	; 0x4c
     136:	.short	0x4798
	}
     138:	mov	r0, r4
     13a:	.short	0xbd38
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     13c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     140:	.word	0x71234a06
     144:	strb	r3, [r4, #12]
     146:	.short	0x60a0
     148:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     14a:	.short	0x690b
     14c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     14e:	cmp	r3, #0
     150:	.word	0x691ad0f2
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     154:	mov	r0, r4
	File(const File &file) {
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
		if (f) f->refcount++;
     156:	.short	0x3201
     158:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     15a:	.short	0xbd38
     15c:	lsls	r4, r6, #1
     15e:	.short	0x2000

00000160 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     160:	ldr	r0, [r0, #16]
     162:	cbz	r0, 16a <File::rewindDirectory()+0xa>
     164:	.word	0x6d1b6803
     168:	bx	r3
     16a:	.short	0x4770

0000016c <File::read()>:
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     16c:	ldr	r0, [r0, #16]
     16e:	cbz	r0, 192 <File::read()+0x26>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     170:	ldr	r3, [r0, #0]
     172:	movs	r2, #1
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     174:	.word	0xb083b500
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     178:	ldr	r3, [r3, #40]	; 0x28
     17a:	.short	0xf10d
     17c:	lsls	r7, r0, #4
     17e:	blx	r3
     180:	.word	0xf89db120
		return b;
     184:	movs	r7, r0
	}
     186:	.short	0xb003
     188:	ldr.w	pc, [sp], #4
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     18c:	mov.w	r0, #4294967295
     190:	.word	0xf04fe7f9
     194:	adds	r0, #255	; 0xff
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     196:	.short	0x4770

00000198 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     198:	push	{r4, lr}
     19a:	.short	0xb082
		return write(&b, 1);
     19c:	ldr	r4, [r0, #0]
     19e:	.short	0x2201
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     1a0:	add	r3, sp, #8
     1a2:	.short	0xf803
     1a4:	adds	r1, r0, #4
		return write(&b, 1);
     1a6:	.short	0x4619
     1a8:	ldr	r3, [r4, #44]	; 0x2c
     1aa:	blx	r3
	}
     1ac:	.word	0xbd10b002

000001b0 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     1b0:	ldr	r3, [r0, #92]	; 0x5c
     1b2:	.short	0xb10b
     1b4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     1b6:	.short	0x4770
     1b8:	ldr	r0, [r0, #96]	; 0x60
     1ba:	.short	0x3000
     1bc:	it	ne
     1be:	.short	0x2001
     1c0:	bx	lr	; unpredictable branch in IT block

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
     1c2:	nopne

000001c4 <__tcf_0>:

  const char *sd_str[]={"sdio","sd1","sd2","sd3","sd4","sd5","sd6"}; // edit to rflect configuration
  const int cs[] = {BUILTIN_SDCARD,34,33,35,36,37,38}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
     1c4:	.word	0xbf004770

000001c8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     1c8:	push	{r4, lr}
     1ca:	.short	0x4604
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     1cc:	ldr	r1, [pc, #24]	; (1e8 <File::whoami()+0x20>)
     1ce:	.short	0x4807
     1d0:	ldr	r3, [r4, #16]
     1d2:	.short	0x4622
     1d4:	bl	b728 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     1d8:	.word	0xb1206920
     1dc:	ldr	r3, [r0, #0]
	}
     1de:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     1e2:	.short	0x6a5b
     1e4:	bx	r3
     1e6:	.short	0xbd10
     1e8:	lsls	r4, r3, #5
     1ea:	.short	0x2000
     1ec:	lsrs	r0, r1, #17
     1ee:	.short	0x2000

000001f0 <SDFile::whoami()>:
	virtual ~SDFile(void) {
		if (sdfatfile) sdfatfile.close();
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
     1f0:	mov	r2, r0
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     1f2:	ldr	r1, [pc, #8]	; (1fc <SDFile::whoami()+0xc>)
     1f4:	.word	0x69134802
     1f8:	b.w	b728 <Print::printf(char const*, ...)>
     1fc:	.word	0x20000178
     200:	lsrs	r0, r1, #17
     202:	.short	0x2000

00000204 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     204:	push	{r4, lr}
     206:	.short	0x4604
		if (filename) {
     208:	ldr	r0, [r0, #100]	; 0x64
     20a:	.short	0xb118
			free(filename);
     20c:	bl	c7cc <free>
			filename = nullptr;
     210:	.word	0x66632300
		}
		sdfatfile.close();
     214:	add.w	r0, r4, #36	; 0x24
	}
     218:	.word	0x4010e8bd
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     21c:	b.w	7ea4 <FsBaseFile::close()>

00000220 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     220:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     224:	movs	r3, #0
     226:	sub	sp, #80	; 0x50
     228:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     22c:	ldr	r7, [pc, #152]	; (2c8 <SDFile::openNextFile(unsigned char)+0xa8>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     22e:	mov	r2, r3
     230:	.word	0x31244605
     234:	add	r0, sp, #16
     236:	.short	0xf88d
     238:	adds	r0, #4
     23a:	.short	0xf88d
     23c:	adds	r0, #12
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     23e:	.short	0x9312
     240:	str	r3, [sp, #76]	; 0x4c
     242:	.short	0x9402
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     244:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     246:	.short	0xf007
     248:	vmaxnm.f64	d9, d1, d2
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     24c:	.word	0xd0312b00
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     250:	movs	r0, #104	; 0x68
     252:	.short	0x2600
     254:	bl	b7f4 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     258:	.word	0x3004f89d
     25c:	mov	r4, r0
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     25e:	.short	0x4a1b
     260:	mov.w	r8, #1000	; 0x3e8
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     264:	.word	0x76233024
     268:	add	r1, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     26a:	.short	0x9b02
     26c:	str	r2, [r4, #0]
     26e:	.short	0x61e3
     270:	ldr	r2, [pc, #92]	; (2d0 <SDFile::openNextFile(unsigned char)+0xb0>)
     272:	.short	0xf89d
     274:	adds	r0, #12
     276:	str	r2, [r4, #20]
     278:	.word	0x3020f884
{
  public:
	constexpr Print() : write_error(0) {}
     27c:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     27e:	.short	0x7326

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     280:	str	r6, [r4, #16]
     282:	.short	0xf8c4
     284:	strh	r0, [r1, #0]
     286:	.short	0xf007
     288:	stc2l	9, cr6, [fp, #140]	; 0x8c
	File(File *file) {
     28c:	.word	0x33014a11
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     290:	str	r7, [r4, #20]
     292:	.short	0x6666
     294:	strb	r6, [r5, #4]
     296:	.short	0xf8c5
     298:	strh	r0, [r1, #0]
     29a:	.short	0x732e
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     29c:	str	r4, [r5, #16]
		if (f) f->refcount++;
     29e:	.short	0x6123
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     2a0:	str	r2, [r5, #0]
     2a2:	.short	0x4b0d
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     2a4:	add	r0, sp, #16
     2a6:	.short	0x9300
     2a8:	bl	7ea4 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     2ac:	.word	0xb0144628
     2b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     2b4:	ldr	r3, [sp, #76]	; 0x4c
     2b6:	.short	0x2b00
     2b8:	bne.n	250 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     2ba:	.short	0x4a06
     2bc:	strb	r3, [r5, #4]
     2be:	str	r4, [r5, #8]
     2c0:	.word	0x612b732b
     2c4:	str	r2, [r5, #0]
     2c6:	.short	0xe7ec
     2c8:	lsls	r0, r2, #1
     2ca:	.short	0x2000
     2cc:	lsls	r0, r2, #3
     2ce:	.short	0x2000
     2d0:	movs	r0, r1
     2d2:	.short	0x2000
     2d4:	lsls	r4, r6, #1
     2d6:	.short	0x2000
     2d8:	movs	r4, r5
     2da:	.short	0x2000

000002dc <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     2dc:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     2de:	.short	0xb162
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     2e0:	ldrb	r3, [r2, #0]
     2e2:	.short	0xf003
     2e4:	lsls	r0, r1, #12
     2e6:	.short	0xf003
     2e8:	lsls	r7, r7, #3
     2ea:	.short	0xb30b
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     2ec:	ldr	r3, [r2, #28]
     2ee:	.short	0x6950
     2f0:	subs	r0, r3, r0
     2f2:	.short	0xbf48
     2f4:	mvnmi.w	r0, #2147483648	; 0x80000000
     2f8:	bx	lr
     2fa:	ldr	r1, [r0, #96]	; 0x60
     2fc:	cbz	r1, 332 <SDFile::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     2fe:	ldrb.w	r3, [r1, #49]	; 0x31
     302:	.short	0xf003
     304:	lsls	r0, r1, #12
     306:	.short	0xf003
     308:	lsls	r7, r7, #3
     30a:	cbz	r3, 330 <SDFile::available()+0x54>
     30c:	ldrd	r2, r3, [r1, #16]
     310:	.word	0x0100e9d1
     314:	push	{r4, r5}
     316:	.short	0x1a10
     318:	mov.w	r5, #0
     31c:	mvn.w	r4, #2147483648	; 0x80000000
     320:	sbc.w	r1, r3, r1
     324:	cmp	r5, r1
     326:	it	eq
     328:	.word	0xd2004284
     32c:	mov	r0, r4
		return sdfatfile.available();
	}
     32e:	popeq	{r4, r5}
     330:	.word	0x46084770
     334:	bx	lr
     336:	.short	0xbf00

00000338 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     338:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     33a:	cbz	r3, 342 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     33c:	mov	r0, r3
     33e:	b.w	6148 <FatFile::peek()>
     342:	ldr	r0, [r0, #76]	; 0x4c
     344:	cbz	r0, 34a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     346:	b.w	4228 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     34a:	mov.w	r0, #4294967295
     34e:	bx	lr

00000350 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     350:	ldr	r3, [r0, #72]	; 0x48
     352:	push	{lr}
     354:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     356:	cbz	r3, 372 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     358:	.word	0x22014618
     35c:	add.w	r1, sp, #7
     360:	.word	0xfe06f005
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     364:	cmp	r0, #1
     366:	bne.n	382 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     368:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     36c:	add	sp, #12
     36e:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     372:	ldr	r0, [r0, #76]	; 0x4c
     374:	.word	0x2201b128
     378:	add.w	r1, sp, #7
     37c:	bl	4038 <ExFatFile::read(void*, unsigned int)>
     380:	.word	0xf04fe7f0
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     384:	adds	r0, #255	; 0xff
     386:	.short	0xe7f1

00000388 <SDFile::flush()>:
	virtual void flush() {
     388:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     38a:	cbz	r3, 392 <SDFile::flush()+0xa>
     38c:	.word	0xf0064618
     390:	cbnz	r1, 3dc <SDFile::~SDFile()+0xc>
     392:	ldr	r0, [r0, #96]	; 0x60
     394:	cbz	r0, 39a <SDFile::flush()+0x12>
     396:	b.w	53fc <ExFatFile::sync()>
     39a:	.short	0x4770

0000039c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     39c:	push	{lr}
     39e:	ldr	r3, [r0, #72]	; 0x48
     3a0:	sub	sp, #12
     3a2:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     3a6:	cbz	r3, 3ba <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     3a8:	mov	r0, r3
     3aa:	movs	r2, #1
     3ac:	add.w	r1, sp, #7
     3b0:	bl	69e0 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     3b4:	add	sp, #12
     3b6:	ldr.w	pc, [sp], #4
     3ba:	ldr	r0, [r0, #76]	; 0x4c
     3bc:	.word	0xd0f92800
     3c0:	movs	r2, #1
     3c2:	.short	0xf10d
     3c4:	lsls	r7, r0, #4
     3c6:	bl	58f8 <ExFatFile::write(void const*, unsigned int)>
     3ca:	add	sp, #12
     3cc:	ldr.w	pc, [sp], #4

000003d0 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     3d0:	push	{r3, r4, r5, lr}
     3d2:	ldr	r2, [pc, #76]	; (420 <SDFile::~SDFile()+0x50>)
     3d4:	mov	r4, r0
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     3d6:	ldr	r3, [r0, #92]	; 0x5c
		if (sdfatfile) sdfatfile.close();
     3d8:	add.w	r5, r0, #36	; 0x24

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     3dc:	str	r2, [r0, #0]
     3de:	cbz	r3, 416 <SDFile::~SDFile()+0x46>
		if (sdfatfile) sdfatfile.close();
     3e0:	mov	r0, r5
     3e2:	bl	7ea4 <FsBaseFile::close()>
		if (filename) free(filename);
     3e6:	ldr	r0, [r4, #100]	; 0x64
     3e8:	cbz	r0, 3ee <SDFile::~SDFile()+0x1e>
     3ea:	bl	c7cc <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     3ee:	.short	0x4b0d
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     3f0:	mov	r0, r5
     3f2:	str	r3, [r4, #20]
     3f4:	.word	0xfd56f007
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     3f8:	ldr	r3, [pc, #44]	; (428 <SDFile::~SDFile()+0x58>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     3fa:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     3fc:	.word	0xb1426023
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     400:	ldr	r3, [r2, #16]
     402:	.short	0x3b01
     404:	str	r3, [r2, #16]
     406:	cbnz	r3, 412 <SDFile::~SDFile()+0x42>
     408:	ldr	r0, [r4, #16]
     40a:	cbz	r0, 412 <SDFile::~SDFile()+0x42>
     40c:	ldr	r3, [r0, #0]
     40e:	ldr	r3, [r3, #32]
     410:	blx	r3
	}
     412:	.short	0x4620
     414:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     416:	ldr	r3, [r0, #96]	; 0x60
     418:	cmp	r3, #0
     41a:	bne.n	3e0 <SDFile::~SDFile()+0x10>
     41c:	.word	0xbf00e7e3
     420:	lsls	r0, r2, #3
     422:	movs	r0, #0
     424:	movs	r4, r5
     426:	movs	r0, #0
     428:	lsls	r4, r6, #1
     42a:	movs	r0, #0

0000042c <SDClass::remove(char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool remove(const char *filepath) {
     42c:	push	{r4, r5, lr}
     42e:	ldr.w	r4, [r0, #1148]	; 0x47c
     432:	sub	sp, #60	; 0x3c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     434:	cbz	r4, 460 <SDClass::remove(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     436:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     438:	.word	0x4668460a
     43c:	mov	r1, r4
     43e:	movs	r3, #1
     440:	strb.w	r5, [sp]
     444:	strb.w	r5, [sp, #1]
     448:	strb.w	r5, [sp, #2]
     44c:	bl	5f60 <FatFile::open(FatVolume*, char const*, int)>
     450:	.word	0xb00fb908
		return sdfs.remove(filepath);
	}
     454:	pop	{r4, r5, pc}
     456:	mov	r0, sp
     458:	bl	7658 <FatFile::remove()>
     45c:	add	sp, #60	; 0x3c
     45e:	.short	0xbd30
     460:	ldr.w	r0, [r0, #1152]	; 0x480
     464:	.word	0xd0f42800
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     468:	mov	r2, r1
     46a:	movs	r3, #1
     46c:	mov	r1, r0
     46e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     470:	.word	0x4031f88d
     474:	strb.w	r4, [sp, #50]	; 0x32
     478:	strb.w	r4, [sp, #51]	; 0x33
     47c:	bl	48cc <ExFatFile::open(ExFatVolume*, char const*, int)>
     480:	cmp	r0, #0
     482:	.short	0xd0e6
     484:	mov	r0, sp
     486:	.short	0xf004
     488:	cdp2	0, 1, cr11, cr11, cr15, {0}
     48c:	pop	{r4, r5, pc}
     48e:	nop

00000490 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
     490:	.word	0xf8d0b530
     494:	add	r4, pc
     496:	.short	0xb08f
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     498:	cbz	r4, 4c4 <SDClass::rmdir(char const*)+0x34>
     49a:	.short	0x2500
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     49c:	mov	r2, r1
     49e:	.short	0x4668
     4a0:	mov	r1, r4
     4a2:	.short	0x462b
     4a4:	strb.w	r5, [sp]
     4a8:	strb.w	r5, [sp, #1]
     4ac:	strb.w	r5, [sp, #2]
     4b0:	.word	0xfd56f005
     4b4:	cbnz	r0, 4ba <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     4b6:	.short	0xb00f
     4b8:	pop	{r4, r5, pc}
     4ba:	.short	0x4668
     4bc:	bl	627c <FatFile::rmdir()>
     4c0:	add	sp, #60	; 0x3c
     4c2:	pop	{r4, r5, pc}
     4c4:	.word	0x0480f8d0
     4c8:	cmp	r0, #0
     4ca:	beq.n	4b6 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     4cc:	mov	r2, r1
     4ce:	.short	0x4623
     4d0:	mov	r1, r0
     4d2:	.short	0x4668
     4d4:	strb.w	r4, [sp, #49]	; 0x31
     4d8:	strb.w	r4, [sp, #50]	; 0x32
     4dc:	.word	0x4033f88d
     4e0:	bl	48cc <ExFatFile::open(ExFatVolume*, char const*, int)>
     4e4:	.word	0xd0e62800
     4e8:	mov	r0, sp
     4ea:	.short	0xf004
     4ec:	cdp2	0, 8, cr11, cr1, cr15, {0}
     4f0:	pop	{r4, r5, pc}
     4f2:	nop

000004f4 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     4f4:	.word	0x6e44b538
		if (!filename) {
     4f8:	cbz	r4, 4fe <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     4fa:	mov	r0, r4
     4fc:	.word	0x4605bd38
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     500:	mov.w	r0, #256	; 0x100
     504:	.word	0xf95af00c
     508:	mov	r1, r0
     50a:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     50c:	.word	0x6de8b180
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     510:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     512:	cbz	r0, 520 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     514:	mov.w	r2, #256	; 0x100
     518:	.word	0xfea6f006
     51c:	ldr	r4, [r5, #100]	; 0x64
     51e:	.short	0xe7ec
           m_xFile ? m_xFile->getName(name, len) : 0;
     520:	ldr	r0, [r5, #96]	; 0x60
     522:	cbz	r0, 536 <SDFile::name()+0x42>
     524:	.word	0x7280f44f
     528:	bl	3e4c <ExFatFile::getName(char*, unsigned int)>
     52c:	.word	0xe7e46e6c
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     530:	ldr	r4, [pc, #8]	; (53c <SDFile::name()+0x48>)
     532:	.short	0x666c
     534:	b.n	4fa <SDFile::name()+0x6>
     536:	.short	0x460c
     538:	b.n	4fa <SDFile::name()+0x6>
     53a:	.short	0xbf00
     53c:	asrs	r4, r4, #24
     53e:	movs	r0, #0

00000540 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     540:	push	{r4, r5, lr}
     542:	ldr.w	r4, [r0, #1148]	; 0x47c
     546:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     548:	cbz	r4, 56a <SDClass::mkdir(char const*)+0x2a>
     54a:	.short	0x2500
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     54c:	mov	r2, r1
     54e:	movs	r3, #1
     550:	add.w	r1, r4, #1088	; 0x440
     554:	.word	0xf88d4668
     558:	str	r0, [r0, r0]
     55a:	strb.w	r5, [sp, #1]
     55e:	.short	0xf88d
     560:	str	r2, [r0, r0]
     562:	bl	6688 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     566:	add	sp, #60	; 0x3c
     568:	pop	{r4, r5, pc}
     56a:	ldr.w	r0, [r0, #1152]	; 0x480
     56e:	.short	0x2800
     570:	beq.n	566 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     572:	.short	0x460a
     574:	movs	r3, #1
     576:	add.w	r1, r0, #1088	; 0x440
     57a:	mov	r0, sp
     57c:	.word	0x4031f88d
     580:	strb.w	r4, [sp, #50]	; 0x32
     584:	.word	0x4033f88d
     588:	bl	55e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     58c:	.word	0xbd30b00f

00000590 <SDClass::exists(char const*)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     590:	push	{r4, r5, lr}
     592:	.short	0xf8d0
     594:	add	r4, pc
     596:	.short	0xb08f
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     598:	cbz	r4, 5b8 <SDClass::exists(char const*)+0x28>
     59a:	.short	0x2500
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     59c:	mov	r2, r1
     59e:	.short	0x4668
     5a0:	mov	r1, r4
     5a2:	.short	0x462b
     5a4:	strb.w	r5, [sp]
     5a8:	strb.w	r5, [sp, #1]
     5ac:	strb.w	r5, [sp, #2]
     5b0:	bl	5f60 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     5b4:	add	sp, #60	; 0x3c
     5b6:	pop	{r4, r5, pc}
     5b8:	.word	0x0480f8d0
     5bc:	cmp	r0, #0
     5be:	beq.n	5b4 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     5c0:	mov	r2, r1
     5c2:	mov	r3, r4
     5c4:	mov	r1, r0
     5c6:	mov	r0, sp
     5c8:	strb.w	r4, [sp, #49]	; 0x31
     5cc:	strb.w	r4, [sp, #50]	; 0x32
     5d0:	strb.w	r4, [sp, #51]	; 0x33
     5d4:	bl	48cc <ExFatFile::open(ExFatVolume*, char const*, int)>
     5d8:	add	sp, #60	; 0x3c
     5da:	pop	{r4, r5, pc}

000005dc <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     5dc:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     5de:	cbz	r3, 608 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     5e0:	ldrb	r2, [r3, #0]
     5e2:	tst.w	r2, #112	; 0x70
     5e6:	bne.n	5ea <SDFile::rewindDirectory()+0xe>
     5e8:	bx	lr
     5ea:	push	{r4, lr}
     5ec:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     5ee:	movs	r1, #0
     5f0:	mov	r0, r3
     5f2:	bl	61c4 <FatFile::seekSet(unsigned long)>
     5f6:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     5f8:	cbz	r0, 606 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     5fa:	movs	r2, #0
     5fc:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     5fe:	ldmia.w	sp!, {r4, lr}
     602:	b.w	4254 <ExFatFile::seekSet(unsigned long long)>
     606:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     608:	ldr	r0, [r0, #96]	; 0x60
     60a:	cmp	r0, #0
     60c:	beq.n	5e8 <SDFile::rewindDirectory()+0xc>
     60e:	ldrb.w	r3, [r0, #49]	; 0x31
     612:	tst.w	r3, #80	; 0x50
     616:	beq.n	5e8 <SDFile::rewindDirectory()+0xc>
     618:	movs	r2, #0
     61a:	movs	r3, #0
     61c:	b.w	4254 <ExFatFile::seekSet(unsigned long long)>

00000620 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint32_t position() {
     620:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     622:	cbz	r3, 628 <SDFile::position()+0x8>
     624:	ldr	r0, [r3, #20]
     626:	bx	lr
     628:	ldr	r0, [r0, #96]	; 0x60
     62a:	cbz	r0, 62e <SDFile::position()+0xe>
     62c:	ldr	r0, [r0, #0]
		return sdfatfile.curPosition();
	}
     62e:	bx	lr

00000630 <SDFile::size()>:
	virtual uint32_t size() {
     630:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     632:	cbz	r3, 638 <SDFile::size()+0x8>
     634:	ldr	r0, [r3, #28]
     636:	bx	lr
     638:	ldr	r0, [r0, #96]	; 0x60
     63a:	cbz	r0, 63e <SDFile::size()+0xe>
     63c:	ldr	r0, [r0, #16]
		return sdfatfile.size();
	}
     63e:	bx	lr

00000640 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     640:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     642:	cbz	r3, 64a <SDFile::read(void*, unsigned int)+0xa>
     644:	mov	r0, r3
     646:	b.w	5f70 <FatFile::read(void*, unsigned int)>
     64a:	ldr	r0, [r0, #96]	; 0x60
     64c:	cbz	r0, 652 <SDFile::read(void*, unsigned int)+0x12>
     64e:	b.w	4038 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     652:	mov.w	r0, #4294967295
     656:	bx	lr

00000658 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     658:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     65a:	cbz	r3, 662 <SDFile::peek()+0xa>
     65c:	mov	r0, r3
     65e:	b.w	6148 <FatFile::peek()>
     662:	ldr	r0, [r0, #96]	; 0x60
     664:	cbz	r0, 66a <SDFile::peek()+0x12>
     666:	b.w	4228 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     66a:	mov.w	r0, #4294967295
     66e:	bx	lr

00000670 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     670:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     672:	cbz	r3, 682 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     674:	ldrb	r3, [r3, #0]
     676:	tst.w	r3, #112	; 0x70
     67a:	ite	ne
     67c:	movne	r0, #1
     67e:	moveq	r0, #0
     680:	bx	lr
     682:	ldr	r0, [r0, #96]	; 0x60
     684:	cbz	r0, 694 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     686:	ldrb.w	r3, [r0, #49]	; 0x31
     68a:	tst.w	r3, #80	; 0x50
     68e:	ite	ne
     690:	movne	r0, #1
     692:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     694:	bx	lr
     696:	nop

00000698 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     698:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     69c:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     69e:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     6a0:	movw	r3, #16898	; 0x4202
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     6a4:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     6a6:	it	ne
     6a8:	movne	r3, #0
     6aa:	adds	r1, #4
     6ac:	mov	r0, sp
     6ae:	bl	8074 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     6b2:	ldr	r3, [sp, #72]	; 0x48
     6b4:	cmp	r3, #0
     6b6:	beq.n	720 <SDClass::open(char const*, unsigned char)+0x88>
		if (file) return File(new SDFile(file));
     6b8:	movs	r0, #104	; 0x68
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     6ba:	add	r7, sp, #16
     6bc:	bl	b7f4 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     6c0:	ldrb.w	r2, [sp, #4]
     6c4:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     6c6:	ldr	r3, [pc, #116]	; (73c <SDClass::open(char const*, unsigned char)+0xa4>)
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     6c8:	ldr	r1, [pc, #116]	; (740 <SDClass::open(char const*, unsigned char)+0xa8>)
{
  public:
	constexpr Print() : write_error(0) {}
     6ca:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6cc:	mov.w	r8, #1000	; 0x3e8
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     6d0:	strb	r2, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     6d2:	str	r3, [r4, #20]
     6d4:	adds	r0, #36	; 0x24
     6d6:	ldr	r3, [sp, #8]
     6d8:	ldrb.w	r2, [sp, #12]
     6dc:	str	r1, [r4, #0]
     6de:	mov	r1, r7
     6e0:	str	r3, [r4, #28]
     6e2:	strb.w	r2, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
     6e6:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6e8:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     6ea:	str	r6, [r4, #16]
     6ec:	str.w	r8, [r4, #8]
     6f0:	bl	7e20 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     6f4:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6f6:	ldr	r1, [pc, #76]	; (744 <SDClass::open(char const*, unsigned char)+0xac>)
     6f8:	adds	r3, #1
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     6fa:	ldr	r2, [pc, #76]	; (748 <SDClass::open(char const*, unsigned char)+0xb0>)
     6fc:	str	r6, [r4, #100]	; 0x64
     6fe:	strb	r6, [r5, #4]
     700:	str.w	r8, [r5, #8]
     704:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     706:	str	r4, [r5, #16]
     708:	str	r1, [r4, #20]
		if (f) f->refcount++;
     70a:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     70c:	str	r2, [r5, #0]
     70e:	ldr	r3, [pc, #60]	; (74c <SDClass::open(char const*, unsigned char)+0xb4>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     710:	mov	r0, r7
     712:	str	r3, [sp, #0]
     714:	bl	7ea4 <FsBaseFile::close()>
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     718:	mov	r0, r5
     71a:	add	sp, #80	; 0x50
     71c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     720:	ldr	r3, [sp, #76]	; 0x4c
     722:	cmp	r3, #0
     724:	bne.n	6b8 <SDClass::open(char const*, unsigned char)+0x20>
     726:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     72a:	ldr	r2, [pc, #28]	; (748 <SDClass::open(char const*, unsigned char)+0xb0>)
     72c:	strb	r3, [r5, #4]
     72e:	add	r7, sp, #16
     730:	strb	r3, [r5, #12]
     732:	str	r3, [r5, #16]
     734:	str	r1, [r5, #8]
     736:	str	r2, [r5, #0]
     738:	b.n	70e <SDClass::open(char const*, unsigned char)+0x76>
     73a:	nop
     73c:	.word	0x20000008
     740:	.word	0x200000d0
     744:	.word	0x20000050
     748:	.word	0x20000074
     74c:	.word	0x2000002c

00000750 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     750:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     752:	cbz	r3, 75a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     754:	mov	r0, r3
     756:	b.w	69d4 <FatFile::sync()>
     75a:	ldr	r0, [r0, #76]	; 0x4c
     75c:	cbz	r0, 762 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     75e:	b.w	53fc <ExFatFile::sync()>
     762:	bx	lr

00000764 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     764:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     766:	cbz	r3, 76e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     768:	mov	r0, r3
     76a:	b.w	69e0 <FatFile::write(void const*, unsigned int)>
     76e:	ldr	r0, [r0, #76]	; 0x4c
     770:	cbz	r0, 776 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     772:	b.w	58f8 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     776:	bx	lr

00000778 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     778:	ldr	r3, [r0, #92]	; 0x5c
     77a:	cbz	r3, 782 <SDFile::write(void const*, unsigned int)+0xa>
     77c:	mov	r0, r3
     77e:	b.w	69e0 <FatFile::write(void const*, unsigned int)>
     782:	ldr	r0, [r0, #96]	; 0x60
     784:	cbz	r0, 78a <SDFile::write(void const*, unsigned int)+0x12>
     786:	b.w	58f8 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     78a:	bx	lr

0000078c <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     78c:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     78e:	cbz	r2, 7aa <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     790:	ldrb	r3, [r2, #0]
     792:	and.w	r3, r3, #8
     796:	and.w	r0, r3, #255	; 0xff
     79a:	cbz	r3, 7e0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     79c:	ldr	r3, [r2, #28]
     79e:	ldr	r0, [r2, #20]
     7a0:	subs	r0, r3, r0
     7a2:	it	mi
     7a4:	mvnmi.w	r0, #2147483648	; 0x80000000
     7a8:	bx	lr
     7aa:	ldr	r1, [r0, #76]	; 0x4c
     7ac:	cbz	r1, 7e2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     7ae:	ldrb.w	r3, [r1, #49]	; 0x31
     7b2:	and.w	r3, r3, #8
     7b6:	and.w	r0, r3, #255	; 0xff
     7ba:	cbz	r3, 7e0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     7bc:	ldrd	r2, r3, [r1, #16]
     7c0:	ldrd	r0, r1, [r1]
     7c4:	push	{r4, r5}
     7c6:	subs	r0, r2, r0
     7c8:	mov.w	r5, #0
     7cc:	mvn.w	r4, #2147483648	; 0x80000000
     7d0:	sbc.w	r1, r3, r1
     7d4:	cmp	r5, r1
     7d6:	it	eq
     7d8:	cmpeq	r4, r0
     7da:	bcs.n	7de <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     7dc:	mov	r0, r4
    return BaseFile::available();
  }
     7de:	pop	{r4, r5}
     7e0:	bx	lr
     7e2:	mov	r0, r1
     7e4:	bx	lr
     7e6:	nop

000007e8 <SDFile::seek(unsigned long, int)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool seek(uint32_t pos, int mode = SeekSet) {
     7e8:	push	{r4, r5}
     7ea:	mov	r4, r1
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     7ec:	cbz	r2, 7fc <SDFile::seek(unsigned long, int)+0x14>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     7ee:	cmp	r2, #1
     7f0:	beq.n	828 <SDFile::seek(unsigned long, int)+0x40>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     7f2:	cmp	r2, #2
     7f4:	beq.n	808 <SDFile::seek(unsigned long, int)+0x20>
		return false;
	}
     7f6:	movs	r0, #0
     7f8:	pop	{r4, r5}
     7fa:	bx	lr
     7fc:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     7fe:	cbz	r3, 840 <SDFile::seek(unsigned long, int)+0x58>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     800:	mov	r0, r3
     802:	pop	{r4, r5}
     804:	b.w	61c4 <FatFile::seekSet(unsigned long)>
     808:	ldr	r5, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     80a:	cbz	r5, 84e <SDFile::seek(unsigned long, int)+0x66>
     80c:	ldr	r1, [r5, #28]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     80e:	movs	r3, #0
     810:	adds	r2, r4, r1
     812:	adc.w	r3, r3, #0
     816:	cmp	r3, #1
     818:	it	eq
     81a:	cmpeq	r2, #0
     81c:	bcs.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
     81e:	add	r1, r4
     820:	mov	r0, r5
     822:	pop	{r4, r5}
     824:	b.w	61c4 <FatFile::seekSet(unsigned long)>
     828:	ldr	r5, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     82a:	cbz	r5, 866 <SDFile::seek(unsigned long, int)+0x7e>
     82c:	ldr	r1, [r5, #20]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     82e:	movs	r3, #0
     830:	adds	r2, r1, r4
     832:	adc.w	r3, r3, #0
     836:	cmp	r3, #1
     838:	it	eq
     83a:	cmpeq	r2, #0
     83c:	bcs.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
     83e:	b.n	81e <SDFile::seek(unsigned long, int)+0x36>
           m_xFile ? m_xFile->seekSet(pos) : false;
     840:	ldr	r0, [r0, #96]	; 0x60
     842:	cmp	r0, #0
     844:	beq.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
     846:	mov	r2, r1
     848:	pop	{r4, r5}
     84a:	b.w	4254 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     84e:	ldr	r3, [r0, #96]	; 0x60
     850:	cmp	r3, #0
     852:	beq.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     854:	mov	r0, r3
     856:	ldrd	r2, r3, [r3, #16]
     85a:	pop	{r4, r5}
     85c:	adds	r2, r2, r1
     85e:	adc.w	r3, r3, #0
     862:	b.w	4254 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     866:	ldr	r3, [r0, #96]	; 0x60
     868:	cmp	r3, #0
     86a:	beq.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     86c:	mov	r0, r3
     86e:	ldrd	r2, r3, [r3]
     872:	pop	{r4, r5}
     874:	adds	r2, r2, r1
     876:	adc.w	r3, r3, #0
     87a:	b.w	4254 <ExFatFile::seekSet(unsigned long long)>
     87e:	nop

00000880 <File::~File()>:
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     880:	ldr	r3, [pc, #32]	; (8a4 <File::~File()+0x24>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     882:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     884:	push	{r4, lr}
     886:	mov	r4, r0
     888:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     88a:	cbz	r2, 89e <File::~File()+0x1e>
     88c:	ldr	r3, [r2, #16]
     88e:	subs	r3, #1
     890:	str	r3, [r2, #16]
     892:	cbnz	r3, 89e <File::~File()+0x1e>
     894:	ldr	r0, [r0, #16]
     896:	cbz	r0, 89e <File::~File()+0x1e>
     898:	ldr	r3, [r0, #0]
     89a:	ldr	r3, [r3, #32]
     89c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     89e:	mov	r0, r4
     8a0:	pop	{r4, pc}
     8a2:	nop
     8a4:	.word	0x20000074

000008a8 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     8a8:	push	{r3, r4, r5, lr}
     8aa:	ldr	r2, [pc, #84]	; (900 <SDFile::~SDFile()+0x58>)
     8ac:	mov	r4, r0
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     8ae:	ldr	r3, [r0, #92]	; 0x5c
		if (sdfatfile) sdfatfile.close();
     8b0:	add.w	r5, r0, #36	; 0x24

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     8b4:	str	r2, [r0, #0]
     8b6:	cbz	r3, 8f6 <SDFile::~SDFile()+0x4e>
		if (sdfatfile) sdfatfile.close();
     8b8:	mov	r0, r5
     8ba:	bl	7ea4 <FsBaseFile::close()>
		if (filename) free(filename);
     8be:	ldr	r0, [r4, #100]	; 0x64
     8c0:	cbz	r0, 8c6 <SDFile::~SDFile()+0x1e>
     8c2:	bl	c7cc <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     8c6:	ldr	r3, [pc, #60]	; (904 <SDFile::~SDFile()+0x5c>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     8c8:	mov	r0, r5
     8ca:	str	r3, [r4, #20]
     8cc:	bl	7ea4 <FsBaseFile::close()>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     8d0:	ldr	r3, [pc, #52]	; (908 <SDFile::~SDFile()+0x60>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     8d2:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     8d4:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     8d6:	cbz	r2, 8ea <SDFile::~SDFile()+0x42>
     8d8:	ldr	r3, [r2, #16]
     8da:	subs	r3, #1
     8dc:	str	r3, [r2, #16]
     8de:	cbnz	r3, 8ea <SDFile::~SDFile()+0x42>
     8e0:	ldr	r0, [r4, #16]
     8e2:	cbz	r0, 8ea <SDFile::~SDFile()+0x42>
     8e4:	ldr	r3, [r0, #0]
     8e6:	ldr	r3, [r3, #32]
     8e8:	blx	r3
	}
     8ea:	mov	r0, r4
     8ec:	movs	r1, #104	; 0x68
     8ee:	bl	b7f8 <operator delete(void*, unsigned int)>
     8f2:	mov	r0, r4
     8f4:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     8f6:	ldr	r3, [r0, #96]	; 0x60
     8f8:	cmp	r3, #0
     8fa:	bne.n	8b8 <SDFile::~SDFile()+0x10>
     8fc:	b.n	8be <SDFile::~SDFile()+0x16>
     8fe:	nop
     900:	.word	0x200000d0
     904:	.word	0x2000002c
     908:	.word	0x20000074

0000090c <File::~File()>:
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     90c:	ldr	r3, [pc, #40]	; (938 <File::~File()+0x2c>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     90e:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     910:	push	{r4, lr}
     912:	mov	r4, r0
     914:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     916:	cbz	r2, 92a <File::~File()+0x1e>
     918:	ldr	r3, [r2, #16]
     91a:	subs	r3, #1
     91c:	str	r3, [r2, #16]
     91e:	cbnz	r3, 92a <File::~File()+0x1e>
     920:	ldr	r0, [r0, #16]
     922:	cbz	r0, 92a <File::~File()+0x1e>
     924:	ldr	r3, [r0, #0]
     926:	ldr	r3, [r3, #32]
     928:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     92a:	mov	r0, r4
     92c:	movs	r1, #20
     92e:	bl	b7f8 <operator delete(void*, unsigned int)>
     932:	mov	r0, r4
     934:	pop	{r4, pc}
     936:	nop
     938:	.word	0x20000074

0000093c <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
     93c:	push	{r3, r4, r5, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     93e:	ldr	r2, [r0, #60]	; 0x3c
     940:	mov	r4, r0
     942:	ldr	r3, [pc, #88]	; (99c <MTPStorage_SD::~MTPStorage_SD()+0x60>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     944:	ldr	r5, [pc, #88]	; (9a0 <MTPStorage_SD::~MTPStorage_SD()+0x64>)
     946:	str	r3, [r0, #0]
     948:	str	r5, [r0, #44]	; 0x2c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     94a:	cbz	r2, 954 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     94c:	ldr	r3, [r2, #16]
     94e:	subs	r3, #1
     950:	str	r3, [r2, #16]
     952:	cbz	r3, 97e <MTPStorage_SD::~MTPStorage_SD()+0x42>
     954:	ldr	r2, [r4, #40]	; 0x28
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     956:	str	r5, [r4, #24]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     958:	cbz	r2, 962 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     95a:	ldr	r3, [r2, #16]
     95c:	subs	r3, #1
     95e:	str	r3, [r2, #16]
     960:	cbz	r3, 98c <MTPStorage_SD::~MTPStorage_SD()+0x50>
     962:	ldr	r2, [r4, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     964:	str	r5, [r4, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     966:	cbz	r2, 97a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     968:	ldr	r3, [r2, #16]
     96a:	subs	r3, #1
     96c:	str	r3, [r2, #16]
     96e:	cbnz	r3, 97a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     970:	ldr	r0, [r4, #20]
     972:	cbz	r0, 97a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     974:	ldr	r3, [r0, #0]
     976:	ldr	r3, [r3, #32]
     978:	blx	r3
     97a:	mov	r0, r4
     97c:	pop	{r3, r4, r5, pc}
     97e:	ldr	r0, [r0, #60]	; 0x3c
     980:	cmp	r0, #0
     982:	beq.n	954 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     984:	ldr	r3, [r0, #0]
     986:	ldr	r3, [r3, #32]
     988:	blx	r3
     98a:	b.n	954 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     98c:	ldr	r0, [r4, #40]	; 0x28
     98e:	cmp	r0, #0
     990:	beq.n	962 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     992:	ldr	r3, [r0, #0]
     994:	ldr	r3, [r3, #32]
     996:	blx	r3
     998:	b.n	962 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     99a:	nop
     99c:	.word	0x200001fc
     9a0:	.word	0x20000074

000009a4 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)>:
    to=millis();
  }
}

void storage_configure(MTPStorage_SD *storage, const char **sd_str, const int *cs, SDClass *sdx, int num)
{
     9a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	mov	r9, r3
     9aa:	sub	sp, #68	; 0x44
     9ac:	mov	r5, r0
     9ae:	mov	r8, r1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     9b0:	ldr	r0, [pc, #400]	; (b44 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1a0>)
     9b2:	movs	r1, #11
    to=millis();
  }
}

void storage_configure(MTPStorage_SD *storage, const char **sd_str, const int *cs, SDClass *sdx, int num)
{
     9b4:	mov	r7, r2
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     9b6:	bl	3c58 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
     9ba:	movs	r1, #12
     9bc:	ldr	r0, [pc, #388]	; (b44 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1a0>)
     9be:	bl	3cc4 <SPIClass::setMISO(unsigned char)>
     9c2:	add.w	r4, r9, #4
      SPI.setSCK(SD_SCK);
     9c6:	movs	r1, #13
     9c8:	ldr	r0, [pc, #376]	; (b44 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1a0>)
     9ca:	add.w	r6, r9, #1176	; 0x498
     9ce:	addw	r9, r9, #1164	; 0x48c
     9d2:	bl	3d24 <SPIClass::setSCK(unsigned char)>
    #endif

    storage->setStorageNumbers(sd_str,nsd);
     9d6:	ldr	r3, [r5, #0]
     9d8:	mov	r1, r8
     9da:	mov	r0, r5
     9dc:	subs	r7, #4

    for(int ii=0; ii<nsd; ii++)
     9de:	mov.w	r8, #0
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     9e2:	ldr.w	sl, [pc, #368]	; b54 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1b0>
     9e6:	mov	r5, r9
     9e8:	ldr.w	fp, [pc, #364]	; b58 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1b4>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    storage->setStorageNumbers(sd_str,nsd);
     9ec:	movs	r2, #7
     9ee:	ldr	r3, [r3, #0]
     9f0:	blx	r3

    for(int ii=0; ii<nsd; ii++)
    { if(cs[ii] == BUILTIN_SDCARD)
     9f2:	ldr.w	r0, [r7, #4]!
     9f6:	cmp	r0, #254	; 0xfe
     9f8:	beq.n	ad8 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x134>
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("Storage %d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
      }
      else
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
     9fa:	uxtb	r0, r0
     9fc:	movs	r1, #1
     9fe:	bl	b13c <pinMode>
     a02:	ldrb.w	r9, [r7]
     a06:	mov.w	ip, #0
     a0a:	str.w	fp, [sp, #32]
     a0e:	mov.w	r2, r9, lsl #4
     a12:	strb.w	r9, [sp, #28]
     a16:	strb.w	ip, [sp, #29]
     a1a:	add	r3, sp, #28
     a1c:	add.w	r1, sl, r2
     a20:	str.w	ip, [sp, #36]	; 0x24
     a24:	ldr.w	r2, [sl, r2]
     a28:	add.w	lr, sp, #40	; 0x28
     a2c:	ldr	r1, [r1, #12]
     a2e:	str	r2, [sp, #20]
     a30:	str	r1, [sp, #16]
     a32:	ldmia.w	r3, {r0, r1, r2}
     a36:	stmia.w	lr, {r0, r1, r2}
     a3a:	ldr	r2, [sp, #20]
     a3c:	add	r3, sp, #52	; 0x34
     a3e:	ldr	r1, [sp, #16]
     a40:	strb.w	r9, [sp, #40]	; 0x28
     a44:	strb.w	ip, [sp, #41]	; 0x29
     a48:	str.w	ip, [sp, #48]	; 0x30
     a4c:	str.w	fp, [sp, #44]	; 0x2c
     a50:	str.w	r1, [r2, #132]	; 0x84
     a54:	ldmia.w	lr, {r0, r1, r2}
     a58:	stmia.w	r3, {r0, r1, r2}
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
     a5c:	mov	r0, r6
     a5e:	ldmia	r3, {r1, r2, r3}
     a60:	bl	82f8 <SdSpiCard::begin(SdSpiConfig)>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
     a64:	str.w	r6, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
     a68:	cbz	r6, a70 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xcc>
     a6a:	ldrb.w	r3, [r4, #1195]	; 0x4ab
     a6e:	cbz	r3, a80 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xdc>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     a70:	movs	r1, #10
     a72:	ldr	r0, [pc, #212]	; (b48 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1a4>)
     a74:	bl	a3cc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     a78:	ldr	r0, [pc, #208]	; (b4c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1a8>)
     a7a:	bl	b6f8 <Print::println()>
     a7e:	b.n	a7e <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xda>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
     a80:	mov	r1, r6
     a82:	mov	r0, r4
     a84:	bl	7fac <FsVolume::begin(BlockDeviceInterface*)>
     a88:	cmp	r0, #0
     a8a:	beq.n	a70 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xcc>
     a8c:	ldr.w	r0, [r4, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a90:	cmp	r0, #0
     a92:	beq.n	b00 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x15c>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     a94:	ldr	r3, [r0, #28]
     a96:	add.w	r9, r3, #4294967295
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     a9a:	bl	6f8c <FatPartition::freeClusterCount()>
     a9e:	ldr.w	r3, [r4, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     aa2:	cmp	r3, #0
     aa4:	beq.n	b18 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x174>
     aa6:	ldrb	r1, [r3, #4]
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SD_SCK_MHZ(33)))) {Serial.println("No storage"); while(1);}
        uint32_t volCount  = sdx[ii].sdfs.clusterCount();
        uint32_t volFree  = sdx[ii].sdfs.freeClusterCount();
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("Storage %d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
     aa8:	mov	r2, r8
      SPI.setSCK(SD_SCK);
    #endif

    storage->setStorageNumbers(sd_str,nsd);

    for(int ii=0; ii<nsd; ii++)
     aaa:	add.w	r8, r8, #1
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SD_SCK_MHZ(33)))) {Serial.println("No storage"); while(1);}
        uint32_t volCount  = sdx[ii].sdfs.clusterCount();
        uint32_t volFree  = sdx[ii].sdfs.freeClusterCount();
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("Storage %d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
     aae:	ldr	r3, [r7, #0]
     ab0:	addw	r4, r4, #1204	; 0x4b4
     ab4:	str	r1, [sp, #8]
     ab6:	addw	r6, r6, #1204	; 0x4b4
     aba:	str	r0, [sp, #4]
     abc:	addw	r5, r5, #1204	; 0x4b4
     ac0:	str.w	r9, [sp]
     ac4:	ldr	r1, [pc, #136]	; (b50 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1ac>)
     ac6:	ldr	r0, [pc, #132]	; (b4c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1a8>)
     ac8:	bl	b728 <Print::printf(char const*, ...)>
      SPI.setSCK(SD_SCK);
    #endif

    storage->setStorageNumbers(sd_str,nsd);

    for(int ii=0; ii<nsd; ii++)
     acc:	cmp.w	r8, #7
     ad0:	bne.n	9f2 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x4e>
        uint32_t volFree  = sdx[ii].sdfs.freeClusterCount();
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("Storage %d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
      }
    }
}
     ad2:	add	sp, #68	; 0x44
     ad4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     ad8:	mov.w	r1, #0
     adc:	mov	r0, r5
     ade:	bl	9328 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     ae2:	str.w	r5, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
     ae6:	cbz	r5, af0 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x14c>
     ae8:	mov	r0, r5
     aea:	bl	8a7c <SdioCard::errorCode() const>
     aee:	cbz	r0, b2c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x188>
     af0:	movs	r1, #10
     af2:	ldr	r0, [pc, #84]	; (b48 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1a4>)
     af4:	bl	a3cc <usb_serial_write>
     af8:	ldr	r0, [pc, #80]	; (b4c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x1a8>)
     afa:	bl	b6f8 <Print::println()>
     afe:	b.n	afe <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x15a>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     b00:	ldr.w	r3, [r4, #1148]	; 0x47c
     b04:	cbz	r3, b3c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x198>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b06:	mov	r0, r3
     b08:	ldr.w	r9, [r3, #1064]	; 0x428
     b0c:	bl	4e78 <ExFatPartition::freeClusterCount()>
     b10:	ldr.w	r3, [r4, #1144]	; 0x478
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     b14:	cmp	r3, #0
     b16:	bne.n	aa6 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x102>
     b18:	ldr.w	r1, [r4, #1148]	; 0x47c
     b1c:	cmp	r1, #0
     b1e:	beq.n	aa8 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x104>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
     b20:	ldrb.w	r1, [r1, #1085]	; 0x43d
     b24:	movs	r3, #1
     b26:	lsl.w	r1, r3, r1
     b2a:	b.n	aa8 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x104>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     b2c:	ldr.w	r1, [r4, #1156]	; 0x484
     b30:	mov	r0, r4
     b32:	bl	7fac <FsVolume::begin(BlockDeviceInterface*)>
     b36:	cmp	r0, #0
     b38:	beq.n	af0 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x14c>
     b3a:	b.n	a8c <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0xe8>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     b3c:	mov	r9, r3
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b3e:	mov	r0, r3
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     b40:	mov	r1, r3
     b42:	b.n	aa8 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)+0x104>
     b44:	.word	0x20000bc4
     b48:	.word	0x200001b0
     b4c:	.word	0x20000c48
     b50:	.word	0x20000198
     b54:	.word	0x20000500
     b58:	.word	0x01f78a40

00000b5c <setup>:

void setup()
{ 
     b5c:	push	{r4, r5, r6, lr}
     b5e:	ldr	r1, [pc, #100]	; (bc4 <setup+0x68>)
     b60:	sub	sp, #8
  while(!Serial && millis()<3000); 
     b62:	movw	r0, #2999	; 0xbb7
     b66:	ldr	r2, [pc, #96]	; (bc8 <setup+0x6c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b68:	ldr	r4, [pc, #96]	; (bcc <setup+0x70>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b6a:	ldr	r6, [pc, #100]	; (bd0 <setup+0x74>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b6c:	ldrb	r3, [r1, #0]
     b6e:	cbz	r3, bba <setup+0x5e>
     b70:	ldrb	r3, [r4, #0]
     b72:	lsls	r3, r3, #31
     b74:	bpl.n	bba <setup+0x5e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b76:	ldr	r3, [r2, #0]
     b78:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b7a:	subs	r3, r3, r5
     b7c:	cmp	r3, #14
     b7e:	bls.n	bba <setup+0x5e>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b80:	movs	r1, #8
     b82:	ldr	r0, [pc, #80]	; (bd4 <setup+0x78>)
     b84:	bl	a3cc <usb_serial_write>
     b88:	ldr	r0, [pc, #76]	; (bd8 <setup+0x7c>)
     b8a:	bl	b6f8 <Print::println()>
  Serial.println("MTP_test");
  
  usb_mtp_configure();
     b8e:	bl	9b08 <usb_mtp_configure>
  storage_configure(&storage, sd_str,cs, sdx, nsd);
     b92:	movs	r2, #7
     b94:	ldr	r3, [pc, #68]	; (bdc <setup+0x80>)
     b96:	str	r2, [sp, #0]
     b98:	ldr	r1, [pc, #68]	; (be0 <setup+0x84>)
     b9a:	ldr	r2, [pc, #72]	; (be4 <setup+0x88>)
     b9c:	ldr	r0, [pc, #72]	; (be8 <setup+0x8c>)
     b9e:	bl	9a4 <storage_configure(MTPStorage_SD*, char const**, int const*, SDClass*, int)>
     ba2:	movs	r1, #10
     ba4:	ldr	r0, [pc, #68]	; (bec <setup+0x90>)
     ba6:	bl	a3cc <usb_serial_write>
     baa:	ldr	r0, [pc, #44]	; (bd8 <setup+0x7c>)
     bac:	bl	b6f8 <Print::println()>

  Serial.println("Setup done");
  Serial.flush();
}
     bb0:	add	sp, #8
     bb2:	ldmia.w	sp!, {r4, r5, r6, lr}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     bb6:	b.w	a430 <usb_serial_flush_output>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     bba:	ldr	r3, [r2, #0]
    }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
     bbc:	cmp	r3, r0
     bbe:	bls.n	b6c <setup+0x10>
     bc0:	b.n	b80 <setup+0x24>
     bc2:	nop
     bc4:	.word	0x20006d98
     bc8:	.word	0x20006da4
     bcc:	.word	0x20006cc8
     bd0:	.word	0x20006e34
     bd4:	.word	0x200001bc
     bd8:	.word	0x20000c48
     bdc:	.word	0x20001628
     be0:	.word	0x20000ba4
     be4:	.word	0x20000140
     be8:	.word	0x20003714
     bec:	.word	0x200001c8

00000bf0 <loop>:
  Serial.flush();
}

void loop()
{ 
  mtpd.loop();
     bf0:	ldr	r0, [pc, #4]	; (bf8 <loop+0x8>)
     bf2:	b.w	3118 <MTPD::loop()>
     bf6:	nop
     bf8:	.word	0x20003780

00000bfc <_GLOBAL__sub_I_sd_str>:

  //logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
     bfc:	push	{r3, r4, r5, r6, r7, lr}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
     bfe:	movs	r2, #0
     c00:	ldr	r3, [pc, #180]	; (cb8 <_GLOBAL__sub_I_sd_str+0xbc>)
     c02:	ldr.w	ip, [pc, #228]	; ce8 <_GLOBAL__sub_I_sd_str+0xec>
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     c06:	mov.w	lr, #7
     c0a:	ldr	r7, [pc, #176]	; (cbc <_GLOBAL__sub_I_sd_str+0xc0>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
     c0c:	movs	r6, #40	; 0x28
     c0e:	ldr	r5, [pc, #176]	; (cc0 <_GLOBAL__sub_I_sd_str+0xc4>)
     c10:	ldr	r0, [pc, #176]	; (cc4 <_GLOBAL__sub_I_sd_str+0xc8>)
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     c12:	ldr	r1, [pc, #180]	; (cc8 <_GLOBAL__sub_I_sd_str+0xcc>)
     c14:	str.w	r2, [r3, #1148]	; 0x47c
     c18:	movs	r4, #0
     c1a:	str.w	r2, [r3, #1152]	; 0x480
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     c1e:	str.w	r7, [r3, #1164]	; 0x48c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
     c22:	strb.w	r2, [r3, #1172]	; 0x494
     c26:	str.w	r5, [r3, #1176]	; 0x498
     c2a:	str.w	r1, [r3, #1184]	; 0x4a0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     c2e:	str.w	lr, [r3, #1188]	; 0x4a4
     c32:	strb.w	r6, [r3, #1199]	; 0x4af
     c36:	strb.w	r2, [r3, #1202]	; 0x4b2


class SDClass : public FS
{
public:
	SDClass() { }
     c3a:	str.w	ip, [r3]

  const char *sd_str[]={"sdio","sd1","sd2","sd3","sd4","sd5","sd6"}; // edit to rflect configuration
  const int cs[] = {BUILTIN_SDCARD,34,33,35,36,37,38}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
     c3e:	addw	r3, r3, #1204	; 0x4b4
     c42:	cmp	r3, r0
     c44:	bne.n	c14 <_GLOBAL__sub_I_sd_str+0x18>
     c46:	ldr	r2, [pc, #132]	; (ccc <_GLOBAL__sub_I_sd_str+0xd0>)
     c48:	mov	r0, r4
     c4a:	ldr	r1, [pc, #132]	; (cd0 <_GLOBAL__sub_I_sd_str+0xd4>)
     c4c:	mov.w	r6, #1000	; 0x3e8
     c50:	bl	bb10 <__aeabi_atexit>
     c54:	ldr	r5, [pc, #124]	; (cd4 <_GLOBAL__sub_I_sd_str+0xd8>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     c56:	ldr	r3, [pc, #128]	; (cd8 <_GLOBAL__sub_I_sd_str+0xdc>)
     c58:	mvn.w	r7, #1
     c5c:	ldr	r1, [pc, #124]	; (cdc <_GLOBAL__sub_I_sd_str+0xe0>)

MTPStorage_SD storage;
     c5e:	mov	r0, r5
     c60:	ldr	r2, [pc, #104]	; (ccc <_GLOBAL__sub_I_sd_str+0xd0>)
     c62:	str	r1, [r5, #0]
     c64:	str	r3, [r5, #4]
     c66:	ldr	r1, [pc, #120]	; (ce0 <_GLOBAL__sub_I_sd_str+0xe4>)
     c68:	str	r3, [r5, #24]
     c6a:	str	r3, [r5, #44]	; 0x2c
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     c6c:	strb	r4, [r5, #8]
     c6e:	strb	r4, [r5, #16]
     c70:	str	r4, [r5, #20]
     c72:	strb	r4, [r5, #28]
     c74:	strb.w	r4, [r5, #36]	; 0x24
     c78:	str	r4, [r5, #40]	; 0x28
     c7a:	strb.w	r4, [r5, #48]	; 0x30
     c7e:	strb.w	r4, [r5, #56]	; 0x38
     c82:	str	r4, [r5, #60]	; 0x3c
     c84:	str	r6, [r5, #12]
     c86:	str	r6, [r5, #32]
     c88:	str	r6, [r5, #52]	; 0x34
     c8a:	str	r4, [r5, #68]	; 0x44
     c8c:	str	r4, [r5, #72]	; 0x48
     c8e:	str	r4, [r5, #80]	; 0x50
     c90:	strb.w	r4, [r5, #84]	; 0x54
     c94:	strb.w	r4, [r5, #85]	; 0x55
     c98:	str	r7, [r5, #76]	; 0x4c
     c9a:	bl	bb10 <__aeabi_atexit>
#define MTP_NAME  "Teensy"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
     c9e:	ldr	r3, [pc, #68]	; (ce4 <_GLOBAL__sub_I_sd_str+0xe8>)
     ca0:	movw	r0, #9248	; 0x2420
     ca4:	movw	r1, #9252	; 0x2424
     ca8:	movw	r2, #9256	; 0x2428
     cac:	str	r5, [r3, #0]
     cae:	str	r4, [r3, r0]
     cb0:	strb	r4, [r3, r1]
     cb2:	str	r4, [r3, r2]
     cb4:	pop	{r3, r4, r5, r6, r7, pc}
     cb6:	nop
     cb8:	.word	0x20001628
     cbc:	.word	0x200004b0
     cc0:	.word	0x20000458
     cc4:	.word	0x20003714
     cc8:	.word	0x003d0900
     ccc:	.word	0x20000ba0
     cd0:	.word	0x000001c5
     cd4:	.word	0x20003714
     cd8:	.word	0x20000074
     cdc:	.word	0x200001fc
     ce0:	.word	0x0000093d
     ce4:	.word	0x20003780
     ce8:	.word	0x2000012c

00000cec <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t storage) { return false; }
     cec:	movs	r0, #0
     cee:	bx	lr

00000cf0 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t storage) { return true; }
     cf0:	movs	r0, #1
     cf2:	bx	lr

00000cf4 <MTPStorage_SD::clusterCount(unsigned long)>:

  uint32_t MTPStorage_SD::clusterCount(uint32_t storage) { return sdx[storage-1].sdfs.clusterCount(); }
     cf4:	subs	r3, r1, #1
     cf6:	ldr	r2, [pc, #36]	; (d1c <MTPStorage_SD::clusterCount(unsigned long)+0x28>)
     cf8:	movw	r1, #1204	; 0x4b4
     cfc:	mla	r1, r1, r3, r2
     d00:	adds	r1, #4
     d02:	ldr.w	r3, [r1, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     d06:	cbz	r3, d0e <MTPStorage_SD::clusterCount(unsigned long)+0x1a>
     d08:	ldr	r0, [r3, #28]
     d0a:	subs	r0, #1
     d0c:	bx	lr
     d0e:	ldr.w	r0, [r1, #1148]	; 0x47c
     d12:	cbz	r0, d18 <MTPStorage_SD::clusterCount(unsigned long)+0x24>
     d14:	ldr.w	r0, [r0, #1064]	; 0x428
     d18:	bx	lr
     d1a:	nop
     d1c:	.word	0x20001628

00000d20 <MTPStorage_SD::clusterSize(unsigned long)>:
  uint32_t MTPStorage_SD::freeClusters(uint32_t storage) { return sdx[storage-1].sdfs.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize(uint32_t storage)  { return sdx[storage-1].sdfs.sectorsPerCluster(); }
     d20:	subs	r3, r1, #1
     d22:	ldr	r2, [pc, #40]	; (d4c <MTPStorage_SD::clusterSize(unsigned long)+0x2c>)
     d24:	movw	r1, #1204	; 0x4b4
     d28:	mla	r1, r1, r3, r2
     d2c:	adds	r1, #4
     d2e:	ldr.w	r3, [r1, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     d32:	cbz	r3, d38 <MTPStorage_SD::clusterSize(unsigned long)+0x18>
     d34:	ldrb	r0, [r3, #4]
     d36:	bx	lr
     d38:	ldr.w	r0, [r1, #1148]	; 0x47c
     d3c:	cbz	r0, d48 <MTPStorage_SD::clusterSize(unsigned long)+0x28>
     d3e:	ldrb.w	r0, [r0, #1085]	; 0x43d
     d42:	movs	r3, #1
     d44:	lsl.w	r0, r3, r0
     d48:	bx	lr
     d4a:	nop
     d4c:	.word	0x20001628

00000d50 <MTPStorage_SD::setStorageNumbers(char const**, int)>:

    GenerateIndex(storage);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(storage,i);
  }

  void  MTPStorage_SD::setStorageNumbers(const char **str, int num) {sd_str = str; num_storage=num;}
     d50:	str	r1, [r0, #68]	; 0x44
     d52:	str	r2, [r0, #64]	; 0x40
     d54:	bx	lr
     d56:	nop

00000d58 <MTPStorage_SD::getNumStorage()>:
  uint32_t MTPStorage_SD::getNumStorage() {return num_storage;}
     d58:	ldr	r0, [r0, #64]	; 0x40
     d5a:	bx	lr

00000d5c <MTPStorage_SD::getStorageName(unsigned long)>:
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}
     d5c:	mvn.w	r3, #3221225472	; 0xc0000000
     d60:	ldr	r2, [r0, #68]	; 0x44
     d62:	add	r3, r1
     d64:	ldr.w	r0, [r2, r3, lsl #2]
     d68:	bx	lr
     d6a:	nop

00000d6c <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     d6c:	ldr	r0, [r0, #40]	; 0x28
     d6e:	cbz	r0, d76 <MTPStorage_SD::write(char const*, unsigned long)+0xa>
     d70:	ldr	r3, [r0, #0]
     d72:	ldr	r3, [r3, #44]	; 0x2c
     d74:	bx	r3
     d76:	bx	lr

00000d78 <MTPStorage_SD::freeClusters(unsigned long)>:

  bool MTPStorage_SD::readonly(uint32_t storage) { return false; }
  bool MTPStorage_SD::has_directories(uint32_t storage) { return true; }

  uint32_t MTPStorage_SD::clusterCount(uint32_t storage) { return sdx[storage-1].sdfs.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters(uint32_t storage) { return sdx[storage-1].sdfs.freeClusterCount(); }
     d78:	subs	r3, r1, #1
     d7a:	ldr	r2, [pc, #32]	; (d9c <MTPStorage_SD::freeClusters(unsigned long)+0x24>)
     d7c:	movw	r1, #1204	; 0x4b4
     d80:	mla	r1, r1, r3, r2
     d84:	adds	r1, #4
     d86:	ldr.w	r0, [r1, #1144]	; 0x478
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     d8a:	cbz	r0, d90 <MTPStorage_SD::freeClusters(unsigned long)+0x18>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     d8c:	b.w	6f8c <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     d90:	ldr.w	r0, [r1, #1148]	; 0x47c
     d94:	cbz	r0, d9a <MTPStorage_SD::freeClusters(unsigned long)+0x22>
     d96:	b.w	4e78 <ExFatPartition::freeClusterCount()>
     d9a:	bx	lr
     d9c:	.word	0x20001628

00000da0 <MTPStorage_SD::CloseIndex()>:
  uint32_t MTPStorage_SD::clusterSize(uint32_t storage)  { return sdx[storage-1].sdfs.sectorsPerCluster(); }

  void MTPStorage_SD::CloseIndex()
  {
     da0:	push	{r4, lr}
     da2:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     da4:	ldr	r0, [r0, #20]
     da6:	cbz	r0, dba <MTPStorage_SD::CloseIndex()+0x1a>
     da8:	ldr	r3, [r0, #0]
     daa:	ldr	r3, [r3, #64]	; 0x40
     dac:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
     dae:	cbz	r0, dba <MTPStorage_SD::CloseIndex()+0x1a>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     db0:	ldr	r0, [r4, #20]
     db2:	cbz	r0, dba <MTPStorage_SD::CloseIndex()+0x1a>
     db4:	ldr	r3, [r0, #0]
     db6:	ldr	r3, [r3, #60]	; 0x3c
     db8:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
     dba:	movs	r3, #0
     dbc:	strb.w	r3, [r4, #84]	; 0x54
    index_entries_ = 0;
     dc0:	str	r3, [r4, #80]	; 0x50
     dc2:	pop	{r4, pc}

00000dc4 <MTPStorage_SD::OpenIndex()>:
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
     dc4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     dc8:	mov	r5, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     dca:	ldr	r0, [r0, #20]
     dcc:	sub	sp, #80	; 0x50
     dce:	cbz	r0, dde <MTPStorage_SD::OpenIndex()+0x1a>
     dd0:	ldr	r3, [r0, #0]
     dd2:	ldr	r3, [r3, #64]	; 0x40
     dd4:	blx	r3
     dd6:	cbz	r0, dde <MTPStorage_SD::OpenIndex()+0x1a>
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE);
    mtp_lock_storage(false);
  }
     dd8:	add	sp, #80	; 0x50
     dda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     dde:	movw	r3, #16898	; 0x4202
     de2:	ldr	r2, [pc, #164]	; (e88 <MTPStorage_SD::OpenIndex()+0xc4>)
     de4:	ldr	r1, [pc, #164]	; (e8c <MTPStorage_SD::OpenIndex()+0xc8>)
     de6:	mov	r0, sp
     de8:	bl	8074 <FsVolume::open(char const*, int)>
     dec:	ldr	r3, [sp, #72]	; 0x48
     dee:	cmp	r3, #0
     df0:	beq.n	e7a <MTPStorage_SD::OpenIndex()+0xb6>
		if (file) return File(new SDFile(file));
     df2:	movs	r0, #104	; 0x68
     df4:	add.w	r8, sp, #16
     df8:	bl	b7f4 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     dfc:	ldrb.w	r2, [sp, #4]
     e00:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e02:	ldr	r3, [pc, #140]	; (e90 <MTPStorage_SD::OpenIndex()+0xcc>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e04:	mov.w	r1, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     e08:	movs	r7, #0
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     e0a:	ldr	r6, [pc, #136]	; (e94 <MTPStorage_SD::OpenIndex()+0xd0>)
     e0c:	adds	r0, #36	; 0x24
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     e0e:	strb	r2, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e10:	str	r3, [r4, #20]
     e12:	ldrb.w	r2, [sp, #12]
     e16:	ldr	r3, [sp, #8]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e18:	str	r1, [r4, #8]
     e1a:	mov	r1, r8
     e1c:	str	r6, [r4, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     e1e:	mov	r6, r4
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e20:	str	r3, [r4, #28]
     e22:	strb.w	r2, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
     e26:	strb	r7, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e28:	strb	r7, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     e2a:	str	r7, [r4, #16]
     e2c:	bl	7e20 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     e30:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     e32:	ldr	r2, [pc, #100]	; (e98 <MTPStorage_SD::OpenIndex()+0xd4>)
     e34:	adds	r3, #1
     e36:	str	r7, [r4, #100]	; 0x64
     e38:	str	r2, [r4, #20]
     e3a:	str	r3, [r4, #16]
     e3c:	ldr	r3, [pc, #92]	; (e9c <MTPStorage_SD::OpenIndex()+0xd8>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     e3e:	mov	r0, r8
     e40:	str	r3, [sp, #0]
     e42:	bl	7ea4 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e46:	ldr	r2, [r5, #20]
     e48:	cbz	r2, e52 <MTPStorage_SD::OpenIndex()+0x8e>
     e4a:	ldr	r3, [r2, #16]
     e4c:	subs	r3, #1
     e4e:	str	r3, [r2, #16]
     e50:	cbz	r3, e6c <MTPStorage_SD::OpenIndex()+0xa8>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
     e52:	str	r6, [r5, #20]
		if (f) f->refcount++;
     e54:	cmp	r6, #0
     e56:	beq.n	dd8 <MTPStorage_SD::OpenIndex()+0x14>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e58:	ldr	r3, [r6, #16]
     e5a:	cmp	r3, #0
     e5c:	bne.n	dd8 <MTPStorage_SD::OpenIndex()+0x14>
     e5e:	ldr	r3, [r6, #0]
     e60:	mov	r0, r6
     e62:	ldr	r3, [r3, #32]
     e64:	blx	r3
     e66:	add	sp, #80	; 0x50
     e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e6c:	ldr	r0, [r5, #20]
     e6e:	cmp	r0, #0
     e70:	beq.n	e52 <MTPStorage_SD::OpenIndex()+0x8e>
     e72:	ldr	r3, [r0, #0]
     e74:	ldr	r3, [r3, #32]
     e76:	blx	r3
     e78:	b.n	e52 <MTPStorage_SD::OpenIndex()+0x8e>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     e7a:	ldr	r6, [sp, #76]	; 0x4c
     e7c:	cmp	r6, #0
     e7e:	bne.n	df2 <MTPStorage_SD::OpenIndex()+0x2e>
     e80:	add.w	r8, sp, #16
     e84:	b.n	e3c <MTPStorage_SD::OpenIndex()+0x78>
     e86:	nop
     e88:	.word	0x20000250
     e8c:	.word	0x2000162c
     e90:	.word	0x20000008
     e94:	.word	0x200000d0
     e98:	.word	0x20000050
     e9c:	.word	0x2000002c

00000ea0 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     ea0:	ldr	r3, [r0, #20]
     ea2:	cbz	r3, ed0 <MTPStorage_SD::ResetIndex()+0x30>
     ea4:	ldr	r2, [r3, #0]

  void MTPStorage_SD::ResetIndex() {
     ea6:	push	{r4, lr}
     ea8:	mov	r4, r0
     eaa:	mov	r0, r3
     eac:	ldr	r3, [r2, #64]	; 0x40
     eae:	blx	r3
    if(!sd_isOpen(index_)) return;
     eb0:	cbnz	r0, eb4 <MTPStorage_SD::ResetIndex()+0x14>
     eb2:	pop	{r4, pc}
    
    CloseIndex();
     eb4:	ldr	r3, [r4, #0]
     eb6:	mov	r0, r4
     eb8:	ldr	r3, [r3, #68]	; 0x44
     eba:	blx	r3
    OpenIndex();
     ebc:	mov	r0, r4
     ebe:	bl	dc4 <MTPStorage_SD::OpenIndex()>

    all_scanned_ = false;
     ec2:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
     ec4:	mvn.w	r3, #1
    if(!sd_isOpen(index_)) return;
    
    CloseIndex();
    OpenIndex();

    all_scanned_ = false;
     ec8:	strb.w	r2, [r4, #85]	; 0x55
    open_file_ = 0xFFFFFFFEUL;
     ecc:	str	r3, [r4, #76]	; 0x4c
     ece:	pop	{r4, pc}
     ed0:	bx	lr
     ed2:	nop

00000ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
     ed4:	push	{r4, r5, r6, lr}
     ed6:	mov	r5, r0
     ed8:	mov	r4, r1
     eda:	mov	r6, r2
    OpenIndex();
     edc:	bl	dc4 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     ee0:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
     ee2:	add.w	r4, r4, r4, lsl #2
     ee6:	cbz	r0, f04 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
     ee8:	ldr	r3, [r0, #0]
     eea:	lsls	r1, r4, #4
     eec:	movs	r2, #0
     eee:	ldr	r3, [r3, #48]	; 0x30
     ef0:	blx	r3
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     ef2:	ldr	r0, [r5, #20]
     ef4:	cbz	r0, f04 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
     ef6:	ldr	r3, [r0, #0]
     ef8:	mov	r1, r6
     efa:	movs	r2, #80	; 0x50
     efc:	ldr	r3, [r3, #44]	; 0x2c
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
     efe:	ldmia.w	sp!, {r4, r5, r6, lr}
     f02:	bx	r3
     f04:	pop	{r4, r5, r6, pc}
     f06:	nop

00000f08 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
     f08:	ldr	r2, [pc, #172]	; (fb8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb0>)
  { if (index_generated) return; 
    index_generated = true;
     f0a:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
     f0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f10:	ldr.w	r4, [r2, #1148]	; 0x47c
     f14:	sub	sp, #84	; 0x54
     f16:	mov	r5, r0
  { if (index_generated) return; 
    index_generated = true;
     f18:	strb.w	r3, [r0, #84]	; 0x54
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     f1c:	cmp	r4, #0
     f1e:	beq.n	f8e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x86>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     f20:	movs	r6, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f22:	mov	r1, r4
     f24:	mov	r0, sp
     f26:	ldr	r2, [pc, #148]	; (fbc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb4>)
     f28:	strb.w	r6, [sp]
     f2c:	strb.w	r6, [sp, #1]
     f30:	strb.w	r6, [sp, #2]
     f34:	bl	5f60 <FatFile::open(FatVolume*, char const*, int)>
     f38:	cbnz	r0, f86 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x7e>
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
     f3a:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f3c:	ldr	r3, [r5, #64]	; 0x40
     f3e:	cmp	r3, r1
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
     f40:	str	r1, [r5, #80]	; 0x50
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f42:	ble.n	f80 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x78>
     f44:	mov	r7, sp
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
     f46:	mov.w	r9, #1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f4a:	mov	r4, r1
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
     f4c:	mov	r6, r1
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
     f4e:	mov.w	r8, #47	; 0x2f
     f52:	b.n	f56 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x4e>
     f54:	ldr	r1, [r5, #80]	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
     f56:	adds	r3, r1, #1
    WriteIndexRecord(new_record, r);
     f58:	mov	r2, r7
     f5a:	mov	r0, r5

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
     f5c:	strh.w	r4, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
     f60:	str	r3, [r5, #80]	; 0x50
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
     f62:	str	r4, [sp, #0]
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f64:	adds	r4, #1
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
     f66:	str	r6, [sp, #8]
      r.child = 0;
     f68:	str	r6, [sp, #4]
      r.isdir = true;
     f6a:	strb.w	r9, [sp, #12]
      r.scanned = false;
     f6e:	strb.w	r6, [sp, #13]
      strcpy(r.name, "/");
     f72:	strh.w	r8, [sp, #16]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
     f76:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f7a:	ldr	r3, [r5, #64]	; 0x40
     f7c:	cmp	r3, r4
     f7e:	bgt.n	f54 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x4c>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
     f80:	add	sp, #84	; 0x54
     f82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f86:	mov	r0, sp
     f88:	bl	7658 <FatFile::remove()>
     f8c:	b.n	f3a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
     f8e:	ldr.w	r1, [r2, #1152]	; 0x480
     f92:	cmp	r1, #0
     f94:	beq.n	f3a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f96:	ldr	r2, [pc, #36]	; (fbc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb4>)
     f98:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     f9a:	strb.w	r4, [sp, #49]	; 0x31
     f9e:	strb.w	r4, [sp, #50]	; 0x32
     fa2:	strb.w	r4, [sp, #51]	; 0x33
     fa6:	bl	48cc <ExFatFile::open(ExFatVolume*, char const*, int)>
     faa:	cmp	r0, #0
     fac:	beq.n	f3a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
     fae:	mov	r0, sp
     fb0:	bl	50c0 <ExFatFile::remove()>
     fb4:	b.n	f3a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
     fb6:	nop
     fb8:	.word	0x20001628
     fbc:	.word	0x20000250

00000fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
     fc0:	push	{r4, r5, r6, lr}
     fc2:	mov	r5, r1
     fc4:	mov	r4, r2
    Record ret;
    memset(&ret, 0, sizeof(ret));
     fc6:	movs	r1, #0
     fc8:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
     fca:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
     fcc:	bl	cf4c <memset>
    if (i > index_entries_) 
     fd0:	ldr	r3, [r5, #80]	; 0x50
     fd2:	cmp	r3, r4
     fd4:	bcc.n	1000 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
     fd6:	mov	r0, r5
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
     fd8:	add.w	r4, r4, r4, lsl #2
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
     fdc:	bl	dc4 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     fe0:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
     fe2:	lsls	r1, r4, #4
     fe4:	cbz	r0, ffc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
     fe6:	ldr	r3, [r0, #0]
     fe8:	movs	r2, #0
     fea:	ldr	r3, [r3, #48]	; 0x30
     fec:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     fee:	ldr	r0, [r5, #20]
     ff0:	cbz	r0, ffc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
     ff2:	ldr	r3, [r0, #0]
     ff4:	movs	r2, #80	; 0x50
     ff6:	mov	r1, r6
     ff8:	ldr	r3, [r3, #40]	; 0x28
     ffa:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
     ffc:	mov	r0, r6
     ffe:	pop	{r4, r5, r6, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    1000:	movs	r2, #80	; 0x50
    1002:	movs	r1, #0
    1004:	mov	r0, r6
    1006:	bl	cf4c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    100a:	mov	r0, r6
    100c:	pop	{r4, r5, r6, pc}
    100e:	nop

00001010 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    1010:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    1012:	ldr	r5, [r0, #88]	; 0x58
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    1014:	sub	sp, #84	; 0x54
    while (true) 
    { if (next_ == 0) return 0;
    1016:	cbz	r5, 1058 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x48>
    1018:	mov	r4, r0
    101a:	b.n	102a <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    101c:	ldr	r3, [sp, #8]
    101e:	str	r3, [r4, #88]	; 0x58
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    1020:	ldrb.w	r3, [sp, #16]
    1024:	cbnz	r3, 1052 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x42>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1026:	ldr	r5, [r4, #88]	; 0x58
    1028:	cbz	r5, 1058 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    102a:	mov	r2, r5
    102c:	mov	r1, r4
    102e:	mov	r0, sp
    1030:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1034:	ldrb.w	r2, [r4, #92]	; 0x5c
    1038:	cmp	r2, #0
    103a:	bne.n	101c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xc>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    103c:	ldr	r3, [r4, #88]	; 0x58
        if (next_ >= index_entries_) next_ = 0;
    103e:	ldr	r1, [r4, #80]	; 0x50
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1040:	adds	r3, #1
    1042:	str	r3, [r4, #88]	; 0x58
        if (next_ >= index_entries_) next_ = 0;
    1044:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    1046:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    104a:	it	cs
    104c:	strcs	r2, [r4, #88]	; 0x58
      }
      if (r.name[0]) return ret;
    104e:	cmp	r3, #0
    1050:	beq.n	1026 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x16>
    }
  }
    1052:	mov	r0, r5
    1054:	add	sp, #84	; 0x54
    1056:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1058:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    105a:	mov	r0, r5
    105c:	add	sp, #84	; 0x54
    105e:	pop	{r4, r5, pc}

00001060 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    1060:	push	{r4, r5, r6, r7, lr}
    1062:	sub	sp, #84	; 0x54
    1064:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    1066:	mov	r2, r1
    1068:	mov	r1, r0
    106a:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    106c:	mov	r5, r3
    106e:	ldr	r6, [sp, #104]	; 0x68
    1070:	ldr	r4, [sp, #108]	; 0x6c
    Record r = ReadIndexRecord(handle);
    1072:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    1076:	mov	r0, r7
    1078:	add	r1, sp, #16
    107a:	bl	d434 <strcpy>
    *parent = r.parent;
    107e:	ldr	r2, [sp, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1080:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    1084:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1086:	cbnz	r3, 1096 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    1088:	ldr	r3, [sp, #4]
    *store = r.store;
    108a:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    108e:	str	r3, [r5, #0]
    *store = r.store;
    1090:	strh	r2, [r4, #0]
  }
    1092:	add	sp, #84	; 0x54
    1094:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1096:	mov.w	r3, #4294967295
    109a:	b.n	108a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

0000109c <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    109c:	push	{lr}
    109e:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    10a0:	mov	r2, r1
    10a2:	mov	r1, r0
    10a4:	mov	r0, sp
    10a6:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    10aa:	ldr	r0, [sp, #4]
    10ac:	add	sp, #84	; 0x54
    10ae:	ldr.w	pc, [sp], #4
    10b2:	nop

000010b4 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    10b4:	push	{r4, r5, lr}
    10b6:	mov	r4, r0
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    10b8:	ldr	r0, [r0, #40]	; 0x28
    10ba:	sub	sp, #84	; 0x54
    10bc:	cbz	r0, 10f0 <MTPStorage_SD::close()+0x3c>
    10be:	ldr	r3, [r0, #0]
    10c0:	ldr	r3, [r3, #56]	; 0x38
    10c2:	blx	r3
    10c4:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
    10c6:	ldr	r0, [r4, #40]	; 0x28
    10c8:	cbz	r0, 10d0 <MTPStorage_SD::close()+0x1c>
    10ca:	ldr	r3, [r0, #0]
    10cc:	ldr	r3, [r3, #60]	; 0x3c
    10ce:	blx	r3
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    10d0:	ldr	r2, [r4, #76]	; 0x4c
    10d2:	mov	r1, r4
    10d4:	mov	r0, sp
    10d6:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    10da:	mov	r2, sp
    10dc:	ldr	r1, [r4, #76]	; 0x4c
    10de:	mov	r0, r4
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    10e0:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    10e2:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    10e6:	mvn.w	r3, #1
    10ea:	str	r3, [r4, #76]	; 0x4c
  }
    10ec:	add	sp, #84	; 0x54
    10ee:	pop	{r4, r5, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    10f0:	mov	r5, r0
    10f2:	b.n	10d0 <MTPStorage_SD::close()+0x1c>

000010f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    10f4:	push	{r4, r5, r6, r7, lr}
    10f6:	mov	r6, r0
    10f8:	sub	sp, #84	; 0x54
    10fa:	mov	r4, r1
    10fc:	mov	r5, r2
    Record tmp = ReadIndexRecord(i);
    10fe:	mov	r0, sp
    1100:	mov	r2, r1
    1102:	mov	r1, r6
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    1104:	mov	r7, r3
    Record tmp = ReadIndexRecord(i);
    1106:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==(unsigned)i) 
    110a:	ldr	r1, [sp, #0]
    110c:	cmp	r4, r1
    110e:	beq.n	1154 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    1110:	mov	r3, r7
    1112:	mov	r2, r5
    1114:	mov	r0, r6
    1116:	bl	10f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    111a:	mov	r0, r5
    111c:	bl	d500 <strlen>
    1120:	adds	r3, r5, r0
    1122:	mov	r4, r0
    1124:	ldrb.w	r3, [r3, #-1]
    1128:	cmp	r3, #47	; 0x2f
    112a:	beq.n	1134 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x40>
    112c:	ldr	r3, [pc, #52]	; (1164 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
    112e:	adds	r4, #1
    1130:	ldrh	r3, [r3, #0]
    1132:	strh	r3, [r5, r0]
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1134:	add	r0, sp, #16
    1136:	bl	d500 <strlen>
    113a:	add	r0, r4
    113c:	adds	r0, #1
    113e:	cmp	r0, r7
    1140:	bcc.n	114a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x56>
      return tmp.store;
    1142:	ldrh.w	r0, [sp, #14]
    }
  }
    1146:	add	sp, #84	; 0x54
    1148:	pop	{r4, r5, r6, r7, pc}
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    114a:	add	r1, sp, #16
    114c:	mov	r0, r5
    114e:	bl	d3f4 <strcat>
    1152:	b.n	1142 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    1154:	ldr	r3, [pc, #12]	; (1164 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
      return tmp.store;
    1156:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    115a:	ldrh	r3, [r3, #0]
    115c:	strh	r3, [r5, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
      return tmp.store;
    }
  }
    115e:	add	sp, #84	; 0x54
    1160:	pop	{r4, r5, r6, r7, pc}
    1162:	nop
    1164:	.word	0x20000260

00001168 <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    1168:	adds	r2, r1, #1
    116a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    116e:	mov	r6, r1
    1170:	sub	sp, #496	; 0x1f0
    1172:	mov	r4, r0
    1174:	ite	ne
    1176:	movne	r5, r1
    1178:	moveq	r5, #0
    117a:	b.n	118c <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    117c:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    117e:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    1180:	cbz	r3, 11ac <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    1182:	ldr	r3, [r4, #0]
    1184:	ldr	r3, [r3, #64]	; 0x40
    1186:	blx	r3
    1188:	cmp	r0, #0
    118a:	beq.n	125c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    118c:	mov	r2, r5
    118e:	mov	r1, r4
    1190:	mov	r0, sp
    1192:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1196:	movs	r2, #80	; 0x50
    1198:	mov	r1, sp
    119a:	add.w	r0, sp, r2
    119e:	bl	9c5c <memcpy>
      if (!r.isdir) break;
    11a2:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    11a6:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    11a8:	cmp	r3, #0
    11aa:	bne.n	117c <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    11ac:	adds	r3, r6, #1
    11ae:	beq.n	1272 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    11b0:	mov.w	r3, #256	; 0x100
    11b4:	mov	r1, r6
    11b6:	mov	r0, r4
    11b8:	add	r2, sp, #240	; 0xf0
    11ba:	bl	10f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(0,filename); else  success = sd_remove(0,filename);
    11be:	ldrb.w	r7, [sp, #92]	; 0x5c
    11c2:	ldr	r3, [pc, #296]	; (12ec <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    11c4:	cmp	r7, #0
    11c6:	beq.n	127a <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    11c8:	ldr.w	r7, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    11cc:	cbz	r7, 123a <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    11ce:	add	r5, sp, #160	; 0xa0
    11d0:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    11d4:	add	r2, sp, #240	; 0xf0
    11d6:	mov	r1, r7
    11d8:	mov	r0, r5
    11da:	mov	r3, lr
    11dc:	strb.w	lr, [r5]
    11e0:	strb.w	lr, [r5, #1]
    11e4:	strb.w	lr, [r5, #2]
    11e8:	bl	5f60 <FatFile::open(FatVolume*, char const*, int)>
    11ec:	cbz	r0, 125c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    11ee:	mov	r0, r5
    11f0:	bl	627c <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    11f4:	cbz	r0, 125c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    11f6:	movs	r3, #0
    int p = r.parent;
    11f8:	ldr.w	r8, [sp, #80]	; 0x50
    WriteIndexRecord(object, r);
    11fc:	add	r2, sp, #80	; 0x50
    11fe:	mov	r1, r6
    1200:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(0,filename); else  success = sd_remove(0,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    1202:	strb.w	r3, [sp, #96]	; 0x60
    int p = r.parent;
    WriteIndexRecord(object, r);
    1206:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    120a:	mov	r2, r8
    120c:	mov	r1, r4
    120e:	mov	r0, r5
    1210:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    1214:	ldr	r7, [r5, #4]
    1216:	cmp	r6, r7
    1218:	beq.n	1264 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    121a:	cbz	r7, 1272 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    121c:	mov	r2, r7
    121e:	mov	r1, r4
    1220:	mov	r0, sp
    1222:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1226:	movs	r2, #80	; 0x50
    1228:	mov	r1, sp
    122a:	mov	r0, r5
    122c:	bl	9c5c <memcpy>
        if (tmp.sibling == object) 
    1230:	ldr	r3, [r5, #8]
    1232:	cmp	r6, r3
    1234:	beq.n	12d0 <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    1236:	mov	r7, r3
    1238:	b.n	121a <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    123a:	ldr.w	r1, [r3, #1152]	; 0x480
    123e:	cbz	r1, 125c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1240:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1242:	add	r2, sp, #240	; 0xf0
    1244:	mov	r3, r7
    1246:	strb.w	r7, [r5, #49]	; 0x31
    124a:	mov	r0, r5
    124c:	strb.w	r7, [r5, #50]	; 0x32
    1250:	strb.w	r7, [r5, #51]	; 0x33
    1254:	bl	48cc <ExFatFile::open(ExFatVolume*, char const*, int)>
    1258:	cmp	r0, #0
    125a:	bne.n	12e2 <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    125c:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    125e:	add	sp, #496	; 0x1f0
    1260:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    1264:	ldr	r3, [sp, #88]	; 0x58
      WriteIndexRecord(p, tmp);
    1266:	mov	r2, r5
    1268:	mov	r1, r8
    126a:	mov	r0, r4
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    126c:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    126e:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    1272:	movs	r0, #1
  }
    1274:	add	sp, #496	; 0x1f0
    1276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    127a:	ldr.w	lr, [r3, #1148]	; 0x47c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    127e:	cmp.w	lr, #0
    1282:	beq.n	12a4 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    1284:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1286:	add	r2, sp, #240	; 0xf0
    1288:	mov	r1, lr
    128a:	movs	r3, #1
    128c:	mov	r0, r5
    128e:	strb	r7, [r5, #0]
    1290:	strb	r7, [r5, #1]
    1292:	strb	r7, [r5, #2]
    1294:	bl	5f60 <FatFile::open(FatVolume*, char const*, int)>
    1298:	cmp	r0, #0
    129a:	beq.n	125c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    129c:	mov	r0, r5
    129e:	bl	7658 <FatFile::remove()>
    12a2:	b.n	11f4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    12a4:	ldr.w	r1, [r3, #1152]	; 0x480
    12a8:	cmp	r1, #0
    12aa:	beq.n	125c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    12ac:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    12ae:	add	r2, sp, #240	; 0xf0
    12b0:	movs	r3, #1
    12b2:	strb.w	lr, [r5, #49]	; 0x31
    12b6:	mov	r0, r5
    12b8:	strb.w	lr, [r5, #50]	; 0x32
    12bc:	strb.w	lr, [r5, #51]	; 0x33
    12c0:	bl	48cc <ExFatFile::open(ExFatVolume*, char const*, int)>
    12c4:	cmp	r0, #0
    12c6:	beq.n	125c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    12c8:	mov	r0, r5
    12ca:	bl	50c0 <ExFatFile::remove()>
    12ce:	b.n	11f4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    12d0:	ldr	r3, [sp, #88]	; 0x58
          WriteIndexRecord(c, tmp);
    12d2:	mov	r0, r4
    12d4:	mov	r2, r5
    12d6:	mov	r1, r7
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    12d8:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    12da:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    12de:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    12e0:	b.n	125e <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    12e2:	mov	r0, r5
    12e4:	bl	51f0 <ExFatFile::rmdir()>
    12e8:	b.n	11f4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    12ea:	nop
    12ec:	.word	0x20001628

000012f0 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    12f0:	push	{r4, r5, r6, lr}
    12f2:	sub.w	sp, sp, #648	; 0x288
    12f6:	mov	r4, r0
    12f8:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    12fa:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    12fe:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    1300:	add	r2, sp, #136	; 0x88
    1302:	bl	10f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    1306:	mov	r2, r5
    1308:	mov	r1, r4
    130a:	add	r0, sp, #56	; 0x38
    130c:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    1310:	mov	r1, r6
    1312:	add	r0, sp, #72	; 0x48
    1314:	bl	d434 <strcpy>
    WriteIndexRecord(handle, p1);
    1318:	mov	r0, r4
    131a:	add	r2, sp, #56	; 0x38
    131c:	mov	r1, r5
    131e:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    1322:	mov	r0, r4
    1324:	mov.w	r3, #256	; 0x100
    1328:	mov	r1, r5
    132a:	add	r2, sp, #392	; 0x188
    132c:	bl	10f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1330:	ldr	r3, [pc, #116]	; (13a8 <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    1332:	ldr.w	r4, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    1336:	cbz	r4, 136e <MTPStorage_SD::rename(unsigned long, char const*)+0x7e>
    1338:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    133a:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    133e:	mov	r0, sp
    1340:	mov	r1, r4
    1342:	mov	r3, r5
    1344:	mov	r2, r5
    1346:	strb.w	r5, [sp]
    134a:	strb.w	r5, [sp, #1]
    134e:	strb.w	r5, [sp, #2]
    1352:	bl	5e54 <FatFile::open(FatFile*, char const*, int)>
    1356:	cbnz	r0, 135e <MTPStorage_SD::rename(unsigned long, char const*)+0x6e>

    sd_rename(0,oldName,newName);
  }
    1358:	add.w	sp, sp, #648	; 0x288
    135c:	pop	{r4, r5, r6, pc}
    135e:	add	r2, sp, #392	; 0x188
    1360:	mov	r1, r4
    1362:	mov	r0, sp
    1364:	bl	678c <FatFile::rename(FatFile*, char const*)>
    1368:	add.w	sp, sp, #648	; 0x288
    136c:	pop	{r4, r5, r6, pc}
    136e:	ldr.w	r1, [r3, #1152]	; 0x480
    1372:	cmp	r1, #0
    1374:	beq.n	1358 <MTPStorage_SD::rename(unsigned long, char const*)+0x68>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1376:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    137a:	mov	r3, r4
    137c:	mov	r2, r4
    137e:	mov	r0, sp
    1380:	mov	r1, r5
    1382:	strb.w	r4, [sp, #49]	; 0x31
    1386:	strb.w	r4, [sp, #50]	; 0x32
    138a:	strb.w	r4, [sp, #51]	; 0x33
    138e:	bl	47b0 <ExFatFile::open(ExFatFile*, char const*, int)>
    1392:	cmp	r0, #0
    1394:	beq.n	1358 <MTPStorage_SD::rename(unsigned long, char const*)+0x68>
    1396:	add	r2, sp, #392	; 0x188
    1398:	mov	r1, r5
    139a:	mov	r0, sp
    139c:	bl	56f8 <ExFatFile::rename(ExFatFile*, char const*)>
    13a0:	add.w	sp, sp, #648	; 0x288
    13a4:	pop	{r4, r5, r6, pc}
    13a6:	nop
    13a8:	.word	0x20001628

000013ac <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    13ac:	push	{r4, r5, r6, lr}
    13ae:	sub.w	sp, sp, #728	; 0x2d8
    13b2:	mov	r5, r0
    13b4:	mov	r6, r1
    13b6:	mov	r4, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    13b8:	mov.w	r3, #256	; 0x100
    13bc:	add	r2, sp, #216	; 0xd8
    13be:	bl	10f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    13c2:	mov	r2, r6
    13c4:	mov	r1, r5
    13c6:	add	r0, sp, #56	; 0x38
    13c8:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    13cc:	adds	r3, r4, #1
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    13ce:	mov	r1, r5
    13d0:	add	r0, sp, #136	; 0x88
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    Record p1 = ReadIndexRecord(handle);

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    13d2:	it	eq
    13d4:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    13d6:	mov	r2, r4
    13d8:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    13dc:	ldr	r3, [sp, #140]	; 0x8c
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    13de:	add	r2, sp, #56	; 0x38
    13e0:	mov	r1, r6
    13e2:	mov	r0, r5
    Record p1 = ReadIndexRecord(handle);

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    13e4:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;
    13e6:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    13e8:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    13ea:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    13ee:	mov	r1, r4
    13f0:	add	r2, sp, #136	; 0x88
    13f2:	mov	r0, r5
    13f4:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    13f8:	mov.w	r3, #256	; 0x100
    13fc:	mov	r1, r6
    13fe:	mov	r0, r5
    1400:	add	r2, sp, #472	; 0x1d8
    1402:	bl	10f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1406:	ldr	r3, [pc, #116]	; (147c <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    1408:	ldr.w	r4, [r3, #1148]	; 0x47c
    140c:	cbz	r4, 1444 <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    140e:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    1410:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1414:	mov	r0, sp
    1416:	mov	r1, r4
    1418:	mov	r3, r5
    141a:	mov	r2, r5
    141c:	strb.w	r5, [sp]
    1420:	strb.w	r5, [sp, #1]
    1424:	strb.w	r5, [sp, #2]
    1428:	bl	5e54 <FatFile::open(FatFile*, char const*, int)>
    142c:	cbnz	r0, 1434 <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd_rename(0,oldName,newName);
  }
    142e:	add.w	sp, sp, #728	; 0x2d8
    1432:	pop	{r4, r5, r6, pc}
    1434:	add	r2, sp, #472	; 0x1d8
    1436:	mov	r1, r4
    1438:	mov	r0, sp
    143a:	bl	678c <FatFile::rename(FatFile*, char const*)>
    143e:	add.w	sp, sp, #728	; 0x2d8
    1442:	pop	{r4, r5, r6, pc}
    1444:	ldr.w	r1, [r3, #1152]	; 0x480
    1448:	cmp	r1, #0
    144a:	beq.n	142e <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    144c:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1450:	mov	r3, r4
    1452:	mov	r2, r4
    1454:	mov	r0, sp
    1456:	mov	r1, r5
    1458:	strb.w	r4, [sp, #49]	; 0x31
    145c:	strb.w	r4, [sp, #50]	; 0x32
    1460:	strb.w	r4, [sp, #51]	; 0x33
    1464:	bl	47b0 <ExFatFile::open(ExFatFile*, char const*, int)>
    1468:	cmp	r0, #0
    146a:	beq.n	142e <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    146c:	add	r2, sp, #472	; 0x1d8
    146e:	mov	r1, r5
    1470:	mov	r0, sp
    1472:	bl	56f8 <ExFatFile::rename(ExFatFile*, char const*)>
    1476:	add.w	sp, sp, #728	; 0x2d8
    147a:	pop	{r4, r5, r6, pc}
    147c:	.word	0x20001628

00001480 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    1480:	ldr	r3, [r0, #76]	; 0x4c
    1482:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1484:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1488:	sub	sp, #364	; 0x16c
    if (open_file_ == i && mode_ == mode) return;
    148a:	beq.w	15ae <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x12e>
    148e:	mov	r5, r0
    1490:	mov	r8, r2
    char filename[256];
    uint16_t store = ConstructFilename(i, filename, 256);
    1492:	mov.w	r3, #256	; 0x100
    1496:	add	r2, sp, #104	; 0x68
    1498:	mov	r7, r1
    149a:	bl	10f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    149e:	mov	r6, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    14a0:	ldr	r0, [r5, #40]	; 0x28
    14a2:	cbz	r0, 14b6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    14a4:	ldr	r3, [r0, #0]
    14a6:	ldr	r3, [r3, #64]	; 0x40
    14a8:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    14aa:	cbz	r0, 14b6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    14ac:	ldr	r0, [r5, #40]	; 0x28
    14ae:	cbz	r0, 14b6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    14b0:	ldr	r3, [r0, #0]
    14b2:	ldr	r3, [r3, #60]	; 0x3c
    14b4:	blx	r3
    file_=sd_open(store,filename,mode);
    14b6:	movw	r4, #1204	; 0x4b4
    14ba:	ldr	r1, [pc, #296]	; (15e4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x164>)
    14bc:	ldr	r2, [pc, #296]	; (15e8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x168>)
    14be:	uxtb.w	r3, r8
    14c2:	mul.w	r0, r4, r6
    14c6:	ldr	r4, [r1, r0]
    14c8:	add	r1, r0
    14ca:	ldr	r4, [r4, #0]
    14cc:	cmp	r4, r2
    14ce:	bne.n	15bc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    14d0:	cmp	r3, #1
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    14d2:	add	r2, sp, #104	; 0x68
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    14d4:	movw	r3, #16898	; 0x4202
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    14d8:	add.w	r1, r1, #4
    14dc:	it	ne
    14de:	movne	r3, #0
    14e0:	add	r0, sp, #24
    14e2:	bl	8074 <FsVolume::open(char const*, int)>
    14e6:	ldr	r3, [sp, #96]	; 0x60
    14e8:	cmp	r3, #0
    14ea:	beq.n	15c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x146>
		if (file) return File(new SDFile(file));
    14ec:	movs	r0, #104	; 0x68
    14ee:	mov.w	r9, #0
    14f2:	bl	b7f4 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    14f6:	ldrb.w	r2, [sp, #28]
    14fa:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    14fc:	ldr	r3, [pc, #236]	; (15ec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x16c>)
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    14fe:	ldr	r1, [pc, #240]	; (15f0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x170>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1500:	mov.w	fp, #1000	; 0x3e8
    1504:	strb	r2, [r4, #24]
    1506:	add.w	sl, sp, #40	; 0x28
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    150a:	ldrb.w	r2, [sp, #36]	; 0x24
    150e:	adds	r0, #36	; 0x24
    1510:	str	r3, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    1512:	add	r6, sp, #4
    1514:	ldr	r3, [sp, #32]
    1516:	str	r1, [r4, #0]
    1518:	mov	r1, sl
    151a:	str	r3, [r4, #28]
    151c:	strb.w	r2, [r4, #32]
    1520:	strb.w	r9, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1524:	strb.w	r9, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1528:	str.w	r9, [r4, #16]
    152c:	str.w	fp, [r4, #8]
    1530:	bl	7e20 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1534:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1536:	ldr	r2, [pc, #188]	; (15f4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x174>)
    1538:	adds	r3, #1
    153a:	str.w	r9, [r4, #100]	; 0x64
    153e:	str	r2, [r4, #20]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1540:	ldr	r2, [pc, #180]	; (15f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x178>)
    1542:	str.w	fp, [r6, #8]
    1546:	strb.w	r9, [r6, #4]
    154a:	strb.w	r9, [r6, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    154e:	str	r4, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1550:	str	r2, [r6, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1552:	str	r3, [r4, #16]
    1554:	ldr	r3, [pc, #164]	; (15fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17c>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    1556:	mov	r0, sl
    1558:	str	r3, [sp, #24]
    155a:	bl	7ea4 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    155e:	ldr	r2, [r5, #40]	; 0x28
    1560:	cbz	r2, 156a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xea>
    1562:	ldr	r3, [r2, #16]
    1564:	subs	r3, #1
    1566:	str	r3, [r2, #16]
    1568:	cbz	r3, 1592 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x112>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    156a:	ldr	r3, [r6, #16]
    156c:	str	r3, [r5, #40]	; 0x28
		if (f) f->refcount++;
    156e:	cbz	r3, 1586 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x106>
    1570:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    1572:	ldr	r1, [pc, #132]	; (15f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x178>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1574:	adds	r2, #1
		return *this;
	}
	virtual ~File() {
    1576:	str	r1, [r6, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1578:	str	r2, [r3, #16]
    157a:	ldr	r2, [r6, #16]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    157c:	cbz	r2, 1586 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x106>
    157e:	ldr	r3, [r2, #16]
    1580:	subs	r3, #1
    1582:	str	r3, [r2, #16]
    1584:	cbz	r3, 15a0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x120>
    open_file_ = i;
    1586:	str	r7, [r5, #76]	; 0x4c
    mode_ = mode;
    1588:	str.w	r8, [r5, #72]	; 0x48
    mtp_lock_storage(false);
  }
    158c:	add	sp, #364	; 0x16c
    158e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1592:	ldr	r0, [r5, #40]	; 0x28
    1594:	cmp	r0, #0
    1596:	beq.n	156a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xea>
    1598:	ldr	r3, [r0, #0]
    159a:	ldr	r3, [r3, #32]
    159c:	blx	r3
    159e:	b.n	156a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xea>
    15a0:	ldr	r0, [r6, #16]
    15a2:	cmp	r0, #0
    15a4:	beq.n	1586 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x106>
    15a6:	ldr	r3, [r0, #0]
    15a8:	ldr	r3, [r3, #32]
    15aa:	blx	r3
    15ac:	b.n	1586 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x106>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    15ae:	ldr	r3, [r0, #72]	; 0x48
    15b0:	cmp	r3, r2
    15b2:	bne.w	148e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    15b6:	add	sp, #364	; 0x16c
    15b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (open_file_ == i && mode_ == mode) return;
    char filename[256];
    uint16_t store = ConstructFilename(i, filename, 256);
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    15bc:	add	r6, sp, #4
    15be:	add	r2, sp, #104	; 0x68
    15c0:	mov	r0, r6
    15c2:	blx	r4
    15c4:	b.n	155e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xde>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    15c6:	ldr	r3, [sp, #100]	; 0x64
    15c8:	cmp	r3, #0
    15ca:	bne.n	14ec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x6c>
    15cc:	add	r6, sp, #4
    15ce:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    15d2:	ldr	r2, [pc, #36]	; (15f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x178>)
    15d4:	add.w	sl, sp, #40	; 0x28
    15d8:	strb	r3, [r6, #4]
    15da:	strb	r3, [r6, #12]
    15dc:	str	r3, [r6, #16]
    15de:	str	r1, [r6, #8]
    15e0:	str	r2, [r6, #0]
    15e2:	b.n	1554 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xd4>
    15e4:	.word	0x20001628
    15e8:	.word	0x00000699
    15ec:	.word	0x20000008
    15f0:	.word	0x200000d0
    15f4:	.word	0x20000050
    15f8:	.word	0x20000074
    15fc:	.word	0x2000002c

00001600 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1600:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1604:	mov	r4, r0
    1606:	mov	r7, r2
    OpenFileByIndex(handle);
    1608:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    160a:	mov	r5, r3
    160c:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    160e:	bl	1480 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1612:	ldr	r0, [r4, #40]	; 0x28
    1614:	cbz	r0, 1632 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1616:	ldr	r3, [r0, #0]
    1618:	mov	r1, r7
    161a:	movs	r2, #0
    161c:	ldr	r3, [r3, #48]	; 0x30
    161e:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1620:	ldr	r0, [r4, #40]	; 0x28
    1622:	cbz	r0, 1632 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1624:	ldr	r3, [r0, #0]
    1626:	mov	r2, r6
    1628:	mov	r1, r5
    162a:	ldr	r3, [r3, #40]	; 0x28
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    162c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1630:	bx	r3
    1632:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1636:	nop

00001638 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    1638:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    163c:	cmp.w	r2, #4294967295
    1640:	ite	ne
    1642:	movne	r6, r2
    1644:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    1646:	sub	sp, #476	; 0x1dc
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1648:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    164a:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    164c:	mov	r2, r6
    164e:	add	r0, sp, #56	; 0x38
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    1650:	mov	r7, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1652:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    1656:	ldr	r0, [sp, #504]	; 0x1f8
    1658:	bl	d500 <strlen>
    165c:	cmp	r0, #62	; 0x3e
    165e:	bls.n	166a <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x32>
    1660:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    1662:	mov	r0, r5
    1664:	add	sp, #476	; 0x1dc
    1666:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    166a:	adds	r2, r0, #1
    166c:	ldr	r1, [sp, #504]	; 0x1f8
    166e:	add	r0, sp, #152	; 0x98
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    1670:	mov.w	r9, #0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    1674:	bl	9c5c <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1678:	ldr	r5, [r4, #80]	; 0x50
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    167a:	ldrh.w	r0, [sp, #70]	; 0x46
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    167e:	mov.w	r8, #1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1682:	adds	r2, r5, #1
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1684:	ldr	r3, [sp, #60]	; 0x3c
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1686:	mov	r1, r5
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    1688:	strh.w	r0, [sp, #150]	; 0x96
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    168c:	str	r2, [r4, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    168e:	mov	r0, r4
    1690:	add	r2, sp, #136	; 0x88
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    1692:	str	r6, [sp, #136]	; 0x88
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    1694:	strb.w	r7, [sp, #148]	; 0x94
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1698:	str	r3, [sp, #144]	; 0x90
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    169a:	str.w	r9, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    169e:	strb.w	r8, [sp, #149]	; 0x95
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    16a2:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    16a6:	add	r2, sp, #56	; 0x38
    16a8:	mov	r1, r6
    16aa:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    16ac:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    16ae:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    16b2:	cbnz	r7, 16c6 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8e>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    16b4:	mov	r0, r4
    16b6:	mov	r2, r8
    16b8:	mov	r1, r5
    16ba:	bl	1480 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    16be:	mov	r0, r5
    16c0:	add	sp, #476	; 0x1dc
    16c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      uint16_t store =ConstructFilename(ret, filename, 256);
    16c6:	mov.w	r3, #256	; 0x100
    16ca:	mov	r1, r5
    16cc:	add	r2, sp, #216	; 0xd8
    16ce:	mov	r0, r4
    16d0:	bl	10f4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      mtp_lock_storage(true);
      sd_mkdir(store,filename);
    16d4:	movw	r3, #1204	; 0x4b4
    16d8:	ldr	r2, [pc, #92]	; (1738 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x100>)
    16da:	mul.w	r0, r3, r0
    16de:	ldr	r1, [pc, #92]	; (173c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x104>)
    16e0:	ldr	r3, [r2, r0]
    16e2:	add	r0, r2
    16e4:	ldr	r3, [r3, #8]
    16e6:	cmp	r3, r1
    16e8:	bne.n	1730 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xf8>
    16ea:	ldr.w	r4, [r0, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    16ee:	cbz	r4, 170c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xd4>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    16f0:	mov	r3, r8
    16f2:	add	r2, sp, #216	; 0xd8
    16f4:	add.w	r1, r4, #1088	; 0x440
    16f8:	mov	r0, sp
    16fa:	strb.w	r9, [sp]
    16fe:	strb.w	r9, [sp, #1]
    1702:	strb.w	r9, [sp, #2]
    1706:	bl	6688 <FatFile::mkdir(FatFile*, char const*, bool)>
    170a:	b.n	1662 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
    170c:	ldr.w	r1, [r0, #1152]	; 0x480
    1710:	cmp	r1, #0
    1712:	beq.n	1662 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1714:	mov	r3, r8
    1716:	add	r2, sp, #216	; 0xd8
    1718:	add.w	r1, r1, #1088	; 0x440
    171c:	mov	r0, sp
    171e:	strb.w	r4, [sp, #49]	; 0x31
    1722:	strb.w	r4, [sp, #50]	; 0x32
    1726:	strb.w	r4, [sp, #51]	; 0x33
    172a:	bl	55e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    172e:	b.n	1662 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
    1730:	add	r1, sp, #216	; 0xd8
    1732:	blx	r3
    1734:	b.n	1662 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
    1736:	nop
    1738:	.word	0x20001628
    173c:	.word	0x00000541

00001740 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    1740:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1744:	sub	sp, #160	; 0xa0
    1746:	mov	r1, r0
    1748:	mov	r4, r0
    174a:	mov	r6, r2
    174c:	mov	r0, sp
    174e:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1752:	ldrb.w	r3, [sp, #12]
    1756:	cbz	r3, 175e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    1758:	ldrb.w	r5, [sp, #13]
    175c:	cbz	r5, 1764 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x24>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    175e:	add	sp, #160	; 0xa0
    1760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    1764:	mov	r0, r4
    1766:	mov	r2, r5
    1768:	mov	r1, r6
    176a:	bl	1480 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    176e:	ldr	r0, [r4, #40]	; 0x28
    1770:	cmp	r0, #0
    1772:	beq.n	175e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    1774:	ldr	r3, [r0, #0]
    1776:	ldr	r3, [r3, #64]	; 0x40
    1778:	blx	r3
      if (!sd_isOpen(file_)) return;
    177a:	cmp	r0, #0
    177c:	beq.n	175e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    177e:	mov.w	r8, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    1782:	ldr	r7, [pc, #268]	; (1890 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x150>)
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    1784:	ldr	r1, [r4, #40]	; 0x28
    1786:	cmp	r1, #0
    1788:	beq.n	183e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    178a:	ldr	r3, [r1, #0]
    178c:	movs	r2, #0
    178e:	add	r0, sp, #80	; 0x50
    1790:	ldr	r3, [r3, #76]	; 0x4c
    1792:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1794:	ldr	r2, [r4, #60]	; 0x3c
    1796:	cbz	r2, 17aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    1798:	ldr	r3, [r2, #16]
    179a:	subs	r3, #1
    179c:	str	r3, [r2, #16]
    179e:	cbnz	r3, 17aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    17a0:	ldr	r0, [r4, #60]	; 0x3c
    17a2:	cbz	r0, 17aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    17a4:	ldr	r3, [r0, #0]
    17a6:	ldr	r3, [r3, #32]
    17a8:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    17aa:	ldr	r3, [sp, #96]	; 0x60
    17ac:	str	r3, [r4, #60]	; 0x3c
		if (f) f->refcount++;
    17ae:	cbz	r3, 17ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    17b0:	ldr	r2, [r3, #16]
    17b2:	adds	r2, #1
    17b4:	str	r2, [r3, #16]
    17b6:	ldr	r2, [sp, #96]	; 0x60
		return *this;
	}
	virtual ~File() {
    17b8:	str	r7, [sp, #80]	; 0x50
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17ba:	cbz	r2, 17ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    17bc:	ldr	r3, [r2, #16]
    17be:	subs	r3, #1
    17c0:	str	r3, [r2, #16]
    17c2:	cbnz	r3, 17ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    17c4:	ldr	r0, [sp, #96]	; 0x60
    17c6:	cbz	r0, 17ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    17c8:	ldr	r3, [r0, #0]
    17ca:	ldr	r3, [r3, #32]
    17cc:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    17ce:	ldr	r0, [r4, #60]	; 0x3c
    17d0:	cmp	r0, #0
    17d2:	beq.n	1860 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x120>
    17d4:	ldr	r3, [r0, #0]
    17d6:	ldr	r3, [r3, #64]	; 0x40
    17d8:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    17da:	cmp	r0, #0
    17dc:	beq.n	1860 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x120>

        Record r;
        r.store = record.store;
    17de:	ldrh.w	r3, [sp, #14]
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    17e2:	ldr	r0, [r4, #60]	; 0x3c
        r.parent = i;
    17e4:	str	r6, [sp, #80]	; 0x50
        r.sibling = sibling;
    17e6:	str	r5, [sp, #88]	; 0x58
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    17e8:	strh.w	r3, [sp, #94]	; 0x5e
    17ec:	cmp	r0, #0
    17ee:	beq.n	1850 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x110>
    17f0:	ldr	r3, [r0, #0]
    17f2:	ldr	r3, [r3, #72]	; 0x48
    17f4:	blx	r3
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    17f6:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    17fa:	cmp	r0, #0
    17fc:	beq.n	1878 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x138>
    17fe:	ldr	r0, [r4, #60]	; 0x3c
    1800:	movs	r3, #0
        r.scanned = false;
    1802:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    1804:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    1806:	strb.w	r2, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    180a:	cmp	r0, #0
    180c:	beq.n	188a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x14a>
    180e:	ldr	r3, [r0, #0]
    1810:	ldr	r3, [r3, #68]	; 0x44
    1812:	blx	r3
    1814:	mov	r1, r0
        sd_getName(child_,r.name,64);
    1816:	add	r0, sp, #96	; 0x60
    1818:	bl	d434 <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    181c:	ldr	r1, [r4, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    181e:	mov	r0, r4
    1820:	add	r2, sp, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1822:	adds	r3, r1, #1
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
    1824:	mov	r5, r1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1826:	str	r3, [r4, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    1828:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    182c:	ldr	r0, [r4, #60]	; 0x3c
    182e:	cmp	r0, #0
    1830:	beq.n	1784 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    1832:	ldr	r3, [r0, #0]
    1834:	ldr	r3, [r3, #60]	; 0x3c
    1836:	blx	r3
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    1838:	ldr	r1, [r4, #40]	; 0x28
    183a:	cmp	r1, #0
    183c:	bne.n	178a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x4a>
    183e:	strb.w	r1, [sp, #84]	; 0x54
    1842:	str.w	r8, [sp, #88]	; 0x58
    1846:	strb.w	r1, [sp, #92]	; 0x5c
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    184a:	str	r7, [sp, #80]	; 0x50
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    184c:	str	r1, [sp, #96]	; 0x60
    184e:	b.n	1794 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x54>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    1850:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    1854:	movs	r3, #0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1856:	ldr	r1, [pc, #60]	; (1894 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x154>)
    1858:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    185a:	strb.w	r3, [sp, #93]	; 0x5d
    185e:	b.n	1816 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    1860:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    1862:	mov	r2, sp
    1864:	mov	r1, r6
    1866:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    1868:	str	r5, [sp, #4]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    186a:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    186e:	bl	ed4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    1872:	add	sp, #160	; 0xa0
    1874:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    1878:	ldr	r0, [r4, #60]	; 0x3c
    187a:	cmp	r0, #0
    187c:	beq.n	1854 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    187e:	ldr	r3, [r0, #0]
    1880:	ldr	r3, [r3, #56]	; 0x38
    1882:	blx	r3
    1884:	mov	r3, r0
    1886:	ldr	r0, [r4, #60]	; 0x3c
    1888:	b.n	1802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xc2>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    188a:	ldr	r1, [pc, #8]	; (1894 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x154>)
    188c:	b.n	1816 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    188e:	nop
    1890:	.word	0x20000074
    1894:	.word	0x20000174

00001898 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]>:

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    1898:	movs	r2, #1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    189a:	ldrb.w	r3, [r0, #84]	; 0x54
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
    189e:	push	{r4, r5, r6, lr}
    18a0:	mov	r5, r0
    18a2:	mov	r6, r1
  { if (all_scanned_) return;
    all_scanned_ = true;
    18a4:	strb.w	r2, [r0, #85]	; 0x55

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    18a8:	cbz	r3, 18c4 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x2c>
  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(storage);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(storage,i);
    18aa:	ldr	r3, [r5, #80]	; 0x50
    18ac:	cbz	r3, 18c2 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x2a>
    18ae:	movs	r4, #0
    18b0:	mov	r2, r4
    18b2:	mov	r1, r6
    18b4:	mov	r0, r5
    18b6:	adds	r4, #1
    18b8:	bl	1740 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    18bc:	ldr	r3, [r5, #80]	; 0x50
    18be:	cmp	r3, r4
    18c0:	bhi.n	18b0 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x18>
    18c2:	pop	{r4, r5, r6, pc}
    18c4:	bl	f08 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>
    18c8:	b.n	18aa <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x12>
    18ca:	nop

000018cc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    18cc:	ldrb.w	r3, [r0, #84]	; 0x54
  void  MTPStorage_SD::setStorageNumbers(const char **str, int num) {sd_str = str; num_storage=num;}
  uint32_t MTPStorage_SD::getNumStorage() {return num_storage;}
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    18d0:	push	{r4, r5, lr}
    18d2:	mov	r4, r0
    18d4:	sub	sp, #92	; 0x5c
    18d6:	mov	r5, r2

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    18d8:	cbz	r3, 1918 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4c>
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    GenerateIndex(storage);
    if (parent) 
    18da:	cbz	r5, 1904 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x38>
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization
    18dc:	adds	r3, r5, #1

      ScanDir(storage, parent);
    18de:	mov	r0, r4

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    GenerateIndex(storage);
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization
    18e0:	it	eq
    18e2:	addeq.w	r5, r1, #4294967295

      ScanDir(storage, parent);
    18e6:	mov	r2, r5
    18e8:	bl	1740 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    18ec:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    18ee:	mov	r2, r5
    18f0:	mov	r1, r4
    GenerateIndex(storage);
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization

      ScanDir(storage, parent);
      follow_sibling_ = true;
    18f2:	strb.w	r3, [r4, #92]	; 0x5c
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    18f6:	add	r0, sp, #8
    18f8:	bl	fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    18fc:	ldr	r3, [sp, #12]
    18fe:	str	r3, [r4, #88]	; 0x58
    { 
      ScanAll(storage);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    1900:	add	sp, #92	; 0x5c
    1902:	pop	{r4, r5, pc}
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    1904:	ldrb.w	r3, [r4, #85]	; 0x55
    1908:	cbz	r3, 1922 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x56>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    190a:	movs	r2, #0
      next_ = 1;
    190c:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    190e:	strb.w	r2, [r4, #92]	; 0x5c
      next_ = 1;
    1912:	str	r3, [r4, #88]	; 0x58
    }
  }
    1914:	add	sp, #92	; 0x5c
    1916:	pop	{r4, r5, pc}
    1918:	str	r1, [sp, #4]
    191a:	bl	f08 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>
    191e:	ldr	r1, [sp, #4]
    1920:	b.n	18da <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    1922:	mov	r0, r4
    1924:	bl	1898 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    1928:	movs	r2, #0
      next_ = 1;
    192a:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    192c:	strb.w	r2, [r4, #92]	; 0x5c
      next_ = 1;
    1930:	str	r3, [r4, #88]	; 0x58
    1932:	b.n	1914 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x48>

00001934 <MTPD::write(char const*, int) [clone .part.1]>:
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    1934:	movw	r3, #9256	; 0x2428
    1938:	ldr	r3, [r0, r3]
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    193a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    193e:	mov	r5, r1
    1940:	mov	r8, r2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    1942:	cbnz	r3, 194c <MTPD::write(char const*, int) [clone .part.1]+0x18>
    1944:	ldr	r7, [pc, #104]	; (19b0 <MTPD::write(char const*, int) [clone .part.1]+0x7c>)
    1946:	add.w	r2, r0, #544	; 0x220
    194a:	str	r2, [r7, #0]
    194c:	add	r3, r8
    194e:	movw	r2, #9256	; 0x2428
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1952:	cmp.w	r8, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    1956:	str	r3, [r0, r2]
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1958:	ble.n	19aa <MTPD::write(char const*, int) [clone .part.1]+0x76>
    195a:	add.w	r9, r0, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    195e:	add.w	r6, r0, #544	; 0x220
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1962:	movs	r4, #0
    1964:	ldr	r7, [pc, #72]	; (19b0 <MTPD::write(char const*, int) [clone .part.1]+0x7c>)
    1966:	b.n	196c <MTPD::write(char const*, int) [clone .part.1]+0x38>
    1968:	cmp	r8, r4
    196a:	ble.n	19aa <MTPD::write(char const*, int) [clone .part.1]+0x76>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    196c:	ldr	r3, [r7, #0]
    196e:	rsb	r2, r4, r8
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
    1972:	mov	r1, r5
    1974:	rsb	sl, r3, r9
    1978:	mov	r0, r3
    197a:	cmp	sl, r2
    197c:	it	ge
    197e:	movge	sl, r2
    1980:	mov	r2, sl
          pos += to_copy;
    1982:	add	r4, sl
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
    1984:	bl	9c5c <memcpy>
    1988:	mov	r3, r0
          pos += to_copy;
          src += to_copy;
    198a:	add	r5, sl
          dst += to_copy;
    198c:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    198e:	cmp	r3, r9
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1990:	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1992:	bne.n	1968 <MTPD::write(char const*, int) [clone .part.1]+0x34>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1994:	movs	r2, #60	; 0x3c
    1996:	mov.w	r1, #512	; 0x200
    199a:	mov	r0, r6
    199c:	bl	9bd0 <usb_mtp_send>
    19a0:	cmp	r0, #0
    19a2:	ble.n	1994 <MTPD::write(char const*, int) [clone .part.1]+0x60>
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19a4:	cmp	r8, r4
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    19a6:	str	r6, [r7, #0]
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19a8:	bgt.n	196c <MTPD::write(char const*, int) [clone .part.1]+0x38>
    19aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19ae:	nop
    19b0:	.word	0x20005bc0

000019b4 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    19b4:	push	{r4, r5, r6, r7, lr}
    if (*str) 
    19b6:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    19b8:	sub	sp, #12
    19ba:	mov	r6, r0
    if (*str) 
    19bc:	cmp	r3, #0
    19be:	beq.n	1a34 <MTPD::writestring(char const*)+0x80>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    19c0:	movw	r5, #9252	; 0x2424
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    19c4:	mov	r0, r1
    19c6:	mov	r4, r1
    19c8:	bl	d500 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    19cc:	ldrb	r2, [r6, r5]
    19ce:	adds	r0, #1
    19d0:	strb.w	r0, [sp, #3]
    19d4:	cmp	r2, #0
    19d6:	beq.n	1a5c <MTPD::writestring(char const*)+0xa8>
      {
        write_length_ += len;
    19d8:	movw	r1, #9256	; 0x2428
    19dc:	ldr	r3, [r6, r1]
    19de:	adds	r3, #1
    19e0:	str	r3, [r6, r1]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    19e2:	ldrb	r3, [r4, #0]
    19e4:	cbz	r3, 1a26 <MTPD::writestring(char const*)+0x72>
    19e6:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    19ea:	movw	r5, #9256	; 0x2428
    19ee:	add	r7, r6
    19f0:	add	r5, r6
    19f2:	b.n	1a00 <MTPD::writestring(char const*)+0x4c>
    19f4:	ldr	r3, [r5, #0]
    19f6:	adds	r3, #2
    19f8:	str	r3, [r5, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    19fa:	ldrb.w	r3, [r4, #1]!
    19fe:	cbz	r3, 1a1e <MTPD::writestring(char const*)+0x6a>
    1a00:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a04:	cmp	r2, #0
    1a06:	bne.n	19f4 <MTPD::writestring(char const*)+0x40>
    1a08:	movs	r2, #2
    1a0a:	add.w	r1, sp, #6
    1a0e:	mov	r0, r6
    1a10:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a14:	ldrb.w	r3, [r4, #1]!
    1a18:	ldrb	r2, [r7, #0]
    1a1a:	cmp	r3, #0
    1a1c:	bne.n	1a00 <MTPD::writestring(char const*)+0x4c>
    1a1e:	movs	r3, #0
    1a20:	strh.w	r3, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a24:	cbz	r2, 1a72 <MTPD::writestring(char const*)+0xbe>
      {
        write_length_ += len;
    1a26:	movw	r2, #9256	; 0x2428
    1a2a:	ldr	r3, [r6, r2]
    1a2c:	adds	r3, #2
    1a2e:	str	r3, [r6, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1a30:	add	sp, #12
    1a32:	pop	{r4, r5, r6, r7, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a34:	movw	r2, #9252	; 0x2424
    1a38:	strb.w	r3, [sp, #2]
    1a3c:	ldrb	r3, [r0, r2]
    1a3e:	cbz	r3, 1a4e <MTPD::writestring(char const*)+0x9a>
      {
        write_length_ += len;
    1a40:	movw	r2, #9256	; 0x2428
    1a44:	ldr	r3, [r0, r2]
    1a46:	adds	r3, #1
    1a48:	str	r3, [r0, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1a4a:	add	sp, #12
    1a4c:	pop	{r4, r5, r6, r7, pc}
    1a4e:	movs	r2, #1
    1a50:	add.w	r1, sp, #2
    1a54:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1a58:	add	sp, #12
    1a5a:	pop	{r4, r5, r6, r7, pc}
    1a5c:	movs	r2, #1
    1a5e:	add.w	r1, sp, #3
    1a62:	mov	r0, r6
    1a64:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a68:	ldrb	r3, [r4, #0]
    1a6a:	ldrb	r2, [r6, r5]
    1a6c:	cmp	r3, #0
    1a6e:	bne.n	19e6 <MTPD::writestring(char const*)+0x32>
    1a70:	b.n	1a1e <MTPD::writestring(char const*)+0x6a>
    1a72:	mov	r0, r6
    1a74:	movs	r2, #2
    1a76:	add	r1, sp, #4
    1a78:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    } else 
    { write8(0);
    }
  }
    1a7c:	add	sp, #12
    1a7e:	pop	{r4, r5, r6, r7, pc}

00001a80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1a80:	push	{r4, r5, r6, r7, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a82:	movw	r6, #9252	; 0x2424
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1a86:	sub	sp, #12
    1a88:	mov	r4, r0
    1a8a:	mov	r5, r1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a8c:	ldrb	r3, [r0, r6]
    1a8e:	strh.w	r1, [sp, #4]
    1a92:	cmp	r3, #0
    1a94:	beq.n	1b08 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x88>
      {
        write_length_ += len;
    1a96:	movw	r2, #9256	; 0x2428
    1a9a:	movw	r1, #65535	; 0xffff
    1a9e:	ldr	r3, [r0, r2]
    1aa0:	strh.w	r1, [sp, #6]
    1aa4:	adds	r3, #2
    1aa6:	str	r3, [r0, r2]
    1aa8:	movw	r2, #9256	; 0x2428
    1aac:	movs	r1, #0
    1aae:	ldr	r3, [r4, r2]
    1ab0:	strb.w	r1, [sp, #2]
    1ab4:	adds	r3, #2
    1ab6:	str	r3, [r4, r2]
    1ab8:	movw	r2, #9256	; 0x2428
    1abc:	ldr	r3, [r4, r2]
    1abe:	adds	r3, #1
    1ac0:	str	r3, [r4, r2]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1ac2:	movw	r3, #54274	; 0xd402
    1ac6:	cmp	r5, r3
    1ac8:	beq.n	1af6 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x76>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1aca:	movw	r3, #9252	; 0x2424
    1ace:	movs	r2, #0
    1ad0:	ldrb	r3, [r4, r3]
    1ad2:	strb.w	r2, [sp, #3]
    1ad6:	cbz	r3, 1ae6 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x66>
      {
        write_length_ += len;
    1ad8:	movw	r2, #9256	; 0x2428
    1adc:	ldr	r3, [r4, r2]
    1ade:	adds	r3, #1
    1ae0:	str	r3, [r4, r2]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1ae2:	add	sp, #12
    1ae4:	pop	{r4, r5, r6, r7, pc}
    1ae6:	mov	r0, r4
    1ae8:	movs	r2, #1
    1aea:	add.w	r1, sp, #3
    1aee:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1af2:	add	sp, #12
    1af4:	pop	{r4, r5, r6, r7, pc}
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    1af6:	mov	r0, r4
    1af8:	ldr	r1, [pc, #72]	; (1b44 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0xc4>)
    1afa:	bl	19b4 <MTPD::writestring(char const*)>
    1afe:	ldr	r1, [pc, #68]	; (1b44 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0xc4>)
    1b00:	mov	r0, r4
    1b02:	bl	19b4 <MTPD::writestring(char const*)>
    1b06:	b.n	1aca <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x4a>
    1b08:	movs	r2, #2
    1b0a:	add	r1, sp, #4
    1b0c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1b10:	movw	r3, #65535	; 0xffff
    1b14:	ldrb	r7, [r4, r6]
    1b16:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b1a:	cmp	r7, #0
    1b1c:	bne.n	1aa8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x28>
    1b1e:	movs	r2, #2
    1b20:	add.w	r1, sp, #6
    1b24:	mov	r0, r4
    1b26:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1b2a:	ldrb	r3, [r4, r6]
    1b2c:	strb.w	r7, [sp, #2]
    1b30:	cmp	r3, #0
    1b32:	bne.n	1ab8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x38>
    1b34:	movs	r2, #1
    1b36:	add.w	r1, sp, #2
    1b3a:	mov	r0, r4
    1b3c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1b40:	b.n	1ac2 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x42>
    1b42:	nop
    1b44:	.word	0x2000029c

00001b48 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1b48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b4c:	movw	r4, #9252	; 0x2424
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1b50:	sub	sp, #44	; 0x2c
    1b52:	movs	r6, #100	; 0x64
    1b54:	mov	r5, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b56:	ldrb	r3, [r0, r4]
    1b58:	strh.w	r6, [sp, #6]
    1b5c:	cmp	r3, #0
    1b5e:	beq.w	1c98 <MTPD::WriteDescriptor()+0x150>
      {
        write_length_ += len;
    1b62:	movw	r2, #9256	; 0x2428
    1b66:	movs	r1, #6
    1b68:	ldr	r3, [r0, r2]
    1b6a:	str	r1, [sp, #20]
    1b6c:	adds	r3, #2
    1b6e:	str	r3, [r0, r2]
    1b70:	movw	r2, #9256	; 0x2428
    1b74:	movs	r1, #100	; 0x64
    1b76:	ldr	r3, [r5, r2]
    1b78:	strh.w	r1, [sp, #4]
    1b7c:	adds	r3, #4
    1b7e:	str	r3, [r5, r2]
    1b80:	movw	r2, #9256	; 0x2428
    1b84:	ldr	r3, [r5, r2]
    1b86:	adds	r3, #2
    1b88:	str	r3, [r5, r2]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b8a:	movw	r4, #9252	; 0x2424
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    1b8e:	ldr	r1, [pc, #508]	; (1d8c <MTPD::WriteDescriptor()+0x244>)
    1b90:	mov	r0, r5
    1b92:	bl	19b4 <MTPD::writestring(char const*)>
    1b96:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b98:	ldrb	r3, [r5, r4]
    1b9a:	strh.w	r2, [sp, #2]
    1b9e:	cmp	r3, #0
    1ba0:	beq.w	1d66 <MTPD::WriteDescriptor()+0x21e>
      {
        write_length_ += len;
    1ba4:	movw	r2, #9256	; 0x2428
    1ba8:	movs	r1, #18
    1baa:	ldr	r3, [r5, r2]
    1bac:	str	r1, [sp, #16]
    1bae:	adds	r3, #2
    1bb0:	str	r3, [r5, r2]
    1bb2:	movw	r2, #9256	; 0x2428
    1bb6:	movs	r7, #1
    1bb8:	ldr	r3, [r5, r2]
    1bba:	adds	r3, #4
    1bbc:	str	r3, [r5, r2]
    1bbe:	ldr	r4, [pc, #464]	; (1d90 <MTPD::WriteDescriptor()+0x248>)
    1bc0:	movw	r8, #9252	; 0x2424
    1bc4:	movw	r6, #9256	; 0x2428
    1bc8:	movw	r3, #4097	; 0x1001
    1bcc:	add.w	r9, r4, #34	; 0x22
    1bd0:	add	r8, r5
    1bd2:	add	r6, r5
    1bd4:	b.n	1be6 <MTPD::WriteDescriptor()+0x9e>
    1bd6:	ldr	r3, [r6, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bd8:	cmp	r9, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1bda:	add.w	r3, r3, #2
    1bde:	str	r3, [r6, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1be0:	beq.n	1c00 <MTPD::WriteDescriptor()+0xb8>
    1be2:	ldrh.w	r3, [r4, #2]!
    1be6:	strh.w	r3, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1bea:	cmp	r7, #0
    1bec:	bne.n	1bd6 <MTPD::WriteDescriptor()+0x8e>
    1bee:	movs	r2, #2
    1bf0:	add	r1, sp, #8
    1bf2:	mov	r0, r5
    1bf4:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bf8:	cmp	r9, r4
    1bfa:	ldrb.w	r7, [r8]
    1bfe:	bne.n	1be2 <MTPD::WriteDescriptor()+0x9a>
    1c00:	movs	r3, #0
    1c02:	str	r3, [sp, #36]	; 0x24
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1c04:	cmp	r7, #0
    1c06:	beq.n	1cd0 <MTPD::WriteDescriptor()+0x188>
      {
        write_length_ += len;
    1c08:	movw	r2, #9256	; 0x2428
    1c0c:	movs	r1, #1
    1c0e:	ldr	r3, [r5, r2]
    1c10:	str	r1, [sp, #32]
    1c12:	adds	r3, #4
    1c14:	str	r3, [r5, r2]
    1c16:	movw	r2, #9256	; 0x2428
    1c1a:	movw	r1, #54274	; 0xd402
    1c1e:	ldr	r3, [r5, r2]
    1c20:	strh.w	r1, [sp, #14]
    1c24:	adds	r3, #4
    1c26:	str	r3, [r5, r2]
    1c28:	movw	r2, #9256	; 0x2428
    1c2c:	movs	r1, #0
    1c2e:	ldr	r3, [r5, r2]
    1c30:	str	r1, [sp, #28]
    1c32:	adds	r3, #2
    1c34:	str	r3, [r5, r2]
    1c36:	movw	r2, #9256	; 0x2428
    1c3a:	movs	r1, #2
    1c3c:	ldr	r3, [r5, r2]
    1c3e:	str	r1, [sp, #24]
    1c40:	adds	r3, #4
    1c42:	str	r3, [r5, r2]
    1c44:	movw	r2, #9256	; 0x2428
    1c48:	mov.w	r1, #12288	; 0x3000
    1c4c:	ldr	r3, [r5, r2]
    1c4e:	strh.w	r1, [sp, #12]
    1c52:	adds	r3, #4
    1c54:	str	r3, [r5, r2]
    1c56:	movw	r2, #9256	; 0x2428
    1c5a:	movw	r1, #12289	; 0x3001
    1c5e:	ldr	r3, [r5, r2]
    1c60:	strh.w	r1, [sp, #10]
    1c64:	adds	r3, #2
    1c66:	str	r3, [r5, r2]
    1c68:	movw	r2, #9256	; 0x2428
    1c6c:	ldr	r3, [r5, r2]
    1c6e:	adds	r3, #2
    1c70:	str	r3, [r5, r2]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    1c72:	mov	r0, r5
    1c74:	ldr	r1, [pc, #284]	; (1d94 <MTPD::WriteDescriptor()+0x24c>)
    1c76:	bl	19b4 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    1c7a:	mov	r0, r5
    1c7c:	ldr	r1, [pc, #280]	; (1d98 <MTPD::WriteDescriptor()+0x250>)
    1c7e:	bl	19b4 <MTPD::writestring(char const*)>
    writestring(MTP_VERS);      // version
    1c82:	mov	r0, r5
    1c84:	ldr	r1, [pc, #276]	; (1d9c <MTPD::WriteDescriptor()+0x254>)
    1c86:	bl	19b4 <MTPD::writestring(char const*)>
    writestring(MTP_SERNR);     // serial
    1c8a:	mov	r0, r5
    1c8c:	ldr	r1, [pc, #272]	; (1da0 <MTPD::WriteDescriptor()+0x258>)
    1c8e:	bl	19b4 <MTPD::writestring(char const*)>
  }
    1c92:	add	sp, #44	; 0x2c
    1c94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c98:	movs	r2, #2
    1c9a:	add.w	r1, sp, #6
    1c9e:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1ca2:	movs	r2, #6
    1ca4:	ldrb	r3, [r5, r4]
    1ca6:	str	r2, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1ca8:	cmp	r3, #0
    1caa:	bne.w	1b70 <MTPD::WriteDescriptor()+0x28>
    1cae:	movs	r2, #4
    1cb0:	add	r1, sp, #20
    1cb2:	mov	r0, r5
    1cb4:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1cb8:	ldrb	r3, [r5, r4]
    1cba:	strh.w	r6, [sp, #4]
    1cbe:	cmp	r3, #0
    1cc0:	bne.w	1b80 <MTPD::WriteDescriptor()+0x38>
    1cc4:	movs	r2, #2
    1cc6:	add	r1, sp, #4
    1cc8:	mov	r0, r5
    1cca:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1cce:	b.n	1b8a <MTPD::WriteDescriptor()+0x42>
    1cd0:	movw	r4, #9252	; 0x2424
    1cd4:	movs	r2, #4
    1cd6:	add	r1, sp, #36	; 0x24
    1cd8:	mov	r0, r5
    1cda:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1cde:	movs	r2, #1
    1ce0:	ldrb	r3, [r5, r4]
    1ce2:	str	r2, [sp, #32]
    1ce4:	cmp	r3, #0
    1ce6:	bne.n	1c16 <MTPD::WriteDescriptor()+0xce>
    1ce8:	movs	r2, #4
    1cea:	add	r1, sp, #32
    1cec:	mov	r0, r5
    1cee:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1cf2:	movw	r2, #54274	; 0xd402
    1cf6:	ldrb	r3, [r5, r4]
    1cf8:	strh.w	r2, [sp, #14]
    1cfc:	cmp	r3, #0
    1cfe:	bne.n	1c28 <MTPD::WriteDescriptor()+0xe0>
    1d00:	movs	r2, #2
    1d02:	add.w	r1, sp, #14
    1d06:	mov	r0, r5
    1d08:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1d0c:	ldrb	r3, [r5, r4]
    1d0e:	str	r7, [sp, #28]
    1d10:	cmp	r3, #0
    1d12:	bne.n	1c36 <MTPD::WriteDescriptor()+0xee>
    1d14:	movs	r2, #4
    1d16:	add	r1, sp, #28
    1d18:	mov	r0, r5
    1d1a:	movs	r6, #2
    1d1c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1d20:	ldrb	r3, [r5, r4]
    1d22:	str	r6, [sp, #24]
    1d24:	cmp	r3, #0
    1d26:	bne.n	1c44 <MTPD::WriteDescriptor()+0xfc>
    1d28:	movs	r2, #4
    1d2a:	add	r1, sp, #24
    1d2c:	mov	r0, r5
    1d2e:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1d32:	mov.w	r2, #12288	; 0x3000
    1d36:	ldrb	r3, [r5, r4]
    1d38:	strh.w	r2, [sp, #12]
    1d3c:	cmp	r3, #0
    1d3e:	bne.n	1c56 <MTPD::WriteDescriptor()+0x10e>
    1d40:	mov	r2, r6
    1d42:	add	r1, sp, #12
    1d44:	mov	r0, r5
    1d46:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1d4a:	movw	r2, #12289	; 0x3001
    1d4e:	ldrb	r3, [r5, r4]
    1d50:	strh.w	r2, [sp, #10]
    1d54:	cmp	r3, #0
    1d56:	bne.n	1c68 <MTPD::WriteDescriptor()+0x120>
    1d58:	mov	r2, r6
    1d5a:	add.w	r1, sp, #10
    1d5e:	mov	r0, r5
    1d60:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1d64:	b.n	1c72 <MTPD::WriteDescriptor()+0x12a>
    1d66:	movs	r2, #2
    1d68:	mov	r0, r5
    1d6a:	add.w	r1, sp, r2
    1d6e:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1d72:	movs	r2, #18
    1d74:	ldrb	r3, [r5, r4]
    1d76:	str	r2, [sp, #16]
    1d78:	cmp	r3, #0
    1d7a:	bne.w	1bb2 <MTPD::WriteDescriptor()+0x6a>
    1d7e:	movs	r2, #4
    1d80:	add	r1, sp, #16
    1d82:	mov	r0, r5
    1d84:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1d88:	ldrb	r7, [r5, r4]
    1d8a:	b.n	1bbe <MTPD::WriteDescriptor()+0x76>
    1d8c:	.word	0x200002a4
    1d90:	.word	0x20000264
    1d94:	.word	0x200002b8
    1d98:	.word	0x2000029c
    1d9c:	.word	0x200002c0
    1da0:	.word	0x200002c4

00001da4 <MTPD::WriteStorageIDs()>:
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    1da4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1da8:	mov	r8, r0
    uint32_t num=storage_->getNumStorage();
    1daa:	ldr	r0, [r0, #0]
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    1dac:	sub	sp, #8
    uint32_t num=storage_->getNumStorage();
    1dae:	ldr	r3, [r0, #0]
    1db0:	ldr	r3, [r3, #24]
    1db2:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1db4:	movw	r3, #9252	; 0x2424
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    1db8:	mov	r6, r0
    1dba:	str	r0, [sp, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1dbc:	ldrb.w	r3, [r8, r3]
    1dc0:	cbz	r3, 1e0e <MTPD::WriteStorageIDs()+0x6a>
      {
        write_length_ += len;
    1dc2:	movw	r2, #9256	; 0x2428
    1dc6:	ldr.w	r3, [r8, r2]
    1dca:	adds	r3, #4
    1dcc:	str.w	r3, [r8, r2]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1dd0:	cbz	r6, 1e08 <MTPD::WriteStorageIDs()+0x64>
    1dd2:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1dd6:	movw	r5, #9256	; 0x2428
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1dda:	movs	r4, #1
    1ddc:	add	r7, r8
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1dde:	add	r5, r8
    1de0:	b.n	1dee <MTPD::WriteStorageIDs()+0x4a>
    1de2:	ldr	r3, [r5, #0]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1de4:	adds	r4, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1de6:	adds	r3, #4
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1de8:	cmp	r6, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1dea:	str	r3, [r5, #0]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1dec:	bcc.n	1e08 <MTPD::WriteStorageIDs()+0x64>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1dee:	ldrb	r3, [r7, #0]
    1df0:	str	r4, [sp, #4]
    1df2:	cmp	r3, #0
    1df4:	bne.n	1de2 <MTPD::WriteStorageIDs()+0x3e>
    1df6:	movs	r2, #4
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1df8:	adds	r4, #1
    1dfa:	mov	r0, r8
    1dfc:	add.w	r1, sp, r2
    1e00:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1e04:	cmp	r6, r4
    1e06:	bcs.n	1dee <MTPD::WriteStorageIDs()+0x4a>
  }
    1e08:	add	sp, #8
    1e0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e0e:	movs	r2, #4
    1e10:	mov	r1, sp
    1e12:	mov	r0, r8
    1e14:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1e18:	b.n	1dd0 <MTPD::WriteStorageIDs()+0x2c>
    1e1a:	nop

00001e1c <MTPD::GetStorageInfo(unsigned long)>:

  void MTPD::GetStorageInfo(uint32_t storage) {
    1e1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e20:	mov	r4, r0
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    1e22:	ldr	r0, [r0, #0]
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    1e24:	sub	sp, #36	; 0x24
    1e26:	mov	r5, r1
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    1e28:	ldr	r3, [r0, #0]
    1e2a:	ldr	r3, [r3, #4]
    1e2c:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e2e:	movw	r3, #9252	; 0x2424
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    1e32:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e34:	ldrb	r3, [r4, r3]
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    1e36:	ite	eq
    1e38:	moveq	r2, #4
    1e3a:	movne	r2, #1
    1e3c:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e40:	cmp	r3, #0
    1e42:	beq.n	1f18 <MTPD::GetStorageInfo(unsigned long)+0xfc>
      {
        write_length_ += len;
    1e44:	movw	r2, #9256	; 0x2428
    1e48:	ldr	r3, [r4, r2]
    1e4a:	adds	r3, #2
    1e4c:	str	r3, [r4, r2]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    1e4e:	ldr	r0, [r4, #0]
    1e50:	mov	r1, r5
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e52:	movw	r7, #9252	; 0x2424
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    1e56:	ldr	r3, [r0, #0]
    1e58:	ldr	r3, [r3, #8]
    1e5a:	blx	r3
    1e5c:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e5e:	ldrb	r6, [r4, r7]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    1e60:	ite	eq
    1e62:	moveq	r3, #1
    1e64:	movne	r3, #2
    1e66:	strh.w	r3, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e6a:	cmp	r6, #0
    1e6c:	beq.n	1f68 <MTPD::GetStorageInfo(unsigned long)+0x14c>
      {
        write_length_ += len;
    1e6e:	movw	r2, #9256	; 0x2428
    1e72:	movs	r1, #0
    1e74:	ldr	r3, [r4, r2]
    1e76:	strh.w	r1, [sp, #8]
    1e7a:	adds	r3, #2
    1e7c:	str	r3, [r4, r2]
    1e7e:	movw	r2, #9256	; 0x2428
    1e82:	ldr	r3, [r4, r2]
    1e84:	adds	r3, #2
    1e86:	str	r3, [r4, r2]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint32_t nclust = storage_->clusterCount( storage) ; 
    1e88:	ldr	r0, [r4, #0]
    1e8a:	mov	r1, r5
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e8c:	movw	r6, #9252	; 0x2424
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint32_t nclust = storage_->clusterCount( storage) ; 
    1e90:	ldr	r3, [r0, #0]
    1e92:	ldr	r3, [r3, #12]
    1e94:	blx	r3
    1e96:	mov	r9, r0
    uint32_t nsect = storage_->clusterSize(storage) ; 
    1e98:	ldr	r0, [r4, #0]
    1e9a:	mov	r1, r5
    1e9c:	ldr	r3, [r0, #0]
    1e9e:	ldr	r3, [r3, #20]
    1ea0:	blx	r3
    1ea2:	mov	r7, r0
    uint32_t nfree = storage_->freeClusters(storage) ; 
    1ea4:	ldr	r0, [r4, #0]
    1ea6:	mov	r1, r5
    1ea8:	ldr	r3, [r0, #0]
    1eaa:	ldr	r3, [r3, #16]
    1eac:	blx	r3
    1eae:	mov	r8, r0
    1eb0:	umull	r0, r1, r9, r7
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1eb4:	ldrb	r2, [r4, r6]
    1eb6:	lsls	r3, r1, #9
    1eb8:	orr.w	r3, r3, r0, lsr #23
    1ebc:	lsls	r0, r0, #9
    1ebe:	str	r3, [sp, #28]
    1ec0:	str	r0, [sp, #24]
    1ec2:	cbz	r2, 1f26 <MTPD::GetStorageInfo(unsigned long)+0x10a>
    1ec4:	umull	r0, r1, r7, r8
      {
        write_length_ += len;
    1ec8:	movw	r6, #9256	; 0x2428
    1ecc:	lsls	r2, r1, #9
    1ece:	ldr	r3, [r4, r6]
    1ed0:	lsls	r1, r0, #9
    1ed2:	orr.w	r2, r2, r0, lsr #23
    1ed6:	adds	r3, #8
    1ed8:	str	r1, [sp, #16]
    1eda:	str	r2, [sp, #20]
    1edc:	str	r3, [r4, r6]
    1ede:	movw	r2, #9256	; 0x2428
    1ee2:	mov.w	r1, #4294967295
    1ee6:	ldr	r3, [r4, r2]
    1ee8:	str	r1, [sp, #12]
    1eea:	adds	r3, #8
    1eec:	str	r3, [r4, r2]
    1eee:	movw	r2, #9256	; 0x2428
    1ef2:	ldr	r3, [r4, r2]
    1ef4:	adds	r3, #4
    1ef6:	str	r3, [r4, r2]
    uint32_t nfree = storage_->freeClusters(storage) ; 
    write64((uint64_t)nclust*nsect*512L);  // max capacity
    write64((uint64_t)nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->getStorageName(storage);
    1ef8:	ldr	r0, [r4, #0]
    1efa:	mov	r1, r5
    1efc:	ldr	r3, [r0, #0]
    1efe:	ldr	r3, [r3, #28]
    1f00:	blx	r3
    writestring(name);  // storage descriptor
    1f02:	mov	r1, r0
    1f04:	mov	r0, r4
    1f06:	bl	19b4 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    1f0a:	mov	r0, r4
    1f0c:	ldr	r1, [pc, #124]	; (1f8c <MTPD::GetStorageInfo(unsigned long)+0x170>)
    1f0e:	bl	19b4 <MTPD::writestring(char const*)>
  }
    1f12:	add	sp, #36	; 0x24
    1f14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f18:	movs	r2, #2
    1f1a:	add.w	r1, sp, #6
    1f1e:	mov	r0, r4
    1f20:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1f24:	b.n	1e4e <MTPD::GetStorageInfo(unsigned long)+0x32>
    1f26:	movs	r2, #8
    1f28:	add	r1, sp, #24
    1f2a:	mov	r0, r4
    1f2c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1f30:	umull	r0, r1, r7, r8
    1f34:	ldrb	r2, [r4, r6]
    1f36:	lsls	r3, r1, #9
    1f38:	lsls	r1, r0, #9
    1f3a:	orr.w	r3, r3, r0, lsr #23
    1f3e:	str	r1, [sp, #16]
    1f40:	str	r3, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1f42:	cmp	r2, #0
    1f44:	bne.n	1ede <MTPD::GetStorageInfo(unsigned long)+0xc2>
    1f46:	movs	r2, #8
    1f48:	add	r1, sp, #16
    1f4a:	mov	r0, r4
    1f4c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1f50:	mov.w	r2, #4294967295
    1f54:	ldrb	r3, [r4, r6]
    1f56:	str	r2, [sp, #12]
    1f58:	cmp	r3, #0
    1f5a:	bne.n	1eee <MTPD::GetStorageInfo(unsigned long)+0xd2>
    1f5c:	movs	r2, #4
    1f5e:	add	r1, sp, #12
    1f60:	mov	r0, r4
    1f62:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1f66:	b.n	1ef8 <MTPD::GetStorageInfo(unsigned long)+0xdc>
    1f68:	movs	r2, #2
    1f6a:	add.w	r1, sp, #10
    1f6e:	mov	r0, r4
    1f70:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1f74:	ldrb	r3, [r4, r7]
    1f76:	strh.w	r6, [sp, #8]
    1f7a:	cmp	r3, #0
    1f7c:	bne.w	1e7e <MTPD::GetStorageInfo(unsigned long)+0x62>
    1f80:	movs	r2, #2
    1f82:	add	r1, sp, #8
    1f84:	mov	r0, r4
    1f86:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    1f8a:	b.n	1e88 <MTPD::GetStorageInfo(unsigned long)+0x6c>
    1f8c:	.word	0x20000174

00001f90 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    1f90:	push	{r4, r5, r6, lr}
    1f92:	mov	r5, r0
    storage_->StartGetObjectHandles(storage, parent);
    1f94:	ldr	r0, [r0, #0]
    int num = 0;
    1f96:	movs	r4, #0
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    1f98:	mov	r6, r1
    storage_->StartGetObjectHandles(storage, parent);
    1f9a:	ldr	r3, [r0, #0]
    1f9c:	ldr	r3, [r3, #32]
    1f9e:	blx	r3
    1fa0:	b.n	1fa4 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    int num = 0;
    while (storage_->GetNextObjectHandle(storage)) num++;
    1fa2:	adds	r4, #1
    1fa4:	ldr	r0, [r5, #0]
    1fa6:	mov	r1, r6
    1fa8:	ldr	r3, [r0, #0]
    1faa:	ldr	r3, [r3, #36]	; 0x24
    1fac:	blx	r3
    1fae:	cmp	r0, #0
    1fb0:	bne.n	1fa2 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>
    return num;
  }
    1fb2:	mov	r0, r4
    1fb4:	pop	{r4, r5, r6, pc}
    1fb6:	nop

00001fb8 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1fb8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (write_get_length_) {
    1fbc:	movw	r5, #9252	; 0x2424
    while (storage_->GetNextObjectHandle(storage)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1fc0:	sub	sp, #8
    1fc2:	mov	r4, r0
    if (write_get_length_) {
    1fc4:	ldrb	r3, [r0, r5]
    1fc6:	cbnz	r3, 201e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x66>
    1fc8:	mov	r6, r1
    1fca:	mov	r8, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    1fcc:	bl	1f90 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1fd0:	ldrb	r3, [r4, r5]
    1fd2:	str	r0, [sp, #4]
    1fd4:	cbz	r3, 2032 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x7a>
      {
        write_length_ += len;
    1fd6:	movw	r2, #9256	; 0x2428
    1fda:	ldr	r3, [r4, r2]
    1fdc:	adds	r3, #4
    1fde:	str	r3, [r4, r2]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    1fe0:	ldr	r0, [r4, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1fe2:	movw	r7, #9252	; 0x2424
      {
        write_length_ += len;
    1fe6:	movw	r5, #9256	; 0x2428
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    1fea:	mov	r2, r8
    1fec:	ldr	r3, [r0, #0]
    1fee:	mov	r1, r6
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1ff0:	add	r7, r4
      {
        write_length_ += len;
    1ff2:	add	r5, r4
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    1ff4:	ldr	r3, [r3, #32]
    1ff6:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    1ff8:	ldr	r0, [r4, #0]
    1ffa:	mov	r1, r6
    1ffc:	ldr	r3, [r0, #0]
    1ffe:	ldr	r3, [r3, #36]	; 0x24
    2000:	blx	r3
    2002:	cbz	r0, 202c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x74>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2004:	ldrb	r3, [r7, #0]
    2006:	str	r0, [sp, #0]
    2008:	cbz	r3, 2012 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
      {
        write_length_ += len;
    200a:	ldr	r3, [r5, #0]
    200c:	adds	r3, #4
    200e:	str	r3, [r5, #0]
    2010:	b.n	1ff8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x40>
    2012:	movs	r2, #4
    2014:	mov	r1, sp
    2016:	mov	r0, r4
    2018:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    201c:	b.n	1ff8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x40>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    201e:	bl	1f90 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    2022:	adds	r0, #1
    2024:	movw	r3, #9256	; 0x2428
    2028:	lsls	r0, r0, #2
    202a:	str	r0, [r4, r3]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    }
  }
    202c:	add	sp, #8
    202e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2032:	movs	r2, #4
    2034:	mov	r0, r4
    2036:	add.w	r1, sp, r2
    203a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    203e:	b.n	1fe0 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x28>

00002040 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    2040:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2044:	mov	r4, r0
    2046:	sub	sp, #328	; 0x148
    char filename[256];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    2048:	ldr	r0, [r0, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    204a:	movw	r6, #9252	; 0x2424
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    char filename[256];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    204e:	add.w	r5, sp, #10
    2052:	add	r7, sp, #24
    2054:	ldr.w	lr, [r0]
    2058:	add	r3, sp, #20
    205a:	str	r5, [sp, #4]
    205c:	add	r2, sp, #72	; 0x48
    205e:	str	r7, [sp, #0]
    2060:	ldr.w	r8, [lr, #40]	; 0x28
    2064:	blx	r8
    2066:	ldrh	r2, [r5, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2068:	ldrb	r3, [r4, r6]
    206a:	str	r2, [sp, #28]
    206c:	cmp	r3, #0
    206e:	beq.w	2182 <MTPD::GetObjectInfo(unsigned long)+0x142>
      {
        write_length_ += len;
    2072:	movw	r2, #9256	; 0x2428
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2076:	ldr	r1, [sp, #20]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    2078:	ldr	r3, [r4, r2]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    207a:	adds	r1, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    207c:	add.w	r3, r3, #4
    2080:	str	r3, [r4, r2]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2082:	beq.w	22d2 <MTPD::GetObjectInfo(unsigned long)+0x292>
    2086:	movs	r3, #0
    2088:	strh.w	r3, [sp, #16]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    208c:	movw	r2, #9256	; 0x2428
    2090:	movs	r1, #0
    2092:	ldr	r3, [r4, r2]
    2094:	strh.w	r1, [sp, #14]
    2098:	adds	r3, #2
    209a:	str	r3, [r4, r2]
    209c:	movw	r2, #9256	; 0x2428
    20a0:	ldr	r1, [sp, #20]
    20a2:	ldr	r3, [r4, r2]
    20a4:	str	r1, [sp, #60]	; 0x3c
    20a6:	adds	r3, #2
    20a8:	str	r3, [r4, r2]
    20aa:	movw	r2, #9256	; 0x2428
    20ae:	movs	r1, #0
    20b0:	ldr	r3, [r4, r2]
    20b2:	strh.w	r1, [sp, #12]
    20b6:	adds	r3, #4
    20b8:	str	r3, [r4, r2]
    20ba:	movw	r2, #9256	; 0x2428
    20be:	movs	r1, #0
    20c0:	ldr	r3, [r4, r2]
    20c2:	str	r1, [sp, #56]	; 0x38
    20c4:	adds	r3, #2
    20c6:	str	r3, [r4, r2]
    20c8:	movw	r2, #9256	; 0x2428
    20cc:	movs	r1, #0
    20ce:	ldr	r3, [r4, r2]
    20d0:	str	r1, [sp, #52]	; 0x34
    20d2:	adds	r3, #4
    20d4:	str	r3, [r4, r2]
    20d6:	movw	r2, #9256	; 0x2428
    20da:	movs	r1, #0
    20dc:	ldr	r3, [r4, r2]
    20de:	str	r1, [sp, #48]	; 0x30
    20e0:	adds	r3, #4
    20e2:	str	r3, [r4, r2]
    20e4:	movw	r2, #9256	; 0x2428
    20e8:	movs	r1, #0
    20ea:	ldr	r3, [r4, r2]
    20ec:	str	r1, [sp, #44]	; 0x2c
    20ee:	adds	r3, #4
    20f0:	str	r3, [r4, r2]
    20f2:	movw	r2, #9256	; 0x2428
    20f6:	movs	r1, #0
    20f8:	ldr	r3, [r4, r2]
    20fa:	str	r1, [sp, #40]	; 0x28
    20fc:	adds	r3, #4
    20fe:	str	r3, [r4, r2]
    2100:	movw	r2, #9256	; 0x2428
    2104:	movs	r1, #0
    2106:	ldr	r3, [r4, r2]
    2108:	str	r1, [sp, #36]	; 0x24
    210a:	adds	r3, #4
    210c:	str	r3, [r4, r2]
    210e:	movw	r2, #9256	; 0x2428
    2112:	ldr	r1, [r7, #0]
    2114:	ldr	r3, [r4, r2]
    2116:	str	r1, [sp, #32]
    2118:	adds	r3, #4
    211a:	str	r3, [r4, r2]
    211c:	ldr	r2, [sp, #20]
    211e:	movw	r1, #9256	; 0x2428
    2122:	sub.w	r2, r2, #4294967295
    2126:	ldr	r3, [r4, r1]
    2128:	clz	r2, r2
    212c:	adds	r3, #4
    212e:	lsrs	r2, r2, #5
    2130:	str	r3, [r4, r1]
    2132:	strh.w	r2, [sp, #18]
    2136:	movw	r2, #9256	; 0x2428
    213a:	movs	r1, #0
    213c:	ldr	r3, [r4, r2]
    213e:	str	r1, [sp, #68]	; 0x44
    2140:	adds	r3, #2
    2142:	str	r3, [r4, r2]
    2144:	movw	r2, #9256	; 0x2428
    2148:	movs	r1, #0
    214a:	ldr	r3, [r4, r2]
    214c:	str	r1, [sp, #64]	; 0x40
    214e:	adds	r3, #4
    2150:	str	r3, [r4, r2]
    2152:	movw	r2, #9256	; 0x2428
    2156:	ldr	r3, [r4, r2]
    2158:	adds	r3, #4
    215a:	str	r3, [r4, r2]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    215c:	add	r1, sp, #72	; 0x48
    215e:	mov	r0, r4
    2160:	bl	19b4 <MTPD::writestring(char const*)>
    writestring("");  // date created
    2164:	mov	r0, r4
    2166:	ldr	r1, [pc, #372]	; (22dc <MTPD::GetObjectInfo(unsigned long)+0x29c>)
    2168:	bl	19b4 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    216c:	mov	r0, r4
    216e:	ldr	r1, [pc, #364]	; (22dc <MTPD::GetObjectInfo(unsigned long)+0x29c>)
    2170:	bl	19b4 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    2174:	mov	r0, r4
    2176:	ldr	r1, [pc, #356]	; (22dc <MTPD::GetObjectInfo(unsigned long)+0x29c>)
    2178:	bl	19b4 <MTPD::writestring(char const*)>
  }
    217c:	add	sp, #328	; 0x148
    217e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2182:	movs	r2, #4
    2184:	add	r1, sp, #28
    2186:	mov	r0, r4
    2188:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    218c:	ldr	r2, [sp, #20]
    218e:	movw	r3, #12289	; 0x3001
    2192:	ldrb	r5, [r4, r6]
    2194:	adds	r2, #1
    2196:	it	ne
    2198:	movne	r3, #0
    219a:	strh.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    219e:	cmp	r5, #0
    21a0:	bne.w	208c <MTPD::GetObjectInfo(unsigned long)+0x4c>
    21a4:	add	r1, sp, #16
    21a6:	movs	r2, #2
    21a8:	mov	r0, r4
    21aa:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    21ae:	ldrb	r3, [r4, r6]
    21b0:	strh.w	r5, [sp, #14]
    21b4:	cmp	r3, #0
    21b6:	bne.w	209c <MTPD::GetObjectInfo(unsigned long)+0x5c>
    21ba:	movs	r2, #2
    21bc:	add.w	r1, sp, #14
    21c0:	mov	r0, r4
    21c2:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    21c6:	ldr	r2, [sp, #20]
    21c8:	ldrb	r3, [r4, r6]
    21ca:	str	r2, [sp, #60]	; 0x3c
    21cc:	cmp	r3, #0
    21ce:	bne.w	20aa <MTPD::GetObjectInfo(unsigned long)+0x6a>
    21d2:	add	r1, sp, #60	; 0x3c
    21d4:	movs	r2, #4
    21d6:	mov	r0, r4
    21d8:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    21dc:	ldrb	r3, [r4, r6]
    21de:	strh.w	r5, [sp, #12]
    21e2:	cmp	r3, #0
    21e4:	bne.w	20ba <MTPD::GetObjectInfo(unsigned long)+0x7a>
    21e8:	add	r1, sp, #12
    21ea:	movs	r2, #2
    21ec:	mov	r0, r4
    21ee:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    21f2:	ldrb	r3, [r4, r6]
    21f4:	str	r5, [sp, #56]	; 0x38
    21f6:	cmp	r3, #0
    21f8:	bne.w	20c8 <MTPD::GetObjectInfo(unsigned long)+0x88>
    21fc:	add	r1, sp, #56	; 0x38
    21fe:	movs	r2, #4
    2200:	mov	r0, r4
    2202:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2206:	ldrb	r3, [r4, r6]
    2208:	str	r5, [sp, #52]	; 0x34
    220a:	cmp	r3, #0
    220c:	bne.w	20d6 <MTPD::GetObjectInfo(unsigned long)+0x96>
    2210:	add	r1, sp, #52	; 0x34
    2212:	movs	r2, #4
    2214:	mov	r0, r4
    2216:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    221a:	ldrb	r3, [r4, r6]
    221c:	str	r5, [sp, #48]	; 0x30
    221e:	cmp	r3, #0
    2220:	bne.w	20e4 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    2224:	add	r1, sp, #48	; 0x30
    2226:	movs	r2, #4
    2228:	mov	r0, r4
    222a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    222e:	ldrb	r3, [r4, r6]
    2230:	str	r5, [sp, #44]	; 0x2c
    2232:	cmp	r3, #0
    2234:	bne.w	20f2 <MTPD::GetObjectInfo(unsigned long)+0xb2>
    2238:	add	r1, sp, #44	; 0x2c
    223a:	movs	r2, #4
    223c:	mov	r0, r4
    223e:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2242:	ldrb	r3, [r4, r6]
    2244:	str	r5, [sp, #40]	; 0x28
    2246:	cmp	r3, #0
    2248:	bne.w	2100 <MTPD::GetObjectInfo(unsigned long)+0xc0>
    224c:	add	r1, sp, #40	; 0x28
    224e:	movs	r2, #4
    2250:	mov	r0, r4
    2252:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2256:	ldrb	r3, [r4, r6]
    2258:	str	r5, [sp, #36]	; 0x24
    225a:	cmp	r3, #0
    225c:	bne.w	210e <MTPD::GetObjectInfo(unsigned long)+0xce>
    2260:	movw	r5, #9252	; 0x2424
    2264:	movs	r2, #4
    2266:	add	r1, sp, #36	; 0x24
    2268:	mov	r0, r4
    226a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    226e:	ldr	r2, [r7, #0]
    2270:	ldrb	r3, [r4, r5]
    2272:	str	r2, [sp, #32]
    2274:	cmp	r3, #0
    2276:	bne.w	211c <MTPD::GetObjectInfo(unsigned long)+0xdc>
    227a:	add	r1, sp, #32
    227c:	movs	r2, #4
    227e:	mov	r0, r4
    2280:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2284:	ldr	r3, [sp, #20]
    2286:	ldrb	r7, [r4, r5]
    2288:	sub.w	r3, r3, #4294967295
    228c:	clz	r3, r3
    2290:	lsrs	r3, r3, #5
    2292:	strh.w	r3, [sp, #18]
    2296:	cmp	r7, #0
    2298:	bne.w	2136 <MTPD::GetObjectInfo(unsigned long)+0xf6>
    229c:	add.w	r1, sp, #18
    22a0:	movs	r2, #2
    22a2:	mov	r0, r4
    22a4:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    22a8:	ldrb	r6, [r4, r5]
    22aa:	str	r7, [sp, #68]	; 0x44
    22ac:	cmp	r6, #0
    22ae:	bne.w	2144 <MTPD::GetObjectInfo(unsigned long)+0x104>
    22b2:	add	r1, sp, #68	; 0x44
    22b4:	movs	r2, #4
    22b6:	mov	r0, r4
    22b8:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    22bc:	ldrb	r3, [r4, r5]
    22be:	str	r6, [sp, #64]	; 0x40
    22c0:	cmp	r3, #0
    22c2:	bne.w	2152 <MTPD::GetObjectInfo(unsigned long)+0x112>
    22c6:	add	r1, sp, #64	; 0x40
    22c8:	movs	r2, #4
    22ca:	mov	r0, r4
    22cc:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    22d0:	b.n	215c <MTPD::GetObjectInfo(unsigned long)+0x11c>
    22d2:	movw	r3, #12289	; 0x3001
    22d6:	strh.w	r3, [sp, #16]
    22da:	b.n	208c <MTPD::GetObjectInfo(unsigned long)+0x4c>
    22dc:	.word	0x20000174

000022e0 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    22e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    22e4:	movw	r2, #9252	; 0x2424
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    22e8:	ldr.w	r8, [pc, #128]	; 236c <MTPD::getObjectPropsSupported(unsigned long)+0x8c>
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    22ec:	sub	sp, #12
    22ee:	mov	r9, r0
      write32(propertyListNum);
    22f0:	ldr.w	r3, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    22f4:	ldrb	r2, [r0, r2]
    22f6:	str	r3, [sp, #4]
    22f8:	cbz	r2, 2356 <MTPD::getObjectPropsSupported(unsigned long)+0x76>
      {
        write_length_ += len;
    22fa:	movw	r1, #9256	; 0x2428
    22fe:	ldr	r2, [r0, r1]
    2300:	adds	r2, #4
    2302:	str	r2, [r0, r1]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2304:	cbz	r3, 2350 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    2306:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    230a:	movw	r6, #9256	; 0x2428
    230e:	ldr	r5, [pc, #88]	; (2368 <MTPD::getObjectPropsSupported(unsigned long)+0x88>)
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2310:	movw	r2, #56321	; 0xdc01
    2314:	add	r7, r9
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    2316:	add	r6, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2318:	movs	r4, #0
    231a:	b.n	2330 <MTPD::getObjectPropsSupported(unsigned long)+0x50>
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    231c:	ldr	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    231e:	adds	r4, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    2320:	adds	r3, #2
    2322:	str	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2324:	ldr.w	r3, [r8]
    2328:	cmp	r3, r4
    232a:	bls.n	2350 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    232c:	ldrh.w	r2, [r5, #2]!
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2330:	ldrb	r3, [r7, #0]
    2332:	strh.w	r2, [sp, #2]
    2336:	cmp	r3, #0
    2338:	bne.n	231c <MTPD::getObjectPropsSupported(unsigned long)+0x3c>
    233a:	movs	r2, #2
    233c:	mov	r0, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    233e:	adds	r4, #1
    2340:	add.w	r1, sp, r2
    2344:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2348:	ldr.w	r3, [r8]
    234c:	cmp	r3, r4
    234e:	bhi.n	232c <MTPD::getObjectPropsSupported(unsigned long)+0x4c>
    }
    2350:	add	sp, #12
    2352:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2356:	movs	r2, #4
    2358:	add.w	r1, sp, r2
    235c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2360:	ldr.w	r3, [r8]
    2364:	b.n	2304 <MTPD::getObjectPropsSupported(unsigned long)+0x24>
    2366:	nop
    2368:	.word	0x20000288
    236c:	.word	0x20000bc0

00002370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    2370:	mvn.w	r3, #56320	; 0xdc00
    2374:	add	r3, r1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    2376:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    237a:	mov	r4, r0
    237c:	sub	sp, #148	; 0x94
      switch(p1)
    237e:	cmp	r3, #67	; 0x43
    2380:	bhi.w	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2384:	tbh	[pc, r3, lsl #1]
    2388:	.word	0x00d900ba
    238c:	.word	0x014200f8
    2390:	.word	0x008c008c
    2394:	.word	0x01af0161
    2398:	.word	0x008c01f9
    239c:	.word	0x008c0243
    23a0:	.word	0x008c008c
    23a4:	.word	0x008c008c
    23a8:	.word	0x008c008c
    23ac:	.word	0x008c008c
    23b0:	.word	0x008c008c
    23b4:	.word	0x008c008c
    23b8:	.word	0x008c008c
    23bc:	.word	0x008c008c
    23c0:	.word	0x008c008c
    23c4:	.word	0x008c008c
    23c8:	.word	0x008c008c
    23cc:	.word	0x008c008c
    23d0:	.word	0x008c008c
    23d4:	.word	0x008c008c
    23d8:	.word	0x008c008c
    23dc:	.word	0x008c008c
    23e0:	.word	0x008c008c
    23e4:	.word	0x008c008c
    23e8:	.word	0x008c008c
    23ec:	.word	0x008c008c
    23f0:	.word	0x008c008c
    23f4:	.word	0x008c008c
    23f8:	.word	0x008c008c
    23fc:	.word	0x008c008c
    2400:	.word	0x008c008c
    2404:	.word	0x008c008c
    2408:	.word	0x008c028b
    240c:	.word	0x008f008c
    2410:	movs	r2, #2
    2412:	add.w	r1, sp, #66	; 0x42
    2416:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    241a:	movs	r3, #10
    241c:	ldrb	r6, [r4, r5]
    241e:	strh.w	r3, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2422:	cmp	r6, #0
    2424:	bne.w	28bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x54c>
    2428:	movs	r2, #2
    242a:	add	r1, sp, #64	; 0x40
    242c:	mov	r0, r4
    242e:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2432:	ldrb	r3, [r4, r5]
    2434:	strb.w	r6, [sp, #24]
    2438:	cmp	r3, #0
    243a:	bne.w	28c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x556>
    243e:	movs	r2, #1
    2440:	add	r1, sp, #24
    2442:	mov	r0, r4
    2444:	mov.w	r8, #0
    2448:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    244c:	mov.w	r9, #0
    2450:	ldrb	r3, [r4, r5]
    2452:	strd	r8, r9, [sp, #136]	; 0x88
    2456:	cmp	r3, #0
    2458:	bne.w	28d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x560>
    245c:	movs	r2, #8
    245e:	add	r1, sp, #136	; 0x88
    2460:	mov	r0, r4
    2462:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2466:	ldrb	r7, [r4, r5]
    2468:	strd	r8, r9, [sp, #128]	; 0x80
    246c:	cmp	r7, #0
    246e:	bne.w	263e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    2472:	movs	r2, #8
    2474:	add	r1, sp, #128	; 0x80
    2476:	mov	r0, r4
    2478:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    247c:	ldrb	r6, [r4, r5]
    247e:	str	r7, [sp, #112]	; 0x70
    2480:	cbnz	r6, 24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2482:	movs	r2, #4
    2484:	add	r1, sp, #112	; 0x70
    2486:	mov	r0, r4
    2488:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    248c:	ldrb	r3, [r4, r5]
    248e:	strb.w	r6, [sp, #23]
    2492:	cbnz	r3, 24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2494:	mov	r0, r4
    2496:	movs	r2, #1
    2498:	add.w	r1, sp, #23
    249c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
          write8(0);
          break;
        default:
          break;
      }
    }
    24a0:	add	sp, #148	; 0x94
    24a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    24a6:	movw	r5, #9252	; 0x2424
    24aa:	movw	r2, #56388	; 0xdc44
    24ae:	ldrb	r3, [r0, r5]
    24b0:	strh.w	r2, [sp, #70]	; 0x46
    24b4:	cmp	r3, #0
    24b6:	beq.w	2a60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f0>
      {
        write_length_ += len;
    24ba:	movw	r2, #9256	; 0x2428
    24be:	ldr	r3, [r4, r2]
    24c0:	adds	r3, #2
    24c2:	str	r3, [r4, r2]
    24c4:	movw	r2, #9256	; 0x2428
    24c8:	ldr	r3, [r4, r2]
    24ca:	adds	r3, #2
    24cc:	str	r3, [r4, r2]
    24ce:	movw	r2, #9256	; 0x2428
    24d2:	ldr	r3, [r4, r2]
    24d4:	adds	r3, #1
    24d6:	str	r3, [r4, r2]
    24d8:	movw	r2, #9256	; 0x2428
    24dc:	ldr	r3, [r4, r2]
    24de:	adds	r3, #1
    24e0:	str	r3, [r4, r2]
    24e2:	movw	r2, #9256	; 0x2428
    24e6:	ldr	r3, [r4, r2]
    24e8:	adds	r3, #4
    24ea:	str	r3, [r4, r2]
    24ec:	movw	r2, #9256	; 0x2428
    24f0:	ldr	r3, [r4, r2]
    24f2:	adds	r3, #1
    24f4:	str	r3, [r4, r2]
          write8(0);
          break;
        default:
          break;
      }
    }
    24f6:	add	sp, #148	; 0x94
    24f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    24fc:	movw	r5, #9252	; 0x2424
    2500:	movw	r2, #56321	; 0xdc01
    2504:	ldrb	r3, [r0, r5]
    2506:	strh.w	r2, [sp, #30]
    250a:	cmp	r3, #0
    250c:	beq.w	29e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x676>
      {
        write_length_ += len;
    2510:	movw	r2, #9256	; 0x2428
    2514:	ldr	r3, [r4, r2]
    2516:	adds	r3, #2
    2518:	str	r3, [r4, r2]
    251a:	movw	r2, #9256	; 0x2428
    251e:	ldr	r3, [r4, r2]
    2520:	adds	r3, #2
    2522:	str	r3, [r4, r2]
    2524:	movw	r2, #9256	; 0x2428
    2528:	ldr	r3, [r4, r2]
    252a:	adds	r3, #1
    252c:	str	r3, [r4, r2]
    252e:	movw	r2, #9256	; 0x2428
    2532:	ldr	r3, [r4, r2]
    2534:	adds	r3, #4
    2536:	str	r3, [r4, r2]
    2538:	b.n	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    253a:	movw	r5, #9252	; 0x2424
    253e:	movw	r2, #56322	; 0xdc02
    2542:	ldrb	r3, [r0, r5]
    2544:	strh.w	r2, [sp, #36]	; 0x24
    2548:	cmp	r3, #0
    254a:	beq.w	295e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ee>
      {
        write_length_ += len;
    254e:	movw	r2, #9256	; 0x2428
    2552:	ldr	r3, [r4, r2]
    2554:	adds	r3, #2
    2556:	str	r3, [r4, r2]
    2558:	movw	r2, #9256	; 0x2428
    255c:	ldr	r3, [r4, r2]
    255e:	adds	r3, #2
    2560:	str	r3, [r4, r2]
    2562:	movw	r2, #9256	; 0x2428
    2566:	ldr	r3, [r4, r2]
    2568:	adds	r3, #1
    256a:	str	r3, [r4, r2]
    256c:	movw	r2, #9256	; 0x2428
    2570:	ldr	r3, [r4, r2]
    2572:	adds	r3, #2
    2574:	str	r3, [r4, r2]
    2576:	b.n	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2578:	movw	r5, #9252	; 0x2424
    257c:	movw	r2, #56323	; 0xdc03
    2580:	ldrb	r3, [r0, r5]
    2582:	strh.w	r2, [sp, #42]	; 0x2a
    2586:	cmp	r3, #0
    2588:	bne.n	254e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1de>
    258a:	movs	r2, #2
    258c:	add.w	r1, sp, #42	; 0x2a
    2590:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2594:	movs	r7, #4
    2596:	ldrb.w	r8, [r4, r5]
    259a:	strh.w	r7, [sp, #40]	; 0x28
    259e:	cmp.w	r8, #0
    25a2:	bne.n	2558 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    25a4:	movs	r2, #2
    25a6:	add	r1, sp, #40	; 0x28
    25a8:	mov	r0, r4
    25aa:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    25ae:	ldrb	r6, [r4, r5]
    25b0:	strb.w	r8, [sp, #9]
    25b4:	cmp	r6, #0
    25b6:	bne.n	2562 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    25b8:	movs	r2, #1
    25ba:	add.w	r1, sp, #9
    25be:	mov	r0, r4
    25c0:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    25c4:	ldrb.w	r8, [r4, r5]
    25c8:	strh.w	r6, [sp, #38]	; 0x26
    25cc:	cmp.w	r8, #0
    25d0:	bne.n	256c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    25d2:	movs	r2, #2
    25d4:	add.w	r1, sp, #38	; 0x26
    25d8:	mov	r0, r4
    25da:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    25de:	ldrb	r6, [r4, r5]
    25e0:	str.w	r8, [sp, #84]	; 0x54
    25e4:	cmp	r6, #0
    25e6:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    25ea:	mov	r2, r7
    25ec:	add	r1, sp, #84	; 0x54
    25ee:	mov	r0, r4
    25f0:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    25f4:	ldrb	r3, [r4, r5]
    25f6:	strb.w	r6, [sp, #8]
    25fa:	cmp	r3, #0
    25fc:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2600:	mov	r0, r4
    2602:	movs	r2, #1
    2604:	add	r1, sp, #8
    2606:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    260a:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    260c:	movw	r5, #9252	; 0x2424
    2610:	movw	r2, #56324	; 0xdc04
    2614:	ldrb	r3, [r0, r5]
    2616:	strh.w	r2, [sp, #46]	; 0x2e
    261a:	cmp	r3, #0
    261c:	beq.w	28dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x56c>
      {
        write_length_ += len;
    2620:	movw	r2, #9256	; 0x2428
    2624:	ldr	r3, [r0, r2]
    2626:	adds	r3, #2
    2628:	str	r3, [r0, r2]
    262a:	movw	r2, #9256	; 0x2428
    262e:	ldr	r3, [r4, r2]
    2630:	adds	r3, #2
    2632:	str	r3, [r4, r2]
    2634:	movw	r2, #9256	; 0x2428
    2638:	ldr	r3, [r4, r2]
    263a:	adds	r3, #1
    263c:	str	r3, [r4, r2]
    263e:	movw	r2, #9256	; 0x2428
    2642:	ldr	r3, [r4, r2]
    2644:	adds	r3, #8
    2646:	str	r3, [r4, r2]
    2648:	b.n	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    264a:	movw	r5, #9252	; 0x2424
    264e:	movw	r2, #56327	; 0xdc07
    2652:	ldrb	r3, [r0, r5]
    2654:	strh.w	r2, [sp, #50]	; 0x32
    2658:	cmp	r3, #0
    265a:	bne.w	24ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    265e:	movs	r2, #2
    2660:	add.w	r1, sp, #50	; 0x32
    2664:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2668:	movw	r2, #65535	; 0xffff
    266c:	ldrb	r3, [r4, r5]
    266e:	strh.w	r2, [sp, #48]	; 0x30
    2672:	cmp	r3, #0
    2674:	bne.w	24c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    2678:	movs	r2, #2
    267a:	add	r1, sp, #48	; 0x30
    267c:	mov	r0, r4
    267e:	movs	r6, #1
    2680:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2684:	ldrb	r7, [r4, r5]
    2686:	strb.w	r6, [sp, #14]
    268a:	cmp	r7, #0
    268c:	bne.w	24ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    2690:	mov	r2, r6
    2692:	add.w	r1, sp, #14
    2696:	mov	r0, r4
    2698:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    269c:	ldrb.w	r8, [r4, r5]
    26a0:	strb.w	r7, [sp, #13]
    26a4:	cmp.w	r8, #0
    26a8:	bne.w	24d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    26ac:	mov	r2, r6
    26ae:	add.w	r1, sp, #13
    26b2:	mov	r0, r4
    26b4:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    26b8:	ldrb	r7, [r4, r5]
    26ba:	str.w	r8, [sp, #92]	; 0x5c
    26be:	cmp	r7, #0
    26c0:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    26c4:	movs	r2, #4
    26c6:	add	r1, sp, #92	; 0x5c
    26c8:	mov	r0, r4
    26ca:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    26ce:	ldrb	r3, [r4, r5]
    26d0:	strb.w	r7, [sp, #12]
    26d4:	cmp	r3, #0
    26d6:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    26da:	mov	r2, r6
    26dc:	mov	r0, r4
    26de:	add	r1, sp, #12
    26e0:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    26e4:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    26e6:	movw	r5, #9252	; 0x2424
    26ea:	movw	r2, #56328	; 0xdc08
    26ee:	ldrb	r3, [r0, r5]
    26f0:	strh.w	r2, [sp, #54]	; 0x36
    26f4:	cmp	r3, #0
    26f6:	bne.w	24ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    26fa:	movs	r2, #2
    26fc:	add.w	r1, sp, #54	; 0x36
    2700:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2704:	movw	r3, #65535	; 0xffff
    2708:	ldrb	r7, [r4, r5]
    270a:	strh.w	r3, [sp, #52]	; 0x34
    270e:	cmp	r7, #0
    2710:	bne.w	24c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    2714:	movs	r2, #2
    2716:	add	r1, sp, #52	; 0x34
    2718:	mov	r0, r4
    271a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    271e:	ldrb	r6, [r4, r5]
    2720:	strb.w	r7, [sp, #17]
    2724:	cmp	r6, #0
    2726:	bne.w	24ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    272a:	movs	r2, #1
    272c:	add.w	r1, sp, #17
    2730:	mov	r0, r4
    2732:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2736:	ldrb	r7, [r4, r5]
    2738:	strb.w	r6, [sp, #16]
    273c:	cmp	r7, #0
    273e:	bne.w	24d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    2742:	movs	r2, #1
    2744:	add	r1, sp, #16
    2746:	mov	r0, r4
    2748:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    274c:	ldrb	r6, [r4, r5]
    274e:	str	r7, [sp, #96]	; 0x60
    2750:	cmp	r6, #0
    2752:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2756:	movs	r2, #4
    2758:	add	r1, sp, #96	; 0x60
    275a:	mov	r0, r4
    275c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2760:	ldrb	r3, [r4, r5]
    2762:	strb.w	r6, [sp, #15]
    2766:	cmp	r3, #0
    2768:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    276c:	mov	r0, r4
    276e:	movs	r2, #1
    2770:	add.w	r1, sp, #15
    2774:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2778:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    277a:	movw	r5, #9252	; 0x2424
    277e:	movw	r2, #56329	; 0xdc09
    2782:	ldrb	r3, [r0, r5]
    2784:	strh.w	r2, [sp, #58]	; 0x3a
    2788:	cmp	r3, #0
    278a:	bne.w	24ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    278e:	movs	r2, #2
    2790:	add.w	r1, sp, #58	; 0x3a
    2794:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2798:	movw	r3, #65535	; 0xffff
    279c:	ldrb	r7, [r4, r5]
    279e:	strh.w	r3, [sp, #56]	; 0x38
    27a2:	cmp	r7, #0
    27a4:	bne.w	24c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    27a8:	movs	r2, #2
    27aa:	add	r1, sp, #56	; 0x38
    27ac:	mov	r0, r4
    27ae:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    27b2:	ldrb	r6, [r4, r5]
    27b4:	strb.w	r7, [sp, #20]
    27b8:	cmp	r6, #0
    27ba:	bne.w	24ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    27be:	movs	r2, #1
    27c0:	add	r1, sp, #20
    27c2:	mov	r0, r4
    27c4:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    27c8:	ldrb	r7, [r4, r5]
    27ca:	strb.w	r6, [sp, #19]
    27ce:	cmp	r7, #0
    27d0:	bne.w	24d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    27d4:	movs	r2, #1
    27d6:	add.w	r1, sp, #19
    27da:	mov	r0, r4
    27dc:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    27e0:	ldrb	r6, [r4, r5]
    27e2:	str	r7, [sp, #100]	; 0x64
    27e4:	cmp	r6, #0
    27e6:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    27ea:	movs	r2, #4
    27ec:	add	r1, sp, #100	; 0x64
    27ee:	mov	r0, r4
    27f0:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    27f4:	ldrb	r3, [r4, r5]
    27f6:	strb.w	r6, [sp, #18]
    27fa:	cmp	r3, #0
    27fc:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2800:	mov	r0, r4
    2802:	movs	r2, #1
    2804:	add.w	r1, sp, #18
    2808:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    280c:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    280e:	movw	r5, #9252	; 0x2424
    2812:	movw	r2, #56331	; 0xdc0b
    2816:	ldrb	r3, [r0, r5]
    2818:	strh.w	r2, [sp, #62]	; 0x3e
    281c:	cmp	r3, #0
    281e:	bne.w	2510 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a0>
    2822:	movs	r2, #2
    2824:	add.w	r1, sp, #62	; 0x3e
    2828:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    282c:	movs	r3, #6
    282e:	ldrb	r7, [r4, r5]
    2830:	strh.w	r3, [sp, #60]	; 0x3c
    2834:	cmp	r7, #0
    2836:	bne.w	251a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    283a:	movs	r2, #2
    283c:	add	r1, sp, #60	; 0x3c
    283e:	mov	r0, r4
    2840:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2844:	ldrb	r6, [r4, r5]
    2846:	strb.w	r7, [sp, #22]
    284a:	cmp	r6, #0
    284c:	bne.w	2524 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    2850:	movs	r2, #1
    2852:	add.w	r1, sp, #22
    2856:	mov	r0, r4
    2858:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    285c:	ldrb	r7, [r4, r5]
    285e:	str	r6, [sp, #108]	; 0x6c
    2860:	cmp	r7, #0
    2862:	bne.w	252e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    2866:	movs	r2, #4
    2868:	add	r1, sp, #108	; 0x6c
    286a:	mov	r0, r4
    286c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2870:	ldrb	r6, [r4, r5]
    2872:	str	r7, [sp, #104]	; 0x68
    2874:	cmp	r6, #0
    2876:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    287a:	movs	r2, #4
    287c:	add	r1, sp, #104	; 0x68
    287e:	mov	r0, r4
    2880:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2884:	ldrb	r3, [r4, r5]
    2886:	strb.w	r6, [sp, #21]
    288a:	cmp	r3, #0
    288c:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2890:	mov	r0, r4
    2892:	movs	r2, #1
    2894:	add.w	r1, sp, #21
    2898:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    289c:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    289e:	movw	r5, #9252	; 0x2424
    28a2:	movw	r2, #56385	; 0xdc41
    28a6:	ldrb	r3, [r0, r5]
    28a8:	strh.w	r2, [sp, #66]	; 0x42
    28ac:	cmp	r3, #0
    28ae:	beq.w	2410 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0>
      {
        write_length_ += len;
    28b2:	movw	r2, #9256	; 0x2428
    28b6:	ldr	r3, [r0, r2]
    28b8:	adds	r3, #2
    28ba:	str	r3, [r0, r2]
    28bc:	movw	r2, #9256	; 0x2428
    28c0:	ldr	r3, [r4, r2]
    28c2:	adds	r3, #2
    28c4:	str	r3, [r4, r2]
    28c6:	movw	r2, #9256	; 0x2428
    28ca:	ldr	r3, [r4, r2]
    28cc:	adds	r3, #1
    28ce:	str	r3, [r4, r2]
    28d0:	movw	r2, #9256	; 0x2428
    28d4:	ldr	r3, [r4, r2]
    28d6:	adds	r3, #8
    28d8:	str	r3, [r4, r2]
    28da:	b.n	263e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    28dc:	movs	r2, #2
    28de:	add.w	r1, sp, #46	; 0x2e
    28e2:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    28e6:	movs	r6, #8
    28e8:	ldrb	r7, [r4, r5]
    28ea:	strh.w	r6, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    28ee:	cmp	r7, #0
    28f0:	bne.w	262a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ba>
    28f4:	movs	r2, #2
    28f6:	add	r1, sp, #44	; 0x2c
    28f8:	mov	r0, r4
    28fa:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    28fe:	ldrb	r3, [r4, r5]
    2900:	strb.w	r7, [sp, #11]
    2904:	cmp	r3, #0
    2906:	bne.w	2634 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c4>
    290a:	movs	r2, #1
    290c:	add.w	r1, sp, #11
    2910:	mov	r0, r4
    2912:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2916:	movs	r2, #0
    2918:	movs	r3, #0
    291a:	ldrb	r7, [r4, r5]
    291c:	strd	r2, r3, [sp, #120]	; 0x78
    2920:	cmp	r7, #0
    2922:	bne.w	263e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    2926:	mov	r2, r6
    2928:	add	r1, sp, #120	; 0x78
    292a:	mov	r0, r4
    292c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2930:	ldrb	r6, [r4, r5]
    2932:	str	r7, [sp, #88]	; 0x58
    2934:	cmp	r6, #0
    2936:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    293a:	movs	r2, #4
    293c:	add	r1, sp, #88	; 0x58
    293e:	mov	r0, r4
    2940:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2944:	ldrb	r3, [r4, r5]
    2946:	strb.w	r6, [sp, #10]
    294a:	cmp	r3, #0
    294c:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2950:	mov	r0, r4
    2952:	movs	r2, #1
    2954:	add.w	r1, sp, #10
    2958:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    295c:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    295e:	movs	r2, #2
    2960:	add	r1, sp, #36	; 0x24
    2962:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2966:	movs	r7, #4
    2968:	ldrb.w	r8, [r4, r5]
    296c:	strh.w	r7, [sp, #34]	; 0x22
    2970:	cmp.w	r8, #0
    2974:	bne.w	2558 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    2978:	movs	r2, #2
    297a:	add.w	r1, sp, #34	; 0x22
    297e:	mov	r0, r4
    2980:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2984:	ldrb	r6, [r4, r5]
    2986:	strb.w	r8, [sp, #7]
    298a:	cmp	r6, #0
    298c:	bne.w	2562 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    2990:	movs	r2, #1
    2992:	add.w	r1, sp, #7
    2996:	mov	r0, r4
    2998:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    299c:	ldrb.w	r8, [r4, r5]
    29a0:	strh.w	r6, [sp, #32]
    29a4:	cmp.w	r8, #0
    29a8:	bne.w	256c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    29ac:	movs	r2, #2
    29ae:	add	r1, sp, #32
    29b0:	mov	r0, r4
    29b2:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    29b6:	ldrb	r6, [r4, r5]
    29b8:	str.w	r8, [sp, #80]	; 0x50
    29bc:	cmp	r6, #0
    29be:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    29c2:	mov	r2, r7
    29c4:	add	r1, sp, #80	; 0x50
    29c6:	mov	r0, r4
    29c8:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    29cc:	ldrb	r3, [r4, r5]
    29ce:	strb.w	r6, [sp, #6]
    29d2:	cmp	r3, #0
    29d4:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    29d8:	mov	r0, r4
    29da:	movs	r2, #1
    29dc:	add.w	r1, sp, #6
    29e0:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    29e4:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    29e6:	movs	r2, #2
    29e8:	add.w	r1, sp, #30
    29ec:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    29f0:	movs	r3, #6
    29f2:	ldrb	r7, [r4, r5]
    29f4:	strh.w	r3, [sp, #28]
    29f8:	cmp	r7, #0
    29fa:	bne.w	251a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    29fe:	movs	r2, #2
    2a00:	add	r1, sp, #28
    2a02:	mov	r0, r4
    2a04:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2a08:	ldrb	r6, [r4, r5]
    2a0a:	strb.w	r7, [sp, #5]
    2a0e:	cmp	r6, #0
    2a10:	bne.w	2524 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    2a14:	movs	r2, #1
    2a16:	add.w	r1, sp, #5
    2a1a:	mov	r0, r4
    2a1c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2a20:	ldrb	r7, [r4, r5]
    2a22:	str	r6, [sp, #76]	; 0x4c
    2a24:	cmp	r7, #0
    2a26:	bne.w	252e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    2a2a:	movs	r2, #4
    2a2c:	add	r1, sp, #76	; 0x4c
    2a2e:	mov	r0, r4
    2a30:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2a34:	ldrb	r6, [r4, r5]
    2a36:	str	r7, [sp, #72]	; 0x48
    2a38:	cmp	r6, #0
    2a3a:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2a3e:	movs	r2, #4
    2a40:	add	r1, sp, #72	; 0x48
    2a42:	mov	r0, r4
    2a44:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2a48:	ldrb	r3, [r4, r5]
    2a4a:	strb.w	r6, [sp, #4]
    2a4e:	cmp	r3, #0
    2a50:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2a54:	mov	r0, r4
    2a56:	movs	r2, #1
    2a58:	add	r1, sp, #4
    2a5a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2a5e:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2a60:	movs	r2, #2
    2a62:	add.w	r1, sp, #70	; 0x46
    2a66:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2a6a:	movw	r3, #65535	; 0xffff
    2a6e:	ldrb	r7, [r4, r5]
    2a70:	strh.w	r3, [sp, #68]	; 0x44
    2a74:	cmp	r7, #0
    2a76:	bne.w	24c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    2a7a:	movs	r2, #2
    2a7c:	add	r1, sp, #68	; 0x44
    2a7e:	mov	r0, r4
    2a80:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2a84:	ldrb	r6, [r4, r5]
    2a86:	strb.w	r7, [sp, #27]
    2a8a:	cmp	r6, #0
    2a8c:	bne.w	24ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    2a90:	movs	r2, #1
    2a92:	add.w	r1, sp, #27
    2a96:	mov	r0, r4
    2a98:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2a9c:	ldrb	r7, [r4, r5]
    2a9e:	strb.w	r6, [sp, #26]
    2aa2:	cmp	r7, #0
    2aa4:	bne.w	24d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    2aa8:	movs	r2, #1
    2aaa:	add.w	r1, sp, #26
    2aae:	mov	r0, r4
    2ab0:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2ab4:	ldrb	r6, [r4, r5]
    2ab6:	str	r7, [sp, #116]	; 0x74
    2ab8:	cmp	r6, #0
    2aba:	bne.w	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2abe:	movs	r2, #4
    2ac0:	add	r1, sp, #116	; 0x74
    2ac2:	mov	r0, r4
    2ac4:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2ac8:	ldrb	r3, [r4, r5]
    2aca:	strb.w	r6, [sp, #25]
    2ace:	cmp	r3, #0
    2ad0:	bne.w	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2ad4:	mov	r0, r4
    2ad6:	movs	r2, #1
    2ad8:	add.w	r1, sp, #25
    2adc:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
          write8(0);
          break;
        default:
          break;
      }
    }
    2ae0:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2ae2:	nop

00002ae4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2ae4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae8:	mov	r4, r0
    2aea:	sub	sp, #184	; 0xb8
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2aec:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2aee:	mov	r5, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2af0:	add.w	lr, sp, #10
    2af4:	add	r7, sp, #20
    2af6:	ldr	r6, [r0, #0]
    2af8:	add	r3, sp, #16
    2afa:	add	r2, sp, #56	; 0x38
    2afc:	str.w	lr, [sp, #4]
    2b00:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2b02:	mov	r8, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2b04:	ldr	r6, [r6, #40]	; 0x28
    2b06:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    2b08:	mvn.w	r3, #56320	; 0xdc00
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    2b0c:	ldr	r2, [sp, #16]
      switch(p2)
    2b0e:	add	r3, r5
    2b10:	cmp	r3, #67	; 0x43
    2b12:	bhi.n	2b9e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2b14:	tbb	[pc, r3]
    2b18:	.word	0xab9c6354
    2b1c:	.word	0x464d4343
    2b20:	.word	0x43784346
    2b24:	.word	0x43434343
    2b28:	.word	0x43434343
    2b2c:	.word	0x43434343
    2b30:	.word	0x43434343
    2b34:	.word	0x43434343
    2b38:	.word	0x43434343
    2b3c:	.word	0x43434343
    2b40:	.word	0x43434343
    2b44:	.word	0x43434343
    2b48:	.word	0x43434343
    2b4c:	.word	0x43434343
    2b50:	.word	0x43434343
    2b54:	.word	0x43434343
    2b58:	.word	0x4d434385
    2b5c:	movs	r2, #4
    2b5e:	add	r1, sp, #52	; 0x34
    2b60:	mov	r0, r4
    2b62:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2b66:	ldr	r2, [sp, #20]
    2b68:	ldrb	r3, [r4, r5]
    2b6a:	str	r2, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2b6c:	cmp	r3, #0
    2b6e:	bne.n	2c3a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x156>
    2b70:	movs	r2, #4
    2b72:	add	r1, sp, #48	; 0x30
    2b74:	mov	r0, r4
    2b76:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2b7a:	movs	r3, #1
    2b7c:	ldrb	r6, [r4, r5]
    2b7e:	str	r3, [sp, #44]	; 0x2c
    2b80:	cmp	r6, #0
    2b82:	bne.n	2c44 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x160>
    2b84:	movs	r2, #4
    2b86:	add	r1, sp, #44	; 0x2c
    2b88:	mov	r0, r4
    2b8a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2b8e:	ldrb	r3, [r4, r5]
    2b90:	str	r6, [sp, #40]	; 0x28
    2b92:	cbnz	r3, 2bce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    2b94:	mov	r0, r4
    2b96:	movs	r2, #4
    2b98:	add	r1, sp, #40	; 0x28
    2b9a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
          writestring(name);
          break;
        default:
          break;
      }
    }
    2b9e:	add	sp, #184	; 0xb8
    2ba0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    2ba4:	mov	r0, r4
    2ba6:	ldr	r1, [pc, #264]	; (2cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>)
    2ba8:	bl	19b4 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    2bac:	add	sp, #184	; 0xb8
    2bae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    2bb2:	add	r1, sp, #56	; 0x38
    2bb4:	mov	r0, r4
    2bb6:	bl	19b4 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    2bba:	add	sp, #184	; 0xb8
    2bbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2bc0:	movw	r3, #9252	; 0x2424
    2bc4:	str.w	r8, [sp, #24]
    2bc8:	ldrb	r3, [r4, r3]
    2bca:	cmp	r3, #0
    2bcc:	beq.n	2ca4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c0>
      {
        write_length_ += len;
    2bce:	movw	r2, #9256	; 0x2428
    2bd2:	ldr	r3, [r4, r2]
    2bd4:	adds	r3, #4
    2bd6:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    2bd8:	add	sp, #184	; 0xb8
    2bda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    2bde:	adds	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2be0:	movw	r2, #9252	; 0x2424
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    2be4:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2be8:	ldrb	r2, [r4, r2]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    2bea:	it	ne
    2bec:	movne.w	r3, #12288	; 0x3000
    2bf0:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2bf4:	cmp	r2, #0
    2bf6:	beq.n	2c98 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b4>
      {
        write_length_ += len;
    2bf8:	movw	r2, #9256	; 0x2428
    2bfc:	ldr	r3, [r4, r2]
    2bfe:	adds	r3, #2
    2c00:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    2c02:	add	sp, #184	; 0xb8
    2c04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2c08:	movw	r3, #9252	; 0x2424
    2c0c:	ldr	r2, [sp, #20]
    2c0e:	ldrb	r3, [r4, r3]
    2c10:	str	r2, [sp, #36]	; 0x24
    2c12:	cmp	r3, #0
    2c14:	bne.n	2bce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    2c16:	mov	r0, r4
    2c18:	movs	r2, #4
    2c1a:	add	r1, sp, #36	; 0x24
    2c1c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2c20:	b.n	2b9e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2c22:	movw	r5, #9252	; 0x2424
    2c26:	str.w	r8, [sp, #52]	; 0x34
    2c2a:	ldrb	r3, [r4, r5]
    2c2c:	cmp	r3, #0
    2c2e:	beq.n	2b5c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
      {
        write_length_ += len;
    2c30:	movw	r2, #9256	; 0x2428
    2c34:	ldr	r3, [r4, r2]
    2c36:	adds	r3, #4
    2c38:	str	r3, [r4, r2]
    2c3a:	movw	r2, #9256	; 0x2428
    2c3e:	ldr	r3, [r4, r2]
    2c40:	adds	r3, #4
    2c42:	str	r3, [r4, r2]
    2c44:	movw	r2, #9256	; 0x2428
    2c48:	ldr	r3, [r4, r2]
    2c4a:	adds	r3, #4
    2c4c:	str	r3, [r4, r2]
    2c4e:	b.n	2bce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2c50:	movw	r3, #9252	; 0x2424
    2c54:	movs	r2, #0
    2c56:	ldrb	r3, [r4, r3]
    2c58:	strh.w	r2, [sp, #14]
    2c5c:	cmp	r3, #0
    2c5e:	bne.n	2bf8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x114>
    2c60:	mov	r0, r4
    2c62:	movs	r2, #2
    2c64:	add.w	r1, sp, #14
    2c68:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2c6c:	b.n	2b9e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2c6e:	movw	r6, #9252	; 0x2424
    2c72:	str	r2, [sp, #32]
    2c74:	ldrb	r5, [r4, r6]
    2c76:	cmp	r5, #0
    2c78:	bne.n	2c44 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x160>
    2c7a:	movs	r2, #4
    2c7c:	add	r1, sp, #32
    2c7e:	mov	r0, r4
    2c80:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2c84:	ldrb	r3, [r4, r6]
    2c86:	str	r5, [sp, #28]
    2c88:	cmp	r3, #0
    2c8a:	bne.n	2bce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    2c8c:	mov	r0, r4
    2c8e:	movs	r2, #4
    2c90:	add	r1, sp, #28
    2c92:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2c96:	b.n	2b9e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2c98:	mov	r0, r4
    2c9a:	movs	r2, #2
    2c9c:	add	r1, sp, #12
    2c9e:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2ca2:	b.n	2b9e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2ca4:	mov	r0, r4
    2ca6:	movs	r2, #4
    2ca8:	add	r1, sp, #24
    2caa:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    2cae:	b.n	2b9e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2cb0:	.word	0x20000174

00002cb4 <MTPD::pull_packet(unsigned char*)>:
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
      return 1;
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
    2cb4:	push	{r4, lr}
    2cb6:	mov	r4, r1
      while(!usb_mtp_available());
    2cb8:	bl	9c38 <usb_mtp_available>
    2cbc:	cmp	r0, #0
    2cbe:	beq.n	2cb8 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    2cc0:	mov	r0, r4
    2cc2:	movs	r1, #60	; 0x3c
    }
    2cc4:	ldmia.w	sp!, {r4, lr}
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
      while(!usb_mtp_available());
      return usb_mtp_recv(data_buffer,60);
    2cc8:	b.w	9b74 <usb_mtp_recv>

00002ccc <MTPD::GetObject(unsigned long)>:
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    2ccc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cd0:	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    2cd2:	ldr	r0, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    2cd4:	sub	sp, #28
      uint32_t size = storage_->GetSize(object_id);
    2cd6:	ldr	r3, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    2cd8:	str	r1, [sp, #16]
      uint32_t size = storage_->GetSize(object_id);
    2cda:	ldr	r3, [r3, #44]	; 0x2c
    2cdc:	blx	r3

      if (write_get_length_) {
    2cde:	movw	r3, #9252	; 0x2424
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);
    2ce2:	mov	sl, r0

      if (write_get_length_) {
    2ce4:	ldrb.w	r7, [fp, r3]
    2ce8:	cmp	r7, #0
    2cea:	bne.n	2dce <MTPD::GetObject(unsigned long)+0x102>
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    2cec:	movw	r2, #9248	; 0x2420
    2cf0:	mov.w	r3, #8192	; 0x2000
    2cf4:	str.w	r3, [fp, r2]
        while(pos<size)
    2cf8:	cmp	r0, #0
    2cfa:	beq.n	2de2 <MTPD::GetObject(unsigned long)+0x116>
    2cfc:	mov	r8, r3
    2cfe:	add.w	r6, fp, #544	; 0x220
    2d02:	add.w	r3, fp, #1056	; 0x420
    2d06:	movw	r9, #9248	; 0x2420
    2d0a:	str.w	fp, [sp, #20]
    2d0e:	movs	r5, #12
    2d10:	add	r9, fp
    2d12:	mov	fp, r3
    2d14:	mov	r3, r6
    2d16:	mov	r6, r8
    2d18:	mov	r8, r3
    2d1a:	b.n	2d60 <MTPD::GetObject(unsigned long)+0x94>
    2d1c:	str	r3, [sp, #12]
    2d1e:	rsb	r3, r6, #8192	; 0x2000
    2d22:	ldr	r2, [sp, #12]
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2d24:	add.w	r0, r8, r5
    2d28:	add.w	r1, fp, r6
    2d2c:	cmp	r2, r3
    2d2e:	it	cs
    2d30:	movcs	r2, r3
    2d32:	rsb	r3, r5, #512	; 0x200
    2d36:	cmp	r2, r3
    2d38:	mov	r4, r2
    2d3a:	it	cs
    2d3c:	movcs	r4, r3
    2d3e:	mov	r2, r4
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    2d40:	add	r5, r4
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2d42:	bl	9c5c <memcpy>
          disk_pos += to_copy;
    2d46:	ldr.w	r3, [r9]
          pos += to_copy;
    2d4a:	add	r7, r4
          len += to_copy;

          if(len==MTP_TX_SIZE)
    2d4c:	cmp.w	r5, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    2d50:	add	r4, r3
    2d52:	str.w	r4, [r9]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    2d56:	beq.n	2d9c <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    2d58:	cmp	sl, r7
    2d5a:	bls.n	2db4 <MTPD::GetObject(unsigned long)+0xe8>
    2d5c:	ldr.w	r6, [r9]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    2d60:	cmp.w	r6, #8192	; 0x2000
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    2d64:	rsb	r3, r7, sl
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    2d68:	bne.n	2d1c <MTPD::GetObject(unsigned long)+0x50>
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    2d6a:	mov	r1, r3
    2d6c:	str	r3, [sp, #12]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    2d6e:	ldr	r3, [sp, #20]
    2d70:	mov	r2, r7
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    2d72:	cmp.w	r1, #8192	; 0x2000
    2d76:	mov	ip, r1
    2d78:	ldr	r0, [r3, #0]
    2d7a:	mov	r3, fp
    2d7c:	it	cs
    2d7e:	movcs.w	ip, #8192	; 0x2000
    2d82:	ldr	r1, [sp, #16]
    2d84:	ldr.w	lr, [r0]
    2d88:	str.w	ip, [sp]
    2d8c:	ldr.w	r4, [lr, #52]	; 0x34
    2d90:	blx	r4
    2d92:	mov	r3, r6
    2d94:	movs	r6, #0
            disk_pos=0;
    2d96:	str.w	r6, [r9]
    2d9a:	b.n	2d22 <MTPD::GetObject(unsigned long)+0x56>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2d9c:	movs	r2, #60	; 0x3c
    2d9e:	mov.w	r1, #512	; 0x200
    2da2:	mov	r0, r8
    2da4:	bl	9bd0 <usb_mtp_send>
    2da8:	cmp	r0, #0
    2daa:	ble.n	2d9c <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    2dac:	cmp	sl, r7
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    2dae:	mov.w	r5, #0
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    2db2:	bhi.n	2d5c <MTPD::GetObject(unsigned long)+0x90>
    2db4:	mov	r6, r8
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    2db6:	cbz	r5, 2dc8 <MTPD::GetObject(unsigned long)+0xfc>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2db8:	movs	r2, #60	; 0x3c
    2dba:	mov.w	r1, #512	; 0x200
    2dbe:	mov	r0, r6
    2dc0:	bl	9bd0 <usb_mtp_send>
    2dc4:	cmp	r0, #0
    2dc6:	ble.n	2db8 <MTPD::GetObject(unsigned long)+0xec>
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    2dc8:	add	sp, #28
    2dca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    2dce:	movw	r2, #9256	; 0x2428
    2dd2:	ldr.w	r3, [fp, r2]
    2dd6:	add	r3, r0
    2dd8:	str.w	r3, [fp, r2]
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    2ddc:	add	sp, #28
    2dde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2de2:	add.w	r6, fp, #544	; 0x220
    2de6:	b.n	2db8 <MTPD::GetObject(unsigned long)+0xec>

00002de8 <MTPD::read(char*, unsigned long)>:
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


    void MTPD::read(char* data, uint32_t size) 
    {
    2de8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      static int index=0;
      if(!size) 
    2dec:	cbz	r2, 2e4a <MTPD::read(char*, unsigned long)+0x62>
    2dee:	ldr.w	fp, [pc, #100]	; 2e54 <MTPD::read(char*, unsigned long)+0x6c>
    2df2:	mov	r8, r0
    2df4:	mov	r6, r1
    2df6:	mov	r5, r2

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    2df8:	add.w	r7, r0, #32
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    2dfc:	mov	r9, fp
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    2dfe:	ldr.w	sl, [fp]
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    2e02:	mov	r0, r6
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    2e04:	rsb	r4, sl, #512	; 0x200
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    2e08:	add.w	r1, r7, sl
    2e0c:	cmp	r4, r5
    2e0e:	it	cs
    2e10:	movcs	r4, r5
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
    2e12:	cbz	r6, 2e1c <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    2e14:	mov	r2, r4
          data += to_copy;
    2e16:	add	r6, r4

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    2e18:	bl	9c5c <memcpy>
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    2e1c:	add.w	r3, r4, sl
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
    2e20:	subs	r4, r5, r4
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    2e22:	cmp.w	r3, #512	; 0x200
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    2e26:	str.w	r3, [fp]
      {
        index=0;
        return;
      }

      while (size) {
    2e2a:	mov	r5, r4
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    2e2c:	beq.n	2e36 <MTPD::read(char*, unsigned long)+0x4e>
      {
        index=0;
        return;
      }

      while (size) {
    2e2e:	cmp	r4, #0
    2e30:	bne.n	2dfe <MTPD::read(char*, unsigned long)+0x16>
    2e32:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
    2e36:	mov	r1, r7
    2e38:	mov	r0, r8
    2e3a:	bl	2cb4 <MTPD::pull_packet(unsigned char*)>
          index=0;
    2e3e:	movs	r3, #0
    2e40:	str.w	r3, [r9]
      {
        index=0;
        return;
      }

      while (size) {
    2e44:	cmp	r4, #0
    2e46:	bne.n	2dfe <MTPD::read(char*, unsigned long)+0x16>
    2e48:	b.n	2e32 <MTPD::read(char*, unsigned long)+0x4a>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    2e4a:	ldr	r3, [pc, #8]	; (2e54 <MTPD::read(char*, unsigned long)+0x6c>)
    2e4c:	str	r2, [r3, #0]
        return;
    2e4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e52:	nop
    2e54:	.word	0x20005bc4

00002e58 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2e58:	push	{r4, r5, r6, lr}
    2e5a:	sub	sp, #8
    2e5c:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2e5e:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2e60:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2e62:	add.w	r1, sp, #6
    2e66:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2e6a:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    2e6e:	cbz	r4, 2e90 <MTPD::readstring(char*)+0x38>
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2e70:	cbz	r2, 2e8c <MTPD::readstring(char*)+0x34>
    2e72:	adds	r5, r4, r2
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2e74:	movs	r2, #2
    2e76:	add.w	r1, sp, #6
    2e7a:	mov	r0, r6
    2e7c:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2e80:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    2e84:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2e88:	cmp	r5, r4
    2e8a:	bne.n	2e74 <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    2e8c:	add	sp, #8
    2e8e:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    2e90:	lsls	r2, r2, #1
    2e92:	mov	r1, r4
    2e94:	mov	r0, r6
    2e96:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2e9a:	b.n	2e8c <MTPD::readstring(char*)+0x34>

00002e9c <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
        storage_->write((const char *)disk_buffer, disk_pos);
      }
      storage_->close();
    }

    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    2e9c:	push	{r4, r5, lr}
    2e9e:	sub	sp, #132	; 0x84
    2ea0:	mov	r4, r0
    2ea2:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2ea4:	movs	r2, #12
    2ea6:	mov	r1, sp
    2ea8:	bl	2de8 <MTPD::read(char*, unsigned long)>
      
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    2eac:	mov	r1, sp
    2eae:	mov	r0, r4
    2eb0:	bl	2e58 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    2eb4:	ldr	r0, [r4, #0]
    2eb6:	mov	r2, sp
    2eb8:	mov	r1, r5
    2eba:	ldr	r3, [r0, #0]
    2ebc:	ldr	r3, [r3, #76]	; 0x4c
    2ebe:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    2ec0:	movw	r0, #8193	; 0x2001
    2ec4:	add	sp, #132	; 0x84
    2ec6:	pop	{r4, r5, pc}

00002ec8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2ec8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ecc:	sub	sp, #284	; 0x11c
    2ece:	mov	r4, r0
      pull_packet(rx_data_buffer);
    2ed0:	add.w	r1, r0, #32
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2ed4:	mov	fp, r2


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2ed6:	add	r6, sp, #24
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
      pull_packet(rx_data_buffer);
    2ed8:	bl	2cb4 <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    2edc:	movs	r5, #0
    2ede:	ldr	r3, [pc, #312]	; (3018 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x150>)


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2ee0:	mov	r0, r4
    2ee2:	mov	r1, r6
    2ee4:	movs	r2, #12
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    2ee6:	str	r5, [r3, #0]


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2ee8:	bl	2de8 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    2eec:	ldrh	r3, [r6, #4]
    2eee:	cmp	r3, #2
    2ef0:	beq.w	3010 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x148>
    2ef4:	mvn.w	r5, #51	; 0x33
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2ef8:	movs	r2, #4
    2efa:	mov	r1, r6
    2efc:	mov	r0, r4
    2efe:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2f02:	ldr	r3, [r6, #0]
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f04:	movs	r2, #2
    2f06:	mov	r1, r6
    2f08:	mov	r0, r4
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f0a:	str	r3, [sp, #12]
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f0c:	bl	2de8 <MTPD::read(char*, unsigned long)>
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      int store = read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    2f10:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f14:	ldrh.w	r9, [r6]
    2f18:	movs	r2, #2
    2f1a:	mov	r1, r6
    2f1c:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      int store = read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    2f1e:	rsb	r9, r3, r9
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f22:	bl	2de8 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f26:	movs	r2, #4
    2f28:	mov	r1, r6
    2f2a:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      int store = read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    2f2c:	clz	r9, r9
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f30:	bl	2de8 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f34:	movs	r2, #2
    2f36:	mov	r1, r6
    2f38:	mov	r0, r4
    2f3a:	bl	2de8 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f3e:	movs	r2, #4
    2f40:	mov	r1, r6
    2f42:	mov	r0, r4
    2f44:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2f48:	movs	r2, #4
    2f4a:	mov	r1, r6
    2f4c:	mov	r0, r4
    2f4e:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2f52:	movs	r2, #4
    2f54:	mov	r1, r6
    2f56:	mov	r0, r4
    2f58:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2f5c:	movs	r2, #4
    2f5e:	mov	r1, r6
    2f60:	mov	r0, r4
    2f62:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2f66:	movs	r2, #4
    2f68:	mov	r1, r6
    2f6a:	mov	r0, r4
    2f6c:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2f70:	movs	r2, #4
    2f72:	mov	r1, r6
    2f74:	mov	r0, r4
    2f76:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2f7a:	movs	r2, #4
    2f7c:	mov	r1, r6
    2f7e:	mov	r0, r4
    2f80:	bl	2de8 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f84:	movs	r2, #2
    2f86:	mov	r1, r6
    2f88:	mov	r0, r4
    2f8a:	bl	2de8 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f8e:	movs	r2, #4
    2f90:	mov	r1, r6
    2f92:	mov	r0, r4
    2f94:	bl	2de8 <MTPD::read(char*, unsigned long)>
    2f98:	movs	r2, #4
    2f9a:	mov	r1, r6
    2f9c:	mov	r0, r4
    2f9e:	bl	2de8 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    2fa2:	mov	r1, r6
    2fa4:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      int store = read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    2fa6:	mov.w	r9, r9, lsr #5
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    2faa:	bl	2e58 <MTPD::readstring(char*)>
    2fae:	mov	r0, r6
    2fb0:	bl	d500 <strlen>
    2fb4:	adds	r0, #1
    2fb6:	sub.w	r8, r5, r0, lsl #1
    2fba:	add.w	r5, r8, #4294967295
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    2fbe:	cmp	r5, #3
    2fc0:	ble.n	2fe8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x120>
    2fc2:	mov	sl, r5
    2fc4:	add	r7, sp, #20
    2fc6:	sub.w	sl, sl, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2fca:	movs	r2, #4
    2fcc:	mov	r1, r7
    2fce:	mov	r0, r4
    2fd0:	bl	2de8 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    2fd4:	cmp.w	sl, #3
    2fd8:	bgt.n	2fc6 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xfe>
    2fda:	sub.w	r8, r8, #5
    2fde:	subs	r5, #4
    2fe0:	bic.w	r8, r8, #3
    2fe4:	rsb	r5, r8, r5
      while(len) {read8(); len--;}
    2fe8:	cbz	r5, 2ffa <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x132>
    2fea:	add	r7, sp, #20
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2fec:	movs	r2, #1
    2fee:	mov	r1, r7
    2ff0:	mov	r0, r4
    2ff2:	bl	2de8 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
      while(len) {read8(); len--;}
    2ff6:	subs	r5, #1
    2ff8:	bne.n	2fec <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x124>

      return storage_->Create(store, parent, dir, filename);
    2ffa:	ldr	r0, [r4, #0]
    2ffc:	mov	r3, r9
    2ffe:	mov	r2, fp
    3000:	ldr	r1, [sp, #12]
    3002:	ldr	r4, [r0, #0]
    3004:	str	r6, [sp, #0]
    3006:	ldr	r4, [r4, #48]	; 0x30
    3008:	blx	r4
    }
    300a:	add	sp, #284	; 0x11c
    300c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3010:	ldr	r5, [r6, #0]
    3012:	subs	r5, #64	; 0x40
    3014:	b.n	2ef8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x30>
    3016:	nop
    3018:	.word	0x20005bc4

0000301c <MTPD::SendObject()>:

    void MTPD::SendObject() 
    { 
    301c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    3020:	add.w	sl, r0, #32

      return storage_->Create(store, parent, dir, filename);
    }

    void MTPD::SendObject() 
    { 
    3024:	sub	sp, #20
    3026:	mov	r9, r0
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    3028:	movs	r4, #0
      return storage_->Create(store, parent, dir, filename);
    }

    void MTPD::SendObject() 
    { 
      pull_packet(rx_data_buffer);
    302a:	mov	r1, sl
    302c:	bl	2cb4 <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    3030:	ldr	r3, [pc, #224]	; (3114 <MTPD::SendObject()+0xf8>)


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3032:	mov	r0, r9
    3034:	movs	r2, #12
    3036:	add	r1, sp, #4
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    3038:	str	r4, [r3, #0]


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    303a:	bl	2de8 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    303e:	ldrh.w	r3, [sp, #8]
    3042:	cmp	r3, #2
    3044:	beq.n	305e <MTPD::SendObject()+0x42>
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    3046:	movw	r3, #9248	; 0x2420
    304a:	str.w	r4, [r9, r3]
      //printf("len %d\n",disk_pos);
      if(disk_pos)
      {
        storage_->write((const char *)disk_buffer, disk_pos);
      }
      storage_->close();
    304e:	ldr.w	r0, [r9]
    3052:	ldr	r3, [r0, #0]
    3054:	ldr	r3, [r3, #60]	; 0x3c
    3056:	blx	r3
    }
    3058:	add	sp, #20
    305a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    305e:	ldr	r7, [sp, #4]
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    3060:	movw	r3, #9248	; 0x2420
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    3064:	subs	r7, #12
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    3066:	str.w	r4, [r9, r3]
      
      while((int)len>0)
    306a:	cmp	r7, r4
    306c:	ble.n	304e <MTPD::SendObject()+0x32>
    306e:	mov	r8, r3
    3070:	mov	r0, r4
    3072:	add.w	fp, r9, #1056	; 0x420
    3076:	movs	r5, #12
    3078:	add	r8, r9
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    307a:	rsb	r4, r5, #512	; 0x200
    307e:	rsb	r6, r0, #8192	; 0x2000
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3082:	add.w	r1, sl, r5
    3086:	add	r0, fp
    3088:	cmp	r4, r7
    308a:	it	cs
    308c:	movcs	r4, r7
    308e:	cmp	r6, r4
    3090:	it	cs
    3092:	movcs	r6, r4
    3094:	mov	r2, r6
        disk_pos += to_copy;
        bytes -= to_copy;
        len -= to_copy;
    3096:	subs	r7, r7, r6
      
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3098:	bl	9c5c <memcpy>
        disk_pos += to_copy;
    309c:	ldr.w	r2, [r8]
    30a0:	add	r2, r6
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    30a2:	cmp.w	r2, #8192	; 0x2000
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
        disk_pos += to_copy;
    30a6:	str.w	r2, [r8]
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    30aa:	beq.n	30c8 <MTPD::SendObject()+0xac>
            disk_pos += bytes;
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    30ac:	cbnz	r7, 30fc <MTPD::SendObject()+0xe0>
    30ae:	movw	r3, #9248	; 0x2420
    30b2:	ldr.w	r2, [r9, r3]
        { pull_packet(rx_data_buffer);
          index=0;
        }
      }
      //printf("len %d\n",disk_pos);
      if(disk_pos)
    30b6:	cmp	r2, #0
    30b8:	beq.n	304e <MTPD::SendObject()+0x32>
      {
        storage_->write((const char *)disk_buffer, disk_pos);
    30ba:	ldr.w	r0, [r9]
    30be:	mov	r1, fp
    30c0:	ldr	r3, [r0, #0]
    30c2:	ldr	r3, [r3, #56]	; 0x38
    30c4:	blx	r3
    30c6:	b.n	304e <MTPD::SendObject()+0x32>
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
    30c8:	ldr.w	r0, [r9]
    30cc:	mov	r1, fp
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
        disk_pos += to_copy;
        bytes -= to_copy;
    30ce:	subs	r4, r4, r6
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
    30d0:	ldr	r3, [r0, #0]
    30d2:	ldr	r3, [r3, #56]	; 0x38
    30d4:	blx	r3
          disk_pos =0;
    30d6:	movs	r3, #0
    30d8:	str.w	r3, [r8]

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    30dc:	cmp	r4, #0
    30de:	beq.n	30ac <MTPD::SendObject()+0x90>
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    30e0:	adds	r1, r6, r5
    30e2:	mov	r2, r4
    30e4:	mov	r0, fp
            disk_pos += bytes;
            len -= bytes;
    30e6:	subs	r7, r7, r4
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
          disk_pos =0;

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    30e8:	add	r1, sl
    30ea:	bl	9c5c <memcpy>
            disk_pos += bytes;
    30ee:	ldr.w	r3, [r8]
    30f2:	add	r4, r3
    30f4:	str.w	r4, [r8]
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    30f8:	cmp	r7, #0
    30fa:	beq.n	30ae <MTPD::SendObject()+0x92>
        { pull_packet(rx_data_buffer);
    30fc:	mov	r1, sl
    30fe:	mov	r0, r9
    3100:	bl	2cb4 <MTPD::pull_packet(unsigned char*)>
      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    3104:	cmp	r7, #0
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
        { pull_packet(rx_data_buffer);
          index=0;
    3106:	mov.w	r5, #0
      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    310a:	ble.n	30ae <MTPD::SendObject()+0x92>
    310c:	ldr.w	r0, [r8]
    3110:	b.n	307a <MTPD::SendObject()+0x5e>
    3112:	nop
    3114:	.word	0x20005bc4

00003118 <MTPD::loop()>:
      else
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    3118:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    311c:	sub	sp, #28
    311e:	mov	r4, r0
    3120:	bl	9c38 <usb_mtp_available>
    3124:	cbnz	r0, 312c <MTPD::loop()+0x14>
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    3126:	add	sp, #28
    3128:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    312c:	add.w	r8, r4, #32
      return usb_mtp_recv(data_buffer,60);
    }

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    3130:	movs	r1, #60	; 0x3c
    3132:	mov	r0, r8
    3134:	bl	9b74 <usb_mtp_recv>
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    3138:	cmp	r0, #0
    313a:	beq.n	3126 <MTPD::loop()+0xe>
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    313c:	movw	r1, #8197	; 0x2005

        if(typ==2) return_code=0x2005; // we should only get cmds
    3140:	ldrh	r7, [r4, #36]	; 0x24
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    3142:	movw	r5, #8193	; 0x2001
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer();

        int op = CONTAINER->op;
    3146:	ldrh	r2, [r4, #38]	; 0x26

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    3148:	movw	lr, #4108	; 0x100c
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    314c:	ldr.w	r9, [r4, #32]
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    3150:	cmp	r7, #2
    3152:	ite	eq
    3154:	moveq	r7, r1
    3156:	movne	r7, r5

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    3158:	ldr	r0, [r4, #40]	; 0x28

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    315a:	cmp	r2, lr
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    315c:	mov	r6, r9
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer();

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    315e:	ldr.w	sl, [r4, #44]	; 0x2c
        int p2 = CONTAINER->params[1];
    3162:	ldr.w	fp, [r4, #48]	; 0x30
        int p3 = CONTAINER->params[2];
    3166:	ldr	r3, [r4, #52]	; 0x34
        int id = CONTAINER->transaction_id;
    3168:	str	r0, [sp, #0]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    316a:	beq.w	3792 <MTPD::loop()+0x67a>
    316e:	bls.n	321a <MTPD::loop()+0x102>
    3170:	movw	r0, #4121	; 0x1019
    3174:	cmp	r2, r0
    3176:	beq.w	3778 <MTPD::loop()+0x660>
    317a:	bls.w	3376 <MTPD::loop()+0x25e>
    317e:	movw	r3, #38914	; 0x9802
    3182:	cmp	r2, r3
    3184:	beq.w	32fc <MTPD::loop()+0x1e4>
    3188:	bhi.w	348e <MTPD::loop()+0x376>
    318c:	movw	r3, #4122	; 0x101a
    3190:	cmp	r2, r3
    3192:	beq.w	34ec <MTPD::loop()+0x3d4>
    3196:	movw	r3, #38913	; 0x9801
    319a:	cmp	r2, r3
    319c:	bne.w	34b2 <MTPD::loop()+0x39a>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    31a0:	movw	r5, #9256	; 0x2428
    31a4:	mov.w	fp, #0
    31a8:	movw	r3, #9252	; 0x2424
    31ac:	movs	r2, #1
    31ae:	str.w	fp, [r4, r5]
    31b2:	mov	r1, sl
    31b4:	strb	r2, [r4, r3]
    31b6:	mov	r0, r4
    31b8:	str	r3, [sp, #4]
    31ba:	bl	22e0 <MTPD::getObjectPropsSupported(unsigned long)>
    31be:	ldr	r2, [r4, r5]
    31c0:	mov.w	ip, #2
    31c4:	ldr	r3, [sp, #4]
    31c6:	add.w	r0, r2, #12
    31ca:	movs	r2, #12
    31cc:	ldrh.w	lr, [r4, #38]	; 0x26
    31d0:	strb.w	fp, [r4, r3]
    31d4:	add.w	r1, sp, r2
    31d8:	ldr	r3, [r4, #40]	; 0x28
    31da:	str	r0, [sp, #12]
    31dc:	mov	r0, r4
    31de:	str.w	fp, [r4, r5]
    31e2:	add.w	r5, r4, #544	; 0x220
    31e6:	str	r3, [sp, #20]
    31e8:	strh.w	ip, [sp, #16]
    31ec:	strh.w	lr, [sp, #18]
    31f0:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    31f4:	mov	r1, sl
    31f6:	mov	r0, r4
    31f8:	bl	22e0 <MTPD::getObjectPropsSupported(unsigned long)>
    31fc:	ldr	r3, [sp, #12]
    31fe:	ubfx	fp, r3, #0, #9
    3202:	cmp.w	fp, #0
    3206:	beq.n	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3208:	movs	r2, #60	; 0x3c
    320a:	mov	r1, fp
    320c:	mov	r0, r5
    320e:	bl	9bd0 <usb_mtp_send>
    3212:	cmp	r0, #0
    3214:	ble.n	3208 <MTPD::loop()+0xf0>
    3216:	uxth	r7, r7
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;
    3218:	b.n	3258 <MTPD::loop()+0x140>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    321a:	movw	r1, #4101	; 0x1005
    321e:	cmp	r2, r1
    3220:	beq.w	357a <MTPD::loop()+0x462>
    3224:	bls.w	33fa <MTPD::loop()+0x2e2>
    3228:	movw	r1, #4104	; 0x1008
    322c:	cmp	r2, r1
    322e:	beq.n	3284 <MTPD::loop()+0x16c>
    3230:	bhi.w	34bc <MTPD::loop()+0x3a4>
    3234:	movw	r1, #4102	; 0x1006
    3238:	cmp	r2, r1
    323a:	beq.w	36e8 <MTPD::loop()+0x5d0>
    323e:	movw	r1, #4103	; 0x1007
    3242:	cmp	r2, r1
    3244:	bne.w	34b2 <MTPD::loop()+0x39a>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    3248:	cmp.w	fp, #0
    324c:	beq.w	37ba <MTPD::loop()+0x6a2>
    3250:	add.w	r5, r4, #544	; 0x220
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    3254:	movw	r7, #8212	; 0x2014
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    3258:	ldr	r1, [sp, #0]
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    325a:	movs	r3, #3
            CONTAINER->len=len;
    325c:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3260:	mov	r2, r9
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    3262:	str	r1, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3264:	mov	r0, r5
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
    3266:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3268:	mov	r1, r8
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
    326a:	str.w	sl, [r4, #44]	; 0x2c
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    326e:	strh	r3, [r4, #36]	; 0x24
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3270:	bl	9c5c <memcpy>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3274:	movs	r2, #60	; 0x3c
    3276:	mov	r1, r6
    3278:	mov	r0, r5
    327a:	bl	9bd0 <usb_mtp_send>
    327e:	cmp	r0, #0
    3280:	ble.n	3274 <MTPD::loop()+0x15c>
    3282:	b.n	3126 <MTPD::loop()+0xe>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    3284:	movw	r5, #9256	; 0x2428
    3288:	mov.w	fp, #0
    328c:	movw	r3, #9252	; 0x2424
    3290:	movs	r2, #1
    3292:	str.w	fp, [r4, r5]
    3296:	mov	r1, sl
    3298:	strb	r2, [r4, r3]
    329a:	mov	r0, r4
    329c:	str	r3, [sp, #4]
    329e:	bl	2040 <MTPD::GetObjectInfo(unsigned long)>
    32a2:	ldr	r2, [r4, r5]
    32a4:	mov.w	ip, #2
    32a8:	ldr	r3, [sp, #4]
    32aa:	add.w	r0, r2, #12
    32ae:	movs	r2, #12
    32b0:	ldrh.w	lr, [r4, #38]	; 0x26
    32b4:	strb.w	fp, [r4, r3]
    32b8:	add.w	r1, sp, r2
    32bc:	ldr	r3, [r4, #40]	; 0x28
    32be:	str	r0, [sp, #12]
    32c0:	mov	r0, r4
    32c2:	str.w	fp, [r4, r5]
    32c6:	add.w	r5, r4, #544	; 0x220
    32ca:	str	r3, [sp, #20]
    32cc:	strh.w	ip, [sp, #16]
    32d0:	strh.w	lr, [sp, #18]
    32d4:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    32d8:	mov	r1, sl
    32da:	mov	r0, r4
    32dc:	bl	2040 <MTPD::GetObjectInfo(unsigned long)>
    32e0:	ldr	r3, [sp, #12]
    32e2:	ubfx	fp, r3, #0, #9
    32e6:	cmp.w	fp, #0
    32ea:	beq.n	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    32ec:	movs	r2, #60	; 0x3c
    32ee:	mov	r1, fp
    32f0:	mov	r0, r5
    32f2:	bl	9bd0 <usb_mtp_send>
    32f6:	cmp	r0, #0
    32f8:	ble.n	32ec <MTPD::loop()+0x1d4>
    32fa:	b.n	3216 <MTPD::loop()+0xfe>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    32fc:	movw	r5, #9256	; 0x2428
    3300:	movs	r3, #0
    3302:	movs	r1, #1
    3304:	mov	r2, fp
    3306:	str	r3, [r4, r5]
    3308:	mov	r0, r4
    330a:	str	r3, [sp, #4]
    330c:	movw	r3, #9252	; 0x2424
    3310:	strb	r1, [r4, r3]
    3312:	mov	r1, sl
    3314:	bl	2370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3318:	ldr	r2, [r4, r5]
    331a:	ldr	r3, [sp, #4]
    331c:	mov.w	ip, #2
    3320:	add.w	lr, r2, #12
    3324:	movw	r2, #9252	; 0x2424
    3328:	mov	r0, r4
    332a:	strh.w	ip, [sp, #16]
    332e:	strb	r3, [r4, r2]
    3330:	movs	r2, #12
    3332:	str	r3, [r4, r5]
    3334:	add.w	r5, r4, #544	; 0x220
    3338:	ldrh	r3, [r4, #38]	; 0x26
    333a:	add.w	r1, sp, r2
    333e:	str.w	lr, [sp, #12]
    3342:	strh.w	r3, [sp, #18]
    3346:	ldr	r3, [r4, #40]	; 0x28
    3348:	str	r3, [sp, #20]
    334a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    334e:	mov	r2, fp
    3350:	mov	r1, sl
    3352:	mov	r0, r4
    3354:	bl	2370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3358:	ldr	r3, [sp, #12]
    335a:	ubfx	fp, r3, #0, #9
    335e:	cmp.w	fp, #0
    3362:	beq.w	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3366:	movs	r2, #60	; 0x3c
    3368:	mov	r1, fp
    336a:	mov	r0, r5
    336c:	bl	9bd0 <usb_mtp_send>
    3370:	cmp	r0, #0
    3372:	ble.n	3366 <MTPD::loop()+0x24e>
    3374:	b.n	3216 <MTPD::loop()+0xfe>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    3376:	movw	r3, #4112	; 0x1010
    337a:	cmp	r2, r3
    337c:	beq.w	34ec <MTPD::loop()+0x3d4>
    3380:	bls.w	34fc <MTPD::loop()+0x3e4>
    3384:	movw	r3, #4116	; 0x1014
    3388:	cmp	r2, r3
    338a:	beq.w	3518 <MTPD::loop()+0x400>
    338e:	movw	r3, #4117	; 0x1015
    3392:	cmp	r2, r3
    3394:	bne.w	34b2 <MTPD::loop()+0x39a>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    3398:	movw	r1, #54274	; 0xd402
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    339c:	movw	fp, #9256	; 0x2428
    33a0:	movs	r5, #0
    33a2:	movw	r3, #9252	; 0x2424
    33a6:	movs	r0, #1
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    33a8:	cmp	sl, r1
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    33aa:	str.w	r5, [r4, fp]
    33ae:	strb	r0, [r4, r3]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    33b0:	beq.w	3838 <MTPD::loop()+0x720>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    33b4:	mov.w	lr, #12
    33b8:	ldr	r0, [sp, #0]
    33ba:	strb	r5, [r4, r3]
    33bc:	movs	r3, #2
    33be:	strh.w	r2, [sp, #18]
    33c2:	add.w	r1, sp, lr
    33c6:	str	r0, [sp, #20]
    33c8:	mov	r2, lr
    33ca:	mov	r0, r4
    33cc:	str.w	lr, [sp, #12]
    33d0:	strh.w	r3, [sp, #16]
    33d4:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    33d8:	ldr	r3, [sp, #12]
    33da:	add.w	r5, r4, #544	; 0x220
    33de:	ubfx	fp, r3, #0, #9
    33e2:	cmp.w	fp, #0
    33e6:	beq.w	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    33ea:	movs	r2, #60	; 0x3c
    33ec:	mov	r1, fp
    33ee:	mov	r0, r5
    33f0:	bl	9bd0 <usb_mtp_send>
    33f4:	cmp	r0, #0
    33f6:	ble.n	33ea <MTPD::loop()+0x2d2>
    33f8:	b.n	3216 <MTPD::loop()+0xfe>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    33fa:	movw	r3, #4099	; 0x1003
    33fe:	cmp	r2, r3
    3400:	bhi.w	3704 <MTPD::loop()+0x5ec>
    3404:	movw	r3, #4098	; 0x1002
    3408:	cmp	r2, r3
    340a:	bcs.n	34f4 <MTPD::loop()+0x3dc>
    340c:	movw	r3, #4097	; 0x1001
    3410:	cmp	r2, r3
    3412:	bne.n	34b2 <MTPD::loop()+0x39a>
        {
          case 0x1001:
            p1=0;
            TRANSMIT(WriteDescriptor());
    3414:	movw	r5, #9256	; 0x2428
    3418:	mov.w	sl, #0
    341c:	movs	r3, #1
    341e:	movw	fp, #9252	; 0x2424
    3422:	str.w	sl, [r4, r5]
    3426:	mov	r0, r4
    3428:	strb.w	r3, [r4, fp]
    342c:	bl	1b48 <MTPD::WriteDescriptor()>
    3430:	ldr	r3, [r4, r5]
    3432:	movs	r2, #12
    3434:	strb.w	sl, [r4, fp]
    3438:	add.w	r0, r3, #12
    343c:	ldrh.w	ip, [r4, #38]	; 0x26
    3440:	mov.w	lr, #2
    3444:	str.w	sl, [r4, r5]
    3448:	ldr	r3, [r4, #40]	; 0x28
    344a:	add.w	r1, sp, r2
    344e:	str	r0, [sp, #12]
    3450:	mov	r0, r4
    3452:	str	r3, [sp, #20]
    3454:	add.w	r5, r4, #544	; 0x220
    3458:	strh.w	lr, [sp, #16]
    345c:	strh.w	ip, [sp, #18]
    3460:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    3464:	mov	r0, r4
    3466:	bl	1b48 <MTPD::WriteDescriptor()>
    346a:	ldr	r3, [sp, #12]
    346c:	ubfx	sl, r3, #0, #9
    3470:	cmp.w	sl, #0
    3474:	bne.n	347e <MTPD::loop()+0x366>
    3476:	uxth	r7, r7
            break;
    3478:	mov.w	sl, #0
    347c:	b.n	3258 <MTPD::loop()+0x140>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    347e:	movs	r2, #60	; 0x3c
    3480:	mov	r1, sl
    3482:	mov	r0, r5
    3484:	bl	9bd0 <usb_mtp_send>
    3488:	cmp	r0, #0
    348a:	ble.n	347e <MTPD::loop()+0x366>
    348c:	b.n	3476 <MTPD::loop()+0x35e>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    348e:	movw	r3, #38915	; 0x9803
    3492:	cmp	r2, r3
    3494:	beq.w	35f4 <MTPD::loop()+0x4dc>
    3498:	movw	r3, #38916	; 0x9804
    349c:	cmp	r2, r3
    349e:	bne.n	34b2 <MTPD::loop()+0x39a>
      }
      storage_->close();
    }

    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    { pull_packet(rx_data_buffer);
    34a0:	mov	r1, r8
    34a2:	mov	r0, r4
    34a4:	bl	2cb4 <MTPD::pull_packet(unsigned char*)>
//      printContainer(); 
      
      if(p2==0xDC07)
    34a8:	movw	r3, #56327	; 0xdc07
    34ac:	cmp	fp, r3
    34ae:	beq.w	38c4 <MTPD::loop()+0x7ac>
    34b2:	add.w	r5, r4, #544	; 0x220
    34b6:	movw	r7, #8197	; 0x2005
    34ba:	b.n	3258 <MTPD::loop()+0x140>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    34bc:	movw	r3, #4105	; 0x1009
    34c0:	cmp	r2, r3
    34c2:	beq.w	366e <MTPD::loop()+0x556>
    34c6:	movw	r3, #4107	; 0x100b
    34ca:	cmp	r2, r3
    34cc:	bne.n	34b2 <MTPD::loop()+0x39a>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    34ce:	cmp.w	fp, #0
    34d2:	bne.w	3250 <MTPD::loop()+0x138>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    34d6:	ldr	r0, [r4, #0]
    34d8:	mov	r1, sl
    34da:	ldr	r3, [r0, #0]
    34dc:	ldr	r3, [r3, #64]	; 0x40
    34de:	blx	r3
    34e0:	cbnz	r0, 34f4 <MTPD::loop()+0x3dc>
    34e2:	add.w	r5, r4, #544	; 0x220
    34e6:	movw	r7, #8210	; 0x2012
    34ea:	b.n	3258 <MTPD::loop()+0x140>
              CONTAINER->len  = len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;
    34ec:	mov	r7, r1
    34ee:	add.w	r5, r4, #544	; 0x220
    34f2:	b.n	3258 <MTPD::loop()+0x140>
    34f4:	uxth	r7, r7
    34f6:	add.w	r5, r4, #544	; 0x220
    34fa:	b.n	3258 <MTPD::loop()+0x140>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    34fc:	movw	r3, #4109	; 0x100d
    3500:	cmp	r2, r3
    3502:	bne.n	34b2 <MTPD::loop()+0x39a>
              break;

          case 0x100D:  // SendObject
              SendObject();
              CONTAINER->len  = len = 12;
              break;
    3504:	mov.w	r9, #12
              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;

          case 0x100D:  // SendObject
              SendObject();
    3508:	mov	r0, r4
    350a:	bl	301c <MTPD::SendObject()>
    350e:	add.w	r5, r4, #544	; 0x220
    3512:	uxth	r7, r7
              CONTAINER->len  = len = 12;
    3514:	mov	r6, r9
              break;
    3516:	b.n	3258 <MTPD::loop()+0x140>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    3518:	movw	r1, #54274	; 0xd402
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    351c:	movw	fp, #9256	; 0x2428
    3520:	movs	r5, #0
    3522:	movw	r3, #9252	; 0x2424
    3526:	movs	r0, #1
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    3528:	cmp	sl, r1
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    352a:	str.w	r5, [r4, fp]
    352e:	strb	r0, [r4, r3]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    3530:	beq.w	387e <MTPD::loop()+0x766>
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    3534:	mov.w	lr, #12
    3538:	ldr	r0, [sp, #0]
    353a:	strb	r5, [r4, r3]
    353c:	movs	r3, #2
    353e:	strh.w	r2, [sp, #18]
    3542:	add.w	r1, sp, lr
    3546:	str	r0, [sp, #20]
    3548:	mov	r2, lr
    354a:	mov	r0, r4
    354c:	str.w	lr, [sp, #12]
    3550:	strh.w	r3, [sp, #16]
    3554:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    3558:	ldr	r3, [sp, #12]
    355a:	add.w	r5, r4, #544	; 0x220
    355e:	ubfx	fp, r3, #0, #9
    3562:	cmp.w	fp, #0
    3566:	beq.w	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    356a:	movs	r2, #60	; 0x3c
    356c:	mov	r1, fp
    356e:	mov	r0, r5
    3570:	bl	9bd0 <usb_mtp_send>
    3574:	cmp	r0, #0
    3576:	ble.n	356a <MTPD::loop()+0x452>
    3578:	b.n	3216 <MTPD::loop()+0xfe>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    357a:	movw	r5, #9256	; 0x2428
    357e:	mov.w	fp, #0
    3582:	movw	r3, #9252	; 0x2424
    3586:	movs	r2, #1
    3588:	str.w	fp, [r4, r5]
    358c:	mov	r1, sl
    358e:	strb	r2, [r4, r3]
    3590:	mov	r0, r4
    3592:	str	r3, [sp, #4]
    3594:	bl	1e1c <MTPD::GetStorageInfo(unsigned long)>
    3598:	ldr	r2, [r4, r5]
    359a:	mov.w	ip, #2
    359e:	ldr	r3, [sp, #4]
    35a0:	add.w	r0, r2, #12
    35a4:	movs	r2, #12
    35a6:	ldrh.w	lr, [r4, #38]	; 0x26
    35aa:	strb.w	fp, [r4, r3]
    35ae:	add.w	r1, sp, r2
    35b2:	ldr	r3, [r4, #40]	; 0x28
    35b4:	str	r0, [sp, #12]
    35b6:	mov	r0, r4
    35b8:	str.w	fp, [r4, r5]
    35bc:	add.w	r5, r4, #544	; 0x220
    35c0:	str	r3, [sp, #20]
    35c2:	strh.w	ip, [sp, #16]
    35c6:	strh.w	lr, [sp, #18]
    35ca:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    35ce:	mov	r1, sl
    35d0:	mov	r0, r4
    35d2:	bl	1e1c <MTPD::GetStorageInfo(unsigned long)>
    35d6:	ldr	r3, [sp, #12]
    35d8:	ubfx	fp, r3, #0, #9
    35dc:	cmp.w	fp, #0
    35e0:	beq.w	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    35e4:	movs	r2, #60	; 0x3c
    35e6:	mov	r1, fp
    35e8:	mov	r0, r5
    35ea:	bl	9bd0 <usb_mtp_send>
    35ee:	cmp	r0, #0
    35f0:	ble.n	35e4 <MTPD::loop()+0x4cc>
    35f2:	b.n	3216 <MTPD::loop()+0xfe>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    35f4:	movw	r5, #9256	; 0x2428
    35f8:	movs	r3, #0
    35fa:	movs	r1, #1
    35fc:	mov	r2, fp
    35fe:	str	r3, [r4, r5]
    3600:	mov	r0, r4
    3602:	str	r3, [sp, #4]
    3604:	movw	r3, #9252	; 0x2424
    3608:	strb	r1, [r4, r3]
    360a:	mov	r1, sl
    360c:	bl	2ae4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3610:	ldr	r2, [r4, r5]
    3612:	ldr	r3, [sp, #4]
    3614:	mov.w	ip, #2
    3618:	add.w	lr, r2, #12
    361c:	movw	r2, #9252	; 0x2424
    3620:	mov	r0, r4
    3622:	strh.w	ip, [sp, #16]
    3626:	strb	r3, [r4, r2]
    3628:	movs	r2, #12
    362a:	str	r3, [r4, r5]
    362c:	add.w	r5, r4, #544	; 0x220
    3630:	ldrh	r3, [r4, #38]	; 0x26
    3632:	add.w	r1, sp, r2
    3636:	str.w	lr, [sp, #12]
    363a:	strh.w	r3, [sp, #18]
    363e:	ldr	r3, [r4, #40]	; 0x28
    3640:	str	r3, [sp, #20]
    3642:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    3646:	mov	r2, fp
    3648:	mov	r1, sl
    364a:	mov	r0, r4
    364c:	bl	2ae4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3650:	ldr	r3, [sp, #12]
    3652:	ubfx	fp, r3, #0, #9
    3656:	cmp.w	fp, #0
    365a:	beq.w	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    365e:	movs	r2, #60	; 0x3c
    3660:	mov	r1, fp
    3662:	mov	r0, r5
    3664:	bl	9bd0 <usb_mtp_send>
    3668:	cmp	r0, #0
    366a:	ble.n	365e <MTPD::loop()+0x546>
    366c:	b.n	3216 <MTPD::loop()+0xfe>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    366e:	movw	r5, #9256	; 0x2428
    3672:	mov.w	fp, #0
    3676:	movw	r3, #9252	; 0x2424
    367a:	movs	r2, #1
    367c:	str.w	fp, [r4, r5]
    3680:	mov	r1, sl
    3682:	strb	r2, [r4, r3]
    3684:	mov	r0, r4
    3686:	str	r3, [sp, #4]
    3688:	bl	2ccc <MTPD::GetObject(unsigned long)>
    368c:	ldr	r2, [r4, r5]
    368e:	mov.w	ip, #2
    3692:	ldr	r3, [sp, #4]
    3694:	add.w	r0, r2, #12
    3698:	movs	r2, #12
    369a:	ldrh.w	lr, [r4, #38]	; 0x26
    369e:	strb.w	fp, [r4, r3]
    36a2:	add.w	r1, sp, r2
    36a6:	ldr	r3, [r4, #40]	; 0x28
    36a8:	str	r0, [sp, #12]
    36aa:	mov	r0, r4
    36ac:	str.w	fp, [r4, r5]
    36b0:	add.w	r5, r4, #544	; 0x220
    36b4:	str	r3, [sp, #20]
    36b6:	strh.w	ip, [sp, #16]
    36ba:	strh.w	lr, [sp, #18]
    36be:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    36c2:	mov	r1, sl
    36c4:	mov	r0, r4
    36c6:	bl	2ccc <MTPD::GetObject(unsigned long)>
    36ca:	ldr	r3, [sp, #12]
    36cc:	ubfx	fp, r3, #0, #9
    36d0:	cmp.w	fp, #0
    36d4:	beq.w	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    36d8:	movs	r2, #60	; 0x3c
    36da:	mov	r1, fp
    36dc:	mov	r0, r5
    36de:	bl	9bd0 <usb_mtp_send>
    36e2:	cmp	r0, #0
    36e4:	ble.n	36d8 <MTPD::loop()+0x5c0>
    36e6:	b.n	3216 <MTPD::loop()+0xfe>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (CONTAINER->params[1]) 
    36e8:	cmp.w	fp, #0
    36ec:	bne.w	3250 <MTPD::loop()+0x138>
            {
                return_code = 0x2014; // spec by format unsupported
            } else 
            {
                p1 = GetNumObjects(p1, p3);
    36f0:	mov	r1, sl
    36f2:	mov	r2, r3
    36f4:	mov	r0, r4
    36f6:	add.w	r5, r4, #544	; 0x220
    36fa:	bl	1f90 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    36fe:	mov	sl, r0
    3700:	uxth	r7, r7
    3702:	b.n	3258 <MTPD::loop()+0x140>
          case 0x1003:  // CloseSession
            //
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    3704:	movw	r5, #9256	; 0x2428
    3708:	mov.w	fp, #0
    370c:	movw	r2, #9252	; 0x2424
    3710:	movs	r3, #1
    3712:	str.w	fp, [r4, r5]
    3716:	mov	r0, r4
    3718:	strb	r3, [r4, r2]
    371a:	str	r2, [sp, #4]
    371c:	bl	1da4 <MTPD::WriteStorageIDs()>
    3720:	ldr	r2, [sp, #4]
    3722:	mov.w	lr, #2
    3726:	ldr	r3, [r4, r5]
    3728:	mov	r0, r4
    372a:	strb.w	fp, [r4, r2]
    372e:	movs	r2, #12
    3730:	adds	r3, #12
    3732:	ldrh.w	ip, [r4, #38]	; 0x26
    3736:	str.w	fp, [r4, r5]
    373a:	add.w	r1, sp, r2
    373e:	ldr	r5, [r4, #40]	; 0x28
    3740:	str	r3, [sp, #12]
    3742:	strh.w	lr, [sp, #16]
    3746:	strh.w	ip, [sp, #18]
    374a:	str	r5, [sp, #20]
    374c:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    3750:	mov	r0, r4
    3752:	add.w	r5, r4, #544	; 0x220
    3756:	bl	1da4 <MTPD::WriteStorageIDs()>
    375a:	ldr	r3, [sp, #12]
    375c:	ubfx	fp, r3, #0, #9
    3760:	cmp.w	fp, #0
    3764:	beq.w	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3768:	movs	r2, #60	; 0x3c
    376a:	mov	r1, fp
    376c:	mov	r0, r5
    376e:	bl	9bd0 <usb_mtp_send>
    3772:	cmp	r0, #0
    3774:	ble.n	3768 <MTPD::loop()+0x650>
    3776:	b.n	3216 <MTPD::loop()+0xfe>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    3778:	ldr	r0, [r4, #0]
    377a:	mov	r2, r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    377c:	mov.w	r9, #12
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    3780:	mov	r1, sl
    3782:	ldr	r3, [r0, #0]
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    3784:	mov	r7, r5
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
    3786:	mov	r6, r9
    3788:	add.w	r5, r4, #544	; 0x220
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    378c:	ldr	r3, [r3, #80]	; 0x50
    378e:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    3790:	b.n	3258 <MTPD::loop()+0x140>
    3792:	cmp.w	sl, #0
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
                                                    p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;
    3796:	mov.w	r9, #24
              break;


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
    379a:	mov	r2, fp
    379c:	mov	r0, r4
    379e:	it	eq
    37a0:	moveq.w	sl, #1
                                                    p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
    37a4:	mov	r6, r9
    37a6:	uxth	r7, r7
    37a8:	add.w	r5, r4, #544	; 0x220
              break;


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
    37ac:	mov	r1, sl
    37ae:	bl	2ec8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                                    p2); // parent

              CONTAINER->params[1]=p2;
    37b2:	str.w	fp, [r4, #48]	; 0x30


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
                                                    p2); // parent
    37b6:	str	r0, [r4, #52]	; 0x34

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;
    37b8:	b.n	3258 <MTPD::loop()+0x140>
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    37ba:	movw	r5, #9256	; 0x2428
    37be:	mov	r2, r3
    37c0:	movs	r0, #1
    37c2:	str	r3, [sp, #4]
    37c4:	movw	r3, #9252	; 0x2424
    37c8:	str.w	fp, [r4, r5]
    37cc:	mov	r1, sl
    37ce:	strb	r0, [r4, r3]
    37d0:	mov	r0, r4
    37d2:	bl	1fb8 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    37d6:	movw	r3, #9252	; 0x2424
    37da:	ldr	r2, [r4, r5]
    37dc:	mov.w	ip, #2
    37e0:	strb.w	fp, [r4, r3]
    37e4:	mov	r0, r4
    37e6:	str.w	fp, [r4, r5]
    37ea:	add.w	lr, r2, #12
    37ee:	ldrh	r3, [r4, #38]	; 0x26
    37f0:	movs	r2, #12
    37f2:	str.w	lr, [sp, #12]
    37f6:	add.w	r5, r4, #544	; 0x220
    37fa:	strh.w	r3, [sp, #18]
    37fe:	add.w	r1, sp, r2
    3802:	ldr	r3, [r4, #40]	; 0x28
    3804:	strh.w	ip, [sp, #16]
    3808:	str	r3, [sp, #20]
    380a:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    380e:	ldr	r3, [sp, #4]
    3810:	mov	r1, sl
    3812:	mov	r0, r4
    3814:	mov	r2, r3
    3816:	bl	1fb8 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    381a:	ldr	r3, [sp, #12]
    381c:	ubfx	fp, r3, #0, #9
    3820:	cmp.w	fp, #0
    3824:	beq.w	3216 <MTPD::loop()+0xfe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3828:	movs	r2, #60	; 0x3c
    382a:	mov	r1, fp
    382c:	mov	r0, r5
    382e:	bl	9bd0 <usb_mtp_send>
    3832:	cmp	r0, #0
    3834:	ble.n	3828 <MTPD::loop()+0x710>
    3836:	b.n	3216 <MTPD::loop()+0xfe>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    3838:	mov	r0, r4
    383a:	ldr	r1, [pc, #160]	; (38dc <MTPD::loop()+0x7c4>)
    383c:	str	r3, [sp, #4]
    383e:	bl	19b4 <MTPD::writestring(char const*)>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    3842:	ldr.w	r2, [r4, fp]
    3846:	mov.w	ip, #2
    384a:	ldr	r3, [sp, #4]
    384c:	add.w	r0, r2, #12
    3850:	movs	r2, #12
    3852:	ldrh.w	lr, [r4, #38]	; 0x26
    3856:	strb	r5, [r4, r3]
    3858:	add.w	r1, sp, r2
    385c:	ldr	r3, [r4, #40]	; 0x28
    385e:	str	r0, [sp, #12]
    3860:	mov	r0, r4
    3862:	str.w	r5, [r4, fp]
    3866:	strh.w	ip, [sp, #16]
    386a:	strh.w	lr, [sp, #18]
    386e:	str	r3, [sp, #20]
    3870:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    3874:	ldr	r1, [pc, #100]	; (38dc <MTPD::loop()+0x7c4>)
    3876:	mov	r0, r4
    3878:	bl	19b4 <MTPD::writestring(char const*)>
    387c:	b.n	33d8 <MTPD::loop()+0x2c0>
    387e:	mov	r1, sl
    3880:	mov	r0, r4
    3882:	str	r3, [sp, #4]
    3884:	bl	1a80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    3888:	ldr.w	r2, [r4, fp]
    388c:	mov.w	ip, #2
    3890:	ldr	r3, [sp, #4]
    3892:	add.w	r0, r2, #12
    3896:	movs	r2, #12
    3898:	ldrh.w	lr, [r4, #38]	; 0x26
    389c:	strb	r5, [r4, r3]
    389e:	add.w	r1, sp, r2
    38a2:	ldr	r3, [r4, #40]	; 0x28
    38a4:	str	r0, [sp, #12]
    38a6:	mov	r0, r4
    38a8:	str.w	r5, [r4, fp]
    38ac:	strh.w	ip, [sp, #16]
    38b0:	strh.w	lr, [sp, #18]
    38b4:	str	r3, [sp, #20]
    38b6:	bl	1934 <MTPD::write(char const*, int) [clone .part.1]>
    38ba:	mov	r1, sl
    38bc:	mov	r0, r4
    38be:	bl	1a80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>
    38c2:	b.n	3558 <MTPD::loop()+0x440>
    38c4:	mov	r1, sl
    38c6:	mov	r0, r4
    38c8:	bl	2e9c <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>

          default:
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
    38cc:	cmp	r0, #0
    38ce:	beq.w	3126 <MTPD::loop()+0xe>
    38d2:	uxth	r7, r0
    38d4:	add.w	r5, r4, #544	; 0x220
    38d8:	b.n	3258 <MTPD::loop()+0x140>
    38da:	nop
    38dc:	.word	0x2000029c

000038e0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    38e0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    38e2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    38e4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    38e6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    38e8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    38ea:	beq.n	38f4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    38ec:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    38f0:	b.w	b5bc <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    38f4:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    38f6:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    38fa:	bx	r3

000038fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    38fc:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    38fe:	movw	r5, #513	; 0x201
    3902:	ldr	r4, [r0, #0]
    3904:	str	r5, [r4, #16]

	while (count > 0) {
    3906:	cbz	r3, 3950 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    3908:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    390a:	cbz	r1, 394a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    390c:	ldrb	r5, [r1, #0]
    390e:	adds	r1, #1
		count--; // how many bytes left to output.
    3910:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    3912:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    3914:	ldr	r5, [r4, #112]	; 0x70
    3916:	lsls	r5, r5, #30
    3918:	bmi.n	3928 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    391a:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    391c:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    391e:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    3920:	cbz	r2, 3928 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    3922:	strb	r5, [r2, #0]
    3924:	adds	r2, #1
    3926:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    3928:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    392a:	lsls	r5, r5, #31
    392c:	bpl.n	3914 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    392e:	cmp	r3, #0
    3930:	bne.n	390a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    3932:	cbz	r6, 3950 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3934:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    3936:	ldr	r3, [r1, #112]	; 0x70
    3938:	lsls	r3, r3, #30
    393a:	bmi.n	3936 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    393c:	ldr	r3, [r1, #116]	; 0x74
    393e:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    3940:	cbz	r2, 3946 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    3942:	strb	r3, [r2, #0]
    3944:	adds	r2, #1
			count_read--;
    3946:	subs	r6, #1
    3948:	b.n	3932 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    394a:	ldrb.w	r5, [r0, #60]	; 0x3c
    394e:	b.n	3910 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    3950:	pop	{r4, r5, r6}
    3952:	bx	lr

00003954 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3954:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    3956:	ldr	r4, [pc, #192]	; (3a18 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    3958:	ldr	r3, [pc, #192]	; (3a1c <_spi_dma_rxISR0()+0xc8>)
    395a:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    395c:	ldr	r5, [r4, #68]	; 0x44
    395e:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    3960:	ldr	r2, [r4, #64]	; 0x40
    3962:	strb	r1, [r3, #31]
    3964:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    3966:	strb	r1, [r3, #28]
    3968:	ldrb	r1, [r0, #4]
    396a:	strb	r1, [r3, #28]
    396c:	cbz	r2, 39ae <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    396e:	cmp.w	r2, #32768	; 0x8000
    3972:	bcs.n	39a6 <_spi_dma_rxISR0()+0x52>
    3974:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    3976:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    3978:	ldrh	r1, [r3, #30]
    397a:	lsls	r6, r1, #16
    397c:	bmi.n	39f6 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    397e:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    3980:	ldrh	r1, [r3, #30]
    3982:	uxth	r1, r1
    3984:	strh	r1, [r3, #22]
    3986:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    3988:	ldrh	r1, [r3, #30]
    398a:	lsls	r1, r1, #16
    398c:	bmi.n	39e8 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    398e:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    3990:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    3992:	ldrh	r2, [r3, #30]
    3994:	uxth	r2, r2
    3996:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    3998:	str	r1, [r4, #64]	; 0x40
    399a:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    399c:	ldr	r3, [pc, #124]	; (3a1c <_spi_dma_rxISR0()+0xc8>)
    399e:	strb	r2, [r3, #27]
    39a0:	ldrb	r2, [r5, #4]
    39a2:	strb	r2, [r3, #27]
    39a4:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    39a6:	ldr	r3, [pc, #120]	; (3a20 <_spi_dma_rxISR0()+0xcc>)
    39a8:	add	r3, r2
    39aa:	str	r3, [r4, #64]	; 0x40
    39ac:	b.n	399a <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    39ae:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    39b0:	movs	r5, #15
    39b2:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    39b4:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    39b8:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    39ba:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    39be:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    39c0:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    39c2:	ldr	r5, [r1, #0]
    39c4:	ldr	r1, [pc, #92]	; (3a24 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    39c6:	str	r2, [r3, #28]
    39c8:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    39ca:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    39ce:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    39d0:	strb.w	r6, [r4, #61]	; 0x3d
    39d4:	bne.n	3a06 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    39d6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    39d8:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    39da:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    39dc:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    39de:	beq.n	3a10 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    39e0:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    39e4:	b.w	b5bc <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    39e8:	ldrh	r1, [r3, #30]
    39ea:	ubfx	r2, r2, #0, #9
    39ee:	and.w	r1, r1, #65024	; 0xfe00
    39f2:	orrs	r2, r1
    39f4:	b.n	398e <_spi_dma_rxISR0()+0x3a>
    39f6:	ldrh	r1, [r3, #30]
    39f8:	ubfx	r6, r2, #0, #9
    39fc:	and.w	r1, r1, #65024	; 0xfe00
    3a00:	orrs	r1, r6
    3a02:	strh	r1, [r3, #30]
    3a04:	b.n	3980 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a06:	mov	r3, r5
    3a08:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3a0a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a0e:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3a10:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3a12:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3a16:	bx	r3
    3a18:	.word	0x20000bc4
    3a1c:	.word	0x400e8000
    3a20:	.word	0xffff8001
    3a24:	.word	0x000038e1

00003a28 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    3a28:	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    3a2a:	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3a2c:	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3a30:	ldr.w	lr, [pc, #508]	; 3c30 <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3a34:	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3a36:	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    3a38:	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a3a:	ldr	r4, [pc, #468]	; (3c10 <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3a3c:	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a40:	ldr	r7, [pc, #464]	; (3c14 <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3a42:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3a44:	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a48:	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3a4a:	ldr	r2, [pc, #460]	; (3c18 <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a4c:	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    3a4e:	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a50:	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3a54:	ldrb	r7, [r0, #16]
    3a56:	add	r7, r3
    3a58:	ldrb	r7, [r7, #16]
    3a5a:	add.w	r7, r2, r7, lsl #4
    3a5e:	ldr	r7, [r7, #8]
    3a60:	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    3a62:	ldrb	r7, [r0, #17]
    3a64:	add	r7, r3
    3a66:	ldrb.w	r7, [r7, #36]	; 0x24
    3a6a:	add.w	r7, r2, r7, lsl #4
    3a6e:	ldr	r7, [r7, #8]
    3a70:	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    3a72:	ldrb	r7, [r0, #18]
    3a74:	add	r7, r3
    3a76:	ldrb.w	r7, [r7, #56]	; 0x38
    3a7a:	add.w	r7, r2, r7, lsl #4
    3a7e:	ldr	r7, [r7, #8]
    3a80:	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    3a82:	ldr	r7, [r1, #0]
    3a84:	ldr	r6, [r3, #4]
    3a86:	orrs	r6, r7
    3a88:	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    3a8a:	ldrb	r1, [r0, #16]
    3a8c:	adds	r6, r3, r1
    3a8e:	add.w	r1, r3, r1, lsl #2
    3a92:	ldrb	r6, [r6, #16]
    3a94:	ldr	r7, [r1, #20]
    3a96:	add.w	r1, r2, r6, lsl #4
    3a9a:	ldr	r1, [r1, #4]
    3a9c:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    3a9e:	ldrb	r1, [r0, #17]
    3aa0:	adds	r6, r3, r1
    3aa2:	adds	r1, #10
    3aa4:	ldrb.w	r6, [r6, #36]	; 0x24
    3aa8:	ldr.w	r7, [r3, r1, lsl #2]
    3aac:	add.w	r1, r2, r6, lsl #4
    3ab0:	ldr	r1, [r1, #4]
    3ab2:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3ab4:	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    3ab6:	ldr.w	lr, [r3, #72]	; 0x48

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3aba:	adds	r6, r3, r1
    3abc:	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    3ac0:	ldr	r7, [r3, #32]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3ac2:	ldrb.w	r6, [r6, #56]	; 0x38
    3ac6:	ldr	r1, [r1, #60]	; 0x3c
    3ac8:	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    3acc:	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3ace:	ldr	r2, [r2, #4]
    3ad0:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    3ad2:	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3ad4:	ldr	r2, [r0, #0]
    3ad6:	add	r1, r3
    3ad8:	ldrb.w	r1, [r1, #68]	; 0x44
    3adc:	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    3ae0:	ldrb	r1, [r0, #16]
    3ae2:	add	r1, r3
    3ae4:	ldrb	r1, [r1, #28]
    3ae6:	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    3ae8:	ldrb	r1, [r0, #17]
    3aea:	add	r3, r1
    3aec:	ldrb.w	r3, [r3, #48]	; 0x30
    3af0:	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    3af2:	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    3af4:	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3af6:	ldrb	r3, [r0, #19]
    3af8:	cmp	r3, #0
    3afa:	beq.n	3b50 <SPIClass::begin()+0x128>
			__disable_irq();
    3afc:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3afe:	ldrb	r3, [r0, #19]
    3b00:	lsls	r4, r3, #31
    3b02:	bpl.n	3b12 <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3b04:	ldr	r2, [pc, #276]	; (3c1c <SPIClass::begin()+0x1f4>)
    3b06:	ldr	r3, [r0, #20]
    3b08:	ldr	r1, [r2, #0]
    3b0a:	ands	r3, r1
    3b0c:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    3b0e:	str	r3, [r2, #0]
    3b10:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    3b12:	lsls	r1, r3, #30
    3b14:	bpl.n	3b24 <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3b16:	ldr	r2, [pc, #264]	; (3c20 <SPIClass::begin()+0x1f8>)
    3b18:	ldr	r3, [r0, #24]
    3b1a:	ldr	r1, [r2, #0]
    3b1c:	ands	r3, r1
    3b1e:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    3b20:	str	r3, [r2, #0]
    3b22:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    3b24:	lsls	r2, r3, #29
    3b26:	bpl.n	3b36 <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3b28:	ldr	r2, [pc, #248]	; (3c24 <SPIClass::begin()+0x1fc>)
    3b2a:	ldr	r3, [r0, #28]
    3b2c:	ldr	r1, [r2, #0]
    3b2e:	ands	r3, r1
    3b30:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    3b32:	str	r3, [r2, #0]
    3b34:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    3b36:	lsls	r7, r3, #28
    3b38:	bpl.n	3b48 <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3b3a:	ldr	r2, [pc, #236]	; (3c28 <SPIClass::begin()+0x200>)
    3b3c:	ldr	r3, [r0, #32]
    3b3e:	ldr	r1, [r2, #0]
    3b40:	ands	r3, r1
    3b42:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    3b44:	str	r3, [r2, #0]
    3b46:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    3b48:	lsls	r6, r3, #27
    3b4a:	bmi.n	3be4 <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    3b4c:	cpsie	i
    3b4e:	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    3b50:	ldr	r5, [pc, #216]	; (3c2c <SPIClass::begin()+0x204>)
    3b52:	ldr	r3, [r0, #8]
    3b54:	cmp	r3, r5
    3b56:	beq.n	3bf2 <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    3b58:	ldr	r3, [pc, #212]	; (3c30 <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    3b5a:	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    3b5c:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3b5e:	ldr	r4, [pc, #212]	; (3c34 <SPIClass::begin()+0x20c>)
    3b60:	ubfx	r6, r3, #4, #2
    3b64:	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    3b68:	ldr	r3, [pc, #204]	; (3c38 <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3b6a:	ldr.w	r4, [r4, r6, lsl #2]
    3b6e:	adds	r1, #1
    3b70:	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    3b74:	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    3b78:	lsrs	r3, r3, #20
    3b7a:	bne.n	3bd0 <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3b7c:	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    3b7e:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3b80:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    3b82:	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    3b84:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    3b86:	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3b88:	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    3b8a:	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    3b8c:	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    3b8e:	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3b90:	ldrb	r3, [r0, #19]
    3b92:	cbz	r3, 3bce <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    3b94:	lsls	r5, r3, #31
    3b96:	bpl.n	3ba0 <SPIClass::begin()+0x178>
    3b98:	ldr	r3, [pc, #160]	; (3c3c <SPIClass::begin()+0x214>)
    3b9a:	ldr	r2, [r0, #40]	; 0x28
    3b9c:	str	r2, [r3, #0]
    3b9e:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    3ba0:	lsls	r4, r3, #30
    3ba2:	bpl.n	3bac <SPIClass::begin()+0x184>
    3ba4:	ldr	r3, [pc, #152]	; (3c40 <SPIClass::begin()+0x218>)
    3ba6:	ldr	r2, [r0, #44]	; 0x2c
    3ba8:	str	r2, [r3, #0]
    3baa:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    3bac:	lsls	r1, r3, #29
    3bae:	bpl.n	3bb8 <SPIClass::begin()+0x190>
    3bb0:	ldr	r3, [pc, #144]	; (3c44 <SPIClass::begin()+0x21c>)
    3bb2:	ldr	r2, [r0, #48]	; 0x30
    3bb4:	str	r2, [r3, #0]
    3bb6:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    3bb8:	lsls	r2, r3, #28
    3bba:	bpl.n	3bc4 <SPIClass::begin()+0x19c>
    3bbc:	ldr	r3, [pc, #136]	; (3c48 <SPIClass::begin()+0x220>)
    3bbe:	ldr	r2, [r0, #52]	; 0x34
    3bc0:	str	r2, [r3, #0]
    3bc2:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    3bc4:	lsls	r3, r3, #27
    3bc6:	bpl.n	3bce <SPIClass::begin()+0x1a6>
    3bc8:	ldr	r2, [r0, #56]	; 0x38
    3bca:	ldr	r3, [pc, #128]	; (3c4c <SPIClass::begin()+0x224>)
    3bcc:	str	r2, [r3, #0]
    3bce:	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    3bd0:	udiv	r1, r1, r3
    3bd4:	cmp	r1, r5
    3bd6:	it	hi
    3bd8:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    3bda:	cmp.w	r3, #258	; 0x102
    3bde:	bcc.n	3bf6 <SPIClass::begin()+0x1ce>
    3be0:	ldr	r3, [pc, #108]	; (3c50 <SPIClass::begin()+0x228>)
    3be2:	b.n	3b7c <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    3be4:	ldr	r2, [pc, #108]	; (3c54 <SPIClass::begin()+0x22c>)
    3be6:	ldr	r3, [r0, #36]	; 0x24
    3be8:	ldr	r1, [r2, #0]
    3bea:	ands	r3, r1
    3bec:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    3bee:	str	r3, [r2, #0]
    3bf0:	b.n	3b4c <SPIClass::begin()+0x124>
    3bf2:	ldr	r3, [r0, #12]
    3bf4:	b.n	3b7e <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    3bf6:	cmp	r3, #2
    3bf8:	it	ls
    3bfa:	movls	r3, #0
    3bfc:	bls.n	3b7c <SPIClass::begin()+0x154>
    3bfe:	subs	r3, #2
    3c00:	lsrs	r4, r3, #1
    3c02:	lsls	r1, r4, #16
    3c04:	orr.w	r3, r3, r4, lsl #8
    3c08:	and.w	r1, r1, #16711680	; 0xff0000
    3c0c:	orrs	r3, r1
    3c0e:	b.n	3b7c <SPIClass::begin()+0x154>
    3c10:	.word	0xe3ffffcf
    3c14:	.word	0x08000010
    3c18:	.word	0x20000500
    3c1c:	.word	0xe000e180
    3c20:	.word	0xe000e184
    3c24:	.word	0xe000e188
    3c28:	.word	0xe000e18c
    3c2c:	.word	0x003d0900
    3c30:	.word	0x400fc000
    3c34:	.word	0x200002cc
    3c38:	.word	0x431bde83
    3c3c:	.word	0xe000e100
    3c40:	.word	0xe000e104
    3c44:	.word	0xe000e108
    3c48:	.word	0xe000e10c
    3c4c:	.word	0xe000e110
    3c50:	.word	0x007f7fff
    3c54:	.word	0xe000e190

00003c58 <SPIClass::setMOSI(unsigned char)>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    3c58:	ldr	r2, [r0, #4]
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    3c5a:	ldrb	r3, [r0, #17]
    3c5c:	add	r3, r2
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    3c5e:	push	{r4, r5, r6, r7, lr}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    3c60:	ldrb.w	r3, [r3, #36]	; 0x24
    3c64:	cmp	r3, r1
    3c66:	beq.n	3c78 <SPIClass::setMOSI(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    3c68:	ldrb.w	r3, [r2, #36]	; 0x24
    3c6c:	cmp	r1, r3
    3c6e:	beq.n	3c7a <SPIClass::setMOSI(unsigned char)+0x22>
    3c70:	ldrb.w	r3, [r2, #37]	; 0x25
    3c74:	cmp	r1, r3
    3c76:	beq.n	3cb8 <SPIClass::setMOSI(unsigned char)+0x60>
    3c78:	pop	{r4, r5, r6, r7, pc}
    3c7a:	movs	r4, #0
    3c7c:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3c7e:	ldr	r6, [r2, #0]
    3c80:	ldr	r5, [r2, #4]
    3c82:	ldr	r6, [r6, #0]
    3c84:	tst	r6, r5
    3c86:	beq.n	3cb4 <SPIClass::setMOSI(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    3c88:	ldr	r5, [pc, #52]	; (3cc0 <SPIClass::setMOSI(unsigned char)+0x68>)
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    3c8a:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    3c8c:	mov.w	lr, #184	; 0xb8
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    3c90:	ldr	r7, [r2, #52]	; 0x34
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    3c92:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    3c96:	adds	r1, #10
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    3c98:	ldr	r3, [r3, #8]
    3c9a:	str.w	lr, [r3]
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    3c9e:	ldrb.w	r3, [r6, #36]	; 0x24
    3ca2:	ldr.w	r2, [r2, r1, lsl #2]
    3ca6:	add.w	r5, r5, r3, lsl #4
    3caa:	ldr	r3, [r5, #4]
    3cac:	str	r2, [r3, #0]
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    3cae:	ldrb.w	r3, [r6, #48]	; 0x30
    3cb2:	str	r3, [r7, #0]
				}	
				mosi_pin_index = i;
    3cb4:	strb	r4, [r0, #17]
				return;
    3cb6:	b.n	3c78 <SPIClass::setMOSI(unsigned char)+0x20>

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    3cb8:	movs	r4, #1
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    3cba:	mov	r1, r4
    3cbc:	b.n	3c7e <SPIClass::setMOSI(unsigned char)+0x26>
    3cbe:	nop
    3cc0:	.word	0x20000500

00003cc4 <SPIClass::setMISO(unsigned char)>:
    3cc4:	ldr	r2, [r0, #4]
	}
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
    3cc6:	ldrb	r3, [r0, #16]
    3cc8:	add	r3, r2
		}
	}
}

void SPIClass::setMISO(uint8_t pin)
{
    3cca:	push	{r4, r5, r6, r7}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    3ccc:	ldrb	r3, [r3, #16]
    3cce:	cmp	r3, r1
    3cd0:	beq.n	3cde <SPIClass::setMISO(unsigned char)+0x1a>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    3cd2:	ldrb	r3, [r2, #16]
    3cd4:	cmp	r1, r3
    3cd6:	beq.n	3ce2 <SPIClass::setMISO(unsigned char)+0x1e>
    3cd8:	ldrb	r3, [r2, #17]
    3cda:	cmp	r1, r3
    3cdc:	beq.n	3d1a <SPIClass::setMISO(unsigned char)+0x56>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    3cde:	pop	{r4, r5, r6, r7}
    3ce0:	bx	lr

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    3ce2:	movs	r4, #0
    3ce4:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3ce6:	ldr	r6, [r2, #0]
    3ce8:	ldr	r5, [r2, #4]
    3cea:	ldr	r6, [r6, #0]
    3cec:	tst	r6, r5
    3cee:	beq.n	3d16 <SPIClass::setMISO(unsigned char)+0x52>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    3cf0:	ldr	r5, [pc, #44]	; (3d20 <SPIClass::setMISO(unsigned char)+0x5c>)
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    3cf2:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    3cf4:	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    3cf6:	adds	r1, #4
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    3cf8:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    3cfc:	add.w	r1, r2, r1, lsl #2
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    3d00:	ldr	r2, [r2, #32]
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    3d02:	ldr	r3, [r3, #8]
    3d04:	str	r7, [r3, #0]
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    3d06:	ldrb	r3, [r6, #16]
    3d08:	ldr	r1, [r1, #4]
    3d0a:	add.w	r5, r5, r3, lsl #4
    3d0e:	ldr	r3, [r5, #4]
    3d10:	str	r1, [r3, #0]
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    3d12:	ldrb	r3, [r6, #28]
    3d14:	str	r3, [r2, #0]
				}	
				miso_pin_index = i;
    3d16:	strb	r4, [r0, #16]
				return;
    3d18:	b.n	3cde <SPIClass::setMISO(unsigned char)+0x1a>

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    3d1a:	movs	r4, #1
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    3d1c:	mov	r1, r4
    3d1e:	b.n	3ce6 <SPIClass::setMISO(unsigned char)+0x22>
    3d20:	.word	0x20000500

00003d24 <SPIClass::setSCK(unsigned char)>:
    3d24:	ldr	r2, [r0, #4]
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
    3d26:	ldrb	r3, [r0, #18]
    3d28:	add	r3, r2
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    3d2a:	push	{r4, r5, r6, r7}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    3d2c:	ldrb.w	r3, [r3, #56]	; 0x38
    3d30:	cmp	r3, r1
    3d32:	beq.n	3d44 <SPIClass::setSCK(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    3d34:	ldrb.w	r3, [r2, #56]	; 0x38
    3d38:	cmp	r1, r3
    3d3a:	beq.n	3d48 <SPIClass::setSCK(unsigned char)+0x24>
    3d3c:	ldrb.w	r3, [r2, #57]	; 0x39
    3d40:	cmp	r1, r3
    3d42:	beq.n	3d84 <SPIClass::setSCK(unsigned char)+0x60>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    3d44:	pop	{r4, r5, r6, r7}
    3d46:	bx	lr

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    3d48:	movs	r4, #0
    3d4a:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3d4c:	ldr	r6, [r2, #0]
    3d4e:	ldr	r5, [r2, #4]
    3d50:	ldr	r6, [r6, #0]
    3d52:	tst	r6, r5
    3d54:	beq.n	3d80 <SPIClass::setSCK(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    3d56:	ldr	r5, [pc, #52]	; (3d8c <SPIClass::setSCK(unsigned char)+0x68>)
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    3d58:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    3d5a:	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    3d5c:	adds	r1, #14
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    3d5e:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    3d62:	add.w	r1, r2, r1, lsl #2
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    3d66:	ldr	r2, [r2, #72]	; 0x48
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    3d68:	ldr	r3, [r3, #8]
    3d6a:	str	r7, [r3, #0]
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    3d6c:	ldrb.w	r3, [r6, #56]	; 0x38
    3d70:	ldr	r1, [r1, #4]
    3d72:	add.w	r5, r5, r3, lsl #4
    3d76:	ldr	r3, [r5, #4]
    3d78:	str	r1, [r3, #0]
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    3d7a:	ldrb.w	r3, [r6, #68]	; 0x44
    3d7e:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    3d80:	strb	r4, [r0, #18]
				return;
    3d82:	b.n	3d44 <SPIClass::setSCK(unsigned char)+0x20>

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    3d84:	movs	r4, #1
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    3d86:	mov	r1, r4
    3d88:	b.n	3d4c <SPIClass::setSCK(unsigned char)+0x28>
    3d8a:	nop
    3d8c:	.word	0x20000500

00003d90 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    3d90:	cbz	r3, 3d96 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3d92:	b.w	38fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    3d96:	bx	lr

00003d98 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    3d98:	bx	lr
    3d9a:	nop

00003d9c <_GLOBAL__sub_I_SD>:
#include <Arduino.h>
#include <SD.h>

SDClass SD;
    3d9c:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    3d9e:	ldr	r3, [pc, #64]	; (3de0 <_GLOBAL__sub_I_SD+0x44>)
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    3da0:	movs	r4, #0
    3da2:	ldr	r7, [pc, #64]	; (3de4 <_GLOBAL__sub_I_SD+0x48>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3da4:	movs	r6, #7
    3da6:	movs	r5, #40	; 0x28
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    3da8:	ldr	r2, [pc, #60]	; (3de8 <_GLOBAL__sub_I_SD+0x4c>)
    3daa:	ldr	r1, [pc, #64]	; (3dec <_GLOBAL__sub_I_SD+0x50>)
    3dac:	mov	r0, r3
    3dae:	str	r7, [r3, #0]
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    3db0:	ldr	r7, [pc, #60]	; (3df0 <_GLOBAL__sub_I_SD+0x54>)
    3db2:	str.w	r2, [r3, #1164]	; 0x48c
    3db6:	str.w	r1, [r3, #1176]	; 0x498
    3dba:	str.w	r7, [r3, #1184]	; 0x4a0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3dbe:	str.w	r6, [r3, #1188]	; 0x4a4
    3dc2:	strb.w	r5, [r3, #1199]	; 0x4af
    3dc6:	str.w	r4, [r3, #1148]	; 0x47c
    3dca:	str.w	r4, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    3dce:	strb.w	r4, [r3, #1172]	; 0x494
    3dd2:	strb.w	r4, [r3, #1202]	; 0x4b2
    3dd6:	ldr	r2, [pc, #28]	; (3df4 <_GLOBAL__sub_I_SD+0x58>)
    3dd8:	ldr	r1, [pc, #28]	; (3df8 <_GLOBAL__sub_I_SD+0x5c>)
    3dda:	pop	{r4, r5, r6, r7}
    3ddc:	b.w	bb10 <__aeabi_atexit>
    3de0:	.word	0x20005bc8
    3de4:	.word	0x2000012c
    3de8:	.word	0x200004b0
    3dec:	.word	0x20000458
    3df0:	.word	0x003d0900
    3df4:	.word	0x20000ba0
    3df8:	.word	0x00003d99

00003dfc <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    3dfc:	push	{r3, r4, r5, lr}
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3dfe:	movs	r1, #10
    3e00:	mov	r5, r0
    3e02:	ldr	r0, [pc, #40]	; (3e2c <dbgPrint(unsigned short)+0x30>)
    3e04:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3e08:	ldr	r4, [pc, #36]	; (3e30 <dbgPrint(unsigned short)+0x34>)
    3e0a:	movs	r1, #13
    3e0c:	ldr	r0, [pc, #36]	; (3e34 <dbgPrint(unsigned short)+0x38>)
    3e0e:	bl	a3cc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3e12:	movs	r0, #46	; 0x2e
    3e14:	bl	a3a0 <usb_serial_putchar>
    3e18:	mov	r1, r5
    3e1a:	mov	r0, r4
    3e1c:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3e20:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    3e22:	ldmia.w	sp!, {r3, r4, r5, lr}
    3e26:	b.w	b6f8 <Print::println()>
    3e2a:	nop
    3e2c:	.word	0x2000034c
    3e30:	.word	0x20000c48
    3e34:	.word	0x20000358

00003e38 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3e38:	push	{r4, lr}
    3e3a:	mov	r4, r0
  bool rtn = sync();
    3e3c:	bl	53fc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3e40:	movs	r3, #0
    3e42:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3e46:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3e4a:	pop	{r4, pc}

00003e4c <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3e4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3e50:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3e54:	sub	sp, #20
    3e56:	mov	r9, r0
    3e58:	mov	r8, r1
    3e5a:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3e5c:	add	r6, sp, #4
  size_t n = 0;
  if (!isOpen()) {
    3e5e:	ldrb.w	r4, [r0, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3e62:	ldmia.w	r3, {r0, r1, r2}
    3e66:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    3e6a:	cmp	r4, #0
    3e6c:	beq.n	3ee4 <ExFatFile::getName(char*, unsigned int)+0x98>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3e6e:	ldrb.w	r3, [r9, #48]	; 0x30
    3e72:	cmp	r3, #1
    3e74:	bls.n	3f08 <ExFatFile::getName(char*, unsigned int)+0xbc>
    3e76:	movs	r7, #1
    3e78:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    3e7a:	cmp	r7, #1
    3e7c:	mov	r1, r6
    3e7e:	ldr.w	r0, [r9, #32]
    3e82:	ite	eq
    3e84:	moveq	r2, #64	; 0x40
    3e86:	movne	r2, #32
    3e88:	bl	4d60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3e8c:	cmp	r0, #1
    3e8e:	bne.n	3f00 <ExFatFile::getName(char*, unsigned int)+0xb4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    3e90:	movs	r2, #0
    3e92:	mov	r1, r6
    3e94:	ldr.w	r0, [r9, #32]
    3e98:	bl	4cdc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3e9c:	cbz	r0, 3ef8 <ExFatFile::getName(char*, unsigned int)+0xac>
    3e9e:	ldrb	r3, [r0, #0]
    3ea0:	cmp	r3, #193	; 0xc1
    3ea2:	bne.n	3ef8 <ExFatFile::getName(char*, unsigned int)+0xac>
    3ea4:	add.w	r1, r8, r4
    3ea8:	mov	r2, r4
    3eaa:	add.w	lr, r0, #30
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    3eae:	adds	r4, #1
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3eb0:	movs	r3, #63	; 0x3f
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    3eb2:	cmp	r4, r5
    3eb4:	bcs.n	3ed6 <ExFatFile::getName(char*, unsigned int)+0x8a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3eb6:	ldrh.w	r2, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3eba:	cmp	r2, #126	; 0x7e
    3ebc:	it	ls
    3ebe:	uxtbls	r3, r2
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3ec0:	cmp	r0, lr
    3ec2:	mov	r2, r4
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3ec4:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3ec8:	bne.n	3eae <ExFatFile::getName(char*, unsigned int)+0x62>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3eca:	adds	r7, #1
    3ecc:	ldrb.w	r3, [r9, #48]	; 0x30
    3ed0:	uxtb	r7, r7
    3ed2:	cmp	r3, r7
    3ed4:	bhi.n	3e7a <ExFatFile::getName(char*, unsigned int)+0x2e>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3ed6:	movs	r3, #0
  return n;
    3ed8:	mov	r0, r2
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3eda:	strb.w	r3, [r8, r2]
  return n;

 fail:
  *name = 0;
  return 0;
}
    3ede:	add	sp, #20
    3ee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
    3ee4:	movs	r0, #81	; 0x51
    3ee6:	bl	3dfc <dbgPrint(unsigned short)>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3eea:	movs	r3, #0
  return 0;
    3eec:	mov	r0, r3
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3eee:	strb.w	r3, [r8]
  return 0;
}
    3ef2:	add	sp, #20
    3ef4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
    3ef8:	movs	r0, #92	; 0x5c
    3efa:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    3efe:	b.n	3eea <ExFatFile::getName(char*, unsigned int)+0x9e>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
      DBG_FAIL_MACRO;
    3f00:	movs	r0, #86	; 0x56
    3f02:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    3f06:	b.n	3eea <ExFatFile::getName(char*, unsigned int)+0x9e>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3f08:	movs	r2, #0
    3f0a:	b.n	3ed6 <ExFatFile::getName(char*, unsigned int)+0x8a>

00003f0c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3f0c:	push	{r3, r4, r5, lr}
    3f0e:	mov	r5, r1
  if (isOpen()) {
    3f10:	ldrb.w	r1, [r0, #49]	; 0x31
    3f14:	cbnz	r1, 3f30 <ExFatFile::openRoot(ExFatVolume*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3f16:	movs	r2, #56	; 0x38
    3f18:	mov	r4, r0
    3f1a:	bl	cf4c <memset>
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3f1e:	movs	r3, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3f20:	movs	r2, #64	; 0x40
  m_vol = vol;
    3f22:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3f24:	mov	r0, r3
    3f26:	strb.w	r3, [r4, #51]	; 0x33
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3f2a:	strb.w	r2, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    3f2e:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    3f30:	mov.w	r0, #444	; 0x1bc
    3f34:	bl	3dfc <dbgPrint(unsigned short)>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3f38:	movs	r0, #0
    3f3a:	pop	{r3, r4, r5, pc}

00003f3c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3f3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    3f40:	ldrb	r0, [r1, #0]
    3f42:	cmp	r0, #32
    3f44:	bne.n	3f4e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    3f46:	ldrb.w	r0, [r1, #1]!
    3f4a:	cmp	r0, #32
    3f4c:	beq.n	3f46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    3f4e:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    3f50:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    3f52:	cmp	r0, #47	; 0x2f
    3f54:	beq.n	4020 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
    3f56:	cmp	r0, #0
    3f58:	beq.n	4020 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3f5a:	cmp	r0, #92	; 0x5c
    3f5c:	beq.n	3faa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    3f5e:	sub.w	r4, r0, #34	; 0x22
    3f62:	uxtb	r4, r4
    3f64:	cmp	r4, #26
    3f66:	bls.n	3fb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    3f68:	adds	r5, r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3f6a:	movs	r6, #0
    3f6c:	ldr.w	lr, [pc, #196]	; 4034 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>
    3f70:	b.n	3f7a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    3f72:	cmp	r4, #26
    3f74:	lsr.w	r7, lr, r4
    3f78:	bls.n	3fc0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x84>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3f7a:	sub.w	r4, r0, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3f7e:	adds	r6, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3f80:	sub.w	ip, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3f84:	mov	r8, r5
    3f86:	cmp	r4, #1
    3f88:	mov	r7, r6
    3f8a:	bls.n	3faa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    3f8c:	cmp	r0, #124	; 0x7c
    3f8e:	beq.n	3faa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3f90:	cmp.w	ip, #94	; 0x5e
    3f94:	bhi.n	3faa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3f96:	ldrb.w	r0, [r5], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3f9a:	sub.w	r4, r0, #34	; 0x22
    if (c == 0 || isDirSeparator(c)) {
    3f9e:	cbz	r0, 3fca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    3fa0:	cmp	r0, #47	; 0x2f
    3fa2:	uxtb	r4, r4
    3fa4:	beq.n	3fca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    3fa6:	cmp	r0, #92	; 0x5c
    3fa8:	bne.n	3f72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3faa:	movs	r0, #0
    3fac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fb0:	ldr	r5, [pc, #128]	; (4034 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>)
    3fb2:	lsr.w	r4, r5, r4
    3fb6:	lsls	r5, r4, #31
    3fb8:	bpl.n	3f68 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2c>
    3fba:	movs	r0, #0
    3fbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fc0:	lsls	r4, r7, #31
    3fc2:	bpl.n	3f7a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    3fc4:	movs	r0, #0
    3fc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3fca:	cmp	r0, #47	; 0x2f
    3fcc:	beq.n	3fd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    3fce:	cmp	r0, #32
    3fd0:	bne.n	401a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xde>
    3fd2:	adds	r0, r6, #1
    3fd4:	add	r0, r1
    3fd6:	mov	r5, r0
    3fd8:	ldrb.w	r4, [r0], #1
    3fdc:	cmp	r4, #32
    3fde:	beq.n	3fd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
    3fe0:	cmp	r4, #47	; 0x2f
    3fe2:	beq.n	3fd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
  *ptr = &path[end];
    3fe4:	str	r5, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    3fe6:	cbz	r6, 4010 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd4>
    c = path[len - 1];
    3fe8:	add	r7, r1
    3fea:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    3fee:	cmp	r3, #32
    3ff0:	beq.n	3ff6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xba>
    3ff2:	cmp	r3, #46	; 0x2e
    3ff4:	bne.n	400c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd0>
    3ff6:	subs	r3, r6, #1
    3ff8:	add	r1, r3
      break;
    }
    len--;
    3ffa:	mov	r6, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3ffc:	cbz	r3, 4012 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    c = path[len - 1];
    3ffe:	ldrb.w	r0, [r1, #-1]!
    4002:	subs	r3, #1
    if (c != '.' && c != ' ') {
    4004:	cmp	r0, #46	; 0x2e
    4006:	beq.n	3ffa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
    4008:	cmp	r0, #32
    400a:	beq.n	3ffa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    400c:	cmp	r6, #255	; 0xff
    400e:	bgt.n	3faa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    4010:	mov	r3, r6
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    4012:	str	r3, [r2, #0]
  return true;
    4014:	movs	r0, #1
    4016:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    401a:	str.w	r8, [r3]
    401e:	b.n	3fe8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xac>
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    4020:	cmp	r0, #32
    4022:	beq.n	4028 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xec>
    4024:	cmp	r0, #47	; 0x2f
    4026:	bne.n	402e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf2>
    4028:	movs	r7, #0
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    402a:	mov	r6, r7
    402c:	b.n	3fd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    402e:	str	r1, [r3, #0]
    4030:	movs	r3, #0
    4032:	b.n	4012 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    4034:	.word	0x05000101

00004038 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4038:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    403c:	ldrb.w	r3, [r0, #51]	; 0x33
    4040:	sub	sp, #12
    4042:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4044:	lsls	r5, r3, #31
    4046:	bpl.w	421c <ExFatFile::read(void*, unsigned int)+0x1e4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    404a:	lsls	r0, r3, #25
    404c:	mov	r5, r1
    404e:	mov	r6, r2
    4050:	bpl.w	41a4 <ExFatFile::read(void*, unsigned int)+0x16c>
    if ((m_curPosition + count) > m_validLength) {
    4054:	ldrd	r0, r1, [r4]
    4058:	ldrd	r2, r3, [r4, #16]
    405c:	adds.w	r8, r0, r6
    4060:	adc.w	r9, r1, #0
    4064:	cmp	r3, r9
    4066:	it	eq
    4068:	cmpeq	r2, r8
    406a:	bcc.w	41b0 <ExFatFile::read(void*, unsigned int)+0x178>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    406e:	cmp	r6, #0
    4070:	beq.w	41b4 <ExFatFile::read(void*, unsigned int)+0x17c>
    4074:	mov	sl, r4
    4076:	mov	r8, r6
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    4078:	movw	r9, #511	; 0x1ff
    407c:	ldrd	r2, r3, [sl], #24
    4080:	b.n	4126 <ExFatFile::read(void*, unsigned int)+0xee>
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    4082:	orrs	r3, r2
    4084:	bne.n	4166 <ExFatFile::read(void*, unsigned int)+0x12e>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4086:	ldrb.w	r3, [r4, #49]	; 0x31
    408a:	lsls	r2, r3, #25
    408c:	ite	mi
    408e:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    4092:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    4094:	str	r1, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4096:	subs	r1, #2
    4098:	lsrs	r7, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    409a:	ldrb.w	ip, [r0, #1085]	; 0x43d
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    409e:	cmp	r8, r9
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    40a0:	ldr.w	r2, [r0, #1060]	; 0x424
    40a4:	lsl.w	lr, r1, ip
    40a8:	add.w	r1, r7, r2
    40ac:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    40ae:	bls.n	413a <ExFatFile::read(void*, unsigned int)+0x102>
    40b0:	cmp.w	fp, #0
    40b4:	bne.n	413a <ExFatFile::read(void*, unsigned int)+0x102>
    40b6:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    40ba:	cmp	r1, r2
    40bc:	beq.n	413a <ExFatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    40be:	cmp.w	r8, #1024	; 0x400
    40c2:	bcc.n	4174 <ExFatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    40c4:	mov.w	lr, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    40c8:	mov.w	r3, r8, lsr #9
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    40cc:	lsl.w	ip, lr, ip
    40d0:	rsb	lr, r7, ip
    40d4:	mov	r7, r3
    40d6:	cmp	r3, lr
    40d8:	it	cs
    40da:	movcs	r7, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    40dc:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    40de:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    40e2:	bhi.n	40fc <ExFatFile::read(void*, unsigned int)+0xc4>
    40e4:	adds	r3, r1, r7
    40e6:	cmp	r3, r2
    40e8:	bls.n	40fc <ExFatFile::read(void*, unsigned int)+0xc4>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    40ea:	add.w	r0, r0, #524	; 0x20c
    40ee:	str	r1, [sp, #4]
    40f0:	bl	4a18 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    40f4:	cmp	r0, #0
    40f6:	beq.n	41ea <ExFatFile::read(void*, unsigned int)+0x1b2>
    40f8:	ldr	r0, [r4, #32]
    40fa:	ldr	r1, [sp, #4]
    40fc:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    4100:	mov	r3, r7
    4102:	mov	r2, r5
    4104:	ldr	r7, [r0, #0]
    4106:	ldr	r7, [r7, #12]
    4108:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    410a:	cmp	r0, #0
    410c:	beq.n	41e0 <ExFatFile::read(void*, unsigned int)+0x1a8>
    410e:	mov	r0, fp
    4110:	movs	r1, #0
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    4112:	add	r5, fp
    m_curPosition += n;
    4114:	ldrd	r2, r3, [r4]
    4118:	adds	r2, r2, r0
    411a:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    411c:	subs.w	r8, r8, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    4120:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4124:	beq.n	41b4 <ExFatFile::read(void*, unsigned int)+0x17c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4126:	ldr	r0, [r4, #32]
    4128:	ldr.w	r7, [r0, #1072]	; 0x430
    412c:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    412e:	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
    4132:	cmp	r7, #0
    4134:	beq.n	4082 <ExFatFile::read(void*, unsigned int)+0x4a>
    4136:	ldr	r1, [r4, #24]
    4138:	b.n	4096 <ExFatFile::read(void*, unsigned int)+0x5e>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    413a:	add.w	r0, r0, #524	; 0x20c
    413e:	movs	r2, #0
    4140:	bl	498c <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    4144:	cmp	r0, #0
    4146:	beq.n	41c2 <ExFatFile::read(void*, unsigned int)+0x18a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    4148:	rsb	r3, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    414c:	add.w	r1, r0, fp
    4150:	mov	r0, r5
    4152:	cmp	r3, r8
    4154:	it	cs
    4156:	movcs	r3, r8
    4158:	mov	fp, r3
    415a:	mov	r2, r3
    415c:	bl	9c5c <memcpy>
    4160:	movs	r1, #0
    4162:	mov	r0, fp
    4164:	b.n	4112 <ExFatFile::read(void*, unsigned int)+0xda>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    4166:	ldrb.w	r3, [r4, #51]	; 0x33
    416a:	lsls	r3, r3, #25
    416c:	bpl.n	418e <ExFatFile::read(void*, unsigned int)+0x156>
        m_curCluster++;
    416e:	ldr	r1, [r4, #24]
    4170:	adds	r1, #1
    4172:	b.n	4094 <ExFatFile::read(void*, unsigned int)+0x5c>
    4174:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    4178:	mov	r2, r5
    417a:	ldr	r3, [r0, #0]
    417c:	ldr	r3, [r3, #8]
    417e:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    4180:	cbz	r0, 41f4 <ExFatFile::read(void*, unsigned int)+0x1bc>
    4182:	mov.w	r0, #512	; 0x200
    4186:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4188:	mov.w	fp, #512	; 0x200
    418c:	b.n	4112 <ExFatFile::read(void*, unsigned int)+0xda>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    418e:	mov	r2, sl
    4190:	ldr	r1, [r4, #24]
    4192:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4196:	sxtb	r0, r0
        if (fg < 0) {
    4198:	cmp	r0, #0
    419a:	blt.n	41fe <ExFatFile::read(void*, unsigned int)+0x1c6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    419c:	beq.n	4208 <ExFatFile::read(void*, unsigned int)+0x1d0>
    419e:	ldr	r0, [r4, #32]
    41a0:	ldr	r1, [r4, #24]
    41a2:	b.n	4096 <ExFatFile::read(void*, unsigned int)+0x5e>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    41a4:	ldrb.w	r3, [r4, #49]	; 0x31
    41a8:	lsls	r1, r3, #28
    41aa:	bmi.w	4054 <ExFatFile::read(void*, unsigned int)+0x1c>
    41ae:	b.n	406e <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    41b0:	subs	r6, r2, r0
    41b2:	b.n	406e <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    41b4:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    41b8:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    41bc:	add	sp, #12
    41be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
        DBG_FAIL_MACRO;
    41c2:	movw	r0, #599	; 0x257
    41c6:	bl	3dfc <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    41ca:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    41ce:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    41d2:	orr.w	r3, r3, #2
    41d6:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    41da:	add	sp, #12
    41dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    41e0:	mov.w	r0, #624	; 0x270
    41e4:	bl	3dfc <dbgPrint(unsigned short)>
        goto fail;
    41e8:	b.n	41ca <ExFatFile::read(void*, unsigned int)+0x192>
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
          DBG_FAIL_MACRO;
    41ea:	movw	r0, #619	; 0x26b
    41ee:	bl	3dfc <dbgPrint(unsigned short)>
          goto fail;
    41f2:	b.n	41ca <ExFatFile::read(void*, unsigned int)+0x192>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    41f4:	mov.w	r0, #632	; 0x278
    41f8:	bl	3dfc <dbgPrint(unsigned short)>
        goto fail;
    41fc:	b.n	41ca <ExFatFile::read(void*, unsigned int)+0x192>
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
        if (fg < 0) {
          DBG_FAIL_MACRO;
    41fe:	movw	r0, #575	; 0x23f
    4202:	bl	3dfc <dbgPrint(unsigned short)>
          goto fail;
    4206:	b.n	41ca <ExFatFile::read(void*, unsigned int)+0x192>
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    4208:	ldrb.w	r3, [r4, #49]	; 0x31
    420c:	tst.w	r3, #80	; 0x50
    4210:	bne.n	41b8 <ExFatFile::read(void*, unsigned int)+0x180>
            break;
          }
          DBG_FAIL_MACRO;
    4212:	movw	r0, #583	; 0x247
    4216:	bl	3dfc <dbgPrint(unsigned short)>
          goto fail;
    421a:	b.n	41ca <ExFatFile::read(void*, unsigned int)+0x192>
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    421c:	movw	r0, #555	; 0x22b
    4220:	bl	3dfc <dbgPrint(unsigned short)>
    goto fail;
    4224:	b.n	41ca <ExFatFile::read(void*, unsigned int)+0x192>
    4226:	nop

00004228 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    4228:	push	{r4, r5, r6, r7, lr}
    422a:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    422c:	movs	r2, #1
    422e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
    4230:	ldr	r5, [r0, #24]
    4232:	add.w	r1, sp, #7
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
    4236:	ldrd	r6, r7, [r0]
    423a:	bl	4038 <ExFatFile::read(void*, unsigned int)>
    423e:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    4240:	str	r5, [r4, #24]
    4242:	ite	eq
    4244:	ldrbeq.w	r0, [sp, #7]
    4248:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    424c:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    4250:	add	sp, #12
    4252:	pop	{r4, r5, r6, r7, pc}

00004254 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4254:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4258:	ldrb.w	ip, [r0, #49]	; 0x31
    425c:	sub	sp, #20
    425e:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4260:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    4262:	cmp.w	ip, #0
    4266:	beq.n	433a <ExFatFile::seekSet(unsigned long long)+0xe6>
    4268:	mov	r6, r2
    426a:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    426c:	ldrd	r0, r1, [r0]
    4270:	cmp	r1, r3
    4272:	it	eq
    4274:	cmpeq	r0, r2
    4276:	beq.n	4354 <ExFatFile::seekSet(unsigned long long)+0x100>
    return true;
  }
  if (pos == 0) {
    4278:	orrs.w	r3, r6, r7
    427c:	bne.n	428e <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    427e:	movs	r3, #0
    4280:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    4282:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    4284:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    4288:	add	sp, #20
    428a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    428e:	tst.w	ip, #8
    4292:	beq.n	42a0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    if (pos > m_validLength) {
    4294:	ldrd	r2, r3, [r4, #16]
    4298:	cmp	r3, r7
    429a:	it	eq
    429c:	cmpeq	r2, r6
    429e:	bcc.n	4370 <ExFatFile::seekSet(unsigned long long)+0x11c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42a0:	ldr	r3, [r4, #32]
    42a2:	adds.w	r8, r6, #4294967295
    42a6:	ldrb.w	lr, [r3, #1085]	; 0x43d
    42aa:	adc.w	r9, r7, #4294967295
    42ae:	mov	sl, r8
    42b0:	str	r3, [sp, #12]
    42b2:	add.w	lr, lr, #9
    42b6:	mov	fp, r9
  if (isContiguous()) {
    42b8:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42bc:	uxtb.w	lr, lr
  if (isContiguous()) {
    42c0:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42c4:	rsb	r8, lr, #32
    42c8:	lsr.w	r2, sl, lr
    42cc:	strd	sl, fp, [sp]
    42d0:	ldr	r3, [sp, #4]
    42d2:	sub.w	sl, lr, #32
    42d6:	lsl.w	fp, r3, r8
    42da:	lsr.w	r3, r3, sl
    42de:	orr.w	r2, r2, fp
    42e2:	orr.w	fp, r2, r3
  if (isContiguous()) {
    42e6:	bne.n	434c <ExFatFile::seekSet(unsigned long long)+0xf8>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    42e8:	adds.w	r2, r0, #4294967295
    42ec:	adc.w	r3, r1, #4294967295
    42f0:	lsr.w	lr, r2, lr
    42f4:	lsl.w	r8, r3, r8
    42f8:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    42fc:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4300:	orr.w	lr, lr, r8
    4304:	orr.w	lr, lr, sl
  if (nNew < nCur || m_curPosition == 0) {
    4308:	beq.n	435c <ExFatFile::seekSet(unsigned long long)+0x108>
    430a:	cmp	fp, lr
    430c:	bcc.n	435c <ExFatFile::seekSet(unsigned long long)+0x108>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    430e:	rsb	fp, lr, fp
    4312:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4314:	add.w	r8, r4, #24
    4318:	mov	r5, fp
    431a:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    431c:	cmp	r5, #0
    431e:	beq.n	4282 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4320:	ldr	r1, [r4, #24]
    4322:	subs	r5, #1
    4324:	ldr	r0, [r4, #32]
    4326:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    432a:	cmp	r0, #0
    432c:	bne.n	431a <ExFatFile::seekSet(unsigned long long)+0xc6>
      DBG_FAIL_MACRO;
    432e:	mov.w	r0, #700	; 0x2bc
    4332:	mov	r5, r9
    4334:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    4338:	b.n	4342 <ExFatFile::seekSet(unsigned long long)+0xee>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    433a:	movw	r0, #665	; 0x299
    433e:	bl	3dfc <dbgPrint(unsigned short)>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    4342:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    4344:	str	r5, [r4, #24]
  return false;
}
    4346:	add	sp, #20
    4348:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    434c:	ldr	r3, [r4, #28]
    434e:	add	r3, fp
    4350:	str	r3, [r4, #24]
    goto done;
    4352:	b.n	4282 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    4354:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    4356:	add	sp, #20
    4358:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    435c:	tst.w	ip, #64	; 0x40
    4360:	bne.n	4368 <ExFatFile::seekSet(unsigned long long)+0x114>
    4362:	ldr	r3, [r4, #28]
    4364:	str	r3, [r4, #24]
    4366:	b.n	4312 <ExFatFile::seekSet(unsigned long long)+0xbe>
    4368:	ldr	r3, [sp, #12]
    436a:	ldr.w	r3, [r3, #1068]	; 0x42c
    436e:	b.n	4364 <ExFatFile::seekSet(unsigned long long)+0x110>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
      DBG_FAIL_MACRO;
    4370:	movw	r0, #679	; 0x2a7
    4374:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    4378:	b.n	4342 <ExFatFile::seekSet(unsigned long long)+0xee>
    437a:	nop

0000437c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    437c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4380:	mov	fp, r3
    4382:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4384:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4388:	mov	r6, r0
    438a:	str	r2, [sp, #0]
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    438c:	cbnz	r3, 439a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    438e:	ldrb.w	r3, [r1, #49]	; 0x31
    4392:	mov	r5, r1
    4394:	tst.w	r3, #80	; 0x50
    4398:	bne.n	43b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36>
    DBG_FAIL_MACRO;
    439a:	movs	r0, #206	; 0xce
    439c:	bl	3dfc <dbgPrint(unsigned short)>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    43a0:	movs	r3, #0
  m_flags = 0;
  return false;
    43a2:	mov	r0, r3
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    43a4:	strb.w	r3, [r6, #49]	; 0x31
  m_flags = 0;
    43a8:	strb.w	r3, [r6, #51]	; 0x33
  return false;
}
    43ac:	add	sp, #76	; 0x4c
    43ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    43b2:	ldr	r3, [sp, #112]	; 0x70
    43b4:	and.w	r3, r3, #3
    43b8:	cmp	r3, #1
    43ba:	beq.w	45da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25e>
    43be:	cmp	r3, #2
    43c0:	beq.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    43c2:	cmp	r3, #0
    43c4:	beq.w	45d6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;
    default:
      DBG_FAIL_MACRO;
    43c8:	movs	r0, #220	; 0xdc
    43ca:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    43ce:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    43d0:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    43d2:	ldr	r2, [sp, #112]	; 0x70
    43d4:	and.w	r2, r2, #8
    43d8:	orrs	r3, r2
    43da:	str	r3, [sp, #4]
  if (name) {
    43dc:	ldr	r3, [sp, #0]
    43de:	cmp	r3, #0
    43e0:	beq.w	45e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x26a>
    nameHash = exFatHashName(name, nameLength, 0);
    43e4:	movs	r2, #0
    43e6:	mov	r0, r3
    43e8:	mov	r1, fp
    43ea:	bl	4f24 <exFatHashName(char const*, unsigned int, unsigned short)>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    43ee:	movs	r2, #0
    43f0:	str	r0, [sp, #8]
    43f2:	movs	r3, #0
    43f4:	mov	r0, r5
    43f6:	bl	4254 <ExFatFile::seekSet(unsigned long long)>
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    43fa:	add.w	r3, fp, #14
    43fe:	ldr	r1, [pc, #708]	; (46c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>)
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    4400:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4404:	smull	r2, r1, r1, r3
    4408:	asrs	r2, r3, #31

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    440a:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    440c:	mov	r7, r9
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    440e:	add	r3, r1
    4410:	rsb	r3, r2, r3, asr #3
    4414:	uxtb	r3, r3
    4416:	add.w	sl, r3, #2
    441a:	str	r3, [sp, #12]
    441c:	uxtb.w	sl, sl

  while (1) {
    n = dir->read(buf, 32);
    4420:	movs	r2, #32
    4422:	add	r1, sp, #40	; 0x28
    4424:	mov	r0, r5
    4426:	bl	4038 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    442a:	cmp	r0, #0
    442c:	beq.n	44ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      goto create;
    }
    if (n != 32) {
    442e:	cmp	r0, #32
    4430:	bne.w	45de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x262>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    4434:	ldrb.w	r3, [sp, #40]	; 0x28
    4438:	lsls	r2, r3, #24
    443a:	bmi.n	450c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x190>
      if (freeCount == 0) {
    443c:	cmp	r4, #0
    443e:	bne.n	4506 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18a>
        freePos.position = dir->curPosition() - 32;
    4440:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    4442:	ldr	r1, [r5, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4444:	subs	r2, #32
        freePos.cluster = dir->curCluster();
    4446:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4448:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    444a:	adds	r4, #1
    444c:	uxtb	r4, r4
      }
      if (!buf[0]) {
    444e:	cbz	r3, 44ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    4450:	cmp	r3, #192	; 0xc0
    4452:	beq.w	457a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    4456:	cmp	r3, #193	; 0xc1
    4458:	beq.n	4522 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a6>
    445a:	cmp	r3, #133	; 0x85
    445c:	bne.n	4420 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    445e:	movs	r2, #56	; 0x38
    4460:	movs	r1, #0
    4462:	mov	r0, r6
    4464:	bl	cf4c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4468:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    446c:	ldrb.w	r2, [sp, #41]	; 0x29
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    4470:	lsls	r0, r3, #27
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4472:	mov	r0, r5
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    4474:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4478:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    447c:	it	pl
    447e:	orrpl.w	r2, r2, #8
    4482:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4486:	ldr	r3, [r5, #0]
    4488:	ldr	r1, [r5, #32]
    448a:	ldr	r2, [r5, #24]
    448c:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    448e:	str	r1, [r6, #32]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4490:	add	r1, sp, #40	; 0x28
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    4492:	str	r2, [r6, #36]	; 0x24
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4494:	movs	r2, #32
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4496:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    4498:	ldrb.w	r3, [r5, #51]	; 0x33
    449c:	ubfx	r3, r3, #6, #1
    44a0:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    44a4:	bl	4038 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    44a8:	cmp	r0, #0
    44aa:	bne.n	442e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    44ac:	ldr	r3, [sp, #112]	; 0x70
    44ae:	lsls	r1, r3, #22
    44b0:	bpl.w	45cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    44b4:	ldr	r3, [sp, #4]
    44b6:	lsls	r2, r3, #30
    44b8:	bpl.w	45cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    44bc:	ldr	r3, [sp, #0]
    44be:	cmp	r3, #0
    44c0:	beq.w	45cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    44c4:	cmp	r4, sl
    44c6:	bcc.n	44e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x168>
    44c8:	b.n	45f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x27a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    44ca:	cmp	r0, #32
    44cc:	bne.w	46b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x33c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    44d0:	cbnz	r4, 44dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
      freePos.position = dir->curPosition() - 32;
    44d2:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    44d4:	ldr	r1, [r5, #24]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    44d6:	subs	r2, #32
      freePos.cluster = dir->curCluster();
    44d8:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    44da:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    44dc:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    44de:	cmp	sl, r4
    44e0:	bls.w	45f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x27a>
    n = dir->read(buf, 32);
    44e4:	movs	r2, #32
    44e6:	add	r1, sp, #40	; 0x28
    44e8:	mov	r0, r5
    44ea:	bl	4038 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    44ee:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    44f0:	cmp	r0, #0
    44f2:	bne.n	44ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14e>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    44f4:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    44f6:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    44f8:	bl	5464 <ExFatFile::addDirCluster()>
    44fc:	cmp	r0, #0
    44fe:	beq.w	4716 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    4502:	str	r7, [r5, #24]
      continue;
    4504:	b.n	44de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x162>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    4506:	cmp	r4, sl
    4508:	bcs.n	444e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
    450a:	b.n	444a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xce>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    450c:	cmp.w	r9, #0
    4510:	bne.n	4450 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd4>
      if (freeCount < freeNeed) {
        freeCount = 0;
    4512:	cmp	r4, sl
    4514:	it	cc
    4516:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    4518:	cmp	r3, #133	; 0x85
    451a:	bne.n	4420 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    451c:	mov.w	r9, #1
    4520:	b.n	445e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    4522:	rsb	r8, r7, fp
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    4526:	mov	r2, r7
    4528:	ldr	r1, [sp, #0]
    452a:	add	r0, sp, #40	; 0x28
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    452c:	uxtb.w	r8, r8
    4530:	cmp.w	r8, #15
    4534:	it	cs
    4536:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    453a:	mov	r3, r8
    453c:	bl	4f60 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    4540:	cmp	r0, #0
    4542:	beq.n	45ba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    4544:	add	r7, r8
    4546:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4548:	cmp	fp, r7
    454a:	bne.w	4420 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    454e:	ldr	r3, [sp, #112]	; 0x70
    4550:	lsls	r3, r3, #20
    4552:	bmi.n	45ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x270>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4554:	ldr	r3, [sp, #112]	; 0x70
    4556:	tst.w	r3, #17408	; 0x4400
    455a:	bne.w	46c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34c>
    455e:	ldrb.w	r3, [r6, #51]	; 0x33
    4562:	lsls	r7, r3, #30
    4564:	bmi.w	46c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34c>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4568:	ldr	r3, [sp, #112]	; 0x70
    456a:	lsls	r3, r3, #21
    456c:	bpl.w	470c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x390>
    if (!(m_flags & FILE_FLAG_WRITE)) {
      DBG_FAIL_MACRO;
    4570:	mov.w	r0, #334	; 0x14e
    4574:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    4578:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    457a:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    457e:	ldr	r2, [sp, #4]
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4580:	lsls	r1, r3, #30
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4582:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4586:	bpl.n	4590 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    4588:	orr.w	r3, r2, #64	; 0x40
    458c:	strb.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
    4590:	ldr	r1, [sp, #60]	; 0x3c
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4592:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
    4596:	str	r1, [r6, #28]
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4598:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    459c:	ldrd	r0, r1, [sp, #64]	; 0x40
        if (!name) {
    45a0:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    45a2:	strd	r0, r1, [r6, #8]
        if (!name) {
    45a6:	cmp	r3, #0
    45a8:	beq.n	454e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d2>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    45aa:	ldrb.w	r3, [sp, #43]	; 0x2b
    45ae:	cmp	r3, fp
    45b0:	beq.n	45be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    45b2:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    45b6:	mov	r7, r9
    45b8:	b.n	4420 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    45ba:	mov	r9, r0
    45bc:	b.n	4420 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    45be:	ldrh.w	r3, [sp, #44]	; 0x2c
    45c2:	ldr	r2, [sp, #8]
    45c4:	cmp	r3, r2
    45c6:	bne.n	45b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    45c8:	movs	r7, #0
    45ca:	b.n	4420 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    45cc:	movw	r0, #355	; 0x163
    45d0:	bl	3dfc <dbgPrint(unsigned short)>
    goto fail;
    45d4:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    45d6:	movs	r3, #1
    45d8:	b.n	43d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x56>
    45da:	movs	r3, #2
    45dc:	b.n	43d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x56>
    n = dir->read(buf, 32);
    if (n == 0) {
      goto create;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    45de:	movs	r0, #236	; 0xec
    45e0:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    45e4:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    45e6:	ldr	r3, [sp, #0]
    45e8:	str	r3, [sp, #8]
    45ea:	b.n	43fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x7e>
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    45ec:	mov.w	r0, #320	; 0x140
    45f0:	bl	3dfc <dbgPrint(unsigned short)>
    goto fail;
    45f4:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45f6:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    45fa:	movs	r1, #0
    45fc:	movs	r2, #56	; 0x38
    45fe:	mov	r0, r6
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4600:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4604:	mov	r7, r1

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4606:	add.w	r8, sp, #28
    460a:	add.w	r4, r6, #36	; 0x24
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    460e:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    4612:	bl	cf4c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4616:	ldr	r2, [sp, #12]
    4618:	ldr	r3, [r5, #32]
    461a:	add.w	r5, fp, #30
    461e:	add.w	r9, r2, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    4622:	movs	r2, #8
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4624:	str	r3, [r6, #32]
    4626:	uxtb	r5, r5
  m_attributes = FILE_ATTR_FILE;
    4628:	strb.w	r2, [r6, #49]	; 0x31
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    462c:	uxtb.w	r9, r9
    4630:	str.w	fp, [sp, #12]
    4634:	ldr.w	fp, [sp]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4638:	ldmia.w	r8, {r0, r1, r2}
    463c:	stmia.w	r4, {r0, r1, r2}
    4640:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    4642:	movs	r2, #1
    4644:	mov	r1, r8
    4646:	bl	4cdc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    464a:	mov	r4, r0
    464c:	cmp	r0, #0
    464e:	beq.n	4702 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x386>
    4650:	ldrsb.w	r3, [r0]
    4654:	cmp	r3, #0
    4656:	blt.n	4702 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x386>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4658:	movs	r2, #32
    465a:	movs	r1, #0
    465c:	bl	cf4c <memset>
    if (i == 0) {
    4660:	cmp	r7, #0
    4662:	beq.w	4776 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3fa>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    4666:	cmp	r7, #1
    4668:	beq.n	4756 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3da>
    466a:	rsb	r3, r7, r7, lsl #4
    466e:	cmp	r5, #15

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4670:	mov.w	r1, #193	; 0xc1
    4674:	mov	r2, r5
    4676:	sub.w	r3, r3, #30
    467a:	it	cs
    467c:	movcs	r2, #15
    467e:	strb	r1, [r4, #0]
    4680:	uxtb	r3, r3
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4682:	cbz	r2, 469a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31e>
    4684:	adds	r4, #2
    4686:	sxth	r2, r2
    4688:	add	r3, fp
    468a:	add.w	r2, r4, r2, lsl #1
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    468e:	ldrb.w	r1, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4692:	strh.w	r1, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4696:	cmp	r2, r4
    4698:	bne.n	468e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x312>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    469a:	adds	r7, #1
    469c:	uxtb	r7, r7
    469e:	cmp	sl, r7
    46a0:	bls.n	472a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ae>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    46a2:	movs	r2, #32
    46a4:	mov	r1, r8
    46a6:	ldr	r0, [r6, #32]
    46a8:	bl	4d60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    46ac:	cmp	r0, #1
    46ae:	bne.n	4720 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3a4>
    46b0:	subs	r5, #15
    46b2:	ldr	r0, [r6, #32]
    46b4:	uxtb	r5, r5
    46b6:	b.n	4642 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2c6>
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    46b8:	mov.w	r0, #370	; 0x172
    46bc:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    46c0:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    46c2:	nop
    46c4:	.word	0x88888889
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    46c8:	ldrb.w	r3, [r6, #49]	; 0x31
    46cc:	tst.w	r3, #17
    46d0:	bne.n	46f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37c>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    46d2:	ldr	r3, [sp, #112]	; 0x70
    46d4:	lsls	r5, r3, #21
    46d6:	bpl.n	470c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x390>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    46d8:	ldrb.w	r3, [r6, #51]	; 0x33
    46dc:	lsls	r4, r3, #30
    46de:	bpl.w	4570 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f4>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    46e2:	movs	r2, #0
    46e4:	movs	r3, #0
    46e6:	mov	r0, r6
    46e8:	bl	4254 <ExFatFile::seekSet(unsigned long long)>
    46ec:	cbnz	r0, 474a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ce>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
    46ee:	mov.w	r0, #338	; 0x152
    46f2:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    46f6:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
      DBG_FAIL_MACRO;
    46f8:	mov.w	r0, #326	; 0x146
    46fc:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    4700:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    if (!cache || (cache[0] & 0x80)) {
      DBG_FAIL_MACRO;
    4702:	mov.w	r0, #394	; 0x18a
    4706:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    470a:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    470c:	ldr	r3, [sp, #112]	; 0x70
    470e:	lsls	r0, r3, #17
    4710:	bmi.n	4732 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3b6>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    4712:	movs	r0, #1
    4714:	b.n	43ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
        DBG_FAIL_MACRO;
    4716:	movw	r0, #363	; 0x16b
    471a:	bl	3dfc <dbgPrint(unsigned short)>
        goto fail;
    471e:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
    4720:	mov.w	r0, #388	; 0x184
    4724:	bl	3dfc <dbgPrint(unsigned short)>
        goto fail;
    4728:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    472a:	mov	r0, r6
    472c:	bl	53fc <ExFatFile::sync()>
    4730:	b.n	43ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4732:	mov	r0, r6
    4734:	ldrd	r2, r3, [r6, #16]
    4738:	bl	4254 <ExFatFile::seekSet(unsigned long long)>
    473c:	cmp	r0, #0
    473e:	bne.n	4712 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
    DBG_FAIL_MACRO;
    4740:	mov.w	r0, #342	; 0x156
    4744:	bl	3dfc <dbgPrint(unsigned short)>
    goto fail;
    4748:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    474a:	mov	r0, r6
    474c:	bl	57d4 <ExFatFile::truncate()>
    4750:	cmp	r0, #0
    4752:	beq.n	46ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x372>
    4754:	b.n	4712 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4756:	ldr	r3, [sp, #4]
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4758:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    475a:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    475c:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4760:	strb	r1, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4762:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4764:	strb.w	r3, [r6, #51]	; 0x33

      dirStream->nameLength = nameLength;
    4768:	ldrb.w	r3, [sp, #12]
    476c:	strb	r3, [r4, #3]
    476e:	ldrh.w	r3, [sp, #8]
    4772:	strh	r3, [r4, #4]
    4774:	b.n	469a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31e>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    4776:	movs	r3, #133	; 0x85
    4778:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    477a:	ldr	r3, [pc, #48]	; (47ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x430>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    477c:	strb.w	r9, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    4780:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    4784:	ldr	r3, [r3, #0]
    4786:	cmp	r3, #0
    4788:	beq.n	469a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31e>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    478a:	add.w	r2, sp, #23
    478e:	add.w	r1, sp, #26
    4792:	add	r0, sp, #24
    4794:	blx	r3
        dirFile->createTimeMs = ms10;
    4796:	ldrb.w	r1, [sp, #23]
    479a:	ldrh.w	r2, [sp, #26]
    479e:	ldrh.w	r3, [sp, #24]
    47a2:	strb	r1, [r4, #20]
    47a4:	strh	r2, [r4, #8]
    47a6:	strh	r3, [r4, #10]
    47a8:	b.n	469a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31e>
    47aa:	nop
    47ac:	.word	0x2000607c

000047b0 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    47b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    47b4:	mov	r6, r0
    47b6:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    47b8:	movs	r0, #0
    47ba:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    47bc:	ldrb.w	r1, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    47c0:	str	r2, [sp, #12]
    47c2:	strb.w	r0, [sp, #73]	; 0x49
    47c6:	strb.w	r0, [sp, #74]	; 0x4a
    47ca:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    47ce:	cmp	r1, #0
    47d0:	bne.n	4872 <ExFatFile::open(ExFatFile*, char const*, int)+0xc2>
    47d2:	mov	r9, r3
    47d4:	ldrb.w	r3, [r5, #49]	; 0x31
    47d8:	tst.w	r3, #80	; 0x50
    47dc:	beq.n	4872 <ExFatFile::open(ExFatFile*, char const*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    47de:	ldrb	r3, [r2, #0]
    47e0:	mov	r1, r2
    47e2:	cmp	r3, #47	; 0x2f
    47e4:	beq.n	4854 <ExFatFile::open(ExFatFile*, char const*, int)+0xa4>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    47e6:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    47ea:	add	r3, sp, #12
    47ec:	add	r2, sp, #16
    47ee:	mov	r0, r6
    47f0:	bl	3f3c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    47f4:	mov	r4, r0
    47f6:	cmp	r0, #0
    47f8:	beq.n	4882 <ExFatFile::open(ExFatFile*, char const*, int)+0xd2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    47fa:	ldr	r3, [sp, #12]
    47fc:	ldrb	r3, [r3, #0]
    47fe:	cmp	r3, #0
    4800:	beq.n	4890 <ExFatFile::open(ExFatFile*, char const*, int)+0xe0>
    4802:	ldrb.w	r3, [sp, #16]
    4806:	mov	r1, r5
    4808:	ldr	r2, [sp, #20]
    480a:	mov	r0, r6
    480c:	str.w	r8, [sp]
    4810:	bl	437c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4814:	mov	r4, r0
    4816:	cmp	r0, #0
    4818:	beq.n	48ac <ExFatFile::open(ExFatFile*, char const*, int)+0xfc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    481a:	mov	r4, r6
    481c:	add	r7, sp, #24
    481e:	add.w	lr, r6, #48	; 0x30
    4822:	ldr	r0, [r4, #0]
    4824:	adds	r4, #16
    4826:	ldr.w	r1, [r4, #-12]
    482a:	mov	r5, r7
    482c:	ldr.w	r2, [r4, #-8]
    4830:	adds	r7, #16
    4832:	ldr.w	r3, [r4, #-4]
    4836:	cmp	r4, lr
    4838:	stmia	r5!, {r0, r1, r2, r3}
    483a:	bne.n	4822 <ExFatFile::open(ExFatFile*, char const*, int)+0x72>
    483c:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
    483e:	add	r5, sp, #24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    4840:	str	r0, [r7, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    4842:	mov	r0, r6
    4844:	bl	53fc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4848:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    484c:	strb.w	r8, [r6, #51]	; 0x33
    4850:	ldr	r1, [sp, #12]
    4852:	b.n	47ea <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4854:	adds	r1, #1
    4856:	str	r1, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4858:	ldrb	r3, [r1, #0]
    485a:	cmp	r3, #47	; 0x2f
    485c:	beq.n	4854 <ExFatFile::open(ExFatFile*, char const*, int)+0xa4>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    485e:	ldr	r1, [r5, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    4860:	cbz	r3, 48ba <ExFatFile::open(ExFatFile*, char const*, int)+0x10a>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4862:	add	r0, sp, #24
    4864:	bl	3f0c <ExFatFile::openRoot(ExFatVolume*)>
    4868:	mov	r4, r0
    486a:	cbz	r0, 48c4 <ExFatFile::open(ExFatFile*, char const*, int)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    486c:	add	r5, sp, #24
    486e:	ldr	r1, [sp, #12]
    4870:	b.n	47e6 <ExFatFile::open(ExFatFile*, char const*, int)+0x36>
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    4872:	movs	r0, #125	; 0x7d
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    4874:	movs	r4, #0
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    4876:	bl	3dfc <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    487a:	mov	r0, r4
    487c:	add	sp, #84	; 0x54
    487e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    4882:	movs	r0, #143	; 0x8f
    4884:	bl	3dfc <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    4888:	mov	r0, r4
    488a:	add	sp, #84	; 0x54
    488c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4890:	ldrb.w	r3, [sp, #16]
    4894:	mov	r1, r5
    4896:	ldr	r2, [sp, #20]
    4898:	mov	r0, r6
    489a:	str.w	r9, [sp]
    489e:	bl	437c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    48a2:	mov	r4, r0
    48a4:	mov	r0, r4
    48a6:	add	sp, #84	; 0x54
    48a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    48ac:	movs	r0, #150	; 0x96
    48ae:	bl	3dfc <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    48b2:	mov	r0, r4
    48b4:	add	sp, #84	; 0x54
    48b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    48ba:	mov	r0, r6
    48bc:	bl	3f0c <ExFatFile::openRoot(ExFatVolume*)>
    48c0:	mov	r4, r0
    48c2:	b.n	487a <ExFatFile::open(ExFatFile*, char const*, int)+0xca>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    48c4:	movs	r0, #136	; 0x88
    48c6:	bl	3dfc <dbgPrint(unsigned short)>
      goto fail;
    48ca:	b.n	487a <ExFatFile::open(ExFatFile*, char const*, int)+0xca>

000048cc <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    48cc:	cbz	r1, 48d6 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    48ce:	add.w	r1, r1, #1088	; 0x440
    48d2:	b.w	47b0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    48d6:	mov	r0, r1
    48d8:	bx	lr
    48da:	nop

000048dc <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    48dc:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    48de:	ldrb.w	r3, [r0, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    48e2:	sub	sp, #12
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    48e4:	cbnz	r3, 48f0 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    48e6:	ldrb.w	r5, [r1, #49]	; 0x31
    48ea:	tst.w	r5, #80	; 0x50
    48ee:	bne.n	48fc <ExFatFile::openNext(ExFatFile*, int)+0x20>
    DBG_FAIL_MACRO;
    48f0:	movs	r0, #176	; 0xb0
    48f2:	bl	3dfc <dbgPrint(unsigned short)>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    48f6:	movs	r0, #0
}
    48f8:	add	sp, #12
    48fa:	pop	{r4, r5, pc}
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    48fc:	ldrd	r4, r5, [r1]
    4900:	movs	r5, #0
    4902:	and.w	r4, r4, #31
    4906:	orrs	r4, r5
    4908:	bne.n	48f0 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    490a:	str	r2, [sp, #0]
    490c:	mov	r2, r3
    490e:	bl	437c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    4912:	add	sp, #12
    4914:	pop	{r4, r5, pc}
    4916:	nop

00004918 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4918:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    491a:	movs	r1, #10
    491c:	mov	r5, r0
    491e:	ldr	r0, [pc, #40]	; (4948 <dbgPrint(unsigned short)+0x30>)
    4920:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4924:	ldr	r4, [pc, #36]	; (494c <dbgPrint(unsigned short)+0x34>)
    4926:	movs	r1, #18
    4928:	ldr	r0, [pc, #36]	; (4950 <dbgPrint(unsigned short)+0x38>)
    492a:	bl	a3cc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    492e:	movs	r0, #46	; 0x2e
    4930:	bl	a3a0 <usb_serial_putchar>
    4934:	mov	r1, r5
    4936:	mov	r0, r4
    4938:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    493c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    493e:	ldmia.w	sp!, {r3, r4, r5, lr}
    4942:	b.w	b6f8 <Print::println()>
    4946:	nop
    4948:	.word	0x2000034c
    494c:	.word	0x20000c48
    4950:	.word	0x20000368

00004954 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4954:	push	{r3, r4, r5, lr}
    4956:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4958:	ldr	r0, [r0, #4]
    495a:	ldr	r3, [r0, #0]
    495c:	add.w	r2, r4, #12
    4960:	ldr	r1, [r4, #8]
    4962:	ldr	r3, [r3, #24]
    4964:	blx	r3
    4966:	mov	r5, r0
    4968:	cbz	r0, 4976 <FsCache::sync() [clone .part.2]+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    496a:	ldrb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    496c:	mov	r0, r5
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    496e:	bic.w	r3, r3, #1
    4972:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    4974:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
    4976:	movs	r0, #64	; 0x40
    4978:	bl	4918 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    497c:	mov	r0, r5
    497e:	pop	{r3, r4, r5, pc}

00004980 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4980:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    4982:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4986:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    4988:	str	r3, [r0, #8]
    498a:	bx	lr

0000498c <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    498c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_blockDev) {
    4990:	ldr	r4, [r0, #4]
    4992:	cmp	r4, #0
    4994:	beq.n	4a0c <FsCache::get(unsigned long, unsigned char)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4996:	ldr	r3, [r0, #8]
    4998:	mov	r6, r0
    499a:	mov	r8, r1
    499c:	mov	r7, r2
    499e:	cmp	r3, r1
    49a0:	beq.n	49c4 <FsCache::get(unsigned long, unsigned char)+0x38>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    49a2:	ldrb	r3, [r0, #0]
    49a4:	lsls	r2, r3, #31
    49a6:	bmi.n	49d4 <FsCache::get(unsigned long, unsigned char)+0x48>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    49a8:	lsls	r3, r7, #30
    49aa:	bpl.n	49ea <FsCache::get(unsigned long, unsigned char)+0x5e>
    49ac:	add.w	r5, r6, #12
    49b0:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    49b2:	and.w	r7, r7, #1
    49b6:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    49b8:	str.w	r8, [r6, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    49bc:	orrs	r7, r3
    49be:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    49c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49c4:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    49c8:	and.w	r7, r7, #1
    49cc:	orrs	r7, r3
    49ce:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    49d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49d4:	bl	4954 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    49d8:	mov	r4, r0
    49da:	cmp	r0, #0
    49dc:	bne.n	49a8 <FsCache::get(unsigned long, unsigned char)+0x1c>
      DBG_FAIL_MACRO;
    49de:	movs	r0, #42	; 0x2a
    49e0:	bl	4918 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    49e4:	mov	r0, r4
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    49e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    49ea:	ldr	r0, [r6, #4]
    49ec:	add.w	r5, r6, #12
    49f0:	mov	r1, r8
    49f2:	ldr	r3, [r0, #0]
    49f4:	mov	r2, r5
    49f6:	ldr	r3, [r3, #8]
    49f8:	blx	r3
    49fa:	mov	r4, r0
    49fc:	cmp	r0, #0
    49fe:	bne.n	49b0 <FsCache::get(unsigned long, unsigned char)+0x24>
        DBG_FAIL_MACRO;
    4a00:	movs	r0, #47	; 0x2f
    4a02:	bl	4918 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4a06:	mov	r0, r4
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
    4a08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    4a0c:	movs	r0, #37	; 0x25
    4a0e:	bl	4918 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4a12:	mov	r0, r4
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
    4a14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004a18 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4a18:	ldrb	r3, [r0, #0]
    4a1a:	lsls	r3, r3, #31
    4a1c:	bmi.n	4a22 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    4a1e:	movs	r0, #1
    4a20:	bx	lr
    4a22:	b.w	4954 <FsCache::sync() [clone .part.2]>
    4a26:	nop

00004a28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4a28:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a2c:	mov	r8, r0
    4a2e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4a30:	mov	fp, r1
    4a32:	cmp	r1, #0
    4a34:	beq.n	4abe <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
    4a36:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4a38:	ldr.w	r3, [r8, #1064]	; 0x428
    4a3c:	cmp	r7, r3
    4a3e:	bcs.n	4ab6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
    4a40:	and.w	r5, r7, #7
    4a44:	movs	r3, #1
    4a46:	ubfx	sl, r7, #3, #9
    4a4a:	lsl.w	r5, r3, r5
    4a4e:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4a50:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4a52:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4a54:	ldr.w	r1, [r8, #1060]	; 0x424
    4a58:	movs	r2, #0
    4a5a:	mov	r0, r8
    4a5c:	add.w	r1, r1, r4, lsr #12
    4a60:	bl	498c <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4a64:	cbz	r0, 4a98 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    4a66:	ldrb.w	r1, [r0, sl]
    4a6a:	b.n	4a82 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4a6c:	cmp	r2, r9
    4a6e:	beq.n	4ac4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4a70:	cmp	r7, r4
    4a72:	beq.n	4a96 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4a74:	ldr.w	r2, [r8, #1064]	; 0x428
    4a78:	cmp	r4, r2
    4a7a:	bcs.n	4aaa <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4a7c:	ands.w	r5, r3, #255	; 0xff
    4a80:	beq.n	4a9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4a82:	adds	r4, #1
        if (!(mask & cache[i])) {
    4a84:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4a86:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4a8a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4a8e:	beq.n	4a6c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4a90:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4a92:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4a94:	bne.n	4a74 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    4a96:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4a98:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a9c:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4aa0:	movs	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4aa2:	cmp.w	sl, #512	; 0x200
    4aa6:	bne.n	4a66 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    4aa8:	b.n	4aae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4aaa:	movs	r6, #0
    4aac:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4aae:	mov.w	sl, #0
    4ab2:	movs	r5, #1
    4ab4:	b.n	4a54 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    4ab6:	movs	r7, #0
    4ab8:	movs	r5, #1
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    4aba:	mov	sl, r7
    4abc:	b.n	4a50 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4abe:	ldr.w	r7, [r0, #1048]	; 0x418
    4ac2:	b.n	4a38 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    4ac4:	cmp.w	fp, #0
    4ac8:	bne.n	4ad4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    4aca:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4ace:	it	eq
    4ad0:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    4ad4:	adds	r0, r6, #2
    4ad6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ada:	nop

00004adc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4adc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ae0:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4ae2:	movs	r6, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    4ae4:	mov.w	r3, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4ae8:	add.w	r9, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    4aec:	str.w	r1, [r0, #1080]	; 0x438

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4af0:	mov	r8, r2
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4af2:	str	r1, [r0, #4]
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4af4:	mov	r2, r6
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4af6:	str.w	r1, [r0, #528]	; 0x210
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4afa:	mov	r0, r9
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4afc:	strb.w	r6, [r4, #1084]	; 0x43c
    4b00:	mov	r1, r6
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4b02:	strb	r6, [r4, #0]
    4b04:	strb.w	r6, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    4b08:	str	r3, [r4, #8]
    4b0a:	str.w	r3, [r4, #532]	; 0x214
    4b0e:	bl	498c <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4b12:	clz	r5, r0
    4b16:	lsrs	r5, r5, #5
    4b18:	cmp.w	r8, #4
    4b1c:	it	hi
    4b1e:	orrhi.w	r5, r5, #1
    4b22:	cbnz	r5, 4b94 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xb8>
    4b24:	mov	r7, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4b26:	cmp.w	r8, #0
    4b2a:	bne.n	4b52 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x76>
fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t volStart = 0;
    4b2c:	mov	r6, r5
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4b2e:	movs	r2, #5
    4b30:	ldr	r1, [pc, #216]	; (4c0c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x130>)
    4b32:	adds	r0, r7, #3
    4b34:	bl	d5dc <strncmp>
    4b38:	mov	r3, r0
    4b3a:	cmp	r0, #0
    4b3c:	bne.n	4bfe <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x122>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4b3e:	ldrb.w	r2, [r7, #108]	; 0x6c
    4b42:	cmp	r2, #9
    4b44:	beq.n	4ba2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xc6>
    DBG_FAIL_MACRO;
    4b46:	movs	r0, #112	; 0x70
    4b48:	bl	4918 <dbgPrint(unsigned short)>
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
    4b4c:	mov	r0, r5
    4b4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4b52:	add.w	r3, r8, #4294967295
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4b56:	add.w	r3, r0, r3, lsl #4
    4b5a:	ldrb.w	r2, [r3, #446]	; 0x1be
    4b5e:	lsls	r2, r2, #25
    4b60:	bne.n	4b88 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
    4b62:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4b66:	cbz	r3, 4b88 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4b68:	add.w	r7, r0, r8, lsl #4
    4b6c:	mov	r2, r5
    4b6e:	mov	r0, r9
    4b70:	ldr.w	r6, [r7, #438]	; 0x1b6
    4b74:	mov	r1, r6
    4b76:	bl	498c <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4b7a:	mov	r7, r0
    4b7c:	cmp	r0, #0
    4b7e:	bne.n	4b2e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
      DBG_FAIL_MACRO;
    4b80:	movs	r0, #101	; 0x65
    4b82:	bl	4918 <dbgPrint(unsigned short)>
      goto fail;
    4b86:	b.n	4b4c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x70>
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
      DBG_FAIL_MACRO;
    4b88:	movs	r0, #95	; 0x5f
    4b8a:	bl	4918 <dbgPrint(unsigned short)>
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
    4b8e:	mov	r0, r5
    4b90:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4b94:	mov	r5, r6
  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    4b96:	movs	r0, #88	; 0x58
    4b98:	bl	4918 <dbgPrint(unsigned short)>
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
    4b9c:	mov	r0, r5
    4b9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4ba2:	ldr	r2, [r7, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4ba4:	mov.w	lr, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4ba8:	mov	r1, r0
    4baa:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4bac:	adds	r5, r2, r6
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4bae:	mov	r2, lr
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4bb0:	str.w	r5, [r4, #1052]	; 0x41c
    4bb4:	ldr	r5, [r7, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4bb6:	str.w	r5, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4bba:	ldr	r5, [r7, #88]	; 0x58
    4bbc:	add	r6, r5
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;
    4bbe:	mov	r5, lr
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4bc0:	str.w	r6, [r4, #1060]	; 0x424
    4bc4:	ldr	r6, [r7, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4bc6:	str.w	r6, [r4, #1064]	; 0x428
    4bca:	ldr	r6, [r7, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4bcc:	str.w	r6, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4bd0:	ldrb.w	r6, [r7, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4bd4:	str.w	r3, [r4, #1048]	; 0x418
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4bd8:	add.w	r3, r6, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4bdc:	strb.w	r6, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4be0:	lsl.w	r3, lr, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4be4:	subs	r6, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4be6:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    4bea:	str.w	r6, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4bee:	bl	4a28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4bf2:	movs	r3, #64	; 0x40
  return true;

 fail:
  return false;
}
    4bf4:	mov	r0, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    4bf6:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;

 fail:
  return false;
}
    4bfa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    4bfe:	movs	r0, #107	; 0x6b
    4c00:	bl	4918 <dbgPrint(unsigned short)>
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
    4c04:	mov	r0, r5
    4c06:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c0a:	nop
    4c0c:	.word	0x2000037c

00004c10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4c10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4c14:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4c16:	mov	r5, r2
    4c18:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4c1a:	ldr.w	r2, [r0, #1064]	; 0x428
    4c1e:	adds	r3, r1, r5
    4c20:	cmp	r3, r2
    4c22:	bhi.n	4cc4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb4>
    4c24:	mov	r9, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4c26:	cmp.w	sl, #0
    4c2a:	bne.n	4c9a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8a>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4c2c:	ldr.w	r3, [r0, #1048]	; 0x418
    4c30:	cmp	r1, r3
      m_bitmapStart = start;
    4c32:	it	cc
    4c34:	strcc.w	r1, [r0, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4c38:	and.w	r4, r1, #7
    4c3c:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4c3e:	ldr.w	r3, [r9, #1060]	; 0x424
  i = (start >> 3) & m_sectorMask;
    4c42:	ubfx	fp, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4c46:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4c4a:	add.w	r8, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4c4e:	uxtb	r4, r4
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4c50:	movs	r2, #1
    4c52:	mov	r1, r8
    4c54:	mov	r0, r9
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4c56:	add	r8, r2
    4c58:	bl	498c <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4c5c:	mov	r6, r0
    4c5e:	cbz	r0, 4cd0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    4c60:	add.w	r7, r0, fp
    4c64:	add.w	r3, r0, #512	; 0x200
    4c68:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4c6c:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4c6e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4c72:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4c76:	ite	ne
    4c78:	movne	r6, #1
    4c7a:	moveq	r6, #0
    4c7c:	cmp	r6, sl
    4c7e:	beq.n	4cb2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa2>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4c80:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4c82:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4c86:	beq.n	4cbe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xae>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4c88:	ands.w	r4, r4, #255	; 0xff
    4c8c:	bne.n	4c6c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5c>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4c8e:	cmp	r3, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4c90:	mov	fp, r4
    4c92:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4c96:	bne.n	4c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    4c98:	b.n	4c50 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4c9a:	ldr.w	r0, [r0, #1048]	; 0x418
    4c9e:	cmp	r3, r0
    4ca0:	bls.n	4c38 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4ca2:	cmp	r1, r0
    4ca4:	bhi.n	4c38 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4ca6:	cmp	r3, r2
    4ca8:	it	cs
    4caa:	movcs	r3, #0
    4cac:	str.w	r3, [r9, #1048]	; 0x418
    4cb0:	b.n	4c38 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
    4cb2:	movs	r0, #216	; 0xd8
    4cb4:	bl	4918 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4cb8:	movs	r0, #0
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
    4cba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4cbe:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4cc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    4cc4:	movs	r0, #191	; 0xbf
    4cc6:	bl	4918 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4cca:	movs	r0, #0
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
    4ccc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4cd0:	movs	r0, #210	; 0xd2
    4cd2:	bl	4918 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4cd6:	mov	r0, r6
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4cd8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004cdc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4cdc:	push	{r4, r5, r6, lr}
    4cde:	mov	r6, r1
    4ce0:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4ce2:	ldr.w	r5, [r0, #1072]	; 0x430
    4ce6:	add.w	r0, r0, #524	; 0x20c
    4cea:	ldr	r1, [r1, #4]
    4cec:	ldr	r3, [r6, #0]
    4cee:	ands	r1, r5
    4cf0:	ldr.w	r5, [r4, #1060]	; 0x424
    4cf4:	subs	r3, #2
    4cf6:	ldrb.w	r4, [r4, #1085]	; 0x43d
    4cfa:	add.w	r1, r5, r1, lsr #9
    4cfe:	lsls	r3, r4
    4d00:	add	r1, r3
    4d02:	bl	498c <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4d06:	cbz	r0, 4d10 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    4d08:	ldr	r3, [r6, #4]
    4d0a:	ubfx	r3, r3, #0, #9
    4d0e:	add	r0, r3
}
    4d10:	pop	{r4, r5, r6, pc}
    4d12:	nop

00004d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4d14:	push	{r3, r4, r5, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4d16:	ldr.w	r3, [r0, #1064]	; 0x428
    4d1a:	adds	r3, #1
    4d1c:	cmp	r3, r1
    4d1e:	bcs.n	4d2c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x18>
    DBG_FAIL_MACRO;
    4d20:	mov.w	r0, #276	; 0x114
    4d24:	bl	4918 <dbgPrint(unsigned short)>
    return -1;
    4d28:	movs	r0, #255	; 0xff
    4d2a:	pop	{r3, r4, r5, pc}
    4d2c:	mov	r4, r1
    4d2e:	ldr.w	r1, [r0, #1052]	; 0x41c
    4d32:	mov	r5, r2
    4d34:	add.w	r0, r0, #524	; 0x20c
    4d38:	movs	r2, #0
    4d3a:	add.w	r1, r1, r4, lsr #7
    4d3e:	bl	498c <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4d42:	cbz	r0, 4d56 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    4d44:	lsls	r4, r4, #2
    4d46:	ubfx	r4, r4, #0, #9
    4d4a:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4d4c:	adds	r2, r3, #1
    4d4e:	beq.n	4d5a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x46>
    return 0;
  }
  *value = next;
    4d50:	str	r3, [r5, #0]
  return 1;
    4d52:	movs	r0, #1
    4d54:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    4d56:	movs	r0, #255	; 0xff
    4d58:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4d5a:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    4d5c:	pop	{r3, r4, r5, pc}
    4d5e:	nop

00004d60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4d60:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4d62:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4d64:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4d66:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4d6a:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4d6c:	adds	r1, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4d6e:	ands	r3, r4
  pos->position += offset;
    4d70:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4d72:	ldrb.w	r4, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4d76:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4d78:	adds	r4, #9
    4d7a:	uxtb	r4, r4
    4d7c:	lsr.w	r4, r2, r4
  while (tmp--) {
    4d80:	cbz	r4, 4d92 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4d82:	ldrb	r3, [r5, #8]
    4d84:	cbz	r3, 4d96 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4d86:	ldr	r3, [r5, #0]
    4d88:	adds	r3, #1
    4d8a:	str	r3, [r5, #0]
    4d8c:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4d8e:	cmp	r4, #0
    4d90:	bne.n	4d82 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4d92:	movs	r0, #1
}
    4d94:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4d96:	mov	r2, r5
    4d98:	ldr	r1, [r5, #0]
    4d9a:	mov	r0, r6
    4d9c:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4da0:	sxtb	r0, r0
      if (status != 1) {
    4da2:	cmp	r0, #1
    4da4:	beq.n	4d8c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4da6:	pop	{r4, r5, r6, pc}

00004da8 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4da8:	cmp	r1, #1
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4daa:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4dac:	bls.n	4dba <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    4dae:	ldr.w	r3, [r0, #1064]	; 0x428
    4db2:	mov	r4, r1
    4db4:	adds	r3, #1
    4db6:	cmp	r1, r3
    4db8:	bls.n	4dc6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    4dba:	mov.w	r0, #298	; 0x12a
    4dbe:	bl	4918 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4dc2:	movs	r0, #0
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
    4dc4:	pop	{r4, r5, r6, pc}
    4dc6:	ldr.w	r1, [r0, #1052]	; 0x41c
    4dca:	mov	r5, r2
    4dcc:	add.w	r0, r0, #524	; 0x20c
    4dd0:	movs	r2, #1
    4dd2:	add.w	r1, r1, r4, lsr #7
    4dd6:	bl	498c <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4dda:	mov	r6, r0
    4ddc:	cbz	r0, 4dea <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4dde:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    4de0:	movs	r0, #1
    4de2:	ubfx	r4, r4, #0, #9
    4de6:	str	r5, [r6, r4]

 fail:
  return false;
}
    4de8:	pop	{r4, r5, r6, pc}
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    DBG_FAIL_MACRO;
    4dea:	mov.w	r0, #304	; 0x130
    4dee:	bl	4918 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4df2:	mov	r0, r6
    4df4:	pop	{r4, r5, r6, pc}
    4df6:	nop

00004df8 <ExFatPartition::freeChain(unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4df8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dfc:	mov	r4, r1
    4dfe:	sub	sp, #8
    4e00:	mov	r7, r0
  uint32_t next;
  uint32_t start = cluster;
    4e02:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4e04:	add	r2, sp, #4
    4e06:	mov	r1, r4
    4e08:	mov	r0, r7
    4e0a:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e0e:	movs	r2, #0
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4e10:	sxtb	r5, r0
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e12:	mov	r1, r4
    4e14:	mov	r0, r7
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
    4e16:	cmp	r5, r2
    4e18:	blt.n	4e56 <ExFatPartition::freeChain(unsigned long)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e1a:	bl	4da8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4e1e:	mov	r1, r8
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e20:	mov	r6, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4e22:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e24:	cbz	r0, 4e46 <ExFatPartition::freeChain(unsigned long)+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4e26:	adds	r2, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4e28:	mov	r0, r7
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4e2a:	ldr	r4, [sp, #4]
    4e2c:	cbz	r5, 4e32 <ExFatPartition::freeChain(unsigned long)+0x3a>
    4e2e:	cmp	r2, r4
    4e30:	beq.n	4e04 <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4e32:	rsb	r2, r8, r2
    4e36:	bl	4c10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4e3a:	mov	r6, r0
    4e3c:	cbz	r0, 4e68 <ExFatPartition::freeChain(unsigned long)+0x70>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4e3e:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4e40:	cbz	r5, 4e4e <ExFatPartition::freeChain(unsigned long)+0x56>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4e42:	mov	r8, r4
    4e44:	b.n	4e04 <ExFatPartition::freeChain(unsigned long)+0xc>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    4e46:	movw	r0, #325	; 0x145
    4e4a:	bl	4918 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4e4e:	mov	r0, r6
    4e50:	add	sp, #8
    4e52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while (status);

  return true;

 fail:
  return false;
    4e56:	mov	r6, r2
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
    4e58:	movw	r0, #321	; 0x141
    4e5c:	bl	4918 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4e60:	mov	r0, r6
    4e62:	add	sp, #8
    4e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
    4e68:	mov.w	r0, #330	; 0x14a
    4e6c:	bl	4918 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4e70:	mov	r0, r6
    4e72:	add	sp, #8
    4e74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004e78 <ExFatPartition::freeClusterCount()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4e78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4e7c:	movs	r4, #0

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4e7e:	mov	r8, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    4e80:	ldr.w	r6, [r0, #1060]	; 0x424
    4e84:	add.w	r7, r0, #524	; 0x20c
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    4e88:	mov	r5, r4
    4e8a:	mov	r1, r6
    4e8c:	movs	r2, #0
    4e8e:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    4e90:	adds	r6, #1
    4e92:	bl	498c <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4e96:	cbz	r0, 4ee4 <ExFatPartition::freeClusterCount()+0x6c>
    4e98:	add.w	lr, r0, #4294967295
    4e9c:	ldr.w	ip, [r8, #1064]	; 0x428
    4ea0:	add.w	r9, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    4ea4:	ldrb.w	r0, [lr, #1]!
    4ea8:	cmp	r0, #255	; 0xff
    4eaa:	beq.n	4ed4 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    4eac:	cbz	r0, 4ec2 <ExFatPartition::freeClusterCount()+0x4a>
    4eae:	movs	r2, #8
    4eb0:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    4eb2:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4eb4:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    4eb8:	it	ne
    4eba:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4ebc:	subs	r2, #1
    4ebe:	uxtb	r3, r1
    4ec0:	bne.n	4eb2 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4ec2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4ec4:	cmp	ip, r5
    4ec6:	bls.n	4edc <ExFatPartition::freeClusterCount()+0x64>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4ec8:	cmp	r5, r9
    4eca:	beq.n	4e8a <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    4ecc:	ldrb.w	r0, [lr, #1]!
    4ed0:	cmp	r0, #255	; 0xff
    4ed2:	bne.n	4eac <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4ed4:	adds	r5, #8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    4ed6:	adds	r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4ed8:	cmp	ip, r5
    4eda:	bhi.n	4ec8 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    4edc:	rsb	r0, r4, ip
    4ee0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    4ee4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004ee8 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4ee8:	push	{r4, r5, r6, lr}
    4eea:	sub	sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4eec:	ldr.w	r1, [r0, #1068]	; 0x42c
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4ef0:	mov	r5, r0
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    4ef2:	movs	r4, #0
    4ef4:	add	r6, sp, #8
    4ef6:	str.w	r1, [r6, #-4]!
    4efa:	b.n	4f00 <ExFatPartition::rootLength()+0x18>
  int8_t status;
  do {
    4efc:	beq.n	4f12 <ExFatPartition::rootLength()+0x2a>
    4efe:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    4f00:	mov	r2, r6
    4f02:	mov	r0, r5
    4f04:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    n++;
    4f08:	adds	r4, #1
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4f0a:	sxtb	r0, r0
    if (status < 0) return 0;
    4f0c:	cmp	r0, #0
    4f0e:	bge.n	4efc <ExFatPartition::rootLength()+0x14>
    4f10:	movs	r4, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    4f12:	ldrb.w	r0, [r5, #1085]	; 0x43d
    4f16:	adds	r0, #9
    4f18:	uxtb	r0, r0
}
    4f1a:	lsl.w	r0, r4, r0
    4f1e:	add	sp, #8
    4f20:	pop	{r4, r5, r6, pc}
    4f22:	nop

00004f24 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4f24:	cbz	r1, 4f5c <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
    4f26:	add	r1, r0
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4f28:	push	{r4, r5}
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4f2a:	ldrb.w	r4, [r0], #1
    4f2e:	lsls	r3, r2, #15
    4f30:	orr.w	r2, r3, r2, lsr #1
    if ('a' <= c && c <= 'z') {
    4f34:	sub.w	r3, r4, #97	; 0x61
      c -= 'a' - 'A';
    4f38:	sub.w	r5, r4, #32
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    4f3c:	cmp	r3, #25
      c -= 'a' - 'A';
    4f3e:	it	ls
    4f40:	uxtbls	r4, r5
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4f42:	cmp	r1, r0
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4f44:	uxtah	r2, r4, r2
    4f48:	uxth	r2, r2
    4f4a:	mov.w	r3, r2, lsl #15
    4f4e:	orr.w	r2, r3, r2, lsr #1
    4f52:	uxth	r2, r2
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4f54:	bne.n	4f2a <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4f56:	mov	r0, r2
    4f58:	pop	{r4, r5}
    4f5a:	bx	lr
    4f5c:	mov	r0, r2
    4f5e:	bx	lr

00004f60 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4f60:	cbz	r3, 4fb6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x56>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4f62:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4f64:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4f66:	cmp	r4, #126	; 0x7e
    4f68:	bhi.n	4faa <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
    4f6a:	add	r3, r2
    4f6c:	adds	r0, #2
    4f6e:	add	r2, r1
    4f70:	add	r1, r3
    4f72:	ldrb.w	r3, [r2], #1
    4f76:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4f78:	sub.w	r6, r3, #97	; 0x61
    4f7c:	sub.w	r5, r4, #97	; 0x61
    4f80:	cmp	r6, #25
    4f82:	ite	ls
    4f84:	movls	r6, #32
    4f86:	movhi	r6, #0
    4f88:	cmp	r5, #25
    4f8a:	sub.w	r3, r3, r6
    4f8e:	ite	ls
    4f90:	movls	r5, #32
    4f92:	movhi	r5, #0
    4f94:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4f96:	subs	r4, r4, r5
    4f98:	uxtb	r4, r4
    4f9a:	cmp	r4, r3
    4f9c:	bne.n	4faa <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4f9e:	cmp	r2, r1
    4fa0:	beq.n	4fb0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x50>
    4fa2:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4fa6:	cmp	r4, #126	; 0x7e
    4fa8:	bls.n	4f72 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4faa:	movs	r0, #0
    }
  }
  return true;
}
    4fac:	pop	{r4, r5, r6}
    4fae:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4fb0:	movs	r0, #1
}
    4fb2:	pop	{r4, r5, r6}
    4fb4:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4fb6:	movs	r0, #1
}
    4fb8:	bx	lr
    4fba:	nop

00004fbc <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4fbc:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4fbe:	movs	r1, #10
    4fc0:	mov	r5, r0
    4fc2:	ldr	r0, [pc, #40]	; (4fec <dbgPrint(unsigned short)+0x30>)
    4fc4:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4fc8:	ldr	r4, [pc, #36]	; (4ff0 <dbgPrint(unsigned short)+0x34>)
    4fca:	movs	r1, #18
    4fcc:	ldr	r0, [pc, #36]	; (4ff4 <dbgPrint(unsigned short)+0x38>)
    4fce:	bl	a3cc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4fd2:	movs	r0, #46	; 0x2e
    4fd4:	bl	a3a0 <usb_serial_putchar>
    4fd8:	mov	r1, r5
    4fda:	mov	r0, r4
    4fdc:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4fe0:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    4fe2:	ldmia.w	sp!, {r3, r4, r5, lr}
    4fe6:	b.w	b6f8 <Print::println()>
    4fea:	nop
    4fec:	.word	0x2000034c
    4ff0:	.word	0x20000c48
    4ff4:	.word	0x20000384

00004ff8 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4ff8:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4ffa:	push	{r3, r4, r5, r6, r7, lr}
    4ffc:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4ffe:	ldr	r0, [r0, #32]
    5000:	cbz	r1, 5004 <ExFatFile::addCluster()+0xc>
    5002:	adds	r1, #1
    5004:	movs	r2, #1
    5006:	bl	4a28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    500a:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    500c:	mov	r6, r0
  if (find < 2) {
    500e:	bls.n	5096 <ExFatFile::addCluster()+0x9e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    5010:	movs	r3, #1
    5012:	mov	r1, r0
    5014:	ldr	r0, [r4, #32]
    5016:	mov	r2, r3
    5018:	bl	4c10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    501c:	mov	r7, r0
    501e:	cmp	r0, #0
    5020:	beq.n	50a2 <ExFatFile::addCluster()+0xaa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    5022:	ldr	r3, [r4, #24]
    5024:	cbnz	r3, 5038 <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5026:	ldrb.w	r3, [r4, #51]	; 0x33
    502a:	orr.w	r3, r3, #64	; 0x40
    502e:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    5032:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    5034:	mov	r0, r7
    5036:	pop	{r3, r4, r5, r6, r7, pc}
    5038:	ldrb.w	r2, [r4, #51]	; 0x33
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    503c:	lsls	r1, r2, #25
    503e:	bpl.n	5068 <ExFatFile::addCluster()+0x70>
    if (find == (m_curCluster + 1)) {
    5040:	adds	r1, r3, #1
    5042:	cmp	r6, r1
    5044:	beq.n	5032 <ExFatFile::addCluster()+0x3a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5046:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    504a:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    504c:	strb.w	r2, [r4, #51]	; 0x33
    5050:	b.n	5060 <ExFatFile::addCluster()+0x68>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    5052:	ldr	r0, [r4, #32]
    5054:	bl	4da8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5058:	mov	r3, r0
    505a:	cbz	r0, 50ac <ExFatFile::addCluster()+0xb4>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    505c:	mov	r1, r5
    505e:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    5060:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5062:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    5064:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5066:	bcc.n	5052 <ExFatFile::addCluster()+0x5a>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    5068:	mov.w	r2, #4294967295
    506c:	mov	r1, r6
    506e:	ldr	r0, [r4, #32]
    5070:	bl	4da8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5074:	mov	r3, r0
    5076:	cbz	r0, 50b6 <ExFatFile::addCluster()+0xbe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    5078:	ldr	r1, [r4, #24]
    507a:	cmp	r1, #0
    507c:	beq.n	5032 <ExFatFile::addCluster()+0x3a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    507e:	mov	r2, r6
    5080:	ldr	r0, [r4, #32]
    5082:	bl	4da8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5086:	mov	r3, r0
    5088:	cmp	r0, #0
    508a:	bne.n	5032 <ExFatFile::addCluster()+0x3a>
      DBG_FAIL_MACRO;
    508c:	movs	r0, #110	; 0x6e
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    508e:	mov	r7, r3
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    if (!m_vol->fatPut(m_curCluster, find)) {
      DBG_FAIL_MACRO;
    5090:	bl	4fbc <dbgPrint(unsigned short)>
      goto fail;
    5094:	b.n	5034 <ExFatFile::addCluster()+0x3c>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    5096:	movs	r7, #0
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    5098:	movs	r0, #77	; 0x4d
    509a:	bl	4fbc <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    509e:	mov	r0, r7
    50a0:	pop	{r3, r4, r5, r6, r7, pc}
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    50a2:	movs	r0, #81	; 0x51
    50a4:	bl	4fbc <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    50a8:	mov	r0, r7
    50aa:	pop	{r3, r4, r5, r6, r7, pc}
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    50ac:	movs	r0, #97	; 0x61
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    50ae:	mov	r7, r3
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    50b0:	bl	4fbc <dbgPrint(unsigned short)>
        goto fail;
    50b4:	b.n	5034 <ExFatFile::addCluster()+0x3c>
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    50b6:	movs	r0, #104	; 0x68
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    50b8:	mov	r7, r3
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    50ba:	bl	4fbc <dbgPrint(unsigned short)>
    goto fail;
    50be:	b.n	5034 <ExFatFile::addCluster()+0x3c>

000050c0 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    50c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    50c4:	add.w	r3, r0, #36	; 0x24
    50c8:	ldrb.w	r7, [r0, #51]	; 0x33

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    50cc:	sub	sp, #20
    50ce:	mov	r5, r0
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    50d0:	and.w	r4, r7, #2
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
    50d4:	add	r6, sp, #4
    50d6:	ldmia.w	r3, {r0, r1, r2}
    50da:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    50de:	cmp	r4, #0
    50e0:	beq.n	51aa <ExFatFile::remove()+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    50e2:	ldr	r1, [r5, #28]
    50e4:	cbnz	r1, 5130 <ExFatFile::remove()+0x70>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    50e6:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    50e8:	movs	r2, #1
    50ea:	mov	r1, r6
    50ec:	ldr	r0, [r5, #32]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    50ee:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    50f0:	bl	4cdc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    50f4:	mov	r3, r0
    50f6:	cmp	r0, #0
    50f8:	beq.n	5198 <ExFatFile::remove()+0xd8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    50fa:	ldrb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    50fc:	uxtb	r4, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    50fe:	and.w	r2, r2, #127	; 0x7f
    5102:	strb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    5104:	ldrb.w	r3, [r5, #48]	; 0x30
    5108:	cmp	r3, r4
    510a:	bcc.n	517a <ExFatFile::remove()+0xba>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    510c:	cmp	r4, #0
    510e:	beq.n	50e8 <ExFatFile::remove()+0x28>
    5110:	movs	r2, #32
    5112:	mov	r1, r6
    5114:	ldr	r0, [r5, #32]
    5116:	bl	4d60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    511a:	cmp	r0, #1
    511c:	beq.n	50e8 <ExFatFile::remove()+0x28>
      DBG_FAIL_MACRO;
    511e:	movw	r0, #287	; 0x11f

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    5122:	movs	r4, #0
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
    5124:	bl	4fbc <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    5128:	mov	r0, r4
    512a:	add	sp, #20
    512c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    5130:	lsls	r3, r7, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5132:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    5134:	bpl.n	51c0 <ExFatFile::remove()+0x100>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    5136:	ldrb.w	r2, [r0, #1085]	; 0x43d
    513a:	movs	r3, #0
    513c:	ldrd	r8, r9, [r5, #8]
    5140:	adds	r2, #9
    5142:	adds.w	r8, r8, #4294967295
    5146:	uxtb	r2, r2
    5148:	adc.w	r9, r9, #4294967295
    514c:	rsb	r7, r2, #32
    5150:	sub.w	r4, r2, #32
    5154:	lsr.w	r2, r8, r2
    5158:	lsl.w	r7, r9, r7
    515c:	lsr.w	r4, r9, r4
    5160:	orrs	r2, r7
    5162:	orrs	r2, r4
    5164:	adds	r2, #1
    5166:	bl	4c10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    516a:	mov	r4, r0
    516c:	cmp	r0, #0
    516e:	bne.n	50e6 <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    5170:	mov.w	r0, #274	; 0x112
    5174:	bl	4fbc <dbgPrint(unsigned short)>
        goto fail;
    5178:	b.n	5128 <ExFatFile::remove()+0x68>
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    517a:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    517c:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    517e:	strb.w	r3, [r5, #49]	; 0x31
    5182:	mov	r0, r4
  m_flags = 0;
    5184:	strb.w	r3, [r5, #51]	; 0x33
    5188:	bl	4a18 <FsCache::sync()>
    518c:	cbnz	r0, 51d4 <ExFatFile::remove()+0x114>
    518e:	movs	r4, #0
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    5190:	mov	r0, r4
    5192:	add	sp, #20
    5194:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    5198:	mov	r4, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    519a:	mov.w	r0, #292	; 0x124
    519e:	bl	4fbc <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    51a2:	mov	r0, r4
    51a4:	add	sp, #20
    51a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    51aa:	and.w	r3, r4, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    51ae:	mov.w	r0, #266	; 0x10a

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    51b2:	mov	r4, r3
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    51b4:	bl	4fbc <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    51b8:	mov	r0, r4
    51ba:	add	sp, #20
    51bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    51c0:	bl	4df8 <ExFatPartition::freeChain(unsigned long)>
    51c4:	mov	r4, r0
    51c6:	cmp	r0, #0
    51c8:	bne.n	50e6 <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    51ca:	movw	r0, #279	; 0x117
    51ce:	bl	4fbc <dbgPrint(unsigned short)>
        goto fail;
    51d2:	b.n	5128 <ExFatFile::remove()+0x68>
    51d4:	add.w	r0, r4, #524	; 0x20c
    51d8:	bl	4a18 <FsCache::sync()>
    51dc:	cmp	r0, #0
    51de:	beq.n	518e <ExFatFile::remove()+0xce>
    51e0:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    51e4:	ldr	r3, [r0, #0]
    51e6:	ldr	r3, [r3, #20]
    51e8:	blx	r3
    51ea:	mov	r4, r0
    51ec:	b.n	5128 <ExFatFile::remove()+0x68>
    51ee:	nop

000051f0 <ExFatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    51f0:	push	{r4, r5, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    51f2:	ldrb.w	r3, [r0, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    51f6:	sub	sp, #36	; 0x24
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    51f8:	and.w	r3, r3, #16
    51fc:	cbz	r3, 5242 <ExFatFile::rmdir()+0x52>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    51fe:	movs	r2, #0
    5200:	movs	r3, #0
    5202:	mov	r4, r0
    5204:	bl	4254 <ExFatFile::seekSet(unsigned long long)>
    5208:	b.n	5218 <ExFatFile::rmdir()+0x28>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    520a:	cmp	r0, #32
    520c:	bne.n	5254 <ExFatFile::rmdir()+0x64>
    520e:	ldrb.w	r3, [sp]
    5212:	lsls	r2, r3, #24
    5214:	bmi.n	5254 <ExFatFile::rmdir()+0x64>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    5216:	cbz	r3, 5226 <ExFatFile::rmdir()+0x36>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    5218:	movs	r2, #32
    521a:	mov	r1, sp
    521c:	mov	r0, r4
    521e:	bl	4038 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5222:	cmp	r0, #0
    5224:	bne.n	520a <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    5226:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    522a:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    522c:	mov	r0, r4
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    522e:	orr.w	r3, r3, #2
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5232:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    5236:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    523a:	bl	50c0 <ExFatFile::remove()>

fail:
  return false;
}
    523e:	add	sp, #36	; 0x24
    5240:	pop	{r4, r5, pc}
    5242:	and.w	r5, r3, #255	; 0xff
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    DBG_FAIL_MACRO;
    5246:	mov.w	r0, #354	; 0x162
    524a:	bl	4fbc <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    524e:	mov	r0, r5
}
    5250:	add	sp, #36	; 0x24
    5252:	pop	{r4, r5, pc}
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
      DBG_FAIL_MACRO;
    5254:	mov.w	r0, #366	; 0x16e
    5258:	bl	4fbc <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    525c:	movs	r0, #0
}
    525e:	add	sp, #36	; 0x24
    5260:	pop	{r4, r5, pc}
    5262:	nop

00005264 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5264:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5268:	movs	r7, #0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    526a:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    526c:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5270:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5272:	add.w	r8, sp, #12
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    5276:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    5278:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    527a:	ldmia.w	fp, {r0, r1, r2}
    527e:	stmia.w	r8, {r0, r1, r2}

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    5282:	movs	r2, #0
    5284:	mov	r1, r8
    5286:	ldr	r0, [r6, #32]
    5288:	uxtb.w	r9, r7
    528c:	bl	4cdc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    5290:	mov	r5, r0
    5292:	cmp	r0, #0
    5294:	beq.w	53a6 <ExFatFile::syncDir()+0x142>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    5298:	ldrb	r2, [r0, #0]
    529a:	cmp	r2, #192	; 0xc0
    529c:	beq.n	531e <ExFatFile::syncDir()+0xba>
    529e:	cmp	r2, #193	; 0xc1
    52a0:	beq.n	52c2 <ExFatFile::syncDir()+0x5e>
    52a2:	cmp	r2, #133	; 0x85
    52a4:	beq.n	535a <ExFatFile::syncDir()+0xf6>

      case EXFAT_TYPE_NAME:
        break;

      default:
        DBG_FAIL_MACRO;
    52a6:	mov.w	r0, #452	; 0x1c4
    52aa:	bl	4fbc <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    52ae:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    52b2:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    52b4:	orr.w	r3, r3, #1
    52b8:	strb.w	r3, [r6, #50]	; 0x32
  return false;
}
    52bc:	add	sp, #28
    52be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52c2:	mov	r3, r2
    52c4:	lsls	r1, r4, #15
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    52c6:	sub.w	r0, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    52ca:	movs	r2, #0
    52cc:	orr.w	r4, r1, r4, lsr #1
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    52d0:	clz	r0, r0
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    52d4:	movs	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    52d6:	uxtah	r4, r3, r4
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    52da:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    52dc:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    52de:	add	r2, r1
    52e0:	lsls	r3, r4, #15
    52e2:	movs	r1, #3
    52e4:	cmp	r2, #31
    52e6:	orr.w	r3, r3, r4, lsr #1
    52ea:	bhi.n	5300 <ExFatFile::syncDir()+0x9c>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    52ec:	ldrb	r4, [r5, r2]
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    52ee:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    52f0:	uxtah	r3, r4, r3
    52f4:	uxth	r4, r3
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    52f6:	bne.n	52fc <ExFatFile::syncDir()+0x98>
    52f8:	cmp	r0, #0
    52fa:	bne.n	52de <ExFatFile::syncDir()+0x7a>
    52fc:	movs	r1, #1
    52fe:	b.n	52de <ExFatFile::syncDir()+0x7a>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    5300:	cmp	sl, r9
    5302:	beq.n	53b0 <ExFatFile::syncDir()+0x14c>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    5304:	movs	r2, #32
    5306:	mov	r1, r8
    5308:	ldr	r0, [r6, #32]
    530a:	adds	r7, #1
    530c:	bl	4d60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5310:	cmp	r0, #1
    5312:	beq.n	5282 <ExFatFile::syncDir()+0x1e>
      DBG_FAIL_MACRO;
    5314:	movw	r0, #459	; 0x1cb
    5318:	bl	4fbc <dbgPrint(unsigned short)>
      goto fail;
    531c:	b.n	52ae <ExFatFile::syncDir()+0x4a>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    531e:	ldrb.w	r3, [r6, #51]	; 0x33
    5322:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5326:	ldrb	r3, [r0, #1]
    5328:	ite	ne
    532a:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    532e:	biceq.w	r3, r3, #2
    5332:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    5334:	ldr	r0, [r6, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    5336:	ldr	r1, [r6, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    5338:	ldrd	r2, r3, [r6, #16]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    533c:	str	r1, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    533e:	strd	r2, r3, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    5342:	ldrd	r2, r3, [r6, #8]
    5346:	strd	r2, r3, [r5, #24]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    534a:	ldrb.w	r3, [r0, #524]	; 0x20c
    534e:	orr.w	r3, r3, #1
    5352:	strb.w	r3, [r0, #524]	; 0x20c
    5356:	ldrb	r3, [r5, #0]
    5358:	b.n	52c4 <ExFatFile::syncDir()+0x60>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    535a:	ldrb.w	r1, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    535e:	ldr	r3, [pc, #152]	; (53f8 <ExFatFile::syncDir()+0x194>)
    5360:	and.w	r1, r1, #55	; 0x37
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    5364:	ldrb.w	sl, [r0, #1]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5368:	ldr	r3, [r3, #0]
    536a:	strh	r1, [r0, #4]
    536c:	cmp	r3, #0
    536e:	beq.n	52c2 <ExFatFile::syncDir()+0x5e>
          m_vol->dataCacheDirty();
    5370:	ldr.w	ip, [r6, #32]
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    5374:	add.w	r2, sp, #7
    5378:	add.w	r1, sp, #10
    537c:	add	r0, sp, #8
    537e:	ldrb.w	lr, [ip, #524]	; 0x20c
    5382:	orr.w	lr, lr, #1
    5386:	strb.w	lr, [ip, #524]	; 0x20c
    538a:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    538c:	ldrh.w	r3, [sp, #8]
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    5390:	ldrh.w	r2, [sp, #10]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    5394:	ldrb.w	r1, [sp, #7]
    5398:	strh	r3, [r5, #14]
    539a:	strh	r3, [r5, #18]
    539c:	strb	r1, [r5, #21]
    539e:	strh	r2, [r5, #12]
    53a0:	strh	r2, [r5, #16]
    53a2:	ldrb	r3, [r5, #0]
    53a4:	b.n	52c4 <ExFatFile::syncDir()+0x60>
  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
    53a6:	mov.w	r0, #414	; 0x19e
    53aa:	bl	4fbc <dbgPrint(unsigned short)>
      goto fail;
    53ae:	b.n	52ae <ExFatFile::syncDir()+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    53b0:	mov	r1, fp
    53b2:	movs	r2, #1
    53b4:	ldr	r0, [r6, #32]
    53b6:	bl	4cdc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    53ba:	cbz	r0, 53d2 <ExFatFile::syncDir()+0x16e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    53bc:	ldr	r5, [r6, #32]
    53be:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    53c0:	mov	r0, r5
    53c2:	bl	4a18 <FsCache::sync()>
    53c6:	cbnz	r0, 53dc <ExFatFile::syncDir()+0x178>
    DBG_FAIL_MACRO;
    53c8:	movw	r0, #471	; 0x1d7
    53cc:	bl	4fbc <dbgPrint(unsigned short)>
    goto fail;
    53d0:	b.n	52ae <ExFatFile::syncDir()+0x4a>
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
  if (!df) {
    DBG_FAIL_MACRO;
    53d2:	mov.w	r0, #466	; 0x1d2
    53d6:	bl	4fbc <dbgPrint(unsigned short)>
    goto fail;
    53da:	b.n	52ae <ExFatFile::syncDir()+0x4a>
    53dc:	add.w	r0, r5, #524	; 0x20c
    53e0:	bl	4a18 <FsCache::sync()>
    53e4:	cmp	r0, #0
    53e6:	beq.n	53c8 <ExFatFile::syncDir()+0x164>
    53e8:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    53ec:	ldr	r3, [r0, #0]
    53ee:	ldr	r3, [r3, #20]
    53f0:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    53f2:	cmp	r0, #0
    53f4:	beq.n	53c8 <ExFatFile::syncDir()+0x164>
    53f6:	b.n	52bc <ExFatFile::syncDir()+0x58>
    53f8:	.word	0x2000607c

000053fc <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    53fc:	ldrb.w	r2, [r0, #49]	; 0x31
    5400:	cbz	r2, 5430 <ExFatFile::sync()+0x34>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    5402:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5404:	ldrb.w	r2, [r0, #51]	; 0x33
    5408:	lsls	r1, r2, #24
    540a:	bmi.n	5434 <ExFatFile::sync()+0x38>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    540c:	ldr	r5, [r0, #32]
    540e:	mov	r4, r0
    5410:	mov	r0, r5
    5412:	bl	4a18 <FsCache::sync()>
    5416:	cbnz	r0, 5444 <ExFatFile::sync()+0x48>
    DBG_FAIL_MACRO;
    5418:	mov.w	r0, #392	; 0x188
    541c:	bl	4fbc <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5420:	ldrb.w	r3, [r4, #50]	; 0x32
    5424:	movs	r0, #0
    5426:	orr.w	r3, r3, #1
    542a:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    542e:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    5430:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5432:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5434:	and.w	r2, r2, #127	; 0x7f
    5438:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    543c:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    5440:	b.w	5264 <ExFatFile::syncDir()>
    5444:	add.w	r0, r5, #524	; 0x20c
    5448:	bl	4a18 <FsCache::sync()>
    544c:	cmp	r0, #0
    544e:	beq.n	5418 <ExFatFile::sync()+0x1c>
    5450:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5454:	ldr	r3, [r0, #0]
    5456:	ldr	r3, [r3, #20]
    5458:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    545a:	cmp	r0, #0
    545c:	beq.n	5418 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    545e:	movs	r0, #1
    5460:	pop	{r3, r4, r5, pc}
    5462:	nop

00005464 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    5464:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5468:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    546c:	mov	r8, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    546e:	lsls	r1, r3, #25
    5470:	bmi.n	551e <ExFatFile::addDirCluster()+0xba>
    5472:	ldr	r0, [r0, #8]
    5474:	ldr.w	r3, [r8, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    5478:	ldr.w	r3, [r3, #1076]	; 0x434
    547c:	add	r0, r3
    547e:	cmp.w	r0, #67108864	; 0x4000000
    5482:	bcs.n	5512 <ExFatFile::addDirCluster()+0xae>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5484:	mov	r0, r8
    5486:	bl	4ff8 <ExFatFile::addCluster()>
    548a:	cmp	r0, #0
    548c:	beq.n	5506 <ExFatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    548e:	ldr.w	r5, [r8, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5492:	ldrb.w	r3, [r5, #524]	; 0x20c

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    5496:	add.w	r4, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    549a:	lsls	r2, r3, #31
    549c:	bmi.n	5562 <ExFatFile::addDirCluster()+0xfe>
      return nullptr;
    }
    invalidate();
    return m_cacheBuffer;
    549e:	add.w	r5, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    54a2:	mov	r0, r4
    54a4:	bl	4980 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    54a8:	mov.w	r2, #512	; 0x200
    54ac:	movs	r1, #0
    54ae:	mov	r0, r5
    54b0:	bl	cf4c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    54b4:	ldr.w	r2, [r8, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    54b8:	ldr.w	r7, [r8, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    54bc:	movs	r6, #1
    54be:	ldrb.w	r3, [r2, #1085]	; 0x43d
    54c2:	subs	r7, #2
    54c4:	ldr.w	r1, [r2, #1060]	; 0x424
    54c8:	lsls	r7, r3
    54ca:	lsls.w	r3, r6, r3
    54ce:	add	r7, r1
    54d0:	beq.n	5526 <ExFatFile::addDirCluster()+0xc2>
    54d2:	movs	r4, #0
    54d4:	b.n	54e6 <ExFatFile::addDirCluster()+0x82>
    54d6:	ldr.w	r2, [r8, #32]
    54da:	ldrb.w	r3, [r2, #1085]	; 0x43d
    54de:	lsl.w	r3, r6, r3
    54e2:	cmp	r3, r4
    54e4:	bls.n	5526 <ExFatFile::addDirCluster()+0xc2>
    54e6:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    54ea:	adds	r1, r7, r4
    54ec:	mov	r2, r5
    54ee:	adds	r4, #1
    54f0:	ldr	r3, [r0, #0]
    54f2:	ldr	r3, [r3, #24]
    54f4:	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    54f6:	cmp	r0, #0
    54f8:	bne.n	54d6 <ExFatFile::addDirCluster()+0x72>
      DBG_FAIL_MACRO;
    54fa:	movs	r0, #145	; 0x91
    54fc:	bl	4fbc <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    5500:	movs	r0, #0
    5502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    5506:	movs	r0, #133	; 0x85
    5508:	bl	4fbc <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    550c:	movs	r0, #0
    550e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    5512:	movs	r0, #129	; 0x81
    5514:	bl	4fbc <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    5518:	movs	r0, #0
    551a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    551e:	ldr	r0, [r0, #32]
    5520:	bl	4ee8 <ExFatPartition::rootLength()>
    5524:	b.n	5474 <ExFatFile::addDirCluster()+0x10>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    5526:	ldrb.w	r3, [r8, #49]	; 0x31
    552a:	lsls	r3, r3, #25
    552c:	bmi.n	5558 <ExFatFile::addDirCluster()+0xf4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    552e:	ldrb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5532:	movs	r5, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5534:	orn	r3, r3, #127	; 0x7f
    5538:	strb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    553c:	ldr.w	r4, [r2, #1076]	; 0x434
    5540:	ldrd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    5544:	ldrd	r0, r1, [r8, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5548:	adds	r2, r2, r4
    554a:	adcs	r3, r5
    m_validLength += m_vol->bytesPerCluster();
    554c:	adds	r0, r0, r4
    554e:	adcs	r1, r5
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5550:	strd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    5554:	strd	r0, r1, [r8, #16]
  }
  return sync();
    5558:	mov	r0, r8

 fail:
  return false;
}
    555a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    555e:	b.w	53fc <ExFatFile::sync()>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5562:	mov	r0, r4
    5564:	bl	4a18 <FsCache::sync()>
    5568:	cmp	r0, #0
    556a:	bne.n	549e <ExFatFile::addDirCluster()+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
  if (!cache) {
    DBG_FAIL_MACRO;
    556c:	movs	r0, #138	; 0x8a
    556e:	bl	4fbc <dbgPrint(unsigned short)>
    5572:	b.n	550c <ExFatFile::addDirCluster()+0xa8>

00005574 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5574:	push	{r4, r5, lr}
  if (!parent->isDir()) {
    5576:	ldrb.w	r3, [r1, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    557a:	sub	sp, #12
  if (!parent->isDir()) {
    557c:	tst.w	r3, #80	; 0x50
    5580:	beq.n	55ce <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x5a>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    5582:	movw	r5, #2562	; 0xa02
    5586:	ldrb	r3, [r2, #0]
    5588:	ldr	r2, [r2, #4]
    558a:	mov	r4, r0
    558c:	str	r5, [sp, #0]
    558e:	bl	437c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5592:	cbz	r0, 55c2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    5594:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5596:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    5598:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    559c:	bl	5464 <ExFatFile::addDirCluster()>
    55a0:	cbz	r0, 55da <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    55a2:	ldr	r1, [r4, #24]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    55a4:	movs	r2, #0
    55a6:	movs	r3, #0
    55a8:	mov	r0, r4
    55aa:	str	r1, [r4, #28]
    55ac:	bl	4254 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    55b0:	movs	r3, #193	; 0xc1
  return sync();
    55b2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    55b4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    55b8:	add	sp, #12
    55ba:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    55be:	b.w	53fc <ExFatFile::sync()>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    55c2:	movs	r0, #209	; 0xd1
    55c4:	bl	4fbc <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    55c8:	movs	r0, #0
    55ca:	add	sp, #12
    55cc:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    55ce:	movs	r0, #204	; 0xcc
    55d0:	bl	4fbc <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    55d4:	movs	r0, #0
    55d6:	add	sp, #12
    55d8:	pop	{r4, r5, pc}

  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    55da:	movs	r0, #218	; 0xda
    55dc:	bl	4fbc <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    55e0:	movs	r0, #0
    55e2:	add	sp, #12
    55e4:	pop	{r4, r5, pc}
    55e6:	nop

000055e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    55e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    55ec:	mov	r6, r0
    55ee:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    55f0:	movs	r0, #0
    55f2:	mov	r5, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    55f4:	ldrb.w	r1, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    55f8:	str	r2, [sp, #12]
    55fa:	strb.w	r0, [sp, #73]	; 0x49
    55fe:	strb.w	r0, [sp, #74]	; 0x4a
    5602:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5606:	cmp	r1, #0
    5608:	bne.n	5682 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    560a:	mov	r9, r3
    560c:	ldrb.w	r3, [r5, #49]	; 0x31
    5610:	tst.w	r3, #80	; 0x50
    5614:	beq.n	5682 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5616:	ldrb	r3, [r2, #0]
    5618:	mov	r1, r2
    561a:	cmp	r3, #47	; 0x2f
    561c:	beq.n	5664 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    561e:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5622:	add	r3, sp, #12
    5624:	add	r2, sp, #16
    5626:	mov	r0, r6
    5628:	bl	3f3c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    562c:	mov	r4, r0
    562e:	cmp	r0, #0
    5630:	beq.n	56d2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xea>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5632:	ldr	r3, [sp, #12]
    5634:	ldrb	r3, [r3, #0]
    5636:	cmp	r3, #0
    5638:	beq.n	56e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf8>
    563a:	ldrb.w	r3, [sp, #16]
    563e:	mov	r1, r5
    5640:	ldr	r2, [sp, #20]
    5642:	mov	r0, r6
    5644:	str.w	r8, [sp]
    5648:	bl	437c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    564c:	mov	r4, r0
    564e:	cbnz	r0, 56a0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb8>
      if (!pFlag || !mkdir(parent, &fname)) {
    5650:	cmp.w	r9, #0
    5654:	bne.n	5692 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
        DBG_FAIL_MACRO;
    5656:	movs	r0, #188	; 0xbc
    5658:	bl	4fbc <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    565c:	mov	r0, r4
    565e:	add	sp, #84	; 0x54
    5660:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5664:	adds	r1, #1
    5666:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5668:	ldrb	r3, [r1, #0]
    566a:	cmp	r3, #47	; 0x2f
    566c:	beq.n	5664 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    566e:	ldr	r1, [r5, #32]
    5670:	add	r0, sp, #24
    5672:	bl	3f0c <ExFatFile::openRoot(ExFatVolume*)>
    5676:	mov	r4, r0
    5678:	cmp	r0, #0
    567a:	beq.n	56ee <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x106>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    567c:	add	r5, sp, #24
    567e:	ldr	r1, [sp, #12]
    5680:	b.n	561e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    5682:	movs	r4, #0
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    5684:	movs	r0, #165	; 0xa5
    5686:	bl	4fbc <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    568a:	mov	r0, r4
    568c:	add	sp, #84	; 0x54
    568e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    5692:	mov	r1, r5
    5694:	add	r2, sp, #16
    5696:	mov	r0, r6
    5698:	bl	5574 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    569c:	cmp	r0, #0
    569e:	beq.n	5656 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    56a0:	mov	r4, r6
    56a2:	add	r7, sp, #24
    56a4:	add.w	lr, r6, #48	; 0x30
    56a8:	ldr	r0, [r4, #0]
    56aa:	adds	r4, #16
    56ac:	ldr.w	r1, [r4, #-12]
    56b0:	mov	r5, r7
    56b2:	ldr.w	r2, [r4, #-8]
    56b6:	adds	r7, #16
    56b8:	ldr.w	r3, [r4, #-4]
    56bc:	cmp	r4, lr
    56be:	stmia	r5!, {r0, r1, r2, r3}
    56c0:	bne.n	56a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc0>
    56c2:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    56c4:	add	r5, sp, #24
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    56c6:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    56c8:	mov	r0, r6
    56ca:	bl	3e38 <ExFatFile::close()>
    56ce:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    56d0:	b.n	5622 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    56d2:	movs	r0, #180	; 0xb4
    56d4:	bl	4fbc <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    56d8:	mov	r0, r4
    56da:	add	sp, #84	; 0x54
    56dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    56e0:	add	r2, sp, #16
    56e2:	mov	r1, r5
    56e4:	mov	r0, r6
    56e6:	bl	5574 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    56ea:	mov	r4, r0
    56ec:	b.n	565c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    56ee:	movs	r0, #173	; 0xad
    56f0:	bl	4fbc <dbgPrint(unsigned short)>
      goto fail;
    56f4:	b.n	565c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
    56f6:	nop

000056f8 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    56f8:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    56fa:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    56fe:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5700:	movs	r3, #0
    5702:	mov	r5, r0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5704:	ands.w	r4, r4, #24
    5708:	strb.w	r3, [sp, #49]	; 0x31
    570c:	strb.w	r3, [sp, #50]	; 0x32
    5710:	strb.w	r3, [sp, #51]	; 0x33
    5714:	strb.w	r3, [sp, #105]	; 0x69
    5718:	strb.w	r3, [sp, #106]	; 0x6a
    571c:	strb.w	r3, [sp, #107]	; 0x6b
    5720:	bne.n	5730 <ExFatFile::rename(ExFatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    5722:	movw	r0, #319	; 0x13f
    5726:	bl	4fbc <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    572a:	mov	r0, r4
    572c:	add	sp, #116	; 0x74
    572e:	pop	{r4, r5, r6, r7, pc}
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    5730:	ldr	r0, [r1, #32]
    5732:	ldr	r4, [r5, #32]
    5734:	cmp	r4, r0
    5736:	beq.n	5748 <ExFatFile::rename(ExFatFile*, char const*)+0x50>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    5738:	mov	r4, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    573a:	mov.w	r0, #324	; 0x144
    573e:	bl	4fbc <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    5742:	mov	r0, r4
    5744:	add	sp, #116	; 0x74
    5746:	pop	{r4, r5, r6, r7, pc}
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5748:	movw	r3, #2561	; 0xa01
    574c:	mov	r0, sp
    574e:	bl	47b0 <ExFatFile::open(ExFatFile*, char const*, int)>
    5752:	mov	r4, r0
    5754:	cbz	r0, 57c0 <ExFatFile::rename(ExFatFile*, char const*)+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    5756:	mov	r4, r5
    5758:	add.w	lr, r5, #48	; 0x30
    575c:	add	r7, sp, #56	; 0x38
    575e:	ldr	r0, [r4, #0]
    5760:	adds	r4, #16
    5762:	ldr.w	r1, [r4, #-12]
    5766:	mov	r6, r7
    5768:	ldr.w	r2, [r4, #-8]
    576c:	adds	r7, #16
    576e:	ldr.w	r3, [r4, #-4]
    5772:	cmp	r4, lr
    5774:	stmia	r6!, {r0, r1, r2, r3}
    5776:	bne.n	575e <ExFatFile::rename(ExFatFile*, char const*)+0x66>
    5778:	ldr	r0, [r4, #0]
  m_dirPos = file.m_dirPos;
    577a:	add	r2, sp, #36	; 0x24
    577c:	add.w	r3, r5, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    5780:	str	r0, [r7, #0]
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    5782:	ldrb.w	r4, [sp, #48]	; 0x30
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
    5786:	ldmia	r2, {r0, r1, r2}
    5788:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    578c:	ldrb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    5790:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    5792:	strb.w	r4, [r5, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5796:	orn	r3, r3, #127	; 0x7f
    579a:	strb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    579e:	bl	53fc <ExFatFile::sync()>
    57a2:	mov	r4, r0
    57a4:	cbz	r0, 57ca <ExFatFile::rename(ExFatFile*, char const*)+0xd2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    57a6:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    57a8:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    57aa:	movs	r3, #8
  return oldFile.remove();
    57ac:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    57ae:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    57b0:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    57b4:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    57b8:	bl	50c0 <ExFatFile::remove()>
    57bc:	mov	r4, r0
    57be:	b.n	572a <ExFatFile::rename(ExFatFile*, char const*)+0x32>
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    57c0:	mov.w	r0, #328	; 0x148
    57c4:	bl	4fbc <dbgPrint(unsigned short)>
    goto fail;
    57c8:	b.n	572a <ExFatFile::rename(ExFatFile*, char const*)+0x32>
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    DBG_FAIL_MACRO;
    57ca:	mov.w	r0, #336	; 0x150
    57ce:	bl	4fbc <dbgPrint(unsigned short)>
    goto fail;
    57d2:	b.n	572a <ExFatFile::rename(ExFatFile*, char const*)+0x32>

000057d4 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    57d4:	push	{r4, r5, r6, r7, lr}
    57d6:	ldrb.w	r3, [r0, #51]	; 0x33
    57da:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    57dc:	and.w	r2, r3, #2
    57e0:	cmp	r2, #0
    57e2:	beq.n	5890 <ExFatFile::truncate()+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    57e4:	ldr	r1, [r0, #28]
    57e6:	mov	r4, r0
    57e8:	cbz	r1, 584e <ExFatFile::truncate()+0x7a>
      return true;
  }
  if (isContiguous()) {
    57ea:	and.w	r3, r3, #64	; 0x40
    57ee:	and.w	r5, r3, #255	; 0xff
    57f2:	cbz	r3, 5856 <ExFatFile::truncate()+0x82>
    57f4:	ldr	r0, [r0, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    57f6:	ldr	r5, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    57f8:	ldrb.w	r2, [r0, #1085]	; 0x43d
    57fc:	ldrd	r6, r7, [r4, #8]
    5800:	adds	r2, #9
    5802:	adds.w	r6, r6, #4294967295
    5806:	uxtb	r2, r2
    5808:	adc.w	r7, r7, #4294967295
    580c:	rsb	lr, r2, #32
    5810:	sub.w	r3, r2, #32
    5814:	lsr.w	r2, r6, r2
    5818:	lsl.w	lr, r7, lr
    581c:	lsr.w	r3, r7, r3
    5820:	orr.w	r2, r2, lr
    5824:	orrs	r2, r3
    5826:	adds	r2, #1
    if (m_curCluster) {
    5828:	cmp	r5, #0
    582a:	beq.n	58a2 <ExFatFile::truncate()+0xce>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    582c:	subs	r1, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    582e:	adds	r3, r5, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5830:	subs	r5, r1, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    5832:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    5834:	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5836:	cbz	r2, 586a <ExFatFile::truncate()+0x96>
    5838:	movs	r3, #0
    583a:	ldr	r1, [sp, #4]
    583c:	bl	4c10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5840:	mov	r5, r0
    5842:	cbnz	r0, 586a <ExFatFile::truncate()+0x96>
      DBG_FAIL_MACRO;
    5844:	movw	r0, #599	; 0x257
    5848:	bl	4fbc <dbgPrint(unsigned short)>
      goto fail;
    584c:	b.n	5850 <ExFatFile::truncate()+0x7c>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    584e:	movs	r5, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    5850:	mov	r0, r5
    5852:	add	sp, #12
    5854:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    5856:	ldr	r3, [r0, #24]
    5858:	cbnz	r3, 58a8 <ExFatFile::truncate()+0xd4>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    585a:	str	r1, [sp, #4]
      m_firstCluster = 0;
    585c:	str	r3, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    585e:	ldr	r0, [r4, #32]
    5860:	bl	4df8 <ExFatPartition::freeChain(unsigned long)>
    5864:	mov	r5, r0
    5866:	cmp	r0, #0
    5868:	beq.n	58e2 <ExFatFile::truncate()+0x10e>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    586a:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    586e:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5870:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5874:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5878:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    587c:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    5880:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    5884:	bl	53fc <ExFatFile::sync()>
    5888:	mov	r5, r0

 fail:
  return false;
}
    588a:	mov	r0, r5
    588c:	add	sp, #12
    588e:	pop	{r4, r5, r6, r7, pc}
    5890:	and.w	r5, r2, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    5894:	movw	r0, #583	; 0x247
    5898:	bl	4fbc <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    589c:	mov	r0, r5
    589e:	add	sp, #12
    58a0:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    58a2:	str	r1, [sp, #4]
      m_firstCluster = 0;
    58a4:	str	r5, [r4, #28]
    58a6:	b.n	5836 <ExFatFile::truncate()+0x62>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    58a8:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    58aa:	mov	r1, r3
    58ac:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    58ae:	str.w	r5, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    58b2:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    58b6:	sxtb	r0, r0
      if (fg < 0) {
    58b8:	cmp	r0, #0
    58ba:	blt.n	58ec <ExFatFile::truncate()+0x118>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    58bc:	bne.n	58c6 <ExFatFile::truncate()+0xf2>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    58be:	ldr	r1, [sp, #4]
    58c0:	cmp	r1, #0
    58c2:	beq.n	586a <ExFatFile::truncate()+0x96>
    58c4:	b.n	585e <ExFatFile::truncate()+0x8a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    58c6:	mov.w	r2, #4294967295
    58ca:	ldr	r1, [r4, #24]
    58cc:	ldr	r0, [r4, #32]
    58ce:	bl	4da8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    58d2:	mov	r5, r0
    58d4:	cmp	r0, #0
    58d6:	bne.n	58be <ExFatFile::truncate()+0xea>
          DBG_FAIL_MACRO;
    58d8:	movw	r0, #614	; 0x266
    58dc:	bl	4fbc <dbgPrint(unsigned short)>
          goto fail;
    58e0:	b.n	5850 <ExFatFile::truncate()+0x7c>
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
        DBG_FAIL_MACRO;
    58e2:	mov.w	r0, #624	; 0x270
    58e6:	bl	4fbc <dbgPrint(unsigned short)>
        goto fail;
    58ea:	b.n	5850 <ExFatFile::truncate()+0x7c>
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
      if (fg < 0) {
        DBG_FAIL_MACRO;
    58ec:	mov.w	r0, #608	; 0x260
    58f0:	bl	4fbc <dbgPrint(unsigned short)>
        goto fail;
    58f4:	b.n	5850 <ExFatFile::truncate()+0x7c>
    58f6:	nop

000058f8 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    58f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58fc:	ldrb.w	r3, [r0, #51]	; 0x33
    5900:	sub	sp, #20
    5902:	mov	r6, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5904:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5906:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5908:	bpl.w	5b2e <ExFatFile::write(void const*, unsigned int)+0x236>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    590c:	lsls	r2, r3, #28
    590e:	mov	r8, r1
    5910:	bmi.w	5b5c <ExFatFile::write(void const*, unsigned int)+0x264>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5914:	ldr	r3, [sp, #4]
    5916:	cmp	r3, #0
    5918:	beq.w	5bb4 <ExFatFile::write(void const*, unsigned int)+0x2bc>
    591c:	mov	r1, r6
    591e:	ldr	r7, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5920:	mov.w	sl, #1
    5924:	mov	r9, r8
    5926:	ldrd	r2, r3, [r1], #24
    592a:	mov	fp, r2
    592c:	str	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    592e:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5930:	ldr	r1, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5932:	ldr.w	r4, [r0, #1072]	; 0x430
    5936:	and.w	r4, r4, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    593a:	ubfx	r8, r4, #0, #9
    if (clusterOffset == 0) {
    593e:	cbnz	r4, 5998 <ExFatFile::write(void const*, unsigned int)+0xa0>
      // start of new cluster
      if (m_curCluster != 0) {
    5940:	cmp	r1, #0
    5942:	beq.w	5adc <ExFatFile::write(void const*, unsigned int)+0x1e4>
        int fg;

        if (isContiguous()) {
    5946:	ldrb.w	r3, [r6, #51]	; 0x33
    594a:	lsls	r3, r3, #25
    594c:	bpl.w	5b20 <ExFatFile::write(void const*, unsigned int)+0x228>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5950:	ldrb.w	r2, [r0, #1085]	; 0x43d
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    5954:	ldr	r3, [r6, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5956:	adds	r2, #9
    5958:	ldrd	fp, ip, [r6, #8]
    595c:	uxtb	r2, r2
    595e:	adds.w	fp, fp, #4294967295
    5962:	rsb	lr, r2, #32
    5966:	sub.w	r5, r2, #32
    596a:	adc.w	ip, ip, #4294967295
    596e:	lsr.w	r2, fp, r2
    5972:	lsl.w	lr, ip, lr
    5976:	lsr.w	r5, ip, r5
    597a:	orr.w	r2, r2, lr
    597e:	orrs	r2, r5
    5980:	add	r2, r3
    5982:	cmp	r1, r2
    5984:	bcc.w	5b08 <ExFatFile::write(void const*, unsigned int)+0x210>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    5988:	mov	r0, r6
    598a:	bl	4ff8 <ExFatFile::addCluster()>
    598e:	cmp	r0, #0
    5990:	beq.w	5ba0 <ExFatFile::write(void const*, unsigned int)+0x2a8>
    5994:	ldr	r0, [r6, #32]
    5996:	ldr	r1, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5998:	lsrs	r4, r4, #9
    599a:	subs	r1, #2
    599c:	ldr.w	r5, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    59a0:	ldrb.w	r3, [r0, #1085]	; 0x43d
    59a4:	add	r5, r4
    59a6:	lsls	r1, r3
    59a8:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    59aa:	cmp.w	r8, #0
    59ae:	bne.n	5a6c <ExFatFile::write(void const*, unsigned int)+0x174>
    59b0:	cmp.w	r7, #512	; 0x200
    59b4:	bcc.n	5a6c <ExFatFile::write(void const*, unsigned int)+0x174>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    59b6:	cmp.w	r7, #1024	; 0x400
    59ba:	bcc.w	5ae4 <ExFatFile::write(void const*, unsigned int)+0x1ec>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    59be:	lsl.w	r2, sl, r3
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    59c2:	lsrs	r5, r7, #9
    59c4:	ldr.w	r3, [r0, #532]	; 0x214
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    59c8:	subs	r2, r2, r4
    59ca:	mov	r4, r5
    59cc:	cmp	r5, r2
    59ce:	it	cs
    59d0:	movcs	r4, r2
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    59d2:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    59d4:	mov.w	r5, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    59d8:	bhi.n	59ee <ExFatFile::write(void const*, unsigned int)+0xf6>
    59da:	adds	r2, r4, r1
    59dc:	cmp	r2, r3
    59de:	bls.n	59ee <ExFatFile::write(void const*, unsigned int)+0xf6>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    59e0:	add.w	r0, r0, #524	; 0x20c
    59e4:	str	r1, [sp, #8]
    59e6:	bl	4980 <FsCache::invalidate()>
    59ea:	ldr	r0, [r6, #32]
    59ec:	ldr	r1, [sp, #8]
    59ee:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    59f2:	mov	r3, r4
    59f4:	mov	r2, r9
    59f6:	ldr	r4, [r0, #0]
    59f8:	ldr	r4, [r4, #28]
    59fa:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    59fc:	cmp	r0, #0
    59fe:	beq.w	5b88 <ExFatFile::write(void const*, unsigned int)+0x290>
    5a02:	mov	r0, r5
    5a04:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    5a06:	add	r9, r5
    toWrite -= n;
    5a08:	subs	r7, r7, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5a0a:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5a0e:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5a12:	adds.w	fp, r2, r0
    5a16:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5a1a:	cmp	r5, ip
    5a1c:	it	eq
    5a1e:	cmpeq	r4, fp
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5a20:	strd	fp, ip, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5a24:	bcs.n	5a36 <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5a26:	ldrb.w	r1, [r6, #51]	; 0x33
    5a2a:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    5a2e:	strd	fp, ip, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5a32:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5a36:	cmp	r7, #0
    5a38:	bne.w	592e <ExFatFile::write(void const*, unsigned int)+0x36>
    5a3c:	mov	r2, fp
    5a3e:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    5a40:	ldrd	r0, r1, [r6, #8]
    5a44:	cmp	r1, r3
    5a46:	it	eq
    5a48:	cmpeq	r0, r2
    5a4a:	bcc.w	5b74 <ExFatFile::write(void const*, unsigned int)+0x27c>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5a4e:	ldr	r3, [pc, #364]	; (5bbc <ExFatFile::write(void const*, unsigned int)+0x2c4>)
    5a50:	ldr	r3, [r3, #0]
    5a52:	cmp	r3, #0
    5a54:	beq.w	5b9c <ExFatFile::write(void const*, unsigned int)+0x2a4>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5a58:	ldrb.w	r3, [r6, #51]	; 0x33
    5a5c:	ldr	r0, [sp, #4]
    5a5e:	orn	r3, r3, #127	; 0x7f
    5a62:	strb.w	r3, [r6, #51]	; 0x33

fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return -1;
}
    5a66:	add	sp, #20
    5a68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5a6c:	cmp.w	r8, #0
    5a70:	bne.n	5ac4 <ExFatFile::write(void const*, unsigned int)+0x1cc>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5a72:	add.w	r0, r0, #524	; 0x20c
    5a76:	ldrd	r2, r3, [r6, #16]
    5a7a:	ldrd	r4, r5, [r6]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5a7e:	cmp	r5, r3
    5a80:	it	eq
    5a82:	cmpeq	r4, r2
    5a84:	ite	cc
    5a86:	movcc	r2, #1
    5a88:	movcs	r2, #3
    5a8a:	bl	498c <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5a8e:	cbz	r0, 5ad2 <ExFatFile::write(void const*, unsigned int)+0x1da>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5a90:	rsb	r5, r8, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5a94:	add	r0, r8
    5a96:	mov	r1, r9
    5a98:	cmp	r5, r7
    5a9a:	it	cs
    5a9c:	movcs	r5, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5a9e:	add	r8, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5aa0:	mov	r2, r5
    5aa2:	bl	9c5c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5aa6:	cmp.w	r8, #512	; 0x200
    5aaa:	bne.n	5a02 <ExFatFile::write(void const*, unsigned int)+0x10a>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    5aac:	ldr	r0, [r6, #32]
    5aae:	add.w	r0, r0, #524	; 0x20c
    5ab2:	bl	4a18 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    5ab6:	cmp	r0, #0
    5ab8:	bne.n	5a02 <ExFatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
    5aba:	mov.w	r0, #736	; 0x2e0
    5abe:	bl	4fbc <dbgPrint(unsigned short)>
          goto fail;
    5ac2:	b.n	5b36 <ExFatFile::write(void const*, unsigned int)+0x23e>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5ac4:	movs	r2, #1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5ac6:	add.w	r0, r0, #524	; 0x20c
    5aca:	bl	498c <FsCache::get(unsigned long, unsigned char)>
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5ace:	cmp	r0, #0
    5ad0:	bne.n	5a90 <ExFatFile::write(void const*, unsigned int)+0x198>
        DBG_FAIL_MACRO;
    5ad2:	mov.w	r0, #728	; 0x2d8
    5ad6:	bl	4fbc <dbgPrint(unsigned short)>
        goto fail;
    5ada:	b.n	5b36 <ExFatFile::write(void const*, unsigned int)+0x23e>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5adc:	ldr	r1, [r6, #28]
    5ade:	cbz	r1, 5b0e <ExFatFile::write(void const*, unsigned int)+0x216>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5ae0:	str	r1, [r6, #24]
    5ae2:	b.n	5998 <ExFatFile::write(void const*, unsigned int)+0xa0>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    5ae4:	ldr.w	r3, [r0, #532]	; 0x214
    5ae8:	cmp	r1, r3
    5aea:	beq.n	5b4c <ExFatFile::write(void const*, unsigned int)+0x254>
    5aec:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5af0:	mov	r2, r9
    5af2:	ldr	r3, [r0, #0]
    5af4:	ldr	r3, [r3, #24]
    5af6:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5af8:	cmp	r0, #0
    5afa:	beq.n	5b92 <ExFatFile::write(void const*, unsigned int)+0x29a>
    5afc:	mov.w	r0, #512	; 0x200
    5b00:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5b02:	mov.w	r5, #512	; 0x200
    5b06:	b.n	5a06 <ExFatFile::write(void const*, unsigned int)+0x10e>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5b08:	adds	r1, #1
    5b0a:	str	r1, [r6, #24]
    5b0c:	b.n	5998 <ExFatFile::write(void const*, unsigned int)+0xa0>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5b0e:	mov	r0, r6
    5b10:	bl	4ff8 <ExFatFile::addCluster()>
    5b14:	cmp	r0, #0
    5b16:	beq.n	5baa <ExFatFile::write(void const*, unsigned int)+0x2b2>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5b18:	ldr	r1, [r6, #24]
    5b1a:	ldr	r0, [r6, #32]
    5b1c:	str	r1, [r6, #28]
    5b1e:	b.n	5998 <ExFatFile::write(void const*, unsigned int)+0xa0>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5b20:	ldr	r2, [sp, #12]
    5b22:	bl	4d14 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    5b26:	cmp	r0, #0
    5b28:	bne.w	5994 <ExFatFile::write(void const*, unsigned int)+0x9c>
    5b2c:	b.n	5988 <ExFatFile::write(void const*, unsigned int)+0x90>
  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    5b2e:	mov.w	r0, #652	; 0x28c
    5b32:	bl	4fbc <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5b36:	ldrb.w	r3, [r6, #50]	; 0x32
  return -1;
    5b3a:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5b3e:	orr.w	r3, r3, #1
    5b42:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
}
    5b46:	add	sp, #20
    5b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5b4c:	add.w	r0, r0, #524	; 0x20c
    5b50:	str	r1, [sp, #8]
    5b52:	bl	4980 <FsCache::invalidate()>
    5b56:	ldr	r0, [r6, #32]
    5b58:	ldr	r1, [sp, #8]
    5b5a:	b.n	5aec <ExFatFile::write(void const*, unsigned int)+0x1f4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5b5c:	ldrd	r2, r3, [r0, #16]
    5b60:	bl	4254 <ExFatFile::seekSet(unsigned long long)>
    5b64:	cmp	r0, #0
    5b66:	bne.w	5914 <ExFatFile::write(void const*, unsigned int)+0x1c>
      DBG_FAIL_MACRO;
    5b6a:	movw	r0, #658	; 0x292
    5b6e:	bl	4fbc <dbgPrint(unsigned short)>
      goto fail;
    5b72:	b.n	5b36 <ExFatFile::write(void const*, unsigned int)+0x23e>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5b74:	ldrb.w	r1, [r6, #51]	; 0x33
    5b78:	ldr	r0, [sp, #4]
    5b7a:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5b7e:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5b82:	strb.w	r1, [r6, #51]	; 0x33
    5b86:	b.n	5b46 <ExFatFile::write(void const*, unsigned int)+0x24e>
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
        DBG_FAIL_MACRO;
    5b88:	movw	r0, #758	; 0x2f6
    5b8c:	bl	4fbc <dbgPrint(unsigned short)>
        goto fail;
    5b90:	b.n	5b36 <ExFatFile::write(void const*, unsigned int)+0x23e>
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    5b92:	movw	r0, #769	; 0x301
    5b96:	bl	4fbc <dbgPrint(unsigned short)>
        goto fail;
    5b9a:	b.n	5b36 <ExFatFile::write(void const*, unsigned int)+0x23e>
    5b9c:	ldr	r0, [sp, #4]
    5b9e:	b.n	5b46 <ExFatFile::write(void const*, unsigned int)+0x24e>
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5ba0:	movw	r0, #689	; 0x2b1
    5ba4:	bl	4fbc <dbgPrint(unsigned short)>
            goto fail;
    5ba8:	b.n	5b36 <ExFatFile::write(void const*, unsigned int)+0x23e>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5baa:	movw	r0, #697	; 0x2b9
    5bae:	bl	4fbc <dbgPrint(unsigned short)>
            goto fail;
    5bb2:	b.n	5b36 <ExFatFile::write(void const*, unsigned int)+0x23e>
    5bb4:	ldrd	r2, r3, [r6]
    5bb8:	b.n	5a40 <ExFatFile::write(void const*, unsigned int)+0x148>
    5bba:	nop
    5bbc:	.word	0x2000607c

00005bc0 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    5bc0:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5bc2:	movs	r1, #10
    5bc4:	mov	r5, r0
    5bc6:	ldr	r0, [pc, #40]	; (5bf0 <dbgPrint(unsigned short)+0x30>)
    5bc8:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5bcc:	ldr	r4, [pc, #36]	; (5bf4 <dbgPrint(unsigned short)+0x34>)
    5bce:	movs	r1, #11
    5bd0:	ldr	r0, [pc, #36]	; (5bf8 <dbgPrint(unsigned short)+0x38>)
    5bd2:	bl	a3cc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5bd6:	movs	r0, #46	; 0x2e
    5bd8:	bl	a3a0 <usb_serial_putchar>
    5bdc:	mov	r1, r5
    5bde:	mov	r0, r4
    5be0:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5be4:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    5be6:	ldmia.w	sp!, {r3, r4, r5, lr}
    5bea:	b.w	b6f8 <Print::println()>
    5bee:	nop
    5bf0:	.word	0x2000034c
    5bf4:	.word	0x20000c48
    5bf8:	.word	0x20000398

00005bfc <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5bfc:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5bfe:	push	{r4, r5, r6, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5c00:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5c04:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5c06:	ldr	r0, [r0, #8]
    5c08:	mov	r1, r5
    5c0a:	bl	6e70 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5c0e:	mov	r6, r0
    5c10:	cbz	r0, 5c34 <FatFile::addCluster()+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5c12:	cbz	r5, 5c2c <FatFile::addCluster()+0x30>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5c14:	ldr	r3, [r4, #16]
    5c16:	adds	r5, #1
    5c18:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5c1a:	ldrb	r3, [r4, #2]
    5c1c:	it	ne
    5c1e:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c22:	orn	r3, r3, #127	; 0x7f
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5c26:	mov	r0, r6
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c28:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5c2a:	pop	{r4, r5, r6, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5c2c:	ldrb	r3, [r4, #2]
    5c2e:	orr.w	r3, r3, #64	; 0x40
    5c32:	b.n	5c22 <FatFile::addCluster()+0x26>
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    5c34:	movs	r0, #35	; 0x23
    5c36:	bl	5bc0 <dbgPrint(unsigned short)>
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5c3a:	mov	r0, r6
    5c3c:	pop	{r4, r5, r6, pc}
    5c3e:	nop

00005c40 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5c40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5c44:	ldrb	r3, [r0, #0]
    5c46:	and.w	r3, r3, #32
    5c4a:	cmp	r3, #0
    5c4c:	bne.n	5cd2 <FatFile::addDirCluster()+0x92>
    5c4e:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5c52:	ldr	r2, [r0, #20]
    5c54:	ldr	r3, [pc, #184]	; (5d10 <FatFile::addDirCluster()+0xd0>)
    5c56:	mov	r5, r0
    5c58:	cmp	r2, r3
    5c5a:	bhi.n	5cc4 <FatFile::addDirCluster()+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5c5c:	bl	5bfc <FatFile::addCluster()>
    5c60:	mov	r8, r0
    5c62:	cmp	r0, #0
    5c64:	beq.n	5ce2 <FatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5c66:	ldr	r1, [r5, #16]
    5c68:	ldr	r0, [r5, #8]
    5c6a:	bl	6d44 <FatPartition::clusterStartSector(unsigned long) const>
    5c6e:	mov	r6, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5c70:	ldr	r0, [r5, #8]
    5c72:	movs	r2, #5
    5c74:	mov	r1, r6
    5c76:	adds	r0, #40	; 0x28
    5c78:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5c7c:	mov	r7, r0
    5c7e:	cmp	r0, #0
    5c80:	beq.n	5d06 <FatFile::addDirCluster()+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5c82:	mov.w	r2, #512	; 0x200
    5c86:	mov	r1, r4
    5c88:	bl	cf4c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5c8c:	ldr	r3, [r5, #8]
    5c8e:	ldrb	r2, [r3, #4]
    5c90:	cmp	r2, #1
    5c92:	bls.n	5cee <FatFile::addDirCluster()+0xae>
    5c94:	movs	r4, #1
    5c96:	b.n	5ca2 <FatFile::addDirCluster()+0x62>
    5c98:	ldr	r3, [r5, #8]
    5c9a:	uxtb	r4, r4
    5c9c:	ldrb	r2, [r3, #4]
    5c9e:	cmp	r2, r4
    5ca0:	bls.n	5cee <FatFile::addDirCluster()+0xae>
    5ca2:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5ca4:	adds	r1, r4, r6
    5ca6:	mov	r2, r7
    5ca8:	adds	r4, #1
    5caa:	ldr	r3, [r0, #0]
    5cac:	ldr	r3, [r3, #24]
    5cae:	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5cb0:	mov	r3, r0
    5cb2:	cmp	r0, #0
    5cb4:	bne.n	5c98 <FatFile::addDirCluster()+0x58>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5cb6:	mov	r8, r3
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    if (!m_vol->writeSector(sector + i, pc->data)) {
      DBG_FAIL_MACRO;
    5cb8:	movs	r0, #83	; 0x53
    5cba:	bl	5bc0 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5cbe:	mov	r0, r8
    5cc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5cc4:	movs	r0, #66	; 0x42
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5cc6:	mov	r8, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5cc8:	bl	5bc0 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5ccc:	mov	r0, r8
    5cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5cd2:	mov.w	r8, #0
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    5cd6:	movs	r0, #61	; 0x3d
    5cd8:	bl	5bc0 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5cdc:	mov	r0, r8
    5cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    5ce2:	movs	r0, #70	; 0x46
    5ce4:	bl	5bc0 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5ce8:	mov	r0, r8
    5cea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5cee:	ldrb	r3, [r3, #6]
    5cf0:	mov.w	r2, #512	; 0x200
    5cf4:	ldr	r1, [r5, #20]
  return true;

fail:
  return false;
}
    5cf6:	mov	r0, r8
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5cf8:	lsl.w	r3, r2, r3
    5cfc:	uxtah	r3, r1, r3
    5d00:	str	r3, [r5, #20]
  return true;

fail:
  return false;
}
    5d02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    5d06:	movs	r0, #76	; 0x4c
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5d08:	mov	r8, r7
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    5d0a:	bl	5bc0 <dbgPrint(unsigned short)>
    5d0e:	b.n	5ccc <FatFile::addDirCluster()+0x8c>
    5d10:	.word	0x001ffdff

00005d14 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5d14:	push	{r3, r4, r5, lr}
    5d16:	mov	r5, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5d18:	ldr	r0, [r0, #8]
    5d1a:	mov	r2, r1
    5d1c:	adds	r0, #40	; 0x28
    5d1e:	ldr	r1, [r5, #24]
    5d20:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5d24:	mov	r4, r0
    5d26:	cbz	r0, 5d34 <FatFile::cacheDirEntry(unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5d28:	ldrh	r0, [r5, #4]
    5d2a:	and.w	r0, r0, #15
    5d2e:	add.w	r0, r4, r0, lsl #5

fail:
  return nullptr;
}
    5d32:	pop	{r3, r4, r5, pc}
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    DBG_FAIL_MACRO;
    5d34:	movs	r0, #101	; 0x65
    5d36:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);

fail:
  return nullptr;
    5d3a:	mov	r0, r4
    5d3c:	pop	{r3, r4, r5, pc}
    5d3e:	nop

00005d40 <FatFile::sync() [clone .part.38]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5d40:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5d42:	ldrsb.w	r3, [r0, #2]
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5d46:	sub	sp, #12
    5d48:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5d4a:	cmp	r3, #0
    5d4c:	blt.n	5d8a <FatFile::sync() [clone .part.38]+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5d4e:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5d50:	add.w	r0, r5, #40	; 0x28
    5d54:	bl	6d34 <FatCache::sync()>
    5d58:	cbnz	r0, 5d70 <FatFile::sync() [clone .part.38]+0x30>
    return true;
  }
  DBG_FAIL_MACRO;
    5d5a:	movw	r0, #1183	; 0x49f
    5d5e:	bl	5bc0 <dbgPrint(unsigned short)>

fail:
  m_error |= WRITE_ERROR;
    5d62:	ldrb	r3, [r4, #1]
  return false;
    5d64:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5d66:	orr.w	r3, r3, #1
    5d6a:	strb	r3, [r4, #1]
  return false;
}
    5d6c:	add	sp, #12
    5d6e:	pop	{r4, r5, pc}
    5d70:	add.w	r0, r5, #564	; 0x234
    5d74:	bl	6d34 <FatCache::sync()>
    5d78:	cmp	r0, #0
    5d7a:	beq.n	5d5a <FatFile::sync() [clone .part.38]+0x1a>
    5d7c:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5d7e:	ldr	r3, [r0, #0]
    5d80:	ldr	r3, [r3, #20]
    5d82:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5d84:	cmp	r0, #0
    5d86:	beq.n	5d5a <FatFile::sync() [clone .part.38]+0x1a>
    5d88:	b.n	5d6c <FatFile::sync() [clone .part.38]+0x2c>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5d8a:	movs	r1, #1
    5d8c:	bl	5d14 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5d90:	mov	r5, r0
    5d92:	cbz	r0, 5dd6 <FatFile::sync() [clone .part.38]+0x96>
    5d94:	ldrb	r3, [r0, #0]
    5d96:	cmp	r3, #229	; 0xe5
    5d98:	beq.n	5dd6 <FatFile::sync() [clone .part.38]+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5d9a:	ldrb	r3, [r4, #0]
    5d9c:	lsls	r3, r3, #28
    5d9e:	bpl.n	5da4 <FatFile::sync() [clone .part.38]+0x64>
      setLe32(dir->fileSize, m_fileSize);
    5da0:	ldr	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5da2:	str	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5da4:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5da6:	ldr	r1, [pc, #56]	; (5de0 <FatFile::sync() [clone .part.38]+0xa0>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5da8:	lsrs	r2, r3, #16
    5daa:	strh	r3, [r5, #26]
    5dac:	ldr	r3, [r1, #0]
    5dae:	strh	r2, [r5, #20]
    5db0:	cbz	r3, 5dcc <FatFile::sync() [clone .part.38]+0x8c>
      FsDateTime::callback(&date, &time, &ms10);
    5db2:	add.w	r2, sp, #3
    5db6:	add.w	r1, sp, #6
    5dba:	add	r0, sp, #4
    5dbc:	blx	r3
      setLe16(dir->modifyDate, date);
    5dbe:	ldrh.w	r3, [sp, #4]
    5dc2:	ldrh.w	r2, [sp, #6]
    5dc6:	strh	r3, [r5, #24]
    5dc8:	strh	r3, [r5, #18]
    5dca:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5dcc:	ldrb	r3, [r4, #2]
    5dce:	and.w	r3, r3, #127	; 0x7f
    5dd2:	strb	r3, [r4, #2]
    5dd4:	b.n	5d4e <FatFile::sync() [clone .part.38]+0xe>
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
    5dd6:	movw	r0, #1158	; 0x486
    5dda:	bl	5bc0 <dbgPrint(unsigned short)>
    5dde:	b.n	5d62 <FatFile::sync() [clone .part.38]+0x22>
    5de0:	.word	0x2000607c

00005de4 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5de4:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5de6:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5de8:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5dea:	cbnz	r3, 5df6 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5dec:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5dee:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5df0:	strb	r3, [r4, #0]
  m_flags = 0;
    5df2:	strb	r3, [r4, #2]
  return rtn;
}
    5df4:	pop	{r4, pc}
    5df6:	bl	5d40 <FatFile::sync() [clone .part.38]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5dfa:	movs	r3, #0
    5dfc:	strb	r3, [r4, #0]
  m_flags = 0;
    5dfe:	strb	r3, [r4, #2]
  return rtn;
}
    5e00:	pop	{r4, pc}
    5e02:	nop

00005e04 <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5e04:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    5e06:	ldrb	r4, [r0, #0]
    5e08:	cbnz	r4, 5e3a <FatFile::openRoot(FatVolume*)+0x36>
    5e0a:	mov	r6, r1
    5e0c:	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5e0e:	movs	r2, #36	; 0x24
    5e10:	mov	r1, r4
    5e12:	bl	cf4c <memset>

  m_vol = vol;
    5e16:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    5e18:	ldrb	r3, [r6, #7]
    5e1a:	cmp	r3, #16
    5e1c:	beq.n	5e2e <FatFile::openRoot(FatVolume*)+0x2a>
    5e1e:	cmp	r3, #32
    5e20:	bne.n	5e46 <FatFile::openRoot(FatVolume*)+0x42>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5e22:	movs	r3, #64	; 0x40
    5e24:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5e26:	movs	r3, #1
  return true;
    5e28:	mov	r0, r3
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5e2a:	strb	r3, [r5, #2]
  return true;

fail:
  return false;
}
    5e2c:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5e2e:	movs	r3, #32
    5e30:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5e32:	movs	r3, #1
  return true;
    5e34:	mov	r0, r3
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5e36:	strb	r3, [r5, #2]
  return true;

fail:
  return false;
}
    5e38:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    5e3a:	movw	r0, #639	; 0x27f
    5e3e:	bl	5bc0 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5e42:	movs	r0, #0
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    5e44:	pop	{r4, r5, r6, pc}
  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    break;

  default:
    DBG_FAIL_MACRO;
    5e46:	movw	r0, #658	; 0x292
    5e4a:	bl	5bc0 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5e4e:	mov	r0, r4
    5e50:	pop	{r4, r5, r6, pc}
    5e52:	nop

00005e54 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5e54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e58:	mov	r6, r0
    5e5a:	sub	sp, #72	; 0x48
    5e5c:	movs	r0, #0
    5e5e:	mov	r8, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5e60:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5e62:	str	r2, [sp, #4]
    5e64:	strb.w	r0, [sp, #36]	; 0x24
    5e68:	strb.w	r0, [sp, #37]	; 0x25
    5e6c:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5e70:	cmp	r1, #0
    5e72:	bne.n	5f04 <FatFile::open(FatFile*, char const*, int)+0xb0>
    5e74:	mov	sl, r3
    5e76:	ldrb.w	r3, [r8]
    5e7a:	tst.w	r3, #112	; 0x70
    5e7e:	beq.n	5f04 <FatFile::open(FatFile*, char const*, int)+0xb0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5e80:	ldrb	r3, [r2, #0]
    5e82:	mov	r0, r2
    5e84:	cmp	r3, #47	; 0x2f
    5e86:	beq.n	5ee2 <FatFile::open(FatFile*, char const*, int)+0x8e>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5e88:	mov.w	r9, #0
    5e8c:	b.n	5e98 <FatFile::open(FatFile*, char const*, int)+0x44>
    5e8e:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5e90:	strb.w	r9, [r6]
  m_flags = 0;
    5e94:	strb.w	r9, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5e98:	add	r2, sp, #4
    5e9a:	add	r1, sp, #12
    5e9c:	bl	73a8 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ea0:	add	r2, sp, #12
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5ea2:	mov	r7, r0
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ea4:	mov	r1, r8
    5ea6:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5ea8:	cmp	r0, #0
    5eaa:	beq.n	5f16 <FatFile::open(FatFile*, char const*, int)+0xc2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5eac:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5eae:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5eb0:	ldrb	r4, [r4, #0]
    5eb2:	cmp	r4, #0
    5eb4:	beq.n	5f26 <FatFile::open(FatFile*, char const*, int)+0xd2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5eb6:	bl	7944 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5eba:	mov	r5, r6
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ebc:	mov	r7, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5ebe:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ec0:	cmp	r0, #0
    5ec2:	beq.n	5f3c <FatFile::open(FatFile*, char const*, int)+0xe8>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5ec4:	ldrb	r7, [r6, #0]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5ec6:	add.w	r8, sp, #36	; 0x24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5eca:	ldmia	r5!, {r0, r1, r2, r3}
    5ecc:	stmia	r4!, {r0, r1, r2, r3}
    5ece:	ldmia	r5!, {r0, r1, r2, r3}
    5ed0:	ldr	r5, [r5, #0]
    5ed2:	stmia	r4!, {r0, r1, r2, r3}
    5ed4:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5ed6:	cmp	r7, #0
    5ed8:	beq.n	5e8e <FatFile::open(FatFile*, char const*, int)+0x3a>
    5eda:	mov	r0, r6
    5edc:	bl	5d40 <FatFile::sync() [clone .part.38]>
    5ee0:	b.n	5e8e <FatFile::open(FatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5ee2:	adds	r0, #1
    5ee4:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5ee6:	ldrb	r3, [r0, #0]
    5ee8:	cmp	r3, #47	; 0x2f
    5eea:	beq.n	5ee2 <FatFile::open(FatFile*, char const*, int)+0x8e>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5eec:	ldr.w	r1, [r8, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    5ef0:	cbz	r3, 5f4c <FatFile::open(FatFile*, char const*, int)+0xf8>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5ef2:	add	r0, sp, #36	; 0x24
    5ef4:	bl	5e04 <FatFile::openRoot(FatVolume*)>
    5ef8:	mov	r7, r0
    5efa:	cbz	r0, 5f56 <FatFile::open(FatFile*, char const*, int)+0x102>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5efc:	add.w	r8, sp, #36	; 0x24
    5f00:	ldr	r0, [sp, #4]
    5f02:	b.n	5e88 <FatFile::open(FatFile*, char const*, int)+0x34>
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    5f04:	mov.w	r0, #418	; 0x1a2
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5f08:	movs	r7, #0
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    5f0a:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5f0e:	mov	r0, r7
    5f10:	add	sp, #72	; 0x48
    5f12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    5f16:	mov.w	r0, #436	; 0x1b4
    5f1a:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5f1e:	mov	r0, r7
    5f20:	add	sp, #72	; 0x48
    5f22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5f26:	mov	r3, sl
    5f28:	add	r2, sp, #12
    5f2a:	mov	r1, r8
    5f2c:	mov	r0, r6
    5f2e:	bl	7944 <FatFile::open(FatFile*, fname_t*, int)>
    5f32:	mov	r7, r0

fail:
  return false;
}
    5f34:	mov	r0, r7
    5f36:	add	sp, #72	; 0x48
    5f38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    5f3c:	movw	r0, #443	; 0x1bb
    5f40:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5f44:	mov	r0, r7
    5f46:	add	sp, #72	; 0x48
    5f48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5f4c:	mov	r0, r6
    5f4e:	bl	5e04 <FatFile::openRoot(FatVolume*)>
    5f52:	mov	r7, r0
    5f54:	b.n	5f0e <FatFile::open(FatFile*, char const*, int)+0xba>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    5f56:	movw	r0, #429	; 0x1ad
    5f5a:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    5f5e:	b.n	5f0e <FatFile::open(FatFile*, char const*, int)+0xba>

00005f60 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5f60:	cbz	r1, 5f6a <FatFile::open(FatVolume*, char const*, int)+0xa>
    5f62:	add.w	r1, r1, #1088	; 0x440
    5f66:	b.w	5e54 <FatFile::open(FatFile*, char const*, int)>
}
    5f6a:	mov	r0, r1
    5f6c:	bx	lr
    5f6e:	nop

00005f70 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5f70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5f74:	ldrb	r3, [r0, #2]
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5f76:	sub	sp, #12
    5f78:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5f7a:	lsls	r7, r3, #31
    5f7c:	bpl.w	613c <FatFile::read(void*, unsigned int)+0x1cc>
    5f80:	mov	r7, r1
    5f82:	ldrb	r1, [r0, #0]
    5f84:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5f86:	lsls	r6, r1, #28
    5f88:	bmi.w	6092 <FatFile::read(void*, unsigned int)+0x122>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5f8c:	lsls	r4, r1, #26
    5f8e:	bpl.n	5fa2 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5f90:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5f92:	ldr	r3, [r0, #20]
    5f94:	ldrh	r2, [r2, #8]
    5f96:	rsb	r3, r3, r2, lsl #5
    5f9a:	uxth	r3, r3
    5f9c:	cmp	r9, r3
    5f9e:	it	cs
    5fa0:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5fa2:	cmp.w	r9, #0
    5fa6:	beq.w	60dc <FatFile::read(void*, unsigned int)+0x16c>
    5faa:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    5fac:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5fae:	mov	r6, r9
    5fb0:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5fb4:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5fb8:	ldr	r2, [r5, #8]
    5fba:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    5fbe:	bpl.n	603e <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5fc0:	ldr	r1, [r2, #32]
    5fc2:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5fc6:	cmp	r4, #0
    5fc8:	bne.n	606c <FatFile::read(void*, unsigned int)+0xfc>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5fca:	cmp.w	r6, #512	; 0x200
    5fce:	bcc.n	606c <FatFile::read(void*, unsigned int)+0xfc>
    5fd0:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    5fd2:	cmp	r1, r3
    5fd4:	beq.n	606c <FatFile::read(void*, unsigned int)+0xfc>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5fd6:	cmp.w	r6, #1024	; 0x400
    5fda:	bcc.n	60b4 <FatFile::read(void*, unsigned int)+0x144>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5fdc:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5fde:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5fe2:	lsls	r0, r0, #26
    5fe4:	bmi.n	5ff2 <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5fe6:	ldrb	r0, [r2, #4]
    5fe8:	rsb	r0, r8, r0
    5fec:	cmp	fp, r0
    5fee:	it	cs
    5ff0:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5ff2:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5ff4:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5ff8:	bhi.n	6012 <FatFile::read(void*, unsigned int)+0xa2>
    5ffa:	add	r3, fp
    5ffc:	cmp	r1, r3
    5ffe:	bcs.n	6012 <FatFile::read(void*, unsigned int)+0xa2>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    6000:	add.w	r0, r2, #40	; 0x28
    6004:	str	r1, [sp, #4]
    6006:	bl	6d34 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    600a:	cmp	r0, #0
    600c:	beq.n	610c <FatFile::read(void*, unsigned int)+0x19c>
    600e:	ldr	r2, [r5, #8]
    6010:	ldr	r1, [sp, #4]
    6012:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    6014:	mov	r3, fp
    6016:	mov	r2, r7
    6018:	ldr.w	lr, [r0]
    601c:	ldr.w	fp, [lr, #12]
    6020:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    6022:	cmp	r0, #0
    6024:	beq.n	6102 <FatFile::read(void*, unsigned int)+0x192>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    6026:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    6028:	subs	r6, r6, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    602a:	add	r7, r4
    m_curPosition += n;
    602c:	add	r3, r4
    602e:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    6030:	beq.n	60dc <FatFile::read(void*, unsigned int)+0x16c>
    6032:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6034:	ubfx	r4, r3, #0, #9
    6038:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    603a:	lsls	r0, r1, #26
    603c:	bmi.n	5fc0 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    603e:	ldrb.w	r8, [r2, #5]
    6042:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    6046:	cmp	r4, #0
    6048:	bne.n	60b0 <FatFile::read(void*, unsigned int)+0x140>
    604a:	cmp.w	r8, #0
    604e:	bne.n	60b0 <FatFile::read(void*, unsigned int)+0x140>
        // start of new cluster
        if (m_curPosition == 0) {
    6050:	cbnz	r3, 60a0 <FatFile::read(void*, unsigned int)+0x130>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6052:	lsls	r0, r1, #25
    6054:	ite	mi
    6056:	ldrmi	r1, [r2, #32]
    6058:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    605a:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    605c:	mov	r0, r2
    605e:	bl	6d44 <FatPartition::clusterStartSector(unsigned long) const>
    6062:	ldr	r2, [r5, #8]
    6064:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    6068:	cmp	r4, #0
    606a:	beq.n	5fca <FatFile::read(void*, unsigned int)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    606c:	add.w	r0, r2, #40	; 0x28
    6070:	movs	r2, #0
    6072:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    6076:	cmp	r0, #0
    6078:	beq.n	60e8 <FatFile::read(void*, unsigned int)+0x178>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    607a:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    607e:	adds	r1, r0, r4
    6080:	mov	r0, r7
    6082:	cmp	r3, r6
    6084:	it	cs
    6086:	movcs	r3, r6
    6088:	mov	r2, r3
    608a:	mov	r4, r3
    608c:	bl	9c5c <memcpy>
    6090:	b.n	6026 <FatFile::read(void*, unsigned int)+0xb6>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6092:	ldr	r3, [r0, #28]
    6094:	ldr	r2, [r0, #20]
    6096:	subs	r3, r3, r2
    6098:	cmp	r9, r3
    609a:	it	cs
    609c:	movcs	r9, r3
    609e:	b.n	5fa2 <FatFile::read(void*, unsigned int)+0x32>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    60a0:	lsls	r1, r1, #28
    60a2:	bpl.n	60c6 <FatFile::read(void*, unsigned int)+0x156>
    60a4:	ldrb	r3, [r5, #2]
    60a6:	lsls	r3, r3, #25
    60a8:	bpl.n	60c6 <FatFile::read(void*, unsigned int)+0x156>
          m_curCluster++;
    60aa:	ldr	r1, [r5, #16]
    60ac:	adds	r1, #1
    60ae:	b.n	605a <FatFile::read(void*, unsigned int)+0xea>
    60b0:	ldr	r1, [r5, #16]
    60b2:	b.n	605c <FatFile::read(void*, unsigned int)+0xec>
    60b4:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    60b6:	mov	r2, r7
    60b8:	ldr	r3, [r0, #0]
    60ba:	ldr	r3, [r3, #8]
    60bc:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    60be:	cbz	r0, 6116 <FatFile::read(void*, unsigned int)+0x1a6>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    60c0:	mov.w	r4, #512	; 0x200
    60c4:	b.n	6026 <FatFile::read(void*, unsigned int)+0xb6>
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    60c6:	mov	r0, r2
    60c8:	ldr	r1, [r5, #16]
    60ca:	mov	r2, sl
    60cc:	bl	6d50 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    60d0:	cmp	r0, #0
    60d2:	blt.n	6120 <FatFile::read(void*, unsigned int)+0x1b0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    60d4:	beq.n	612a <FatFile::read(void*, unsigned int)+0x1ba>
    60d6:	ldr	r2, [r5, #8]
    60d8:	ldr	r1, [r5, #16]
    60da:	b.n	605c <FatFile::read(void*, unsigned int)+0xec>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    60dc:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    60de:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    60e2:	add	sp, #12
    60e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    60e8:	movw	r0, #750	; 0x2ee
    60ec:	bl	5bc0 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    60f0:	ldrb	r3, [r5, #1]
  return -1;
    60f2:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    60f6:	orr.w	r3, r3, #2
    60fa:	strb	r3, [r5, #1]
  return -1;
}
    60fc:	add	sp, #12
    60fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    6102:	movw	r0, #775	; 0x307
    6106:	bl	5bc0 <dbgPrint(unsigned short)>
        goto fail;
    610a:	b.n	60f0 <FatFile::read(void*, unsigned int)+0x180>
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
    610c:	movw	r0, #770	; 0x302
    6110:	bl	5bc0 <dbgPrint(unsigned short)>
          goto fail;
    6114:	b.n	60f0 <FatFile::read(void*, unsigned int)+0x180>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    6116:	movw	r0, #783	; 0x30f
    611a:	bl	5bc0 <dbgPrint(unsigned short)>
        goto fail;
    611e:	b.n	60f0 <FatFile::read(void*, unsigned int)+0x180>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    6120:	movw	r0, #726	; 0x2d6
    6124:	bl	5bc0 <dbgPrint(unsigned short)>
            goto fail;
    6128:	b.n	60f0 <FatFile::read(void*, unsigned int)+0x180>
          }
          if (fg == 0) {
            if (isDir()) {
    612a:	ldrb	r3, [r5, #0]
    612c:	tst.w	r3, #112	; 0x70
    6130:	bne.n	60de <FatFile::read(void*, unsigned int)+0x16e>
              break;
            }
            DBG_FAIL_MACRO;
    6132:	movw	r0, #733	; 0x2dd
    6136:	bl	5bc0 <dbgPrint(unsigned short)>
            goto fail;
    613a:	b.n	60f0 <FatFile::read(void*, unsigned int)+0x180>
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    DBG_FAIL_MACRO;
    613c:	movw	r0, #689	; 0x2b1
    6140:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
    6144:	b.n	60f0 <FatFile::read(void*, unsigned int)+0x180>
    6146:	nop

00006148 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    6148:	push	{r4, r5, r6, lr}
    614a:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    614c:	movs	r2, #1
    614e:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    6150:	ldr	r6, [r0, #20]
    6152:	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    6156:	ldr	r5, [r0, #16]
    6158:	bl	5f70 <FatFile::read(void*, unsigned int)>
    615c:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    615e:	str	r6, [r4, #20]
    6160:	ite	eq
    6162:	ldrbeq.w	r0, [sp, #7]
    6166:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    616a:	str	r5, [r4, #16]
  return c;
}
    616c:	add	sp, #8
    616e:	pop	{r4, r5, r6, pc}

00006170 <FatFile::readDirCache(bool)>:
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6170:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    6172:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6174:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    6178:	sub	sp, #12
    617a:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    617c:	clz	r2, r5
    6180:	lsrs	r2, r2, #5
    6182:	cmp	r2, r1
    6184:	bcs.n	6196 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    6186:	adds	r3, #32
    6188:	str	r3, [r0, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    618a:	ldr	r0, [r4, #8]
    618c:	adds	r0, #52	; 0x34
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    618e:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    6192:	add	sp, #12
    6194:	pop	{r4, r5, pc}
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    6196:	movs	r2, #1
    6198:	add.w	r1, sp, #7
    619c:	bl	5f70 <FatFile::read(void*, unsigned int)>
    61a0:	sxtb	r0, r0
    if  (n != 1) {
    61a2:	cmp	r0, #1
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    61a4:	strb.w	r0, [sp, #7]
    if  (n != 1) {
    61a8:	bne.n	61b2 <FatFile::readDirCache(bool)+0x42>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    61aa:	ldr	r3, [r4, #20]
    61ac:	adds	r3, #31
    61ae:	str	r3, [r4, #20]
    61b0:	b.n	618a <FatFile::readDirCache(bool)+0x1a>
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
    61b2:	cbnz	r0, 61b8 <FatFile::readDirCache(bool)+0x48>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    61b4:	movs	r0, #0
    61b6:	b.n	6192 <FatFile::readDirCache(bool)+0x22>

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
        DBG_FAIL_MACRO;
    61b8:	movw	r0, #834	; 0x342
    61bc:	bl	5bc0 <dbgPrint(unsigned short)>
    61c0:	b.n	61b4 <FatFile::readDirCache(bool)+0x44>
    61c2:	nop

000061c4 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    61c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61c8:	ldrb	r3, [r0, #0]
    61ca:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    61cc:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    61ce:	cbz	r3, 6234 <FatFile::seekSet(unsigned long)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    61d0:	ldr	r2, [r0, #20]
    61d2:	mov	r6, r1
    61d4:	cmp	r2, r1
    61d6:	beq.n	625c <FatFile::seekSet(unsigned long)+0x98>
    return true;
  }
  if (pos == 0) {
    61d8:	cbnz	r1, 61ec <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    61da:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    61dc:	ldrb	r3, [r4, #2]
  return true;
    61de:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    61e0:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    61e2:	bic.w	r3, r3, #32
    61e6:	strb	r3, [r4, #2]
  return true;
    61e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    61ec:	lsls	r0, r3, #28
    61ee:	bpl.n	6244 <FatFile::seekSet(unsigned long)+0x80>
    if (pos > m_fileSize) {
    61f0:	ldr	r1, [r4, #28]
    61f2:	cmp	r6, r1
    61f4:	bhi.n	6270 <FatFile::seekSet(unsigned long)+0xac>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    61f6:	ldr.w	lr, [r4, #8]
    61fa:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    61fc:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    61fe:	ldrb.w	r1, [lr, #6]
    6202:	adds	r1, #9
    6204:	uxtb	r1, r1
    6206:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6208:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    620a:	cbz	r2, 6262 <FatFile::seekSet(unsigned long)+0x9e>
    620c:	cmp	r0, r5
    620e:	bhi.n	6262 <FatFile::seekSet(unsigned long)+0x9e>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    6210:	subs	r5, r5, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6212:	add.w	r8, r4, #16
    6216:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    6218:	cmp	r5, #0
    621a:	beq.n	61dc <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    621c:	ldr	r1, [r4, #16]
    621e:	subs	r5, #1
    6220:	ldr	r0, [r4, #8]
    6222:	bl	6d50 <FatPartition::fatGet(unsigned long, unsigned long*)>
    6226:	cmp	r0, #0
    6228:	bgt.n	6216 <FatFile::seekSet(unsigned long)+0x52>
      DBG_FAIL_MACRO;
    622a:	movw	r0, #1133	; 0x46d
    622e:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    6232:	b.n	623c <FatFile::seekSet(unsigned long)+0x78>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    6234:	mov.w	r0, #1096	; 0x448
    6238:	bl	5bc0 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    623c:	str	r7, [r4, #16]
  return false;
    623e:	movs	r0, #0
    6240:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    6244:	lsls	r1, r3, #26
    6246:	bpl.n	61f6 <FatFile::seekSet(unsigned long)+0x32>
    6248:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    624a:	ldrh	r3, [r3, #8]
    624c:	cmp.w	r6, r3, lsl #5
    6250:	bls.n	61dc <FatFile::seekSet(unsigned long)+0x18>
      goto done;
    }
    DBG_FAIL_MACRO;
    6252:	movw	r0, #1117	; 0x45d
    6256:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
    625a:	b.n	623c <FatFile::seekSet(unsigned long)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    625c:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    625e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6262:	lsls	r3, r3, #25
    6264:	ite	mi
    6266:	ldrmi.w	r3, [lr, #32]
    626a:	ldrpl	r3, [r4, #32]
    626c:	str	r3, [r4, #16]
    626e:	b.n	6212 <FatFile::seekSet(unsigned long)+0x4e>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
    6270:	movw	r0, #1110	; 0x456
    6274:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    6278:	b.n	623c <FatFile::seekSet(unsigned long)+0x78>
    627a:	nop

0000627c <FatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    627c:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    627e:	ldrb	r3, [r0, #0]
    6280:	lsls	r2, r3, #27
    6282:	bmi.n	6290 <FatFile::rmdir()+0x14>
    DBG_FAIL_MACRO;
    6284:	mov.w	r0, #976	; 0x3d0
    6288:	bl	5bc0 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    628c:	movs	r0, #0
    628e:	pop	{r4, pc}
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6290:	movs	r1, #0
    6292:	mov	r4, r0
    6294:	bl	61c4 <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    6298:	movs	r1, #1
    629a:	mov	r0, r4
    629c:	bl	6170 <FatFile::readDirCache(bool)>
    if (!dir) {
    62a0:	cbz	r0, 62c0 <FatFile::rmdir()+0x44>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    62a2:	ldrb	r3, [r0, #0]
    62a4:	cbz	r3, 62c4 <FatFile::rmdir()+0x48>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    62a6:	cmp	r3, #46	; 0x2e
    62a8:	it	ne
    62aa:	cmpne	r3, #229	; 0xe5
    62ac:	beq.n	6298 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    62ae:	ldrb	r3, [r0, #11]
    62b0:	lsls	r3, r3, #28
    62b2:	bmi.n	6298 <FatFile::rmdir()+0x1c>
      DBG_FAIL_MACRO;
    62b4:	movw	r0, #1002	; 0x3ea
    62b8:	bl	5bc0 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    62bc:	movs	r0, #0
    62be:	pop	{r4, pc}
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    62c0:	ldrb	r3, [r4, #1]
    62c2:	cbnz	r3, 62da <FatFile::rmdir()+0x5e>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    62c4:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    62c6:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    62c8:	mov	r0, r4
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    62ca:	orr.w	r3, r3, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    62ce:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    62d0:	strb	r3, [r4, #2]
  return remove();

fail:
  return false;
}
    62d2:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    62d6:	b.w	7658 <FatFile::remove()>
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
        break;
      }
      DBG_FAIL_MACRO;
    62da:	movw	r0, #989	; 0x3dd
    62de:	bl	5bc0 <dbgPrint(unsigned short)>
    62e2:	b.n	628c <FatFile::rmdir()+0x10>

000062e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    62e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62e8:	mov	r8, r1
    62ea:	mov	r7, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    62ec:	movs	r1, #0
    62ee:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    62f0:	mov	r4, r0
    62f2:	mov	r6, r3
    62f4:	ldrb.w	r5, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    62f8:	bl	cf4c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    62fc:	ldr.w	r0, [r8, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    6300:	and.w	r2, r7, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    6304:	ldr.w	r1, [r8, #32]
    6308:	add.w	r3, r0, #52	; 0x34
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    630c:	strh	r7, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    630e:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    6310:	add.w	r2, r3, r2, lsl #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    6314:	str	r1, [r4, #12]
    6316:	ldrb	r1, [r2, #11]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    6318:	lsls	r7, r1, #28
    631a:	bmi.n	6372 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    631c:	and.w	r1, r1, #23
    6320:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    6322:	ldrb	r3, [r2, #11]
    6324:	tst.w	r3, #24
    6328:	beq.n	634e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    632a:	and.w	r3, r6, #3
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    632e:	strb	r5, [r4, #3]

  switch (oflag & O_ACCMODE) {
    6330:	cmp	r3, #1
    6332:	beq.n	635e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7a>
    6334:	cmp	r3, #2
    6336:	beq.n	6386 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
    6338:	cbz	r3, 63a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc2>
    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
      break;

    default:
      DBG_FAIL_MACRO;
    633a:	movw	r0, #541	; 0x21d
    633e:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    6342:	movs	r3, #0
    6344:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    6346:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6348:	strb	r3, [r4, #2]
  return false;
    634a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    634e:	and.w	r3, r6, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    6352:	orr.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
    6356:	strb	r5, [r4, #3]

  switch (oflag & O_ACCMODE) {
    6358:	cmp	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    635a:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    635c:	bne.n	6334 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x50>
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    635e:	ldrb	r3, [r4, #0]
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    6360:	movs	r5, #2
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6362:	tst.w	r3, #17
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    6366:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6368:	bne.n	6392 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    636a:	sxtb	r5, r5
    636c:	and.w	lr, r6, #1024	; 0x400
    6370:	b.n	63ae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    6372:	movw	r0, #514	; 0x202
    6376:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    637a:	movs	r3, #0
    637c:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    637e:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6380:	strb	r3, [r4, #2]
  return false;
    6382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6386:	ldrb	r3, [r4, #0]
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    6388:	movs	r5, #3
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    638a:	tst.w	r3, #17
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    638e:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6390:	beq.n	636a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x86>
      DBG_FAIL_MACRO;
    6392:	movw	r0, #547	; 0x223
    6396:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    639a:	movs	r3, #0
    639c:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    639e:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    63a0:	strb	r3, [r4, #2]
  return false;
    63a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    63a6:	ands.w	lr, r6, #1024	; 0x400
    63aa:	bne.n	6416 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x132>
    63ac:	movs	r5, #1
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    63ae:	and.w	r3, r6, #8
    63b2:	orrs	r5, r3
    63b4:	uxtb	r5, r5
    63b6:	strb	r5, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    63b8:	ldrh	r1, [r2, #20]
    63ba:	ldrh	r3, [r2, #26]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    63bc:	ldr	r7, [r0, #48]	; 0x30

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    63be:	orr.w	r1, r3, r1, lsl #16
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    63c2:	str	r7, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    63c4:	cmp.w	lr, #0
    63c8:	beq.n	63dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xf8>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    63ca:	cbnz	r1, 6406 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x122>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    63cc:	orn	r5, r5, #127	; 0x7f
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    63d0:	lsls	r3, r6, #17
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    63d2:	strb	r5, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    63d4:	bmi.n	63e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x102>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    63d6:	movs	r0, #1
    63d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    63dc:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    63de:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    63e0:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    63e2:	lsls	r3, r6, #17
    63e4:	bpl.n	63d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xf2>
    63e6:	ldr	r1, [r4, #28]
    63e8:	mov	r0, r4
    63ea:	bl	61c4 <FatFile::seekSet(unsigned long)>
    63ee:	cmp	r0, #0
    63f0:	bne.n	63d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xf2>
    DBG_FAIL_MACRO;
    63f2:	mov.w	r0, #572	; 0x23c
    63f6:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    63fa:	movs	r3, #0
    63fc:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    63fe:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6400:	strb	r3, [r4, #2]
  return false;
    6402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6406:	bl	6f2c <FatPartition::freeChain(unsigned long)>
    640a:	cbnz	r0, 6420 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x13c>
      DBG_FAIL_MACRO;
    640c:	movw	r0, #561	; 0x231
    6410:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    6414:	b.n	6342 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
        DBG_FAIL_MACRO;
    6416:	movw	r0, #526	; 0x20e
    641a:	bl	5bc0 <dbgPrint(unsigned short)>
        goto fail;
    641e:	b.n	6342 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    6420:	ldrb	r5, [r4, #2]
    6422:	b.n	63cc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xe8>

00006424 <FatFile::openNext(FatFile*, int)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6424:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6428:	ldrb	r3, [r0, #0]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    642a:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    642c:	cbnz	r3, 6438 <FatFile::openNext(FatFile*, int)+0x14>
    642e:	ldrb	r3, [r1, #0]
    6430:	mov	r4, r1
    6432:	tst.w	r3, #112	; 0x70
    6436:	bne.n	644c <FatFile::openNext(FatFile*, int)+0x28>
    DBG_FAIL_MACRO;
    6438:	movw	r0, #591	; 0x24f
      lfnOrd = 0;
    }
  }

fail:
  return false;
    643c:	mov.w	sl, #0
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    6440:	bl	5bc0 <dbgPrint(unsigned short)>
    }
  }

fail:
  return false;
}
    6444:	mov	r0, sl
    6446:	add	sp, #8
    6448:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    644c:	ldr	r5, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    644e:	ands.w	r6, r5, #31
    6452:	bne.n	6438 <FatFile::openNext(FatFile*, int)+0x14>
    6454:	mov	r7, r0
    6456:	mov	r8, r2
    6458:	mov	r9, r6
    645a:	b.n	646c <FatFile::openNext(FatFile*, int)+0x48>
    645c:	ldrb	r1, [r0, #11]
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    645e:	tst.w	r1, #8
    6462:	beq.n	64bc <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    6464:	cmp	r1, #15
    6466:	beq.n	6492 <FatFile::openNext(FatFile*, int)+0x6e>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    6468:	mov	r6, sl
    646a:	ldr	r5, [r4, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    646c:	movs	r1, #0
    646e:	mov	r0, r4
    6470:	bl	6170 <FatFile::readDirCache(bool)>
    if (!dir) {
    6474:	mov	r2, r0
    6476:	cbz	r0, 64aa <FatFile::openNext(FatFile*, int)+0x86>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    6478:	ldrb	r3, [r0, #0]
    647a:	cbz	r3, 64a0 <FatFile::openNext(FatFile*, int)+0x7c>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    647c:	cmp	r3, #229	; 0xe5
    647e:	it	ne
    6480:	cmpne	r3, #46	; 0x2e
    6482:	ite	eq
    6484:	moveq.w	sl, #1
    6488:	movne.w	sl, #0
    648c:	bne.n	645c <FatFile::openNext(FatFile*, int)+0x38>
      lfnOrd = 0;
    648e:	movs	r6, #0
    6490:	b.n	646a <FatFile::openNext(FatFile*, int)+0x46>
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6492:	lsls	r1, r3, #25
    6494:	bpl.n	646a <FatFile::openNext(FatFile*, int)+0x46>
        lfnOrd = ldir->order & 0X1F;
    6496:	and.w	r6, r3, #31
        checksum = ldir->checksum;
    649a:	ldrb.w	r9, [r0, #13]
    649e:	b.n	646a <FatFile::openNext(FatFile*, int)+0x46>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    64a0:	mov	sl, r3
}
    64a2:	mov	r0, sl
    64a4:	add	sp, #8
    64a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    64aa:	ldrb	r3, [r4, #1]
    64ac:	cmp	r3, #0
    64ae:	beq.n	64a0 <FatFile::openNext(FatFile*, int)+0x7c>
        DBG_FAIL_MACRO;
    64b0:	mov.w	r0, #600	; 0x258
      lfnOrd = 0;
    }
  }

fail:
  return false;
    64b4:	mov	sl, r2
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    64b6:	bl	5bc0 <dbgPrint(unsigned short)>
    64ba:	b.n	6444 <FatFile::openNext(FatFile*, int)+0x20>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    64bc:	cbnz	r6, 64de <FatFile::openNext(FatFile*, int)+0xba>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    64be:	str	r6, [sp, #0]
    64c0:	mov	r3, r8
    64c2:	ubfx	r2, r5, #5, #16
    64c6:	mov	r1, r4
    64c8:	mov	r0, r7
    64ca:	bl	62e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    64ce:	mov	sl, r0
    64d0:	cmp	r0, #0
    64d2:	bne.n	6444 <FatFile::openNext(FatFile*, int)+0x20>
        DBG_FAIL_MACRO;
    64d4:	movw	r0, #617	; 0x269
    64d8:	bl	5bc0 <dbgPrint(unsigned short)>
        goto fail;
    64dc:	b.n	6444 <FatFile::openNext(FatFile*, int)+0x20>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    64de:	bl	7214 <FatFile::lfnChecksum(unsigned char*)>
    64e2:	cmp	r9, r0
    64e4:	beq.n	64be <FatFile::openNext(FatFile*, int)+0x9a>
        DBG_FAIL_MACRO;
    64e6:	movw	r0, #613	; 0x265
    64ea:	bl	5bc0 <dbgPrint(unsigned short)>
        goto fail;
    64ee:	b.n	6444 <FatFile::openNext(FatFile*, int)+0x20>

000064f0 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    64f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    64f4:	ldrb	r3, [r1, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    64f6:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    64f8:	tst.w	r3, #112	; 0x70
    64fc:	beq.w	663e <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6500:	movw	r3, #2562	; 0xa02
    6504:	mov	r6, r1
    6506:	mov	r4, r0
    6508:	bl	7944 <FatFile::open(FatFile*, fname_t*, int)>
    650c:	cmp	r0, #0
    650e:	beq.w	662e <FatFile::mkdir(FatFile*, fname_t*)+0x13e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    6512:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6514:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    6516:	mov	r0, r4
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    6518:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    651a:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    651c:	bl	5c40 <FatFile::addDirCluster()>
    6520:	cmp	r0, #0
    6522:	beq.w	6664 <FatFile::mkdir(FatFile*, fname_t*)+0x174>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    6526:	ldr	r3, [r4, #16]
    6528:	movs	r1, #0
    652a:	mov	r0, r4
    652c:	str	r3, [r4, #32]
    652e:	bl	61c4 <FatFile::seekSet(unsigned long)>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6532:	ldrb	r3, [r4, #0]
    6534:	cmp	r3, #0
    6536:	bne.w	664e <FatFile::mkdir(FatFile*, fname_t*)+0x15e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    653a:	movs	r1, #1
    653c:	mov	r0, r4
    653e:	bl	5d14 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6542:	mov	r7, r0
    6544:	cmp	r0, #0
    6546:	beq.w	667e <FatFile::mkdir(FatFile*, fname_t*)+0x18e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    654a:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    654c:	ldr	r0, [r0, #0]
    654e:	ldr	r1, [r7, #4]
    6550:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    6552:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    6554:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    6558:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    655a:	add	r5, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    655c:	ldr	r3, [r7, #12]
    655e:	ldrh.w	r8, [r7, #20]
    6562:	stmia.w	lr!, {r0, r1, r2, r3}
    6566:	ldr	r2, [r7, #24]
    6568:	ldr	r3, [r7, #28]
    656a:	ldr	r0, [r7, #16]
    656c:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    656e:	strb.w	ip, [r5, #-32]!
    6572:	add.w	ip, sp, #10
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    6576:	ldrh	r7, [r7, #26]
    6578:	stmia.w	lr!, {r0, r1, r2, r3}
    657c:	mov	r3, r5
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    657e:	movs	r2, #32
    6580:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    6584:	cmp	ip, r3
    6586:	bne.n	6580 <FatFile::mkdir(FatFile*, fname_t*)+0x90>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    6588:	ldr	r1, [r4, #32]
    658a:	ldr	r0, [r4, #8]
    658c:	bl	6d44 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6590:	ldr	r3, [r4, #8]
    6592:	mov	r1, r0
    6594:	movs	r2, #1
    6596:	add.w	r0, r3, #40	; 0x28
    659a:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    659e:	mov	lr, r0
    65a0:	cmp	r0, #0
    65a2:	beq.n	6674 <FatFile::mkdir(FatFile*, fname_t*)+0x184>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    65a4:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    65a8:	mov.w	r8, #46	; 0x2e
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    65ac:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    65b0:	mov	r7, r5
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    65b2:	ldmia	r5!, {r0, r1, r2, r3}
    65b4:	str.w	r0, [lr]
    65b8:	str.w	r1, [lr, #4]
    65bc:	str.w	r2, [lr, #8]
    65c0:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    65c4:	strb.w	r8, [sp, #1]
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    65c8:	ldmia	r5!, {r0, r1, r2, r3}
    65ca:	str.w	r0, [lr, #16]
    65ce:	str.w	r1, [lr, #20]
    65d2:	str.w	r2, [lr, #24]
    65d6:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    65da:	ldr	r3, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    65dc:	lsrs	r2, r3, #16
    65de:	strh.w	r3, [sp, #26]
    65e2:	strh.w	r2, [sp, #20]
    65e6:	ldmia	r7!, {r0, r1, r2, r3}
    65e8:	str.w	r0, [lr, #32]
    65ec:	str.w	r1, [lr, #36]	; 0x24
    65f0:	str.w	r2, [lr, #40]	; 0x28
    65f4:	str.w	r3, [lr, #44]	; 0x2c
    65f8:	ldmia	r7!, {r0, r1, r2, r3}
    65fa:	str.w	r0, [lr, #48]	; 0x30
    65fe:	str.w	r1, [lr, #52]	; 0x34
    6602:	str.w	r2, [lr, #56]	; 0x38
    6606:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    660a:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    660c:	add.w	r0, r4, #40	; 0x28
    6610:	bl	6d34 <FatCache::sync()>
    6614:	cbz	r0, 6636 <FatFile::mkdir(FatFile*, fname_t*)+0x146>
    6616:	add.w	r0, r4, #564	; 0x234
    661a:	bl	6d34 <FatCache::sync()>
    661e:	cbz	r0, 6636 <FatFile::mkdir(FatFile*, fname_t*)+0x146>
    6620:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6622:	ldr	r3, [r0, #0]
    6624:	ldr	r3, [r3, #20]

fail:
  return false;
}
    6626:	add	sp, #32
    6628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    662c:	bx	r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    662e:	mov.w	r0, #346	; 0x15a
    6632:	bl	5bc0 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    6636:	movs	r0, #0
    6638:	add	sp, #32
    663a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    663e:	movw	r0, #341	; 0x155
    6642:	bl	5bc0 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    6646:	movs	r0, #0
    6648:	add	sp, #32
    664a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    664e:	mov	r0, r4
    6650:	bl	5d40 <FatFile::sync() [clone .part.38]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    6654:	cmp	r0, #0
    6656:	bne.w	653a <FatFile::mkdir(FatFile*, fname_t*)+0x4a>
    DBG_FAIL_MACRO;
    665a:	movw	r0, #363	; 0x16b
    665e:	bl	5bc0 <dbgPrint(unsigned short)>
    6662:	b.n	6636 <FatFile::mkdir(FatFile*, fname_t*)+0x146>
  m_flags = FILE_FLAG_READ;
  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    6664:	movw	r0, #355	; 0x163
    6668:	bl	5bc0 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    666c:	movs	r0, #0
    666e:	add	sp, #32
    6670:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    6674:	mov.w	r0, #386	; 0x182
    6678:	bl	5bc0 <dbgPrint(unsigned short)>
    667c:	b.n	6636 <FatFile::mkdir(FatFile*, fname_t*)+0x146>
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    667e:	movw	r0, #369	; 0x171
    6682:	bl	5bc0 <dbgPrint(unsigned short)>
    6686:	b.n	6636 <FatFile::mkdir(FatFile*, fname_t*)+0x146>

00006688 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    6688:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    668c:	mov	r6, r0
    668e:	sub	sp, #72	; 0x48
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6690:	movs	r0, #0
    6692:	mov	r5, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    6694:	ldrb	r1, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    6696:	str	r2, [sp, #4]
    6698:	strb.w	r0, [sp, #36]	; 0x24
    669c:	strb.w	r0, [sp, #37]	; 0x25
    66a0:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    66a4:	cmp	r1, #0
    66a6:	bne.n	6716 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    66a8:	mov	r8, r3
    66aa:	ldrb	r3, [r5, #0]
    66ac:	tst.w	r3, #112	; 0x70
    66b0:	beq.n	6716 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    66b2:	ldrb	r3, [r2, #0]
    66b4:	mov	r0, r2
    66b6:	cmp	r3, #47	; 0x2f
    66b8:	beq.n	66f8 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    66ba:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    66bc:	add	r2, sp, #4
    66be:	add	r1, sp, #12
    66c0:	bl	73a8 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    66c4:	add	r2, sp, #12
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    66c6:	mov	r4, r0
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    66c8:	mov	r1, r5
    66ca:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    66cc:	cmp	r0, #0
    66ce:	beq.n	6762 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    66d0:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    66d2:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    66d4:	ldrb	r4, [r4, #0]
    66d6:	cmp	r4, #0
    66d8:	beq.n	6772 <FatFile::mkdir(FatFile*, char const*, bool)+0xea>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    66da:	bl	7944 <FatFile::open(FatFile*, fname_t*, int)>
    66de:	mov	r4, r0
    66e0:	cbnz	r0, 6736 <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
      if (!pFlag || !mkdir(parent, &fname)) {
    66e2:	cmp.w	r8, #0
    66e6:	bne.n	6728 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
        DBG_FAIL_MACRO;
    66e8:	mov.w	r0, #320	; 0x140
    66ec:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    66f0:	mov	r0, r4
    66f2:	add	sp, #72	; 0x48
    66f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    66f8:	adds	r0, #1
    66fa:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    66fc:	ldrb	r3, [r0, #0]
    66fe:	cmp	r3, #47	; 0x2f
    6700:	beq.n	66f8 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    6702:	ldr	r1, [r5, #8]
    6704:	add	r0, sp, #36	; 0x24
    6706:	bl	5e04 <FatFile::openRoot(FatVolume*)>
    670a:	mov	r4, r0
    670c:	cmp	r0, #0
    670e:	beq.n	6780 <FatFile::mkdir(FatFile*, char const*, bool)+0xf8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    6710:	add	r5, sp, #36	; 0x24
    6712:	ldr	r0, [sp, #4]
    6714:	b.n	66ba <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    6716:	movs	r4, #0
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    6718:	movw	r0, #297	; 0x129
    671c:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    6720:	mov	r0, r4
    6722:	add	sp, #72	; 0x48
    6724:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    6728:	mov	r1, r5
    672a:	add	r2, sp, #12
    672c:	mov	r0, r6
    672e:	bl	64f0 <FatFile::mkdir(FatFile*, fname_t*)>
    6732:	cmp	r0, #0
    6734:	beq.n	66e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x60>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    6736:	mov	r5, r6
    6738:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    673a:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    673e:	ldmia	r5!, {r0, r1, r2, r3}
    6740:	stmia	r4!, {r0, r1, r2, r3}
    6742:	ldmia	r5!, {r0, r1, r2, r3}
    6744:	ldr	r5, [r5, #0]
    6746:	stmia	r4!, {r0, r1, r2, r3}
    6748:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    674a:	cmp.w	lr, #0
    674e:	bne.n	675a <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    6750:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    6752:	add	r5, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6754:	strb	r7, [r6, #2]
    6756:	ldr	r0, [sp, #4]
    6758:	b.n	66bc <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    675a:	mov	r0, r6
    675c:	bl	5d40 <FatFile::sync() [clone .part.38]>
    6760:	b.n	6750 <FatFile::mkdir(FatFile*, char const*, bool)+0xc8>
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    6762:	mov.w	r0, #312	; 0x138
    6766:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    676a:	mov	r0, r4
    676c:	add	sp, #72	; 0x48
    676e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    6772:	add	r2, sp, #12
    6774:	mov	r1, r5
    6776:	mov	r0, r6
    6778:	bl	64f0 <FatFile::mkdir(FatFile*, fname_t*)>
    677c:	mov	r4, r0
    677e:	b.n	66f0 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    6780:	movw	r0, #305	; 0x131
    6784:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    6788:	b.n	66f0 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
    678a:	nop

0000678c <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    678c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    6790:	ldrb	r4, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6792:	sub	sp, #108	; 0x6c
    6794:	movs	r6, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    6796:	ands.w	r4, r4, #24
    679a:	strb.w	r6, [sp, #32]
    679e:	strb.w	r6, [sp, #33]	; 0x21
    67a2:	strb.w	r6, [sp, #34]	; 0x22
    67a6:	strb.w	r6, [sp, #68]	; 0x44
    67aa:	strb.w	r6, [sp, #69]	; 0x45
    67ae:	strb.w	r6, [sp, #70]	; 0x46
    67b2:	bne.n	67c4 <FatFile::rename(FatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    67b4:	movw	r0, #875	; 0x36b
    67b8:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    67bc:	mov	r0, r4
    67be:	add	sp, #108	; 0x6c
    67c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    67c4:	mov	r8, r2
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    67c6:	ldr	r3, [r1, #8]
    67c8:	ldr	r2, [r0, #8]
    67ca:	mov	r5, r0
    67cc:	mov	r7, r1
    67ce:	cmp	r2, r3
    67d0:	beq.n	67e4 <FatFile::rename(FatFile*, char const*)+0x58>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    67d2:	mov	r4, r6
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    67d4:	movw	r0, #885	; 0x375
    67d8:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    67dc:	mov	r0, r4
    67de:	add	sp, #108	; 0x6c
    67e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    67e4:	bl	5d40 <FatFile::sync() [clone .part.38]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    67e8:	mov	lr, r5
    67ea:	add	r4, sp, #68	; 0x44
    67ec:	ldmia.w	lr!, {r0, r1, r2, r3}
    67f0:	stmia	r4!, {r0, r1, r2, r3}
    67f2:	ldmia.w	lr!, {r0, r1, r2, r3}
    67f6:	ldr.w	lr, [lr]
    67fa:	stmia	r4!, {r0, r1, r2, r3}
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    67fc:	mov	r1, r6
    67fe:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    6800:	str.w	lr, [r4]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    6804:	bl	5d14 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6808:	mov	r4, r0
    680a:	cmp	r0, #0
    680c:	beq.w	69b4 <FatFile::rename(FatFile*, char const*)+0x228>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6810:	ldr	r0, [r0, #0]
    6812:	mov	lr, sp
    6814:	ldr	r1, [r4, #4]
    6816:	ldr	r2, [r4, #8]
    6818:	ldr	r3, [r4, #12]
  // make directory entry for new path
  if (isFile()) {
    681a:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    681e:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    6822:	and.w	ip, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6826:	ldr	r0, [r4, #16]
    6828:	ldr	r1, [r4, #20]
    682a:	ldr	r2, [r4, #24]
  // make directory entry for new path
  if (isFile()) {
    682c:	and.w	r9, ip, #255	; 0xff
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6830:	ldr	r3, [r4, #28]
    6832:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    6836:	cmp.w	ip, #0
    683a:	bne.w	6954 <FatFile::rename(FatFile*, char const*)+0x1c8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    683e:	mov	r3, r9
    6840:	mov	r2, r8
    6842:	mov	r1, r7
    6844:	add	r0, sp, #32
    6846:	bl	6688 <FatFile::mkdir(FatFile*, char const*, bool)>
    684a:	mov	r4, r0
    684c:	cmp	r0, #0
    684e:	beq.w	69a0 <FatFile::rename(FatFile*, char const*)+0x214>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    6852:	ldr	r6, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    6854:	ldr	r2, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    6856:	movs	r7, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    6858:	ldrh.w	r3, [sp, #36]	; 0x24
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    685c:	movs	r1, #1
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    685e:	str	r2, [r5, #24]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    6860:	mov	r0, r5
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    6862:	strh	r3, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    6864:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    6868:	ldr	r3, [sp, #44]	; 0x2c
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    686a:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    686c:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    686e:	strb.w	r7, [sp, #32]
  file.m_flags = 0;
    6872:	strb.w	r7, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    6876:	bl	5d14 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    687a:	mov	r4, r0
    687c:	cmp	r0, #0
    687e:	beq.w	69aa <FatFile::rename(FatFile*, char const*)+0x21e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    6882:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    6884:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    6888:	ldr.w	r0, [r3, #-91]!
  dir->attributes = entry.attributes;
    688c:	strb	r2, [r4, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    688e:	ldr.w	lr, [r3, #4]
    6892:	str.w	r0, [r4, #13]
    6896:	ldr	r0, [r3, #8]
    6898:	str.w	lr, [r4, #17]
    689c:	str.w	r0, [r4, #21]
    68a0:	ldr.w	lr, [r3, #12]
    68a4:	ldrh	r0, [r3, #16]
    68a6:	ldrb	r3, [r3, #18]
    68a8:	str.w	lr, [r4, #25]
    68ac:	strh.w	r0, [r4, #29]
    68b0:	strb	r3, [r4, #31]
  dir->attributes = entry.attributes;

  // update dot dot if directory
  if (dirCluster) {
    68b2:	cmp	r6, #0
    68b4:	beq.n	692a <FatFile::rename(FatFile*, char const*)+0x19e>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    68b6:	mov	r1, r6
    68b8:	ldr	r0, [r5, #8]
    68ba:	bl	6d44 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    68be:	ldr	r3, [r5, #8]
    68c0:	mov	r1, r0
    68c2:	mov	r2, r7
    68c4:	add.w	r0, r3, #40	; 0x28
    68c8:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    68cc:	mov	r4, r0
    68ce:	cmp	r0, #0
    68d0:	beq.n	69be <FatFile::rename(FatFile*, char const*)+0x232>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    68d2:	ldr.w	r0, [r4, #32]!
    68d6:	mov	r7, sp
    68d8:	ldr	r1, [r4, #4]
    68da:	ldr	r2, [r4, #8]
    68dc:	ldr	r3, [r4, #12]
    68de:	stmia	r7!, {r0, r1, r2, r3}
    68e0:	ldr	r0, [r4, #16]
    68e2:	ldr	r1, [r4, #20]
    68e4:	ldr	r2, [r4, #24]
    68e6:	ldr	r3, [r4, #28]
    68e8:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    68ea:	mov	r1, r6
    68ec:	ldr	r0, [r5, #8]
    68ee:	bl	6f2c <FatPartition::freeChain(unsigned long)>
    68f2:	mov	r4, r0
    68f4:	cmp	r0, #0
    68f6:	beq.n	6996 <FatFile::rename(FatFile*, char const*)+0x20a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    68f8:	ldr	r1, [r5, #32]
    68fa:	ldr	r0, [r5, #8]
    68fc:	bl	6d44 <FatPartition::clusterStartSector(unsigned long) const>
    6900:	ldr	r3, [r5, #8]
    6902:	mov	r1, r0
    6904:	movs	r2, #1
    6906:	add.w	r0, r3, #40	; 0x28
    690a:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    690e:	mov	r4, r0
    6910:	cmp	r0, #0
    6912:	beq.n	69c8 <FatFile::rename(FatFile*, char const*)+0x23c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    6914:	mov	r6, sp
    6916:	ldmia	r6!, {r0, r1, r2, r3}
    6918:	str	r0, [r4, #32]
    691a:	str	r1, [r4, #36]	; 0x24
    691c:	str	r2, [r4, #40]	; 0x28
    691e:	str	r3, [r4, #44]	; 0x2c
    6920:	ldmia	r6!, {r0, r1, r2, r3}
    6922:	str	r0, [r4, #48]	; 0x30
    6924:	str	r1, [r4, #52]	; 0x34
    6926:	str	r2, [r4, #56]	; 0x38
    6928:	str	r3, [r4, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    692a:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    692c:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    692e:	movs	r3, #8
  if (!oldFile.remove()) {
    6930:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    6932:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6934:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6938:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    693c:	bl	7658 <FatFile::remove()>
    6940:	mov	r4, r0
    6942:	cbz	r0, 6974 <FatFile::rename(FatFile*, char const*)+0x1e8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    6944:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6946:	add.w	r0, r4, #40	; 0x28
    694a:	bl	6d34 <FatCache::sync()>
    694e:	cbnz	r0, 697e <FatFile::rename(FatFile*, char const*)+0x1f2>
    6950:	movs	r4, #0
    6952:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6954:	mov	r2, r8
    6956:	mov	r1, r7
    6958:	movw	r3, #2561	; 0xa01
    695c:	add	r0, sp, #32
    695e:	bl	5e54 <FatFile::open(FatFile*, char const*, int)>
    6962:	mov	r4, r0
    6964:	cmp	r0, #0
    6966:	bne.w	6854 <FatFile::rename(FatFile*, char const*)+0xc8>
      DBG_FAIL_MACRO;
    696a:	movw	r0, #901	; 0x385
    696e:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    6972:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    DBG_FAIL_MACRO;
    6974:	mov.w	r0, #964	; 0x3c4
    6978:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
    697c:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
    697e:	add.w	r0, r4, #564	; 0x234
    6982:	bl	6d34 <FatCache::sync()>
    6986:	cmp	r0, #0
    6988:	beq.n	6950 <FatFile::rename(FatFile*, char const*)+0x1c4>
    698a:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    698c:	ldr	r3, [r0, #0]
    698e:	ldr	r3, [r3, #20]
    6990:	blx	r3
    6992:	mov	r4, r0
    6994:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
      DBG_FAIL_MACRO;
    6996:	movw	r0, #947	; 0x3b3
    699a:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    699e:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
      DBG_FAIL_MACRO;
    69a0:	movw	r0, #907	; 0x38b
    69a4:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    69a8:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    69aa:	movw	r0, #926	; 0x39e
    69ae:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
    69b2:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
  // sync() and cache directory entry
  sync();
  oldFile = *this;
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
  if (!dir) {
    DBG_FAIL_MACRO;
    69b4:	movw	r0, #893	; 0x37d
    69b8:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
    69bc:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
  if (dirCluster) {
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    69be:	mov.w	r0, #940	; 0x3ac
    69c2:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    69c6:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    69c8:	movw	r0, #954	; 0x3ba
    69cc:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    69d0:	b.n	67bc <FatFile::rename(FatFile*, char const*)+0x30>
    69d2:	nop

000069d4 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    69d4:	ldrb	r3, [r0, #0]
    69d6:	cbz	r3, 69dc <FatFile::sync()+0x8>
    69d8:	b.w	5d40 <FatFile::sync() [clone .part.38]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    69dc:	movs	r0, #1
    69de:	bx	lr

000069e0 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    69e0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69e4:	ldrb	r3, [r0, #2]
    69e6:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    69e8:	lsls	r5, r3, #30
    69ea:	bpl.w	6b78 <FatFile::write(void const*, unsigned int)+0x198>
    69ee:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    69f0:	lsls	r2, r3, #28
    69f2:	mov	r8, r1
    69f4:	bmi.w	6ba6 <FatFile::write(void const*, unsigned int)+0x1c6>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    69f8:	ldr	r2, [r4, #20]
    69fa:	mvns	r3, r2
    69fc:	cmp	r9, r3
    69fe:	bhi.w	6b9c <FatFile::write(void const*, unsigned int)+0x1bc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6a02:	cmp.w	r9, #0
    6a06:	beq.n	6a92 <FatFile::write(void const*, unsigned int)+0xb2>
    6a08:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6a0a:	mov.w	fp, #0
    m_lbn = 0XFFFFFFFF;
    6a0e:	mov.w	sl, #4294967295
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6a12:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6a14:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6a18:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    6a1a:	ldrb	r5, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6a1c:	ands.w	r5, r5, r2, lsr #9
    6a20:	bne.n	6b14 <FatFile::write(void const*, unsigned int)+0x134>
    6a22:	cmp	r7, #0
    6a24:	bne.n	6b14 <FatFile::write(void const*, unsigned int)+0x134>
      // start of new cluster
      if (m_curCluster != 0) {
    6a26:	cmp	r1, #0
    6a28:	beq.n	6ab2 <FatFile::write(void const*, unsigned int)+0xd2>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6a2a:	ldrb	r3, [r4, #2]
    6a2c:	lsls	r3, r3, #25
    6a2e:	bpl.n	6b2e <FatFile::write(void const*, unsigned int)+0x14e>
    6a30:	ldr	r3, [r4, #28]
    6a32:	cmp	r3, r2
    6a34:	bls.n	6b2e <FatFile::write(void const*, unsigned int)+0x14e>
          m_curCluster++;
    6a36:	adds	r1, #1
    6a38:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6a3a:	bl	6d44 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    6a3e:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6a40:	cmp.w	r6, #512	; 0x200
    6a44:	bcc.w	6bbc <FatFile::write(void const*, unsigned int)+0x1dc>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6a48:	cmp.w	r6, #1024	; 0x400
    6a4c:	ldr	r2, [r4, #8]
    6a4e:	bcc.n	6b4c <FatFile::write(void const*, unsigned int)+0x16c>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6a50:	ldrb	r7, [r2, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6a52:	lsrs	r3, r6, #9
    6a54:	ldr	r0, [r2, #48]	; 0x30
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6a56:	subs	r5, r7, r5
    6a58:	cmp	r3, r5
    6a5a:	it	cs
    6a5c:	movcs	r3, r5
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6a5e:	cmp	r0, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6a60:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6a64:	bcc.n	6a76 <FatFile::write(void const*, unsigned int)+0x96>
    6a66:	add	r0, r3
    6a68:	cmp	r0, r1
    6a6a:	bls.n	6a76 <FatFile::write(void const*, unsigned int)+0x96>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6a6c:	strb.w	fp, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    6a70:	str.w	sl, [r2, #48]	; 0x30
    6a74:	ldr	r2, [r4, #8]
    6a76:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    6a78:	mov	r2, r8
    6a7a:	ldr	r7, [r0, #0]
    6a7c:	ldr	r7, [r7, #28]
    6a7e:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    6a80:	cmp	r0, #0
    6a82:	beq.w	6bf0 <FatFile::write(void const*, unsigned int)+0x210>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6a86:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6a88:	subs	r6, r6, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    6a8a:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6a8c:	add	r2, r5
    6a8e:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6a90:	bne.n	6a12 <FatFile::write(void const*, unsigned int)+0x32>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6a92:	ldr	r3, [r4, #28]
    6a94:	cmp	r3, r2
    6a96:	bcc.w	6bd6 <FatFile::write(void const*, unsigned int)+0x1f6>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6a9a:	ldr	r3, [pc, #388]	; (6c20 <FatFile::write(void const*, unsigned int)+0x240>)
    6a9c:	ldr	r3, [r3, #0]
    6a9e:	cmp	r3, #0
    6aa0:	beq.w	6c18 <FatFile::write(void const*, unsigned int)+0x238>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6aa4:	ldrb	r3, [r4, #2]
    6aa6:	mov	r0, r9
    6aa8:	orn	r3, r3, #127	; 0x7f
    6aac:	strb	r3, [r4, #2]
    6aae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    6ab2:	ldr	r1, [r4, #32]
    6ab4:	cmp	r1, #0
    6ab6:	beq.n	6b66 <FatFile::write(void const*, unsigned int)+0x186>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    6ab8:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6aba:	bl	6d44 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6abe:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6ac2:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6ac4:	bcs.n	6a48 <FatFile::write(void const*, unsigned int)+0x68>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6ac6:	rsb	r5, r7, #512	; 0x200
    6aca:	ldr	r0, [r4, #8]
    6acc:	cmp	r5, r6
    6ace:	it	cs
    6ad0:	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6ad2:	ldr	r2, [r4, #20]
    6ad4:	ldr	r3, [r4, #28]
    6ad6:	cmp	r2, r3
    6ad8:	bcs.n	6ae0 <FatFile::write(void const*, unsigned int)+0x100>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6ada:	ldrb	r3, [r4, #2]
    6adc:	lsls	r3, r3, #26
    6ade:	bpl.n	6b2a <FatFile::write(void const*, unsigned int)+0x14a>
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    6ae0:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6ae2:	adds	r0, #40	; 0x28
    6ae4:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    6ae8:	cmp	r0, #0
    6aea:	beq.n	6bcc <FatFile::write(void const*, unsigned int)+0x1ec>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6aec:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6aee:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6af0:	mov	r2, r5
    6af2:	mov	r1, r8
    6af4:	bl	9c5c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6af8:	cmp.w	r7, #512	; 0x200
    6afc:	bne.n	6a86 <FatFile::write(void const*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    6afe:	ldr	r0, [r4, #8]
    6b00:	adds	r0, #40	; 0x28
    6b02:	bl	6d34 <FatCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    6b06:	cmp	r0, #0
    6b08:	bne.n	6a86 <FatFile::write(void const*, unsigned int)+0xa6>
          DBG_FAIL_MACRO;
    6b0a:	movw	r0, #1390	; 0x56e
    6b0e:	bl	5bc0 <dbgPrint(unsigned short)>
          goto fail;
    6b12:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6b14:	bl	6d44 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    6b18:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6b1a:	cmp	r7, #0
    6b1c:	beq.n	6a40 <FatFile::write(void const*, unsigned int)+0x60>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6b1e:	rsb	r5, r7, #512	; 0x200
    6b22:	ldr	r0, [r4, #8]
    6b24:	cmp	r5, r6
    6b26:	it	cs
    6b28:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    6b2a:	movs	r2, #1
    6b2c:	b.n	6ae2 <FatFile::write(void const*, unsigned int)+0x102>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6b2e:	add.w	r2, r4, #16
    6b32:	bl	6d50 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6b36:	cmp	r0, #0
    6b38:	blt.n	6bfa <FatFile::write(void const*, unsigned int)+0x21a>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    6b3a:	bne.n	6b46 <FatFile::write(void const*, unsigned int)+0x166>
          // add cluster if at end of chain
          if (!addCluster()) {
    6b3c:	mov	r0, r4
    6b3e:	bl	5bfc <FatFile::addCluster()>
    6b42:	cmp	r0, #0
    6b44:	beq.n	6c0e <FatFile::write(void const*, unsigned int)+0x22e>
    6b46:	ldr	r1, [r4, #16]
    6b48:	ldr	r0, [r4, #8]
    6b4a:	b.n	6aba <FatFile::write(void const*, unsigned int)+0xda>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    6b4c:	ldr	r3, [r2, #48]	; 0x30
    6b4e:	cmp	r3, r1
    6b50:	beq.n	6b90 <FatFile::write(void const*, unsigned int)+0x1b0>
    6b52:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6b54:	mov	r2, r8
    6b56:	ldr	r3, [r0, #0]
    6b58:	ldr	r3, [r3, #24]
    6b5a:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    6b5c:	cmp	r0, #0
    6b5e:	beq.n	6be6 <FatFile::write(void const*, unsigned int)+0x206>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    6b60:	mov.w	r5, #512	; 0x200
    6b64:	b.n	6a86 <FatFile::write(void const*, unsigned int)+0xa6>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    6b66:	mov	r0, r4
    6b68:	bl	5bfc <FatFile::addCluster()>
    6b6c:	cmp	r0, #0
    6b6e:	beq.n	6c04 <FatFile::write(void const*, unsigned int)+0x224>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    6b70:	ldr	r1, [r4, #16]
    6b72:	ldr	r0, [r4, #8]
    6b74:	str	r1, [r4, #32]
    6b76:	b.n	6aba <FatFile::write(void const*, unsigned int)+0xda>
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    6b78:	movw	r0, #1299	; 0x513
    6b7c:	bl	5bc0 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6b80:	ldrb	r3, [r4, #1]
  return -1;
    6b82:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6b86:	orr.w	r3, r3, #1
    6b8a:	strb	r3, [r4, #1]
  return -1;
    6b8c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6b90:	strb.w	fp, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    6b94:	str.w	sl, [r2, #48]	; 0x30
    6b98:	ldr	r2, [r4, #8]
    6b9a:	b.n	6b52 <FatFile::write(void const*, unsigned int)+0x172>
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    6b9c:	movw	r0, #1311	; 0x51f
    6ba0:	bl	5bc0 <dbgPrint(unsigned short)>
    goto fail;
    6ba4:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    6ba6:	ldr	r1, [r0, #28]
    6ba8:	bl	61c4 <FatFile::seekSet(unsigned long)>
    6bac:	cmp	r0, #0
    6bae:	bne.w	69f8 <FatFile::write(void const*, unsigned int)+0x18>
      DBG_FAIL_MACRO;
    6bb2:	movw	r0, #1305	; 0x519
    6bb6:	bl	5bc0 <dbgPrint(unsigned short)>
      goto fail;
    6bba:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
    6bbc:	cmp.w	r6, #512	; 0x200
    6bc0:	mov	r5, r6
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6bc2:	ldr	r0, [r4, #8]
    6bc4:	it	cs
    6bc6:	movcs.w	r5, #512	; 0x200
    6bca:	b.n	6ad2 <FatFile::write(void const*, unsigned int)+0xf2>
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
        DBG_FAIL_MACRO;
    6bcc:	movw	r0, #1382	; 0x566
    6bd0:	bl	5bc0 <dbgPrint(unsigned short)>
        goto fail;
    6bd4:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6bd6:	ldrb	r3, [r4, #2]
    6bd8:	mov	r0, r9
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6bda:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6bdc:	orn	r3, r3, #127	; 0x7f
    6be0:	strb	r3, [r4, #2]
    6be2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    6be6:	movw	r0, #1421	; 0x58d
    6bea:	bl	5bc0 <dbgPrint(unsigned short)>
        goto fail;
    6bee:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
        DBG_FAIL_MACRO;
    6bf0:	movw	r0, #1410	; 0x582
    6bf4:	bl	5bc0 <dbgPrint(unsigned short)>
        goto fail;
    6bf8:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    6bfa:	mov.w	r0, #1328	; 0x530
    6bfe:	bl	5bc0 <dbgPrint(unsigned short)>
            goto fail;
    6c02:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6c04:	movw	r0, #1350	; 0x546
    6c08:	bl	5bc0 <dbgPrint(unsigned short)>
            goto fail;
    6c0c:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6c0e:	movw	r0, #1342	; 0x53e
    6c12:	bl	5bc0 <dbgPrint(unsigned short)>
            goto fail;
    6c16:	b.n	6b80 <FatFile::write(void const*, unsigned int)+0x1a0>
    6c18:	mov	r0, r9
    6c1a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c1e:	nop
    6c20:	.word	0x2000607c

00006c24 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    6c24:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6c26:	movs	r1, #10
    6c28:	mov	r5, r0
    6c2a:	ldr	r0, [pc, #40]	; (6c54 <dbgPrint(unsigned short)+0x30>)
    6c2c:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6c30:	ldr	r4, [pc, #36]	; (6c58 <dbgPrint(unsigned short)+0x34>)
    6c32:	movs	r1, #16
    6c34:	ldr	r0, [pc, #36]	; (6c5c <dbgPrint(unsigned short)+0x38>)
    6c36:	bl	a3cc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6c3a:	movs	r0, #46	; 0x2e
    6c3c:	bl	a3a0 <usb_serial_putchar>
    6c40:	mov	r1, r5
    6c42:	mov	r0, r4
    6c44:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    6c48:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    6c4a:	ldmia.w	sp!, {r3, r4, r5, lr}
    6c4e:	b.w	b6f8 <Print::println()>
    6c52:	nop
    6c54:	.word	0x2000034c
    6c58:	.word	0x20000c48
    6c5c:	.word	0x200003a4

00006c60 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    6c60:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6c62:	ldr	r1, [r0, #8]
    6c64:	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6c66:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    6c6a:	mov	r4, r0
    6c6c:	ldr	r0, [r3, #0]
    6c6e:	mov	r2, r6
    6c70:	ldr	r3, [r0, #0]
    6c72:	ldr	r3, [r3, #24]
    6c74:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6c76:	mov	r5, r0
    6c78:	cbz	r0, 6ca4 <FatCache::sync() [clone .part.8]+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6c7a:	ldrb	r3, [r4, #0]
    6c7c:	lsls	r2, r3, #30
    6c7e:	bmi.n	6c8a <FatCache::sync() [clone .part.8]+0x2a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6c80:	bic.w	r3, r3, #1
    6c84:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    6c86:	mov	r0, r5
    6c88:	pop	{r4, r5, r6, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6c8a:	ldr	r3, [r4, #4]
    6c8c:	mov	r2, r6
    6c8e:	ldr	r1, [r4, #8]
    6c90:	ldr	r0, [r3, #0]
    6c92:	ldr	r6, [r3, #16]
    6c94:	ldr	r3, [r0, #0]
    6c96:	add	r1, r6
    6c98:	ldr	r3, [r3, #24]
    6c9a:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6c9c:	mov	r3, r0
    6c9e:	cbz	r0, 6cae <FatCache::sync() [clone .part.8]+0x4e>
    6ca0:	ldrb	r3, [r4, #0]
    6ca2:	b.n	6c80 <FatCache::sync() [clone .part.8]+0x20>
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
      DBG_FAIL_MACRO;
    6ca4:	movs	r0, #57	; 0x39
    6ca6:	bl	6c24 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    6caa:	mov	r0, r5
    6cac:	pop	{r4, r5, r6, pc}
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6cae:	movs	r0, #64	; 0x40
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    6cb0:	mov	r5, r3
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6cb2:	bl	6c24 <dbgPrint(unsigned short)>
    6cb6:	b.n	6c86 <FatCache::sync() [clone .part.8]+0x26>

00006cb8 <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6cb8:	ldr	r3, [r0, #8]
    6cba:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    6cbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cc0:	mov	r6, r0
    6cc2:	mov	r5, r2
  if (m_lbn != sector) {
    6cc4:	beq.n	6ce8 <FatCache::read(unsigned long, unsigned char)+0x30>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6cc6:	ldrb	r3, [r0, #0]
    6cc8:	mov	r7, r1
    6cca:	lsls	r2, r3, #31
    6ccc:	bmi.n	6cf8 <FatCache::read(unsigned long, unsigned char)+0x40>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    6cce:	lsls	r3, r5, #29
    6cd0:	bpl.n	6d0e <FatCache::read(unsigned long, unsigned char)+0x56>
    6cd2:	add.w	r4, r6, #12
    6cd6:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6cd8:	and.w	r5, r5, #3
    6cdc:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6cde:	str	r7, [r6, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    6ce0:	orrs	r5, r3
    6ce2:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6ce4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ce8:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6cec:	and.w	r5, r5, #3
    6cf0:	orrs	r5, r3
    6cf2:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6cf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cf8:	bl	6c60 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    6cfc:	mov	r4, r0
    6cfe:	cmp	r0, #0
    6d00:	bne.n	6cce <FatCache::read(unsigned long, unsigned char)+0x16>
      DBG_FAIL_MACRO;
    6d02:	movs	r0, #34	; 0x22
    6d04:	bl	6c24 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6d08:	mov	r0, r4
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    6d0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d0e:	ldr	r3, [r6, #4]
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6d10:	add.w	r4, r6, #12
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6d14:	mov	r1, r7
    6d16:	ldr	r0, [r3, #0]
    6d18:	mov	r2, r4
    6d1a:	ldr	r3, [r0, #0]
    6d1c:	ldr	r3, [r3, #8]
    6d1e:	blx	r3
    6d20:	mov	r8, r0
    6d22:	cmp	r0, #0
    6d24:	bne.n	6cd6 <FatCache::read(unsigned long, unsigned char)+0x1e>
        DBG_FAIL_MACRO;
    6d26:	movs	r0, #39	; 0x27
    6d28:	bl	6c24 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6d2c:	mov	r0, r8
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
    6d2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d32:	nop

00006d34 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6d34:	ldrb	r3, [r0, #0]
    6d36:	lsls	r3, r3, #31
    6d38:	bmi.n	6d3e <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    6d3a:	movs	r0, #1
    6d3c:	bx	lr
    6d3e:	b.w	6c60 <FatCache::sync() [clone .part.8]>
    6d42:	nop

00006d44 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6d44:	ldrb	r3, [r0, #6]
    6d46:	subs	r1, #2
    6d48:	ldr	r0, [r0, #20]
    6d4a:	lsls	r1, r3
}
    6d4c:	add	r0, r1
    6d4e:	bx	lr

00006d50 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6d50:	cmp	r1, #1
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6d52:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6d54:	bls.n	6dc0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x70>
    6d56:	ldr	r3, [r0, #28]
    6d58:	mov	r4, r1
    6d5a:	mov	r5, r0
    6d5c:	cmp	r1, r3
    6d5e:	bhi.n	6dc0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x70>
    6d60:	ldrb	r3, [r0, #7]
    6d62:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6d64:	cmp	r3, #32
    6d66:	beq.n	6d96 <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    6d68:	cmp	r3, #16
    6d6a:	bne.n	6db2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6d6c:	ldr	r3, [r0, #24]
    6d6e:	ubfx	r1, r1, #8, #8
    6d72:	movs	r2, #2
    6d74:	add.w	r0, r0, #564	; 0x234
    6d78:	add	r1, r3
    6d7a:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6d7e:	cbz	r0, 6dcc <FatPartition::fatGet(unsigned long, unsigned long*)+0x7c>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6d80:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    6d82:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    6d86:	ldr	r2, [r5, #28]
    6d88:	cmp	r3, r2
    6d8a:	bhi.n	6d92 <FatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    return 0;
  }
  *value = next;
    6d8c:	str	r3, [r6, #0]
  return 1;
    6d8e:	movs	r0, #1
    6d90:	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    6d92:	movs	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    6d94:	pop	{r4, r5, r6, pc}
    6d96:	ldr	r1, [r0, #24]
    6d98:	movs	r2, #2
    6d9a:	add.w	r0, r0, #564	; 0x234
    6d9e:	add.w	r1, r1, r4, lsr #7
    6da2:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6da6:	cbz	r0, 6dd8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x88>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6da8:	and.w	r4, r4, #127	; 0x7f
    6dac:	ldr.w	r3, [r0, r4, lsl #2]
    6db0:	b.n	6d86 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
      index = 0;
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    6db2:	mov.w	r0, #260	; 0x104
    6db6:	bl	6c24 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6dba:	mov.w	r0, #4294967295
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
    6dbe:	pop	{r4, r5, r6, pc}
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6dc0:	movs	r0, #214	; 0xd6
    6dc2:	bl	6c24 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6dc6:	mov.w	r0, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6dca:	pop	{r4, r5, r6, pc}
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6dcc:	movs	r0, #232	; 0xe8
    6dce:	bl	6c24 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6dd2:	mov.w	r0, #4294967295
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6dd6:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6dd8:	movs	r0, #222	; 0xde
    6dda:	bl	6c24 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6dde:	mov.w	r0, #4294967295
  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6de2:	pop	{r4, r5, r6, pc}

00006de4 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6de4:	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6de6:	push	{r4, r5, r6, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6de8:	bls.n	6e0a <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6dea:	ldr	r3, [r0, #28]
    6dec:	mov	r4, r1
    6dee:	cmp	r1, r3
    6df0:	bhi.n	6e0a <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6df2:	ldrb	r3, [r0, #7]
    6df4:	mov	r5, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6df6:	cmp	r3, #32
    6df8:	beq.n	6e16 <FatPartition::fatPut(unsigned long, unsigned long)+0x32>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    6dfa:	cmp	r3, #16
    6dfc:	beq.n	6e36 <FatPartition::fatPut(unsigned long, unsigned long)+0x52>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  } else {
    DBG_FAIL_MACRO;
    6dfe:	mov.w	r0, #342	; 0x156
    6e02:	bl	6c24 <dbgPrint(unsigned short)>
    goto fail;
  }

fail:
  return false;
    6e06:	movs	r0, #0
}
    6e08:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6e0a:	mov.w	r0, #280	; 0x118
    6e0e:	bl	6c24 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6e12:	movs	r0, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6e14:	pop	{r4, r5, r6, pc}
    6e16:	ldr	r1, [r0, #24]
    6e18:	movs	r2, #3
    6e1a:	add.w	r0, r0, #564	; 0x234
    6e1e:	add.w	r1, r1, r4, lsr #7
    6e22:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6e26:	mov	r6, r0
    6e28:	cbz	r0, 6e62 <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6e2a:	and.w	r4, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    6e2e:	movs	r0, #1
    6e30:	str.w	r5, [r6, r4, lsl #2]
    6e34:	pop	{r4, r5, r6, pc}
    6e36:	ldr	r3, [r0, #24]
    6e38:	ubfx	r1, r1, #8, #8
    6e3c:	add.w	r0, r0, #564	; 0x234
    6e40:	movs	r2, #3
    6e42:	add	r1, r3
    6e44:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6e48:	mov	r6, r0
    6e4a:	cbz	r0, 6e56 <FatPartition::fatPut(unsigned long, unsigned long)+0x72>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6e4c:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    6e4e:	movs	r0, #1
    6e50:	strh.w	r5, [r6, r4, lsl #1]
    6e54:	pop	{r4, r5, r6, pc}
  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6e56:	movw	r0, #301	; 0x12d
    6e5a:	bl	6c24 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6e5e:	mov	r0, r6
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6e60:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6e62:	mov.w	r0, #288	; 0x120
    6e66:	bl	6c24 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6e6a:	mov	r0, r6
    6e6c:	pop	{r4, r5, r6, pc}
    6e6e:	nop

00006e70 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6e70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6e74:	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6e76:	sub	sp, #8
    6e78:	mov	r5, r0
    6e7a:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6e7c:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6e7e:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6e80:	bcs.n	6ee6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    6e82:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6e84:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6e86:	adds	r4, #1
    6e88:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6e8a:	add	r2, sp, #4
    6e8c:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6e8e:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6e90:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6e92:	bls.n	6ea6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    6e94:	cbnz	r6, 6efa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6e96:	ldr	r4, [r5, #12]
      setStart = true;
    6e98:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6e9a:	add	r2, sp, #4
    6e9c:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6e9e:	adds	r4, #1
    if (find > m_lastCluster) {
    6ea0:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6ea2:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6ea4:	bhi.n	6e94 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    6ea6:	cmp	r7, r4
    6ea8:	beq.n	6eea <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6eaa:	bl	6d50 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6eae:	cmp	r0, #0
    6eb0:	blt.n	6f02 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x92>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    6eb2:	beq.n	6e86 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    6eb4:	ldr	r3, [sp, #4]
    6eb6:	cmp	r3, #0
    6eb8:	bne.n	6e86 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    6eba:	cbz	r6, 6ebe <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    6ebc:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6ebe:	mvn.w	r2, #4026531840	; 0xf0000000
    6ec2:	mov	r1, r4
    6ec4:	mov	r0, r5
    6ec6:	bl	6de4 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    6eca:	mov	r6, r0
    6ecc:	cbz	r0, 6f24 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xb4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    6ece:	cbnz	r7, 6f0a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9a>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6ed0:	ldr	r3, [r5, #36]	; 0x24
    6ed2:	cmp	r3, #0
    6ed4:	blt.n	6eda <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      m_freeClusterCount += change;
    6ed6:	subs	r3, #1
    6ed8:	str	r3, [r5, #36]	; 0x24
  *next = find;
  return true;

fail:
  return false;
}
    6eda:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    6edc:	str.w	r4, [r8]
  return true;

fail:
  return false;
}
    6ee0:	add	sp, #8
    6ee2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    6ee6:	movs	r6, #1
    6ee8:	b.n	6e86 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      setStart = true;
      continue;
    }
    if (find == current) {
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
    6eea:	movs	r0, #101	; 0x65
    6eec:	bl	6c24 <dbgPrint(unsigned short)>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6ef0:	movs	r6, #0
}
    6ef2:	mov	r0, r6
    6ef4:	add	sp, #8
    6ef6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (1) {
    find++;
    if (find > m_lastCluster) {
      if (setStart) {
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
    6efa:	movs	r0, #92	; 0x5c
    6efc:	bl	6c24 <dbgPrint(unsigned short)>
        goto fail;
    6f00:	b.n	6ef0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x80>
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    6f02:	movs	r0, #107	; 0x6b
    6f04:	bl	6c24 <dbgPrint(unsigned short)>
      goto fail;
    6f08:	b.n	6ef0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    6f0a:	mov	r1, r7
    6f0c:	mov	r2, r4
    6f0e:	mov	r0, r5
    6f10:	bl	6de4 <FatPartition::fatPut(unsigned long, unsigned long)>
    6f14:	mov	r3, r0
    6f16:	cmp	r0, #0
    6f18:	bne.n	6ed0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
      DBG_FAIL_MACRO;
    6f1a:	movs	r0, #125	; 0x7d
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6f1c:	mov	r6, r3
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
      DBG_FAIL_MACRO;
    6f1e:	bl	6c24 <dbgPrint(unsigned short)>
      goto fail;
    6f22:	b.n	6ef2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
  if (setStart) {
    m_allocSearchStart = find;
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    6f24:	movs	r0, #119	; 0x77
    6f26:	bl	6c24 <dbgPrint(unsigned short)>
    goto fail;
    6f2a:	b.n	6ef2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>

00006f2c <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6f2c:	push	{r4, r5, r6, r7, lr}
    6f2e:	mov	r4, r0
    6f30:	sub	sp, #12
    6f32:	mov	r5, r1
    6f34:	b.n	6f58 <FatPartition::freeChain(unsigned long)+0x2c>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6f36:	bl	6de4 <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6f3a:	subs	r2, r5, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6f3c:	mov	r6, r0
    6f3e:	cbz	r0, 6f7e <FatPartition::freeChain(unsigned long)+0x52>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6f40:	ldr	r3, [r4, #36]	; 0x24
    6f42:	cmp	r3, #0
      m_freeClusterCount += change;
    6f44:	add.w	r3, r3, #1
    6f48:	it	ge
    6f4a:	strge	r3, [r4, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6f4c:	ldr	r3, [r4, #12]
    6f4e:	cmp	r5, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    6f50:	ldr	r5, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6f52:	it	cc
    6f54:	strcc	r2, [r4, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6f56:	cbz	r7, 6f78 <FatPartition::freeChain(unsigned long)+0x4c>
    fg = fatGet(cluster, &next);
    6f58:	add	r2, sp, #4
    6f5a:	mov	r1, r5
    6f5c:	mov	r0, r4
    6f5e:	bl	6d50 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6f62:	subs	r7, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6f64:	mov	r1, r5
    6f66:	mov.w	r2, #0
    6f6a:	mov	r0, r4
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6f6c:	bge.n	6f36 <FatPartition::freeChain(unsigned long)+0xa>
      DBG_FAIL_MACRO;
    6f6e:	movw	r0, #357	; 0x165
  } while (fg);

  return true;

fail:
  return false;
    6f72:	mov	r6, r2
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    6f74:	bl	6c24 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    6f78:	mov	r0, r6
    6f7a:	add	sp, #12
    6f7c:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    6f7e:	mov.w	r0, #362	; 0x16a
    6f82:	bl	6c24 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    6f86:	mov	r0, r6
    6f88:	add	sp, #12
    6f8a:	pop	{r4, r5, r6, r7, pc}

00006f8c <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6f8c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    6f90:	ldr	r4, [r0, #36]	; 0x24
    6f92:	cmp	r4, #0
    6f94:	blt.n	6f9c <FatPartition::freeClusterCount()+0x10>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6f96:	mov	r0, r4
    6f98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f9c:	ldrb	r3, [r0, #7]
    6f9e:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6fa0:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6fa2:	cmp	r3, #32
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6fa4:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6fa8:	beq.n	6fc0 <FatPartition::freeClusterCount()+0x34>
    6faa:	cmp	r3, #16
    6fac:	beq.n	6fc0 <FatPartition::freeClusterCount()+0x34>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6fae:	mov.w	r4, #4294967295
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    6fb2:	movw	r0, #431	; 0x1af
    6fb6:	bl	6c24 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6fba:	mov	r0, r4
    6fbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    6fc0:	ldr	r5, [r6, #24]
    while (todo) {
    6fc2:	cmp.w	r8, #0
    6fc6:	beq.n	7054 <FatPartition::freeClusterCount()+0xc8>
    6fc8:	add.w	r7, r6, #564	; 0x234
    6fcc:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6fce:	mov	r1, r5
    6fd0:	movs	r2, #2
    6fd2:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    6fd4:	adds	r5, #1
    6fd6:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    6fda:	cbz	r0, 7042 <FatPartition::freeClusterCount()+0xb6>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6fdc:	ldrb	r3, [r6, #7]
    6fde:	cmp	r3, #16
    6fe0:	beq.n	7012 <FatPartition::freeClusterCount()+0x86>
      if (todo < n) {
    6fe2:	cmp.w	r8, #127	; 0x7f
    6fe6:	bhi.n	703c <FatPartition::freeClusterCount()+0xb0>
        n = todo;
    6fe8:	uxth.w	r2, r8
    6fec:	mov	r1, r8
    6fee:	subs	r2, #1
    6ff0:	subs	r3, r0, #4
    6ff2:	uxth	r2, r2
    6ff4:	add.w	r0, r0, r2, lsl #2
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    6ff8:	ldr.w	r2, [r3, #4]!
    6ffc:	cbnz	r2, 7000 <FatPartition::freeClusterCount()+0x74>
            free++;
    6ffe:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    7000:	cmp	r3, r0
    7002:	bne.n	6ff8 <FatPartition::freeClusterCount()+0x6c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    7004:	subs.w	r8, r8, r1
    7008:	bne.n	6fce <FatPartition::freeClusterCount()+0x42>
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    700a:	str	r4, [r6, #36]	; 0x24
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    700c:	mov	r0, r4
    700e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    7012:	cmp.w	r8, #255	; 0xff
    7016:	bls.n	7058 <FatPartition::freeClusterCount()+0xcc>
    7018:	mov.w	r1, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    701c:	mov	r3, r1
    701e:	subs	r2, r3, #1
    7020:	subs	r3, r0, #2
    7022:	uxth	r2, r2
    7024:	add.w	r0, r0, r2, lsl #1
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    7028:	ldrh.w	r2, [r3, #2]!
    702c:	cbnz	r2, 7030 <FatPartition::freeClusterCount()+0xa4>
            free++;
    702e:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    7030:	cmp	r0, r3
    7032:	bne.n	7028 <FatPartition::freeClusterCount()+0x9c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    7034:	subs.w	r8, r8, r1
    7038:	bne.n	6fce <FatPartition::freeClusterCount()+0x42>
    703a:	b.n	700a <FatPartition::freeClusterCount()+0x7e>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    703c:	movs	r1, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    703e:	mov	r2, r1
    7040:	b.n	6fee <FatPartition::freeClusterCount()+0x62>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    7042:	mov.w	r4, #4294967295
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    7046:	movw	r0, #407	; 0x197
    704a:	bl	6c24 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    704e:	mov	r0, r4
    7050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    7054:	mov	r4, r8
    7056:	b.n	700a <FatPartition::freeClusterCount()+0x7e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    7058:	uxth.w	r3, r8
    705c:	mov	r1, r8
    705e:	b.n	701e <FatPartition::freeClusterCount()+0x92>

00007060 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    7060:	push	{r3, r4, r5, r6, r7, lr}
    7062:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7064:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    7066:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    706a:	movs	r0, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    706c:	str	r1, [r4, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    706e:	mov	r6, r2
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    7070:	str	r4, [r4, #44]	; 0x2c
    7072:	str.w	r4, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    7076:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7078:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    707a:	strb.w	r5, [r4, #40]	; 0x28
    707e:	strb.w	r5, [r4, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
    7082:	str	r3, [r4, #48]	; 0x30
    7084:	str.w	r3, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7088:	cbz	r2, 70d2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
    if (part > 4) {
    708a:	cmp	r2, #4
    708c:	bhi.n	70ba <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    708e:	add.w	r7, r4, #40	; 0x28
    7092:	mov	r2, r5
    7094:	mov	r1, r5
    7096:	mov	r0, r7
    7098:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    709c:	mvn.w	r3, #4026531840	; 0xf0000000
    70a0:	add.w	r1, r0, #446	; 0x1be
    70a4:	add	r3, r6
    70a6:	lsls	r3, r3, #4
    70a8:	adds	r2, r1, r3

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    70aa:	cbz	r0, 70c6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    70ac:	ldrb	r0, [r2, #4]
    70ae:	cbz	r0, 70c6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    70b0:	ldrb	r3, [r1, r3]
    70b2:	lsls	r3, r3, #25
    70b4:	bne.n	70c6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    70b6:	ldr	r6, [r2, #8]
    70b8:	b.n	70d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x76>
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
    70ba:	mov.w	r0, #460	; 0x1cc
    70be:	bl	6c24 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    70c2:	mov	r0, r5
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
      goto fail;
    70c4:	pop	{r3, r4, r5, r6, r7, pc}
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
    70c6:	mov.w	r0, #468	; 0x1d4
    70ca:	bl	6c24 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    70ce:	movs	r0, #0
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
      goto fail;
    70d0:	pop	{r3, r4, r5, r6, r7, pc}
    70d2:	add.w	r7, r4, #40	; 0x28
    70d6:	mov	r0, r7
    70d8:	movs	r2, #0
    70da:	mov	r1, r6
    70dc:	bl	6cb8 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    70e0:	cbz	r0, 70e8 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x88>
    70e2:	ldrb	r3, [r0, #16]
    70e4:	cmp	r3, #2
    70e6:	beq.n	70f4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x94>
    DBG_FAIL_MACRO;
    70e8:	mov.w	r0, #478	; 0x1de
    70ec:	bl	6c24 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    70f0:	movs	r0, #0
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
    70f2:	pop	{r3, r4, r5, r6, r7, pc}
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    70f4:	ldrh.w	r3, [r0, #11]
    70f8:	cmp.w	r3, #512	; 0x200
    70fc:	bne.n	70e8 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x88>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    70fe:	ldrb	r2, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    7100:	movs	r5, #0
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7102:	subs	r3, r2, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7104:	cmp	r2, #1

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7106:	strb	r2, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    7108:	strb	r5, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    710a:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    710c:	beq.n	7136 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd6>
    710e:	movs	r5, #1
    7110:	mov	r1, r5
    7112:	b.n	7116 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
    7114:	mov	r5, r3
    7116:	lsls	r1, r1, #1
    7118:	adds	r3, r5, #1
    711a:	uxtb	r1, r1
    711c:	uxtb	r3, r3
    711e:	cmp	r2, r1
    7120:	beq.n	7134 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    if (tmp == 0) {
    7122:	cmp	r3, #9
    7124:	bne.n	7114 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    7126:	strb	r5, [r4, #6]
      DBG_FAIL_MACRO;
    7128:	movw	r0, #487	; 0x1e7
    712c:	bl	6c24 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    7130:	movs	r0, #0
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    7132:	pop	{r3, r4, r5, r6, r7, pc}
    7134:	strb	r5, [r4, #6]
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7136:	ldrh	r3, [r0, #22]
    7138:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    713a:	cbnz	r3, 7140 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe0>
    713c:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    713e:	str	r3, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7140:	ldrh	r2, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    7142:	ldrh.w	r7, [r0, #17]
    7146:	add	r2, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    7148:	lsls	r1, r7, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    714a:	strh	r7, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    714c:	add.w	r3, r2, r3, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7150:	str	r2, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    7152:	addw	r1, r1, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    7156:	ldrh.w	r2, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    715a:	str	r3, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    715c:	add.w	r3, r3, r1, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7160:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    7162:	cbnz	r2, 7166 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    7164:	ldr	r2, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7166:	subs	r3, r6, r3
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    7168:	movw	r1, #4084	; 0xff4
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    716c:	mov.w	r6, #4294967295
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7170:	add	r3, r2
    7172:	str	r6, [r4, #36]	; 0x24

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    7174:	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
    7178:	adds	r3, r5, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    717a:	cmp	r5, r1
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    717c:	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    717e:	bls.n	719c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x13c>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    7180:	movw	r3, #65524	; 0xfff4
    7184:	cmp	r5, r3
    7186:	bls.n	7194 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x134>
    7188:	ldr	r2, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    718a:	movs	r3, #32
  }
  return true;
    718c:	movs	r0, #1
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    718e:	str	r2, [r4, #32]
    m_fatType = 32;
    7190:	strb	r3, [r4, #7]
    7192:	pop	{r3, r4, r5, r6, r7, pc}
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    7194:	movs	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
  }
  return true;
    7196:	movs	r0, #1
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    7198:	strb	r3, [r4, #7]
    719a:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    719c:	movs	r3, #12
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    719e:	movw	r0, #525	; 0x20d

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    71a2:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    71a4:	bl	6c24 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    71a8:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    71aa:	pop	{r3, r4, r5, r6, r7, pc}

000071ac <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    71ac:	cmp	r1, #4
    71ae:	bls.n	71c8 <lfnGetChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    71b0:	cmp	r1, #10
    71b2:	bls.n	71c0 <lfnGetChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    71b4:	cmp	r1, #12
    71b6:	bhi.n	71d2 <lfnGetChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    71b8:	add.w	r1, r0, r1, lsl #1
    71bc:	ldrh	r0, [r1, #6]
    71be:	bx	lr
    71c0:	add.w	r1, r0, r1, lsl #1
    71c4:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    71c6:	bx	lr
    71c8:	add.w	r1, r0, r1, lsl #1
    71cc:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    71d0:	bx	lr
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    71d2:	movs	r0, #0
}
    71d4:	bx	lr
    71d6:	nop

000071d8 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    71d8:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    71da:	movs	r1, #10
    71dc:	mov	r5, r0
    71de:	ldr	r0, [pc, #40]	; (7208 <dbgPrint(unsigned short)+0x30>)
    71e0:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    71e4:	ldr	r4, [pc, #36]	; (720c <dbgPrint(unsigned short)+0x34>)
    71e6:	movs	r1, #14
    71e8:	ldr	r0, [pc, #36]	; (7210 <dbgPrint(unsigned short)+0x38>)
    71ea:	bl	a3cc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    71ee:	movs	r0, #46	; 0x2e
    71f0:	bl	a3a0 <usb_serial_putchar>
    71f4:	mov	r1, r5
    71f6:	mov	r0, r4
    71f8:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    71fc:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    71fe:	ldmia.w	sp!, {r3, r4, r5, lr}
    7202:	b.w	b6f8 <Print::println()>
    7206:	nop
    7208:	.word	0x2000034c
    720c:	.word	0x20000c48
    7210:	.word	0x200003b8

00007214 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    7214:	push	{r4}
    7216:	mov	r4, r0
  uint8_t sum = 0;
    7218:	movs	r0, #0
    721a:	subs	r2, r4, #1
    721c:	adds	r4, #10
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    721e:	lsrs	r3, r0, #1
    7220:	ldrb.w	r1, [r2, #1]!
    7224:	orr.w	r0, r3, r0, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7228:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    722a:	uxtab	r0, r1, r0
    722e:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7230:	bne.n	721e <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    7232:	ldr.w	r4, [sp], #4
    7236:	bx	lr

00007238 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    7238:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    723a:	ldr	r3, [r1, #12]
    723c:	cbz	r3, 725c <FatFile::openCluster(FatFile*)+0x24>
    723e:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    7240:	movs	r2, #36	; 0x24
    7242:	movs	r1, #0
    7244:	mov	r5, r0
    7246:	bl	cf4c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    724a:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    724c:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    724e:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    7250:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    7252:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7254:	ldr	r3, [r4, #12]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    7256:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
    7258:	str	r3, [r5, #32]
  return true;
}
    725a:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    725c:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    725e:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    7262:	b.w	5e04 <FatFile::openRoot(FatVolume*)>
    7266:	nop

00007268 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    7268:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    726c:	movs	r3, #0
    726e:	sub	sp, #52	; 0x34
    7270:	mov	r5, r2
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    7272:	ldrb	r2, [r0, #0]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    7274:	mov	r9, r1
    7276:	strb.w	r3, [sp, #12]
    727a:	strb.w	r3, [sp, #13]
    727e:	strb.w	r3, [sp, #14]
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    7282:	cmp	r2, #0
    7284:	beq.n	7358 <FatFile::getName(char*, unsigned int)+0xf0>
    7286:	cmp	r5, #12
    7288:	ite	hi
    728a:	movhi	r4, #0
    728c:	movls	r4, #1
    728e:	cmp	r4, #0
    7290:	bne.n	7358 <FatFile::getName(char*, unsigned int)+0xf0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    7292:	ldrb	r3, [r0, #3]
    7294:	mov	r8, r0
    7296:	cmp	r3, #0
    7298:	beq.n	736c <FatFile::getName(char*, unsigned int)+0x104>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    729a:	mov	r1, r8
    729c:	add	r0, sp, #12
    729e:	bl	7238 <FatFile::openCluster(FatFile*)>
    72a2:	cmp	r0, #0
    72a4:	beq.n	737e <FatFile::getName(char*, unsigned int)+0x116>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    72a6:	ldrb.w	r3, [r8, #3]
    72aa:	cmp	r3, #0
    72ac:	beq.n	7350 <FatFile::getName(char*, unsigned int)+0xe8>
    72ae:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    72b0:	str	r4, [sp, #4]
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    72b2:	ldrh.w	r1, [r8, #4]
    72b6:	add	r0, sp, #12
    72b8:	subs	r1, r1, r6
    72ba:	lsls	r1, r1, #5
    72bc:	bl	61c4 <FatFile::seekSet(unsigned long)>
    72c0:	mov	r7, r0
    72c2:	cmp	r0, #0
    72c4:	beq.n	7386 <FatFile::getName(char*, unsigned int)+0x11e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    72c6:	movs	r1, #0
    72c8:	add	r0, sp, #12
    72ca:	bl	6170 <FatFile::readDirCache(bool)>
    if (!ldir) {
    72ce:	mov	sl, r0
    72d0:	cmp	r0, #0
    72d2:	beq.n	738e <FatFile::getName(char*, unsigned int)+0x126>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    72d4:	ldrb	r3, [r0, #11]
    72d6:	cmp	r3, #15
    72d8:	bne.n	7396 <FatFile::getName(char*, unsigned int)+0x12e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    72da:	ldrb	r3, [r0, #0]
    72dc:	and.w	r3, r3, #31
    72e0:	cmp	r6, r3
    72e2:	bne.n	739e <FatFile::getName(char*, unsigned int)+0x136>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    72e4:	subs	r3, r6, #1
    72e6:	add.w	r4, r3, r3, lsl #1
    72ea:	add.w	r4, r3, r4, lsl #2
    72ee:	mov	r3, r4
    72f0:	add.w	r2, r9, r4
    72f4:	add.w	fp, r4, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    72f8:	subs	r1, r3, r4
    72fa:	mov	r0, sl
    72fc:	uxtb	r1, r1
    72fe:	bl	71ac <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7302:	movs	r1, #63	; 0x3f
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    7304:	cbz	r0, 737a <FatFile::getName(char*, unsigned int)+0x112>
    7306:	cmp	r5, r3
    7308:	bls.n	737a <FatFile::getName(char*, unsigned int)+0x112>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    730a:	cmp	r0, #126	; 0x7e
    730c:	add.w	r3, r3, #1
    7310:	it	ls
    7312:	uxtbls	r1, r0
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    7314:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7316:	strb.w	r1, [r2], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    731a:	bne.n	72f8 <FatFile::getName(char*, unsigned int)+0x90>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    731c:	cmp	r5, fp
    731e:	bls.n	7330 <FatFile::getName(char*, unsigned int)+0xc8>
    7320:	ldrb.w	r3, [sl]
    7324:	lsls	r2, r3, #25
    7326:	bpl.n	7330 <FatFile::getName(char*, unsigned int)+0xc8>
    name[k] = 0;
    7328:	ldrb.w	r3, [sp, #4]
    732c:	strb.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    7330:	add.w	r3, r9, r5
    7334:	ldrb.w	r2, [sp, #4]
    7338:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    733c:	ldrb.w	r3, [sl]
    7340:	lsls	r3, r3, #25
    7342:	bmi.n	7364 <FatFile::getName(char*, unsigned int)+0xfc>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7344:	adds	r6, #1
    7346:	ldrb.w	r3, [r8, #3]
    734a:	uxtb	r6, r6
    734c:	cmp	r3, r6
    734e:	bcs.n	72b2 <FatFile::getName(char*, unsigned int)+0x4a>
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    7350:	movs	r0, #166	; 0xa6
    7352:	bl	71d8 <dbgPrint(unsigned short)>
    7356:	b.n	735e <FatFile::getName(char*, unsigned int)+0xf6>
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    7358:	movs	r0, #129	; 0x81
    735a:	bl	71d8 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    735e:	movs	r7, #0
    7360:	strb.w	r7, [r9]
  return false;
}
    7364:	mov	r0, r7
    7366:	add	sp, #52	; 0x34
    7368:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    736c:	bl	7d88 <FatFile::getSFN(char*)>
    7370:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    7372:	mov	r0, r7
    7374:	add	sp, #52	; 0x34
    7376:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    737a:	mov	fp, r3
    737c:	b.n	731c <FatFile::getName(char*, unsigned int)+0xb4>
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    737e:	movs	r0, #136	; 0x88
    7380:	bl	71d8 <dbgPrint(unsigned short)>
    goto fail;
    7384:	b.n	735e <FatFile::getName(char*, unsigned int)+0xf6>
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    7386:	movs	r0, #141	; 0x8d
    7388:	bl	71d8 <dbgPrint(unsigned short)>
      goto fail;
    738c:	b.n	735e <FatFile::getName(char*, unsigned int)+0xf6>
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    738e:	movs	r0, #146	; 0x92
    7390:	bl	71d8 <dbgPrint(unsigned short)>
      goto fail;
    7394:	b.n	735e <FatFile::getName(char*, unsigned int)+0xf6>
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
      DBG_FAIL_MACRO;
    7396:	movs	r0, #150	; 0x96
    7398:	bl	71d8 <dbgPrint(unsigned short)>
      goto fail;
    739c:	b.n	735e <FatFile::getName(char*, unsigned int)+0xf6>
    }
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
    739e:	movs	r0, #154	; 0x9a
    73a0:	bl	71d8 <dbgPrint(unsigned short)>
      goto fail;
    73a4:	b.n	735e <FatFile::getName(char*, unsigned int)+0xf6>
    73a6:	nop

000073a8 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    73a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    73ac:	ldrb	r3, [r0, #0]
    73ae:	cmp	r3, #32
    73b0:	bne.n	73ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    73b2:	ldrb.w	r3, [r0, #1]!
    73b6:	cmp	r3, #32
    73b8:	beq.n	73b2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    73ba:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    73bc:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    73be:	cmp	r3, #0
    73c0:	it	ne
    73c2:	cmpne	r3, #47	; 0x2f
    73c4:	ite	eq
    73c6:	moveq.w	r8, #1
    73ca:	movne.w	r8, #0
    73ce:	beq.w	7634 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x28c>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    73d2:	cmp	r3, #92	; 0x5c
    73d4:	beq.n	7422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    73d6:	sub.w	r4, r3, #34	; 0x22
    73da:	uxtb	r4, r4
    73dc:	cmp	r4, #26
    73de:	bls.n	742e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
    73e0:	adds	r6, r0, #1
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    73e2:	movs	r5, #0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    73e4:	ldr.w	lr, [pc, #620]	; 7654 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2ac>
    73e8:	b.n	73f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x4a>
    73ea:	cmp	r4, #26
    73ec:	lsr.w	r7, lr, r4
    73f0:	bls.n	743a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    73f2:	sub.w	r4, r3, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    73f6:	adds	r5, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    73f8:	sub.w	r9, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    73fc:	mov	ip, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    73fe:	cmp	r4, #1
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    7400:	mov	r7, r5
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    7402:	bls.n	7422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    7404:	cmp	r3, #124	; 0x7c
    7406:	beq.n	7422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7408:	cmp.w	r9, #94	; 0x5e
    740c:	bhi.n	7422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    740e:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7412:	sub.w	r4, r3, #34	; 0x22
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    7416:	cmp	r3, #47	; 0x2f
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7418:	uxtb	r4, r4
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    741a:	beq.n	7440 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
    741c:	cbz	r3, 7440 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    741e:	cmp	r3, #92	; 0x5c
    7420:	bne.n	73ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    7422:	movs	r0, #211	; 0xd3
    7424:	bl	71d8 <dbgPrint(unsigned short)>
  }
  return true;
  
 fail:
  return false;
}
    7428:	mov	r0, r8
    742a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    742e:	ldr	r5, [pc, #548]	; (7654 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2ac>)
    7430:	lsr.w	r4, r5, r4
    7434:	lsls	r5, r4, #31
    7436:	bmi.n	7422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    7438:	b.n	73e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x38>
    743a:	lsls	r4, r7, #31
    743c:	bmi.n	7422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    743e:	b.n	73f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    7440:	cmp	r3, #32
    7442:	beq.n	744a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    7444:	cmp	r3, #47	; 0x2f
    7446:	bne.w	7626 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x27e>
    744a:	adds	r3, r5, #1
    744c:	add	r3, r0
    744e:	mov	r6, r3
    7450:	ldrb.w	r4, [r3], #1
    7454:	cmp	r4, #32
    7456:	beq.n	744e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa6>
    7458:	cmp	r4, #47	; 0x2f
    745a:	beq.n	744e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa6>
  *ptr = &path[end];
    745c:	str	r6, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    745e:	cbz	r5, 7490 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe8>
    c = path[len - 1];
    7460:	add	r7, r0
    7462:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    7466:	cmp	r3, #32
    7468:	beq.n	746e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    746a:	cmp	r3, #46	; 0x2e
    746c:	bne.n	7484 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xdc>
    746e:	subs	r3, r5, #1
    7470:	adds	r4, r0, r3
      break;
    }
    len--;
    7472:	mov	r5, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    7474:	cbz	r3, 7490 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe8>
    c = path[len - 1];
    7476:	ldrb.w	r2, [r4, #-1]!
    747a:	subs	r3, #1
    if (c != '.' && c != ' ') {
    747c:	cmp	r2, #46	; 0x2e
    747e:	beq.n	7472 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xca>
    7480:	cmp	r2, #32
    7482:	beq.n	7472 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xca>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    7484:	cmp	r5, #255	; 0xff
    7486:	bgt.w	7616 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x26e>
    748a:	mov	r7, r5
    748c:	subs	r4, r5, #1
    748e:	b.n	7496 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xee>
    7490:	mov.w	r4, #4294967295
    7494:	mov	r7, r5
    7496:	add.w	r3, r1, #12
    749a:	add.w	r6, r1, #23
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    749e:	movs	r2, #32
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    74a0:	str	r7, [r1, #4]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    74a2:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    74a6:	cmp	r3, r6
    74a8:	bne.n	74a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    74aa:	ldrb	r3, [r0, #0]
    74ac:	cmp	r3, #46	; 0x2e
    74ae:	beq.n	74b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10e>
    74b0:	cmp	r3, #32
    74b2:	bne.w	762c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x284>
    74b6:	mov	r6, r0
    74b8:	movs	r3, #0
    74ba:	ldrb.w	r2, [r6, #1]!
    74be:	adds	r3, #1
    74c0:	cmp	r2, #46	; 0x2e
    74c2:	beq.n	74ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x112>
    74c4:	cmp	r2, #32
    74c6:	beq.n	74ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x112>
    74c8:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    74cc:	adds	r2, r4, #1
    74ce:	beq.n	74e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x140>
    74d0:	ldrb	r6, [r0, r4]
    74d2:	adds	r2, r0, r4
    74d4:	cmp	r6, #46	; 0x2e
    74d6:	bne.n	74e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13a>
    74d8:	b.n	74e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x140>
    74da:	ldrb.w	r6, [r2, #-1]!
    74de:	cmp	r6, #46	; 0x2e
    74e0:	beq.n	74e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x140>
    74e2:	adds.w	r4, r4, #4294967295
    74e6:	bcs.n	74da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x132>
  for (; si < len; si++) {
    74e8:	cmp	r5, r3
    74ea:	mov.w	r9, #0
    74ee:	ble.w	764e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2a6>
    74f2:	mov.w	ip, #7
    74f6:	mov.w	r8, #8
    74fa:	mov	r6, r9
    74fc:	mov	sl, r9
    c = path[si];
    74fe:	ldrb	r2, [r0, r3]
    if (c == ' ' || (c == '.' && dot != si)) {
    7500:	cmp	r2, #32
    7502:	beq.n	750c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x164>
    7504:	cmp	r2, #46	; 0x2e
    7506:	bne.n	753a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
    7508:	cmp	r4, r3
    750a:	beq.n	753a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
      is83 = false;
    750c:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    7510:	adds	r3, #1
    7512:	cmp	r3, r5
    7514:	blt.n	74fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x156>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7516:	ldrb	r3, [r1, #13]
    7518:	cmp	r3, #32
    751a:	beq.n	75d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    751c:	cmp.w	lr, #0
    7520:	beq.n	75fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x254>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7522:	tst.w	sl, r9
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    7526:	mov.w	r8, #1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    752a:	it	ne
    752c:	movne.w	r9, #2
  }
  return true;
  
 fail:
  return false;
}
    7530:	mov	r0, r8
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7532:	strb.w	r9, [r1]
  }
  return true;
  
 fail:
  return false;
}
    7536:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    753a:	cmp	r2, #34	; 0x22
    753c:	beq.n	754e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
    753e:	cmp	r2, #124	; 0x7c
    7540:	beq.n	754e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    7542:	sub.w	r7, r2, #42	; 0x2a
    7546:	cmp	r7, #5
    7548:	bhi.n	7574 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1cc>
    754a:	cmp	r2, #45	; 0x2d
    754c:	beq.n	7574 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1cc>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    754e:	cmp	r4, r3
    7550:	beq.n	758c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1e4>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    7552:	cmp	r6, ip
    7554:	ite	ls
    7556:	movls	r2, #0
    7558:	movhi	r2, #1
    755a:	cbnz	r2, 75c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21e>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    755c:	mov	lr, r2
      c = '_';
    755e:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7560:	adds	r7, r6, #1
    7562:	add.w	fp, r1, r6
    7566:	uxtb	r6, r7
    7568:	strb.w	r2, [fp, #13]
      if (i < 7) {
    756c:	cmp	r6, #6
    756e:	bhi.n	7510 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
        fname->seqPos = i;
    7570:	strb	r6, [r1, #12]
    7572:	b.n	7510 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    7574:	sub.w	r7, r2, #58	; 0x3a
    7578:	cmp	r7, #5
    757a:	bls.n	754e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    757c:	sub.w	r7, r2, #91	; 0x5b
    7580:	cmp	r7, #2
    7582:	bls.n	754e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    7584:	sub.w	r7, r2, #33	; 0x21
    7588:	cmp	r7, #93	; 0x5d
    758a:	bhi.n	754e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    758c:	cmp	r4, r3
    758e:	beq.n	75a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
    7590:	cmp	r6, ip
    7592:	bhi.n	75a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    7594:	sub.w	r7, r2, #97	; 0x61
    7598:	cmp	r7, #25
    759a:	bhi.n	75ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0x246>
        c += 'A' - 'a';
    759c:	subs	r2, #32
        lc |= bit;
    759e:	orr.w	r9, r8, r9
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
    75a2:	uxtb	r2, r2
    75a4:	b.n	7560 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b8>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    75a6:	cmp.w	ip, #10
    75aa:	beq.n	75cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x224>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
    75ac:	cmp	r4, r3
    75ae:	beq.n	75e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    75b0:	cmp	r4, r3
    75b2:	blt.n	75cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x224>
    75b4:	mov	r3, r4
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    75b6:	mov.w	ip, #10
      i = 8;    // Place for extension.
    75ba:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    75bc:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    75c0:	mov.w	lr, #0
    75c4:	b.n	7510 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    75c6:	cmp.w	ip, #10
    75ca:	bne.n	75b0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x208>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    75cc:	ldrb	r3, [r1, #13]
    75ce:	cmp	r3, #32
    75d0:	bne.n	75fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x254>
    DBG_FAIL_MACRO;
    75d2:	movw	r0, #285	; 0x11d
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    75d6:	mov.w	r8, #0
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    DBG_FAIL_MACRO;
    75da:	bl	71d8 <dbgPrint(unsigned short)>
    goto fail;
    75de:	b.n	7428 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
    75e0:	mov	r3, r4
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    75e2:	mov.w	ip, #10
      i = 8;    // Place for extension.
    75e6:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    75e8:	mov.w	r8, #16
    75ec:	b.n	7510 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    75ee:	sub.w	r7, r2, #65	; 0x41
    75f2:	cmp	r7, #25
    75f4:	bhi.n	7560 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b8>
        uc |= bit;
    75f6:	orr.w	sl, r8, sl
    75fa:	b.n	7560 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b8>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    75fc:	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    75fe:	mov.w	r8, #1
    fname->sfn[fname->seqPos] = '~';
    7602:	movs	r0, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    7604:	movs	r2, #49	; 0x31

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7606:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7608:	strb.w	r8, [r1]
    fname->sfn[fname->seqPos] = '~';
    760c:	strb	r0, [r3, #13]
  }
  return true;
  
 fail:
  return false;
}
    760e:	mov	r0, r8
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
    7610:	strb	r2, [r3, #14]
  }
  return true;
  
 fail:
  return false;
}
    7612:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7616:	mov.w	r8, #0
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    761a:	movs	r0, #229	; 0xe5
    761c:	bl	71d8 <dbgPrint(unsigned short)>
  }
  return true;
  
 fail:
  return false;
}
    7620:	mov	r0, r8
    7622:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    7626:	str.w	ip, [r2]
    762a:	b.n	7460 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb8>
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    762c:	mov.w	lr, #1
    7630:	movs	r3, #0
    7632:	b.n	74cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x124>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    7634:	cmp	r3, #47	; 0x2f
  *ptr = &path[end];
    7636:	mov.w	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    763a:	beq.n	7640 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x298>
    763c:	cmp	r3, #32
    763e:	bne.n	7644 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x29c>
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    7640:	mov	r5, r7
    7642:	b.n	744a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    7644:	str	r0, [r2, #0]
    7646:	mov.w	r4, #4294967295
    764a:	mov	r5, r7
    764c:	b.n	7496 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xee>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    764e:	mov	sl, r9
    7650:	b.n	7516 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    7652:	nop
    7654:	.word	0x05000101

00007658 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7658:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    765c:	ldrb	r3, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    765e:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7660:	movs	r2, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7662:	and.w	r3, r3, #2
    7666:	strb.w	r2, [sp, #4]
    766a:	strb.w	r2, [sp, #5]
    766e:	strb.w	r2, [sp, #6]
    7672:	cmp	r3, #0
    7674:	beq.n	76f0 <FatFile::remove()+0x98>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7676:	ldr	r1, [r0, #32]
    7678:	mov	r6, r0
    767a:	cbnz	r1, 76d4 <FatFile::remove()+0x7c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    767c:	movs	r1, #1
    767e:	mov	r0, r6
    7680:	bl	5d14 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7684:	mov	r7, r0
    7686:	cmp	r0, #0
    7688:	beq.w	77b6 <FatFile::remove()+0x15e>
    768c:	subs	r1, r7, #1
    768e:	add.w	r0, r7, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    7692:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7694:	lsrs	r2, r4, #1
    7696:	ldrb.w	r5, [r1, #1]!
    769a:	orr.w	r3, r2, r4, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    769e:	cmp	r1, r0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    76a0:	uxtab	r3, r5, r3
    76a4:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    76a6:	bne.n	7694 <FatFile::remove()+0x3c>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    76a8:	mov.w	r8, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    76ac:	movs	r3, #0
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    76ae:	strb.w	r8, [r7]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    76b2:	ldr	r5, [r6, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    76b4:	strb	r3, [r6, #0]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    76b6:	add.w	r0, r5, #40	; 0x28
  m_flags = 0;
    76ba:	strb	r3, [r6, #2]
    76bc:	bl	6d34 <FatCache::sync()>
    76c0:	cbnz	r0, 7704 <FatFile::remove()+0xac>

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    76c2:	movw	r0, #594	; 0x252
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    76c6:	movs	r5, #0
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    76c8:	bl	71d8 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    76cc:	mov	r0, r5
    76ce:	add	sp, #40	; 0x28
    76d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    76d4:	ldr	r0, [r0, #8]
    76d6:	bl	6f2c <FatPartition::freeChain(unsigned long)>
    76da:	mov	r5, r0
    76dc:	cmp	r0, #0
    76de:	bne.n	767c <FatFile::remove()+0x24>
    DBG_FAIL_MACRO;
    76e0:	movw	r0, #574	; 0x23e
    76e4:	bl	71d8 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    76e8:	mov	r0, r5
    76ea:	add	sp, #40	; 0x28
    76ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76f0:	and.w	r5, r3, #255	; 0xff
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    76f4:	movw	r0, #569	; 0x239
    76f8:	bl	71d8 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    76fc:	mov	r0, r5
    76fe:	add	sp, #40	; 0x28
    7700:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7704:	add.w	r0, r5, #564	; 0x234
    7708:	bl	6d34 <FatCache::sync()>
    770c:	cmp	r0, #0
    770e:	beq.n	76c2 <FatFile::remove()+0x6a>
    7710:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7712:	ldr	r3, [r0, #0]
    7714:	ldr	r3, [r3, #20]
    7716:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7718:	mov	r5, r0
    771a:	cmp	r0, #0
    771c:	beq.n	76c2 <FatFile::remove()+0x6a>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    771e:	ldrb	r3, [r6, #3]
    7720:	cmp	r3, #0
    7722:	beq.n	76cc <FatFile::remove()+0x74>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    7724:	mov	r1, r6
    7726:	add	r0, sp, #4
    7728:	bl	7238 <FatFile::openCluster(FatFile*)>
    772c:	mov	r3, r0
    772e:	cmp	r0, #0
    7730:	beq.n	77aa <FatFile::remove()+0x152>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7732:	ldrb	r3, [r6, #3]
    7734:	cmp	r3, #0
    7736:	beq.n	77c2 <FatFile::remove()+0x16a>
    7738:	movs	r7, #1
    773a:	b.n	777e <FatFile::remove()+0x126>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    773c:	add	r0, sp, #4
    773e:	bl	6170 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7742:	adds	r1, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    7744:	mov	r3, r0
    7746:	cmp	r0, #0
    7748:	beq.n	77ce <FatFile::remove()+0x176>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    774a:	ldrb	r2, [r0, #11]
    774c:	cmp	r2, #15
    774e:	bne.n	779e <FatFile::remove()+0x146>
        order != (ldir->order & 0X1F) ||
    7750:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7752:	and.w	r0, r2, #31
    7756:	cmp	r7, r0
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7758:	uxtb	r7, r1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    775a:	bne.n	779e <FatFile::remove()+0x146>
        order != (ldir->order & 0X1F) ||
    775c:	ldrb	r1, [r3, #13]
    775e:	cmp	r1, r4
    7760:	bne.n	779e <FatFile::remove()+0x146>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    7762:	strb.w	r8, [r3]
    m_vol->cacheDirty();
    7766:	ldr	r1, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    7768:	ldrb.w	r3, [r1, #40]	; 0x28
    776c:	orr.w	r3, r3, #1
    7770:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    7774:	lsls	r3, r2, #25
    7776:	bmi.n	77da <FatFile::remove()+0x182>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7778:	ldrb	r3, [r6, #3]
    777a:	cmp	r3, r7
    777c:	bcc.n	77c2 <FatFile::remove()+0x16a>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    777e:	ldrh	r1, [r6, #4]
    7780:	add	r0, sp, #4
    7782:	subs	r1, r1, r7
    7784:	lsls	r1, r1, #5
    7786:	bl	61c4 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    778a:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    778c:	mov	r3, r0
    778e:	cmp	r0, #0
    7790:	bne.n	773c <FatFile::remove()+0xe4>
      DBG_FAIL_MACRO;
    7792:	movw	r0, #607	; 0x25f
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7796:	mov	r5, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    7798:	bl	71d8 <dbgPrint(unsigned short)>
      goto fail;
    779c:	b.n	76cc <FatFile::remove()+0x74>
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    779e:	movw	r0, #618	; 0x26a
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77a2:	movs	r5, #0
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    77a4:	bl	71d8 <dbgPrint(unsigned short)>
      goto fail;
    77a8:	b.n	76cc <FatFile::remove()+0x74>
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    77aa:	movw	r0, #602	; 0x25a
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77ae:	mov	r5, r3
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    77b0:	bl	71d8 <dbgPrint(unsigned short)>
    goto fail;
    77b4:	b.n	76cc <FatFile::remove()+0x74>
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    77b6:	mov.w	r0, #580	; 0x244
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77ba:	mov	r5, r7
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    77bc:	bl	71d8 <dbgPrint(unsigned short)>
    goto fail;
    77c0:	b.n	76cc <FatFile::remove()+0x74>
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    77c2:	movw	r0, #633	; 0x279

fail:
  return false;
    77c6:	movs	r5, #0
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    77c8:	bl	71d8 <dbgPrint(unsigned short)>
    77cc:	b.n	76cc <FatFile::remove()+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    77ce:	mov.w	r0, #612	; 0x264
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77d2:	mov	r5, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    77d4:	bl	71d8 <dbgPrint(unsigned short)>
      goto fail;
    77d8:	b.n	76cc <FatFile::remove()+0x74>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    77da:	ldr	r4, [r6, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    77dc:	add.w	r0, r4, #40	; 0x28
    77e0:	bl	6d34 <FatCache::sync()>
    77e4:	cbnz	r0, 77f2 <FatFile::remove()+0x19a>
        DBG_FAIL_MACRO;
    77e6:	movw	r0, #626	; 0x272
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77ea:	movs	r5, #0
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
        DBG_FAIL_MACRO;
    77ec:	bl	71d8 <dbgPrint(unsigned short)>
        goto fail;
    77f0:	b.n	76cc <FatFile::remove()+0x74>
    77f2:	add.w	r0, r4, #564	; 0x234
    77f6:	bl	6d34 <FatCache::sync()>
    77fa:	cmp	r0, #0
    77fc:	beq.n	77e6 <FatFile::remove()+0x18e>
    77fe:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7800:	ldr	r3, [r0, #0]
    7802:	ldr	r3, [r3, #20]
    7804:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7806:	cmp	r0, #0
    7808:	beq.n	77e6 <FatFile::remove()+0x18e>
    780a:	b.n	76cc <FatFile::remove()+0x74>

0000780c <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    780c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
    7810:	ldrb	r3, [r1, #0]
    7812:	lsls	r2, r3, #31
    7814:	bpl.n	7908 <FatFile::lfnUniqueSfn(fname_t*)+0xfc>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    7816:	ldrb	r7, [r1, #12]
    7818:	mov	r5, r1
    781a:	mov	r8, r0
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');
    781c:	adds	r3, r1, r7
    781e:	ldrb	r2, [r3, #13]
    7820:	cmp	r2, #126	; 0x7e
    7822:	beq.n	784c <FatFile::lfnUniqueSfn(fname_t*)+0x40>
    7824:	ldrb	r3, [r3, #14]
    7826:	cmp	r3, #49	; 0x31
    7828:	beq.n	784c <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    782a:	movs	r1, #9
    782c:	ldr	r0, [pc, #264]	; (7938 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    782e:	bl	a3cc <usb_serial_write>
    7832:	movs	r1, #107	; 0x6b
    7834:	ldr	r0, [pc, #260]	; (793c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7836:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    783a:	movw	r1, #646	; 0x286
    783e:	ldr	r0, [pc, #256]	; (7940 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    7840:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7844:	ldr	r0, [pc, #248]	; (7940 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    7846:	bl	b6f8 <Print::println()>
    784a:	b.n	784a <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
    784c:	movs	r6, #2
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    784e:	add.w	r9, r5, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    7852:	ldr	r1, [r5, #4]
    7854:	ldr	r2, [r5, #8]
    7856:	adds	r3, r6, r1
    7858:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    785a:	cbz	r1, 7870 <FatFile::lfnUniqueSfn(fname_t*)+0x64>
    785c:	adds	r0, r2, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    785e:	ldrb.w	r1, [r2], #1
    7862:	add.w	r3, r3, r3, lsl #5
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7866:	cmp	r0, r2
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    7868:	eor.w	r3, r3, r1
    786c:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    786e:	bne.n	785e <FatFile::lfnUniqueSfn(fname_t*)+0x52>
    7870:	cmp	r7, #3
    7872:	it	cs
    7874:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7876:	adds	r2, r7, #4
    7878:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    787a:	and.w	r1, r3, #15
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    787e:	subs	r4, r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    7880:	lsrs	r3, r3, #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7882:	cmp	r1, #9
    7884:	add.w	r0, r1, #55	; 0x37
    7888:	it	ls
    788a:	addls.w	r0, r1, #48	; 0x30
    788e:	adds	r1, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7890:	uxtb	r2, r4
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7892:	strb	r0, [r1, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7894:	cmp	r2, r7
    7896:	bhi.n	787a <FatFile::lfnUniqueSfn(fname_t*)+0x6e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    7898:	adds	r3, r5, r7
    789a:	movs	r2, #126	; 0x7e
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    789c:	movs	r1, #0
    789e:	mov	r0, r8
    78a0:	strb	r2, [r3, #13]
    78a2:	bl	61c4 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    78a6:	movs	r1, #1
    78a8:	mov	r0, r8
    78aa:	bl	6170 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    78ae:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    78b0:	mov	r4, r0
    78b2:	cbz	r0, 78de <FatFile::lfnUniqueSfn(fname_t*)+0xd2>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    78b4:	ldrb	r3, [r0, #0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    78b6:	mov	r1, r0
    78b8:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    78ba:	cbz	r3, 78e4 <FatFile::lfnUniqueSfn(fname_t*)+0xd8>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    78bc:	ldrb	r3, [r4, #11]
    78be:	lsls	r3, r3, #28
    78c0:	bmi.n	78a6 <FatFile::lfnUniqueSfn(fname_t*)+0x9a>
    78c2:	bl	ce20 <memcmp>
    78c6:	mov	r4, r0
    78c8:	cmp	r0, #0
    78ca:	bne.n	78a6 <FatFile::lfnUniqueSfn(fname_t*)+0x9a>
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    78cc:	cmp	r6, #99	; 0x63
    78ce:	bne.n	78ea <FatFile::lfnUniqueSfn(fname_t*)+0xde>
        break;
      }
    }
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;
    78d0:	movw	r0, #686	; 0x2ae
    78d4:	bl	71d8 <dbgPrint(unsigned short)>

fail:
  return false;
    78d8:	mov	r0, r4
    78da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    78de:	ldrb.w	r3, [r8, #1]
    78e2:	cbnz	r3, 792a <FatFile::lfnUniqueSfn(fname_t*)+0x11e>

fail:
  return false;

done:
  return true;
    78e4:	movs	r0, #1
    78e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    78ea:	movs	r1, #107	; 0x6b
    78ec:	ldr	r0, [pc, #76]	; (793c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    78ee:	bl	a3cc <usb_serial_write>
    78f2:	adds	r6, #1
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    78f4:	mov.w	r1, #652	; 0x28c
    78f8:	ldr	r0, [pc, #68]	; (7940 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    78fa:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    78fe:	ldr	r0, [pc, #64]	; (7940 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    7900:	bl	b6f8 <Print::println()>
    7904:	uxth	r6, r6
    7906:	b.n	7852 <FatFile::lfnUniqueSfn(fname_t*)+0x46>
    7908:	movs	r1, #9
    790a:	ldr	r0, [pc, #44]	; (7938 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    790c:	bl	a3cc <usb_serial_write>
    7910:	movs	r1, #107	; 0x6b
    7912:	ldr	r0, [pc, #40]	; (793c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7914:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7918:	movw	r1, #645	; 0x285
    791c:	ldr	r0, [pc, #32]	; (7940 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    791e:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7922:	ldr	r0, [pc, #28]	; (7940 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    7924:	bl	b6f8 <Print::println()>
    7928:	b.n	7928 <FatFile::lfnUniqueSfn(fname_t*)+0x11c>
      if (!dir) {
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
    792a:	movw	r0, #673	; 0x2a1
    792e:	bl	71d8 <dbgPrint(unsigned short)>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    7932:	mov	r0, r4
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
    7934:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7938:	.word	0x200003c8
    793c:	.word	0x200003d4
    7940:	.word	0x20000c48

00007944 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7944:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7948:	sub	sp, #52	; 0x34
    794a:	str	r3, [sp, #32]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    794c:	ldrb	r3, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    794e:	str	r0, [sp, #36]	; 0x24
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7950:	tst.w	r3, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7954:	str	r2, [sp, #12]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7956:	beq.n	795c <FatFile::open(FatFile*, fname_t*, int)+0x18>
    7958:	ldrb	r3, [r0, #0]
    795a:	cbz	r3, 796e <FatFile::open(FatFile*, fname_t*, int)+0x2a>
    DBG_FAIL_MACRO;
    795c:	movw	r0, #319	; 0x13f
    goto fail;
  }
  return true;

fail:
  return false;
    7960:	movs	r4, #0
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    7962:	bl	71d8 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7966:	mov	r0, r4
    7968:	add	sp, #52	; 0x34
    796a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    796e:	ldr	r2, [sp, #12]
    7970:	mov	r7, r1
    7972:	ldrb	r3, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    7974:	ldr.w	r9, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7978:	lsls	r3, r3, #30
    797a:	bne.n	7a0c <FatFile::open(FatFile*, fname_t*, int)+0xc8>
    797c:	mov.w	r8, #1
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7980:	ldr	r3, [sp, #12]
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    7982:	mov.w	fp, #0
    7986:	mov	r0, r7
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7988:	adds	r3, #13
    798a:	mov	r1, fp
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    798c:	str.w	fp, [sp, #28]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    7990:	mov	r5, fp
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7992:	str	r3, [sp, #20]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    7994:	mov	sl, fp
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    7996:	str.w	fp, [sp, #16]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    799a:	str.w	fp, [sp, #24]
    799e:	bl	61c4 <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    79a2:	ldr	r6, [r7, #20]
    dir = dirFile->readDirCache(true);
    79a4:	movs	r1, #1
    79a6:	mov	r0, r7
    79a8:	bl	6170 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    79ac:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    79b0:	mov	r3, r0
    79b2:	cmp	r0, #0
    79b4:	beq.w	7b50 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    79b8:	ldrb	r2, [r0, #0]
    79ba:	sub.w	r4, r2, #229	; 0xe5
    79be:	clz	r4, r4
    79c2:	lsrs	r4, r4, #5
    79c4:	cmp	r2, #0
    79c6:	beq.n	7a3e <FatFile::open(FatFile*, fname_t*, int)+0xfa>
    79c8:	cmp	r4, #0
    79ca:	bne.n	7a3e <FatFile::open(FatFile*, fname_t*, int)+0xfa>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    79cc:	cmp	r5, r8
    79ce:	it	cc
    79d0:	movcc	r5, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    79d2:	cmp	r2, #46	; 0x2e
    79d4:	it	eq
    79d6:	orreq.w	r4, r4, #1
    79da:	cbnz	r4, 7a38 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
    79dc:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    79de:	cmp	r1, #15
    79e0:	beq.n	7a74 <FatFile::open(FatFile*, fname_t*, int)+0x130>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    79e2:	lsls	r2, r1, #28
    79e4:	bmi.n	7a38 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
      if (lfnOrd) {
    79e6:	cmp.w	sl, #0
    79ea:	bne.w	7d20 <FatFile::open(FatFile*, fname_t*, int)+0x3dc>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    79ee:	mov	r0, r3
    79f0:	movs	r2, #11
    79f2:	ldr	r1, [sp, #20]
    79f4:	bl	ce20 <memcmp>
    79f8:	cmp	r0, #0
    79fa:	bne.n	79a2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    79fc:	ldr	r3, [sp, #12]
    79fe:	ldrb	r3, [r3, #0]
    7a00:	lsls	r0, r3, #31
    7a02:	bpl.w	7cfc <FatFile::open(FatFile*, fname_t*, int)+0x3b8>
          goto found;
        }
        fnameFound = true;
    7a06:	movs	r3, #1
    7a08:	str	r3, [sp, #24]
    7a0a:	b.n	79a2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7a0c:	add.w	r3, r9, #12
    7a10:	ldr	r2, [pc, #760]	; (7d0c <FatFile::open(FatFile*, fname_t*, int)+0x3c8>)
    7a12:	umull	r3, r8, r2, r3
    7a16:	mov.w	r8, r8, lsr #2
    7a1a:	add.w	r8, r8, #1
    7a1e:	uxtb.w	r8, r8
    7a22:	b.n	7980 <FatFile::open(FatFile*, fname_t*, int)+0x3c>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7a24:	ldr	r1, [sp, #16]
    7a26:	subs	r1, #1
    7a28:	uxtb	r1, r1
    7a2a:	cmp	r2, r1
    7a2c:	str	r1, [sp, #16]
    7a2e:	bne.n	7a38 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
    7a30:	ldrb	r2, [r3, #13]
    7a32:	ldr	r1, [sp, #28]
    7a34:	cmp	r1, r2
    7a36:	beq.n	7a8a <FatFile::open(FatFile*, fname_t*, int)+0x146>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
          // Not found.
          lfnOrd = 0;
    7a38:	mov.w	sl, #0
    7a3c:	b.n	79a2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    7a3e:	cmp	r5, #0
    7a40:	it	eq
    7a42:	moveq	fp, r6
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    7a44:	cmp	r5, r8
    7a46:	bcs.n	7a4c <FatFile::open(FatFile*, fname_t*, int)+0x108>
        freeFound++;
    7a48:	adds	r5, #1
    7a4a:	uxtb	r5, r5
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7a4c:	cmp	r2, #0
    7a4e:	bne.n	79d2 <FatFile::open(FatFile*, fname_t*, int)+0x8e>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7a50:	ldr	r2, [sp, #32]
    7a52:	mov	r3, r2
    7a54:	lsls	r2, r3, #22
    7a56:	bpl.n	7a62 <FatFile::open(FatFile*, fname_t*, int)+0x11e>
    7a58:	and.w	r3, r3, #3
    7a5c:	subs	r3, #1
    7a5e:	cmp	r3, #1
    7a60:	bls.n	7af4 <FatFile::open(FatFile*, fname_t*, int)+0x1b0>
    goto fail;
  }
  return true;

fail:
  return false;
    7a62:	movs	r4, #0
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    7a64:	mov.w	r0, #418	; 0x1a2
    7a68:	bl	71d8 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7a6c:	mov	r0, r4
    7a6e:	add	sp, #52	; 0x34
    7a70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    7a74:	cmp.w	sl, #0
    7a78:	bne.n	7a24 <FatFile::open(FatFile*, fname_t*, int)+0xe0>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    7a7a:	lsls	r1, r2, #25
    7a7c:	bpl.n	79a2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7a7e:	and.w	sl, r2, #31
        checksum = ldir->checksum;
    7a82:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7a84:	str.w	sl, [sp, #16]
        checksum = ldir->checksum;
    7a88:	str	r2, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7a8a:	ldr	r2, [sp, #16]
    7a8c:	subs	r2, #1
    7a8e:	add.w	r4, r2, r2, lsl #1
    7a92:	add.w	r4, r2, r4, lsl #2
      if (k >= len) {
    7a96:	cmp	r9, r4
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7a98:	mov	r2, r4
      if (k >= len) {
    7a9a:	bls.n	7a38 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
    7a9c:	add.w	r6, r4, #13
    7aa0:	b.n	7ad0 <FatFile::open(FatFile*, fname_t*, int)+0x18c>
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7aa2:	cmp.w	ip, #25
    7aa6:	add.w	r0, r1, #32
    7aaa:	it	ls
    7aac:	uxtbls	r1, r0
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7aae:	ldr	r0, [sp, #12]
    7ab0:	ldr	r0, [r0, #8]
    7ab2:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7ab4:	sub.w	r0, r2, #65	; 0x41
    7ab8:	add.w	ip, r2, #32
    7abc:	cmp	r0, #25
    7abe:	it	ls
    7ac0:	uxtbls.w	r2, ip
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7ac4:	cmp	r2, r1
    7ac6:	bne.n	7a38 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    7ac8:	cmp	lr, r6
    7aca:	mov	r2, lr
    7acc:	beq.w	79a2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
        uint16_t u = lfnGetChar(ldir, i);
    7ad0:	subs	r1, r2, r4
    7ad2:	mov	r0, r3
    7ad4:	uxtb	r1, r1
    7ad6:	bl	71ac <lfnGetChar(DirLfn_t*, unsigned char)>
        if (k == len) {
    7ada:	cmp	r9, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7adc:	add.w	lr, r2, #1
    7ae0:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    7ae2:	beq.w	7cd2 <FatFile::open(FatFile*, fname_t*, int)+0x38e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7ae6:	cmp	r0, #255	; 0xff
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7ae8:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7aec:	bls.n	7aa2 <FatFile::open(FatFile*, fname_t*, int)+0x15e>
          // Not found.
          lfnOrd = 0;
    7aee:	mov.w	sl, #0
    7af2:	b.n	79a2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    7af4:	cmp	r5, #0
    7af6:	it	eq
    7af8:	moveq	fp, r6
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7afa:	cmp	r5, r8
    7afc:	bcc.n	7b06 <FatFile::open(FatFile*, fname_t*, int)+0x1c2>
    7afe:	b.n	7b64 <FatFile::open(FatFile*, fname_t*, int)+0x220>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7b00:	uxtb	r5, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7b02:	cmp	r8, r5
    7b04:	bls.n	7b64 <FatFile::open(FatFile*, fname_t*, int)+0x220>
    dir = dirFile->readDirCache();
    7b06:	movs	r1, #0
    7b08:	mov	r0, r7
    7b0a:	bl	6170 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7b0e:	adds	r3, r5, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    7b10:	cmp	r0, #0
    7b12:	bne.n	7b00 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
      if (dirFile->getError()) {
    7b14:	ldrb	r3, [r7, #1]
    7b16:	mov	r4, r0
    7b18:	cbz	r3, 7b2e <FatFile::open(FatFile*, fname_t*, int)+0x1ea>
        DBG_FAIL_MACRO;
    7b1a:	mov.w	r0, #430	; 0x1ae
    7b1e:	bl	71d8 <dbgPrint(unsigned short)>
        goto fail;
    7b22:	b.n	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7b24:	ldr	r3, [r7, #8]
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    7b26:	uxtb	r5, r5
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    7b28:	ldrb	r3, [r3, #4]
    7b2a:	cmp	r3, #1
    7b2c:	bhi.n	7b64 <FatFile::open(FatFile*, fname_t*, int)+0x220>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    7b2e:	cmp	r8, r5
    7b30:	bls.n	7b64 <FatFile::open(FatFile*, fname_t*, int)+0x220>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7b32:	mov	r0, r7
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    7b34:	adds	r5, #16
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7b36:	bl	5c40 <FatFile::addDirCluster()>
    7b3a:	cmp	r0, #0
    7b3c:	bne.n	7b24 <FatFile::open(FatFile*, fname_t*, int)+0x1e0>
    7b3e:	mov	r4, r0
      DBG_FAIL_MACRO;
    7b40:	movw	r0, #441	; 0x1b9
    7b44:	bl	71d8 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7b48:	mov	r0, r4
    7b4a:	add	sp, #52	; 0x34
    7b4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    7b50:	ldrb	r2, [r7, #1]
    7b52:	cmp	r2, #0
    7b54:	beq.w	7a50 <FatFile::open(FatFile*, fname_t*, int)+0x10c>
        DBG_FAIL_MACRO;
    7b58:	movw	r0, #331	; 0x14b
    goto fail;
  }
  return true;

fail:
  return false;
    7b5c:	mov	r4, r3
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7b5e:	bl	71d8 <dbgPrint(unsigned short)>
        goto fail;
    7b62:	b.n	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    7b64:	ldr	r3, [sp, #24]
    7b66:	cbz	r3, 7b78 <FatFile::open(FatFile*, fname_t*, int)+0x234>
    if (!dirFile->lfnUniqueSfn(fname)) {
    7b68:	ldr	r1, [sp, #12]
    7b6a:	mov	r0, r7
    7b6c:	bl	780c <FatFile::lfnUniqueSfn(fname_t*)>
    7b70:	mov	r4, r0
    7b72:	cmp	r0, #0
    7b74:	beq.w	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    7b78:	mov.w	r1, fp, lsl #5
    7b7c:	mov	r0, r7
    7b7e:	bl	61c4 <FatFile::seekSet(unsigned long)>
    7b82:	mov	r4, r0
    7b84:	cmp	r0, #0
    7b86:	beq.w	7d30 <FatFile::open(FatFile*, fname_t*, int)+0x3ec>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    7b8a:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    7b8e:	ands.w	sl, r8, #255	; 0xff
    7b92:	beq.n	7c3e <FatFile::open(FatFile*, fname_t*, int)+0x2fa>
    7b94:	mov	r6, sl
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    7b96:	mov.w	r8, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7b9a:	movs	r5, #15
    7b9c:	ldr.w	fp, [sp, #12]
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    7ba0:	movs	r1, #0
    7ba2:	mov	r0, r7
    7ba4:	bl	6170 <FatFile::readDirCache(bool)>
    if (!ldir) {
    7ba8:	cmp	r0, #0
    7baa:	beq.w	7d14 <FatFile::open(FatFile*, fname_t*, int)+0x3d0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    7bae:	ldr	r2, [r7, #8]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7bb0:	cmp	r6, sl
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    7bb2:	ldrb.w	r3, [r2, #40]	; 0x28
    7bb6:	orr.w	r3, r3, #1
    7bba:	strb.w	r3, [r2, #40]	; 0x28
    7bbe:	beq.w	7d44 <FatFile::open(FatFile*, fname_t*, int)+0x400>
    7bc2:	mov	r1, r6
    7bc4:	add.w	lr, fp, #12
    7bc8:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    7bcc:	movs	r3, #0
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7bce:	strb	r1, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7bd0:	strb	r5, [r0, #11]
    ldir->mustBeZero1 = 0;
    7bd2:	strb.w	r8, [r0, #12]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7bd6:	lsrs	r2, r3, #1
    7bd8:	ldrb.w	r4, [lr, #1]!
    7bdc:	orr.w	r3, r2, r3, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7be0:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7be2:	uxtab	r3, r4, r3
    7be6:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7be8:	bne.n	7bd6 <FatFile::open(FatFile*, fname_t*, int)+0x292>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7bea:	and.w	r1, r1, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    7bee:	strb	r3, [r0, #13]
    7bf0:	adds	r2, r0, #4
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    7bf2:	ldr.w	r4, [fp, #8]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7bf6:	subs	r1, #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7bf8:	strh.w	r8, [r0, #26]
  for (uint8_t i = 0; i < 13; i++, k++) {
    7bfc:	movs	r3, #0
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7bfe:	add.w	r0, r1, r1, lsl #1
    7c02:	add.w	r1, r1, r0, lsl #2
    7c06:	b.n	7c1c <FatFile::open(FatFile*, fname_t*, int)+0x2d8>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    7c08:	cmp	r3, #10
    7c0a:	ite	ls
    7c0c:	strhls	r0, [r2, #0]
    7c0e:	strhhi	r0, [r2, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    7c10:	adds	r3, #1
    7c12:	adds	r1, #1
    7c14:	adds	r2, #2
    7c16:	uxtb	r3, r3
    7c18:	cmp	r3, #13
    7c1a:	beq.n	7c36 <FatFile::open(FatFile*, fname_t*, int)+0x2f2>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7c1c:	cmp	r9, r1
    7c1e:	ite	ne
    7c20:	movne.w	r0, #4294967295
    7c24:	moveq	r0, #0
    7c26:	ite	hi
    7c28:	ldrbhi	r0, [r4, r1]
    7c2a:	uxthls	r0, r0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7c2c:	cmp	r3, #4
    7c2e:	bhi.n	7c08 <FatFile::open(FatFile*, fname_t*, int)+0x2c4>
    7c30:	strh.w	r0, [r2, #-3]
    7c34:	b.n	7c10 <FatFile::open(FatFile*, fname_t*, int)+0x2cc>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    7c36:	subs	r6, #1
    7c38:	ands.w	r6, r6, #255	; 0xff
    7c3c:	bne.n	7ba0 <FatFile::open(FatFile*, fname_t*, int)+0x25c>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7c3e:	ldr	r6, [r7, #20]
  dir = dirFile->readDirCache();
    7c40:	movs	r1, #0
    7c42:	mov	r0, r7
    7c44:	bl	6170 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7c48:	ubfx	r6, r6, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    7c4c:	mov	r4, r0
    7c4e:	cmp	r0, #0
    7c50:	beq.n	7d3a <FatFile::open(FatFile*, fname_t*, int)+0x3f6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    7c52:	movs	r2, #32
    7c54:	movs	r1, #0
    7c56:	bl	cf4c <memset>
  memcpy(dir->name, fname->sfn, 11);
    7c5a:	ldr	r5, [sp, #12]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    7c5c:	ldr	r2, [pc, #176]	; (7d10 <FatFile::open(FatFile*, fname_t*, int)+0x3cc>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    7c5e:	mov	r3, r5
    7c60:	ldr.w	r0, [r3, #13]!
    7c64:	ldr	r1, [r3, #4]
    7c66:	str	r0, [r4, #0]
    7c68:	str	r1, [r4, #4]
    7c6a:	ldrh	r1, [r3, #8]
    7c6c:	ldrb	r3, [r3, #10]
    7c6e:	strh	r1, [r4, #8]
    7c70:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7c72:	ldrb	r3, [r5, #0]

  // set timestamps
  if (FsDateTime::callback) {
    7c74:	ldr	r5, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7c76:	and.w	r3, r3, #24
    7c7a:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    7c7c:	cbz	r5, 7ca2 <FatFile::open(FatFile*, fname_t*, int)+0x35e>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    7c7e:	add.w	r2, sp, #43	; 0x2b
    7c82:	add.w	r1, sp, #46	; 0x2e
    7c86:	add	r0, sp, #44	; 0x2c
    7c88:	blx	r5
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    7c8a:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    7c8e:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    7c92:	ldrb.w	r1, [sp, #43]	; 0x2b
    7c96:	strh	r3, [r4, #16]
    7c98:	strb	r1, [r4, #13]
    7c9a:	strh	r3, [r4, #18]
    7c9c:	strh	r3, [r4, #24]
    7c9e:	strh	r2, [r4, #14]
    7ca0:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    7ca2:	ldr	r2, [r7, #8]
    7ca4:	ldrb.w	r3, [r2, #40]	; 0x28
    7ca8:	orr.w	r3, r3, #1
    7cac:	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    7cb0:	str.w	sl, [sp]
    7cb4:	mov	r2, r6
    7cb6:	ldr	r3, [sp, #32]
    7cb8:	mov	r1, r7
    7cba:	ldr	r0, [sp, #36]	; 0x24
    7cbc:	bl	62e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7cc0:	mov	r4, r0
    7cc2:	cmp	r0, #0
    7cc4:	bne.w	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    DBG_FAIL_MACRO;
    7cc8:	mov.w	r0, #504	; 0x1f8
    7ccc:	bl	71d8 <dbgPrint(unsigned short)>
    goto fail;
    7cd0:	b.n	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    7cd2:	cmp	r0, #0
    7cd4:	it	ne
    7cd6:	movne.w	sl, #0
    7cda:	b.n	79a2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
    7cdc:	subs	r0, r3, #1
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    7cde:	mov	r2, r4
    7ce0:	adds	r3, #10
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7ce2:	lsrs	r1, r2, #1
    7ce4:	ldrb.w	r5, [r0, #1]!
    7ce8:	orr.w	r2, r1, r2, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7cec:	cmp	r0, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7cee:	uxtab	r2, r5, r2
    7cf2:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7cf4:	bne.n	7ce2 <FatFile::open(FatFile*, fname_t*, int)+0x39e>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7cf6:	ldr	r3, [sp, #28]
    7cf8:	cmp	r3, r2
    7cfa:	bne.n	7d26 <FatFile::open(FatFile*, fname_t*, int)+0x3e2>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    7cfc:	ldr	r3, [sp, #32]
    7cfe:	lsls	r1, r3, #20
    7d00:	bpl.n	7cb0 <FatFile::open(FatFile*, fname_t*, int)+0x36c>
    DBG_FAIL_MACRO;
    7d02:	mov.w	r0, #410	; 0x19a
    7d06:	bl	71d8 <dbgPrint(unsigned short)>
    goto fail;
    7d0a:	b.n	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7d0c:	.word	0x4ec4ec4f
    7d10:	.word	0x2000607c
    7d14:	mov	r4, r0
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7d16:	movw	r0, #463	; 0x1cf
    7d1a:	bl	71d8 <dbgPrint(unsigned short)>
      goto fail;
    7d1e:	b.n	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7d20:	ldr	r2, [sp, #16]
    7d22:	cmp	r2, #1
    7d24:	beq.n	7cdc <FatFile::open(FatFile*, fname_t*, int)+0x398>
          goto found;
        }
        DBG_FAIL_MACRO;
    7d26:	movw	r0, #393	; 0x189
    7d2a:	bl	71d8 <dbgPrint(unsigned short)>
        goto fail;
    7d2e:	b.n	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!dirFile->lfnUniqueSfn(fname)) {
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    7d30:	mov.w	r0, #456	; 0x1c8
    7d34:	bl	71d8 <dbgPrint(unsigned short)>
    goto fail;
    7d38:	b.n	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7d3a:	movw	r0, #477	; 0x1dd
    7d3e:	bl	71d8 <dbgPrint(unsigned short)>
    goto fail;
    7d42:	b.n	7966 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7d44:	orr.w	r1, r6, #64	; 0x40
    7d48:	uxtb	r1, r1
    7d4a:	b.n	7bc4 <FatFile::open(FatFile*, fname_t*, int)+0x280>

00007d4c <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    7d4c:	push	{r3, r4, r5, lr}
    7d4e:	movs	r1, #10
    7d50:	mov	r5, r0
    7d52:	ldr	r0, [pc, #40]	; (7d7c <dbgPrint(unsigned short)+0x30>)
    7d54:	bl	a3cc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7d58:	ldr	r4, [pc, #36]	; (7d80 <dbgPrint(unsigned short)+0x34>)
    7d5a:	movs	r1, #14
    7d5c:	ldr	r0, [pc, #36]	; (7d84 <dbgPrint(unsigned short)+0x38>)
    7d5e:	bl	a3cc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7d62:	movs	r0, #46	; 0x2e
    7d64:	bl	a3a0 <usb_serial_putchar>
    7d68:	mov	r1, r5
    7d6a:	mov	r0, r4
    7d6c:	bl	b7c8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7d70:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    7d72:	ldmia.w	sp!, {r3, r4, r5, lr}
    7d76:	b.w	b6f8 <Print::println()>
    7d7a:	nop
    7d7c:	.word	0x2000034c
    7d80:	.word	0x20000c48
    7d84:	.word	0x20000440

00007d88 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    7d88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d8c:	ldrb	r4, [r0, #0]
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    7d8e:	cbz	r4, 7df8 <FatFile::getSFN(char*)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    7d90:	ands.w	r4, r4, #96	; 0x60
    7d94:	mov	r6, r1
    7d96:	beq.n	7da6 <FatFile::getSFN(char*)+0x1e>
    name[0] = '/';
    7d98:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    7d9a:	movs	r3, #0
    return true;
    7d9c:	movs	r0, #1
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    7d9e:	strb	r2, [r1, #0]
    name[1] = '\0';
    7da0:	strb	r3, [r1, #1]
    return true;
    7da2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    7da6:	mov	r1, r4
    7da8:	bl	5d14 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7dac:	mov	r8, r0
    7dae:	cbz	r0, 7e04 <FatFile::getSFN(char*)+0x7c>
    7db0:	mov	r1, r4
    7db2:	subs	r0, #1
    7db4:	mov.w	lr, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7db8:	mov.w	ip, #46	; 0x2e
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    7dbc:	mov	r5, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    7dbe:	ldrb.w	r3, [r0, #1]!
    7dc2:	cmp	r3, #32
    7dc4:	beq.n	7de8 <FatFile::getSFN(char*)+0x60>
      continue;
    }
    if (i == 8) {
    7dc6:	cmp	r1, #8
    7dc8:	beq.n	7e10 <FatFile::getSFN(char*)+0x88>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7dca:	sub.w	r2, r3, #65	; 0x41
      c += 'a' - 'A';
    }
    name[j++] = c;
    7dce:	adds	r7, r5, #1
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7dd0:	cmp	r2, #25
    7dd2:	bhi.n	7de4 <FatFile::getSFN(char*)+0x5c>
    7dd4:	ldrb.w	r2, [r8, #12]
      c += 'a' - 'A';
    7dd8:	add.w	r4, r3, #32
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7ddc:	tst.w	lr, r2
      c += 'a' - 'A';
    7de0:	it	ne
    7de2:	uxtbne	r3, r4
    }
    name[j++] = c;
    7de4:	strb	r3, [r6, r5]
    7de6:	uxtb	r5, r7
    7de8:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    7dea:	cmp	r1, #11
    7dec:	bne.n	7dbe <FatFile::getSFN(char*)+0x36>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    7dee:	movs	r3, #0
  return true;
    7df0:	movs	r0, #1
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    7df2:	strb	r3, [r6, r5]
  return true;

fail:
  return false;
}
    7df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    7df8:	movs	r0, #37	; 0x25
    7dfa:	bl	7d4c <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7dfe:	mov	r0, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    7e00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    DBG_FAIL_MACRO;
    7e04:	movs	r0, #48	; 0x30
    7e06:	bl	7d4c <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7e0a:	mov	r0, r8
    7e0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7e10:	adds	r2, r5, #1
    7e12:	strb.w	ip, [r6, r5]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    7e16:	mov.w	lr, #16
    7e1a:	ldrb	r3, [r0, #0]
      name[j++] = '.';
    7e1c:	uxtb	r5, r2
    7e1e:	b.n	7dca <FatFile::getSFN(char*)+0x42>

00007e20 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7e20:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    7e22:	movs	r5, #0
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7e24:	mov	r6, r0
    7e26:	mov	r7, r1
  m_fFile = nullptr;
    7e28:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    7e2a:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    7e2c:	str	r5, [r0, #60]	; 0x3c
  if (from.m_fFile) {
    7e2e:	cbz	r4, 7e54 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7e30:	mov	r1, r0
    7e32:	movs	r0, #36	; 0x24
    7e34:	bl	809c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7e38:	strb	r5, [r0, #0]
    7e3a:	strb	r5, [r0, #1]
    *m_fFile = *from.m_fFile;
    7e3c:	mov	r4, r0
    7e3e:	strb	r5, [r0, #2]
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    7e40:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    7e42:	ldr	r5, [r7, #56]	; 0x38
    7e44:	ldmia	r5!, {r0, r1, r2, r3}
    7e46:	stmia	r4!, {r0, r1, r2, r3}
    7e48:	ldmia	r5!, {r0, r1, r2, r3}
    7e4a:	stmia	r4!, {r0, r1, r2, r3}
    7e4c:	ldr	r3, [r5, #0]
    7e4e:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    7e50:	mov	r0, r6
    7e52:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    7e54:	ldr	r3, [r1, #60]	; 0x3c
    7e56:	cmp	r3, #0
    7e58:	beq.n	7e50 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    7e5a:	mov	r1, r0
    7e5c:	movs	r0, #56	; 0x38
    7e5e:	bl	809c <operator new(unsigned int, unsigned long*)>
    7e62:	strb.w	r4, [r0, #49]	; 0x31
    7e66:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    7e6a:	mov	r2, r0
    7e6c:	strb.w	r4, [r0, #51]	; 0x33
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    7e70:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    7e72:	ldr	r3, [r7, #60]	; 0x3c
    7e74:	add.w	r1, r3, #48	; 0x30
    7e78:	ldr	r7, [r3, #0]
    7e7a:	adds	r3, #16
    7e7c:	ldr.w	r5, [r3, #-12]
    7e80:	adds	r2, #16
    7e82:	ldr.w	r4, [r3, #-8]
    7e86:	ldr.w	r0, [r3, #-4]
    7e8a:	cmp	r3, r1
    7e8c:	str.w	r7, [r2, #-16]
    7e90:	str.w	r5, [r2, #-12]
    7e94:	str.w	r4, [r2, #-8]
    7e98:	str.w	r0, [r2, #-4]
    7e9c:	bne.n	7e78 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    7e9e:	ldr	r3, [r3, #0]
    7ea0:	str	r3, [r2, #0]
    7ea2:	b.n	7e50 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00007ea4 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    7ea4:	push	{r4, lr}
    7ea6:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7ea8:	ldr	r0, [r0, #56]	; 0x38
    7eaa:	cbz	r0, 7eb8 <FsBaseFile::close()+0x14>
    7eac:	bl	5de4 <FatFile::close()>
    7eb0:	cbz	r0, 7eb8 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    7eb2:	movs	r3, #0
    7eb4:	str	r3, [r4, #56]	; 0x38
    return true;
    7eb6:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    7eb8:	ldr	r0, [r4, #60]	; 0x3c
    7eba:	cbz	r0, 7ec8 <FsBaseFile::close()+0x24>
    7ebc:	bl	3e38 <ExFatFile::close()>
    7ec0:	cbz	r0, 7ec8 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    7ec2:	movs	r3, #0
    7ec4:	str	r3, [r4, #60]	; 0x3c
    7ec6:	pop	{r4, pc}
    return true;
  }
  return false;
    7ec8:	movs	r0, #0
}
    7eca:	pop	{r4, pc}

00007ecc <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7ecc:	cbz	r1, 7f42 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7ece:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ed2:	mov	r4, r1
    7ed4:	mov	r5, r0
    7ed6:	mov	r8, r3
    7ed8:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    7eda:	bl	7ea4 <FsBaseFile::close()>
  if (vol->m_fVol) {
    7ede:	ldr.w	r6, [r4, #1144]	; 0x478
    7ee2:	cbz	r6, 7f10 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    7ee4:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    7ee6:	mov	r1, r5
    7ee8:	movs	r0, #36	; 0x24
    7eea:	bl	809c <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7eee:	mov	r3, r8
    7ef0:	strb	r6, [r0, #0]
    7ef2:	mov	r2, r7
    7ef4:	strb	r6, [r0, #1]
    7ef6:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    7ef8:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7efa:	ldr.w	r1, [r4, #1144]	; 0x478
    7efe:	bl	5f60 <FatFile::open(FatVolume*, char const*, int)>
    7f02:	cbz	r0, 7f0a <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    7f04:	movs	r0, #1
    7f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    7f0a:	str	r0, [r5, #56]	; 0x38
    return false;
    7f0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    7f10:	ldr.w	r3, [r4, #1148]	; 0x47c
    7f14:	cbz	r3, 7f46 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    7f16:	mov	r1, r5
    7f18:	movs	r0, #56	; 0x38
    7f1a:	bl	809c <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7f1e:	mov	r3, r8
    7f20:	strb.w	r6, [r0, #49]	; 0x31
    7f24:	mov	r2, r7
    7f26:	strb.w	r6, [r0, #50]	; 0x32
    7f2a:	strb.w	r6, [r0, #51]	; 0x33
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    7f2e:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7f30:	ldr.w	r1, [r4, #1148]	; 0x47c
    7f34:	bl	48cc <ExFatFile::open(ExFatVolume*, char const*, int)>
    7f38:	cmp	r0, #0
    7f3a:	bne.n	7f04 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    7f3c:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    7f3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7f42:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7f44:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7f46:	movs	r0, #0
    7f48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007f4c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7f4c:	push	{r3, r4, r5, r6, r7, lr}
    7f4e:	mov	r5, r1
    7f50:	mov	r7, r2
    7f52:	mov	r4, r0
  close();
    7f54:	bl	7ea4 <FsBaseFile::close()>
  if (dir->m_fFile) {
    7f58:	ldr	r6, [r5, #56]	; 0x38
    7f5a:	cbz	r6, 7f80 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7f5c:	mov	r1, r4
    7f5e:	movs	r0, #36	; 0x24
    7f60:	bl	809c <operator new(unsigned int, unsigned long*)>
    7f64:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7f66:	mov	r2, r7
    7f68:	strb	r1, [r0, #0]
    7f6a:	strb	r1, [r0, #1]
    7f6c:	strb	r1, [r0, #2]
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    7f6e:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7f70:	ldr	r1, [r5, #56]	; 0x38
    7f72:	bl	6424 <FatFile::openNext(FatFile*, int)>
    7f76:	cbz	r0, 7f7c <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    7f78:	movs	r0, #1
    7f7a:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    7f7c:	str	r0, [r4, #56]	; 0x38
    7f7e:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    7f80:	ldr	r0, [r5, #60]	; 0x3c
    7f82:	cbz	r0, 7fa8 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    7f84:	mov	r1, r4
    7f86:	movs	r0, #56	; 0x38
    7f88:	bl	809c <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7f8c:	mov	r2, r7
    7f8e:	strb.w	r6, [r0, #49]	; 0x31
    7f92:	strb.w	r6, [r0, #50]	; 0x32
    7f96:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    7f9a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7f9c:	ldr	r1, [r5, #60]	; 0x3c
    7f9e:	bl	48dc <ExFatFile::openNext(ExFatFile*, int)>
    7fa2:	cmp	r0, #0
    7fa4:	bne.n	7f78 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    7fa6:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    7fa8:	pop	{r3, r4, r5, r6, r7, pc}
    7faa:	nop

00007fac <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7fac:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7fae:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7fb0:	mov	r5, r0
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    7fb2:	mov.w	r0, #1144	; 0x478
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
    7fb6:	str.w	r1, [r5, #1152]	; 0x480
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    7fba:	mov	r1, r5
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7fbc:	str.w	r6, [r5, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    7fc0:	bl	809c <operator new(unsigned int, unsigned long*)>
    7fc4:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    7fc6:	str	r6, [r0, #4]
    invalidate();
    7fc8:	bl	4980 <FsCache::invalidate()>
    7fcc:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    7fd0:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    7fd4:	bl	4980 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    7fd8:	strb.w	r6, [r4, #1084]	; 0x43c
    7fdc:	strb.w	r6, [r4, #1137]	; 0x471
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7fe0:	mov	r0, r4
    7fe2:	strb.w	r6, [r4, #1138]	; 0x472
    7fe6:	movs	r2, #1
    7fe8:	strb.w	r6, [r4, #1139]	; 0x473
    7fec:	str.w	r4, [r5, #1148]	; 0x47c
    7ff0:	ldr.w	r1, [r5, #1152]	; 0x480
    7ff4:	bl	4adc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    7ff8:	cbnz	r0, 8038 <FsVolume::begin(BlockDeviceInterface*)+0x8c>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    7ffa:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    7ffc:	mov	r1, r5
    7ffe:	movw	r0, #1124	; 0x464
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    8002:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    8006:	bl	809c <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    800a:	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    800c:	strb	r6, [r0, #7]
    800e:	mov	r4, r0
    8010:	strb.w	r6, [r0, #1088]	; 0x440
    8014:	strb.w	r6, [r0, #1089]	; 0x441
    8018:	strb.w	r6, [r0, #1090]	; 0x442
    801c:	str.w	r0, [r5, #1144]	; 0x478
    8020:	ldr.w	r1, [r5, #1152]	; 0x480
    8024:	bl	7060 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    8028:	cbnz	r0, 8056 <FsVolume::begin(BlockDeviceInterface*)+0xaa>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    802a:	movs	r3, #0
    802c:	ldr	r2, [pc, #64]	; (8070 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  m_fVol = nullptr;
  return false;
    802e:	mov	r0, r3
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    8030:	str	r3, [r2, #0]
  m_fVol = nullptr;
    8032:	str.w	r3, [r5, #1144]	; 0x478
  return false;
    8036:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8038:	add.w	r6, r4, #1088	; 0x440
    803c:	mov	r0, r6
    803e:	bl	3e38 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    8042:	mov	r1, r4
    8044:	mov	r0, r6
    8046:	bl	3f0c <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    804a:	cmp	r0, #0
    804c:	beq.n	7ffa <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    804e:	ldr	r3, [pc, #32]	; (8070 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  return true;
    8050:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    8052:	str	r5, [r3, #0]
  return true;
    8054:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8056:	add.w	r6, r4, #1088	; 0x440
    805a:	mov	r0, r6
    805c:	bl	5de4 <FatFile::close()>
    return m_vwd.openRoot(this);
    8060:	mov	r1, r4
    8062:	mov	r0, r6
    8064:	bl	5e04 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    8068:	cmp	r0, #0
    806a:	bne.n	804e <FsVolume::begin(BlockDeviceInterface*)+0xa2>
    806c:	b.n	802a <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    806e:	nop
    8070:	.word	0x20006080

00008074 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8074:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    8076:	movs	r5, #0
    8078:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    807c:	ldr	r6, [pc, #24]	; (8098 <FsVolume::open(char const*, int)+0x24>)
    807e:	mov	r4, r0
    8080:	str	r7, [r0, #8]
    8082:	strb	r5, [r0, #4]
    8084:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    8086:	str	r5, [r0, #72]	; 0x48
    8088:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    808a:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    808e:	bl	7ecc <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    8092:	mov	r0, r4
    8094:	pop	{r3, r4, r5, r6, r7, pc}
    8096:	nop
    8098:	.word	0x20000050

0000809c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    809c:	mov	r0, r1
    809e:	bx	lr

000080a0 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    80a0:	ldrb	r0, [r0, #23]
    80a2:	bx	lr

000080a4 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    80a4:	ldrb	r0, [r0, #25]
    80a6:	bx	lr

000080a8 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    80a8:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    80aa:	ldr	r4, [r0, #0]
    80ac:	movs	r3, #1
    80ae:	ldr	r4, [r4, #12]
    80b0:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    80b2:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    80b6:	bx	ip

000080b8 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    80b8:	ldrb	r0, [r0, #26]
    80ba:	bx	lr

000080bc <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    80bc:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    80be:	ldr	r4, [r0, #0]
    80c0:	movs	r3, #1
    80c2:	ldr	r4, [r4, #28]
    80c4:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    80c6:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    80ca:	bx	ip

000080cc <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    80cc:	bx	lr
    80ce:	nop

000080d0 <SdSpiCard::~SdSpiCard()>:
    80d0:	push	{r4, lr}
    80d2:	mov	r4, r0
    80d4:	movs	r1, #28
    80d6:	bl	b7f8 <operator delete(void*, unsigned int)>
    80da:	mov	r0, r4
    80dc:	pop	{r4, pc}
    80de:	nop

000080e0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    80e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80e4:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    80e6:	ldrb	r3, [r0, #20]
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    80e8:	mov	r4, r0
    80ea:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    80ec:	cmp	r3, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    80ee:	mov	r5, r2
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    80f0:	beq.n	8102 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    80f2:	ldr	r3, [r4, #0]
    80f4:	mov	r0, r4
    80f6:	ldr	r3, [r3, #20]
    80f8:	blx	r3
    80fa:	cbnz	r0, 8134 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    80fc:	movs	r0, #0
    80fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    8102:	ldr	r3, [r0, #16]
    8104:	cmp	r3, r1
    8106:	bne.n	80f2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8108:	cbz	r7, 8124 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    810a:	movs	r6, #0
    if (!writeData(src)) {
    810c:	ldr	r3, [r4, #0]
    810e:	mov	r1, r5
    8110:	mov	r0, r4
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8112:	adds	r6, #1
    if (!writeData(src)) {
    8114:	ldr	r3, [r3, #68]	; 0x44
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8116:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    811a:	blx	r3
    811c:	cmp	r0, #0
    811e:	beq.n	80fc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8120:	cmp	r7, r6
    8122:	bne.n	810c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    8124:	ldr	r3, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    8126:	ldrb	r2, [r4, #21]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    8128:	add	r7, r3
    812a:	str	r7, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    812c:	cbnz	r2, 814a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    812e:	movs	r0, #1
    8130:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    8134:	ldr	r3, [r4, #0]
    8136:	mov	r1, r6
    8138:	mov	r0, r4
    813a:	ldr	r3, [r3, #72]	; 0x48
    813c:	blx	r3
    813e:	cmp	r0, #0
    8140:	beq.n	80fc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    8142:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    8144:	str	r6, [r4, #16]
    m_curState = WRITE_STATE;
    8146:	strb	r3, [r4, #20]
    8148:	b.n	8108 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    814a:	ldr	r3, [r4, #0]
    814c:	mov	r0, r4
    814e:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    8150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    8154:	bx	r3
    8156:	nop

00008158 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    8158:	push	{r4, lr}
    815a:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    815c:	adds	r0, #4
    815e:	bl	9864 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    8162:	movs	r1, #0
    8164:	ldrb	r0, [r4, #22]
    8166:	bl	9a98 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    816a:	movs	r3, #1
    816c:	strb	r3, [r4, #24]
    816e:	pop	{r4, pc}

00008170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    8170:	push	{r3, r4, r5, lr}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8172:	adds	r5, r0, #4
    8174:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    8176:	movs	r1, #1
    8178:	ldrb	r0, [r0, #22]
    817a:	bl	9a98 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    817e:	movs	r1, #255	; 0xff
    8180:	mov	r0, r5
    8182:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    8186:	mov	r0, r5
    8188:	bl	999c <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    818c:	movs	r3, #0
    818e:	strb	r3, [r4, #24]
    8190:	pop	{r3, r4, r5, pc}
    8192:	nop

00008194 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    8194:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    8196:	ldrb	r7, [r0, #24]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    8198:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    819a:	cbnz	r7, 81a0 <SdSpiCard::isBusy()+0xc>
    819c:	bl	8158 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    81a0:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    81a2:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    81a4:	mov	r0, r5
    81a6:	bl	99f4 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    81aa:	cmp	r0, #255	; 0xff
    81ac:	add.w	r3, r4, #4294967295
    81b0:	beq.n	81ce <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    81b2:	ands.w	r4, r3, #255	; 0xff
    81b6:	bne.n	81a4 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    81b8:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    81ba:	cbnz	r7, 81c0 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    81bc:	ldrb	r3, [r6, #24]
    81be:	cbnz	r3, 81c4 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    81c0:	mov	r0, r4
    81c2:	pop	{r3, r4, r5, r6, r7, pc}
    81c4:	mov	r0, r6
    81c6:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    81ca:	mov	r0, r4
    81cc:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    81ce:	movs	r4, #0
    81d0:	b.n	81ba <SdSpiCard::isBusy()+0x26>
    81d2:	nop

000081d4 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    81d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81d8:	ldr	r6, [pc, #104]	; (8244 <SdSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    81da:	mov	r4, r0
    81dc:	mov	r8, r1
    81de:	mov	r9, r2
    81e0:	ldr	r5, [r6, #0]
    81e2:	adds	r7, r0, #4

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    81e4:	uxth	r5, r5
    81e6:	b.n	81f4 <SdSpiCard::readData(unsigned char*, unsigned int)+0x20>
    81e8:	ldr	r3, [r6, #0]
    81ea:	uxth	r3, r3
    81ec:	subs	r3, r3, r5
    81ee:	cmp.w	r3, #300	; 0x12c
    81f2:	bgt.n	8218 <SdSpiCard::readData(unsigned char*, unsigned int)+0x44>
    81f4:	mov	r0, r7
    81f6:	bl	99f4 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    81fa:	cmp	r0, #255	; 0xff
    81fc:	strb	r0, [r4, #25]
    81fe:	beq.n	81e8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x14>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    8200:	cmp	r0, #254	; 0xfe
    8202:	beq.n	821e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8204:	movs	r3, #24
    8206:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8208:	ldrb	r0, [r4, #24]
    820a:	cbz	r0, 8214 <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
    820c:	mov	r0, r4
    820e:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    8212:	movs	r0, #0
}
    8214:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8218:	movs	r3, #29
    821a:	strb	r3, [r4, #23]
    821c:	b.n	8208 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    821e:	mov	r2, r9
    8220:	mov	r1, r8
    8222:	mov	r0, r7
    8224:	bl	9a0c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    8228:	strb	r0, [r4, #25]
    822a:	cbz	r0, 8232 <SdSpiCard::readData(unsigned char*, unsigned int)+0x5e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    822c:	movs	r3, #36	; 0x24
    822e:	strb	r3, [r4, #23]
    8230:	b.n	8208 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8232:	mov	r0, r7
    8234:	bl	99f4 <SdSpiArduinoDriver::receive()>
    8238:	mov	r0, r7
    823a:	bl	99f4 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    823e:	movs	r0, #1
    8240:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8244:	.word	0x20006da4

00008248 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    8248:	push	{r3, r4, r5, r6, r7, lr}
    824a:	ldr	r5, [pc, #40]	; (8274 <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    824c:	mov	r7, r1
    824e:	adds	r6, r0, #4
    8250:	ldr	r4, [r5, #0]
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    8252:	uxth	r4, r4
    8254:	b.n	8260 <SdSpiCard::waitNotBusy(unsigned short)+0x18>
    8256:	ldr	r3, [r5, #0]
    8258:	uxth	r3, r3
    825a:	subs	r3, r3, r4
    825c:	cmp	r3, r7
    825e:	bgt.n	826e <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    8260:	mov	r0, r6
    8262:	bl	99f4 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    8266:	cmp	r0, #255	; 0xff
    8268:	bne.n	8256 <SdSpiCard::waitNotBusy(unsigned short)+0xe>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    826a:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    826c:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    826e:	movs	r0, #0
    8270:	pop	{r3, r4, r5, r6, r7, pc}
    8272:	nop
    8274:	.word	0x20006da4

00008278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8278:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    827c:	ldrb	r3, [r0, #24]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    827e:	sub	sp, #8
    8280:	mov	r6, r0
    8282:	mov	r8, r1
    8284:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    8286:	cbnz	r3, 828c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    8288:	bl	8158 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    828c:	cmp.w	r8, #0
    8290:	bne.n	82ec <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8292:	adds	r5, r6, #4
    8294:	orr.w	r1, r8, #64	; 0x40
    8298:	add	r7, sp, #4
    829a:	add	r4, sp, #8
    829c:	mov	r0, r5
    829e:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
    82a2:	ldrb.w	r1, [r4, #-1]!
    82a6:	mov	r0, r5
    82a8:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    82ac:	cmp	r4, r7
    82ae:	bne.n	82a2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    82b0:	cmp.w	r8, #0
    82b4:	mov	r0, r5
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    82b6:	mov.w	r4, #0
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    82ba:	ite	eq
    82bc:	moveq	r1, #149	; 0x95
    82be:	movne	r1, #135	; 0x87
    82c0:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    82c4:	mov	r0, r5
    82c6:	bl	99f4 <SdSpiArduinoDriver::receive()>
    82ca:	mov	r0, r5
    82cc:	bl	99f4 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    82d0:	strb	r0, [r6, #25]
    82d2:	uxtb	r3, r4
    82d4:	adds	r4, #1
    82d6:	lsrs	r2, r0, #7
    82d8:	cmp	r3, #9
    82da:	ite	hi
    82dc:	movhi	r3, #0
    82de:	andls.w	r3, r2, #1
    82e2:	cmp	r3, #0
    82e4:	bne.n	82ca <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
  }
  return m_status;
}
    82e6:	add	sp, #8
    82e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    82ec:	mov.w	r1, #300	; 0x12c
    82f0:	mov	r0, r6
    82f2:	bl	8248 <SdSpiCard::waitNotBusy(unsigned short)>
    82f6:	b.n	8292 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

000082f8 <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    82f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82fc:	sub	sp, #36	; 0x24
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    82fe:	mov.w	sl, #0
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    8302:	mov	r6, r0
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    8304:	adds	r4, r0, #4
    8306:	add	r7, sp, #4
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    8308:	strb.w	sl, [r0, #23]
  m_type = 0;
    830c:	strb.w	sl, [r0, #26]
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    8310:	movs	r5, #10
    8312:	ldr.w	r9, [pc, #428]	; 84c0 <SdSpiCard::begin(SdSpiConfig)+0x1c8>
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    8316:	stmia.w	r7, {r1, r2, r3}
    831a:	ldrb.w	r0, [sp, #4]
    831e:	ldr	r3, [sp, #8]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    8320:	strb	r0, [r6, #22]
    8322:	str	r3, [sp, #0]
    8324:	ldrb.w	r8, [sp, #5]
    8328:	ldr.w	fp, [r9]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    832c:	bl	9a90 <sdCsInit(unsigned char)>
    8330:	ldrb	r0, [r6, #22]
    8332:	movs	r1, #1
    8334:	bl	9a98 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    8338:	ldr	r1, [pc, #380]	; (84b8 <SdSpiCard::begin(SdSpiConfig)+0x1c0>)
    833a:	movs	r2, #7
    833c:	add	r3, sp, #20
    833e:	str	r1, [r6, #8]
    8340:	str	r2, [r6, #12]
    8342:	ldmia.w	r7, {r0, r1, r2}
    8346:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    834a:	mov	r0, r4
    834c:	ldmia	r3, {r1, r2, r3}
    834e:	bl	9968 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    8352:	mvn.w	r3, r8
    8356:	mov	r0, r6
  m_spiActive = false;
    8358:	strb.w	sl, [r6, #24]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    835c:	ubfx	r3, r3, #7, #1
  m_spiActive = false;
  m_curState = IDLE_STATE;
    8360:	strb.w	sl, [r6, #20]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    8364:	strb	r3, [r6, #21]
    8366:	bl	8158 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    836a:	ldrb	r0, [r6, #22]
    836c:	movs	r1, #1
    836e:	bl	9a98 <sdCsWrite(unsigned char, bool)>
    8372:	subs	r5, #1
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8374:	movs	r1, #255	; 0xff
    8376:	mov	r0, r4
    8378:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>

  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    837c:	ands.w	r5, r5, #255	; 0xff
    8380:	bne.n	8372 <SdSpiCard::begin(SdSpiConfig)+0x7a>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    8382:	mov	r1, r5
    8384:	ldrb	r0, [r6, #22]
    8386:	movs	r7, #10
    8388:	bl	9a98 <sdCsWrite(unsigned char, bool)>
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    838c:	movs	r2, #0
    838e:	mov	r0, r6
    8390:	mov	r1, r2
    8392:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8396:	cmp	r0, #1
    8398:	mov	r5, r0
    839a:	beq.n	83d2 <SdSpiCard::begin(SdSpiConfig)+0xda>
    839c:	subs	r3, r7, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
    839e:	ands.w	r7, r3, #255	; 0xff
    83a2:	beq.n	83bc <SdSpiCard::begin(SdSpiConfig)+0xc4>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    83a4:	movs	r1, #253	; 0xfd
    83a6:	mov	r0, r4
    83a8:	mov.w	r5, #520	; 0x208
    83ac:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    83b0:	mov	r0, r4
    83b2:	bl	99f4 <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    83b6:	subs	r5, #1
    83b8:	bne.n	83b0 <SdSpiCard::begin(SdSpiConfig)+0xb8>
    83ba:	b.n	838c <SdSpiCard::begin(SdSpiConfig)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    83bc:	movs	r3, #1
    83be:	strb	r3, [r6, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    83c0:	ldrb	r0, [r6, #24]
    83c2:	cbz	r0, 83cc <SdSpiCard::begin(SdSpiConfig)+0xd4>
    83c4:	mov	r0, r6
    83c6:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

fail:
  spiStop();
  return false;
    83ca:	movs	r0, #0
}
    83cc:	add	sp, #36	; 0x24
    83ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    83d2:	mov.w	r2, #426	; 0x1aa
    83d6:	movs	r1, #8
    83d8:	mov	r0, r6
    83da:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    83de:	lsls	r3, r0, #29
    83e0:	bmi.n	8402 <SdSpiCard::begin(SdSpiConfig)+0x10a>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    83e2:	movs	r3, #2
    83e4:	movs	r5, #4
    83e6:	strb	r3, [r6, #26]
    83e8:	subs	r5, #1
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    83ea:	mov	r0, r4
    83ec:	bl	99f4 <SdSpiArduinoDriver::receive()>
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
    83f0:	strb	r0, [r6, #25]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    83f2:	ands.w	r5, r5, #255	; 0xff
    83f6:	bne.n	83e8 <SdSpiCard::begin(SdSpiConfig)+0xf0>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    83f8:	cmp	r0, #170	; 0xaa
    83fa:	beq.n	8404 <SdSpiCard::begin(SdSpiConfig)+0x10c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    83fc:	movs	r3, #6
    83fe:	strb	r3, [r6, #23]
    8400:	b.n	83c0 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    8402:	strb	r5, [r6, #26]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    8404:	ldr	r3, [r6, #0]
    8406:	ldr	r7, [pc, #180]	; (84bc <SdSpiCard::begin(SdSpiConfig)+0x1c4>)
    8408:	ldr	r3, [r3, #64]	; 0x40
    840a:	cmp	r3, r7
    840c:	bne.n	846e <SdSpiCard::begin(SdSpiConfig)+0x176>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    840e:	ldrb	r0, [r6, #26]
    8410:	cmp	r0, #2
    8412:	ite	eq
    8414:	moveq.w	r5, #1073741824	; 0x40000000
    8418:	movne	r5, #0
    841a:	b.n	842a <SdSpiCard::begin(SdSpiConfig)+0x132>
    841c:	ldr.w	r3, [r9]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    8420:	uxth	r3, r3
    8422:	subs	r3, r3, r2
    8424:	cmp.w	r3, #2000	; 0x7d0
    8428:	bgt.n	8474 <SdSpiCard::begin(SdSpiConfig)+0x17c>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    842a:	movs	r2, #0
    842c:	movs	r1, #55	; 0x37
    842e:	mov	r0, r6
    8430:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    8434:	mov	r2, r5
    8436:	movs	r1, #41	; 0x29
    8438:	mov	r0, r6
    843a:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    843e:	uxth.w	r2, fp
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    8442:	cmp	r0, #0
    8444:	bne.n	841c <SdSpiCard::begin(SdSpiConfig)+0x124>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    8446:	ldr	r3, [r6, #0]
    8448:	ldr	r3, [r3, #64]	; 0x40
    844a:	cmp	r3, r7
    844c:	bne.n	847a <SdSpiCard::begin(SdSpiConfig)+0x182>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    844e:	ldrb	r0, [r6, #26]
    8450:	cmp	r0, #2
    8452:	beq.n	8480 <SdSpiCard::begin(SdSpiConfig)+0x188>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8454:	ldrb	r3, [r6, #24]
    8456:	cbz	r3, 845e <SdSpiCard::begin(SdSpiConfig)+0x166>
    8458:	mov	r0, r6
    845a:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    845e:	movs	r3, #7
    8460:	ldr	r2, [sp, #0]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    8462:	movs	r0, #1
    8464:	str	r2, [r6, #8]
    8466:	str	r3, [r6, #12]

fail:
  spiStop();
  return false;
}
    8468:	add	sp, #36	; 0x24
    846a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    846e:	mov	r0, r6
    8470:	blx	r3
    8472:	b.n	8410 <SdSpiCard::begin(SdSpiConfig)+0x118>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8474:	movs	r3, #23
    8476:	strb	r3, [r6, #23]
    8478:	b.n	83c0 <SdSpiCard::begin(SdSpiConfig)+0xc8>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    847a:	mov	r0, r6
    847c:	blx	r3
    847e:	b.n	8450 <SdSpiCard::begin(SdSpiConfig)+0x158>
    if (cardCommand(CMD58, 0)) {
    8480:	movs	r2, #0
    8482:	movs	r1, #58	; 0x3a
    8484:	mov	r0, r6
    8486:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    848a:	cbz	r0, 8492 <SdSpiCard::begin(SdSpiConfig)+0x19a>
    848c:	movs	r3, #18
    848e:	strb	r3, [r6, #23]
    8490:	b.n	83c0 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8492:	mov	r0, r4
    8494:	bl	99f4 <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    8498:	and.w	r0, r0, #192	; 0xc0
    849c:	cmp	r0, #192	; 0xc0
    849e:	bne.n	84a4 <SdSpiCard::begin(SdSpiConfig)+0x1ac>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    84a0:	movs	r3, #3
    84a2:	strb	r3, [r6, #26]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    84a4:	mov	r0, r4
    84a6:	bl	99f4 <SdSpiArduinoDriver::receive()>
    84aa:	mov	r0, r4
    84ac:	bl	99f4 <SdSpiArduinoDriver::receive()>
    84b0:	mov	r0, r4
    84b2:	bl	99f4 <SdSpiArduinoDriver::receive()>
    84b6:	b.n	8454 <SdSpiCard::begin(SdSpiConfig)+0x15c>
    84b8:	.word	0x00061a80
    84bc:	.word	0x000080b9
    84c0:	.word	0x20006da4

000084c4 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    84c4:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    84c6:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    84c8:	mov	r5, r0
    84ca:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    84cc:	ldr	r3, [r3, #20]
    84ce:	blx	r3
  if (cardCommand(CMD58, 0)) {
    84d0:	mov	r0, r5
    84d2:	movs	r2, #0
    84d4:	movs	r1, #58	; 0x3a
    84d6:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    84da:	cbnz	r0, 84f8 <SdSpiCard::readOCR(unsigned long*)+0x34>
    84dc:	adds	r7, r5, #4
    84de:	adds	r4, r6, #4
    84e0:	mov	r0, r7
    84e2:	bl	99f4 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    84e6:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    84ea:	cmp	r6, r4
    84ec:	bne.n	84e0 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    84ee:	ldrb	r4, [r5, #24]
    84f0:	cbnz	r4, 850e <SdSpiCard::readOCR(unsigned long*)+0x4a>
    84f2:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    84f4:	mov	r0, r4
    84f6:	pop	{r3, r4, r5, r6, r7, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    84f8:	movs	r3, #18
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    84fa:	ldrb	r4, [r5, #24]
    84fc:	strb	r3, [r5, #23]
    84fe:	cmp	r4, #0
    8500:	beq.n	84f4 <SdSpiCard::readOCR(unsigned long*)+0x30>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    8502:	movs	r4, #0
    8504:	mov	r0, r5
    8506:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    850a:	mov	r0, r4
    850c:	pop	{r3, r4, r5, r6, r7, pc}
    850e:	mov	r0, r5
    8510:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8514:	mov	r0, r4
    8516:	pop	{r3, r4, r5, r6, r7, pc}

00008518 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8518:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    851a:	push	{r4, r5, r6, lr}
    851c:	mov	r4, r0
    851e:	mov	r5, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8520:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    8522:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8524:	blx	r3
  if (cardCommand(cmd, 0)) {
    8526:	mov	r1, r5
    8528:	mov	r0, r4
    852a:	movs	r2, #0
    852c:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8530:	cbz	r0, 8544 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    8532:	movs	r3, #27
    8534:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8536:	ldrb	r0, [r4, #24]
    8538:	cbz	r0, 8542 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    853a:	mov	r0, r4
    853c:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    8540:	movs	r0, #0
}
    8542:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    8544:	mov	r1, r6
    8546:	movs	r2, #16
    8548:	mov	r0, r4
    854a:	bl	81d4 <SdSpiCard::readData(unsigned char*, unsigned int)>
    854e:	cmp	r0, #0
    8550:	beq.n	8536 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8552:	ldrb	r5, [r4, #24]
    8554:	cmp	r5, #0
    8556:	beq.n	8542 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    8558:	mov	r0, r4
    855a:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    855e:	mov	r0, r5
    8560:	pop	{r4, r5, r6, pc}
    8562:	nop

00008564 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    8564:	mov	r2, r1
    8566:	movs	r1, #9
    8568:	b.w	8518 <SdSpiCard::readRegister(unsigned char, void*)>

0000856c <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    856c:	mov	r2, r1
    856e:	movs	r1, #10
    8570:	b.w	8518 <SdSpiCard::readRegister(unsigned char, void*)>

00008574 <SdSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8574:	ldr	r3, [r0, #0]
    8576:	ldr	r2, [pc, #144]	; (8608 <SdSpiCard::sectorCount()+0x94>)
    8578:	ldr	r3, [r3, #52]	; 0x34
    857a:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    857c:	push	{r4, r5, lr}
    857e:	sub	sp, #20
    8580:	bne.n	85e2 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    8582:	mov	r2, sp
    8584:	movs	r1, #9
    8586:	bl	8518 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    858a:	cbz	r0, 859c <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    858c:	ldrb.w	r3, [sp]
    8590:	ands.w	r3, r3, #192	; 0xc0
    8594:	beq.n	85a0 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    8596:	cmp	r3, #64	; 0x40
    8598:	beq.n	85e8 <SdSpiCard::sectorCount()+0x74>
    859a:	movs	r0, #0
}
    859c:	add	sp, #20
    859e:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    85a0:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    85a4:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85a8:	ldrb.w	r2, [sp, #7]
    85ac:	and.w	r4, r4, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    85b0:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85b4:	and.w	r3, r3, #3
    85b8:	lsls	r4, r4, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    85ba:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85be:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    85c0:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85c4:	orr.w	r0, r4, r0, lsr #7
    85c8:	and.w	r1, r1, #15
    85cc:	orr.w	r3, r2, r3, lsl #10
    85d0:	add	r0, r1
    85d2:	orr.w	r3, r3, r5, lsr #6
    85d6:	subs	r0, #7
    85d8:	adds	r3, #1
    85da:	lsl.w	r0, r3, r0
    85de:	add	sp, #20
    85e0:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    85e2:	mov	r1, sp
    85e4:	blx	r3
    85e6:	b.n	858a <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    85e8:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    85ec:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    85f0:	adds	r2, r3, #1
    85f2:	ldrb.w	r0, [sp, #8]
    85f6:	and.w	r3, r1, #63	; 0x3f
    85fa:	add.w	r3, r2, r3, lsl #16
    85fe:	add.w	r0, r3, r0, lsl #8
    8602:	lsls	r0, r0, #10
}
    8604:	add	sp, #20
    8606:	pop	{r4, r5, pc}
    8608:	.word	0x00008565

0000860c <SdSpiCard::readStart(unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    860c:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    860e:	mov	r2, r1
    8610:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8612:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    8614:	sub	sp, #12
    8616:	ldr	r5, [pc, #64]	; (8658 <SdSpiCard::readStart(unsigned long)+0x4c>)
    8618:	mov	r4, r0
    861a:	cmp	r3, r5
    861c:	bne.n	8650 <SdSpiCard::readStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    861e:	ldrb	r0, [r0, #26]
  if (type() != SD_CARD_TYPE_SDHC) {
    8620:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    8622:	mov.w	r1, #18
    8626:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    8628:	it	ne
    862a:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    862c:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8630:	cbz	r0, 864a <SdSpiCard::readStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8632:	movs	r3, #12
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8634:	ldrb	r0, [r4, #24]
    8636:	strb	r3, [r4, #23]
    8638:	cbnz	r0, 863e <SdSpiCard::readStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    863a:	add	sp, #12
    863c:	pop	{r4, r5, pc}
    863e:	mov	r0, r4
    8640:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8644:	movs	r0, #0
    8646:	add	sp, #12
    8648:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    864a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    864c:	add	sp, #12
    864e:	pop	{r4, r5, pc}
    8650:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    8652:	blx	r3
    8654:	ldr	r2, [sp, #4]
    8656:	b.n	8620 <SdSpiCard::readStart(unsigned long)+0x14>
    8658:	.word	0x000080b9

0000865c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    865c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8660:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    8662:	ldrb	r3, [r0, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8664:	mov	r6, r0
    8666:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    8668:	cmp	r3, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    866a:	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    866c:	beq.n	867e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    866e:	ldr	r3, [r6, #0]
    8670:	mov	r0, r6
    8672:	ldr	r3, [r3, #20]
    8674:	blx	r3
    8676:	cbnz	r0, 86b0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x54>
      return false;
    8678:	movs	r0, #0
    867a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    867e:	ldr	r3, [r0, #16]
    8680:	cmp	r3, r1
    8682:	bne.n	866e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8684:	cbz	r7, 86a0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    8686:	movs	r5, #0
    if (!readData(dst, 512)) {
    8688:	mov.w	r2, #512	; 0x200
    868c:	mov	r1, r4
    868e:	mov	r0, r6
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8690:	adds	r5, #1
    8692:	add	r4, r2
    if (!readData(dst, 512)) {
    8694:	bl	81d4 <SdSpiCard::readData(unsigned char*, unsigned int)>
    8698:	cmp	r0, #0
    869a:	beq.n	8678 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    869c:	cmp	r7, r5
    869e:	bne.n	8688 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    86a0:	ldr	r3, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    86a2:	ldrb	r2, [r6, #21]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    86a4:	add	r7, r3
    86a6:	str	r7, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    86a8:	cbnz	r2, 86c4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
    86aa:	movs	r0, #1
    86ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    86b0:	mov	r1, r5
    86b2:	mov	r0, r6
    86b4:	bl	860c <SdSpiCard::readStart(unsigned long)>
    86b8:	cmp	r0, #0
    86ba:	beq.n	8678 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    86bc:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    86be:	str	r5, [r6, #16]
    m_curState = READ_STATE;
    86c0:	strb	r3, [r6, #20]
    86c2:	b.n	8684 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    86c4:	ldr	r3, [r6, #0]
    86c6:	mov	r0, r6
    86c8:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    86ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    86ce:	bx	r3

000086d0 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    86d0:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    86d2:	movs	r2, #0
    86d4:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    86d6:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    86d8:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    86dc:	cbz	r0, 86ea <SdSpiCard::readStop()+0x1a>
    86de:	movs	r3, #9
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    86e0:	ldrb	r4, [r5, #24]
    86e2:	strb	r3, [r5, #23]
    86e4:	cbnz	r4, 86fe <SdSpiCard::readStop()+0x2e>
  return true;

fail:
  spiStop();
  return false;
}
    86e6:	mov	r0, r4
    86e8:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    86ea:	ldrb	r4, [r5, #24]
    86ec:	cbnz	r4, 86f4 <SdSpiCard::readStop()+0x24>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    86ee:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    86f0:	mov	r0, r4
    86f2:	pop	{r3, r4, r5, pc}
    86f4:	mov	r0, r5
    86f6:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    86fa:	mov	r0, r4
    86fc:	pop	{r3, r4, r5, pc}
    86fe:	movs	r4, #0
    8700:	mov	r0, r5
    8702:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8706:	mov	r0, r4
    8708:	pop	{r3, r4, r5, pc}
    870a:	nop

0000870c <SdSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    870c:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    870e:	mov	r2, r1
    8710:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8712:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    8714:	sub	sp, #12
    8716:	ldr	r5, [pc, #64]	; (8758 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    8718:	mov	r4, r0
    871a:	cmp	r3, r5
    871c:	bne.n	8750 <SdSpiCard::writeStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    871e:	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8720:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    8722:	mov.w	r1, #25
    8726:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    8728:	it	ne
    872a:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    872c:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8730:	cbz	r0, 874a <SdSpiCard::writeStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8732:	movs	r3, #14
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8734:	ldrb	r0, [r4, #24]
    8736:	strb	r3, [r4, #23]
    8738:	cbnz	r0, 873e <SdSpiCard::writeStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    873a:	add	sp, #12
    873c:	pop	{r4, r5, pc}
    873e:	mov	r0, r4
    8740:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8744:	movs	r0, #0
    8746:	add	sp, #12
    8748:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    874a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    874c:	add	sp, #12
    874e:	pop	{r4, r5, pc}
    8750:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8752:	blx	r3
    8754:	ldr	r2, [sp, #4]
    8756:	b.n	8720 <SdSpiCard::writeStart(unsigned long)+0x14>
    8758:	.word	0x000080b9

0000875c <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    875c:	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    875e:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    8760:	ldr	r3, [r3, #52]	; 0x34
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8762:	sub	sp, #20
    8764:	ldr	r7, [pc, #164]	; (880c <SdSpiCard::erase(unsigned long, unsigned long)+0xb0>)
    8766:	mov	r4, r0
    8768:	mov	r5, r1
    876a:	mov	r6, r2
    876c:	cmp	r3, r7
    876e:	bne.n	87c8 <SdSpiCard::erase(unsigned long, unsigned long)+0x6c>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    8770:	mov	r2, sp
    8772:	movs	r1, #9
    8774:	bl	8518 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    8778:	cbz	r0, 879c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    877a:	ldrb.w	r3, [sp, #10]
    877e:	lsls	r2, r3, #25
    8780:	bpl.n	87ac <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    8782:	ldrb	r3, [r4, #26]
    8784:	cmp	r3, #3
    8786:	beq.n	878c <SdSpiCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8788:	lsls	r5, r5, #9
    lastSector <<= 9;
    878a:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    878c:	mov	r2, r5
    878e:	movs	r1, #32
    8790:	mov	r0, r4
    8792:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    8796:	cbz	r0, 87ce <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8798:	movs	r3, #37	; 0x25
    879a:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    879c:	ldrb	r0, [r4, #24]
    879e:	cbz	r0, 87a8 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    87a0:	mov	r0, r4
    87a2:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    87a6:	movs	r0, #0
}
    87a8:	add	sp, #20
    87aa:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    87ac:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    87b0:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    87b4:	adds	r2, r6, #1
    87b6:	lsls	r3, r3, #1
    87b8:	orrs	r2, r5
    87ba:	orr.w	r3, r3, r1, lsr #7
    87be:	tst	r3, r2
    87c0:	beq.n	8782 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    87c2:	movs	r3, #38	; 0x26
    87c4:	strb	r3, [r4, #23]
    87c6:	b.n	879c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    87c8:	mov	r1, sp
    87ca:	blx	r3
    87cc:	b.n	8778 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    87ce:	mov	r2, r6
    87d0:	movs	r1, #33	; 0x21
    87d2:	mov	r0, r4
    87d4:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    87d8:	cmp	r0, #0
    87da:	bne.n	8798 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
      || cardCommand(CMD38, 0)) {
    87dc:	mov	r2, r0
    87de:	movs	r1, #38	; 0x26
    87e0:	mov	r0, r4
    87e2:	bl	8278 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    87e6:	cmp	r0, #0
    87e8:	bne.n	8798 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    87ea:	movw	r1, #10000	; 0x2710
    87ee:	mov	r0, r4
    87f0:	bl	8248 <SdSpiCard::waitNotBusy(unsigned short)>
    87f4:	cbnz	r0, 87fc <SdSpiCard::erase(unsigned long, unsigned long)+0xa0>
    87f6:	movs	r3, #39	; 0x27
    87f8:	strb	r3, [r4, #23]
    87fa:	b.n	879c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    87fc:	ldrb	r5, [r4, #24]
    87fe:	cmp	r5, #0
    8800:	beq.n	87a8 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    8802:	mov	r0, r4
    8804:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    8808:	mov	r0, r5
    880a:	b.n	87a8 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    880c:	.word	0x00008565

00008810 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8810:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8812:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8816:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8818:	bl	8248 <SdSpiCard::waitNotBusy(unsigned short)>
    881c:	mov	r6, r0
    881e:	cbnz	r0, 8838 <SdSpiCard::writeStop()+0x28>
    8820:	movs	r3, #30
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8822:	ldrb	r4, [r5, #24]
    8824:	strb	r3, [r5, #23]
    8826:	cbnz	r4, 882c <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8828:	mov	r0, r4
    882a:	pop	{r4, r5, r6, pc}
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    882c:	mov	r4, r6
    882e:	mov	r0, r5
    8830:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    8834:	mov	r0, r4
    8836:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8838:	movs	r1, #253	; 0xfd
    883a:	adds	r0, r5, #4
    883c:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8840:	ldrb	r4, [r5, #24]
    8842:	cbnz	r4, 884a <SdSpiCard::writeStop()+0x3a>
    8844:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8846:	mov	r0, r4
    8848:	pop	{r4, r5, r6, pc}
    884a:	mov	r0, r5
    884c:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8850:	b.n	8828 <SdSpiCard::writeStop()+0x18>
    8852:	nop

00008854 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8854:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    8856:	ldrb	r3, [r0, #20]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8858:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    885a:	cmp	r3, #1
    885c:	beq.n	886a <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    885e:	cmp	r3, #2
    8860:	beq.n	8876 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    8862:	movs	r3, #0
#endif  // ENABLE_DEDICATED_SPI
  return true;
    8864:	movs	r0, #1
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    8866:	strb	r3, [r4, #20]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    8868:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    886a:	bl	86d0 <SdSpiCard::readStop()>
    886e:	cmp	r0, #0
    8870:	bne.n	8862 <SdSpiCard::syncDevice()+0xe>
      return false;
    8872:	movs	r0, #0
    8874:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    8876:	bl	8810 <SdSpiCard::writeStop()>
    887a:	cmp	r0, #0
    887c:	bne.n	8862 <SdSpiCard::syncDevice()+0xe>
    887e:	b.n	8872 <SdSpiCard::syncDevice()+0x1e>

00008880 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8880:	push	{r4, r5, r6, lr}
    8882:	adds	r4, r0, #4
    8884:	mov	r6, r2
    8886:	mov	r5, r0
    8888:	mov	r0, r4
    888a:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    888e:	mov.w	r2, #512	; 0x200
    8892:	mov	r1, r6
    8894:	mov	r0, r4
    8896:	bl	9a40 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    889a:	mov	r0, r4
    889c:	movs	r1, #255	; 0xff
    889e:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
    88a2:	mov	r0, r4
    88a4:	movs	r1, #255	; 0xff
    88a6:	bl	9a2c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    88aa:	mov	r0, r4
    88ac:	bl	99f4 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    88b0:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    88b4:	strb	r0, [r5, #25]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    88b6:	cmp	r3, #5
    88b8:	beq.n	88ce <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    88ba:	movs	r3, #31
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    88bc:	ldrb	r0, [r5, #24]
    88be:	strb	r3, [r5, #23]
    88c0:	cbnz	r0, 88c4 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    88c2:	pop	{r4, r5, r6, pc}
    88c4:	mov	r0, r5
    88c6:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    88ca:	movs	r0, #0
    88cc:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    88ce:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    88d0:	pop	{r4, r5, r6, pc}
    88d2:	nop

000088d4 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    88d4:	push	{r3, r4, r5, lr}
    88d6:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    88d8:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    88dc:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    88de:	bl	8248 <SdSpiCard::waitNotBusy(unsigned short)>
    88e2:	cbnz	r0, 88f6 <SdSpiCard::writeData(unsigned char const*)+0x22>
    88e4:	movs	r3, #35	; 0x23
    88e6:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    88e8:	ldrb	r0, [r4, #24]
    88ea:	cbz	r0, 88f4 <SdSpiCard::writeData(unsigned char const*)+0x20>
    88ec:	mov	r0, r4
    88ee:	bl	8170 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    88f2:	movs	r0, #0
}
    88f4:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    88f6:	mov	r2, r5
    88f8:	movs	r1, #252	; 0xfc
    88fa:	mov	r0, r4
    88fc:	bl	8880 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    8900:	cmp	r0, #0
    8902:	beq.n	88e8 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    8904:	pop	{r3, r4, r5, pc}
    8906:	nop

00008908 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8908:	ldr	r3, [pc, #32]	; (892c <sdIrs()+0x24>)
    890a:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    890c:	ldr	r2, [pc, #32]	; (8930 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    890e:	ldr	r0, [pc, #36]	; (8934 <sdIrs()+0x2c>)
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    8910:	push	{r4}
  SDHC_IRQSIGEN = 0;
    8912:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8914:	ldr	r4, [r3, #48]	; 0x30
    8916:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8918:	ldr	r2, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    891a:	ldr.w	r4, [sp], #4
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
    891e:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8920:	ldr	r2, [r3, #72]	; 0x48
    8922:	bic.w	r2, r2, #129	; 0x81
    8926:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    8928:	strb	r1, [r0, #0]
}
    892a:	bx	lr
    892c:	.word	0x402c0000
    8930:	.word	0x200060a8
    8934:	.word	0x200060c0

00008938 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8938:	ldr	r3, [pc, #12]	; (8948 <isBusyCommandComplete()+0x10>)
    893a:	ldr	r0, [pc, #16]	; (894c <isBusyCommandComplete()+0x14>)
    893c:	ldr	r3, [r3, #48]	; 0x30
    893e:	ands	r0, r3
}
    8940:	clz	r0, r0
    8944:	lsrs	r0, r0, #5
    8946:	bx	lr
    8948:	.word	0x402c0000
    894c:	.word	0x000f0001

00008950 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8950:	ldr	r3, [pc, #8]	; (895c <isBusyCommandInhibit()+0xc>)
    8952:	ldr	r0, [r3, #36]	; 0x24
}
    8954:	and.w	r0, r0, #1
    8958:	bx	lr
    895a:	nop
    895c:	.word	0x402c0000

00008960 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8960:	ldr	r3, [pc, #4]	; (8968 <isBusyDMA()+0x8>)
    8962:	ldrb	r0, [r3, #0]
}
    8964:	bx	lr
    8966:	nop
    8968:	.word	0x200060c0

0000896c <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    896c:	ldr	r3, [pc, #12]	; (897c <isBusyFifoRead()+0x10>)
    896e:	ldr	r0, [r3, #36]	; 0x24
    8970:	eor.w	r0, r0, #2048	; 0x800
}
    8974:	ubfx	r0, r0, #11, #1
    8978:	bx	lr
    897a:	nop
    897c:	.word	0x402c0000

00008980 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    8980:	ldr	r3, [pc, #12]	; (8990 <isBusyFifoWrite()+0x10>)
    8982:	ldr	r0, [r3, #36]	; 0x24
    8984:	eor.w	r0, r0, #1024	; 0x400
}
    8988:	ubfx	r0, r0, #10, #1
    898c:	bx	lr
    898e:	nop
    8990:	.word	0x402c0000

00008994 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8994:	ldr	r3, [pc, #12]	; (89a4 <isBusyTransferComplete()+0x10>)
    8996:	ldr	r0, [pc, #16]	; (89a8 <isBusyTransferComplete()+0x14>)
    8998:	ldr	r3, [r3, #48]	; 0x30
    899a:	ands	r0, r3
}
    899c:	clz	r0, r0
    89a0:	lsrs	r0, r0, #5
    89a2:	bx	lr
    89a4:	.word	0x402c0000
    89a8:	.word	0x117f0002

000089ac <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    89ac:	mov.w	r2, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    89b0:	ldr	r3, [pc, #172]	; (8a60 <setSdclk(unsigned long)+0xb4>)
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    89b2:	ldr	r1, [pc, #176]	; (8a64 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    89b4:	mul.w	r0, r2, r0
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    89b8:	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    89ba:	ldr.w	r2, [r3, #256]	; 0x100
    89be:	ldr	r3, [pc, #168]	; (8a68 <setSdclk(unsigned long)+0xbc>)
    89c0:	ubfx	r1, r1, #11, #3
    89c4:	and.w	r2, r2, #63	; 0x3f
    89c8:	adds	r1, #1
    89ca:	umull	r2, r3, r3, r2
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    89ce:	push	{r4, r5, r6, r7}
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    89d0:	lsrs	r3, r3, #2
    89d2:	ldr	r5, [pc, #152]	; (8a6c <setSdclk(unsigned long)+0xc0>)
    89d4:	udiv	r5, r5, r3
    89d8:	udiv	r5, r5, r1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    89dc:	cmp.w	r0, r5, lsr #4
    89e0:	bcs.n	8a54 <setSdclk(unsigned long)+0xa8>
    89e2:	movs	r2, #1
    89e4:	b.n	89ea <setSdclk(unsigned long)+0x3e>
    89e6:	cmp	r2, #255	; 0xff
    89e8:	bhi.n	89f6 <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    89ea:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    89ec:	lsls	r3, r2, #4
    89ee:	udiv	r3, r5, r3
    89f2:	cmp	r0, r3
    89f4:	bcc.n	89e6 <setSdclk(unsigned long)+0x3a>
    89f6:	lsrs	r1, r2, #1
    89f8:	lsls	r7, r1, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    89fa:	udiv	r3, r5, r2
    89fe:	cmp	r0, r3
    8a00:	bcs.n	8a5a <setSdclk(unsigned long)+0xae>
    8a02:	lsls	r4, r2, #1
    8a04:	movs	r1, #1
    8a06:	b.n	8a0a <setSdclk(unsigned long)+0x5e>
    8a08:	mov	r4, r3
    dvs++;
    8a0a:	adds	r6, r1, #1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a0c:	udiv	r3, r5, r4
    8a10:	cmp	r0, r3
    8a12:	add.w	r3, r2, r4
    8a16:	bcs.n	8a50 <setSdclk(unsigned long)+0xa4>
    8a18:	cmp	r6, #16
    8a1a:	mov	r1, r6
    8a1c:	bne.n	8a08 <setSdclk(unsigned long)+0x5c>
    8a1e:	movs	r3, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a20:	mov.w	r2, #1000	; 0x3e8
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8a24:	ldr	r6, [pc, #72]	; (8a70 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a26:	ldr	r1, [pc, #76]	; (8a74 <setSdclk(unsigned long)+0xc8>)
    8a28:	mul.w	r4, r2, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8a2c:	ldr	r0, [pc, #72]	; (8a78 <setSdclk(unsigned long)+0xcc>)

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8a2e:	mov	r2, r6
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a30:	udiv	r5, r5, r4
    8a34:	str	r5, [r1, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8a36:	ldr	r1, [r6, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8a38:	ands	r0, r1
    8a3a:	orr.w	r0, r0, #917504	; 0xe0000
    8a3e:	orr.w	r1, r0, r7
    8a42:	orrs	r1, r3
    8a44:	str	r1, [r6, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8a46:	ldr	r3, [r2, #36]	; 0x24
    8a48:	lsls	r3, r3, #28
    8a4a:	bpl.n	8a46 <setSdclk(unsigned long)+0x9a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8a4c:	pop	{r4, r5, r6, r7}
    8a4e:	bx	lr
    8a50:	lsls	r3, r1, #4
    8a52:	b.n	8a20 <setSdclk(unsigned long)+0x74>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8a54:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    8a56:	movs	r2, #1
    8a58:	b.n	89fa <setSdclk(unsigned long)+0x4e>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a5a:	mov	r4, r2
    8a5c:	movs	r3, #0
    8a5e:	b.n	8a20 <setSdclk(unsigned long)+0x74>
    8a60:	.word	0x400d8000
    8a64:	.word	0x400fc000
    8a68:	.word	0xaaaaaaab
    8a6c:	.word	0x5e69ec00
    8a70:	.word	0x402c0000
    8a74:	.word	0x200060c4
    8a78:	.word	0xfff0000f

00008a7c <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    8a7c:	ldr	r3, [pc, #4]	; (8a84 <SdioCard::errorCode() const+0x8>)
}
    8a7e:	ldrb	r0, [r3, #0]
    8a80:	bx	lr
    8a82:	nop
    8a84:	.word	0x20000c14

00008a88 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    8a88:	ldr	r3, [pc, #4]	; (8a90 <SdioCard::errorData() const+0x8>)
    8a8a:	ldr	r0, [r3, #0]
}
    8a8c:	bx	lr
    8a8e:	nop
    8a90:	.word	0x200060a8

00008a94 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8a94:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    8a96:	ldr	r4, [pc, #20]	; (8aac <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8a98:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    8a9a:	ldmia	r4!, {r0, r1, r2, r3}
    8a9c:	str	r0, [r5, #0]
  return true;
}
    8a9e:	movs	r0, #1
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    8aa0:	str	r1, [r5, #4]
    8aa2:	str	r2, [r5, #8]
    8aa4:	str	r3, [r5, #12]
  return true;
}
    8aa6:	pop	{r4, r5}
    8aa8:	bx	lr
    8aaa:	nop
    8aac:	.word	0x20006088

00008ab0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8ab0:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    8ab2:	ldr	r4, [pc, #20]	; (8ac8 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8ab4:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    8ab6:	ldmia	r4!, {r0, r1, r2, r3}
    8ab8:	str	r0, [r5, #0]
  return true;
}
    8aba:	movs	r0, #1
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    8abc:	str	r1, [r5, #4]
    8abe:	str	r2, [r5, #8]
    8ac0:	str	r3, [r5, #12]
  return true;
}
    8ac2:	pop	{r4, r5}
    8ac4:	bx	lr
    8ac6:	nop
    8ac8:	.word	0x200060b0

00008acc <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8acc:	ldr	r3, [pc, #8]	; (8ad8 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8ace:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8ad0:	ldr	r3, [r3, #0]
    8ad2:	str	r3, [r1, #0]
  return true;
}
    8ad4:	bx	lr
    8ad6:	nop
    8ad8:	.word	0x200060a0

00008adc <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    8adc:	bx	lr
    8ade:	nop

00008ae0 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    8ae0:	push	{r3, r4, r5, r6, r7, lr}
    8ae2:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8ae4:	ldr	r7, [pc, #28]	; (8b04 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8ae6:	bl	ae9c <micros>
    8aea:	mov	r6, r0
    8aec:	b.n	8af8 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8aee:	bl	ae9c <micros>
    8af2:	subs	r0, r0, r6
    8af4:	cmp	r0, r7
    8af6:	bhi.n	8b00 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8af8:	blx	r5
    8afa:	mov	r4, r0
    8afc:	cmp	r0, #0
    8afe:	bne.n	8aee <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    8b00:	mov	r0, r4
    8b02:	pop	{r3, r4, r5, r6, r7, pc}
    8b04:	.word	0x000f4240

00008b08 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8b08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8b0c:	ldr.w	r8, [pc, #64]	; 8b50 <yieldTimeout(bool (*)())+0x48>
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8b10:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8b12:	ldr	r7, [pc, #56]	; (8b4c <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8b14:	str.w	r0, [r8]
  uint32_t m = micros();
    8b18:	bl	ae9c <micros>
    8b1c:	mov	r6, r0
    8b1e:	b.n	8b2e <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8b20:	bl	ae9c <micros>
    8b24:	subs	r0, r0, r6
    8b26:	cmp	r0, r7
    8b28:	bhi.n	8b40 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    8b2a:	bl	b4cc <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8b2e:	blx	r5
    8b30:	mov	r4, r0
    8b32:	cmp	r0, #0
    8b34:	bne.n	8b20 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    8b36:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    8b3a:	mov	r0, r4
    8b3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8b40:	movs	r3, #0
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    8b42:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8b44:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    8b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b4c:	.word	0x000f4240
    8b50:	.word	0x20006098

00008b54 <SdioCard::~SdioCard()>:
    8b54:	push	{r4, lr}
    8b56:	mov	r4, r0
    8b58:	movs	r1, #12
    8b5a:	bl	b7f8 <operator delete(void*, unsigned int)>
    8b5e:	mov	r0, r4
    8b60:	pop	{r4, pc}
    8b62:	nop

00008b64 <enableGPIO(bool) [clone .part.0]>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8b64:	ldr	r3, [pc, #60]	; (8ba4 <enableGPIO(bool) [clone .part.0]+0x40>)
    8b66:	movs	r2, #0

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8b68:	movw	r1, #28808	; 0x7088
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8b6c:	movw	r0, #4232	; 0x1088
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8b70:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8b74:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8b78:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8b7c:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8b80:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8b84:	str.w	r2, [r3, #456]	; 0x1c8

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8b88:	str.w	r1, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    8b8c:	str.w	r1, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    8b90:	str.w	r1, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8b94:	str.w	r0, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    8b98:	str.w	r1, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    8b9c:	str.w	r1, [r3, #952]	; 0x3b8
    8ba0:	bx	lr
    8ba2:	nop
    8ba4:	.word	0x401f8000

00008ba8 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    8ba8:	ldr	r3, [pc, #20]	; (8bc0 <SdioCard::type() const+0x18>)
    8baa:	ldrb	r3, [r3, #0]
    8bac:	cbz	r3, 8bbc <SdioCard::type() const+0x14>
    8bae:	ldr	r3, [pc, #20]	; (8bc4 <SdioCard::type() const+0x1c>)
    8bb0:	ldrb	r3, [r3, #0]
    8bb2:	cmp	r3, #0
    8bb4:	ite	ne
    8bb6:	movne	r0, #3
    8bb8:	moveq	r0, #2
    8bba:	bx	lr
    8bbc:	movs	r0, #1
}
    8bbe:	bx	lr
    8bc0:	.word	0x20006084
    8bc4:	.word	0x2000609c

00008bc8 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8bc8:	push	{r3, r4, r5, lr}
    8bca:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8bcc:	ldr	r0, [pc, #80]	; (8c20 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8bce:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8bd0:	bl	8ae0 <waitTimeout(bool (*)())>
    8bd4:	cbnz	r0, 8c1a <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    8bd6:	ldr	r3, [pc, #76]	; (8c24 <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8bd8:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    8bda:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8bdc:	bpl.n	8bee <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8bde:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8be0:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8be2:	bic.w	r1, r1, #255	; 0xff
    8be6:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8be8:	ldr	r1, [r3, #72]	; 0x48
    8bea:	orrs	r2, r1
    8bec:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8bee:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    8bf2:	ldr	r5, [pc, #48]	; (8c24 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    8bf4:	ldr	r0, [pc, #48]	; (8c28 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    8bf6:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    8bf8:	bl	8ae0 <waitTimeout(bool (*)())>
    8bfc:	cbnz	r0, 8c1a <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    8bfe:	ldr	r2, [r5, #48]	; 0x30
    8c00:	ldr	r3, [pc, #40]	; (8c2c <cardCommand(unsigned long, unsigned long)+0x64>)
    8c02:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8c04:	ldr	r2, [r3, #0]
    8c06:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8c08:	ldr	r2, [r3, #0]
    8c0a:	lsls	r2, r2, #31
    8c0c:	bpl.n	8c1a <cardCommand(unsigned long, unsigned long)+0x52>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8c0e:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8c10:	tst.w	r3, #983040	; 0xf0000
    8c14:	bne.n	8c1a <cardCommand(unsigned long, unsigned long)+0x52>
    8c16:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    8c18:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8c1a:	movs	r0, #0
    8c1c:	pop	{r3, r4, r5, pc}
    8c1e:	nop
    8c20:	.word	0x00008951
    8c24:	.word	0x402c0000
    8c28:	.word	0x00008939
    8c2c:	.word	0x200060a8

00008c30 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    8c30:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8c32:	ldr	r3, [pc, #16]	; (8c44 <SdioCard::status()+0x14>)
    8c34:	ldr	r0, [pc, #16]	; (8c48 <SdioCard::status()+0x18>)
    8c36:	ldr	r1, [r3, #0]
    8c38:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    8c3c:	cbz	r0, 8c42 <SdioCard::status()+0x12>
    8c3e:	ldr	r3, [pc, #12]	; (8c4c <SdioCard::status()+0x1c>)
    8c40:	ldr	r0, [r3, #16]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    8c42:	pop	{r3, pc}
    8c44:	.word	0x200060a4
    8c48:	.word	0x0d1a0000
    8c4c:	.word	0x402c0000

00008c50 <readReg16(unsigned long, void*)>:
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8c50:	ldr	r3, [pc, #80]	; (8ca4 <readReg16(unsigned long, void*)+0x54>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    8c52:	push	{r4, r5, r6, lr}
    8c54:	mov	r6, r1
    8c56:	sub	sp, #16
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8c58:	ldr	r1, [r3, #0]
    8c5a:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    8c5e:	cbz	r0, 8c9e <readReg16(unsigned long, void*)+0x4e>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8c60:	ldr	r1, [pc, #68]	; (8ca8 <readReg16(unsigned long, void*)+0x58>)
    8c62:	add.w	r5, r6, #15
  for (int i = 0; i < 15; i++) {
    8c66:	movs	r3, #0
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8c68:	ldr	r2, [r1, #16]
    8c6a:	str	r2, [sp, #0]
    8c6c:	ldr	r4, [r1, #20]
    8c6e:	str	r4, [sp, #4]
    8c70:	ldr	r4, [r1, #24]
    8c72:	str	r4, [sp, #8]
    8c74:	ldr	r1, [r1, #28]
    8c76:	str	r1, [sp, #12]
    8c78:	b.n	8c7e <readReg16(unsigned long, void*)+0x2e>
    8c7a:	ldr.w	r2, [r4, #-16]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8c7e:	and.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8c82:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8c84:	lsls	r1, r1, #3
    8c86:	bic.w	r4, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8c8a:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8c8c:	lsr.w	r2, r2, r1
    8c90:	add	r1, sp, #16
    8c92:	strb.w	r2, [r5, #-1]!
    8c96:	add	r4, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8c98:	bne.n	8c7a <readReg16(unsigned long, void*)+0x2a>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8c9a:	movs	r3, #0
    8c9c:	strb	r3, [r6, #15]
  return true;
}
    8c9e:	add	sp, #16
    8ca0:	pop	{r4, r5, r6, pc}
    8ca2:	nop
    8ca4:	.word	0x200060a4
    8ca8:	.word	0x402c0000

00008cac <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    8cac:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8cae:	ldr	r3, [pc, #28]	; (8ccc <isBusyCMD13()+0x20>)
    8cb0:	ldr	r0, [pc, #28]	; (8cd0 <isBusyCMD13()+0x24>)
    8cb2:	ldr	r1, [r3, #0]
    8cb4:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    8cb8:	cbz	r0, 8cc8 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8cba:	ldr	r3, [pc, #24]	; (8cd4 <isBusyCMD13()+0x28>)
    8cbc:	ldr	r0, [r3, #16]
    8cbe:	eor.w	r0, r0, #256	; 0x100
    8cc2:	ubfx	r0, r0, #8, #1
    8cc6:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    8cc8:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    8cca:	pop	{r3, pc}
    8ccc:	.word	0x200060a4
    8cd0:	.word	0x0d1a0000
    8cd4:	.word	0x402c0000

00008cd8 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8cd8:	ldr	r3, [pc, #16]	; (8cec <SdioCard::isBusy()+0x14>)
    8cda:	ldr	r3, [r3, #0]
    8cdc:	cbz	r3, 8ce0 <SdioCard::isBusy()+0x8>
    8cde:	bx	r3
    8ce0:	ldr	r3, [pc, #12]	; (8cf0 <SdioCard::isBusy()+0x18>)
    8ce2:	ldrb	r0, [r3, #0]
    8ce4:	cbnz	r0, 8ce8 <SdioCard::isBusy()+0x10>
}
    8ce6:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8ce8:	b.w	8cac <isBusyCMD13()>
    8cec:	.word	0x20006098
    8cf0:	.word	0x200060ac

00008cf4 <waitDmaStatus() [clone .part.7]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8cf4:	ldr	r3, [pc, #20]	; (8d0c <waitDmaStatus() [clone .part.7]+0x18>)
    8cf6:	ldr	r0, [r3, #0]
    8cf8:	ands.w	r0, r0, #2
    8cfc:	beq.n	8d0a <waitDmaStatus() [clone .part.7]+0x16>
    8cfe:	ldr	r3, [r3, #0]
    8d00:	ldr	r0, [pc, #12]	; (8d10 <waitDmaStatus() [clone .part.7]+0x1c>)
    8d02:	ands	r0, r3
    8d04:	clz	r0, r0
    8d08:	lsrs	r0, r0, #5
}
    8d0a:	bx	lr
    8d0c:	.word	0x200060a8
    8d10:	.word	0x117f0000

00008d14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    8d14:	push	{r3, r4, r5, r6, r7, lr}
    8d16:	ands.w	r4, r2, #3
    8d1a:	it	ne
    8d1c:	movne	r4, #1
    8d1e:	cmp	r3, #0
    8d20:	it	eq
    8d22:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    8d26:	cbz	r4, 8d3a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d28:	ldr	r1, [pc, #120]	; (8da4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8d2a:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8d2c:	ldr	r3, [pc, #120]	; (8da8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    8d2e:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d32:	strb	r0, [r1, #0]
  m_errorLine = line;
    8d34:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8d36:	movs	r0, #0
    8d38:	pop	{r3, r4, r5, r6, r7, pc}
    8d3a:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8d3c:	ldr	r0, [pc, #108]	; (8dac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    8d3e:	mov	r5, r3
    8d40:	mov	r7, r1
    8d42:	mov	r4, r2
    8d44:	bl	8b08 <yieldTimeout(bool (*)())>
    8d48:	cbnz	r0, 8d90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d4a:	lsls	r3, r5, #16
    8d4c:	ldr	r2, [pc, #96]	; (8db0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8d4e:	ldr	r5, [pc, #100]	; (8db4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    8d50:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d54:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8d56:	ldr	r1, [pc, #96]	; (8db8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8d58:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8d5c:	ldr	r3, [pc, #92]	; (8dbc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d5e:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8d62:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d64:	ldr	r5, [pc, #88]	; (8dc0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8d66:	ldr	r1, [pc, #92]	; (8dc4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8d68:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d6a:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d6c:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8d6e:	ldrb	r3, [r1, #0]
    8d70:	cbnz	r3, 8da0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>
    8d72:	lsls	r1, r7, #9
    8d74:	mov	r0, r6
    8d76:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    8d7a:	cmp	r0, #0
    8d7c:	beq.n	8d36 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8d7e:	ldr	r0, [pc, #72]	; (8dc8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb4>)
    8d80:	bl	8b08 <yieldTimeout(bool (*)())>
    8d84:	cmp	r0, #0
    8d86:	bne.n	8d36 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8d88:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8d8c:	b.w	8cf4 <waitDmaStatus() [clone .part.7]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d90:	ldr	r1, [pc, #16]	; (8da4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8d92:	movs	r0, #10
  m_errorLine = line;
    8d94:	ldr	r3, [pc, #16]	; (8da8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    8d96:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d9a:	strb	r0, [r1, #0]
  m_errorLine = line;
    8d9c:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8d9e:	b.n	8d36 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8da0:	mov	r1, r7
    8da2:	b.n	8d74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    8da4:	.word	0x20000c14
    8da8:	.word	0x200060c8
    8dac:	.word	0x00008cad
    8db0:	.word	0x1fff0000
    8db4:	.word	0x200060c0
    8db8:	.word	0x200060a8
    8dbc:	.word	0x402c0000
    8dc0:	.word	0x117f0002
    8dc4:	.word	0x2000609c
    8dc8:	.word	0x00008961

00008dcc <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8dcc:	ldr	r1, [pc, #100]	; (8e34 <SdioCard::sectorCount()+0x68>)
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    8dce:	push	{r4, r5, r6}
    8dd0:	ldrb	r3, [r1, #0]
    8dd2:	ands.w	r3, r3, #192	; 0xc0
    8dd6:	beq.n	8dfc <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    8dd8:	cmp	r3, #64	; 0x40
    8dda:	beq.n	8de2 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    8ddc:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    8dde:	pop	{r4, r5, r6}
    8de0:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8de2:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8de4:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8de6:	adds	r2, r3, #1
    8de8:	ldrb	r0, [r1, #8]
    8dea:	and.w	r3, r4, #63	; 0x3f
    8dee:	add.w	r3, r2, r3, lsl #16
    8df2:	add.w	r0, r3, r0, lsl #8
    8df6:	pop	{r4, r5, r6}
    8df8:	lsls	r0, r0, #10
    8dfa:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8dfc:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8dfe:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8e00:	ldrb	r2, [r1, #7]
    8e02:	and.w	r5, r5, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8e06:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8e08:	and.w	r3, r3, #3
    8e0c:	lsls	r5, r5, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8e0e:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8e10:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8e12:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8e14:	orr.w	r0, r5, r0, lsr #7
    8e18:	and.w	r1, r4, #15
    8e1c:	orr.w	r3, r2, r3, lsl #10
    8e20:	add	r0, r1
    8e22:	orr.w	r3, r3, r6, lsr #6
    8e26:	subs	r0, #7
    8e28:	adds	r3, #1
    8e2a:	pop	{r4, r5, r6}
    8e2c:	lsl.w	r0, r3, r0
    8e30:	bx	lr
    8e32:	nop
    8e34:	.word	0x200060b0

00008e38 <SdioCard::erase(unsigned long, unsigned long)>:
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8e38:	ldr	r0, [pc, #176]	; (8eec <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8e3a:	push	{r3, r4, r5, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8e3c:	ldrb	r3, [r0, #10]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8e3e:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8e40:	and.w	r2, r3, #64	; 0x40
    8e44:	cbnz	r2, 8e5e <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8e46:	and.w	r3, r3, #63	; 0x3f
    8e4a:	and.w	r4, r2, #255	; 0xff
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    8e4e:	ldrb	r2, [r0, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8e50:	adds	r0, r5, #1
    8e52:	lsls	r3, r3, #1
    8e54:	orrs	r0, r1
    8e56:	orr.w	r3, r3, r2, lsr #7
    8e5a:	tst	r3, r0
    8e5c:	bne.n	8ea2 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    8e5e:	ldr	r3, [pc, #144]	; (8ef0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    8e60:	ldrb	r3, [r3, #0]
    8e62:	cbnz	r3, 8e68 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8e64:	lsls	r1, r1, #9
    lastSector <<= 9;
    8e66:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8e68:	ldr	r0, [pc, #136]	; (8ef4 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    8e6a:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    8e6e:	mov	r4, r0
    8e70:	cbnz	r0, 8e84 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e72:	ldr	r1, [pc, #132]	; (8ef8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8e74:	movs	r0, #15
  m_errorLine = line;
    8e76:	ldr	r3, [pc, #132]	; (8efc <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8e78:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e7c:	strb	r0, [r1, #0]
  m_errorLine = line;
    8e7e:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8e80:	mov	r0, r4
    8e82:	pop	{r3, r4, r5, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8e84:	mov	r1, r5
    8e86:	ldr	r0, [pc, #120]	; (8f00 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    8e88:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    8e8c:	mov	r4, r0
    8e8e:	cbnz	r0, 8eb4 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e90:	ldr	r1, [pc, #100]	; (8ef8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8e92:	movs	r0, #16
  m_errorLine = line;
    8e94:	ldr	r3, [pc, #100]	; (8efc <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8e96:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e9a:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8e9c:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8e9e:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8ea0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ea2:	ldr	r1, [pc, #84]	; (8ef8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8ea4:	movs	r0, #38	; 0x26
  m_errorLine = line;
    8ea6:	ldr	r3, [pc, #84]	; (8efc <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8ea8:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eac:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8eae:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8eb0:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8eb2:	pop	{r3, r4, r5, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    8eb4:	movs	r1, #0
    8eb6:	ldr	r0, [pc, #76]	; (8f04 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    8eb8:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    8ebc:	mov	r4, r0
    8ebe:	cbnz	r0, 8ed0 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ec0:	ldr	r1, [pc, #52]	; (8ef8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8ec2:	movs	r0, #17
  m_errorLine = line;
    8ec4:	ldr	r3, [pc, #52]	; (8efc <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8ec6:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eca:	strb	r0, [r1, #0]
  m_errorLine = line;
    8ecc:	str	r2, [r3, #0]
    8ece:	b.n	8e80 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    8ed0:	ldr	r0, [pc, #52]	; (8f08 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    8ed2:	bl	8ae0 <waitTimeout(bool (*)())>
    8ed6:	cmp	r0, #0
    8ed8:	beq.n	8e80 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eda:	ldr	r1, [pc, #28]	; (8ef8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8edc:	movs	r0, #39	; 0x27
  m_errorLine = line;
    8ede:	ldr	r3, [pc, #28]	; (8efc <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8ee0:	movw	r2, #701	; 0x2bd
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8ee4:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ee6:	strb	r0, [r1, #0]
  m_errorLine = line;
    8ee8:	str	r2, [r3, #0]
    8eea:	b.n	8e80 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    8eec:	.word	0x200060b0
    8ef0:	.word	0x2000609c
    8ef4:	.word	0x201a0000
    8ef8:	.word	0x20000c14
    8efc:	.word	0x200060c8
    8f00:	.word	0x211a0000
    8f04:	.word	0x261b0000
    8f08:	.word	0x00008cad

00008f0c <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    8f0c:	push	{r4, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8f0e:	movs	r1, #0
    8f10:	ldr	r0, [pc, #80]	; (8f64 <transferStop()+0x58>)
    8f12:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    8f16:	mov	r4, r0
    8f18:	cbnz	r0, 8f2c <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f1a:	ldr	r1, [pc, #76]	; (8f68 <transferStop()+0x5c>)
    8f1c:	movs	r0, #9
  m_errorLine = line;
    8f1e:	ldr	r3, [pc, #76]	; (8f6c <transferStop()+0x60>)
    8f20:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f24:	strb	r0, [r1, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8f26:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f28:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8f2a:	pop	{r4, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8f2c:	ldr	r0, [pc, #64]	; (8f70 <transferStop()+0x64>)
    8f2e:	bl	8b08 <yieldTimeout(bool (*)())>
    8f32:	cbnz	r0, 8f4e <transferStop()+0x42>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8f34:	ldr	r3, [pc, #60]	; (8f74 <transferStop()+0x68>)
    8f36:	ldr	r0, [r3, #52]	; 0x34
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8f38:	ldr	r2, [r3, #40]	; 0x28
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8f3a:	ldr	r1, [r3, #44]	; 0x2c
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8f3c:	bic.w	r2, r2, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8f40:	orr.w	r1, r1, #67108864	; 0x4000000
    8f44:	str	r1, [r3, #44]	; 0x2c
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    8f46:	str	r0, [r3, #52]	; 0x34
  SDHC_PROCTL = proctl;
  return true;
}
    8f48:	mov	r0, r4
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
    8f4a:	str	r2, [r3, #40]	; 0x28
  return true;
}
    8f4c:	pop	{r4, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f4e:	ldr	r1, [pc, #24]	; (8f68 <transferStop()+0x5c>)
    8f50:	movs	r0, #10
  m_errorLine = line;
    8f52:	ldr	r3, [pc, #24]	; (8f6c <transferStop()+0x60>)
    8f54:	movw	r2, #543	; 0x21f
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8f58:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f5a:	strb	r0, [r1, #0]
  m_errorLine = line;
    8f5c:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8f5e:	mov	r0, r4
    8f60:	pop	{r4, pc}
    8f62:	nop
    8f64:	.word	0x0cdb0000
    8f68:	.word	0x20000c14
    8f6c:	.word	0x200060c8
    8f70:	.word	0x00008cad
    8f74:	.word	0x402c0000

00008f78 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8f78:	b.w	8f0c <transferStop()>

00008f7c <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8f7c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8f7e:	ldr	r3, [pc, #156]	; (901c <SdioCard::writeData(unsigned char const*)+0xa0>)
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8f80:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8f82:	ldr	r2, [r3, #36]	; 0x24
    8f84:	lsls	r0, r2, #23
    8f86:	bmi.n	8f98 <SdioCard::writeData(unsigned char const*)+0x1c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8f88:	ldr	r2, [r3, #40]	; 0x28
    8f8a:	bic.w	r2, r2, #65536	; 0x10000
    8f8e:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8f90:	ldr	r2, [r3, #40]	; 0x28
    8f92:	orr.w	r2, r2, #131072	; 0x20000
    8f96:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8f98:	ldr	r4, [pc, #128]	; (901c <SdioCard::writeData(unsigned char const*)+0xa0>)
  if (waitTimeout(isBusyFifoWrite)) {
    8f9a:	ldr	r0, [pc, #132]	; (9020 <SdioCard::writeData(unsigned char const*)+0xa4>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8f9c:	ldr	r3, [r4, #40]	; 0x28
    8f9e:	orr.w	r3, r3, #65536	; 0x10000
    8fa2:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    8fa4:	bl	8ae0 <waitTimeout(bool (*)())>
    8fa8:	cmp	r0, #0
    8faa:	bne.n	9008 <SdioCard::writeData(unsigned char const*)+0x8c>
    8fac:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8fae:	mov	r0, r4
    8fb0:	add.w	r5, r5, #508	; 0x1fc
    8fb4:	ldr	r2, [r0, #36]	; 0x24
    8fb6:	lsls	r1, r2, #21
    8fb8:	bpl.n	8fb4 <SdioCard::writeData(unsigned char const*)+0x38>
    8fba:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8fbe:	ldr.w	r2, [r3, #4]!
    8fc2:	ldr	r4, [pc, #88]	; (901c <SdioCard::writeData(unsigned char const*)+0xa0>)
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8fc4:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    8fc6:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8fc8:	bne.n	8fbe <SdioCard::writeData(unsigned char const*)+0x42>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8fca:	cmp	r5, r1
    8fcc:	mov	r3, r1
    8fce:	bne.n	8fb4 <SdioCard::writeData(unsigned char const*)+0x38>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    8fd0:	ldr	r0, [pc, #80]	; (9024 <SdioCard::writeData(unsigned char const*)+0xa8>)
    8fd2:	bl	8ae0 <waitTimeout(bool (*)())>
    8fd6:	cbnz	r0, 8ff6 <SdioCard::writeData(unsigned char const*)+0x7a>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8fd8:	ldr	r2, [r4, #48]	; 0x30
    8fda:	ldr	r3, [pc, #76]	; (9028 <SdioCard::writeData(unsigned char const*)+0xac>)
    8fdc:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8fde:	ldr	r2, [r3, #0]
    8fe0:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8fe2:	ldr	r2, [r3, #0]
    8fe4:	lsls	r2, r2, #30
    8fe6:	bpl.n	9018 <SdioCard::writeData(unsigned char const*)+0x9c>
    8fe8:	ldr	r3, [r3, #0]
    8fea:	ldr	r0, [pc, #64]	; (902c <SdioCard::writeData(unsigned char const*)+0xb0>)
    8fec:	ands	r0, r3
    8fee:	clz	r0, r0
    8ff2:	lsrs	r0, r0, #5
    8ff4:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ff6:	ldr	r1, [pc, #56]	; (9030 <SdioCard::writeData(unsigned char const*)+0xb4>)
    8ff8:	movs	r0, #35	; 0x23
  m_errorLine = line;
    8ffa:	ldr	r3, [pc, #56]	; (9034 <SdioCard::writeData(unsigned char const*)+0xb8>)
    8ffc:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9000:	strb	r0, [r1, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    9002:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9004:	str	r2, [r3, #0]
    9006:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9008:	ldr	r1, [pc, #36]	; (9030 <SdioCard::writeData(unsigned char const*)+0xb4>)
    900a:	movs	r4, #32
  m_errorLine = line;
    900c:	ldr	r3, [pc, #36]	; (9034 <SdioCard::writeData(unsigned char const*)+0xb8>)
    900e:	movw	r2, #894	; 0x37e
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    9012:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9014:	strb	r4, [r1, #0]
  m_errorLine = line;
    9016:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    9018:	pop	{r3, r4, r5, pc}
    901a:	nop
    901c:	.word	0x402c0000
    9020:	.word	0x00008981
    9024:	.word	0x00008995
    9028:	.word	0x200060a8
    902c:	.word	0x117f0000
    9030:	.word	0x20000c14
    9034:	.word	0x200060c8

00009038 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9038:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    903a:	ldr	r0, [pc, #80]	; (908c <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    903c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    903e:	bl	8b08 <yieldTimeout(bool (*)())>
    9042:	cbnz	r0, 9078 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9044:	ldr	r3, [pc, #72]	; (9090 <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9046:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    904a:	ldr	r1, [pc, #72]	; (9094 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    904c:	ldr	r2, [r3, #40]	; 0x28
    904e:	bic.w	r2, r2, #65536	; 0x10000
    9052:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9054:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9056:	ldrb	r3, [r1, #0]
    9058:	cbnz	r3, 9074 <SdioCard::writeStart(unsigned long)+0x3c>
    905a:	lsls	r1, r4, #9
    905c:	ldr	r0, [pc, #56]	; (9098 <SdioCard::writeStart(unsigned long)+0x60>)
    905e:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    9062:	cbnz	r0, 9072 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9064:	ldr	r1, [pc, #52]	; (909c <SdioCard::writeStart(unsigned long)+0x64>)
    9066:	movs	r4, #14
  m_errorLine = line;
    9068:	ldr	r3, [pc, #52]	; (90a0 <SdioCard::writeStart(unsigned long)+0x68>)
    906a:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    906e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9070:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9072:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9074:	mov	r1, r4
    9076:	b.n	905c <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9078:	ldr	r1, [pc, #32]	; (909c <SdioCard::writeStart(unsigned long)+0x64>)
    907a:	movs	r0, #10
  m_errorLine = line;
    907c:	ldr	r3, [pc, #32]	; (90a0 <SdioCard::writeStart(unsigned long)+0x68>)
    907e:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9082:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9084:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9086:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9088:	pop	{r4, pc}
    908a:	nop
    908c:	.word	0x00008cad
    9090:	.word	0x402c0000
    9094:	.word	0x2000609c
    9098:	.word	0x193a0020
    909c:	.word	0x20000c14
    90a0:	.word	0x200060c8

000090a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    90a4:	push	{r3, r4, r5, r6, r7, lr}
    90a6:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    90a8:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    90aa:	mov	r4, r1
    90ac:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    90ae:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    90b0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    90b2:	bmi.n	90dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    90b4:	cbz	r3, 90d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    90b6:	add	r7, r1
    90b8:	b.n	90be <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    90ba:	cmp	r4, r7
    90bc:	beq.n	90d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    90be:	ldr	r3, [r6, #0]
    90c0:	mov	r2, r5
    90c2:	mov	r1, r4
    90c4:	mov	r0, r6
    90c6:	ldr	r3, [r3, #8]
    90c8:	add.w	r5, r5, #512	; 0x200
    90cc:	adds	r4, #1
    90ce:	blx	r3
    90d0:	cmp	r0, #0
    90d2:	bne.n	90ba <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    90d4:	movs	r0, #0
    90d6:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    90d8:	movs	r0, #1
    90da:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    90dc:	lsls	r0, r2, #30
    90de:	beq.n	9106 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    90e0:	cmp	r3, #0
    90e2:	beq.n	90d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    90e4:	add	r7, r1
    90e6:	b.n	90ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    90e8:	cmp	r7, r4
    90ea:	beq.n	90d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    90ec:	ldr	r3, [r6, #0]
    90ee:	mov	r2, r5
    90f0:	mov	r1, r4
    90f2:	mov	r0, r6
    90f4:	ldr	r3, [r3, #8]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    90f6:	add.w	r5, r5, #512	; 0x200
    90fa:	adds	r4, #1
        if (!readSector(sector, dst)) {
    90fc:	blx	r3
    90fe:	cmp	r0, #0
    9100:	bne.n	90e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    9102:	movs	r0, #0
    9104:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9106:	ldr	r0, [pc, #24]	; (9120 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    9108:	bl	8d14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    910c:	cmp	r0, #0
    910e:	bne.n	90d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9110:	ldr	r1, [pc, #16]	; (9124 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    9112:	movs	r4, #12
  m_errorLine = line;
    9114:	ldr	r3, [pc, #16]	; (9128 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    9116:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    911a:	strb	r4, [r1, #0]
  m_errorLine = line;
    911c:	str	r2, [r3, #0]
    911e:	pop	{r3, r4, r5, r6, r7, pc}
    9120:	.word	0x123a0037
    9124:	.word	0x20000c14
    9128:	.word	0x200060c8

0000912c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    912c:	push	{r3, r4, r5, r6, r7, lr}
    912e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    9130:	ldrb	r0, [r0, #8]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9132:	mov	r4, r1
    9134:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9136:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9138:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    913a:	bmi.n	9164 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    913c:	cbz	r3, 9160 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    913e:	add	r7, r1
    9140:	b.n	9146 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9142:	cmp	r4, r7
    9144:	beq.n	9160 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    9146:	ldr	r3, [r6, #0]
    9148:	mov	r2, r5
    914a:	mov	r1, r4
    914c:	mov	r0, r6
    914e:	ldr	r3, [r3, #24]
    9150:	add.w	r5, r5, #512	; 0x200
    9154:	adds	r4, #1
    9156:	blx	r3
    9158:	cmp	r0, #0
    915a:	bne.n	9142 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    915c:	movs	r0, #0
    915e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    9160:	movs	r0, #1
    9162:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    9164:	lsls	r0, r2, #30
    9166:	beq.n	918e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9168:	cmp	r3, #0
    916a:	beq.n	9160 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    916c:	add	r7, r1
    916e:	b.n	9174 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    9170:	cmp	r7, r4
    9172:	beq.n	9160 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    9174:	ldr	r3, [r6, #0]
    9176:	mov	r2, r5
    9178:	mov	r1, r4
    917a:	mov	r0, r6
    917c:	ldr	r3, [r3, #24]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    917e:	add.w	r5, r5, #512	; 0x200
    9182:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    9184:	blx	r3
    9186:	cmp	r0, #0
    9188:	bne.n	9170 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    918a:	movs	r0, #0
    918c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    918e:	ldr	r0, [pc, #24]	; (91a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    9190:	bl	8d14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9194:	cmp	r0, #0
    9196:	bne.n	9160 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9198:	ldr	r1, [pc, #16]	; (91ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    919a:	movs	r4, #14
  m_errorLine = line;
    919c:	ldr	r3, [pc, #16]	; (91b0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    919e:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91a2:	strb	r4, [r1, #0]
  m_errorLine = line;
    91a4:	str	r2, [r3, #0]
    91a6:	pop	{r3, r4, r5, r6, r7, pc}
    91a8:	.word	0x193a0027
    91ac:	.word	0x20000c14
    91b0:	.word	0x200060c8

000091b4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    91b4:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    91b6:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    91b8:	mov	r5, r2
    91ba:	sub.w	sp, sp, #512	; 0x200
    91be:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    91c0:	lsls	r2, r3, #31
    91c2:	bpl.n	91f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    91c4:	lsls	r3, r5, #30
    91c6:	beq.n	91d6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    91c8:	mov	r1, r5
    91ca:	mov.w	r2, #512	; 0x200
    91ce:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    91d0:	mov	r5, sp
      memcpy(aligned, src, 512);
    91d2:	bl	9c5c <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    91d6:	mov	r2, r5
    91d8:	mov	r1, r6
    91da:	movs	r3, #1
    91dc:	ldr	r0, [pc, #104]	; (9248 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    91de:	bl	8d14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    91e2:	cbnz	r0, 91f2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91e4:	ldr	r1, [pc, #100]	; (924c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    91e6:	movs	r4, #13
  m_errorLine = line;
    91e8:	ldr	r3, [pc, #100]	; (9250 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    91ea:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91ee:	strb	r4, [r1, #0]
  m_errorLine = line;
    91f0:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    91f2:	add.w	sp, sp, #512	; 0x200
    91f6:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    91f8:	ldrb	r3, [r0, #9]
    91fa:	mov	r4, r0
    91fc:	cmp	r3, #2
    91fe:	beq.n	9212 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    9200:	ldr	r3, [r4, #0]
    9202:	mov	r0, r4
    9204:	ldr	r3, [r3, #20]
    9206:	blx	r3
    9208:	cbnz	r0, 9232 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7e>
        return false;
    920a:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    920c:	add.w	sp, sp, #512	; 0x200
    9210:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9212:	ldr	r3, [r0, #4]
    9214:	cmp	r1, r3
    9216:	bne.n	9200 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    9218:	ldr	r3, [r4, #0]
    921a:	mov	r1, r5
    921c:	mov	r0, r4
    921e:	ldr	r3, [r3, #68]	; 0x44
    9220:	blx	r3
    9222:	cmp	r0, #0
    9224:	beq.n	920a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    9226:	ldr	r3, [r4, #4]
    9228:	adds	r3, #1
    922a:	str	r3, [r4, #4]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    922c:	add.w	sp, sp, #512	; 0x200
    9230:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    9232:	ldr	r3, [r4, #0]
    9234:	mov	r1, r6
    9236:	mov	r0, r4
    9238:	ldr	r3, [r3, #72]	; 0x48
    923a:	blx	r3
    923c:	cmp	r0, #0
    923e:	beq.n	920a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    9240:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    9242:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    9244:	strb	r3, [r4, #9]
    9246:	b.n	9218 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    9248:	.word	0x183a0001
    924c:	.word	0x20000c14
    9250:	.word	0x200060c8

00009254 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    9254:	ldrb	r3, [r0, #9]
    9256:	cmp	r3, #1
    9258:	beq.n	927a <SdioCard::syncDevice()+0x26>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    925a:	cmp	r3, #2
    925c:	beq.n	9262 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    925e:	movs	r0, #1
    9260:	bx	lr
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    9262:	push	{r4}
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    9264:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    9266:	movs	r4, #0
    9268:	ldr	r1, [pc, #28]	; (9288 <SdioCard::syncDevice()+0x34>)
    926a:	strb	r4, [r0, #9]
    if (!writeStop()) {
    926c:	ldr	r3, [r3, #76]	; 0x4c
    926e:	cmp	r3, r1
    9270:	bne.n	9282 <SdioCard::syncDevice()+0x2e>
      return false;
    }
  }
  return true;
}
    9272:	ldr.w	r4, [sp], #4
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    9276:	b.w	8f0c <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    927a:	movs	r3, #0
    927c:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    927e:	b.w	8f0c <transferStop()>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    9282:	ldr.w	r4, [sp], #4
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    9286:	bx	r3
    9288:	.word	0x00008f79

0000928c <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    928c:	push	{r3, r4, r5, r6, r7, lr}
    928e:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    9290:	ldr	r0, [pc, #108]	; (9300 <cardCMD6(unsigned long, unsigned char*)+0x74>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9292:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    9294:	bl	8ae0 <waitTimeout(bool (*)())>
    9298:	cbz	r0, 92ac <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    929a:	ldr	r1, [pc, #104]	; (9304 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    929c:	movs	r0, #10
  m_errorLine = line;
    929e:	ldr	r3, [pc, #104]	; (9308 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    92a0:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92a4:	strb	r0, [r1, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    92a6:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    92a8:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    92aa:	pop	{r3, r4, r5, r6, r7, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    92ac:	ldr	r2, [pc, #92]	; (930c <cardCMD6(unsigned long, unsigned char*)+0x80>)
    92ae:	movs	r7, #1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    92b0:	ldr	r3, [pc, #92]	; (9310 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92b2:	mov	r1, r5
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    92b4:	strb	r7, [r2, #0]
  m_irqstat = 0;
    92b6:	ldr	r6, [pc, #92]	; (9314 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    92b8:	ldr	r5, [pc, #92]	; (9318 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    92ba:	ldr	r2, [pc, #96]	; (931c <cardCMD6(unsigned long, unsigned char*)+0x90>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    92bc:	str	r0, [r6, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    92be:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92c0:	ldr	r0, [pc, #92]	; (9320 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    92c2:	str	r5, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    92c4:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92c6:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    92ca:	cbnz	r0, 92dc <cardCMD6(unsigned long, unsigned char*)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92cc:	ldr	r1, [pc, #52]	; (9304 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    92ce:	movs	r4, #4
  m_errorLine = line;
    92d0:	ldr	r3, [pc, #52]	; (9308 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    92d2:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    92d8:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    92da:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    92dc:	ldr	r0, [pc, #68]	; (9324 <cardCMD6(unsigned long, unsigned char*)+0x98>)
    92de:	bl	8b08 <yieldTimeout(bool (*)())>
    92e2:	cbnz	r0, 92ec <cardCMD6(unsigned long, unsigned char*)+0x60>
    92e4:	bl	8cf4 <waitDmaStatus() [clone .part.7]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    92e8:	cbz	r0, 92ec <cardCMD6(unsigned long, unsigned char*)+0x60>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    92ea:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92ec:	ldr	r1, [pc, #20]	; (9304 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    92ee:	movs	r0, #36	; 0x24
  m_errorLine = line;
    92f0:	ldr	r3, [pc, #20]	; (9308 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    92f2:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92f6:	strb	r0, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    92f8:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    92fa:	str	r2, [r3, #0]
    92fc:	pop	{r3, r4, r5, r6, r7, pc}
    92fe:	nop
    9300:	.word	0x00008cad
    9304:	.word	0x20000c14
    9308:	.word	0x200060c8
    930c:	.word	0x200060c0
    9310:	.word	0x402c0000
    9314:	.word	0x200060a8
    9318:	.word	0x00010040
    931c:	.word	0x117f0002
    9320:	.word	0x063a0011
    9324:	.word	0x00008961

00009328 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    9328:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    932c:	ldr	r2, [pc, #732]	; (960c <SdioCard::begin(SdioConfig)+0x2e4>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    932e:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    9330:	ldr	r5, [pc, #732]	; (9610 <SdioCard::begin(SdioConfig)+0x2e8>)
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9332:	movs	r4, #5
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    9334:	strb	r1, [r0, #8]
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    9336:	sub	sp, #68	; 0x44
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    9338:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    933a:	strb	r3, [r0, #9]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    933c:	ldr.w	r0, [r2, #256]	; 0x100
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    9340:	ldr	r7, [pc, #720]	; (9614 <SdioCard::begin(SdioConfig)+0x2ec>)
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9342:	orr.w	r0, r0, #128	; 0x80
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    9346:	ldr	r6, [pc, #720]	; (9618 <SdioCard::begin(SdioConfig)+0x2f0>)
  m_version2 = false;
    9348:	ldr.w	r8, [pc, #820]	; 9680 <SdioCard::begin(SdioConfig)+0x358>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    934c:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    934e:	strb	r3, [r6, #0]
  m_version2 = false;
    9350:	strb.w	r3, [r8]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9354:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9358:	ldr.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    935c:	ldr	r3, [pc, #700]	; (961c <SdioCard::begin(SdioConfig)+0x2f4>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    935e:	bic.w	r0, r0, #63	; 0x3f
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9362:	ldr	r1, [pc, #700]	; (9620 <SdioCard::begin(SdioConfig)+0x2f8>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9364:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    9368:	ldr.w	r0, [r2, #256]	; 0x100
    936c:	orr.w	r0, r0, #24
    9370:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9374:	ldr.w	r0, [r2, #256]	; 0x100
    9378:	bic.w	r0, r0, #128	; 0x80
    937c:	str.w	r0, [r2, #256]	; 0x100

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9380:	ldr.w	r2, [r3, #128]	; 0x80

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    9384:	ldr	r0, [pc, #668]	; (9624 <SdioCard::begin(SdioConfig)+0x2fc>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9386:	orr.w	r2, r2, #12
    938a:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    938e:	ldr	r2, [r3, #36]	; 0x24
    9390:	bic.w	r2, r2, #14336	; 0x3800
    9394:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    9396:	ldr	r2, [r3, #28]
    9398:	orr.w	r2, r2, #65536	; 0x10000
    939c:	str	r2, [r3, #28]
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    939e:	ldr	r2, [r3, #36]	; 0x24
    93a0:	orr.w	r2, r2, #2048	; 0x800
    93a4:	str	r2, [r3, #36]	; 0x24
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    93a6:	mov	r2, r0
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    93a8:	str.w	r4, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    93ac:	str.w	r4, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    93b0:	str.w	r4, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    93b4:	str.w	r4, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    93b8:	str.w	r4, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    93bc:	str.w	r4, [r1, #456]	; 0x1c8

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    93c0:	ldr	r1, [r0, #72]	; 0x48
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    93c2:	ldr	r3, [pc, #612]	; (9628 <SdioCard::begin(SdioConfig)+0x300>)

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    93c4:	orr.w	r1, r1, #2147483648	; 0x80000000
    93c8:	str	r1, [r0, #72]	; 0x48
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    93ca:	ldr	r1, [r0, #44]	; 0x2c
    93cc:	orrs	r3, r1
    93ce:	str	r3, [r0, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    93d0:	ldr	r3, [r2, #44]	; 0x2c
    93d2:	ldr	r4, [pc, #592]	; (9624 <SdioCard::begin(SdioConfig)+0x2fc>)
    93d4:	lsls	r1, r3, #7
    93d6:	bmi.n	93d0 <SdioCard::begin(SdioConfig)+0xa8>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    93d8:	mov.w	r0, #400	; 0x190
    93dc:	bl	89ac <setSdclk(unsigned long)>
    93e0:	bl	8b64 <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    93e4:	ldr	r1, [pc, #580]	; (962c <SdioCard::begin(SdioConfig)+0x304>)
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    93e6:	ldr	r3, [pc, #584]	; (9630 <SdioCard::begin(SdioConfig)+0x308>)
    93e8:	ldr	r2, [pc, #584]	; (9634 <SdioCard::begin(SdioConfig)+0x30c>)
    93ea:	str	r1, [r4, #52]	; 0x34
    93ec:	str.w	r2, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    93f0:	ldr	r3, [pc, #580]	; (9638 <SdioCard::begin(SdioConfig)+0x310>)
    93f2:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    93f4:	ldr	r2, [pc, #580]	; (963c <SdioCard::begin(SdioConfig)+0x314>)
    93f6:	mov.w	r1, #16384	; 0x4000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    93fa:	strb	r0, [r3, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    93fc:	mov	r3, r4
  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    93fe:	str	r1, [r2, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9400:	ldr	r2, [r4, #44]	; 0x2c
    9402:	orr.w	r2, r2, #134217728	; 0x8000000
    9406:	str	r2, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9408:	ldr	r1, [r3, #44]	; 0x2c
    940a:	ands.w	r1, r1, #134217728	; 0x8000000
    940e:	bne.n	9408 <SdioCard::begin(SdioConfig)+0xe0>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9410:	mov	r0, r1
    9412:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    9416:	mov	r4, r0
    9418:	cmp	r0, #0
    941a:	beq.n	94b8 <SdioCard::begin(SdioConfig)+0x190>
    941c:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    941e:	mov.w	r1, #426	; 0x1aa
    9422:	ldr	r0, [pc, #540]	; (9640 <SdioCard::begin(SdioConfig)+0x318>)
    9424:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    9428:	cmp	r0, #0
    942a:	bne.n	94e6 <SdioCard::begin(SdioConfig)+0x1be>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    942c:	subs	r4, #1
    942e:	bne.n	941e <SdioCard::begin(SdioConfig)+0xf6>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9430:	ldrb.w	r3, [r8]
    9434:	ldr	r4, [pc, #524]	; (9644 <SdioCard::begin(SdioConfig)+0x31c>)
    9436:	cmp	r3, #0
    9438:	it	eq
    943a:	moveq.w	r4, #3145728	; 0x300000
  int m = micros();
    943e:	bl	ae9c <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9442:	ldr.w	r8, [pc, #576]	; 9684 <SdioCard::begin(SdioConfig)+0x35c>
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    9446:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9448:	movs	r1, #0
    944a:	ldr	r0, [pc, #508]	; (9648 <SdioCard::begin(SdioConfig)+0x320>)
    944c:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    9450:	cbnz	r0, 9468 <SdioCard::begin(SdioConfig)+0x140>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9452:	movs	r1, #23
  m_errorLine = line;
    9454:	ldr	r3, [pc, #500]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    9456:	movw	r2, #621	; 0x26d
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    945a:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    945c:	strb	r1, [r5, #0]
  m_errorLine = line;
    945e:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    9460:	mov	r0, r4
    9462:	add	sp, #68	; 0x44
    9464:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9468:	mov	r1, r4
    946a:	ldr	r0, [pc, #484]	; (9650 <SdioCard::begin(SdioConfig)+0x328>)
    946c:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    9470:	cmp	r0, #0
    9472:	beq.n	9452 <SdioCard::begin(SdioConfig)+0x12a>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9474:	bl	ae9c <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9478:	rsb	r0, r9, r0
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    947c:	ldr	r2, [pc, #420]	; (9624 <SdioCard::begin(SdioConfig)+0x2fc>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    947e:	cmp	r0, r8
    9480:	bhi.n	9452 <SdioCard::begin(SdioConfig)+0x12a>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9482:	ldr	r3, [r2, #16]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    9484:	cmp	r3, #0
    9486:	bge.n	9448 <SdioCard::begin(SdioConfig)+0x120>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    9488:	ldr	r1, [r2, #16]
    948a:	ldr	r3, [pc, #456]	; (9654 <SdioCard::begin(SdioConfig)+0x32c>)
    948c:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    948e:	ldr	r3, [r2, #16]
    9490:	lsls	r2, r3, #1
    9492:	bpl.n	9498 <SdioCard::begin(SdioConfig)+0x170>
    // Is high capacity.
    m_highCapacity = true;
    9494:	movs	r3, #1
    9496:	strb	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9498:	movs	r1, #0
    949a:	ldr	r0, [pc, #444]	; (9658 <SdioCard::begin(SdioConfig)+0x330>)
    949c:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    94a0:	mov	r4, r0
    94a2:	cbnz	r0, 94cc <SdioCard::begin(SdioConfig)+0x1a4>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94a4:	movs	r1, #2
  m_errorLine = line;
    94a6:	ldr	r3, [pc, #420]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    94a8:	movw	r2, #630	; 0x276

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94ac:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94ae:	strb	r1, [r5, #0]
  m_errorLine = line;
    94b0:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94b2:	add	sp, #68	; 0x44
    94b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94b8:	movs	r1, #1
  m_errorLine = line;
    94ba:	ldr	r3, [pc, #400]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    94bc:	mov.w	r2, #604	; 0x25c

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94c0:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94c2:	strb	r1, [r5, #0]
  m_errorLine = line;
    94c4:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94c6:	add	sp, #68	; 0x44
    94c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    94cc:	movs	r1, #0
    94ce:	ldr	r0, [pc, #396]	; (965c <SdioCard::begin(SdioConfig)+0x334>)
    94d0:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    94d4:	mov	r4, r0
    94d6:	cbnz	r0, 950a <SdioCard::begin(SdioConfig)+0x1e2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94d8:	movs	r1, #3
  m_errorLine = line;
    94da:	ldr	r3, [pc, #368]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    94dc:	movw	r2, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94e0:	strb	r1, [r5, #0]
  m_errorLine = line;
    94e2:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    94e4:	b.n	9460 <SdioCard::begin(SdioConfig)+0x138>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    94e6:	ldr	r3, [pc, #316]	; (9624 <SdioCard::begin(SdioConfig)+0x2fc>)
    94e8:	ldr	r3, [r3, #16]
    94ea:	cmp.w	r3, #426	; 0x1aa
    94ee:	beq.n	9500 <SdioCard::begin(SdioConfig)+0x1d8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94f0:	movs	r1, #6
  m_errorLine = line;
    94f2:	ldr	r3, [pc, #344]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    94f4:	movw	r2, #610	; 0x262
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    94f8:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94fa:	strb	r1, [r5, #0]
  m_errorLine = line;
    94fc:	str	r2, [r3, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    94fe:	b.n	9460 <SdioCard::begin(SdioConfig)+0x138>
      }
      m_version2 = true;
    9500:	movs	r3, #1
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9502:	ldr	r4, [pc, #320]	; (9644 <SdioCard::begin(SdioConfig)+0x31c>)
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    9504:	strb.w	r3, [r8]
    9508:	b.n	943e <SdioCard::begin(SdioConfig)+0x116>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    950a:	ldr	r6, [pc, #280]	; (9624 <SdioCard::begin(SdioConfig)+0x2fc>)
    950c:	ldr	r3, [pc, #336]	; (9660 <SdioCard::begin(SdioConfig)+0x338>)
    950e:	ldr	r2, [r6, #16]
    9510:	ldr.w	r8, [pc, #372]	; 9688 <SdioCard::begin(SdioConfig)+0x360>
    9514:	ands	r3, r2

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9516:	ldr	r1, [pc, #332]	; (9664 <SdioCard::begin(SdioConfig)+0x33c>)
    9518:	ldr	r0, [pc, #332]	; (9668 <SdioCard::begin(SdioConfig)+0x340>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    951a:	str.w	r3, [r8]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    951e:	bl	8c50 <readReg16(unsigned long, void*)>
    9522:	mov	r4, r0
    9524:	cbnz	r0, 9534 <SdioCard::begin(SdioConfig)+0x20c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9526:	movs	r1, #7
  m_errorLine = line;
    9528:	ldr	r3, [pc, #288]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    952a:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    952e:	strb	r1, [r5, #0]
  m_errorLine = line;
    9530:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    9532:	b.n	9460 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9534:	ldr	r1, [pc, #308]	; (966c <SdioCard::begin(SdioConfig)+0x344>)
    9536:	ldr	r0, [pc, #312]	; (9670 <SdioCard::begin(SdioConfig)+0x348>)
    9538:	bl	8c50 <readReg16(unsigned long, void*)>
    953c:	mov	r4, r0
    953e:	cbnz	r0, 954e <SdioCard::begin(SdioConfig)+0x226>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9540:	movs	r1, #8
  m_errorLine = line;
    9542:	ldr	r3, [pc, #264]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    9544:	movw	r2, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9548:	strb	r1, [r5, #0]
  m_errorLine = line;
    954a:	str	r2, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    954c:	b.n	9460 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    954e:	ldr.w	r1, [r8]
    9552:	ldr	r0, [pc, #288]	; (9674 <SdioCard::begin(SdioConfig)+0x34c>)
    9554:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    9558:	mov	r4, r0
    955a:	cbnz	r0, 956a <SdioCard::begin(SdioConfig)+0x242>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    955c:	movs	r1, #5
  m_errorLine = line;
    955e:	ldr	r3, [pc, #236]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    9560:	mov.w	r2, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9564:	strb	r1, [r5, #0]
  m_errorLine = line;
    9566:	str	r2, [r3, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    9568:	b.n	9460 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    956a:	ldr.w	r1, [r8]
    956e:	ldr	r0, [pc, #216]	; (9648 <SdioCard::begin(SdioConfig)+0x320>)
    9570:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    9574:	cbnz	r0, 9586 <SdioCard::begin(SdioConfig)+0x25e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9576:	movs	r1, #20
  m_errorLine = line;
    9578:	ldr	r3, [pc, #208]	; (964c <SdioCard::begin(SdioConfig)+0x324>)
    957a:	mov.w	r2, #648	; 0x288
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    957e:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9580:	strb	r1, [r5, #0]
  m_errorLine = line;
    9582:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    9584:	b.n	9460 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9586:	movs	r1, #2
    9588:	ldr	r0, [pc, #236]	; (9678 <SdioCard::begin(SdioConfig)+0x350>)
    958a:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    958e:	mov	r4, r0
    9590:	cmp	r0, #0
    9592:	beq.n	9576 <SdioCard::begin(SdioConfig)+0x24e>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9594:	ldr	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9596:	mov.w	r2, #1048592	; 0x100010

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    959a:	mvn.w	r0, #4278190080	; 0xff000000
    959e:	mov	r1, sp
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    95a0:	bic.w	r3, r3, #6
    95a4:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    95a6:	ldr	r3, [r6, #40]	; 0x28
    95a8:	orr.w	r3, r3, #2
    95ac:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    95ae:	str	r2, [r6, #68]	; 0x44

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    95b0:	bl	928c <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    95b4:	cbz	r0, 95be <SdioCard::begin(SdioConfig)+0x296>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    95b6:	ldrb.w	r3, [sp, #13]
    95ba:	lsls	r3, r3, #30
    95bc:	bmi.n	95ec <SdioCard::begin(SdioConfig)+0x2c4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    95be:	movw	r0, #25000	; 0x61a8
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    95c2:	ldr	r3, [pc, #92]	; (9620 <SdioCard::begin(SdioConfig)+0x2f8>)
    95c4:	movs	r2, #5
    95c6:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    95ca:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    95ce:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    95d2:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    95d6:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    95da:	str.w	r2, [r3, #456]	; 0x1c8
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    95de:	bl	89ac <setSdclk(unsigned long)>
    95e2:	bl	8b64 <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    95e6:	movs	r3, #1
    95e8:	strb	r3, [r7, #0]
  return true;
    95ea:	b.n	9460 <SdioCard::begin(SdioConfig)+0x138>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    95ec:	mov	r1, sp
    95ee:	ldr	r0, [pc, #140]	; (967c <SdioCard::begin(SdioConfig)+0x354>)
    95f0:	bl	928c <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    95f4:	cmp	r0, #0
    95f6:	beq.n	95be <SdioCard::begin(SdioConfig)+0x296>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    95f8:	ldrb.w	r3, [sp, #16]
    95fc:	and.w	r3, r3, #15
    9600:	cmp	r3, #1
    9602:	bne.n	95be <SdioCard::begin(SdioConfig)+0x296>
    kHzSdClk = 50000;
    9604:	movw	r0, #50000	; 0xc350
    9608:	b.n	95c2 <SdioCard::begin(SdioConfig)+0x29a>
    960a:	nop
    960c:	.word	0x400d8000
    9610:	.word	0x20000c14
    9614:	.word	0x200060ac
    9618:	.word	0x2000609c
    961c:	.word	0x400fc000
    9620:	.word	0x401f8000
    9624:	.word	0x402c0000
    9628:	.word	0x01008000
    962c:	.word	0x117f000b
    9630:	.word	0x20008800
    9634:	.word	0x00008909
    9638:	.word	0xe000e46e
    963c:	.word	0xe000e10c
    9640:	.word	0x081a0000
    9644:	.word	0x40300000
    9648:	.word	0x371a0000
    964c:	.word	0x200060c8
    9650:	.word	0x29020000
    9654:	.word	0x200060a0
    9658:	.word	0x02090000
    965c:	.word	0x031a0000
    9660:	.word	0xffff0000
    9664:	.word	0x200060b0
    9668:	.word	0x09090000
    966c:	.word	0x20006088
    9670:	.word	0x0a090000
    9674:	.word	0x071b0000
    9678:	.word	0x061a0000
    967c:	.word	0x80fffff1
    9680:	.word	0x20006084
    9684:	.word	0x000f4240
    9688:	.word	0x200060a4

0000968c <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    968c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    968e:	ldr	r3, [pc, #156]	; (972c <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    9690:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9692:	ldr	r2, [r3, #36]	; 0x24
    9694:	lsls	r4, r2, #22
    9696:	bmi.n	96b4 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9698:	ldr	r2, [r3, #40]	; 0x28
    969a:	bic.w	r2, r2, #65536	; 0x10000
    969e:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    96a0:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    96a2:	ldr	r2, [r3, #40]	; 0x28
    96a4:	orr.w	r2, r2, #131072	; 0x20000
    96a8:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    96aa:	ldr	r2, [r3, #40]	; 0x28
    96ac:	orr.w	r2, r2, #65536	; 0x10000
    96b0:	str	r2, [r3, #40]	; 0x28
    interrupts();
    96b2:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    96b4:	ldr	r0, [pc, #120]	; (9730 <SdioCard::readData(unsigned char*)+0xa4>)
    96b6:	bl	8ae0 <waitTimeout(bool (*)())>
    96ba:	cmp	r0, #0
    96bc:	bne.n	971a <SdioCard::readData(unsigned char*)+0x8e>
    96be:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    96c0:	ldr	r1, [pc, #104]	; (972c <SdioCard::readData(unsigned char*)+0xa0>)
    96c2:	add.w	r5, r5, #508	; 0x1fc
    96c6:	ldr	r2, [r1, #36]	; 0x24
    96c8:	lsls	r0, r2, #20
    96ca:	bpl.n	96c6 <SdioCard::readData(unsigned char*)+0x3a>
    96cc:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    96d0:	ldr	r2, [r1, #32]
    96d2:	ldr	r4, [pc, #88]	; (972c <SdioCard::readData(unsigned char*)+0xa0>)
    96d4:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    96d8:	cmp	r0, r3
    96da:	bne.n	96d0 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    96dc:	cmp	r5, r0
    96de:	mov	r3, r0
    96e0:	bne.n	96c6 <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    96e2:	ldr	r0, [pc, #80]	; (9734 <SdioCard::readData(unsigned char*)+0xa8>)
    96e4:	bl	8ae0 <waitTimeout(bool (*)())>
    96e8:	cbnz	r0, 9708 <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    96ea:	ldr	r2, [r4, #48]	; 0x30
    96ec:	ldr	r3, [pc, #72]	; (9738 <SdioCard::readData(unsigned char*)+0xac>)
    96ee:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    96f0:	ldr	r2, [r3, #0]
    96f2:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    96f4:	ldr	r2, [r3, #0]
    96f6:	lsls	r2, r2, #30
    96f8:	bpl.n	972a <SdioCard::readData(unsigned char*)+0x9e>
    96fa:	ldr	r3, [r3, #0]
    96fc:	ldr	r0, [pc, #60]	; (973c <SdioCard::readData(unsigned char*)+0xb0>)
    96fe:	ands	r0, r3
    9700:	clz	r0, r0
    9704:	lsrs	r0, r0, #5
    9706:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9708:	ldr	r1, [pc, #52]	; (9740 <SdioCard::readData(unsigned char*)+0xb4>)
    970a:	movs	r0, #29
  m_errorLine = line;
    970c:	ldr	r3, [pc, #52]	; (9744 <SdioCard::readData(unsigned char*)+0xb8>)
    970e:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9712:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9714:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9716:	str	r2, [r3, #0]
    9718:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    971a:	ldr	r1, [pc, #36]	; (9740 <SdioCard::readData(unsigned char*)+0xb4>)
    971c:	movs	r4, #26
  m_errorLine = line;
    971e:	ldr	r3, [pc, #36]	; (9744 <SdioCard::readData(unsigned char*)+0xb8>)
    9720:	mov.w	r2, #748	; 0x2ec
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9724:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9726:	strb	r4, [r1, #0]
  m_errorLine = line;
    9728:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    972a:	pop	{r3, r4, r5, pc}
    972c:	.word	0x402c0000
    9730:	.word	0x0000896d
    9734:	.word	0x00008995
    9738:	.word	0x200060a8
    973c:	.word	0x117f0000
    9740:	.word	0x20000c14
    9744:	.word	0x200060c8

00009748 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    9748:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    974a:	ldr	r0, [pc, #80]	; (979c <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    974c:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    974e:	bl	8b08 <yieldTimeout(bool (*)())>
    9752:	cbnz	r0, 9788 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9754:	ldr	r3, [pc, #72]	; (97a0 <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9756:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    975a:	ldr	r1, [pc, #72]	; (97a4 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    975c:	ldr	r2, [r3, #40]	; 0x28
    975e:	orr.w	r2, r2, #65536	; 0x10000
    9762:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9764:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9766:	ldrb	r3, [r1, #0]
    9768:	cbnz	r3, 9784 <SdioCard::readStart(unsigned long)+0x3c>
    976a:	lsls	r1, r4, #9
    976c:	ldr	r0, [pc, #56]	; (97a8 <SdioCard::readStart(unsigned long)+0x60>)
    976e:	bl	8bc8 <cardCommand(unsigned long, unsigned long)>
    9772:	cbnz	r0, 9782 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9774:	ldr	r1, [pc, #52]	; (97ac <SdioCard::readStart(unsigned long)+0x64>)
    9776:	movs	r4, #12
  m_errorLine = line;
    9778:	ldr	r3, [pc, #52]	; (97b0 <SdioCard::readStart(unsigned long)+0x68>)
    977a:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    977e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9780:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    9782:	pop	{r4, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9784:	mov	r1, r4
    9786:	b.n	976c <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9788:	ldr	r1, [pc, #32]	; (97ac <SdioCard::readStart(unsigned long)+0x64>)
    978a:	movs	r0, #10
  m_errorLine = line;
    978c:	ldr	r3, [pc, #32]	; (97b0 <SdioCard::readStart(unsigned long)+0x68>)
    978e:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9792:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9794:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9796:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9798:	pop	{r4, pc}
    979a:	nop
    979c:	.word	0x00008cad
    97a0:	.word	0x402c0000
    97a4:	.word	0x2000609c
    97a8:	.word	0x123a0030
    97ac:	.word	0x20000c14
    97b0:	.word	0x200060c8

000097b4 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    97b4:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    97b6:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    97b8:	sub.w	sp, sp, #512	; 0x200
    97bc:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    97be:	lsls	r4, r3, #31
    97c0:	bpl.n	97e6 <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    97c2:	lsls	r3, r2, #30
    97c4:	beq.n	9802 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    97c6:	movs	r3, #1
    97c8:	ldr	r0, [pc, #140]	; (9858 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    97ca:	mov	r2, sp
    97cc:	bl	8d14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    97d0:	cbz	r0, 980e <SdioCard::readSector(unsigned long, unsigned char*)+0x5a>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    97d2:	mov	r1, sp
    97d4:	mov	r0, r5
    97d6:	mov.w	r2, #512	; 0x200
    97da:	bl	9c5c <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    97de:	movs	r0, #1
}
    97e0:	add.w	sp, sp, #512	; 0x200
    97e4:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    97e6:	ldrb	r3, [r0, #9]
    97e8:	mov	r4, r0
    97ea:	mov	r6, r1
    97ec:	cmp	r3, #1
    97ee:	beq.n	9824 <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
      if (!syncDevice()) {
    97f0:	ldr	r3, [r4, #0]
    97f2:	mov	r0, r4
    97f4:	ldr	r3, [r3, #20]
    97f6:	blx	r3
    97f8:	cbnz	r0, 9842 <SdioCard::readSector(unsigned long, unsigned char*)+0x8e>
        return false;
    97fa:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    97fc:	add.w	sp, sp, #512	; 0x200
    9800:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9802:	movs	r3, #1
    9804:	ldr	r0, [pc, #80]	; (9858 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    9806:	bl	8d14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    980a:	cmp	r0, #0
    980c:	bne.n	97de <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    980e:	ldr	r1, [pc, #76]	; (985c <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    9810:	movs	r0, #11
  m_errorLine = line;
    9812:	ldr	r3, [pc, #76]	; (9860 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    9814:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9818:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    981a:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    981c:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    981e:	add.w	sp, sp, #512	; 0x200
    9822:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    9824:	ldr	r3, [r0, #4]
    9826:	cmp	r1, r3
    9828:	bne.n	97f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    982a:	mov	r1, r5
    982c:	mov	r0, r4
    982e:	bl	968c <SdioCard::readData(unsigned char*)>
    9832:	cmp	r0, #0
    9834:	beq.n	97fa <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    9836:	ldr	r3, [r4, #4]
    9838:	adds	r3, #1
    983a:	str	r3, [r4, #4]
  }
  return true;
}
    983c:	add.w	sp, sp, #512	; 0x200
    9840:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    9842:	mov	r1, r6
    9844:	mov	r0, r4
    9846:	bl	9748 <SdioCard::readStart(unsigned long)>
    984a:	cmp	r0, #0
    984c:	beq.n	97fa <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    984e:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    9850:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    9852:	strb	r3, [r4, #9]
    9854:	b.n	982a <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    9856:	nop
    9858:	.word	0x113a0011
    985c:	.word	0x20000c14
    9860:	.word	0x200060c8

00009864 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    9864:	ldr	r3, [r0, #0]
    9866:	ldr	r1, [r0, #4]
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    9868:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    986a:	ldrb	r2, [r3, #19]
    986c:	ldr	r4, [r0, #8]
    986e:	cmp	r2, #0
    9870:	beq.n	98c4 <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    9872:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9874:	ldrb	r2, [r3, #19]
    9876:	lsls	r5, r2, #31
    9878:	bpl.n	9888 <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    987a:	ldr	r0, [pc, #204]	; (9948 <SdSpiArduinoDriver::activate()+0xe4>)
    987c:	ldr	r2, [r3, #20]
    987e:	ldr	r5, [r0, #0]
    9880:	ands	r2, r5
    9882:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9884:	str	r2, [r0, #0]
    9886:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    9888:	lsls	r0, r2, #30
    988a:	bpl.n	989a <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    988c:	ldr	r0, [pc, #188]	; (994c <SdSpiArduinoDriver::activate()+0xe8>)
    988e:	ldr	r2, [r3, #24]
    9890:	ldr	r5, [r0, #0]
    9892:	ands	r2, r5
    9894:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    9896:	str	r2, [r0, #0]
    9898:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    989a:	lsls	r5, r2, #29
    989c:	bpl.n	98ac <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    989e:	ldr	r0, [pc, #176]	; (9950 <SdSpiArduinoDriver::activate()+0xec>)
    98a0:	ldr	r2, [r3, #28]
    98a2:	ldr	r5, [r0, #0]
    98a4:	ands	r2, r5
    98a6:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    98a8:	str	r2, [r0, #0]
    98aa:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    98ac:	lsls	r0, r2, #28
    98ae:	bpl.n	98be <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    98b0:	ldr	r0, [pc, #160]	; (9954 <SdSpiArduinoDriver::activate()+0xf0>)
    98b2:	ldr	r2, [r3, #32]
    98b4:	ldr	r5, [r0, #0]
    98b6:	ands	r2, r5
    98b8:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    98ba:	str	r2, [r0, #0]
    98bc:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    98be:	lsls	r2, r2, #27
    98c0:	bmi.n	991a <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    98c2:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    98c4:	ldr	r2, [r3, #8]
    98c6:	cmp	r2, r1
    98c8:	beq.n	9928 <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    98ca:	ldr	r2, [pc, #140]	; (9958 <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    98cc:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    98ce:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    98d0:	ldr	r0, [pc, #136]	; (995c <SdSpiArduinoDriver::activate()+0xf8>)
    98d2:	ubfx	r5, r2, #4, #2
    98d6:	ubfx	r2, r2, #26, #3
    98da:	ldr.w	r0, [r0, r5, lsl #2]
    98de:	adds	r2, #1
    98e0:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    98e4:	cbz	r1, 9916 <SdSpiArduinoDriver::activate()+0xb2>
    98e6:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    98ea:	cbz	r2, 98fe <SdSpiArduinoDriver::activate()+0x9a>
    98ec:	udiv	r0, r0, r2
    98f0:	cmp	r0, r1
    98f2:	it	hi
    98f4:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    98f6:	cmp.w	r2, #258	; 0x102
    98fa:	bcc.n	992c <SdSpiArduinoDriver::activate()+0xc8>
    98fc:	ldr	r2, [pc, #96]	; (9960 <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    98fe:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9900:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    9902:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9904:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    9906:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    9908:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    990a:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    990c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    990e:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    9910:	str	r1, [r3, #16]
  m_spi->beginTransaction(m_spiSettings);
}
    9912:	pop	{r4, r5}
    9914:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    9916:	mov	r2, r0
    9918:	b.n	98ea <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    991a:	ldr	r0, [pc, #72]	; (9964 <SdSpiArduinoDriver::activate()+0x100>)
    991c:	ldr	r2, [r3, #36]	; 0x24
    991e:	ldr	r5, [r0, #0]
    9920:	ands	r2, r5
    9922:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    9924:	str	r2, [r0, #0]
    9926:	b.n	98c2 <SdSpiArduinoDriver::activate()+0x5e>
    9928:	ldr	r2, [r3, #12]
    992a:	b.n	9900 <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    992c:	cmp	r2, #2
    992e:	it	ls
    9930:	movls	r2, #0
    9932:	bls.n	98fe <SdSpiArduinoDriver::activate()+0x9a>
    9934:	subs	r2, #2
    9936:	lsrs	r0, r2, #1
    9938:	lsls	r1, r0, #16
    993a:	orr.w	r2, r2, r0, lsl #8
    993e:	and.w	r1, r1, #16711680	; 0xff0000
    9942:	orrs	r2, r1
    9944:	b.n	98fe <SdSpiArduinoDriver::activate()+0x9a>
    9946:	nop
    9948:	.word	0xe000e180
    994c:	.word	0xe000e184
    9950:	.word	0xe000e188
    9954:	.word	0xe000e18c
    9958:	.word	0x400fc000
    995c:	.word	0x200002cc
    9960:	.word	0x007f7fff
    9964:	.word	0xe000e190

00009968 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    9968:	push	{lr}
    996a:	sub	sp, #20
    996c:	add.w	lr, sp, #16
    9970:	stmdb	lr, {r1, r2, r3}
    9974:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    9976:	cbz	r3, 9986 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    m_spi = spiConfig.spiPort;
    9978:	str	r3, [r0, #0]
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    997a:	mov	r0, r3
}
    997c:	add	sp, #20
    997e:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    9982:	b.w	3a28 <SPIClass::begin()>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    9986:	ldr	r2, [pc, #16]	; (9998 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x30>)
    9988:	mov	r3, r2
    998a:	str	r2, [r0, #0]
  }
  m_spi->begin();
    998c:	mov	r0, r3
}
    998e:	add	sp, #20
    9990:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    9994:	b.w	3a28 <SPIClass::begin()>
    9998:	.word	0x20000bc4

0000999c <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    999c:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    999e:	ldrb	r3, [r2, #19]
    99a0:	cbz	r3, 99dc <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    99a2:	lsls	r0, r3, #31
    99a4:	bpl.n	99ae <SdSpiArduinoDriver::deactivate()+0x12>
    99a6:	ldr	r3, [pc, #56]	; (99e0 <SdSpiArduinoDriver::deactivate()+0x44>)
    99a8:	ldr	r1, [r2, #40]	; 0x28
    99aa:	str	r1, [r3, #0]
    99ac:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    99ae:	lsls	r1, r3, #30
    99b0:	bpl.n	99ba <SdSpiArduinoDriver::deactivate()+0x1e>
    99b2:	ldr	r3, [pc, #48]	; (99e4 <SdSpiArduinoDriver::deactivate()+0x48>)
    99b4:	ldr	r1, [r2, #44]	; 0x2c
    99b6:	str	r1, [r3, #0]
    99b8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    99ba:	lsls	r0, r3, #29
    99bc:	bpl.n	99c6 <SdSpiArduinoDriver::deactivate()+0x2a>
    99be:	ldr	r3, [pc, #40]	; (99e8 <SdSpiArduinoDriver::deactivate()+0x4c>)
    99c0:	ldr	r1, [r2, #48]	; 0x30
    99c2:	str	r1, [r3, #0]
    99c4:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    99c6:	lsls	r1, r3, #28
    99c8:	bpl.n	99d2 <SdSpiArduinoDriver::deactivate()+0x36>
    99ca:	ldr	r3, [pc, #32]	; (99ec <SdSpiArduinoDriver::deactivate()+0x50>)
    99cc:	ldr	r1, [r2, #52]	; 0x34
    99ce:	str	r1, [r3, #0]
    99d0:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    99d2:	lsls	r3, r3, #27
    99d4:	bpl.n	99dc <SdSpiArduinoDriver::deactivate()+0x40>
    99d6:	ldr	r2, [r2, #56]	; 0x38
    99d8:	ldr	r3, [pc, #20]	; (99f0 <SdSpiArduinoDriver::deactivate()+0x54>)
    99da:	str	r2, [r3, #0]
    99dc:	bx	lr
    99de:	nop
    99e0:	.word	0xe000e100
    99e4:	.word	0xe000e104
    99e8:	.word	0xe000e108
    99ec:	.word	0xe000e10c
    99f0:	.word	0xe000e110

000099f4 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    99f4:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    99f6:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    99f8:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    99fa:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    99fc:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    99fe:	tst.w	r3, #2031616	; 0x1f0000
    9a02:	beq.n	99fc <SdSpiArduinoDriver::receive()+0x8>
    9a04:	ldr	r0, [r2, #116]	; 0x74
  return m_spi->transfer(0XFF);
}
    9a06:	uxtb	r0, r0
    9a08:	bx	lr
    9a0a:	nop

00009a0c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9a0c:	push	{r4, r5, r6, lr}
    9a0e:	mov	r4, r1
    9a10:	mov	r6, r2
    9a12:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9a14:	movs	r1, #255	; 0xff
    9a16:	mov	r0, r4
    9a18:	bl	cf4c <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    9a1c:	ldr	r0, [r5, #0]
    9a1e:	mov	r3, r6
    9a20:	mov	r2, r4
    9a22:	mov	r1, r4
    9a24:	bl	3d90 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9a28:	movs	r0, #0
    9a2a:	pop	{r4, r5, r6, pc}

00009a2c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    9a2c:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9a2e:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    9a30:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a32:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a34:	tst.w	r3, #2031616	; 0x1f0000
    9a38:	beq.n	9a32 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    9a3a:	ldr	r3, [r2, #116]	; 0x74
    9a3c:	bx	lr
    9a3e:	nop

00009a40 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9a40:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9a42:	subs	r5, r2, #1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9a44:	sub.w	sp, sp, #516	; 0x204
    9a48:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9a4a:	cmp.w	r5, #512	; 0x200
    9a4e:	bcc.n	9a72 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9a50:	cbz	r2, 9a6c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    9a52:	ldr	r2, [r0, #0]
    9a54:	adds	r0, r1, r3
    9a56:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    9a58:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    9a5c:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a5e:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a60:	tst.w	r3, #2031616	; 0x1f0000
    9a64:	beq.n	9a5e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9a66:	cmp	r1, r0
    9a68:	ldr	r3, [r2, #116]	; 0x74
    9a6a:	bne.n	9a58 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    9a6c:	add.w	sp, sp, #516	; 0x204
    9a70:	pop	{r4, r5, pc}
    9a72:	mov	r4, r2
    9a74:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    9a76:	mov	r0, sp
    9a78:	bl	9c5c <memcpy>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    9a7c:	mov	r3, r4
    9a7e:	mov	r2, sp
    9a80:	mov	r1, sp
    9a82:	ldr	r0, [r5, #0]
    9a84:	bl	3d90 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    9a88:	add.w	sp, sp, #516	; 0x204
    9a8c:	pop	{r4, r5, pc}
    9a8e:	nop

00009a90 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    9a90:	movs	r1, #1
    9a92:	b.w	b13c <pinMode>
    9a96:	nop

00009a98 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9a98:	b.w	b130 <digitalWrite>

00009a9c <tx_event>:
	extern volatile uint8_t usb_configuration;

    static uint32_t mtp_TXcount=0;
	static uint32_t mtp_RXcount=0;
	
	static void tx_event(transfer_t *t) {mtp_TXcount++;}
    9a9c:	ldr	r2, [pc, #8]	; (9aa8 <tx_event+0xc>)
    9a9e:	ldr	r3, [r2, #0]
    9aa0:	adds	r3, #1
    9aa2:	str	r3, [r2, #0]
    9aa4:	bx	lr
    9aa6:	nop
    9aa8:	.word	0x20006b80

00009aac <rx_event>:
	static void rx_event(transfer_t *t) {mtp_RXcount++;}
    9aac:	ldr	r2, [pc, #8]	; (9ab8 <rx_event+0xc>)
    9aae:	ldr	r3, [r2, #0]
    9ab0:	adds	r3, #1
    9ab2:	str	r3, [r2, #0]
    9ab4:	bx	lr
    9ab6:	nop
    9ab8:	.word	0x200068cc

00009abc <usb_mtp_wait>:
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
    9abc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		uint32_t wait_begin_at = systick_millis_count;
    9ac0:	ldr	r4, [pc, #60]	; (9b00 <usb_mtp_wait+0x44>)
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    9ac2:	ldr	r5, [pc, #64]	; (9b04 <usb_mtp_wait+0x48>)
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
    9ac4:	ldr	r7, [r4, #0]
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    9ac6:	ldrb	r3, [r5, #0]
    9ac8:	cbz	r3, 9af0 <usb_mtp_wait+0x34>
    9aca:	mov	r6, r0
    9acc:	mov	r8, r1
    9ace:	b.n	9ae0 <usb_mtp_wait+0x24>
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) break; // transfer descriptor ready
			if (systick_millis_count - wait_begin_at > timeout) return 0;
    9ad0:	ldr	r3, [r4, #0]
    9ad2:	subs	r3, r3, r7
    9ad4:	cmp	r3, r8
    9ad6:	bhi.n	9af8 <usb_mtp_wait+0x3c>
			yield();
    9ad8:	bl	b4cc <yield>

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    9adc:	ldrb	r3, [r5, #0]
    9ade:	cbz	r3, 9af0 <usb_mtp_wait+0x34>
			uint32_t status = usb_transfer_status(xfer);
    9ae0:	mov	r0, r6
    9ae2:	bl	adcc <usb_transfer_status>
			if (!(status & 0x80)) break; // transfer descriptor ready
    9ae6:	lsls	r3, r0, #24
    9ae8:	bmi.n	9ad0 <usb_mtp_wait+0x14>
			if (systick_millis_count - wait_begin_at > timeout) return 0;
			yield();
		}
		return 1;
    9aea:	movs	r0, #1
    9aec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    9af0:	mov.w	r0, #4294967295
    9af4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) break; // transfer descriptor ready
			if (systick_millis_count - wait_begin_at > timeout) return 0;
    9af8:	movs	r0, #0
			yield();
		}
		return 1;
	}
    9afa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9afe:	nop
    9b00:	.word	0x20006da4
    9b04:	.word	0x20006d98

00009b08 <usb_mtp_configure>:
	
	static void tx_event(transfer_t *t) {mtp_TXcount++;}
	static void rx_event(transfer_t *t) {mtp_RXcount++;}

	void usb_mtp_configure(void)
	{
    9b08:	push	{r4, r5, r6, lr}
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    9b0a:	movs	r4, #0

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
    9b0c:	ldr	r5, [pc, #76]	; (9b5c <usb_mtp_configure+0x54>)
	static void rx_event(transfer_t *t) {mtp_RXcount++;}

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
    9b0e:	movs	r2, #128	; 0x80
    9b10:	movs	r1, #0
    9b12:	ldr	r0, [pc, #76]	; (9b60 <usb_mtp_configure+0x58>)
    9b14:	bl	cf4c <memset>
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    9b18:	ldr	r6, [pc, #72]	; (9b64 <usb_mtp_configure+0x5c>)

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
    9b1a:	mov	r1, r4
    9b1c:	mov	r0, r5
    9b1e:	movs	r2, #32
    9b20:	bl	cf4c <memset>
		tx_head = 0;
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
    9b24:	mov	r2, r4
    9b26:	ldr	r3, [pc, #64]	; (9b68 <usb_mtp_configure+0x60>)
    9b28:	mov.w	r1, #512	; 0x200
    9b2c:	movs	r0, #4
	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    9b2e:	strb	r4, [r6, #0]
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
    9b30:	bl	ace8 <usb_config_tx>
		usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, rx_event);
    9b34:	mov	r2, r4
    9b36:	ldr	r3, [pc, #52]	; (9b6c <usb_mtp_configure+0x64>)
    9b38:	mov.w	r1, #512	; 0x200
    9b3c:	movs	r0, #4
    9b3e:	bl	ac84 <usb_config_rx>
		//usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, NULL); // why does this not work?
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    9b42:	mov	r0, r5
    9b44:	mov	r3, r4
    9b46:	ldr	r1, [pc, #40]	; (9b70 <usb_mtp_configure+0x68>)
    9b48:	mov.w	r2, #512	; 0x200
    9b4c:	bl	ad50 <usb_prepare_transfer>
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    9b50:	mov	r1, r5
    9b52:	movs	r0, #4
	}
    9b54:	ldmia.w	sp!, {r4, r5, r6, lr}
		tx_head = 0;
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
		usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, rx_event);
		//usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, NULL); // why does this not work?
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    9b58:	b.w	ada8 <usb_receive>
    9b5c:	.word	0x20006ae0
    9b60:	.word	0x20006b00
    9b64:	.word	0x200068d0
    9b68:	.word	0x00009a9d
    9b6c:	.word	0x00009aad
    9b70:	.word	0x200068d4

00009b74 <usb_mtp_recv>:
		}
		return 1;
	}

	int usb_mtp_recv(void *buffer, uint32_t timeout)
	{
    9b74:	push	{r4, lr}
    9b76:	mov	r4, r0
		int ret= usb_mtp_wait(rx_transfer, timeout); if(ret<=0) return ret;
    9b78:	ldr	r0, [pc, #68]	; (9bc0 <usb_mtp_recv+0x4c>)
    9b7a:	bl	9abc <usb_mtp_wait>
    9b7e:	cmp	r0, #0
    9b80:	ble.n	9bbe <usb_mtp_recv+0x4a>

		memcpy(buffer, rx_buffer, MTP_RX_SIZE);
    9b82:	mov	r0, r4
    9b84:	mov.w	r2, #512	; 0x200
    9b88:	ldr	r1, [pc, #56]	; (9bc4 <usb_mtp_recv+0x50>)
		memset(rx_transfer, 0, sizeof(rx_transfer));

		NVIC_DISABLE_IRQ(IRQ_USB1);
    9b8a:	mov.w	r4, #131072	; 0x20000

	int usb_mtp_recv(void *buffer, uint32_t timeout)
	{
		int ret= usb_mtp_wait(rx_transfer, timeout); if(ret<=0) return ret;

		memcpy(buffer, rx_buffer, MTP_RX_SIZE);
    9b8e:	bl	9c5c <memcpy>
		memset(rx_transfer, 0, sizeof(rx_transfer));
    9b92:	movs	r2, #32
    9b94:	movs	r1, #0
    9b96:	ldr	r0, [pc, #40]	; (9bc0 <usb_mtp_recv+0x4c>)
    9b98:	bl	cf4c <memset>

		NVIC_DISABLE_IRQ(IRQ_USB1);
    9b9c:	ldr	r1, [pc, #40]	; (9bc8 <usb_mtp_recv+0x54>)
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    9b9e:	movs	r3, #0
    9ba0:	mov.w	r2, #512	; 0x200
		int ret= usb_mtp_wait(rx_transfer, timeout); if(ret<=0) return ret;

		memcpy(buffer, rx_buffer, MTP_RX_SIZE);
		memset(rx_transfer, 0, sizeof(rx_transfer));

		NVIC_DISABLE_IRQ(IRQ_USB1);
    9ba4:	str	r4, [r1, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    9ba6:	ldr	r0, [pc, #24]	; (9bc0 <usb_mtp_recv+0x4c>)
    9ba8:	ldr	r1, [pc, #24]	; (9bc4 <usb_mtp_recv+0x50>)
    9baa:	bl	ad50 <usb_prepare_transfer>
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    9bae:	movs	r0, #4
    9bb0:	ldr	r1, [pc, #12]	; (9bc0 <usb_mtp_recv+0x4c>)
    9bb2:	bl	ada8 <usb_receive>
		NVIC_ENABLE_IRQ(IRQ_USB1);
    9bb6:	ldr	r3, [pc, #20]	; (9bcc <usb_mtp_recv+0x58>)
		return MTP_RX_SIZE;
    9bb8:	mov.w	r0, #512	; 0x200
		memset(rx_transfer, 0, sizeof(rx_transfer));

		NVIC_DISABLE_IRQ(IRQ_USB1);
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
		NVIC_ENABLE_IRQ(IRQ_USB1);
    9bbc:	str	r4, [r3, #0]
		return MTP_RX_SIZE;
	}
    9bbe:	pop	{r4, pc}
    9bc0:	.word	0x20006ae0
    9bc4:	.word	0x200068d4
    9bc8:	.word	0xe000e18c
    9bcc:	.word	0xe000e10c

00009bd0 <usb_mtp_send>:

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    9bd0:	push	{r3, r4, r5, r6, r7, lr}
		transfer_t *xfer = tx_transfer + tx_head;
    9bd2:	ldr	r6, [pc, #88]	; (9c2c <usb_mtp_send+0x5c>)
		NVIC_ENABLE_IRQ(IRQ_USB1);
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    9bd4:	mov	r7, r0
		transfer_t *xfer = tx_transfer + tx_head;
    9bd6:	ldr	r3, [pc, #88]	; (9c30 <usb_mtp_send+0x60>)
		NVIC_ENABLE_IRQ(IRQ_USB1);
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    9bd8:	mov	r5, r1
		transfer_t *xfer = tx_transfer + tx_head;
    9bda:	ldrb	r4, [r6, #0]
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    9bdc:	mov	r1, r2
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
    9bde:	add.w	r4, r3, r4, lsl #5
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    9be2:	mov	r0, r4
    9be4:	bl	9abc <usb_mtp_wait>
    9be8:	cmp	r0, #0
    9bea:	ble.n	9c22 <usb_mtp_send+0x52>

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    9bec:	ldrb	r0, [r6, #0]
		memcpy(txdata, buffer, len);
    9bee:	mov	r1, r7
	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    9bf0:	ldr	r3, [pc, #64]	; (9c34 <usb_mtp_send+0x64>)
		memcpy(txdata, buffer, len);
    9bf2:	mov	r2, r5
	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    9bf4:	add.w	r3, r3, r0, lsl #9
		memcpy(txdata, buffer, len);
    9bf8:	mov	r0, r3
    9bfa:	bl	9c5c <memcpy>
		usb_prepare_transfer(xfer, txdata, len, 0);
    9bfe:	movs	r3, #0
    9c00:	mov	r1, r0
    9c02:	mov	r2, r5
    9c04:	mov	r0, r4
    9c06:	bl	ad50 <usb_prepare_transfer>
		usb_transmit(MTP_TX_ENDPOINT, xfer);
    9c0a:	mov	r1, r4
    9c0c:	movs	r0, #4
    9c0e:	bl	ad80 <usb_transmit>
		if (++tx_head >= TX_NUM) tx_head = 0;
    9c12:	ldrb	r3, [r6, #0]
    9c14:	adds	r3, #1
    9c16:	uxtb	r3, r3
    9c18:	cmp	r3, #3
    9c1a:	bls.n	9c24 <usb_mtp_send+0x54>
    9c1c:	movs	r3, #0
		return len;
    9c1e:	mov	r0, r5

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
		memcpy(txdata, buffer, len);
		usb_prepare_transfer(xfer, txdata, len, 0);
		usb_transmit(MTP_TX_ENDPOINT, xfer);
		if (++tx_head >= TX_NUM) tx_head = 0;
    9c20:	strb	r3, [r6, #0]
		return len;
	}
    9c22:	pop	{r3, r4, r5, r6, r7, pc}

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
		memcpy(txdata, buffer, len);
		usb_prepare_transfer(xfer, txdata, len, 0);
		usb_transmit(MTP_TX_ENDPOINT, xfer);
		if (++tx_head >= TX_NUM) tx_head = 0;
    9c24:	strb	r3, [r6, #0]
		return len;
    9c26:	mov	r0, r5
    9c28:	pop	{r3, r4, r5, r6, r7, pc}
    9c2a:	nop
    9c2c:	.word	0x200068d0
    9c30:	.word	0x20006b00
    9c34:	.word	0x200060cc

00009c38 <usb_mtp_available>:
	}

	int usb_mtp_available(void)
	{
    9c38:	push	{r3, lr}
		if (!usb_configuration) return 0;
    9c3a:	ldr	r3, [pc, #24]	; (9c54 <usb_mtp_available+0x1c>)
    9c3c:	ldrb	r3, [r3, #0]
    9c3e:	cbnz	r3, 9c44 <usb_mtp_available+0xc>
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
    9c40:	movs	r0, #0
    9c42:	pop	{r3, pc}
	}

	int usb_mtp_available(void)
	{
		if (!usb_configuration) return 0;
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
    9c44:	ldr	r0, [pc, #16]	; (9c58 <usb_mtp_available+0x20>)
    9c46:	bl	adcc <usb_transfer_status>
    9c4a:	lsls	r3, r0, #24
    9c4c:	bmi.n	9c40 <usb_mtp_available+0x8>
    9c4e:	mov.w	r0, #512	; 0x200
		return 0;
	}
    9c52:	pop	{r3, pc}
    9c54:	.word	0x20006d98
    9c58:	.word	0x20006ae0

00009c5c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9c5c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9c5e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9c62:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9c66:	bne.n	9d44 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9c68:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9c6a:	bcc.n	9cf0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9c6c:	ldr.w	r3, [r1], #4
    9c70:	str.w	r3, [r0], #4
    9c74:	ldr.w	r3, [r1], #4
    9c78:	str.w	r3, [r0], #4
    9c7c:	ldr.w	r3, [r1], #4
    9c80:	str.w	r3, [r0], #4
    9c84:	ldr.w	r3, [r1], #4
    9c88:	str.w	r3, [r0], #4
    9c8c:	ldr.w	r3, [r1], #4
    9c90:	str.w	r3, [r0], #4
    9c94:	ldr.w	r3, [r1], #4
    9c98:	str.w	r3, [r0], #4
    9c9c:	ldr.w	r3, [r1], #4
    9ca0:	str.w	r3, [r0], #4
    9ca4:	ldr.w	r3, [r1], #4
    9ca8:	str.w	r3, [r0], #4
    9cac:	ldr.w	r3, [r1], #4
    9cb0:	str.w	r3, [r0], #4
    9cb4:	ldr.w	r3, [r1], #4
    9cb8:	str.w	r3, [r0], #4
    9cbc:	ldr.w	r3, [r1], #4
    9cc0:	str.w	r3, [r0], #4
    9cc4:	ldr.w	r3, [r1], #4
    9cc8:	str.w	r3, [r0], #4
    9ccc:	ldr.w	r3, [r1], #4
    9cd0:	str.w	r3, [r0], #4
    9cd4:	ldr.w	r3, [r1], #4
    9cd8:	str.w	r3, [r0], #4
    9cdc:	ldr.w	r3, [r1], #4
    9ce0:	str.w	r3, [r0], #4
    9ce4:	ldr.w	r3, [r1], #4
    9ce8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9cec:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9cee:	bcs.n	9c6c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9cf0:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9cf2:	bcc.n	9d18 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9cf4:	ldr.w	r3, [r1], #4
    9cf8:	str.w	r3, [r0], #4
    9cfc:	ldr.w	r3, [r1], #4
    9d00:	str.w	r3, [r0], #4
    9d04:	ldr.w	r3, [r1], #4
    9d08:	str.w	r3, [r0], #4
    9d0c:	ldr.w	r3, [r1], #4
    9d10:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9d14:	subs	r2, #16
	bhs	.Lmid_block_loop
    9d16:	bcs.n	9cf4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9d18:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9d1a:	bcc.n	9d28 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9d1c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9d20:	str.w	r3, [r0], #4
	subs	r2, #4
    9d24:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9d26:	bcs.n	9d1c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9d28:	adds	r2, #4
	beq	.Ldone
    9d2a:	beq.n	9d3e <memcpy+0xe2>

	lsls	r2, r2, #31
    9d2c:	lsls	r2, r2, #31
	itt ne
    9d2e:	itt	ne
	ldrbne  r3, [r1], #1
    9d30:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d34:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9d38:	bcc.n	9d3e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9d3a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9d3c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9d3e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9d40:	bx	lr
    9d42:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9d44:	cmp	r2, #8
	blo	.Lbyte_copy
    9d46:	bcc.n	9d70 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9d48:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9d4a:	beq.n	9c68 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9d4c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9d50:	beq.n	9c68 <memcpy+0xc>

	rsb	r3, #4
    9d52:	rsb	r3, r3, #4
	subs	r2, r3
    9d56:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9d58:	lsls	r3, r3, #31
	itt ne
    9d5a:	itt	ne
	ldrbne  r3, [r1], #1
    9d5c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d60:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9d64:	bcc.n	9c68 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9d66:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9d6a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9d6e:	b.n	9c68 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9d70:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9d72:	bcc.n	9d28 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9d74:	subs	r2, #1
	ldrb    r3, [r1], #1
    9d76:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9d7a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9d7e:	bcs.n	9d74 <memcpy+0x118>

	ldrb	r3, [r1]
    9d80:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9d82:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9d84:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9d86:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9d88:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9d8a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9d8c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9d8e:	bx	lr

00009d90 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9d90:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9d92:	ldr	r1, [pc, #80]	; (9de4 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9d94:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9d98:	ldr	r5, [pc, #76]	; (9de8 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9d9a:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9d9c:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9da0:	ldr	r6, [pc, #72]	; (9dec <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9da2:	ldr	r2, [pc, #76]	; (9df0 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9da4:	add.w	r5, r5, r0, lsl #5
    9da8:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9daa:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9dac:	mov	r0, r5
    9dae:	ldrh	r2, [r6, #0]
    9db0:	bl	ad50 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9db4:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9db6:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9dba:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    9dbc:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9dc0:	ldr	r2, [pc, #48]	; (9df4 <rx_queue_transfer+0x64>)
    9dc2:	str	r3, [r2, #0]
		location += 32;
    9dc4:	adds	r3, #32
	} while (location < end_addr);
    9dc6:	cmp	r1, r3
    9dc8:	bhi.n	9dc2 <rx_queue_transfer+0x32>
	asm("dsb");
    9dca:	dsb	sy
	asm("isb");
    9dce:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9dd2:	movs	r0, #3
    9dd4:	mov	r1, r5
    9dd6:	bl	ada8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9dda:	ldr	r3, [pc, #28]	; (9df8 <rx_queue_transfer+0x68>)
    9ddc:	mov.w	r2, #131072	; 0x20000
    9de0:	str	r2, [r3, #0]
    9de2:	pop	{r3, r4, r5, r6, r7, pc}
    9de4:	.word	0x20200000
    9de8:	.word	0x20006ba0
    9dec:	.word	0x20006cae
    9df0:	.word	0xe000e18c
    9df4:	.word	0xe000ef5c
    9df8:	.word	0xe000e10c

00009dfc <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9dfc:	ldr	r2, [pc, #144]	; (9e90 <rx_event+0x94>)
    9dfe:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    9e00:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e04:	ubfx	r3, r3, #16, #15
    9e08:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    9e0a:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e0c:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9e0e:	cmp	r4, #0
    9e10:	ble.n	9e84 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    9e12:	ldr	r1, [pc, #128]	; (9e94 <rx_event+0x98>)
		if (head != rx_tail) {
    9e14:	ldr	r2, [pc, #128]	; (9e98 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    9e16:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    9e18:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    9e1a:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    9e1c:	ldr	r0, [pc, #124]	; (9e9c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    9e1e:	ldr	r6, [pc, #128]	; (9ea0 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    9e20:	cmp	r3, r2
    9e22:	beq.n	9e34 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    9e24:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9e28:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9e2c:	rsb	r2, r7, #512	; 0x200
    9e30:	cmp	r4, r2
    9e32:	bls.n	9e5a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9e34:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    9e36:	movs	r2, #0
    9e38:	ldr	r7, [pc, #104]	; (9ea4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9e3a:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    9e3c:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    9e40:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    9e44:	ldr	r6, [pc, #96]	; (9ea8 <rx_event+0xac>)
    9e46:	ite	ls
    9e48:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9e4a:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    9e4c:	strb	r2, [r1, #0]
		rx_available += len;
    9e4e:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    9e50:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    9e52:	add	r4, r2
    9e54:	str	r4, [r6, #0]
    9e56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9e5a:	ldr	r3, [pc, #80]	; (9eac <rx_event+0xb0>)
    9e5c:	add.w	r0, r7, r8, lsl #9
    9e60:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9e62:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9e64:	add.w	r1, r3, r5, lsl #9
    9e68:	add	r0, r3
    9e6a:	bl	9c5c <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    9e6e:	ldr	r2, [pc, #56]	; (9ea8 <rx_event+0xac>)
				rx_queue_transfer(i);
    9e70:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9e72:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9e76:	ldr	r3, [r2, #0]
    9e78:	add	r4, r3
    9e7a:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9e7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    9e80:	b.w	9d90 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9e84:	mov	r0, r5
	}
}
    9e86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9e8a:	b.w	9d90 <rx_queue_transfer>
    9e8e:	nop
    9e90:	.word	0x20006cae
    9e94:	.word	0x20006cc4
    9e98:	.word	0x20006ca0
    9e9c:	.word	0x20006ca4
    9ea0:	.word	0x20006cb0
    9ea4:	.word	0x20006b84
    9ea8:	.word	0x20006cc0
    9eac:	.word	0x20200000

00009eb0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9eb0:	ldr	r3, [pc, #120]	; (9f2c <usb_serial_flush_callback+0x7c>)
    9eb2:	ldrb	r2, [r3, #0]
    9eb4:	cbnz	r2, 9ece <usb_serial_flush_callback+0x1e>
    9eb6:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    9eba:	ldr	r2, [pc, #116]	; (9f30 <usb_serial_flush_callback+0x80>)
    9ebc:	ldrb	r2, [r2, #0]
    9ebe:	cbz	r2, 9ece <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    9ec0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    9ec4:	ldr	r5, [pc, #108]	; (9f34 <usb_serial_flush_callback+0x84>)
    9ec6:	ldrh	r2, [r5, #0]
    9ec8:	cbnz	r2, 9ed0 <usb_serial_flush_callback+0x20>
    9eca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ece:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9ed0:	ldr	r6, [pc, #100]	; (9f38 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9ed2:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9ed6:	ldr	r7, [pc, #100]	; (9f3c <usb_serial_flush_callback+0x8c>)
    9ed8:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9eda:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9edc:	ldr	r4, [pc, #96]	; (9f40 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9ede:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9ee2:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9ee6:	mov	r0, r7
    9ee8:	mov	r1, r4
    9eea:	bl	ad50 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9eee:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9ef2:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9ef6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9efa:	ldr	r3, [pc, #72]	; (9f44 <usb_serial_flush_callback+0x94>)
    9efc:	str	r1, [r3, #0]
		location += 32;
    9efe:	adds	r1, #32
	} while (location < end_addr);
    9f00:	cmp	r2, r1
    9f02:	bhi.n	9efc <usb_serial_flush_callback+0x4c>
	asm("dsb");
    9f04:	dsb	sy
	asm("isb");
    9f08:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9f0c:	movs	r0, #3
    9f0e:	mov	r1, r7
    9f10:	bl	ad80 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9f14:	ldrb	r3, [r6, #0]
    9f16:	ldr	r2, [pc, #32]	; (9f38 <usb_serial_flush_callback+0x88>)
    9f18:	adds	r3, #1
    9f1a:	uxtb	r3, r3
    9f1c:	cmp	r3, #3
    9f1e:	it	hi
    9f20:	movhi	r3, #0
    9f22:	strb	r3, [r2, #0]
	tx_available = 0;
    9f24:	movs	r3, #0
    9f26:	strh	r3, [r5, #0]
    9f28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f2c:	.word	0x20006b96
    9f30:	.word	0x20006d98
    9f34:	.word	0x20006cc6
    9f38:	.word	0x20006b97
    9f3c:	.word	0x20006ce0
    9f40:	.word	0x20201000
    9f44:	.word	0xe000ef70

00009f48 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9f48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f4c:	sub	sp, #20
    9f4e:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9f50:	str	r1, [sp, #4]
    9f52:	cmp	r1, #0
    9f54:	beq.w	a09c <usb_serial_write.part.1+0x154>
    9f58:	movs	r3, #0
    9f5a:	ldr.w	r8, [pc, #348]	; a0b8 <usb_serial_write.part.1+0x170>
    9f5e:	ldr.w	r9, [pc, #332]	; a0ac <usb_serial_write.part.1+0x164>
    9f62:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    9f64:	ldr	r6, [pc, #312]	; (a0a0 <usb_serial_write.part.1+0x158>)
    9f66:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9f6a:	ldr.w	sl, [pc, #336]	; a0bc <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    9f6e:	ldr.w	fp, [pc, #336]	; a0c0 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    9f72:	ldr	r2, [pc, #304]	; (a0a4 <usb_serial_write.part.1+0x15c>)
    9f74:	ldrb	r4, [r2, #0]
    9f76:	ldr	r2, [pc, #304]	; (a0a8 <usb_serial_write.part.1+0x160>)
    9f78:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9f7c:	cmp	r3, #0
    9f7e:	bne.n	a05e <usb_serial_write.part.1+0x116>
    9f80:	mov	r5, r3
    9f82:	mov	r4, r3
    9f84:	b.n	9fb0 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9f86:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    9f8a:	cbnz	r4, 9f8e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    9f8c:	ldr	r5, [r6, #0]
    9f8e:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9f90:	cmp	r3, #0
    9f92:	bne.n	a052 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9f94:	ldr	r3, [r6, #0]
    9f96:	subs	r3, r3, r5
    9f98:	cmp	r3, #120	; 0x78
    9f9a:	bhi.n	a090 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9f9c:	ldrb.w	r3, [sl]
    9fa0:	cmp	r3, #0
    9fa2:	beq.n	a052 <usb_serial_write.part.1+0x10a>
			yield();
    9fa4:	bl	b4cc <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9fa8:	ldrh.w	r3, [r8]
    9fac:	cmp	r3, #0
    9fae:	bne.n	a05a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    9fb0:	mov	r0, r7
    9fb2:	bl	adcc <usb_transfer_status>
			if (!(status & 0x80)) {
    9fb6:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9fba:	ldr	r2, [pc, #240]	; (a0ac <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    9fbc:	bne.n	9f86 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9fbe:	mov.w	r3, #2048	; 0x800
    9fc2:	ldr	r2, [pc, #224]	; (a0a4 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    9fc4:	strb.w	r0, [r9]
    9fc8:	ldrb	r4, [r2, #0]
    9fca:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9fcc:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9fd0:	lsls	r4, r4, #11
		if (size >= tx_available) {
    9fd2:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9fd4:	ldr	r1, [pc, #216]	; (a0b0 <usb_serial_write.part.1+0x168>)
    9fd6:	add	r0, r4
		if (size >= tx_available) {
    9fd8:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9fda:	add	r0, r1
		if (size >= tx_available) {
    9fdc:	bcc.n	a066 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9fde:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    9fe0:	ldr	r1, [sp, #8]
    9fe2:	bl	9c5c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9fe6:	movs	r3, #0
    9fe8:	mov	r1, r4
    9fea:	mov.w	r2, #2048	; 0x800
    9fee:	mov	r0, r7
    9ff0:	bl	ad50 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9ff4:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9ff8:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    9ffc:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a000:	str.w	r3, [fp]
		location += 32;
    a004:	adds	r3, #32
	} while (location < end_addr);
    a006:	cmp	r4, r3
    a008:	bhi.n	a000 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    a00a:	dsb	sy
	asm("isb");
    a00e:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a012:	movs	r0, #3
    a014:	mov	r1, r7
    a016:	bl	ad80 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a01a:	ldr	r3, [pc, #136]	; (a0a4 <usb_serial_write.part.1+0x15c>)
    a01c:	ldr	r2, [pc, #132]	; (a0a4 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    a01e:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    a020:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    a022:	ldr	r0, [pc, #144]	; (a0b4 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    a024:	adds	r3, #1
    a026:	uxtb	r3, r3
    a028:	cmp	r3, #3
    a02a:	it	hi
    a02c:	movhi	r3, #0
    a02e:	strb	r3, [r2, #0]
			size -= tx_available;
    a030:	ldrh.w	r2, [r8]
			sent += tx_available;
    a034:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    a036:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    a03a:	add	r3, r2
    a03c:	str	r3, [sp, #0]
			data += tx_available;
    a03e:	ldr	r3, [sp, #8]
    a040:	add	r3, r2
    a042:	str	r3, [sp, #8]
    a044:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    a046:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a04a:	ldr	r1, [sp, #4]
    a04c:	subs	r2, r1, r2
    a04e:	str	r2, [sp, #4]
    a050:	bne.n	9f72 <usb_serial_write.part.1+0x2a>
    a052:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a054:	add	sp, #20
    a056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a05a:	ldr	r2, [pc, #72]	; (a0a4 <usb_serial_write.part.1+0x15c>)
    a05c:	ldrb	r4, [r2, #0]
    a05e:	mov	r2, r3
    a060:	rsb	r0, r3, #2048	; 0x800
    a064:	b.n	9fd0 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    a066:	ldr	r4, [sp, #4]
    a068:	ldr	r1, [sp, #8]
    a06a:	mov	r2, r4
    a06c:	str	r3, [sp, #12]
    a06e:	bl	9c5c <memcpy>
			tx_available -= size;
    a072:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a074:	ldr	r2, [pc, #60]	; (a0b4 <usb_serial_write.part.1+0x16c>)
    a076:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    a07a:	subs	r3, r3, r4
    a07c:	strh.w	r3, [r8]
    a080:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a082:	str.w	r1, [r2, #132]	; 0x84
    a086:	mov	r0, r3
    a088:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a08a:	add	sp, #20
    a08c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    a090:	movs	r3, #1
				return sent;
    a092:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    a094:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a096:	add	sp, #20
    a098:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a09c:	ldr	r0, [sp, #4]
    a09e:	b.n	a054 <usb_serial_write.part.1+0x10c>
    a0a0:	.word	0x20006da4
    a0a4:	.word	0x20006b97
    a0a8:	.word	0x20006ce0
    a0ac:	.word	0x20006cc5
    a0b0:	.word	0x20201000
    a0b4:	.word	0x402e0000
    a0b8:	.word	0x20006cc6
    a0bc:	.word	0x20006d98
    a0c0:	.word	0xe000ef70

0000a0c4 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    a0c4:	bx	lr
    a0c6:	nop

0000a0c8 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    a0c8:	ldr	r3, [pc, #196]	; (a190 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    a0ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    a0ce:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    a0d0:	ldr	r7, [pc, #192]	; (a194 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    a0d2:	cmp	r3, #0
    a0d4:	beq.n	a180 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    a0d6:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    a0da:	ldr.w	r8, [pc, #236]	; a1c8 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    a0de:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a0e0:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0e4:	movs	r1, #0
    a0e6:	movs	r2, #128	; 0x80
    a0e8:	ldr	r0, [pc, #172]	; (a198 <usb_serial_configure+0xd0>)
	tx_head = 0;
    a0ea:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a0ec:	ldr	r6, [pc, #172]	; (a19c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0ee:	bl	cf4c <memset>
	tx_head = 0;
    a0f2:	ldr	r4, [pc, #172]	; (a1a0 <usb_serial_configure+0xd8>)
	tx_available = 0;
    a0f4:	ldr	r3, [pc, #172]	; (a1a4 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a0f6:	mov	r1, r5
    a0f8:	mov.w	r2, #256	; 0x100
    a0fc:	ldr	r0, [pc, #168]	; (a1a8 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    a0fe:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a100:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    a102:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a104:	bl	cf4c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a108:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a10a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a10c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a10e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a110:	str	r5, [r6, #8]
    a112:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    a114:	ldr	r1, [pc, #148]	; (a1ac <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    a116:	ldr	r6, [pc, #152]	; (a1b0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    a118:	ldr	r0, [pc, #152]	; (a1b4 <usb_serial_configure+0xec>)
	rx_available = 0;
    a11a:	ldr.w	lr, [pc, #176]	; a1cc <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    a11e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a120:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    a122:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a124:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    a126:	str	r5, [r6, #0]
    a128:	str	r5, [r6, #4]
    a12a:	str	r5, [r6, #8]
    a12c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    a12e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a132:	bl	ace8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a136:	ldrh.w	r1, [r8]
    a13a:	mov	r2, r5
    a13c:	ldr	r3, [pc, #120]	; (a1b8 <usb_serial_configure+0xf0>)
    a13e:	movs	r0, #3
    a140:	bl	ac84 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a144:	mov	r3, r5
    a146:	ldrh	r1, [r7, #0]
    a148:	movs	r2, #1
    a14a:	movs	r0, #3
    a14c:	bl	ace8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a150:	mov	r0, r4
    a152:	adds	r4, #1
    a154:	bl	9d90 <rx_queue_transfer>
    a158:	cmp	r4, #8
    a15a:	bne.n	a150 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    a15c:	ldr	r3, [pc, #92]	; (a1bc <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    a15e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    a160:	ldr	r0, [pc, #92]	; (a1c0 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    a162:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    a164:	ldr	r4, [pc, #92]	; (a1c4 <usb_serial_configure+0xfc>)
    a166:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a168:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a16c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a170:	ldr.w	r2, [r3, #328]	; 0x148
    a174:	orr.w	r2, r2, #16777216	; 0x1000000
    a178:	str.w	r2, [r3, #328]	; 0x148
    a17c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    a180:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    a182:	ldr.w	r8, [pc, #68]	; a1c8 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    a186:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    a188:	strh.w	r3, [r8]
    a18c:	b.n	a0e4 <usb_serial_configure+0x1c>
    a18e:	nop
    a190:	.word	0x20006d70
    a194:	.word	0x20006b94
    a198:	.word	0x20006ce0
    a19c:	.word	0x20006cb0
    a1a0:	.word	0x20006b97
    a1a4:	.word	0x20006cc6
    a1a8:	.word	0x20006ba0
    a1ac:	.word	0x20006cc4
    a1b0:	.word	0x20006b84
    a1b4:	.word	0x20006ca0
    a1b8:	.word	0x00009dfd
    a1bc:	.word	0x402e0000
    a1c0:	.word	0x20006d60
    a1c4:	.word	0x00009eb1
    a1c8:	.word	0x20006cae
    a1cc:	.word	0x20006cc0

0000a1d0 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    a1d0:	ldr	r3, [pc, #196]	; (a298 <usb_serial_read+0xc8>)
    a1d2:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    a1d6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    a1da:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    a1dc:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    a1de:	ldr	r3, [pc, #188]	; (a29c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    a1e0:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    a1e2:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    a1e4:	cmp	r1, #0
    a1e6:	beq.n	a290 <usb_serial_read+0xc0>
    a1e8:	ldr	r3, [pc, #180]	; (a2a0 <usb_serial_read+0xd0>)
    a1ea:	uxtb	r4, r4
    a1ec:	ldrb	r3, [r3, #0]
    a1ee:	cmp	r4, r3
    a1f0:	beq.n	a294 <usb_serial_read+0xc4>
    a1f2:	mov	sl, r0
    a1f4:	movs	r7, #0
    a1f6:	ldr.w	fp, [pc, #192]	; a2b8 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    a1fa:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a1fc:	ldr	r3, [pc, #164]	; (a2a4 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    a1fe:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a202:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    a204:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a206:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    a208:	ldr	r3, [pc, #156]	; (a2a8 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    a20a:	it	cs
    a20c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a20e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a210:	ldr	r3, [pc, #144]	; (a2a4 <usb_serial_read+0xd4>)
    a212:	ldrh.w	lr, [r3, r5, lsl #1]
    a216:	ldr	r3, [pc, #148]	; (a2ac <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a218:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a21c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a220:	ldr	r3, [pc, #140]	; (a2b0 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a222:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a226:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    a228:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a22a:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    a22c:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    a22e:	bcs.n	a264 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a230:	add.w	r1, lr, r5, lsl #9
    a234:	mov	r2, r8
    a236:	add	r1, r3
    a238:	bl	9c5c <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    a23c:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    a23e:	ldr.w	r1, [fp]
    a242:	mov	r0, r9
			rx_index[i] += len;
    a244:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    a248:	rsb	r1, r8, r1
			rx_index[i] += len;
    a24c:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    a24e:	str.w	r1, [fp]
			rx_index[i] += len;
    a252:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a256:	ldr	r3, [pc, #92]	; (a2b4 <usb_serial_read+0xe4>)
    a258:	mov.w	r2, #131072	; 0x20000
    a25c:	str	r2, [r3, #0]
	return count;
}
    a25e:	add	sp, #12
    a260:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a264:	bl	9c5c <memcpy>
			p += avail;
			rx_available -= avail;
    a268:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    a26c:	uxtb	r3, r4
			rx_queue_transfer(i);
    a26e:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    a270:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    a272:	add	sl, r6
			rx_available -= avail;
    a274:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    a278:	ldr	r2, [pc, #32]	; (a29c <usb_serial_read+0xcc>)
    a27a:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    a27c:	bl	9d90 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    a280:	cmp	r9, r7
    a282:	bls.n	a28c <usb_serial_read+0xbc>
    a284:	ldr	r3, [pc, #24]	; (a2a0 <usb_serial_read+0xd0>)
    a286:	ldrb	r3, [r3, #0]
    a288:	cmp	r4, r3
    a28a:	bne.n	a1fa <usb_serial_read+0x2a>
    a28c:	mov	r0, r7
    a28e:	b.n	a256 <usb_serial_read+0x86>
    a290:	mov	r0, r1
    a292:	b.n	a256 <usb_serial_read+0x86>
    a294:	movs	r0, #0
    a296:	b.n	a256 <usb_serial_read+0x86>
    a298:	.word	0xe000e18c
    a29c:	.word	0x20006ca0
    a2a0:	.word	0x20006cc4
    a2a4:	.word	0x20006b84
    a2a8:	.word	0x20006ca4
    a2ac:	.word	0x20006cb0
    a2b0:	.word	0x20200000
    a2b4:	.word	0xe000e10c
    a2b8:	.word	0x20006cc0

0000a2bc <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a2bc:	ldr	r3, [pc, #44]	; (a2ec <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a2be:	ldr	r2, [pc, #48]	; (a2f0 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a2c0:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    a2c2:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a2c4:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    a2c6:	cmp	r3, r2
    a2c8:	beq.n	a2e6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a2ca:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a2cc:	ldr	r0, [pc, #36]	; (a2f4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a2ce:	ldr	r2, [pc, #40]	; (a2f8 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    a2d0:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a2d2:	ldr	r1, [pc, #40]	; (a2fc <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    a2d4:	it	cs
    a2d6:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a2d8:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a2da:	ldrh.w	r1, [r1, r3, lsl #1]
    a2de:	add.w	r3, r2, r3, lsl #9
    a2e2:	ldrb	r0, [r3, r1]
    a2e4:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    a2e6:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    a2ea:	bx	lr
    a2ec:	.word	0x20006ca0
    a2f0:	.word	0x20006cc4
    a2f4:	.word	0x20006ca4
    a2f8:	.word	0x20200000
    a2fc:	.word	0x20006b84

0000a300 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    a300:	ldr	r3, [pc, #4]	; (a308 <usb_serial_available+0x8>)
    a302:	ldr	r0, [r3, #0]
}
    a304:	bx	lr
    a306:	nop
    a308:	.word	0x20006cc0

0000a30c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    a30c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a310:	ldr	r6, [pc, #84]	; (a368 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    a312:	ldr	r5, [pc, #88]	; (a36c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    a314:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    a316:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    a318:	uxtb	r4, r4
	while (tail != rx_head) {
    a31a:	cmp	r4, r3
    a31c:	beq.n	a362 <usb_serial_flush_input+0x56>
    a31e:	ldr.w	r9, [pc, #84]	; a374 <usb_serial_flush_input+0x68>
    a322:	ldr.w	fp, [pc, #84]	; a378 <usb_serial_flush_input+0x6c>
    a326:	ldr.w	r8, [pc, #84]	; a37c <usb_serial_flush_input+0x70>
    a32a:	ldr	r7, [pc, #68]	; (a370 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    a32c:	adds	r4, #1
    a32e:	cmp	r4, #8
    a330:	uxtb.w	sl, r4
    a334:	bls.n	a33a <usb_serial_flush_input+0x2e>
    a336:	movs	r4, #0
    a338:	mov	sl, r4
		uint32_t i = rx_list[tail];
    a33a:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a33e:	ldr.w	r2, [fp]
    a342:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    a346:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    a348:	ldrh.w	r1, [r7, r1, lsl #1]
    a34c:	subs	r3, r3, r1
    a34e:	subs	r3, r2, r3
    a350:	str.w	r3, [fp]
		rx_queue_transfer(i);
    a354:	bl	9d90 <rx_queue_transfer>
		rx_tail = tail;
    a358:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    a35c:	ldrb	r3, [r5, #0]
    a35e:	cmp	r4, r3
    a360:	bne.n	a32c <usb_serial_flush_input+0x20>
    a362:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a366:	nop
    a368:	.word	0x20006ca0
    a36c:	.word	0x20006cc4
    a370:	.word	0x20006b84
    a374:	.word	0x20006ca4
    a378:	.word	0x20006cc0
    a37c:	.word	0x20006cb0

0000a380 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a380:	push	{lr}
    a382:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    a384:	movs	r1, #1
    a386:	add.w	r0, sp, #7
    a38a:	bl	a1d0 <usb_serial_read>
    a38e:	cbz	r0, a39a <usb_serial_getchar+0x1a>
    a390:	ldrb.w	r0, [sp, #7]
	return -1;
}
    a394:	add	sp, #12
    a396:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    a39a:	mov.w	r0, #4294967295
    a39e:	b.n	a394 <usb_serial_getchar+0x14>

0000a3a0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a3a0:	ldr	r3, [pc, #36]	; (a3c8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a3a2:	push	{lr}
    a3a4:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a3a6:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a3a8:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a3ac:	cbnz	r3, a3b8 <usb_serial_putchar+0x18>
    a3ae:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    a3b2:	add	sp, #12
    a3b4:	ldr.w	pc, [sp], #4
    a3b8:	movs	r1, #1
    a3ba:	add.w	r0, sp, #7
    a3be:	bl	9f48 <usb_serial_write.part.1>
    a3c2:	add	sp, #12
    a3c4:	ldr.w	pc, [sp], #4
    a3c8:	.word	0x20006d98

0000a3cc <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a3cc:	ldr	r3, [pc, #16]	; (a3e0 <usb_serial_write+0x14>)
    a3ce:	ldrb	r3, [r3, #0]
    a3d0:	and.w	r2, r3, #255	; 0xff
    a3d4:	cbz	r3, a3da <usb_serial_write+0xe>
    a3d6:	b.w	9f48 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a3da:	mov	r0, r2
    a3dc:	bx	lr
    a3de:	nop
    a3e0:	.word	0x20006d98

0000a3e4 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a3e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a3e8:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    a3ea:	ldr.w	r8, [pc, #64]	; a42c <usb_serial_write_buffer_free+0x48>
    a3ee:	movs	r3, #1
    a3f0:	ldr	r5, [pc, #48]	; (a424 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    a3f2:	mov	r7, r4
    a3f4:	ldr	r6, [pc, #48]	; (a428 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    a3f6:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a3fa:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a3fc:	mov	r0, r5
    a3fe:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a400:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a402:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a406:	beq.n	a414 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a408:	bl	adcc <usb_transfer_status>
    a40c:	lsls	r3, r0, #24
    a40e:	it	pl
    a410:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a414:	cmp	r4, #4
    a416:	bne.n	a3fa <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a418:	movs	r3, #0
	return sum;
}
    a41a:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a41c:	strb.w	r3, [r8]
	return sum;
}
    a420:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a424:	.word	0x20006ce0
    a428:	.word	0x20006b97
    a42c:	.word	0x20006b96

0000a430 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a430:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    a434:	ldr	r3, [pc, #124]	; (a4b4 <usb_serial_flush_output+0x84>)
    a436:	ldrb	r3, [r3, #0]
    a438:	cbz	r3, a440 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a43a:	ldr	r5, [pc, #124]	; (a4b8 <usb_serial_flush_output+0x88>)
    a43c:	ldrh	r2, [r5, #0]
    a43e:	cbnz	r2, a444 <usb_serial_flush_output+0x14>
    a440:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a444:	ldr.w	r8, [pc, #132]	; a4cc <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a448:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a44c:	ldr	r6, [pc, #108]	; (a4bc <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a44e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a452:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a456:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a458:	ldr	r4, [pc, #100]	; (a4c0 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a45a:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a45c:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a460:	ldr	r7, [pc, #96]	; (a4c4 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a462:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a466:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a468:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a46c:	mov	r1, r4
    a46e:	bl	ad50 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a472:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a476:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    a47a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a47e:	ldr	r3, [pc, #72]	; (a4c8 <usb_serial_flush_output+0x98>)
    a480:	str	r1, [r3, #0]
		location += 32;
    a482:	adds	r1, #32
	} while (location < end_addr);
    a484:	cmp	r2, r1
    a486:	bhi.n	a480 <usb_serial_flush_output+0x50>
	asm("dsb");
    a488:	dsb	sy
	asm("isb");
    a48c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a490:	movs	r0, #3
    a492:	mov	r1, r6
    a494:	bl	ad80 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a498:	ldrb.w	r3, [r8]
    a49c:	ldr	r2, [pc, #44]	; (a4cc <usb_serial_flush_output+0x9c>)
    a49e:	adds	r3, #1
    a4a0:	uxtb	r3, r3
    a4a2:	cmp	r3, #3
    a4a4:	it	hi
    a4a6:	movhi	r3, #0
    a4a8:	strb	r3, [r2, #0]
	tx_available = 0;
    a4aa:	movs	r3, #0
    a4ac:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    a4ae:	strb	r3, [r7, #0]
    a4b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a4b4:	.word	0x20006d98
    a4b8:	.word	0x20006cc6
    a4bc:	.word	0x20006ce0
    a4c0:	.word	0x20201000
    a4c4:	.word	0x20006b96
    a4c8:	.word	0xe000ef70
    a4cc:	.word	0x20006b97

0000a4d0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a4d0:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    a4d2:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a4d4:	cbz	r3, a4de <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a4d6:	ldr	r3, [r2, #4]
    a4d8:	orr.w	r3, r3, #32768	; 0x8000
    a4dc:	str	r3, [r2, #4]
	}
	__disable_irq();
    a4de:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a4e0:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a4e2:	cbz	r4, a51c <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a4e4:	ldr	r3, [pc, #80]	; (a538 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    a4e6:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a4e8:	ldr.w	r4, [r3, #432]	; 0x1b0
    a4ec:	tst	r4, r1
    a4ee:	bne.n	a530 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    a4f0:	ldr	r5, [pc, #72]	; (a53c <schedule_transfer+0x6c>)
    a4f2:	ldr	r7, [r5, #0]
    a4f4:	b.n	a500 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a4f6:	ldr	r4, [r5, #0]
    a4f8:	subs	r4, r4, r7
    a4fa:	cmp.w	r4, #2400	; 0x960
    a4fe:	bcs.n	a518 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a500:	ldr.w	r4, [r3, #320]	; 0x140
    a504:	orr.w	r4, r4, #16384	; 0x4000
    a508:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a50c:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a510:	ldr.w	r4, [r3, #320]	; 0x140
    a514:	lsls	r4, r4, #17
    a516:	bpl.n	a4f6 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a518:	tst	r1, r6
    a51a:	bne.n	a530 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    a51c:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    a51e:	ldr	r4, [pc, #24]	; (a538 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    a520:	str	r2, [r0, #8]
	endpoint->status = 0;
    a522:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    a524:	ldr.w	r3, [r4, #432]	; 0x1b0
    a528:	orrs	r1, r3
    a52a:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a52e:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    a530:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a532:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a534:	pop	{r4, r5, r6, r7}
    a536:	bx	lr
    a538:	.word	0x402e0000
    a53c:	.word	0xe0001004

0000a540 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a540:	push	{r4, r5, r6, lr}
    a542:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    a544:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    a546:	cbz	r0, a56e <run_callbacks+0x2e>
    a548:	mov	r2, r0
    a54a:	movs	r4, #0
    a54c:	b.n	a556 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    a54e:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    a550:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    a552:	cmp	r2, #1
    a554:	beq.n	a570 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    a556:	ldr	r3, [r2, #4]
    a558:	ands.w	r3, r3, #128	; 0x80
    a55c:	beq.n	a54e <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    a55e:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a560:	cbz	r4, a56e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    a562:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    a564:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    a566:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a568:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    a56a:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a56c:	bne.n	a562 <run_callbacks+0x22>
    a56e:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    a570:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    a572:	str	r3, [r6, #52]	; 0x34
			break;
    a574:	b.n	a560 <run_callbacks+0x20>
    a576:	nop

0000a578 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a578:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    a57a:	cbnz	r1, a5b6 <endpoint0_transmit.constprop.1+0x3e>
    a57c:	ldr	r4, [pc, #132]	; (a604 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a57e:	ldr	r1, [pc, #136]	; (a608 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a580:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a582:	ldr	r3, [pc, #136]	; (a60c <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a584:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a586:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a58a:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a58c:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    a58e:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    a590:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a592:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    a594:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a596:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a59a:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a59e:	ldr	r5, [pc, #112]	; (a610 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    a5a0:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a5a4:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    a5a6:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a5aa:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    a5ac:	ldr.w	r3, [r2, #432]	; 0x1b0
    a5b0:	cmp	r3, #0
    a5b2:	bne.n	a5ac <endpoint0_transmit.constprop.1+0x34>
}
    a5b4:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a5b6:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a5b8:	ldr	r3, [pc, #88]	; (a614 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5ba:	ldr	r5, [pc, #80]	; (a60c <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a5bc:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a5be:	ldr	r4, [pc, #68]	; (a604 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a5c0:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a5c4:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a5c6:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a5c8:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a5ca:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a5ce:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a5d0:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a5d4:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a5d6:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5da:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a5de:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    a5e2:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a5e4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5e6:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a5ea:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a5ee:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a5f2:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a5f4:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5f6:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a5fa:	ldr.w	r3, [r2, #432]	; 0x1b0
    a5fe:	cmp	r3, #0
    a600:	bne.n	a5fa <endpoint0_transmit.constprop.1+0x82>
    a602:	b.n	a57e <endpoint0_transmit.constprop.1+0x6>
    a604:	.word	0x20008000
    a608:	.word	0x20007020
    a60c:	.word	0x402e0000
    a610:	.word	0x20006d74
    a614:	.word	0x20007000

0000a618 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    a618:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a61c:	ldr	r4, [pc, #696]	; (a8d8 <isr+0x2c0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    a61e:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a620:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a624:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    a628:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a62c:	beq.n	a6ec <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a62e:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a632:	cmp	r3, #0
    a634:	beq.n	a6e2 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a636:	mov.w	fp, #65537	; 0x10001
    a63a:	ldr.w	r9, [pc, #708]	; a900 <isr+0x2e8>
    a63e:	ldr	r6, [pc, #668]	; (a8dc <isr+0x2c4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a640:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a642:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    a644:	str.w	r3, [r4, #428]	; 0x1ac
    a648:	ldr	r0, [r6, #40]	; 0x28
    a64a:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a64c:	ldr.w	r3, [r4, #320]	; 0x140
    a650:	orr.w	r3, r3, #8192	; 0x2000
    a654:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a658:	ldr.w	r3, [r4, #320]	; 0x140
    a65c:	lsls	r7, r3, #18
    a65e:	bpl.n	a64c <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a660:	ldr.w	r3, [r5, #320]	; 0x140
    a664:	bic.w	r3, r3, #8192	; 0x2000
    a668:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a66c:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a670:	ldr.w	r3, [r4, #436]	; 0x1b4
    a674:	ands.w	r3, r3, #65537	; 0x10001
    a678:	bne.n	a670 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a67a:	uxth	r1, r0
    a67c:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    a680:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a684:	cmp	r1, r7
    a686:	bhi.w	a7f2 <isr+0x1da>
    a68a:	cmp.w	r1, #1664	; 0x680
    a68e:	bcs.w	aa64 <isr+0x44c>
    a692:	cmp.w	r1, #258	; 0x102
    a696:	beq.w	a970 <isr+0x358>
    a69a:	bhi.w	a886 <isr+0x26e>
    a69e:	cmp	r1, #128	; 0x80
    a6a0:	beq.w	a956 <isr+0x33e>
    a6a4:	cmp	r1, #130	; 0x82
    a6a6:	bne.w	a876 <isr+0x25e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a6aa:	uxth	r2, r2
    a6ac:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a6b0:	cmp	r1, #7
    a6b2:	bhi.w	a876 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a6b6:	lsls	r1, r1, #2
    a6b8:	ldr	r0, [pc, #548]	; (a8e0 <isr+0x2c8>)
		reply_buffer[0] = 0;
    a6ba:	ldr	r7, [pc, #552]	; (a8e4 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a6bc:	add	r0, r1
    a6be:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a6c0:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    a6c2:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    a6c4:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a6c6:	bpl.w	aae2 <isr+0x4ca>
    a6ca:	lsls	r2, r1, #15
    a6cc:	bpl.n	a6d2 <isr+0xba>
			reply_buffer[0] = 1;
    a6ce:	movs	r3, #1
    a6d0:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    a6d2:	movs	r1, #2
    a6d4:	ldr	r0, [pc, #524]	; (a8e4 <isr+0x2cc>)
    a6d6:	bl	a578 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a6da:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a6de:	cmp	r3, #0
    a6e0:	bne.n	a644 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a6e2:	ldr	r2, [pc, #500]	; (a8d8 <isr+0x2c0>)
    a6e4:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a6e8:	cmp	r3, #0
    a6ea:	bne.n	a78e <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    a6ec:	tst.w	r8, #64	; 0x40
    a6f0:	beq.n	a724 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a6f2:	ldr	r3, [pc, #484]	; (a8d8 <isr+0x2c0>)
    a6f4:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a6f8:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a6fa:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a6fe:	ldr.w	r1, [r3, #444]	; 0x1bc
    a702:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a706:	ldr.w	r4, [r2, #432]	; 0x1b0
    a70a:	ldr	r3, [pc, #460]	; (a8d8 <isr+0x2c0>)
    a70c:	cmp	r4, #0
    a70e:	bne.n	a706 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a710:	mov.w	r2, #4294967295
    a714:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a718:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    a71c:	bl	a0c4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    a720:	ldr	r3, [pc, #452]	; (a8e8 <isr+0x2d0>)
    a722:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    a724:	tst.w	r8, #16777216	; 0x1000000
    a728:	beq.n	a732 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a72a:	ldr	r3, [pc, #448]	; (a8ec <isr+0x2d4>)
    a72c:	ldr	r3, [r3, #0]
    a72e:	cbz	r3, a732 <isr+0x11a>
    a730:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    a732:	tst.w	r8, #33554432	; 0x2000000
    a736:	beq.n	a740 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a738:	ldr	r3, [pc, #436]	; (a8f0 <isr+0x2d8>)
    a73a:	ldr	r3, [r3, #0]
    a73c:	cbz	r3, a740 <isr+0x128>
    a73e:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    a740:	tst.w	r8, #4
    a744:	beq.n	a758 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a746:	ldr	r3, [pc, #400]	; (a8d8 <isr+0x2c0>)
    a748:	ldr.w	r3, [r3, #388]	; 0x184
    a74c:	ands.w	r3, r3, #512	; 0x200
    a750:	beq.n	a7ec <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    a752:	ldr	r3, [pc, #416]	; (a8f4 <isr+0x2dc>)
    a754:	movs	r2, #1
    a756:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a758:	ldr	r3, [pc, #380]	; (a8d8 <isr+0x2c0>)
    a75a:	ldr.w	r2, [r3, #328]	; 0x148
    a75e:	lsls	r2, r2, #24
    a760:	bpl.n	a788 <isr+0x170>
    a762:	tst.w	r8, #128	; 0x80
    a766:	beq.n	a788 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    a768:	ldr	r1, [pc, #396]	; (a8f8 <isr+0x2e0>)
    a76a:	ldrb	r2, [r1, #0]
    a76c:	cbz	r2, a788 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    a76e:	subs	r2, #1
    a770:	uxtb	r2, r2
    a772:	strb	r2, [r1, #0]
    a774:	cbnz	r2, a788 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    a776:	ldr	r1, [pc, #388]	; (a8fc <isr+0x2e4>)
    a778:	ldrb	r2, [r1, #0]
    a77a:	and.w	r2, r2, #247	; 0xf7
    a77e:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    a780:	cmp	r2, #0
    a782:	beq.w	abea <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    a786:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    a788:	add	sp, #12
    a78a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a78e:	ldr	r1, [pc, #368]	; (a900 <isr+0x2e8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    a790:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a794:	ldr	r0, [r1, #0]
    a796:	tst	r3, r0
    a798:	bne.w	ab68 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    a79c:	ldr	r2, [pc, #328]	; (a8e8 <isr+0x2d0>)
    a79e:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    a7a0:	ands	r5, r3
    a7a2:	beq.n	a6ec <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    a7a4:	lsrs	r7, r5, #16
    a7a6:	beq.n	a7c8 <isr+0x1b0>
    a7a8:	ldr	r6, [pc, #304]	; (a8dc <isr+0x2c4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    a7aa:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    a7ae:	rbit	r4, r7
    a7b2:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a7b6:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    a7ba:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a7be:	adds	r0, #64	; 0x40
    a7c0:	bl	a540 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    a7c4:	bics	r7, r4
    a7c6:	bne.n	a7ae <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    a7c8:	uxth	r5, r5
				while(rx) {
    a7ca:	cmp	r5, #0
    a7cc:	beq.n	a6ec <isr+0xd4>
    a7ce:	ldr	r6, [pc, #268]	; (a8dc <isr+0x2c4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    a7d0:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    a7d2:	rbit	r4, r5
    a7d6:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    a7da:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    a7de:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    a7e2:	bl	a540 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    a7e6:	bics	r5, r4
    a7e8:	bne.n	a7d2 <isr+0x1ba>
    a7ea:	b.n	a6ec <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    a7ec:	ldr	r2, [pc, #260]	; (a8f4 <isr+0x2dc>)
    a7ee:	strb	r3, [r2, #0]
    a7f0:	b.n	a758 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a7f2:	movw	r7, #8225	; 0x2021
    a7f6:	cmp	r1, r7
    a7f8:	beq.n	a86e <isr+0x256>
    a7fa:	bhi.w	a910 <isr+0x2f8>
    a7fe:	cmp.w	r1, #2176	; 0x880
    a802:	beq.w	aa48 <isr+0x430>
    a806:	cmp.w	r1, #2304	; 0x900
    a80a:	bne.n	a876 <isr+0x25e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a80c:	ubfx	r0, r0, #16, #8
    a810:	ldr	r1, [pc, #240]	; (a904 <isr+0x2ec>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a812:	mov.w	r2, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a816:	ldr	r7, [pc, #240]	; (a908 <isr+0x2f0>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a818:	strb	r0, [r1, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    a81a:	mov.w	r1, #13369548	; 0xcc00cc
    a81e:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a820:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a824:	str.w	r2, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a828:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    a82c:	str.w	r1, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    a830:	bl	a0c8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a834:	ldr	r2, [pc, #212]	; (a90c <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a836:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a838:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a83a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a83c:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a83e:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a840:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a842:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a844:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a848:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a84c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a84e:	orr.w	r2, r1, #65536	; 0x10000
    a852:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a856:	ldr	r2, [pc, #168]	; (a900 <isr+0x2e8>)
    a858:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a85a:	ldr.w	r3, [r4, #432]	; 0x1b0
    a85e:	cmp	r3, #0
    a860:	bne.n	a85a <isr+0x242>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a862:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a866:	cmp	r3, #0
    a868:	bne.w	a644 <isr+0x2c>
    a86c:	b.n	a6e2 <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    a86e:	lsrs	r1, r2, #16
    a870:	cmp	r1, #7
    a872:	beq.w	aaea <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a876:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a87a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a87e:	cmp	r3, #0
    a880:	bne.w	a644 <isr+0x2c>
    a884:	b.n	a6e2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a886:	movw	r7, #770	; 0x302
    a88a:	cmp	r1, r7
    a88c:	beq.w	a9e8 <isr+0x3d0>
    a890:	cmp.w	r1, #1280	; 0x500
    a894:	bne.n	a876 <isr+0x25e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a896:	ldr	r2, [pc, #116]	; (a90c <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a898:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a89a:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a89c:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a89e:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a8a0:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8a2:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8a4:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a8a8:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a8ac:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a8ae:	orr.w	r3, r1, #65536	; 0x10000
    a8b2:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a8b6:	ldr.w	r3, [r4, #432]	; 0x1b0
    a8ba:	cmp	r3, #0
    a8bc:	bne.n	a8b6 <isr+0x29e>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a8be:	lsrs	r3, r0, #16
    a8c0:	lsls	r3, r3, #25
    a8c2:	orr.w	r3, r3, #16777216	; 0x1000000
    a8c6:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a8ca:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a8ce:	cmp	r3, #0
    a8d0:	bne.w	a644 <isr+0x2c>
    a8d4:	b.n	a6e2 <isr+0xca>
    a8d6:	nop
    a8d8:	.word	0x402e0000
    a8dc:	.word	0x20008000
    a8e0:	.word	0x402e01c0
    a8e4:	.word	0x20006d88
    a8e8:	.word	0x20006d64
    a8ec:	.word	0x20006d60
    a8f0:	.word	0x20006d6c
    a8f4:	.word	0x20006d70
    a8f8:	.word	0x20006d78
    a8fc:	.word	0x20006d68
    a900:	.word	0x20006d74
    a904:	.word	0x20006d98
    a908:	.word	0x00cc0002
    a90c:	.word	0x20007020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a910:	movw	r3, #8737	; 0x2221
    a914:	cmp	r1, r3
    a916:	beq.n	a9d0 <isr+0x3b8>
    a918:	movw	r3, #8993	; 0x2321
    a91c:	cmp	r1, r3
    a91e:	bne.n	a876 <isr+0x25e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a920:	ldr	r3, [pc, #724]	; (abf8 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a922:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    a924:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a926:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a928:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a92a:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a92c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a92e:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a930:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a934:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a938:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a93a:	orr.w	r3, r2, #65536	; 0x10000
    a93e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a942:	ldr.w	r3, [r4, #432]	; 0x1b0
    a946:	cmp	r3, #0
    a948:	bne.n	a942 <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a94a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a94e:	cmp	r3, #0
    a950:	bne.w	a644 <isr+0x2c>
    a954:	b.n	a6e2 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a956:	ldr	r2, [pc, #676]	; (abfc <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    a958:	movs	r1, #2
    a95a:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a95c:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    a95e:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    a960:	bl	a578 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a964:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a968:	cmp	r3, #0
    a96a:	bne.w	a644 <isr+0x2c>
    a96e:	b.n	a6e2 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a970:	uxth	r2, r2
    a972:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a976:	cmp	r3, #7
    a978:	bhi.w	a876 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a97c:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a980:	mov.w	r3, r3, lsl #2
    a984:	ldr	r2, [pc, #632]	; (ac00 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a986:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a98a:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a98e:	add	r2, r3
    a990:	ldr	r3, [r2, #0]
    a992:	ite	ne
    a994:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a998:	biceq.w	r3, r3, #1
    a99c:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a99e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9a0:	ldr	r3, [pc, #596]	; (abf8 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a9a2:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a9a4:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9a6:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a9a8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a9aa:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a9ae:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a9b2:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a9b4:	orr.w	r3, r2, #65536	; 0x10000
    a9b8:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a9bc:	ldr.w	r3, [r4, #432]	; 0x1b0
    a9c0:	cmp	r3, #0
    a9c2:	bne.n	a9bc <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a9c4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a9c8:	cmp	r3, #0
    a9ca:	bne.w	a644 <isr+0x2c>
    a9ce:	b.n	a6e2 <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    a9d0:	uxth	r2, r2
    a9d2:	cmp	r2, #1
    a9d4:	bne.n	a920 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a9d6:	ldr	r3, [pc, #556]	; (ac04 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a9d8:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a9dc:	ldr	r2, [pc, #552]	; (ac08 <isr+0x5f0>)
    a9de:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a9e0:	ldr	r3, [pc, #552]	; (ac0c <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a9e2:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a9e4:	strb	r0, [r3, #0]
    a9e6:	b.n	a920 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a9e8:	uxth	r2, r2
    a9ea:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a9ee:	cmp	r3, #7
    a9f0:	bhi.w	a876 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a9f4:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a9f8:	mov.w	r3, r3, lsl #2
    a9fc:	ldr	r2, [pc, #512]	; (ac00 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a9fe:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa02:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aa06:	add	r2, r3
    aa08:	ldr	r3, [r2, #0]
    aa0a:	ite	ne
    aa0c:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    aa10:	orreq.w	r3, r3, #1
    aa14:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa16:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa18:	ldr	r3, [pc, #476]	; (abf8 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aa1a:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa1c:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa1e:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa20:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa22:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aa26:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aa2a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    aa2c:	orr.w	r3, r2, #65536	; 0x10000
    aa30:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    aa34:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa38:	cmp	r3, #0
    aa3a:	bne.n	aa34 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aa3c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aa40:	cmp	r3, #0
    aa42:	bne.w	a644 <isr+0x2c>
    aa46:	b.n	a6e2 <isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    aa48:	ldr	r2, [pc, #452]	; (ac10 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    aa4a:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    aa4c:	ldr	r3, [pc, #428]	; (abfc <isr+0x5e4>)
    aa4e:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    aa50:	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    aa52:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    aa54:	bl	a578 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aa58:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aa5c:	cmp	r3, #0
    aa5e:	bne.w	a644 <isr+0x2c>
    aa62:	b.n	a6e2 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    aa64:	ldr	r3, [pc, #428]	; (ac14 <isr+0x5fc>)
    aa66:	ldr	r1, [r3, #4]
    aa68:	cmp	r1, #0
    aa6a:	beq.w	a876 <isr+0x25e>
    aa6e:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    aa70:	uxth.w	lr, r2
    aa74:	b.n	aa80 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    aa76:	adds	r3, #12
    aa78:	ldr	r1, [r3, #4]
    aa7a:	cmp	r1, #0
    aa7c:	beq.w	a876 <isr+0x25e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    aa80:	ldrh	r7, [r3, #0]
    aa82:	cmp	r7, r0
    aa84:	bne.n	aa76 <isr+0x45e>
    aa86:	ldrh	r7, [r3, #2]
    aa88:	cmp	r7, lr
    aa8a:	bne.n	aa76 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    aa8c:	lsrs	r7, r0, #8
    aa8e:	cmp	r7, #3
    aa90:	beq.w	ac66 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    aa94:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    aa96:	lsrs	r2, r2, #16
    aa98:	cmp	r3, r2
    aa9a:	it	cs
    aa9c:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    aa9e:	cmp.w	r0, #512	; 0x200
    aaa2:	beq.w	ac48 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    aaa6:	cmp.w	r0, #1792	; 0x700
    aaaa:	beq.w	abc4 <isr+0x5ac>
    aaae:	ldr	r7, [pc, #360]	; (ac18 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    aab0:	mov	r2, r3
    aab2:	str	r3, [sp, #4]
    aab4:	mov	r0, r7
    aab6:	bl	9c5c <memcpy>
    aaba:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    aabc:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    aac0:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    aac2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    aac6:	ldr	r1, [pc, #340]	; (ac1c <isr+0x604>)
    aac8:	str	r2, [r1, #0]
		location += 32;
    aaca:	adds	r2, #32
	} while (location < end_addr);
    aacc:	cmp	r7, r2
    aace:	bhi.n	aac6 <isr+0x4ae>
	asm("dsb");
    aad0:	dsb	sy
	asm("isb");
    aad4:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    aad8:	ldr	r0, [pc, #316]	; (ac18 <isr+0x600>)
    aada:	mov	r1, r3
    aadc:	bl	a578 <endpoint0_transmit.constprop.1>
    aae0:	b.n	a6da <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    aae2:	lsls	r3, r1, #31
    aae4:	bpl.w	a6d2 <isr+0xba>
    aae8:	b.n	a6ce <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    aaea:	ldr	r7, [pc, #308]	; (ac20 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aaec:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    aaf0:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aaf2:	ldr	r1, [pc, #304]	; (ac24 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aaf4:	ldr	r3, [pc, #304]	; (ac28 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    aaf6:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aaf8:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aafc:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    aafe:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    ab00:	ldr	r1, [pc, #296]	; (ac2c <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ab02:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ab06:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ab08:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ab0c:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ab10:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ab12:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ab16:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ab1a:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ab1e:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ab22:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ab24:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ab28:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ab2a:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    ab2c:	ldr.w	r3, [r4, #432]	; 0x1b0
    ab30:	cmp	r3, #0
    ab32:	bne.n	ab2c <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    ab34:	ldr	r2, [pc, #192]	; (abf8 <isr+0x5e0>)
    ab36:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ab38:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ab3c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ab3e:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ab40:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ab44:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ab46:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ab48:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ab4c:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    ab50:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    ab52:	orr.w	r3, r1, r0
    ab56:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ab5a:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    ab5e:	ldr.w	r3, [r4, #432]	; 0x1b0
    ab62:	cmp	r3, #0
    ab64:	bne.n	ab5e <isr+0x546>
    ab66:	b.n	a6da <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ab68:	ldr	r0, [pc, #180]	; (ac20 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab6a:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ab6e:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab70:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ab72:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab74:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ab76:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab78:	bne.w	a79c <isr+0x184>
    ab7c:	uxth	r1, r0
    ab7e:	cmp	r1, #1
    ab80:	bne.w	a79c <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ab84:	ldr	r1, [pc, #164]	; (ac2c <isr+0x614>)
    ab86:	ldr	r4, [pc, #168]	; (ac30 <isr+0x618>)
    ab88:	ldmia	r1, {r0, r1}
    ab8a:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ab8c:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ab8e:	str	r0, [r4, #0]
    ab90:	strh	r1, [r4, #4]
    ab92:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ab94:	bne.w	a79c <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    ab98:	cpsid	i
	sof_usage |= (1 << interface);
    ab9a:	ldr	r0, [pc, #152]	; (ac34 <isr+0x61c>)
    ab9c:	ldrb	r1, [r0, #0]
    ab9e:	orr.w	r1, r1, #8
    aba2:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    aba4:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    aba8:	lsls	r0, r1, #24
    abaa:	bmi.n	abba <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    abac:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    abb0:	movs	r0, #128	; 0x80
    abb2:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    abb6:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    abba:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    abbc:	ldr	r2, [pc, #120]	; (ac38 <isr+0x620>)
    abbe:	movs	r1, #80	; 0x50
    abc0:	strb	r1, [r2, #0]
    abc2:	b.n	a79c <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    abc4:	ldr	r0, [pc, #116]	; (ac3c <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    abc6:	mov	r2, r3
    abc8:	ldr	r7, [pc, #76]	; (ac18 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    abca:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    abce:	ldr	r1, [pc, #112]	; (ac40 <isr+0x628>)
    abd0:	ldr	r0, [pc, #112]	; (ac44 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    abd2:	str	r3, [sp, #4]
    abd4:	cmp.w	lr, #0
    abd8:	it	eq
    abda:	moveq	r1, r0
    abdc:	mov	r0, r7
    abde:	bl	9c5c <memcpy>
					usb_descriptor_buffer[1] = 7;
    abe2:	movs	r2, #7
    abe4:	ldr	r3, [sp, #4]
    abe6:	strb	r2, [r7, #1]
    abe8:	b.n	aabc <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    abea:	ldr.w	r2, [r3, #328]	; 0x148
    abee:	bic.w	r2, r2, #128	; 0x80
    abf2:	str.w	r2, [r3, #328]	; 0x148
    abf6:	b.n	a786 <isr+0x16e>
    abf8:	.word	0x20007020
    abfc:	.word	0x20006d88
    ac00:	.word	0x402e01c0
    ac04:	.word	0x20006da4
    ac08:	.word	0x20006e34
    ac0c:	.word	0x20006cc8
    ac10:	.word	0x20006d98
    ac14:	.word	0x20000870
    ac18:	.word	0x20203000
    ac1c:	.word	0xe000ef70
    ac20:	.word	0x20006d80
    ac24:	.word	0x00070080
    ac28:	.word	0x20007000
    ac2c:	.word	0x20006d90
    ac30:	.word	0x20006e2c
    ac34:	.word	0x20006d68
    ac38:	.word	0x20006d78
    ac3c:	.word	0x20006d70
    ac40:	.word	0x60001a68
    ac44:	.word	0x60001ad4

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    ac48:	ldr	r0, [pc, #40]	; (ac74 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ac4a:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    ac4c:	ldr	r1, [pc, #40]	; (ac78 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    ac4e:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    ac50:	ldr	r0, [pc, #40]	; (ac7c <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    ac52:	str	r3, [sp, #4]
    ac54:	cmp	r7, #0
    ac56:	it	eq
    ac58:	moveq	r1, r0
    ac5a:	ldr	r0, [pc, #36]	; (ac80 <isr+0x668>)
    ac5c:	bl	9c5c <memcpy>
    ac60:	ldr	r7, [pc, #28]	; (ac80 <isr+0x668>)
    ac62:	ldr	r3, [sp, #4]
    ac64:	b.n	aabc <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    ac66:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    ac68:	ldrb	r3, [r1, #0]
    ac6a:	cmp	r3, r2
    ac6c:	it	cs
    ac6e:	movcs	r3, r2
    ac70:	b.n	aaa6 <isr+0x48e>
    ac72:	nop
    ac74:	.word	0x20006d70
    ac78:	.word	0x60001ad4
    ac7c:	.word	0x60001a68
    ac80:	.word	0x20203000

0000ac84 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ac84:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ac86:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ac8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ac8e:	ite	ne
    ac90:	movne	r7, #0
    ac92:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ac96:	cmp	r2, #3
    ac98:	bls.n	ac9e <usb_config_rx+0x1a>
    ac9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ac9e:	mov.w	sl, r0, lsl #7
    aca2:	ldr.w	r9, [pc, #64]	; ace4 <usb_config_rx+0x60>
    aca6:	mov	r5, r1
    aca8:	mov	r4, r0
    acaa:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    acae:	movs	r1, #0
    acb0:	movs	r2, #64	; 0x40
    acb2:	mov	r8, r3
    acb4:	mov	r0, r6
    acb6:	bl	cf4c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    acba:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    acbc:	orr.w	r1, r7, r5, lsl #16
    acc0:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    acc4:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    acc8:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    acca:	cmp.w	r8, #0
    acce:	beq.n	ac9a <usb_config_rx+0x16>
    acd0:	ldr	r3, [pc, #12]	; (ace0 <usb_config_rx+0x5c>)
    acd2:	lsls	r0, r4
    acd4:	ldr	r4, [r3, #0]
    acd6:	orrs	r0, r4
    acd8:	str	r0, [r3, #0]
    acda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    acde:	nop
    ace0:	.word	0x20006d64
    ace4:	.word	0x20008000

0000ace8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ace8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    acea:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    acee:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acf2:	ite	ne
    acf4:	movne	r7, #0
    acf6:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    acfa:	cmp	r2, #3
    acfc:	bls.n	ad02 <usb_config_tx+0x1a>
    acfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad02:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ad04:	lsls	r5, r0, #7
    ad06:	ldr.w	r9, [pc, #68]	; ad4c <usb_config_tx+0x64>
    ad0a:	mov	r8, r1
    ad0c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad0e:	movs	r1, #0
    ad10:	mov	r4, r0
    ad12:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ad14:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad18:	mov	r0, sl
    ad1a:	bl	cf4c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ad1e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ad20:	orr.w	r1, r7, r8, lsl #16
    ad24:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ad28:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ad2c:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ad30:	cmp	r6, #0
    ad32:	beq.n	acfe <usb_config_tx+0x16>
    ad34:	add.w	r0, r4, #16
    ad38:	ldr	r3, [pc, #12]	; (ad48 <usb_config_tx+0x60>)
    ad3a:	lsls	r2, r0
    ad3c:	ldr	r0, [r3, #0]
    ad3e:	orrs	r2, r0
    ad40:	str	r2, [r3, #0]
    ad42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad46:	nop
    ad48:	.word	0x20006d64
    ad4c:	.word	0x20008000

0000ad50 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad50:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    ad52:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    ad54:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad56:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    ad5a:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad5c:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ad5e:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ad60:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    ad64:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    ad68:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    ad6c:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ad70:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ad72:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    ad74:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    ad76:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    ad78:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    ad7a:	pop	{r4, r5, r6, r7}
    ad7c:	bx	lr
    ad7e:	nop

0000ad80 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ad80:	subs	r3, r0, #2
    ad82:	cmp	r3, #3
    ad84:	bls.n	ad88 <usb_transmit+0x8>
    ad86:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    ad88:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ad8a:	ldr	r3, [pc, #24]	; (ada4 <usb_transmit+0x24>)
    ad8c:	add.w	r4, r0, #16
    ad90:	movs	r5, #1
    ad92:	mov	r2, r1
    ad94:	add.w	r0, r3, r0, lsl #7
    ad98:	lsl.w	r1, r5, r4
}
    ad9c:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ad9e:	b.w	a4d0 <schedule_transfer>
    ada2:	nop
    ada4:	.word	0x20008040

0000ada8 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ada8:	subs	r3, r0, #2
    adaa:	cmp	r3, #3
    adac:	bls.n	adb0 <usb_receive+0x8>
    adae:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    adb0:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    adb2:	ldr	r3, [pc, #20]	; (adc8 <usb_receive+0x20>)
    adb4:	movs	r4, #1
    adb6:	mov	r2, r1
    adb8:	lsl.w	r1, r4, r0
    adbc:	add.w	r0, r3, r0, lsl #7
}
    adc0:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    adc4:	b.w	a4d0 <schedule_transfer>
    adc8:	.word	0x20008000

0000adcc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    adcc:	ldr	r0, [r0, #4]
#endif
}
    adce:	bx	lr

0000add0 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    add0:	cmp	r0, #0
    add2:	beq.n	ae84 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    add4:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    add6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adda:	sub	sp, #20
    addc:	mov	fp, r0
    adde:	ldr	r4, [pc, #168]	; (ae88 <delay+0xb8>)
    ade0:	ldr	r5, [pc, #168]	; (ae8c <delay+0xbc>)
    ade2:	ldr	r6, [pc, #172]	; (ae90 <delay+0xc0>)
    ade4:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ade8:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    adec:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    adee:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    adf0:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    adf4:	cmp	r1, #0
    adf6:	bne.n	ade8 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    adf8:	ldr	r7, [pc, #152]	; (ae94 <delay+0xc4>)
    adfa:	strd	r8, r9, [sp, #8]
    adfe:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    ae00:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae02:	ldr	r2, [pc, #148]	; (ae98 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    ae04:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ae08:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae0a:	ldr	r2, [r2, #0]
    ae0c:	movs	r7, #1
    ae0e:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    ae12:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae16:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    ae18:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae1a:	cmp	r3, r1
    ae1c:	it	eq
    ae1e:	cmpeq	r2, r8
    ae20:	ite	cs
    ae22:	movcs	sl, r8
    ae24:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    ae26:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ae2a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ae2e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    ae30:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ae32:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    ae36:	cmp	r3, #0
    ae38:	bne.n	ae2a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ae3a:	ldr	r0, [sp, #4]
    ae3c:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    ae3e:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae40:	ldr	r0, [pc, #84]	; (ae98 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae42:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae46:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae48:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae4c:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    ae50:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae54:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae58:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    ae5a:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae5c:	cmp	r1, r3
    ae5e:	it	eq
    ae60:	cmpeq	r0, r8
    ae62:	ite	cs
    ae64:	movcs	r3, r8
    ae66:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae68:	add	r2, r3
    ae6a:	cmp	r2, lr
    ae6c:	bcc.n	ae7e <delay+0xae>
			if (--msec == 0) return;
    ae6e:	subs.w	fp, fp, #1
			start += 1000;
    ae72:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    ae76:	bne.n	ae2a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    ae78:	add	sp, #20
    ae7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    ae7e:	bl	b4cc <yield>
	}
    ae82:	b.n	ae2a <delay+0x5a>
    ae84:	bx	lr
    ae86:	nop
    ae88:	.word	0x20008300
    ae8c:	.word	0x20006da4
    ae90:	.word	0x20006d9c
    ae94:	.word	0xe0001004
    ae98:	.word	0x20006da0

0000ae9c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    ae9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    aea0:	ldr	r2, [pc, #72]	; (aeec <micros+0x50>)
    aea2:	movs	r6, #1
    aea4:	ldr	r5, [pc, #72]	; (aef0 <micros+0x54>)
    aea6:	ldr	r4, [pc, #76]	; (aef4 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    aea8:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    aeac:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    aeae:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    aeb0:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    aeb4:	cmp	r3, #0
    aeb6:	bne.n	aea8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    aeb8:	ldr	r2, [pc, #60]	; (aef8 <micros+0x5c>)
    aeba:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aebc:	ldr	r7, [pc, #60]	; (aefc <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    aebe:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    aec0:	mov.w	r9, #0
    aec4:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aec8:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    aeca:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aece:	cmp	r9, r3
    aed0:	umull	r6, r7, r2, r6
    aed4:	it	eq
    aed6:	cmpeq	r8, r7
    aed8:	mov	r4, r7
    aeda:	ite	cs
    aedc:	movcs	r4, r7
    aede:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    aee0:	mla	r0, r0, r1, r4
    aee4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    aee8:	bx	lr
    aeea:	nop
    aeec:	.word	0x20008300
    aef0:	.word	0x20006da4
    aef4:	.word	0x20006d9c
    aef8:	.word	0xe0001004
    aefc:	.word	0x20006da0

0000af00 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    af00:	movs	r0, #4
    af02:	mov	r1, lr
    af04:	tst	r0, r1
    af06:	beq.n	af10 <_MSP>
    af08:	mrs	r0, PSP
    af0c:	b.w	af20 <HardFault_HandlerC>

0000af10 <_MSP>:
    af10:	mrs	r0, MSP
    af14:	b.w	af20 <HardFault_HandlerC>

0000af18 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    af18:	bx	lr
    af1a:	nop

0000af1c <startup_default_late_hook>:
#endif

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    af1c:	bx	lr
    af1e:	nop

0000af20 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    af20:	ldr	r3, [pc, #108]	; (af90 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    af22:	movs	r1, #5
    af24:	ldr	r2, [pc, #108]	; (af94 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    af26:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    af28:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    af2a:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    af2e:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    af30:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    af34:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    af36:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    af38:	ldr	r4, [pc, #92]	; (af98 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    af3a:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    af3c:	ldr	r0, [pc, #92]	; (af9c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    af3e:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    af40:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    af44:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    af48:	ldr	r3, [r4, #0]
    af4a:	cmp	r3, r0
    af4c:	bls.n	af54 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    af4e:	ldr	r0, [pc, #80]	; (afa0 <HardFault_HandlerC+0x80>)
    af50:	bl	b7fc <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    af54:	ldr	r5, [pc, #56]	; (af90 <HardFault_HandlerC+0x70>)
    af56:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    af58:	movs	r0, #0
    af5a:	ldr	r2, [pc, #72]	; (afa4 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    af5c:	ldr	r1, [pc, #72]	; (afa8 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    af5e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    af62:	str	r0, [sp, #4]
    af64:	ldr	r3, [sp, #4]
    af66:	cmp	r3, r2
    af68:	bhi.n	af76 <HardFault_HandlerC+0x56>
    af6a:	ldr	r3, [sp, #4]
    af6c:	adds	r3, #1
    af6e:	str	r3, [sp, #4]
    af70:	ldr	r3, [sp, #4]
    af72:	cmp	r3, r2
    af74:	bls.n	af6a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    af76:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    af7a:	str	r0, [sp, #4]
    af7c:	ldr	r3, [sp, #4]
    af7e:	cmp	r3, r1
    af80:	bhi.n	af5e <HardFault_HandlerC+0x3e>
    af82:	ldr	r3, [sp, #4]
    af84:	adds	r3, #1
    af86:	str	r3, [sp, #4]
    af88:	ldr	r3, [sp, #4]
    af8a:	cmp	r3, r1
    af8c:	bls.n	af82 <HardFault_HandlerC+0x62>
    af8e:	b.n	af5e <HardFault_HandlerC+0x3e>
    af90:	.word	0x401bc000
    af94:	.word	0x401f8000
    af98:	.word	0x20000c5c
    af9c:	.word	0x23c345ff
    afa0:	.word	0x11e1a300
    afa4:	.word	0x000f423f
    afa8:	.word	0x0089543f

0000afac <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    afac:	ldr	r2, [pc, #36]	; (afd4 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    afae:	push	{r3, lr}
        char *prev = __brkval;
    afb0:	ldr	r3, [r2, #0]
        if (incr != 0) {
    afb2:	cbz	r0, afbe <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    afb4:	add	r0, r3
    afb6:	ldr	r1, [pc, #32]	; (afd8 <_sbrk+0x2c>)
    afb8:	cmp	r0, r1
    afba:	bhi.n	afc2 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    afbc:	str	r0, [r2, #0]
        }
        return prev;
}
    afbe:	mov	r0, r3
    afc0:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    afc2:	bl	c760 <__errno>
    afc6:	movs	r2, #12
                        return (void *)-1;
    afc8:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    afcc:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    afce:	mov	r0, r3
    afd0:	pop	{r3, pc}
    afd2:	nop
    afd4:	.word	0x20000c18
    afd8:	.word	0x20280000

0000afdc <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    afdc:	wfi
    afde:	b.n	afdc <__cxa_pure_virtual>

0000afe0 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    afe0:	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    afe2:	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    afe4:	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    afe6:	cbz	r3, b018 <sm_align_pool+0x38>
    afe8:	cbz	r2, b00a <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    afea:	ldr	r3, [pc, #64]	; (b02c <sm_align_pool+0x4c>)
    afec:	umull	r1, r3, r3, r2
    aff0:	lsrs	r3, r3, #3
    aff2:	add.w	r3, r3, r3, lsl #1
    aff6:	subs.w	r3, r2, r3, lsl #2
    affa:	beq.n	b004 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    affc:	subs	r2, r2, r3
    affe:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    b000:	cmp	r2, #240	; 0xf0
    b002:	bls.n	b00a <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    b004:	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    b006:	mov	r0, r3
    b008:	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    b00a:	bl	c760 <__errno>
    b00e:	movs	r2, #28
    b010:	movs	r3, #0
    b012:	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    b014:	mov	r0, r3
    b016:	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    b018:	ldr	r3, [pc, #16]	; (b02c <sm_align_pool+0x4c>)
    b01a:	umull	r1, r3, r3, r2
    b01e:	lsrs	r3, r3, #3
    b020:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    b024:	subs.w	r3, r2, r3, lsl #2
    b028:	bne.n	affc <sm_align_pool+0x1c>
    b02a:	b.n	b000 <sm_align_pool+0x20>
    b02c:	.word	0xaaaaaaab

0000b030 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    b030:	push	{r4, r5, r6, lr}
	if (!spool) {
    b032:	mov	r4, r0
    b034:	cmp	r0, #0
    b036:	beq.n	b0ae <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    b038:	cbz	r1, b042 <sm_set_pool+0x12>
    b03a:	clz	r5, r2
    b03e:	lsrs	r5, r5, #5
    b040:	cbz	r5, b082 <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b042:	ldr	r0, [r4, #0]
    b044:	cbz	r0, b04a <sm_set_pool+0x1a>
    b046:	ldr	r2, [r4, #4]
    b048:	cbnz	r2, b058 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    b04a:	bl	c760 <__errno>
    b04e:	movs	r3, #22
		return 0;
    b050:	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    b052:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b054:	mov	r0, r2
    b056:	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    b058:	ldr	r1, [pc, #96]	; (b0bc <sm_set_pool+0x8c>)
    b05a:	umull	r3, r1, r1, r2
    b05e:	lsrs	r1, r1, #3
    b060:	add.w	r1, r1, r1, lsl #1
    b064:	subs.w	r1, r2, r1, lsl #2
    b068:	bne.n	b04a <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b06a:	ldr	r3, [r4, #8]
    b06c:	cbz	r3, b072 <sm_set_pool+0x42>
    b06e:	bl	cf4c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    b072:	movs	r3, #0
			return 1;
    b074:	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    b076:	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b078:	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    b07a:	str	r3, [r4, #4]
    b07c:	str	r3, [r4, #8]
    b07e:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b080:	pop	{r4, r5, r6, pc}
    b082:	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    b084:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    b086:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    b08a:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    b08c:	bl	afe0 <sm_align_pool>
    b090:	mov	r2, r0
    b092:	cmp	r0, #0
    b094:	beq.n	b054 <sm_set_pool+0x24>

	if (do_zero) {
    b096:	cbnz	r6, b09e <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    b098:	movs	r2, #1
}
    b09a:	mov	r0, r2
    b09c:	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    b09e:	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    b0a2:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    b0a4:	mov	r1, r5
    b0a6:	bl	cf4c <memset>
	}

	return 1;
    b0aa:	movs	r2, #1
    b0ac:	b.n	b054 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    b0ae:	bl	c760 <__errno>
    b0b2:	movs	r3, #22
		return 0;
    b0b4:	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    b0b6:	str	r3, [r0, #0]
		return 0;
    b0b8:	b.n	b054 <sm_set_pool+0x24>
    b0ba:	nop
    b0bc:	.word	0xaaaaaaab

0000b0c0 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    b0c0:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    b0c2:	ldr	r2, [pc, #24]	; (b0dc <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    b0c4:	movs	r1, #7
    b0c6:	ldr	r3, [pc, #24]	; (b0e0 <Panic_Temp_isr+0x20>)
    b0c8:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    b0ca:	ldr	r3, [r2, #56]	; 0x38
    b0cc:	orr.w	r3, r3, #64	; 0x40
    b0d0:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    b0d2:	dsb	sy
  while (1) asm ("wfi");
    b0d6:	wfi
    b0d8:	b.n	b0d6 <Panic_Temp_isr+0x16>
    b0da:	nop
    b0dc:	.word	0x400d4000
    b0e0:	.word	0x400ac000

0000b0e4 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b0e4:	lsls	r0, r0, #4
    b0e6:	ldr	r3, [pc, #60]	; (b124 <digitalWrite.part.0+0x40>)
    b0e8:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    b0ea:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    b0ec:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    b0ee:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    b0f0:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    b0f2:	tst	r4, r0
    b0f4:	beq.n	b102 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    b0f6:	cbz	r1, b110 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    b0f8:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b0fc:	ldr.w	r4, [sp], #4
    b100:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b102:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    b104:	cbnz	r1, b11a <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b106:	ldr	r2, [pc, #32]	; (b128 <digitalWrite.part.0+0x44>)
		}
	}
}
    b108:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b10c:	str	r2, [r3, #0]
		}
	}
}
    b10e:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    b110:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b114:	ldr.w	r4, [sp], #4
    b118:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b11a:	ldr	r2, [pc, #16]	; (b12c <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b11c:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b120:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b122:	bx	lr
    b124:	.word	0x20000500
    b128:	.word	0x00013038
    b12c:	.word	0x0001f038

0000b130 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    b130:	cmp	r0, #54	; 0x36
    b132:	bhi.n	b138 <digitalWrite+0x8>
    b134:	b.w	b0e4 <digitalWrite.part.0>
    b138:	bx	lr
    b13a:	nop

0000b13c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    b13c:	cmp	r0, #54	; 0x36
    b13e:	bhi.n	b17a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    b140:	lsls	r0, r0, #4
    b142:	ldr	r2, [pc, #104]	; (b1ac <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b144:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b146:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b14a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    b14c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b14e:	beq.n	b17c <pinMode+0x40>
    b150:	cmp	r1, #4
    b152:	beq.n	b17c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b154:	ldr	r4, [r3, #12]
    b156:	ldr	r2, [r0, #4]
    b158:	bic.w	r2, r2, r4
    b15c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b15e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    b160:	cbz	r1, b19e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    b162:	cmp	r1, #2
    b164:	beq.n	b1a4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    b166:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b168:	ldr	r3, [r3, #4]
}
    b16a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b16e:	ite	eq
    b170:	ldreq	r1, [pc, #60]	; (b1b0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b172:	ldrne	r1, [pc, #64]	; (b1b4 <pinMode+0x78>)
    b174:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    b176:	movs	r2, #21
    b178:	str	r2, [r3, #0]
}
    b17a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b17c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    b17e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b180:	ldr	r4, [r0, #4]
    b182:	orr.w	r2, r2, r4
    b186:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b188:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    b18a:	beq.n	b19e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    b18c:	movw	r1, #2104	; 0x838
    b190:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b192:	ldr	r3, [r3, #4]
    b194:	movs	r2, #21
}
    b196:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b19a:	str	r2, [r3, #0]
}
    b19c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b19e:	movs	r1, #56	; 0x38
    b1a0:	str	r1, [r2, #0]
    b1a2:	b.n	b192 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b1a4:	ldr	r1, [pc, #16]	; (b1b8 <pinMode+0x7c>)
    b1a6:	str	r1, [r2, #0]
    b1a8:	b.n	b192 <pinMode+0x56>
    b1aa:	nop
    b1ac:	.word	0x20000500
    b1b0:	.word	0x00013038
    b1b4:	.word	0x00010038
    b1b8:	.word	0x0001f038

0000b1bc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b1bc:	ldr	r0, [pc, #656]	; (b450 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b1be:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b1c2:	ldr	r3, [pc, #656]	; (b454 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b1c4:	ldr	r2, [r0, #120]	; 0x78
    b1c6:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    b1ca:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b1cc:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b1ce:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b1d0:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b1d4:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b1d8:	ldr	r4, [pc, #636]	; (b458 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b1da:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b1de:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b1e0:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b1e4:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b1e6:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b1e8:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b1ec:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b1f0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b1f4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b1f8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b1fc:	ldrh.w	r0, [r3, #392]	; 0x188
    b200:	uxth	r0, r0
    b202:	orr.w	r0, r0, #240	; 0xf0
    b206:	strh.w	r0, [r3, #392]	; 0x188
    b20a:	add.w	r0, r1, r1, lsl #1
    b20e:	ldr	r3, [pc, #580]	; (b454 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    b210:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b212:	movs	r5, #0
    b214:	lsls	r0, r0, #5
    b216:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b218:	cmp	r1, #4
    b21a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b21c:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b220:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    b222:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b224:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b226:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b228:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b22a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b22c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b22e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b230:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b232:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b234:	bne.n	b20a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b236:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b23a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b23e:	ldr	r3, [pc, #540]	; (b45c <pwm_init+0x2a0>)
    b240:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b244:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b246:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b248:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b24c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b24e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b252:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b256:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b25a:	ldrh.w	r0, [r4, #392]	; 0x188
    b25e:	uxth	r0, r0
    b260:	orr.w	r0, r0, #3840	; 0xf00
    b264:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b268:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b26c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b270:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b274:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b278:	ldrh.w	r0, [r3, #392]	; 0x188
    b27c:	uxth	r0, r0
    b27e:	orr.w	r0, r0, #240	; 0xf0
    b282:	strh.w	r0, [r3, #392]	; 0x188
    b286:	add.w	r0, r1, r1, lsl #1
    b28a:	ldr	r3, [pc, #464]	; (b45c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    b28c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b28e:	movs	r5, #0
    b290:	lsls	r0, r0, #5
    b292:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b294:	cmp	r1, #4
    b296:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b298:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b29a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b29e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b2a0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b2a2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b2a4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b2a6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b2a8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b2aa:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b2ac:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b2ae:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b2b0:	bne.n	b286 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b2b2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b2b6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b2ba:	ldr	r3, [pc, #420]	; (b460 <pwm_init+0x2a4>)
    b2bc:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b2c0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b2c2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b2c4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b2c8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b2ca:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b2ce:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b2d2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b2d6:	ldrh.w	r0, [r4, #392]	; 0x188
    b2da:	uxth	r0, r0
    b2dc:	orr.w	r0, r0, #3840	; 0xf00
    b2e0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b2e4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b2e8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b2ec:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b2f0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b2f4:	ldrh.w	r0, [r3, #392]	; 0x188
    b2f8:	uxth	r0, r0
    b2fa:	orr.w	r0, r0, #240	; 0xf0
    b2fe:	strh.w	r0, [r3, #392]	; 0x188
    b302:	add.w	r0, r1, r1, lsl #1
    b306:	ldr	r3, [pc, #344]	; (b460 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    b308:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b30a:	movs	r5, #0
    b30c:	lsls	r0, r0, #5
    b30e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b310:	cmp	r1, #4
    b312:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b314:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b316:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b31a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b31c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b31e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b320:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b322:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b324:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b326:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b328:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b32a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b32c:	bne.n	b302 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b32e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b332:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b336:	ldr	r3, [pc, #300]	; (b464 <pwm_init+0x2a8>)
    b338:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b33c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b33e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b340:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b344:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b346:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b34a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b34e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b352:	ldrh.w	r0, [r4, #392]	; 0x188
    b356:	uxth	r0, r0
    b358:	orr.w	r0, r0, #3840	; 0xf00
    b35c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b360:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b364:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b368:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b36c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b370:	ldrh.w	r0, [r3, #392]	; 0x188
    b374:	uxth	r0, r0
    b376:	orr.w	r0, r0, #240	; 0xf0
    b37a:	strh.w	r0, [r3, #392]	; 0x188
    b37e:	add.w	r0, r1, r1, lsl #1
    b382:	ldr	r3, [pc, #224]	; (b464 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    b384:	adds	r1, #1
    b386:	lsls	r0, r0, #5
    b388:	mov	r4, r3
    b38a:	cmp	r1, #4
    b38c:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b38e:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b390:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b394:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b396:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b398:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b39a:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b39c:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    b39e:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b3a0:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b3a2:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b3a4:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b3a6:	bne.n	b37e <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3a8:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b3ac:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b3ae:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b3b0:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3b4:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b3b6:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b3ba:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b3bc:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3c0:	orrs	r3, r7
    b3c2:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b3c6:	ldrh.w	r3, [r4, #392]	; 0x188
    b3ca:	uxth	r3, r3
    b3cc:	orr.w	r3, r3, #3840	; 0xf00
    b3d0:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b3d4:	lsls	r0, r2, #5
    b3d6:	ldr	r3, [pc, #144]	; (b468 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b3d8:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b3da:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b3dc:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b3de:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b3e0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b3e2:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b3e4:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b3e6:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b3ea:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b3ec:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b3ee:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b3f0:	bne.n	b3d4 <pwm_init+0x218>
    b3f2:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b3f4:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b3f6:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b3fa:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b3fe:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b400:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b404:	lsls	r0, r2, #5
    b406:	ldr	r3, [pc, #100]	; (b46c <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b408:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b40a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b40c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b40e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b410:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b412:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b414:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b416:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b418:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b41a:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b41c:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b41e:	bne.n	b404 <pwm_init+0x248>
    b420:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b422:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b424:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b428:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b42c:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b42e:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b432:	lsls	r0, r2, #5
    b434:	ldr	r3, [pc, #56]	; (b470 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b436:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b438:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b43a:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b43c:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b43e:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b440:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b442:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b444:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b446:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b448:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b44a:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b44c:	bne.n	b432 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    b44e:	pop	{r4, r5, r6, r7, pc}
    b450:	.word	0x400fc000
    b454:	.word	0x403dc000
    b458:	.word	0xfc030000
    b45c:	.word	0x403e0000
    b460:	.word	0x403e4000
    b464:	.word	0x403e8000
    b468:	.word	0x401dc000
    b46c:	.word	0x401e0000
    b470:	.word	0x401e4000

0000b474 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b474:	ldr	r2, [pc, #72]	; (b4c0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b476:	ldr	r3, [pc, #76]	; (b4c4 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b478:	ldr.w	r0, [r2, #544]	; 0x220
    b47c:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b480:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b482:	push	{r4, lr}
    b484:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b486:	bhi.n	b48e <usb_init_serialnumber+0x1a>
    b488:	add.w	r0, r0, r0, lsl #2
    b48c:	lsls	r0, r0, #1
    b48e:	ldr	r4, [pc, #56]	; (b4c8 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    b490:	add	r1, sp, #4
    b492:	movs	r2, #10
    b494:	bl	bac0 <ultoa>
    b498:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    b49a:	movs	r3, #0
    b49c:	mov	r0, r4
		char c = buf[i];
    b49e:	ldrb.w	r2, [r1], #1
    b4a2:	adds	r3, #1
		if (!c) break;
    b4a4:	cbz	r2, b4b6 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b4a6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b4a8:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b4ac:	bne.n	b49e <usb_init_serialnumber+0x2a>
    b4ae:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b4b0:	strb	r3, [r4, #0]
}
    b4b2:	add	sp, #16
    b4b4:	pop	{r4, pc}
    b4b6:	lsls	r3, r3, #1
    b4b8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b4ba:	strb	r3, [r4, #0]
}
    b4bc:	add	sp, #16
    b4be:	pop	{r4, pc}
    b4c0:	.word	0x401f4400
    b4c4:	.word	0x0098967f
    b4c8:	.word	0x20000c30

0000b4cc <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b4cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    b4d0:	ldr	r6, [pc, #200]	; (b59c <yield+0xd0>)
    b4d2:	ldrb	r3, [r6, #0]
    b4d4:	cbz	r3, b4fc <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    b4d6:	ldr	r7, [pc, #200]	; (b5a0 <yield+0xd4>)
    b4d8:	ldrb	r2, [r7, #0]
    b4da:	cbnz	r2, b4fc <yield+0x30>
	running = 1;
    b4dc:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b4de:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    b4e0:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b4e2:	bmi.n	b554 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    b4e4:	lsls	r2, r3, #30
    b4e6:	bmi.n	b51c <yield+0x50>

	running = 0;
    b4e8:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b4ea:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    b4ec:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b4ee:	bpl.n	b4fc <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    b4f0:	ldr	r3, [pc, #176]	; (b5a4 <yield+0xd8>)
    b4f2:	ldr	r2, [r3, #0]
    b4f4:	cbz	r2, b4fc <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b4f6:	mrs	r2, IPSR
		if (ipsr != 0) return;
    b4fa:	cbz	r2, b500 <yield+0x34>
    b4fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b500:	mrs	r0, PRIMASK
		__disable_irq();
    b504:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    b506:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    b508:	cbz	r2, b512 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    b50a:	ldr	r4, [pc, #156]	; (b5a8 <yield+0xdc>)
    b50c:	ldrb	r1, [r4, #0]
    b50e:	cmp	r1, #0
    b510:	beq.n	b572 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b512:	cmp	r0, #0
    b514:	bne.n	b4fc <yield+0x30>
    b516:	cpsie	i
    b518:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b51c:	ldr.w	r8, [pc, #148]	; b5b4 <yield+0xe8>
    b520:	ldrb.w	r2, [r8]
    b524:	cmp	r2, #0
    b526:	beq.n	b4e8 <yield+0x1c>
    b528:	movs	r4, #0
    b52a:	ldr.w	r9, [pc, #140]	; b5b8 <yield+0xec>
    b52e:	b.n	b53c <yield+0x70>
    b530:	adds	r4, #1
    b532:	ldrb.w	r3, [r8]
    b536:	uxtb	r4, r4
    b538:	cmp	r3, r4
    b53a:	bls.n	b564 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    b53c:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    b540:	ldr	r3, [r5, #0]
    b542:	mov	r0, r5
    b544:	ldr	r3, [r3, #16]
    b546:	blx	r3
    b548:	cmp	r0, #0
    b54a:	beq.n	b530 <yield+0x64>
    b54c:	ldr	r3, [r5, #20]
    b54e:	ldr	r3, [r3, #8]
    b550:	blx	r3
    b552:	b.n	b530 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b554:	bl	a300 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    b558:	cbnz	r0, b590 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    b55a:	ldr	r3, [pc, #80]	; (b5ac <yield+0xe0>)
    b55c:	ldrb	r3, [r3, #0]
    b55e:	cbnz	r3, b568 <yield+0x9c>
    b560:	ldrb	r3, [r6, #0]
    b562:	b.n	b4e4 <yield+0x18>
    b564:	ldrb	r3, [r6, #0]
    b566:	b.n	b4e8 <yield+0x1c>
    b568:	ldrb	r3, [r6, #0]
    b56a:	and.w	r3, r3, #254	; 0xfe
    b56e:	strb	r3, [r6, #0]
    b570:	b.n	b4e4 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b572:	movs	r6, #1
		firstYield = first->_next;
    b574:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b576:	strb	r6, [r4, #0]
		firstYield = first->_next;
    b578:	str	r5, [r3, #0]
		if (firstYield) {
    b57a:	cbz	r5, b596 <yield+0xca>
			firstYield->_prev = nullptr;
    b57c:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b57e:	cbnz	r0, b582 <yield+0xb6>
    b580:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b582:	movs	r5, #0
		(*(first->_function))(*first);
    b584:	ldr	r3, [r2, #8]
    b586:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b588:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    b58a:	blx	r3
		runningFromYield = false;
    b58c:	strb	r5, [r4, #0]
    b58e:	b.n	b4fc <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    b590:	bl	b7f0 <serialEvent()>
    b594:	b.n	b55a <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    b596:	ldr	r3, [pc, #24]	; (b5b0 <yield+0xe4>)
    b598:	str	r5, [r3, #0]
    b59a:	b.n	b57e <yield+0xb2>
    b59c:	.word	0x20000c46
    b5a0:	.word	0x20006dbc
    b5a4:	.word	0x20006dcc
    b5a8:	.word	0x20006dd0
    b5ac:	.word	0x60001b4a
    b5b0:	.word	0x20006dc8
    b5b4:	.word	0x20006df4
    b5b8:	.word	0x20006dd4

0000b5bc <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    b5bc:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b5be:	mrs	r2, PRIMASK
		__disable_irq();
    b5c2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    b5c4:	ldrb	r3, [r0, #29]
    b5c6:	cbnz	r3, b5d6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    b5c8:	ldrb	r1, [r0, #28]
    b5ca:	cmp	r1, #1
    b5cc:	beq.n	b5e0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    b5ce:	cmp	r1, #3
    b5d0:	beq.n	b5f4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    b5d2:	movs	r3, #1
    b5d4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b5d6:	cbnz	r2, b5da <EventResponder::triggerEventNotImmediate()+0x1e>
    b5d8:	cpsie	i
	}
	enableInterrupts(irq);
}
    b5da:	ldr.w	r4, [sp], #4
    b5de:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    b5e0:	ldr	r4, [pc, #68]	; (b628 <EventResponder::triggerEventNotImmediate()+0x6c>)
    b5e2:	ldr	r1, [r4, #0]
    b5e4:	cbz	r1, b610 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b5e6:	ldr	r1, [pc, #68]	; (b62c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    b5e8:	str	r3, [r0, #20]
				_prev = lastYield;
    b5ea:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    b5ec:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b5ee:	str	r3, [r0, #24]
				_prev->_next = this;
    b5f0:	str	r0, [r3, #20]
    b5f2:	b.n	b5d2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    b5f4:	ldr	r4, [pc, #56]	; (b630 <EventResponder::triggerEventNotImmediate()+0x74>)
    b5f6:	ldr	r1, [r4, #0]
    b5f8:	cbz	r1, b61c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b5fa:	ldr	r1, [pc, #56]	; (b634 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    b5fc:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    b5fe:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    b600:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b602:	str	r3, [r0, #24]
				_prev->_next = this;
    b604:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    b606:	ldr	r3, [pc, #48]	; (b638 <EventResponder::triggerEventNotImmediate()+0x7c>)
    b608:	mov.w	r1, #268435456	; 0x10000000
    b60c:	str	r1, [r3, #0]
    b60e:	b.n	b5d2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    b610:	ldr	r3, [pc, #24]	; (b62c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    b612:	str	r1, [r0, #20]
				_prev = nullptr;
    b614:	str	r1, [r0, #24]
				firstYield = this;
    b616:	str	r0, [r4, #0]
				lastYield = this;
    b618:	str	r0, [r3, #0]
    b61a:	b.n	b5d2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    b61c:	ldr	r3, [pc, #20]	; (b634 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    b61e:	str	r1, [r0, #20]
				_prev = nullptr;
    b620:	str	r1, [r0, #24]
				firstInterrupt = this;
    b622:	str	r0, [r4, #0]
				lastInterrupt = this;
    b624:	str	r0, [r3, #0]
    b626:	b.n	b606 <EventResponder::triggerEventNotImmediate()+0x4a>
    b628:	.word	0x20006dcc
    b62c:	.word	0x20006dc8
    b630:	.word	0x20006dc0
    b634:	.word	0x20006dc4
    b638:	.word	0xe000ed04

0000b63c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b63c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b63e:	mrs	r1, PRIMASK
		__disable_irq();
    b642:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b644:	ldr	r4, [pc, #48]	; (b678 <EventResponder::runFromInterrupt()+0x3c>)
    b646:	ldr	r3, [r4, #0]
		if (first) {
    b648:	cbz	r3, b66e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b64a:	ldr	r6, [pc, #48]	; (b67c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b64c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    b64e:	ldr	r2, [r3, #20]
    b650:	str	r2, [r4, #0]
			if (firstInterrupt) {
    b652:	cbz	r2, b674 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    b654:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b656:	cbnz	r1, b65a <EventResponder::runFromInterrupt()+0x1e>
    b658:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    b65a:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    b65c:	mov	r0, r3
    b65e:	ldr	r3, [r3, #8]
    b660:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b662:	mrs	r1, PRIMASK
		__disable_irq();
    b666:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b668:	ldr	r3, [r4, #0]
		if (first) {
    b66a:	cmp	r3, #0
    b66c:	bne.n	b64e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b66e:	cbnz	r1, b672 <EventResponder::runFromInterrupt()+0x36>
    b670:	cpsie	i
    b672:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b674:	str	r2, [r6, #0]
    b676:	b.n	b656 <EventResponder::runFromInterrupt()+0x1a>
    b678:	.word	0x20006dc0
    b67c:	.word	0x20006dc4

0000b680 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    b680:	b.w	b63c <EventResponder::runFromInterrupt()>

0000b684 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b684:	ldr	r2, [pc, #16]	; (b698 <systick_isr+0x14>)
    b686:	ldr	r3, [pc, #20]	; (b69c <systick_isr+0x18>)
    b688:	ldr	r1, [r2, #0]
	systick_millis_count++;
    b68a:	ldr	r2, [pc, #20]	; (b6a0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b68c:	str	r1, [r3, #0]
	systick_millis_count++;
    b68e:	ldr	r3, [r2, #0]
    b690:	adds	r3, #1
    b692:	str	r3, [r2, #0]
    b694:	bx	lr
    b696:	nop
    b698:	.word	0xe0001004
    b69c:	.word	0x20006d9c
    b6a0:	.word	0x20006da4

0000b6a4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    b6a4:	b.w	a30c <usb_serial_flush_input>

0000b6a8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    b6a8:	b.w	a2bc <usb_serial_peekchar>

0000b6ac <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    b6ac:	b.w	a380 <usb_serial_getchar>

0000b6b0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b6b0:	b.w	a300 <usb_serial_available>

0000b6b4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b6b4:	b.w	a430 <usb_serial_flush_output>

0000b6b8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b6b8:	b.w	a3e4 <usb_serial_write_buffer_free>

0000b6bc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b6bc:	mov	r0, r1
    b6be:	mov	r1, r2
    b6c0:	b.w	a3cc <usb_serial_write>

0000b6c4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b6c4:	mov	r0, r1
    b6c6:	b.w	a3a0 <usb_serial_putchar>
    b6ca:	nop

0000b6cc <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    b6cc:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    b6ce:	mov	r6, r1
    b6d0:	cbz	r1, b6f0 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    b6d2:	cbz	r2, b6f4 <Print::write(unsigned char const*, unsigned int)+0x28>
    b6d4:	mov	r7, r0
    b6d6:	mov	r4, r2
    b6d8:	movs	r5, #0
    b6da:	ldr	r3, [r7, #0]
    b6dc:	mov	r0, r7
    b6de:	ldrb.w	r1, [r6], #1
    b6e2:	ldr	r3, [r3, #0]
    b6e4:	blx	r3
    b6e6:	subs	r4, #1
    b6e8:	add	r5, r0
    b6ea:	bne.n	b6da <Print::write(unsigned char const*, unsigned int)+0xe>
    b6ec:	mov	r0, r5
    b6ee:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    b6f0:	mov	r0, r1
    b6f2:	pop	{r3, r4, r5, r6, r7, pc}
    b6f4:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    b6f6:	pop	{r3, r4, r5, r6, r7, pc}

0000b6f8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b6f8:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    b6fa:	ldr	r4, [pc, #24]	; (b714 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b6fc:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    b6fe:	ldr	r3, [r0, #0]
    b700:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b702:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    b704:	add	r1, sp, #4
    b706:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b708:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    b70c:	blx	r3
}
    b70e:	add	sp, #8
    b710:	pop	{r4, pc}
    b712:	nop
    b714:	.word	0x20000910

0000b718 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    b718:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    b71a:	push	{r4, lr}
    b71c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    b71e:	ldr	r3, [r3, #4]
    b720:	blx	r3
	return len;
}
    b722:	mov	r0, r4
    b724:	pop	{r4, pc}
    b726:	nop

0000b728 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    b728:	push	{r1, r2, r3}
    b72a:	push	{lr}
    b72c:	sub	sp, #8
    b72e:	add	r3, sp, #12
    b730:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    b734:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    b736:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    b738:	bl	d6c8 <vdprintf>
#endif
}
    b73c:	add	sp, #8
    b73e:	ldr.w	lr, [sp], #4
    b742:	add	sp, #12
    b744:	bx	lr
    b746:	nop

0000b748 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    b748:	push	{r4, r5, r6, r7, lr}
    b74a:	mov	r6, r0
    b74c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    b74e:	cmp	r2, #0
    b750:	beq.n	b7ba <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    b752:	cmp	r2, #1
    b754:	it	eq
    b756:	moveq	r2, #10
	}


	if (n == 0) {
    b758:	cbz	r1, b7b0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    b75a:	movs	r5, #33	; 0x21
    b75c:	b.n	b760 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    b75e:	uxtb	r5, r7
    b760:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    b762:	udiv	r4, r1, r2
    b766:	mls	r1, r2, r4, r1
    b76a:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b76c:	cmp	r1, #9
    b76e:	add.w	r1, r0, #55	; 0x37
    b772:	add.w	r0, r0, #48	; 0x30
    b776:	it	hi
    b778:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    b77a:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b77c:	add	r4, sp, #40	; 0x28
    b77e:	it	ls
    b780:	uxtbls	r0, r0
    b782:	add	r4, r5
    b784:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    b788:	cmp	r1, #0
    b78a:	bne.n	b75e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    b78c:	cbz	r3, b79c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    b78e:	subs	r5, #1
		buf[i] = '-';
    b790:	add	r3, sp, #40	; 0x28
    b792:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    b794:	uxtb	r5, r5
		buf[i] = '-';
    b796:	add	r3, r5
    b798:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    b79c:	ldr	r3, [r6, #0]
    b79e:	add	r1, sp, #4
    b7a0:	rsb	r2, r5, #34	; 0x22
    b7a4:	mov	r0, r6
    b7a6:	add	r1, r5
    b7a8:	ldr	r3, [r3, #4]
    b7aa:	blx	r3
}
    b7ac:	add	sp, #44	; 0x2c
    b7ae:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    b7b0:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    b7b2:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    b7b4:	strb.w	r2, [sp, #37]	; 0x25
    b7b8:	b.n	b78c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    b7ba:	ldr	r3, [r0, #0]
    b7bc:	uxtb	r1, r1
    b7be:	ldr	r3, [r3, #0]
    b7c0:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    b7c2:	add	sp, #44	; 0x2c
    b7c4:	pop	{r4, r5, r6, r7, pc}
    b7c6:	nop

0000b7c8 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    b7c8:	cmp	r1, #0
    b7ca:	blt.n	b7d4 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    b7cc:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    b7ce:	movs	r2, #10
    b7d0:	b.w	b748 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    b7d4:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    b7d6:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    b7d8:	movs	r2, #10
    b7da:	b.w	b748 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    b7de:	nop

0000b7e0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b7e0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b7e2:	bl	b5c <setup>
	while (1) {
		loop();
    b7e6:	bl	bf0 <loop>
		yield();
    b7ea:	bl	b4cc <yield>
    b7ee:	b.n	b7e6 <main+0x6>

0000b7f0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    b7f0:	bx	lr
    b7f2:	nop

0000b7f4 <operator new(unsigned int)>:
    b7f4:	b.w	c7bc <malloc>

0000b7f8 <operator delete(void*, unsigned int)>:
    b7f8:	b.w	c7cc <free>

0000b7fc <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b7fc:	ldr	r2, [pc, #600]	; (ba58 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b7fe:	ldr	r3, [pc, #604]	; (ba5c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b800:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    b802:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    b806:	ldr	r4, [pc, #600]	; (ba60 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b808:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    b80c:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    b80e:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b810:	bls.n	b84c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    b812:	ldr	r3, [pc, #592]	; (ba64 <set_arm_clock+0x268>)
    b814:	cmp	r0, r3
    b816:	bls.w	ba44 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b81a:	ldr	r3, [pc, #588]	; (ba68 <set_arm_clock+0x26c>)
    b81c:	movw	r5, #1575	; 0x627
    b820:	ldr	r7, [pc, #584]	; (ba6c <set_arm_clock+0x270>)
    b822:	add	r3, r0
    b824:	ldr	r4, [pc, #584]	; (ba70 <set_arm_clock+0x274>)
    b826:	lsrs	r2, r3, #8
    b828:	umull	r3, r2, r7, r2
    b82c:	lsrs	r3, r2, #7
    b82e:	add.w	r3, r3, r3, lsl #2
    b832:	add.w	r2, r3, r3, lsl #2
    b836:	addw	r3, r2, #1250	; 0x4e2
    b83a:	cmp	r3, r5
    b83c:	it	cs
    b83e:	movcs	r3, r5
    b840:	sub.w	r3, r3, #800	; 0x320
    b844:	umull	r3, r5, r4, r3
    b848:	lsrs	r5, r5, #3
    b84a:	b.n	b856 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    b84c:	ldr	r5, [pc, #548]	; (ba74 <set_arm_clock+0x278>)
    b84e:	cmp	r0, r5
    b850:	ite	ls
    b852:	movls	r5, #6
    b854:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b856:	ldr	r2, [pc, #516]	; (ba5c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b858:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b85c:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b860:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b862:	orr.w	r3, r3, #192	; 0xc0
    b866:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b86a:	bcs.n	b882 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b86c:	ldr	r3, [pc, #496]	; (ba60 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b86e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b872:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b874:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    b876:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b878:	ldr	r3, [r2, #0]
    b87a:	cmp	r3, #0
    b87c:	bge.n	b878 <set_arm_clock+0x7c>
    b87e:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    b882:	ands.w	r3, lr, #33554432	; 0x2000000
    b886:	bne.n	b8ec <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    b888:	ldr	r4, [pc, #492]	; (ba78 <set_arm_clock+0x27c>)
    b88a:	ldr	r2, [pc, #496]	; (ba7c <set_arm_clock+0x280>)
    b88c:	ldr.w	ip, [r4, #16]
    b890:	mov	r4, r2
    b892:	and.w	r2, ip, r2
    b896:	cmp	r2, r4
    b898:	itet	eq
    b89a:	moveq.w	r3, #402653184	; 0x18000000
    b89e:	movne.w	r2, #4096	; 0x1000
    b8a2:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b8a4:	eor.w	r4, lr, r3
    b8a8:	tst.w	r4, #939524096	; 0x38000000
    b8ac:	beq.n	b8c0 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    b8ae:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b8b2:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    b8b6:	ldr	r4, [pc, #420]	; (ba5c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b8b8:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    b8bc:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b8c0:	eor.w	r3, r1, r2
    b8c4:	tst.w	r3, #12288	; 0x3000
    b8c8:	beq.n	b8dc <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    b8ca:	ldr	r3, [pc, #400]	; (ba5c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    b8cc:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    b8d0:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b8d2:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    b8d4:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b8d6:	ldr	r3, [r2, #72]	; 0x48
    b8d8:	lsls	r4, r3, #28
    b8da:	bmi.n	b8d6 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    b8dc:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    b8e0:	ldr	r2, [pc, #376]	; (ba5c <set_arm_clock+0x260>)
    b8e2:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b8e6:	ldr	r3, [r2, #72]	; 0x48
    b8e8:	lsls	r1, r3, #26
    b8ea:	bmi.n	b8e6 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    b8ec:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b8ee:	ldr	r4, [pc, #400]	; (ba80 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    b8f0:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    b8f2:	mul.w	r3, r1, r2
    b8f6:	mul.w	r3, r0, r3
    b8fa:	cmp	r3, r4
    b8fc:	bhi.n	b912 <set_arm_clock+0x116>
		if (div_arm < 8) {
    b8fe:	cmp	r2, #7
    b900:	bhi.w	ba2e <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    b904:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    b906:	mul.w	r3, r1, r2
    b90a:	mul.w	r3, r0, r3
    b90e:	cmp	r3, r4
    b910:	bls.n	b8fe <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b912:	ldr	r0, [pc, #368]	; (ba84 <set_arm_clock+0x288>)
    b914:	ldr	r4, [pc, #368]	; (ba88 <set_arm_clock+0x28c>)
    b916:	add	r0, r3
    b918:	umull	r0, r3, r4, r0
    b91c:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    b91e:	cmp	r3, #108	; 0x6c
    b920:	bhi.w	ba3a <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    b924:	cmp	r3, #53	; 0x35
    b926:	bhi.w	ba48 <set_arm_clock+0x24c>
    b92a:	ldr.w	r8, [pc, #392]	; bab4 <set_arm_clock+0x2b8>
    b92e:	movs	r3, #54	; 0x36
    b930:	ldr	r0, [pc, #344]	; (ba8c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b932:	ldr.w	ip, [pc, #324]	; ba78 <set_arm_clock+0x27c>
    b936:	ldr	r4, [pc, #344]	; (ba90 <set_arm_clock+0x294>)
    b938:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    b93c:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b940:	and.w	r4, r9, r4
    b944:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    b946:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b94a:	beq.n	b964 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b94c:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b950:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b954:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b956:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b95a:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b95e:	ldr	r3, [r4, #0]
    b960:	cmp	r3, #0
    b962:	bge.n	b95e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b964:	ldr.w	ip, [pc, #244]	; ba5c <set_arm_clock+0x260>
    b968:	subs	r2, #1
    b96a:	ldr.w	r3, [ip, #16]
    b96e:	and.w	r3, r3, #7
    b972:	cmp	r3, r2
    b974:	beq.n	b986 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b976:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b97a:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b97c:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b980:	ldr	r3, [r4, #72]	; 0x48
    b982:	lsls	r3, r3, #15
    b984:	bmi.n	b980 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b986:	subs	r1, #1
    b988:	lsls	r1, r1, #10
    b98a:	eor.w	r3, lr, r1
    b98e:	tst.w	r3, #7168	; 0x1c00
    b992:	beq.n	b9ae <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    b994:	ldr	r3, [pc, #196]	; (ba5c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b996:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b99a:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b99e:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b9a0:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    b9a4:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b9a8:	ldr	r3, [r2, #72]	; 0x48
    b9aa:	lsls	r1, r3, #30
    b9ac:	bmi.n	b9a8 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b9ae:	ldr	r3, [pc, #228]	; (ba94 <set_arm_clock+0x298>)
    b9b0:	ldr	r1, [pc, #228]	; (ba98 <set_arm_clock+0x29c>)
    b9b2:	add	r3, r0
    b9b4:	lsrs	r3, r3, #7
    b9b6:	umull	r3, r1, r1, r3
    b9ba:	lsrs	r1, r1, #12
    b9bc:	cmp	r1, #4
    b9be:	it	cs
    b9c0:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b9c2:	subs	r3, r1, #1
    b9c4:	lsls	r3, r3, #8
    b9c6:	eor.w	r2, lr, r3
    b9ca:	tst.w	r2, #768	; 0x300
    b9ce:	beq.n	b9e0 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    b9d0:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b9d4:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    b9d8:	ldr	r2, [pc, #128]	; (ba5c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b9da:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    b9de:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b9e0:	ldr	r3, [pc, #120]	; (ba5c <set_arm_clock+0x260>)
    b9e2:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b9e4:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b9e6:	bic.w	r4, r4, #33554432	; 0x2000000
    b9ea:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b9ec:	ldr	r3, [r2, #72]	; 0x48
    b9ee:	lsls	r3, r3, #26
    b9f0:	bmi.n	b9ec <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b9f2:	ldr	r3, [pc, #168]	; (ba9c <set_arm_clock+0x2a0>)
    b9f4:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    b9f8:	ldr	r4, [pc, #164]	; (baa0 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b9fa:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b9fc:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    ba00:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba02:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    ba06:	ldr	r4, [pc, #156]	; (baa4 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba08:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    ba0c:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba10:	ldr	r2, [pc, #148]	; (baa8 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    ba12:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba14:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba16:	bcs.n	ba2a <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ba18:	ldr	r3, [pc, #68]	; (ba60 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ba1a:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ba1e:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ba20:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    ba22:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ba24:	ldr	r3, [r2, #0]
    ba26:	cmp	r3, #0
    ba28:	bge.n	ba24 <set_arm_clock+0x228>
	}

	return frequency;
}
    ba2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    ba2e:	cmp	r1, #4
    ba30:	bhi.w	b912 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    ba34:	adds	r1, #1
				div_arm = 1;
    ba36:	movs	r2, #1
    ba38:	b.n	b8f2 <set_arm_clock+0xf6>
    ba3a:	ldr.w	r8, [pc, #124]	; bab8 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    ba3e:	movs	r3, #108	; 0x6c
    ba40:	ldr	r0, [pc, #104]	; (baac <set_arm_clock+0x2b0>)
    ba42:	b.n	b932 <set_arm_clock+0x136>
    ba44:	movs	r5, #18
    ba46:	b.n	b856 <set_arm_clock+0x5a>
    ba48:	ldr	r0, [pc, #100]	; (bab0 <set_arm_clock+0x2b4>)
    ba4a:	ldr.w	r8, [pc, #112]	; babc <set_arm_clock+0x2c0>
    ba4e:	mul.w	r0, r0, r3
    ba52:	orr.w	r8, r3, r8
    ba56:	b.n	b932 <set_arm_clock+0x136>
    ba58:	.word	0x1f78a400
    ba5c:	.word	0x400fc000
    ba60:	.word	0x40080000
    ba64:	.word	0x23c34600
    ba68:	.word	0xdc3cba00
    ba6c:	.word	0x004cb223
    ba70:	.word	0x51eb851f
    ba74:	.word	0x016e3600
    ba78:	.word	0x400d8000
    ba7c:	.word	0x80003040
    ba80:	.word	0x269fb1ff
    ba84:	.word	0x005b8d80
    ba88:	.word	0x165e9f81
    ba8c:	.word	0x269fb200
    ba90:	.word	0x8001307f
    ba94:	.word	0x08f0d17f
    ba98:	.word	0x00e5109f
    ba9c:	.word	0x431bde83
    baa0:	.word	0x20000c5c
    baa4:	.word	0x20000c58
    baa8:	.word	0x20006da0
    baac:	.word	0x4d3f6400
    bab0:	.word	0x00b71b00
    bab4:	.word	0x80002036
    bab8:	.word	0x8000206c
    babc:	.word	0x80002000

0000bac0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    bac0:	push	{r4, r5, r6, r7}
    bac2:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    bac4:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    bac6:	mov	r7, r6
    bac8:	b.n	bacc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    baca:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    bacc:	udiv	r3, r0, r2
    bad0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bad4:	add.w	r4, r0, #55	; 0x37
    bad8:	cmp	r0, #9
    bada:	add.w	r0, r0, #48	; 0x30
    bade:	uxtb	r4, r4
    bae0:	it	ls
    bae2:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    bae4:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bae6:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    baea:	cmp	r3, #0
    baec:	bne.n	baca <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    baee:	adds	r2, r1, r5
    baf0:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    baf2:	cbz	r5, bb08 <ultoa+0x48>
    baf4:	adds	r3, #1
		t = buf[j];
    baf6:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    bafa:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bafc:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    bafe:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bb00:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    bb02:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bb06:	blt.n	baf4 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    bb08:	mov	r0, r1
    bb0a:	pop	{r4, r5, r6, r7}
    bb0c:	bx	lr
    bb0e:	nop

0000bb10 <__aeabi_atexit>:
    bb10:	mov	r3, r1
    bb12:	mov	r1, r0
    bb14:	mov	r0, r3
    bb16:	b.w	c754 <__cxa_atexit>
    bb1a:	nop

0000bb1c <__aeabi_drsub>:
    bb1c:	eor.w	r1, r1, #2147483648	; 0x80000000
    bb20:	b.n	bb28 <__adddf3>
    bb22:	nop

0000bb24 <__aeabi_dsub>:
    bb24:	eor.w	r3, r3, #2147483648	; 0x80000000

0000bb28 <__adddf3>:
    bb28:	push	{r4, r5, lr}
    bb2a:	mov.w	r4, r1, lsl #1
    bb2e:	mov.w	r5, r3, lsl #1
    bb32:	teq	r4, r5
    bb36:	it	eq
    bb38:	teqeq	r0, r2
    bb3c:	itttt	ne
    bb3e:	orrsne.w	ip, r4, r0
    bb42:	orrsne.w	ip, r5, r2
    bb46:	mvnsne.w	ip, r4, asr #21
    bb4a:	mvnsne.w	ip, r5, asr #21
    bb4e:	beq.w	bd16 <__adddf3+0x1ee>
    bb52:	mov.w	r4, r4, lsr #21
    bb56:	rsbs	r5, r4, r5, lsr #21
    bb5a:	it	lt
    bb5c:	neglt	r5, r5
    bb5e:	ble.n	bb7a <__adddf3+0x52>
    bb60:	add	r4, r5
    bb62:	eor.w	r2, r0, r2
    bb66:	eor.w	r3, r1, r3
    bb6a:	eor.w	r0, r2, r0
    bb6e:	eor.w	r1, r3, r1
    bb72:	eor.w	r2, r0, r2
    bb76:	eor.w	r3, r1, r3
    bb7a:	cmp	r5, #54	; 0x36
    bb7c:	it	hi
    bb7e:	pophi	{r4, r5, pc}
    bb80:	tst.w	r1, #2147483648	; 0x80000000
    bb84:	mov.w	r1, r1, lsl #12
    bb88:	mov.w	ip, #1048576	; 0x100000
    bb8c:	orr.w	r1, ip, r1, lsr #12
    bb90:	beq.n	bb98 <__adddf3+0x70>
    bb92:	negs	r0, r0
    bb94:	sbc.w	r1, r1, r1, lsl #1
    bb98:	tst.w	r3, #2147483648	; 0x80000000
    bb9c:	mov.w	r3, r3, lsl #12
    bba0:	orr.w	r3, ip, r3, lsr #12
    bba4:	beq.n	bbac <__adddf3+0x84>
    bba6:	negs	r2, r2
    bba8:	sbc.w	r3, r3, r3, lsl #1
    bbac:	teq	r4, r5
    bbb0:	beq.w	bd02 <__adddf3+0x1da>
    bbb4:	sub.w	r4, r4, #1
    bbb8:	rsbs	lr, r5, #32
    bbbc:	blt.n	bbda <__adddf3+0xb2>
    bbbe:	lsl.w	ip, r2, lr
    bbc2:	lsr.w	r2, r2, r5
    bbc6:	adds	r0, r0, r2
    bbc8:	adc.w	r1, r1, #0
    bbcc:	lsl.w	r2, r3, lr
    bbd0:	adds	r0, r0, r2
    bbd2:	asr.w	r3, r3, r5
    bbd6:	adcs	r1, r3
    bbd8:	b.n	bbf8 <__adddf3+0xd0>
    bbda:	sub.w	r5, r5, #32
    bbde:	add.w	lr, lr, #32
    bbe2:	cmp	r2, #1
    bbe4:	lsl.w	ip, r3, lr
    bbe8:	it	cs
    bbea:	orrcs.w	ip, ip, #2
    bbee:	asr.w	r3, r3, r5
    bbf2:	adds	r0, r0, r3
    bbf4:	adcs.w	r1, r1, r3, asr #31
    bbf8:	and.w	r5, r1, #2147483648	; 0x80000000
    bbfc:	bpl.n	bc0e <__adddf3+0xe6>
    bbfe:	mov.w	lr, #0
    bc02:	rsbs	ip, ip, #0
    bc06:	sbcs.w	r0, lr, r0
    bc0a:	sbc.w	r1, lr, r1
    bc0e:	cmp.w	r1, #1048576	; 0x100000
    bc12:	bcc.n	bc4c <__adddf3+0x124>
    bc14:	cmp.w	r1, #2097152	; 0x200000
    bc18:	bcc.n	bc34 <__adddf3+0x10c>
    bc1a:	lsrs	r1, r1, #1
    bc1c:	movs.w	r0, r0, rrx
    bc20:	mov.w	ip, ip, rrx
    bc24:	add.w	r4, r4, #1
    bc28:	mov.w	r2, r4, lsl #21
    bc2c:	cmn.w	r2, #4194304	; 0x400000
    bc30:	bcs.w	bd68 <__adddf3+0x240>
    bc34:	cmp.w	ip, #2147483648	; 0x80000000
    bc38:	it	eq
    bc3a:	movseq.w	ip, r0, lsr #1
    bc3e:	adcs.w	r0, r0, #0
    bc42:	adc.w	r1, r1, r4, lsl #20
    bc46:	orr.w	r1, r1, r5
    bc4a:	pop	{r4, r5, pc}
    bc4c:	movs.w	ip, ip, lsl #1
    bc50:	adcs	r0, r0
    bc52:	adc.w	r1, r1, r1
    bc56:	tst.w	r1, #1048576	; 0x100000
    bc5a:	sub.w	r4, r4, #1
    bc5e:	bne.n	bc34 <__adddf3+0x10c>
    bc60:	teq	r1, #0
    bc64:	itt	eq
    bc66:	moveq	r1, r0
    bc68:	moveq	r0, #0
    bc6a:	clz	r3, r1
    bc6e:	it	eq
    bc70:	addeq	r3, #32
    bc72:	sub.w	r3, r3, #11
    bc76:	subs.w	r2, r3, #32
    bc7a:	bge.n	bc96 <__adddf3+0x16e>
    bc7c:	adds	r2, #12
    bc7e:	ble.n	bc92 <__adddf3+0x16a>
    bc80:	add.w	ip, r2, #20
    bc84:	rsb	r2, r2, #12
    bc88:	lsl.w	r0, r1, ip
    bc8c:	lsr.w	r1, r1, r2
    bc90:	b.n	bcac <__adddf3+0x184>
    bc92:	add.w	r2, r2, #20
    bc96:	it	le
    bc98:	rsble	ip, r2, #32
    bc9c:	lsl.w	r1, r1, r2
    bca0:	lsr.w	ip, r0, ip
    bca4:	itt	le
    bca6:	orrle.w	r1, r1, ip
    bcaa:	lslle	r0, r2
    bcac:	subs	r4, r4, r3
    bcae:	ittt	ge
    bcb0:	addge.w	r1, r1, r4, lsl #20
    bcb4:	orrge	r1, r5
    bcb6:	popge	{r4, r5, pc}
    bcb8:	mvn.w	r4, r4
    bcbc:	subs	r4, #31
    bcbe:	bge.n	bcfa <__adddf3+0x1d2>
    bcc0:	adds	r4, #12
    bcc2:	bgt.n	bce2 <__adddf3+0x1ba>
    bcc4:	add.w	r4, r4, #20
    bcc8:	rsb	r2, r4, #32
    bccc:	lsr.w	r0, r0, r4
    bcd0:	lsl.w	r3, r1, r2
    bcd4:	orr.w	r0, r0, r3
    bcd8:	lsr.w	r3, r1, r4
    bcdc:	orr.w	r1, r5, r3
    bce0:	pop	{r4, r5, pc}
    bce2:	rsb	r4, r4, #12
    bce6:	rsb	r2, r4, #32
    bcea:	lsr.w	r0, r0, r2
    bcee:	lsl.w	r3, r1, r4
    bcf2:	orr.w	r0, r0, r3
    bcf6:	mov	r1, r5
    bcf8:	pop	{r4, r5, pc}
    bcfa:	lsr.w	r0, r1, r4
    bcfe:	mov	r1, r5
    bd00:	pop	{r4, r5, pc}
    bd02:	teq	r4, #0
    bd06:	eor.w	r3, r3, #1048576	; 0x100000
    bd0a:	itte	eq
    bd0c:	eoreq.w	r1, r1, #1048576	; 0x100000
    bd10:	addeq	r4, #1
    bd12:	subne	r5, #1
    bd14:	b.n	bbb4 <__adddf3+0x8c>
    bd16:	mvns.w	ip, r4, asr #21
    bd1a:	it	ne
    bd1c:	mvnsne.w	ip, r5, asr #21
    bd20:	beq.n	bd76 <__adddf3+0x24e>
    bd22:	teq	r4, r5
    bd26:	it	eq
    bd28:	teqeq	r0, r2
    bd2c:	beq.n	bd3a <__adddf3+0x212>
    bd2e:	orrs.w	ip, r4, r0
    bd32:	itt	eq
    bd34:	moveq	r1, r3
    bd36:	moveq	r0, r2
    bd38:	pop	{r4, r5, pc}
    bd3a:	teq	r1, r3
    bd3e:	ittt	ne
    bd40:	movne	r1, #0
    bd42:	movne	r0, #0
    bd44:	popne	{r4, r5, pc}
    bd46:	movs.w	ip, r4, lsr #21
    bd4a:	bne.n	bd58 <__adddf3+0x230>
    bd4c:	lsls	r0, r0, #1
    bd4e:	adcs	r1, r1
    bd50:	it	cs
    bd52:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    bd56:	pop	{r4, r5, pc}
    bd58:	adds.w	r4, r4, #4194304	; 0x400000
    bd5c:	itt	cc
    bd5e:	addcc.w	r1, r1, #1048576	; 0x100000
    bd62:	popcc	{r4, r5, pc}
    bd64:	and.w	r5, r1, #2147483648	; 0x80000000
    bd68:	orr.w	r1, r5, #2130706432	; 0x7f000000
    bd6c:	orr.w	r1, r1, #15728640	; 0xf00000
    bd70:	mov.w	r0, #0
    bd74:	pop	{r4, r5, pc}
    bd76:	mvns.w	ip, r4, asr #21
    bd7a:	itte	ne
    bd7c:	movne	r1, r3
    bd7e:	movne	r0, r2
    bd80:	mvnseq.w	ip, r5, asr #21
    bd84:	itt	ne
    bd86:	movne	r3, r1
    bd88:	movne	r2, r0
    bd8a:	orrs.w	r4, r0, r1, lsl #12
    bd8e:	itte	eq
    bd90:	orrseq.w	r5, r2, r3, lsl #12
    bd94:	teqeq	r1, r3
    bd98:	orrne.w	r1, r1, #524288	; 0x80000
    bd9c:	pop	{r4, r5, pc}
    bd9e:	nop

0000bda0 <__aeabi_ui2d>:
    bda0:	teq	r0, #0
    bda4:	itt	eq
    bda6:	moveq	r1, #0
    bda8:	bxeq	lr
    bdaa:	push	{r4, r5, lr}
    bdac:	mov.w	r4, #1024	; 0x400
    bdb0:	add.w	r4, r4, #50	; 0x32
    bdb4:	mov.w	r5, #0
    bdb8:	mov.w	r1, #0
    bdbc:	b.n	bc60 <__adddf3+0x138>
    bdbe:	nop

0000bdc0 <__aeabi_i2d>:
    bdc0:	teq	r0, #0
    bdc4:	itt	eq
    bdc6:	moveq	r1, #0
    bdc8:	bxeq	lr
    bdca:	push	{r4, r5, lr}
    bdcc:	mov.w	r4, #1024	; 0x400
    bdd0:	add.w	r4, r4, #50	; 0x32
    bdd4:	ands.w	r5, r0, #2147483648	; 0x80000000
    bdd8:	it	mi
    bdda:	negmi	r0, r0
    bddc:	mov.w	r1, #0
    bde0:	b.n	bc60 <__adddf3+0x138>
    bde2:	nop

0000bde4 <__aeabi_f2d>:
    bde4:	lsls	r2, r0, #1
    bde6:	mov.w	r1, r2, asr #3
    bdea:	mov.w	r1, r1, rrx
    bdee:	mov.w	r0, r2, lsl #28
    bdf2:	itttt	ne
    bdf4:	andsne.w	r3, r2, #4278190080	; 0xff000000
    bdf8:	teqne	r3, #4278190080	; 0xff000000
    bdfc:	eorne.w	r1, r1, #939524096	; 0x38000000
    be00:	bxne	lr
    be02:	teq	r2, #0
    be06:	ite	ne
    be08:	teqne	r3, #4278190080	; 0xff000000
    be0c:	bxeq	lr
    be0e:	push	{r4, r5, lr}
    be10:	mov.w	r4, #896	; 0x380
    be14:	and.w	r5, r1, #2147483648	; 0x80000000
    be18:	bic.w	r1, r1, #2147483648	; 0x80000000
    be1c:	b.n	bc60 <__adddf3+0x138>
    be1e:	nop

0000be20 <__aeabi_ul2d>:
    be20:	orrs.w	r2, r0, r1
    be24:	it	eq
    be26:	bxeq	lr
    be28:	push	{r4, r5, lr}
    be2a:	mov.w	r5, #0
    be2e:	b.n	be46 <__aeabi_l2d+0x16>

0000be30 <__aeabi_l2d>:
    be30:	orrs.w	r2, r0, r1
    be34:	it	eq
    be36:	bxeq	lr
    be38:	push	{r4, r5, lr}
    be3a:	ands.w	r5, r1, #2147483648	; 0x80000000
    be3e:	bpl.n	be46 <__aeabi_l2d+0x16>
    be40:	negs	r0, r0
    be42:	sbc.w	r1, r1, r1, lsl #1
    be46:	mov.w	r4, #1024	; 0x400
    be4a:	add.w	r4, r4, #50	; 0x32
    be4e:	movs.w	ip, r1, lsr #22
    be52:	beq.w	bc0e <__adddf3+0xe6>
    be56:	mov.w	r2, #3
    be5a:	movs.w	ip, ip, lsr #3
    be5e:	it	ne
    be60:	addne	r2, #3
    be62:	movs.w	ip, ip, lsr #3
    be66:	it	ne
    be68:	addne	r2, #3
    be6a:	add.w	r2, r2, ip, lsr #3
    be6e:	rsb	r3, r2, #32
    be72:	lsl.w	ip, r0, r3
    be76:	lsr.w	r0, r0, r2
    be7a:	lsl.w	lr, r1, r3
    be7e:	orr.w	r0, r0, lr
    be82:	lsr.w	r1, r1, r2
    be86:	add	r4, r2
    be88:	b.n	bc0e <__adddf3+0xe6>
    be8a:	nop

0000be8c <__aeabi_dmul>:
    be8c:	push	{r4, r5, r6, lr}
    be8e:	mov.w	ip, #255	; 0xff
    be92:	orr.w	ip, ip, #1792	; 0x700
    be96:	ands.w	r4, ip, r1, lsr #20
    be9a:	ittte	ne
    be9c:	andsne.w	r5, ip, r3, lsr #20
    bea0:	teqne	r4, ip
    bea4:	teqne	r5, ip
    bea8:	bleq	c068 <__aeabi_dmul+0x1dc>
    beac:	add	r4, r5
    beae:	eor.w	r6, r1, r3
    beb2:	bic.w	r1, r1, ip, lsl #21
    beb6:	bic.w	r3, r3, ip, lsl #21
    beba:	orrs.w	r5, r0, r1, lsl #12
    bebe:	it	ne
    bec0:	orrsne.w	r5, r2, r3, lsl #12
    bec4:	orr.w	r1, r1, #1048576	; 0x100000
    bec8:	orr.w	r3, r3, #1048576	; 0x100000
    becc:	beq.n	bf40 <__aeabi_dmul+0xb4>
    bece:	umull	ip, lr, r0, r2
    bed2:	mov.w	r5, #0
    bed6:	umlal	lr, r5, r1, r2
    beda:	and.w	r2, r6, #2147483648	; 0x80000000
    bede:	umlal	lr, r5, r0, r3
    bee2:	mov.w	r6, #0
    bee6:	umlal	r5, r6, r1, r3
    beea:	teq	ip, #0
    beee:	it	ne
    bef0:	orrne.w	lr, lr, #1
    bef4:	sub.w	r4, r4, #255	; 0xff
    bef8:	cmp.w	r6, #512	; 0x200
    befc:	sbc.w	r4, r4, #768	; 0x300
    bf00:	bcs.n	bf0c <__aeabi_dmul+0x80>
    bf02:	movs.w	lr, lr, lsl #1
    bf06:	adcs	r5, r5
    bf08:	adc.w	r6, r6, r6
    bf0c:	orr.w	r1, r2, r6, lsl #11
    bf10:	orr.w	r1, r1, r5, lsr #21
    bf14:	mov.w	r0, r5, lsl #11
    bf18:	orr.w	r0, r0, lr, lsr #21
    bf1c:	mov.w	lr, lr, lsl #11
    bf20:	subs.w	ip, r4, #253	; 0xfd
    bf24:	it	hi
    bf26:	cmphi.w	ip, #1792	; 0x700
    bf2a:	bhi.n	bf6a <__aeabi_dmul+0xde>
    bf2c:	cmp.w	lr, #2147483648	; 0x80000000
    bf30:	it	eq
    bf32:	movseq.w	lr, r0, lsr #1
    bf36:	adcs.w	r0, r0, #0
    bf3a:	adc.w	r1, r1, r4, lsl #20
    bf3e:	pop	{r4, r5, r6, pc}
    bf40:	and.w	r6, r6, #2147483648	; 0x80000000
    bf44:	orr.w	r1, r6, r1
    bf48:	orr.w	r0, r0, r2
    bf4c:	eor.w	r1, r1, r3
    bf50:	subs.w	r4, r4, ip, lsr #1
    bf54:	ittt	gt
    bf56:	rsbsgt	r5, r4, ip
    bf5a:	orrgt.w	r1, r1, r4, lsl #20
    bf5e:	popgt	{r4, r5, r6, pc}
    bf60:	orr.w	r1, r1, #1048576	; 0x100000
    bf64:	mov.w	lr, #0
    bf68:	subs	r4, #1
    bf6a:	bgt.w	c0c4 <__aeabi_dmul+0x238>
    bf6e:	cmn.w	r4, #54	; 0x36
    bf72:	ittt	le
    bf74:	movle	r0, #0
    bf76:	andle.w	r1, r1, #2147483648	; 0x80000000
    bf7a:	pople	{r4, r5, r6, pc}
    bf7c:	rsb	r4, r4, #0
    bf80:	subs	r4, #32
    bf82:	bge.n	bff0 <__aeabi_dmul+0x164>
    bf84:	adds	r4, #12
    bf86:	bgt.n	bfc0 <__aeabi_dmul+0x134>
    bf88:	add.w	r4, r4, #20
    bf8c:	rsb	r5, r4, #32
    bf90:	lsl.w	r3, r0, r5
    bf94:	lsr.w	r0, r0, r4
    bf98:	lsl.w	r2, r1, r5
    bf9c:	orr.w	r0, r0, r2
    bfa0:	and.w	r2, r1, #2147483648	; 0x80000000
    bfa4:	bic.w	r1, r1, #2147483648	; 0x80000000
    bfa8:	adds.w	r0, r0, r3, lsr #31
    bfac:	lsr.w	r6, r1, r4
    bfb0:	adc.w	r1, r2, r6
    bfb4:	orrs.w	lr, lr, r3, lsl #1
    bfb8:	it	eq
    bfba:	biceq.w	r0, r0, r3, lsr #31
    bfbe:	pop	{r4, r5, r6, pc}
    bfc0:	rsb	r4, r4, #12
    bfc4:	rsb	r5, r4, #32
    bfc8:	lsl.w	r3, r0, r4
    bfcc:	lsr.w	r0, r0, r5
    bfd0:	lsl.w	r2, r1, r4
    bfd4:	orr.w	r0, r0, r2
    bfd8:	and.w	r1, r1, #2147483648	; 0x80000000
    bfdc:	adds.w	r0, r0, r3, lsr #31
    bfe0:	adc.w	r1, r1, #0
    bfe4:	orrs.w	lr, lr, r3, lsl #1
    bfe8:	it	eq
    bfea:	biceq.w	r0, r0, r3, lsr #31
    bfee:	pop	{r4, r5, r6, pc}
    bff0:	rsb	r5, r4, #32
    bff4:	lsl.w	r2, r0, r5
    bff8:	orr.w	lr, lr, r2
    bffc:	lsr.w	r3, r0, r4
    c000:	lsl.w	r2, r1, r5
    c004:	orr.w	r3, r3, r2
    c008:	lsr.w	r0, r1, r4
    c00c:	and.w	r1, r1, #2147483648	; 0x80000000
    c010:	lsr.w	r2, r1, r4
    c014:	bic.w	r0, r0, r2
    c018:	add.w	r0, r0, r3, lsr #31
    c01c:	orrs.w	lr, lr, r3, lsl #1
    c020:	it	eq
    c022:	biceq.w	r0, r0, r3, lsr #31
    c026:	pop	{r4, r5, r6, pc}
    c028:	teq	r4, #0
    c02c:	bne.n	c04e <__aeabi_dmul+0x1c2>
    c02e:	and.w	r6, r1, #2147483648	; 0x80000000
    c032:	lsls	r0, r0, #1
    c034:	adc.w	r1, r1, r1
    c038:	tst.w	r1, #1048576	; 0x100000
    c03c:	it	eq
    c03e:	subeq	r4, #1
    c040:	beq.n	c032 <__aeabi_dmul+0x1a6>
    c042:	orr.w	r1, r1, r6
    c046:	teq	r5, #0
    c04a:	it	ne
    c04c:	bxne	lr
    c04e:	and.w	r6, r3, #2147483648	; 0x80000000
    c052:	lsls	r2, r2, #1
    c054:	adc.w	r3, r3, r3
    c058:	tst.w	r3, #1048576	; 0x100000
    c05c:	it	eq
    c05e:	subeq	r5, #1
    c060:	beq.n	c052 <__aeabi_dmul+0x1c6>
    c062:	orr.w	r3, r3, r6
    c066:	bx	lr
    c068:	teq	r4, ip
    c06c:	and.w	r5, ip, r3, lsr #20
    c070:	it	ne
    c072:	teqne	r5, ip
    c076:	beq.n	c092 <__aeabi_dmul+0x206>
    c078:	orrs.w	r6, r0, r1, lsl #1
    c07c:	it	ne
    c07e:	orrsne.w	r6, r2, r3, lsl #1
    c082:	bne.n	c028 <__aeabi_dmul+0x19c>
    c084:	eor.w	r1, r1, r3
    c088:	and.w	r1, r1, #2147483648	; 0x80000000
    c08c:	mov.w	r0, #0
    c090:	pop	{r4, r5, r6, pc}
    c092:	orrs.w	r6, r0, r1, lsl #1
    c096:	itte	eq
    c098:	moveq	r0, r2
    c09a:	moveq	r1, r3
    c09c:	orrsne.w	r6, r2, r3, lsl #1
    c0a0:	beq.n	c0d6 <__aeabi_dmul+0x24a>
    c0a2:	teq	r4, ip
    c0a6:	bne.n	c0ae <__aeabi_dmul+0x222>
    c0a8:	orrs.w	r6, r0, r1, lsl #12
    c0ac:	bne.n	c0d6 <__aeabi_dmul+0x24a>
    c0ae:	teq	r5, ip
    c0b2:	bne.n	c0c0 <__aeabi_dmul+0x234>
    c0b4:	orrs.w	r6, r2, r3, lsl #12
    c0b8:	itt	ne
    c0ba:	movne	r0, r2
    c0bc:	movne	r1, r3
    c0be:	bne.n	c0d6 <__aeabi_dmul+0x24a>
    c0c0:	eor.w	r1, r1, r3
    c0c4:	and.w	r1, r1, #2147483648	; 0x80000000
    c0c8:	orr.w	r1, r1, #2130706432	; 0x7f000000
    c0cc:	orr.w	r1, r1, #15728640	; 0xf00000
    c0d0:	mov.w	r0, #0
    c0d4:	pop	{r4, r5, r6, pc}
    c0d6:	orr.w	r1, r1, #2130706432	; 0x7f000000
    c0da:	orr.w	r1, r1, #16252928	; 0xf80000
    c0de:	pop	{r4, r5, r6, pc}

0000c0e0 <__aeabi_ddiv>:
    c0e0:	push	{r4, r5, r6, lr}
    c0e2:	mov.w	ip, #255	; 0xff
    c0e6:	orr.w	ip, ip, #1792	; 0x700
    c0ea:	ands.w	r4, ip, r1, lsr #20
    c0ee:	ittte	ne
    c0f0:	andsne.w	r5, ip, r3, lsr #20
    c0f4:	teqne	r4, ip
    c0f8:	teqne	r5, ip
    c0fc:	bleq	c24e <__aeabi_ddiv+0x16e>
    c100:	sub.w	r4, r4, r5
    c104:	eor.w	lr, r1, r3
    c108:	orrs.w	r5, r2, r3, lsl #12
    c10c:	mov.w	r1, r1, lsl #12
    c110:	beq.w	c224 <__aeabi_ddiv+0x144>
    c114:	mov.w	r3, r3, lsl #12
    c118:	mov.w	r5, #268435456	; 0x10000000
    c11c:	orr.w	r3, r5, r3, lsr #4
    c120:	orr.w	r3, r3, r2, lsr #24
    c124:	mov.w	r2, r2, lsl #8
    c128:	orr.w	r5, r5, r1, lsr #4
    c12c:	orr.w	r5, r5, r0, lsr #24
    c130:	mov.w	r6, r0, lsl #8
    c134:	and.w	r1, lr, #2147483648	; 0x80000000
    c138:	cmp	r5, r3
    c13a:	it	eq
    c13c:	cmpeq	r6, r2
    c13e:	adc.w	r4, r4, #253	; 0xfd
    c142:	add.w	r4, r4, #768	; 0x300
    c146:	bcs.n	c14e <__aeabi_ddiv+0x6e>
    c148:	lsrs	r3, r3, #1
    c14a:	mov.w	r2, r2, rrx
    c14e:	subs	r6, r6, r2
    c150:	sbc.w	r5, r5, r3
    c154:	lsrs	r3, r3, #1
    c156:	mov.w	r2, r2, rrx
    c15a:	mov.w	r0, #1048576	; 0x100000
    c15e:	mov.w	ip, #524288	; 0x80000
    c162:	subs.w	lr, r6, r2
    c166:	sbcs.w	lr, r5, r3
    c16a:	ittt	cs
    c16c:	subcs	r6, r6, r2
    c16e:	movcs	r5, lr
    c170:	orrcs.w	r0, r0, ip
    c174:	lsrs	r3, r3, #1
    c176:	mov.w	r2, r2, rrx
    c17a:	subs.w	lr, r6, r2
    c17e:	sbcs.w	lr, r5, r3
    c182:	ittt	cs
    c184:	subcs	r6, r6, r2
    c186:	movcs	r5, lr
    c188:	orrcs.w	r0, r0, ip, lsr #1
    c18c:	lsrs	r3, r3, #1
    c18e:	mov.w	r2, r2, rrx
    c192:	subs.w	lr, r6, r2
    c196:	sbcs.w	lr, r5, r3
    c19a:	ittt	cs
    c19c:	subcs	r6, r6, r2
    c19e:	movcs	r5, lr
    c1a0:	orrcs.w	r0, r0, ip, lsr #2
    c1a4:	lsrs	r3, r3, #1
    c1a6:	mov.w	r2, r2, rrx
    c1aa:	subs.w	lr, r6, r2
    c1ae:	sbcs.w	lr, r5, r3
    c1b2:	ittt	cs
    c1b4:	subcs	r6, r6, r2
    c1b6:	movcs	r5, lr
    c1b8:	orrcs.w	r0, r0, ip, lsr #3
    c1bc:	orrs.w	lr, r5, r6
    c1c0:	beq.n	c1f4 <__aeabi_ddiv+0x114>
    c1c2:	mov.w	r5, r5, lsl #4
    c1c6:	orr.w	r5, r5, r6, lsr #28
    c1ca:	mov.w	r6, r6, lsl #4
    c1ce:	mov.w	r3, r3, lsl #3
    c1d2:	orr.w	r3, r3, r2, lsr #29
    c1d6:	mov.w	r2, r2, lsl #3
    c1da:	movs.w	ip, ip, lsr #4
    c1de:	bne.n	c162 <__aeabi_ddiv+0x82>
    c1e0:	tst.w	r1, #1048576	; 0x100000
    c1e4:	bne.n	c1fe <__aeabi_ddiv+0x11e>
    c1e6:	orr.w	r1, r1, r0
    c1ea:	mov.w	r0, #0
    c1ee:	mov.w	ip, #2147483648	; 0x80000000
    c1f2:	b.n	c162 <__aeabi_ddiv+0x82>
    c1f4:	tst.w	r1, #1048576	; 0x100000
    c1f8:	itt	eq
    c1fa:	orreq	r1, r0
    c1fc:	moveq	r0, #0
    c1fe:	subs.w	ip, r4, #253	; 0xfd
    c202:	it	hi
    c204:	cmphi.w	ip, #1792	; 0x700
    c208:	bhi.w	bf6a <__aeabi_dmul+0xde>
    c20c:	subs.w	ip, r5, r3
    c210:	itt	eq
    c212:	subseq.w	ip, r6, r2
    c216:	movseq.w	ip, r0, lsr #1
    c21a:	adcs.w	r0, r0, #0
    c21e:	adc.w	r1, r1, r4, lsl #20
    c222:	pop	{r4, r5, r6, pc}
    c224:	and.w	lr, lr, #2147483648	; 0x80000000
    c228:	orr.w	r1, lr, r1, lsr #12
    c22c:	adds.w	r4, r4, ip, lsr #1
    c230:	ittt	gt
    c232:	rsbsgt	r5, r4, ip
    c236:	orrgt.w	r1, r1, r4, lsl #20
    c23a:	popgt	{r4, r5, r6, pc}
    c23c:	orr.w	r1, r1, #1048576	; 0x100000
    c240:	mov.w	lr, #0
    c244:	subs	r4, #1
    c246:	b.n	bf6a <__aeabi_dmul+0xde>
    c248:	orr.w	lr, r5, r6
    c24c:	b.n	bf6a <__aeabi_dmul+0xde>
    c24e:	and.w	r5, ip, r3, lsr #20
    c252:	teq	r4, ip
    c256:	it	eq
    c258:	teqeq	r5, ip
    c25c:	beq.w	c0d6 <__aeabi_dmul+0x24a>
    c260:	teq	r4, ip
    c264:	bne.n	c27c <__aeabi_ddiv+0x19c>
    c266:	orrs.w	r4, r0, r1, lsl #12
    c26a:	bne.w	c0d6 <__aeabi_dmul+0x24a>
    c26e:	teq	r5, ip
    c272:	bne.w	c0c0 <__aeabi_dmul+0x234>
    c276:	mov	r0, r2
    c278:	mov	r1, r3
    c27a:	b.n	c0d6 <__aeabi_dmul+0x24a>
    c27c:	teq	r5, ip
    c280:	bne.n	c290 <__aeabi_ddiv+0x1b0>
    c282:	orrs.w	r5, r2, r3, lsl #12
    c286:	beq.w	c084 <__aeabi_dmul+0x1f8>
    c28a:	mov	r0, r2
    c28c:	mov	r1, r3
    c28e:	b.n	c0d6 <__aeabi_dmul+0x24a>
    c290:	orrs.w	r6, r0, r1, lsl #1
    c294:	it	ne
    c296:	orrsne.w	r6, r2, r3, lsl #1
    c29a:	bne.w	c028 <__aeabi_dmul+0x19c>
    c29e:	orrs.w	r4, r0, r1, lsl #1
    c2a2:	bne.w	c0c0 <__aeabi_dmul+0x234>
    c2a6:	orrs.w	r5, r2, r3, lsl #1
    c2aa:	bne.w	c084 <__aeabi_dmul+0x1f8>
    c2ae:	b.n	c0d6 <__aeabi_dmul+0x24a>

0000c2b0 <__gedf2>:
    c2b0:	mov.w	ip, #4294967295
    c2b4:	b.n	c2c4 <__cmpdf2+0x4>
    c2b6:	nop

0000c2b8 <__ledf2>:
    c2b8:	mov.w	ip, #1
    c2bc:	b.n	c2c4 <__cmpdf2+0x4>
    c2be:	nop

0000c2c0 <__cmpdf2>:
    c2c0:	mov.w	ip, #1
    c2c4:	str.w	ip, [sp, #-4]!
    c2c8:	mov.w	ip, r1, lsl #1
    c2cc:	mvns.w	ip, ip, asr #21
    c2d0:	mov.w	ip, r3, lsl #1
    c2d4:	it	ne
    c2d6:	mvnsne.w	ip, ip, asr #21
    c2da:	beq.n	c314 <__cmpdf2+0x54>
    c2dc:	add	sp, #4
    c2de:	orrs.w	ip, r0, r1, lsl #1
    c2e2:	ite	eq
    c2e4:	orrseq.w	ip, r2, r3, lsl #1
    c2e8:	teqne	r1, r3
    c2ec:	ittt	eq
    c2ee:	teqeq	r0, r2
    c2f2:	moveq	r0, #0
    c2f4:	bxeq	lr
    c2f6:	cmn.w	r0, #0
    c2fa:	teq	r1, r3
    c2fe:	it	pl
    c300:	cmppl	r1, r3
    c302:	it	eq
    c304:	cmpeq	r0, r2
    c306:	ite	cs
    c308:	asrcs	r0, r3, #31
    c30a:	mvncc.w	r0, r3, asr #31
    c30e:	orr.w	r0, r0, #1
    c312:	bx	lr
    c314:	mov.w	ip, r1, lsl #1
    c318:	mvns.w	ip, ip, asr #21
    c31c:	bne.n	c324 <__cmpdf2+0x64>
    c31e:	orrs.w	ip, r0, r1, lsl #12
    c322:	bne.n	c334 <__cmpdf2+0x74>
    c324:	mov.w	ip, r3, lsl #1
    c328:	mvns.w	ip, ip, asr #21
    c32c:	bne.n	c2dc <__cmpdf2+0x1c>
    c32e:	orrs.w	ip, r2, r3, lsl #12
    c332:	beq.n	c2dc <__cmpdf2+0x1c>
    c334:	ldr.w	r0, [sp], #4
    c338:	bx	lr
    c33a:	nop

0000c33c <__aeabi_cdrcmple>:
    c33c:	mov	ip, r0
    c33e:	mov	r0, r2
    c340:	mov	r2, ip
    c342:	mov	ip, r1
    c344:	mov	r1, r3
    c346:	mov	r3, ip
    c348:	b.n	c34c <__aeabi_cdcmpeq>
    c34a:	nop

0000c34c <__aeabi_cdcmpeq>:
    c34c:	push	{r0, lr}
    c34e:	bl	c2c0 <__cmpdf2>
    c352:	cmp	r0, #0
    c354:	it	mi
    c356:	cmnmi.w	r0, #0
    c35a:	pop	{r0, pc}

0000c35c <__aeabi_dcmpeq>:
    c35c:	str.w	lr, [sp, #-8]!
    c360:	bl	c34c <__aeabi_cdcmpeq>
    c364:	ite	eq
    c366:	moveq	r0, #1
    c368:	movne	r0, #0
    c36a:	ldr.w	pc, [sp], #8
    c36e:	nop

0000c370 <__aeabi_dcmplt>:
    c370:	str.w	lr, [sp, #-8]!
    c374:	bl	c34c <__aeabi_cdcmpeq>
    c378:	ite	cc
    c37a:	movcc	r0, #1
    c37c:	movcs	r0, #0
    c37e:	ldr.w	pc, [sp], #8
    c382:	nop

0000c384 <__aeabi_dcmple>:
    c384:	str.w	lr, [sp, #-8]!
    c388:	bl	c34c <__aeabi_cdcmpeq>
    c38c:	ite	ls
    c38e:	movls	r0, #1
    c390:	movhi	r0, #0
    c392:	ldr.w	pc, [sp], #8
    c396:	nop

0000c398 <__aeabi_dcmpge>:
    c398:	str.w	lr, [sp, #-8]!
    c39c:	bl	c33c <__aeabi_cdrcmple>
    c3a0:	ite	ls
    c3a2:	movls	r0, #1
    c3a4:	movhi	r0, #0
    c3a6:	ldr.w	pc, [sp], #8
    c3aa:	nop

0000c3ac <__aeabi_dcmpgt>:
    c3ac:	str.w	lr, [sp, #-8]!
    c3b0:	bl	c33c <__aeabi_cdrcmple>
    c3b4:	ite	cc
    c3b6:	movcc	r0, #1
    c3b8:	movcs	r0, #0
    c3ba:	ldr.w	pc, [sp], #8
    c3be:	nop

0000c3c0 <__aeabi_dcmpun>:
    c3c0:	mov.w	ip, r1, lsl #1
    c3c4:	mvns.w	ip, ip, asr #21
    c3c8:	bne.n	c3d0 <__aeabi_dcmpun+0x10>
    c3ca:	orrs.w	ip, r0, r1, lsl #12
    c3ce:	bne.n	c3e6 <__aeabi_dcmpun+0x26>
    c3d0:	mov.w	ip, r3, lsl #1
    c3d4:	mvns.w	ip, ip, asr #21
    c3d8:	bne.n	c3e0 <__aeabi_dcmpun+0x20>
    c3da:	orrs.w	ip, r2, r3, lsl #12
    c3de:	bne.n	c3e6 <__aeabi_dcmpun+0x26>
    c3e0:	mov.w	r0, #0
    c3e4:	bx	lr
    c3e6:	mov.w	r0, #1
    c3ea:	bx	lr

0000c3ec <__aeabi_d2iz>:
    c3ec:	mov.w	r2, r1, lsl #1
    c3f0:	adds.w	r2, r2, #2097152	; 0x200000
    c3f4:	bcs.n	c422 <__aeabi_d2iz+0x36>
    c3f6:	bpl.n	c41c <__aeabi_d2iz+0x30>
    c3f8:	mvn.w	r3, #992	; 0x3e0
    c3fc:	subs.w	r2, r3, r2, asr #21
    c400:	bls.n	c428 <__aeabi_d2iz+0x3c>
    c402:	mov.w	r3, r1, lsl #11
    c406:	orr.w	r3, r3, #2147483648	; 0x80000000
    c40a:	orr.w	r3, r3, r0, lsr #21
    c40e:	tst.w	r1, #2147483648	; 0x80000000
    c412:	lsr.w	r0, r3, r2
    c416:	it	ne
    c418:	negne	r0, r0
    c41a:	bx	lr
    c41c:	mov.w	r0, #0
    c420:	bx	lr
    c422:	orrs.w	r0, r0, r1, lsl #12
    c426:	bne.n	c434 <__aeabi_d2iz+0x48>
    c428:	ands.w	r0, r1, #2147483648	; 0x80000000
    c42c:	it	eq
    c42e:	mvneq.w	r0, #2147483648	; 0x80000000
    c432:	bx	lr
    c434:	mov.w	r0, #0
    c438:	bx	lr
    c43a:	nop

0000c43c <__aeabi_uldivmod>:
    c43c:	cbnz	r3, c454 <__aeabi_uldivmod+0x18>
    c43e:	cbnz	r2, c454 <__aeabi_uldivmod+0x18>
    c440:	cmp	r1, #0
    c442:	it	eq
    c444:	cmpeq	r0, #0
    c446:	itt	ne
    c448:	movne.w	r1, #4294967295
    c44c:	movne.w	r0, #4294967295
    c450:	b.w	c750 <__aeabi_idiv0>
    c454:	sub.w	ip, sp, #8
    c458:	strd	ip, lr, [sp, #-16]!
    c45c:	bl	c46c <__udivmoddi4>
    c460:	ldr.w	lr, [sp, #4]
    c464:	ldrd	r2, r3, [sp, #8]
    c468:	add	sp, #16
    c46a:	bx	lr

0000c46c <__udivmoddi4>:
    c46c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c470:	mov	ip, r1
    c472:	mov	r6, r1
    c474:	mov	r4, r0
    c476:	ldr	r5, [sp, #32]
    c478:	cmp	r3, #0
    c47a:	bne.n	c51e <__udivmoddi4+0xb2>
    c47c:	cmp	r2, r1
    c47e:	mov	r7, r2
    c480:	bls.n	c55c <__udivmoddi4+0xf0>
    c482:	clz	lr, r2
    c486:	cmp.w	lr, #0
    c48a:	beq.n	c4a4 <__udivmoddi4+0x38>
    c48c:	rsb	r4, lr, #32
    c490:	lsr.w	r4, r0, r4
    c494:	lsl.w	r6, r1, lr
    c498:	orr.w	ip, r4, r6
    c49c:	lsl.w	r7, r2, lr
    c4a0:	lsl.w	r4, r0, lr
    c4a4:	mov.w	r9, r7, lsr #16
    c4a8:	lsrs	r2, r4, #16
    c4aa:	udiv	r0, ip, r9
    c4ae:	uxth.w	r8, r7
    c4b2:	mls	r6, r9, r0, ip
    c4b6:	orr.w	r6, r2, r6, lsl #16
    c4ba:	mul.w	r3, r0, r8
    c4be:	cmp	r3, r6
    c4c0:	bls.n	c4d6 <__udivmoddi4+0x6a>
    c4c2:	adds	r6, r6, r7
    c4c4:	add.w	r2, r0, #4294967295
    c4c8:	bcs.w	c710 <__udivmoddi4+0x2a4>
    c4cc:	cmp	r3, r6
    c4ce:	bls.w	c710 <__udivmoddi4+0x2a4>
    c4d2:	subs	r0, #2
    c4d4:	add	r6, r7
    c4d6:	subs	r6, r6, r3
    c4d8:	uxth	r2, r4
    c4da:	udiv	r3, r6, r9
    c4de:	mls	r6, r9, r3, r6
    c4e2:	orr.w	r4, r2, r6, lsl #16
    c4e6:	mul.w	r8, r3, r8
    c4ea:	cmp	r8, r4
    c4ec:	bls.n	c502 <__udivmoddi4+0x96>
    c4ee:	adds	r4, r4, r7
    c4f0:	add.w	r2, r3, #4294967295
    c4f4:	bcs.w	c70c <__udivmoddi4+0x2a0>
    c4f8:	cmp	r8, r4
    c4fa:	bls.w	c70c <__udivmoddi4+0x2a0>
    c4fe:	subs	r3, #2
    c500:	add	r4, r7
    c502:	rsb	r4, r8, r4
    c506:	orr.w	r0, r3, r0, lsl #16
    c50a:	movs	r1, #0
    c50c:	cmp	r5, #0
    c50e:	beq.n	c5d6 <__udivmoddi4+0x16a>
    c510:	lsr.w	r4, r4, lr
    c514:	movs	r3, #0
    c516:	str	r4, [r5, #0]
    c518:	str	r3, [r5, #4]
    c51a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c51e:	cmp	r3, r1
    c520:	bls.n	c532 <__udivmoddi4+0xc6>
    c522:	cmp	r5, #0
    c524:	beq.n	c5d2 <__udivmoddi4+0x166>
    c526:	movs	r1, #0
    c528:	stmia.w	r5, {r0, r6}
    c52c:	mov	r0, r1
    c52e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c532:	clz	r1, r3
    c536:	cmp	r1, #0
    c538:	bne.w	c65c <__udivmoddi4+0x1f0>
    c53c:	cmp	r3, r6
    c53e:	bcc.n	c546 <__udivmoddi4+0xda>
    c540:	cmp	r2, r0
    c542:	bhi.w	c736 <__udivmoddi4+0x2ca>
    c546:	subs	r4, r0, r2
    c548:	sbc.w	r6, r6, r3
    c54c:	movs	r0, #1
    c54e:	mov	ip, r6
    c550:	cmp	r5, #0
    c552:	beq.n	c5d6 <__udivmoddi4+0x16a>
    c554:	stmia.w	r5, {r4, ip}
    c558:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c55c:	cbnz	r2, c564 <__udivmoddi4+0xf8>
    c55e:	movs	r7, #1
    c560:	udiv	r7, r7, r2
    c564:	clz	lr, r7
    c568:	cmp.w	lr, #0
    c56c:	bne.n	c5da <__udivmoddi4+0x16e>
    c56e:	subs	r3, r6, r7
    c570:	mov.w	r8, r7, lsr #16
    c574:	uxth.w	ip, r7
    c578:	movs	r1, #1
    c57a:	udiv	r0, r3, r8
    c57e:	lsrs	r2, r4, #16
    c580:	mls	r6, r8, r0, r3
    c584:	orr.w	r6, r2, r6, lsl #16
    c588:	mul.w	r3, ip, r0
    c58c:	cmp	r3, r6
    c58e:	bls.n	c5a0 <__udivmoddi4+0x134>
    c590:	adds	r6, r6, r7
    c592:	add.w	r2, r0, #4294967295
    c596:	bcs.n	c59e <__udivmoddi4+0x132>
    c598:	cmp	r3, r6
    c59a:	bhi.w	c73a <__udivmoddi4+0x2ce>
    c59e:	mov	r0, r2
    c5a0:	subs	r6, r6, r3
    c5a2:	uxth	r2, r4
    c5a4:	udiv	r3, r6, r8
    c5a8:	mls	r6, r8, r3, r6
    c5ac:	orr.w	r4, r2, r6, lsl #16
    c5b0:	mul.w	ip, ip, r3
    c5b4:	cmp	ip, r4
    c5b6:	bls.n	c5c8 <__udivmoddi4+0x15c>
    c5b8:	adds	r4, r4, r7
    c5ba:	add.w	r2, r3, #4294967295
    c5be:	bcs.n	c5c6 <__udivmoddi4+0x15a>
    c5c0:	cmp	ip, r4
    c5c2:	bhi.w	c730 <__udivmoddi4+0x2c4>
    c5c6:	mov	r3, r2
    c5c8:	rsb	r4, ip, r4
    c5cc:	orr.w	r0, r3, r0, lsl #16
    c5d0:	b.n	c50c <__udivmoddi4+0xa0>
    c5d2:	mov	r1, r5
    c5d4:	mov	r0, r5
    c5d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c5da:	rsb	r1, lr, #32
    c5de:	lsl.w	r3, r6, lr
    c5e2:	lsl.w	r7, r7, lr
    c5e6:	lsr.w	r9, r0, r1
    c5ea:	mov.w	r8, r7, lsr #16
    c5ee:	lsrs	r6, r1
    c5f0:	orr.w	r9, r9, r3
    c5f4:	udiv	sl, r6, r8
    c5f8:	mov.w	r4, r9, lsr #16
    c5fc:	mls	r6, r8, sl, r6
    c600:	uxth.w	ip, r7
    c604:	orr.w	r3, r4, r6, lsl #16
    c608:	mul.w	r2, sl, ip
    c60c:	cmp	r2, r3
    c60e:	lsl.w	r4, r0, lr
    c612:	bls.n	c62a <__udivmoddi4+0x1be>
    c614:	adds	r3, r3, r7
    c616:	add.w	r1, sl, #4294967295
    c61a:	bcs.w	c72c <__udivmoddi4+0x2c0>
    c61e:	cmp	r2, r3
    c620:	bls.w	c72c <__udivmoddi4+0x2c0>
    c624:	sub.w	sl, sl, #2
    c628:	add	r3, r7
    c62a:	subs	r3, r3, r2
    c62c:	uxth.w	r9, r9
    c630:	udiv	r1, r3, r8
    c634:	mls	r3, r8, r1, r3
    c638:	orr.w	r3, r9, r3, lsl #16
    c63c:	mul.w	r6, r1, ip
    c640:	cmp	r6, r3
    c642:	bls.n	c654 <__udivmoddi4+0x1e8>
    c644:	adds	r3, r3, r7
    c646:	add.w	r2, r1, #4294967295
    c64a:	bcs.n	c724 <__udivmoddi4+0x2b8>
    c64c:	cmp	r6, r3
    c64e:	bls.n	c724 <__udivmoddi4+0x2b8>
    c650:	subs	r1, #2
    c652:	add	r3, r7
    c654:	subs	r3, r3, r6
    c656:	orr.w	r1, r1, sl, lsl #16
    c65a:	b.n	c57a <__udivmoddi4+0x10e>
    c65c:	rsb	lr, r1, #32
    c660:	lsr.w	r4, r2, lr
    c664:	lsls	r3, r1
    c666:	orrs	r3, r4
    c668:	lsr.w	r7, r0, lr
    c66c:	lsl.w	r4, r6, r1
    c670:	mov.w	ip, r3, lsr #16
    c674:	lsr.w	r6, r6, lr
    c678:	orrs	r4, r7
    c67a:	udiv	r9, r6, ip
    c67e:	lsrs	r7, r4, #16
    c680:	mls	r6, ip, r9, r6
    c684:	uxth.w	r8, r3
    c688:	orr.w	r6, r7, r6, lsl #16
    c68c:	mul.w	r7, r9, r8
    c690:	cmp	r7, r6
    c692:	lsl.w	r2, r2, r1
    c696:	lsl.w	sl, r0, r1
    c69a:	bls.n	c6ae <__udivmoddi4+0x242>
    c69c:	adds	r6, r6, r3
    c69e:	add.w	r0, r9, #4294967295
    c6a2:	bcs.n	c728 <__udivmoddi4+0x2bc>
    c6a4:	cmp	r7, r6
    c6a6:	bls.n	c728 <__udivmoddi4+0x2bc>
    c6a8:	sub.w	r9, r9, #2
    c6ac:	add	r6, r3
    c6ae:	subs	r6, r6, r7
    c6b0:	uxth	r0, r4
    c6b2:	udiv	r4, r6, ip
    c6b6:	mls	r6, ip, r4, r6
    c6ba:	orr.w	r7, r0, r6, lsl #16
    c6be:	mul.w	r8, r4, r8
    c6c2:	cmp	r8, r7
    c6c4:	bls.n	c6d6 <__udivmoddi4+0x26a>
    c6c6:	adds	r7, r7, r3
    c6c8:	add.w	r0, r4, #4294967295
    c6cc:	bcs.n	c720 <__udivmoddi4+0x2b4>
    c6ce:	cmp	r8, r7
    c6d0:	bls.n	c720 <__udivmoddi4+0x2b4>
    c6d2:	subs	r4, #2
    c6d4:	add	r7, r3
    c6d6:	orr.w	r0, r4, r9, lsl #16
    c6da:	rsb	r7, r8, r7
    c6de:	umull	r8, r9, r0, r2
    c6e2:	cmp	r7, r9
    c6e4:	mov	r4, r8
    c6e6:	mov	r6, r9
    c6e8:	bcc.n	c714 <__udivmoddi4+0x2a8>
    c6ea:	beq.n	c740 <__udivmoddi4+0x2d4>
    c6ec:	cbz	r5, c748 <__udivmoddi4+0x2dc>
    c6ee:	subs.w	r3, sl, r4
    c6f2:	sbc.w	r7, r7, r6
    c6f6:	lsl.w	lr, r7, lr
    c6fa:	lsrs	r3, r1
    c6fc:	lsrs	r7, r1
    c6fe:	orr.w	r3, lr, r3
    c702:	stmia.w	r5, {r3, r7}
    c706:	movs	r1, #0
    c708:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c70c:	mov	r3, r2
    c70e:	b.n	c502 <__udivmoddi4+0x96>
    c710:	mov	r0, r2
    c712:	b.n	c4d6 <__udivmoddi4+0x6a>
    c714:	subs.w	r4, r8, r2
    c718:	sbc.w	r6, r9, r3
    c71c:	subs	r0, #1
    c71e:	b.n	c6ec <__udivmoddi4+0x280>
    c720:	mov	r4, r0
    c722:	b.n	c6d6 <__udivmoddi4+0x26a>
    c724:	mov	r1, r2
    c726:	b.n	c654 <__udivmoddi4+0x1e8>
    c728:	mov	r9, r0
    c72a:	b.n	c6ae <__udivmoddi4+0x242>
    c72c:	mov	sl, r1
    c72e:	b.n	c62a <__udivmoddi4+0x1be>
    c730:	subs	r3, #2
    c732:	add	r4, r7
    c734:	b.n	c5c8 <__udivmoddi4+0x15c>
    c736:	mov	r0, r1
    c738:	b.n	c550 <__udivmoddi4+0xe4>
    c73a:	subs	r0, #2
    c73c:	add	r6, r7
    c73e:	b.n	c5a0 <__udivmoddi4+0x134>
    c740:	cmp	sl, r8
    c742:	bcc.n	c714 <__udivmoddi4+0x2a8>
    c744:	mov	r6, r7
    c746:	b.n	c6ec <__udivmoddi4+0x280>
    c748:	mov	r1, r5
    c74a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c74e:	nop

0000c750 <__aeabi_idiv0>:
    c750:	bx	lr
    c752:	nop

0000c754 <__cxa_atexit>:
    c754:	mov	r3, r2
    c756:	mov	r2, r1
    c758:	mov	r1, r0
    c75a:	movs	r0, #2
    c75c:	b.w	d728 <__register_exitproc>

0000c760 <__errno>:
    c760:	ldr	r3, [pc, #4]	; (c768 <__errno+0x8>)
    c762:	ldr	r0, [r3, #0]
    c764:	bx	lr
    c766:	nop
    c768:	.word	0x20001088

0000c76c <__libc_init_array>:
    c76c:	push	{r4, r5, r6, lr}
    c76e:	ldr	r6, [pc, #60]	; (c7ac <__libc_init_array+0x40>)
    c770:	ldr	r5, [pc, #60]	; (c7b0 <__libc_init_array+0x44>)
    c772:	subs	r6, r6, r5
    c774:	asrs	r6, r6, #2
    c776:	it	ne
    c778:	movne	r4, #0
    c77a:	beq.n	c788 <__libc_init_array+0x1c>
    c77c:	adds	r4, #1
    c77e:	ldr.w	r3, [r5], #4
    c782:	blx	r3
    c784:	cmp	r6, r4
    c786:	bne.n	c77c <__libc_init_array+0x10>
    c788:	ldr	r6, [pc, #40]	; (c7b4 <__libc_init_array+0x48>)
    c78a:	ldr	r5, [pc, #44]	; (c7b8 <__libc_init_array+0x4c>)
    c78c:	subs	r6, r6, r5
    c78e:	bl	10880 <___init_veneer>
    c792:	asrs	r6, r6, #2
    c794:	it	ne
    c796:	movne	r4, #0
    c798:	beq.n	c7a8 <__libc_init_array+0x3c>
    c79a:	adds	r4, #1
    c79c:	ldr.w	r3, [r5], #4
    c7a0:	blx	r3
    c7a2:	cmp	r6, r4
    c7a4:	bne.n	c79a <__libc_init_array+0x2e>
    c7a6:	pop	{r4, r5, r6, pc}
    c7a8:	pop	{r4, r5, r6, pc}
    c7aa:	nop
    c7ac:	.word	0x60001ba8
    c7b0:	.word	0x60001ba8
    c7b4:	.word	0x60001bb4
    c7b8:	.word	0x60001ba8

0000c7bc <malloc>:
    c7bc:	ldr	r3, [pc, #8]	; (c7c8 <malloc+0xc>)
    c7be:	mov	r1, r0
    c7c0:	ldr	r0, [r3, #0]
    c7c2:	b.w	c7dc <_malloc_r>
    c7c6:	nop
    c7c8:	.word	0x20001088

0000c7cc <free>:
    c7cc:	ldr	r3, [pc, #8]	; (c7d8 <free+0xc>)
    c7ce:	mov	r1, r0
    c7d0:	ldr	r0, [r3, #0]
    c7d2:	b.w	d868 <_free_r>
    c7d6:	nop
    c7d8:	.word	0x20001088

0000c7dc <_malloc_r>:
    c7dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7e0:	add.w	r5, r1, #11
    c7e4:	cmp	r5, #22
    c7e6:	sub	sp, #12
    c7e8:	mov	r6, r0
    c7ea:	bls.w	c92c <_malloc_r+0x150>
    c7ee:	bics.w	r5, r5, #7
    c7f2:	bmi.w	c974 <_malloc_r+0x198>
    c7f6:	cmp	r1, r5
    c7f8:	bhi.w	c974 <_malloc_r+0x198>
    c7fc:	bl	cfe8 <__malloc_lock>
    c800:	cmp.w	r5, #504	; 0x1f8
    c804:	bcc.w	cd40 <_malloc_r+0x564>
    c808:	lsrs	r3, r5, #9
    c80a:	beq.w	c982 <_malloc_r+0x1a6>
    c80e:	cmp	r3, #4
    c810:	bhi.w	cb1a <_malloc_r+0x33e>
    c814:	lsrs	r0, r5, #6
    c816:	add.w	lr, r0, #57	; 0x39
    c81a:	mov.w	r3, lr, lsl #1
    c81e:	adds	r0, #56	; 0x38
    c820:	ldr	r7, [pc, #784]	; (cb34 <_malloc_r+0x358>)
    c822:	add.w	r3, r7, r3, lsl #2
    c826:	sub.w	r1, r3, #8
    c82a:	ldr	r4, [r3, #4]
    c82c:	cmp	r1, r4
    c82e:	bne.n	c840 <_malloc_r+0x64>
    c830:	b.n	c98c <_malloc_r+0x1b0>
    c832:	cmp	r2, #0
    c834:	bge.w	c990 <_malloc_r+0x1b4>
    c838:	ldr	r4, [r4, #12]
    c83a:	cmp	r1, r4
    c83c:	beq.w	c98c <_malloc_r+0x1b0>
    c840:	ldr	r3, [r4, #4]
    c842:	bic.w	r3, r3, #3
    c846:	subs	r2, r3, r5
    c848:	cmp	r2, #15
    c84a:	ble.n	c832 <_malloc_r+0x56>
    c84c:	ldr	r1, [pc, #740]	; (cb34 <_malloc_r+0x358>)
    c84e:	ldr	r4, [r7, #16]
    c850:	add.w	lr, r1, #8
    c854:	cmp	r4, lr
    c856:	beq.w	cbc0 <_malloc_r+0x3e4>
    c85a:	ldr	r3, [r4, #4]
    c85c:	bic.w	r3, r3, #3
    c860:	subs	r2, r3, r5
    c862:	cmp	r2, #15
    c864:	bgt.w	cb9a <_malloc_r+0x3be>
    c868:	cmp	r2, #0
    c86a:	str.w	lr, [r1, #20]
    c86e:	str.w	lr, [r1, #16]
    c872:	bge.w	c9b2 <_malloc_r+0x1d6>
    c876:	cmp.w	r3, #512	; 0x200
    c87a:	bcs.w	cb4c <_malloc_r+0x370>
    c87e:	lsrs	r3, r3, #3
    c880:	add.w	ip, r3, #1
    c884:	movs	r2, #1
    c886:	asrs	r3, r3, #2
    c888:	lsl.w	r3, r2, r3
    c88c:	ldr	r2, [r1, #4]
    c88e:	ldr.w	r8, [r1, ip, lsl #3]
    c892:	str.w	r8, [r4, #8]
    c896:	add.w	r9, r1, ip, lsl #3
    c89a:	orrs	r2, r3
    c89c:	sub.w	r3, r9, #8
    c8a0:	str	r3, [r4, #12]
    c8a2:	str	r2, [r1, #4]
    c8a4:	str.w	r4, [r1, ip, lsl #3]
    c8a8:	str.w	r4, [r8, #12]
    c8ac:	asrs	r3, r0, #2
    c8ae:	movs	r4, #1
    c8b0:	lsls	r4, r3
    c8b2:	cmp	r4, r2
    c8b4:	bhi.w	c9cc <_malloc_r+0x1f0>
    c8b8:	tst	r4, r2
    c8ba:	bne.n	c8ca <_malloc_r+0xee>
    c8bc:	bic.w	r0, r0, #3
    c8c0:	lsls	r4, r4, #1
    c8c2:	tst	r4, r2
    c8c4:	add.w	r0, r0, #4
    c8c8:	beq.n	c8c0 <_malloc_r+0xe4>
    c8ca:	add.w	r9, r7, r0, lsl #3
    c8ce:	mov	ip, r9
    c8d0:	mov	r8, r0
    c8d2:	ldr.w	r1, [ip, #12]
    c8d6:	cmp	ip, r1
    c8d8:	bne.n	c8ea <_malloc_r+0x10e>
    c8da:	b.n	cbc4 <_malloc_r+0x3e8>
    c8dc:	cmp	r2, #0
    c8de:	bge.w	cbe4 <_malloc_r+0x408>
    c8e2:	ldr	r1, [r1, #12]
    c8e4:	cmp	ip, r1
    c8e6:	beq.w	cbc4 <_malloc_r+0x3e8>
    c8ea:	ldr	r3, [r1, #4]
    c8ec:	bic.w	r3, r3, #3
    c8f0:	subs	r2, r3, r5
    c8f2:	cmp	r2, #15
    c8f4:	ble.n	c8dc <_malloc_r+0x100>
    c8f6:	mov	r4, r1
    c8f8:	ldr.w	ip, [r1, #12]
    c8fc:	ldr.w	r8, [r4, #8]!
    c900:	adds	r3, r1, r5
    c902:	orr.w	r5, r5, #1
    c906:	str	r5, [r1, #4]
    c908:	orr.w	r1, r2, #1
    c90c:	str.w	ip, [r8, #12]
    c910:	mov	r0, r6
    c912:	str.w	r8, [ip, #8]
    c916:	str	r3, [r7, #20]
    c918:	str	r3, [r7, #16]
    c91a:	str.w	lr, [r3, #12]
    c91e:	str.w	lr, [r3, #8]
    c922:	str	r1, [r3, #4]
    c924:	str	r2, [r3, r2]
    c926:	bl	cfec <__malloc_unlock>
    c92a:	b.n	c96c <_malloc_r+0x190>
    c92c:	cmp	r1, #16
    c92e:	bhi.n	c974 <_malloc_r+0x198>
    c930:	bl	cfe8 <__malloc_lock>
    c934:	movs	r5, #16
    c936:	movs	r3, #6
    c938:	movs	r0, #2
    c93a:	ldr	r7, [pc, #504]	; (cb34 <_malloc_r+0x358>)
    c93c:	add.w	r3, r7, r3, lsl #2
    c940:	sub.w	r2, r3, #8
    c944:	ldr	r4, [r3, #4]
    c946:	cmp	r4, r2
    c948:	beq.w	cbd6 <_malloc_r+0x3fa>
    c94c:	ldr	r3, [r4, #4]
    c94e:	ldr	r1, [r4, #12]
    c950:	ldr	r5, [r4, #8]
    c952:	bic.w	r3, r3, #3
    c956:	add	r3, r4
    c958:	mov	r0, r6
    c95a:	ldr	r2, [r3, #4]
    c95c:	str	r1, [r5, #12]
    c95e:	orr.w	r2, r2, #1
    c962:	str	r5, [r1, #8]
    c964:	str	r2, [r3, #4]
    c966:	bl	cfec <__malloc_unlock>
    c96a:	adds	r4, #8
    c96c:	mov	r0, r4
    c96e:	add	sp, #12
    c970:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c974:	movs	r4, #0
    c976:	movs	r3, #12
    c978:	mov	r0, r4
    c97a:	str	r3, [r6, #0]
    c97c:	add	sp, #12
    c97e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c982:	movs	r3, #128	; 0x80
    c984:	mov.w	lr, #64	; 0x40
    c988:	movs	r0, #63	; 0x3f
    c98a:	b.n	c820 <_malloc_r+0x44>
    c98c:	mov	r0, lr
    c98e:	b.n	c84c <_malloc_r+0x70>
    c990:	add	r3, r4
    c992:	ldr	r1, [r4, #12]
    c994:	ldr	r2, [r3, #4]
    c996:	ldr	r5, [r4, #8]
    c998:	orr.w	r2, r2, #1
    c99c:	str	r1, [r5, #12]
    c99e:	mov	r0, r6
    c9a0:	str	r5, [r1, #8]
    c9a2:	str	r2, [r3, #4]
    c9a4:	bl	cfec <__malloc_unlock>
    c9a8:	adds	r4, #8
    c9aa:	mov	r0, r4
    c9ac:	add	sp, #12
    c9ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9b2:	add	r3, r4
    c9b4:	mov	r0, r6
    c9b6:	ldr	r2, [r3, #4]
    c9b8:	orr.w	r2, r2, #1
    c9bc:	str	r2, [r3, #4]
    c9be:	bl	cfec <__malloc_unlock>
    c9c2:	adds	r4, #8
    c9c4:	mov	r0, r4
    c9c6:	add	sp, #12
    c9c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9cc:	ldr	r4, [r7, #8]
    c9ce:	ldr	r3, [r4, #4]
    c9d0:	bic.w	r8, r3, #3
    c9d4:	cmp	r8, r5
    c9d6:	bcc.n	c9e2 <_malloc_r+0x206>
    c9d8:	rsb	r3, r5, r8
    c9dc:	cmp	r3, #15
    c9de:	bgt.w	cafa <_malloc_r+0x31e>
    c9e2:	ldr	r3, [pc, #340]	; (cb38 <_malloc_r+0x35c>)
    c9e4:	ldr.w	r9, [pc, #352]	; cb48 <_malloc_r+0x36c>
    c9e8:	ldr	r2, [r3, #0]
    c9ea:	ldr.w	r3, [r9]
    c9ee:	adds	r3, #1
    c9f0:	add	r2, r5
    c9f2:	add.w	sl, r4, r8
    c9f6:	beq.w	ccba <_malloc_r+0x4de>
    c9fa:	add.w	r2, r2, #4096	; 0x1000
    c9fe:	adds	r2, #15
    ca00:	bic.w	r2, r2, #4080	; 0xff0
    ca04:	bic.w	r2, r2, #15
    ca08:	mov	r1, r2
    ca0a:	mov	r0, r6
    ca0c:	str	r2, [sp, #4]
    ca0e:	bl	d3d0 <_sbrk_r>
    ca12:	cmp.w	r0, #4294967295
    ca16:	mov	fp, r0
    ca18:	ldr	r2, [sp, #4]
    ca1a:	beq.w	ccce <_malloc_r+0x4f2>
    ca1e:	cmp	sl, r0
    ca20:	bhi.w	cc1c <_malloc_r+0x440>
    ca24:	ldr	r3, [pc, #276]	; (cb3c <_malloc_r+0x360>)
    ca26:	ldr	r1, [r3, #0]
    ca28:	cmp	sl, fp
    ca2a:	add	r1, r2
    ca2c:	str	r1, [r3, #0]
    ca2e:	beq.w	ccd8 <_malloc_r+0x4fc>
    ca32:	ldr.w	r0, [r9]
    ca36:	ldr.w	lr, [pc, #272]	; cb48 <_malloc_r+0x36c>
    ca3a:	adds	r0, #1
    ca3c:	ittet	ne
    ca3e:	rsbne	sl, sl, fp
    ca42:	addne	r1, sl
    ca44:	streq.w	fp, [lr]
    ca48:	strne	r1, [r3, #0]
    ca4a:	ands.w	r1, fp, #7
    ca4e:	beq.w	cc80 <_malloc_r+0x4a4>
    ca52:	rsb	r0, r1, #8
    ca56:	rsb	r1, r1, #4096	; 0x1000
    ca5a:	add	fp, r0
    ca5c:	adds	r1, #8
    ca5e:	add	r2, fp
    ca60:	ubfx	r2, r2, #0, #12
    ca64:	rsb	r9, r2, r1
    ca68:	mov	r1, r9
    ca6a:	mov	r0, r6
    ca6c:	str	r3, [sp, #4]
    ca6e:	bl	d3d0 <_sbrk_r>
    ca72:	adds	r3, r0, #1
    ca74:	ldr	r3, [sp, #4]
    ca76:	beq.w	ccf8 <_malloc_r+0x51c>
    ca7a:	rsb	r2, fp, r0
    ca7e:	add	r2, r9
    ca80:	orr.w	r2, r2, #1
    ca84:	ldr	r1, [r3, #0]
    ca86:	str.w	fp, [r7, #8]
    ca8a:	add	r1, r9
    ca8c:	cmp	r4, r7
    ca8e:	str.w	r2, [fp, #4]
    ca92:	str	r1, [r3, #0]
    ca94:	ldr.w	r9, [pc, #164]	; cb3c <_malloc_r+0x360>
    ca98:	beq.n	cac8 <_malloc_r+0x2ec>
    ca9a:	cmp.w	r8, #15
    ca9e:	bls.w	cc9c <_malloc_r+0x4c0>
    caa2:	ldr	r2, [r4, #4]
    caa4:	sub.w	r3, r8, #12
    caa8:	bic.w	r3, r3, #7
    caac:	adds	r0, r4, r3
    caae:	and.w	r2, r2, #1
    cab2:	mov.w	lr, #5
    cab6:	orrs	r2, r3
    cab8:	cmp	r3, #15
    caba:	str	r2, [r4, #4]
    cabc:	str.w	lr, [r0, #4]
    cac0:	str.w	lr, [r0, #8]
    cac4:	bhi.w	cd00 <_malloc_r+0x524>
    cac8:	ldr	r3, [pc, #116]	; (cb40 <_malloc_r+0x364>)
    caca:	ldr	r4, [r7, #8]
    cacc:	ldr	r2, [r3, #0]
    cace:	cmp	r1, r2
    cad0:	it	hi
    cad2:	strhi	r1, [r3, #0]
    cad4:	ldr	r3, [pc, #108]	; (cb44 <_malloc_r+0x368>)
    cad6:	ldr	r2, [r3, #0]
    cad8:	cmp	r1, r2
    cada:	ldr	r2, [r4, #4]
    cadc:	it	hi
    cade:	strhi	r1, [r3, #0]
    cae0:	bic.w	r2, r2, #3
    cae4:	cmp	r5, r2
    cae6:	sub.w	r3, r2, r5
    caea:	bhi.n	caf0 <_malloc_r+0x314>
    caec:	cmp	r3, #15
    caee:	bgt.n	cafa <_malloc_r+0x31e>
    caf0:	mov	r0, r6
    caf2:	bl	cfec <__malloc_unlock>
    caf6:	movs	r4, #0
    caf8:	b.n	c96c <_malloc_r+0x190>
    cafa:	adds	r2, r4, r5
    cafc:	orr.w	r3, r3, #1
    cb00:	orr.w	r5, r5, #1
    cb04:	str	r5, [r4, #4]
    cb06:	mov	r0, r6
    cb08:	str	r2, [r7, #8]
    cb0a:	str	r3, [r2, #4]
    cb0c:	bl	cfec <__malloc_unlock>
    cb10:	adds	r4, #8
    cb12:	mov	r0, r4
    cb14:	add	sp, #12
    cb16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb1a:	cmp	r3, #20
    cb1c:	bls.n	cc02 <_malloc_r+0x426>
    cb1e:	cmp	r3, #84	; 0x54
    cb20:	bhi.w	cc6c <_malloc_r+0x490>
    cb24:	lsrs	r0, r5, #12
    cb26:	add.w	lr, r0, #111	; 0x6f
    cb2a:	mov.w	r3, lr, lsl #1
    cb2e:	adds	r0, #110	; 0x6e
    cb30:	b.n	c820 <_malloc_r+0x44>
    cb32:	nop
    cb34:	.word	0x200011f8
    cb38:	.word	0x20006e00
    cb3c:	.word	0x20006e04
    cb40:	.word	0x20006dfc
    cb44:	.word	0x20006df8
    cb48:	.word	0x20001604
    cb4c:	lsrs	r2, r3, #9
    cb4e:	cmp	r2, #4
    cb50:	bls.n	cc10 <_malloc_r+0x434>
    cb52:	cmp	r2, #20
    cb54:	bhi.w	ccbe <_malloc_r+0x4e2>
    cb58:	add.w	r1, r2, #92	; 0x5c
    cb5c:	lsls	r1, r1, #1
    cb5e:	adds	r2, #91	; 0x5b
    cb60:	add.w	ip, r7, r1, lsl #2
    cb64:	ldr.w	r1, [r7, r1, lsl #2]
    cb68:	ldr.w	r8, [pc, #476]	; cd48 <_malloc_r+0x56c>
    cb6c:	sub.w	ip, ip, #8
    cb70:	cmp	ip, r1
    cb72:	beq.w	cc86 <_malloc_r+0x4aa>
    cb76:	ldr	r2, [r1, #4]
    cb78:	bic.w	r2, r2, #3
    cb7c:	cmp	r3, r2
    cb7e:	bcs.n	cb86 <_malloc_r+0x3aa>
    cb80:	ldr	r1, [r1, #8]
    cb82:	cmp	ip, r1
    cb84:	bne.n	cb76 <_malloc_r+0x39a>
    cb86:	ldr.w	ip, [r1, #12]
    cb8a:	ldr	r2, [r7, #4]
    cb8c:	str.w	ip, [r4, #12]
    cb90:	str	r1, [r4, #8]
    cb92:	str.w	r4, [ip, #8]
    cb96:	str	r4, [r1, #12]
    cb98:	b.n	c8ac <_malloc_r+0xd0>
    cb9a:	adds	r3, r4, r5
    cb9c:	orr.w	r7, r2, #1
    cba0:	orr.w	r5, r5, #1
    cba4:	str	r5, [r4, #4]
    cba6:	mov	r0, r6
    cba8:	str	r3, [r1, #20]
    cbaa:	str	r3, [r1, #16]
    cbac:	str.w	lr, [r3, #12]
    cbb0:	str.w	lr, [r3, #8]
    cbb4:	str	r7, [r3, #4]
    cbb6:	str	r2, [r3, r2]
    cbb8:	adds	r4, #8
    cbba:	bl	cfec <__malloc_unlock>
    cbbe:	b.n	c96c <_malloc_r+0x190>
    cbc0:	ldr	r2, [r1, #4]
    cbc2:	b.n	c8ac <_malloc_r+0xd0>
    cbc4:	add.w	r8, r8, #1
    cbc8:	tst.w	r8, #3
    cbcc:	add.w	ip, ip, #8
    cbd0:	bne.w	c8d2 <_malloc_r+0xf6>
    cbd4:	b.n	cc38 <_malloc_r+0x45c>
    cbd6:	ldr	r4, [r3, #12]
    cbd8:	cmp	r3, r4
    cbda:	it	eq
    cbdc:	addeq	r0, #2
    cbde:	beq.w	c84c <_malloc_r+0x70>
    cbe2:	b.n	c94c <_malloc_r+0x170>
    cbe4:	add	r3, r1
    cbe6:	mov	r4, r1
    cbe8:	ldr	r2, [r3, #4]
    cbea:	ldr	r1, [r1, #12]
    cbec:	ldr.w	r5, [r4, #8]!
    cbf0:	orr.w	r2, r2, #1
    cbf4:	str	r2, [r3, #4]
    cbf6:	mov	r0, r6
    cbf8:	str	r1, [r5, #12]
    cbfa:	str	r5, [r1, #8]
    cbfc:	bl	cfec <__malloc_unlock>
    cc00:	b.n	c96c <_malloc_r+0x190>
    cc02:	add.w	lr, r3, #92	; 0x5c
    cc06:	add.w	r0, r3, #91	; 0x5b
    cc0a:	mov.w	r3, lr, lsl #1
    cc0e:	b.n	c820 <_malloc_r+0x44>
    cc10:	lsrs	r2, r3, #6
    cc12:	add.w	r1, r2, #57	; 0x39
    cc16:	lsls	r1, r1, #1
    cc18:	adds	r2, #56	; 0x38
    cc1a:	b.n	cb60 <_malloc_r+0x384>
    cc1c:	cmp	r4, r7
    cc1e:	ldr	r3, [pc, #296]	; (cd48 <_malloc_r+0x56c>)
    cc20:	beq.w	ca24 <_malloc_r+0x248>
    cc24:	ldr	r4, [r3, #8]
    cc26:	ldr	r2, [r4, #4]
    cc28:	bic.w	r2, r2, #3
    cc2c:	b.n	cae4 <_malloc_r+0x308>
    cc2e:	ldr.w	r3, [r9], #-8
    cc32:	cmp	r9, r3
    cc34:	bne.w	cd3c <_malloc_r+0x560>
    cc38:	tst.w	r0, #3
    cc3c:	add.w	r0, r0, #4294967295
    cc40:	bne.n	cc2e <_malloc_r+0x452>
    cc42:	ldr	r3, [r7, #4]
    cc44:	bic.w	r3, r3, r4
    cc48:	str	r3, [r7, #4]
    cc4a:	lsls	r4, r4, #1
    cc4c:	cmp	r4, r3
    cc4e:	bhi.w	c9cc <_malloc_r+0x1f0>
    cc52:	cmp	r4, #0
    cc54:	beq.w	c9cc <_malloc_r+0x1f0>
    cc58:	tst	r4, r3
    cc5a:	mov	r0, r8
    cc5c:	bne.w	c8ca <_malloc_r+0xee>
    cc60:	lsls	r4, r4, #1
    cc62:	tst	r4, r3
    cc64:	add.w	r0, r0, #4
    cc68:	beq.n	cc60 <_malloc_r+0x484>
    cc6a:	b.n	c8ca <_malloc_r+0xee>
    cc6c:	cmp.w	r3, #340	; 0x154
    cc70:	bhi.n	cca4 <_malloc_r+0x4c8>
    cc72:	lsrs	r0, r5, #15
    cc74:	add.w	lr, r0, #120	; 0x78
    cc78:	mov.w	r3, lr, lsl #1
    cc7c:	adds	r0, #119	; 0x77
    cc7e:	b.n	c820 <_malloc_r+0x44>
    cc80:	mov.w	r1, #4096	; 0x1000
    cc84:	b.n	ca5e <_malloc_r+0x282>
    cc86:	movs	r1, #1
    cc88:	ldr.w	r3, [r8, #4]
    cc8c:	asrs	r2, r2, #2
    cc8e:	lsl.w	r2, r1, r2
    cc92:	orrs	r2, r3
    cc94:	str.w	r2, [r8, #4]
    cc98:	mov	r1, ip
    cc9a:	b.n	cb8c <_malloc_r+0x3b0>
    cc9c:	movs	r3, #1
    cc9e:	str.w	r3, [fp, #4]
    cca2:	b.n	caf0 <_malloc_r+0x314>
    cca4:	movw	r2, #1364	; 0x554
    cca8:	cmp	r3, r2
    ccaa:	bhi.n	ccee <_malloc_r+0x512>
    ccac:	lsrs	r0, r5, #18
    ccae:	add.w	lr, r0, #125	; 0x7d
    ccb2:	mov.w	r3, lr, lsl #1
    ccb6:	adds	r0, #124	; 0x7c
    ccb8:	b.n	c820 <_malloc_r+0x44>
    ccba:	adds	r2, #16
    ccbc:	b.n	ca08 <_malloc_r+0x22c>
    ccbe:	cmp	r2, #84	; 0x54
    ccc0:	bhi.n	cd10 <_malloc_r+0x534>
    ccc2:	lsrs	r2, r3, #12
    ccc4:	add.w	r1, r2, #111	; 0x6f
    ccc8:	lsls	r1, r1, #1
    ccca:	adds	r2, #110	; 0x6e
    cccc:	b.n	cb60 <_malloc_r+0x384>
    ccce:	ldr	r4, [r7, #8]
    ccd0:	ldr	r2, [r4, #4]
    ccd2:	bic.w	r2, r2, #3
    ccd6:	b.n	cae4 <_malloc_r+0x308>
    ccd8:	ubfx	r0, sl, #0, #12
    ccdc:	cmp	r0, #0
    ccde:	bne.w	ca32 <_malloc_r+0x256>
    cce2:	add	r2, r8
    cce4:	ldr	r3, [r7, #8]
    cce6:	orr.w	r2, r2, #1
    ccea:	str	r2, [r3, #4]
    ccec:	b.n	cac8 <_malloc_r+0x2ec>
    ccee:	movs	r3, #254	; 0xfe
    ccf0:	mov.w	lr, #127	; 0x7f
    ccf4:	movs	r0, #126	; 0x7e
    ccf6:	b.n	c820 <_malloc_r+0x44>
    ccf8:	movs	r2, #1
    ccfa:	mov.w	r9, #0
    ccfe:	b.n	ca84 <_malloc_r+0x2a8>
    cd00:	add.w	r1, r4, #8
    cd04:	mov	r0, r6
    cd06:	bl	d868 <_free_r>
    cd0a:	ldr.w	r1, [r9]
    cd0e:	b.n	cac8 <_malloc_r+0x2ec>
    cd10:	cmp.w	r2, #340	; 0x154
    cd14:	bhi.n	cd22 <_malloc_r+0x546>
    cd16:	lsrs	r2, r3, #15
    cd18:	add.w	r1, r2, #120	; 0x78
    cd1c:	lsls	r1, r1, #1
    cd1e:	adds	r2, #119	; 0x77
    cd20:	b.n	cb60 <_malloc_r+0x384>
    cd22:	movw	r1, #1364	; 0x554
    cd26:	cmp	r2, r1
    cd28:	bhi.n	cd36 <_malloc_r+0x55a>
    cd2a:	lsrs	r2, r3, #18
    cd2c:	add.w	r1, r2, #125	; 0x7d
    cd30:	lsls	r1, r1, #1
    cd32:	adds	r2, #124	; 0x7c
    cd34:	b.n	cb60 <_malloc_r+0x384>
    cd36:	movs	r1, #254	; 0xfe
    cd38:	movs	r2, #126	; 0x7e
    cd3a:	b.n	cb60 <_malloc_r+0x384>
    cd3c:	ldr	r3, [r7, #4]
    cd3e:	b.n	cc4a <_malloc_r+0x46e>
    cd40:	lsrs	r0, r5, #3
    cd42:	adds	r3, r0, #1
    cd44:	lsls	r3, r3, #1
    cd46:	b.n	c93a <_malloc_r+0x15e>
    cd48:	.word	0x200011f8

0000cd4c <__ascii_mbtowc>:
    cd4c:	sub	sp, #8
    cd4e:	cbz	r1, cd64 <__ascii_mbtowc+0x18>
    cd50:	cbz	r2, cd6a <__ascii_mbtowc+0x1e>
    cd52:	cbz	r3, cd70 <__ascii_mbtowc+0x24>
    cd54:	ldrb	r3, [r2, #0]
    cd56:	str	r3, [r1, #0]
    cd58:	ldrb	r2, [r2, #0]
    cd5a:	adds	r0, r2, #0
    cd5c:	it	ne
    cd5e:	movne	r0, #1
    cd60:	add	sp, #8
    cd62:	bx	lr
    cd64:	add	r1, sp, #4
    cd66:	cmp	r2, #0
    cd68:	bne.n	cd52 <__ascii_mbtowc+0x6>
    cd6a:	mov	r0, r2
    cd6c:	add	sp, #8
    cd6e:	bx	lr
    cd70:	mvn.w	r0, #1
    cd74:	b.n	cd60 <__ascii_mbtowc+0x14>
    cd76:	nop
	...

0000cd80 <memchr>:
    cd80:	and.w	r1, r1, #255	; 0xff
    cd84:	cmp	r2, #16
    cd86:	blt.n	cde0 <memchr+0x60>
    cd88:	tst.w	r0, #7
    cd8c:	beq.n	cda0 <memchr+0x20>
    cd8e:	ldrb.w	r3, [r0], #1
    cd92:	subs	r2, #1
    cd94:	cmp	r3, r1
    cd96:	beq.n	cdf4 <memchr+0x74>
    cd98:	tst.w	r0, #7
    cd9c:	cbz	r2, cdf0 <memchr+0x70>
    cd9e:	bne.n	cd8e <memchr+0xe>
    cda0:	push	{r4, r5, r6, r7}
    cda2:	orr.w	r1, r1, r1, lsl #8
    cda6:	orr.w	r1, r1, r1, lsl #16
    cdaa:	bic.w	r4, r2, #7
    cdae:	mvns.w	r7, #0
    cdb2:	movs	r3, #0
    cdb4:	ldrd	r5, r6, [r0], #8
    cdb8:	subs	r4, #8
    cdba:	eor.w	r5, r5, r1
    cdbe:	eor.w	r6, r6, r1
    cdc2:	uadd8	r5, r5, r7
    cdc6:	sel	r5, r3, r7
    cdca:	uadd8	r6, r6, r7
    cdce:	sel	r6, r5, r7
    cdd2:	cbnz	r6, cdf8 <memchr+0x78>
    cdd4:	bne.n	cdb4 <memchr+0x34>
    cdd6:	pop	{r4, r5, r6, r7}
    cdd8:	and.w	r1, r1, #255	; 0xff
    cddc:	and.w	r2, r2, #7
    cde0:	cbz	r2, cdf0 <memchr+0x70>
    cde2:	ldrb.w	r3, [r0], #1
    cde6:	subs	r2, #1
    cde8:	eor.w	r3, r3, r1
    cdec:	cbz	r3, cdf4 <memchr+0x74>
    cdee:	bne.n	cde2 <memchr+0x62>
    cdf0:	movs	r0, #0
    cdf2:	bx	lr
    cdf4:	subs	r0, #1
    cdf6:	bx	lr
    cdf8:	cmp	r5, #0
    cdfa:	itte	eq
    cdfc:	moveq	r5, r6
    cdfe:	subeq	r0, #3
    ce00:	subne	r0, #7
    ce02:	tst.w	r5, #1
    ce06:	bne.n	ce18 <memchr+0x98>
    ce08:	adds	r0, #1
    ce0a:	tst.w	r5, #256	; 0x100
    ce0e:	ittt	eq
    ce10:	addeq	r0, #1
    ce12:	tsteq.w	r5, #98304	; 0x18000
    ce16:	addeq	r0, #1
    ce18:	pop	{r4, r5, r6, r7}
    ce1a:	subs	r0, #1
    ce1c:	bx	lr
    ce1e:	nop

0000ce20 <memcmp>:
    ce20:	cmp	r2, #3
    ce22:	push	{r4, r5, r6}
    ce24:	bls.n	ce74 <memcmp+0x54>
    ce26:	orr.w	r3, r0, r1
    ce2a:	lsls	r3, r3, #30
    ce2c:	beq.n	ce52 <memcmp+0x32>
    ce2e:	ldrb	r4, [r0, #0]
    ce30:	ldrb	r5, [r1, #0]
    ce32:	cmp	r4, r5
    ce34:	bne.n	ce7c <memcmp+0x5c>
    ce36:	add	r2, r0
    ce38:	adds	r3, r0, #1
    ce3a:	b.n	ce48 <memcmp+0x28>
    ce3c:	ldrb.w	r4, [r3], #1
    ce40:	ldrb.w	r5, [r1, #1]!
    ce44:	cmp	r4, r5
    ce46:	bne.n	ce7c <memcmp+0x5c>
    ce48:	cmp	r3, r2
    ce4a:	bne.n	ce3c <memcmp+0x1c>
    ce4c:	movs	r0, #0
    ce4e:	pop	{r4, r5, r6}
    ce50:	bx	lr
    ce52:	mov	r4, r1
    ce54:	mov	r3, r0
    ce56:	ldr	r6, [r3, #0]
    ce58:	ldr	r5, [r4, #0]
    ce5a:	cmp	r6, r5
    ce5c:	mov	r0, r3
    ce5e:	mov	r1, r4
    ce60:	add.w	r3, r3, #4
    ce64:	add.w	r4, r4, #4
    ce68:	bne.n	ce2e <memcmp+0xe>
    ce6a:	subs	r2, #4
    ce6c:	cmp	r2, #3
    ce6e:	mov	r0, r3
    ce70:	mov	r1, r4
    ce72:	bhi.n	ce56 <memcmp+0x36>
    ce74:	cmp	r2, #0
    ce76:	bne.n	ce2e <memcmp+0xe>
    ce78:	mov	r0, r2
    ce7a:	b.n	ce4e <memcmp+0x2e>
    ce7c:	subs	r0, r4, r5
    ce7e:	pop	{r4, r5, r6}
    ce80:	bx	lr
    ce82:	nop

0000ce84 <memmove>:
    ce84:	cmp	r0, r1
    ce86:	push	{r4, r5, r6, r7, lr}
    ce88:	bls.n	cea6 <memmove+0x22>
    ce8a:	adds	r3, r1, r2
    ce8c:	cmp	r0, r3
    ce8e:	bcs.n	cea6 <memmove+0x22>
    ce90:	adds	r1, r0, r2
    ce92:	cmp	r2, #0
    ce94:	beq.n	cf3a <memmove+0xb6>
    ce96:	subs	r2, r3, r2
    ce98:	ldrb.w	r4, [r3, #-1]!
    ce9c:	strb.w	r4, [r1, #-1]!
    cea0:	cmp	r3, r2
    cea2:	bne.n	ce98 <memmove+0x14>
    cea4:	pop	{r4, r5, r6, r7, pc}
    cea6:	cmp	r2, #15
    cea8:	bls.n	cf3c <memmove+0xb8>
    ceaa:	orr.w	r3, r1, r0
    ceae:	lsls	r3, r3, #30
    ceb0:	bne.n	cf40 <memmove+0xbc>
    ceb2:	add.w	r4, r0, #16
    ceb6:	add.w	r3, r1, #16
    ceba:	mov	r5, r2
    cebc:	ldr.w	r6, [r3, #-16]
    cec0:	str.w	r6, [r4, #-16]
    cec4:	ldr.w	r6, [r3, #-12]
    cec8:	str.w	r6, [r4, #-12]
    cecc:	ldr.w	r6, [r3, #-8]
    ced0:	str.w	r6, [r4, #-8]
    ced4:	subs	r5, #16
    ced6:	ldr.w	r6, [r3, #-4]
    ceda:	str.w	r6, [r4, #-4]
    cede:	cmp	r5, #15
    cee0:	add.w	r3, r3, #16
    cee4:	add.w	r4, r4, #16
    cee8:	bhi.n	cebc <memmove+0x38>
    ceea:	sub.w	r3, r2, #16
    ceee:	bic.w	r3, r3, #15
    cef2:	and.w	lr, r2, #15
    cef6:	adds	r3, #16
    cef8:	cmp.w	lr, #3
    cefc:	add	r1, r3
    cefe:	add	r3, r0
    cf00:	bls.n	cf46 <memmove+0xc2>
    cf02:	subs	r6, r3, #4
    cf04:	mov	r5, r1
    cf06:	mov	r4, lr
    cf08:	subs	r4, #4
    cf0a:	ldr.w	r7, [r5], #4
    cf0e:	str.w	r7, [r6, #4]!
    cf12:	cmp	r4, #3
    cf14:	bhi.n	cf08 <memmove+0x84>
    cf16:	sub.w	r4, lr, #4
    cf1a:	bic.w	r4, r4, #3
    cf1e:	adds	r4, #4
    cf20:	add	r3, r4
    cf22:	add	r1, r4
    cf24:	and.w	r2, r2, #3
    cf28:	cbz	r2, cf44 <memmove+0xc0>
    cf2a:	subs	r3, #1
    cf2c:	add	r2, r1
    cf2e:	ldrb.w	r4, [r1], #1
    cf32:	strb.w	r4, [r3, #1]!
    cf36:	cmp	r2, r1
    cf38:	bne.n	cf2e <memmove+0xaa>
    cf3a:	pop	{r4, r5, r6, r7, pc}
    cf3c:	mov	r3, r0
    cf3e:	b.n	cf28 <memmove+0xa4>
    cf40:	mov	r3, r0
    cf42:	b.n	cf2a <memmove+0xa6>
    cf44:	pop	{r4, r5, r6, r7, pc}
    cf46:	mov	r2, lr
    cf48:	b.n	cf28 <memmove+0xa4>
    cf4a:	nop

0000cf4c <memset>:
    cf4c:	push	{r4, r5, r6}
    cf4e:	lsls	r4, r0, #30
    cf50:	beq.n	cfe0 <memset+0x94>
    cf52:	subs	r4, r2, #1
    cf54:	cmp	r2, #0
    cf56:	beq.n	cfdc <memset+0x90>
    cf58:	uxtb	r5, r1
    cf5a:	mov	r3, r0
    cf5c:	b.n	cf64 <memset+0x18>
    cf5e:	subs	r2, r4, #1
    cf60:	cbz	r4, cfdc <memset+0x90>
    cf62:	mov	r4, r2
    cf64:	strb.w	r5, [r3], #1
    cf68:	lsls	r2, r3, #30
    cf6a:	bne.n	cf5e <memset+0x12>
    cf6c:	cmp	r4, #3
    cf6e:	bls.n	cfce <memset+0x82>
    cf70:	uxtb	r5, r1
    cf72:	orr.w	r5, r5, r5, lsl #8
    cf76:	cmp	r4, #15
    cf78:	orr.w	r5, r5, r5, lsl #16
    cf7c:	bls.n	cfb2 <memset+0x66>
    cf7e:	add.w	r2, r3, #16
    cf82:	mov	r6, r4
    cf84:	subs	r6, #16
    cf86:	cmp	r6, #15
    cf88:	str.w	r5, [r2, #-16]
    cf8c:	str.w	r5, [r2, #-12]
    cf90:	str.w	r5, [r2, #-8]
    cf94:	str.w	r5, [r2, #-4]
    cf98:	add.w	r2, r2, #16
    cf9c:	bhi.n	cf84 <memset+0x38>
    cf9e:	sub.w	r2, r4, #16
    cfa2:	bic.w	r2, r2, #15
    cfa6:	and.w	r4, r4, #15
    cfaa:	adds	r2, #16
    cfac:	cmp	r4, #3
    cfae:	add	r3, r2
    cfb0:	bls.n	cfce <memset+0x82>
    cfb2:	mov	r6, r3
    cfb4:	mov	r2, r4
    cfb6:	subs	r2, #4
    cfb8:	cmp	r2, #3
    cfba:	str.w	r5, [r6], #4
    cfbe:	bhi.n	cfb6 <memset+0x6a>
    cfc0:	subs	r2, r4, #4
    cfc2:	bic.w	r2, r2, #3
    cfc6:	adds	r2, #4
    cfc8:	add	r3, r2
    cfca:	and.w	r4, r4, #3
    cfce:	cbz	r4, cfdc <memset+0x90>
    cfd0:	uxtb	r1, r1
    cfd2:	add	r4, r3
    cfd4:	strb.w	r1, [r3], #1
    cfd8:	cmp	r3, r4
    cfda:	bne.n	cfd4 <memset+0x88>
    cfdc:	pop	{r4, r5, r6}
    cfde:	bx	lr
    cfe0:	mov	r4, r2
    cfe2:	mov	r3, r0
    cfe4:	b.n	cf6c <memset+0x20>
    cfe6:	nop

0000cfe8 <__malloc_lock>:
    cfe8:	bx	lr
    cfea:	nop

0000cfec <__malloc_unlock>:
    cfec:	bx	lr
    cfee:	nop

0000cff0 <_realloc_r>:
    cff0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cff4:	mov	r7, r2
    cff6:	sub	sp, #12
    cff8:	cmp	r1, #0
    cffa:	beq.w	d180 <_realloc_r+0x190>
    cffe:	mov	r6, r1
    d000:	mov	r9, r0
    d002:	add.w	r5, r7, #11
    d006:	bl	cfe8 <__malloc_lock>
    d00a:	ldr.w	lr, [r6, #-4]
    d00e:	cmp	r5, #22
    d010:	bic.w	r4, lr, #3
    d014:	sub.w	r8, r6, #8
    d018:	bhi.n	d09c <_realloc_r+0xac>
    d01a:	movs	r2, #16
    d01c:	mov	r5, r2
    d01e:	cmp	r7, r5
    d020:	bhi.n	d0a6 <_realloc_r+0xb6>
    d022:	cmp	r4, r2
    d024:	bge.n	d112 <_realloc_r+0x122>
    d026:	ldr	r3, [pc, #804]	; (d34c <_realloc_r+0x35c>)
    d028:	ldr	r1, [r3, #8]
    d02a:	add.w	r0, r8, r4
    d02e:	cmp	r0, r1
    d030:	ldr	r1, [r0, #4]
    d032:	beq.w	d1e8 <_realloc_r+0x1f8>
    d036:	bic.w	r3, r1, #1
    d03a:	add	r3, r0
    d03c:	ldr	r3, [r3, #4]
    d03e:	lsls	r3, r3, #31
    d040:	bpl.n	d13e <_realloc_r+0x14e>
    d042:	tst.w	lr, #1
    d046:	beq.n	d0b4 <_realloc_r+0xc4>
    d048:	mov	r1, r7
    d04a:	mov	r0, r9
    d04c:	bl	c7dc <_malloc_r>
    d050:	mov	r7, r0
    d052:	cbz	r0, d08e <_realloc_r+0x9e>
    d054:	ldr.w	r3, [r6, #-4]
    d058:	bic.w	r3, r3, #1
    d05c:	add	r3, r8
    d05e:	sub.w	r2, r0, #8
    d062:	cmp	r2, r3
    d064:	beq.w	d2f0 <_realloc_r+0x300>
    d068:	subs	r2, r4, #4
    d06a:	cmp	r2, #36	; 0x24
    d06c:	bhi.w	d2d2 <_realloc_r+0x2e2>
    d070:	cmp	r2, #19
    d072:	bhi.w	d27e <_realloc_r+0x28e>
    d076:	mov	r3, r0
    d078:	mov	r2, r6
    d07a:	ldr	r1, [r2, #0]
    d07c:	str	r1, [r3, #0]
    d07e:	ldr	r1, [r2, #4]
    d080:	str	r1, [r3, #4]
    d082:	ldr	r2, [r2, #8]
    d084:	str	r2, [r3, #8]
    d086:	mov	r1, r6
    d088:	mov	r0, r9
    d08a:	bl	d868 <_free_r>
    d08e:	mov	r0, r9
    d090:	bl	cfec <__malloc_unlock>
    d094:	mov	r0, r7
    d096:	add	sp, #12
    d098:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d09c:	bic.w	r5, r5, #7
    d0a0:	cmp	r5, #0
    d0a2:	mov	r2, r5
    d0a4:	bge.n	d01e <_realloc_r+0x2e>
    d0a6:	movs	r3, #12
    d0a8:	movs	r0, #0
    d0aa:	str.w	r3, [r9]
    d0ae:	add	sp, #12
    d0b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0b4:	ldr.w	r3, [r6, #-8]
    d0b8:	rsb	sl, r3, r8
    d0bc:	ldr.w	r3, [sl, #4]
    d0c0:	bic.w	ip, r3, #3
    d0c4:	add.w	r3, r4, ip
    d0c8:	cmp	r3, r2
    d0ca:	blt.n	d048 <_realloc_r+0x58>
    d0cc:	mov	r7, sl
    d0ce:	ldr.w	r1, [sl, #12]
    d0d2:	ldr.w	r0, [r7, #8]!
    d0d6:	subs	r2, r4, #4
    d0d8:	cmp	r2, #36	; 0x24
    d0da:	str	r1, [r0, #12]
    d0dc:	str	r0, [r1, #8]
    d0de:	bhi.w	d310 <_realloc_r+0x320>
    d0e2:	cmp	r2, #19
    d0e4:	bls.w	d30c <_realloc_r+0x31c>
    d0e8:	ldr	r1, [r6, #0]
    d0ea:	str.w	r1, [sl, #8]
    d0ee:	ldr	r1, [r6, #4]
    d0f0:	str.w	r1, [sl, #12]
    d0f4:	cmp	r2, #27
    d0f6:	bhi.w	d350 <_realloc_r+0x360>
    d0fa:	adds	r6, #8
    d0fc:	add.w	r2, sl, #16
    d100:	ldr	r1, [r6, #0]
    d102:	str	r1, [r2, #0]
    d104:	ldr	r1, [r6, #4]
    d106:	str	r1, [r2, #4]
    d108:	ldr	r1, [r6, #8]
    d10a:	str	r1, [r2, #8]
    d10c:	mov	r6, r7
    d10e:	mov	r4, r3
    d110:	mov	r8, sl
    d112:	subs	r3, r4, r5
    d114:	cmp	r3, #15
    d116:	bhi.n	d154 <_realloc_r+0x164>
    d118:	ldr.w	r3, [r8, #4]
    d11c:	and.w	r3, r3, #1
    d120:	orrs	r3, r4
    d122:	add	r4, r8
    d124:	str.w	r3, [r8, #4]
    d128:	ldr	r3, [r4, #4]
    d12a:	orr.w	r3, r3, #1
    d12e:	str	r3, [r4, #4]
    d130:	mov	r0, r9
    d132:	bl	cfec <__malloc_unlock>
    d136:	mov	r0, r6
    d138:	add	sp, #12
    d13a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d13e:	bic.w	r1, r1, #3
    d142:	add	r1, r4
    d144:	cmp	r1, r2
    d146:	blt.n	d18c <_realloc_r+0x19c>
    d148:	ldr	r3, [r0, #12]
    d14a:	ldr	r2, [r0, #8]
    d14c:	mov	r4, r1
    d14e:	str	r3, [r2, #12]
    d150:	str	r2, [r3, #8]
    d152:	b.n	d112 <_realloc_r+0x122>
    d154:	ldr.w	r2, [r8, #4]
    d158:	add.w	r1, r8, r5
    d15c:	and.w	r2, r2, #1
    d160:	orrs	r5, r2
    d162:	orr.w	r2, r3, #1
    d166:	add	r3, r1
    d168:	str.w	r5, [r8, #4]
    d16c:	str	r2, [r1, #4]
    d16e:	ldr	r2, [r3, #4]
    d170:	orr.w	r2, r2, #1
    d174:	adds	r1, #8
    d176:	str	r2, [r3, #4]
    d178:	mov	r0, r9
    d17a:	bl	d868 <_free_r>
    d17e:	b.n	d130 <_realloc_r+0x140>
    d180:	mov	r1, r2
    d182:	add	sp, #12
    d184:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d188:	b.w	c7dc <_malloc_r>
    d18c:	tst.w	lr, #1
    d190:	bne.w	d048 <_realloc_r+0x58>
    d194:	ldr.w	r3, [r6, #-8]
    d198:	rsb	sl, r3, r8
    d19c:	ldr.w	r3, [sl, #4]
    d1a0:	bic.w	ip, r3, #3
    d1a4:	add.w	lr, r1, ip
    d1a8:	cmp	lr, r2
    d1aa:	blt.n	d0c4 <_realloc_r+0xd4>
    d1ac:	ldr	r3, [r0, #12]
    d1ae:	ldr	r2, [r0, #8]
    d1b0:	mov	r7, sl
    d1b2:	str	r3, [r2, #12]
    d1b4:	str	r2, [r3, #8]
    d1b6:	ldr.w	r1, [r7, #8]!
    d1ba:	ldr.w	r3, [sl, #12]
    d1be:	str	r3, [r1, #12]
    d1c0:	subs	r2, r4, #4
    d1c2:	cmp	r2, #36	; 0x24
    d1c4:	str	r1, [r3, #8]
    d1c6:	bhi.w	d2fc <_realloc_r+0x30c>
    d1ca:	cmp	r2, #19
    d1cc:	bls.n	d294 <_realloc_r+0x2a4>
    d1ce:	ldr	r3, [r6, #0]
    d1d0:	str.w	r3, [sl, #8]
    d1d4:	ldr	r3, [r6, #4]
    d1d6:	str.w	r3, [sl, #12]
    d1da:	cmp	r2, #27
    d1dc:	bhi.w	d320 <_realloc_r+0x330>
    d1e0:	adds	r6, #8
    d1e2:	add.w	r3, sl, #16
    d1e6:	b.n	d296 <_realloc_r+0x2a6>
    d1e8:	bic.w	fp, r1, #3
    d1ec:	add	fp, r4
    d1ee:	add.w	r0, r5, #16
    d1f2:	cmp	fp, r0
    d1f4:	bge.n	d2aa <_realloc_r+0x2ba>
    d1f6:	tst.w	lr, #1
    d1fa:	bne.w	d048 <_realloc_r+0x58>
    d1fe:	ldr.w	r1, [r6, #-8]
    d202:	rsb	sl, r1, r8
    d206:	ldr.w	r1, [sl, #4]
    d20a:	bic.w	ip, r1, #3
    d20e:	add	fp, ip
    d210:	cmp	r0, fp
    d212:	bgt.w	d0c4 <_realloc_r+0xd4>
    d216:	mov	r7, sl
    d218:	ldr.w	r1, [sl, #12]
    d21c:	ldr.w	r0, [r7, #8]!
    d220:	subs	r2, r4, #4
    d222:	cmp	r2, #36	; 0x24
    d224:	str	r1, [r0, #12]
    d226:	str	r0, [r1, #8]
    d228:	bhi.w	d394 <_realloc_r+0x3a4>
    d22c:	cmp	r2, #19
    d22e:	bls.w	d37c <_realloc_r+0x38c>
    d232:	ldr	r1, [r6, #0]
    d234:	str.w	r1, [sl, #8]
    d238:	ldr	r1, [r6, #4]
    d23a:	str.w	r1, [sl, #12]
    d23e:	cmp	r2, #27
    d240:	bhi.w	d3a2 <_realloc_r+0x3b2>
    d244:	adds	r6, #8
    d246:	add.w	r2, sl, #16
    d24a:	ldr	r1, [r6, #0]
    d24c:	str	r1, [r2, #0]
    d24e:	ldr	r1, [r6, #4]
    d250:	str	r1, [r2, #4]
    d252:	ldr	r1, [r6, #8]
    d254:	str	r1, [r2, #8]
    d256:	add.w	r1, sl, r5
    d25a:	rsb	r2, r5, fp
    d25e:	orr.w	r2, r2, #1
    d262:	str	r1, [r3, #8]
    d264:	str	r2, [r1, #4]
    d266:	ldr.w	r3, [sl, #4]
    d26a:	and.w	r3, r3, #1
    d26e:	orrs	r5, r3
    d270:	mov	r0, r9
    d272:	str.w	r5, [sl, #4]
    d276:	bl	cfec <__malloc_unlock>
    d27a:	mov	r0, r7
    d27c:	b.n	d138 <_realloc_r+0x148>
    d27e:	ldr	r3, [r6, #0]
    d280:	str	r3, [r0, #0]
    d282:	ldr	r3, [r6, #4]
    d284:	str	r3, [r0, #4]
    d286:	cmp	r2, #27
    d288:	bhi.n	d2da <_realloc_r+0x2ea>
    d28a:	add.w	r3, r0, #8
    d28e:	add.w	r2, r6, #8
    d292:	b.n	d07a <_realloc_r+0x8a>
    d294:	mov	r3, r7
    d296:	ldr	r2, [r6, #0]
    d298:	str	r2, [r3, #0]
    d29a:	ldr	r2, [r6, #4]
    d29c:	str	r2, [r3, #4]
    d29e:	ldr	r2, [r6, #8]
    d2a0:	str	r2, [r3, #8]
    d2a2:	mov	r6, r7
    d2a4:	mov	r4, lr
    d2a6:	mov	r8, sl
    d2a8:	b.n	d112 <_realloc_r+0x122>
    d2aa:	add.w	r1, r8, r5
    d2ae:	rsb	fp, r5, fp
    d2b2:	orr.w	r2, fp, #1
    d2b6:	str	r1, [r3, #8]
    d2b8:	str	r2, [r1, #4]
    d2ba:	ldr.w	r3, [r6, #-4]
    d2be:	and.w	r3, r3, #1
    d2c2:	orrs	r5, r3
    d2c4:	mov	r0, r9
    d2c6:	str.w	r5, [r6, #-4]
    d2ca:	bl	cfec <__malloc_unlock>
    d2ce:	mov	r0, r6
    d2d0:	b.n	d138 <_realloc_r+0x148>
    d2d2:	mov	r1, r6
    d2d4:	bl	ce84 <memmove>
    d2d8:	b.n	d086 <_realloc_r+0x96>
    d2da:	ldr	r3, [r6, #8]
    d2dc:	str	r3, [r0, #8]
    d2de:	ldr	r3, [r6, #12]
    d2e0:	str	r3, [r0, #12]
    d2e2:	cmp	r2, #36	; 0x24
    d2e4:	beq.n	d338 <_realloc_r+0x348>
    d2e6:	add.w	r3, r0, #16
    d2ea:	add.w	r2, r6, #16
    d2ee:	b.n	d07a <_realloc_r+0x8a>
    d2f0:	ldr.w	r3, [r0, #-4]
    d2f4:	bic.w	r3, r3, #3
    d2f8:	add	r4, r3
    d2fa:	b.n	d112 <_realloc_r+0x122>
    d2fc:	mov	r1, r6
    d2fe:	mov	r0, r7
    d300:	mov	r4, lr
    d302:	mov	r8, sl
    d304:	bl	ce84 <memmove>
    d308:	mov	r6, r7
    d30a:	b.n	d112 <_realloc_r+0x122>
    d30c:	mov	r2, r7
    d30e:	b.n	d100 <_realloc_r+0x110>
    d310:	mov	r1, r6
    d312:	mov	r0, r7
    d314:	mov	r4, r3
    d316:	mov	r8, sl
    d318:	bl	ce84 <memmove>
    d31c:	mov	r6, r7
    d31e:	b.n	d112 <_realloc_r+0x122>
    d320:	ldr	r3, [r6, #8]
    d322:	str.w	r3, [sl, #16]
    d326:	ldr	r3, [r6, #12]
    d328:	str.w	r3, [sl, #20]
    d32c:	cmp	r2, #36	; 0x24
    d32e:	beq.n	d368 <_realloc_r+0x378>
    d330:	adds	r6, #16
    d332:	add.w	r3, sl, #24
    d336:	b.n	d296 <_realloc_r+0x2a6>
    d338:	ldr	r3, [r6, #16]
    d33a:	str	r3, [r0, #16]
    d33c:	ldr	r3, [r6, #20]
    d33e:	str	r3, [r0, #20]
    d340:	add.w	r2, r6, #24
    d344:	add.w	r3, r0, #24
    d348:	b.n	d07a <_realloc_r+0x8a>
    d34a:	nop
    d34c:	.word	0x200011f8
    d350:	ldr	r1, [r6, #8]
    d352:	str.w	r1, [sl, #16]
    d356:	ldr	r1, [r6, #12]
    d358:	str.w	r1, [sl, #20]
    d35c:	cmp	r2, #36	; 0x24
    d35e:	beq.n	d380 <_realloc_r+0x390>
    d360:	adds	r6, #16
    d362:	add.w	r2, sl, #24
    d366:	b.n	d100 <_realloc_r+0x110>
    d368:	ldr	r3, [r6, #16]
    d36a:	str.w	r3, [sl, #24]
    d36e:	ldr	r3, [r6, #20]
    d370:	str.w	r3, [sl, #28]
    d374:	adds	r6, #24
    d376:	add.w	r3, sl, #32
    d37a:	b.n	d296 <_realloc_r+0x2a6>
    d37c:	mov	r2, r7
    d37e:	b.n	d24a <_realloc_r+0x25a>
    d380:	ldr	r2, [r6, #16]
    d382:	str.w	r2, [sl, #24]
    d386:	ldr	r2, [r6, #20]
    d388:	str.w	r2, [sl, #28]
    d38c:	adds	r6, #24
    d38e:	add.w	r2, sl, #32
    d392:	b.n	d100 <_realloc_r+0x110>
    d394:	mov	r1, r6
    d396:	mov	r0, r7
    d398:	str	r3, [sp, #4]
    d39a:	bl	ce84 <memmove>
    d39e:	ldr	r3, [sp, #4]
    d3a0:	b.n	d256 <_realloc_r+0x266>
    d3a2:	ldr	r1, [r6, #8]
    d3a4:	str.w	r1, [sl, #16]
    d3a8:	ldr	r1, [r6, #12]
    d3aa:	str.w	r1, [sl, #20]
    d3ae:	cmp	r2, #36	; 0x24
    d3b0:	beq.n	d3ba <_realloc_r+0x3ca>
    d3b2:	adds	r6, #16
    d3b4:	add.w	r2, sl, #24
    d3b8:	b.n	d24a <_realloc_r+0x25a>
    d3ba:	ldr	r2, [r6, #16]
    d3bc:	str.w	r2, [sl, #24]
    d3c0:	ldr	r2, [r6, #20]
    d3c2:	str.w	r2, [sl, #28]
    d3c6:	adds	r6, #24
    d3c8:	add.w	r2, sl, #32
    d3cc:	b.n	d24a <_realloc_r+0x25a>
    d3ce:	nop

0000d3d0 <_sbrk_r>:
    d3d0:	push	{r3, r4, r5, lr}
    d3d2:	ldr	r4, [pc, #28]	; (d3f0 <_sbrk_r+0x20>)
    d3d4:	movs	r3, #0
    d3d6:	mov	r5, r0
    d3d8:	mov	r0, r1
    d3da:	str	r3, [r4, #0]
    d3dc:	bl	afac <_sbrk>
    d3e0:	adds	r3, r0, #1
    d3e2:	beq.n	d3e6 <_sbrk_r+0x16>
    d3e4:	pop	{r3, r4, r5, pc}
    d3e6:	ldr	r3, [r4, #0]
    d3e8:	cmp	r3, #0
    d3ea:	beq.n	d3e4 <_sbrk_r+0x14>
    d3ec:	str	r3, [r5, #0]
    d3ee:	pop	{r3, r4, r5, pc}
    d3f0:	.word	0x20008ac0

0000d3f4 <strcat>:
    d3f4:	lsls	r3, r0, #30
    d3f6:	push	{r4, lr}
    d3f8:	mov	r4, r0
    d3fa:	bne.n	d41e <strcat+0x2a>
    d3fc:	ldr	r2, [r0, #0]
    d3fe:	sub.w	r3, r2, #16843009	; 0x1010101
    d402:	bic.w	r3, r3, r2
    d406:	tst.w	r3, #2155905152	; 0x80808080
    d40a:	bne.n	d41e <strcat+0x2a>
    d40c:	ldr.w	r2, [r0, #4]!
    d410:	sub.w	r3, r2, #16843009	; 0x1010101
    d414:	bic.w	r3, r3, r2
    d418:	tst.w	r3, #2155905152	; 0x80808080
    d41c:	beq.n	d40c <strcat+0x18>
    d41e:	ldrb	r3, [r0, #0]
    d420:	cbz	r3, d42a <strcat+0x36>
    d422:	ldrb.w	r3, [r0, #1]!
    d426:	cmp	r3, #0
    d428:	bne.n	d422 <strcat+0x2e>
    d42a:	bl	d434 <strcpy>
    d42e:	mov	r0, r4
    d430:	pop	{r4, pc}
    d432:	nop

0000d434 <strcpy>:
    d434:	eor.w	r2, r0, r1
    d438:	mov	ip, r0
    d43a:	tst.w	r2, #3
    d43e:	bne.n	d4e0 <strcpy+0xac>
    d440:	tst.w	r1, #3
    d444:	bne.n	d4ac <strcpy+0x78>
    d446:	str.w	r4, [sp, #-4]!
    d44a:	tst.w	r1, #4
    d44e:	ldr.w	r3, [r1], #4
    d452:	beq.n	d46c <strcpy+0x38>
    d454:	sub.w	r2, r3, #16843009	; 0x1010101
    d458:	bics	r2, r3
    d45a:	tst.w	r2, #2155905152	; 0x80808080
    d45e:	itt	eq
    d460:	streq.w	r3, [ip], #4
    d464:	ldreq.w	r3, [r1], #4
    d468:	bne.n	d498 <strcpy+0x64>
    d46a:	nop
    d46c:	ldr.w	r4, [r1], #4
    d470:	sub.w	r2, r3, #16843009	; 0x1010101
    d474:	bics	r2, r3
    d476:	tst.w	r2, #2155905152	; 0x80808080
    d47a:	sub.w	r2, r4, #16843009	; 0x1010101
    d47e:	bne.n	d498 <strcpy+0x64>
    d480:	str.w	r3, [ip], #4
    d484:	bics	r2, r4
    d486:	tst.w	r2, #2155905152	; 0x80808080
    d48a:	itt	eq
    d48c:	ldreq.w	r3, [r1], #4
    d490:	streq.w	r4, [ip], #4
    d494:	beq.n	d46c <strcpy+0x38>
    d496:	mov	r3, r4
    d498:	strb.w	r3, [ip], #1
    d49c:	tst.w	r3, #255	; 0xff
    d4a0:	mov.w	r3, r3, ror #8
    d4a4:	bne.n	d498 <strcpy+0x64>
    d4a6:	ldr.w	r4, [sp], #4
    d4aa:	bx	lr
    d4ac:	tst.w	r1, #1
    d4b0:	beq.n	d4c0 <strcpy+0x8c>
    d4b2:	ldrb.w	r2, [r1], #1
    d4b6:	strb.w	r2, [ip], #1
    d4ba:	cmp	r2, #0
    d4bc:	it	eq
    d4be:	bxeq	lr
    d4c0:	tst.w	r1, #2
    d4c4:	beq.n	d446 <strcpy+0x12>
    d4c6:	ldrh.w	r2, [r1], #2
    d4ca:	tst.w	r2, #255	; 0xff
    d4ce:	itet	ne
    d4d0:	strhne.w	r2, [ip], #2
    d4d4:	strbeq.w	r2, [ip]
    d4d8:	tstne.w	r2, #65280	; 0xff00
    d4dc:	bne.n	d446 <strcpy+0x12>
    d4de:	bx	lr
    d4e0:	ldrb.w	r2, [r1], #1
    d4e4:	strb.w	r2, [ip], #1
    d4e8:	cmp	r2, #0
    d4ea:	bne.n	d4e0 <strcpy+0xac>
    d4ec:	bx	lr
    d4ee:	nop
	...

0000d500 <strlen>:
    d500:	pld	[r0]
    d504:	strd	r4, r5, [sp, #-8]!
    d508:	bic.w	r1, r0, #7
    d50c:	mvn.w	ip, #0
    d510:	ands.w	r4, r0, #7
    d514:	pld	[r1, #32]
    d518:	bne.w	d5ae <strlen+0xae>
    d51c:	mov.w	r4, #0
    d520:	mvn.w	r0, #7
    d524:	ldrd	r2, r3, [r1]
    d528:	pld	[r1, #64]	; 0x40
    d52c:	add.w	r0, r0, #8
    d530:	uadd8	r2, r2, ip
    d534:	sel	r2, r4, ip
    d538:	uadd8	r3, r3, ip
    d53c:	sel	r3, r2, ip
    d540:	cbnz	r3, d596 <strlen+0x96>
    d542:	ldrd	r2, r3, [r1, #8]
    d546:	uadd8	r2, r2, ip
    d54a:	add.w	r0, r0, #8
    d54e:	sel	r2, r4, ip
    d552:	uadd8	r3, r3, ip
    d556:	sel	r3, r2, ip
    d55a:	cbnz	r3, d596 <strlen+0x96>
    d55c:	ldrd	r2, r3, [r1, #16]
    d560:	uadd8	r2, r2, ip
    d564:	add.w	r0, r0, #8
    d568:	sel	r2, r4, ip
    d56c:	uadd8	r3, r3, ip
    d570:	sel	r3, r2, ip
    d574:	cbnz	r3, d596 <strlen+0x96>
    d576:	ldrd	r2, r3, [r1, #24]
    d57a:	add.w	r1, r1, #32
    d57e:	uadd8	r2, r2, ip
    d582:	add.w	r0, r0, #8
    d586:	sel	r2, r4, ip
    d58a:	uadd8	r3, r3, ip
    d58e:	sel	r3, r2, ip
    d592:	cmp	r3, #0
    d594:	beq.n	d524 <strlen+0x24>
    d596:	cmp	r2, #0
    d598:	itt	eq
    d59a:	addeq	r0, #4
    d59c:	moveq	r2, r3
    d59e:	rev	r2, r2
    d5a0:	clz	r2, r2
    d5a4:	ldrd	r4, r5, [sp], #8
    d5a8:	add.w	r0, r0, r2, lsr #3
    d5ac:	bx	lr
    d5ae:	ldrd	r2, r3, [r1]
    d5b2:	and.w	r5, r4, #3
    d5b6:	rsb	r0, r4, #0
    d5ba:	mov.w	r5, r5, lsl #3
    d5be:	tst.w	r4, #4
    d5c2:	pld	[r1, #64]	; 0x40
    d5c6:	lsl.w	r5, ip, r5
    d5ca:	orn	r2, r2, r5
    d5ce:	itt	ne
    d5d0:	ornne	r3, r3, r5
    d5d4:	movne	r2, ip
    d5d6:	mov.w	r4, #0
    d5da:	b.n	d530 <strlen+0x30>

0000d5dc <strncmp>:
    d5dc:	cmp	r2, #0
    d5de:	beq.n	d664 <strncmp+0x88>
    d5e0:	orr.w	r3, r0, r1
    d5e4:	ands.w	r3, r3, #3
    d5e8:	push	{r4, r5, r6, r7}
    d5ea:	bne.n	d638 <strncmp+0x5c>
    d5ec:	cmp	r2, #3
    d5ee:	bls.n	d638 <strncmp+0x5c>
    d5f0:	ldr	r4, [r0, #0]
    d5f2:	ldr	r5, [r1, #0]
    d5f4:	cmp	r4, r5
    d5f6:	bne.n	d638 <strncmp+0x5c>
    d5f8:	subs	r2, #4
    d5fa:	beq.n	d668 <strncmp+0x8c>
    d5fc:	sub.w	r5, r4, #16843009	; 0x1010101
    d600:	bic.w	r4, r5, r4
    d604:	tst.w	r4, #2155905152	; 0x80808080
    d608:	bne.n	d66e <strncmp+0x92>
    d60a:	adds	r7, r0, #4
    d60c:	adds	r5, r1, #4
    d60e:	b.n	d62c <strncmp+0x50>
    d610:	ldr.w	r3, [r7], #4
    d614:	ldr	r6, [r1, #0]
    d616:	sub.w	r4, r3, #16843009	; 0x1010101
    d61a:	cmp	r3, r6
    d61c:	bic.w	r4, r4, r3
    d620:	bne.n	d638 <strncmp+0x5c>
    d622:	subs	r2, #4
    d624:	beq.n	d668 <strncmp+0x8c>
    d626:	tst.w	r4, #2155905152	; 0x80808080
    d62a:	bne.n	d674 <strncmp+0x98>
    d62c:	cmp	r2, #3
    d62e:	mov	r1, r5
    d630:	mov	r0, r7
    d632:	add.w	r5, r5, #4
    d636:	bhi.n	d610 <strncmp+0x34>
    d638:	ldrb	r3, [r0, #0]
    d63a:	ldrb	r4, [r1, #0]
    d63c:	cmp	r4, r3
    d63e:	add.w	r2, r2, #4294967295
    d642:	bne.n	d65e <strncmp+0x82>
    d644:	cbz	r2, d668 <strncmp+0x8c>
    d646:	cbnz	r4, d64e <strncmp+0x72>
    d648:	b.n	d678 <strncmp+0x9c>
    d64a:	cbz	r2, d668 <strncmp+0x8c>
    d64c:	cbz	r3, d66e <strncmp+0x92>
    d64e:	ldrb.w	r3, [r0, #1]!
    d652:	ldrb.w	r4, [r1, #1]!
    d656:	cmp	r3, r4
    d658:	add.w	r2, r2, #4294967295
    d65c:	beq.n	d64a <strncmp+0x6e>
    d65e:	subs	r0, r3, r4
    d660:	pop	{r4, r5, r6, r7}
    d662:	bx	lr
    d664:	mov	r0, r2
    d666:	bx	lr
    d668:	mov	r0, r2
    d66a:	pop	{r4, r5, r6, r7}
    d66c:	bx	lr
    d66e:	mov	r0, r3
    d670:	pop	{r4, r5, r6, r7}
    d672:	bx	lr
    d674:	movs	r0, #0
    d676:	b.n	d660 <strncmp+0x84>
    d678:	mov	r0, r4
    d67a:	b.n	d660 <strncmp+0x84>

0000d67c <_vdprintf_r>:
    d67c:	push	{r4, r5, r6, r7, lr}
    d67e:	sub.w	sp, sp, #532	; 0x214
    d682:	add	r5, sp, #16
    d684:	str	r3, [sp, #0]
    d686:	mov	r7, r1
    d688:	mov	r3, r2
    d68a:	mov.w	r4, #512	; 0x200
    d68e:	add	r2, sp, #12
    d690:	mov	r1, r5
    d692:	str	r4, [sp, #12]
    d694:	mov	r6, r0
    d696:	bl	e078 <_vasnprintf_r>
    d69a:	cbz	r0, d6c0 <_vdprintf_r+0x44>
    d69c:	mov	r4, r0
    d69e:	mov	r2, r0
    d6a0:	mov	r1, r7
    d6a2:	ldr	r3, [sp, #12]
    d6a4:	mov	r0, r6
    d6a6:	bl	d6fc <_write_r>
    d6aa:	cmp	r4, r5
    d6ac:	str	r0, [sp, #12]
    d6ae:	beq.n	d6ba <_vdprintf_r+0x3e>
    d6b0:	mov	r0, r6
    d6b2:	mov	r1, r4
    d6b4:	bl	d868 <_free_r>
    d6b8:	ldr	r0, [sp, #12]
    d6ba:	add.w	sp, sp, #532	; 0x214
    d6be:	pop	{r4, r5, r6, r7, pc}
    d6c0:	mov.w	r0, #4294967295
    d6c4:	b.n	d6ba <_vdprintf_r+0x3e>
    d6c6:	nop

0000d6c8 <vdprintf>:
    d6c8:	push	{r4}
    d6ca:	ldr	r4, [pc, #16]	; (d6dc <vdprintf+0x14>)
    d6cc:	mov	r3, r2
    d6ce:	mov	r2, r1
    d6d0:	mov	r1, r0
    d6d2:	ldr	r0, [r4, #0]
    d6d4:	ldr.w	r4, [sp], #4
    d6d8:	b.w	d67c <_vdprintf_r>
    d6dc:	.word	0x20001088

0000d6e0 <__ascii_wctomb>:
    d6e0:	cbz	r1, d6ec <__ascii_wctomb+0xc>
    d6e2:	cmp	r2, #255	; 0xff
    d6e4:	bhi.n	d6f0 <__ascii_wctomb+0x10>
    d6e6:	strb	r2, [r1, #0]
    d6e8:	movs	r0, #1
    d6ea:	bx	lr
    d6ec:	mov	r0, r1
    d6ee:	bx	lr
    d6f0:	movs	r3, #138	; 0x8a
    d6f2:	str	r3, [r0, #0]
    d6f4:	mov.w	r0, #4294967295
    d6f8:	bx	lr
    d6fa:	nop

0000d6fc <_write_r>:
    d6fc:	push	{r4, r5, r6, lr}
    d6fe:	mov	r5, r1
    d700:	ldr	r4, [pc, #32]	; (d724 <_write_r+0x28>)
    d702:	mov	r1, r2
    d704:	mov	r6, r0
    d706:	mov	r2, r3
    d708:	mov	r0, r5
    d70a:	movs	r3, #0
    d70c:	str	r3, [r4, #0]
    d70e:	bl	b718 <_write>
    d712:	adds	r3, r0, #1
    d714:	beq.n	d718 <_write_r+0x1c>
    d716:	pop	{r4, r5, r6, pc}
    d718:	ldr	r3, [r4, #0]
    d71a:	cmp	r3, #0
    d71c:	beq.n	d716 <_write_r+0x1a>
    d71e:	str	r3, [r6, #0]
    d720:	pop	{r4, r5, r6, pc}
    d722:	nop
    d724:	.word	0x20008ac0

0000d728 <__register_exitproc>:
    d728:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d72c:	ldr	r4, [pc, #148]	; (d7c4 <__register_exitproc+0x9c>)
    d72e:	ldr	r5, [r4, #0]
    d730:	ldr.w	r4, [r5, #328]	; 0x148
    d734:	mov	r6, r0
    d736:	mov	r8, r1
    d738:	mov	sl, r2
    d73a:	mov	r9, r3
    d73c:	cbz	r4, d7b0 <__register_exitproc+0x88>
    d73e:	ldr	r0, [r4, #4]
    d740:	cmp	r0, #31
    d742:	bgt.n	d774 <__register_exitproc+0x4c>
    d744:	adds	r3, r0, #1
    d746:	cbz	r6, d766 <__register_exitproc+0x3e>
    d748:	add.w	r5, r4, r0, lsl #2
    d74c:	movs	r2, #1
    d74e:	str.w	sl, [r5, #136]	; 0x88
    d752:	ldr.w	r1, [r4, #392]	; 0x188
    d756:	lsls	r2, r0
    d758:	orrs	r1, r2
    d75a:	cmp	r6, #2
    d75c:	str.w	r1, [r4, #392]	; 0x188
    d760:	str.w	r9, [r5, #264]	; 0x108
    d764:	beq.n	d7a4 <__register_exitproc+0x7c>
    d766:	adds	r0, #2
    d768:	str	r3, [r4, #4]
    d76a:	str.w	r8, [r4, r0, lsl #2]
    d76e:	movs	r0, #0
    d770:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d774:	ldr	r3, [pc, #80]	; (d7c8 <__register_exitproc+0xa0>)
    d776:	cbz	r3, d7ba <__register_exitproc+0x92>
    d778:	mov.w	r0, #400	; 0x190
    d77c:	bl	c7bc <malloc>
    d780:	mov	r4, r0
    d782:	cbz	r0, d7ba <__register_exitproc+0x92>
    d784:	ldr.w	r3, [r5, #328]	; 0x148
    d788:	movs	r7, #0
    d78a:	stmia.w	r0, {r3, r7}
    d78e:	str.w	r4, [r5, #328]	; 0x148
    d792:	mov	r0, r7
    d794:	movs	r3, #1
    d796:	str.w	r7, [r4, #392]	; 0x188
    d79a:	str.w	r7, [r4, #396]	; 0x18c
    d79e:	cmp	r6, #0
    d7a0:	beq.n	d766 <__register_exitproc+0x3e>
    d7a2:	b.n	d748 <__register_exitproc+0x20>
    d7a4:	ldr.w	r1, [r4, #396]	; 0x18c
    d7a8:	orrs	r2, r1
    d7aa:	str.w	r2, [r4, #396]	; 0x18c
    d7ae:	b.n	d766 <__register_exitproc+0x3e>
    d7b0:	add.w	r4, r5, #332	; 0x14c
    d7b4:	str.w	r4, [r5, #328]	; 0x148
    d7b8:	b.n	d73e <__register_exitproc+0x16>
    d7ba:	mov.w	r0, #4294967295
    d7be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d7c2:	nop
    d7c4:	.word	0x20000914
    d7c8:	.word	0x0000c7bd

0000d7cc <_malloc_trim_r>:
    d7cc:	push	{r3, r4, r5, r6, r7, lr}
    d7ce:	ldr	r7, [pc, #140]	; (d85c <_malloc_trim_r+0x90>)
    d7d0:	mov	r4, r1
    d7d2:	mov	r6, r0
    d7d4:	bl	cfe8 <__malloc_lock>
    d7d8:	ldr	r3, [r7, #8]
    d7da:	ldr	r5, [r3, #4]
    d7dc:	bic.w	r5, r5, #3
    d7e0:	subs	r1, r5, r4
    d7e2:	addw	r1, r1, #4079	; 0xfef
    d7e6:	bic.w	r1, r1, #4080	; 0xff0
    d7ea:	bic.w	r1, r1, #15
    d7ee:	sub.w	r4, r1, #4096	; 0x1000
    d7f2:	cmp.w	r4, #4096	; 0x1000
    d7f6:	blt.n	d808 <_malloc_trim_r+0x3c>
    d7f8:	movs	r1, #0
    d7fa:	mov	r0, r6
    d7fc:	bl	d3d0 <_sbrk_r>
    d800:	ldr	r3, [r7, #8]
    d802:	add	r3, r5
    d804:	cmp	r0, r3
    d806:	beq.n	d812 <_malloc_trim_r+0x46>
    d808:	mov	r0, r6
    d80a:	bl	cfec <__malloc_unlock>
    d80e:	movs	r0, #0
    d810:	pop	{r3, r4, r5, r6, r7, pc}
    d812:	negs	r1, r4
    d814:	mov	r0, r6
    d816:	bl	d3d0 <_sbrk_r>
    d81a:	adds	r0, #1
    d81c:	beq.n	d83a <_malloc_trim_r+0x6e>
    d81e:	ldr	r3, [pc, #64]	; (d860 <_malloc_trim_r+0x94>)
    d820:	ldr	r2, [r7, #8]
    d822:	ldr	r1, [r3, #0]
    d824:	subs	r5, r5, r4
    d826:	orr.w	r5, r5, #1
    d82a:	mov	r0, r6
    d82c:	subs	r1, r1, r4
    d82e:	str	r5, [r2, #4]
    d830:	str	r1, [r3, #0]
    d832:	bl	cfec <__malloc_unlock>
    d836:	movs	r0, #1
    d838:	pop	{r3, r4, r5, r6, r7, pc}
    d83a:	movs	r1, #0
    d83c:	mov	r0, r6
    d83e:	bl	d3d0 <_sbrk_r>
    d842:	ldr	r2, [r7, #8]
    d844:	subs	r3, r0, r2
    d846:	cmp	r3, #15
    d848:	ble.n	d808 <_malloc_trim_r+0x3c>
    d84a:	ldr	r4, [pc, #24]	; (d864 <_malloc_trim_r+0x98>)
    d84c:	ldr	r1, [pc, #16]	; (d860 <_malloc_trim_r+0x94>)
    d84e:	ldr	r4, [r4, #0]
    d850:	orr.w	r3, r3, #1
    d854:	subs	r0, r0, r4
    d856:	str	r3, [r2, #4]
    d858:	str	r0, [r1, #0]
    d85a:	b.n	d808 <_malloc_trim_r+0x3c>
    d85c:	.word	0x200011f8
    d860:	.word	0x20006e04
    d864:	.word	0x20001604

0000d868 <_free_r>:
    d868:	cmp	r1, #0
    d86a:	beq.n	d8f8 <_free_r+0x90>
    d86c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d870:	mov	r5, r1
    d872:	mov	r8, r0
    d874:	bl	cfe8 <__malloc_lock>
    d878:	ldr.w	r7, [r5, #-4]
    d87c:	ldr	r1, [pc, #424]	; (da28 <_free_r+0x1c0>)
    d87e:	bic.w	r3, r7, #1
    d882:	sub.w	r4, r5, #8
    d886:	adds	r2, r4, r3
    d888:	ldr	r6, [r1, #8]
    d88a:	ldr	r0, [r2, #4]
    d88c:	cmp	r2, r6
    d88e:	bic.w	r0, r0, #3
    d892:	beq.n	d95a <_free_r+0xf2>
    d894:	lsls	r6, r7, #31
    d896:	str	r0, [r2, #4]
    d898:	bmi.n	d8b2 <_free_r+0x4a>
    d89a:	ldr.w	r7, [r5, #-8]
    d89e:	subs	r4, r4, r7
    d8a0:	add.w	lr, r1, #8
    d8a4:	ldr	r5, [r4, #8]
    d8a6:	cmp	r5, lr
    d8a8:	add	r3, r7
    d8aa:	beq.n	d98c <_free_r+0x124>
    d8ac:	ldr	r7, [r4, #12]
    d8ae:	str	r7, [r5, #12]
    d8b0:	str	r5, [r7, #8]
    d8b2:	adds	r5, r2, r0
    d8b4:	ldr	r5, [r5, #4]
    d8b6:	lsls	r5, r5, #31
    d8b8:	bpl.n	d940 <_free_r+0xd8>
    d8ba:	orr.w	r2, r3, #1
    d8be:	str	r2, [r4, #4]
    d8c0:	str	r3, [r4, r3]
    d8c2:	cmp.w	r3, #512	; 0x200
    d8c6:	bcs.n	d8fa <_free_r+0x92>
    d8c8:	lsrs	r3, r3, #3
    d8ca:	adds	r2, r3, #1
    d8cc:	ldr	r5, [r1, #4]
    d8ce:	ldr.w	r7, [r1, r2, lsl #3]
    d8d2:	str	r7, [r4, #8]
    d8d4:	movs	r0, #1
    d8d6:	asrs	r3, r3, #2
    d8d8:	lsl.w	r3, r0, r3
    d8dc:	add.w	r0, r1, r2, lsl #3
    d8e0:	orrs	r5, r3
    d8e2:	subs	r0, #8
    d8e4:	str	r0, [r4, #12]
    d8e6:	str	r5, [r1, #4]
    d8e8:	str.w	r4, [r1, r2, lsl #3]
    d8ec:	str	r4, [r7, #12]
    d8ee:	mov	r0, r8
    d8f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d8f4:	b.w	cfec <__malloc_unlock>
    d8f8:	bx	lr
    d8fa:	lsrs	r2, r3, #9
    d8fc:	cmp	r2, #4
    d8fe:	bhi.n	d9a8 <_free_r+0x140>
    d900:	lsrs	r2, r3, #6
    d902:	add.w	r7, r2, #57	; 0x39
    d906:	lsls	r7, r7, #1
    d908:	add.w	r5, r2, #56	; 0x38
    d90c:	add.w	r0, r1, r7, lsl #2
    d910:	ldr.w	r2, [r1, r7, lsl #2]
    d914:	ldr	r1, [pc, #272]	; (da28 <_free_r+0x1c0>)
    d916:	subs	r0, #8
    d918:	cmp	r0, r2
    d91a:	beq.n	d9b8 <_free_r+0x150>
    d91c:	ldr	r1, [r2, #4]
    d91e:	bic.w	r1, r1, #3
    d922:	cmp	r3, r1
    d924:	bcs.n	d92c <_free_r+0xc4>
    d926:	ldr	r2, [r2, #8]
    d928:	cmp	r0, r2
    d92a:	bne.n	d91c <_free_r+0xb4>
    d92c:	ldr	r0, [r2, #12]
    d92e:	str	r0, [r4, #12]
    d930:	str	r2, [r4, #8]
    d932:	str	r4, [r0, #8]
    d934:	str	r4, [r2, #12]
    d936:	mov	r0, r8
    d938:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d93c:	b.w	cfec <__malloc_unlock>
    d940:	ldr	r5, [r2, #8]
    d942:	ldr	r7, [pc, #232]	; (da2c <_free_r+0x1c4>)
    d944:	cmp	r5, r7
    d946:	add	r3, r0
    d948:	beq.n	d9ca <_free_r+0x162>
    d94a:	ldr	r0, [r2, #12]
    d94c:	str	r0, [r5, #12]
    d94e:	orr.w	r2, r3, #1
    d952:	str	r5, [r0, #8]
    d954:	str	r2, [r4, #4]
    d956:	str	r3, [r4, r3]
    d958:	b.n	d8c2 <_free_r+0x5a>
    d95a:	lsls	r7, r7, #31
    d95c:	add	r3, r0
    d95e:	bmi.n	d970 <_free_r+0x108>
    d960:	ldr.w	r2, [r5, #-8]
    d964:	subs	r4, r4, r2
    d966:	add	r3, r2
    d968:	ldr	r0, [r4, #8]
    d96a:	ldr	r2, [r4, #12]
    d96c:	str	r2, [r0, #12]
    d96e:	str	r0, [r2, #8]
    d970:	ldr	r2, [pc, #188]	; (da30 <_free_r+0x1c8>)
    d972:	ldr	r2, [r2, #0]
    d974:	orr.w	r0, r3, #1
    d978:	cmp	r3, r2
    d97a:	str	r0, [r4, #4]
    d97c:	str	r4, [r1, #8]
    d97e:	bcc.n	d8ee <_free_r+0x86>
    d980:	ldr	r3, [pc, #176]	; (da34 <_free_r+0x1cc>)
    d982:	mov	r0, r8
    d984:	ldr	r1, [r3, #0]
    d986:	bl	d7cc <_malloc_trim_r>
    d98a:	b.n	d8ee <_free_r+0x86>
    d98c:	adds	r1, r2, r0
    d98e:	ldr	r1, [r1, #4]
    d990:	lsls	r1, r1, #31
    d992:	bmi.n	da1e <_free_r+0x1b6>
    d994:	ldr	r1, [r2, #8]
    d996:	ldr	r2, [r2, #12]
    d998:	str	r2, [r1, #12]
    d99a:	add	r3, r0
    d99c:	orr.w	r0, r3, #1
    d9a0:	str	r1, [r2, #8]
    d9a2:	str	r0, [r4, #4]
    d9a4:	str	r3, [r4, r3]
    d9a6:	b.n	d8ee <_free_r+0x86>
    d9a8:	cmp	r2, #20
    d9aa:	bhi.n	d9dc <_free_r+0x174>
    d9ac:	add.w	r7, r2, #92	; 0x5c
    d9b0:	lsls	r7, r7, #1
    d9b2:	add.w	r5, r2, #91	; 0x5b
    d9b6:	b.n	d90c <_free_r+0xa4>
    d9b8:	asrs	r2, r5, #2
    d9ba:	ldr	r3, [r1, #4]
    d9bc:	movs	r5, #1
    d9be:	lsl.w	r2, r5, r2
    d9c2:	orrs	r3, r2
    d9c4:	str	r3, [r1, #4]
    d9c6:	mov	r2, r0
    d9c8:	b.n	d92e <_free_r+0xc6>
    d9ca:	orr.w	r2, r3, #1
    d9ce:	str	r4, [r1, #20]
    d9d0:	str	r4, [r1, #16]
    d9d2:	str	r5, [r4, #12]
    d9d4:	str	r5, [r4, #8]
    d9d6:	str	r2, [r4, #4]
    d9d8:	str	r3, [r4, r3]
    d9da:	b.n	d8ee <_free_r+0x86>
    d9dc:	cmp	r2, #84	; 0x54
    d9de:	bhi.n	d9ee <_free_r+0x186>
    d9e0:	lsrs	r2, r3, #12
    d9e2:	add.w	r7, r2, #111	; 0x6f
    d9e6:	lsls	r7, r7, #1
    d9e8:	add.w	r5, r2, #110	; 0x6e
    d9ec:	b.n	d90c <_free_r+0xa4>
    d9ee:	cmp.w	r2, #340	; 0x154
    d9f2:	bhi.n	da02 <_free_r+0x19a>
    d9f4:	lsrs	r2, r3, #15
    d9f6:	add.w	r7, r2, #120	; 0x78
    d9fa:	lsls	r7, r7, #1
    d9fc:	add.w	r5, r2, #119	; 0x77
    da00:	b.n	d90c <_free_r+0xa4>
    da02:	movw	r0, #1364	; 0x554
    da06:	cmp	r2, r0
    da08:	bhi.n	da18 <_free_r+0x1b0>
    da0a:	lsrs	r2, r3, #18
    da0c:	add.w	r7, r2, #125	; 0x7d
    da10:	lsls	r7, r7, #1
    da12:	add.w	r5, r2, #124	; 0x7c
    da16:	b.n	d90c <_free_r+0xa4>
    da18:	movs	r7, #254	; 0xfe
    da1a:	movs	r5, #126	; 0x7e
    da1c:	b.n	d90c <_free_r+0xa4>
    da1e:	orr.w	r2, r3, #1
    da22:	str	r2, [r4, #4]
    da24:	str	r3, [r4, r3]
    da26:	b.n	d8ee <_free_r+0x86>
    da28:	.word	0x200011f8
    da2c:	.word	0x20001200
    da30:	.word	0x20001600
    da34:	.word	0x20006e00

0000da38 <_localeconv_r>:
    da38:	ldr	r2, [pc, #16]	; (da4c <_localeconv_r+0x14>)
    da3a:	ldr	r3, [pc, #20]	; (da50 <_localeconv_r+0x18>)
    da3c:	ldr	r2, [r2, #0]
    da3e:	ldr	r0, [r2, #52]	; 0x34
    da40:	cmp	r0, #0
    da42:	it	eq
    da44:	moveq	r0, r3
    da46:	adds	r0, #240	; 0xf0
    da48:	bx	lr
    da4a:	nop
    da4c:	.word	0x20001088
    da50:	.word	0x2000108c

0000da54 <_Balloc>:
    da54:	ldr	r3, [r0, #76]	; 0x4c
    da56:	push	{r4, r5, r6, lr}
    da58:	mov	r5, r0
    da5a:	mov	r4, r1
    da5c:	cbz	r3, da72 <_Balloc+0x1e>
    da5e:	ldr.w	r0, [r3, r4, lsl #2]
    da62:	cbz	r0, da86 <_Balloc+0x32>
    da64:	ldr	r2, [r0, #0]
    da66:	str.w	r2, [r3, r4, lsl #2]
    da6a:	movs	r3, #0
    da6c:	str	r3, [r0, #16]
    da6e:	str	r3, [r0, #12]
    da70:	pop	{r4, r5, r6, pc}
    da72:	movs	r2, #33	; 0x21
    da74:	movs	r1, #4
    da76:	bl	e0d8 <_calloc_r>
    da7a:	str	r0, [r5, #76]	; 0x4c
    da7c:	mov	r3, r0
    da7e:	cmp	r0, #0
    da80:	bne.n	da5e <_Balloc+0xa>
    da82:	movs	r0, #0
    da84:	pop	{r4, r5, r6, pc}
    da86:	movs	r1, #1
    da88:	lsl.w	r6, r1, r4
    da8c:	adds	r2, r6, #5
    da8e:	mov	r0, r5
    da90:	lsls	r2, r2, #2
    da92:	bl	e0d8 <_calloc_r>
    da96:	cmp	r0, #0
    da98:	beq.n	da82 <_Balloc+0x2e>
    da9a:	str	r4, [r0, #4]
    da9c:	str	r6, [r0, #8]
    da9e:	b.n	da6a <_Balloc+0x16>

0000daa0 <_Bfree>:
    daa0:	cbz	r1, dab0 <_Bfree+0x10>
    daa2:	ldr	r3, [r0, #76]	; 0x4c
    daa4:	ldr	r2, [r1, #4]
    daa6:	ldr.w	r0, [r3, r2, lsl #2]
    daaa:	str	r0, [r1, #0]
    daac:	str.w	r1, [r3, r2, lsl #2]
    dab0:	bx	lr
    dab2:	nop

0000dab4 <__multadd>:
    dab4:	push	{r4, r5, r6, r7, lr}
    dab6:	ldr	r4, [r1, #16]
    dab8:	sub	sp, #12
    daba:	mov	r5, r1
    dabc:	mov	r6, r0
    dabe:	add.w	lr, r1, #20
    dac2:	movs	r7, #0
    dac4:	ldr.w	r0, [lr]
    dac8:	uxth	r1, r0
    daca:	mla	r1, r2, r1, r3
    dace:	lsrs	r3, r1, #16
    dad0:	lsrs	r0, r0, #16
    dad2:	mla	r3, r2, r0, r3
    dad6:	uxth	r1, r1
    dad8:	adds	r7, #1
    dada:	add.w	r1, r1, r3, lsl #16
    dade:	cmp	r4, r7
    dae0:	str.w	r1, [lr], #4
    dae4:	mov.w	r3, r3, lsr #16
    dae8:	bgt.n	dac4 <__multadd+0x10>
    daea:	cbz	r3, dafc <__multadd+0x48>
    daec:	ldr	r2, [r5, #8]
    daee:	cmp	r4, r2
    daf0:	bge.n	db02 <__multadd+0x4e>
    daf2:	add.w	r2, r5, r4, lsl #2
    daf6:	adds	r4, #1
    daf8:	str	r3, [r2, #20]
    dafa:	str	r4, [r5, #16]
    dafc:	mov	r0, r5
    dafe:	add	sp, #12
    db00:	pop	{r4, r5, r6, r7, pc}
    db02:	ldr	r1, [r5, #4]
    db04:	str	r3, [sp, #4]
    db06:	adds	r1, #1
    db08:	mov	r0, r6
    db0a:	bl	da54 <_Balloc>
    db0e:	ldr	r2, [r5, #16]
    db10:	adds	r2, #2
    db12:	add.w	r1, r5, #12
    db16:	mov	r7, r0
    db18:	lsls	r2, r2, #2
    db1a:	adds	r0, #12
    db1c:	bl	9c5c <memcpy>
    db20:	ldr	r2, [r6, #76]	; 0x4c
    db22:	ldr	r1, [r5, #4]
    db24:	ldr	r3, [sp, #4]
    db26:	ldr.w	r0, [r2, r1, lsl #2]
    db2a:	str	r0, [r5, #0]
    db2c:	str.w	r5, [r2, r1, lsl #2]
    db30:	mov	r5, r7
    db32:	b.n	daf2 <__multadd+0x3e>

0000db34 <__hi0bits>:
    db34:	lsrs	r3, r0, #16
    db36:	lsls	r3, r3, #16
    db38:	cbnz	r3, db68 <__hi0bits+0x34>
    db3a:	lsls	r0, r0, #16
    db3c:	movs	r3, #16
    db3e:	tst.w	r0, #4278190080	; 0xff000000
    db42:	itt	eq
    db44:	lsleq	r0, r0, #8
    db46:	addeq	r3, #8
    db48:	tst.w	r0, #4026531840	; 0xf0000000
    db4c:	itt	eq
    db4e:	lsleq	r0, r0, #4
    db50:	addeq	r3, #4
    db52:	tst.w	r0, #3221225472	; 0xc0000000
    db56:	itt	eq
    db58:	lsleq	r0, r0, #2
    db5a:	addeq	r3, #2
    db5c:	cmp	r0, #0
    db5e:	blt.n	db70 <__hi0bits+0x3c>
    db60:	lsls	r2, r0, #1
    db62:	bmi.n	db6c <__hi0bits+0x38>
    db64:	movs	r0, #32
    db66:	bx	lr
    db68:	movs	r3, #0
    db6a:	b.n	db3e <__hi0bits+0xa>
    db6c:	adds	r0, r3, #1
    db6e:	bx	lr
    db70:	mov	r0, r3
    db72:	bx	lr

0000db74 <__lo0bits>:
    db74:	ldr	r3, [r0, #0]
    db76:	ands.w	r2, r3, #7
    db7a:	beq.n	db8c <__lo0bits+0x18>
    db7c:	lsls	r1, r3, #31
    db7e:	bmi.n	dbc2 <__lo0bits+0x4e>
    db80:	lsls	r2, r3, #30
    db82:	bmi.n	dbc6 <__lo0bits+0x52>
    db84:	lsrs	r3, r3, #2
    db86:	str	r3, [r0, #0]
    db88:	movs	r0, #2
    db8a:	bx	lr
    db8c:	uxth	r1, r3
    db8e:	cbnz	r1, db94 <__lo0bits+0x20>
    db90:	lsrs	r3, r3, #16
    db92:	movs	r2, #16
    db94:	tst.w	r3, #255	; 0xff
    db98:	itt	eq
    db9a:	lsreq	r3, r3, #8
    db9c:	addeq	r2, #8
    db9e:	lsls	r1, r3, #28
    dba0:	itt	eq
    dba2:	lsreq	r3, r3, #4
    dba4:	addeq	r2, #4
    dba6:	lsls	r1, r3, #30
    dba8:	itt	eq
    dbaa:	lsreq	r3, r3, #2
    dbac:	addeq	r2, #2
    dbae:	lsls	r1, r3, #31
    dbb0:	bmi.n	dbbc <__lo0bits+0x48>
    dbb2:	lsrs	r3, r3, #1
    dbb4:	bne.n	dbba <__lo0bits+0x46>
    dbb6:	movs	r0, #32
    dbb8:	bx	lr
    dbba:	adds	r2, #1
    dbbc:	str	r3, [r0, #0]
    dbbe:	mov	r0, r2
    dbc0:	bx	lr
    dbc2:	movs	r0, #0
    dbc4:	bx	lr
    dbc6:	lsrs	r3, r3, #1
    dbc8:	str	r3, [r0, #0]
    dbca:	movs	r0, #1
    dbcc:	bx	lr
    dbce:	nop

0000dbd0 <__i2b>:
    dbd0:	push	{r4, lr}
    dbd2:	mov	r4, r1
    dbd4:	movs	r1, #1
    dbd6:	bl	da54 <_Balloc>
    dbda:	movs	r2, #1
    dbdc:	str	r4, [r0, #20]
    dbde:	str	r2, [r0, #16]
    dbe0:	pop	{r4, pc}
    dbe2:	nop

0000dbe4 <__multiply>:
    dbe4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbe8:	ldr	r5, [r1, #16]
    dbea:	ldr	r7, [r2, #16]
    dbec:	cmp	r5, r7
    dbee:	sub	sp, #12
    dbf0:	mov	r4, r1
    dbf2:	mov	r6, r2
    dbf4:	bge.n	dc00 <__multiply+0x1c>
    dbf6:	mov	r2, r5
    dbf8:	mov	r4, r6
    dbfa:	mov	r5, r7
    dbfc:	mov	r6, r1
    dbfe:	mov	r7, r2
    dc00:	ldr	r3, [r4, #8]
    dc02:	ldr	r1, [r4, #4]
    dc04:	add.w	r8, r5, r7
    dc08:	cmp	r8, r3
    dc0a:	it	gt
    dc0c:	addgt	r1, #1
    dc0e:	bl	da54 <_Balloc>
    dc12:	add.w	ip, r0, #20
    dc16:	add.w	r9, ip, r8, lsl #2
    dc1a:	cmp	ip, r9
    dc1c:	str	r0, [sp, #0]
    dc1e:	bcs.n	dc2c <__multiply+0x48>
    dc20:	mov	r3, ip
    dc22:	movs	r1, #0
    dc24:	str.w	r1, [r3], #4
    dc28:	cmp	r9, r3
    dc2a:	bhi.n	dc24 <__multiply+0x40>
    dc2c:	add.w	r2, r6, #20
    dc30:	add.w	sl, r2, r7, lsl #2
    dc34:	add.w	r3, r4, #20
    dc38:	cmp	r2, sl
    dc3a:	add.w	lr, r3, r5, lsl #2
    dc3e:	bcs.n	dcea <__multiply+0x106>
    dc40:	str.w	r9, [sp, #4]
    dc44:	mov	r9, r3
    dc46:	ldr.w	r3, [r2], #4
    dc4a:	uxth.w	fp, r3
    dc4e:	cmp.w	fp, #0
    dc52:	beq.n	dc96 <__multiply+0xb2>
    dc54:	movs	r0, #0
    dc56:	mov	r7, r9
    dc58:	mov	r6, ip
    dc5a:	mov	r5, r0
    dc5c:	b.n	dc60 <__multiply+0x7c>
    dc5e:	mov	r6, r3
    dc60:	ldr.w	r4, [r7], #4
    dc64:	ldr	r0, [r6, #0]
    dc66:	uxth	r1, r4
    dc68:	uxth	r3, r0
    dc6a:	mla	r1, fp, r1, r3
    dc6e:	lsrs	r4, r4, #16
    dc70:	lsrs	r0, r0, #16
    dc72:	adds	r3, r1, r5
    dc74:	mla	r0, fp, r4, r0
    dc78:	add.w	r0, r0, r3, lsr #16
    dc7c:	uxth	r1, r3
    dc7e:	mov	r3, r6
    dc80:	orr.w	r1, r1, r0, lsl #16
    dc84:	cmp	lr, r7
    dc86:	mov.w	r5, r0, lsr #16
    dc8a:	str.w	r1, [r3], #4
    dc8e:	bhi.n	dc5e <__multiply+0x7a>
    dc90:	str	r5, [r6, #4]
    dc92:	ldr.w	r3, [r2, #-4]
    dc96:	movs.w	fp, r3, lsr #16
    dc9a:	beq.n	dcde <__multiply+0xfa>
    dc9c:	ldr.w	r3, [ip]
    dca0:	mov	r7, ip
    dca2:	mov	r0, r3
    dca4:	mov	r5, r9
    dca6:	movs	r1, #0
    dca8:	b.n	dcac <__multiply+0xc8>
    dcaa:	mov	r7, r6
    dcac:	ldrh	r4, [r5, #0]
    dcae:	lsrs	r0, r0, #16
    dcb0:	mla	r0, fp, r4, r0
    dcb4:	add	r1, r0
    dcb6:	uxth	r4, r3
    dcb8:	mov	r6, r7
    dcba:	orr.w	r3, r4, r1, lsl #16
    dcbe:	str.w	r3, [r6], #4
    dcc2:	ldr	r0, [r7, #4]
    dcc4:	ldr.w	r4, [r5], #4
    dcc8:	uxth	r3, r0
    dcca:	lsrs	r4, r4, #16
    dccc:	mla	r4, fp, r4, r3
    dcd0:	add.w	r3, r4, r1, lsr #16
    dcd4:	cmp	lr, r5
    dcd6:	mov.w	r1, r3, lsr #16
    dcda:	bhi.n	dcaa <__multiply+0xc6>
    dcdc:	str	r3, [r7, #4]
    dcde:	cmp	sl, r2
    dce0:	add.w	ip, ip, #4
    dce4:	bhi.n	dc46 <__multiply+0x62>
    dce6:	ldr.w	r9, [sp, #4]
    dcea:	cmp.w	r8, #0
    dcee:	ble.n	dd08 <__multiply+0x124>
    dcf0:	ldr.w	r3, [r9, #-4]
    dcf4:	sub.w	r9, r9, #4
    dcf8:	cbz	r3, dd02 <__multiply+0x11e>
    dcfa:	b.n	dd08 <__multiply+0x124>
    dcfc:	ldr.w	r3, [r9, #-4]!
    dd00:	cbnz	r3, dd08 <__multiply+0x124>
    dd02:	subs.w	r8, r8, #1
    dd06:	bne.n	dcfc <__multiply+0x118>
    dd08:	ldr	r0, [sp, #0]
    dd0a:	str.w	r8, [r0, #16]
    dd0e:	add	sp, #12
    dd10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dd14 <__pow5mult>:
    dd14:	ands.w	r3, r2, #3
    dd18:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd1c:	mov	r4, r2
    dd1e:	mov	r7, r0
    dd20:	bne.n	dd80 <__pow5mult+0x6c>
    dd22:	mov	r6, r1
    dd24:	asrs	r4, r4, #2
    dd26:	beq.n	dd62 <__pow5mult+0x4e>
    dd28:	ldr	r5, [r7, #72]	; 0x48
    dd2a:	cbz	r5, dd92 <__pow5mult+0x7e>
    dd2c:	lsls	r3, r4, #31
    dd2e:	mov.w	r8, #0
    dd32:	bmi.n	dd42 <__pow5mult+0x2e>
    dd34:	asrs	r4, r4, #1
    dd36:	beq.n	dd62 <__pow5mult+0x4e>
    dd38:	ldr	r0, [r5, #0]
    dd3a:	cbz	r0, dd68 <__pow5mult+0x54>
    dd3c:	mov	r5, r0
    dd3e:	lsls	r3, r4, #31
    dd40:	bpl.n	dd34 <__pow5mult+0x20>
    dd42:	mov	r2, r5
    dd44:	mov	r1, r6
    dd46:	mov	r0, r7
    dd48:	bl	dbe4 <__multiply>
    dd4c:	cbz	r6, dd7c <__pow5mult+0x68>
    dd4e:	ldr	r2, [r6, #4]
    dd50:	ldr	r3, [r7, #76]	; 0x4c
    dd52:	asrs	r4, r4, #1
    dd54:	ldr.w	r1, [r3, r2, lsl #2]
    dd58:	str	r1, [r6, #0]
    dd5a:	str.w	r6, [r3, r2, lsl #2]
    dd5e:	mov	r6, r0
    dd60:	bne.n	dd38 <__pow5mult+0x24>
    dd62:	mov	r0, r6
    dd64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd68:	mov	r2, r5
    dd6a:	mov	r1, r5
    dd6c:	mov	r0, r7
    dd6e:	bl	dbe4 <__multiply>
    dd72:	str	r0, [r5, #0]
    dd74:	str.w	r8, [r0]
    dd78:	mov	r5, r0
    dd7a:	b.n	dd3e <__pow5mult+0x2a>
    dd7c:	mov	r6, r0
    dd7e:	b.n	dd34 <__pow5mult+0x20>
    dd80:	subs	r2, r3, #1
    dd82:	ldr	r5, [pc, #44]	; (ddb0 <__pow5mult+0x9c>)
    dd84:	movs	r3, #0
    dd86:	ldr.w	r2, [r5, r2, lsl #2]
    dd8a:	bl	dab4 <__multadd>
    dd8e:	mov	r6, r0
    dd90:	b.n	dd24 <__pow5mult+0x10>
    dd92:	movs	r1, #1
    dd94:	mov	r0, r7
    dd96:	bl	da54 <_Balloc>
    dd9a:	movw	r1, #625	; 0x271
    dd9e:	movs	r2, #1
    dda0:	movs	r3, #0
    dda2:	str	r1, [r0, #20]
    dda4:	str	r2, [r0, #16]
    dda6:	mov	r5, r0
    dda8:	str	r0, [r7, #72]	; 0x48
    ddaa:	str	r3, [r0, #0]
    ddac:	b.n	dd2c <__pow5mult+0x18>
    ddae:	nop
    ddb0:	.word	0x20000b20

0000ddb4 <__lshift>:
    ddb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ddb8:	mov	r9, r2
    ddba:	ldr	r2, [r1, #16]
    ddbc:	ldr	r3, [r1, #8]
    ddbe:	mov.w	r4, r9, asr #5
    ddc2:	add.w	r8, r4, r2
    ddc6:	add.w	r5, r8, #1
    ddca:	cmp	r5, r3
    ddcc:	mov	r6, r1
    ddce:	mov	sl, r0
    ddd0:	ldr	r1, [r1, #4]
    ddd2:	ble.n	ddde <__lshift+0x2a>
    ddd4:	lsls	r3, r3, #1
    ddd6:	cmp	r5, r3
    ddd8:	add.w	r1, r1, #1
    dddc:	bgt.n	ddd4 <__lshift+0x20>
    ddde:	mov	r0, sl
    dde0:	bl	da54 <_Balloc>
    dde4:	cmp	r4, #0
    dde6:	add.w	r2, r0, #20
    ddea:	ble.n	de5e <__lshift+0xaa>
    ddec:	add.w	r3, r2, r4, lsl #2
    ddf0:	movs	r1, #0
    ddf2:	str.w	r1, [r2], #4
    ddf6:	cmp	r3, r2
    ddf8:	bne.n	ddf2 <__lshift+0x3e>
    ddfa:	ldr	r4, [r6, #16]
    ddfc:	add.w	r1, r6, #20
    de00:	ands.w	r9, r9, #31
    de04:	add.w	lr, r1, r4, lsl #2
    de08:	beq.n	de4e <__lshift+0x9a>
    de0a:	rsb	r2, r9, #32
    de0e:	movs	r4, #0
    de10:	ldr	r7, [r1, #0]
    de12:	lsl.w	ip, r7, r9
    de16:	orr.w	r4, ip, r4
    de1a:	mov	ip, r3
    de1c:	str.w	r4, [r3], #4
    de20:	ldr.w	r4, [r1], #4
    de24:	cmp	lr, r1
    de26:	lsr.w	r4, r4, r2
    de2a:	bhi.n	de10 <__lshift+0x5c>
    de2c:	str.w	r4, [ip, #4]
    de30:	cbz	r4, de36 <__lshift+0x82>
    de32:	add.w	r5, r8, #2
    de36:	ldr.w	r3, [sl, #76]	; 0x4c
    de3a:	ldr	r2, [r6, #4]
    de3c:	subs	r5, #1
    de3e:	ldr.w	r1, [r3, r2, lsl #2]
    de42:	str	r5, [r0, #16]
    de44:	str	r1, [r6, #0]
    de46:	str.w	r6, [r3, r2, lsl #2]
    de4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de4e:	subs	r3, #4
    de50:	ldr.w	r2, [r1], #4
    de54:	str.w	r2, [r3, #4]!
    de58:	cmp	lr, r1
    de5a:	bhi.n	de50 <__lshift+0x9c>
    de5c:	b.n	de36 <__lshift+0x82>
    de5e:	mov	r3, r2
    de60:	b.n	ddfa <__lshift+0x46>
    de62:	nop

0000de64 <__mcmp>:
    de64:	ldr	r2, [r0, #16]
    de66:	ldr	r3, [r1, #16]
    de68:	subs	r2, r2, r3
    de6a:	bne.n	de94 <__mcmp+0x30>
    de6c:	lsls	r3, r3, #2
    de6e:	adds	r0, #20
    de70:	adds	r1, #20
    de72:	add	r1, r3
    de74:	push	{r4}
    de76:	add	r3, r0
    de78:	b.n	de7e <__mcmp+0x1a>
    de7a:	cmp	r0, r3
    de7c:	bcs.n	de98 <__mcmp+0x34>
    de7e:	ldr.w	r4, [r3, #-4]!
    de82:	ldr.w	r2, [r1, #-4]!
    de86:	cmp	r4, r2
    de88:	beq.n	de7a <__mcmp+0x16>
    de8a:	bcc.n	dea0 <__mcmp+0x3c>
    de8c:	movs	r0, #1
    de8e:	ldr.w	r4, [sp], #4
    de92:	bx	lr
    de94:	mov	r0, r2
    de96:	bx	lr
    de98:	movs	r0, #0
    de9a:	ldr.w	r4, [sp], #4
    de9e:	bx	lr
    dea0:	mov.w	r0, #4294967295
    dea4:	b.n	de8e <__mcmp+0x2a>
    dea6:	nop

0000dea8 <__mdiff>:
    dea8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    deac:	ldr	r3, [r1, #16]
    deae:	mov	r7, r1
    deb0:	ldr	r1, [r2, #16]
    deb2:	subs	r3, r3, r1
    deb4:	cmp	r3, #0
    deb6:	mov	r8, r2
    deb8:	bne.n	deea <__mdiff+0x42>
    deba:	lsls	r1, r1, #2
    debc:	add.w	r2, r7, #20
    dec0:	add.w	r5, r8, #20
    dec4:	adds	r3, r2, r1
    dec6:	add	r1, r5
    dec8:	b.n	dece <__mdiff+0x26>
    deca:	cmp	r2, r3
    decc:	bcs.n	df8c <__mdiff+0xe4>
    dece:	ldr.w	r6, [r3, #-4]!
    ded2:	ldr.w	r4, [r1, #-4]!
    ded6:	cmp	r6, r4
    ded8:	beq.n	deca <__mdiff+0x22>
    deda:	bcs.n	df9e <__mdiff+0xf6>
    dedc:	mov	r3, r7
    dede:	mov	r4, r2
    dee0:	mov	r7, r8
    dee2:	mov.w	r9, #1
    dee6:	mov	r8, r3
    dee8:	b.n	def8 <__mdiff+0x50>
    deea:	blt.n	dfa8 <__mdiff+0x100>
    deec:	add.w	r5, r7, #20
    def0:	add.w	r4, r2, #20
    def4:	mov.w	r9, #0
    def8:	ldr	r1, [r7, #4]
    defa:	bl	da54 <_Balloc>
    defe:	ldr.w	r3, [r8, #16]
    df02:	ldr	r6, [r7, #16]
    df04:	str.w	r9, [r0, #12]
    df08:	add.w	ip, r4, r3, lsl #2
    df0c:	mov	lr, r4
    df0e:	add.w	r7, r5, r6, lsl #2
    df12:	add.w	r4, r0, #20
    df16:	movs	r3, #0
    df18:	ldr.w	r1, [lr], #4
    df1c:	ldr.w	r8, [r5], #4
    df20:	uxth	r2, r1
    df22:	uxtah	r3, r3, r8
    df26:	lsrs	r1, r1, #16
    df28:	subs	r2, r3, r2
    df2a:	rsb	r3, r1, r8, lsr #16
    df2e:	add.w	r3, r3, r2, asr #16
    df32:	uxth	r2, r2
    df34:	orr.w	r2, r2, r3, lsl #16
    df38:	cmp	ip, lr
    df3a:	str.w	r2, [r4], #4
    df3e:	mov.w	r3, r3, asr #16
    df42:	bhi.n	df18 <__mdiff+0x70>
    df44:	cmp	r7, r5
    df46:	bls.n	df78 <__mdiff+0xd0>
    df48:	mov	ip, r4
    df4a:	mov	r1, r5
    df4c:	ldr.w	lr, [r1], #4
    df50:	uxtah	r2, r3, lr
    df54:	asrs	r3, r2, #16
    df56:	add.w	r3, r3, lr, lsr #16
    df5a:	uxth	r2, r2
    df5c:	orr.w	r2, r2, r3, lsl #16
    df60:	cmp	r7, r1
    df62:	str.w	r2, [ip], #4
    df66:	mov.w	r3, r3, asr #16
    df6a:	bhi.n	df4c <__mdiff+0xa4>
    df6c:	mvns	r5, r5
    df6e:	add	r5, r7
    df70:	bic.w	r5, r5, #3
    df74:	adds	r5, #4
    df76:	add	r4, r5
    df78:	subs	r4, #4
    df7a:	cbnz	r2, df86 <__mdiff+0xde>
    df7c:	ldr.w	r3, [r4, #-4]!
    df80:	subs	r6, #1
    df82:	cmp	r3, #0
    df84:	beq.n	df7c <__mdiff+0xd4>
    df86:	str	r6, [r0, #16]
    df88:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df8c:	movs	r1, #0
    df8e:	bl	da54 <_Balloc>
    df92:	movs	r2, #1
    df94:	movs	r3, #0
    df96:	str	r2, [r0, #16]
    df98:	str	r3, [r0, #20]
    df9a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df9e:	mov	r4, r5
    dfa0:	mov.w	r9, #0
    dfa4:	mov	r5, r2
    dfa6:	b.n	def8 <__mdiff+0x50>
    dfa8:	mov	r3, r7
    dfaa:	add.w	r4, r7, #20
    dfae:	add.w	r5, r8, #20
    dfb2:	mov	r7, r8
    dfb4:	mov.w	r9, #1
    dfb8:	mov	r8, r3
    dfba:	b.n	def8 <__mdiff+0x50>

0000dfbc <__d2b>:
    dfbc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dfc0:	vmov	r6, r7, d0
    dfc4:	sub	sp, #12
    dfc6:	mov	r8, r1
    dfc8:	movs	r1, #1
    dfca:	mov	r4, r7
    dfcc:	ubfx	r5, r7, #20, #11
    dfd0:	mov	r7, r2
    dfd2:	bl	da54 <_Balloc>
    dfd6:	ubfx	r4, r4, #0, #20
    dfda:	mov	r9, r0
    dfdc:	cbz	r5, dfe2 <__d2b+0x26>
    dfde:	orr.w	r4, r4, #1048576	; 0x100000
    dfe2:	str	r4, [sp, #4]
    dfe4:	cbz	r6, e02e <__d2b+0x72>
    dfe6:	add	r0, sp, #8
    dfe8:	str.w	r6, [r0, #-8]!
    dfec:	bl	db74 <__lo0bits>
    dff0:	cmp	r0, #0
    dff2:	bne.n	e05e <__d2b+0xa2>
    dff4:	ldmia.w	sp, {r2, r3}
    dff8:	str.w	r2, [r9, #20]
    dffc:	cmp	r3, #0
    dffe:	ite	eq
    e000:	moveq	r1, #1
    e002:	movne	r1, #2
    e004:	str.w	r3, [r9, #24]
    e008:	str.w	r1, [r9, #16]
    e00c:	cbnz	r5, e046 <__d2b+0x8a>
    e00e:	add.w	r3, r9, r1, lsl #2
    e012:	subw	r0, r0, #1074	; 0x432
    e016:	str.w	r0, [r8]
    e01a:	ldr	r0, [r3, #16]
    e01c:	bl	db34 <__hi0bits>
    e020:	rsb	r0, r0, r1, lsl #5
    e024:	str	r0, [r7, #0]
    e026:	mov	r0, r9
    e028:	add	sp, #12
    e02a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e02e:	add	r0, sp, #4
    e030:	bl	db74 <__lo0bits>
    e034:	ldr	r3, [sp, #4]
    e036:	str.w	r3, [r9, #20]
    e03a:	movs	r1, #1
    e03c:	adds	r0, #32
    e03e:	str.w	r1, [r9, #16]
    e042:	cmp	r5, #0
    e044:	beq.n	e00e <__d2b+0x52>
    e046:	subw	r5, r5, #1075	; 0x433
    e04a:	add	r5, r0
    e04c:	rsb	r0, r0, #53	; 0x35
    e050:	str.w	r5, [r8]
    e054:	str	r0, [r7, #0]
    e056:	mov	r0, r9
    e058:	add	sp, #12
    e05a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e05e:	ldmia.w	sp, {r2, r3}
    e062:	rsb	r1, r0, #32
    e066:	lsl.w	r1, r3, r1
    e06a:	orrs	r2, r1
    e06c:	lsrs	r3, r0
    e06e:	str	r3, [sp, #4]
    e070:	str.w	r2, [r9, #20]
    e074:	b.n	dffc <__d2b+0x40>
    e076:	nop

0000e078 <_vasnprintf_r>:
    e078:	push	{r4, r5, r6, lr}
    e07a:	mov	r5, r2
    e07c:	sub	sp, #104	; 0x68
    e07e:	ldr	r4, [r2, #0]
    e080:	cbz	r1, e086 <_vasnprintf_r+0xe>
    e082:	cmp	r4, #0
    e084:	bne.n	e0bc <_vasnprintf_r+0x44>
    e086:	movs	r4, #0
    e088:	mov.w	r2, #648	; 0x288
    e08c:	strh.w	r2, [sp, #12]
    e090:	str	r4, [sp, #0]
    e092:	str	r4, [sp, #16]
    e094:	mov	r2, r3
    e096:	movw	r6, #65535	; 0xffff
    e09a:	ldr	r3, [sp, #120]	; 0x78
    e09c:	str	r4, [sp, #8]
    e09e:	mov	r1, sp
    e0a0:	str	r4, [sp, #20]
    e0a2:	strh.w	r6, [sp, #14]
    e0a6:	bl	f098 <_svfprintf_r>
    e0aa:	cmp	r0, #0
    e0ac:	blt.n	e0d2 <_vasnprintf_r+0x5a>
    e0ae:	ldr	r3, [sp, #0]
    e0b0:	str	r0, [r5, #0]
    e0b2:	movs	r2, #0
    e0b4:	strb	r2, [r3, #0]
    e0b6:	ldr	r0, [sp, #16]
    e0b8:	add	sp, #104	; 0x68
    e0ba:	pop	{r4, r5, r6, pc}
    e0bc:	mov.w	r2, #1544	; 0x608
    e0c0:	str	r1, [sp, #0]
    e0c2:	str	r1, [sp, #16]
    e0c4:	strh.w	r2, [sp, #12]
    e0c8:	bge.n	e094 <_vasnprintf_r+0x1c>
    e0ca:	movs	r3, #139	; 0x8b
    e0cc:	str	r3, [r0, #0]
    e0ce:	movs	r0, #0
    e0d0:	b.n	e0b8 <_vasnprintf_r+0x40>
    e0d2:	movs	r0, #0
    e0d4:	b.n	e0b8 <_vasnprintf_r+0x40>
    e0d6:	nop

0000e0d8 <_calloc_r>:
    e0d8:	push	{r4, lr}
    e0da:	mul.w	r1, r2, r1
    e0de:	bl	c7dc <_malloc_r>
    e0e2:	mov	r4, r0
    e0e4:	cbz	r0, e11e <_calloc_r+0x46>
    e0e6:	ldr.w	r2, [r0, #-4]
    e0ea:	bic.w	r2, r2, #3
    e0ee:	subs	r2, #4
    e0f0:	cmp	r2, #36	; 0x24
    e0f2:	bhi.n	e126 <_calloc_r+0x4e>
    e0f4:	cmp	r2, #19
    e0f6:	bls.n	e122 <_calloc_r+0x4a>
    e0f8:	movs	r3, #0
    e0fa:	cmp	r2, #27
    e0fc:	str	r3, [r0, #0]
    e0fe:	str	r3, [r0, #4]
    e100:	bls.n	e130 <_calloc_r+0x58>
    e102:	cmp	r2, #36	; 0x24
    e104:	str	r3, [r0, #8]
    e106:	str	r3, [r0, #12]
    e108:	iteee	ne
    e10a:	addne.w	r2, r0, #16
    e10e:	streq	r3, [r0, #16]
    e110:	streq	r3, [r0, #20]
    e112:	addeq.w	r2, r0, #24
    e116:	movs	r3, #0
    e118:	str	r3, [r2, #0]
    e11a:	str	r3, [r2, #4]
    e11c:	str	r3, [r2, #8]
    e11e:	mov	r0, r4
    e120:	pop	{r4, pc}
    e122:	mov	r2, r0
    e124:	b.n	e116 <_calloc_r+0x3e>
    e126:	movs	r1, #0
    e128:	bl	cf4c <memset>
    e12c:	mov	r0, r4
    e12e:	pop	{r4, pc}
    e130:	add.w	r2, r0, #8
    e134:	b.n	e116 <_calloc_r+0x3e>
    e136:	nop

0000e138 <quorem>:
    e138:	ldr	r2, [r0, #16]
    e13a:	ldr	r3, [r1, #16]
    e13c:	cmp	r3, r2
    e13e:	bgt.w	e25c <quorem+0x124>
    e142:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e146:	add.w	r8, r3, #4294967295
    e14a:	add.w	r7, r1, #20
    e14e:	add.w	fp, r0, #20
    e152:	ldr.w	r2, [r7, r8, lsl #2]
    e156:	ldr.w	r3, [fp, r8, lsl #2]
    e15a:	mov.w	r4, r8, lsl #2
    e15e:	sub	sp, #12
    e160:	adds	r2, #1
    e162:	udiv	r9, r3, r2
    e166:	add.w	r3, fp, r4
    e16a:	str	r4, [sp, #0]
    e16c:	add.w	sl, r7, r4
    e170:	str	r3, [sp, #4]
    e172:	cmp.w	r9, #0
    e176:	beq.n	e1ec <quorem+0xb4>
    e178:	movs	r5, #0
    e17a:	mov	ip, r7
    e17c:	mov	lr, fp
    e17e:	mov	r3, r5
    e180:	ldr.w	r6, [ip], #4
    e184:	ldr.w	r2, [lr]
    e188:	uxth	r4, r6
    e18a:	mla	r5, r9, r4, r5
    e18e:	lsrs	r6, r6, #16
    e190:	lsrs	r4, r5, #16
    e192:	mla	r4, r9, r6, r4
    e196:	uxth	r5, r5
    e198:	subs	r3, r3, r5
    e19a:	uxth	r6, r4
    e19c:	uxtah	r3, r3, r2
    e1a0:	rsb	r6, r6, r2, lsr #16
    e1a4:	add.w	r6, r6, r3, asr #16
    e1a8:	uxth	r3, r3
    e1aa:	orr.w	r3, r3, r6, lsl #16
    e1ae:	cmp	sl, ip
    e1b0:	str.w	r3, [lr], #4
    e1b4:	mov.w	r5, r4, lsr #16
    e1b8:	mov.w	r3, r6, asr #16
    e1bc:	bcs.n	e180 <quorem+0x48>
    e1be:	ldr	r3, [sp, #0]
    e1c0:	ldr.w	r3, [fp, r3]
    e1c4:	cbnz	r3, e1ec <quorem+0xb4>
    e1c6:	ldr	r4, [sp, #4]
    e1c8:	subs	r3, r4, #4
    e1ca:	cmp	fp, r3
    e1cc:	bcs.n	e1e8 <quorem+0xb0>
    e1ce:	ldr.w	r3, [r4, #-4]
    e1d2:	cbnz	r3, e1e8 <quorem+0xb0>
    e1d4:	sub.w	r3, r4, #8
    e1d8:	b.n	e1e0 <quorem+0xa8>
    e1da:	ldr	r2, [r3, #0]
    e1dc:	subs	r3, #4
    e1de:	cbnz	r2, e1e8 <quorem+0xb0>
    e1e0:	cmp	fp, r3
    e1e2:	add.w	r8, r8, #4294967295
    e1e6:	bcc.n	e1da <quorem+0xa2>
    e1e8:	str.w	r8, [r0, #16]
    e1ec:	mov	r4, r0
    e1ee:	bl	de64 <__mcmp>
    e1f2:	cmp	r0, #0
    e1f4:	blt.n	e254 <quorem+0x11c>
    e1f6:	add.w	r9, r9, #1
    e1fa:	mov	r5, fp
    e1fc:	movs	r3, #0
    e1fe:	ldr.w	r1, [r7], #4
    e202:	ldr	r0, [r5, #0]
    e204:	uxth	r2, r1
    e206:	subs	r2, r3, r2
    e208:	lsrs	r1, r1, #16
    e20a:	uxtah	r2, r2, r0
    e20e:	rsb	r3, r1, r0, lsr #16
    e212:	add.w	r3, r3, r2, asr #16
    e216:	uxth	r1, r2
    e218:	orr.w	r1, r1, r3, lsl #16
    e21c:	cmp	sl, r7
    e21e:	str.w	r1, [r5], #4
    e222:	mov.w	r3, r3, asr #16
    e226:	bcs.n	e1fe <quorem+0xc6>
    e228:	ldr.w	r2, [fp, r8, lsl #2]
    e22c:	add.w	r3, fp, r8, lsl #2
    e230:	cbnz	r2, e254 <quorem+0x11c>
    e232:	subs	r2, r3, #4
    e234:	cmp	fp, r2
    e236:	bcs.n	e250 <quorem+0x118>
    e238:	ldr.w	r2, [r3, #-4]
    e23c:	cbnz	r2, e250 <quorem+0x118>
    e23e:	subs	r3, #8
    e240:	b.n	e248 <quorem+0x110>
    e242:	ldr	r2, [r3, #0]
    e244:	subs	r3, #4
    e246:	cbnz	r2, e250 <quorem+0x118>
    e248:	cmp	fp, r3
    e24a:	add.w	r8, r8, #4294967295
    e24e:	bcc.n	e242 <quorem+0x10a>
    e250:	str.w	r8, [r4, #16]
    e254:	mov	r0, r9
    e256:	add	sp, #12
    e258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e25c:	movs	r0, #0
    e25e:	bx	lr

0000e260 <_dtoa_r>:
    e260:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e264:	vmov	r6, r7, d0
    e268:	sub	sp, #108	; 0x6c
    e26a:	ldr	r4, [r0, #64]	; 0x40
    e26c:	ldr	r5, [sp, #144]	; 0x90
    e26e:	str	r1, [sp, #0]
    e270:	mov	r9, r0
    e272:	str	r2, [sp, #20]
    e274:	str	r3, [sp, #12]
    e276:	vmov	sl, s0
    e27a:	mov	fp, r7
    e27c:	cbz	r4, e294 <_dtoa_r+0x34>
    e27e:	ldr	r2, [r0, #68]	; 0x44
    e280:	str	r2, [r4, #4]
    e282:	movs	r3, #1
    e284:	lsls	r3, r2
    e286:	str	r3, [r4, #8]
    e288:	mov	r1, r4
    e28a:	bl	daa0 <_Bfree>
    e28e:	movs	r3, #0
    e290:	str.w	r3, [r9, #64]	; 0x40
    e294:	cmp.w	fp, #0
    e298:	mov	r4, fp
    e29a:	blt.n	e306 <_dtoa_r+0xa6>
    e29c:	movs	r3, #0
    e29e:	str	r3, [r5, #0]
    e2a0:	ldr	r3, [pc, #644]	; (e528 <_dtoa_r+0x2c8>)
    e2a2:	mov	r2, r3
    e2a4:	ands	r3, r4
    e2a6:	cmp	r3, r2
    e2a8:	beq.n	e2d8 <_dtoa_r+0x78>
    e2aa:	movs	r2, #0
    e2ac:	movs	r3, #0
    e2ae:	mov	r0, sl
    e2b0:	mov	r1, fp
    e2b2:	bl	c35c <__aeabi_dcmpeq>
    e2b6:	mov	r6, sl
    e2b8:	mov	r7, fp
    e2ba:	mov	r8, r0
    e2bc:	cbz	r0, e312 <_dtoa_r+0xb2>
    e2be:	ldr	r2, [sp, #12]
    e2c0:	movs	r3, #1
    e2c2:	str	r3, [r2, #0]
    e2c4:	ldr	r3, [sp, #148]	; 0x94
    e2c6:	cmp	r3, #0
    e2c8:	beq.w	e448 <_dtoa_r+0x1e8>
    e2cc:	ldr	r0, [pc, #604]	; (e52c <_dtoa_r+0x2cc>)
    e2ce:	str	r0, [r3, #0]
    e2d0:	subs	r0, #1
    e2d2:	add	sp, #108	; 0x6c
    e2d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2d8:	ldr	r2, [sp, #12]
    e2da:	movw	r3, #9999	; 0x270f
    e2de:	str	r3, [r2, #0]
    e2e0:	cmp.w	sl, #0
    e2e4:	beq.w	e41c <_dtoa_r+0x1bc>
    e2e8:	ldr	r0, [pc, #580]	; (e530 <_dtoa_r+0x2d0>)
    e2ea:	ldr	r3, [sp, #148]	; 0x94
    e2ec:	cmp	r3, #0
    e2ee:	beq.n	e2d2 <_dtoa_r+0x72>
    e2f0:	ldrb	r3, [r0, #3]
    e2f2:	cmp	r3, #0
    e2f4:	beq.w	e44c <_dtoa_r+0x1ec>
    e2f8:	add.w	r3, r0, #8
    e2fc:	ldr	r2, [sp, #148]	; 0x94
    e2fe:	str	r3, [r2, #0]
    e300:	add	sp, #108	; 0x6c
    e302:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e306:	movs	r3, #1
    e308:	bic.w	r4, fp, #2147483648	; 0x80000000
    e30c:	str	r3, [r5, #0]
    e30e:	mov	fp, r4
    e310:	b.n	e2a0 <_dtoa_r+0x40>
    e312:	add	r2, sp, #96	; 0x60
    e314:	add	r1, sp, #100	; 0x64
    e316:	vmov	d0, r6, r7
    e31a:	mov	r0, r9
    e31c:	bl	dfbc <__d2b>
    e320:	lsrs	r5, r4, #20
    e322:	str	r0, [sp, #40]	; 0x28
    e324:	bne.w	e42e <_dtoa_r+0x1ce>
    e328:	ldr	r5, [sp, #96]	; 0x60
    e32a:	ldr	r6, [sp, #100]	; 0x64
    e32c:	add	r6, r5
    e32e:	addw	r3, r6, #1074	; 0x432
    e332:	cmp	r3, #32
    e334:	ble.w	e848 <_dtoa_r+0x5e8>
    e338:	rsb	r3, r3, #64	; 0x40
    e33c:	addw	r0, r6, #1042	; 0x412
    e340:	lsls	r4, r3
    e342:	lsr.w	r0, sl, r0
    e346:	orrs	r0, r4
    e348:	bl	bda0 <__aeabi_ui2d>
    e34c:	movs	r3, #1
    e34e:	subs	r4, r6, #1
    e350:	sub.w	r1, r1, #32505856	; 0x1f00000
    e354:	str	r3, [sp, #60]	; 0x3c
    e356:	movs	r2, #0
    e358:	ldr	r3, [pc, #472]	; (e534 <_dtoa_r+0x2d4>)
    e35a:	bl	bb24 <__aeabi_dsub>
    e35e:	add	r3, pc, #432	; (adr r3, e510 <_dtoa_r+0x2b0>)
    e360:	ldrd	r2, r3, [r3]
    e364:	bl	be8c <__aeabi_dmul>
    e368:	add	r3, pc, #428	; (adr r3, e518 <_dtoa_r+0x2b8>)
    e36a:	ldrd	r2, r3, [r3]
    e36e:	bl	bb28 <__adddf3>
    e372:	mov	r6, r0
    e374:	mov	r0, r4
    e376:	mov	r7, r1
    e378:	bl	bdc0 <__aeabi_i2d>
    e37c:	add	r3, pc, #416	; (adr r3, e520 <_dtoa_r+0x2c0>)
    e37e:	ldrd	r2, r3, [r3]
    e382:	bl	be8c <__aeabi_dmul>
    e386:	mov	r2, r0
    e388:	mov	r3, r1
    e38a:	mov	r0, r6
    e38c:	mov	r1, r7
    e38e:	bl	bb28 <__adddf3>
    e392:	mov	r6, r0
    e394:	mov	r7, r1
    e396:	bl	c3ec <__aeabi_d2iz>
    e39a:	movs	r2, #0
    e39c:	str	r0, [sp, #16]
    e39e:	movs	r3, #0
    e3a0:	mov	r0, r6
    e3a2:	mov	r1, r7
    e3a4:	bl	c370 <__aeabi_dcmplt>
    e3a8:	cmp	r0, #0
    e3aa:	bne.w	e7fe <_dtoa_r+0x59e>
    e3ae:	ldr	r6, [sp, #16]
    e3b0:	cmp	r6, #22
    e3b2:	bhi.w	e7f8 <_dtoa_r+0x598>
    e3b6:	ldr	r3, [pc, #384]	; (e538 <_dtoa_r+0x2d8>)
    e3b8:	add.w	r3, r3, r6, lsl #3
    e3bc:	ldrd	r0, r1, [r3]
    e3c0:	mov	r2, sl
    e3c2:	mov	r3, fp
    e3c4:	bl	c3ac <__aeabi_dcmpgt>
    e3c8:	cmp	r0, #0
    e3ca:	beq.w	e852 <_dtoa_r+0x5f2>
    e3ce:	subs	r3, r6, #1
    e3d0:	str	r3, [sp, #16]
    e3d2:	movs	r3, #0
    e3d4:	str	r3, [sp, #52]	; 0x34
    e3d6:	subs	r5, r5, r4
    e3d8:	subs.w	r8, r5, #1
    e3dc:	bmi.w	e834 <_dtoa_r+0x5d4>
    e3e0:	movs	r3, #0
    e3e2:	str	r3, [sp, #28]
    e3e4:	ldr	r3, [sp, #16]
    e3e6:	cmp	r3, #0
    e3e8:	blt.w	e822 <_dtoa_r+0x5c2>
    e3ec:	add	r8, r3
    e3ee:	str	r3, [sp, #48]	; 0x30
    e3f0:	movs	r3, #0
    e3f2:	str	r3, [sp, #24]
    e3f4:	ldr	r3, [sp, #0]
    e3f6:	cmp	r3, #9
    e3f8:	bhi.n	e450 <_dtoa_r+0x1f0>
    e3fa:	cmp	r3, #5
    e3fc:	ble.w	f088 <_dtoa_r+0xe28>
    e400:	subs	r3, #4
    e402:	str	r3, [sp, #0]
    e404:	movs	r6, #0
    e406:	ldr	r3, [sp, #0]
    e408:	subs	r3, #2
    e40a:	cmp	r3, #3
    e40c:	bhi.w	f056 <_dtoa_r+0xdf6>
    e410:	tbh	[pc, r3, lsl #1]
    e414:	.word	0x0224032b
    e418:	.word	0x04500336
    e41c:	ldr	r3, [pc, #272]	; (e530 <_dtoa_r+0x2d0>)
    e41e:	ldr	r2, [pc, #284]	; (e53c <_dtoa_r+0x2dc>)
    e420:	ubfx	r0, r4, #0, #20
    e424:	cmp	r0, #0
    e426:	ite	ne
    e428:	movne	r0, r3
    e42a:	moveq	r0, r2
    e42c:	b.n	e2ea <_dtoa_r+0x8a>
    e42e:	ubfx	r3, fp, #0, #20
    e432:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    e436:	subw	r4, r5, #1023	; 0x3ff
    e43a:	mov	r0, sl
    e43c:	str.w	r8, [sp, #60]	; 0x3c
    e440:	orr.w	r1, r1, #3145728	; 0x300000
    e444:	ldr	r5, [sp, #96]	; 0x60
    e446:	b.n	e356 <_dtoa_r+0xf6>
    e448:	ldr	r0, [pc, #244]	; (e540 <_dtoa_r+0x2e0>)
    e44a:	b.n	e2d2 <_dtoa_r+0x72>
    e44c:	adds	r3, r0, #3
    e44e:	b.n	e2fc <_dtoa_r+0x9c>
    e450:	movs	r1, #0
    e452:	str.w	r1, [r9, #68]	; 0x44
    e456:	mov	r0, r9
    e458:	mov	r4, r1
    e45a:	str	r1, [sp, #0]
    e45c:	bl	da54 <_Balloc>
    e460:	mov.w	r3, #4294967295
    e464:	str	r3, [sp, #32]
    e466:	str	r3, [sp, #56]	; 0x38
    e468:	movs	r3, #1
    e46a:	str	r0, [sp, #36]	; 0x24
    e46c:	str.w	r0, [r9, #64]	; 0x40
    e470:	str	r4, [sp, #20]
    e472:	str	r3, [sp, #44]	; 0x2c
    e474:	ldr	r3, [sp, #100]	; 0x64
    e476:	cmp	r3, #0
    e478:	blt.w	e61c <_dtoa_r+0x3bc>
    e47c:	ldr	r2, [sp, #16]
    e47e:	cmp	r2, #14
    e480:	bgt.w	e61c <_dtoa_r+0x3bc>
    e484:	ldr	r3, [pc, #176]	; (e538 <_dtoa_r+0x2d8>)
    e486:	add.w	r3, r3, r2, lsl #3
    e48a:	vldr	d7, [r3]
    e48e:	ldr	r3, [sp, #20]
    e490:	cmp	r3, #0
    e492:	vstr	d7, [sp]
    e496:	blt.w	ea96 <_dtoa_r+0x836>
    e49a:	mov	r6, sl
    e49c:	mov	r7, fp
    e49e:	ldrd	sl, fp, [sp]
    e4a2:	mov	r0, r6
    e4a4:	mov	r2, sl
    e4a6:	mov	r3, fp
    e4a8:	mov	r1, r7
    e4aa:	bl	c0e0 <__aeabi_ddiv>
    e4ae:	bl	c3ec <__aeabi_d2iz>
    e4b2:	mov	r4, r0
    e4b4:	bl	bdc0 <__aeabi_i2d>
    e4b8:	mov	r2, sl
    e4ba:	mov	r3, fp
    e4bc:	bl	be8c <__aeabi_dmul>
    e4c0:	mov	r3, r1
    e4c2:	mov	r2, r0
    e4c4:	mov	r1, r7
    e4c6:	mov	r0, r6
    e4c8:	bl	bb24 <__aeabi_dsub>
    e4cc:	ldr	r5, [sp, #36]	; 0x24
    e4ce:	add.w	r3, r4, #48	; 0x30
    e4d2:	strb	r3, [r5, #0]
    e4d4:	ldr	r3, [sp, #32]
    e4d6:	cmp	r3, #1
    e4d8:	mov	r6, r0
    e4da:	mov	r7, r1
    e4dc:	add.w	r5, r5, #1
    e4e0:	beq.n	e5a6 <_dtoa_r+0x346>
    e4e2:	movs	r2, #0
    e4e4:	ldr	r3, [pc, #92]	; (e544 <_dtoa_r+0x2e4>)
    e4e6:	bl	be8c <__aeabi_dmul>
    e4ea:	movs	r2, #0
    e4ec:	movs	r3, #0
    e4ee:	mov	r6, r0
    e4f0:	mov	r7, r1
    e4f2:	bl	c35c <__aeabi_dcmpeq>
    e4f6:	cmp	r0, #0
    e4f8:	bne.n	e5f6 <_dtoa_r+0x396>
    e4fa:	str.w	r9, [sp, #20]
    e4fe:	ldr.w	sl, [sp, #32]
    e502:	ldr.w	fp, [sp, #36]	; 0x24
    e506:	ldrd	r8, r9, [sp]
    e50a:	b.n	e55e <_dtoa_r+0x2fe>
    e50c:	nop.w
    e510:	.word	0x636f4361
    e514:	.word	0x3fd287a7
    e518:	.word	0x8b60c8b3
    e51c:	.word	0x3fc68a28
    e520:	.word	0x509f79fb
    e524:	.word	0x3fd34413
    e528:	.word	0x7ff00000
    e52c:	.word	0x20000b3d
    e530:	.word	0x20000b38
    e534:	.word	0x3ff80000
    e538:	.word	0x20000a30
    e53c:	.word	0x20000b2c
    e540:	.word	0x20000b3c
    e544:	.word	0x40240000
    e548:	bl	be8c <__aeabi_dmul>
    e54c:	movs	r2, #0
    e54e:	movs	r3, #0
    e550:	mov	r6, r0
    e552:	mov	r7, r1
    e554:	bl	c35c <__aeabi_dcmpeq>
    e558:	cmp	r0, #0
    e55a:	bne.w	ecba <_dtoa_r+0xa5a>
    e55e:	mov	r2, r8
    e560:	mov	r3, r9
    e562:	mov	r0, r6
    e564:	mov	r1, r7
    e566:	bl	c0e0 <__aeabi_ddiv>
    e56a:	bl	c3ec <__aeabi_d2iz>
    e56e:	mov	r4, r0
    e570:	bl	bdc0 <__aeabi_i2d>
    e574:	mov	r2, r8
    e576:	mov	r3, r9
    e578:	bl	be8c <__aeabi_dmul>
    e57c:	mov	r2, r0
    e57e:	mov	r3, r1
    e580:	mov	r0, r6
    e582:	mov	r1, r7
    e584:	bl	bb24 <__aeabi_dsub>
    e588:	add.w	lr, r4, #48	; 0x30
    e58c:	strb.w	lr, [r5], #1
    e590:	rsb	lr, fp, r5
    e594:	cmp	lr, sl
    e596:	mov	r6, r0
    e598:	mov	r7, r1
    e59a:	mov.w	r2, #0
    e59e:	ldr	r3, [pc, #696]	; (e858 <_dtoa_r+0x5f8>)
    e5a0:	bne.n	e548 <_dtoa_r+0x2e8>
    e5a2:	ldr.w	r9, [sp, #20]
    e5a6:	mov	r2, r6
    e5a8:	mov	r3, r7
    e5aa:	mov	r0, r6
    e5ac:	mov	r1, r7
    e5ae:	bl	bb28 <__adddf3>
    e5b2:	mov	r6, r0
    e5b4:	mov	r7, r1
    e5b6:	mov	r2, r0
    e5b8:	mov	r3, r1
    e5ba:	ldrd	r0, r1, [sp]
    e5be:	bl	c370 <__aeabi_dcmplt>
    e5c2:	cbnz	r0, e5d6 <_dtoa_r+0x376>
    e5c4:	mov	r2, r6
    e5c6:	mov	r3, r7
    e5c8:	ldrd	r0, r1, [sp]
    e5cc:	bl	c35c <__aeabi_dcmpeq>
    e5d0:	cbz	r0, e5f6 <_dtoa_r+0x396>
    e5d2:	lsls	r3, r4, #31
    e5d4:	bpl.n	e5f6 <_dtoa_r+0x396>
    e5d6:	ldrb.w	r4, [r5, #-1]
    e5da:	ldr	r2, [sp, #36]	; 0x24
    e5dc:	subs	r3, r5, #1
    e5de:	b.n	e5ea <_dtoa_r+0x38a>
    e5e0:	cmp	r2, r3
    e5e2:	beq.w	edde <_dtoa_r+0xb7e>
    e5e6:	ldrb.w	r4, [r3, #-1]!
    e5ea:	cmp	r4, #57	; 0x39
    e5ec:	add.w	r5, r3, #1
    e5f0:	beq.n	e5e0 <_dtoa_r+0x380>
    e5f2:	adds	r4, #1
    e5f4:	strb	r4, [r3, #0]
    e5f6:	ldr	r1, [sp, #40]	; 0x28
    e5f8:	mov	r0, r9
    e5fa:	bl	daa0 <_Bfree>
    e5fe:	movs	r2, #0
    e600:	ldr	r3, [sp, #16]
    e602:	strb	r2, [r5, #0]
    e604:	ldr	r2, [sp, #12]
    e606:	adds	r3, #1
    e608:	str	r3, [r2, #0]
    e60a:	ldr	r3, [sp, #148]	; 0x94
    e60c:	cmp	r3, #0
    e60e:	beq.w	ed48 <_dtoa_r+0xae8>
    e612:	ldr	r0, [sp, #36]	; 0x24
    e614:	str	r5, [r3, #0]
    e616:	add	sp, #108	; 0x6c
    e618:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e61c:	ldr	r2, [sp, #44]	; 0x2c
    e61e:	cmp	r2, #0
    e620:	beq.w	e840 <_dtoa_r+0x5e0>
    e624:	ldr	r2, [sp, #0]
    e626:	cmp	r2, #1
    e628:	ble.w	eada <_dtoa_r+0x87a>
    e62c:	ldr	r3, [sp, #32]
    e62e:	ldr	r2, [sp, #24]
    e630:	subs	r7, r3, #1
    e632:	cmp	r2, r7
    e634:	blt.w	ed4e <_dtoa_r+0xaee>
    e638:	subs	r7, r2, r7
    e63a:	ldr	r3, [sp, #32]
    e63c:	cmp	r3, #0
    e63e:	blt.w	ef42 <_dtoa_r+0xce2>
    e642:	ldr	r5, [sp, #28]
    e644:	ldr	r3, [sp, #32]
    e646:	ldr	r2, [sp, #28]
    e648:	movs	r1, #1
    e64a:	add	r2, r3
    e64c:	mov	r0, r9
    e64e:	str	r2, [sp, #28]
    e650:	add	r8, r3
    e652:	bl	dbd0 <__i2b>
    e656:	mov	r6, r0
    e658:	cbz	r5, e674 <_dtoa_r+0x414>
    e65a:	cmp.w	r8, #0
    e65e:	ble.n	e674 <_dtoa_r+0x414>
    e660:	cmp	r5, r8
    e662:	ldr	r2, [sp, #28]
    e664:	mov	r3, r5
    e666:	it	ge
    e668:	movge	r3, r8
    e66a:	subs	r2, r2, r3
    e66c:	str	r2, [sp, #28]
    e66e:	subs	r5, r5, r3
    e670:	rsb	r8, r3, r8
    e674:	ldr	r3, [sp, #24]
    e676:	cmp	r3, #0
    e678:	ble.w	ec66 <_dtoa_r+0xa06>
    e67c:	ldr	r2, [sp, #44]	; 0x2c
    e67e:	cmp	r2, #0
    e680:	beq.w	ea88 <_dtoa_r+0x828>
    e684:	cmp	r7, #0
    e686:	beq.w	ea88 <_dtoa_r+0x828>
    e68a:	mov	r1, r6
    e68c:	mov	r2, r7
    e68e:	mov	r0, r9
    e690:	bl	dd14 <__pow5mult>
    e694:	ldr	r2, [sp, #40]	; 0x28
    e696:	mov	r1, r0
    e698:	mov	r6, r0
    e69a:	mov	r0, r9
    e69c:	bl	dbe4 <__multiply>
    e6a0:	ldr	r1, [sp, #40]	; 0x28
    e6a2:	mov	r4, r0
    e6a4:	mov	r0, r9
    e6a6:	bl	daa0 <_Bfree>
    e6aa:	ldr	r3, [sp, #24]
    e6ac:	subs	r3, r3, r7
    e6ae:	str	r3, [sp, #24]
    e6b0:	bne.w	ea86 <_dtoa_r+0x826>
    e6b4:	movs	r1, #1
    e6b6:	mov	r0, r9
    e6b8:	bl	dbd0 <__i2b>
    e6bc:	ldr	r3, [sp, #48]	; 0x30
    e6be:	str	r0, [sp, #24]
    e6c0:	cmp	r3, #0
    e6c2:	beq.w	eaf0 <_dtoa_r+0x890>
    e6c6:	mov	r1, r0
    e6c8:	mov	r2, r3
    e6ca:	mov	r0, r9
    e6cc:	bl	dd14 <__pow5mult>
    e6d0:	ldr	r3, [sp, #0]
    e6d2:	str	r0, [sp, #24]
    e6d4:	cmp	r3, #1
    e6d6:	ble.w	ecc0 <_dtoa_r+0xa60>
    e6da:	movs	r7, #0
    e6dc:	ldr	r2, [sp, #24]
    e6de:	ldr	r3, [r2, #16]
    e6e0:	add.w	r3, r2, r3, lsl #2
    e6e4:	ldr	r0, [r3, #16]
    e6e6:	bl	db34 <__hi0bits>
    e6ea:	rsb	r0, r0, #32
    e6ee:	add	r0, r8
    e6f0:	ands.w	r0, r0, #31
    e6f4:	beq.w	eaec <_dtoa_r+0x88c>
    e6f8:	rsb	r3, r0, #32
    e6fc:	cmp	r3, #4
    e6fe:	ble.w	f07c <_dtoa_r+0xe1c>
    e702:	rsb	r0, r0, #28
    e706:	ldr	r3, [sp, #28]
    e708:	add	r3, r0
    e70a:	str	r3, [sp, #28]
    e70c:	add	r5, r0
    e70e:	add	r8, r0
    e710:	ldr	r3, [sp, #28]
    e712:	cmp	r3, #0
    e714:	ble.n	e722 <_dtoa_r+0x4c2>
    e716:	mov	r1, r4
    e718:	mov	r2, r3
    e71a:	mov	r0, r9
    e71c:	bl	ddb4 <__lshift>
    e720:	mov	r4, r0
    e722:	cmp.w	r8, #0
    e726:	ble.n	e734 <_dtoa_r+0x4d4>
    e728:	mov	r2, r8
    e72a:	ldr	r1, [sp, #24]
    e72c:	mov	r0, r9
    e72e:	bl	ddb4 <__lshift>
    e732:	str	r0, [sp, #24]
    e734:	ldr	r3, [sp, #52]	; 0x34
    e736:	cmp	r3, #0
    e738:	bne.w	ec30 <_dtoa_r+0x9d0>
    e73c:	ldr	r3, [sp, #32]
    e73e:	cmp	r3, #0
    e740:	ble.w	ec6a <_dtoa_r+0xa0a>
    e744:	ldr	r3, [sp, #44]	; 0x2c
    e746:	cmp	r3, #0
    e748:	bne.w	eb34 <_dtoa_r+0x8d4>
    e74c:	ldr.w	fp, [sp, #36]	; 0x24
    e750:	ldr	r7, [sp, #32]
    e752:	ldr.w	r8, [sp, #24]
    e756:	mov	r5, fp
    e758:	b.n	e760 <_dtoa_r+0x500>
    e75a:	bl	dab4 <__multadd>
    e75e:	mov	r4, r0
    e760:	mov	r1, r8
    e762:	mov	r0, r4
    e764:	bl	e138 <quorem>
    e768:	add.w	sl, r0, #48	; 0x30
    e76c:	strb.w	sl, [r5], #1
    e770:	rsb	r3, fp, r5
    e774:	cmp	r3, r7
    e776:	mov.w	r2, #10
    e77a:	mov.w	r3, #0
    e77e:	mov	r1, r4
    e780:	mov	r0, r9
    e782:	blt.n	e75a <_dtoa_r+0x4fa>
    e784:	ldr	r3, [sp, #36]	; 0x24
    e786:	ldr	r2, [sp, #32]
    e788:	cmp	r2, #1
    e78a:	ite	ge
    e78c:	addge	r3, r3, r2
    e78e:	addlt	r3, #1
    e790:	mov	r5, r3
    e792:	mov.w	fp, #0
    e796:	mov	r1, r4
    e798:	movs	r2, #1
    e79a:	mov	r0, r9
    e79c:	bl	ddb4 <__lshift>
    e7a0:	ldr	r1, [sp, #24]
    e7a2:	str	r0, [sp, #40]	; 0x28
    e7a4:	bl	de64 <__mcmp>
    e7a8:	cmp	r0, #0
    e7aa:	ble.w	edb8 <_dtoa_r+0xb58>
    e7ae:	ldrb.w	r2, [r5, #-1]
    e7b2:	ldr	r1, [sp, #36]	; 0x24
    e7b4:	subs	r3, r5, #1
    e7b6:	b.n	e7c2 <_dtoa_r+0x562>
    e7b8:	cmp	r3, r1
    e7ba:	beq.w	eca6 <_dtoa_r+0xa46>
    e7be:	ldrb.w	r2, [r3, #-1]!
    e7c2:	cmp	r2, #57	; 0x39
    e7c4:	add.w	r5, r3, #1
    e7c8:	beq.n	e7b8 <_dtoa_r+0x558>
    e7ca:	adds	r2, #1
    e7cc:	strb	r2, [r3, #0]
    e7ce:	ldr	r1, [sp, #24]
    e7d0:	mov	r0, r9
    e7d2:	bl	daa0 <_Bfree>
    e7d6:	cmp	r6, #0
    e7d8:	beq.w	e5f6 <_dtoa_r+0x396>
    e7dc:	cmp.w	fp, #0
    e7e0:	beq.n	e7ee <_dtoa_r+0x58e>
    e7e2:	cmp	fp, r6
    e7e4:	beq.n	e7ee <_dtoa_r+0x58e>
    e7e6:	mov	r1, fp
    e7e8:	mov	r0, r9
    e7ea:	bl	daa0 <_Bfree>
    e7ee:	mov	r1, r6
    e7f0:	mov	r0, r9
    e7f2:	bl	daa0 <_Bfree>
    e7f6:	b.n	e5f6 <_dtoa_r+0x396>
    e7f8:	movs	r3, #1
    e7fa:	str	r3, [sp, #52]	; 0x34
    e7fc:	b.n	e3d6 <_dtoa_r+0x176>
    e7fe:	ldr.w	r8, [sp, #16]
    e802:	mov	r0, r8
    e804:	bl	bdc0 <__aeabi_i2d>
    e808:	mov	r2, r0
    e80a:	mov	r3, r1
    e80c:	mov	r0, r6
    e80e:	mov	r1, r7
    e810:	bl	c35c <__aeabi_dcmpeq>
    e814:	cmp	r0, #0
    e816:	bne.w	e3ae <_dtoa_r+0x14e>
    e81a:	add.w	r3, r8, #4294967295
    e81e:	str	r3, [sp, #16]
    e820:	b.n	e3ae <_dtoa_r+0x14e>
    e822:	ldr	r2, [sp, #28]
    e824:	ldr	r3, [sp, #16]
    e826:	subs	r2, r2, r3
    e828:	negs	r3, r3
    e82a:	str	r3, [sp, #24]
    e82c:	movs	r3, #0
    e82e:	str	r2, [sp, #28]
    e830:	str	r3, [sp, #48]	; 0x30
    e832:	b.n	e3f4 <_dtoa_r+0x194>
    e834:	rsb	r3, r8, #0
    e838:	str	r3, [sp, #28]
    e83a:	mov.w	r8, #0
    e83e:	b.n	e3e4 <_dtoa_r+0x184>
    e840:	ldr	r7, [sp, #24]
    e842:	ldr	r5, [sp, #28]
    e844:	ldr	r6, [sp, #44]	; 0x2c
    e846:	b.n	e658 <_dtoa_r+0x3f8>
    e848:	rsb	r4, r3, #32
    e84c:	lsl.w	r0, sl, r4
    e850:	b.n	e348 <_dtoa_r+0xe8>
    e852:	str	r0, [sp, #52]	; 0x34
    e854:	b.n	e3d6 <_dtoa_r+0x176>
    e856:	nop
    e858:	.word	0x40240000
    e85c:	movs	r3, #0
    e85e:	str	r3, [sp, #44]	; 0x2c
    e860:	ldr	r3, [sp, #16]
    e862:	ldr	r2, [sp, #20]
    e864:	add	r3, r2
    e866:	str	r3, [sp, #56]	; 0x38
    e868:	adds	r3, #1
    e86a:	cmp	r3, #0
    e86c:	str	r3, [sp, #32]
    e86e:	ble.w	ed6c <_dtoa_r+0xb0c>
    e872:	ldr	r4, [sp, #32]
    e874:	mov	r5, r4
    e876:	movs	r1, #0
    e878:	cmp	r5, #23
    e87a:	str.w	r1, [r9, #68]	; 0x44
    e87e:	bls.n	e898 <_dtoa_r+0x638>
    e880:	movs	r2, #1
    e882:	movs	r3, #4
    e884:	lsls	r3, r3, #1
    e886:	add.w	r0, r3, #20
    e88a:	cmp	r0, r5
    e88c:	mov	r1, r2
    e88e:	add.w	r2, r2, #1
    e892:	bls.n	e884 <_dtoa_r+0x624>
    e894:	str.w	r1, [r9, #68]	; 0x44
    e898:	mov	r0, r9
    e89a:	bl	da54 <_Balloc>
    e89e:	cmp	r4, #14
    e8a0:	str	r0, [sp, #36]	; 0x24
    e8a2:	str.w	r0, [r9, #64]	; 0x40
    e8a6:	bhi.w	e474 <_dtoa_r+0x214>
    e8aa:	cmp	r6, #0
    e8ac:	beq.w	e474 <_dtoa_r+0x214>
    e8b0:	ldr	r1, [sp, #16]
    e8b2:	cmp	r1, #0
    e8b4:	strd	sl, fp, [sp, #64]	; 0x40
    e8b8:	ble.w	edf0 <_dtoa_r+0xb90>
    e8bc:	ldr	r3, [pc, #576]	; (eb00 <_dtoa_r+0x8a0>)
    e8be:	and.w	r2, r1, #15
    e8c2:	asrs	r6, r1, #4
    e8c4:	add.w	r3, r3, r2, lsl #3
    e8c8:	lsls	r0, r6, #27
    e8ca:	ldrd	r4, r5, [r3]
    e8ce:	bpl.w	ed5e <_dtoa_r+0xafe>
    e8d2:	ldr	r3, [pc, #560]	; (eb04 <_dtoa_r+0x8a4>)
    e8d4:	mov	r0, sl
    e8d6:	mov	r1, fp
    e8d8:	ldrd	r2, r3, [r3, #32]
    e8dc:	bl	c0e0 <__aeabi_ddiv>
    e8e0:	strd	r0, r1, [sp, #72]	; 0x48
    e8e4:	and.w	r6, r6, #15
    e8e8:	mov.w	sl, #3
    e8ec:	cbz	r6, e910 <_dtoa_r+0x6b0>
    e8ee:	ldr	r7, [pc, #532]	; (eb04 <_dtoa_r+0x8a4>)
    e8f0:	lsls	r1, r6, #31
    e8f2:	bpl.n	e908 <_dtoa_r+0x6a8>
    e8f4:	mov	r0, r4
    e8f6:	mov	r1, r5
    e8f8:	ldrd	r2, r3, [r7]
    e8fc:	bl	be8c <__aeabi_dmul>
    e900:	add.w	sl, sl, #1
    e904:	mov	r4, r0
    e906:	mov	r5, r1
    e908:	asrs	r6, r6, #1
    e90a:	add.w	r7, r7, #8
    e90e:	bne.n	e8f0 <_dtoa_r+0x690>
    e910:	mov	r2, r4
    e912:	mov	r3, r5
    e914:	ldrd	r0, r1, [sp, #72]	; 0x48
    e918:	bl	c0e0 <__aeabi_ddiv>
    e91c:	mov	r6, r0
    e91e:	mov	r7, r1
    e920:	ldr	r3, [sp, #52]	; 0x34
    e922:	cbz	r3, e936 <_dtoa_r+0x6d6>
    e924:	movs	r2, #0
    e926:	ldr	r3, [pc, #480]	; (eb08 <_dtoa_r+0x8a8>)
    e928:	mov	r0, r6
    e92a:	mov	r1, r7
    e92c:	bl	c370 <__aeabi_dcmplt>
    e930:	cmp	r0, #0
    e932:	bne.w	ef6a <_dtoa_r+0xd0a>
    e936:	mov	r0, sl
    e938:	bl	bdc0 <__aeabi_i2d>
    e93c:	mov	r2, r6
    e93e:	mov	r3, r7
    e940:	bl	be8c <__aeabi_dmul>
    e944:	ldr	r3, [pc, #452]	; (eb0c <_dtoa_r+0x8ac>)
    e946:	movs	r2, #0
    e948:	bl	bb28 <__adddf3>
    e94c:	ldr	r3, [sp, #32]
    e94e:	mov	r4, r0
    e950:	sub.w	r5, r1, #54525952	; 0x3400000
    e954:	cmp	r3, #0
    e956:	beq.w	ed10 <_dtoa_r+0xab0>
    e95a:	ldr	r3, [sp, #16]
    e95c:	str	r3, [sp, #88]	; 0x58
    e95e:	ldr	r3, [sp, #32]
    e960:	str	r3, [sp, #72]	; 0x48
    e962:	ldr	r3, [sp, #44]	; 0x2c
    e964:	cmp	r3, #0
    e966:	beq.w	ee92 <_dtoa_r+0xc32>
    e96a:	ldr	r2, [sp, #72]	; 0x48
    e96c:	ldr	r3, [pc, #400]	; (eb00 <_dtoa_r+0x8a0>)
    e96e:	ldr	r1, [pc, #416]	; (eb10 <_dtoa_r+0x8b0>)
    e970:	add.w	r3, r3, r2, lsl #3
    e974:	ldrd	r2, r3, [r3, #-8]
    e978:	movs	r0, #0
    e97a:	bl	c0e0 <__aeabi_ddiv>
    e97e:	mov	r2, r4
    e980:	mov	r3, r5
    e982:	bl	bb24 <__aeabi_dsub>
    e986:	mov	sl, r0
    e988:	mov	fp, r1
    e98a:	mov	r0, r6
    e98c:	mov	r1, r7
    e98e:	bl	c3ec <__aeabi_d2iz>
    e992:	mov	r4, r0
    e994:	bl	bdc0 <__aeabi_i2d>
    e998:	mov	r2, r0
    e99a:	mov	r3, r1
    e99c:	mov	r0, r6
    e99e:	mov	r1, r7
    e9a0:	bl	bb24 <__aeabi_dsub>
    e9a4:	adds	r4, #48	; 0x30
    e9a6:	ldr	r5, [sp, #36]	; 0x24
    e9a8:	uxtb	r4, r4
    e9aa:	mov	r6, r0
    e9ac:	mov	r7, r1
    e9ae:	strb	r4, [r5, #0]
    e9b0:	mov	r2, r0
    e9b2:	mov	r3, r1
    e9b4:	mov	r0, sl
    e9b6:	mov	r1, fp
    e9b8:	adds	r5, #1
    e9ba:	bl	c3ac <__aeabi_dcmpgt>
    e9be:	cmp	r0, #0
    e9c0:	bne.n	ea64 <_dtoa_r+0x804>
    e9c2:	mov	r2, r6
    e9c4:	mov	r3, r7
    e9c6:	movs	r0, #0
    e9c8:	ldr	r1, [pc, #316]	; (eb08 <_dtoa_r+0x8a8>)
    e9ca:	bl	bb24 <__aeabi_dsub>
    e9ce:	mov	r2, r0
    e9d0:	mov	r3, r1
    e9d2:	mov	r0, sl
    e9d4:	mov	r1, fp
    e9d6:	bl	c3ac <__aeabi_dcmpgt>
    e9da:	cmp	r0, #0
    e9dc:	bne.w	eff0 <_dtoa_r+0xd90>
    e9e0:	ldr	r2, [sp, #72]	; 0x48
    e9e2:	cmp	r2, #1
    e9e4:	ble.w	edd6 <_dtoa_r+0xb76>
    e9e8:	ldr	r3, [sp, #72]	; 0x48
    e9ea:	ldr	r2, [sp, #36]	; 0x24
    e9ec:	str.w	r8, [sp, #72]	; 0x48
    e9f0:	add	r3, r2
    e9f2:	mov	r8, r3
    e9f4:	b.n	ea12 <_dtoa_r+0x7b2>
    e9f6:	movs	r0, #0
    e9f8:	ldr	r1, [pc, #268]	; (eb08 <_dtoa_r+0x8a8>)
    e9fa:	bl	bb24 <__aeabi_dsub>
    e9fe:	mov	r2, sl
    ea00:	mov	r3, fp
    ea02:	bl	c370 <__aeabi_dcmplt>
    ea06:	cmp	r0, #0
    ea08:	bne.w	eff0 <_dtoa_r+0xd90>
    ea0c:	cmp	r5, r8
    ea0e:	beq.w	edd2 <_dtoa_r+0xb72>
    ea12:	mov	r0, sl
    ea14:	mov	r1, fp
    ea16:	movs	r2, #0
    ea18:	ldr	r3, [pc, #248]	; (eb14 <_dtoa_r+0x8b4>)
    ea1a:	bl	be8c <__aeabi_dmul>
    ea1e:	movs	r2, #0
    ea20:	ldr	r3, [pc, #240]	; (eb14 <_dtoa_r+0x8b4>)
    ea22:	mov	sl, r0
    ea24:	mov	fp, r1
    ea26:	mov	r0, r6
    ea28:	mov	r1, r7
    ea2a:	bl	be8c <__aeabi_dmul>
    ea2e:	mov	r7, r1
    ea30:	mov	r6, r0
    ea32:	bl	c3ec <__aeabi_d2iz>
    ea36:	mov	r4, r0
    ea38:	bl	bdc0 <__aeabi_i2d>
    ea3c:	mov	r2, r0
    ea3e:	mov	r3, r1
    ea40:	mov	r0, r6
    ea42:	mov	r1, r7
    ea44:	bl	bb24 <__aeabi_dsub>
    ea48:	adds	r4, #48	; 0x30
    ea4a:	uxtb	r4, r4
    ea4c:	mov	r2, sl
    ea4e:	mov	r3, fp
    ea50:	strb.w	r4, [r5], #1
    ea54:	mov	r6, r0
    ea56:	mov	r7, r1
    ea58:	bl	c370 <__aeabi_dcmplt>
    ea5c:	mov	r2, r6
    ea5e:	mov	r3, r7
    ea60:	cmp	r0, #0
    ea62:	beq.n	e9f6 <_dtoa_r+0x796>
    ea64:	ldr	r3, [sp, #88]	; 0x58
    ea66:	str	r3, [sp, #16]
    ea68:	b.n	e5f6 <_dtoa_r+0x396>
    ea6a:	movs	r3, #0
    ea6c:	str	r3, [sp, #44]	; 0x2c
    ea6e:	ldr	r3, [sp, #20]
    ea70:	cmp	r3, #0
    ea72:	ble.w	ed76 <_dtoa_r+0xb16>
    ea76:	mov	r5, r3
    ea78:	mov	r4, r3
    ea7a:	str	r3, [sp, #56]	; 0x38
    ea7c:	str	r3, [sp, #32]
    ea7e:	b.n	e876 <_dtoa_r+0x616>
    ea80:	movs	r3, #1
    ea82:	str	r3, [sp, #44]	; 0x2c
    ea84:	b.n	ea6e <_dtoa_r+0x80e>
    ea86:	str	r4, [sp, #40]	; 0x28
    ea88:	ldr	r2, [sp, #24]
    ea8a:	ldr	r1, [sp, #40]	; 0x28
    ea8c:	mov	r0, r9
    ea8e:	bl	dd14 <__pow5mult>
    ea92:	mov	r4, r0
    ea94:	b.n	e6b4 <_dtoa_r+0x454>
    ea96:	ldr	r3, [sp, #32]
    ea98:	cmp	r3, #0
    ea9a:	bgt.w	e49a <_dtoa_r+0x23a>
    ea9e:	bne.w	ed40 <_dtoa_r+0xae0>
    eaa2:	movs	r2, #0
    eaa4:	ldr	r3, [pc, #112]	; (eb18 <_dtoa_r+0x8b8>)
    eaa6:	ldrd	r0, r1, [sp]
    eaaa:	bl	be8c <__aeabi_dmul>
    eaae:	mov	r3, fp
    eab0:	mov	r2, sl
    eab2:	bl	c398 <__aeabi_dcmpge>
    eab6:	ldr	r3, [sp, #32]
    eab8:	str	r3, [sp, #24]
    eaba:	mov	r6, r3
    eabc:	cmp	r0, #0
    eabe:	beq.w	ec96 <_dtoa_r+0xa36>
    eac2:	ldr	r3, [sp, #20]
    eac4:	ldr	r5, [sp, #36]	; 0x24
    eac6:	mvns	r3, r3
    eac8:	str	r3, [sp, #16]
    eaca:	ldr	r1, [sp, #24]
    eacc:	mov	r0, r9
    eace:	bl	daa0 <_Bfree>
    ead2:	cmp	r6, #0
    ead4:	beq.w	e5f6 <_dtoa_r+0x396>
    ead8:	b.n	e7ee <_dtoa_r+0x58e>
    eada:	ldr	r2, [sp, #60]	; 0x3c
    eadc:	cmp	r2, #0
    eade:	beq.w	ef52 <_dtoa_r+0xcf2>
    eae2:	addw	r3, r3, #1075	; 0x433
    eae6:	ldr	r7, [sp, #24]
    eae8:	ldr	r5, [sp, #28]
    eaea:	b.n	e646 <_dtoa_r+0x3e6>
    eaec:	movs	r0, #28
    eaee:	b.n	e706 <_dtoa_r+0x4a6>
    eaf0:	ldr	r3, [sp, #0]
    eaf2:	cmp	r3, #1
    eaf4:	ble.w	eff8 <_dtoa_r+0xd98>
    eaf8:	ldr	r7, [sp, #48]	; 0x30
    eafa:	movs	r0, #1
    eafc:	b.n	e6ee <_dtoa_r+0x48e>
    eafe:	nop
    eb00:	.word	0x20000a30
    eb04:	.word	0x20000af8
    eb08:	.word	0x3ff00000
    eb0c:	.word	0x401c0000
    eb10:	.word	0x3fe00000
    eb14:	.word	0x40240000
    eb18:	.word	0x40140000
    eb1c:	mov	r1, r6
    eb1e:	movs	r3, #0
    eb20:	movs	r2, #10
    eb22:	mov	r0, r9
    eb24:	bl	dab4 <__multadd>
    eb28:	ldr	r3, [sp, #56]	; 0x38
    eb2a:	cmp	r3, #0
    eb2c:	mov	r6, r0
    eb2e:	ble.w	f04c <_dtoa_r+0xdec>
    eb32:	str	r3, [sp, #32]
    eb34:	cmp	r5, #0
    eb36:	ble.n	eb44 <_dtoa_r+0x8e4>
    eb38:	mov	r1, r6
    eb3a:	mov	r2, r5
    eb3c:	mov	r0, r9
    eb3e:	bl	ddb4 <__lshift>
    eb42:	mov	r6, r0
    eb44:	cmp	r7, #0
    eb46:	bne.w	ee42 <_dtoa_r+0xbe2>
    eb4a:	mov	r8, r6
    eb4c:	ldr	r3, [sp, #32]
    eb4e:	ldr	r2, [sp, #36]	; 0x24
    eb50:	subs	r3, #1
    eb52:	adds	r3, r2, r3
    eb54:	str	r3, [sp, #32]
    eb56:	and.w	r3, sl, #1
    eb5a:	str	r3, [sp, #40]	; 0x28
    eb5c:	mov	r7, r2
    eb5e:	ldr.w	fp, [sp, #24]
    eb62:	mov	r0, r4
    eb64:	mov	r1, fp
    eb66:	bl	e138 <quorem>
    eb6a:	mov	r1, r6
    eb6c:	mov	r5, r0
    eb6e:	mov	r0, r4
    eb70:	bl	de64 <__mcmp>
    eb74:	mov	r2, r8
    eb76:	mov	r1, fp
    eb78:	mov	sl, r0
    eb7a:	mov	r0, r9
    eb7c:	bl	dea8 <__mdiff>
    eb80:	ldr	r2, [r0, #12]
    eb82:	mov	fp, r0
    eb84:	add.w	r3, r5, #48	; 0x30
    eb88:	cmp	r2, #0
    eb8a:	bne.n	ec20 <_dtoa_r+0x9c0>
    eb8c:	mov	r1, r0
    eb8e:	mov	r0, r4
    eb90:	str	r3, [sp, #28]
    eb92:	bl	de64 <__mcmp>
    eb96:	mov	r1, fp
    eb98:	str	r0, [sp, #20]
    eb9a:	mov	r0, r9
    eb9c:	bl	daa0 <_Bfree>
    eba0:	ldr	r2, [sp, #20]
    eba2:	ldr	r3, [sp, #28]
    eba4:	cbnz	r2, ebb2 <_dtoa_r+0x952>
    eba6:	ldr	r1, [sp, #0]
    eba8:	cbnz	r1, ebb2 <_dtoa_r+0x952>
    ebaa:	ldr	r1, [sp, #40]	; 0x28
    ebac:	cmp	r1, #0
    ebae:	beq.w	f01c <_dtoa_r+0xdbc>
    ebb2:	cmp.w	sl, #0
    ebb6:	blt.w	ed80 <_dtoa_r+0xb20>
    ebba:	bne.n	ebc8 <_dtoa_r+0x968>
    ebbc:	ldr	r1, [sp, #0]
    ebbe:	cbnz	r1, ebc8 <_dtoa_r+0x968>
    ebc0:	ldr	r1, [sp, #40]	; 0x28
    ebc2:	cmp	r1, #0
    ebc4:	beq.w	ed80 <_dtoa_r+0xb20>
    ebc8:	cmp	r2, #0
    ebca:	bgt.w	ee6a <_dtoa_r+0xc0a>
    ebce:	ldr	r2, [sp, #32]
    ebd0:	strb	r3, [r7, #0]
    ebd2:	add.w	sl, r7, #1
    ebd6:	cmp	r7, r2
    ebd8:	mov	r5, sl
    ebda:	beq.w	ee82 <_dtoa_r+0xc22>
    ebde:	mov	r1, r4
    ebe0:	movs	r3, #0
    ebe2:	movs	r2, #10
    ebe4:	mov	r0, r9
    ebe6:	bl	dab4 <__multadd>
    ebea:	cmp	r6, r8
    ebec:	mov	r4, r0
    ebee:	mov	r1, r6
    ebf0:	mov.w	r3, #0
    ebf4:	mov.w	r2, #10
    ebf8:	mov	r0, r9
    ebfa:	beq.n	ec14 <_dtoa_r+0x9b4>
    ebfc:	bl	dab4 <__multadd>
    ec00:	mov	r1, r8
    ec02:	mov	r6, r0
    ec04:	movs	r3, #0
    ec06:	movs	r2, #10
    ec08:	mov	r0, r9
    ec0a:	bl	dab4 <__multadd>
    ec0e:	mov	r7, sl
    ec10:	mov	r8, r0
    ec12:	b.n	eb5e <_dtoa_r+0x8fe>
    ec14:	bl	dab4 <__multadd>
    ec18:	mov	r7, sl
    ec1a:	mov	r6, r0
    ec1c:	mov	r8, r0
    ec1e:	b.n	eb5e <_dtoa_r+0x8fe>
    ec20:	mov	r1, r0
    ec22:	mov	r0, r9
    ec24:	str	r3, [sp, #20]
    ec26:	bl	daa0 <_Bfree>
    ec2a:	movs	r2, #1
    ec2c:	ldr	r3, [sp, #20]
    ec2e:	b.n	ebb2 <_dtoa_r+0x952>
    ec30:	ldr	r1, [sp, #24]
    ec32:	mov	r0, r4
    ec34:	bl	de64 <__mcmp>
    ec38:	cmp	r0, #0
    ec3a:	bge.w	e73c <_dtoa_r+0x4dc>
    ec3e:	mov	r1, r4
    ec40:	ldr	r4, [sp, #16]
    ec42:	movs	r3, #0
    ec44:	subs	r4, #1
    ec46:	movs	r2, #10
    ec48:	mov	r0, r9
    ec4a:	str	r4, [sp, #16]
    ec4c:	bl	dab4 <__multadd>
    ec50:	ldr	r3, [sp, #44]	; 0x2c
    ec52:	mov	r4, r0
    ec54:	cmp	r3, #0
    ec56:	bne.w	eb1c <_dtoa_r+0x8bc>
    ec5a:	ldr	r3, [sp, #56]	; 0x38
    ec5c:	cmp	r3, #0
    ec5e:	ble.w	f03c <_dtoa_r+0xddc>
    ec62:	str	r3, [sp, #32]
    ec64:	b.n	e74c <_dtoa_r+0x4ec>
    ec66:	ldr	r4, [sp, #40]	; 0x28
    ec68:	b.n	e6b4 <_dtoa_r+0x454>
    ec6a:	ldr	r3, [sp, #0]
    ec6c:	cmp	r3, #2
    ec6e:	ble.w	e744 <_dtoa_r+0x4e4>
    ec72:	ldr	r3, [sp, #32]
    ec74:	cmp	r3, #0
    ec76:	bne.w	efb4 <_dtoa_r+0xd54>
    ec7a:	ldr	r1, [sp, #24]
    ec7c:	movs	r2, #5
    ec7e:	mov	r0, r9
    ec80:	bl	dab4 <__multadd>
    ec84:	mov	r1, r0
    ec86:	str	r0, [sp, #24]
    ec88:	mov	r0, r4
    ec8a:	bl	de64 <__mcmp>
    ec8e:	cmp	r0, #0
    ec90:	str	r4, [sp, #40]	; 0x28
    ec92:	ble.w	eac2 <_dtoa_r+0x862>
    ec96:	ldr	r2, [sp, #16]
    ec98:	ldr	r1, [sp, #36]	; 0x24
    ec9a:	movs	r3, #49	; 0x31
    ec9c:	adds	r2, #1
    ec9e:	str	r2, [sp, #16]
    eca0:	strb	r3, [r1, #0]
    eca2:	adds	r5, r1, #1
    eca4:	b.n	eaca <_dtoa_r+0x86a>
    eca6:	ldr	r2, [sp, #16]
    eca8:	adds	r2, #1
    ecaa:	str	r2, [sp, #16]
    ecac:	ldr	r2, [sp, #36]	; 0x24
    ecae:	movs	r3, #49	; 0x31
    ecb0:	strb	r3, [r2, #0]
    ecb2:	b.n	e7ce <_dtoa_r+0x56e>
    ecb4:	movs	r3, #1
    ecb6:	str	r3, [sp, #44]	; 0x2c
    ecb8:	b.n	e860 <_dtoa_r+0x600>
    ecba:	ldr.w	r9, [sp, #20]
    ecbe:	b.n	e5f6 <_dtoa_r+0x396>
    ecc0:	cmp.w	sl, #0
    ecc4:	bne.w	e6da <_dtoa_r+0x47a>
    ecc8:	ubfx	r3, fp, #0, #20
    eccc:	cmp	r3, #0
    ecce:	bne.w	ef4e <_dtoa_r+0xcee>
    ecd2:	bic.w	r7, fp, #2147483648	; 0x80000000
    ecd6:	lsrs	r7, r7, #20
    ecd8:	lsls	r7, r7, #20
    ecda:	cbz	r7, ece8 <_dtoa_r+0xa88>
    ecdc:	ldr	r3, [sp, #28]
    ecde:	adds	r3, #1
    ece0:	str	r3, [sp, #28]
    ece2:	add.w	r8, r8, #1
    ece6:	movs	r7, #1
    ece8:	ldr	r3, [sp, #48]	; 0x30
    ecea:	movs	r0, #1
    ecec:	cmp	r3, #0
    ecee:	beq.w	e6ee <_dtoa_r+0x48e>
    ecf2:	b.n	e6dc <_dtoa_r+0x47c>
    ecf4:	mov	r0, sl
    ecf6:	bl	bdc0 <__aeabi_i2d>
    ecfa:	mov	r2, r6
    ecfc:	mov	r3, r7
    ecfe:	bl	be8c <__aeabi_dmul>
    ed02:	movs	r2, #0
    ed04:	ldr	r3, [pc, #764]	; (f004 <_dtoa_r+0xda4>)
    ed06:	bl	bb28 <__adddf3>
    ed0a:	mov	r4, r0
    ed0c:	sub.w	r5, r1, #54525952	; 0x3400000
    ed10:	mov	r0, r6
    ed12:	mov	r1, r7
    ed14:	movs	r2, #0
    ed16:	ldr	r3, [pc, #752]	; (f008 <_dtoa_r+0xda8>)
    ed18:	bl	bb24 <__aeabi_dsub>
    ed1c:	mov	r2, r4
    ed1e:	mov	r3, r5
    ed20:	mov	r6, r0
    ed22:	mov	r7, r1
    ed24:	bl	c3ac <__aeabi_dcmpgt>
    ed28:	cmp	r0, #0
    ed2a:	bne.w	ee8a <_dtoa_r+0xc2a>
    ed2e:	mov	r2, r4
    ed30:	add.w	r3, r5, #2147483648	; 0x80000000
    ed34:	mov	r0, r6
    ed36:	mov	r1, r7
    ed38:	bl	c370 <__aeabi_dcmplt>
    ed3c:	cmp	r0, #0
    ed3e:	beq.n	edd6 <_dtoa_r+0xb76>
    ed40:	movs	r3, #0
    ed42:	str	r3, [sp, #24]
    ed44:	mov	r6, r3
    ed46:	b.n	eac2 <_dtoa_r+0x862>
    ed48:	ldr	r0, [sp, #36]	; 0x24
    ed4a:	b.w	e2d2 <_dtoa_r+0x72>
    ed4e:	ldr	r3, [sp, #24]
    ed50:	ldr	r2, [sp, #48]	; 0x30
    ed52:	str	r7, [sp, #24]
    ed54:	subs	r3, r7, r3
    ed56:	add	r2, r3
    ed58:	str	r2, [sp, #48]	; 0x30
    ed5a:	movs	r7, #0
    ed5c:	b.n	e63a <_dtoa_r+0x3da>
    ed5e:	vldr	d7, [sp, #64]	; 0x40
    ed62:	mov.w	sl, #2
    ed66:	vstr	d7, [sp, #72]	; 0x48
    ed6a:	b.n	e8ec <_dtoa_r+0x68c>
    ed6c:	mov	r4, r3
    ed6e:	movs	r1, #0
    ed70:	str.w	r1, [r9, #68]	; 0x44
    ed74:	b.n	e898 <_dtoa_r+0x638>
    ed76:	movs	r4, #1
    ed78:	str	r4, [sp, #56]	; 0x38
    ed7a:	str	r4, [sp, #32]
    ed7c:	str	r4, [sp, #20]
    ed7e:	b.n	ed6e <_dtoa_r+0xb0e>
    ed80:	cmp	r2, #0
    ed82:	mov	sl, r3
    ed84:	ble.n	edaa <_dtoa_r+0xb4a>
    ed86:	mov	r1, r4
    ed88:	movs	r2, #1
    ed8a:	mov	r0, r9
    ed8c:	bl	ddb4 <__lshift>
    ed90:	ldr	r1, [sp, #24]
    ed92:	mov	r4, r0
    ed94:	bl	de64 <__mcmp>
    ed98:	cmp	r0, #0
    ed9a:	ble.w	f02e <_dtoa_r+0xdce>
    ed9e:	cmp.w	sl, #57	; 0x39
    eda2:	beq.w	efb8 <_dtoa_r+0xd58>
    eda6:	add.w	sl, r5, #49	; 0x31
    edaa:	mov	fp, r6
    edac:	strb.w	sl, [r7]
    edb0:	adds	r5, r7, #1
    edb2:	mov	r6, r8
    edb4:	str	r4, [sp, #40]	; 0x28
    edb6:	b.n	e7ce <_dtoa_r+0x56e>
    edb8:	bne.n	edc4 <_dtoa_r+0xb64>
    edba:	tst.w	sl, #1
    edbe:	beq.n	edc4 <_dtoa_r+0xb64>
    edc0:	b.n	e7ae <_dtoa_r+0x54e>
    edc2:	mov	r5, r2
    edc4:	ldrb.w	r3, [r5, #-1]
    edc8:	cmp	r3, #48	; 0x30
    edca:	add.w	r2, r5, #4294967295
    edce:	beq.n	edc2 <_dtoa_r+0xb62>
    edd0:	b.n	e7ce <_dtoa_r+0x56e>
    edd2:	ldr.w	r8, [sp, #72]	; 0x48
    edd6:	ldrd	sl, fp, [sp, #64]	; 0x40
    edda:	b.w	e474 <_dtoa_r+0x214>
    edde:	ldr	r1, [sp, #36]	; 0x24
    ede0:	movs	r2, #48	; 0x30
    ede2:	strb	r2, [r1, #0]
    ede4:	ldr	r2, [sp, #16]
    ede6:	ldrb.w	r4, [r5, #-1]
    edea:	adds	r2, #1
    edec:	str	r2, [sp, #16]
    edee:	b.n	e5f2 <_dtoa_r+0x392>
    edf0:	ldr	r3, [sp, #16]
    edf2:	negs	r4, r3
    edf4:	cmp	r4, #0
    edf6:	beq.w	ef60 <_dtoa_r+0xd00>
    edfa:	ldr	r3, [pc, #528]	; (f00c <_dtoa_r+0xdac>)
    edfc:	and.w	r2, r4, #15
    ee00:	add.w	r3, r3, r2, lsl #3
    ee04:	ldrd	r2, r3, [r3]
    ee08:	ldrd	r0, r1, [sp, #64]	; 0x40
    ee0c:	bl	be8c <__aeabi_dmul>
    ee10:	asrs	r4, r4, #4
    ee12:	mov	r6, r0
    ee14:	mov	r7, r1
    ee16:	beq.w	f046 <_dtoa_r+0xde6>
    ee1a:	ldr	r5, [pc, #500]	; (f010 <_dtoa_r+0xdb0>)
    ee1c:	mov.w	sl, #2
    ee20:	lsls	r2, r4, #31
    ee22:	bpl.n	ee38 <_dtoa_r+0xbd8>
    ee24:	mov	r0, r6
    ee26:	mov	r1, r7
    ee28:	ldrd	r2, r3, [r5]
    ee2c:	bl	be8c <__aeabi_dmul>
    ee30:	add.w	sl, sl, #1
    ee34:	mov	r6, r0
    ee36:	mov	r7, r1
    ee38:	asrs	r4, r4, #1
    ee3a:	add.w	r5, r5, #8
    ee3e:	bne.n	ee20 <_dtoa_r+0xbc0>
    ee40:	b.n	e920 <_dtoa_r+0x6c0>
    ee42:	ldr	r1, [r6, #4]
    ee44:	mov	r0, r9
    ee46:	bl	da54 <_Balloc>
    ee4a:	ldr	r3, [r6, #16]
    ee4c:	adds	r2, r3, #2
    ee4e:	mov	r5, r0
    ee50:	lsls	r2, r2, #2
    ee52:	add.w	r1, r6, #12
    ee56:	adds	r0, #12
    ee58:	bl	9c5c <memcpy>
    ee5c:	mov	r1, r5
    ee5e:	movs	r2, #1
    ee60:	mov	r0, r9
    ee62:	bl	ddb4 <__lshift>
    ee66:	mov	r8, r0
    ee68:	b.n	eb4c <_dtoa_r+0x8ec>
    ee6a:	cmp	r3, #57	; 0x39
    ee6c:	beq.w	efb8 <_dtoa_r+0xd58>
    ee70:	add.w	sl, r3, #1
    ee74:	mov	fp, r6
    ee76:	strb.w	sl, [r7]
    ee7a:	adds	r5, r7, #1
    ee7c:	mov	r6, r8
    ee7e:	str	r4, [sp, #40]	; 0x28
    ee80:	b.n	e7ce <_dtoa_r+0x56e>
    ee82:	mov	fp, r6
    ee84:	mov	sl, r3
    ee86:	mov	r6, r8
    ee88:	b.n	e796 <_dtoa_r+0x536>
    ee8a:	movs	r3, #0
    ee8c:	str	r3, [sp, #24]
    ee8e:	mov	r6, r3
    ee90:	b.n	ec96 <_dtoa_r+0xa36>
    ee92:	ldr	r3, [sp, #72]	; 0x48
    ee94:	ldr	r1, [pc, #372]	; (f00c <_dtoa_r+0xdac>)
    ee96:	subs	r2, r3, #1
    ee98:	add.w	r1, r1, r2, lsl #3
    ee9c:	mov	r3, r5
    ee9e:	str	r2, [sp, #92]	; 0x5c
    eea0:	ldrd	r0, r1, [r1]
    eea4:	mov	r2, r4
    eea6:	bl	be8c <__aeabi_dmul>
    eeaa:	strd	r0, r1, [sp, #80]	; 0x50
    eeae:	mov	r1, r7
    eeb0:	mov	r0, r6
    eeb2:	bl	c3ec <__aeabi_d2iz>
    eeb6:	mov	r4, r0
    eeb8:	bl	bdc0 <__aeabi_i2d>
    eebc:	mov	r3, r1
    eebe:	mov	r2, r0
    eec0:	mov	r1, r7
    eec2:	mov	r0, r6
    eec4:	bl	bb24 <__aeabi_dsub>
    eec8:	ldr	r3, [sp, #72]	; 0x48
    eeca:	mov	r7, r1
    eecc:	ldr	r1, [sp, #36]	; 0x24
    eece:	adds	r4, #48	; 0x30
    eed0:	cmp	r3, #1
    eed2:	mov	r6, r0
    eed4:	strb	r4, [r1, #0]
    eed6:	add.w	r5, r1, #1
    eeda:	beq.n	ef1e <_dtoa_r+0xcbe>
    eedc:	ldr	r3, [sp, #72]	; 0x48
    eede:	ldr	r2, [sp, #36]	; 0x24
    eee0:	add	r3, r2
    eee2:	mov	sl, r3
    eee4:	mov	fp, r5
    eee6:	movs	r2, #0
    eee8:	ldr	r3, [pc, #296]	; (f014 <_dtoa_r+0xdb4>)
    eeea:	mov	r0, r6
    eeec:	mov	r1, r7
    eeee:	bl	be8c <__aeabi_dmul>
    eef2:	mov	r7, r1
    eef4:	mov	r6, r0
    eef6:	bl	c3ec <__aeabi_d2iz>
    eefa:	mov	r4, r0
    eefc:	bl	bdc0 <__aeabi_i2d>
    ef00:	adds	r4, #48	; 0x30
    ef02:	mov	r2, r0
    ef04:	mov	r3, r1
    ef06:	mov	r0, r6
    ef08:	mov	r1, r7
    ef0a:	bl	bb24 <__aeabi_dsub>
    ef0e:	strb.w	r4, [fp], #1
    ef12:	cmp	sl, fp
    ef14:	mov	r6, r0
    ef16:	mov	r7, r1
    ef18:	bne.n	eee6 <_dtoa_r+0xc86>
    ef1a:	ldr	r3, [sp, #92]	; 0x5c
    ef1c:	add	r5, r3
    ef1e:	movs	r2, #0
    ef20:	ldr	r3, [pc, #244]	; (f018 <_dtoa_r+0xdb8>)
    ef22:	ldrd	r0, r1, [sp, #80]	; 0x50
    ef26:	bl	bb28 <__adddf3>
    ef2a:	mov	r2, r6
    ef2c:	mov	r3, r7
    ef2e:	bl	c370 <__aeabi_dcmplt>
    ef32:	cmp	r0, #0
    ef34:	beq.n	efc8 <_dtoa_r+0xd68>
    ef36:	ldr	r3, [sp, #88]	; 0x58
    ef38:	str	r3, [sp, #16]
    ef3a:	ldrb.w	r4, [r5, #-1]
    ef3e:	b.w	e5da <_dtoa_r+0x37a>
    ef42:	ldr	r3, [sp, #28]
    ef44:	ldr	r2, [sp, #32]
    ef46:	subs	r5, r3, r2
    ef48:	movs	r3, #0
    ef4a:	b.w	e646 <_dtoa_r+0x3e6>
    ef4e:	movs	r7, #0
    ef50:	b.n	ece8 <_dtoa_r+0xa88>
    ef52:	ldr	r3, [sp, #96]	; 0x60
    ef54:	ldr	r7, [sp, #24]
    ef56:	ldr	r5, [sp, #28]
    ef58:	rsb	r3, r3, #54	; 0x36
    ef5c:	b.w	e646 <_dtoa_r+0x3e6>
    ef60:	ldrd	r6, r7, [sp, #64]	; 0x40
    ef64:	mov.w	sl, #2
    ef68:	b.n	e920 <_dtoa_r+0x6c0>
    ef6a:	ldr	r3, [sp, #32]
    ef6c:	cmp	r3, #0
    ef6e:	beq.w	ecf4 <_dtoa_r+0xa94>
    ef72:	ldr	r3, [sp, #56]	; 0x38
    ef74:	cmp	r3, #0
    ef76:	ble.w	edd6 <_dtoa_r+0xb76>
    ef7a:	movs	r2, #0
    ef7c:	ldr	r3, [pc, #148]	; (f014 <_dtoa_r+0xdb4>)
    ef7e:	mov	r0, r6
    ef80:	mov	r1, r7
    ef82:	bl	be8c <__aeabi_dmul>
    ef86:	mov	r6, r0
    ef88:	mov	r7, r1
    ef8a:	add.w	r0, sl, #1
    ef8e:	bl	bdc0 <__aeabi_i2d>
    ef92:	mov	r2, r6
    ef94:	mov	r3, r7
    ef96:	bl	be8c <__aeabi_dmul>
    ef9a:	movs	r2, #0
    ef9c:	ldr	r3, [pc, #100]	; (f004 <_dtoa_r+0xda4>)
    ef9e:	bl	bb28 <__adddf3>
    efa2:	ldr	r2, [sp, #16]
    efa4:	ldr	r3, [sp, #56]	; 0x38
    efa6:	str	r3, [sp, #72]	; 0x48
    efa8:	subs	r2, #1
    efaa:	mov	r4, r0
    efac:	sub.w	r5, r1, #54525952	; 0x3400000
    efb0:	str	r2, [sp, #88]	; 0x58
    efb2:	b.n	e962 <_dtoa_r+0x702>
    efb4:	str	r4, [sp, #40]	; 0x28
    efb6:	b.n	eac2 <_dtoa_r+0x862>
    efb8:	movs	r2, #57	; 0x39
    efba:	mov	fp, r6
    efbc:	str	r4, [sp, #40]	; 0x28
    efbe:	mov	r6, r8
    efc0:	strb	r2, [r7, #0]
    efc2:	adds	r5, r7, #1
    efc4:	b.w	e7b2 <_dtoa_r+0x552>
    efc8:	ldrd	r2, r3, [sp, #80]	; 0x50
    efcc:	movs	r0, #0
    efce:	ldr	r1, [pc, #72]	; (f018 <_dtoa_r+0xdb8>)
    efd0:	bl	bb24 <__aeabi_dsub>
    efd4:	mov	r2, r6
    efd6:	mov	r3, r7
    efd8:	bl	c3ac <__aeabi_dcmpgt>
    efdc:	cbnz	r0, efe2 <_dtoa_r+0xd82>
    efde:	b.n	edd6 <_dtoa_r+0xb76>
    efe0:	mov	r5, r2
    efe2:	ldrb.w	r3, [r5, #-1]
    efe6:	cmp	r3, #48	; 0x30
    efe8:	add.w	r2, r5, #4294967295
    efec:	beq.n	efe0 <_dtoa_r+0xd80>
    efee:	b.n	ea64 <_dtoa_r+0x804>
    eff0:	ldr	r3, [sp, #88]	; 0x58
    eff2:	str	r3, [sp, #16]
    eff4:	b.w	e5da <_dtoa_r+0x37a>
    eff8:	cmp.w	sl, #0
    effc:	bne.w	eaf8 <_dtoa_r+0x898>
    f000:	b.n	ecc8 <_dtoa_r+0xa68>
    f002:	nop
    f004:	.word	0x401c0000
    f008:	.word	0x40140000
    f00c:	.word	0x20000a30
    f010:	.word	0x20000af8
    f014:	.word	0x40240000
    f018:	.word	0x3fe00000
    f01c:	cmp	r3, #57	; 0x39
    f01e:	mov	fp, sl
    f020:	mov	sl, r3
    f022:	beq.n	efb8 <_dtoa_r+0xd58>
    f024:	cmp.w	fp, #0
    f028:	bgt.w	eda6 <_dtoa_r+0xb46>
    f02c:	b.n	edaa <_dtoa_r+0xb4a>
    f02e:	bne.w	edaa <_dtoa_r+0xb4a>
    f032:	tst.w	sl, #1
    f036:	beq.w	edaa <_dtoa_r+0xb4a>
    f03a:	b.n	ed9e <_dtoa_r+0xb3e>
    f03c:	ldr	r3, [sp, #0]
    f03e:	cmp	r3, #2
    f040:	bgt.n	f08e <_dtoa_r+0xe2e>
    f042:	ldr	r3, [sp, #56]	; 0x38
    f044:	b.n	ec62 <_dtoa_r+0xa02>
    f046:	mov.w	sl, #2
    f04a:	b.n	e920 <_dtoa_r+0x6c0>
    f04c:	ldr	r3, [sp, #0]
    f04e:	cmp	r3, #2
    f050:	bgt.n	f08e <_dtoa_r+0xe2e>
    f052:	ldr	r3, [sp, #56]	; 0x38
    f054:	b.n	eb32 <_dtoa_r+0x8d2>
    f056:	movs	r4, #0
    f058:	str.w	r4, [r9, #68]	; 0x44
    f05c:	mov	r1, r4
    f05e:	mov	r0, r9
    f060:	bl	da54 <_Balloc>
    f064:	mov.w	r3, #4294967295
    f068:	str	r3, [sp, #32]
    f06a:	str	r3, [sp, #56]	; 0x38
    f06c:	movs	r3, #1
    f06e:	str	r0, [sp, #36]	; 0x24
    f070:	str	r4, [sp, #20]
    f072:	str.w	r0, [r9, #64]	; 0x40
    f076:	str	r3, [sp, #44]	; 0x2c
    f078:	b.w	e474 <_dtoa_r+0x214>
    f07c:	beq.w	e710 <_dtoa_r+0x4b0>
    f080:	rsb	r0, r0, #60	; 0x3c
    f084:	b.w	e706 <_dtoa_r+0x4a6>
    f088:	movs	r6, #1
    f08a:	b.w	e406 <_dtoa_r+0x1a6>
    f08e:	ldr	r3, [sp, #56]	; 0x38
    f090:	str	r3, [sp, #32]
    f092:	b.n	ec72 <_dtoa_r+0xa12>
    f094:	movs	r0, r0
	...

0000f098 <_svfprintf_r>:
    f098:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f09c:	sub	sp, #260	; 0x104
    f09e:	mov	r4, r1
    f0a0:	str	r1, [sp, #20]
    f0a2:	mov	r5, r2
    f0a4:	str	r3, [sp, #40]	; 0x28
    f0a6:	str	r0, [sp, #24]
    f0a8:	bl	da38 <_localeconv_r>
    f0ac:	ldr	r3, [r0, #0]
    f0ae:	str	r3, [sp, #76]	; 0x4c
    f0b0:	mov	r0, r3
    f0b2:	bl	d500 <strlen>
    f0b6:	ldrh	r3, [r4, #12]
    f0b8:	str	r0, [sp, #72]	; 0x48
    f0ba:	lsls	r6, r3, #24
    f0bc:	bpl.n	f0c6 <_svfprintf_r+0x2e>
    f0be:	ldr	r3, [r4, #16]
    f0c0:	cmp	r3, #0
    f0c2:	beq.w	10328 <_svfprintf_r+0x1290>
    f0c6:	vldr	d7, [pc, #664]	; f360 <_svfprintf_r+0x2c8>
    f0ca:	movs	r3, #0
    f0cc:	vstr	d7, [sp, #64]	; 0x40
    f0d0:	str	r3, [sp, #56]	; 0x38
    f0d2:	str	r3, [sp, #148]	; 0x94
    f0d4:	str	r3, [sp, #144]	; 0x90
    f0d6:	str	r3, [sp, #84]	; 0x54
    f0d8:	str	r3, [sp, #28]
    f0da:	ldr.w	sl, [pc, #656]	; f36c <_svfprintf_r+0x2d4>
    f0de:	add	r3, sp, #192	; 0xc0
    f0e0:	str	r3, [sp, #140]	; 0x8c
    f0e2:	mov	r9, r3
    f0e4:	mov	r8, r5
    f0e6:	ldrb.w	r3, [r8]
    f0ea:	mov	r4, r8
    f0ec:	cbz	r3, f12a <_svfprintf_r+0x92>
    f0ee:	cmp	r3, #37	; 0x25
    f0f0:	bne.n	f0f8 <_svfprintf_r+0x60>
    f0f2:	b.n	f12a <_svfprintf_r+0x92>
    f0f4:	cmp	r3, #37	; 0x25
    f0f6:	beq.n	f100 <_svfprintf_r+0x68>
    f0f8:	ldrb.w	r3, [r4, #1]!
    f0fc:	cmp	r3, #0
    f0fe:	bne.n	f0f4 <_svfprintf_r+0x5c>
    f100:	rsb	r5, r8, r4
    f104:	cbz	r5, f12a <_svfprintf_r+0x92>
    f106:	ldr	r3, [sp, #144]	; 0x90
    f108:	ldr	r2, [sp, #148]	; 0x94
    f10a:	str.w	r8, [r9]
    f10e:	adds	r3, #1
    f110:	add	r2, r5
    f112:	cmp	r3, #7
    f114:	str.w	r5, [r9, #4]
    f118:	str	r2, [sp, #148]	; 0x94
    f11a:	str	r3, [sp, #144]	; 0x90
    f11c:	bgt.w	f26c <_svfprintf_r+0x1d4>
    f120:	add.w	r9, r9, #8
    f124:	ldr	r3, [sp, #28]
    f126:	add	r3, r5
    f128:	str	r3, [sp, #28]
    f12a:	ldrb	r3, [r4, #0]
    f12c:	cmp	r3, #0
    f12e:	beq.w	f27e <_svfprintf_r+0x1e6>
    f132:	movs	r3, #0
    f134:	mov	r2, r3
    f136:	strb.w	r3, [sp, #111]	; 0x6f
    f13a:	mov	r1, r3
    f13c:	str	r3, [sp, #32]
    f13e:	str	r3, [sp, #12]
    f140:	mov.w	fp, #4294967295
    f144:	ldrb	r3, [r4, #1]
    f146:	add.w	r8, r4, #1
    f14a:	mov	r5, fp
    f14c:	add.w	r8, r8, #1
    f150:	sub.w	r0, r3, #32
    f154:	cmp	r0, #88	; 0x58
    f156:	bhi.w	f9c2 <_svfprintf_r+0x92a>
    f15a:	tbh	[pc, r0, lsl #1]
    f15e:	.short	0x03a0
    f160:	.word	0x04320432
    f164:	.word	0x043203a8
    f168:	.word	0x04320432
    f16c:	.word	0x04320432
    f170:	.word	0x03af0432
    f174:	.word	0x043203bd
    f178:	.word	0x00e2005d
    f17c:	.word	0x01090432
    f180:	.word	0x01100110
    f184:	.word	0x01100110
    f188:	.word	0x01100110
    f18c:	.word	0x01100110
    f190:	.word	0x04320110
    f194:	.word	0x04320432
    f198:	.word	0x04320432
    f19c:	.word	0x04320432
    f1a0:	.word	0x04320432
    f1a4:	.word	0x01200432
    f1a8:	.word	0x04320286
    f1ac:	.word	0x04320286
    f1b0:	.word	0x04320432
    f1b4:	.word	0x02d40432
    f1b8:	.word	0x04320432
    f1bc:	.word	0x043202e5
    f1c0:	.word	0x04320432
    f1c4:	.word	0x04320432
    f1c8:	.word	0x0432030f
    f1cc:	.word	0x033d0432
    f1d0:	.word	0x04320432
    f1d4:	.word	0x04320432
    f1d8:	.word	0x04320432
    f1dc:	.word	0x04320432
    f1e0:	.word	0x04320432
    f1e4:	.word	0x0391037e
    f1e8:	.word	0x02860286
    f1ec:	.word	0x03990286
    f1f0:	.word	0x04320391
    f1f4:	.word	0x04070432
    f1f8:	.word	0x04120432
    f1fc:	.word	0x006400a3
    f200:	.word	0x043203c2
    f204:	.word	0x043203c9
    f208:	.word	0x043203ea
    f20c:	.word	0x03f20432
    f210:	ldr	r0, [sp, #32]
    f212:	str	r3, [sp, #40]	; 0x28
    f214:	negs	r0, r0
    f216:	str	r0, [sp, #32]
    f218:	ldr	r3, [sp, #12]
    f21a:	orr.w	r3, r3, #4
    f21e:	str	r3, [sp, #12]
    f220:	ldrb.w	r3, [r8]
    f224:	b.n	f14c <_svfprintf_r+0xb4>
    f226:	ldr	r0, [sp, #40]	; 0x28
    f228:	mov	fp, r5
    f22a:	movs	r1, #0
    f22c:	ldr	r4, [r0, #0]
    f22e:	strb.w	r1, [sp, #111]	; 0x6f
    f232:	adds	r7, r0, #4
    f234:	ldr	r0, [sp, #12]
    f236:	movs	r3, #48	; 0x30
    f238:	movs	r2, #120	; 0x78
    f23a:	cmp	fp, r1
    f23c:	strb.w	r3, [sp, #112]	; 0x70
    f240:	mov.w	r5, #0
    f244:	strb.w	r2, [sp, #113]	; 0x71
    f248:	orr.w	r3, r0, #2
    f24c:	blt.w	f9fc <_svfprintf_r+0x964>
    f250:	bic.w	r3, r0, #128	; 0x80
    f254:	orr.w	r3, r3, #2
    f258:	str	r3, [sp, #12]
    f25a:	orrs.w	r3, r4, r5
    f25e:	str	r7, [sp, #40]	; 0x28
    f260:	beq.w	f9a8 <_svfprintf_r+0x910>
    f264:	mov	r7, r1
    f266:	str	r2, [sp, #52]	; 0x34
    f268:	ldr	r0, [pc, #252]	; (f368 <_svfprintf_r+0x2d0>)
    f26a:	b.n	f83a <_svfprintf_r+0x7a2>
    f26c:	add	r2, sp, #140	; 0x8c
    f26e:	ldr	r1, [sp, #20]
    f270:	ldr	r0, [sp, #24]
    f272:	bl	1077c <__ssprint_r>
    f276:	cbnz	r0, f28c <_svfprintf_r+0x1f4>
    f278:	add.w	r9, sp, #192	; 0xc0
    f27c:	b.n	f124 <_svfprintf_r+0x8c>
    f27e:	ldr	r3, [sp, #148]	; 0x94
    f280:	cbz	r3, f28c <_svfprintf_r+0x1f4>
    f282:	ldr	r0, [sp, #24]
    f284:	ldr	r1, [sp, #20]
    f286:	add	r2, sp, #140	; 0x8c
    f288:	bl	1077c <__ssprint_r>
    f28c:	ldr	r3, [sp, #20]
    f28e:	ldrh	r3, [r3, #12]
    f290:	tst.w	r3, #64	; 0x40
    f294:	ldr	r3, [sp, #28]
    f296:	it	ne
    f298:	movne.w	r3, #4294967295
    f29c:	mov	r0, r3
    f29e:	add	sp, #260	; 0x104
    f2a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2a4:	str	r3, [sp, #52]	; 0x34
    f2a6:	mov	fp, r5
    f2a8:	cmp	r2, #0
    f2aa:	bne.w	10714 <_svfprintf_r+0x167c>
    f2ae:	ldr	r2, [sp, #12]
    f2b0:	ands.w	r3, r2, #32
    f2b4:	beq.w	f744 <_svfprintf_r+0x6ac>
    f2b8:	ldr	r7, [sp, #40]	; 0x28
    f2ba:	adds	r7, #7
    f2bc:	bic.w	r3, r7, #7
    f2c0:	movs	r7, #0
    f2c2:	add.w	r1, r3, #8
    f2c6:	cmp	fp, r7
    f2c8:	str	r1, [sp, #40]	; 0x28
    f2ca:	ldrd	r4, r5, [r3]
    f2ce:	strb.w	r7, [sp, #111]	; 0x6f
    f2d2:	blt.w	1019a <_svfprintf_r+0x1102>
    f2d6:	bic.w	r3, r2, #128	; 0x80
    f2da:	str	r3, [sp, #12]
    f2dc:	orrs.w	r3, r4, r5
    f2e0:	beq.w	f9ec <_svfprintf_r+0x954>
    f2e4:	add	r6, sp, #192	; 0xc0
    f2e6:	lsrs	r2, r4, #3
    f2e8:	orr.w	r2, r2, r5, lsl #29
    f2ec:	lsrs	r1, r5, #3
    f2ee:	and.w	r3, r4, #7
    f2f2:	mov	r5, r1
    f2f4:	mov	r4, r2
    f2f6:	adds	r3, #48	; 0x30
    f2f8:	orrs.w	r2, r4, r5
    f2fc:	strb.w	r3, [r6, #-1]!
    f300:	bne.n	f2e6 <_svfprintf_r+0x24e>
    f302:	ldr	r2, [sp, #12]
    f304:	lsls	r1, r2, #31
    f306:	bpl.w	f428 <_svfprintf_r+0x390>
    f30a:	cmp	r3, #48	; 0x30
    f30c:	beq.w	f428 <_svfprintf_r+0x390>
    f310:	movs	r2, #48	; 0x30
    f312:	subs	r3, r6, #1
    f314:	strb.w	r2, [r6, #-1]
    f318:	add	r2, sp, #192	; 0xc0
    f31a:	subs	r2, r2, r3
    f31c:	str	r2, [sp, #36]	; 0x24
    f31e:	mov	r6, r3
    f320:	b.n	f42e <_svfprintf_r+0x396>
    f322:	ldrb.w	r3, [r8]
    f326:	cmp	r3, #42	; 0x2a
    f328:	add.w	r4, r8, #1
    f32c:	beq.w	106f8 <_svfprintf_r+0x1660>
    f330:	sub.w	r0, r3, #48	; 0x30
    f334:	cmp	r0, #9
    f336:	it	ls
    f338:	movls	r5, #0
    f33a:	bhi.w	1064a <_svfprintf_r+0x15b2>
    f33e:	ldrb.w	r3, [r4], #1
    f342:	add.w	r5, r5, r5, lsl #2
    f346:	add.w	r5, r0, r5, lsl #1
    f34a:	sub.w	r0, r3, #48	; 0x30
    f34e:	cmp	r0, #9
    f350:	bls.n	f33e <_svfprintf_r+0x2a6>
    f352:	orr.w	r5, r5, r5, asr #31
    f356:	mov	r8, r4
    f358:	b.n	f150 <_svfprintf_r+0xb8>
    f35a:	nop
    f35c:	nop.w
	...
    f368:	.word	0x20000b74
    f36c:	.word	0x20000b40
    f370:	ldr	r3, [sp, #12]
    f372:	orr.w	r3, r3, #128	; 0x80
    f376:	str	r3, [sp, #12]
    f378:	ldrb.w	r3, [r8]
    f37c:	b.n	f14c <_svfprintf_r+0xb4>
    f37e:	sub.w	r0, r3, #48	; 0x30
    f382:	movs	r3, #0
    f384:	mov	r4, r3
    f386:	ldrb.w	r3, [r8], #1
    f38a:	add.w	r4, r4, r4, lsl #2
    f38e:	add.w	r4, r0, r4, lsl #1
    f392:	sub.w	r0, r3, #48	; 0x30
    f396:	cmp	r0, #9
    f398:	bls.n	f386 <_svfprintf_r+0x2ee>
    f39a:	str	r4, [sp, #32]
    f39c:	b.n	f150 <_svfprintf_r+0xb8>
    f39e:	str	r3, [sp, #52]	; 0x34
    f3a0:	mov	fp, r5
    f3a2:	cmp	r2, #0
    f3a4:	bne.w	10730 <_svfprintf_r+0x1698>
    f3a8:	ldr	r3, [sp, #12]
    f3aa:	orr.w	r3, r3, #16
    f3ae:	str	r3, [sp, #12]
    f3b0:	ldr	r3, [sp, #12]
    f3b2:	lsls	r4, r3, #26
    f3b4:	bpl.w	fe26 <_svfprintf_r+0xd8e>
    f3b8:	ldr	r7, [sp, #40]	; 0x28
    f3ba:	adds	r7, #7
    f3bc:	bic.w	r7, r7, #7
    f3c0:	ldrd	r2, r3, [r7]
    f3c4:	add.w	r1, r7, #8
    f3c8:	str	r1, [sp, #40]	; 0x28
    f3ca:	mov	r4, r2
    f3cc:	mov	r5, r3
    f3ce:	cmp	r2, #0
    f3d0:	sbcs.w	r3, r3, #0
    f3d4:	blt.w	fe9c <_svfprintf_r+0xe04>
    f3d8:	cmp.w	fp, #0
    f3dc:	ldrb.w	r7, [sp, #111]	; 0x6f
    f3e0:	blt.w	fe62 <_svfprintf_r+0xdca>
    f3e4:	ldr	r3, [sp, #12]
    f3e6:	bic.w	r3, r3, #128	; 0x80
    f3ea:	str	r3, [sp, #12]
    f3ec:	orrs.w	r3, r4, r5
    f3f0:	beq.w	f7c4 <_svfprintf_r+0x72c>
    f3f4:	cmp	r5, #0
    f3f6:	it	eq
    f3f8:	cmpeq	r4, #10
    f3fa:	bcc.w	f7ce <_svfprintf_r+0x736>
    f3fe:	add	r6, sp, #192	; 0xc0
    f400:	mov	r0, r4
    f402:	mov	r1, r5
    f404:	movs	r2, #10
    f406:	movs	r3, #0
    f408:	bl	c43c <__aeabi_uldivmod>
    f40c:	adds	r2, #48	; 0x30
    f40e:	strb.w	r2, [r6, #-1]!
    f412:	mov	r0, r4
    f414:	mov	r1, r5
    f416:	movs	r3, #0
    f418:	movs	r2, #10
    f41a:	bl	c43c <__aeabi_uldivmod>
    f41e:	mov	r4, r0
    f420:	mov	r5, r1
    f422:	orrs.w	r3, r4, r5
    f426:	bne.n	f400 <_svfprintf_r+0x368>
    f428:	add	r3, sp, #192	; 0xc0
    f42a:	subs	r3, r3, r6
    f42c:	str	r3, [sp, #36]	; 0x24
    f42e:	ldr	r3, [sp, #36]	; 0x24
    f430:	cmp	r3, fp
    f432:	it	lt
    f434:	movlt	r3, fp
    f436:	str	r3, [sp, #16]
    f438:	movs	r3, #0
    f43a:	str	r3, [sp, #60]	; 0x3c
    f43c:	cbz	r7, f444 <_svfprintf_r+0x3ac>
    f43e:	ldr	r3, [sp, #16]
    f440:	adds	r3, #1
    f442:	str	r3, [sp, #16]
    f444:	ldr	r3, [sp, #12]
    f446:	ands.w	r3, r3, #2
    f44a:	str	r3, [sp, #44]	; 0x2c
    f44c:	beq.n	f454 <_svfprintf_r+0x3bc>
    f44e:	ldr	r3, [sp, #16]
    f450:	adds	r3, #2
    f452:	str	r3, [sp, #16]
    f454:	ldr	r3, [sp, #12]
    f456:	ands.w	r3, r3, #132	; 0x84
    f45a:	str	r3, [sp, #48]	; 0x30
    f45c:	bne.w	fa16 <_svfprintf_r+0x97e>
    f460:	ldr	r3, [sp, #32]
    f462:	ldr	r2, [sp, #16]
    f464:	subs	r5, r3, r2
    f466:	cmp	r5, #0
    f468:	ble.w	fa16 <_svfprintf_r+0x97e>
    f46c:	cmp	r5, #16
    f46e:	ldr	r1, [sp, #148]	; 0x94
    f470:	ldr	r2, [sp, #144]	; 0x90
    f472:	ldr	r7, [pc, #672]	; (f714 <_svfprintf_r+0x67c>)
    f474:	ble.n	f4c6 <_svfprintf_r+0x42e>
    f476:	str	r6, [sp, #80]	; 0x50
    f478:	mov	r0, r9
    f47a:	movs	r4, #16
    f47c:	mov	r9, r7
    f47e:	ldr	r6, [sp, #20]
    f480:	mov	r7, r5
    f482:	ldr	r5, [sp, #24]
    f484:	b.n	f490 <_svfprintf_r+0x3f8>
    f486:	subs	r7, #16
    f488:	cmp	r7, #16
    f48a:	add.w	r0, r0, #8
    f48e:	ble.n	f4be <_svfprintf_r+0x426>
    f490:	adds	r2, #1
    f492:	ldr	r3, [pc, #640]	; (f714 <_svfprintf_r+0x67c>)
    f494:	str	r2, [sp, #144]	; 0x90
    f496:	adds	r1, #16
    f498:	cmp	r2, #7
    f49a:	str	r1, [sp, #148]	; 0x94
    f49c:	stmia.w	r0, {r3, r4}
    f4a0:	ble.n	f486 <_svfprintf_r+0x3ee>
    f4a2:	add	r2, sp, #140	; 0x8c
    f4a4:	mov	r1, r6
    f4a6:	mov	r0, r5
    f4a8:	bl	1077c <__ssprint_r>
    f4ac:	cmp	r0, #0
    f4ae:	bne.w	f28c <_svfprintf_r+0x1f4>
    f4b2:	subs	r7, #16
    f4b4:	cmp	r7, #16
    f4b6:	ldr	r1, [sp, #148]	; 0x94
    f4b8:	ldr	r2, [sp, #144]	; 0x90
    f4ba:	add	r0, sp, #192	; 0xc0
    f4bc:	bgt.n	f490 <_svfprintf_r+0x3f8>
    f4be:	ldr	r6, [sp, #80]	; 0x50
    f4c0:	mov	r5, r7
    f4c2:	mov	r7, r9
    f4c4:	mov	r9, r0
    f4c6:	adds	r2, #1
    f4c8:	adds	r4, r5, r1
    f4ca:	cmp	r2, #7
    f4cc:	str	r4, [sp, #148]	; 0x94
    f4ce:	str	r2, [sp, #144]	; 0x90
    f4d0:	str.w	r7, [r9]
    f4d4:	str.w	r5, [r9, #4]
    f4d8:	bgt.w	fd36 <_svfprintf_r+0xc9e>
    f4dc:	ldrb.w	r7, [sp, #111]	; 0x6f
    f4e0:	add.w	r9, r9, #8
    f4e4:	cbz	r7, f504 <_svfprintf_r+0x46c>
    f4e6:	ldr	r3, [sp, #144]	; 0x90
    f4e8:	adds	r3, #1
    f4ea:	adds	r4, #1
    f4ec:	add.w	r1, sp, #111	; 0x6f
    f4f0:	movs	r2, #1
    f4f2:	cmp	r3, #7
    f4f4:	str	r4, [sp, #148]	; 0x94
    f4f6:	str	r3, [sp, #144]	; 0x90
    f4f8:	stmia.w	r9, {r1, r2}
    f4fc:	bgt.w	fc4a <_svfprintf_r+0xbb2>
    f500:	add.w	r9, r9, #8
    f504:	ldr	r3, [sp, #44]	; 0x2c
    f506:	cbz	r3, f524 <_svfprintf_r+0x48c>
    f508:	ldr	r3, [sp, #144]	; 0x90
    f50a:	adds	r3, #1
    f50c:	adds	r4, #2
    f50e:	add	r1, sp, #112	; 0x70
    f510:	movs	r2, #2
    f512:	cmp	r3, #7
    f514:	str	r4, [sp, #148]	; 0x94
    f516:	str	r3, [sp, #144]	; 0x90
    f518:	stmia.w	r9, {r1, r2}
    f51c:	bgt.w	fc62 <_svfprintf_r+0xbca>
    f520:	add.w	r9, r9, #8
    f524:	ldr	r3, [sp, #48]	; 0x30
    f526:	cmp	r3, #128	; 0x80
    f528:	beq.w	faee <_svfprintf_r+0xa56>
    f52c:	ldr	r3, [sp, #36]	; 0x24
    f52e:	rsb	r7, r3, fp
    f532:	cmp	r7, #0
    f534:	ble.n	f59e <_svfprintf_r+0x506>
    f536:	ldr	r2, [pc, #480]	; (f718 <_svfprintf_r+0x680>)
    f538:	ldr	r3, [sp, #144]	; 0x90
    f53a:	str	r2, [sp, #44]	; 0x2c
    f53c:	cmp	r7, #16
    f53e:	ble.n	f586 <_svfprintf_r+0x4ee>
    f540:	mov	r2, r4
    f542:	mov.w	fp, #16
    f546:	ldr	r5, [sp, #24]
    f548:	ldr	r4, [sp, #20]
    f54a:	b.n	f556 <_svfprintf_r+0x4be>
    f54c:	subs	r7, #16
    f54e:	cmp	r7, #16
    f550:	add.w	r9, r9, #8
    f554:	ble.n	f584 <_svfprintf_r+0x4ec>
    f556:	adds	r3, #1
    f558:	adds	r2, #16
    f55a:	cmp	r3, #7
    f55c:	str	r2, [sp, #148]	; 0x94
    f55e:	str	r3, [sp, #144]	; 0x90
    f560:	stmia.w	r9, {sl, fp}
    f564:	ble.n	f54c <_svfprintf_r+0x4b4>
    f566:	add	r2, sp, #140	; 0x8c
    f568:	mov	r1, r4
    f56a:	mov	r0, r5
    f56c:	bl	1077c <__ssprint_r>
    f570:	cmp	r0, #0
    f572:	bne.w	f28c <_svfprintf_r+0x1f4>
    f576:	subs	r7, #16
    f578:	cmp	r7, #16
    f57a:	ldr	r2, [sp, #148]	; 0x94
    f57c:	ldr	r3, [sp, #144]	; 0x90
    f57e:	add.w	r9, sp, #192	; 0xc0
    f582:	bgt.n	f556 <_svfprintf_r+0x4be>
    f584:	mov	r4, r2
    f586:	adds	r3, #1
    f588:	ldr	r2, [sp, #44]	; 0x2c
    f58a:	str	r3, [sp, #144]	; 0x90
    f58c:	add	r4, r7
    f58e:	cmp	r3, #7
    f590:	str	r4, [sp, #148]	; 0x94
    f592:	stmia.w	r9, {r2, r7}
    f596:	bgt.w	fc32 <_svfprintf_r+0xb9a>
    f59a:	add.w	r9, r9, #8
    f59e:	ldr	r3, [sp, #12]
    f5a0:	lsls	r2, r3, #23
    f5a2:	bmi.w	fa1a <_svfprintf_r+0x982>
    f5a6:	ldr	r3, [sp, #144]	; 0x90
    f5a8:	ldr	r1, [sp, #36]	; 0x24
    f5aa:	str.w	r6, [r9]
    f5ae:	adds	r3, #1
    f5b0:	add	r4, r1
    f5b2:	cmp	r3, #7
    f5b4:	str	r4, [sp, #148]	; 0x94
    f5b6:	str.w	r1, [r9, #4]
    f5ba:	str	r3, [sp, #144]	; 0x90
    f5bc:	bgt.w	fc06 <_svfprintf_r+0xb6e>
    f5c0:	add.w	r9, r9, #8
    f5c4:	ldr	r3, [sp, #12]
    f5c6:	lsls	r1, r3, #29
    f5c8:	bpl.n	f64a <_svfprintf_r+0x5b2>
    f5ca:	ldr	r3, [sp, #32]
    f5cc:	ldr	r2, [sp, #16]
    f5ce:	subs	r5, r3, r2
    f5d0:	cmp	r5, #0
    f5d2:	ble.n	f64a <_svfprintf_r+0x5b2>
    f5d4:	cmp	r5, #16
    f5d6:	ldr	r3, [sp, #144]	; 0x90
    f5d8:	ldr	r7, [pc, #312]	; (f714 <_svfprintf_r+0x67c>)
    f5da:	ble.n	f624 <_svfprintf_r+0x58c>
    f5dc:	mov	r2, r4
    f5de:	movs	r6, #16
    f5e0:	ldr.w	fp, [sp, #24]
    f5e4:	ldr	r4, [sp, #20]
    f5e6:	b.n	f5f2 <_svfprintf_r+0x55a>
    f5e8:	subs	r5, #16
    f5ea:	cmp	r5, #16
    f5ec:	add.w	r9, r9, #8
    f5f0:	ble.n	f622 <_svfprintf_r+0x58a>
    f5f2:	adds	r3, #1
    f5f4:	ldr	r1, [pc, #284]	; (f714 <_svfprintf_r+0x67c>)
    f5f6:	str	r3, [sp, #144]	; 0x90
    f5f8:	adds	r2, #16
    f5fa:	cmp	r3, #7
    f5fc:	str	r2, [sp, #148]	; 0x94
    f5fe:	stmia.w	r9, {r1, r6}
    f602:	ble.n	f5e8 <_svfprintf_r+0x550>
    f604:	add	r2, sp, #140	; 0x8c
    f606:	mov	r1, r4
    f608:	mov	r0, fp
    f60a:	bl	1077c <__ssprint_r>
    f60e:	cmp	r0, #0
    f610:	bne.w	f28c <_svfprintf_r+0x1f4>
    f614:	subs	r5, #16
    f616:	cmp	r5, #16
    f618:	ldr	r2, [sp, #148]	; 0x94
    f61a:	ldr	r3, [sp, #144]	; 0x90
    f61c:	add.w	r9, sp, #192	; 0xc0
    f620:	bgt.n	f5f2 <_svfprintf_r+0x55a>
    f622:	mov	r4, r2
    f624:	adds	r3, #1
    f626:	add	r4, r5
    f628:	cmp	r3, #7
    f62a:	str	r4, [sp, #148]	; 0x94
    f62c:	str	r3, [sp, #144]	; 0x90
    f62e:	str.w	r7, [r9]
    f632:	str.w	r5, [r9, #4]
    f636:	ble.n	f64a <_svfprintf_r+0x5b2>
    f638:	add	r2, sp, #140	; 0x8c
    f63a:	ldr	r1, [sp, #20]
    f63c:	ldr	r0, [sp, #24]
    f63e:	bl	1077c <__ssprint_r>
    f642:	cmp	r0, #0
    f644:	bne.w	f28c <_svfprintf_r+0x1f4>
    f648:	ldr	r4, [sp, #148]	; 0x94
    f64a:	ldr	r3, [sp, #28]
    f64c:	ldr	r2, [sp, #32]
    f64e:	ldr	r1, [sp, #16]
    f650:	cmp	r2, r1
    f652:	ite	ge
    f654:	addge	r3, r3, r2
    f656:	addlt	r3, r3, r1
    f658:	str	r3, [sp, #28]
    f65a:	cmp	r4, #0
    f65c:	bne.w	fc1e <_svfprintf_r+0xb86>
    f660:	movs	r3, #0
    f662:	str	r3, [sp, #144]	; 0x90
    f664:	add.w	r9, sp, #192	; 0xc0
    f668:	b.n	f0e6 <_svfprintf_r+0x4e>
    f66a:	str	r3, [sp, #52]	; 0x34
    f66c:	mov	fp, r5
    f66e:	cmp	r2, #0
    f670:	bne.w	10738 <_svfprintf_r+0x16a0>
    f674:	ldr	r3, [sp, #12]
    f676:	ldr	r7, [sp, #40]	; 0x28
    f678:	lsls	r2, r3, #28
    f67a:	add.w	r7, r7, #7
    f67e:	bpl.w	1016a <_svfprintf_r+0x10d2>
    f682:	bic.w	r3, r7, #7
    f686:	vldr	d7, [r3]
    f68a:	vstr	d7, [sp, #64]	; 0x40
    f68e:	add.w	r2, r3, #8
    f692:	str	r2, [sp, #40]	; 0x28
    f694:	ldrd	r1, r2, [sp, #64]	; 0x40
    f698:	bic.w	r3, r2, #2147483648	; 0x80000000
    f69c:	str	r1, [sp, #88]	; 0x58
    f69e:	str	r3, [sp, #92]	; 0x5c
    f6a0:	ldrd	r4, r5, [sp, #88]	; 0x58
    f6a4:	mov.w	r2, #4294967295
    f6a8:	mov	r0, r4
    f6aa:	mov	r1, r5
    f6ac:	ldr	r3, [pc, #108]	; (f71c <_svfprintf_r+0x684>)
    f6ae:	bl	c3c0 <__aeabi_dcmpun>
    f6b2:	cmp	r0, #0
    f6b4:	bne.w	1006c <_svfprintf_r+0xfd4>
    f6b8:	mov.w	r2, #4294967295
    f6bc:	ldr	r3, [pc, #92]	; (f71c <_svfprintf_r+0x684>)
    f6be:	mov	r0, r4
    f6c0:	mov	r1, r5
    f6c2:	bl	c384 <__aeabi_dcmple>
    f6c6:	cmp	r0, #0
    f6c8:	bne.w	1006c <_svfprintf_r+0xfd4>
    f6cc:	movs	r2, #0
    f6ce:	movs	r3, #0
    f6d0:	ldrd	r0, r1, [sp, #64]	; 0x40
    f6d4:	bl	c370 <__aeabi_dcmplt>
    f6d8:	cmp	r0, #0
    f6da:	bne.w	10582 <_svfprintf_r+0x14ea>
    f6de:	ldrb.w	r7, [sp, #111]	; 0x6f
    f6e2:	ldr	r6, [pc, #60]	; (f720 <_svfprintf_r+0x688>)
    f6e4:	ldr	r3, [pc, #60]	; (f724 <_svfprintf_r+0x68c>)
    f6e6:	ldr	r1, [sp, #12]
    f6e8:	bic.w	r1, r1, #128	; 0x80
    f6ec:	str	r1, [sp, #12]
    f6ee:	ldr	r1, [sp, #52]	; 0x34
    f6f0:	movs	r2, #3
    f6f2:	mov.w	fp, #0
    f6f6:	str	r2, [sp, #16]
    f6f8:	cmp	r1, #71	; 0x47
    f6fa:	it	le
    f6fc:	movle	r6, r3
    f6fe:	str	r2, [sp, #36]	; 0x24
    f700:	str.w	fp, [sp, #60]	; 0x3c
    f704:	b.n	f43c <_svfprintf_r+0x3a4>
    f706:	ldr	r3, [sp, #12]
    f708:	orr.w	r3, r3, #8
    f70c:	str	r3, [sp, #12]
    f70e:	ldrb.w	r3, [r8]
    f712:	b.n	f14c <_svfprintf_r+0xb4>
    f714:	.word	0x20000b90
    f718:	.word	0x20000b40
    f71c:	.word	0x7fefffff
    f720:	.word	0x20000b54
    f724:	.word	0x20000b50
    f728:	str	r3, [sp, #52]	; 0x34
    f72a:	mov	fp, r5
    f72c:	cmp	r2, #0
    f72e:	bne.w	10750 <_svfprintf_r+0x16b8>
    f732:	ldr	r3, [sp, #12]
    f734:	orr.w	r3, r3, #16
    f738:	str	r3, [sp, #12]
    f73a:	ldr	r2, [sp, #12]
    f73c:	ands.w	r3, r2, #32
    f740:	bne.w	f2b8 <_svfprintf_r+0x220>
    f744:	ldr	r1, [sp, #12]
    f746:	ands.w	r2, r1, #16
    f74a:	beq.w	10004 <_svfprintf_r+0xf6c>
    f74e:	ldr	r0, [sp, #40]	; 0x28
    f750:	strb.w	r3, [sp, #111]	; 0x6f
    f754:	cmp.w	fp, #0
    f758:	ldr	r4, [r0, #0]
    f75a:	add.w	r7, r0, #4
    f75e:	mov.w	r5, #0
    f762:	blt.w	10198 <_svfprintf_r+0x1100>
    f766:	mov	r2, r1
    f768:	bic.w	r2, r2, #128	; 0x80
    f76c:	str	r2, [sp, #12]
    f76e:	orrs.w	r2, r4, r5
    f772:	str	r7, [sp, #40]	; 0x28
    f774:	beq.w	f9ec <_svfprintf_r+0x954>
    f778:	mov	r7, r3
    f77a:	b.n	f2e4 <_svfprintf_r+0x24c>
    f77c:	str	r3, [sp, #52]	; 0x34
    f77e:	mov	fp, r5
    f780:	cmp	r2, #0
    f782:	bne.w	10748 <_svfprintf_r+0x16b0>
    f786:	ldr	r3, [sp, #12]
    f788:	orr.w	r3, r3, #16
    f78c:	str	r3, [sp, #12]
    f78e:	ldr	r2, [sp, #12]
    f790:	ands.w	r3, r2, #32
    f794:	beq.w	fdf0 <_svfprintf_r+0xd58>
    f798:	ldr	r7, [sp, #40]	; 0x28
    f79a:	adds	r7, #7
    f79c:	bic.w	r3, r7, #7
    f7a0:	movs	r7, #0
    f7a2:	add.w	r1, r3, #8
    f7a6:	cmp	fp, r7
    f7a8:	str	r1, [sp, #40]	; 0x28
    f7aa:	ldrd	r4, r5, [r3]
    f7ae:	strb.w	r7, [sp, #111]	; 0x6f
    f7b2:	blt.w	fe62 <_svfprintf_r+0xdca>
    f7b6:	bic.w	r3, r2, #128	; 0x80
    f7ba:	str	r3, [sp, #12]
    f7bc:	orrs.w	r3, r4, r5
    f7c0:	bne.w	f3f4 <_svfprintf_r+0x35c>
    f7c4:	cmp.w	fp, #0
    f7c8:	beq.w	f9b6 <_svfprintf_r+0x91e>
    f7cc:	movs	r4, #0
    f7ce:	add	r6, sp, #256	; 0x100
    f7d0:	adds	r4, #48	; 0x30
    f7d2:	strb.w	r4, [r6, #-65]!
    f7d6:	b.n	f428 <_svfprintf_r+0x390>
    f7d8:	str	r3, [sp, #52]	; 0x34
    f7da:	mov	fp, r5
    f7dc:	cmp	r2, #0
    f7de:	bne.w	10740 <_svfprintf_r+0x16a8>
    f7e2:	ldr	r3, [sp, #12]
    f7e4:	ldr	r0, [pc, #700]	; (faa4 <_svfprintf_r+0xa0c>)
    f7e6:	lsls	r5, r3, #26
    f7e8:	bpl.w	f956 <_svfprintf_r+0x8be>
    f7ec:	ldr	r7, [sp, #40]	; 0x28
    f7ee:	adds	r7, #7
    f7f0:	bic.w	r3, r7, #7
    f7f4:	ldrd	r4, r5, [r3]
    f7f8:	add.w	r2, r3, #8
    f7fc:	str	r2, [sp, #40]	; 0x28
    f7fe:	ldr	r2, [sp, #12]
    f800:	ands.w	r7, r2, #1
    f804:	beq.w	fc7a <_svfprintf_r+0xbe2>
    f808:	orrs.w	r3, r4, r5
    f80c:	beq.w	10214 <_svfprintf_r+0x117c>
    f810:	ldrb.w	r2, [sp, #52]	; 0x34
    f814:	strb.w	r2, [sp, #113]	; 0x71
    f818:	movs	r7, #0
    f81a:	ldr	r2, [sp, #12]
    f81c:	strb.w	r7, [sp, #111]	; 0x6f
    f820:	movs	r3, #48	; 0x30
    f822:	cmp	fp, r7
    f824:	strb.w	r3, [sp, #112]	; 0x70
    f828:	orr.w	r3, r2, #2
    f82c:	blt.w	1058c <_svfprintf_r+0x14f4>
    f830:	bic.w	r3, r2, #128	; 0x80
    f834:	orr.w	r3, r3, #2
    f838:	str	r3, [sp, #12]
    f83a:	add	r6, sp, #192	; 0xc0
    f83c:	lsrs	r3, r4, #4
    f83e:	and.w	r1, r4, #15
    f842:	orr.w	r3, r3, r5, lsl #28
    f846:	lsrs	r2, r5, #4
    f848:	mov	r4, r3
    f84a:	mov	r5, r2
    f84c:	ldrb	r3, [r0, r1]
    f84e:	strb.w	r3, [r6, #-1]!
    f852:	orrs.w	r3, r4, r5
    f856:	bne.n	f83c <_svfprintf_r+0x7a4>
    f858:	b.n	f428 <_svfprintf_r+0x390>
    f85a:	ldr	r1, [sp, #40]	; 0x28
    f85c:	str	r3, [sp, #52]	; 0x34
    f85e:	ldr	r2, [r1, #0]
    f860:	strb.w	r2, [sp, #152]	; 0x98
    f864:	movs	r3, #0
    f866:	mov	r2, r1
    f868:	mov	r7, r3
    f86a:	strb.w	r3, [sp, #111]	; 0x6f
    f86e:	adds	r2, #4
    f870:	movs	r3, #1
    f872:	str	r3, [sp, #16]
    f874:	mov	fp, r7
    f876:	str	r7, [sp, #60]	; 0x3c
    f878:	str	r2, [sp, #40]	; 0x28
    f87a:	str	r3, [sp, #36]	; 0x24
    f87c:	add	r6, sp, #152	; 0x98
    f87e:	b.n	f444 <_svfprintf_r+0x3ac>
    f880:	str	r3, [sp, #52]	; 0x34
    f882:	mov	fp, r5
    f884:	cmp	r2, #0
    f886:	beq.w	f3b0 <_svfprintf_r+0x318>
    f88a:	strb.w	r1, [sp, #111]	; 0x6f
    f88e:	b.n	f3b0 <_svfprintf_r+0x318>
    f890:	ldr	r3, [sp, #12]
    f892:	orr.w	r3, r3, #64	; 0x40
    f896:	str	r3, [sp, #12]
    f898:	ldrb.w	r3, [r8]
    f89c:	b.n	f14c <_svfprintf_r+0xb4>
    f89e:	ldrb.w	r3, [r8]
    f8a2:	cmp	r1, #0
    f8a4:	bne.w	f14c <_svfprintf_r+0xb4>
    f8a8:	movs	r2, #1
    f8aa:	movs	r1, #32
    f8ac:	b.n	f14c <_svfprintf_r+0xb4>
    f8ae:	ldr	r3, [sp, #12]
    f8b0:	orr.w	r3, r3, #1
    f8b4:	str	r3, [sp, #12]
    f8b6:	ldrb.w	r3, [r8]
    f8ba:	b.n	f14c <_svfprintf_r+0xb4>
    f8bc:	ldr	r4, [sp, #40]	; 0x28
    f8be:	ldr	r3, [r4, #0]
    f8c0:	str	r3, [sp, #32]
    f8c2:	mov	r0, r3
    f8c4:	cmp	r0, #0
    f8c6:	mov	r3, r4
    f8c8:	add.w	r3, r3, #4
    f8cc:	blt.w	f210 <_svfprintf_r+0x178>
    f8d0:	str	r3, [sp, #40]	; 0x28
    f8d2:	ldrb.w	r3, [r8]
    f8d6:	b.n	f14c <_svfprintf_r+0xb4>
    f8d8:	ldrb.w	r3, [r8]
    f8dc:	movs	r2, #1
    f8de:	movs	r1, #43	; 0x2b
    f8e0:	b.n	f14c <_svfprintf_r+0xb4>
    f8e2:	ldr	r3, [sp, #12]
    f8e4:	orr.w	r3, r3, #32
    f8e8:	str	r3, [sp, #12]
    f8ea:	ldrb.w	r3, [r8]
    f8ee:	b.n	f14c <_svfprintf_r+0xb4>
    f8f0:	ldr	r2, [sp, #40]	; 0x28
    f8f2:	str	r3, [sp, #52]	; 0x34
    f8f4:	ldr	r6, [r2, #0]
    f8f6:	movs	r4, #0
    f8f8:	strb.w	r4, [sp, #111]	; 0x6f
    f8fc:	adds	r7, r2, #4
    f8fe:	cmp	r6, #0
    f900:	beq.w	1053c <_svfprintf_r+0x14a4>
    f904:	cmp	r5, #0
    f906:	blt.w	103cc <_svfprintf_r+0x1334>
    f90a:	mov	r2, r5
    f90c:	mov	r1, r4
    f90e:	mov	r0, r6
    f910:	bl	cd80 <memchr>
    f914:	cmp	r0, #0
    f916:	beq.w	105e0 <_svfprintf_r+0x1548>
    f91a:	subs	r3, r0, r6
    f91c:	str	r3, [sp, #36]	; 0x24
    f91e:	mov	fp, r4
    f920:	bic.w	r3, r3, r3, asr #31
    f924:	str	r7, [sp, #40]	; 0x28
    f926:	str	r3, [sp, #16]
    f928:	str.w	fp, [sp, #60]	; 0x3c
    f92c:	ldrb.w	r7, [sp, #111]	; 0x6f
    f930:	b.n	f43c <_svfprintf_r+0x3a4>
    f932:	str	r3, [sp, #52]	; 0x34
    f934:	mov	fp, r5
    f936:	cmp	r2, #0
    f938:	beq.w	f78e <_svfprintf_r+0x6f6>
    f93c:	strb.w	r1, [sp, #111]	; 0x6f
    f940:	b.n	f78e <_svfprintf_r+0x6f6>
    f942:	str	r3, [sp, #52]	; 0x34
    f944:	mov	fp, r5
    f946:	cmp	r2, #0
    f948:	bne.w	10768 <_svfprintf_r+0x16d0>
    f94c:	ldr	r3, [sp, #12]
    f94e:	ldr	r0, [pc, #344]	; (faa8 <_svfprintf_r+0xa10>)
    f950:	lsls	r5, r3, #26
    f952:	bmi.w	f7ec <_svfprintf_r+0x754>
    f956:	ldr	r3, [sp, #12]
    f958:	lsls	r4, r3, #27
    f95a:	bpl.w	101da <_svfprintf_r+0x1142>
    f95e:	ldr	r2, [sp, #40]	; 0x28
    f960:	mov	r3, r2
    f962:	adds	r3, #4
    f964:	ldr	r4, [r2, #0]
    f966:	str	r3, [sp, #40]	; 0x28
    f968:	movs	r5, #0
    f96a:	b.n	f7fe <_svfprintf_r+0x766>
    f96c:	ldrb.w	r3, [r8]
    f970:	cmp	r3, #108	; 0x6c
    f972:	beq.w	102fa <_svfprintf_r+0x1262>
    f976:	ldr	r0, [sp, #12]
    f978:	orr.w	r0, r0, #16
    f97c:	str	r0, [sp, #12]
    f97e:	b.w	f14c <_svfprintf_r+0xb4>
    f982:	cmp	r2, #0
    f984:	bne.w	10760 <_svfprintf_r+0x16c8>
    f988:	ldr	r3, [sp, #12]
    f98a:	lsls	r3, r3, #26
    f98c:	bpl.w	1003e <_svfprintf_r+0xfa6>
    f990:	ldr	r2, [sp, #40]	; 0x28
    f992:	ldr	r1, [sp, #28]
    f994:	ldr	r3, [r2, #0]
    f996:	asrs	r5, r1, #31
    f998:	mov	r0, r1
    f99a:	adds	r2, #4
    f99c:	mov	r1, r5
    f99e:	str	r2, [sp, #40]	; 0x28
    f9a0:	strd	r0, r1, [r3]
    f9a4:	b.w	f0e6 <_svfprintf_r+0x4e>
    f9a8:	ldr	r0, [pc, #252]	; (faa8 <_svfprintf_r+0xa10>)
    f9aa:	str	r2, [sp, #52]	; 0x34
    f9ac:	cmp.w	fp, #0
    f9b0:	bne.w	fc9c <_svfprintf_r+0xc04>
    f9b4:	mov	r7, fp
    f9b6:	mov.w	fp, #0
    f9ba:	str.w	fp, [sp, #36]	; 0x24
    f9be:	add	r6, sp, #192	; 0xc0
    f9c0:	b.n	f42e <_svfprintf_r+0x396>
    f9c2:	str	r3, [sp, #52]	; 0x34
    f9c4:	cmp	r2, #0
    f9c6:	bne.w	10758 <_svfprintf_r+0x16c0>
    f9ca:	ldr	r2, [sp, #52]	; 0x34
    f9cc:	cmp	r2, #0
    f9ce:	beq.w	f27e <_svfprintf_r+0x1e6>
    f9d2:	movs	r3, #0
    f9d4:	movs	r1, #1
    f9d6:	mov	r7, r3
    f9d8:	str	r1, [sp, #16]
    f9da:	strb.w	r2, [sp, #152]	; 0x98
    f9de:	strb.w	r3, [sp, #111]	; 0x6f
    f9e2:	mov	fp, r3
    f9e4:	str	r3, [sp, #60]	; 0x3c
    f9e6:	str	r1, [sp, #36]	; 0x24
    f9e8:	add	r6, sp, #152	; 0x98
    f9ea:	b.n	f444 <_svfprintf_r+0x3ac>
    f9ec:	cmp.w	fp, #0
    f9f0:	beq.w	10610 <_svfprintf_r+0x1578>
    f9f4:	movs	r7, #0
    f9f6:	movs	r4, #0
    f9f8:	movs	r5, #0
    f9fa:	b.n	f2e4 <_svfprintf_r+0x24c>
    f9fc:	ldr	r0, [pc, #168]	; (faa8 <_svfprintf_r+0xa10>)
    f9fe:	str	r3, [sp, #12]
    fa00:	str	r2, [sp, #52]	; 0x34
    fa02:	orrs.w	r3, r4, r5
    fa06:	str	r7, [sp, #40]	; 0x28
    fa08:	mov.w	r7, #0
    fa0c:	bne.w	f83a <_svfprintf_r+0x7a2>
    fa10:	movs	r4, #0
    fa12:	movs	r5, #0
    fa14:	b.n	f83a <_svfprintf_r+0x7a2>
    fa16:	ldr	r4, [sp, #148]	; 0x94
    fa18:	b.n	f4e4 <_svfprintf_r+0x44c>
    fa1a:	ldr	r3, [sp, #52]	; 0x34
    fa1c:	cmp	r3, #101	; 0x65
    fa1e:	ble.w	fb76 <_svfprintf_r+0xade>
    fa22:	movs	r2, #0
    fa24:	movs	r3, #0
    fa26:	ldrd	r0, r1, [sp, #64]	; 0x40
    fa2a:	bl	c35c <__aeabi_dcmpeq>
    fa2e:	cmp	r0, #0
    fa30:	beq.w	fca0 <_svfprintf_r+0xc08>
    fa34:	ldr	r3, [sp, #144]	; 0x90
    fa36:	ldr	r2, [pc, #116]	; (faac <_svfprintf_r+0xa14>)
    fa38:	str.w	r2, [r9]
    fa3c:	adds	r3, #1
    fa3e:	adds	r4, #1
    fa40:	movs	r2, #1
    fa42:	cmp	r3, #7
    fa44:	str	r4, [sp, #148]	; 0x94
    fa46:	str	r3, [sp, #144]	; 0x90
    fa48:	str.w	r2, [r9, #4]
    fa4c:	bgt.w	1022c <_svfprintf_r+0x1194>
    fa50:	add.w	r9, r9, #8
    fa54:	ldr	r3, [sp, #116]	; 0x74
    fa56:	ldr	r2, [sp, #56]	; 0x38
    fa58:	cmp	r3, r2
    fa5a:	blt.n	fa64 <_svfprintf_r+0x9cc>
    fa5c:	ldr	r3, [sp, #12]
    fa5e:	lsls	r3, r3, #31
    fa60:	bpl.w	f5c4 <_svfprintf_r+0x52c>
    fa64:	ldr	r3, [sp, #144]	; 0x90
    fa66:	ldr	r1, [sp, #72]	; 0x48
    fa68:	ldr	r2, [sp, #76]	; 0x4c
    fa6a:	str.w	r2, [r9]
    fa6e:	adds	r3, #1
    fa70:	add	r4, r1
    fa72:	cmp	r3, #7
    fa74:	str	r4, [sp, #148]	; 0x94
    fa76:	str.w	r1, [r9, #4]
    fa7a:	str	r3, [sp, #144]	; 0x90
    fa7c:	bgt.w	1030e <_svfprintf_r+0x1276>
    fa80:	add.w	r9, r9, #8
    fa84:	ldr	r3, [sp, #56]	; 0x38
    fa86:	subs	r5, r3, #1
    fa88:	cmp	r5, #0
    fa8a:	ble.w	f5c4 <_svfprintf_r+0x52c>
    fa8e:	ldr	r2, [pc, #32]	; (fab0 <_svfprintf_r+0xa18>)
    fa90:	ldr	r3, [sp, #144]	; 0x90
    fa92:	str	r2, [sp, #44]	; 0x2c
    fa94:	cmp	r5, #16
    fa96:	ble.w	fe6c <_svfprintf_r+0xdd4>
    fa9a:	movs	r6, #16
    fa9c:	ldr	r7, [sp, #24]
    fa9e:	ldr.w	fp, [sp, #20]
    faa2:	b.n	fac0 <_svfprintf_r+0xa28>
    faa4:	.word	0x20000b60
    faa8:	.word	0x20000b74
    faac:	.word	0x20000b3c
    fab0:	.word	0x20000b40
    fab4:	add.w	r9, r9, #8
    fab8:	subs	r5, #16
    faba:	cmp	r5, #16
    fabc:	ble.w	fe6c <_svfprintf_r+0xdd4>
    fac0:	adds	r3, #1
    fac2:	adds	r4, #16
    fac4:	cmp	r3, #7
    fac6:	str	r4, [sp, #148]	; 0x94
    fac8:	str	r3, [sp, #144]	; 0x90
    faca:	str.w	sl, [r9]
    face:	str.w	r6, [r9, #4]
    fad2:	ble.n	fab4 <_svfprintf_r+0xa1c>
    fad4:	add	r2, sp, #140	; 0x8c
    fad6:	mov	r1, fp
    fad8:	mov	r0, r7
    fada:	bl	1077c <__ssprint_r>
    fade:	cmp	r0, #0
    fae0:	bne.w	f28c <_svfprintf_r+0x1f4>
    fae4:	ldr	r4, [sp, #148]	; 0x94
    fae6:	ldr	r3, [sp, #144]	; 0x90
    fae8:	add.w	r9, sp, #192	; 0xc0
    faec:	b.n	fab8 <_svfprintf_r+0xa20>
    faee:	ldr	r3, [sp, #32]
    faf0:	ldr	r2, [sp, #16]
    faf2:	subs	r7, r3, r2
    faf4:	cmp	r7, #0
    faf6:	ble.w	f52c <_svfprintf_r+0x494>
    fafa:	ldr	r2, [pc, #752]	; (fdec <_svfprintf_r+0xd54>)
    fafc:	ldr	r3, [sp, #144]	; 0x90
    fafe:	str	r2, [sp, #44]	; 0x2c
    fb00:	cmp	r7, #16
    fb02:	ble.n	fb5c <_svfprintf_r+0xac4>
    fb04:	mov	r2, r9
    fb06:	mov	r1, r4
    fb08:	mov	r9, r7
    fb0a:	movs	r5, #16
    fb0c:	mov	r7, r6
    fb0e:	ldr	r4, [sp, #24]
    fb10:	ldr	r6, [sp, #20]
    fb12:	b.n	fb22 <_svfprintf_r+0xa8a>
    fb14:	sub.w	r9, r9, #16
    fb18:	cmp.w	r9, #16
    fb1c:	add.w	r2, r2, #8
    fb20:	ble.n	fb54 <_svfprintf_r+0xabc>
    fb22:	adds	r3, #1
    fb24:	adds	r1, #16
    fb26:	cmp	r3, #7
    fb28:	str	r1, [sp, #148]	; 0x94
    fb2a:	str	r3, [sp, #144]	; 0x90
    fb2c:	str.w	sl, [r2]
    fb30:	str	r5, [r2, #4]
    fb32:	ble.n	fb14 <_svfprintf_r+0xa7c>
    fb34:	add	r2, sp, #140	; 0x8c
    fb36:	mov	r1, r6
    fb38:	mov	r0, r4
    fb3a:	bl	1077c <__ssprint_r>
    fb3e:	cmp	r0, #0
    fb40:	bne.w	f28c <_svfprintf_r+0x1f4>
    fb44:	sub.w	r9, r9, #16
    fb48:	cmp.w	r9, #16
    fb4c:	ldr	r1, [sp, #148]	; 0x94
    fb4e:	ldr	r3, [sp, #144]	; 0x90
    fb50:	add	r2, sp, #192	; 0xc0
    fb52:	bgt.n	fb22 <_svfprintf_r+0xa8a>
    fb54:	mov	r6, r7
    fb56:	mov	r4, r1
    fb58:	mov	r7, r9
    fb5a:	mov	r9, r2
    fb5c:	adds	r3, #1
    fb5e:	ldr	r2, [sp, #44]	; 0x2c
    fb60:	str	r3, [sp, #144]	; 0x90
    fb62:	add	r4, r7
    fb64:	cmp	r3, #7
    fb66:	str	r4, [sp, #148]	; 0x94
    fb68:	stmia.w	r9, {r2, r7}
    fb6c:	bgt.w	ffea <_svfprintf_r+0xf52>
    fb70:	add.w	r9, r9, #8
    fb74:	b.n	f52c <_svfprintf_r+0x494>
    fb76:	ldr	r3, [sp, #56]	; 0x38
    fb78:	ldr	r5, [sp, #144]	; 0x90
    fb7a:	cmp	r3, #1
    fb7c:	ble.w	ff94 <_svfprintf_r+0xefc>
    fb80:	adds	r5, #1
    fb82:	adds	r4, #1
    fb84:	movs	r3, #1
    fb86:	cmp	r5, #7
    fb88:	str	r4, [sp, #148]	; 0x94
    fb8a:	str	r5, [sp, #144]	; 0x90
    fb8c:	str.w	r6, [r9]
    fb90:	str.w	r3, [r9, #4]
    fb94:	bgt.w	ffb6 <_svfprintf_r+0xf1e>
    fb98:	add.w	r9, r9, #8
    fb9c:	ldr	r2, [sp, #72]	; 0x48
    fb9e:	ldr	r3, [sp, #76]	; 0x4c
    fba0:	str.w	r3, [r9]
    fba4:	adds	r5, #1
    fba6:	add	r4, r2
    fba8:	cmp	r5, #7
    fbaa:	str	r4, [sp, #148]	; 0x94
    fbac:	str	r5, [sp, #144]	; 0x90
    fbae:	str.w	r2, [r9, #4]
    fbb2:	bgt.w	ffd0 <_svfprintf_r+0xf38>
    fbb6:	add.w	r9, r9, #8
    fbba:	movs	r3, #0
    fbbc:	movs	r2, #0
    fbbe:	ldrd	r0, r1, [sp, #64]	; 0x40
    fbc2:	bl	c35c <__aeabi_dcmpeq>
    fbc6:	ldr	r3, [sp, #56]	; 0x38
    fbc8:	cmp	r0, #0
    fbca:	bne.w	fd54 <_svfprintf_r+0xcbc>
    fbce:	subs	r3, #1
    fbd0:	adds	r5, #1
    fbd2:	adds	r6, #1
    fbd4:	add	r4, r3
    fbd6:	cmp	r5, #7
    fbd8:	str	r5, [sp, #144]	; 0x90
    fbda:	str	r4, [sp, #148]	; 0x94
    fbdc:	str.w	r6, [r9]
    fbe0:	str.w	r3, [r9, #4]
    fbe4:	bgt.w	fdd2 <_svfprintf_r+0xd3a>
    fbe8:	add.w	r9, r9, #8
    fbec:	ldr	r2, [sp, #84]	; 0x54
    fbee:	str.w	r2, [r9, #4]
    fbf2:	adds	r5, #1
    fbf4:	add	r4, r2
    fbf6:	add	r3, sp, #124	; 0x7c
    fbf8:	cmp	r5, #7
    fbfa:	str	r4, [sp, #148]	; 0x94
    fbfc:	str	r5, [sp, #144]	; 0x90
    fbfe:	str.w	r3, [r9]
    fc02:	ble.w	f5c0 <_svfprintf_r+0x528>
    fc06:	add	r2, sp, #140	; 0x8c
    fc08:	ldr	r1, [sp, #20]
    fc0a:	ldr	r0, [sp, #24]
    fc0c:	bl	1077c <__ssprint_r>
    fc10:	cmp	r0, #0
    fc12:	bne.w	f28c <_svfprintf_r+0x1f4>
    fc16:	ldr	r4, [sp, #148]	; 0x94
    fc18:	add.w	r9, sp, #192	; 0xc0
    fc1c:	b.n	f5c4 <_svfprintf_r+0x52c>
    fc1e:	add	r2, sp, #140	; 0x8c
    fc20:	ldr	r1, [sp, #20]
    fc22:	ldr	r0, [sp, #24]
    fc24:	bl	1077c <__ssprint_r>
    fc28:	cmp	r0, #0
    fc2a:	beq.w	f660 <_svfprintf_r+0x5c8>
    fc2e:	b.w	f28c <_svfprintf_r+0x1f4>
    fc32:	add	r2, sp, #140	; 0x8c
    fc34:	ldr	r1, [sp, #20]
    fc36:	ldr	r0, [sp, #24]
    fc38:	bl	1077c <__ssprint_r>
    fc3c:	cmp	r0, #0
    fc3e:	bne.w	f28c <_svfprintf_r+0x1f4>
    fc42:	ldr	r4, [sp, #148]	; 0x94
    fc44:	add.w	r9, sp, #192	; 0xc0
    fc48:	b.n	f59e <_svfprintf_r+0x506>
    fc4a:	add	r2, sp, #140	; 0x8c
    fc4c:	ldr	r1, [sp, #20]
    fc4e:	ldr	r0, [sp, #24]
    fc50:	bl	1077c <__ssprint_r>
    fc54:	cmp	r0, #0
    fc56:	bne.w	f28c <_svfprintf_r+0x1f4>
    fc5a:	ldr	r4, [sp, #148]	; 0x94
    fc5c:	add.w	r9, sp, #192	; 0xc0
    fc60:	b.n	f504 <_svfprintf_r+0x46c>
    fc62:	add	r2, sp, #140	; 0x8c
    fc64:	ldr	r1, [sp, #20]
    fc66:	ldr	r0, [sp, #24]
    fc68:	bl	1077c <__ssprint_r>
    fc6c:	cmp	r0, #0
    fc6e:	bne.w	f28c <_svfprintf_r+0x1f4>
    fc72:	ldr	r4, [sp, #148]	; 0x94
    fc74:	add.w	r9, sp, #192	; 0xc0
    fc78:	b.n	f524 <_svfprintf_r+0x48c>
    fc7a:	cmp.w	fp, #0
    fc7e:	strb.w	r7, [sp, #111]	; 0x6f
    fc82:	blt.w	10244 <_svfprintf_r+0x11ac>
    fc86:	bic.w	r3, r2, #128	; 0x80
    fc8a:	str	r3, [sp, #12]
    fc8c:	orrs.w	r3, r4, r5
    fc90:	bne.w	f83a <_svfprintf_r+0x7a2>
    fc94:	cmp.w	fp, #0
    fc98:	beq.w	f9b4 <_svfprintf_r+0x91c>
    fc9c:	movs	r7, #0
    fc9e:	b.n	fa10 <_svfprintf_r+0x978>
    fca0:	ldr	r5, [sp, #116]	; 0x74
    fca2:	cmp	r5, #0
    fca4:	ble.w	1024a <_svfprintf_r+0x11b2>
    fca8:	ldr	r3, [sp, #60]	; 0x3c
    fcaa:	ldr	r2, [sp, #56]	; 0x38
    fcac:	cmp	r3, r2
    fcae:	it	ge
    fcb0:	movge	r3, r2
    fcb2:	cmp	r3, #0
    fcb4:	mov	r5, r3
    fcb6:	ble.n	fcd4 <_svfprintf_r+0xc3c>
    fcb8:	ldr	r3, [sp, #144]	; 0x90
    fcba:	str.w	r6, [r9]
    fcbe:	adds	r3, #1
    fcc0:	add	r4, r5
    fcc2:	cmp	r3, #7
    fcc4:	str	r4, [sp, #148]	; 0x94
    fcc6:	str.w	r5, [r9, #4]
    fcca:	str	r3, [sp, #144]	; 0x90
    fccc:	bgt.w	10422 <_svfprintf_r+0x138a>
    fcd0:	add.w	r9, r9, #8
    fcd4:	ldr	r3, [sp, #60]	; 0x3c
    fcd6:	cmp	r5, #0
    fcd8:	it	ge
    fcda:	subge	r3, r3, r5
    fcdc:	cmp	r3, #0
    fcde:	mov	r5, r3
    fce0:	ble.w	fed4 <_svfprintf_r+0xe3c>
    fce4:	ldr	r2, [pc, #260]	; (fdec <_svfprintf_r+0xd54>)
    fce6:	ldr	r3, [sp, #144]	; 0x90
    fce8:	str	r2, [sp, #44]	; 0x2c
    fcea:	cmp	r5, #16
    fcec:	ble.w	101f6 <_svfprintf_r+0x115e>
    fcf0:	mov	r2, r4
    fcf2:	movs	r7, #16
    fcf4:	ldr.w	fp, [sp, #24]
    fcf8:	ldr	r4, [sp, #20]
    fcfa:	b.n	fd08 <_svfprintf_r+0xc70>
    fcfc:	add.w	r9, r9, #8
    fd00:	subs	r5, #16
    fd02:	cmp	r5, #16
    fd04:	ble.w	101f4 <_svfprintf_r+0x115c>
    fd08:	adds	r3, #1
    fd0a:	adds	r2, #16
    fd0c:	cmp	r3, #7
    fd0e:	str	r2, [sp, #148]	; 0x94
    fd10:	str	r3, [sp, #144]	; 0x90
    fd12:	str.w	sl, [r9]
    fd16:	str.w	r7, [r9, #4]
    fd1a:	ble.n	fcfc <_svfprintf_r+0xc64>
    fd1c:	add	r2, sp, #140	; 0x8c
    fd1e:	mov	r1, r4
    fd20:	mov	r0, fp
    fd22:	bl	1077c <__ssprint_r>
    fd26:	cmp	r0, #0
    fd28:	bne.w	f28c <_svfprintf_r+0x1f4>
    fd2c:	ldr	r2, [sp, #148]	; 0x94
    fd2e:	ldr	r3, [sp, #144]	; 0x90
    fd30:	add.w	r9, sp, #192	; 0xc0
    fd34:	b.n	fd00 <_svfprintf_r+0xc68>
    fd36:	add	r2, sp, #140	; 0x8c
    fd38:	ldr	r1, [sp, #20]
    fd3a:	ldr	r0, [sp, #24]
    fd3c:	bl	1077c <__ssprint_r>
    fd40:	cmp	r0, #0
    fd42:	bne.w	f28c <_svfprintf_r+0x1f4>
    fd46:	ldrb.w	r7, [sp, #111]	; 0x6f
    fd4a:	ldr	r4, [sp, #148]	; 0x94
    fd4c:	add.w	r9, sp, #192	; 0xc0
    fd50:	b.w	f4e4 <_svfprintf_r+0x44c>
    fd54:	subs	r6, r3, #1
    fd56:	cmp	r6, #0
    fd58:	ble.w	fbec <_svfprintf_r+0xb54>
    fd5c:	ldr	r3, [pc, #140]	; (fdec <_svfprintf_r+0xd54>)
    fd5e:	str	r3, [sp, #44]	; 0x2c
    fd60:	cmp	r6, #16
    fd62:	ble.n	fdbe <_svfprintf_r+0xd26>
    fd64:	str.w	r8, [sp, #36]	; 0x24
    fd68:	movs	r7, #16
    fd6a:	mov	r8, r6
    fd6c:	ldr.w	fp, [sp, #24]
    fd70:	ldr	r6, [sp, #20]
    fd72:	b.n	fd82 <_svfprintf_r+0xcea>
    fd74:	sub.w	r8, r8, #16
    fd78:	cmp.w	r8, #16
    fd7c:	add.w	r9, r9, #8
    fd80:	ble.n	fdb8 <_svfprintf_r+0xd20>
    fd82:	adds	r5, #1
    fd84:	adds	r4, #16
    fd86:	cmp	r5, #7
    fd88:	str	r4, [sp, #148]	; 0x94
    fd8a:	str	r5, [sp, #144]	; 0x90
    fd8c:	str.w	sl, [r9]
    fd90:	str.w	r7, [r9, #4]
    fd94:	ble.n	fd74 <_svfprintf_r+0xcdc>
    fd96:	add	r2, sp, #140	; 0x8c
    fd98:	mov	r1, r6
    fd9a:	mov	r0, fp
    fd9c:	bl	1077c <__ssprint_r>
    fda0:	cmp	r0, #0
    fda2:	bne.w	f28c <_svfprintf_r+0x1f4>
    fda6:	sub.w	r8, r8, #16
    fdaa:	cmp.w	r8, #16
    fdae:	ldr	r4, [sp, #148]	; 0x94
    fdb0:	ldr	r5, [sp, #144]	; 0x90
    fdb2:	add.w	r9, sp, #192	; 0xc0
    fdb6:	bgt.n	fd82 <_svfprintf_r+0xcea>
    fdb8:	mov	r6, r8
    fdba:	ldr.w	r8, [sp, #36]	; 0x24
    fdbe:	ldr	r3, [sp, #44]	; 0x2c
    fdc0:	adds	r5, #1
    fdc2:	add	r4, r6
    fdc4:	cmp	r5, #7
    fdc6:	str	r4, [sp, #148]	; 0x94
    fdc8:	str	r5, [sp, #144]	; 0x90
    fdca:	stmia.w	r9, {r3, r6}
    fdce:	ble.w	fbe8 <_svfprintf_r+0xb50>
    fdd2:	add	r2, sp, #140	; 0x8c
    fdd4:	ldr	r1, [sp, #20]
    fdd6:	ldr	r0, [sp, #24]
    fdd8:	bl	1077c <__ssprint_r>
    fddc:	cmp	r0, #0
    fdde:	bne.w	f28c <_svfprintf_r+0x1f4>
    fde2:	ldr	r4, [sp, #148]	; 0x94
    fde4:	ldr	r5, [sp, #144]	; 0x90
    fde6:	add.w	r9, sp, #192	; 0xc0
    fdea:	b.n	fbec <_svfprintf_r+0xb54>
    fdec:	.word	0x20000b40
    fdf0:	ldr	r1, [sp, #12]
    fdf2:	ands.w	r2, r1, #16
    fdf6:	beq.w	101a0 <_svfprintf_r+0x1108>
    fdfa:	ldr	r0, [sp, #40]	; 0x28
    fdfc:	strb.w	r3, [sp, #111]	; 0x6f
    fe00:	cmp.w	fp, #0
    fe04:	ldr	r4, [r0, #0]
    fe06:	add.w	r7, r0, #4
    fe0a:	mov.w	r5, #0
    fe0e:	blt.n	fe5e <_svfprintf_r+0xdc6>
    fe10:	mov	r2, r1
    fe12:	bic.w	r2, r2, #128	; 0x80
    fe16:	str	r2, [sp, #12]
    fe18:	orrs.w	r2, r4, r5
    fe1c:	str	r7, [sp, #40]	; 0x28
    fe1e:	mov	r7, r3
    fe20:	bne.w	f3f4 <_svfprintf_r+0x35c>
    fe24:	b.n	f7c4 <_svfprintf_r+0x72c>
    fe26:	ldr	r3, [sp, #12]
    fe28:	lsls	r0, r3, #27
    fe2a:	bmi.n	fe82 <_svfprintf_r+0xdea>
    fe2c:	ldr	r3, [sp, #12]
    fe2e:	lsls	r1, r3, #25
    fe30:	bpl.n	fe82 <_svfprintf_r+0xdea>
    fe32:	ldr	r1, [sp, #40]	; 0x28
    fe34:	ldrsh.w	r4, [r1]
    fe38:	adds	r1, #4
    fe3a:	asrs	r5, r4, #31
    fe3c:	mov	r2, r4
    fe3e:	mov	r3, r5
    fe40:	str	r1, [sp, #40]	; 0x28
    fe42:	b.w	f3ce <_svfprintf_r+0x336>
    fe46:	ldr	r1, [sp, #40]	; 0x28
    fe48:	strb.w	r3, [sp, #111]	; 0x6f
    fe4c:	cmp.w	fp, #0
    fe50:	ldr	r4, [r1, #0]
    fe52:	add.w	r7, r1, #4
    fe56:	mov.w	r5, #0
    fe5a:	bge.w	102f6 <_svfprintf_r+0x125e>
    fe5e:	str	r7, [sp, #40]	; 0x28
    fe60:	mov	r7, r3
    fe62:	orrs.w	r3, r4, r5
    fe66:	bne.w	f3f4 <_svfprintf_r+0x35c>
    fe6a:	b.n	f7ce <_svfprintf_r+0x736>
    fe6c:	adds	r3, #1
    fe6e:	ldr	r2, [sp, #44]	; 0x2c
    fe70:	str	r3, [sp, #144]	; 0x90
    fe72:	add	r4, r5
    fe74:	cmp	r3, #7
    fe76:	str	r4, [sp, #148]	; 0x94
    fe78:	stmia.w	r9, {r2, r5}
    fe7c:	ble.w	f5c0 <_svfprintf_r+0x528>
    fe80:	b.n	fc06 <_svfprintf_r+0xb6e>
    fe82:	ldr	r2, [sp, #40]	; 0x28
    fe84:	ldr	r4, [r2, #0]
    fe86:	mov	r3, r2
    fe88:	adds	r3, #4
    fe8a:	asrs	r5, r4, #31
    fe8c:	mov	r2, r4
    fe8e:	str	r3, [sp, #40]	; 0x28
    fe90:	cmp	r2, #0
    fe92:	mov	r3, r5
    fe94:	sbcs.w	r3, r3, #0
    fe98:	bge.w	f3d8 <_svfprintf_r+0x340>
    fe9c:	negs	r4, r4
    fe9e:	mov.w	r7, #45	; 0x2d
    fea2:	sbc.w	r5, r5, r5, lsl #1
    fea6:	cmp.w	fp, #0
    feaa:	strb.w	r7, [sp, #111]	; 0x6f
    feae:	blt.w	f3f4 <_svfprintf_r+0x35c>
    feb2:	ldr	r3, [sp, #12]
    feb4:	bic.w	r3, r3, #128	; 0x80
    feb8:	str	r3, [sp, #12]
    feba:	b.w	f3f4 <_svfprintf_r+0x35c>
    febe:	add	r2, sp, #140	; 0x8c
    fec0:	ldr	r1, [sp, #20]
    fec2:	ldr	r0, [sp, #24]
    fec4:	bl	1077c <__ssprint_r>
    fec8:	cmp	r0, #0
    feca:	bne.w	f28c <_svfprintf_r+0x1f4>
    fece:	ldr	r4, [sp, #148]	; 0x94
    fed0:	add.w	r9, sp, #192	; 0xc0
    fed4:	ldr	r2, [sp, #60]	; 0x3c
    fed6:	ldr	r3, [sp, #116]	; 0x74
    fed8:	add	r2, r6
    feda:	mov	r7, r2
    fedc:	ldr	r2, [sp, #56]	; 0x38
    fede:	cmp	r3, r2
    fee0:	blt.n	ff72 <_svfprintf_r+0xeda>
    fee2:	ldr	r2, [sp, #12]
    fee4:	lsls	r5, r2, #31
    fee6:	bmi.n	ff72 <_svfprintf_r+0xeda>
    fee8:	ldr	r1, [sp, #56]	; 0x38
    feea:	add	r6, r1
    feec:	subs	r5, r6, r7
    feee:	subs	r3, r1, r3
    fef0:	cmp	r5, r3
    fef2:	it	ge
    fef4:	movge	r5, r3
    fef6:	cmp	r5, #0
    fef8:	mov	r6, r5
    fefa:	ble.n	ff18 <_svfprintf_r+0xe80>
    fefc:	ldr	r2, [sp, #144]	; 0x90
    fefe:	str.w	r7, [r9]
    ff02:	adds	r2, #1
    ff04:	add	r4, r5
    ff06:	cmp	r2, #7
    ff08:	str	r4, [sp, #148]	; 0x94
    ff0a:	str.w	r5, [r9, #4]
    ff0e:	str	r2, [sp, #144]	; 0x90
    ff10:	bgt.w	10510 <_svfprintf_r+0x1478>
    ff14:	add.w	r9, r9, #8
    ff18:	cmp	r6, #0
    ff1a:	ite	ge
    ff1c:	subge	r5, r3, r6
    ff1e:	movlt	r5, r3
    ff20:	cmp	r5, #0
    ff22:	ble.w	f5c4 <_svfprintf_r+0x52c>
    ff26:	ldr	r2, [pc, #744]	; (10210 <_svfprintf_r+0x1178>)
    ff28:	ldr	r3, [sp, #144]	; 0x90
    ff2a:	str	r2, [sp, #44]	; 0x2c
    ff2c:	cmp	r5, #16
    ff2e:	ble.n	fe6c <_svfprintf_r+0xdd4>
    ff30:	movs	r6, #16
    ff32:	ldr	r7, [sp, #24]
    ff34:	ldr.w	fp, [sp, #20]
    ff38:	b.n	ff44 <_svfprintf_r+0xeac>
    ff3a:	add.w	r9, r9, #8
    ff3e:	subs	r5, #16
    ff40:	cmp	r5, #16
    ff42:	ble.n	fe6c <_svfprintf_r+0xdd4>
    ff44:	adds	r3, #1
    ff46:	adds	r4, #16
    ff48:	cmp	r3, #7
    ff4a:	str	r4, [sp, #148]	; 0x94
    ff4c:	str	r3, [sp, #144]	; 0x90
    ff4e:	str.w	sl, [r9]
    ff52:	str.w	r6, [r9, #4]
    ff56:	ble.n	ff3a <_svfprintf_r+0xea2>
    ff58:	add	r2, sp, #140	; 0x8c
    ff5a:	mov	r1, fp
    ff5c:	mov	r0, r7
    ff5e:	bl	1077c <__ssprint_r>
    ff62:	cmp	r0, #0
    ff64:	bne.w	f28c <_svfprintf_r+0x1f4>
    ff68:	ldr	r4, [sp, #148]	; 0x94
    ff6a:	ldr	r3, [sp, #144]	; 0x90
    ff6c:	add.w	r9, sp, #192	; 0xc0
    ff70:	b.n	ff3e <_svfprintf_r+0xea6>
    ff72:	ldr	r2, [sp, #144]	; 0x90
    ff74:	ldr	r0, [sp, #72]	; 0x48
    ff76:	ldr	r1, [sp, #76]	; 0x4c
    ff78:	str.w	r1, [r9]
    ff7c:	adds	r2, #1
    ff7e:	add	r4, r0
    ff80:	cmp	r2, #7
    ff82:	str	r4, [sp, #148]	; 0x94
    ff84:	str.w	r0, [r9, #4]
    ff88:	str	r2, [sp, #144]	; 0x90
    ff8a:	bgt.w	104f6 <_svfprintf_r+0x145e>
    ff8e:	add.w	r9, r9, #8
    ff92:	b.n	fee8 <_svfprintf_r+0xe50>
    ff94:	ldr	r3, [sp, #12]
    ff96:	lsls	r0, r3, #31
    ff98:	bmi.w	fb80 <_svfprintf_r+0xae8>
    ff9c:	adds	r5, #1
    ff9e:	adds	r4, #1
    ffa0:	movs	r3, #1
    ffa2:	cmp	r5, #7
    ffa4:	str	r4, [sp, #148]	; 0x94
    ffa6:	str	r5, [sp, #144]	; 0x90
    ffa8:	str.w	r6, [r9]
    ffac:	str.w	r3, [r9, #4]
    ffb0:	ble.w	fbe8 <_svfprintf_r+0xb50>
    ffb4:	b.n	fdd2 <_svfprintf_r+0xd3a>
    ffb6:	add	r2, sp, #140	; 0x8c
    ffb8:	ldr	r1, [sp, #20]
    ffba:	ldr	r0, [sp, #24]
    ffbc:	bl	1077c <__ssprint_r>
    ffc0:	cmp	r0, #0
    ffc2:	bne.w	f28c <_svfprintf_r+0x1f4>
    ffc6:	ldr	r4, [sp, #148]	; 0x94
    ffc8:	ldr	r5, [sp, #144]	; 0x90
    ffca:	add.w	r9, sp, #192	; 0xc0
    ffce:	b.n	fb9c <_svfprintf_r+0xb04>
    ffd0:	add	r2, sp, #140	; 0x8c
    ffd2:	ldr	r1, [sp, #20]
    ffd4:	ldr	r0, [sp, #24]
    ffd6:	bl	1077c <__ssprint_r>
    ffda:	cmp	r0, #0
    ffdc:	bne.w	f28c <_svfprintf_r+0x1f4>
    ffe0:	ldr	r4, [sp, #148]	; 0x94
    ffe2:	ldr	r5, [sp, #144]	; 0x90
    ffe4:	add.w	r9, sp, #192	; 0xc0
    ffe8:	b.n	fbba <_svfprintf_r+0xb22>
    ffea:	add	r2, sp, #140	; 0x8c
    ffec:	ldr	r1, [sp, #20]
    ffee:	ldr	r0, [sp, #24]
    fff0:	bl	1077c <__ssprint_r>
    fff4:	cmp	r0, #0
    fff6:	bne.w	f28c <_svfprintf_r+0x1f4>
    fffa:	ldr	r4, [sp, #148]	; 0x94
    fffc:	add.w	r9, sp, #192	; 0xc0
   10000:	b.w	f52c <_svfprintf_r+0x494>
   10004:	ldr	r1, [sp, #12]
   10006:	ands.w	r3, r1, #64	; 0x40
   1000a:	beq.w	10180 <_svfprintf_r+0x10e8>
   1000e:	ldr	r0, [sp, #40]	; 0x28
   10010:	strb.w	r2, [sp, #111]	; 0x6f
   10014:	mov	r3, r0
   10016:	cmp.w	fp, #0
   1001a:	add.w	r3, r3, #4
   1001e:	ldrh	r4, [r0, #0]
   10020:	mov.w	r5, #0
   10024:	blt.w	103a8 <_svfprintf_r+0x1310>
   10028:	bic.w	r1, r1, #128	; 0x80
   1002c:	str	r1, [sp, #12]
   1002e:	orrs.w	r1, r4, r5
   10032:	str	r3, [sp, #40]	; 0x28
   10034:	beq.w	f9ec <_svfprintf_r+0x954>
   10038:	mov	r7, r2
   1003a:	b.w	f2e4 <_svfprintf_r+0x24c>
   1003e:	ldr	r3, [sp, #12]
   10040:	lsls	r7, r3, #27
   10042:	bmi.n	1005c <_svfprintf_r+0xfc4>
   10044:	ldr	r3, [sp, #12]
   10046:	lsls	r6, r3, #25
   10048:	bpl.n	1005c <_svfprintf_r+0xfc4>
   1004a:	ldr	r2, [sp, #40]	; 0x28
   1004c:	ldr	r3, [r2, #0]
   1004e:	adds	r2, #4
   10050:	str	r2, [sp, #40]	; 0x28
   10052:	ldrh.w	r2, [sp, #28]
   10056:	strh	r2, [r3, #0]
   10058:	b.w	f0e6 <_svfprintf_r+0x4e>
   1005c:	ldr	r2, [sp, #40]	; 0x28
   1005e:	ldr	r3, [r2, #0]
   10060:	adds	r2, #4
   10062:	str	r2, [sp, #40]	; 0x28
   10064:	ldr	r2, [sp, #28]
   10066:	str	r2, [r3, #0]
   10068:	b.w	f0e6 <_svfprintf_r+0x4e>
   1006c:	ldrd	r0, r1, [sp, #64]	; 0x40
   10070:	mov	r2, r0
   10072:	mov	r3, r1
   10074:	bl	c3c0 <__aeabi_dcmpun>
   10078:	cmp	r0, #0
   1007a:	bne.w	10678 <_svfprintf_r+0x15e0>
   1007e:	ldr	r3, [sp, #52]	; 0x34
   10080:	cmp.w	fp, #4294967295
   10084:	bic.w	r7, r3, #32
   10088:	beq.w	1055a <_svfprintf_r+0x14c2>
   1008c:	cmp	r7, #71	; 0x47
   1008e:	beq.w	10396 <_svfprintf_r+0x12fe>
   10092:	ldr	r3, [sp, #68]	; 0x44
   10094:	ldr	r2, [sp, #12]
   10096:	cmp	r3, #0
   10098:	orr.w	r2, r2, #256	; 0x100
   1009c:	str	r2, [sp, #44]	; 0x2c
   1009e:	blt.w	10592 <_svfprintf_r+0x14fa>
   100a2:	vldr	d7, [sp, #64]	; 0x40
   100a6:	vstr	d7, [sp, #96]	; 0x60
   100aa:	movs	r3, #0
   100ac:	str	r3, [sp, #16]
   100ae:	ldr	r3, [sp, #52]	; 0x34
   100b0:	cmp	r3, #102	; 0x66
   100b2:	beq.w	10560 <_svfprintf_r+0x14c8>
   100b6:	cmp	r3, #70	; 0x46
   100b8:	beq.w	10346 <_svfprintf_r+0x12ae>
   100bc:	cmp	r7, #69	; 0x45
   100be:	ite	eq
   100c0:	addeq.w	r5, fp, #1
   100c4:	movne	r5, fp
   100c6:	add	r2, sp, #132	; 0x84
   100c8:	add	r3, sp, #120	; 0x78
   100ca:	str	r2, [sp, #4]
   100cc:	str	r3, [sp, #0]
   100ce:	mov	r2, r5
   100d0:	add	r3, sp, #116	; 0x74
   100d2:	movs	r1, #2
   100d4:	vldr	d0, [sp, #96]	; 0x60
   100d8:	ldr	r0, [sp, #24]
   100da:	bl	e260 <_dtoa_r>
   100de:	ldr	r3, [sp, #52]	; 0x34
   100e0:	cmp	r3, #103	; 0x67
   100e2:	mov	r6, r0
   100e4:	bne.w	105be <_svfprintf_r+0x1526>
   100e8:	ldr	r3, [sp, #12]
   100ea:	lsls	r2, r3, #31
   100ec:	bpl.w	10662 <_svfprintf_r+0x15ca>
   100f0:	adds	r4, r6, r5
   100f2:	movs	r2, #0
   100f4:	movs	r3, #0
   100f6:	ldrd	r0, r1, [sp, #96]	; 0x60
   100fa:	bl	c35c <__aeabi_dcmpeq>
   100fe:	cmp	r0, #0
   10100:	bne.w	1041e <_svfprintf_r+0x1386>
   10104:	ldr	r3, [sp, #132]	; 0x84
   10106:	cmp	r4, r3
   10108:	bls.n	10118 <_svfprintf_r+0x1080>
   1010a:	movs	r1, #48	; 0x30
   1010c:	adds	r2, r3, #1
   1010e:	str	r2, [sp, #132]	; 0x84
   10110:	strb	r1, [r3, #0]
   10112:	ldr	r3, [sp, #132]	; 0x84
   10114:	cmp	r4, r3
   10116:	bhi.n	1010c <_svfprintf_r+0x1074>
   10118:	subs	r3, r3, r6
   1011a:	cmp	r7, #71	; 0x47
   1011c:	str	r3, [sp, #56]	; 0x38
   1011e:	beq.w	10410 <_svfprintf_r+0x1378>
   10122:	ldr	r3, [sp, #52]	; 0x34
   10124:	cmp	r3, #101	; 0x65
   10126:	ble.w	105dc <_svfprintf_r+0x1544>
   1012a:	ldr	r3, [sp, #52]	; 0x34
   1012c:	cmp	r3, #102	; 0x66
   1012e:	ldr	r3, [sp, #116]	; 0x74
   10130:	str	r3, [sp, #60]	; 0x3c
   10132:	beq.w	105f6 <_svfprintf_r+0x155e>
   10136:	ldr	r2, [sp, #60]	; 0x3c
   10138:	ldr	r1, [sp, #56]	; 0x38
   1013a:	cmp	r2, r1
   1013c:	blt.w	105a4 <_svfprintf_r+0x150c>
   10140:	ldr	r3, [sp, #12]
   10142:	lsls	r1, r3, #31
   10144:	bmi.w	10666 <_svfprintf_r+0x15ce>
   10148:	bic.w	r3, r2, r2, asr #31
   1014c:	str	r2, [sp, #36]	; 0x24
   1014e:	movs	r2, #103	; 0x67
   10150:	str	r2, [sp, #52]	; 0x34
   10152:	ldr	r2, [sp, #16]
   10154:	cmp	r2, #0
   10156:	bne.w	103b8 <_svfprintf_r+0x1320>
   1015a:	str	r3, [sp, #16]
   1015c:	ldr	r3, [sp, #44]	; 0x2c
   1015e:	str	r3, [sp, #12]
   10160:	mov	fp, r2
   10162:	ldrb.w	r7, [sp, #111]	; 0x6f
   10166:	b.w	f43c <_svfprintf_r+0x3a4>
   1016a:	bic.w	r7, r7, #7
   1016e:	vldr	d7, [r7]
   10172:	add.w	r3, r7, #8
   10176:	vstr	d7, [sp, #64]	; 0x40
   1017a:	str	r3, [sp, #40]	; 0x28
   1017c:	b.w	f694 <_svfprintf_r+0x5fc>
   10180:	ldr	r1, [sp, #40]	; 0x28
   10182:	strb.w	r3, [sp, #111]	; 0x6f
   10186:	cmp.w	fp, #0
   1018a:	ldr	r4, [r1, #0]
   1018c:	add.w	r7, r1, #4
   10190:	mov.w	r5, #0
   10194:	bge.w	102f0 <_svfprintf_r+0x1258>
   10198:	str	r7, [sp, #40]	; 0x28
   1019a:	movs	r7, #0
   1019c:	b.w	f2e4 <_svfprintf_r+0x24c>
   101a0:	ldr	r1, [sp, #12]
   101a2:	ands.w	r3, r1, #64	; 0x40
   101a6:	beq.w	fe46 <_svfprintf_r+0xdae>
   101aa:	ldr	r0, [sp, #40]	; 0x28
   101ac:	strb.w	r2, [sp, #111]	; 0x6f
   101b0:	mov	r3, r0
   101b2:	cmp.w	fp, #0
   101b6:	add.w	r3, r3, #4
   101ba:	ldrh	r4, [r0, #0]
   101bc:	mov.w	r5, #0
   101c0:	blt.w	103a2 <_svfprintf_r+0x130a>
   101c4:	bic.w	r1, r1, #128	; 0x80
   101c8:	str	r1, [sp, #12]
   101ca:	orrs.w	r1, r4, r5
   101ce:	str	r3, [sp, #40]	; 0x28
   101d0:	mov	r7, r2
   101d2:	bne.w	f3f4 <_svfprintf_r+0x35c>
   101d6:	b.w	f7c4 <_svfprintf_r+0x72c>
   101da:	ldr	r3, [sp, #12]
   101dc:	ldr	r2, [sp, #40]	; 0x28
   101de:	tst.w	r3, #64	; 0x40
   101e2:	mov	r3, r2
   101e4:	beq.w	103ac <_svfprintf_r+0x1314>
   101e8:	adds	r3, #4
   101ea:	ldrh	r4, [r2, #0]
   101ec:	str	r3, [sp, #40]	; 0x28
   101ee:	movs	r5, #0
   101f0:	b.w	f7fe <_svfprintf_r+0x766>
   101f4:	mov	r4, r2
   101f6:	adds	r3, #1
   101f8:	ldr	r2, [sp, #44]	; 0x2c
   101fa:	str	r3, [sp, #144]	; 0x90
   101fc:	add	r4, r5
   101fe:	cmp	r3, #7
   10200:	str	r4, [sp, #148]	; 0x94
   10202:	stmia.w	r9, {r2, r5}
   10206:	bgt.w	febe <_svfprintf_r+0xe26>
   1020a:	add.w	r9, r9, #8
   1020e:	b.n	fed4 <_svfprintf_r+0xe3c>
   10210:	.word	0x20000b40
   10214:	movs	r7, #0
   10216:	cmp	fp, r7
   10218:	strb.w	r7, [sp, #111]	; 0x6f
   1021c:	blt.w	fa10 <_svfprintf_r+0x978>
   10220:	ldr	r3, [sp, #12]
   10222:	bic.w	r3, r3, #128	; 0x80
   10226:	str	r3, [sp, #12]
   10228:	b.w	f9ac <_svfprintf_r+0x914>
   1022c:	add	r2, sp, #140	; 0x8c
   1022e:	ldr	r1, [sp, #20]
   10230:	ldr	r0, [sp, #24]
   10232:	bl	1077c <__ssprint_r>
   10236:	cmp	r0, #0
   10238:	bne.w	f28c <_svfprintf_r+0x1f4>
   1023c:	ldr	r4, [sp, #148]	; 0x94
   1023e:	add.w	r9, sp, #192	; 0xc0
   10242:	b.n	fa54 <_svfprintf_r+0x9bc>
   10244:	ldr	r7, [sp, #40]	; 0x28
   10246:	b.w	fa02 <_svfprintf_r+0x96a>
   1024a:	ldr	r3, [sp, #144]	; 0x90
   1024c:	ldr	r2, [pc, #736]	; (10530 <_svfprintf_r+0x1498>)
   1024e:	str.w	r2, [r9]
   10252:	adds	r3, #1
   10254:	adds	r4, #1
   10256:	movs	r2, #1
   10258:	cmp	r3, #7
   1025a:	str	r4, [sp, #148]	; 0x94
   1025c:	str	r3, [sp, #144]	; 0x90
   1025e:	str.w	r2, [r9, #4]
   10262:	bgt.w	1037c <_svfprintf_r+0x12e4>
   10266:	add.w	r9, r9, #8
   1026a:	cbnz	r5, 10278 <_svfprintf_r+0x11e0>
   1026c:	ldr	r3, [sp, #56]	; 0x38
   1026e:	cbnz	r3, 10278 <_svfprintf_r+0x11e0>
   10270:	ldr	r3, [sp, #12]
   10272:	lsls	r7, r3, #31
   10274:	bpl.w	f5c4 <_svfprintf_r+0x52c>
   10278:	ldr	r3, [sp, #144]	; 0x90
   1027a:	ldr	r1, [sp, #72]	; 0x48
   1027c:	ldr	r2, [sp, #76]	; 0x4c
   1027e:	str.w	r2, [r9]
   10282:	adds	r3, #1
   10284:	add	r4, r1
   10286:	cmp	r3, #7
   10288:	str	r4, [sp, #148]	; 0x94
   1028a:	str.w	r1, [r9, #4]
   1028e:	str	r3, [sp, #144]	; 0x90
   10290:	bgt.w	1062e <_svfprintf_r+0x1596>
   10294:	add.w	r9, r9, #8
   10298:	negs	r5, r5
   1029a:	cmp	r5, #0
   1029c:	ble.w	103f4 <_svfprintf_r+0x135c>
   102a0:	ldr	r2, [pc, #656]	; (10534 <_svfprintf_r+0x149c>)
   102a2:	str	r2, [sp, #44]	; 0x2c
   102a4:	cmp	r5, #16
   102a6:	ble.w	1043c <_svfprintf_r+0x13a4>
   102aa:	mov	r2, r4
   102ac:	movs	r7, #16
   102ae:	ldr.w	fp, [sp, #24]
   102b2:	ldr	r4, [sp, #20]
   102b4:	b.n	102c2 <_svfprintf_r+0x122a>
   102b6:	add.w	r9, r9, #8
   102ba:	subs	r5, #16
   102bc:	cmp	r5, #16
   102be:	ble.w	1043a <_svfprintf_r+0x13a2>
   102c2:	adds	r3, #1
   102c4:	adds	r2, #16
   102c6:	cmp	r3, #7
   102c8:	str	r2, [sp, #148]	; 0x94
   102ca:	str	r3, [sp, #144]	; 0x90
   102cc:	str.w	sl, [r9]
   102d0:	str.w	r7, [r9, #4]
   102d4:	ble.n	102b6 <_svfprintf_r+0x121e>
   102d6:	add	r2, sp, #140	; 0x8c
   102d8:	mov	r1, r4
   102da:	mov	r0, fp
   102dc:	bl	1077c <__ssprint_r>
   102e0:	cmp	r0, #0
   102e2:	bne.w	f28c <_svfprintf_r+0x1f4>
   102e6:	ldr	r2, [sp, #148]	; 0x94
   102e8:	ldr	r3, [sp, #144]	; 0x90
   102ea:	add.w	r9, sp, #192	; 0xc0
   102ee:	b.n	102ba <_svfprintf_r+0x1222>
   102f0:	ldr	r2, [sp, #12]
   102f2:	b.w	f768 <_svfprintf_r+0x6d0>
   102f6:	ldr	r2, [sp, #12]
   102f8:	b.n	fe12 <_svfprintf_r+0xd7a>
   102fa:	ldr	r3, [sp, #12]
   102fc:	orr.w	r3, r3, #32
   10300:	str	r3, [sp, #12]
   10302:	add.w	r8, r8, #1
   10306:	ldrb.w	r3, [r8]
   1030a:	b.w	f14c <_svfprintf_r+0xb4>
   1030e:	add	r2, sp, #140	; 0x8c
   10310:	ldr	r1, [sp, #20]
   10312:	ldr	r0, [sp, #24]
   10314:	bl	1077c <__ssprint_r>
   10318:	cmp	r0, #0
   1031a:	bne.w	f28c <_svfprintf_r+0x1f4>
   1031e:	ldr	r4, [sp, #148]	; 0x94
   10320:	add.w	r9, sp, #192	; 0xc0
   10324:	b.w	fa84 <_svfprintf_r+0x9ec>
   10328:	movs	r1, #64	; 0x40
   1032a:	ldr	r0, [sp, #24]
   1032c:	bl	c7dc <_malloc_r>
   10330:	ldr	r2, [sp, #20]
   10332:	str	r0, [r2, #0]
   10334:	str	r0, [r2, #16]
   10336:	cmp	r0, #0
   10338:	beq.w	10722 <_svfprintf_r+0x168a>
   1033c:	ldr	r2, [sp, #20]
   1033e:	movs	r3, #64	; 0x40
   10340:	str	r3, [r2, #20]
   10342:	b.w	f0c6 <_svfprintf_r+0x2e>
   10346:	add	r2, sp, #132	; 0x84
   10348:	add	r3, sp, #120	; 0x78
   1034a:	str	r2, [sp, #4]
   1034c:	str	r3, [sp, #0]
   1034e:	mov	r2, fp
   10350:	add	r3, sp, #116	; 0x74
   10352:	movs	r1, #3
   10354:	vldr	d0, [sp, #96]	; 0x60
   10358:	ldr	r0, [sp, #24]
   1035a:	bl	e260 <_dtoa_r>
   1035e:	mov	r5, fp
   10360:	mov	r6, r0
   10362:	ldr	r3, [sp, #52]	; 0x34
   10364:	cmp	r3, #70	; 0x46
   10366:	add.w	r4, r6, r5
   1036a:	bne.w	100f2 <_svfprintf_r+0x105a>
   1036e:	ldrb	r3, [r6, #0]
   10370:	cmp	r3, #48	; 0x30
   10372:	beq.w	10684 <_svfprintf_r+0x15ec>
   10376:	ldr	r5, [sp, #116]	; 0x74
   10378:	add	r4, r5
   1037a:	b.n	100f2 <_svfprintf_r+0x105a>
   1037c:	add	r2, sp, #140	; 0x8c
   1037e:	ldr	r1, [sp, #20]
   10380:	ldr	r0, [sp, #24]
   10382:	bl	1077c <__ssprint_r>
   10386:	cmp	r0, #0
   10388:	bne.w	f28c <_svfprintf_r+0x1f4>
   1038c:	ldr	r5, [sp, #116]	; 0x74
   1038e:	ldr	r4, [sp, #148]	; 0x94
   10390:	add.w	r9, sp, #192	; 0xc0
   10394:	b.n	1026a <_svfprintf_r+0x11d2>
   10396:	cmp.w	fp, #0
   1039a:	it	eq
   1039c:	moveq.w	fp, #1
   103a0:	b.n	10092 <_svfprintf_r+0xffa>
   103a2:	str	r3, [sp, #40]	; 0x28
   103a4:	mov	r7, r2
   103a6:	b.n	fe62 <_svfprintf_r+0xdca>
   103a8:	str	r3, [sp, #40]	; 0x28
   103aa:	b.n	1019a <_svfprintf_r+0x1102>
   103ac:	adds	r3, #4
   103ae:	ldr	r4, [r2, #0]
   103b0:	str	r3, [sp, #40]	; 0x28
   103b2:	movs	r5, #0
   103b4:	b.w	f7fe <_svfprintf_r+0x766>
   103b8:	movs	r7, #45	; 0x2d
   103ba:	str	r3, [sp, #16]
   103bc:	ldr	r3, [sp, #44]	; 0x2c
   103be:	str	r3, [sp, #12]
   103c0:	strb.w	r7, [sp, #111]	; 0x6f
   103c4:	mov.w	fp, #0
   103c8:	b.w	f43e <_svfprintf_r+0x3a6>
   103cc:	mov	r0, r6
   103ce:	bl	d500 <strlen>
   103d2:	mov	fp, r4
   103d4:	mov	r3, r0
   103d6:	str	r0, [sp, #36]	; 0x24
   103d8:	b.w	f920 <_svfprintf_r+0x888>
   103dc:	add	r2, sp, #140	; 0x8c
   103de:	ldr	r1, [sp, #20]
   103e0:	ldr	r0, [sp, #24]
   103e2:	bl	1077c <__ssprint_r>
   103e6:	cmp	r0, #0
   103e8:	bne.w	f28c <_svfprintf_r+0x1f4>
   103ec:	ldr	r4, [sp, #148]	; 0x94
   103ee:	ldr	r3, [sp, #144]	; 0x90
   103f0:	add.w	r9, sp, #192	; 0xc0
   103f4:	ldr	r1, [sp, #56]	; 0x38
   103f6:	str.w	r6, [r9]
   103fa:	adds	r3, #1
   103fc:	add	r4, r1
   103fe:	cmp	r3, #7
   10400:	str	r4, [sp, #148]	; 0x94
   10402:	str	r3, [sp, #144]	; 0x90
   10404:	str.w	r1, [r9, #4]
   10408:	ble.w	f5c0 <_svfprintf_r+0x528>
   1040c:	b.w	fc06 <_svfprintf_r+0xb6e>
   10410:	ldr	r3, [sp, #116]	; 0x74
   10412:	adds	r5, r3, #3
   10414:	blt.n	10454 <_svfprintf_r+0x13bc>
   10416:	cmp	fp, r3
   10418:	blt.n	10454 <_svfprintf_r+0x13bc>
   1041a:	str	r3, [sp, #60]	; 0x3c
   1041c:	b.n	10136 <_svfprintf_r+0x109e>
   1041e:	mov	r3, r4
   10420:	b.n	10118 <_svfprintf_r+0x1080>
   10422:	add	r2, sp, #140	; 0x8c
   10424:	ldr	r1, [sp, #20]
   10426:	ldr	r0, [sp, #24]
   10428:	bl	1077c <__ssprint_r>
   1042c:	cmp	r0, #0
   1042e:	bne.w	f28c <_svfprintf_r+0x1f4>
   10432:	ldr	r4, [sp, #148]	; 0x94
   10434:	add.w	r9, sp, #192	; 0xc0
   10438:	b.n	fcd4 <_svfprintf_r+0xc3c>
   1043a:	mov	r4, r2
   1043c:	adds	r3, #1
   1043e:	ldr	r2, [sp, #44]	; 0x2c
   10440:	str	r3, [sp, #144]	; 0x90
   10442:	add	r4, r5
   10444:	cmp	r3, #7
   10446:	str	r4, [sp, #148]	; 0x94
   10448:	stmia.w	r9, {r2, r5}
   1044c:	bgt.n	103dc <_svfprintf_r+0x1344>
   1044e:	add.w	r9, r9, #8
   10452:	b.n	103f4 <_svfprintf_r+0x135c>
   10454:	ldr	r2, [sp, #52]	; 0x34
   10456:	subs	r2, #2
   10458:	str	r2, [sp, #52]	; 0x34
   1045a:	subs	r3, #1
   1045c:	cmp	r3, #0
   1045e:	ldrb.w	r2, [sp, #52]	; 0x34
   10462:	str	r3, [sp, #116]	; 0x74
   10464:	it	lt
   10466:	neglt	r3, r3
   10468:	strb.w	r2, [sp, #124]	; 0x7c
   1046c:	ite	lt
   1046e:	movlt	r2, #45	; 0x2d
   10470:	movge	r2, #43	; 0x2b
   10472:	cmp	r3, #9
   10474:	strb.w	r2, [sp, #125]	; 0x7d
   10478:	ble.w	10652 <_svfprintf_r+0x15ba>
   1047c:	add.w	r0, sp, #139	; 0x8b
   10480:	mov	r4, r0
   10482:	ldr	r2, [pc, #180]	; (10538 <_svfprintf_r+0x14a0>)
   10484:	smull	r2, r1, r2, r3
   10488:	asrs	r2, r3, #31
   1048a:	rsb	r2, r2, r1, asr #2
   1048e:	add.w	r1, r2, r2, lsl #2
   10492:	sub.w	r3, r3, r1, lsl #1
   10496:	add.w	r1, r3, #48	; 0x30
   1049a:	cmp	r2, #9
   1049c:	mov	r3, r2
   1049e:	strb.w	r1, [r4, #-1]!
   104a2:	bgt.n	10482 <_svfprintf_r+0x13ea>
   104a4:	mov	r1, r4
   104a6:	adds	r3, #48	; 0x30
   104a8:	uxtb	r2, r3
   104aa:	strb.w	r2, [r1, #-1]!
   104ae:	cmp	r0, r1
   104b0:	bls.w	1071c <_svfprintf_r+0x1684>
   104b4:	add.w	r1, sp, #126	; 0x7e
   104b8:	mov	r3, r4
   104ba:	b.n	104c0 <_svfprintf_r+0x1428>
   104bc:	ldrb.w	r2, [r3], #1
   104c0:	strb.w	r2, [r1], #1
   104c4:	cmp	r0, r3
   104c6:	bne.n	104bc <_svfprintf_r+0x1424>
   104c8:	adds	r3, r0, #1
   104ca:	subs	r3, r3, r4
   104cc:	add.w	r2, sp, #126	; 0x7e
   104d0:	add	r3, r2
   104d2:	add	r2, sp, #124	; 0x7c
   104d4:	subs	r3, r3, r2
   104d6:	ldr	r2, [sp, #56]	; 0x38
   104d8:	str	r3, [sp, #84]	; 0x54
   104da:	cmp	r2, #1
   104dc:	add	r3, r2
   104de:	str	r3, [sp, #36]	; 0x24
   104e0:	ble.w	106b2 <_svfprintf_r+0x161a>
   104e4:	ldr	r3, [sp, #36]	; 0x24
   104e6:	ldr	r2, [sp, #72]	; 0x48
   104e8:	add	r3, r2
   104ea:	movs	r2, #0
   104ec:	str	r3, [sp, #36]	; 0x24
   104ee:	str	r2, [sp, #60]	; 0x3c
   104f0:	bic.w	r3, r3, r3, asr #31
   104f4:	b.n	10152 <_svfprintf_r+0x10ba>
   104f6:	add	r2, sp, #140	; 0x8c
   104f8:	ldr	r1, [sp, #20]
   104fa:	ldr	r0, [sp, #24]
   104fc:	bl	1077c <__ssprint_r>
   10500:	cmp	r0, #0
   10502:	bne.w	f28c <_svfprintf_r+0x1f4>
   10506:	ldr	r3, [sp, #116]	; 0x74
   10508:	ldr	r4, [sp, #148]	; 0x94
   1050a:	add.w	r9, sp, #192	; 0xc0
   1050e:	b.n	fee8 <_svfprintf_r+0xe50>
   10510:	add	r2, sp, #140	; 0x8c
   10512:	ldr	r1, [sp, #20]
   10514:	ldr	r0, [sp, #24]
   10516:	bl	1077c <__ssprint_r>
   1051a:	cmp	r0, #0
   1051c:	bne.w	f28c <_svfprintf_r+0x1f4>
   10520:	ldr	r3, [sp, #116]	; 0x74
   10522:	ldr	r2, [sp, #56]	; 0x38
   10524:	ldr	r4, [sp, #148]	; 0x94
   10526:	subs	r3, r2, r3
   10528:	add.w	r9, sp, #192	; 0xc0
   1052c:	b.n	ff18 <_svfprintf_r+0xe80>
   1052e:	nop
   10530:	.word	0x20000b3c
   10534:	.word	0x20000b40
   10538:	.word	0x66666667
   1053c:	cmp	r5, #6
   1053e:	mov	r3, r5
   10540:	it	cs
   10542:	movcs	r3, #6
   10544:	str	r3, [sp, #36]	; 0x24
   10546:	bic.w	r3, r3, r3, asr #31
   1054a:	mov	fp, r6
   1054c:	str	r7, [sp, #40]	; 0x28
   1054e:	str	r6, [sp, #60]	; 0x3c
   10550:	mov	r7, r6
   10552:	str	r3, [sp, #16]
   10554:	ldr	r6, [pc, #536]	; (10770 <_svfprintf_r+0x16d8>)
   10556:	b.w	f43c <_svfprintf_r+0x3a4>
   1055a:	mov.w	fp, #6
   1055e:	b.n	10092 <_svfprintf_r+0xffa>
   10560:	add	r2, sp, #132	; 0x84
   10562:	add	r3, sp, #120	; 0x78
   10564:	str	r2, [sp, #4]
   10566:	str	r3, [sp, #0]
   10568:	mov	r2, fp
   1056a:	add	r3, sp, #116	; 0x74
   1056c:	movs	r1, #3
   1056e:	vldr	d0, [sp, #96]	; 0x60
   10572:	ldr	r0, [sp, #24]
   10574:	bl	e260 <_dtoa_r>
   10578:	mov	r5, fp
   1057a:	mov	r6, r0
   1057c:	add.w	r4, r0, fp
   10580:	b.n	1036e <_svfprintf_r+0x12d6>
   10582:	movs	r7, #45	; 0x2d
   10584:	strb.w	r7, [sp, #111]	; 0x6f
   10588:	b.w	f6e2 <_svfprintf_r+0x64a>
   1058c:	str	r3, [sp, #12]
   1058e:	b.w	f83a <_svfprintf_r+0x7a2>
   10592:	ldrd	r1, r2, [sp, #64]	; 0x40
   10596:	add.w	r3, r2, #2147483648	; 0x80000000
   1059a:	str	r3, [sp, #100]	; 0x64
   1059c:	movs	r3, #45	; 0x2d
   1059e:	str	r1, [sp, #96]	; 0x60
   105a0:	str	r3, [sp, #16]
   105a2:	b.n	100ae <_svfprintf_r+0x1016>
   105a4:	ldr	r2, [sp, #72]	; 0x48
   105a6:	ldr	r3, [sp, #56]	; 0x38
   105a8:	add	r3, r2
   105aa:	ldr	r2, [sp, #60]	; 0x3c
   105ac:	str	r3, [sp, #36]	; 0x24
   105ae:	cmp	r2, #0
   105b0:	ble.w	106c6 <_svfprintf_r+0x162e>
   105b4:	movs	r2, #103	; 0x67
   105b6:	bic.w	r3, r3, r3, asr #31
   105ba:	str	r2, [sp, #52]	; 0x34
   105bc:	b.n	10152 <_svfprintf_r+0x10ba>
   105be:	ldr	r3, [sp, #52]	; 0x34
   105c0:	cmp	r3, #71	; 0x47
   105c2:	bne.w	100f0 <_svfprintf_r+0x1058>
   105c6:	ldr	r3, [sp, #12]
   105c8:	lsls	r3, r3, #31
   105ca:	bmi.w	10362 <_svfprintf_r+0x12ca>
   105ce:	ldr	r3, [sp, #132]	; 0x84
   105d0:	cmp	r7, #71	; 0x47
   105d2:	sub.w	r3, r3, r6
   105d6:	str	r3, [sp, #56]	; 0x38
   105d8:	beq.w	10410 <_svfprintf_r+0x1378>
   105dc:	ldr	r3, [sp, #116]	; 0x74
   105de:	b.n	1045a <_svfprintf_r+0x13c2>
   105e0:	bic.w	r3, r5, r5, asr #31
   105e4:	str	r7, [sp, #40]	; 0x28
   105e6:	str	r3, [sp, #16]
   105e8:	str	r5, [sp, #36]	; 0x24
   105ea:	mov	fp, r0
   105ec:	str	r0, [sp, #60]	; 0x3c
   105ee:	ldrb.w	r7, [sp, #111]	; 0x6f
   105f2:	b.w	f43c <_svfprintf_r+0x3a4>
   105f6:	cmp	r3, #0
   105f8:	ble.n	106d6 <_svfprintf_r+0x163e>
   105fa:	cmp.w	fp, #0
   105fe:	bne.n	106a0 <_svfprintf_r+0x1608>
   10600:	ldr	r2, [sp, #12]
   10602:	lsls	r4, r2, #31
   10604:	bmi.n	106a0 <_svfprintf_r+0x1608>
   10606:	mov	r2, r3
   10608:	str	r2, [sp, #36]	; 0x24
   1060a:	bic.w	r3, r3, r3, asr #31
   1060e:	b.n	10152 <_svfprintf_r+0x10ba>
   10610:	ldr	r3, [sp, #12]
   10612:	lsls	r3, r3, #31
   10614:	mov	r7, fp
   10616:	bpl.n	10624 <_svfprintf_r+0x158c>
   10618:	add	r6, sp, #256	; 0x100
   1061a:	movs	r3, #48	; 0x30
   1061c:	strb.w	r3, [r6, #-65]!
   10620:	b.w	f428 <_svfprintf_r+0x390>
   10624:	str.w	fp, [sp, #36]	; 0x24
   10628:	add	r6, sp, #192	; 0xc0
   1062a:	b.w	f42e <_svfprintf_r+0x396>
   1062e:	add	r2, sp, #140	; 0x8c
   10630:	ldr	r1, [sp, #20]
   10632:	ldr	r0, [sp, #24]
   10634:	bl	1077c <__ssprint_r>
   10638:	cmp	r0, #0
   1063a:	bne.w	f28c <_svfprintf_r+0x1f4>
   1063e:	ldr	r5, [sp, #116]	; 0x74
   10640:	ldr	r4, [sp, #148]	; 0x94
   10642:	ldr	r3, [sp, #144]	; 0x90
   10644:	add.w	r9, sp, #192	; 0xc0
   10648:	b.n	10298 <_svfprintf_r+0x1200>
   1064a:	mov	r8, r4
   1064c:	movs	r5, #0
   1064e:	b.w	f150 <_svfprintf_r+0xb8>
   10652:	adds	r3, #48	; 0x30
   10654:	movs	r2, #48	; 0x30
   10656:	strb.w	r3, [sp, #127]	; 0x7f
   1065a:	strb.w	r2, [sp, #126]	; 0x7e
   1065e:	add	r3, sp, #128	; 0x80
   10660:	b.n	104d2 <_svfprintf_r+0x143a>
   10662:	ldr	r3, [sp, #132]	; 0x84
   10664:	b.n	10118 <_svfprintf_r+0x1080>
   10666:	ldr	r2, [sp, #72]	; 0x48
   10668:	ldr	r3, [sp, #60]	; 0x3c
   1066a:	add	r3, r2
   1066c:	movs	r2, #103	; 0x67
   1066e:	str	r3, [sp, #36]	; 0x24
   10670:	str	r2, [sp, #52]	; 0x34
   10672:	bic.w	r3, r3, r3, asr #31
   10676:	b.n	10152 <_svfprintf_r+0x10ba>
   10678:	ldr	r6, [pc, #248]	; (10774 <_svfprintf_r+0x16dc>)
   1067a:	ldr	r3, [pc, #252]	; (10778 <_svfprintf_r+0x16e0>)
   1067c:	ldrb.w	r7, [sp, #111]	; 0x6f
   10680:	b.w	f6e6 <_svfprintf_r+0x64e>
   10684:	movs	r2, #0
   10686:	movs	r3, #0
   10688:	ldrd	r0, r1, [sp, #96]	; 0x60
   1068c:	bl	c35c <__aeabi_dcmpeq>
   10690:	cmp	r0, #0
   10692:	bne.w	10376 <_svfprintf_r+0x12de>
   10696:	rsb	r5, r5, #1
   1069a:	str	r5, [sp, #116]	; 0x74
   1069c:	add	r4, r5
   1069e:	b.n	100f2 <_svfprintf_r+0x105a>
   106a0:	ldr	r3, [sp, #60]	; 0x3c
   106a2:	ldr	r2, [sp, #72]	; 0x48
   106a4:	adds	r5, r3, r2
   106a6:	add.w	r3, r5, fp
   106aa:	str	r3, [sp, #36]	; 0x24
   106ac:	bic.w	r3, r3, r3, asr #31
   106b0:	b.n	10152 <_svfprintf_r+0x10ba>
   106b2:	ldr	r3, [sp, #12]
   106b4:	ands.w	r3, r3, #1
   106b8:	bne.w	104e4 <_svfprintf_r+0x144c>
   106bc:	str	r3, [sp, #60]	; 0x3c
   106be:	ldr	r3, [sp, #36]	; 0x24
   106c0:	bic.w	r3, r3, r3, asr #31
   106c4:	b.n	10152 <_svfprintf_r+0x10ba>
   106c6:	ldr	r3, [sp, #60]	; 0x3c
   106c8:	ldr	r2, [sp, #36]	; 0x24
   106ca:	rsb	r3, r3, #1
   106ce:	add	r2, r3
   106d0:	mov	r3, r2
   106d2:	str	r2, [sp, #36]	; 0x24
   106d4:	b.n	105b4 <_svfprintf_r+0x151c>
   106d6:	cmp.w	fp, #0
   106da:	bne.n	106e2 <_svfprintf_r+0x164a>
   106dc:	ldr	r3, [sp, #12]
   106de:	lsls	r0, r3, #31
   106e0:	bpl.n	106f2 <_svfprintf_r+0x165a>
   106e2:	ldr	r3, [sp, #72]	; 0x48
   106e4:	adds	r5, r3, #1
   106e6:	add.w	r3, r5, fp
   106ea:	str	r3, [sp, #36]	; 0x24
   106ec:	bic.w	r3, r3, r3, asr #31
   106f0:	b.n	10152 <_svfprintf_r+0x10ba>
   106f2:	movs	r3, #1
   106f4:	str	r3, [sp, #36]	; 0x24
   106f6:	b.n	10152 <_svfprintf_r+0x10ba>
   106f8:	ldr	r0, [sp, #40]	; 0x28
   106fa:	ldrb.w	r3, [r8, #1]
   106fe:	ldr	r5, [r0, #0]
   10700:	adds	r0, #4
   10702:	cmp	r5, #0
   10704:	str	r0, [sp, #40]	; 0x28
   10706:	mov	r8, r4
   10708:	bge.w	f14c <_svfprintf_r+0xb4>
   1070c:	mov.w	r5, #4294967295
   10710:	b.w	f14c <_svfprintf_r+0xb4>
   10714:	strb.w	r1, [sp, #111]	; 0x6f
   10718:	b.w	f2ae <_svfprintf_r+0x216>
   1071c:	add.w	r3, sp, #126	; 0x7e
   10720:	b.n	104d2 <_svfprintf_r+0x143a>
   10722:	ldr	r2, [sp, #24]
   10724:	movs	r3, #12
   10726:	str	r3, [r2, #0]
   10728:	mov.w	r0, #4294967295
   1072c:	b.w	f29e <_svfprintf_r+0x206>
   10730:	strb.w	r1, [sp, #111]	; 0x6f
   10734:	b.w	f3a8 <_svfprintf_r+0x310>
   10738:	strb.w	r1, [sp, #111]	; 0x6f
   1073c:	b.w	f674 <_svfprintf_r+0x5dc>
   10740:	strb.w	r1, [sp, #111]	; 0x6f
   10744:	b.w	f7e2 <_svfprintf_r+0x74a>
   10748:	strb.w	r1, [sp, #111]	; 0x6f
   1074c:	b.w	f786 <_svfprintf_r+0x6ee>
   10750:	strb.w	r1, [sp, #111]	; 0x6f
   10754:	b.w	f732 <_svfprintf_r+0x69a>
   10758:	strb.w	r1, [sp, #111]	; 0x6f
   1075c:	b.w	f9ca <_svfprintf_r+0x932>
   10760:	strb.w	r1, [sp, #111]	; 0x6f
   10764:	b.w	f988 <_svfprintf_r+0x8f0>
   10768:	strb.w	r1, [sp, #111]	; 0x6f
   1076c:	b.w	f94c <_svfprintf_r+0x8b4>
   10770:	.word	0x20000b88
   10774:	.word	0x20000b5c
   10778:	.word	0x20000b58

0001077c <__ssprint_r>:
   1077c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10780:	ldr	r3, [r2, #8]
   10782:	sub	sp, #12
   10784:	mov	r8, r2
   10786:	cmp	r3, #0
   10788:	beq.n	10870 <__ssprint_r+0xf4>
   1078a:	mov	fp, r0
   1078c:	mov.w	r9, #0
   10790:	ldr	r6, [r2, #0]
   10792:	ldr	r0, [r1, #0]
   10794:	ldr	r3, [r1, #8]
   10796:	mov	r5, r1
   10798:	mov	r4, r9
   1079a:	cmp	r4, #0
   1079c:	beq.n	1082a <__ssprint_r+0xae>
   1079e:	cmp	r4, r3
   107a0:	mov	r7, r3
   107a2:	mov	sl, r3
   107a4:	bcc.n	10834 <__ssprint_r+0xb8>
   107a6:	ldrh	r3, [r5, #12]
   107a8:	tst.w	r3, #1152	; 0x480
   107ac:	beq.n	1080a <__ssprint_r+0x8e>
   107ae:	ldr	r7, [r5, #20]
   107b0:	ldr	r1, [r5, #16]
   107b2:	add.w	r7, r7, r7, lsl #1
   107b6:	rsb	sl, r1, r0
   107ba:	add.w	r7, r7, r7, lsr #31
   107be:	adds	r0, r4, #1
   107c0:	asrs	r7, r7, #1
   107c2:	add	r0, sl
   107c4:	cmp	r0, r7
   107c6:	mov	r2, r7
   107c8:	itt	hi
   107ca:	movhi	r7, r0
   107cc:	movhi	r2, r7
   107ce:	lsls	r3, r3, #21
   107d0:	bpl.n	1083a <__ssprint_r+0xbe>
   107d2:	mov	r1, r2
   107d4:	mov	r0, fp
   107d6:	bl	c7dc <_malloc_r>
   107da:	cmp	r0, #0
   107dc:	beq.n	1084e <__ssprint_r+0xd2>
   107de:	mov	r2, sl
   107e0:	ldr	r1, [r5, #16]
   107e2:	str	r0, [sp, #4]
   107e4:	bl	9c5c <memcpy>
   107e8:	ldrh	r2, [r5, #12]
   107ea:	ldr	r3, [sp, #4]
   107ec:	bic.w	r2, r2, #1152	; 0x480
   107f0:	orr.w	r2, r2, #128	; 0x80
   107f4:	strh	r2, [r5, #12]
   107f6:	rsb	r2, sl, r7
   107fa:	add.w	r0, r3, sl
   107fe:	str	r7, [r5, #20]
   10800:	str	r3, [r5, #16]
   10802:	str	r0, [r5, #0]
   10804:	str	r2, [r5, #8]
   10806:	mov	r7, r4
   10808:	mov	sl, r4
   1080a:	mov	r2, sl
   1080c:	mov	r1, r9
   1080e:	bl	ce84 <memmove>
   10812:	ldr.w	r2, [r8, #8]
   10816:	ldr	r3, [r5, #8]
   10818:	ldr	r0, [r5, #0]
   1081a:	subs	r3, r3, r7
   1081c:	add	r0, sl
   1081e:	subs	r4, r2, r4
   10820:	str	r3, [r5, #8]
   10822:	str	r0, [r5, #0]
   10824:	str.w	r4, [r8, #8]
   10828:	cbz	r4, 10870 <__ssprint_r+0xf4>
   1082a:	ldr.w	r9, [r6]
   1082e:	ldr	r4, [r6, #4]
   10830:	adds	r6, #8
   10832:	b.n	1079a <__ssprint_r+0x1e>
   10834:	mov	r7, r4
   10836:	mov	sl, r4
   10838:	b.n	1080a <__ssprint_r+0x8e>
   1083a:	mov	r0, fp
   1083c:	bl	cff0 <_realloc_r>
   10840:	mov	r3, r0
   10842:	cmp	r0, #0
   10844:	bne.n	107f6 <__ssprint_r+0x7a>
   10846:	ldr	r1, [r5, #16]
   10848:	mov	r0, fp
   1084a:	bl	d868 <_free_r>
   1084e:	movs	r3, #12
   10850:	str.w	r3, [fp]
   10854:	ldrh	r3, [r5, #12]
   10856:	movs	r2, #0
   10858:	orr.w	r3, r3, #64	; 0x40
   1085c:	mov.w	r0, #4294967295
   10860:	strh	r3, [r5, #12]
   10862:	str.w	r2, [r8, #8]
   10866:	str.w	r2, [r8, #4]
   1086a:	add	sp, #12
   1086c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10870:	movs	r0, #0
   10872:	str.w	r0, [r8, #4]
   10876:	add	sp, #12
   10878:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1087c:	movs	r0, r0
	...

00010880 <___init_veneer>:
   10880:	ldr.w	pc, [pc]	; 10884 <___init_veneer+0x4>
   10884:	.word	0x60001b4d
	...

Disassembly of section .fini:

00010890 <_fini>:
   10890:	push	{r3, r4, r5, r6, r7, lr}
   10892:	nop

Disassembly of section .text.csf:

60013a64 <hab_csf>:
	...
