
.vsteensy/build/mtp-test_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000108d0 l    d  .fini	00000000 .fini
000108d4 l    d  .ARM.exidx	00000000 .ARM.exidx
000108dc l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
20001618 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60013ab4 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000af40 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000a500 l     F .text.itcm	00000070 schedule_transfer
0000a570 l     F .text.itcm	00000036 run_callbacks
0000a5a8 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
0000a648 l     F .text.itcm	0000066c isr
20006d84 l     O .bss	00000004 endpointN_notify_mask
20006d88 l     O .bss	00000001 sof_usage
20006d94 l     O .bss	00000004 endpoint0_notify_mask
20006d98 l     O .bss	00000001 usb_reboot_timer
20006da0 l     O .bss	00000008 endpoint0_setupdata
20006da8 l     O .bss	00000008 reply_buffer
20006db0 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
20006dcc l     O .bss	00000004 s_hotTemp
20006dd0 l     O .bss	00000004 s_hot_ROOM
20006dd4 l     O .bss	00000004 s_roomC_hotC
20006dd8 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
20006e15 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 usb_desc.c
60001b40 l     O .text.progmem	0000000a qualifier_descriptor
20000c2c l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001618 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000161c l       .bss	00000000 object.8610
60001ba8 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000001c4 l     F .text.itcm	00000002 __tcf_0
00000bf8 l     F .text.itcm	000000f0 _GLOBAL__sub_I_sd_str
20000140 l     O .data	0000001c cs
00000000 l    df *ABS*	00000000 SD.cpp
00003dcc l     F .text.itcm	00000060 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 Storage.cpp
00000f04 l     F .text.itcm	000000b8 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]
0000188c l     F .text.itcm	00000032 MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]
00000000 l    df *ABS*	00000000 MTP.cpp
00001934 l     F .text.itcm	00000080 MTPD::write(char const*, int) [clone .part.2]
00001a80 l     F .text.itcm	000000c8 MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00002eb8 l     F .text.itcm	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]
2000025c l     O .data	00000024 supported_op
20000280 l     O .data	00000014 propertyList
20005be0 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20005be4 l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
00000000 l    df *ABS*	00000000 SPI.cpp
0000392c l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00003e2c l     F .text.itcm	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00004948 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00004984 l     F .text.itcm	0000002c FsCache::sync() [clone .part.2]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00004fec l     F .text.itcm	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFile.cpp
00005bf0 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00005d70 l     F .text.itcm	000000a4 FatFile::sync() [clone .part.38]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00006c54 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00006c90 l     F .text.itcm	00000058 FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000071dc l     F .text.itcm	0000002a lfnGetChar(DirLfn_t*, unsigned char)
00007208 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00007d7c l     F .text.itcm	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00008188 l     F .text.itcm	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]
000081a0 l     F .text.itcm	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008938 l     F .text.itcm	00000030 sdIrs()
00008968 l     F .text.itcm	00000018 isBusyCommandComplete()
00008980 l     F .text.itcm	00000010 isBusyCommandInhibit()
00008990 l     F .text.itcm	0000000c isBusyDMA()
0000899c l     F .text.itcm	00000014 isBusyFifoRead()
000089b0 l     F .text.itcm	00000014 isBusyFifoWrite()
000089c4 l     F .text.itcm	00000018 isBusyTransferComplete()
000089dc l     F .text.itcm	000000d0 setSdclk(unsigned long)
00008b10 l     F .text.itcm	00000028 waitTimeout(bool (*)())
00008b38 l     F .text.itcm	0000004c yieldTimeout(bool (*)())
00008b94 l     F .text.itcm	00000044 enableGPIO(bool) [clone .part.0]
00008bf8 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00008c80 l     F .text.itcm	0000005c readReg16(unsigned long, void*)
00008cdc l     F .text.itcm	0000002c isBusyCMD13()
00008d24 l     F .text.itcm	00000020 waitDmaStatus() [clone .part.7]
00008d44 l     F .text.itcm	000000b8 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008f3c l     F .text.itcm	0000006c transferStop()
000092bc l     F .text.itcm	0000009c cardCMD6(unsigned long, unsigned char*)
200060a4 l     O .bss	00000001 m_version2
200060a8 l     O .bss	00000010 m_cid
200060b8 l     O .bss	00000004 m_busyFcn
200060bc l     O .bss	00000001 m_highCapacity
200060c0 l     O .bss	00000004 m_ocr
200060c4 l     O .bss	00000004 m_rca
200060c8 l     O .bss	00000004 m_irqstat
20000c24 l     O .data	00000001 m_errorCode
200060cc l     O .bss	00000001 m_initDone
200060d0 l     O .bss	00000010 m_csd
200060e0 l     O .bss	00000001 m_dmaBusy
200060e4 l     O .bss	00000004 m_sdClkKhz
200060e8 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 usb1_mtp.c
00009acc l     F .text.itcm	00000010 tx_event
00009adc l     F .text.itcm	00000010 rx_event
00009aec l     F .text.itcm	0000004c usb_mtp_wait
200060ec l     O .bss	00000800 txbuffer
200068ec l     O .bss	00000004 mtp_RXcount
200068f0 l     O .bss	00000001 tx_head
200068f4 l     O .bss	00000200 rx_buffer
20006b00 l     O .bss	00000020 rx_transfer
20006b20 l     O .bss	00000080 tx_transfer
20006ba0 l     O .bss	00000004 mtp_TXcount
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009dc0 l     F .text.itcm	0000006c rx_queue_transfer
00009e2c l     F .text.itcm	000000b4 rx_event
00009ee0 l     F .text.itcm	00000098 usb_serial_flush_callback
00009f78 l     F .text.itcm	0000017c usb_serial_write.part.1
20006ba4 l     O .bss	00000010 rx_index
20006bb4 l     O .bss	00000002 tx_packet_size
20006bb6 l     O .bss	00000001 tx_noautoflush
20006bb7 l     O .bss	00000001 tx_head
20006bc0 l     O .bss	00000100 rx_transfer
20006cc0 l     O .bss	00000001 rx_tail
20006cc4 l     O .bss	00000009 rx_list
20006cce l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20006cd0 l     O .bss	00000010 rx_count
20006ce0 l     O .bss	00000004 rx_available
20006ce4 l     O .bss	00000001 rx_head
20006ce5 l     O .bss	00000001 transmit_previous_timeout
20006ce6 l     O .bss	00000002 tx_available
20006d00 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
0000b114 l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 yield.cpp
20006ddc l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
20000b30 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000e178 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
20000b50 l     O .data	00000010 zeroes.7258
20000ba0 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
20000c70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001b58 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001b60 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001b68 l     F .text.progmem	00000008 __pwm_init_veneer
60001b70 l     F .text.progmem	00000008 __memset_veneer
60001b78 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001b80 l     F .text.progmem	00000008 __delay_veneer
60001b88 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001b90 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001b98 l     F .text.progmem	00000008 __sm_set_pool_veneer
60001ba0 l     F .text.progmem	00000008 __main_veneer
000108c0 l     F .text.itcm	00000008 ___init_veneer
00000ed0 g     F .text.itcm	00000032 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00000d54 g     F .text.itcm	00000004 MTPStorage_SD::getNumStorage()
0000c3f0 g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
0000a330 g     F .text.itcm	0000000c usb_serial_available
0000c3b4 g     F .text.itcm	00000012 .hidden __aeabi_dcmple
0000d464 g     F .text.itcm	000000ba strcpy
00000d4c g     F .text.itcm	00000006 MTPStorage_SD::setStorageNumbers(char const**, int)
0000c2f0 g     F .text.itcm	0000007a .hidden __cmpdf2
0000af4c g     F .text.itcm	00000002 startup_default_late_hook
000090d4 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000b4fc  w    F .text.itcm	000000f0 yield
20006d8c g     O .bss	00000004 usb_timer1_callback
00006a10 g     F .text.itcm	00000244 FatFile::write(void const*, unsigned int)
0000c2f0 g     F .text.itcm	0000007a .hidden __eqdf2
000080fc  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
000043ac g     F .text.itcm	00000434 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20003724 g     O .bss	00000060 storage
60001a4c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
60001480 g     F .text.progmem	000003bc configure_external_ram
0000105c g     F .text.itcm	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000be60 g     F .text.itcm	0000005a .hidden __floatdidf
2000609c g     O .bss	00000004 FsDateTime::callback
0000b728 g     F .text.itcm	00000020 Print::println()
00004284 g     F .text.itcm	00000126 ExFatFile::seekSet(unsigned long long)
000080d0  w    F .text.itcm	00000004 SdSpiCard::errorCode() const
000000c0  w    F .text.itcm	0000000c File::flush()
0000d01c g     F .text.itcm	00000002 __malloc_unlock
00000220  w    F .text.itcm	000000bc SDFile::openNextFile(unsigned char)
200060a0 g     O .bss	00000004 FsVolume::m_cwv
00005e84 g     F .text.itcm	0000010c FatFile::open(FatFile*, char const*, int)
600019bc g     F .text.progmem	00000058 analog_init
0000d6bc g     F .text.itcm	0000004a _vdprintf_r
00003d54 g     F .text.itcm	0000006c SPIClass::setSCK(unsigned char)
20000c6c g     O .data	00000004 F_CPU_ACTUAL
200000c8  w    O .data	0000005c vtable for SDFile
0000ceb4 g     F .text.itcm	000000c6 memmove
000018c0 g     F .text.itcm	00000074 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0000da94 g     F .text.itcm	0000004c _Balloc
000108dc g       .ARM.exidx	00000000 __exidx_end
00006f5c g     F .text.itcm	00000060 FatPartition::freeChain(unsigned long)
20006df0 g     O .bss	00000001 EventResponder::runningFromYield
00009a24 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
000082a8 g     F .text.itcm	00000080 SdSpiCard::cardCommand(unsigned char, unsigned long)
000013a8 g     F .text.itcm	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000b6fc g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
0000c2e0 g     F .text.itcm	0000008a .hidden __gtdf2
00007244 g     F .text.itcm	00000024 FatFile::lfnChecksum(unsigned char*)
0000c790 g     F .text.itcm	0000000c __errno
00000670  w    F .text.itcm	00000026 SDFile::isDirectory()
60001000 g     O .text.progmem	00000020 ImageVectorTable
00000880  w    F .text.itcm	00000028 File::~File()
20006de0 g     O .bss	00000004 EventResponder::firstInterrupt
0000adfc g     F .text.itcm	00000004 usb_transfer_status
00001fd4 g     F .text.itcm	00000088 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000b060 g     F .text.itcm	00000090 sm_set_pool
00008100  w    F .text.itcm	0000000e SdSpiCard::~SdSpiCard()
00007e50 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
00004f18 g     F .text.itcm	0000003a ExFatPartition::rootLength()
000080d4  w    F .text.itcm	00000004 SdSpiCard::errorData() const
0000b6ec  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000510 g     O .data	00000370 digital_pin_to_info_PGM
20008ac0 g     O .bss	00000004 errno
000084f4 g     F .text.itcm	00000054 SdSpiCard::readOCR(unsigned long*)
00009a3c g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00007974 g     F .text.itcm	00000408 FatFile::open(FatFile*, fname_t*, int)
00004d44 g     F .text.itcm	0000004a ExFatPartition::fatGet(unsigned long, unsigned long*)
000108d8 g       .text.itcm	00000000 _etext
00003984 g     F .text.itcm	000000d4 _spi_dma_rxISR0()
20001618 g       .bss	00000000 _sbss
00009ac0 g     F .text.itcm	00000006 sdCsInit(unsigned char)
0000c37c g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
00008ab8 g     F .text.itcm	0000000c SdioCard::errorData() const
000091e4 g     F .text.itcm	000000a0 SdioCard::writeSector(unsigned long, unsigned char const*)
60001bc0 g       *ABS*	00000000 _stextload
00000bec g     F .text.itcm	0000000c loop
0000acb4 g     F .text.itcm	00000064 usb_config_rx
00001e1c g     F .text.itcm	00000190 MTPD::GetStorageInfo(unsigned long)
00003f6c g     F .text.itcm	000000fc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000096bc g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
00008204 g     F .text.itcm	00000074 SdSpiCard::readData(unsigned char*, unsigned int)
20006de4 g     O .bss	00000004 EventResponder::lastInterrupt
000007e8  w    F .text.itcm	00000096 SDFile::seek(unsigned long, int)
00007ed4 g     F .text.itcm	00000028 FsBaseFile::close()
00009c8c g     F .text.itcm	00000134 memcpy
0000c36c g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
000000a4  w    F .text.itcm	0000000c File::available()
00001734 g     F .text.itcm	00000158 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00004e28 g     F .text.itcm	00000080 ExFatPartition::freeChain(unsigned long)
0000147c g     F .text.itcm	00000198 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00006178 g     F .text.itcm	00000028 FatFile::peek()
0000f0d8 g     F .text.itcm	000016e4 _svfprintf_r
0000bdf0 g     F .text.itcm	00000022 .hidden __floatsidf
000001f0  w    F .text.itcm	00000014 SDFile::whoami()
20001634  w    O .bss	00000001 SDFile::name()::zeroterm
20006dc4 g     O .bss	00000004 systick_millis_count
0000c2e8 g     F .text.itcm	00000082 .hidden __ltdf2
00005728 g     F .text.itcm	000000dc ExFatFile::rename(ExFatFile*, char const*)
00009c68 g     F .text.itcm	00000024 usb_mtp_available
00003134 g     F .text.itcm	000007dc MTPD::loop()
0000c46c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20006db8 g     O .bss	00000001 usb_configuration
00000084  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
0000b010 g     F .text.itcm	00000050 sm_align_pool
00009284 g     F .text.itcm	00000038 SdioCard::syncDevice()
00008fac g     F .text.itcm	000000bc SdioCard::writeData(unsigned char const*)
000002dc  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
000061a0 g     F .text.itcm	00000052 FatFile::readDirCache(bool)
000000cc  w    F .text.itcm	0000000c File::seek(unsigned long, int)
60001a4c  w    O .text.progmem	00000018 usb_string_manufacturer_name
60001a14 g     O .text.progmem	00000008 usb_string_mtp
0000c7ec g     F .text.itcm	00000010 malloc
20000048  w    O .data	00000024 vtable for FsFile
00003910  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
20000a40 g     O .data	000000c8 __mprec_tens
6000129c g     F .text.progmem	000000ec usb_init
000080e8  w    F .text.itcm	00000004 SdSpiCard::type() const
20006e20 g     O .bss	00000004 __malloc_top_pad
20008300 g     O .bss	00000004 systick_safe_read
00008110 g     F .text.itcm	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00005804 g     F .text.itcm	00000122 ExFatFile::truncate()
20000bb0 g     O .data	00000000 .hidden __dso_handle
0000bdd0 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000da78 g     F .text.itcm	0000001c _localeconv_r
20000bb4 g     O .data	0000001c sd_str
000099cc g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
0000dc10 g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
00009b38 g     F .text.itcm	0000006c usb_mtp_configure
60001ad4 g     O .text.progmem	00000069 usb_config_descriptor_480
000000fc  w    F .text.itcm	0000000c File::operator bool()
00006d64 g     F .text.itcm	0000000e FatCache::sync()
0000c49c g     F .text.itcm	000002e2 .hidden __udivmoddi4
00002b00 g     F .text.itcm	000001d0 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000bb4c g     F .text.itcm	00000000 .hidden __aeabi_drsub
00005c2c g     F .text.itcm	00000042 FatFile::addCluster()
0000d400 g     F .text.itcm	00000024 _sbrk_r
00008548 g     F .text.itcm	0000004a SdSpiCard::readRegister(unsigned char, void*)
00008bd8 g     F .text.itcm	00000020 SdioCard::type() const
00000098  w    F .text.itcm	0000000c File::write(void const*, unsigned int)
0000af48 g     F .text.itcm	00000002 startup_default_early_hook
6000102c g     F .text.progmem	00000270 ResetHandler
0000a3b0 g     F .text.itcm	00000020 usb_serial_getchar
000004f4  w    F .text.itcm	0000004c SDFile::name()
20006e4c g     O .bss	00000008 usb_cdc_line_coding
0000b160 g     F .text.itcm	0000000a digitalWrite
20006de8 g     O .bss	00000004 EventResponder::lastYield
00003f3c g     F .text.itcm	00000030 ExFatFile::openRoot(ExFatVolume*)
00000350  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000c3a0 g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
20008400 g     O .bss	00000010 extmem_smalloc_pool
20006e1c g     O .bss	00000004 __malloc_max_sbrked_mem
00000620  w    F .text.itcm	00000010 SDFile::position()
0000b16c g     F .text.itcm	00000080 pinMode
00008840 g     F .text.itcm	00000042 SdSpiCard::writeStop()
00001614 g     F .text.itcm	00000036 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000be14 g     F .text.itcm	0000003a .hidden __extendsfdf2
0000c110 g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
0000bb58 g     F .text.itcm	00000276 .hidden __adddf3
000022fc g     F .text.itcm	00000090 MTPD::getObjectPropsSupported(unsigned long)
60013ab4 g     O .text.csf	00000c00 hab_csf
000019b4 g     F .text.itcm	000000cc MTPD::writestring(char const*)
00008904 g     F .text.itcm	00000032 SdSpiCard::writeData(unsigned char const*)
000000b0  w    F .text.itcm	00000010 File::peek()
00006fbc g     F .text.itcm	000000d4 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00000698  w    F .text.itcm	000000b8 SDClass::open(char const*, unsigned char)
000108d4 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
0000bebc g     F .text.itcm	00000254 .hidden __aeabi_dmul
0000873c g     F .text.itcm	00000050 SdSpiCard::writeStart(unsigned long)
20006dec g     O .bss	00000004 EventResponder::firstYield
20000924 g     O .data	00000004 _global_impure_ptr
00000d68 g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
0000039c  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d020 g     F .text.itcm	000003de _realloc_r
00000640  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0000c79c g     F .text.itcm	00000050 __libc_init_array
000005dc  w    F .text.itcm	00000044 SDFile::rewindDirectory()
000048fc g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00008ac4 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
00005494 g     F .text.itcm	00000110 ExFatFile::addDirCluster()
000088b0 g     F .text.itcm	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
20000b08 g     O .data	00000028 __mprec_bigtens
0000af50  w    F .text.itcm	0000008c HardFault_HandlerC
0000b6d4  w    F .text.itcm	00000004 usb_serial_class::clear()
0000bdd0 g     F .text.itcm	0000001e .hidden __floatunsidf
0000afdc g     F .text.itcm	00000030 _sbrk
6001249c g       *ABS*	00000000 _sdataload
0000dea4 g     F .text.itcm	00000042 __mcmp
20000124  w    O .data	0000001c vtable for SDClass
000001b0  w    F .text.itcm	00000012 SDFile::operator bool()
20000c28 g     O .data	00000004 __brkval
20006ce8 g     O .bss	00000001 usb_cdc_line_rtsdtr
00000d58 g     F .text.itcm	0000000e MTPStorage_SD::getStorageName(unsigned long)
60001b4c g     F .text.progmem	00000000 _init
0000a0f4 g     F .text.itcm	00000002 usb_serial_reset
00005d44 g     F .text.itcm	0000002a FatFile::cacheDirEntry(unsigned char)
0000042c  w    F .text.itcm	00000062 SDClass::remove(char const*)
00000204  w    F .text.itcm	0000001c SDFile::close()
000003d0  w    F .text.itcm	0000005c SDFile::~SDFile()
60001a68 g     O .text.progmem	00000069 usb_config_descriptor_12
00009998 g     F .text.itcm	00000034 SdSpiArduinoDriver::begin(SdSpiConfig)
20008b00 g       .bss	00000000 _ebss
0000915c g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00001b48 g     F .text.itcm	0000025c MTPD::WriteDescriptor()
20000bd0 g     O .data	00000004 propertyListNum
00000750  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00006ce8 g     F .text.itcm	0000007a FatCache::read(unsigned long, unsigned char)
0000db74 g     F .text.itcm	00000040 __hi0bits
0000c41c g     F .text.itcm	0000004e .hidden __fixdfsi
000055a4 g     F .text.itcm	00000072 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20203080 g       .bss.dma	00000000 _heap_start
00001da4 g     F .text.itcm	00000076 MTPD::WriteStorageIDs()
00003dc8  w    F .text.itcm	00000002 SDClass::~SDClass()
20001638 g     O .bss	000020ec sdx
00000880  w    F .text.itcm	00000028 File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20007000 g     O .bss	00000020 endpoint0_transfer_data
0000b828 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000b1ec g     F .text.itcm	000002b8 pwm_init
0000bb58 g     F .text.itcm	00000276 .hidden __aeabi_dadd
0000c2e8 g     F .text.itcm	00000082 .hidden __ledf2
0000d424 g     F .text.itcm	0000003e strcat
6000183c g     F .text.progmem	00000064 usb_pll_start
0000dd54 g     F .text.itcm	000000a0 __pow5mult
000062ac g     F .text.itcm	00000068 FatFile::rmdir()
0000be50 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00006ea0 g     F .text.itcm	000000bc FatPartition::allocateCluster(unsigned long, unsigned long*)
00000590  w    F .text.itcm	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
20007020 g     O .bss	00000020 endpoint0_transfer_ack
20006e54 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000adb0 g     F .text.itcm	00000028 usb_transmit
0000b6b4 g     F .text.itcm	00000020 systick_isr
0000011c  w    F .text.itcm	0000000c File::isDirectory()
00007db8 g     F .text.itcm	00000098 FatFile::getSFN(char*)
0000868c g     F .text.itcm	00000074 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20000c58 g     O .data	00000010 Serial
0000b6f4  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00007f7c g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000af48  w    F .text.itcm	00000002 startup_early_hook
00005028 g     F .text.itcm	000000c8 ExFatFile::addCluster()
2000006c  w    O .data	0000005c vtable for File
0000a2ec g     F .text.itcm	00000044 usb_serial_peekchar
0000c3dc g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
0000cdb0 g     F .text.itcm	00000000 memchr
00006e14 g     F .text.itcm	0000008a FatPartition::fatPut(unsigned long, unsigned long)
0000b82c g     F .text.itcm	000002c4 set_arm_clock
20006dbc g     O .bss	00000004 systick_cycle_count
20000c40 g     O .data	00000016 usb_string_serial_number_default
0000d8a8 g     F .text.itcm	000001d0 _free_r
00008fa8 g     F .text.itcm	00000004 SdioCard::readStop()
000049bc g     F .text.itcm	0000008c FsCache::get(unsigned long, unsigned char)
0000c3c8 g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
0000b6e4  w    F .text.itcm	00000004 usb_serial_class::flush()
00000d74 g     F .text.itcm	00000028 MTPStorage_SD::freeClusters(unsigned long)
0000bb54 g     F .text.itcm	0000027a .hidden __aeabi_dsub
00007090 g     F .text.itcm	0000014c FatPartition::init(BlockDeviceInterface*, unsigned char)
00006520 g     F .text.itcm	00000198 FatFile::mkdir(FatFile*, fname_t*)
20001614 g     O .data	00000004 __malloc_sbrk_base
0000b6dc  w    F .text.itcm	00000004 usb_serial_class::read()
00000160  w    F .text.itcm	0000000c File::rewindDirectory()
00007688 g     F .text.itcm	000001b4 FatFile::remove()
0000be50 g     F .text.itcm	0000006a .hidden __floatundidf
0000b00c  w    F .text.itcm	00000004 __cxa_pure_virtual
0000ddf4 g     F .text.itcm	000000ae __lshift
000066b8 g     F .text.itcm	00000102 FatFile::mkdir(FatFile*, char const*, bool)
0000ad80 g     F .text.itcm	0000002e usb_prepare_transfer
00004f90 g     F .text.itcm	0000005a exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
0000af30 g     F .text.itcm	00000018 unused_interrupt_vector
000107bc g     F .text.itcm	00000100 __ssprint_r
600018a0 g     F .text.progmem	0000011c tempmon_init
20006d80 g     O .bss	00000004 usb_timer0_callback
0000e0b8 g     F .text.itcm	0000005e _vasnprintf_r
0000b820  w    F .text.itcm	00000002 serialEvent()
0000d768 g     F .text.itcm	000000a4 __register_exitproc
000047e0 g     F .text.itcm	0000011c ExFatFile::open(ExFatFile*, char const*, int)
0000d61c g     F .text.itcm	000000a0 strncmp
00005618 g     F .text.itcm	0000010e ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a33c g     F .text.itcm	00000074 usb_serial_flush_input
00004ea8 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
000010f0 g     F .text.itcm	00000074 MTPStorage_SD::ConstructFilename(int, char*, int)
0000dc24 g     F .text.itcm	00000130 __multiply
0000a3d0 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
20006e24 g     O .bss	00000028 __malloc_current_mallinfo
200002ec g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000dffc g     F .text.itcm	000000ba __d2b
20006df4 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
00008b84  w    F .text.itcm	0000000e SdioCard::~SdioCard()
00003e7c g     F .text.itcm	000000c0 ExFatFile::getName(char*, unsigned int)
00009068 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00009c00 g     F .text.itcm	00000068 usb_mtp_send
0000c784 g     F .text.itcm	0000000c __cxa_atexit
00004068 g     F .text.itcm	000001ee ExFatFile::read(void*, unsigned int)
0000bdf0 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00000658  w    F .text.itcm	00000018 SDFile::peek()
00004a48 g     F .text.itcm	0000000e FsCache::sync()
00000d1c g     F .text.itcm	00000030 MTPStorage_SD::clusterSize(unsigned long)
20000bd4 g     O .data	00000050 SPI
0000ce50 g     F .text.itcm	00000062 memcmp
200008f8  w    O .data	00000028 vtable for usb_serial_class
00009a5c g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
00002ce8 g     F .text.itcm	0000011c MTPD::GetObject(unsigned long)
00009ac8 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20006dc0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000c780  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00005220 g     F .text.itcm	00000072 ExFatFile::rmdir()
0000238c g     F .text.itcm	00000772 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000c110 g     F .text.itcm	000001d0 .hidden __divdf3
000085a4 g     F .text.itcm	00000098 SdSpiCard::sectorCount()
00000cec g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
20001208 g     O .data	00000408 __malloc_av_
00000388  w    F .text.itcm	00000014 SDFile::flush()
0000bebc g     F .text.itcm	00000254 .hidden __muldf3
0000a460 g     F .text.itcm	000000a0 usb_serial_flush_output
0000d018 g     F .text.itcm	00000002 __malloc_lock
000073d8 g     F .text.itcm	000002b0 FatFile::parsePathName(char const*, fname_t*, char const**)
20008800 g     O .bss	000002c0 _VectorsRam
00009a70 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000e118 g     F .text.itcm	0000005e _calloc_r
00003a58 g     F .text.itcm	00000230 SPIClass::begin()
00002e04 g     F .text.itcm	00000070 MTPD::read(char*, unsigned long)
00000cf0 g     F .text.itcm	0000002c MTPStorage_SD::clusterCount(unsigned long)
20000c56 g     O .data	00000001 yield_active_check_flags
0000542c g     F .text.itcm	00000066 ExFatFile::sync()
20006d90 g     O .bss	00000001 usb_high_speed
000067bc g     F .text.itcm	00000246 FatFile::rename(FatFile*, char const*)
00008d08 g     F .text.itcm	0000001c SdioCard::isBusy()
00008700 g     F .text.itcm	0000003a SdSpiCard::readStop()
0000cf7c g     F .text.itcm	0000009a memset
0000b810 g     F .text.itcm	00000010 main
20006e18 g     O .bss	00000004 __malloc_max_total_mem
00004a58 g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20203000 g     O .bss.dma	00000069 usb_descriptor_buffer
00005928 g     F .text.itcm	000002c8 ExFatFile::write(void const*, unsigned int)
200001ec g     O .data	0000005c vtable for MTPStorage_SD
00002ee4 g     F .text.itcm	00000154 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000078c  w    F .text.itcm	0000005a SDFile::available()
000000f0  w    F .text.itcm	0000000c File::close()
0000b4a4 g     F .text.itcm	00000058 usb_init_serialnumber
60001bb4 g       .text.progmem	00000000 __init_array_end
0000e2a0 g     F .text.itcm	00000e34 _dtoa_r
0000c80c g     F .text.itcm	00000570 _malloc_r
20006e14 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000d720 g     F .text.itcm	0000001a __ascii_wctomb
00007e50 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000be60 g     F .text.itcm	0000005a .hidden __aeabi_l2d
200002dc  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000b5ec g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00003dc0 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
0000aecc g     F .text.itcm	00000064 micros
00000128  w    F .text.itcm	00000038 File::openNextFile(unsigned char)
00005294 g     F .text.itcm	00000198 ExFatFile::syncDir()
0000d80c g     F .text.itcm	0000009c _malloc_trim_r
60001a64 g     O .text.progmem	00000004 string0
0000a3fc g     F .text.itcm	00000018 usb_serial_write
0000af4c  w    F .text.itcm	00000002 startup_late_hook
0000b6e0  w    F .text.itcm	00000004 usb_serial_class::available()
60001b4a g     O .text.progmem	00000001 _serialEvent_default
00002e74 g     F .text.itcm	00000044 MTPD::readstring(char*)
00006a04 g     F .text.itcm	0000000c FatFile::sync()
00000540  w    F .text.itcm	00000050 SDClass::mkdir(char const*)
20008000 g     O .bss	00000300 endpoint_queue_head
60001a1c  w    O .text.progmem	0000002e usb_string_product_name
00001fac g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000ae00 g     F .text.itcm	000000cc delay
0000c2f0 g     F .text.itcm	0000007a .hidden __nedf2
00000d9c g     F .text.itcm	00000024 MTPStorage_SD::CloseIndex()
000108d0 g     F .fini	00000000 _fini
00000108  w    F .text.itcm	00000014 File::name()
60001020 g     O .text.progmem	0000000c BootData
0000863c g     F .text.itcm	00000050 SdSpiCard::readStart(unsigned long)
0000490c g     F .text.itcm	0000003a ExFatFile::openNext(ExFatFile*, int)
0000b758 g     F .text.itcm	0000001e Print::printf(char const*, ...)
0000b7f8 g     F .text.itcm	00000016 Print::print(long)
00005e14 g     F .text.itcm	0000001e FatFile::close()
0000b0f0 g     F .text.itcm	00000024 Panic_Temp_isr
000000d8  w    F .text.itcm	0000000c File::position()
000008a8  w    F .text.itcm	00000064 SDFile::~SDFile()
00006d74 g     F .text.itcm	0000000c FatPartition::clusterStartSector(unsigned long) const
00008b0c  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000338  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000198  w    F .text.itcm	00000018 File::write(unsigned char)
0000d73c g     F .text.itcm	0000002c _write_r
20005be8 g     O .bss	000004b4 SD
00008e68 g     F .text.itcm	000000d4 SdioCard::erase(unsigned long, unsigned long)
00003c88 g     F .text.itcm	0000006c SPIClass::setMOSI(unsigned char)
00009ba4 g     F .text.itcm	0000005c usb_mtp_recv
20001098 g     O .data	00000004 _impure_ptr
20000000  w    O .data	00000024 vtable for Stream
00004258 g     F .text.itcm	0000002c ExFatFile::peek()
20000024  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000783c g     F .text.itcm	00000138 FatFile::lfnUniqueSfn(fname_t*)
00000778  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
000080a4 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
00008aac g     F .text.itcm	0000000c SdioCard::errorCode() const
00005f90 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000764  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001ba8 g       .text.progmem	00000000 __preinit_array_end
000080fc  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
00004b0c g     F .text.itcm	00000134 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004d0c g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000878c g     F .text.itcm	000000b4 SdSpiCard::erase(unsigned long, unsigned long)
00001164 g     F .text.itcm	00000188 MTPStorage_SD::DeleteObject(unsigned long)
0000cd7c g     F .text.itcm	0000002a __ascii_mbtowc
000081c4 g     F .text.itcm	0000003e SdSpiCard::isBusy()
20000460 g     O .data	00000058 vtable for SdSpiCard
0000859c  w    F .text.itcm	00000008 SdSpiCard::readCID(CID*)
00000b64 g     F .text.itcm	00000088 setup
20000880 g     O .data	00000078 usb_descriptor_list
00008c60 g     F .text.itcm	00000020 SdioCard::status()
00000e9c g     F .text.itcm	00000032 MTPStorage_SD::ResetIndex()
00002cd0 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00000080  w    F .text.itcm	00000002 Print::flush()
000000e4  w    F .text.itcm	0000000c File::size()
00000490  w    F .text.itcm	00000062 SDClass::rmdir(char const*)
00005fa0 g     F .text.itcm	000001d6 FatFile::read(void*, unsigned int)
00005e34 g     F .text.itcm	0000004e FatFile::openRoot(FatVolume*)
20068000 g       .text.csf	00000000 _estack
000080cc g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
00008594  w    F .text.itcm	00000008 SdSpiCard::readCSD(csd_t*)
0000016c  w    F .text.itcm	0000002c File::read()
0000a414 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00008278 g     F .text.itcm	00000030 SdSpiCard::waitNotBusy(unsigned short)
0000c38c g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
0000a0f8 g     F .text.itcm	00000108 usb_serial_configure
0000090c  w    F .text.itcm	00000030 File::~File()
0000b748  w    F .text.itcm	0000000e _write
20001618 g       .data	00000000 _edata
00004dd8 g     F .text.itcm	0000004e ExFatPartition::fatPut(unsigned long, unsigned long)
20006dc8 g     O .bss	00000001 external_psram_size
0000205c g     F .text.itcm	000002a0 MTPD::GetObjectInfo(unsigned long)
00008b0c  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00008884 g     F .text.itcm	0000002c SdSpiCard::syncDevice()
00005c70 g     F .text.itcm	000000d4 FatFile::addDirCluster()
0000008c  w    F .text.itcm	0000000c File::read(void*, unsigned int)
0000b6e8  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000baf0 g     F .text.itcm	0000004e ultoa
00003dc8  w    F .text.itcm	00000002 SDClass::~SDClass()
00008328 g     F .text.itcm	000001cc SdSpiCard::begin(SdSpiConfig)
00007efc g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00000fbc g     F .text.itcm	0000004e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000b824 g     F .text.itcm	00000004 operator new(unsigned int)
0000b66c g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001610 g     O .data	00000004 __malloc_trim_threshold
0000b6d8  w    F .text.itcm	00000004 usb_serial_class::peek()
0000100c g     F .text.itcm	00000050 MTPStorage_SD::GetNextObjectHandle(unsigned long)
0000093c  w    F .text.itcm	00000068 MTPStorage_SD::~MTPStorage_SD()
200037a0 g     O .bss	00002440 mtpd
0000dee8 g     F .text.itcm	00000114 __mdiff
00008afc g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
0000c41c g     F .text.itcm	0000004e .hidden __aeabi_d2iz
0000164c g     F .text.itcm	000000e8 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00004d90 g     F .text.itcm	00000048 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00008fa8 g     F .text.itcm	00000004 SdioCard::writeStop()
000080ec  w    F .text.itcm	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00003e68 g     F .text.itcm	00000014 ExFatFile::close()
20000938 g     O .data	00000101 _ctype_
000080d8  w    F .text.itcm	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
60001ba8 g       .text.progmem	00000000 __init_array_start
0000c780  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00000dc0 g     F .text.itcm	000000dc MTPStorage_SD::OpenIndex()
0000c3f0 g     F .text.itcm	0000002c .hidden __unorddf2
20000c68 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
0000d540 g     F .text.itcm	000000dc strlen
00007268 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000c37c g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
0000c2e0 g     F .text.itcm	0000008a .hidden __gedf2
000061f4 g     F .text.itcm	000000b6 FatFile::seekSet(unsigned long)
60001a1c g     O .text.progmem	0000002e usb_string_product_name_default
0000d708 g     F .text.itcm	00000018 vdprintf
00008dfc g     F .text.itcm	0000006c SdioCard::sectorCount()
00007fdc g     F .text.itcm	000000c8 FsVolume::begin(BlockDeviceInterface*)
00006454 g     F .text.itcm	000000cc FatFile::openNext(FatFile*, int)
200004b8 g     O .data	00000058 vtable for SdioCard
0000be14 g     F .text.itcm	0000003a .hidden __aeabi_f2d
000010b0 g     F .text.itcm	00000040 MTPStorage_SD::close()
00007298 g     F .text.itcm	0000013e FatFile::getName(char*, unsigned int)
60001388 g     F .text.progmem	000000f8 configure_cache
0000093c  w    F .text.itcm	00000068 MTPStorage_SD::~MTPStorage_SD()
000012ec g     F .text.itcm	000000bc MTPStorage_SD::rename(unsigned long, char const*)
00009778 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00009894 g     F .text.itcm	00000104 SdSpiArduinoDriver::activate()
00000ce8 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
0000bb54 g     F .text.itcm	0000027a .hidden __subdf3
60001ba8 g       .text.progmem	00000000 __preinit_array_start
0000add8 g     F .text.itcm	00000024 usb_receive
00004c40 g     F .text.itcm	000000cc ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00001098 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
000001c8  w    F .text.itcm	00000028 File::whoami()
0000dbb4 g     F .text.itcm	0000005a __lo0bits
00006314 g     F .text.itcm	00000140 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
000146b0 g       *ABS*	00000000 _flashimagelen
0000bb40 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
000050f0 g     F .text.itcm	0000012e ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000b6b0 g     F .text.itcm	00000004 pendablesrvreq_isr
00003038 g     F .text.itcm	000000fc MTPD::SendObject()
0000007c  w    F .text.itcm	00000004 Print::availableForWrite()
2000109c g     O .data	0000016c __global_locale
00003cf4 g     F .text.itcm	00000060 SPIClass::setMISO(unsigned char)
00009358 g     F .text.itcm	00000364 SdioCard::begin(SdioConfig)
000049b0 g     F .text.itcm	0000000c FsCache::invalidate()
0000a200 g     F .text.itcm	000000ec usb_serial_read
0000b778 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000ad18 g     F .text.itcm	00000068 usb_config_tx
00006d80 g     F .text.itcm	00000094 FatPartition::fatGet(unsigned long, unsigned long*)
000009a4 g     F .text.itcm	000001c0 storage_configure(char const**, int const*, SDClass*, int)
0000c7fc g     F .text.itcm	00000010 free
0000daf4 g     F .text.itcm	00000080 __multadd
0000dae0 g     F .text.itcm	00000012 _Bfree
00000630  w    F .text.itcm	00000010 SDFile::size()
000003d0  w    F .text.itcm	0000005c SDFile::~SDFile()
20000c40  w    O .data	00000016 usb_string_serial_number
00004f54 g     F .text.itcm	0000003c exFatHashName(char const*, unsigned int, unsigned short)
000097e4 g     F .text.itcm	000000b0 SdioCard::readSector(unsigned long, unsigned char*)
00008ae0 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	................
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. C-..`........
60001010:	 ..`...`.:.`....

60001020 <BootData>:
60001020:	...`.F......

6000102c <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000102c:	ldr	r3, [pc, #472]	; (60001208 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000102e:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001032:	ldr	r2, [pc, #472]	; (6000120c <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001034:	ldr	r0, [pc, #472]	; (60001210 <ResetHandler+0x1e4>)
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001036:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #468]	; (60001214 <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001040:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001044:	ldr	r2, [pc, #464]	; (60001218 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001046:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104c:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001054:	beq.n	60001076 <ResetHandler+0x4a>
	while (dest < dest_end) {
60001056:	ldr	r3, [pc, #456]	; (60001220 <ResetHandler+0x1f4>)
60001058:	cmp	r2, r3
6000105a:	bcs.n	60001076 <ResetHandler+0x4a>
6000105c:	mvns	r4, r2
6000105e:	mov	r0, r1
60001060:	add	r3, r4
60001062:	bic.w	r3, r3, #3
60001066:	adds	r3, #4
60001068:	add	r3, r1
		*dest++ = *src++;
6000106a:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	cmp	r0, r3
		*dest++ = *src++;
60001070:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001074:	bne.n	6000106a <ResetHandler+0x3e>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001076:	ldr	r2, [pc, #428]	; (60001224 <ResetHandler+0x1f8>)
60001078:	ldr	r1, [pc, #428]	; (60001228 <ResetHandler+0x1fc>)
6000107a:	cmp	r2, r1
6000107c:	beq.n	6000109e <ResetHandler+0x72>
	while (dest < dest_end) {
6000107e:	ldr	r3, [pc, #428]	; (6000122c <ResetHandler+0x200>)
60001080:	cmp	r2, r3
60001082:	bcs.n	6000109e <ResetHandler+0x72>
60001084:	mvns	r4, r2
60001086:	mov	r0, r1
60001088:	add	r3, r4
6000108a:	bic.w	r3, r3, #3
6000108e:	adds	r3, #4
60001090:	add	r3, r1
		*dest++ = *src++;
60001092:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	cmp	r0, r3
		*dest++ = *src++;
60001098:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109c:	bne.n	60001092 <ResetHandler+0x66>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
6000109e:	ldr	r2, [pc, #400]	; (60001230 <ResetHandler+0x204>)
600010a0:	ldr	r3, [pc, #400]	; (60001234 <ResetHandler+0x208>)
600010a2:	cmp	r2, r3
600010a4:	bcs.n	600010be <ResetHandler+0x92>
600010a6:	mvns	r0, r2
600010a8:	mov	r1, r2
		*dest++ = 0;
600010aa:	movs	r4, #0
600010ac:	add	r3, r0
600010ae:	bic.w	r3, r3, #3
600010b2:	adds	r3, #4
600010b4:	add	r3, r2
600010b6:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010ba:	cmp	r3, r1
600010bc:	bne.n	600010b6 <ResetHandler+0x8a>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010be:	ldr	r2, [pc, #376]	; (60001238 <ResetHandler+0x20c>)
600010c0:	mov.w	r1, #15728640	; 0xf00000
600010c4:	ldr	r3, [pc, #372]	; (6000123c <ResetHandler+0x210>)
600010c6:	str	r1, [r2, #0]
600010c8:	add.w	r1, r3, #704	; 0x2c0
600010cc:	ldr	r2, [pc, #368]	; (60001240 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010ce:	str.w	r2, [r3, #4]!
600010d2:	cmp	r1, r3
600010d4:	bne.n	600010ce <ResetHandler+0xa2>
600010d6:	ldr	r3, [pc, #364]	; (60001244 <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d8:	movs	r1, #128	; 0x80
600010da:	ldr	r2, [pc, #364]	; (60001248 <ResetHandler+0x21c>)
600010dc:	strb.w	r1, [r3], #1
600010e0:	cmp	r3, r2
600010e2:	bne.n	600010dc <ResetHandler+0xb0>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e4:	ldr	r4, [pc, #356]	; (6000124c <ResetHandler+0x220>)
600010e6:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ea:	ldr	r6, [pc, #356]	; (60001250 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010ec:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f0:	ldr.w	sl, [pc, #412]	; 60001290 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f4:	movs	r5, #0
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f6:	ldr	r3, [pc, #348]	; (60001254 <ResetHandler+0x228>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f8:	ldr.w	r9, [pc, #408]	; 60001294 <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fc:	ldr.w	r8, [pc, #408]	; 60001298 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001100:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001104:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001108:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000110c:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001110:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001114:	ldr	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001116:	ldr	r1, [pc, #240]	; (60001208 <ResetHandler+0x1dc>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001122:	ldr	r3, [r6, #36]	; 0x24
60001124:	bic.w	r3, r3, #127	; 0x7f
60001128:	orr.w	r3, r3, #64	; 0x40
6000112c:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001130:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001136:	bl	60001388 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113a:	ldr	r2, [pc, #284]	; (60001258 <ResetHandler+0x22c>)
6000113c:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
6000113e:	ldr	r3, [pc, #284]	; (6000125c <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001140:	ldr	r1, [pc, #284]	; (60001260 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001142:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001144:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001146:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001148:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000114c:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	ldr	r1, [pc, #272]	; (60001264 <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001152:	ldr	r2, [pc, #276]	; (60001268 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001154:	ldr	r0, [pc, #276]	; (6000126c <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115a:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r2, [pc, #272]	; (60001270 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001162:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #268]	; (60001274 <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001168:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r1, [pc, #264]	; (60001278 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	orr.w	r3, r3, #1
60001172:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001174:	ldr	r3, [r0, #0]
60001176:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001178:	bl	6000183c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000117c:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001180:	ldr	r0, [pc, #248]	; (6000127c <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001182:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001186:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118a:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000118e:	bl	60001b58 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001192:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001194:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x254>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001196:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119a:	ldr	r3, [pc, #232]	; (60001284 <ResetHandler+0x258>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119c:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000119e:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a0:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a4:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011a8:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ac:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b0:	ldr	r2, [r3, #56]	; 0x38
600011b2:	lsls	r2, r2, #31
600011b4:	bmi.n	600011c8 <ResetHandler+0x19c>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b6:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011ba:	ldr	r1, [pc, #204]	; (60001288 <ResetHandler+0x25c>)
600011bc:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011be:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c0:	ldr	r2, [r3, #56]	; 0x38
600011c2:	orr.w	r2, r2, #1
600011c6:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011c8:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x258>)
600011ca:	ldr	r4, [pc, #192]	; (6000128c <ResetHandler+0x260>)
600011cc:	ldr	r3, [r2, #8]
600011ce:	orr.w	r3, r3, #65537	; 0x10001
600011d2:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011d4:	bl	60001480 <configure_external_ram>
#endif
	startup_early_hook();
600011d8:	bl	60001b90 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011dc:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011de:	cmp	r3, #19
600011e0:	bls.n	600011dc <ResetHandler+0x1b0>
	usb_init();
600011e2:	bl	6000129c <usb_init>
	analog_init();
600011e6:	bl	600019bc <analog_init>
	pwm_init();
600011ea:	bl	60001b68 <__pwm_init_veneer>
	tempmon_init();
600011ee:	bl	600018a0 <tempmon_init>

	startup_late_hook();
600011f2:	bl	60001b78 <__startup_late_hook_veneer>
600011f6:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f8:	cmp.w	r3, #300	; 0x12c
600011fc:	bcc.n	600011f6 <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fe:	bl	60001b88 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001202:	bl	60001ba0 <__main_veneer>
60001206:	b.n	60001206 <ResetHandler+0x1da>
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaabf
60001210:	.word	0x00200007
60001214:	.word	0x20068000
60001218:	.word	0x00000000
6000121c:	.word	0x60001bc0
60001220:	.word	0x000108d8
60001224:	.word	0x20000000
60001228:	.word	0x6001249c
6000122c:	.word	0x20001618
60001230:	.word	0x20001618
60001234:	.word	0x20008b00
60001238:	.word	0xe000ed88
6000123c:	.word	0x200087fc
60001240:	.word	0x0000af31
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x0000b6b1
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x0000b6b5
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20006dbc
6000127c:	.word	0x179a7b00
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20006dc4
60001290:	.word	0x20008800
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000129c:	ldr	r3, [pc, #192]	; (60001360 <usb_init+0xc4>)
6000129e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012a2:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a4:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a8:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012ac:	bl	60001b60 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr	r1, [pc, #176]	; (60001364 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b2:	ldr	r0, [pc, #180]	; (60001368 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b8:	ldr	r4, [pc, #176]	; (6000136c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ba:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012be:	ldr	r3, [pc, #176]	; (60001370 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c4:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c8:	ldr	r2, [r4, #0]
600012ca:	ands	r3, r2
600012cc:	cbnz	r3, 600012d6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ce:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d2:	lsls	r2, r3, #30
600012d4:	beq.n	6000130c <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d6:	ldr	r3, [pc, #144]	; (60001368 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d8:	mov.w	r1, #2147483648	; 0x80000000
600012dc:	ldr	r2, [pc, #140]	; (6000136c <usb_init+0xd0>)
600012de:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr.w	r1, [r3, #320]	; 0x140
600012e6:	orr.w	r1, r1, #2
600012ea:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ee:	ldr.w	r3, [r2, #320]	; 0x140
600012f2:	lsls	r3, r3, #30
600012f4:	bmi.n	600012ee <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f6:	mov.w	r0, #131072	; 0x20000
600012fa:	ldr	r1, [pc, #120]	; (60001374 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012fc:	ldr	r3, [pc, #108]	; (6000136c <usb_init+0xd0>)
600012fe:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001306:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	bl	60001b80 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000130c:	ldr	r5, [pc, #104]	; (60001378 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130e:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001310:	ldr	r3, [pc, #88]	; (6000136c <usb_init+0xd0>)
60001312:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001316:	ldr	r4, [pc, #80]	; (60001368 <usb_init+0xcc>)
60001318:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131a:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131e:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001326:	mov.w	r2, #768	; 0x300
6000132a:	bl	60001b70 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132e:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001332:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001336:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133a:	ldr	r2, [pc, #64]	; (6000137c <usb_init+0xe0>)
6000133c:	ldr	r1, [pc, #64]	; (60001380 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133e:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001340:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001342:	str.w	r5, [r4, #344]	; 0x158
60001346:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134a:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134e:	ldr	r2, [pc, #52]	; (60001384 <usb_init+0xe8>)
60001350:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001356:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	str.w	r3, [r4, #320]	; 0x140
6000135c:	pop	{r4, r5, r6, pc}
6000135e:	nop
60001360:	.word	0x400d8000
60001364:	.word	0x400fc000
60001368:	.word	0x402e0000
6000136c:	.word	0x400d9000
60001370:	.word	0x001e1c00
60001374:	.word	0xe000e28c
60001378:	.word	0x20008000
6000137c:	.word	0x20008800
60001380:	.word	0x0000a649
60001384:	.word	0xe000e10c

60001388 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001388:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000138a:	ldr	r2, [pc, #160]	; (6000142c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000138c:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000138e:	ldr	r3, [pc, #160]	; (60001430 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001390:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001394:	ldr	r4, [pc, #156]	; (60001434 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001396:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001398:	ldr.w	lr, [pc, #216]	; 60001474 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000139c:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139e:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013a0:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013a2:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013a6:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013aa:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013ac:	ldr.w	lr, [pc, #200]	; 60001478 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b0:	ldr	r7, [pc, #132]	; (60001438 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013b6:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013ba:	ldr	r6, [pc, #128]	; (6000143c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013bc:	ldr	r7, [pc, #128]	; (60001440 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013be:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c0:	ldr	r1, [pc, #128]	; (60001444 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013c4:	ldr	r6, [pc, #128]	; (60001448 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c6:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ca:	ldr	r7, [pc, #128]	; (6000144c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013cc:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d0:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013d4:	ldr	r6, [pc, #120]	; (60001450 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013d6:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013da:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013dc:	ldr.w	lr, [pc, #156]	; 6000147c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013e0:	ldr	r6, [pc, #112]	; (60001454 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e2:	ldr	r1, [pc, #116]	; (60001458 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013e4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013ec:	ldr	r7, [pc, #108]	; (6000145c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ee:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f0:	ldr	r6, [pc, #108]	; (60001460 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013f2:	ldr	r1, [pc, #112]	; (60001464 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013f4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
600013f8:	ldr	r7, [pc, #108]	; (60001468 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fa:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fc:	ldr	r6, [pc, #108]	; (6000146c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600013fe:	ldr	r1, [pc, #112]	; (60001470 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001400:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001402:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001404:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001406:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001408:	dsb	sy
	asm("isb");
6000140c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001410:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001414:	dsb	sy
	asm("isb");
60001418:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000141c:	ldr.w	r3, [r2, #-136]
60001420:	orr.w	r3, r3, #196608	; 0x30000
60001424:	str.w	r3, [r2, #-136]
60001428:	pop	{r4, r5, r6, r7, pc}
6000142a:	nop
6000142c:	.word	0xe000ed9c
60001430:	.word	0xe000eda0
60001434:	.word	0xe000ed94
60001438:	.word	0x00100009
6000143c:	.word	0x00200013
60001440:	.word	0x07020021
60001444:	.word	0x20008b00
60001448:	.word	0x20000014
6000144c:	.word	0x13080025
60001450:	.word	0x10000009
60001454:	.word	0x40000017
60001458:	.word	0x13100033
6000145c:	.word	0x60000018
60001460:	.word	0x070b002f
60001464:	.word	0x70000019
60001468:	.word	0x170b0037
6000146c:	.word	0x7000001a
60001470:	.word	0x130b002f
60001474:	.word	0x1000003f
60001478:	.word	0x03080025
6000147c:	.word	0x20200016

60001480 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001480:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001482:	ldr	r3, [pc, #564]	; (600016b8 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001484:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001486:	ldr	r6, [pc, #564]	; (600016bc <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001488:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000148a:	ldr	r1, [pc, #564]	; (600016c0 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000148c:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001490:	ldr	r5, [pc, #560]	; (600016c4 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001492:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001496:	ldr	r4, [pc, #560]	; (600016c8 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001498:	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000149a:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000149e:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600014a2:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600014a4:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600014a8:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014ac:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014b0:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014b4:	ldr	r1, [pc, #532]	; (600016cc <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014b6:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014ba:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014be:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600014c2:	ldr	r6, [pc, #524]	; (600016d0 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600014c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600014c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600014c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600014ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600014cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600014ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600014d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600014d6:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014da:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014de:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600014e2:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600014e6:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600014ea:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600014ee:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600014f2:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014f6:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600014f8:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600014fa:	ldr	r0, [pc, #472]	; (600016d4 <configure_external_ram+0x254>)
600014fc:	ands	r0, r3
600014fe:	ldr	r3, [pc, #472]	; (600016d8 <configure_external_ram+0x258>)
60001500:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001502:	ldr	r0, [pc, #472]	; (600016dc <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001504:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001506:	ldr.w	r3, [r6, #132]	; 0x84
6000150a:	orr.w	r3, r3, #12
6000150e:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001512:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001514:	ldr	r3, [r0, #0]
60001516:	orrs	r3, r6
60001518:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000151a:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000151c:	and.w	lr, r3, lr
60001520:	ldr	r3, [pc, #444]	; (600016e0 <configure_external_ram+0x260>)
60001522:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001526:	ldr.w	lr, [pc, #496]	; 60001718 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000152a:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000152c:	ldr	r3, [pc, #436]	; (600016e4 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000152e:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001530:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001534:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001536:	ldr	r7, [pc, #432]	; (600016e8 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001538:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000153c:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000153e:	ldr	r3, [r0, #12]
60001540:	bic.w	r3, r3, #120	; 0x78
60001544:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001546:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001548:	ands	r7, r3
6000154a:	ldr	r3, [pc, #416]	; (600016ec <configure_external_ram+0x26c>)
6000154c:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000154e:	ldr	r7, [pc, #408]	; (600016e8 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001550:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001552:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001554:	ands	r7, r3
60001556:	ldr	r3, [pc, #404]	; (600016ec <configure_external_ram+0x26c>)
60001558:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000155a:	ldr	r7, [pc, #404]	; (600016f0 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000155c:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000155e:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001560:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001562:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001566:	ldr	r7, [pc, #396]	; (600016f4 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001568:	bic.w	r3, r3, #63	; 0x3f
6000156c:	orr.w	r3, r3, #1
60001570:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001574:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001578:	ldr.w	lr, [pc, #388]	; 60001700 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000157c:	bic.w	r3, r3, #63	; 0x3f
60001580:	orr.w	r3, r3, #1
60001584:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001588:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000158a:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000158c:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000158e:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001592:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001594:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001596:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000159a:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000159c:	ldr	r3, [pc, #344]	; (600016f8 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000159e:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015a2:	ldr	r2, [pc, #344]	; (600016fc <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015a4:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015a6:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015aa:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015ac:	str.w	r1, [r3], #4
600015b0:	cmp	r3, r2
600015b2:	bne.n	600015ac <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015b4:	ldr	r3, [pc, #292]	; (600016dc <configure_external_ram+0x25c>)
600015b6:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015b8:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015ba:	orr.w	r2, r2, #1
600015be:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015c0:	ldr	r3, [r1, #0]
600015c2:	ldr	r2, [pc, #280]	; (600016dc <configure_external_ram+0x25c>)
600015c4:	ands.w	r3, r3, #1
600015c8:	bne.n	600015c0 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015ca:	ldr	r6, [pc, #308]	; (60001700 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015cc:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015ce:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015d2:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600015d6:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600015da:	ldr	r7, [pc, #296]	; (60001704 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015dc:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600015de:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015e2:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600015e4:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015e8:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600015ec:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015f0:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015f4:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600015f6:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fa:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600015fc:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001600:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001604:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001608:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000160c:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001610:	ldr	r6, [pc, #244]	; (60001708 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001612:	ldr	r5, [pc, #248]	; (6000170c <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001614:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001618:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000161c:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001620:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001624:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001628:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000162c:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001630:	ldr	r3, [r1, #20]
60001632:	ldr	r2, [pc, #168]	; (600016dc <configure_external_ram+0x25c>)
60001634:	lsls	r5, r3, #31
60001636:	bpl.n	60001630 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001638:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000163a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163c:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001640:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001642:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001644:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001648:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000164c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001650:	ldr	r3, [r1, #20]
60001652:	ldr	r2, [pc, #136]	; (600016dc <configure_external_ram+0x25c>)
60001654:	lsls	r4, r3, #31
60001656:	bpl.n	60001650 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001658:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000165a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000165c:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001660:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001662:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001664:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001668:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000166c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001670:	ldr	r3, [r1, #20]
60001672:	ldr	r2, [pc, #104]	; (600016dc <configure_external_ram+0x25c>)
60001674:	lsls	r0, r3, #31
60001676:	bpl.n	60001670 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001678:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000167a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000167c:	ldr	r0, [pc, #144]	; (60001710 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000167e:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001680:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001682:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001686:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000168a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000168e:	ldr	r3, [r1, #20]
60001690:	ldr	r2, [pc, #72]	; (600016dc <configure_external_ram+0x25c>)
60001692:	lsls	r3, r3, #31
60001694:	bpl.n	6000168e <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
60001696:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000169a:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000169e:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016a0:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016a2:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016a4:	cmp	r3, r1
600016a6:	beq.n	6000171c <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600016a8:	ldr	r3, [pc, #104]	; (60001714 <configure_external_ram+0x294>)
600016aa:	movs	r2, #0
600016ac:	str	r2, [r3, #0]
600016ae:	str	r2, [r3, #4]
600016b0:	str	r2, [r3, #8]
600016b2:	str	r2, [r3, #12]
	}
}
600016b4:	add	sp, #12
600016b6:	pop	{r4, r5, r6, r7, pc}
600016b8:	.word	0x401f8000
600016bc:	.word	0x000170f9
600016c0:	.word	0x0001b0f9
600016c4:	.word	0x000110f9
600016c8:	.word	0x000100f9
600016cc:	.word	0x401f8400
600016d0:	.word	0x400fc000
600016d4:	.word	0x1ffffcff
600016d8:	.word	0xa0000300
600016dc:	.word	0x402a4000
600016e0:	.word	0xffff0012
600016e4:	.word	0x00f737ff
600016e8:	.word	0x7cf0ff00
600016ec:	.word	0x80000040
600016f0:	.word	0x830f00ff
600016f4:	.word	0x00020063
600016f8:	.word	0x402a4200
600016fc:	.word	0x402a4300
60001700:	.word	0x5af05af0
60001704:	.word	0x3018049f
60001708:	.word	0x26013206
6000170c:	.word	0x0a180638
60001710:	.word	0x00030004
60001714:	.word	0x20008400
60001718:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000171c:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000171e:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001722:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001724:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001726:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000172a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000172e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001732:	ldr	r3, [r1, #20]
60001734:	ldr	r2, [pc, #236]	; (60001824 <configure_external_ram+0x3a4>)
60001736:	lsls	r7, r3, #31
60001738:	bpl.n	60001732 <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000173a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000173c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001740:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001742:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001744:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001746:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000174a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000174e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001752:	ldr	r3, [r1, #20]
60001754:	ldr	r2, [pc, #204]	; (60001824 <configure_external_ram+0x3a4>)
60001756:	lsls	r6, r3, #31
60001758:	bpl.n	60001752 <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000175a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000175c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001760:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001764:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001766:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001768:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000176c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001770:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001774:	ldr	r3, [r1, #20]
60001776:	ldr	r2, [pc, #172]	; (60001824 <configure_external_ram+0x3a4>)
60001778:	lsls	r5, r3, #31
6000177a:	bpl.n	60001774 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000177c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000177e:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001782:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001786:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001788:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000178a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000178e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001792:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001796:	ldr	r3, [r1, #20]
60001798:	ldr	r2, [pc, #136]	; (60001824 <configure_external_ram+0x3a4>)
6000179a:	lsls	r4, r3, #31
6000179c:	bpl.n	60001796 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000179e:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017a0:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017a4:	ldr	r0, [pc, #128]	; (60001828 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017a6:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017a8:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017aa:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017ae:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017b2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017b6:	ldr	r3, [r1, #20]
600017b8:	ldr	r2, [pc, #104]	; (60001824 <configure_external_ram+0x3a4>)
600017ba:	lsls	r0, r3, #31
600017bc:	bpl.n	600017b6 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
600017be:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017c2:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017c6:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017c8:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017ca:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600017cc:	cmp	r3, r1
600017ce:	beq.n	600017f2 <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
600017d0:	ldr	r3, [pc, #88]	; (6000182c <configure_external_ram+0x3ac>)
600017d2:	movs	r2, #8
600017d4:	mov.w	r4, #8388608	; 0x800000
600017d8:	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600017da:	ldr	r1, [pc, #84]	; (60001830 <configure_external_ram+0x3b0>)
600017dc:	movs	r0, #0
600017de:	ldr	r2, [pc, #84]	; (60001834 <configure_external_ram+0x3b4>)
600017e0:	movs	r3, #1
600017e2:	str	r0, [sp, #0]
600017e4:	subs	r2, r2, r1
600017e6:	ldr	r0, [pc, #80]	; (60001838 <configure_external_ram+0x3b8>)
600017e8:	add	r2, r4
600017ea:	bl	60001b98 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
600017ee:	add	sp, #12
600017f0:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017f2:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017f6:	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017fa:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017fc:	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017fe:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001802:	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001806:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000180a:	ldr	r3, [r0, #20]
6000180c:	ldr	r1, [pc, #20]	; (60001824 <configure_external_ram+0x3a4>)
6000180e:	lsls	r3, r3, #31
60001810:	bpl.n	6000180a <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001812:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001814:	ldr	r3, [pc, #20]	; (6000182c <configure_external_ram+0x3ac>)
60001816:	movs	r2, #16
60001818:	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000181c:	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000181e:	strb	r2, [r3, #0]
60001820:	b.n	600017da <configure_external_ram+0x35a>
60001822:	nop
60001824:	.word	0x402a4000
60001828:	.word	0x00030004
6000182c:	.word	0x20006dc8
60001830:	.word	0x70000000
60001834:	.word	0x70000000
60001838:	.word	0x20008400

6000183c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000183c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000183e:	ldr	r2, [pc, #92]	; (6000189c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001840:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001842:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001846:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000184a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000184e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001852:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001856:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001858:	tst.w	r3, #2
6000185c:	beq.n	6000186c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000185e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001860:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001862:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001864:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001866:	tst.w	r3, #2
6000186a:	bne.n	6000185e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000186c:	tst.w	r3, #8192	; 0x2000
60001870:	bne.n	60001876 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001872:	str	r5, [r2, #20]
			continue;
60001874:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001876:	tst.w	r3, #4096	; 0x1000
6000187a:	bne.n	60001880 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000187c:	str	r6, [r2, #20]
			continue;
6000187e:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001880:	cmp	r3, #0
60001882:	bge.n	60001856 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001884:	tst.w	r3, #65536	; 0x10000
60001888:	beq.n	6000188e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000188a:	str	r1, [r2, #24]
			continue;
6000188c:	b.n	60001856 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000188e:	lsls	r3, r3, #25
60001890:	bmi.n	60001896 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001892:	str	r7, [r2, #20]
			continue;
60001894:	b.n	60001856 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001896:	pop	{r4, r5, r6, r7}
60001898:	bx	lr
6000189a:	nop
6000189c:	.word	0x400d8000

600018a0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018a0:	ldr	r2, [pc, #236]	; (60001990 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018a2:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018a6:	ldr	r1, [pc, #236]	; (60001994 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018a8:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018aa:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600018ac:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018ae:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018b2:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018b4:	ldr.w	lr, [pc, #256]	; 600019b8 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018b8:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018ba:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018be:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018c2:	ldr	r7, [pc, #212]	; (60001998 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018c4:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600018c6:	ubfx	r4, r3, #8, #12
600018ca:	ldr	r6, [pc, #208]	; (6000199c <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018cc:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018d0:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018d4:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018d8:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018dc:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e0:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e4:	vmov	s15, r4
600018e8:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018ec:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018ee:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018f2:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018f6:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018fa:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018fc:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001900:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001904:	ldr	r5, [pc, #152]	; (600019a0 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001906:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000190a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000190c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001910:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001914:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001916:	vdiv.f32	s11, s14, s13
6000191a:	ldr	r6, [pc, #136]	; (600019a4 <tempmon_init+0x104>)
6000191c:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000191e:	ldr	r1, [pc, #136]	; (600019a8 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001920:	ldr	r4, [pc, #136]	; (600019ac <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001922:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001926:	vmov	s15, r3
6000192a:	ldr	r3, [pc, #132]	; (600019b0 <tempmon_init+0x110>)
6000192c:	str.w	r3, [r6, #320]	; 0x140
60001930:	vcvt.f32.u32	s15, s15
60001934:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001938:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000193c:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001940:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001944:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001948:	vmov	r3, s11
6000194c:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001950:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001954:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001958:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000195a:	and.w	r1, r1, r5, lsl #16
6000195e:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001962:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001966:	orrs	r3, r1
60001968:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000196c:	vmov	r3, s15
60001970:	ldr.w	r1, [r2, #272]	; 0x110
60001974:	ubfx	r3, r3, #0, #12
60001978:	orrs	r3, r1
6000197a:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000197e:	ldr	r3, [r2, #0]
60001980:	orr.w	r3, r3, #2
60001984:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001986:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001988:	ldr	r3, [pc, #40]	; (600019b4 <tempmon_init+0x114>)
6000198a:	movs	r2, #1
6000198c:	str	r2, [r3, #0]
6000198e:	pop	{r4, r5, r6, r7, pc}
60001990:	.word	0x400d8180
60001994:	.word	0x401f4400
60001998:	.word	0x20006dd4
6000199c:	.word	0x20006dd8
600019a0:	.word	0x20006dd0
600019a4:	.word	0x20008800
600019a8:	.word	0x0fff0000
600019ac:	.word	0xe000e440
600019b0:	.word	0x0000b0f1
600019b4:	.word	0xe000e108
600019b8:	.word	0x20006dcc

600019bc <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019bc:	ldr	r3, [pc, #68]	; (60001a04 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019be:	ldr	r1, [pc, #72]	; (60001a08 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019c0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019c2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019c4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600019c8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600019ca:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019cc:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019d0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019d2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019d4:	orr.w	r0, r0, #768	; 0x300
600019d8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019da:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019dc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019de:	ldr	r3, [r2, #72]	; 0x48
600019e0:	lsls	r3, r3, #24
600019e2:	bmi.n	600019de <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019e4:	ldr	r3, [pc, #36]	; (60001a0c <analog_init+0x50>)
600019e6:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019ea:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019ec:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ee:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019f0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019f2:	ldr	r3, [r2, #72]	; 0x48
600019f4:	ands.w	r3, r3, #128	; 0x80
600019f8:	bne.n	600019f2 <analog_init+0x36>
	calibrating = 0;
600019fa:	ldr	r2, [pc, #20]	; (60001a10 <analog_init+0x54>)
600019fc:	strb	r3, [r2, #0]
}
600019fe:	pop	{r4, r5}
60001a00:	bx	lr
60001a02:	nop
60001a04:	.word	0x400fc000
60001a08:	.word	0x400c4000
60001a0c:	.word	0x400c8000
60001a10:	.word	0x20006e15

60001a14 <usb_string_mtp>:
60001a14:	..M.T.P.

60001a1c <usb_string_product_name_default>:
60001a1c:	..T.e.e.n.s.y. .
60001a2c:	M.T.P. .D.i.s.k.
60001a3c:	/.S.e.r.i.a.l...

60001a4c <usb_string_manufacturer_name_default>:
60001a4c:	..T.e.e.n.s.y.d.
60001a5c:	u.i.n.o.

60001a64 <string0>:
60001a64:	....

60001a68 <usb_config_descriptor_12>:
60001a68:	..i.....2.......
60001a78:	...........$....
60001a88:	$....$...$......
60001a98:	................
60001aa8:	.@......@.......
60001ab8:	........@......@
60001ac8:	............

60001ad4 <usb_config_descriptor_480>:
60001ad4:	..i.....2.......
60001ae4:	...........$....
60001af4:	$....$...$......
60001b04:	................
60001b14:	................
60001b24:	................
60001b34:	............

60001b40 <qualifier_descriptor>:
60001b40:	.......@..

60001b4a <_serialEvent_default>:
60001b4a:	..

60001b4c <_init>:
60001b4c:	push	{r3, r4, r5, r6, r7, lr}
60001b4e:	nop
60001b50:	pop	{r3, r4, r5, r6, r7}
60001b52:	pop	{r3}
60001b54:	mov	lr, r3
60001b56:	bx	lr

60001b58 <__set_arm_clock_veneer>:
60001b58:	ldr.w	pc, [pc]	; 60001b5c <__set_arm_clock_veneer+0x4>
60001b5c:	.word	0x0000b82d

60001b60 <__usb_init_serialnumber_veneer>:
60001b60:	ldr.w	pc, [pc]	; 60001b64 <__usb_init_serialnumber_veneer+0x4>
60001b64:	.word	0x0000b4a5

60001b68 <__pwm_init_veneer>:
60001b68:	ldr.w	pc, [pc]	; 60001b6c <__pwm_init_veneer+0x4>
60001b6c:	.word	0x0000b1ed

60001b70 <__memset_veneer>:
60001b70:	ldr.w	pc, [pc]	; 60001b74 <__memset_veneer+0x4>
60001b74:	.word	0x0000cf7d

60001b78 <__startup_late_hook_veneer>:
60001b78:	ldr.w	pc, [pc]	; 60001b7c <__startup_late_hook_veneer+0x4>
60001b7c:	.word	0x0000af4d

60001b80 <__delay_veneer>:
60001b80:	ldr.w	pc, [pc]	; 60001b84 <__delay_veneer+0x4>
60001b84:	.word	0x0000ae01

60001b88 <____libc_init_array_veneer>:
60001b88:	ldr.w	pc, [pc]	; 60001b8c <____libc_init_array_veneer+0x4>
60001b8c:	.word	0x0000c79d

60001b90 <__startup_early_hook_veneer>:
60001b90:	ldr.w	pc, [pc]	; 60001b94 <__startup_early_hook_veneer+0x4>
60001b94:	.word	0x0000af49

60001b98 <__sm_set_pool_veneer>:
60001b98:	ldr.w	pc, [pc]	; 60001b9c <__sm_set_pool_veneer+0x4>
60001b9c:	.word	0x0000b061

60001ba0 <__main_veneer>:
60001ba0:	ldr.w	pc, [pc]	; 60001ba4 <__main_veneer+0x4>
60001ba4:	.word	0x0000b811

60001ba8 <__init_array_start>:
60001ba8:	.word	0x00000045
60001bac:	.word	0x00000bf9
60001bb0:	.word	0x00003dcd

60001bb4 <__init_array_end>:
60001bb4:	.word	0xffffffff
60001bb8:	.word	0xffffffff
60001bbc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r3, #24
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	lsrs	r4, r2, #3
      42:	.short	0x0001

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	.word	0xf3af4808
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r3, #24
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	lsrs	r4, r2, #3
  ADC2_CFG = mode1;
      72:	.short	0x0001
  
  if(num >= 4){
      74:	asrs	r0, r3, #24
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      7c:	movs	r0, #0
      7e:	bx	lr

00000080 <Print::flush()>:
	virtual void flush()				{ }
      80:	bx	lr
      82:	nop

00000084 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
      84:	mov.w	r0, #4294967295
      88:	.word	0xbf004770

0000008c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
      8c:	ldr	r0, [r0, #16]
      8e:	.short	0xb110
      90:	ldr	r3, [r0, #0]
      92:	.short	0x6a9b
      94:	bx	r3
	}
      96:	.short	0x4770

00000098 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
      98:	ldr	r0, [r0, #16]
      9a:	.short	0xb110
      9c:	ldr	r3, [r0, #0]
      9e:	ldr	r3, [r3, #44]	; 0x2c
      a0:	.word	0x47704718

000000a4 <File::available()>:
	}
	virtual int available() {
		return (f) ? f->available() : 0;
      a4:	ldr	r0, [r0, #16]
      a6:	cbz	r0, ae <File::available()+0xa>
      a8:	ldr	r3, [r0, #0]
      aa:	ldr	r3, [r3, #16]
      ac:	bx	r3
	}
      ae:	bx	lr

000000b0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
      b0:	.word	0xb1106900
      b4:	ldr	r3, [r0, #0]
      b6:	ldr	r3, [r3, #24]
      b8:	.word	0xf04f4718
	}
      bc:	adds	r0, #255	; 0xff
      be:	bx	lr

000000c0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
      c0:	ldr	r0, [r0, #16]
      c2:	cbz	r0, ca <File::flush()+0xa>
      c4:	ldr	r3, [r0, #0]
      c6:	ldr	r3, [r3, #12]
      c8:	bx	r3
      ca:	bx	lr

000000cc <File::seek(unsigned long, int)>:
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
      cc:	.word	0xb1106900
      d0:	ldr	r3, [r0, #0]
      d2:	.short	0x6b1b
      d4:	bx	r3
	}
      d6:	.short	0x4770

000000d8 <File::position()>:
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
      d8:	ldr	r0, [r0, #16]
      da:	.short	0xb110
      dc:	ldr	r3, [r0, #0]
      de:	.short	0x6b5b
      e0:	bx	r3
	}
      e2:	.short	0x4770

000000e4 <File::size()>:
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
      e4:	ldr	r0, [r0, #16]
      e6:	cbz	r0, ee <File::size()+0xa>
      e8:	ldr	r3, [r0, #0]
      ea:	ldr	r3, [r3, #56]	; 0x38
      ec:	bx	r3
	}
      ee:	bx	lr

000000f0 <File::close()>:
	virtual void close() {
		if (f) f->close();
      f0:	ldr	r0, [r0, #16]
      f2:	cbz	r0, fa <File::close()+0xa>
      f4:	ldr	r3, [r0, #0]
      f6:	ldr	r3, [r3, #60]	; 0x3c
      f8:	bx	r3
      fa:	bx	lr

000000fc <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
      fc:	.word	0xb1106900
     100:	ldr	r3, [r0, #0]
     102:	ldr	r3, [r3, #64]	; 0x40
     104:	bx	r3
	}
     106:	bx	lr

00000108 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     108:	ldr	r0, [r0, #16]
     10a:	cbz	r0, 112 <File::name()+0xa>
     10c:	ldr	r3, [r0, #0]
     10e:	ldr	r3, [r3, #68]	; 0x44
     110:	bx	r3
	}
     112:	.short	0x4801
     114:	bx	lr
     116:	nop
     118:	lsls	r4, r6, #5
     11a:	movs	r0, #0

0000011c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     11c:	ldr	r0, [r0, #16]
     11e:	cbz	r0, 126 <File::isDirectory()+0xa>
     120:	ldr	r3, [r0, #0]
     122:	ldr	r3, [r3, #72]	; 0x48
     124:	bx	r3
	}
     126:	bx	lr

00000128 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     128:	.word	0x690bb538
     12c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     12e:	cbz	r3, 13c <File::openNextFile(unsigned char)+0x14>
     130:	.word	0x4619681d
     134:	ldr	r3, [r5, #76]	; 0x4c
     136:	.short	0x4798
	}
     138:	mov	r0, r4
     13a:	.short	0xbd38
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     13c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     140:	.word	0x71234a06
     144:	strb	r3, [r4, #12]
     146:	.short	0x60a0
     148:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     14a:	.short	0x690b
     14c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     14e:	cmp	r3, #0
     150:	.word	0x691ad0f2
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     154:	mov	r0, r4
	File(const File &file) {
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
		if (f) f->refcount++;
     156:	.short	0x3201
     158:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     15a:	.short	0xbd38
     15c:	lsls	r4, r6, #1
     15e:	.short	0x2000

00000160 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     160:	ldr	r0, [r0, #16]
     162:	cbz	r0, 16a <File::rewindDirectory()+0xa>
     164:	.word	0x6d1b6803
     168:	bx	r3
     16a:	.short	0x4770

0000016c <File::read()>:
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     16c:	ldr	r0, [r0, #16]
     16e:	cbz	r0, 192 <File::read()+0x26>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     170:	ldr	r3, [r0, #0]
     172:	movs	r2, #1
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     174:	.word	0xb083b500
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     178:	ldr	r3, [r3, #40]	; 0x28
     17a:	.short	0xf10d
     17c:	lsls	r7, r0, #4
     17e:	blx	r3
     180:	.word	0xf89db120
		return b;
     184:	movs	r7, r0
	}
     186:	.short	0xb003
     188:	ldr.w	pc, [sp], #4
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     18c:	mov.w	r0, #4294967295
     190:	.word	0xf04fe7f9
     194:	adds	r0, #255	; 0xff
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     196:	.short	0x4770

00000198 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     198:	push	{r4, lr}
     19a:	.short	0xb082
		return write(&b, 1);
     19c:	ldr	r4, [r0, #0]
     19e:	.short	0x2201
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     1a0:	add	r3, sp, #8
     1a2:	.short	0xf803
     1a4:	adds	r1, r0, #4
		return write(&b, 1);
     1a6:	.short	0x4619
     1a8:	ldr	r3, [r4, #44]	; 0x2c
     1aa:	blx	r3
	}
     1ac:	.word	0xbd10b002

000001b0 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     1b0:	ldr	r3, [r0, #92]	; 0x5c
     1b2:	.short	0xb10b
     1b4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     1b6:	.short	0x4770
     1b8:	ldr	r0, [r0, #96]	; 0x60
     1ba:	.short	0x3000
     1bc:	it	ne
     1be:	.short	0x2001
     1c0:	bx	lr	; unpredictable branch in IT block

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
     1c2:	nopne

000001c4 <__tcf_0>:

  const char *sd_str[]={"sdio","sd1","sd2","sd3","sd4","sd5","sd6"}; // edit to rflect configuration
  const int cs[] = {BUILTIN_SDCARD,34,33,35,36,37,38}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
     1c4:	.word	0xbf004770

000001c8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     1c8:	push	{r4, lr}
     1ca:	.short	0x4604
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     1cc:	ldr	r1, [pc, #24]	; (1e8 <File::whoami()+0x20>)
     1ce:	.short	0x4807
     1d0:	ldr	r3, [r4, #16]
     1d2:	.short	0x4622
     1d4:	bl	b758 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     1d8:	.word	0xb1206920
     1dc:	ldr	r3, [r0, #0]
	}
     1de:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     1e2:	.short	0x6a5b
     1e4:	bx	r3
     1e6:	.short	0xbd10
     1e8:	lsls	r4, r3, #5
     1ea:	.short	0x2000
     1ec:	lsrs	r0, r3, #17
     1ee:	.short	0x2000

000001f0 <SDFile::whoami()>:
	virtual ~SDFile(void) {
		if (sdfatfile) sdfatfile.close();
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
     1f0:	mov	r2, r0
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     1f2:	ldr	r1, [pc, #8]	; (1fc <SDFile::whoami()+0xc>)
     1f4:	.word	0x69134802
     1f8:	b.w	b758 <Print::printf(char const*, ...)>
     1fc:	.word	0x20000178
     200:	lsrs	r0, r3, #17
     202:	.short	0x2000

00000204 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     204:	push	{r4, lr}
     206:	.short	0x4604
		if (filename) {
     208:	ldr	r0, [r0, #100]	; 0x64
     20a:	.short	0xb118
			free(filename);
     20c:	bl	c7fc <free>
			filename = nullptr;
     210:	.word	0x66632300
		}
		sdfatfile.close();
     214:	add.w	r0, r4, #36	; 0x24
	}
     218:	.word	0x4010e8bd
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     21c:	b.w	7ed4 <FsBaseFile::close()>

00000220 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     220:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     224:	movs	r3, #0
     226:	sub	sp, #80	; 0x50
     228:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     22c:	ldr	r7, [pc, #152]	; (2c8 <SDFile::openNextFile(unsigned char)+0xa8>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     22e:	mov	r2, r3
     230:	.word	0x31244605
     234:	add	r0, sp, #16
     236:	.short	0xf88d
     238:	adds	r0, #4
     23a:	.short	0xf88d
     23c:	adds	r0, #12
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     23e:	.short	0x9312
     240:	str	r3, [sp, #76]	; 0x4c
     242:	.short	0x9402
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     244:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     246:	.short	0xf007
     248:	mrc2	11, 4, r9, cr9, cr2, {0}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     24c:	.word	0xd0312b00
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     250:	movs	r0, #104	; 0x68
     252:	.short	0x2600
     254:	bl	b824 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     258:	.word	0x3004f89d
     25c:	mov	r4, r0
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     25e:	.short	0x4a1b
     260:	mov.w	r8, #1000	; 0x3e8
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     264:	.word	0x76233024
     268:	add	r1, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     26a:	.short	0x9b02
     26c:	str	r2, [r4, #0]
     26e:	.short	0x61e3
     270:	ldr	r2, [pc, #92]	; (2d0 <SDFile::openNextFile(unsigned char)+0xb0>)
     272:	.short	0xf89d
     274:	adds	r0, #12
     276:	str	r2, [r4, #20]
     278:	.word	0x3020f884
{
  public:
	constexpr Print() : write_error(0) {}
     27c:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     27e:	.short	0x7326

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     280:	str	r6, [r4, #16]
     282:	.short	0xf8c4
     284:	strh	r0, [r1, #0]
     286:	.short	0xf007
     288:	stc2l	9, cr6, [r3, #140]!	; 0x8c
	File(File *file) {
     28c:	.word	0x33014a11
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     290:	str	r7, [r4, #20]
     292:	.short	0x6666
     294:	strb	r6, [r5, #4]
     296:	.short	0xf8c5
     298:	strh	r0, [r1, #0]
     29a:	.short	0x732e
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     29c:	str	r4, [r5, #16]
		if (f) f->refcount++;
     29e:	.short	0x6123
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     2a0:	str	r2, [r5, #0]
     2a2:	.short	0x4b0d
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     2a4:	add	r0, sp, #16
     2a6:	.short	0x9300
     2a8:	bl	7ed4 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     2ac:	.word	0xb0144628
     2b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     2b4:	ldr	r3, [sp, #76]	; 0x4c
     2b6:	.short	0x2b00
     2b8:	bne.n	250 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     2ba:	.short	0x4a06
     2bc:	strb	r3, [r5, #4]
     2be:	str	r4, [r5, #8]
     2c0:	.word	0x612b732b
     2c4:	str	r2, [r5, #0]
     2c6:	.short	0xe7ec
     2c8:	lsls	r0, r2, #1
     2ca:	.short	0x2000
     2cc:	lsls	r0, r2, #3
     2ce:	.short	0x2000
     2d0:	movs	r0, r1
     2d2:	.short	0x2000
     2d4:	lsls	r4, r6, #1
     2d6:	.short	0x2000
     2d8:	movs	r4, r5
     2da:	.short	0x2000

000002dc <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     2dc:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     2de:	.short	0xb162
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     2e0:	ldrb	r3, [r2, #0]
     2e2:	.short	0xf003
     2e4:	lsls	r0, r1, #12
     2e6:	.short	0xf003
     2e8:	lsls	r7, r7, #3
     2ea:	.short	0xb30b
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     2ec:	ldr	r3, [r2, #28]
     2ee:	.short	0x6950
     2f0:	subs	r0, r3, r0
     2f2:	.short	0xbf48
     2f4:	mvnmi.w	r0, #2147483648	; 0x80000000
     2f8:	bx	lr
     2fa:	ldr	r1, [r0, #76]	; 0x4c
     2fc:	cbz	r1, 332 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     2fe:	ldrb.w	r3, [r1, #49]	; 0x31
     302:	.short	0xf003
     304:	lsls	r0, r1, #12
     306:	.short	0xf003
     308:	lsls	r7, r7, #3
     30a:	cbz	r3, 330 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     30c:	ldrd	r2, r3, [r1, #16]
     310:	.word	0x0100e9d1
     314:	push	{r4, r5}
     316:	.short	0x1a10
     318:	mov.w	r5, #0
     31c:	mvn.w	r4, #2147483648	; 0x80000000
     320:	sbc.w	r1, r3, r1
     324:	cmp	r5, r1
     326:	it	eq
     328:	.word	0xd2004284
     32c:	mov	r0, r4
    return BaseFile::available();
  }
     32e:	popeq	{r4, r5}
     330:	.word	0x46084770
     334:	bx	lr
     336:	.short	0xbf00

00000338 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     338:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     33a:	cbz	r3, 342 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     33c:	mov	r0, r3
     33e:	b.w	6178 <FatFile::peek()>
     342:	ldr	r0, [r0, #76]	; 0x4c
     344:	cbz	r0, 34a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     346:	b.w	4258 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     34a:	mov.w	r0, #4294967295
     34e:	bx	lr

00000350 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     350:	ldr	r3, [r0, #72]	; 0x48
     352:	push	{lr}
     354:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     356:	cbz	r3, 372 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     358:	.word	0x22014618
     35c:	add.w	r1, sp, #7
     360:	.word	0xfe1ef005
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     364:	cmp	r0, #1
     366:	bne.n	382 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     368:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     36c:	add	sp, #12
     36e:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     372:	ldr	r0, [r0, #76]	; 0x4c
     374:	.word	0x2201b128
     378:	add.w	r1, sp, #7
     37c:	bl	4068 <ExFatFile::read(void*, unsigned int)>
     380:	.word	0xf04fe7f0
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     384:	adds	r0, #255	; 0xff
     386:	.short	0xe7f1

00000388 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     388:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     38a:	cbz	r3, 392 <SDFile::flush()+0xa>
     38c:	.word	0xf0064618
     390:	cbnz	r1, 3e2 <SDFile::~SDFile()+0x12>
     392:	ldr	r0, [r0, #96]	; 0x60
     394:	cbz	r0, 39a <SDFile::flush()+0x12>
     396:	b.w	542c <ExFatFile::sync()>
     39a:	.short	0x4770

0000039c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     39c:	push	{lr}
     39e:	ldr	r3, [r0, #72]	; 0x48
     3a0:	sub	sp, #12
     3a2:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     3a6:	cbz	r3, 3ba <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     3a8:	mov	r0, r3
     3aa:	movs	r2, #1
     3ac:	add.w	r1, sp, #7
     3b0:	bl	6a10 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     3b4:	add	sp, #12
     3b6:	ldr.w	pc, [sp], #4
     3ba:	ldr	r0, [r0, #76]	; 0x4c
     3bc:	.word	0xd0f92800
     3c0:	movs	r2, #1
     3c2:	.short	0xf10d
     3c4:	lsls	r7, r0, #4
     3c6:	bl	5928 <ExFatFile::write(void const*, unsigned int)>
     3ca:	add	sp, #12
     3cc:	ldr.w	pc, [sp], #4

000003d0 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     3d0:	push	{r3, r4, r5, lr}
     3d2:	ldr	r2, [pc, #76]	; (420 <SDFile::~SDFile()+0x50>)
     3d4:	mov	r4, r0
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     3d6:	ldr	r3, [r0, #92]	; 0x5c
		if (sdfatfile) sdfatfile.close();
     3d8:	add.w	r5, r0, #36	; 0x24

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     3dc:	str	r2, [r0, #0]
     3de:	cbz	r3, 416 <SDFile::~SDFile()+0x46>
		if (sdfatfile) sdfatfile.close();
     3e0:	mov	r0, r5
     3e2:	bl	7ed4 <FsBaseFile::close()>
		if (filename) free(filename);
     3e6:	ldr	r0, [r4, #100]	; 0x64
     3e8:	cbz	r0, 3ee <SDFile::~SDFile()+0x1e>
     3ea:	bl	c7fc <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     3ee:	.short	0x4b0d
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     3f0:	mov	r0, r5
     3f2:	str	r3, [r4, #20]
     3f4:	.word	0xfd6ef007
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     3f8:	ldr	r3, [pc, #44]	; (428 <SDFile::~SDFile()+0x58>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     3fa:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     3fc:	.word	0xb1426023
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     400:	ldr	r3, [r2, #16]
     402:	.short	0x3b01
     404:	str	r3, [r2, #16]
     406:	cbnz	r3, 412 <SDFile::~SDFile()+0x42>
     408:	ldr	r0, [r4, #16]
     40a:	cbz	r0, 412 <SDFile::~SDFile()+0x42>
     40c:	ldr	r3, [r0, #0]
     40e:	ldr	r3, [r3, #32]
     410:	blx	r3
	}
     412:	.short	0x4620
     414:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     416:	ldr	r3, [r0, #96]	; 0x60
     418:	cmp	r3, #0
     41a:	bne.n	3e0 <SDFile::~SDFile()+0x10>
     41c:	.word	0xbf00e7e3
     420:	lsls	r0, r2, #3
     422:	movs	r0, #0
     424:	movs	r4, r5
     426:	movs	r0, #0
     428:	lsls	r4, r6, #1
     42a:	movs	r0, #0

0000042c <SDClass::remove(char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool remove(const char *filepath) {
     42c:	push	{r4, r5, lr}
     42e:	ldr.w	r4, [r0, #1148]	; 0x47c
     432:	sub	sp, #60	; 0x3c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     434:	cbz	r4, 460 <SDClass::remove(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     436:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     438:	.word	0x4668460a
     43c:	mov	r1, r4
     43e:	movs	r3, #1
     440:	strb.w	r5, [sp]
     444:	strb.w	r5, [sp, #1]
     448:	strb.w	r5, [sp, #2]
     44c:	bl	5f90 <FatFile::open(FatVolume*, char const*, int)>
     450:	.word	0xb00fb908
		return sdfs.remove(filepath);
	}
     454:	pop	{r4, r5, pc}
     456:	mov	r0, sp
     458:	bl	7688 <FatFile::remove()>
     45c:	add	sp, #60	; 0x3c
     45e:	.short	0xbd30
     460:	ldr.w	r0, [r0, #1152]	; 0x480
     464:	.word	0xd0f42800
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     468:	mov	r2, r1
     46a:	movs	r3, #1
     46c:	mov	r1, r0
     46e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     470:	.word	0x4031f88d
     474:	strb.w	r4, [sp, #50]	; 0x32
     478:	strb.w	r4, [sp, #51]	; 0x33
     47c:	bl	48fc <ExFatFile::open(ExFatVolume*, char const*, int)>
     480:	cmp	r0, #0
     482:	.short	0xd0e6
     484:	mov	r0, sp
     486:	.short	0xf004
     488:	cdp2	0, 3, cr11, cr3, cr15, {0}
     48c:	pop	{r4, r5, pc}
     48e:	nop

00000490 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
     490:	.word	0xf8d0b530
     494:	add	r4, pc
     496:	.short	0xb08f
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     498:	cbz	r4, 4c4 <SDClass::rmdir(char const*)+0x34>
     49a:	.short	0x2500
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     49c:	mov	r2, r1
     49e:	.short	0x4668
     4a0:	mov	r1, r4
     4a2:	.short	0x462b
     4a4:	strb.w	r5, [sp]
     4a8:	strb.w	r5, [sp, #1]
     4ac:	strb.w	r5, [sp, #2]
     4b0:	.word	0xfd6ef005
     4b4:	cbnz	r0, 4ba <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     4b6:	.short	0xb00f
     4b8:	pop	{r4, r5, pc}
     4ba:	.short	0x4668
     4bc:	bl	62ac <FatFile::rmdir()>
     4c0:	.word	0xbd30b00f
     4c4:	ldr.w	r0, [r0, #1152]	; 0x480
     4c8:	cmp	r0, #0
     4ca:	beq.n	4b6 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     4cc:	.word	0x4623460a
     4d0:	mov	r1, r0
     4d2:	mov	r0, sp
     4d4:	strb.w	r4, [sp, #49]	; 0x31
     4d8:	.word	0x4032f88d
     4dc:	strb.w	r4, [sp, #51]	; 0x33
     4e0:	.word	0xfa0cf004
     4e4:	cmp	r0, #0
     4e6:	beq.n	4b6 <SDClass::rmdir(char const*)+0x26>
     4e8:	.word	0xf0044668
     4ec:	cdp2	0, 9, cr11, cr9, cr15, {0}
     4f0:	.word	0xbf00bd30

000004f4 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     4f4:	push	{r3, r4, r5, lr}
		if (!filename) {
     4f6:	.short	0x6e44
     4f8:	cbz	r4, 4fe <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     4fa:	mov	r0, r4
     4fc:	pop	{r3, r4, r5, pc}
     4fe:	.short	0x4605
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     500:	mov.w	r0, #256	; 0x100
     504:	bl	c7ec <malloc>
     508:	.word	0x66684601
			if (filename) {
     50c:	cbz	r0, 530 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     50e:	.short	0x6de8
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     510:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     512:	cbz	r0, 520 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     514:	.word	0x7280f44f
     518:	bl	7298 <FatFile::getName(char*, unsigned int)>
     51c:	.word	0xe7ec6e6c
           m_xFile ? m_xFile->getName(name, len) : 0;
     520:	ldr	r0, [r5, #96]	; 0x60
     522:	cbz	r0, 536 <SDFile::name()+0x42>
     524:	.word	0x7280f44f
     528:	bl	3e7c <ExFatFile::getName(char*, unsigned int)>
     52c:	.word	0xe7e46e6c
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     530:	ldr	r4, [pc, #8]	; (53c <SDFile::name()+0x48>)
     532:	str	r4, [r5, #100]	; 0x64
     534:	.word	0x460ce7e1
     538:	b.n	4fa <SDFile::name()+0x6>
     53a:	.short	0xbf00
     53c:	asrs	r4, r6, #24
     53e:	.short	0x2000

00000540 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     540:	push	{r4, r5, lr}
     542:	.short	0xf8d0
     544:	add	r4, pc
     546:	.short	0xb08f
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     548:	cbz	r4, 56a <SDClass::mkdir(char const*)+0x2a>
     54a:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     54c:	mov	r2, r1
     54e:	movs	r3, #1
     550:	add.w	r1, r4, #1088	; 0x440
     554:	mov	r0, sp
     556:	.short	0xf88d
     558:	str	r0, [r0, r0]
     55a:	strb.w	r5, [sp, #1]
     55e:	strb.w	r5, [sp, #2]
     562:	.short	0xf006
     564:	strh.w	fp, [r9, #15]
		return sdfs.mkdir(filepath);
	}
     568:	pop	{r4, r5, pc}
     56a:	.short	0xf8d0
     56c:	lsls	r0, r0, #18
     56e:	cmp	r0, #0
     570:	beq.n	566 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     572:	mov	r2, r1
     574:	movs	r3, #1
     576:	.short	0xf500
     578:	str	r0, [r1, #24]
     57a:	.short	0x4668
     57c:	strb.w	r4, [sp, #49]	; 0x31
     580:	strb.w	r4, [sp, #50]	; 0x32
     584:	strb.w	r4, [sp, #51]	; 0x33
     588:	.word	0xf846f005
     58c:	add	sp, #60	; 0x3c
     58e:	.short	0xbd30

00000590 <SDClass::exists(char const*)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     590:	push	{r4, r5, lr}
     592:	.short	0xf8d0
     594:	add	r4, pc
     596:	.short	0xb08f
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     598:	cbz	r4, 5b8 <SDClass::exists(char const*)+0x28>
     59a:	.short	0x2500
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     59c:	mov	r2, r1
     59e:	.short	0x4668
     5a0:	mov	r1, r4
     5a2:	.short	0x462b
     5a4:	strb.w	r5, [sp]
     5a8:	.word	0x5001f88d
     5ac:	strb.w	r5, [sp, #2]
     5b0:	bl	5f90 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     5b4:	add	sp, #60	; 0x3c
     5b6:	pop	{r4, r5, pc}
     5b8:	ldr.w	r0, [r0, #1152]	; 0x480
     5bc:	cmp	r0, #0
     5be:	.short	0xd0f9
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     5c0:	mov	r2, r1
     5c2:	mov	r3, r4
     5c4:	mov	r1, r0
     5c6:	mov	r0, sp
     5c8:	strb.w	r4, [sp, #49]	; 0x31
     5cc:	strb.w	r4, [sp, #50]	; 0x32
     5d0:	strb.w	r4, [sp, #51]	; 0x33
     5d4:	bl	48fc <ExFatFile::open(ExFatVolume*, char const*, int)>
     5d8:	add	sp, #60	; 0x3c
     5da:	pop	{r4, r5, pc}

000005dc <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     5dc:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     5de:	cbz	r3, 608 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     5e0:	ldrb	r2, [r3, #0]
     5e2:	tst.w	r2, #112	; 0x70
     5e6:	bne.n	5ea <SDFile::rewindDirectory()+0xe>
     5e8:	bx	lr
     5ea:	push	{r4, lr}
     5ec:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     5ee:	movs	r1, #0
     5f0:	mov	r0, r3
     5f2:	bl	61f4 <FatFile::seekSet(unsigned long)>
     5f6:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     5f8:	cbz	r0, 606 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     5fa:	movs	r2, #0
     5fc:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     5fe:	ldmia.w	sp!, {r4, lr}
     602:	b.w	4284 <ExFatFile::seekSet(unsigned long long)>
     606:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     608:	ldr	r0, [r0, #96]	; 0x60
     60a:	cmp	r0, #0
     60c:	beq.n	5e8 <SDFile::rewindDirectory()+0xc>
     60e:	ldrb.w	r3, [r0, #49]	; 0x31
     612:	tst.w	r3, #80	; 0x50
     616:	beq.n	5e8 <SDFile::rewindDirectory()+0xc>
     618:	movs	r2, #0
     61a:	movs	r3, #0
     61c:	b.w	4284 <ExFatFile::seekSet(unsigned long long)>

00000620 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint32_t position() {
     620:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     622:	cbz	r3, 628 <SDFile::position()+0x8>
     624:	ldr	r0, [r3, #20]
     626:	bx	lr
     628:	ldr	r0, [r0, #96]	; 0x60
     62a:	cbz	r0, 62e <SDFile::position()+0xe>
     62c:	ldr	r0, [r0, #0]
		return sdfatfile.curPosition();
	}
     62e:	bx	lr

00000630 <SDFile::size()>:
	virtual uint32_t size() {
     630:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     632:	cbz	r3, 638 <SDFile::size()+0x8>
     634:	ldr	r0, [r3, #28]
     636:	bx	lr
     638:	ldr	r0, [r0, #96]	; 0x60
     63a:	cbz	r0, 63e <SDFile::size()+0xe>
     63c:	ldr	r0, [r0, #16]
		return sdfatfile.size();
	}
     63e:	bx	lr

00000640 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     640:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     642:	cbz	r3, 64a <SDFile::read(void*, unsigned int)+0xa>
     644:	mov	r0, r3
     646:	b.w	5fa0 <FatFile::read(void*, unsigned int)>
     64a:	ldr	r0, [r0, #96]	; 0x60
     64c:	cbz	r0, 652 <SDFile::read(void*, unsigned int)+0x12>
     64e:	b.w	4068 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     652:	mov.w	r0, #4294967295
     656:	bx	lr

00000658 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     658:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     65a:	cbz	r3, 662 <SDFile::peek()+0xa>
     65c:	mov	r0, r3
     65e:	b.w	6178 <FatFile::peek()>
     662:	ldr	r0, [r0, #96]	; 0x60
     664:	cbz	r0, 66a <SDFile::peek()+0x12>
     666:	b.w	4258 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     66a:	mov.w	r0, #4294967295
     66e:	bx	lr

00000670 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     670:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     672:	cbz	r3, 682 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     674:	ldrb	r3, [r3, #0]
     676:	tst.w	r3, #112	; 0x70
     67a:	ite	ne
     67c:	movne	r0, #1
     67e:	moveq	r0, #0
     680:	bx	lr
     682:	ldr	r0, [r0, #96]	; 0x60
     684:	cbz	r0, 694 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     686:	ldrb.w	r3, [r0, #49]	; 0x31
     68a:	tst.w	r3, #80	; 0x50
     68e:	ite	ne
     690:	movne	r0, #1
     692:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     694:	bx	lr
     696:	nop

00000698 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     698:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     69c:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     69e:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     6a0:	movw	r3, #16898	; 0x4202
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     6a4:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     6a6:	it	ne
     6a8:	movne	r3, #0
     6aa:	adds	r1, #4
     6ac:	mov	r0, sp
     6ae:	bl	80a4 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     6b2:	ldr	r3, [sp, #72]	; 0x48
     6b4:	cmp	r3, #0
     6b6:	beq.n	720 <SDClass::open(char const*, unsigned char)+0x88>
		if (file) return File(new SDFile(file));
     6b8:	movs	r0, #104	; 0x68
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     6ba:	add	r7, sp, #16
     6bc:	bl	b824 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     6c0:	ldrb.w	r2, [sp, #4]
     6c4:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     6c6:	ldr	r3, [pc, #116]	; (73c <SDClass::open(char const*, unsigned char)+0xa4>)
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     6c8:	ldr	r1, [pc, #116]	; (740 <SDClass::open(char const*, unsigned char)+0xa8>)
{
  public:
	constexpr Print() : write_error(0) {}
     6ca:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6cc:	mov.w	r8, #1000	; 0x3e8
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     6d0:	strb	r2, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     6d2:	str	r3, [r4, #20]
     6d4:	adds	r0, #36	; 0x24
     6d6:	ldr	r3, [sp, #8]
     6d8:	ldrb.w	r2, [sp, #12]
     6dc:	str	r1, [r4, #0]
     6de:	mov	r1, r7
     6e0:	str	r3, [r4, #28]
     6e2:	strb.w	r2, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
     6e6:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6e8:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     6ea:	str	r6, [r4, #16]
     6ec:	str.w	r8, [r4, #8]
     6f0:	bl	7e50 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     6f4:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6f6:	ldr	r1, [pc, #76]	; (744 <SDClass::open(char const*, unsigned char)+0xac>)
     6f8:	adds	r3, #1
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     6fa:	ldr	r2, [pc, #76]	; (748 <SDClass::open(char const*, unsigned char)+0xb0>)
     6fc:	str	r6, [r4, #100]	; 0x64
     6fe:	strb	r6, [r5, #4]
     700:	str.w	r8, [r5, #8]
     704:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     706:	str	r4, [r5, #16]
     708:	str	r1, [r4, #20]
		if (f) f->refcount++;
     70a:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     70c:	str	r2, [r5, #0]
     70e:	ldr	r3, [pc, #60]	; (74c <SDClass::open(char const*, unsigned char)+0xb4>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     710:	mov	r0, r7
     712:	str	r3, [sp, #0]
     714:	bl	7ed4 <FsBaseFile::close()>
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     718:	mov	r0, r5
     71a:	add	sp, #80	; 0x50
     71c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     720:	ldr	r3, [sp, #76]	; 0x4c
     722:	cmp	r3, #0
     724:	bne.n	6b8 <SDClass::open(char const*, unsigned char)+0x20>
     726:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     72a:	ldr	r2, [pc, #28]	; (748 <SDClass::open(char const*, unsigned char)+0xb0>)
     72c:	strb	r3, [r5, #4]
     72e:	add	r7, sp, #16
     730:	strb	r3, [r5, #12]
     732:	str	r3, [r5, #16]
     734:	str	r1, [r5, #8]
     736:	str	r2, [r5, #0]
     738:	b.n	70e <SDClass::open(char const*, unsigned char)+0x76>
     73a:	nop
     73c:	.word	0x20000008
     740:	.word	0x200000d0
     744:	.word	0x20000050
     748:	.word	0x20000074
     74c:	.word	0x2000002c

00000750 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     750:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     752:	cbz	r3, 75a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     754:	mov	r0, r3
     756:	b.w	6a04 <FatFile::sync()>
     75a:	ldr	r0, [r0, #76]	; 0x4c
     75c:	cbz	r0, 762 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     75e:	b.w	542c <ExFatFile::sync()>
     762:	bx	lr

00000764 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     764:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     766:	cbz	r3, 76e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     768:	mov	r0, r3
     76a:	b.w	6a10 <FatFile::write(void const*, unsigned int)>
     76e:	ldr	r0, [r0, #76]	; 0x4c
     770:	cbz	r0, 776 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     772:	b.w	5928 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     776:	bx	lr

00000778 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     778:	ldr	r3, [r0, #92]	; 0x5c
     77a:	cbz	r3, 782 <SDFile::write(void const*, unsigned int)+0xa>
     77c:	mov	r0, r3
     77e:	b.w	6a10 <FatFile::write(void const*, unsigned int)>
     782:	ldr	r0, [r0, #96]	; 0x60
     784:	cbz	r0, 78a <SDFile::write(void const*, unsigned int)+0x12>
     786:	b.w	5928 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     78a:	bx	lr

0000078c <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     78c:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     78e:	cbz	r2, 7aa <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     790:	ldrb	r3, [r2, #0]
     792:	and.w	r3, r3, #8
     796:	and.w	r0, r3, #255	; 0xff
     79a:	cbz	r3, 7e0 <SDFile::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     79c:	ldr	r3, [r2, #28]
     79e:	ldr	r0, [r2, #20]
     7a0:	subs	r0, r3, r0
     7a2:	it	mi
     7a4:	mvnmi.w	r0, #2147483648	; 0x80000000
     7a8:	bx	lr
     7aa:	ldr	r1, [r0, #96]	; 0x60
     7ac:	cbz	r1, 7e2 <SDFile::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     7ae:	ldrb.w	r3, [r1, #49]	; 0x31
     7b2:	and.w	r3, r3, #8
     7b6:	and.w	r0, r3, #255	; 0xff
     7ba:	cbz	r3, 7e0 <SDFile::available()+0x54>
     7bc:	ldrd	r2, r3, [r1, #16]
     7c0:	ldrd	r0, r1, [r1]
     7c4:	push	{r4, r5}
     7c6:	subs	r0, r2, r0
     7c8:	mov.w	r5, #0
     7cc:	mvn.w	r4, #2147483648	; 0x80000000
     7d0:	sbc.w	r1, r3, r1
     7d4:	cmp	r5, r1
     7d6:	it	eq
     7d8:	cmpeq	r4, r0
     7da:	bcs.n	7de <SDFile::available()+0x52>
     7dc:	mov	r0, r4
		return sdfatfile.available();
	}
     7de:	pop	{r4, r5}
     7e0:	bx	lr
     7e2:	mov	r0, r1
     7e4:	bx	lr
     7e6:	nop

000007e8 <SDFile::seek(unsigned long, int)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool seek(uint32_t pos, int mode = SeekSet) {
     7e8:	push	{r4, r5}
     7ea:	mov	r4, r1
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     7ec:	cbz	r2, 7fc <SDFile::seek(unsigned long, int)+0x14>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     7ee:	cmp	r2, #1
     7f0:	beq.n	828 <SDFile::seek(unsigned long, int)+0x40>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     7f2:	cmp	r2, #2
     7f4:	beq.n	808 <SDFile::seek(unsigned long, int)+0x20>
		return false;
	}
     7f6:	movs	r0, #0
     7f8:	pop	{r4, r5}
     7fa:	bx	lr
     7fc:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     7fe:	cbz	r3, 840 <SDFile::seek(unsigned long, int)+0x58>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     800:	mov	r0, r3
     802:	pop	{r4, r5}
     804:	b.w	61f4 <FatFile::seekSet(unsigned long)>
     808:	ldr	r5, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     80a:	cbz	r5, 84e <SDFile::seek(unsigned long, int)+0x66>
     80c:	ldr	r1, [r5, #28]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     80e:	movs	r3, #0
     810:	adds	r2, r4, r1
     812:	adc.w	r3, r3, #0
     816:	cmp	r3, #1
     818:	it	eq
     81a:	cmpeq	r2, #0
     81c:	bcs.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
     81e:	add	r1, r4
     820:	mov	r0, r5
     822:	pop	{r4, r5}
     824:	b.w	61f4 <FatFile::seekSet(unsigned long)>
     828:	ldr	r5, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     82a:	cbz	r5, 866 <SDFile::seek(unsigned long, int)+0x7e>
     82c:	ldr	r1, [r5, #20]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     82e:	movs	r3, #0
     830:	adds	r2, r1, r4
     832:	adc.w	r3, r3, #0
     836:	cmp	r3, #1
     838:	it	eq
     83a:	cmpeq	r2, #0
     83c:	bcs.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
     83e:	b.n	81e <SDFile::seek(unsigned long, int)+0x36>
           m_xFile ? m_xFile->seekSet(pos) : false;
     840:	ldr	r0, [r0, #96]	; 0x60
     842:	cmp	r0, #0
     844:	beq.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
     846:	mov	r2, r1
     848:	pop	{r4, r5}
     84a:	b.w	4284 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     84e:	ldr	r3, [r0, #96]	; 0x60
     850:	cmp	r3, #0
     852:	beq.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     854:	mov	r0, r3
     856:	ldrd	r2, r3, [r3, #16]
     85a:	pop	{r4, r5}
     85c:	adds	r2, r2, r1
     85e:	adc.w	r3, r3, #0
     862:	b.w	4284 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     866:	ldr	r3, [r0, #96]	; 0x60
     868:	cmp	r3, #0
     86a:	beq.n	7f6 <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     86c:	mov	r0, r3
     86e:	ldrd	r2, r3, [r3]
     872:	pop	{r4, r5}
     874:	adds	r2, r2, r1
     876:	adc.w	r3, r3, #0
     87a:	b.w	4284 <ExFatFile::seekSet(unsigned long long)>
     87e:	nop

00000880 <File::~File()>:
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     880:	ldr	r3, [pc, #32]	; (8a4 <File::~File()+0x24>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     882:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     884:	push	{r4, lr}
     886:	mov	r4, r0
     888:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     88a:	cbz	r2, 89e <File::~File()+0x1e>
     88c:	ldr	r3, [r2, #16]
     88e:	subs	r3, #1
     890:	str	r3, [r2, #16]
     892:	cbnz	r3, 89e <File::~File()+0x1e>
     894:	ldr	r0, [r0, #16]
     896:	cbz	r0, 89e <File::~File()+0x1e>
     898:	ldr	r3, [r0, #0]
     89a:	ldr	r3, [r3, #32]
     89c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     89e:	mov	r0, r4
     8a0:	pop	{r4, pc}
     8a2:	nop
     8a4:	.word	0x20000074

000008a8 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     8a8:	push	{r3, r4, r5, lr}
     8aa:	ldr	r2, [pc, #84]	; (900 <SDFile::~SDFile()+0x58>)
     8ac:	mov	r4, r0
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     8ae:	ldr	r3, [r0, #92]	; 0x5c
		if (sdfatfile) sdfatfile.close();
     8b0:	add.w	r5, r0, #36	; 0x24

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     8b4:	str	r2, [r0, #0]
     8b6:	cbz	r3, 8f6 <SDFile::~SDFile()+0x4e>
		if (sdfatfile) sdfatfile.close();
     8b8:	mov	r0, r5
     8ba:	bl	7ed4 <FsBaseFile::close()>
		if (filename) free(filename);
     8be:	ldr	r0, [r4, #100]	; 0x64
     8c0:	cbz	r0, 8c6 <SDFile::~SDFile()+0x1e>
     8c2:	bl	c7fc <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     8c6:	ldr	r3, [pc, #60]	; (904 <SDFile::~SDFile()+0x5c>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     8c8:	mov	r0, r5
     8ca:	str	r3, [r4, #20]
     8cc:	bl	7ed4 <FsBaseFile::close()>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     8d0:	ldr	r3, [pc, #52]	; (908 <SDFile::~SDFile()+0x60>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     8d2:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     8d4:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     8d6:	cbz	r2, 8ea <SDFile::~SDFile()+0x42>
     8d8:	ldr	r3, [r2, #16]
     8da:	subs	r3, #1
     8dc:	str	r3, [r2, #16]
     8de:	cbnz	r3, 8ea <SDFile::~SDFile()+0x42>
     8e0:	ldr	r0, [r4, #16]
     8e2:	cbz	r0, 8ea <SDFile::~SDFile()+0x42>
     8e4:	ldr	r3, [r0, #0]
     8e6:	ldr	r3, [r3, #32]
     8e8:	blx	r3
	}
     8ea:	mov	r0, r4
     8ec:	movs	r1, #104	; 0x68
     8ee:	bl	b828 <operator delete(void*, unsigned int)>
     8f2:	mov	r0, r4
     8f4:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     8f6:	ldr	r3, [r0, #96]	; 0x60
     8f8:	cmp	r3, #0
     8fa:	bne.n	8b8 <SDFile::~SDFile()+0x10>
     8fc:	b.n	8be <SDFile::~SDFile()+0x16>
     8fe:	nop
     900:	.word	0x200000d0
     904:	.word	0x2000002c
     908:	.word	0x20000074

0000090c <File::~File()>:
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     90c:	ldr	r3, [pc, #40]	; (938 <File::~File()+0x2c>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     90e:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     910:	push	{r4, lr}
     912:	mov	r4, r0
     914:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     916:	cbz	r2, 92a <File::~File()+0x1e>
     918:	ldr	r3, [r2, #16]
     91a:	subs	r3, #1
     91c:	str	r3, [r2, #16]
     91e:	cbnz	r3, 92a <File::~File()+0x1e>
     920:	ldr	r0, [r0, #16]
     922:	cbz	r0, 92a <File::~File()+0x1e>
     924:	ldr	r3, [r0, #0]
     926:	ldr	r3, [r3, #32]
     928:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     92a:	mov	r0, r4
     92c:	movs	r1, #20
     92e:	bl	b828 <operator delete(void*, unsigned int)>
     932:	mov	r0, r4
     934:	pop	{r4, pc}
     936:	nop
     938:	.word	0x20000074

0000093c <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
     93c:	push	{r3, r4, r5, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     93e:	ldr	r2, [r0, #60]	; 0x3c
     940:	mov	r4, r0
     942:	ldr	r3, [pc, #88]	; (99c <MTPStorage_SD::~MTPStorage_SD()+0x60>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     944:	ldr	r5, [pc, #88]	; (9a0 <MTPStorage_SD::~MTPStorage_SD()+0x64>)
     946:	str	r3, [r0, #0]
     948:	str	r5, [r0, #44]	; 0x2c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     94a:	cbz	r2, 954 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     94c:	ldr	r3, [r2, #16]
     94e:	subs	r3, #1
     950:	str	r3, [r2, #16]
     952:	cbz	r3, 97e <MTPStorage_SD::~MTPStorage_SD()+0x42>
     954:	ldr	r2, [r4, #40]	; 0x28
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     956:	str	r5, [r4, #24]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     958:	cbz	r2, 962 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     95a:	ldr	r3, [r2, #16]
     95c:	subs	r3, #1
     95e:	str	r3, [r2, #16]
     960:	cbz	r3, 98c <MTPStorage_SD::~MTPStorage_SD()+0x50>
     962:	ldr	r2, [r4, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     964:	str	r5, [r4, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     966:	cbz	r2, 97a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     968:	ldr	r3, [r2, #16]
     96a:	subs	r3, #1
     96c:	str	r3, [r2, #16]
     96e:	cbnz	r3, 97a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     970:	ldr	r0, [r4, #20]
     972:	cbz	r0, 97a <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     974:	ldr	r3, [r0, #0]
     976:	ldr	r3, [r3, #32]
     978:	blx	r3
     97a:	mov	r0, r4
     97c:	pop	{r3, r4, r5, pc}
     97e:	ldr	r0, [r0, #60]	; 0x3c
     980:	cmp	r0, #0
     982:	beq.n	954 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     984:	ldr	r3, [r0, #0]
     986:	ldr	r3, [r3, #32]
     988:	blx	r3
     98a:	b.n	954 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     98c:	ldr	r0, [r4, #40]	; 0x28
     98e:	cmp	r0, #0
     990:	beq.n	962 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     992:	ldr	r3, [r0, #0]
     994:	ldr	r3, [r3, #32]
     996:	blx	r3
     998:	b.n	962 <MTPStorage_SD::~MTPStorage_SD()+0x26>
     99a:	nop
     99c:	.word	0x200001f4
     9a0:	.word	0x20000074

000009a4 <storage_configure(char const**, int const*, SDClass*, int)>:
    to=millis();
  }
}

void storage_configure(const char **sd_str, const int *cs, SDClass *sdx, int num)
{
     9a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	mov	r9, r2
     9aa:	sub	sp, #68	; 0x44
     9ac:	mov	r5, r0
     9ae:	mov	r7, r1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
     9b0:	ldr	r0, [pc, #404]	; (b48 <storage_configure(char const**, int const*, SDClass*, int)+0x1a4>)
     9b2:	movs	r1, #11
     9b4:	bl	3c88 <SPIClass::setMOSI(unsigned char)>
     9b8:	add.w	r4, r9, #4
      SPI.setMISO(SD_MISO);
     9bc:	movs	r1, #12
     9be:	ldr	r0, [pc, #392]	; (b48 <storage_configure(char const**, int const*, SDClass*, int)+0x1a4>)
     9c0:	add.w	r6, r9, #1176	; 0x498
     9c4:	addw	r9, r9, #1164	; 0x48c
     9c8:	bl	3cf4 <SPIClass::setMISO(unsigned char)>
      SPI.setSCK(SD_SCK);
     9cc:	movs	r1, #13
     9ce:	ldr	r0, [pc, #376]	; (b48 <storage_configure(char const**, int const*, SDClass*, int)+0x1a4>)
     9d0:	subs	r7, #4
     9d2:	bl	3d54 <SPIClass::setSCK(unsigned char)>
    #endif

    storage.setStorageNumbers(sd_str,nsd);

    for(int ii=0; ii<nsd; ii++)
     9d6:	mov.w	r8, #0
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    storage.setStorageNumbers(sd_str,nsd);
     9da:	mov	r1, r5
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
     9dc:	ldr.w	sl, [pc, #380]	; b5c <storage_configure(char const**, int const*, SDClass*, int)+0x1b8>
     9e0:	ldr.w	fp, [pc, #380]	; b60 <storage_configure(char const**, int const*, SDClass*, int)+0x1bc>
     9e4:	mov	r5, r9
     9e6:	movs	r2, #7
     9e8:	ldr	r0, [pc, #352]	; (b4c <storage_configure(char const**, int const*, SDClass*, int)+0x1a8>)
     9ea:	bl	d4c <MTPStorage_SD::setStorageNumbers(char const**, int)>

    for(int ii=0; ii<nsd; ii++)
    { if(cs[ii] == BUILTIN_SDCARD)
     9ee:	ldr.w	r0, [r7, #4]!
     9f2:	cmp	r0, #254	; 0xfe
     9f4:	beq.n	ada <storage_configure(char const**, int const*, SDClass*, int)+0x136>
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("%d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
      }
      else
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
     9f6:	uxtb	r0, r0
     9f8:	movs	r1, #1
     9fa:	bl	b16c <pinMode>
     9fe:	ldrb.w	r9, [r7]
     a02:	mov.w	ip, #0
     a06:	str.w	fp, [sp, #32]
     a0a:	mov.w	r2, r9, lsl #4
     a0e:	strb.w	r9, [sp, #28]
     a12:	strb.w	ip, [sp, #29]
     a16:	add	r3, sp, #28
     a18:	add.w	r1, sl, r2
     a1c:	str.w	ip, [sp, #36]	; 0x24
     a20:	ldr.w	r2, [sl, r2]
     a24:	add.w	lr, sp, #40	; 0x28
     a28:	ldr	r1, [r1, #12]
     a2a:	str	r2, [sp, #20]
     a2c:	str	r1, [sp, #16]
     a2e:	ldmia.w	r3, {r0, r1, r2}
     a32:	stmia.w	lr, {r0, r1, r2}
     a36:	ldr	r2, [sp, #20]
     a38:	add	r3, sp, #52	; 0x34
     a3a:	ldr	r1, [sp, #16]
     a3c:	strb.w	r9, [sp, #40]	; 0x28
     a40:	strb.w	ip, [sp, #41]	; 0x29
     a44:	str.w	ip, [sp, #48]	; 0x30
     a48:	str.w	fp, [sp, #44]	; 0x2c
     a4c:	str.w	r1, [r2, #132]	; 0x84
     a50:	ldmia.w	lr, {r0, r1, r2}
     a54:	stmia.w	r3, {r0, r1, r2}
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
     a58:	mov	r0, r6
     a5a:	ldmia	r3, {r1, r2, r3}
     a5c:	bl	8328 <SdSpiCard::begin(SdSpiConfig)>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
     a60:	str.w	r6, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
     a64:	cbz	r6, a6c <storage_configure(char const**, int const*, SDClass*, int)+0xc8>
     a66:	ldrb.w	r3, [r4, #1195]	; 0x4ab
     a6a:	cbz	r3, a7c <storage_configure(char const**, int const*, SDClass*, int)+0xd8>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     a6c:	movs	r1, #10
     a6e:	ldr	r0, [pc, #224]	; (b50 <storage_configure(char const**, int const*, SDClass*, int)+0x1ac>)
     a70:	bl	a3fc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     a74:	ldr	r0, [pc, #220]	; (b54 <storage_configure(char const**, int const*, SDClass*, int)+0x1b0>)
     a76:	bl	b728 <Print::println()>
     a7a:	b.n	a7a <storage_configure(char const**, int const*, SDClass*, int)+0xd6>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
     a7c:	mov	r1, r6
     a7e:	mov	r0, r4
     a80:	bl	7fdc <FsVolume::begin(BlockDeviceInterface*)>
     a84:	cmp	r0, #0
     a86:	beq.n	a6c <storage_configure(char const**, int const*, SDClass*, int)+0xc8>
     a88:	ldr.w	r0, [r4, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     a8c:	cmp	r0, #0
     a8e:	beq.n	b02 <storage_configure(char const**, int const*, SDClass*, int)+0x15e>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     a90:	ldr	r3, [r0, #28]
     a92:	add.w	r9, r3, #4294967295
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     a96:	bl	6fbc <FatPartition::freeClusterCount()>
     a9a:	ldr.w	r3, [r4, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     a9e:	cmp	r3, #0
     aa0:	beq.n	b1a <storage_configure(char const**, int const*, SDClass*, int)+0x176>
     aa2:	ldrb	r1, [r3, #4]
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SD_SCK_MHZ(33)))) {Serial.println("No storage"); while(1);}
        uint32_t volCount  = sdx[ii].sdfs.clusterCount();
        uint32_t volFree  = sdx[ii].sdfs.freeClusterCount();
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("%d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
     aa4:	ldr	r3, [r7, #0]
     aa6:	mov	r2, r8
     aa8:	str	r1, [sp, #8]
      SPI.setSCK(SD_SCK);
    #endif

    storage.setStorageNumbers(sd_str,nsd);

    for(int ii=0; ii<nsd; ii++)
     aaa:	add.w	r8, r8, #1
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SD_SCK_MHZ(33)))) {Serial.println("No storage"); while(1);}
        uint32_t volCount  = sdx[ii].sdfs.clusterCount();
        uint32_t volFree  = sdx[ii].sdfs.freeClusterCount();
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("%d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
     aae:	str	r0, [sp, #4]
     ab0:	addw	r4, r4, #1204	; 0x4b4
     ab4:	ldr	r1, [pc, #160]	; (b58 <storage_configure(char const**, int const*, SDClass*, int)+0x1b4>)
     ab6:	addw	r6, r6, #1204	; 0x4b4
     aba:	str.w	r9, [sp]
     abe:	addw	r5, r5, #1204	; 0x4b4
     ac2:	ldr	r0, [pc, #144]	; (b54 <storage_configure(char const**, int const*, SDClass*, int)+0x1b0>)
     ac4:	bl	b758 <Print::printf(char const*, ...)>
      }
      delay(100);
     ac8:	movs	r0, #100	; 0x64
     aca:	bl	ae00 <delay>
      SPI.setSCK(SD_SCK);
    #endif

    storage.setStorageNumbers(sd_str,nsd);

    for(int ii=0; ii<nsd; ii++)
     ace:	cmp.w	r8, #7
     ad2:	bne.n	9ee <storage_configure(char const**, int const*, SDClass*, int)+0x4a>
        uint32_t volClust = sdx[ii].sdfs.sectorsPerCluster();
        Serial.printf("%d %d %d %d %d\n",ii,cs[ii],volCount,volFree,volClust);
      }
      delay(100);
    }
}
     ad4:	add	sp, #68	; 0x44
     ad6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     ada:	mov.w	r1, #0
     ade:	mov	r0, r5
     ae0:	bl	9358 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     ae4:	str.w	r5, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
     ae8:	cbz	r5, af2 <storage_configure(char const**, int const*, SDClass*, int)+0x14e>
     aea:	mov	r0, r5
     aec:	bl	8aac <SdioCard::errorCode() const>
     af0:	cbz	r0, b2e <storage_configure(char const**, int const*, SDClass*, int)+0x18a>
     af2:	movs	r1, #10
     af4:	ldr	r0, [pc, #88]	; (b50 <storage_configure(char const**, int const*, SDClass*, int)+0x1ac>)
     af6:	bl	a3fc <usb_serial_write>
     afa:	ldr	r0, [pc, #88]	; (b54 <storage_configure(char const**, int const*, SDClass*, int)+0x1b0>)
     afc:	bl	b728 <Print::println()>
     b00:	b.n	b00 <storage_configure(char const**, int const*, SDClass*, int)+0x15c>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     b02:	ldr.w	r3, [r4, #1148]	; 0x47c
     b06:	cbz	r3, b3e <storage_configure(char const**, int const*, SDClass*, int)+0x19a>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b08:	mov	r0, r3
     b0a:	ldr.w	r9, [r3, #1064]	; 0x428
     b0e:	bl	4ea8 <ExFatPartition::freeClusterCount()>
     b12:	ldr.w	r3, [r4, #1144]	; 0x478
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     b16:	cmp	r3, #0
     b18:	bne.n	aa2 <storage_configure(char const**, int const*, SDClass*, int)+0xfe>
     b1a:	ldr.w	r1, [r4, #1148]	; 0x47c
     b1e:	cmp	r1, #0
     b20:	beq.n	aa4 <storage_configure(char const**, int const*, SDClass*, int)+0x100>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
     b22:	ldrb.w	r1, [r1, #1085]	; 0x43d
     b26:	movs	r3, #1
     b28:	lsl.w	r1, r3, r1
     b2c:	b.n	aa4 <storage_configure(char const**, int const*, SDClass*, int)+0x100>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     b2e:	ldr.w	r1, [r4, #1156]	; 0x484
     b32:	mov	r0, r4
     b34:	bl	7fdc <FsVolume::begin(BlockDeviceInterface*)>
     b38:	cmp	r0, #0
     b3a:	beq.n	af2 <storage_configure(char const**, int const*, SDClass*, int)+0x14e>
     b3c:	b.n	a88 <storage_configure(char const**, int const*, SDClass*, int)+0xe4>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     b3e:	mov	r9, r3
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b40:	mov	r0, r3
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     b42:	mov	r1, r3
     b44:	b.n	aa4 <storage_configure(char const**, int const*, SDClass*, int)+0x100>
     b46:	nop
     b48:	.word	0x20000bd4
     b4c:	.word	0x20003724
     b50:	.word	0x200001a8
     b54:	.word	0x20000c58
     b58:	.word	0x20000198
     b5c:	.word	0x20000510
     b60:	.word	0x01f78a40

00000b64 <setup>:

void setup()
{ 
     b64:	push	{r4, r5, r6, lr}
     b66:	ldr	r1, [pc, #92]	; (bc4 <setup+0x60>)
  while(!Serial && millis()<3000); 
     b68:	movw	r0, #2999	; 0xbb7
     b6c:	ldr	r2, [pc, #88]	; (bc8 <setup+0x64>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b6e:	ldr	r4, [pc, #92]	; (bcc <setup+0x68>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b70:	ldr	r6, [pc, #92]	; (bd0 <setup+0x6c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b72:	ldrb	r3, [r1, #0]
     b74:	cbz	r3, bba <setup+0x56>
     b76:	ldrb	r3, [r4, #0]
     b78:	lsls	r3, r3, #31
     b7a:	bpl.n	bba <setup+0x56>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     b7c:	ldr	r3, [r2, #0]
     b7e:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     b80:	subs	r3, r3, r5
     b82:	cmp	r3, #14
     b84:	bls.n	bba <setup+0x56>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b86:	movs	r1, #8
     b88:	ldr	r0, [pc, #72]	; (bd4 <setup+0x70>)
     b8a:	bl	a3fc <usb_serial_write>
     b8e:	ldr	r0, [pc, #72]	; (bd8 <setup+0x74>)
     b90:	bl	b728 <Print::println()>
  Serial.println("MTP_test");
  
  usb_mtp_configure();
     b94:	bl	9b38 <usb_mtp_configure>
  storage_configure(sd_str,cs, sdx, nsd);
     b98:	movs	r3, #7
     b9a:	ldr	r2, [pc, #64]	; (bdc <setup+0x78>)
     b9c:	ldr	r1, [pc, #64]	; (be0 <setup+0x7c>)
     b9e:	ldr	r0, [pc, #68]	; (be4 <setup+0x80>)
     ba0:	bl	9a4 <storage_configure(char const**, int const*, SDClass*, int)>
     ba4:	movs	r1, #10
     ba6:	ldr	r0, [pc, #64]	; (be8 <setup+0x84>)
     ba8:	bl	a3fc <usb_serial_write>
     bac:	ldr	r0, [pc, #40]	; (bd8 <setup+0x74>)
     bae:	bl	b728 <Print::println()>

  Serial.println("Setup done");
  Serial.flush();
}
     bb2:	ldmia.w	sp!, {r4, r5, r6, lr}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     bb6:	b.w	a460 <usb_serial_flush_output>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     bba:	ldr	r3, [r2, #0]
    }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
     bbc:	cmp	r3, r0
     bbe:	bls.n	b72 <setup+0xe>
     bc0:	b.n	b86 <setup+0x22>
     bc2:	nop
     bc4:	.word	0x20006db8
     bc8:	.word	0x20006dc4
     bcc:	.word	0x20006ce8
     bd0:	.word	0x20006e54
     bd4:	.word	0x200001b4
     bd8:	.word	0x20000c58
     bdc:	.word	0x20001638
     be0:	.word	0x20000140
     be4:	.word	0x20000bb4
     be8:	.word	0x200001c0

00000bec <loop>:
  Serial.flush();
}

void loop()
{ 
  mtpd.loop();
     bec:	ldr	r0, [pc, #4]	; (bf4 <loop+0x8>)
     bee:	b.w	3134 <MTPD::loop()>
     bf2:	nop
     bf4:	.word	0x200037a0

00000bf8 <_GLOBAL__sub_I_sd_str>:

  //logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
     bf8:	push	{r3, r4, r5, r6, r7, lr}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
     bfa:	movs	r2, #0
     bfc:	ldr	r3, [pc, #180]	; (cb4 <_GLOBAL__sub_I_sd_str+0xbc>)
     bfe:	ldr.w	ip, [pc, #228]	; ce4 <_GLOBAL__sub_I_sd_str+0xec>
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     c02:	mov.w	lr, #7
     c06:	ldr	r7, [pc, #176]	; (cb8 <_GLOBAL__sub_I_sd_str+0xc0>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
     c08:	movs	r6, #40	; 0x28
     c0a:	ldr	r5, [pc, #176]	; (cbc <_GLOBAL__sub_I_sd_str+0xc4>)
     c0c:	ldr	r0, [pc, #176]	; (cc0 <_GLOBAL__sub_I_sd_str+0xc8>)
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     c0e:	ldr	r1, [pc, #180]	; (cc4 <_GLOBAL__sub_I_sd_str+0xcc>)
     c10:	str.w	r2, [r3, #1148]	; 0x47c
     c14:	movs	r4, #0
     c16:	str.w	r2, [r3, #1152]	; 0x480
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     c1a:	str.w	r7, [r3, #1164]	; 0x48c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
     c1e:	strb.w	r2, [r3, #1172]	; 0x494
     c22:	str.w	r5, [r3, #1176]	; 0x498
     c26:	str.w	r1, [r3, #1184]	; 0x4a0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     c2a:	str.w	lr, [r3, #1188]	; 0x4a4
     c2e:	strb.w	r6, [r3, #1199]	; 0x4af
     c32:	strb.w	r2, [r3, #1202]	; 0x4b2


class SDClass : public FS
{
public:
	SDClass() { }
     c36:	str.w	ip, [r3]

  const char *sd_str[]={"sdio","sd1","sd2","sd3","sd4","sd5","sd6"}; // edit to rflect configuration
  const int cs[] = {BUILTIN_SDCARD,34,33,35,36,37,38}; // edit to reflect your configuration
  const int nsd = sizeof(cs)/sizeof(int);

SDClass sdx[nsd];
     c3a:	addw	r3, r3, #1204	; 0x4b4
     c3e:	cmp	r3, r0
     c40:	bne.n	c10 <_GLOBAL__sub_I_sd_str+0x18>
     c42:	ldr	r2, [pc, #132]	; (cc8 <_GLOBAL__sub_I_sd_str+0xd0>)
     c44:	mov	r0, r4
     c46:	ldr	r1, [pc, #132]	; (ccc <_GLOBAL__sub_I_sd_str+0xd4>)
     c48:	mov.w	r6, #1000	; 0x3e8
     c4c:	bl	bb40 <__aeabi_atexit>
     c50:	ldr	r5, [pc, #124]	; (cd0 <_GLOBAL__sub_I_sd_str+0xd8>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     c52:	ldr	r3, [pc, #128]	; (cd4 <_GLOBAL__sub_I_sd_str+0xdc>)
     c54:	mvn.w	r7, #1
     c58:	ldr	r1, [pc, #124]	; (cd8 <_GLOBAL__sub_I_sd_str+0xe0>)

MTPStorage_SD storage;
     c5a:	mov	r0, r5
     c5c:	ldr	r2, [pc, #104]	; (cc8 <_GLOBAL__sub_I_sd_str+0xd0>)
     c5e:	str	r1, [r5, #0]
     c60:	str	r3, [r5, #4]
     c62:	ldr	r1, [pc, #120]	; (cdc <_GLOBAL__sub_I_sd_str+0xe4>)
     c64:	str	r3, [r5, #24]
     c66:	str	r3, [r5, #44]	; 0x2c
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     c68:	strb	r4, [r5, #8]
     c6a:	strb	r4, [r5, #16]
     c6c:	str	r4, [r5, #20]
     c6e:	strb	r4, [r5, #28]
     c70:	strb.w	r4, [r5, #36]	; 0x24
     c74:	str	r4, [r5, #40]	; 0x28
     c76:	strb.w	r4, [r5, #48]	; 0x30
     c7a:	strb.w	r4, [r5, #56]	; 0x38
     c7e:	str	r4, [r5, #60]	; 0x3c
     c80:	str	r6, [r5, #12]
     c82:	str	r6, [r5, #32]
     c84:	str	r6, [r5, #52]	; 0x34
     c86:	str	r4, [r5, #68]	; 0x44
     c88:	str	r4, [r5, #72]	; 0x48
     c8a:	str	r4, [r5, #80]	; 0x50
     c8c:	strb.w	r4, [r5, #84]	; 0x54
     c90:	strb.w	r4, [r5, #85]	; 0x55
     c94:	str	r7, [r5, #76]	; 0x4c
     c96:	bl	bb40 <__aeabi_atexit>
#define MTP_NAME  "Teensy"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
     c9a:	ldr	r3, [pc, #68]	; (ce0 <_GLOBAL__sub_I_sd_str+0xe8>)
     c9c:	movw	r0, #9248	; 0x2420
     ca0:	movw	r1, #9252	; 0x2424
     ca4:	movw	r2, #9256	; 0x2428
     ca8:	str	r5, [r3, #0]
     caa:	str	r4, [r3, r0]
     cac:	strb	r4, [r3, r1]
     cae:	str	r4, [r3, r2]
     cb0:	pop	{r3, r4, r5, r6, r7, pc}
     cb2:	nop
     cb4:	.word	0x20001638
     cb8:	.word	0x200004c0
     cbc:	.word	0x20000468
     cc0:	.word	0x20003724
     cc4:	.word	0x003d0900
     cc8:	.word	0x20000bb0
     ccc:	.word	0x000001c5
     cd0:	.word	0x20003724
     cd4:	.word	0x20000074
     cd8:	.word	0x200001f4
     cdc:	.word	0x0000093d
     ce0:	.word	0x200037a0
     ce4:	.word	0x2000012c

00000ce8 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t storage) { return false; }
     ce8:	movs	r0, #0
     cea:	bx	lr

00000cec <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t storage) { return true; }
     cec:	movs	r0, #1
     cee:	bx	lr

00000cf0 <MTPStorage_SD::clusterCount(unsigned long)>:
    uint32_t MTPStorage_SD::clusterCount(uint32_t storage) { return SD.sdfs.clusterCount(); }
    uint32_t MTPStorage_SD::freeClusters(uint32_t storage) { return SD.sdfs.freeClusterCount(); }
    uint32_t MTPStorage_SD::clusterSize(uint32_t storage) { return SD.sdfs.sectorsPerCluster(); }
  #else
  */
    uint32_t MTPStorage_SD::clusterCount(uint32_t storage) { return sdx[storage-1].sdfs.clusterCount(); }
     cf0:	subs	r3, r1, #1
     cf2:	ldr	r2, [pc, #36]	; (d18 <MTPStorage_SD::clusterCount(unsigned long)+0x28>)
     cf4:	movw	r1, #1204	; 0x4b4
     cf8:	mla	r1, r1, r3, r2
     cfc:	adds	r1, #4
     cfe:	ldr.w	r3, [r1, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     d02:	cbz	r3, d0a <MTPStorage_SD::clusterCount(unsigned long)+0x1a>
     d04:	ldr	r0, [r3, #28]
     d06:	subs	r0, #1
     d08:	bx	lr
     d0a:	ldr.w	r0, [r1, #1148]	; 0x47c
     d0e:	cbz	r0, d14 <MTPStorage_SD::clusterCount(unsigned long)+0x24>
     d10:	ldr.w	r0, [r0, #1064]	; 0x428
     d14:	bx	lr
     d16:	nop
     d18:	.word	0x20001638

00000d1c <MTPStorage_SD::clusterSize(unsigned long)>:
    uint32_t MTPStorage_SD::freeClusters(uint32_t storage) { return sdx[storage-1].sdfs.freeClusterCount(); }
    uint32_t MTPStorage_SD::clusterSize(uint32_t storage)  { return sdx[storage-1].sdfs.sectorsPerCluster(); }
     d1c:	subs	r3, r1, #1
     d1e:	ldr	r2, [pc, #40]	; (d48 <MTPStorage_SD::clusterSize(unsigned long)+0x2c>)
     d20:	movw	r1, #1204	; 0x4b4
     d24:	mla	r1, r1, r3, r2
     d28:	adds	r1, #4
     d2a:	ldr.w	r3, [r1, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     d2e:	cbz	r3, d34 <MTPStorage_SD::clusterSize(unsigned long)+0x18>
     d30:	ldrb	r0, [r3, #4]
     d32:	bx	lr
     d34:	ldr.w	r0, [r1, #1148]	; 0x47c
     d38:	cbz	r0, d44 <MTPStorage_SD::clusterSize(unsigned long)+0x28>
     d3a:	ldrb.w	r0, [r0, #1085]	; 0x43d
     d3e:	movs	r3, #1
     d40:	lsl.w	r0, r3, r0
     d44:	bx	lr
     d46:	nop
     d48:	.word	0x20001638

00000d4c <MTPStorage_SD::setStorageNumbers(char const**, int)>:

    GenerateIndex(storage);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(storage,i);
  }

  void  MTPStorage_SD::setStorageNumbers(const char **str, int num) {sd_str = str; num_storage=num;}
     d4c:	str	r1, [r0, #68]	; 0x44
     d4e:	str	r2, [r0, #64]	; 0x40
     d50:	bx	lr
     d52:	nop

00000d54 <MTPStorage_SD::getNumStorage()>:
  uint32_t MTPStorage_SD::getNumStorage() {return num_storage;}
     d54:	ldr	r0, [r0, #64]	; 0x40
     d56:	bx	lr

00000d58 <MTPStorage_SD::getStorageName(unsigned long)>:
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}
     d58:	mvn.w	r3, #3221225472	; 0xc0000000
     d5c:	ldr	r2, [r0, #68]	; 0x44
     d5e:	add	r3, r1
     d60:	ldr.w	r0, [r2, r3, lsl #2]
     d64:	bx	lr
     d66:	nop

00000d68 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     d68:	ldr	r0, [r0, #40]	; 0x28
     d6a:	cbz	r0, d72 <MTPStorage_SD::write(char const*, unsigned long)+0xa>
     d6c:	ldr	r3, [r0, #0]
     d6e:	ldr	r3, [r3, #44]	; 0x2c
     d70:	bx	r3
     d72:	bx	lr

00000d74 <MTPStorage_SD::freeClusters(unsigned long)>:
    uint32_t MTPStorage_SD::freeClusters(uint32_t storage) { return SD.sdfs.freeClusterCount(); }
    uint32_t MTPStorage_SD::clusterSize(uint32_t storage) { return SD.sdfs.sectorsPerCluster(); }
  #else
  */
    uint32_t MTPStorage_SD::clusterCount(uint32_t storage) { return sdx[storage-1].sdfs.clusterCount(); }
    uint32_t MTPStorage_SD::freeClusters(uint32_t storage) { return sdx[storage-1].sdfs.freeClusterCount(); }
     d74:	subs	r3, r1, #1
     d76:	ldr	r2, [pc, #32]	; (d98 <MTPStorage_SD::freeClusters(unsigned long)+0x24>)
     d78:	movw	r1, #1204	; 0x4b4
     d7c:	mla	r1, r1, r3, r2
     d80:	adds	r1, #4
     d82:	ldr.w	r0, [r1, #1144]	; 0x478
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     d86:	cbz	r0, d8c <MTPStorage_SD::freeClusters(unsigned long)+0x18>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     d88:	b.w	6fbc <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     d8c:	ldr.w	r0, [r1, #1148]	; 0x47c
     d90:	cbz	r0, d96 <MTPStorage_SD::freeClusters(unsigned long)+0x22>
     d92:	b.w	4ea8 <ExFatPartition::freeClusterCount()>
     d96:	bx	lr
     d98:	.word	0x20001638

00000d9c <MTPStorage_SD::CloseIndex()>:
    uint32_t MTPStorage_SD::clusterSize(uint32_t storage)  { return sdx[storage-1].sdfs.sectorsPerCluster(); }
//  #endif
//#endif

  void MTPStorage_SD::CloseIndex()
  {
     d9c:	push	{r4, lr}
     d9e:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     da0:	ldr	r0, [r0, #20]
     da2:	cbz	r0, db6 <MTPStorage_SD::CloseIndex()+0x1a>
     da4:	ldr	r3, [r0, #0]
     da6:	ldr	r3, [r3, #64]	; 0x40
     da8:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
     daa:	cbz	r0, db6 <MTPStorage_SD::CloseIndex()+0x1a>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     dac:	ldr	r0, [r4, #20]
     dae:	cbz	r0, db6 <MTPStorage_SD::CloseIndex()+0x1a>
     db0:	ldr	r3, [r0, #0]
     db2:	ldr	r3, [r3, #60]	; 0x3c
     db4:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
     db6:	movs	r3, #0
     db8:	strb.w	r3, [r4, #84]	; 0x54
    index_entries_ = 0;
     dbc:	str	r3, [r4, #80]	; 0x50
     dbe:	pop	{r4, pc}

00000dc0 <MTPStorage_SD::OpenIndex()>:
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
     dc0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     dc4:	mov	r5, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     dc6:	ldr	r0, [r0, #20]
     dc8:	sub	sp, #80	; 0x50
     dca:	cbz	r0, dda <MTPStorage_SD::OpenIndex()+0x1a>
     dcc:	ldr	r3, [r0, #0]
     dce:	ldr	r3, [r3, #64]	; 0x40
     dd0:	blx	r3
     dd2:	cbz	r0, dda <MTPStorage_SD::OpenIndex()+0x1a>
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE);
    mtp_lock_storage(false);
  }
     dd4:	add	sp, #80	; 0x50
     dd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     dda:	movw	r3, #16898	; 0x4202
     dde:	ldr	r2, [pc, #164]	; (e84 <MTPStorage_SD::OpenIndex()+0xc4>)
     de0:	ldr	r1, [pc, #164]	; (e88 <MTPStorage_SD::OpenIndex()+0xc8>)
     de2:	mov	r0, sp
     de4:	bl	80a4 <FsVolume::open(char const*, int)>
     de8:	ldr	r3, [sp, #72]	; 0x48
     dea:	cmp	r3, #0
     dec:	beq.n	e76 <MTPStorage_SD::OpenIndex()+0xb6>
		if (file) return File(new SDFile(file));
     dee:	movs	r0, #104	; 0x68
     df0:	add.w	r8, sp, #16
     df4:	bl	b824 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     df8:	ldrb.w	r2, [sp, #4]
     dfc:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     dfe:	ldr	r3, [pc, #140]	; (e8c <MTPStorage_SD::OpenIndex()+0xcc>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e00:	mov.w	r1, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     e04:	movs	r7, #0
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     e06:	ldr	r6, [pc, #136]	; (e90 <MTPStorage_SD::OpenIndex()+0xd0>)
     e08:	adds	r0, #36	; 0x24
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     e0a:	strb	r2, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e0c:	str	r3, [r4, #20]
     e0e:	ldrb.w	r2, [sp, #12]
     e12:	ldr	r3, [sp, #8]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e14:	str	r1, [r4, #8]
     e16:	mov	r1, r8
     e18:	str	r6, [r4, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     e1a:	mov	r6, r4
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e1c:	str	r3, [r4, #28]
     e1e:	strb.w	r2, [r4, #32]
{
  public:
	constexpr Print() : write_error(0) {}
     e22:	strb	r7, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e24:	strb	r7, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     e26:	str	r7, [r4, #16]
     e28:	bl	7e50 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     e2c:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     e2e:	ldr	r2, [pc, #100]	; (e94 <MTPStorage_SD::OpenIndex()+0xd4>)
     e30:	adds	r3, #1
     e32:	str	r7, [r4, #100]	; 0x64
     e34:	str	r2, [r4, #20]
     e36:	str	r3, [r4, #16]
     e38:	ldr	r3, [pc, #92]	; (e98 <MTPStorage_SD::OpenIndex()+0xd8>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     e3a:	mov	r0, r8
     e3c:	str	r3, [sp, #0]
     e3e:	bl	7ed4 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e42:	ldr	r2, [r5, #20]
     e44:	cbz	r2, e4e <MTPStorage_SD::OpenIndex()+0x8e>
     e46:	ldr	r3, [r2, #16]
     e48:	subs	r3, #1
     e4a:	str	r3, [r2, #16]
     e4c:	cbz	r3, e68 <MTPStorage_SD::OpenIndex()+0xa8>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
     e4e:	str	r6, [r5, #20]
		if (f) f->refcount++;
     e50:	cmp	r6, #0
     e52:	beq.n	dd4 <MTPStorage_SD::OpenIndex()+0x14>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e54:	ldr	r3, [r6, #16]
     e56:	cmp	r3, #0
     e58:	bne.n	dd4 <MTPStorage_SD::OpenIndex()+0x14>
     e5a:	ldr	r3, [r6, #0]
     e5c:	mov	r0, r6
     e5e:	ldr	r3, [r3, #32]
     e60:	blx	r3
     e62:	add	sp, #80	; 0x50
     e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e68:	ldr	r0, [r5, #20]
     e6a:	cmp	r0, #0
     e6c:	beq.n	e4e <MTPStorage_SD::OpenIndex()+0x8e>
     e6e:	ldr	r3, [r0, #0]
     e70:	ldr	r3, [r3, #32]
     e72:	blx	r3
     e74:	b.n	e4e <MTPStorage_SD::OpenIndex()+0x8e>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     e76:	ldr	r6, [sp, #76]	; 0x4c
     e78:	cmp	r6, #0
     e7a:	bne.n	dee <MTPStorage_SD::OpenIndex()+0x2e>
     e7c:	add.w	r8, sp, #16
     e80:	b.n	e38 <MTPStorage_SD::OpenIndex()+0x78>
     e82:	nop
     e84:	.word	0x20000248
     e88:	.word	0x2000163c
     e8c:	.word	0x20000008
     e90:	.word	0x200000d0
     e94:	.word	0x20000050
     e98:	.word	0x2000002c

00000e9c <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     e9c:	ldr	r3, [r0, #20]
     e9e:	cbz	r3, ecc <MTPStorage_SD::ResetIndex()+0x30>
     ea0:	ldr	r2, [r3, #0]

  void MTPStorage_SD::ResetIndex() {
     ea2:	push	{r4, lr}
     ea4:	mov	r4, r0
     ea6:	mov	r0, r3
     ea8:	ldr	r3, [r2, #64]	; 0x40
     eaa:	blx	r3
    if(!sd_isOpen(index_)) return;
     eac:	cbnz	r0, eb0 <MTPStorage_SD::ResetIndex()+0x14>
     eae:	pop	{r4, pc}
    
    CloseIndex();
     eb0:	ldr	r3, [r4, #0]
     eb2:	mov	r0, r4
     eb4:	ldr	r3, [r3, #68]	; 0x44
     eb6:	blx	r3
    OpenIndex();
     eb8:	mov	r0, r4
     eba:	bl	dc0 <MTPStorage_SD::OpenIndex()>

    all_scanned_ = false;
     ebe:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
     ec0:	mvn.w	r3, #1
    if(!sd_isOpen(index_)) return;
    
    CloseIndex();
    OpenIndex();

    all_scanned_ = false;
     ec4:	strb.w	r2, [r4, #85]	; 0x55
    open_file_ = 0xFFFFFFFEUL;
     ec8:	str	r3, [r4, #76]	; 0x4c
     eca:	pop	{r4, pc}
     ecc:	bx	lr
     ece:	nop

00000ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
     ed0:	push	{r4, r5, r6, lr}
     ed2:	mov	r5, r0
     ed4:	mov	r4, r1
     ed6:	mov	r6, r2
    OpenIndex();
     ed8:	bl	dc0 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     edc:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
     ede:	add.w	r4, r4, r4, lsl #2
     ee2:	cbz	r0, f00 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
     ee4:	ldr	r3, [r0, #0]
     ee6:	lsls	r1, r4, #4
     ee8:	movs	r2, #0
     eea:	ldr	r3, [r3, #48]	; 0x30
     eec:	blx	r3
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     eee:	ldr	r0, [r5, #20]
     ef0:	cbz	r0, f00 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
     ef2:	ldr	r3, [r0, #0]
     ef4:	mov	r1, r6
     ef6:	movs	r2, #80	; 0x50
     ef8:	ldr	r3, [r3, #44]	; 0x2c
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
     efa:	ldmia.w	sp!, {r4, r5, r6, lr}
     efe:	bx	r3
     f00:	pop	{r4, r5, r6, pc}
     f02:	nop

00000f04 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
     f04:	ldr	r2, [pc, #172]	; (fb4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb0>)
  { if (index_generated) return; 
    index_generated = true;
     f06:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
     f08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f0c:	ldr.w	r4, [r2, #1148]	; 0x47c
     f10:	sub	sp, #84	; 0x54
     f12:	mov	r5, r0
  { if (index_generated) return; 
    index_generated = true;
     f14:	strb.w	r3, [r0, #84]	; 0x54
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     f18:	cmp	r4, #0
     f1a:	beq.n	f8a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x86>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     f1c:	movs	r6, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f1e:	mov	r1, r4
     f20:	mov	r0, sp
     f22:	ldr	r2, [pc, #148]	; (fb8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb4>)
     f24:	strb.w	r6, [sp]
     f28:	strb.w	r6, [sp, #1]
     f2c:	strb.w	r6, [sp, #2]
     f30:	bl	5f90 <FatFile::open(FatVolume*, char const*, int)>
     f34:	cbnz	r0, f82 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x7e>
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
     f36:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f38:	ldr	r3, [r5, #64]	; 0x40
     f3a:	cmp	r3, r1
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
     f3c:	str	r1, [r5, #80]	; 0x50
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f3e:	ble.n	f7c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x78>
     f40:	mov	r7, sp
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
     f42:	mov.w	r9, #1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f46:	mov	r4, r1
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
     f48:	mov	r6, r1
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
     f4a:	mov.w	r8, #47	; 0x2f
     f4e:	b.n	f52 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x4e>
     f50:	ldr	r1, [r5, #80]	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
     f52:	adds	r3, r1, #1
    WriteIndexRecord(new_record, r);
     f54:	mov	r2, r7
     f56:	mov	r0, r5

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
     f58:	strh.w	r4, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
     f5c:	str	r3, [r5, #80]	; 0x50
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
     f5e:	str	r4, [sp, #0]
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f60:	adds	r4, #1
    {
      r.store = ii; // store is typically (storage-1) //store 0...6; storage 1...7
      r.parent = ii;
      r.sibling = 0;
     f62:	str	r6, [sp, #8]
      r.child = 0;
     f64:	str	r6, [sp, #4]
      r.isdir = true;
     f66:	strb.w	r9, [sp, #12]
      r.scanned = false;
     f6a:	strb.w	r6, [sp, #13]
      strcpy(r.name, "/");
     f6e:	strh.w	r8, [sp, #16]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
     f72:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
     f76:	ldr	r3, [r5, #64]	; 0x40
     f78:	cmp	r3, r4
     f7a:	bgt.n	f50 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x4c>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
     f7c:	add	sp, #84	; 0x54
     f7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f82:	mov	r0, sp
     f84:	bl	7688 <FatFile::remove()>
     f88:	b.n	f36 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
     f8a:	ldr.w	r1, [r2, #1152]	; 0x480
     f8e:	cmp	r1, #0
     f90:	beq.n	f36 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f92:	ldr	r2, [pc, #36]	; (fb8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0xb4>)
     f94:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     f96:	strb.w	r4, [sp, #49]	; 0x31
     f9a:	strb.w	r4, [sp, #50]	; 0x32
     f9e:	strb.w	r4, [sp, #51]	; 0x33
     fa2:	bl	48fc <ExFatFile::open(ExFatVolume*, char const*, int)>
     fa6:	cmp	r0, #0
     fa8:	beq.n	f36 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
     faa:	mov	r0, sp
     fac:	bl	50f0 <ExFatFile::remove()>
     fb0:	b.n	f36 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]+0x32>
     fb2:	nop
     fb4:	.word	0x20001638
     fb8:	.word	0x20000248

00000fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
     fbc:	push	{r4, r5, r6, lr}
     fbe:	mov	r5, r1
     fc0:	mov	r4, r2
    Record ret;
    memset(&ret, 0, sizeof(ret));
     fc2:	movs	r1, #0
     fc4:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
     fc6:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
     fc8:	bl	cf7c <memset>
    if (i > index_entries_) 
     fcc:	ldr	r3, [r5, #80]	; 0x50
     fce:	cmp	r3, r4
     fd0:	bcc.n	ffc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
     fd2:	mov	r0, r5
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
     fd4:	add.w	r4, r4, r4, lsl #2
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
     fd8:	bl	dc0 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     fdc:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
     fde:	lsls	r1, r4, #4
     fe0:	cbz	r0, ff8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
     fe2:	ldr	r3, [r0, #0]
     fe4:	movs	r2, #0
     fe6:	ldr	r3, [r3, #48]	; 0x30
     fe8:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     fea:	ldr	r0, [r5, #20]
     fec:	cbz	r0, ff8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
     fee:	ldr	r3, [r0, #0]
     ff0:	movs	r2, #80	; 0x50
     ff2:	mov	r1, r6
     ff4:	ldr	r3, [r3, #40]	; 0x28
     ff6:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
     ff8:	mov	r0, r6
     ffa:	pop	{r4, r5, r6, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
     ffc:	movs	r2, #80	; 0x50
     ffe:	movs	r1, #0
    1000:	mov	r0, r6
    1002:	bl	cf7c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    1006:	mov	r0, r6
    1008:	pop	{r4, r5, r6, pc}
    100a:	nop

0000100c <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    100c:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    100e:	ldr	r5, [r0, #88]	; 0x58
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    1010:	sub	sp, #84	; 0x54
    while (true) 
    { if (next_ == 0) return 0;
    1012:	cbz	r5, 1054 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x48>
    1014:	mov	r4, r0
    1016:	b.n	1026 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    1018:	ldr	r3, [sp, #8]
    101a:	str	r3, [r4, #88]	; 0x58
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    101c:	ldrb.w	r3, [sp, #16]
    1020:	cbnz	r3, 104e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x42>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1022:	ldr	r5, [r4, #88]	; 0x58
    1024:	cbz	r5, 1054 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    1026:	mov	r2, r5
    1028:	mov	r1, r4
    102a:	mov	r0, sp
    102c:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1030:	ldrb.w	r2, [r4, #92]	; 0x5c
    1034:	cmp	r2, #0
    1036:	bne.n	1018 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xc>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1038:	ldr	r3, [r4, #88]	; 0x58
        if (next_ >= index_entries_) next_ = 0;
    103a:	ldr	r1, [r4, #80]	; 0x50
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    103c:	adds	r3, #1
    103e:	str	r3, [r4, #88]	; 0x58
        if (next_ >= index_entries_) next_ = 0;
    1040:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    1042:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    1046:	it	cs
    1048:	strcs	r2, [r4, #88]	; 0x58
      }
      if (r.name[0]) return ret;
    104a:	cmp	r3, #0
    104c:	beq.n	1022 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x16>
    }
  }
    104e:	mov	r0, r5
    1050:	add	sp, #84	; 0x54
    1052:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storage)
  {
    while (true) 
    { if (next_ == 0) return 0;
    1054:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    1056:	mov	r0, r5
    1058:	add	sp, #84	; 0x54
    105a:	pop	{r4, r5, pc}

0000105c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    105c:	push	{r4, r5, r6, r7, lr}
    105e:	sub	sp, #84	; 0x54
    1060:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    1062:	mov	r2, r1
    1064:	mov	r1, r0
    1066:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    1068:	mov	r5, r3
    106a:	ldr	r6, [sp, #104]	; 0x68
    106c:	ldr	r4, [sp, #108]	; 0x6c
    Record r = ReadIndexRecord(handle);
    106e:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    1072:	mov	r0, r7
    1074:	add	r1, sp, #16
    1076:	bl	d464 <strcpy>
    *parent = r.parent;
    107a:	ldr	r2, [sp, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    107c:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    1080:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1082:	cbnz	r3, 1092 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    1084:	ldr	r3, [sp, #4]
    *store = r.store;
    1086:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    108a:	str	r3, [r5, #0]
    *store = r.store;
    108c:	strh	r2, [r4, #0]
  }
    108e:	add	sp, #84	; 0x54
    1090:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1092:	mov.w	r3, #4294967295
    1096:	b.n	1086 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

00001098 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    1098:	push	{lr}
    109a:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    109c:	mov	r2, r1
    109e:	mov	r1, r0
    10a0:	mov	r0, sp
    10a2:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    10a6:	ldr	r0, [sp, #4]
    10a8:	add	sp, #84	; 0x54
    10aa:	ldr.w	pc, [sp], #4
    10ae:	nop

000010b0 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    10b0:	push	{r4, r5, lr}
    10b2:	mov	r4, r0
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    10b4:	ldr	r0, [r0, #40]	; 0x28
    10b6:	sub	sp, #84	; 0x54
    10b8:	cbz	r0, 10ec <MTPStorage_SD::close()+0x3c>
    10ba:	ldr	r3, [r0, #0]
    10bc:	ldr	r3, [r3, #56]	; 0x38
    10be:	blx	r3
    10c0:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
    10c2:	ldr	r0, [r4, #40]	; 0x28
    10c4:	cbz	r0, 10cc <MTPStorage_SD::close()+0x1c>
    10c6:	ldr	r3, [r0, #0]
    10c8:	ldr	r3, [r3, #60]	; 0x3c
    10ca:	blx	r3
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    10cc:	ldr	r2, [r4, #76]	; 0x4c
    10ce:	mov	r1, r4
    10d0:	mov	r0, sp
    10d2:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    10d6:	mov	r2, sp
    10d8:	ldr	r1, [r4, #76]	; 0x4c
    10da:	mov	r0, r4
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    10dc:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    10de:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    10e2:	mvn.w	r3, #1
    10e6:	str	r3, [r4, #76]	; 0x4c
  }
    10e8:	add	sp, #84	; 0x54
    10ea:	pop	{r4, r5, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    10ec:	mov	r5, r0
    10ee:	b.n	10cc <MTPStorage_SD::close()+0x1c>

000010f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    10f0:	push	{r4, r5, r6, r7, lr}
    10f2:	mov	r6, r0
    10f4:	sub	sp, #84	; 0x54
    10f6:	mov	r4, r1
    10f8:	mov	r5, r2
    Record tmp = ReadIndexRecord(i);
    10fa:	mov	r0, sp
    10fc:	mov	r2, r1
    10fe:	mov	r1, r6
    mtp_lock_storage(false);
    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    1100:	mov	r7, r3
    Record tmp = ReadIndexRecord(i);
    1102:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==(unsigned)i) 
    1106:	ldr	r1, [sp, #0]
    1108:	cmp	r4, r1
    110a:	beq.n	1150 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    110c:	mov	r3, r7
    110e:	mov	r2, r5
    1110:	mov	r0, r6
    1112:	bl	10f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    1116:	mov	r0, r5
    1118:	bl	d540 <strlen>
    111c:	adds	r3, r5, r0
    111e:	mov	r4, r0
    1120:	ldrb.w	r3, [r3, #-1]
    1124:	cmp	r3, #47	; 0x2f
    1126:	beq.n	1130 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x40>
    1128:	ldr	r3, [pc, #52]	; (1160 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
    112a:	adds	r4, #1
    112c:	ldrh	r3, [r3, #0]
    112e:	strh	r3, [r5, r0]
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1130:	add	r0, sp, #16
    1132:	bl	d540 <strlen>
    1136:	add	r0, r4
    1138:	adds	r0, #1
    113a:	cmp	r0, r7
    113c:	bcc.n	1146 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x56>
      return tmp.store;
    113e:	ldrh.w	r0, [sp, #14]
    }
  }
    1142:	add	sp, #84	; 0x54
    1144:	pop	{r4, r5, r6, r7, pc}
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1146:	add	r1, sp, #16
    1148:	mov	r0, r5
    114a:	bl	d424 <strcat>
    114e:	b.n	113e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    1150:	ldr	r3, [pc, #12]	; (1160 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x70>)
      return tmp.store;
    1152:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    1156:	ldrh	r3, [r3, #0]
    1158:	strh	r3, [r5, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
      return tmp.store;
    }
  }
    115a:	add	sp, #84	; 0x54
    115c:	pop	{r4, r5, r6, r7, pc}
    115e:	nop
    1160:	.word	0x20000258

00001164 <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    1164:	adds	r2, r1, #1
    1166:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    116a:	mov	r6, r1
    116c:	sub	sp, #496	; 0x1f0
    116e:	mov	r4, r0
    1170:	ite	ne
    1172:	movne	r5, r1
    1174:	moveq	r5, #0
    1176:	b.n	1188 <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    1178:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    117a:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    117c:	cbz	r3, 11a8 <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    117e:	ldr	r3, [r4, #0]
    1180:	ldr	r3, [r3, #64]	; 0x40
    1182:	blx	r3
    1184:	cmp	r0, #0
    1186:	beq.n	1258 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    1188:	mov	r2, r5
    118a:	mov	r1, r4
    118c:	mov	r0, sp
    118e:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1192:	movs	r2, #80	; 0x50
    1194:	mov	r1, sp
    1196:	add.w	r0, sp, r2
    119a:	bl	9c8c <memcpy>
      if (!r.isdir) break;
    119e:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    11a2:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    11a4:	cmp	r3, #0
    11a6:	bne.n	1178 <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    11a8:	adds	r3, r6, #1
    11aa:	beq.n	126e <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    11ac:	mov.w	r3, #256	; 0x100
    11b0:	mov	r1, r6
    11b2:	mov	r0, r4
    11b4:	add	r2, sp, #240	; 0xf0
    11b6:	bl	10f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(0,filename); else  success = sd_remove(0,filename);
    11ba:	ldrb.w	r7, [sp, #92]	; 0x5c
    11be:	ldr	r3, [pc, #296]	; (12e8 <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    11c0:	cmp	r7, #0
    11c2:	beq.n	1276 <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    11c4:	ldr.w	r7, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    11c8:	cbz	r7, 1236 <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    11ca:	add	r5, sp, #160	; 0xa0
    11cc:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    11d0:	add	r2, sp, #240	; 0xf0
    11d2:	mov	r1, r7
    11d4:	mov	r0, r5
    11d6:	mov	r3, lr
    11d8:	strb.w	lr, [r5]
    11dc:	strb.w	lr, [r5, #1]
    11e0:	strb.w	lr, [r5, #2]
    11e4:	bl	5f90 <FatFile::open(FatVolume*, char const*, int)>
    11e8:	cbz	r0, 1258 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    11ea:	mov	r0, r5
    11ec:	bl	62ac <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    11f0:	cbz	r0, 1258 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    11f2:	movs	r3, #0
    int p = r.parent;
    11f4:	ldr.w	r8, [sp, #80]	; 0x50
    WriteIndexRecord(object, r);
    11f8:	add	r2, sp, #80	; 0x50
    11fa:	mov	r1, r6
    11fc:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(0,filename); else  success = sd_remove(0,filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    11fe:	strb.w	r3, [sp, #96]	; 0x60
    int p = r.parent;
    WriteIndexRecord(object, r);
    1202:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    1206:	mov	r2, r8
    1208:	mov	r1, r4
    120a:	mov	r0, r5
    120c:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    1210:	ldr	r7, [r5, #4]
    1212:	cmp	r6, r7
    1214:	beq.n	1260 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    1216:	cbz	r7, 126e <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    1218:	mov	r2, r7
    121a:	mov	r1, r4
    121c:	mov	r0, sp
    121e:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1222:	movs	r2, #80	; 0x50
    1224:	mov	r1, sp
    1226:	mov	r0, r5
    1228:	bl	9c8c <memcpy>
        if (tmp.sibling == object) 
    122c:	ldr	r3, [r5, #8]
    122e:	cmp	r6, r3
    1230:	beq.n	12cc <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    1232:	mov	r7, r3
    1234:	b.n	1216 <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    1236:	ldr.w	r1, [r3, #1152]	; 0x480
    123a:	cbz	r1, 1258 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    123c:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    123e:	add	r2, sp, #240	; 0xf0
    1240:	mov	r3, r7
    1242:	strb.w	r7, [r5, #49]	; 0x31
    1246:	mov	r0, r5
    1248:	strb.w	r7, [r5, #50]	; 0x32
    124c:	strb.w	r7, [r5, #51]	; 0x33
    1250:	bl	48fc <ExFatFile::open(ExFatVolume*, char const*, int)>
    1254:	cmp	r0, #0
    1256:	bne.n	12de <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    1258:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    125a:	add	sp, #496	; 0x1f0
    125c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    1260:	ldr	r3, [sp, #88]	; 0x58
      WriteIndexRecord(p, tmp);
    1262:	mov	r2, r5
    1264:	mov	r1, r8
    1266:	mov	r0, r4
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    1268:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    126a:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    126e:	movs	r0, #1
  }
    1270:	add	sp, #496	; 0x1f0
    1272:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1276:	ldr.w	lr, [r3, #1148]	; 0x47c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    127a:	cmp.w	lr, #0
    127e:	beq.n	12a0 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    1280:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1282:	add	r2, sp, #240	; 0xf0
    1284:	mov	r1, lr
    1286:	movs	r3, #1
    1288:	mov	r0, r5
    128a:	strb	r7, [r5, #0]
    128c:	strb	r7, [r5, #1]
    128e:	strb	r7, [r5, #2]
    1290:	bl	5f90 <FatFile::open(FatVolume*, char const*, int)>
    1294:	cmp	r0, #0
    1296:	beq.n	1258 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1298:	mov	r0, r5
    129a:	bl	7688 <FatFile::remove()>
    129e:	b.n	11f0 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    12a0:	ldr.w	r1, [r3, #1152]	; 0x480
    12a4:	cmp	r1, #0
    12a6:	beq.n	1258 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    12a8:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    12aa:	add	r2, sp, #240	; 0xf0
    12ac:	movs	r3, #1
    12ae:	strb.w	lr, [r5, #49]	; 0x31
    12b2:	mov	r0, r5
    12b4:	strb.w	lr, [r5, #50]	; 0x32
    12b8:	strb.w	lr, [r5, #51]	; 0x33
    12bc:	bl	48fc <ExFatFile::open(ExFatVolume*, char const*, int)>
    12c0:	cmp	r0, #0
    12c2:	beq.n	1258 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    12c4:	mov	r0, r5
    12c6:	bl	50f0 <ExFatFile::remove()>
    12ca:	b.n	11f0 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    12cc:	ldr	r3, [sp, #88]	; 0x58
          WriteIndexRecord(c, tmp);
    12ce:	mov	r0, r4
    12d0:	mov	r2, r5
    12d2:	mov	r1, r7
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    12d4:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    12d6:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    12da:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    12dc:	b.n	125a <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    12de:	mov	r0, r5
    12e0:	bl	5220 <ExFatFile::rmdir()>
    12e4:	b.n	11f0 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    12e6:	nop
    12e8:	.word	0x20001638

000012ec <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    12ec:	push	{r4, r5, r6, lr}
    12ee:	sub.w	sp, sp, #648	; 0x288
    12f2:	mov	r4, r0
    12f4:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    12f6:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    12fa:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    12fc:	add	r2, sp, #136	; 0x88
    12fe:	bl	10f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    1302:	mov	r2, r5
    1304:	mov	r1, r4
    1306:	add	r0, sp, #56	; 0x38
    1308:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    130c:	mov	r1, r6
    130e:	add	r0, sp, #72	; 0x48
    1310:	bl	d464 <strcpy>
    WriteIndexRecord(handle, p1);
    1314:	mov	r0, r4
    1316:	add	r2, sp, #56	; 0x38
    1318:	mov	r1, r5
    131a:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    131e:	mov	r0, r4
    1320:	mov.w	r3, #256	; 0x100
    1324:	mov	r1, r5
    1326:	add	r2, sp, #392	; 0x188
    1328:	bl	10f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    132c:	ldr	r3, [pc, #116]	; (13a4 <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    132e:	ldr.w	r4, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    1332:	cbz	r4, 136a <MTPStorage_SD::rename(unsigned long, char const*)+0x7e>
    1334:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    1336:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    133a:	mov	r0, sp
    133c:	mov	r1, r4
    133e:	mov	r3, r5
    1340:	mov	r2, r5
    1342:	strb.w	r5, [sp]
    1346:	strb.w	r5, [sp, #1]
    134a:	strb.w	r5, [sp, #2]
    134e:	bl	5e84 <FatFile::open(FatFile*, char const*, int)>
    1352:	cbnz	r0, 135a <MTPStorage_SD::rename(unsigned long, char const*)+0x6e>

    sd_rename(0,oldName,newName);
  }
    1354:	add.w	sp, sp, #648	; 0x288
    1358:	pop	{r4, r5, r6, pc}
    135a:	add	r2, sp, #392	; 0x188
    135c:	mov	r1, r4
    135e:	mov	r0, sp
    1360:	bl	67bc <FatFile::rename(FatFile*, char const*)>
    1364:	add.w	sp, sp, #648	; 0x288
    1368:	pop	{r4, r5, r6, pc}
    136a:	ldr.w	r1, [r3, #1152]	; 0x480
    136e:	cmp	r1, #0
    1370:	beq.n	1354 <MTPStorage_SD::rename(unsigned long, char const*)+0x68>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1372:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1376:	mov	r3, r4
    1378:	mov	r2, r4
    137a:	mov	r0, sp
    137c:	mov	r1, r5
    137e:	strb.w	r4, [sp, #49]	; 0x31
    1382:	strb.w	r4, [sp, #50]	; 0x32
    1386:	strb.w	r4, [sp, #51]	; 0x33
    138a:	bl	47e0 <ExFatFile::open(ExFatFile*, char const*, int)>
    138e:	cmp	r0, #0
    1390:	beq.n	1354 <MTPStorage_SD::rename(unsigned long, char const*)+0x68>
    1392:	add	r2, sp, #392	; 0x188
    1394:	mov	r1, r5
    1396:	mov	r0, sp
    1398:	bl	5728 <ExFatFile::rename(ExFatFile*, char const*)>
    139c:	add.w	sp, sp, #648	; 0x288
    13a0:	pop	{r4, r5, r6, pc}
    13a2:	nop
    13a4:	.word	0x20001638

000013a8 <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    13a8:	push	{r4, r5, r6, lr}
    13aa:	sub.w	sp, sp, #728	; 0x2d8
    13ae:	mov	r5, r0
    13b0:	mov	r6, r1
    13b2:	mov	r4, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    13b4:	mov.w	r3, #256	; 0x100
    13b8:	add	r2, sp, #216	; 0xd8
    13ba:	bl	10f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    13be:	mov	r2, r6
    13c0:	mov	r1, r5
    13c2:	add	r0, sp, #56	; 0x38
    13c4:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    13c8:	adds	r3, r4, #1
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    13ca:	mov	r1, r5
    13cc:	add	r0, sp, #136	; 0x88
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    Record p1 = ReadIndexRecord(handle);

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    13ce:	it	eq
    13d0:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    13d2:	mov	r2, r4
    13d4:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    13d8:	ldr	r3, [sp, #140]	; 0x8c
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    13da:	add	r2, sp, #56	; 0x38
    13dc:	mov	r1, r6
    13de:	mov	r0, r5
    Record p1 = ReadIndexRecord(handle);

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    13e0:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;
    13e2:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    13e4:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    13e6:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    13ea:	mov	r1, r4
    13ec:	add	r2, sp, #136	; 0x88
    13ee:	mov	r0, r5
    13f0:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    13f4:	mov.w	r3, #256	; 0x100
    13f8:	mov	r1, r6
    13fa:	mov	r0, r5
    13fc:	add	r2, sp, #472	; 0x1d8
    13fe:	bl	10f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1402:	ldr	r3, [pc, #116]	; (1478 <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    1404:	ldr.w	r4, [r3, #1148]	; 0x47c
    1408:	cbz	r4, 1440 <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    140a:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    140c:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1410:	mov	r0, sp
    1412:	mov	r1, r4
    1414:	mov	r3, r5
    1416:	mov	r2, r5
    1418:	strb.w	r5, [sp]
    141c:	strb.w	r5, [sp, #1]
    1420:	strb.w	r5, [sp, #2]
    1424:	bl	5e84 <FatFile::open(FatFile*, char const*, int)>
    1428:	cbnz	r0, 1430 <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd_rename(0,oldName,newName);
  }
    142a:	add.w	sp, sp, #728	; 0x2d8
    142e:	pop	{r4, r5, r6, pc}
    1430:	add	r2, sp, #472	; 0x1d8
    1432:	mov	r1, r4
    1434:	mov	r0, sp
    1436:	bl	67bc <FatFile::rename(FatFile*, char const*)>
    143a:	add.w	sp, sp, #728	; 0x2d8
    143e:	pop	{r4, r5, r6, pc}
    1440:	ldr.w	r1, [r3, #1152]	; 0x480
    1444:	cmp	r1, #0
    1446:	beq.n	142a <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1448:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    144c:	mov	r3, r4
    144e:	mov	r2, r4
    1450:	mov	r0, sp
    1452:	mov	r1, r5
    1454:	strb.w	r4, [sp, #49]	; 0x31
    1458:	strb.w	r4, [sp, #50]	; 0x32
    145c:	strb.w	r4, [sp, #51]	; 0x33
    1460:	bl	47e0 <ExFatFile::open(ExFatFile*, char const*, int)>
    1464:	cmp	r0, #0
    1466:	beq.n	142a <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    1468:	add	r2, sp, #472	; 0x1d8
    146a:	mov	r1, r5
    146c:	mov	r0, sp
    146e:	bl	5728 <ExFatFile::rename(ExFatFile*, char const*)>
    1472:	add.w	sp, sp, #728	; 0x2d8
    1476:	pop	{r4, r5, r6, pc}
    1478:	.word	0x20001638

0000147c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    147c:	ldr	r3, [r0, #76]	; 0x4c
    147e:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1480:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1484:	sub	sp, #364	; 0x16c
    if (open_file_ == i && mode_ == mode) return;
    1486:	beq.w	15be <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x142>
    148a:	mov	r7, r1
    148c:	mov	r5, r0

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    148e:	movs	r3, #0
    1490:	mov	r8, r2
    1492:	ldr	r0, [pc, #352]	; (15f4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x178>)
    1494:	movs	r2, #10
    1496:	bl	b778 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    149a:	ldr	r0, [pc, #344]	; (15f4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x178>)
    149c:	bl	b728 <Print::println()>
    char filename[256];
    Serial.println(i);
    uint16_t store = ConstructFilename(i, filename, 256);
    14a0:	add	r2, sp, #104	; 0x68
    14a2:	mov.w	r3, #256	; 0x100
    14a6:	mov	r1, r7
    14a8:	mov	r0, r5
    14aa:	bl	10f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    14ae:	mov	r6, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    14b0:	ldr	r0, [r5, #40]	; 0x28
    14b2:	cbz	r0, 14c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x4a>
    14b4:	ldr	r3, [r0, #0]
    14b6:	ldr	r3, [r3, #64]	; 0x40
    14b8:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    14ba:	cbz	r0, 14c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x4a>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    14bc:	ldr	r0, [r5, #40]	; 0x28
    14be:	cbz	r0, 14c6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x4a>
    14c0:	ldr	r3, [r0, #0]
    14c2:	ldr	r3, [r3, #60]	; 0x3c
    14c4:	blx	r3
    file_=sd_open(store,filename,mode);
    14c6:	movw	r4, #1204	; 0x4b4
    14ca:	ldr	r1, [pc, #300]	; (15f8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17c>)
    14cc:	ldr	r2, [pc, #300]	; (15fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x180>)
    14ce:	uxtb.w	r3, r8
    14d2:	mul.w	r0, r4, r6
    14d6:	ldr	r4, [r1, r0]
    14d8:	add	r1, r0
    14da:	ldr	r4, [r4, #0]
    14dc:	cmp	r4, r2
    14de:	bne.n	15cc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x150>
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    14e0:	cmp	r3, #1
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    14e2:	add	r2, sp, #104	; 0x68
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    14e4:	movw	r3, #16898	; 0x4202
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    14e8:	add.w	r1, r1, #4
    14ec:	it	ne
    14ee:	movne	r3, #0
    14f0:	add	r0, sp, #24
    14f2:	bl	80a4 <FsVolume::open(char const*, int)>
    14f6:	ldr	r3, [sp, #96]	; 0x60
    14f8:	cmp	r3, #0
    14fa:	beq.n	15d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15a>
		if (file) return File(new SDFile(file));
    14fc:	movs	r0, #104	; 0x68
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    14fe:	mov.w	r9, #0
    1502:	bl	b824 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1506:	ldrb.w	r2, [sp, #28]
    150a:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    150c:	ldr	r3, [pc, #240]	; (1600 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x184>)
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    150e:	ldr	r1, [pc, #244]	; (1604 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x188>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1510:	mov.w	fp, #1000	; 0x3e8
    1514:	strb	r2, [r4, #24]
    1516:	add.w	sl, sp, #40	; 0x28
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    151a:	ldrb.w	r2, [sp, #36]	; 0x24
    151e:	adds	r0, #36	; 0x24
    1520:	str	r3, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    1522:	add	r6, sp, #4
    1524:	ldr	r3, [sp, #32]
    1526:	str	r1, [r4, #0]
    1528:	mov	r1, sl
    152a:	str	r3, [r4, #28]
    152c:	strb.w	r2, [r4, #32]
    1530:	strb.w	r9, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1534:	strb.w	r9, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1538:	str.w	r9, [r4, #16]
    153c:	str.w	fp, [r4, #8]
    1540:	bl	7e50 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1544:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1546:	ldr	r2, [pc, #192]	; (1608 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    1548:	adds	r3, #1
    154a:	str.w	r9, [r4, #100]	; 0x64
    154e:	str	r2, [r4, #20]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1550:	ldr	r2, [pc, #184]	; (160c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    1552:	str.w	fp, [r6, #8]
    1556:	strb.w	r9, [r6, #4]
    155a:	strb.w	r9, [r6, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    155e:	str	r4, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1560:	str	r2, [r6, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1562:	str	r3, [r4, #16]
    1564:	ldr	r3, [pc, #168]	; (1610 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    1566:	mov	r0, sl
    1568:	str	r3, [sp, #24]
    156a:	bl	7ed4 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    156e:	ldr	r2, [r5, #40]	; 0x28
    1570:	cbz	r2, 157a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xfe>
    1572:	ldr	r3, [r2, #16]
    1574:	subs	r3, #1
    1576:	str	r3, [r2, #16]
    1578:	cbz	r3, 15a2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x126>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    157a:	ldr	r3, [r6, #16]
    157c:	str	r3, [r5, #40]	; 0x28
		if (f) f->refcount++;
    157e:	cbz	r3, 1596 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x11a>
    1580:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    1582:	ldr	r1, [pc, #136]	; (160c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1584:	adds	r2, #1
		return *this;
	}
	virtual ~File() {
    1586:	str	r1, [r6, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    1588:	str	r2, [r3, #16]
    158a:	ldr	r2, [r6, #16]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    158c:	cbz	r2, 1596 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x11a>
    158e:	ldr	r3, [r2, #16]
    1590:	subs	r3, #1
    1592:	str	r3, [r2, #16]
    1594:	cbz	r3, 15b0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x134>
    open_file_ = i;
    1596:	str	r7, [r5, #76]	; 0x4c
    mode_ = mode;
    1598:	str.w	r8, [r5, #72]	; 0x48
    mtp_lock_storage(false);
  }
    159c:	add	sp, #364	; 0x16c
    159e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15a2:	ldr	r0, [r5, #40]	; 0x28
    15a4:	cmp	r0, #0
    15a6:	beq.n	157a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xfe>
    15a8:	ldr	r3, [r0, #0]
    15aa:	ldr	r3, [r3, #32]
    15ac:	blx	r3
    15ae:	b.n	157a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xfe>
    15b0:	ldr	r0, [r6, #16]
    15b2:	cmp	r0, #0
    15b4:	beq.n	1596 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x11a>
    15b6:	ldr	r3, [r0, #0]
    15b8:	ldr	r3, [r3, #32]
    15ba:	blx	r3
    15bc:	b.n	1596 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x11a>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    15be:	ldr	r3, [r0, #72]	; 0x48
    15c0:	cmp	r3, r2
    15c2:	bne.w	148a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    15c6:	add	sp, #364	; 0x16c
    15c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    char filename[256];
    Serial.println(i);
    uint16_t store = ConstructFilename(i, filename, 256);
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    15cc:	add	r6, sp, #4
    15ce:	add	r2, sp, #104	; 0x68
    15d0:	mov	r0, r6
    15d2:	blx	r4
    15d4:	b.n	156e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xf2>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    15d6:	ldr	r3, [sp, #100]	; 0x64
    15d8:	cmp	r3, #0
    15da:	bne.n	14fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x80>
    15dc:	add	r6, sp, #4
    15de:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    15e2:	ldr	r2, [pc, #40]	; (160c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    15e4:	add.w	sl, sp, #40	; 0x28
    15e8:	strb	r3, [r6, #4]
    15ea:	strb	r3, [r6, #12]
    15ec:	str	r3, [r6, #16]
    15ee:	str	r1, [r6, #8]
    15f0:	str	r2, [r6, #0]
    15f2:	b.n	1564 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe8>
    15f4:	.word	0x20000c58
    15f8:	.word	0x20001638
    15fc:	.word	0x00000699
    1600:	.word	0x20000008
    1604:	.word	0x200000d0
    1608:	.word	0x20000050
    160c:	.word	0x20000074
    1610:	.word	0x2000002c

00001614 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1614:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1618:	mov	r4, r0
    161a:	mov	r7, r2
    OpenFileByIndex(handle);
    161c:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    161e:	mov	r5, r3
    1620:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    1622:	bl	147c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1626:	ldr	r0, [r4, #40]	; 0x28
    1628:	cbz	r0, 1646 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    162a:	ldr	r3, [r0, #0]
    162c:	mov	r1, r7
    162e:	movs	r2, #0
    1630:	ldr	r3, [r3, #48]	; 0x30
    1632:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1634:	ldr	r0, [r4, #40]	; 0x28
    1636:	cbz	r0, 1646 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1638:	ldr	r3, [r0, #0]
    163a:	mov	r2, r6
    163c:	mov	r1, r5
    163e:	ldr	r3, [r3, #40]	; 0x28
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    1640:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1644:	bx	r3
    1646:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    164a:	nop

0000164c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    164c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    1650:	cmp.w	r2, #4294967295
    1654:	ite	ne
    1656:	movne	r6, r2
    1658:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    165a:	sub	sp, #476	; 0x1dc
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    165c:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    165e:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1660:	mov	r2, r6
    1662:	add	r0, sp, #56	; 0x38
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t storage, uint32_t parent,  bool folder, const char* filename)
  {
    1664:	mov	r7, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    1666:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    166a:	ldr	r0, [sp, #504]	; 0x1f8
    166c:	bl	d540 <strlen>
    1670:	cmp	r0, #62	; 0x3e
    1672:	bls.n	167e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x32>
    1674:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    1676:	mov	r0, r5
    1678:	add	sp, #476	; 0x1dc
    167a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    167e:	adds	r2, r0, #1
    1680:	ldr	r1, [sp, #504]	; 0x1f8
    1682:	add	r0, sp, #152	; 0x98
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    1684:	mov.w	r9, #0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    1688:	bl	9c8c <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    168c:	ldr	r5, [r4, #80]	; 0x50
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    168e:	ldrh.w	r0, [sp, #70]	; 0x46
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    1692:	mov.w	r8, #1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1696:	adds	r2, r5, #1
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1698:	ldr	r3, [sp, #60]	; 0x3c
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    169a:	mov	r1, r5
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    169c:	strh.w	r0, [sp, #150]	; 0x96
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    16a0:	str	r2, [r4, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    16a2:	mov	r0, r4
    16a4:	add	r2, sp, #136	; 0x88
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    16a6:	str	r6, [sp, #136]	; 0x88
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    16a8:	strb.w	r7, [sp, #148]	; 0x94
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    16ac:	str	r3, [sp, #144]	; 0x90
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    16ae:	str.w	r9, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    16b2:	strb.w	r8, [sp, #149]	; 0x95
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    16b6:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    16ba:	add	r2, sp, #56	; 0x38
    16bc:	mov	r1, r6
    16be:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    16c0:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    16c2:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    16c6:	cbnz	r7, 16da <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8e>
      sd_mkdir(0,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    16c8:	mov	r0, r4
    16ca:	mov	r2, r8
    16cc:	mov	r1, r5
    16ce:	bl	147c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    16d2:	mov	r0, r5
    16d4:	add	sp, #476	; 0x1dc
    16d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    16da:	mov	r0, r4
    16dc:	mov.w	r3, #256	; 0x100
    16e0:	mov	r1, r5
    16e2:	add	r2, sp, #216	; 0xd8
    16e4:	bl	10f0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    16e8:	ldr	r3, [pc, #68]	; (1730 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xe4>)
    16ea:	ldr.w	r4, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    16ee:	cbz	r4, 170c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xc0>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    16f0:	mov	r3, r8
    16f2:	add	r2, sp, #216	; 0xd8
    16f4:	add.w	r1, r4, #1088	; 0x440
    16f8:	mov	r0, sp
    16fa:	strb.w	r9, [sp]
    16fe:	strb.w	r9, [sp, #1]
    1702:	strb.w	r9, [sp, #2]
    1706:	bl	66b8 <FatFile::mkdir(FatFile*, char const*, bool)>
    170a:	b.n	1676 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
    170c:	ldr.w	r1, [r3, #1152]	; 0x480
    1710:	cmp	r1, #0
    1712:	beq.n	1676 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1714:	mov	r3, r8
    1716:	add	r2, sp, #216	; 0xd8
    1718:	add.w	r1, r1, #1088	; 0x440
    171c:	mov	r0, sp
    171e:	strb.w	r4, [sp, #49]	; 0x31
    1722:	strb.w	r4, [sp, #50]	; 0x32
    1726:	strb.w	r4, [sp, #51]	; 0x33
    172a:	bl	5618 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    172e:	b.n	1676 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x2a>
    1730:	.word	0x20001638

00001734 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    1734:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1738:	sub	sp, #160	; 0xa0
    173a:	mov	r1, r0
    173c:	mov	r4, r0
    173e:	mov	r6, r2
    1740:	mov	r0, sp
    1742:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1746:	ldrb.w	r3, [sp, #12]
    174a:	cbz	r3, 1752 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    174c:	ldrb.w	r5, [sp, #13]
    1750:	cbz	r5, 1758 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x24>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    1752:	add	sp, #160	; 0xa0
    1754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t storage, uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    1758:	mov	r0, r4
    175a:	mov	r2, r5
    175c:	mov	r1, r6
    175e:	bl	147c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1762:	ldr	r0, [r4, #40]	; 0x28
    1764:	cmp	r0, #0
    1766:	beq.n	1752 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    1768:	ldr	r3, [r0, #0]
    176a:	ldr	r3, [r3, #64]	; 0x40
    176c:	blx	r3
      if (!sd_isOpen(file_)) return;
    176e:	cmp	r0, #0
    1770:	beq.n	1752 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1e>
    1772:	mov.w	r8, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    1776:	ldr	r7, [pc, #268]	; (1884 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x150>)
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    1778:	ldr	r1, [r4, #40]	; 0x28
    177a:	cmp	r1, #0
    177c:	beq.n	1832 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xfe>
    177e:	ldr	r3, [r1, #0]
    1780:	movs	r2, #0
    1782:	add	r0, sp, #80	; 0x50
    1784:	ldr	r3, [r3, #76]	; 0x4c
    1786:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1788:	ldr	r2, [r4, #60]	; 0x3c
    178a:	cbz	r2, 179e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    178c:	ldr	r3, [r2, #16]
    178e:	subs	r3, #1
    1790:	str	r3, [r2, #16]
    1792:	cbnz	r3, 179e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    1794:	ldr	r0, [r4, #60]	; 0x3c
    1796:	cbz	r0, 179e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6a>
    1798:	ldr	r3, [r0, #0]
    179a:	ldr	r3, [r3, #32]
    179c:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    179e:	ldr	r3, [sp, #96]	; 0x60
    17a0:	str	r3, [r4, #60]	; 0x3c
		if (f) f->refcount++;
    17a2:	cbz	r3, 17c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    17a4:	ldr	r2, [r3, #16]
    17a6:	adds	r2, #1
    17a8:	str	r2, [r3, #16]
    17aa:	ldr	r2, [sp, #96]	; 0x60
		return *this;
	}
	virtual ~File() {
    17ac:	str	r7, [sp, #80]	; 0x50
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17ae:	cbz	r2, 17c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    17b0:	ldr	r3, [r2, #16]
    17b2:	subs	r3, #1
    17b4:	str	r3, [r2, #16]
    17b6:	cbnz	r3, 17c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    17b8:	ldr	r0, [sp, #96]	; 0x60
    17ba:	cbz	r0, 17c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x8e>
    17bc:	ldr	r3, [r0, #0]
    17be:	ldr	r3, [r3, #32]
    17c0:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    17c2:	ldr	r0, [r4, #60]	; 0x3c
    17c4:	cmp	r0, #0
    17c6:	beq.n	1854 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x120>
    17c8:	ldr	r3, [r0, #0]
    17ca:	ldr	r3, [r3, #64]	; 0x40
    17cc:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    17ce:	cmp	r0, #0
    17d0:	beq.n	1854 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x120>

        Record r;
        r.store = record.store;
    17d2:	ldrh.w	r3, [sp, #14]
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    17d6:	ldr	r0, [r4, #60]	; 0x3c
        r.parent = i;
    17d8:	str	r6, [sp, #80]	; 0x50
        r.sibling = sibling;
    17da:	str	r5, [sp, #88]	; 0x58
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    17dc:	strh.w	r3, [sp, #94]	; 0x5e
    17e0:	cmp	r0, #0
    17e2:	beq.n	1844 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x110>
    17e4:	ldr	r3, [r0, #0]
    17e6:	ldr	r3, [r3, #72]	; 0x48
    17e8:	blx	r3
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    17ea:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    17ee:	cmp	r0, #0
    17f0:	beq.n	186c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x138>
    17f2:	ldr	r0, [r4, #60]	; 0x3c
    17f4:	movs	r3, #0
        r.scanned = false;
    17f6:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    17f8:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    17fa:	strb.w	r2, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    17fe:	cmp	r0, #0
    1800:	beq.n	187e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x14a>
    1802:	ldr	r3, [r0, #0]
    1804:	ldr	r3, [r3, #68]	; 0x44
    1806:	blx	r3
    1808:	mov	r1, r0
        sd_getName(child_,r.name,64);
    180a:	add	r0, sp, #96	; 0x60
    180c:	bl	d464 <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1810:	ldr	r1, [r4, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    1812:	mov	r0, r4
    1814:	add	r2, sp, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1816:	adds	r3, r1, #1
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
    1818:	mov	r5, r1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    181a:	str	r3, [r4, #80]	; 0x50
    WriteIndexRecord(new_record, r);
    181c:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1820:	ldr	r0, [r4, #60]	; 0x3c
    1822:	cmp	r0, #0
    1824:	beq.n	1778 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    1826:	ldr	r3, [r0, #0]
    1828:	ldr	r3, [r3, #60]	; 0x3c
    182a:	blx	r3
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    182c:	ldr	r1, [r4, #40]	; 0x28
    182e:	cmp	r1, #0
    1830:	bne.n	177e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x4a>
    1832:	strb.w	r1, [sp, #84]	; 0x54
    1836:	str.w	r8, [sp, #88]	; 0x58
    183a:	strb.w	r1, [sp, #92]	; 0x5c
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    183e:	str	r7, [sp, #80]	; 0x50
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    1840:	str	r1, [sp, #96]	; 0x60
    1842:	b.n	1788 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x54>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    1844:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    1848:	movs	r3, #0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    184a:	ldr	r1, [pc, #60]	; (1888 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x154>)
    184c:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    184e:	strb.w	r3, [sp, #93]	; 0x5d
    1852:	b.n	180a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    1854:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    1856:	mov	r2, sp
    1858:	mov	r1, r6
    185a:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    185c:	str	r5, [sp, #4]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    185e:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    1862:	bl	ed0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    1866:	add	sp, #160	; 0xa0
    1868:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    186c:	ldr	r0, [r4, #60]	; 0x3c
    186e:	cmp	r0, #0
    1870:	beq.n	1848 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
    1872:	ldr	r3, [r0, #0]
    1874:	ldr	r3, [r3, #56]	; 0x38
    1876:	blx	r3
    1878:	mov	r3, r0
    187a:	ldr	r0, [r4, #60]	; 0x3c
    187c:	b.n	17f6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xc2>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    187e:	ldr	r1, [pc, #8]	; (1888 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x154>)
    1880:	b.n	180a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    1882:	nop
    1884:	.word	0x20000074
    1888:	.word	0x20000174

0000188c <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]>:

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    188c:	movs	r2, #1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    188e:	ldrb.w	r3, [r0, #84]	; 0x54
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
    1892:	push	{r4, r5, r6, lr}
    1894:	mov	r5, r0
    1896:	mov	r6, r1
  { if (all_scanned_) return;
    all_scanned_ = true;
    1898:	strb.w	r2, [r0, #85]	; 0x55

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    189c:	cbz	r3, 18b8 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x2c>
  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(storage);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(storage,i);
    189e:	ldr	r3, [r5, #80]	; 0x50
    18a0:	cbz	r3, 18b6 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x2a>
    18a2:	movs	r4, #0
    18a4:	mov	r2, r4
    18a6:	mov	r1, r6
    18a8:	mov	r0, r5
    18aa:	adds	r4, #1
    18ac:	bl	1734 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    18b0:	ldr	r3, [r5, #80]	; 0x50
    18b2:	cmp	r3, r4
    18b4:	bhi.n	18a4 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x18>
    18b6:	pop	{r4, r5, r6, pc}
    18b8:	bl	f04 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>
    18bc:	b.n	189e <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]+0x12>
    18be:	nop

000018c0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    18c0:	ldrb.w	r3, [r0, #84]	; 0x54
  void  MTPStorage_SD::setStorageNumbers(const char **str, int num) {sd_str = str; num_storage=num;}
  uint32_t MTPStorage_SD::getNumStorage() {return num_storage;}
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    18c4:	push	{r4, r5, lr}
    18c6:	mov	r4, r0
    18c8:	sub	sp, #92	; 0x5c
    18ca:	mov	r5, r2

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t storage)
  { if (index_generated) return; 
    18cc:	cbz	r3, 191e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x5e>
  const char * MTPStorage_SD::getStorageName(uint32_t storage) {return sd_str[storage-1];}

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    GenerateIndex(storage);
    if (parent) 
    18ce:	cbz	r5, 190a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization
    18d0:	adds	r3, r5, #1

      ScanDir(storage, parent);
    18d2:	mov	r0, r4

  void MTPStorage_SD::StartGetObjectHandles(uint32_t storage, uint32_t parent) 
  { 
    GenerateIndex(storage);
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization
    18d4:	it	eq
    18d6:	addeq.w	r5, r1, #4294967295

      ScanDir(storage, parent);
    18da:	mov	r2, r5
    18dc:	bl	1734 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    18e0:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    18e2:	mov	r2, r5
    18e4:	mov	r1, r4
    GenerateIndex(storage);
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = storage-1; // As per initizalization

      ScanDir(storage, parent);
      follow_sibling_ = true;
    18e6:	strb.w	r3, [r4, #92]	; 0x5c
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    18ea:	add	r0, sp, #8
    18ec:	bl	fbc <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    18f0:	ldr	r1, [sp, #12]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    18f2:	movs	r3, #0
    18f4:	movs	r2, #10
    18f6:	str	r1, [r4, #88]	; 0x58
    18f8:	ldr	r0, [pc, #52]	; (1930 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x70>)
    18fa:	bl	b778 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    18fe:	ldr	r0, [pc, #48]	; (1930 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x70>)
    { 
      ScanAll(storage);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    1900:	add	sp, #92	; 0x5c
    1902:	ldmia.w	sp!, {r4, r5, lr}
    1906:	b.w	b728 <Print::println()>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t storage) 
  { if (all_scanned_) return;
    190a:	ldrb.w	r3, [r4, #85]	; 0x55
    190e:	cbz	r3, 1928 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x68>
      Serial.println(next_);
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    1910:	movs	r2, #0
      next_ = 1;
    1912:	movs	r3, #1
      Serial.println(next_);
    } 
    else 
    { 
      ScanAll(storage);
      follow_sibling_ = false;
    1914:	strb.w	r2, [r4, #92]	; 0x5c
      next_ = 1;
    1918:	str	r3, [r4, #88]	; 0x58
    }
  }
    191a:	add	sp, #92	; 0x5c
    191c:	pop	{r4, r5, pc}
    191e:	str	r1, [sp, #4]
    1920:	bl	f04 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.44] [clone .constprop.49]>
    1924:	ldr	r1, [sp, #4]
    1926:	b.n	18ce <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    1928:	mov	r0, r4
    192a:	bl	188c <MTPStorage_SD::ScanAll(unsigned long) [clone .part.45] [clone .constprop.48]>
    192e:	b.n	1910 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x50>
    1930:	.word	0x20000c58

00001934 <MTPD::write(char const*, int) [clone .part.2]>:
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    1934:	movw	r3, #9256	; 0x2428
    1938:	ldr	r3, [r0, r3]
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    193a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    193e:	mov	r5, r1
    1940:	mov	r8, r2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    1942:	cbnz	r3, 194c <MTPD::write(char const*, int) [clone .part.2]+0x18>
    1944:	ldr	r7, [pc, #104]	; (19b0 <MTPD::write(char const*, int) [clone .part.2]+0x7c>)
    1946:	add.w	r2, r0, #544	; 0x220
    194a:	str	r2, [r7, #0]
    194c:	add	r3, r8
    194e:	movw	r2, #9256	; 0x2428
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1952:	cmp.w	r8, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    1956:	str	r3, [r0, r2]
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1958:	ble.n	19aa <MTPD::write(char const*, int) [clone .part.2]+0x76>
    195a:	add.w	r9, r0, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    195e:	add.w	r6, r0, #544	; 0x220
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1962:	movs	r4, #0
    1964:	ldr	r7, [pc, #72]	; (19b0 <MTPD::write(char const*, int) [clone .part.2]+0x7c>)
    1966:	b.n	196c <MTPD::write(char const*, int) [clone .part.2]+0x38>
    1968:	cmp	r8, r4
    196a:	ble.n	19aa <MTPD::write(char const*, int) [clone .part.2]+0x76>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    196c:	ldr	r3, [r7, #0]
    196e:	rsb	r2, r4, r8
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
    1972:	mov	r1, r5
    1974:	rsb	sl, r3, r9
    1978:	mov	r0, r3
    197a:	cmp	sl, r2
    197c:	it	ge
    197e:	movge	sl, r2
    1980:	mov	r2, sl
          pos += to_copy;
    1982:	add	r4, sl
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
    1984:	bl	9c8c <memcpy>
    1988:	mov	r3, r0
          pos += to_copy;
          src += to_copy;
    198a:	add	r5, sl
          dst += to_copy;
    198c:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    198e:	cmp	r3, r9
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1990:	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1992:	bne.n	1968 <MTPD::write(char const*, int) [clone .part.2]+0x34>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1994:	movs	r2, #60	; 0x3c
    1996:	mov.w	r1, #512	; 0x200
    199a:	mov	r0, r6
    199c:	bl	9c00 <usb_mtp_send>
    19a0:	cmp	r0, #0
    19a2:	ble.n	1994 <MTPD::write(char const*, int) [clone .part.2]+0x60>
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19a4:	cmp	r8, r4
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    19a6:	str	r6, [r7, #0]
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19a8:	bgt.n	196c <MTPD::write(char const*, int) [clone .part.2]+0x38>
    19aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19ae:	nop
    19b0:	.word	0x20005be0

000019b4 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    19b4:	push	{r4, r5, r6, r7, lr}
    if (*str) 
    19b6:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    19b8:	sub	sp, #12
    19ba:	mov	r6, r0
    if (*str) 
    19bc:	cmp	r3, #0
    19be:	beq.n	1a34 <MTPD::writestring(char const*)+0x80>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    19c0:	movw	r5, #9252	; 0x2424
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    19c4:	mov	r0, r1
    19c6:	mov	r4, r1
    19c8:	bl	d540 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    19cc:	ldrb	r2, [r6, r5]
    19ce:	adds	r0, #1
    19d0:	strb.w	r0, [sp, #3]
    19d4:	cmp	r2, #0
    19d6:	beq.n	1a5c <MTPD::writestring(char const*)+0xa8>
      {
        write_length_ += len;
    19d8:	movw	r1, #9256	; 0x2428
    19dc:	ldr	r3, [r6, r1]
    19de:	adds	r3, #1
    19e0:	str	r3, [r6, r1]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    19e2:	ldrb	r3, [r4, #0]
    19e4:	cbz	r3, 1a26 <MTPD::writestring(char const*)+0x72>
    19e6:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    19ea:	movw	r5, #9256	; 0x2428
    19ee:	add	r7, r6
    19f0:	add	r5, r6
    19f2:	b.n	1a00 <MTPD::writestring(char const*)+0x4c>
    19f4:	ldr	r3, [r5, #0]
    19f6:	adds	r3, #2
    19f8:	str	r3, [r5, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    19fa:	ldrb.w	r3, [r4, #1]!
    19fe:	cbz	r3, 1a1e <MTPD::writestring(char const*)+0x6a>
    1a00:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a04:	cmp	r2, #0
    1a06:	bne.n	19f4 <MTPD::writestring(char const*)+0x40>
    1a08:	movs	r2, #2
    1a0a:	add.w	r1, sp, #6
    1a0e:	mov	r0, r6
    1a10:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a14:	ldrb.w	r3, [r4, #1]!
    1a18:	ldrb	r2, [r7, #0]
    1a1a:	cmp	r3, #0
    1a1c:	bne.n	1a00 <MTPD::writestring(char const*)+0x4c>
    1a1e:	movs	r3, #0
    1a20:	strh.w	r3, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a24:	cbz	r2, 1a72 <MTPD::writestring(char const*)+0xbe>
      {
        write_length_ += len;
    1a26:	movw	r2, #9256	; 0x2428
    1a2a:	ldr	r3, [r6, r2]
    1a2c:	adds	r3, #2
    1a2e:	str	r3, [r6, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1a30:	add	sp, #12
    1a32:	pop	{r4, r5, r6, r7, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a34:	movw	r2, #9252	; 0x2424
    1a38:	strb.w	r3, [sp, #2]
    1a3c:	ldrb	r3, [r0, r2]
    1a3e:	cbz	r3, 1a4e <MTPD::writestring(char const*)+0x9a>
      {
        write_length_ += len;
    1a40:	movw	r2, #9256	; 0x2428
    1a44:	ldr	r3, [r0, r2]
    1a46:	adds	r3, #1
    1a48:	str	r3, [r0, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1a4a:	add	sp, #12
    1a4c:	pop	{r4, r5, r6, r7, pc}
    1a4e:	movs	r2, #1
    1a50:	add.w	r1, sp, #2
    1a54:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1a58:	add	sp, #12
    1a5a:	pop	{r4, r5, r6, r7, pc}
    1a5c:	movs	r2, #1
    1a5e:	add.w	r1, sp, #3
    1a62:	mov	r0, r6
    1a64:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a68:	ldrb	r3, [r4, #0]
    1a6a:	ldrb	r2, [r6, r5]
    1a6c:	cmp	r3, #0
    1a6e:	bne.n	19e6 <MTPD::writestring(char const*)+0x32>
    1a70:	b.n	1a1e <MTPD::writestring(char const*)+0x6a>
    1a72:	mov	r0, r6
    1a74:	movs	r2, #2
    1a76:	add	r1, sp, #4
    1a78:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    1a7c:	add	sp, #12
    1a7e:	pop	{r4, r5, r6, r7, pc}

00001a80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1a80:	push	{r4, r5, r6, r7, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a82:	movw	r6, #9252	; 0x2424
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1a86:	sub	sp, #12
    1a88:	mov	r4, r0
    1a8a:	mov	r5, r1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1a8c:	ldrb	r3, [r0, r6]
    1a8e:	strh.w	r1, [sp, #4]
    1a92:	cmp	r3, #0
    1a94:	beq.n	1b08 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x88>
      {
        write_length_ += len;
    1a96:	movw	r2, #9256	; 0x2428
    1a9a:	movw	r1, #65535	; 0xffff
    1a9e:	ldr	r3, [r0, r2]
    1aa0:	strh.w	r1, [sp, #6]
    1aa4:	adds	r3, #2
    1aa6:	str	r3, [r0, r2]
    1aa8:	movw	r2, #9256	; 0x2428
    1aac:	movs	r1, #0
    1aae:	ldr	r3, [r4, r2]
    1ab0:	strb.w	r1, [sp, #2]
    1ab4:	adds	r3, #2
    1ab6:	str	r3, [r4, r2]
    1ab8:	movw	r2, #9256	; 0x2428
    1abc:	ldr	r3, [r4, r2]
    1abe:	adds	r3, #1
    1ac0:	str	r3, [r4, r2]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1ac2:	movw	r3, #54274	; 0xd402
    1ac6:	cmp	r5, r3
    1ac8:	beq.n	1af6 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x76>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1aca:	movw	r3, #9252	; 0x2424
    1ace:	movs	r2, #0
    1ad0:	ldrb	r3, [r4, r3]
    1ad2:	strb.w	r2, [sp, #3]
    1ad6:	cbz	r3, 1ae6 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x66>
      {
        write_length_ += len;
    1ad8:	movw	r2, #9256	; 0x2428
    1adc:	ldr	r3, [r4, r2]
    1ade:	adds	r3, #1
    1ae0:	str	r3, [r4, r2]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1ae2:	add	sp, #12
    1ae4:	pop	{r4, r5, r6, r7, pc}
    1ae6:	mov	r0, r4
    1ae8:	movs	r2, #1
    1aea:	add.w	r1, sp, #3
    1aee:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1af2:	add	sp, #12
    1af4:	pop	{r4, r5, r6, r7, pc}
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    1af6:	mov	r0, r4
    1af8:	ldr	r1, [pc, #72]	; (1b44 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xc4>)
    1afa:	bl	19b4 <MTPD::writestring(char const*)>
    1afe:	ldr	r1, [pc, #68]	; (1b44 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xc4>)
    1b00:	mov	r0, r4
    1b02:	bl	19b4 <MTPD::writestring(char const*)>
    1b06:	b.n	1aca <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x4a>
    1b08:	movs	r2, #2
    1b0a:	add	r1, sp, #4
    1b0c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1b10:	movw	r3, #65535	; 0xffff
    1b14:	ldrb	r7, [r4, r6]
    1b16:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b1a:	cmp	r7, #0
    1b1c:	bne.n	1aa8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    1b1e:	movs	r2, #2
    1b20:	add.w	r1, sp, #6
    1b24:	mov	r0, r4
    1b26:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1b2a:	ldrb	r3, [r4, r6]
    1b2c:	strb.w	r7, [sp, #2]
    1b30:	cmp	r3, #0
    1b32:	bne.n	1ab8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x38>
    1b34:	movs	r2, #1
    1b36:	add.w	r1, sp, #2
    1b3a:	mov	r0, r4
    1b3c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1b40:	b.n	1ac2 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x42>
    1b42:	nop
    1b44:	.word	0x20000294

00001b48 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1b48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b4c:	movw	r4, #9252	; 0x2424
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1b50:	sub	sp, #44	; 0x2c
    1b52:	movs	r6, #100	; 0x64
    1b54:	mov	r5, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b56:	ldrb	r3, [r0, r4]
    1b58:	strh.w	r6, [sp, #6]
    1b5c:	cmp	r3, #0
    1b5e:	beq.w	1c98 <MTPD::WriteDescriptor()+0x150>
      {
        write_length_ += len;
    1b62:	movw	r2, #9256	; 0x2428
    1b66:	movs	r1, #6
    1b68:	ldr	r3, [r0, r2]
    1b6a:	str	r1, [sp, #20]
    1b6c:	adds	r3, #2
    1b6e:	str	r3, [r0, r2]
    1b70:	movw	r2, #9256	; 0x2428
    1b74:	movs	r1, #100	; 0x64
    1b76:	ldr	r3, [r5, r2]
    1b78:	strh.w	r1, [sp, #4]
    1b7c:	adds	r3, #4
    1b7e:	str	r3, [r5, r2]
    1b80:	movw	r2, #9256	; 0x2428
    1b84:	ldr	r3, [r5, r2]
    1b86:	adds	r3, #2
    1b88:	str	r3, [r5, r2]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b8a:	movw	r4, #9252	; 0x2424
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    1b8e:	ldr	r1, [pc, #508]	; (1d8c <MTPD::WriteDescriptor()+0x244>)
    1b90:	mov	r0, r5
    1b92:	bl	19b4 <MTPD::writestring(char const*)>
    1b96:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1b98:	ldrb	r3, [r5, r4]
    1b9a:	strh.w	r2, [sp, #2]
    1b9e:	cmp	r3, #0
    1ba0:	beq.w	1d66 <MTPD::WriteDescriptor()+0x21e>
      {
        write_length_ += len;
    1ba4:	movw	r2, #9256	; 0x2428
    1ba8:	movs	r1, #18
    1baa:	ldr	r3, [r5, r2]
    1bac:	str	r1, [sp, #16]
    1bae:	adds	r3, #2
    1bb0:	str	r3, [r5, r2]
    1bb2:	movw	r2, #9256	; 0x2428
    1bb6:	movs	r7, #1
    1bb8:	ldr	r3, [r5, r2]
    1bba:	adds	r3, #4
    1bbc:	str	r3, [r5, r2]
    1bbe:	ldr	r4, [pc, #464]	; (1d90 <MTPD::WriteDescriptor()+0x248>)
    1bc0:	movw	r8, #9252	; 0x2424
    1bc4:	movw	r6, #9256	; 0x2428
    1bc8:	movw	r3, #4097	; 0x1001
    1bcc:	add.w	r9, r4, #34	; 0x22
    1bd0:	add	r8, r5
    1bd2:	add	r6, r5
    1bd4:	b.n	1be6 <MTPD::WriteDescriptor()+0x9e>
    1bd6:	ldr	r3, [r6, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bd8:	cmp	r9, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1bda:	add.w	r3, r3, #2
    1bde:	str	r3, [r6, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1be0:	beq.n	1c00 <MTPD::WriteDescriptor()+0xb8>
    1be2:	ldrh.w	r3, [r4, #2]!
    1be6:	strh.w	r3, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1bea:	cmp	r7, #0
    1bec:	bne.n	1bd6 <MTPD::WriteDescriptor()+0x8e>
    1bee:	movs	r2, #2
    1bf0:	add	r1, sp, #8
    1bf2:	mov	r0, r5
    1bf4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bf8:	cmp	r9, r4
    1bfa:	ldrb.w	r7, [r8]
    1bfe:	bne.n	1be2 <MTPD::WriteDescriptor()+0x9a>
    1c00:	movs	r3, #0
    1c02:	str	r3, [sp, #36]	; 0x24
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1c04:	cmp	r7, #0
    1c06:	beq.n	1cd0 <MTPD::WriteDescriptor()+0x188>
      {
        write_length_ += len;
    1c08:	movw	r2, #9256	; 0x2428
    1c0c:	movs	r1, #1
    1c0e:	ldr	r3, [r5, r2]
    1c10:	str	r1, [sp, #32]
    1c12:	adds	r3, #4
    1c14:	str	r3, [r5, r2]
    1c16:	movw	r2, #9256	; 0x2428
    1c1a:	movw	r1, #54274	; 0xd402
    1c1e:	ldr	r3, [r5, r2]
    1c20:	strh.w	r1, [sp, #14]
    1c24:	adds	r3, #4
    1c26:	str	r3, [r5, r2]
    1c28:	movw	r2, #9256	; 0x2428
    1c2c:	movs	r1, #0
    1c2e:	ldr	r3, [r5, r2]
    1c30:	str	r1, [sp, #28]
    1c32:	adds	r3, #2
    1c34:	str	r3, [r5, r2]
    1c36:	movw	r2, #9256	; 0x2428
    1c3a:	movs	r1, #2
    1c3c:	ldr	r3, [r5, r2]
    1c3e:	str	r1, [sp, #24]
    1c40:	adds	r3, #4
    1c42:	str	r3, [r5, r2]
    1c44:	movw	r2, #9256	; 0x2428
    1c48:	mov.w	r1, #12288	; 0x3000
    1c4c:	ldr	r3, [r5, r2]
    1c4e:	strh.w	r1, [sp, #12]
    1c52:	adds	r3, #4
    1c54:	str	r3, [r5, r2]
    1c56:	movw	r2, #9256	; 0x2428
    1c5a:	movw	r1, #12289	; 0x3001
    1c5e:	ldr	r3, [r5, r2]
    1c60:	strh.w	r1, [sp, #10]
    1c64:	adds	r3, #2
    1c66:	str	r3, [r5, r2]
    1c68:	movw	r2, #9256	; 0x2428
    1c6c:	ldr	r3, [r5, r2]
    1c6e:	adds	r3, #2
    1c70:	str	r3, [r5, r2]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    1c72:	mov	r0, r5
    1c74:	ldr	r1, [pc, #284]	; (1d94 <MTPD::WriteDescriptor()+0x24c>)
    1c76:	bl	19b4 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    1c7a:	mov	r0, r5
    1c7c:	ldr	r1, [pc, #280]	; (1d98 <MTPD::WriteDescriptor()+0x250>)
    1c7e:	bl	19b4 <MTPD::writestring(char const*)>
    writestring(MTP_VERS);      // version
    1c82:	mov	r0, r5
    1c84:	ldr	r1, [pc, #276]	; (1d9c <MTPD::WriteDescriptor()+0x254>)
    1c86:	bl	19b4 <MTPD::writestring(char const*)>
    writestring(MTP_SERNR);     // serial
    1c8a:	mov	r0, r5
    1c8c:	ldr	r1, [pc, #272]	; (1da0 <MTPD::WriteDescriptor()+0x258>)
    1c8e:	bl	19b4 <MTPD::writestring(char const*)>
  }
    1c92:	add	sp, #44	; 0x2c
    1c94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c98:	movs	r2, #2
    1c9a:	add.w	r1, sp, #6
    1c9e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1ca2:	movs	r2, #6
    1ca4:	ldrb	r3, [r5, r4]
    1ca6:	str	r2, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1ca8:	cmp	r3, #0
    1caa:	bne.w	1b70 <MTPD::WriteDescriptor()+0x28>
    1cae:	movs	r2, #4
    1cb0:	add	r1, sp, #20
    1cb2:	mov	r0, r5
    1cb4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1cb8:	ldrb	r3, [r5, r4]
    1cba:	strh.w	r6, [sp, #4]
    1cbe:	cmp	r3, #0
    1cc0:	bne.w	1b80 <MTPD::WriteDescriptor()+0x38>
    1cc4:	movs	r2, #2
    1cc6:	add	r1, sp, #4
    1cc8:	mov	r0, r5
    1cca:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1cce:	b.n	1b8a <MTPD::WriteDescriptor()+0x42>
    1cd0:	movw	r4, #9252	; 0x2424
    1cd4:	movs	r2, #4
    1cd6:	add	r1, sp, #36	; 0x24
    1cd8:	mov	r0, r5
    1cda:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1cde:	movs	r2, #1
    1ce0:	ldrb	r3, [r5, r4]
    1ce2:	str	r2, [sp, #32]
    1ce4:	cmp	r3, #0
    1ce6:	bne.n	1c16 <MTPD::WriteDescriptor()+0xce>
    1ce8:	movs	r2, #4
    1cea:	add	r1, sp, #32
    1cec:	mov	r0, r5
    1cee:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1cf2:	movw	r2, #54274	; 0xd402
    1cf6:	ldrb	r3, [r5, r4]
    1cf8:	strh.w	r2, [sp, #14]
    1cfc:	cmp	r3, #0
    1cfe:	bne.n	1c28 <MTPD::WriteDescriptor()+0xe0>
    1d00:	movs	r2, #2
    1d02:	add.w	r1, sp, #14
    1d06:	mov	r0, r5
    1d08:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1d0c:	ldrb	r3, [r5, r4]
    1d0e:	str	r7, [sp, #28]
    1d10:	cmp	r3, #0
    1d12:	bne.n	1c36 <MTPD::WriteDescriptor()+0xee>
    1d14:	movs	r2, #4
    1d16:	add	r1, sp, #28
    1d18:	mov	r0, r5
    1d1a:	movs	r6, #2
    1d1c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1d20:	ldrb	r3, [r5, r4]
    1d22:	str	r6, [sp, #24]
    1d24:	cmp	r3, #0
    1d26:	bne.n	1c44 <MTPD::WriteDescriptor()+0xfc>
    1d28:	movs	r2, #4
    1d2a:	add	r1, sp, #24
    1d2c:	mov	r0, r5
    1d2e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1d32:	mov.w	r2, #12288	; 0x3000
    1d36:	ldrb	r3, [r5, r4]
    1d38:	strh.w	r2, [sp, #12]
    1d3c:	cmp	r3, #0
    1d3e:	bne.n	1c56 <MTPD::WriteDescriptor()+0x10e>
    1d40:	mov	r2, r6
    1d42:	add	r1, sp, #12
    1d44:	mov	r0, r5
    1d46:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1d4a:	movw	r2, #12289	; 0x3001
    1d4e:	ldrb	r3, [r5, r4]
    1d50:	strh.w	r2, [sp, #10]
    1d54:	cmp	r3, #0
    1d56:	bne.n	1c68 <MTPD::WriteDescriptor()+0x120>
    1d58:	mov	r2, r6
    1d5a:	add.w	r1, sp, #10
    1d5e:	mov	r0, r5
    1d60:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1d64:	b.n	1c72 <MTPD::WriteDescriptor()+0x12a>
    1d66:	movs	r2, #2
    1d68:	mov	r0, r5
    1d6a:	add.w	r1, sp, r2
    1d6e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1d72:	movs	r2, #18
    1d74:	ldrb	r3, [r5, r4]
    1d76:	str	r2, [sp, #16]
    1d78:	cmp	r3, #0
    1d7a:	bne.w	1bb2 <MTPD::WriteDescriptor()+0x6a>
    1d7e:	movs	r2, #4
    1d80:	add	r1, sp, #16
    1d82:	mov	r0, r5
    1d84:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1d88:	ldrb	r7, [r5, r4]
    1d8a:	b.n	1bbe <MTPD::WriteDescriptor()+0x76>
    1d8c:	.word	0x2000029c
    1d90:	.word	0x2000025c
    1d94:	.word	0x200002b0
    1d98:	.word	0x20000294
    1d9c:	.word	0x200002b8
    1da0:	.word	0x200002bc

00001da4 <MTPD::WriteStorageIDs()>:
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    1da4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1da8:	mov	r8, r0
    uint32_t num=storage_->getNumStorage();
    1daa:	ldr	r0, [r0, #0]
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    1dac:	sub	sp, #8
    uint32_t num=storage_->getNumStorage();
    1dae:	ldr	r3, [r0, #0]
    1db0:	ldr	r3, [r3, #24]
    1db2:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1db4:	movw	r3, #9252	; 0x2424
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    1db8:	mov	r6, r0
    1dba:	str	r0, [sp, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1dbc:	ldrb.w	r3, [r8, r3]
    1dc0:	cbz	r3, 1e0e <MTPD::WriteStorageIDs()+0x6a>
      {
        write_length_ += len;
    1dc2:	movw	r2, #9256	; 0x2428
    1dc6:	ldr.w	r3, [r8, r2]
    1dca:	adds	r3, #4
    1dcc:	str.w	r3, [r8, r2]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1dd0:	cbz	r6, 1e08 <MTPD::WriteStorageIDs()+0x64>
    1dd2:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1dd6:	movw	r5, #9256	; 0x2428
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1dda:	movs	r4, #1
    1ddc:	add	r7, r8
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1dde:	add	r5, r8
    1de0:	b.n	1dee <MTPD::WriteStorageIDs()+0x4a>
    1de2:	ldr	r3, [r5, #0]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1de4:	adds	r4, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1de6:	adds	r3, #4
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1de8:	cmp	r6, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1dea:	str	r3, [r5, #0]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1dec:	bcc.n	1e08 <MTPD::WriteStorageIDs()+0x64>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1dee:	ldrb	r3, [r7, #0]
    1df0:	str	r4, [sp, #4]
    1df2:	cmp	r3, #0
    1df4:	bne.n	1de2 <MTPD::WriteStorageIDs()+0x3e>
    1df6:	movs	r2, #4
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
    1df8:	adds	r4, #1
    1dfa:	mov	r0, r8
    1dfc:	add.w	r1, sp, r2
    1e00:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1e04:	cmp	r6, r4
    1e06:	bcs.n	1dee <MTPD::WriteStorageIDs()+0x4a>
  }
    1e08:	add	sp, #8
    1e0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e0e:	movs	r2, #4
    1e10:	mov	r1, sp
    1e12:	mov	r0, r8
    1e14:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1e18:	b.n	1dd0 <MTPD::WriteStorageIDs()+0x2c>
    1e1a:	nop

00001e1c <MTPD::GetStorageInfo(unsigned long)>:

  void MTPD::GetStorageInfo(uint32_t storage) {
    1e1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e20:	mov	r4, r0
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    1e22:	ldr	r0, [r0, #0]
    uint32_t num=storage_->getNumStorage();
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    1e24:	sub	sp, #36	; 0x24
    1e26:	mov	r5, r1
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    1e28:	ldr	r3, [r0, #0]
    1e2a:	ldr	r3, [r3, #4]
    1e2c:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e2e:	movw	r3, #9252	; 0x2424
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    1e32:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e34:	ldrb	r3, [r4, r3]
    write32(num); // 1 entry
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    1e36:	ite	eq
    1e38:	moveq	r2, #4
    1e3a:	movne	r2, #1
    1e3c:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e40:	cmp	r3, #0
    1e42:	beq.n	1f30 <MTPD::GetStorageInfo(unsigned long)+0x114>
      {
        write_length_ += len;
    1e44:	movw	r2, #9256	; 0x2428
    1e48:	ldr	r3, [r4, r2]
    1e4a:	adds	r3, #2
    1e4c:	str	r3, [r4, r2]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    1e4e:	ldr	r0, [r4, #0]
    1e50:	mov	r1, r5
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e52:	movw	r7, #9252	; 0x2424
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    1e56:	ldr	r3, [r0, #0]
    1e58:	ldr	r3, [r3, #8]
    1e5a:	blx	r3
    1e5c:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e5e:	ldrb	r6, [r4, r7]
    for(uint32_t ii=1;ii<=num;ii++)  write32(ii); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    1e60:	ite	eq
    1e62:	moveq	r3, #1
    1e64:	movne	r3, #2
    1e66:	strh.w	r3, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e6a:	cmp	r6, #0
    1e6c:	beq.w	1f80 <MTPD::GetStorageInfo(unsigned long)+0x164>
      {
        write_length_ += len;
    1e70:	movw	r2, #9256	; 0x2428
    1e74:	movs	r1, #0
    1e76:	ldr	r3, [r4, r2]
    1e78:	strh.w	r1, [sp, #8]
    1e7c:	adds	r3, #2
    1e7e:	str	r3, [r4, r2]
    1e80:	movw	r2, #9256	; 0x2428
    1e84:	ldr	r3, [r4, r2]
    1e86:	adds	r3, #2
    1e88:	str	r3, [r4, r2]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint32_t nclust = storage_->clusterCount( storage) ; 
    1e8a:	ldr	r0, [r4, #0]
    1e8c:	mov	r1, r5
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1e8e:	movw	r6, #9252	; 0x2424
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly( storage) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories( storage) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
    uint32_t nclust = storage_->clusterCount( storage) ; 
    1e92:	ldr	r3, [r0, #0]
    1e94:	ldr	r3, [r3, #12]
    1e96:	blx	r3
    1e98:	mov	r9, r0
    uint32_t nsect = storage_->clusterSize(storage) ; 
    1e9a:	ldr	r0, [r4, #0]
    1e9c:	mov	r1, r5
    1e9e:	ldr	r3, [r0, #0]
    1ea0:	ldr	r3, [r3, #20]
    1ea2:	blx	r3
    1ea4:	mov	r7, r0
    uint32_t nfree = storage_->freeClusters(storage) ; 
    1ea6:	ldr	r0, [r4, #0]
    1ea8:	mov	r1, r5
    1eaa:	ldr	r3, [r0, #0]
    1eac:	ldr	r3, [r3, #16]
    1eae:	blx	r3
    1eb0:	mov	r8, r0
    1eb2:	umull	r0, r1, r9, r7
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1eb6:	ldrb	r2, [r4, r6]
    1eb8:	lsls	r3, r1, #9
    1eba:	orr.w	r3, r3, r0, lsr #23
    1ebe:	lsls	r0, r0, #9
    1ec0:	str	r3, [sp, #28]
    1ec2:	str	r0, [sp, #24]
    1ec4:	cmp	r2, #0
    1ec6:	beq.n	1f3e <MTPD::GetStorageInfo(unsigned long)+0x122>
    1ec8:	umull	r0, r1, r7, r8
      {
        write_length_ += len;
    1ecc:	movw	r6, #9256	; 0x2428
    1ed0:	lsls	r2, r1, #9
    1ed2:	ldr	r3, [r4, r6]
    1ed4:	lsls	r1, r0, #9
    1ed6:	orr.w	r2, r2, r0, lsr #23
    1eda:	adds	r3, #8
    1edc:	str	r1, [sp, #16]
    1ede:	str	r2, [sp, #20]
    1ee0:	str	r3, [r4, r6]
    1ee2:	movw	r2, #9256	; 0x2428
    1ee6:	mov.w	r1, #4294967295
    1eea:	ldr	r3, [r4, r2]
    1eec:	str	r1, [sp, #12]
    1eee:	adds	r3, #8
    1ef0:	str	r3, [r4, r2]
    1ef2:	movw	r2, #9256	; 0x2428
    1ef6:	ldr	r3, [r4, r2]
    1ef8:	adds	r3, #4
    1efa:	str	r3, [r4, r2]
    uint32_t nfree = storage_->freeClusters(storage) ; 
    write64((uint64_t)nclust*nsect*512L);  // max capacity
    write64((uint64_t)nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->getStorageName(storage);
    1efc:	ldr	r0, [r4, #0]
    1efe:	mov	r1, r5
    1f00:	ldr	r3, [r0, #0]
    1f02:	ldr	r3, [r3, #28]
    1f04:	blx	r3
    1f06:	mov	r5, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1f08:	bl	d540 <strlen>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1f0c:	mov	r1, r0
    1f0e:	mov	r0, r5
    1f10:	bl	a3fc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1f14:	ldr	r0, [pc, #140]	; (1fa4 <MTPD::GetStorageInfo(unsigned long)+0x188>)
    1f16:	bl	b728 <Print::println()>
    Serial.println(name);
    writestring(name);  // storage descriptor
    1f1a:	mov	r1, r5
    1f1c:	mov	r0, r4
    1f1e:	bl	19b4 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    1f22:	mov	r0, r4
    1f24:	ldr	r1, [pc, #128]	; (1fa8 <MTPD::GetStorageInfo(unsigned long)+0x18c>)
    1f26:	bl	19b4 <MTPD::writestring(char const*)>
  }
    1f2a:	add	sp, #36	; 0x24
    1f2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f30:	movs	r2, #2
    1f32:	add.w	r1, sp, #6
    1f36:	mov	r0, r4
    1f38:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1f3c:	b.n	1e4e <MTPD::GetStorageInfo(unsigned long)+0x32>
    1f3e:	movs	r2, #8
    1f40:	add	r1, sp, #24
    1f42:	mov	r0, r4
    1f44:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1f48:	umull	r0, r1, r7, r8
    1f4c:	ldrb	r2, [r4, r6]
    1f4e:	lsls	r3, r1, #9
    1f50:	lsls	r1, r0, #9
    1f52:	orr.w	r3, r3, r0, lsr #23
    1f56:	str	r1, [sp, #16]
    1f58:	str	r3, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1f5a:	cmp	r2, #0
    1f5c:	bne.n	1ee2 <MTPD::GetStorageInfo(unsigned long)+0xc6>
    1f5e:	movs	r2, #8
    1f60:	add	r1, sp, #16
    1f62:	mov	r0, r4
    1f64:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1f68:	mov.w	r2, #4294967295
    1f6c:	ldrb	r3, [r4, r6]
    1f6e:	str	r2, [sp, #12]
    1f70:	cmp	r3, #0
    1f72:	bne.n	1ef2 <MTPD::GetStorageInfo(unsigned long)+0xd6>
    1f74:	movs	r2, #4
    1f76:	add	r1, sp, #12
    1f78:	mov	r0, r4
    1f7a:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1f7e:	b.n	1efc <MTPD::GetStorageInfo(unsigned long)+0xe0>
    1f80:	movs	r2, #2
    1f82:	add.w	r1, sp, #10
    1f86:	mov	r0, r4
    1f88:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1f8c:	ldrb	r3, [r4, r7]
    1f8e:	strh.w	r6, [sp, #8]
    1f92:	cmp	r3, #0
    1f94:	bne.w	1e80 <MTPD::GetStorageInfo(unsigned long)+0x64>
    1f98:	movs	r2, #2
    1f9a:	add	r1, sp, #8
    1f9c:	mov	r0, r4
    1f9e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    1fa2:	b.n	1e8a <MTPD::GetStorageInfo(unsigned long)+0x6e>
    1fa4:	.word	0x20000c58
    1fa8:	.word	0x20000174

00001fac <MTPD::GetNumObjects(unsigned long, unsigned long)>:
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    1fac:	push	{r4, r5, r6, lr}
    1fae:	mov	r5, r0
    storage_->StartGetObjectHandles(storage, parent);
    1fb0:	ldr	r0, [r0, #0]
    int num = 0;
    1fb2:	movs	r4, #0
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    1fb4:	mov	r6, r1
    storage_->StartGetObjectHandles(storage, parent);
    1fb6:	ldr	r3, [r0, #0]
    1fb8:	ldr	r3, [r3, #32]
    1fba:	blx	r3
    1fbc:	b.n	1fc0 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    int num = 0;
    while (storage_->GetNextObjectHandle(storage)) num++;
    1fbe:	adds	r4, #1
    1fc0:	ldr	r0, [r5, #0]
    1fc2:	mov	r1, r6
    1fc4:	ldr	r3, [r0, #0]
    1fc6:	ldr	r3, [r3, #36]	; 0x24
    1fc8:	blx	r3
    1fca:	cmp	r0, #0
    1fcc:	bne.n	1fbe <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>
    return num;
  }
    1fce:	mov	r0, r4
    1fd0:	pop	{r4, r5, r6, pc}
    1fd2:	nop

00001fd4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1fd4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (write_get_length_) {
    1fd8:	movw	r5, #9252	; 0x2424
    while (storage_->GetNextObjectHandle(storage)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1fdc:	sub	sp, #8
    1fde:	mov	r4, r0
    if (write_get_length_) {
    1fe0:	ldrb	r3, [r0, r5]
    1fe2:	cbnz	r3, 203a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x66>
    1fe4:	mov	r6, r1
    1fe6:	mov	r8, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    1fe8:	bl	1fac <MTPD::GetNumObjects(unsigned long, unsigned long)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1fec:	ldrb	r3, [r4, r5]
    1fee:	str	r0, [sp, #4]
    1ff0:	cbz	r3, 204e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x7a>
      {
        write_length_ += len;
    1ff2:	movw	r2, #9256	; 0x2428
    1ff6:	ldr	r3, [r4, r2]
    1ff8:	adds	r3, #4
    1ffa:	str	r3, [r4, r2]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    1ffc:	ldr	r0, [r4, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    1ffe:	movw	r7, #9252	; 0x2424
      {
        write_length_ += len;
    2002:	movw	r5, #9256	; 0x2428
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    2006:	mov	r2, r8
    2008:	ldr	r3, [r0, #0]
    200a:	mov	r1, r6
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    200c:	add	r7, r4
      {
        write_length_ += len;
    200e:	add	r5, r4
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
    2010:	ldr	r3, [r3, #32]
    2012:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    2014:	ldr	r0, [r4, #0]
    2016:	mov	r1, r6
    2018:	ldr	r3, [r0, #0]
    201a:	ldr	r3, [r3, #36]	; 0x24
    201c:	blx	r3
    201e:	cbz	r0, 2048 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x74>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2020:	ldrb	r3, [r7, #0]
    2022:	str	r0, [sp, #0]
    2024:	cbz	r3, 202e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
      {
        write_length_ += len;
    2026:	ldr	r3, [r5, #0]
    2028:	adds	r3, #4
    202a:	str	r3, [r5, #0]
    202c:	b.n	2014 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x40>
    202e:	movs	r2, #4
    2030:	mov	r1, sp
    2032:	mov	r0, r4
    2034:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2038:	b.n	2014 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x40>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    203a:	bl	1fac <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    203e:	adds	r0, #1
    2040:	movw	r3, #9256	; 0x2428
    2044:	lsls	r0, r0, #2
    2046:	str	r0, [r4, r3]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(storage, parent);
      while ((handle = storage_->GetNextObjectHandle(storage))) write32(handle);
    }
  }
    2048:	add	sp, #8
    204a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    204e:	movs	r2, #4
    2050:	mov	r0, r4
    2052:	add.w	r1, sp, r2
    2056:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    205a:	b.n	1ffc <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x28>

0000205c <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    205c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2060:	mov	r4, r0
    2062:	sub	sp, #328	; 0x148
    char filename[256];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    2064:	ldr	r0, [r0, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2066:	movw	r6, #9252	; 0x2424
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    char filename[256];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    206a:	add.w	r5, sp, #10
    206e:	add	r7, sp, #24
    2070:	ldr.w	lr, [r0]
    2074:	add	r3, sp, #20
    2076:	str	r5, [sp, #4]
    2078:	add	r2, sp, #72	; 0x48
    207a:	str	r7, [sp, #0]
    207c:	ldr.w	r8, [lr, #40]	; 0x28
    2080:	blx	r8
    2082:	ldrh	r2, [r5, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2084:	ldrb	r3, [r4, r6]
    2086:	str	r2, [sp, #28]
    2088:	cmp	r3, #0
    208a:	beq.w	219e <MTPD::GetObjectInfo(unsigned long)+0x142>
      {
        write_length_ += len;
    208e:	movw	r2, #9256	; 0x2428
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2092:	ldr	r1, [sp, #20]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    2094:	ldr	r3, [r4, r2]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2096:	adds	r1, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    2098:	add.w	r3, r3, #4
    209c:	str	r3, [r4, r2]
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    209e:	beq.w	22ee <MTPD::GetObjectInfo(unsigned long)+0x292>
    20a2:	movs	r3, #0
    20a4:	strh.w	r3, [sp, #16]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    20a8:	movw	r2, #9256	; 0x2428
    20ac:	movs	r1, #0
    20ae:	ldr	r3, [r4, r2]
    20b0:	strh.w	r1, [sp, #14]
    20b4:	adds	r3, #2
    20b6:	str	r3, [r4, r2]
    20b8:	movw	r2, #9256	; 0x2428
    20bc:	ldr	r1, [sp, #20]
    20be:	ldr	r3, [r4, r2]
    20c0:	str	r1, [sp, #60]	; 0x3c
    20c2:	adds	r3, #2
    20c4:	str	r3, [r4, r2]
    20c6:	movw	r2, #9256	; 0x2428
    20ca:	movs	r1, #0
    20cc:	ldr	r3, [r4, r2]
    20ce:	strh.w	r1, [sp, #12]
    20d2:	adds	r3, #4
    20d4:	str	r3, [r4, r2]
    20d6:	movw	r2, #9256	; 0x2428
    20da:	movs	r1, #0
    20dc:	ldr	r3, [r4, r2]
    20de:	str	r1, [sp, #56]	; 0x38
    20e0:	adds	r3, #2
    20e2:	str	r3, [r4, r2]
    20e4:	movw	r2, #9256	; 0x2428
    20e8:	movs	r1, #0
    20ea:	ldr	r3, [r4, r2]
    20ec:	str	r1, [sp, #52]	; 0x34
    20ee:	adds	r3, #4
    20f0:	str	r3, [r4, r2]
    20f2:	movw	r2, #9256	; 0x2428
    20f6:	movs	r1, #0
    20f8:	ldr	r3, [r4, r2]
    20fa:	str	r1, [sp, #48]	; 0x30
    20fc:	adds	r3, #4
    20fe:	str	r3, [r4, r2]
    2100:	movw	r2, #9256	; 0x2428
    2104:	movs	r1, #0
    2106:	ldr	r3, [r4, r2]
    2108:	str	r1, [sp, #44]	; 0x2c
    210a:	adds	r3, #4
    210c:	str	r3, [r4, r2]
    210e:	movw	r2, #9256	; 0x2428
    2112:	movs	r1, #0
    2114:	ldr	r3, [r4, r2]
    2116:	str	r1, [sp, #40]	; 0x28
    2118:	adds	r3, #4
    211a:	str	r3, [r4, r2]
    211c:	movw	r2, #9256	; 0x2428
    2120:	movs	r1, #0
    2122:	ldr	r3, [r4, r2]
    2124:	str	r1, [sp, #36]	; 0x24
    2126:	adds	r3, #4
    2128:	str	r3, [r4, r2]
    212a:	movw	r2, #9256	; 0x2428
    212e:	ldr	r1, [r7, #0]
    2130:	ldr	r3, [r4, r2]
    2132:	str	r1, [sp, #32]
    2134:	adds	r3, #4
    2136:	str	r3, [r4, r2]
    2138:	ldr	r2, [sp, #20]
    213a:	movw	r1, #9256	; 0x2428
    213e:	sub.w	r2, r2, #4294967295
    2142:	ldr	r3, [r4, r1]
    2144:	clz	r2, r2
    2148:	adds	r3, #4
    214a:	lsrs	r2, r2, #5
    214c:	str	r3, [r4, r1]
    214e:	strh.w	r2, [sp, #18]
    2152:	movw	r2, #9256	; 0x2428
    2156:	movs	r1, #0
    2158:	ldr	r3, [r4, r2]
    215a:	str	r1, [sp, #68]	; 0x44
    215c:	adds	r3, #2
    215e:	str	r3, [r4, r2]
    2160:	movw	r2, #9256	; 0x2428
    2164:	movs	r1, #0
    2166:	ldr	r3, [r4, r2]
    2168:	str	r1, [sp, #64]	; 0x40
    216a:	adds	r3, #4
    216c:	str	r3, [r4, r2]
    216e:	movw	r2, #9256	; 0x2428
    2172:	ldr	r3, [r4, r2]
    2174:	adds	r3, #4
    2176:	str	r3, [r4, r2]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    2178:	add	r1, sp, #72	; 0x48
    217a:	mov	r0, r4
    217c:	bl	19b4 <MTPD::writestring(char const*)>
    writestring("");  // date created
    2180:	mov	r0, r4
    2182:	ldr	r1, [pc, #372]	; (22f8 <MTPD::GetObjectInfo(unsigned long)+0x29c>)
    2184:	bl	19b4 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    2188:	mov	r0, r4
    218a:	ldr	r1, [pc, #364]	; (22f8 <MTPD::GetObjectInfo(unsigned long)+0x29c>)
    218c:	bl	19b4 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    2190:	mov	r0, r4
    2192:	ldr	r1, [pc, #356]	; (22f8 <MTPD::GetObjectInfo(unsigned long)+0x29c>)
    2194:	bl	19b4 <MTPD::writestring(char const*)>
  }
    2198:	add	sp, #328	; 0x148
    219a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    219e:	movs	r2, #4
    21a0:	add	r1, sp, #28
    21a2:	mov	r0, r4
    21a4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    write32(store); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    21a8:	ldr	r2, [sp, #20]
    21aa:	movw	r3, #12289	; 0x3001
    21ae:	ldrb	r5, [r4, r6]
    21b0:	adds	r2, #1
    21b2:	it	ne
    21b4:	movne	r3, #0
    21b6:	strh.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    21ba:	cmp	r5, #0
    21bc:	bne.w	20a8 <MTPD::GetObjectInfo(unsigned long)+0x4c>
    21c0:	add	r1, sp, #16
    21c2:	movs	r2, #2
    21c4:	mov	r0, r4
    21c6:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    21ca:	ldrb	r3, [r4, r6]
    21cc:	strh.w	r5, [sp, #14]
    21d0:	cmp	r3, #0
    21d2:	bne.w	20b8 <MTPD::GetObjectInfo(unsigned long)+0x5c>
    21d6:	movs	r2, #2
    21d8:	add.w	r1, sp, #14
    21dc:	mov	r0, r4
    21de:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    21e2:	ldr	r2, [sp, #20]
    21e4:	ldrb	r3, [r4, r6]
    21e6:	str	r2, [sp, #60]	; 0x3c
    21e8:	cmp	r3, #0
    21ea:	bne.w	20c6 <MTPD::GetObjectInfo(unsigned long)+0x6a>
    21ee:	add	r1, sp, #60	; 0x3c
    21f0:	movs	r2, #4
    21f2:	mov	r0, r4
    21f4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    21f8:	ldrb	r3, [r4, r6]
    21fa:	strh.w	r5, [sp, #12]
    21fe:	cmp	r3, #0
    2200:	bne.w	20d6 <MTPD::GetObjectInfo(unsigned long)+0x7a>
    2204:	add	r1, sp, #12
    2206:	movs	r2, #2
    2208:	mov	r0, r4
    220a:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    220e:	ldrb	r3, [r4, r6]
    2210:	str	r5, [sp, #56]	; 0x38
    2212:	cmp	r3, #0
    2214:	bne.w	20e4 <MTPD::GetObjectInfo(unsigned long)+0x88>
    2218:	add	r1, sp, #56	; 0x38
    221a:	movs	r2, #4
    221c:	mov	r0, r4
    221e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2222:	ldrb	r3, [r4, r6]
    2224:	str	r5, [sp, #52]	; 0x34
    2226:	cmp	r3, #0
    2228:	bne.w	20f2 <MTPD::GetObjectInfo(unsigned long)+0x96>
    222c:	add	r1, sp, #52	; 0x34
    222e:	movs	r2, #4
    2230:	mov	r0, r4
    2232:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2236:	ldrb	r3, [r4, r6]
    2238:	str	r5, [sp, #48]	; 0x30
    223a:	cmp	r3, #0
    223c:	bne.w	2100 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    2240:	add	r1, sp, #48	; 0x30
    2242:	movs	r2, #4
    2244:	mov	r0, r4
    2246:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    224a:	ldrb	r3, [r4, r6]
    224c:	str	r5, [sp, #44]	; 0x2c
    224e:	cmp	r3, #0
    2250:	bne.w	210e <MTPD::GetObjectInfo(unsigned long)+0xb2>
    2254:	add	r1, sp, #44	; 0x2c
    2256:	movs	r2, #4
    2258:	mov	r0, r4
    225a:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    225e:	ldrb	r3, [r4, r6]
    2260:	str	r5, [sp, #40]	; 0x28
    2262:	cmp	r3, #0
    2264:	bne.w	211c <MTPD::GetObjectInfo(unsigned long)+0xc0>
    2268:	add	r1, sp, #40	; 0x28
    226a:	movs	r2, #4
    226c:	mov	r0, r4
    226e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2272:	ldrb	r3, [r4, r6]
    2274:	str	r5, [sp, #36]	; 0x24
    2276:	cmp	r3, #0
    2278:	bne.w	212a <MTPD::GetObjectInfo(unsigned long)+0xce>
    227c:	movw	r5, #9252	; 0x2424
    2280:	movs	r2, #4
    2282:	add	r1, sp, #36	; 0x24
    2284:	mov	r0, r4
    2286:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    228a:	ldr	r2, [r7, #0]
    228c:	ldrb	r3, [r4, r5]
    228e:	str	r2, [sp, #32]
    2290:	cmp	r3, #0
    2292:	bne.w	2138 <MTPD::GetObjectInfo(unsigned long)+0xdc>
    2296:	add	r1, sp, #32
    2298:	movs	r2, #4
    229a:	mov	r0, r4
    229c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    22a0:	ldr	r3, [sp, #20]
    22a2:	ldrb	r7, [r4, r5]
    22a4:	sub.w	r3, r3, #4294967295
    22a8:	clz	r3, r3
    22ac:	lsrs	r3, r3, #5
    22ae:	strh.w	r3, [sp, #18]
    22b2:	cmp	r7, #0
    22b4:	bne.w	2152 <MTPD::GetObjectInfo(unsigned long)+0xf6>
    22b8:	add.w	r1, sp, #18
    22bc:	movs	r2, #2
    22be:	mov	r0, r4
    22c0:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    22c4:	ldrb	r6, [r4, r5]
    22c6:	str	r7, [sp, #68]	; 0x44
    22c8:	cmp	r6, #0
    22ca:	bne.w	2160 <MTPD::GetObjectInfo(unsigned long)+0x104>
    22ce:	add	r1, sp, #68	; 0x44
    22d0:	movs	r2, #4
    22d2:	mov	r0, r4
    22d4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    22d8:	ldrb	r3, [r4, r5]
    22da:	str	r6, [sp, #64]	; 0x40
    22dc:	cmp	r3, #0
    22de:	bne.w	216e <MTPD::GetObjectInfo(unsigned long)+0x112>
    22e2:	add	r1, sp, #64	; 0x40
    22e4:	movs	r2, #4
    22e6:	mov	r0, r4
    22e8:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    22ec:	b.n	2178 <MTPD::GetObjectInfo(unsigned long)+0x11c>
    22ee:	movw	r3, #12289	; 0x3001
    22f2:	strh.w	r3, [sp, #16]
    22f6:	b.n	20a8 <MTPD::GetObjectInfo(unsigned long)+0x4c>
    22f8:	.word	0x20000174

000022fc <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    22fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2300:	movw	r2, #9252	; 0x2424
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    2304:	ldr.w	r8, [pc, #128]	; 2388 <MTPD::getObjectPropsSupported(unsigned long)+0x8c>
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    2308:	sub	sp, #12
    230a:	mov	r9, r0
      write32(propertyListNum);
    230c:	ldr.w	r3, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2310:	ldrb	r2, [r0, r2]
    2312:	str	r3, [sp, #4]
    2314:	cbz	r2, 2372 <MTPD::getObjectPropsSupported(unsigned long)+0x76>
      {
        write_length_ += len;
    2316:	movw	r1, #9256	; 0x2428
    231a:	ldr	r2, [r0, r1]
    231c:	adds	r2, #4
    231e:	str	r2, [r0, r1]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2320:	cbz	r3, 236c <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    2322:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    2326:	movw	r6, #9256	; 0x2428
    232a:	ldr	r5, [pc, #88]	; (2384 <MTPD::getObjectPropsSupported(unsigned long)+0x88>)
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    232c:	movw	r2, #56321	; 0xdc01
    2330:	add	r7, r9
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    2332:	add	r6, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2334:	movs	r4, #0
    2336:	b.n	234c <MTPD::getObjectPropsSupported(unsigned long)+0x50>
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    2338:	ldr	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    233a:	adds	r4, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    233c:	adds	r3, #2
    233e:	str	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2340:	ldr.w	r3, [r8]
    2344:	cmp	r3, r4
    2346:	bls.n	236c <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    2348:	ldrh.w	r2, [r5, #2]!
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    234c:	ldrb	r3, [r7, #0]
    234e:	strh.w	r2, [sp, #2]
    2352:	cmp	r3, #0
    2354:	bne.n	2338 <MTPD::getObjectPropsSupported(unsigned long)+0x3c>
    2356:	movs	r2, #2
    2358:	mov	r0, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    235a:	adds	r4, #1
    235c:	add.w	r1, sp, r2
    2360:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2364:	ldr.w	r3, [r8]
    2368:	cmp	r3, r4
    236a:	bhi.n	2348 <MTPD::getObjectPropsSupported(unsigned long)+0x4c>
    }
    236c:	add	sp, #12
    236e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2372:	movs	r2, #4
    2374:	add.w	r1, sp, r2
    2378:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    237c:	ldr.w	r3, [r8]
    2380:	b.n	2320 <MTPD::getObjectPropsSupported(unsigned long)+0x24>
    2382:	nop
    2384:	.word	0x20000280
    2388:	.word	0x20000bd0

0000238c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    238c:	mvn.w	r3, #56320	; 0xdc00
    2390:	add	r3, r1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    2392:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2396:	mov	r4, r0
    2398:	sub	sp, #148	; 0x94
      switch(p1)
    239a:	cmp	r3, #67	; 0x43
    239c:	bhi.w	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    23a0:	tbh	[pc, r3, lsl #1]
    23a4:	.word	0x00d900ba
    23a8:	.word	0x014200f8
    23ac:	.word	0x008c008c
    23b0:	.word	0x01af0161
    23b4:	.word	0x008c01f9
    23b8:	.word	0x008c0243
    23bc:	.word	0x008c008c
    23c0:	.word	0x008c008c
    23c4:	.word	0x008c008c
    23c8:	.word	0x008c008c
    23cc:	.word	0x008c008c
    23d0:	.word	0x008c008c
    23d4:	.word	0x008c008c
    23d8:	.word	0x008c008c
    23dc:	.word	0x008c008c
    23e0:	.word	0x008c008c
    23e4:	.word	0x008c008c
    23e8:	.word	0x008c008c
    23ec:	.word	0x008c008c
    23f0:	.word	0x008c008c
    23f4:	.word	0x008c008c
    23f8:	.word	0x008c008c
    23fc:	.word	0x008c008c
    2400:	.word	0x008c008c
    2404:	.word	0x008c008c
    2408:	.word	0x008c008c
    240c:	.word	0x008c008c
    2410:	.word	0x008c008c
    2414:	.word	0x008c008c
    2418:	.word	0x008c008c
    241c:	.word	0x008c008c
    2420:	.word	0x008c008c
    2424:	.word	0x008c028b
    2428:	.word	0x008f008c
    242c:	movs	r2, #2
    242e:	add.w	r1, sp, #66	; 0x42
    2432:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2436:	movs	r3, #10
    2438:	ldrb	r6, [r4, r5]
    243a:	strh.w	r3, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    243e:	cmp	r6, #0
    2440:	bne.w	28d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x54c>
    2444:	movs	r2, #2
    2446:	add	r1, sp, #64	; 0x40
    2448:	mov	r0, r4
    244a:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    244e:	ldrb	r3, [r4, r5]
    2450:	strb.w	r6, [sp, #24]
    2454:	cmp	r3, #0
    2456:	bne.w	28e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x556>
    245a:	movs	r2, #1
    245c:	add	r1, sp, #24
    245e:	mov	r0, r4
    2460:	mov.w	r8, #0
    2464:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2468:	mov.w	r9, #0
    246c:	ldrb	r3, [r4, r5]
    246e:	strd	r8, r9, [sp, #136]	; 0x88
    2472:	cmp	r3, #0
    2474:	bne.w	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x560>
    2478:	movs	r2, #8
    247a:	add	r1, sp, #136	; 0x88
    247c:	mov	r0, r4
    247e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2482:	ldrb	r7, [r4, r5]
    2484:	strd	r8, r9, [sp, #128]	; 0x80
    2488:	cmp	r7, #0
    248a:	bne.w	265a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    248e:	movs	r2, #8
    2490:	add	r1, sp, #128	; 0x80
    2492:	mov	r0, r4
    2494:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2498:	ldrb	r6, [r4, r5]
    249a:	str	r7, [sp, #112]	; 0x70
    249c:	cbnz	r6, 24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    249e:	movs	r2, #4
    24a0:	add	r1, sp, #112	; 0x70
    24a2:	mov	r0, r4
    24a4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    24a8:	ldrb	r3, [r4, r5]
    24aa:	strb.w	r6, [sp, #23]
    24ae:	cbnz	r3, 2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    24b0:	mov	r0, r4
    24b2:	movs	r2, #1
    24b4:	add.w	r1, sp, #23
    24b8:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
          write8(0);
          break;
        default:
          break;
      }
    }
    24bc:	add	sp, #148	; 0x94
    24be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    24c2:	movw	r5, #9252	; 0x2424
    24c6:	movw	r2, #56388	; 0xdc44
    24ca:	ldrb	r3, [r0, r5]
    24cc:	strh.w	r2, [sp, #70]	; 0x46
    24d0:	cmp	r3, #0
    24d2:	beq.w	2a7c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f0>
      {
        write_length_ += len;
    24d6:	movw	r2, #9256	; 0x2428
    24da:	ldr	r3, [r4, r2]
    24dc:	adds	r3, #2
    24de:	str	r3, [r4, r2]
    24e0:	movw	r2, #9256	; 0x2428
    24e4:	ldr	r3, [r4, r2]
    24e6:	adds	r3, #2
    24e8:	str	r3, [r4, r2]
    24ea:	movw	r2, #9256	; 0x2428
    24ee:	ldr	r3, [r4, r2]
    24f0:	adds	r3, #1
    24f2:	str	r3, [r4, r2]
    24f4:	movw	r2, #9256	; 0x2428
    24f8:	ldr	r3, [r4, r2]
    24fa:	adds	r3, #1
    24fc:	str	r3, [r4, r2]
    24fe:	movw	r2, #9256	; 0x2428
    2502:	ldr	r3, [r4, r2]
    2504:	adds	r3, #4
    2506:	str	r3, [r4, r2]
    2508:	movw	r2, #9256	; 0x2428
    250c:	ldr	r3, [r4, r2]
    250e:	adds	r3, #1
    2510:	str	r3, [r4, r2]
          write8(0);
          break;
        default:
          break;
      }
    }
    2512:	add	sp, #148	; 0x94
    2514:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2518:	movw	r5, #9252	; 0x2424
    251c:	movw	r2, #56321	; 0xdc01
    2520:	ldrb	r3, [r0, r5]
    2522:	strh.w	r2, [sp, #30]
    2526:	cmp	r3, #0
    2528:	beq.w	2a02 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x676>
      {
        write_length_ += len;
    252c:	movw	r2, #9256	; 0x2428
    2530:	ldr	r3, [r4, r2]
    2532:	adds	r3, #2
    2534:	str	r3, [r4, r2]
    2536:	movw	r2, #9256	; 0x2428
    253a:	ldr	r3, [r4, r2]
    253c:	adds	r3, #2
    253e:	str	r3, [r4, r2]
    2540:	movw	r2, #9256	; 0x2428
    2544:	ldr	r3, [r4, r2]
    2546:	adds	r3, #1
    2548:	str	r3, [r4, r2]
    254a:	movw	r2, #9256	; 0x2428
    254e:	ldr	r3, [r4, r2]
    2550:	adds	r3, #4
    2552:	str	r3, [r4, r2]
    2554:	b.n	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2556:	movw	r5, #9252	; 0x2424
    255a:	movw	r2, #56322	; 0xdc02
    255e:	ldrb	r3, [r0, r5]
    2560:	strh.w	r2, [sp, #36]	; 0x24
    2564:	cmp	r3, #0
    2566:	beq.w	297a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ee>
      {
        write_length_ += len;
    256a:	movw	r2, #9256	; 0x2428
    256e:	ldr	r3, [r4, r2]
    2570:	adds	r3, #2
    2572:	str	r3, [r4, r2]
    2574:	movw	r2, #9256	; 0x2428
    2578:	ldr	r3, [r4, r2]
    257a:	adds	r3, #2
    257c:	str	r3, [r4, r2]
    257e:	movw	r2, #9256	; 0x2428
    2582:	ldr	r3, [r4, r2]
    2584:	adds	r3, #1
    2586:	str	r3, [r4, r2]
    2588:	movw	r2, #9256	; 0x2428
    258c:	ldr	r3, [r4, r2]
    258e:	adds	r3, #2
    2590:	str	r3, [r4, r2]
    2592:	b.n	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2594:	movw	r5, #9252	; 0x2424
    2598:	movw	r2, #56323	; 0xdc03
    259c:	ldrb	r3, [r0, r5]
    259e:	strh.w	r2, [sp, #42]	; 0x2a
    25a2:	cmp	r3, #0
    25a4:	bne.n	256a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1de>
    25a6:	movs	r2, #2
    25a8:	add.w	r1, sp, #42	; 0x2a
    25ac:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    25b0:	movs	r7, #4
    25b2:	ldrb.w	r8, [r4, r5]
    25b6:	strh.w	r7, [sp, #40]	; 0x28
    25ba:	cmp.w	r8, #0
    25be:	bne.n	2574 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    25c0:	movs	r2, #2
    25c2:	add	r1, sp, #40	; 0x28
    25c4:	mov	r0, r4
    25c6:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    25ca:	ldrb	r6, [r4, r5]
    25cc:	strb.w	r8, [sp, #9]
    25d0:	cmp	r6, #0
    25d2:	bne.n	257e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    25d4:	movs	r2, #1
    25d6:	add.w	r1, sp, #9
    25da:	mov	r0, r4
    25dc:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    25e0:	ldrb.w	r8, [r4, r5]
    25e4:	strh.w	r6, [sp, #38]	; 0x26
    25e8:	cmp.w	r8, #0
    25ec:	bne.n	2588 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    25ee:	movs	r2, #2
    25f0:	add.w	r1, sp, #38	; 0x26
    25f4:	mov	r0, r4
    25f6:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    25fa:	ldrb	r6, [r4, r5]
    25fc:	str.w	r8, [sp, #84]	; 0x54
    2600:	cmp	r6, #0
    2602:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2606:	mov	r2, r7
    2608:	add	r1, sp, #84	; 0x54
    260a:	mov	r0, r4
    260c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2610:	ldrb	r3, [r4, r5]
    2612:	strb.w	r6, [sp, #8]
    2616:	cmp	r3, #0
    2618:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    261c:	mov	r0, r4
    261e:	movs	r2, #1
    2620:	add	r1, sp, #8
    2622:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2626:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2628:	movw	r5, #9252	; 0x2424
    262c:	movw	r2, #56324	; 0xdc04
    2630:	ldrb	r3, [r0, r5]
    2632:	strh.w	r2, [sp, #46]	; 0x2e
    2636:	cmp	r3, #0
    2638:	beq.w	28f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x56c>
      {
        write_length_ += len;
    263c:	movw	r2, #9256	; 0x2428
    2640:	ldr	r3, [r0, r2]
    2642:	adds	r3, #2
    2644:	str	r3, [r0, r2]
    2646:	movw	r2, #9256	; 0x2428
    264a:	ldr	r3, [r4, r2]
    264c:	adds	r3, #2
    264e:	str	r3, [r4, r2]
    2650:	movw	r2, #9256	; 0x2428
    2654:	ldr	r3, [r4, r2]
    2656:	adds	r3, #1
    2658:	str	r3, [r4, r2]
    265a:	movw	r2, #9256	; 0x2428
    265e:	ldr	r3, [r4, r2]
    2660:	adds	r3, #8
    2662:	str	r3, [r4, r2]
    2664:	b.n	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2666:	movw	r5, #9252	; 0x2424
    266a:	movw	r2, #56327	; 0xdc07
    266e:	ldrb	r3, [r0, r5]
    2670:	strh.w	r2, [sp, #50]	; 0x32
    2674:	cmp	r3, #0
    2676:	bne.w	24d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    267a:	movs	r2, #2
    267c:	add.w	r1, sp, #50	; 0x32
    2680:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2684:	movw	r2, #65535	; 0xffff
    2688:	ldrb	r3, [r4, r5]
    268a:	strh.w	r2, [sp, #48]	; 0x30
    268e:	cmp	r3, #0
    2690:	bne.w	24e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    2694:	movs	r2, #2
    2696:	add	r1, sp, #48	; 0x30
    2698:	mov	r0, r4
    269a:	movs	r6, #1
    269c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    26a0:	ldrb	r7, [r4, r5]
    26a2:	strb.w	r6, [sp, #14]
    26a6:	cmp	r7, #0
    26a8:	bne.w	24ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    26ac:	mov	r2, r6
    26ae:	add.w	r1, sp, #14
    26b2:	mov	r0, r4
    26b4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    26b8:	ldrb.w	r8, [r4, r5]
    26bc:	strb.w	r7, [sp, #13]
    26c0:	cmp.w	r8, #0
    26c4:	bne.w	24f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    26c8:	mov	r2, r6
    26ca:	add.w	r1, sp, #13
    26ce:	mov	r0, r4
    26d0:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    26d4:	ldrb	r7, [r4, r5]
    26d6:	str.w	r8, [sp, #92]	; 0x5c
    26da:	cmp	r7, #0
    26dc:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    26e0:	movs	r2, #4
    26e2:	add	r1, sp, #92	; 0x5c
    26e4:	mov	r0, r4
    26e6:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    26ea:	ldrb	r3, [r4, r5]
    26ec:	strb.w	r7, [sp, #12]
    26f0:	cmp	r3, #0
    26f2:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    26f6:	mov	r2, r6
    26f8:	mov	r0, r4
    26fa:	add	r1, sp, #12
    26fc:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2700:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2702:	movw	r5, #9252	; 0x2424
    2706:	movw	r2, #56328	; 0xdc08
    270a:	ldrb	r3, [r0, r5]
    270c:	strh.w	r2, [sp, #54]	; 0x36
    2710:	cmp	r3, #0
    2712:	bne.w	24d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    2716:	movs	r2, #2
    2718:	add.w	r1, sp, #54	; 0x36
    271c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2720:	movw	r3, #65535	; 0xffff
    2724:	ldrb	r7, [r4, r5]
    2726:	strh.w	r3, [sp, #52]	; 0x34
    272a:	cmp	r7, #0
    272c:	bne.w	24e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    2730:	movs	r2, #2
    2732:	add	r1, sp, #52	; 0x34
    2734:	mov	r0, r4
    2736:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    273a:	ldrb	r6, [r4, r5]
    273c:	strb.w	r7, [sp, #17]
    2740:	cmp	r6, #0
    2742:	bne.w	24ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    2746:	movs	r2, #1
    2748:	add.w	r1, sp, #17
    274c:	mov	r0, r4
    274e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2752:	ldrb	r7, [r4, r5]
    2754:	strb.w	r6, [sp, #16]
    2758:	cmp	r7, #0
    275a:	bne.w	24f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    275e:	movs	r2, #1
    2760:	add	r1, sp, #16
    2762:	mov	r0, r4
    2764:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2768:	ldrb	r6, [r4, r5]
    276a:	str	r7, [sp, #96]	; 0x60
    276c:	cmp	r6, #0
    276e:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2772:	movs	r2, #4
    2774:	add	r1, sp, #96	; 0x60
    2776:	mov	r0, r4
    2778:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    277c:	ldrb	r3, [r4, r5]
    277e:	strb.w	r6, [sp, #15]
    2782:	cmp	r3, #0
    2784:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2788:	mov	r0, r4
    278a:	movs	r2, #1
    278c:	add.w	r1, sp, #15
    2790:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2794:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2796:	movw	r5, #9252	; 0x2424
    279a:	movw	r2, #56329	; 0xdc09
    279e:	ldrb	r3, [r0, r5]
    27a0:	strh.w	r2, [sp, #58]	; 0x3a
    27a4:	cmp	r3, #0
    27a6:	bne.w	24d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    27aa:	movs	r2, #2
    27ac:	add.w	r1, sp, #58	; 0x3a
    27b0:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    27b4:	movw	r3, #65535	; 0xffff
    27b8:	ldrb	r7, [r4, r5]
    27ba:	strh.w	r3, [sp, #56]	; 0x38
    27be:	cmp	r7, #0
    27c0:	bne.w	24e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    27c4:	movs	r2, #2
    27c6:	add	r1, sp, #56	; 0x38
    27c8:	mov	r0, r4
    27ca:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    27ce:	ldrb	r6, [r4, r5]
    27d0:	strb.w	r7, [sp, #20]
    27d4:	cmp	r6, #0
    27d6:	bne.w	24ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    27da:	movs	r2, #1
    27dc:	add	r1, sp, #20
    27de:	mov	r0, r4
    27e0:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    27e4:	ldrb	r7, [r4, r5]
    27e6:	strb.w	r6, [sp, #19]
    27ea:	cmp	r7, #0
    27ec:	bne.w	24f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    27f0:	movs	r2, #1
    27f2:	add.w	r1, sp, #19
    27f6:	mov	r0, r4
    27f8:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    27fc:	ldrb	r6, [r4, r5]
    27fe:	str	r7, [sp, #100]	; 0x64
    2800:	cmp	r6, #0
    2802:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2806:	movs	r2, #4
    2808:	add	r1, sp, #100	; 0x64
    280a:	mov	r0, r4
    280c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2810:	ldrb	r3, [r4, r5]
    2812:	strb.w	r6, [sp, #18]
    2816:	cmp	r3, #0
    2818:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    281c:	mov	r0, r4
    281e:	movs	r2, #1
    2820:	add.w	r1, sp, #18
    2824:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2828:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    282a:	movw	r5, #9252	; 0x2424
    282e:	movw	r2, #56331	; 0xdc0b
    2832:	ldrb	r3, [r0, r5]
    2834:	strh.w	r2, [sp, #62]	; 0x3e
    2838:	cmp	r3, #0
    283a:	bne.w	252c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a0>
    283e:	movs	r2, #2
    2840:	add.w	r1, sp, #62	; 0x3e
    2844:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2848:	movs	r3, #6
    284a:	ldrb	r7, [r4, r5]
    284c:	strh.w	r3, [sp, #60]	; 0x3c
    2850:	cmp	r7, #0
    2852:	bne.w	2536 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    2856:	movs	r2, #2
    2858:	add	r1, sp, #60	; 0x3c
    285a:	mov	r0, r4
    285c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2860:	ldrb	r6, [r4, r5]
    2862:	strb.w	r7, [sp, #22]
    2866:	cmp	r6, #0
    2868:	bne.w	2540 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    286c:	movs	r2, #1
    286e:	add.w	r1, sp, #22
    2872:	mov	r0, r4
    2874:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2878:	ldrb	r7, [r4, r5]
    287a:	str	r6, [sp, #108]	; 0x6c
    287c:	cmp	r7, #0
    287e:	bne.w	254a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    2882:	movs	r2, #4
    2884:	add	r1, sp, #108	; 0x6c
    2886:	mov	r0, r4
    2888:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    288c:	ldrb	r6, [r4, r5]
    288e:	str	r7, [sp, #104]	; 0x68
    2890:	cmp	r6, #0
    2892:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2896:	movs	r2, #4
    2898:	add	r1, sp, #104	; 0x68
    289a:	mov	r0, r4
    289c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    28a0:	ldrb	r3, [r4, r5]
    28a2:	strb.w	r6, [sp, #21]
    28a6:	cmp	r3, #0
    28a8:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    28ac:	mov	r0, r4
    28ae:	movs	r2, #1
    28b0:	add.w	r1, sp, #21
    28b4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    28b8:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    28ba:	movw	r5, #9252	; 0x2424
    28be:	movw	r2, #56385	; 0xdc41
    28c2:	ldrb	r3, [r0, r5]
    28c4:	strh.w	r2, [sp, #66]	; 0x42
    28c8:	cmp	r3, #0
    28ca:	beq.w	242c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0>
      {
        write_length_ += len;
    28ce:	movw	r2, #9256	; 0x2428
    28d2:	ldr	r3, [r0, r2]
    28d4:	adds	r3, #2
    28d6:	str	r3, [r0, r2]
    28d8:	movw	r2, #9256	; 0x2428
    28dc:	ldr	r3, [r4, r2]
    28de:	adds	r3, #2
    28e0:	str	r3, [r4, r2]
    28e2:	movw	r2, #9256	; 0x2428
    28e6:	ldr	r3, [r4, r2]
    28e8:	adds	r3, #1
    28ea:	str	r3, [r4, r2]
    28ec:	movw	r2, #9256	; 0x2428
    28f0:	ldr	r3, [r4, r2]
    28f2:	adds	r3, #8
    28f4:	str	r3, [r4, r2]
    28f6:	b.n	265a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    28f8:	movs	r2, #2
    28fa:	add.w	r1, sp, #46	; 0x2e
    28fe:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2902:	movs	r6, #8
    2904:	ldrb	r7, [r4, r5]
    2906:	strh.w	r6, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    290a:	cmp	r7, #0
    290c:	bne.w	2646 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ba>
    2910:	movs	r2, #2
    2912:	add	r1, sp, #44	; 0x2c
    2914:	mov	r0, r4
    2916:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    291a:	ldrb	r3, [r4, r5]
    291c:	strb.w	r7, [sp, #11]
    2920:	cmp	r3, #0
    2922:	bne.w	2650 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c4>
    2926:	movs	r2, #1
    2928:	add.w	r1, sp, #11
    292c:	mov	r0, r4
    292e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2932:	movs	r2, #0
    2934:	movs	r3, #0
    2936:	ldrb	r7, [r4, r5]
    2938:	strd	r2, r3, [sp, #120]	; 0x78
    293c:	cmp	r7, #0
    293e:	bne.w	265a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    2942:	mov	r2, r6
    2944:	add	r1, sp, #120	; 0x78
    2946:	mov	r0, r4
    2948:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    294c:	ldrb	r6, [r4, r5]
    294e:	str	r7, [sp, #88]	; 0x58
    2950:	cmp	r6, #0
    2952:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2956:	movs	r2, #4
    2958:	add	r1, sp, #88	; 0x58
    295a:	mov	r0, r4
    295c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2960:	ldrb	r3, [r4, r5]
    2962:	strb.w	r6, [sp, #10]
    2966:	cmp	r3, #0
    2968:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    296c:	mov	r0, r4
    296e:	movs	r2, #1
    2970:	add.w	r1, sp, #10
    2974:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2978:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    297a:	movs	r2, #2
    297c:	add	r1, sp, #36	; 0x24
    297e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2982:	movs	r7, #4
    2984:	ldrb.w	r8, [r4, r5]
    2988:	strh.w	r7, [sp, #34]	; 0x22
    298c:	cmp.w	r8, #0
    2990:	bne.w	2574 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    2994:	movs	r2, #2
    2996:	add.w	r1, sp, #34	; 0x22
    299a:	mov	r0, r4
    299c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    29a0:	ldrb	r6, [r4, r5]
    29a2:	strb.w	r8, [sp, #7]
    29a6:	cmp	r6, #0
    29a8:	bne.w	257e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    29ac:	movs	r2, #1
    29ae:	add.w	r1, sp, #7
    29b2:	mov	r0, r4
    29b4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    29b8:	ldrb.w	r8, [r4, r5]
    29bc:	strh.w	r6, [sp, #32]
    29c0:	cmp.w	r8, #0
    29c4:	bne.w	2588 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    29c8:	movs	r2, #2
    29ca:	add	r1, sp, #32
    29cc:	mov	r0, r4
    29ce:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    29d2:	ldrb	r6, [r4, r5]
    29d4:	str.w	r8, [sp, #80]	; 0x50
    29d8:	cmp	r6, #0
    29da:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    29de:	mov	r2, r7
    29e0:	add	r1, sp, #80	; 0x50
    29e2:	mov	r0, r4
    29e4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    29e8:	ldrb	r3, [r4, r5]
    29ea:	strb.w	r6, [sp, #6]
    29ee:	cmp	r3, #0
    29f0:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    29f4:	mov	r0, r4
    29f6:	movs	r2, #1
    29f8:	add.w	r1, sp, #6
    29fc:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2a00:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2a02:	movs	r2, #2
    2a04:	add.w	r1, sp, #30
    2a08:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2a0c:	movs	r3, #6
    2a0e:	ldrb	r7, [r4, r5]
    2a10:	strh.w	r3, [sp, #28]
    2a14:	cmp	r7, #0
    2a16:	bne.w	2536 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    2a1a:	movs	r2, #2
    2a1c:	add	r1, sp, #28
    2a1e:	mov	r0, r4
    2a20:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2a24:	ldrb	r6, [r4, r5]
    2a26:	strb.w	r7, [sp, #5]
    2a2a:	cmp	r6, #0
    2a2c:	bne.w	2540 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    2a30:	movs	r2, #1
    2a32:	add.w	r1, sp, #5
    2a36:	mov	r0, r4
    2a38:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2a3c:	ldrb	r7, [r4, r5]
    2a3e:	str	r6, [sp, #76]	; 0x4c
    2a40:	cmp	r7, #0
    2a42:	bne.w	254a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    2a46:	movs	r2, #4
    2a48:	add	r1, sp, #76	; 0x4c
    2a4a:	mov	r0, r4
    2a4c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2a50:	ldrb	r6, [r4, r5]
    2a52:	str	r7, [sp, #72]	; 0x48
    2a54:	cmp	r6, #0
    2a56:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2a5a:	movs	r2, #4
    2a5c:	add	r1, sp, #72	; 0x48
    2a5e:	mov	r0, r4
    2a60:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2a64:	ldrb	r3, [r4, r5]
    2a66:	strb.w	r6, [sp, #4]
    2a6a:	cmp	r3, #0
    2a6c:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2a70:	mov	r0, r4
    2a72:	movs	r2, #1
    2a74:	add	r1, sp, #4
    2a76:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2a7a:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2a7c:	movs	r2, #2
    2a7e:	add.w	r1, sp, #70	; 0x46
    2a82:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2a86:	movw	r3, #65535	; 0xffff
    2a8a:	ldrb	r7, [r4, r5]
    2a8c:	strh.w	r3, [sp, #68]	; 0x44
    2a90:	cmp	r7, #0
    2a92:	bne.w	24e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    2a96:	movs	r2, #2
    2a98:	add	r1, sp, #68	; 0x44
    2a9a:	mov	r0, r4
    2a9c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2aa0:	ldrb	r6, [r4, r5]
    2aa2:	strb.w	r7, [sp, #27]
    2aa6:	cmp	r6, #0
    2aa8:	bne.w	24ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    2aac:	movs	r2, #1
    2aae:	add.w	r1, sp, #27
    2ab2:	mov	r0, r4
    2ab4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2ab8:	ldrb	r7, [r4, r5]
    2aba:	strb.w	r6, [sp, #26]
    2abe:	cmp	r7, #0
    2ac0:	bne.w	24f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    2ac4:	movs	r2, #1
    2ac6:	add.w	r1, sp, #26
    2aca:	mov	r0, r4
    2acc:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2ad0:	ldrb	r6, [r4, r5]
    2ad2:	str	r7, [sp, #116]	; 0x74
    2ad4:	cmp	r6, #0
    2ad6:	bne.w	24fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    2ada:	movs	r2, #4
    2adc:	add	r1, sp, #116	; 0x74
    2ade:	mov	r0, r4
    2ae0:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2ae4:	ldrb	r3, [r4, r5]
    2ae6:	strb.w	r6, [sp, #25]
    2aea:	cmp	r3, #0
    2aec:	bne.w	2508 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    2af0:	mov	r0, r4
    2af2:	movs	r2, #1
    2af4:	add.w	r1, sp, #25
    2af8:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
          write8(0);
          break;
        default:
          break;
      }
    }
    2afc:	b.n	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    2afe:	nop

00002b00 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2b00:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b04:	mov	r4, r0
    2b06:	sub	sp, #184	; 0xb8
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2b08:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2b0a:	mov	r5, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2b0c:	add.w	lr, sp, #10
    2b10:	add	r7, sp, #20
    2b12:	ldr	r6, [r0, #0]
    2b14:	add	r3, sp, #16
    2b16:	add	r2, sp, #56	; 0x38
    2b18:	str.w	lr, [sp, #4]
    2b1c:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2b1e:	mov	r8, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2b20:	ldr	r6, [r6, #40]	; 0x28
    2b22:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    2b24:	mvn.w	r3, #56320	; 0xdc00
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    2b28:	ldr	r2, [sp, #16]
      switch(p2)
    2b2a:	add	r3, r5
    2b2c:	cmp	r3, #67	; 0x43
    2b2e:	bhi.n	2bba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2b30:	tbb	[pc, r3]
    2b34:	.word	0xab9c6354
    2b38:	.word	0x464d4343
    2b3c:	.word	0x43784346
    2b40:	.word	0x43434343
    2b44:	.word	0x43434343
    2b48:	.word	0x43434343
    2b4c:	.word	0x43434343
    2b50:	.word	0x43434343
    2b54:	.word	0x43434343
    2b58:	.word	0x43434343
    2b5c:	.word	0x43434343
    2b60:	.word	0x43434343
    2b64:	.word	0x43434343
    2b68:	.word	0x43434343
    2b6c:	.word	0x43434343
    2b70:	.word	0x43434343
    2b74:	.word	0x4d434385
    2b78:	movs	r2, #4
    2b7a:	add	r1, sp, #52	; 0x34
    2b7c:	mov	r0, r4
    2b7e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2b82:	ldr	r2, [sp, #20]
    2b84:	ldrb	r3, [r4, r5]
    2b86:	str	r2, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2b88:	cmp	r3, #0
    2b8a:	bne.n	2c56 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x156>
    2b8c:	movs	r2, #4
    2b8e:	add	r1, sp, #48	; 0x30
    2b90:	mov	r0, r4
    2b92:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2b96:	movs	r3, #1
    2b98:	ldrb	r6, [r4, r5]
    2b9a:	str	r3, [sp, #44]	; 0x2c
    2b9c:	cmp	r6, #0
    2b9e:	bne.n	2c60 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x160>
    2ba0:	movs	r2, #4
    2ba2:	add	r1, sp, #44	; 0x2c
    2ba4:	mov	r0, r4
    2ba6:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2baa:	ldrb	r3, [r4, r5]
    2bac:	str	r6, [sp, #40]	; 0x28
    2bae:	cbnz	r3, 2bea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    2bb0:	mov	r0, r4
    2bb2:	movs	r2, #4
    2bb4:	add	r1, sp, #40	; 0x28
    2bb6:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
          writestring(name);
          break;
        default:
          break;
      }
    }
    2bba:	add	sp, #184	; 0xb8
    2bbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    2bc0:	mov	r0, r4
    2bc2:	ldr	r1, [pc, #264]	; (2ccc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>)
    2bc4:	bl	19b4 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    2bc8:	add	sp, #184	; 0xb8
    2bca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    2bce:	add	r1, sp, #56	; 0x38
    2bd0:	mov	r0, r4
    2bd2:	bl	19b4 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    2bd6:	add	sp, #184	; 0xb8
    2bd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2bdc:	movw	r3, #9252	; 0x2424
    2be0:	str.w	r8, [sp, #24]
    2be4:	ldrb	r3, [r4, r3]
    2be6:	cmp	r3, #0
    2be8:	beq.n	2cc0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c0>
      {
        write_length_ += len;
    2bea:	movw	r2, #9256	; 0x2428
    2bee:	ldr	r3, [r4, r2]
    2bf0:	adds	r3, #4
    2bf2:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    2bf4:	add	sp, #184	; 0xb8
    2bf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    2bfa:	adds	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2bfc:	movw	r2, #9252	; 0x2424
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    2c00:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2c04:	ldrb	r2, [r4, r2]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    2c06:	it	ne
    2c08:	movne.w	r3, #12288	; 0x3000
    2c0c:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2c10:	cmp	r2, #0
    2c12:	beq.n	2cb4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b4>
      {
        write_length_ += len;
    2c14:	movw	r2, #9256	; 0x2428
    2c18:	ldr	r3, [r4, r2]
    2c1a:	adds	r3, #2
    2c1c:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    2c1e:	add	sp, #184	; 0xb8
    2c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2c24:	movw	r3, #9252	; 0x2424
    2c28:	ldr	r2, [sp, #20]
    2c2a:	ldrb	r3, [r4, r3]
    2c2c:	str	r2, [sp, #36]	; 0x24
    2c2e:	cmp	r3, #0
    2c30:	bne.n	2bea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    2c32:	mov	r0, r4
    2c34:	movs	r2, #4
    2c36:	add	r1, sp, #36	; 0x24
    2c38:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2c3c:	b.n	2bba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2c3e:	movw	r5, #9252	; 0x2424
    2c42:	str.w	r8, [sp, #52]	; 0x34
    2c46:	ldrb	r3, [r4, r5]
    2c48:	cmp	r3, #0
    2c4a:	beq.n	2b78 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
      {
        write_length_ += len;
    2c4c:	movw	r2, #9256	; 0x2428
    2c50:	ldr	r3, [r4, r2]
    2c52:	adds	r3, #4
    2c54:	str	r3, [r4, r2]
    2c56:	movw	r2, #9256	; 0x2428
    2c5a:	ldr	r3, [r4, r2]
    2c5c:	adds	r3, #4
    2c5e:	str	r3, [r4, r2]
    2c60:	movw	r2, #9256	; 0x2428
    2c64:	ldr	r3, [r4, r2]
    2c66:	adds	r3, #4
    2c68:	str	r3, [r4, r2]
    2c6a:	b.n	2bea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    2c6c:	movw	r3, #9252	; 0x2424
    2c70:	movs	r2, #0
    2c72:	ldrb	r3, [r4, r3]
    2c74:	strh.w	r2, [sp, #14]
    2c78:	cmp	r3, #0
    2c7a:	bne.n	2c14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x114>
    2c7c:	mov	r0, r4
    2c7e:	movs	r2, #2
    2c80:	add.w	r1, sp, #14
    2c84:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2c88:	b.n	2bba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2c8a:	movw	r6, #9252	; 0x2424
    2c8e:	str	r2, [sp, #32]
    2c90:	ldrb	r5, [r4, r6]
    2c92:	cmp	r5, #0
    2c94:	bne.n	2c60 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x160>
    2c96:	movs	r2, #4
    2c98:	add	r1, sp, #32
    2c9a:	mov	r0, r4
    2c9c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2ca0:	ldrb	r3, [r4, r6]
    2ca2:	str	r5, [sp, #28]
    2ca4:	cmp	r3, #0
    2ca6:	bne.n	2bea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xea>
    2ca8:	mov	r0, r4
    2caa:	movs	r2, #4
    2cac:	add	r1, sp, #28
    2cae:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2cb2:	b.n	2bba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2cb4:	mov	r0, r4
    2cb6:	movs	r2, #2
    2cb8:	add	r1, sp, #12
    2cba:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2cbe:	b.n	2bba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2cc0:	mov	r0, r4
    2cc2:	movs	r2, #4
    2cc4:	add	r1, sp, #24
    2cc6:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    2cca:	b.n	2bba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xba>
    2ccc:	.word	0x20000174

00002cd0 <MTPD::pull_packet(unsigned char*)>:
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
      return 1;
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
    2cd0:	push	{r4, lr}
    2cd2:	mov	r4, r1
      while(!usb_mtp_available());
    2cd4:	bl	9c68 <usb_mtp_available>
    2cd8:	cmp	r0, #0
    2cda:	beq.n	2cd4 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    2cdc:	mov	r0, r4
    2cde:	movs	r1, #60	; 0x3c
    }
    2ce0:	ldmia.w	sp!, {r4, lr}
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
      while(!usb_mtp_available());
      return usb_mtp_recv(data_buffer,60);
    2ce4:	b.w	9ba4 <usb_mtp_recv>

00002ce8 <MTPD::GetObject(unsigned long)>:
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    2ce8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cec:	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    2cee:	ldr	r0, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    2cf0:	sub	sp, #28
      uint32_t size = storage_->GetSize(object_id);
    2cf2:	ldr	r3, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    2cf4:	str	r1, [sp, #16]
      uint32_t size = storage_->GetSize(object_id);
    2cf6:	ldr	r3, [r3, #44]	; 0x2c
    2cf8:	blx	r3

      if (write_get_length_) {
    2cfa:	movw	r3, #9252	; 0x2424
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);
    2cfe:	mov	sl, r0

      if (write_get_length_) {
    2d00:	ldrb.w	r7, [fp, r3]
    2d04:	cmp	r7, #0
    2d06:	bne.n	2dea <MTPD::GetObject(unsigned long)+0x102>
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    2d08:	movw	r2, #9248	; 0x2420
    2d0c:	mov.w	r3, #8192	; 0x2000
    2d10:	str.w	r3, [fp, r2]
        while(pos<size)
    2d14:	cmp	r0, #0
    2d16:	beq.n	2dfe <MTPD::GetObject(unsigned long)+0x116>
    2d18:	mov	r8, r3
    2d1a:	add.w	r6, fp, #544	; 0x220
    2d1e:	add.w	r3, fp, #1056	; 0x420
    2d22:	movw	r9, #9248	; 0x2420
    2d26:	str.w	fp, [sp, #20]
    2d2a:	movs	r5, #12
    2d2c:	add	r9, fp
    2d2e:	mov	fp, r3
    2d30:	mov	r3, r6
    2d32:	mov	r6, r8
    2d34:	mov	r8, r3
    2d36:	b.n	2d7c <MTPD::GetObject(unsigned long)+0x94>
    2d38:	str	r3, [sp, #12]
    2d3a:	rsb	r3, r6, #8192	; 0x2000
    2d3e:	ldr	r2, [sp, #12]
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2d40:	add.w	r0, r8, r5
    2d44:	add.w	r1, fp, r6
    2d48:	cmp	r2, r3
    2d4a:	it	cs
    2d4c:	movcs	r2, r3
    2d4e:	rsb	r3, r5, #512	; 0x200
    2d52:	cmp	r2, r3
    2d54:	mov	r4, r2
    2d56:	it	cs
    2d58:	movcs	r4, r3
    2d5a:	mov	r2, r4
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    2d5c:	add	r5, r4
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2d5e:	bl	9c8c <memcpy>
          disk_pos += to_copy;
    2d62:	ldr.w	r3, [r9]
          pos += to_copy;
    2d66:	add	r7, r4
          len += to_copy;

          if(len==MTP_TX_SIZE)
    2d68:	cmp.w	r5, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    2d6c:	add	r4, r3
    2d6e:	str.w	r4, [r9]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    2d72:	beq.n	2db8 <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    2d74:	cmp	sl, r7
    2d76:	bls.n	2dd0 <MTPD::GetObject(unsigned long)+0xe8>
    2d78:	ldr.w	r6, [r9]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    2d7c:	cmp.w	r6, #8192	; 0x2000
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    2d80:	rsb	r3, r7, sl
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    2d84:	bne.n	2d38 <MTPD::GetObject(unsigned long)+0x50>
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    2d86:	mov	r1, r3
    2d88:	str	r3, [sp, #12]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    2d8a:	ldr	r3, [sp, #20]
    2d8c:	mov	r2, r7
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    2d8e:	cmp.w	r1, #8192	; 0x2000
    2d92:	mov	ip, r1
    2d94:	ldr	r0, [r3, #0]
    2d96:	mov	r3, fp
    2d98:	it	cs
    2d9a:	movcs.w	ip, #8192	; 0x2000
    2d9e:	ldr	r1, [sp, #16]
    2da0:	ldr.w	lr, [r0]
    2da4:	str.w	ip, [sp]
    2da8:	ldr.w	r4, [lr, #52]	; 0x34
    2dac:	blx	r4
    2dae:	mov	r3, r6
    2db0:	movs	r6, #0
            disk_pos=0;
    2db2:	str.w	r6, [r9]
    2db6:	b.n	2d3e <MTPD::GetObject(unsigned long)+0x56>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2db8:	movs	r2, #60	; 0x3c
    2dba:	mov.w	r1, #512	; 0x200
    2dbe:	mov	r0, r8
    2dc0:	bl	9c00 <usb_mtp_send>
    2dc4:	cmp	r0, #0
    2dc6:	ble.n	2db8 <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    2dc8:	cmp	sl, r7
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    2dca:	mov.w	r5, #0
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    2dce:	bhi.n	2d78 <MTPD::GetObject(unsigned long)+0x90>
    2dd0:	mov	r6, r8
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    2dd2:	cbz	r5, 2de4 <MTPD::GetObject(unsigned long)+0xfc>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2dd4:	movs	r2, #60	; 0x3c
    2dd6:	mov.w	r1, #512	; 0x200
    2dda:	mov	r0, r6
    2ddc:	bl	9c00 <usb_mtp_send>
    2de0:	cmp	r0, #0
    2de2:	ble.n	2dd4 <MTPD::GetObject(unsigned long)+0xec>
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    2de4:	add	sp, #28
    2de6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    2dea:	movw	r2, #9256	; 0x2428
    2dee:	ldr.w	r3, [fp, r2]
    2df2:	add	r3, r0
    2df4:	str.w	r3, [fp, r2]
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    2df8:	add	sp, #28
    2dfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dfe:	add.w	r6, fp, #544	; 0x220
    2e02:	b.n	2dd4 <MTPD::GetObject(unsigned long)+0xec>

00002e04 <MTPD::read(char*, unsigned long)>:
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


    void MTPD::read(char* data, uint32_t size) 
    {
    2e04:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      static int index=0;
      if(!size) 
    2e08:	cbz	r2, 2e66 <MTPD::read(char*, unsigned long)+0x62>
    2e0a:	ldr.w	fp, [pc, #100]	; 2e70 <MTPD::read(char*, unsigned long)+0x6c>
    2e0e:	mov	r8, r0
    2e10:	mov	r6, r1
    2e12:	mov	r5, r2

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    2e14:	add.w	r7, r0, #32
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    2e18:	mov	r9, fp
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    2e1a:	ldr.w	sl, [fp]
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    2e1e:	mov	r0, r6
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    2e20:	rsb	r4, sl, #512	; 0x200
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    2e24:	add.w	r1, r7, sl
    2e28:	cmp	r4, r5
    2e2a:	it	cs
    2e2c:	movcs	r4, r5
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
    2e2e:	cbz	r6, 2e38 <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    2e30:	mov	r2, r4
          data += to_copy;
    2e32:	add	r6, r4

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    2e34:	bl	9c8c <memcpy>
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    2e38:	add.w	r3, r4, sl
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
    2e3c:	subs	r4, r5, r4
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    2e3e:	cmp.w	r3, #512	; 0x200
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    2e42:	str.w	r3, [fp]
      {
        index=0;
        return;
      }

      while (size) {
    2e46:	mov	r5, r4
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    2e48:	beq.n	2e52 <MTPD::read(char*, unsigned long)+0x4e>
      {
        index=0;
        return;
      }

      while (size) {
    2e4a:	cmp	r4, #0
    2e4c:	bne.n	2e1a <MTPD::read(char*, unsigned long)+0x16>
    2e4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
    2e52:	mov	r1, r7
    2e54:	mov	r0, r8
    2e56:	bl	2cd0 <MTPD::pull_packet(unsigned char*)>
          index=0;
    2e5a:	movs	r3, #0
    2e5c:	str.w	r3, [r9]
      {
        index=0;
        return;
      }

      while (size) {
    2e60:	cmp	r4, #0
    2e62:	bne.n	2e1a <MTPD::read(char*, unsigned long)+0x16>
    2e64:	b.n	2e4e <MTPD::read(char*, unsigned long)+0x4a>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    2e66:	ldr	r3, [pc, #8]	; (2e70 <MTPD::read(char*, unsigned long)+0x6c>)
    2e68:	str	r2, [r3, #0]
        return;
    2e6a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e6e:	nop
    2e70:	.word	0x20005be4

00002e74 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2e74:	push	{r4, r5, r6, lr}
    2e76:	sub	sp, #8
    2e78:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2e7a:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2e7c:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2e7e:	add.w	r1, sp, #6
    2e82:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2e86:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    2e8a:	cbz	r4, 2eac <MTPD::readstring(char*)+0x38>
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2e8c:	cbz	r2, 2ea8 <MTPD::readstring(char*)+0x34>
    2e8e:	adds	r5, r4, r2
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2e90:	movs	r2, #2
    2e92:	add.w	r1, sp, #6
    2e96:	mov	r0, r6
    2e98:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2e9c:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    2ea0:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2ea4:	cmp	r5, r4
    2ea6:	bne.n	2e90 <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    2ea8:	add	sp, #8
    2eaa:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    2eac:	lsls	r2, r2, #1
    2eae:	mov	r1, r4
    2eb0:	mov	r0, r6
    2eb2:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2eb6:	b.n	2ea8 <MTPD::readstring(char*)+0x34>

00002eb8 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>:
        storage_->write((const char *)disk_buffer, disk_pos);
      }
      storage_->close();
    }

    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    2eb8:	push	{r4, r5, lr}
    2eba:	sub	sp, #132	; 0x84
    2ebc:	mov	r4, r0
    2ebe:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2ec0:	movs	r2, #12
    2ec2:	mov	r1, sp
    2ec4:	bl	2e04 <MTPD::read(char*, unsigned long)>
      
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    2ec8:	mov	r1, sp
    2eca:	mov	r0, r4
    2ecc:	bl	2e74 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    2ed0:	ldr	r0, [r4, #0]
    2ed2:	mov	r2, sp
    2ed4:	mov	r1, r5
    2ed6:	ldr	r3, [r0, #0]
    2ed8:	ldr	r3, [r3, #76]	; 0x4c
    2eda:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    2edc:	movw	r0, #8193	; 0x2001
    2ee0:	add	sp, #132	; 0x84
    2ee2:	pop	{r4, r5, pc}

00002ee4 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2ee4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ee8:	sub	sp, #284	; 0x11c
    2eea:	mov	r4, r0
      pull_packet(rx_data_buffer);
    2eec:	add.w	r1, r0, #32
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2ef0:	mov	fp, r2


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2ef2:	add	r6, sp, #24
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
      pull_packet(rx_data_buffer);
    2ef4:	bl	2cd0 <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    2ef8:	movs	r5, #0
    2efa:	ldr	r3, [pc, #312]	; (3034 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x150>)


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2efc:	mov	r0, r4
    2efe:	mov	r1, r6
    2f00:	movs	r2, #12
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    2f02:	str	r5, [r3, #0]


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2f04:	bl	2e04 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    2f08:	ldrh	r3, [r6, #4]
    2f0a:	cmp	r3, #2
    2f0c:	beq.w	302c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x148>
    2f10:	mvn.w	r5, #51	; 0x33
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f14:	movs	r2, #4
    2f16:	mov	r1, r6
    2f18:	mov	r0, r4
    2f1a:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2f1e:	ldr	r3, [r6, #0]
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f20:	movs	r2, #2
    2f22:	mov	r1, r6
    2f24:	mov	r0, r4
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f26:	str	r3, [sp, #12]
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f28:	bl	2e04 <MTPD::read(char*, unsigned long)>
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      int store = read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    2f2c:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f30:	ldrh.w	r9, [r6]
    2f34:	movs	r2, #2
    2f36:	mov	r1, r6
    2f38:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      int store = read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    2f3a:	rsb	r9, r3, r9
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f3e:	bl	2e04 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f42:	movs	r2, #4
    2f44:	mov	r1, r6
    2f46:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      int store = read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    2f48:	clz	r9, r9
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f4c:	bl	2e04 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f50:	movs	r2, #2
    2f52:	mov	r1, r6
    2f54:	mov	r0, r4
    2f56:	bl	2e04 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2f5a:	movs	r2, #4
    2f5c:	mov	r1, r6
    2f5e:	mov	r0, r4
    2f60:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2f64:	movs	r2, #4
    2f66:	mov	r1, r6
    2f68:	mov	r0, r4
    2f6a:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2f6e:	movs	r2, #4
    2f70:	mov	r1, r6
    2f72:	mov	r0, r4
    2f74:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2f78:	movs	r2, #4
    2f7a:	mov	r1, r6
    2f7c:	mov	r0, r4
    2f7e:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2f82:	movs	r2, #4
    2f84:	mov	r1, r6
    2f86:	mov	r0, r4
    2f88:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2f8c:	movs	r2, #4
    2f8e:	mov	r1, r6
    2f90:	mov	r0, r4
    2f92:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2f96:	movs	r2, #4
    2f98:	mov	r1, r6
    2f9a:	mov	r0, r4
    2f9c:	bl	2e04 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2fa0:	movs	r2, #2
    2fa2:	mov	r1, r6
    2fa4:	mov	r0, r4
    2fa6:	bl	2e04 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2faa:	movs	r2, #4
    2fac:	mov	r1, r6
    2fae:	mov	r0, r4
    2fb0:	bl	2e04 <MTPD::read(char*, unsigned long)>
    2fb4:	movs	r2, #4
    2fb6:	mov	r1, r6
    2fb8:	mov	r0, r4
    2fba:	bl	2e04 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    2fbe:	mov	r1, r6
    2fc0:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      int store = read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    2fc2:	mov.w	r9, r9, lsr #5
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    2fc6:	bl	2e74 <MTPD::readstring(char*)>
    2fca:	mov	r0, r6
    2fcc:	bl	d540 <strlen>
    2fd0:	adds	r0, #1
    2fd2:	sub.w	r8, r5, r0, lsl #1
    2fd6:	add.w	r5, r8, #4294967295
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    2fda:	cmp	r5, #3
    2fdc:	ble.n	3004 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x120>
    2fde:	mov	sl, r5
    2fe0:	add	r7, sp, #20
    2fe2:	sub.w	sl, sl, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2fe6:	movs	r2, #4
    2fe8:	mov	r1, r7
    2fea:	mov	r0, r4
    2fec:	bl	2e04 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    2ff0:	cmp.w	sl, #3
    2ff4:	bgt.n	2fe2 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xfe>
    2ff6:	sub.w	r8, r8, #5
    2ffa:	subs	r5, #4
    2ffc:	bic.w	r8, r8, #3
    3000:	rsb	r5, r8, r5
      while(len) {read8(); len--;}
    3004:	cbz	r5, 3016 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x132>
    3006:	add	r7, sp, #20
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3008:	movs	r2, #1
    300a:	mov	r1, r7
    300c:	mov	r0, r4
    300e:	bl	2e04 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
      while(len) {read8(); len--;}
    3012:	subs	r5, #1
    3014:	bne.n	3008 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x124>

      return storage_->Create(store, parent, dir, filename);
    3016:	ldr	r0, [r4, #0]
    3018:	mov	r3, r9
    301a:	mov	r2, fp
    301c:	ldr	r1, [sp, #12]
    301e:	ldr	r4, [r0, #0]
    3020:	str	r6, [sp, #0]
    3022:	ldr	r4, [r4, #48]	; 0x30
    3024:	blx	r4
    }
    3026:	add	sp, #284	; 0x11c
    3028:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    302c:	ldr	r5, [r6, #0]
    302e:	subs	r5, #64	; 0x40
    3030:	b.n	2f14 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x30>
    3032:	nop
    3034:	.word	0x20005be4

00003038 <MTPD::SendObject()>:

    void MTPD::SendObject() 
    { 
    3038:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    303c:	add.w	sl, r0, #32

      return storage_->Create(store, parent, dir, filename);
    }

    void MTPD::SendObject() 
    { 
    3040:	sub	sp, #20
    3042:	mov	r9, r0
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    3044:	movs	r4, #0
      return storage_->Create(store, parent, dir, filename);
    }

    void MTPD::SendObject() 
    { 
      pull_packet(rx_data_buffer);
    3046:	mov	r1, sl
    3048:	bl	2cd0 <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    304c:	ldr	r3, [pc, #224]	; (3130 <MTPD::SendObject()+0xf8>)


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    304e:	mov	r0, r9
    3050:	movs	r2, #12
    3052:	add	r1, sp, #4
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    3054:	str	r4, [r3, #0]


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    3056:	bl	2e04 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    305a:	ldrh.w	r3, [sp, #8]
    305e:	cmp	r3, #2
    3060:	beq.n	307a <MTPD::SendObject()+0x42>
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    3062:	movw	r3, #9248	; 0x2420
    3066:	str.w	r4, [r9, r3]
      //printf("len %d\n",disk_pos);
      if(disk_pos)
      {
        storage_->write((const char *)disk_buffer, disk_pos);
      }
      storage_->close();
    306a:	ldr.w	r0, [r9]
    306e:	ldr	r3, [r0, #0]
    3070:	ldr	r3, [r3, #60]	; 0x3c
    3072:	blx	r3
    }
    3074:	add	sp, #20
    3076:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    307a:	ldr	r7, [sp, #4]
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    307c:	movw	r3, #9248	; 0x2420
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    3080:	subs	r7, #12
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    3082:	str.w	r4, [r9, r3]
      
      while((int)len>0)
    3086:	cmp	r7, r4
    3088:	ble.n	306a <MTPD::SendObject()+0x32>
    308a:	mov	r8, r3
    308c:	mov	r0, r4
    308e:	add.w	fp, r9, #1056	; 0x420
    3092:	movs	r5, #12
    3094:	add	r8, r9
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    3096:	rsb	r4, r5, #512	; 0x200
    309a:	rsb	r6, r0, #8192	; 0x2000
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    309e:	add.w	r1, sl, r5
    30a2:	add	r0, fp
    30a4:	cmp	r4, r7
    30a6:	it	cs
    30a8:	movcs	r4, r7
    30aa:	cmp	r6, r4
    30ac:	it	cs
    30ae:	movcs	r6, r4
    30b0:	mov	r2, r6
        disk_pos += to_copy;
        bytes -= to_copy;
        len -= to_copy;
    30b2:	subs	r7, r7, r6
      
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    30b4:	bl	9c8c <memcpy>
        disk_pos += to_copy;
    30b8:	ldr.w	r2, [r8]
    30bc:	add	r2, r6
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    30be:	cmp.w	r2, #8192	; 0x2000
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
        disk_pos += to_copy;
    30c2:	str.w	r2, [r8]
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    30c6:	beq.n	30e4 <MTPD::SendObject()+0xac>
            disk_pos += bytes;
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    30c8:	cbnz	r7, 3118 <MTPD::SendObject()+0xe0>
    30ca:	movw	r3, #9248	; 0x2420
    30ce:	ldr.w	r2, [r9, r3]
        { pull_packet(rx_data_buffer);
          index=0;
        }
      }
      //printf("len %d\n",disk_pos);
      if(disk_pos)
    30d2:	cmp	r2, #0
    30d4:	beq.n	306a <MTPD::SendObject()+0x32>
      {
        storage_->write((const char *)disk_buffer, disk_pos);
    30d6:	ldr.w	r0, [r9]
    30da:	mov	r1, fp
    30dc:	ldr	r3, [r0, #0]
    30de:	ldr	r3, [r3, #56]	; 0x38
    30e0:	blx	r3
    30e2:	b.n	306a <MTPD::SendObject()+0x32>
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
    30e4:	ldr.w	r0, [r9]
    30e8:	mov	r1, fp
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
        disk_pos += to_copy;
        bytes -= to_copy;
    30ea:	subs	r4, r4, r6
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
    30ec:	ldr	r3, [r0, #0]
    30ee:	ldr	r3, [r3, #56]	; 0x38
    30f0:	blx	r3
          disk_pos =0;
    30f2:	movs	r3, #0
    30f4:	str.w	r3, [r8]

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    30f8:	cmp	r4, #0
    30fa:	beq.n	30c8 <MTPD::SendObject()+0x90>
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    30fc:	adds	r1, r6, r5
    30fe:	mov	r2, r4
    3100:	mov	r0, fp
            disk_pos += bytes;
            len -= bytes;
    3102:	subs	r7, r7, r4
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
          disk_pos =0;

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    3104:	add	r1, sl
    3106:	bl	9c8c <memcpy>
            disk_pos += bytes;
    310a:	ldr.w	r3, [r8]
    310e:	add	r4, r3
    3110:	str.w	r4, [r8]
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    3114:	cmp	r7, #0
    3116:	beq.n	30ca <MTPD::SendObject()+0x92>
        { pull_packet(rx_data_buffer);
    3118:	mov	r1, sl
    311a:	mov	r0, r9
    311c:	bl	2cd0 <MTPD::pull_packet(unsigned char*)>
      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    3120:	cmp	r7, #0
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
        { pull_packet(rx_data_buffer);
          index=0;
    3122:	mov.w	r5, #0
      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    3126:	ble.n	30ca <MTPD::SendObject()+0x92>
    3128:	ldr.w	r0, [r8]
    312c:	b.n	3096 <MTPD::SendObject()+0x5e>
    312e:	nop
    3130:	.word	0x20005be4

00003134 <MTPD::loop()>:
      else
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    3134:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3138:	sub	sp, #52	; 0x34
    313a:	mov	r4, r0
    313c:	bl	9c68 <usb_mtp_available>
    3140:	cbnz	r0, 3148 <MTPD::loop()+0x14>
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    3142:	add	sp, #52	; 0x34
    3144:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    3148:	add.w	r6, r4, #32
      return usb_mtp_recv(data_buffer,60);
    }

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    314c:	movs	r1, #60	; 0x3c
    314e:	mov	r0, r6
    3150:	bl	9ba4 <usb_mtp_recv>
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    3154:	cmp	r0, #0
    3156:	beq.n	3142 <MTPD::loop()+0xe>
      { printContainer();
    3158:	add.w	r0, r4, #40	; 0x28
    315c:	ldrh	r1, [r4, #36]	; 0x24
    315e:	ldr	r5, [r4, #52]	; 0x34
    3160:	ldr	r3, [r4, #32]
    3162:	ldrh	r2, [r4, #38]	; 0x26
    3164:	ldmia.w	r0, {r0, r7, ip}
    3168:	str	r5, [sp, #16]
    316a:	str	r7, [sp, #8]
    316c:	str	r0, [sp, #4]
    316e:	str	r1, [sp, #0]
    3170:	str.w	ip, [sp, #12]
    3174:	ldr	r1, [pc, #844]	; (34c4 <MTPD::loop()+0x390>)
    3176:	ldr	r0, [pc, #848]	; (34c8 <MTPD::loop()+0x394>)
    3178:	bl	b758 <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    317c:	ldrh.w	r8, [r4, #36]	; 0x24
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    3180:	movw	r1, #8197	; 0x2005
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer();

        int op = CONTAINER->op;
    3184:	ldrh	r2, [r4, #38]	; 0x26

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    3186:	movw	r0, #4108	; 0x100c
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    318a:	movw	r3, #8193	; 0x2001
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    318e:	ldr.w	r9, [r4, #32]
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    3192:	cmp.w	r8, #2
    3196:	it	eq
    3198:	moveq	r3, r1

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    319a:	ldr	r5, [r4, #40]	; 0x28

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    319c:	cmp	r2, r0
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    319e:	mov	r7, r9
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    31a0:	mov	r8, r3
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer();

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    31a2:	ldr.w	sl, [r4, #44]	; 0x2c
        int p2 = CONTAINER->params[1];
    31a6:	ldr.w	fp, [r4, #48]	; 0x30
        int p3 = CONTAINER->params[2];
    31aa:	ldr	r3, [r4, #52]	; 0x34
        int id = CONTAINER->transaction_id;
    31ac:	str	r5, [sp, #24]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    31ae:	beq.w	37ca <MTPD::loop()+0x696>
    31b2:	bhi.n	3222 <MTPD::loop()+0xee>
    31b4:	movw	r1, #4101	; 0x1005
    31b8:	cmp	r2, r1
    31ba:	beq.w	36e2 <MTPD::loop()+0x5ae>
    31be:	bls.w	3346 <MTPD::loop()+0x212>
    31c2:	movw	r1, #4104	; 0x1008
    31c6:	cmp	r2, r1
    31c8:	beq.w	366c <MTPD::loop()+0x538>
    31cc:	bhi.w	3404 <MTPD::loop()+0x2d0>
    31d0:	movw	r1, #4102	; 0x1006
    31d4:	cmp	r2, r1
    31d6:	beq.w	3632 <MTPD::loop()+0x4fe>
    31da:	movw	r1, #4103	; 0x1007
    31de:	cmp	r2, r1
    31e0:	bne.w	33fa <MTPD::loop()+0x2c6>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    31e4:	cmp.w	fp, #0
    31e8:	beq.w	37f4 <MTPD::loop()+0x6c0>
    31ec:	add.w	r5, r4, #544	; 0x220
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    31f0:	movw	r8, #8212	; 0x2014
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    31f4:	ldr	r1, [sp, #24]
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    31f6:	movs	r3, #3
            CONTAINER->len=len;
    31f8:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
    31fc:	mov	r2, r9
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    31fe:	str	r1, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3200:	mov	r0, r5
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
    3202:	strh.w	r8, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3206:	mov	r1, r6
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
    3208:	str.w	sl, [r4, #44]	; 0x2c
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    320c:	strh	r3, [r4, #36]	; 0x24
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,rx_data_buffer,len);
    320e:	bl	9c8c <memcpy>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3212:	movs	r2, #60	; 0x3c
    3214:	mov	r1, r7
    3216:	mov	r0, r5
    3218:	bl	9c00 <usb_mtp_send>
    321c:	cmp	r0, #0
    321e:	ble.n	3212 <MTPD::loop()+0xde>
    3220:	b.n	3142 <MTPD::loop()+0xe>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    3222:	movw	r0, #4121	; 0x1019
    3226:	cmp	r2, r0
    3228:	beq.w	3650 <MTPD::loop()+0x51c>
    322c:	bls.n	32c8 <MTPD::loop()+0x194>
    322e:	movw	r3, #38914	; 0x9802
    3232:	cmp	r2, r3
    3234:	beq.w	3544 <MTPD::loop()+0x410>
    3238:	bhi.w	33d8 <MTPD::loop()+0x2a4>
    323c:	movw	r3, #4122	; 0x101a
    3240:	cmp	r2, r3
    3242:	beq.w	3434 <MTPD::loop()+0x300>
    3246:	movw	r3, #38913	; 0x9801
    324a:	cmp	r2, r3
    324c:	bne.w	33fa <MTPD::loop()+0x2c6>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    3250:	movw	r5, #9256	; 0x2428
    3254:	mov.w	fp, #0
    3258:	movw	r2, #9252	; 0x2424
    325c:	movs	r3, #1
    325e:	str.w	fp, [r4, r5]
    3262:	mov	r1, sl
    3264:	strb	r3, [r4, r2]
    3266:	mov	r0, r4
    3268:	str	r2, [sp, #28]
    326a:	bl	22fc <MTPD::getObjectPropsSupported(unsigned long)>
    326e:	ldr	r3, [r4, r5]
    3270:	mov.w	lr, #2
    3274:	ldr	r2, [sp, #28]
    3276:	add	r1, sp, #36	; 0x24
    3278:	adds	r3, #12
    327a:	ldrh.w	ip, [r4, #38]	; 0x26
    327e:	strb.w	fp, [r4, r2]
    3282:	mov	r0, r4
    3284:	str.w	fp, [r4, r5]
    3288:	movs	r2, #12
    328a:	str	r3, [sp, #36]	; 0x24
    328c:	add.w	r5, r4, #544	; 0x220
    3290:	ldr	r3, [r4, #40]	; 0x28
    3292:	strh.w	lr, [sp, #40]	; 0x28
    3296:	str	r3, [sp, #44]	; 0x2c
    3298:	strh.w	ip, [sp, #42]	; 0x2a
    329c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    32a0:	mov	r1, sl
    32a2:	mov	r0, r4
    32a4:	bl	22fc <MTPD::getObjectPropsSupported(unsigned long)>
    32a8:	ldr	r3, [sp, #36]	; 0x24
    32aa:	ubfx	fp, r3, #0, #9
    32ae:	cmp.w	fp, #0
    32b2:	beq.n	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    32b4:	movs	r2, #60	; 0x3c
    32b6:	mov	r1, fp
    32b8:	mov	r0, r5
    32ba:	bl	9c00 <usb_mtp_send>
    32be:	cmp	r0, #0
    32c0:	ble.n	32b4 <MTPD::loop()+0x180>
    32c2:	uxth.w	r8, r8
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;
    32c6:	b.n	31f4 <MTPD::loop()+0xc0>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    32c8:	movw	r3, #4112	; 0x1010
    32cc:	cmp	r2, r3
    32ce:	beq.w	3434 <MTPD::loop()+0x300>
    32d2:	bls.w	3446 <MTPD::loop()+0x312>
    32d6:	movw	r3, #4116	; 0x1014
    32da:	cmp	r2, r3
    32dc:	beq.w	3464 <MTPD::loop()+0x330>
    32e0:	movw	r3, #4117	; 0x1015
    32e4:	cmp	r2, r3
    32e6:	bne.w	33fa <MTPD::loop()+0x2c6>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    32ea:	movw	r1, #54274	; 0xd402
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    32ee:	movw	r3, #9256	; 0x2428
    32f2:	movs	r5, #0
    32f4:	movw	fp, #9252	; 0x2424
    32f8:	movs	r0, #1
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    32fa:	cmp	sl, r1
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    32fc:	str	r5, [r4, r3]
    32fe:	strb.w	r0, [r4, fp]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    3302:	beq.w	3870 <MTPD::loop()+0x73c>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    3306:	movs	r3, #12
    3308:	ldr	r0, [sp, #24]
    330a:	strb.w	r5, [r4, fp]
    330e:	movs	r5, #2
    3310:	strh.w	r2, [sp, #42]	; 0x2a
    3314:	add	r1, sp, #36	; 0x24
    3316:	str	r0, [sp, #44]	; 0x2c
    3318:	mov	r2, r3
    331a:	mov	r0, r4
    331c:	str	r3, [sp, #36]	; 0x24
    331e:	strh.w	r5, [sp, #40]	; 0x28
    3322:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    3326:	ldr	r3, [sp, #36]	; 0x24
    3328:	add.w	r5, r4, #544	; 0x220
    332c:	ubfx	fp, r3, #0, #9
    3330:	cmp.w	fp, #0
    3334:	beq.n	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3336:	movs	r2, #60	; 0x3c
    3338:	mov	r1, fp
    333a:	mov	r0, r5
    333c:	bl	9c00 <usb_mtp_send>
    3340:	cmp	r0, #0
    3342:	ble.n	3336 <MTPD::loop()+0x202>
    3344:	b.n	32c2 <MTPD::loop()+0x18e>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    3346:	movw	r3, #4099	; 0x1003
    334a:	cmp	r2, r3
    334c:	bhi.w	3758 <MTPD::loop()+0x624>
    3350:	movw	r3, #4098	; 0x1002
    3354:	cmp	r2, r3
    3356:	bcs.n	343c <MTPD::loop()+0x308>
    3358:	movw	r3, #4097	; 0x1001
    335c:	cmp	r2, r3
    335e:	bne.n	33fa <MTPD::loop()+0x2c6>
        {
          case 0x1001:
            p1=0;
            TRANSMIT(WriteDescriptor());
    3360:	movw	r5, #9256	; 0x2428
    3364:	mov.w	sl, #0
    3368:	movs	r3, #1
    336a:	movw	fp, #9252	; 0x2424
    336e:	str.w	sl, [r4, r5]
    3372:	mov	r0, r4
    3374:	strb.w	r3, [r4, fp]
    3378:	bl	1b48 <MTPD::WriteDescriptor()>
    337c:	ldr	r3, [r4, r5]
    337e:	mov.w	lr, #2
    3382:	strb.w	sl, [r4, fp]
    3386:	adds	r3, #12
    3388:	ldrh.w	ip, [r4, #38]	; 0x26
    338c:	str.w	sl, [r4, r5]
    3390:	movs	r2, #12
    3392:	ldr	r5, [r4, #40]	; 0x28
    3394:	add	r1, sp, #36	; 0x24
    3396:	mov	r0, r4
    3398:	str	r3, [sp, #36]	; 0x24
    339a:	strh.w	lr, [sp, #40]	; 0x28
    339e:	strh.w	ip, [sp, #42]	; 0x2a
    33a2:	str	r5, [sp, #44]	; 0x2c
    33a4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    33a8:	mov	r0, r4
    33aa:	add.w	r5, r4, #544	; 0x220
    33ae:	bl	1b48 <MTPD::WriteDescriptor()>
    33b2:	ldr	r3, [sp, #36]	; 0x24
    33b4:	ubfx	sl, r3, #0, #9
    33b8:	cmp.w	sl, #0
    33bc:	bne.n	33c8 <MTPD::loop()+0x294>
    33be:	uxth.w	r8, r8
            break;
    33c2:	mov.w	sl, #0
    33c6:	b.n	31f4 <MTPD::loop()+0xc0>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    33c8:	movs	r2, #60	; 0x3c
    33ca:	mov	r1, sl
    33cc:	mov	r0, r5
    33ce:	bl	9c00 <usb_mtp_send>
    33d2:	cmp	r0, #0
    33d4:	ble.n	33c8 <MTPD::loop()+0x294>
    33d6:	b.n	33be <MTPD::loop()+0x28a>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    33d8:	movw	r3, #38915	; 0x9803
    33dc:	cmp	r2, r3
    33de:	beq.n	34cc <MTPD::loop()+0x398>
    33e0:	movw	r3, #38916	; 0x9804
    33e4:	cmp	r2, r3
    33e6:	bne.n	33fa <MTPD::loop()+0x2c6>
      }
      storage_->close();
    }

    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    { pull_packet(rx_data_buffer);
    33e8:	mov	r1, r6
    33ea:	mov	r0, r4
    33ec:	bl	2cd0 <MTPD::pull_packet(unsigned char*)>
//      printContainer(); 
      
      if(p2==0xDC07)
    33f0:	movw	r3, #56327	; 0xdc07
    33f4:	cmp	fp, r3
    33f6:	beq.w	38f4 <MTPD::loop()+0x7c0>
    33fa:	add.w	r5, r4, #544	; 0x220
    33fe:	movw	r8, #8197	; 0x2005
    3402:	b.n	31f4 <MTPD::loop()+0xc0>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    3404:	movw	r3, #4105	; 0x1009
    3408:	cmp	r2, r3
    340a:	beq.w	35bc <MTPD::loop()+0x488>
    340e:	movw	r3, #4107	; 0x100b
    3412:	cmp	r2, r3
    3414:	bne.n	33fa <MTPD::loop()+0x2c6>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    3416:	cmp.w	fp, #0
    341a:	bne.w	31ec <MTPD::loop()+0xb8>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    341e:	ldr	r0, [r4, #0]
    3420:	mov	r1, sl
    3422:	ldr	r3, [r0, #0]
    3424:	ldr	r3, [r3, #64]	; 0x40
    3426:	blx	r3
    3428:	cbnz	r0, 343c <MTPD::loop()+0x308>
    342a:	add.w	r5, r4, #544	; 0x220
    342e:	movw	r8, #8210	; 0x2012
    3432:	b.n	31f4 <MTPD::loop()+0xc0>
              CONTAINER->len  = len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;
    3434:	mov	r8, r1
    3436:	add.w	r5, r4, #544	; 0x220
    343a:	b.n	31f4 <MTPD::loop()+0xc0>
    343c:	uxth.w	r8, r8
    3440:	add.w	r5, r4, #544	; 0x220
    3444:	b.n	31f4 <MTPD::loop()+0xc0>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    3446:	movw	r3, #4109	; 0x100d
    344a:	cmp	r2, r3
    344c:	bne.n	33fa <MTPD::loop()+0x2c6>
              break;

          case 0x100D:  // SendObject
              SendObject();
              CONTAINER->len  = len = 12;
              break;
    344e:	mov.w	r9, #12
              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;

          case 0x100D:  // SendObject
              SendObject();
    3452:	mov	r0, r4
    3454:	bl	3038 <MTPD::SendObject()>
    3458:	add.w	r5, r4, #544	; 0x220
    345c:	uxth.w	r8, r8
              CONTAINER->len  = len = 12;
    3460:	mov	r7, r9
              break;
    3462:	b.n	31f4 <MTPD::loop()+0xc0>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    3464:	movw	r1, #54274	; 0xd402
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    3468:	movw	r3, #9256	; 0x2428
    346c:	movs	r5, #0
    346e:	movw	fp, #9252	; 0x2424
    3472:	movs	r0, #1
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    3474:	cmp	sl, r1
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    3476:	str	r5, [r4, r3]
    3478:	strb.w	r0, [r4, fp]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    347c:	beq.w	38b2 <MTPD::loop()+0x77e>
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    3480:	movs	r3, #12
    3482:	ldr	r0, [sp, #24]
    3484:	strb.w	r5, [r4, fp]
    3488:	movs	r5, #2
    348a:	strh.w	r2, [sp, #42]	; 0x2a
    348e:	add	r1, sp, #36	; 0x24
    3490:	str	r0, [sp, #44]	; 0x2c
    3492:	mov	r2, r3
    3494:	mov	r0, r4
    3496:	str	r3, [sp, #36]	; 0x24
    3498:	strh.w	r5, [sp, #40]	; 0x28
    349c:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    34a0:	ldr	r3, [sp, #36]	; 0x24
    34a2:	add.w	r5, r4, #544	; 0x220
    34a6:	ubfx	fp, r3, #0, #9
    34aa:	cmp.w	fp, #0
    34ae:	beq.w	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    34b2:	movs	r2, #60	; 0x3c
    34b4:	mov	r1, fp
    34b6:	mov	r0, r5
    34b8:	bl	9c00 <usb_mtp_send>
    34bc:	cmp	r0, #0
    34be:	ble.n	34b2 <MTPD::loop()+0x37e>
    34c0:	b.n	32c2 <MTPD::loop()+0x18e>
    34c2:	nop
    34c4:	.word	0x200002c4
    34c8:	.word	0x20000c58
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    34cc:	movw	r5, #9256	; 0x2428
    34d0:	movs	r3, #0
    34d2:	movs	r1, #1
    34d4:	mov	r2, fp
    34d6:	str	r3, [r4, r5]
    34d8:	mov	r0, r4
    34da:	str	r3, [sp, #28]
    34dc:	movw	r3, #9252	; 0x2424
    34e0:	strb	r1, [r4, r3]
    34e2:	mov	r1, sl
    34e4:	bl	2b00 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    34e8:	ldr	r2, [r4, r5]
    34ea:	ldr	r3, [sp, #28]
    34ec:	mov.w	ip, #2
    34f0:	add.w	lr, r2, #12
    34f4:	movw	r2, #9252	; 0x2424
    34f8:	add	r1, sp, #36	; 0x24
    34fa:	mov	r0, r4
    34fc:	strb	r3, [r4, r2]
    34fe:	movs	r2, #12
    3500:	str	r3, [r4, r5]
    3502:	add.w	r5, r4, #544	; 0x220
    3506:	ldrh	r3, [r4, #38]	; 0x26
    3508:	str.w	lr, [sp, #36]	; 0x24
    350c:	strh.w	r3, [sp, #42]	; 0x2a
    3510:	ldr	r3, [r4, #40]	; 0x28
    3512:	strh.w	ip, [sp, #40]	; 0x28
    3516:	str	r3, [sp, #44]	; 0x2c
    3518:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    351c:	mov	r2, fp
    351e:	mov	r1, sl
    3520:	mov	r0, r4
    3522:	bl	2b00 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3526:	ldr	r3, [sp, #36]	; 0x24
    3528:	ubfx	fp, r3, #0, #9
    352c:	cmp.w	fp, #0
    3530:	beq.w	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3534:	movs	r2, #60	; 0x3c
    3536:	mov	r1, fp
    3538:	mov	r0, r5
    353a:	bl	9c00 <usb_mtp_send>
    353e:	cmp	r0, #0
    3540:	ble.n	3534 <MTPD::loop()+0x400>
    3542:	b.n	32c2 <MTPD::loop()+0x18e>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    3544:	movw	r5, #9256	; 0x2428
    3548:	movs	r3, #0
    354a:	movs	r1, #1
    354c:	mov	r2, fp
    354e:	str	r3, [r4, r5]
    3550:	mov	r0, r4
    3552:	str	r3, [sp, #28]
    3554:	movw	r3, #9252	; 0x2424
    3558:	strb	r1, [r4, r3]
    355a:	mov	r1, sl
    355c:	bl	238c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3560:	ldr	r2, [r4, r5]
    3562:	ldr	r3, [sp, #28]
    3564:	mov.w	ip, #2
    3568:	add.w	lr, r2, #12
    356c:	movw	r2, #9252	; 0x2424
    3570:	add	r1, sp, #36	; 0x24
    3572:	mov	r0, r4
    3574:	strb	r3, [r4, r2]
    3576:	movs	r2, #12
    3578:	str	r3, [r4, r5]
    357a:	add.w	r5, r4, #544	; 0x220
    357e:	ldrh	r3, [r4, #38]	; 0x26
    3580:	str.w	lr, [sp, #36]	; 0x24
    3584:	strh.w	r3, [sp, #42]	; 0x2a
    3588:	ldr	r3, [r4, #40]	; 0x28
    358a:	strh.w	ip, [sp, #40]	; 0x28
    358e:	str	r3, [sp, #44]	; 0x2c
    3590:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    3594:	mov	r2, fp
    3596:	mov	r1, sl
    3598:	mov	r0, r4
    359a:	bl	238c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    359e:	ldr	r3, [sp, #36]	; 0x24
    35a0:	ubfx	fp, r3, #0, #9
    35a4:	cmp.w	fp, #0
    35a8:	beq.w	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    35ac:	movs	r2, #60	; 0x3c
    35ae:	mov	r1, fp
    35b0:	mov	r0, r5
    35b2:	bl	9c00 <usb_mtp_send>
    35b6:	cmp	r0, #0
    35b8:	ble.n	35ac <MTPD::loop()+0x478>
    35ba:	b.n	32c2 <MTPD::loop()+0x18e>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    35bc:	movw	r5, #9256	; 0x2428
    35c0:	mov.w	fp, #0
    35c4:	movw	r2, #9252	; 0x2424
    35c8:	movs	r3, #1
    35ca:	str.w	fp, [r4, r5]
    35ce:	mov	r1, sl
    35d0:	strb	r3, [r4, r2]
    35d2:	mov	r0, r4
    35d4:	str	r2, [sp, #28]
    35d6:	bl	2ce8 <MTPD::GetObject(unsigned long)>
    35da:	ldr	r3, [r4, r5]
    35dc:	mov.w	lr, #2
    35e0:	ldr	r2, [sp, #28]
    35e2:	add	r1, sp, #36	; 0x24
    35e4:	adds	r3, #12
    35e6:	ldrh.w	ip, [r4, #38]	; 0x26
    35ea:	strb.w	fp, [r4, r2]
    35ee:	mov	r0, r4
    35f0:	str.w	fp, [r4, r5]
    35f4:	movs	r2, #12
    35f6:	str	r3, [sp, #36]	; 0x24
    35f8:	add.w	r5, r4, #544	; 0x220
    35fc:	ldr	r3, [r4, #40]	; 0x28
    35fe:	strh.w	lr, [sp, #40]	; 0x28
    3602:	str	r3, [sp, #44]	; 0x2c
    3604:	strh.w	ip, [sp, #42]	; 0x2a
    3608:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    360c:	mov	r1, sl
    360e:	mov	r0, r4
    3610:	bl	2ce8 <MTPD::GetObject(unsigned long)>
    3614:	ldr	r3, [sp, #36]	; 0x24
    3616:	ubfx	fp, r3, #0, #9
    361a:	cmp.w	fp, #0
    361e:	beq.w	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3622:	movs	r2, #60	; 0x3c
    3624:	mov	r1, fp
    3626:	mov	r0, r5
    3628:	bl	9c00 <usb_mtp_send>
    362c:	cmp	r0, #0
    362e:	ble.n	3622 <MTPD::loop()+0x4ee>
    3630:	b.n	32c2 <MTPD::loop()+0x18e>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (CONTAINER->params[1]) 
    3632:	cmp.w	fp, #0
    3636:	bne.w	31ec <MTPD::loop()+0xb8>
            {
                return_code = 0x2014; // spec by format unsupported
            } else 
            {
                p1 = GetNumObjects(p1, p3);
    363a:	mov	r1, sl
    363c:	mov	r2, r3
    363e:	mov	r0, r4
    3640:	add.w	r5, r4, #544	; 0x220
    3644:	bl	1fac <MTPD::GetNumObjects(unsigned long, unsigned long)>
    3648:	mov	sl, r0
    364a:	uxth.w	r8, r8
    364e:	b.n	31f4 <MTPD::loop()+0xc0>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    3650:	ldr	r0, [r4, #0]
    3652:	mov	r2, r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    3654:	mov.w	r9, #12
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    3658:	mov	r1, sl
    365a:	ldr	r3, [r0, #0]
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    365c:	movw	r8, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
    3660:	mov	r7, r9
    3662:	add.w	r5, r4, #544	; 0x220
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    3666:	ldr	r3, [r3, #80]	; 0x50
    3668:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    366a:	b.n	31f4 <MTPD::loop()+0xc0>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    366c:	movw	r5, #9256	; 0x2428
    3670:	mov.w	fp, #0
    3674:	movw	r2, #9252	; 0x2424
    3678:	movs	r3, #1
    367a:	str.w	fp, [r4, r5]
    367e:	mov	r1, sl
    3680:	strb	r3, [r4, r2]
    3682:	mov	r0, r4
    3684:	str	r2, [sp, #28]
    3686:	bl	205c <MTPD::GetObjectInfo(unsigned long)>
    368a:	ldr	r3, [r4, r5]
    368c:	mov.w	lr, #2
    3690:	ldr	r2, [sp, #28]
    3692:	add	r1, sp, #36	; 0x24
    3694:	adds	r3, #12
    3696:	ldrh.w	ip, [r4, #38]	; 0x26
    369a:	strb.w	fp, [r4, r2]
    369e:	mov	r0, r4
    36a0:	str.w	fp, [r4, r5]
    36a4:	movs	r2, #12
    36a6:	str	r3, [sp, #36]	; 0x24
    36a8:	add.w	r5, r4, #544	; 0x220
    36ac:	ldr	r3, [r4, #40]	; 0x28
    36ae:	strh.w	lr, [sp, #40]	; 0x28
    36b2:	str	r3, [sp, #44]	; 0x2c
    36b4:	strh.w	ip, [sp, #42]	; 0x2a
    36b8:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    36bc:	mov	r1, sl
    36be:	mov	r0, r4
    36c0:	bl	205c <MTPD::GetObjectInfo(unsigned long)>
    36c4:	ldr	r3, [sp, #36]	; 0x24
    36c6:	ubfx	fp, r3, #0, #9
    36ca:	cmp.w	fp, #0
    36ce:	beq.w	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    36d2:	movs	r2, #60	; 0x3c
    36d4:	mov	r1, fp
    36d6:	mov	r0, r5
    36d8:	bl	9c00 <usb_mtp_send>
    36dc:	cmp	r0, #0
    36de:	ble.n	36d2 <MTPD::loop()+0x59e>
    36e0:	b.n	32c2 <MTPD::loop()+0x18e>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    36e2:	movw	r5, #9256	; 0x2428
    36e6:	mov.w	fp, #0
    36ea:	movw	r2, #9252	; 0x2424
    36ee:	movs	r3, #1
    36f0:	str.w	fp, [r4, r5]
    36f4:	mov	r1, sl
    36f6:	strb	r3, [r4, r2]
    36f8:	mov	r0, r4
    36fa:	str	r2, [sp, #28]
    36fc:	bl	1e1c <MTPD::GetStorageInfo(unsigned long)>
    3700:	ldr	r3, [r4, r5]
    3702:	mov.w	lr, #2
    3706:	ldr	r2, [sp, #28]
    3708:	add	r1, sp, #36	; 0x24
    370a:	adds	r3, #12
    370c:	ldrh.w	ip, [r4, #38]	; 0x26
    3710:	strb.w	fp, [r4, r2]
    3714:	mov	r0, r4
    3716:	str.w	fp, [r4, r5]
    371a:	movs	r2, #12
    371c:	str	r3, [sp, #36]	; 0x24
    371e:	add.w	r5, r4, #544	; 0x220
    3722:	ldr	r3, [r4, #40]	; 0x28
    3724:	strh.w	lr, [sp, #40]	; 0x28
    3728:	str	r3, [sp, #44]	; 0x2c
    372a:	strh.w	ip, [sp, #42]	; 0x2a
    372e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    3732:	mov	r1, sl
    3734:	mov	r0, r4
    3736:	bl	1e1c <MTPD::GetStorageInfo(unsigned long)>
    373a:	ldr	r3, [sp, #36]	; 0x24
    373c:	ubfx	fp, r3, #0, #9
    3740:	cmp.w	fp, #0
    3744:	beq.w	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3748:	movs	r2, #60	; 0x3c
    374a:	mov	r1, fp
    374c:	mov	r0, r5
    374e:	bl	9c00 <usb_mtp_send>
    3752:	cmp	r0, #0
    3754:	ble.n	3748 <MTPD::loop()+0x614>
    3756:	b.n	32c2 <MTPD::loop()+0x18e>
          case 0x1003:  // CloseSession
            //
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    3758:	movw	r5, #9256	; 0x2428
    375c:	mov.w	fp, #0
    3760:	movw	r2, #9252	; 0x2424
    3764:	movs	r3, #1
    3766:	str.w	fp, [r4, r5]
    376a:	mov	r0, r4
    376c:	strb	r3, [r4, r2]
    376e:	str	r2, [sp, #28]
    3770:	bl	1da4 <MTPD::WriteStorageIDs()>
    3774:	ldr	r3, [r4, r5]
    3776:	mov.w	lr, #2
    377a:	ldr	r2, [sp, #28]
    377c:	add	r1, sp, #36	; 0x24
    377e:	adds	r3, #12
    3780:	mov	r0, r4
    3782:	strb.w	fp, [r4, r2]
    3786:	movs	r2, #12
    3788:	ldrh.w	ip, [r4, #38]	; 0x26
    378c:	str.w	fp, [r4, r5]
    3790:	ldr	r5, [r4, #40]	; 0x28
    3792:	str	r3, [sp, #36]	; 0x24
    3794:	strh.w	lr, [sp, #40]	; 0x28
    3798:	strh.w	ip, [sp, #42]	; 0x2a
    379c:	str	r5, [sp, #44]	; 0x2c
    379e:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    37a2:	mov	r0, r4
    37a4:	add.w	r5, r4, #544	; 0x220
    37a8:	bl	1da4 <MTPD::WriteStorageIDs()>
    37ac:	ldr	r3, [sp, #36]	; 0x24
    37ae:	ubfx	fp, r3, #0, #9
    37b2:	cmp.w	fp, #0
    37b6:	beq.w	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    37ba:	movs	r2, #60	; 0x3c
    37bc:	mov	r1, fp
    37be:	mov	r0, r5
    37c0:	bl	9c00 <usb_mtp_send>
    37c4:	cmp	r0, #0
    37c6:	ble.n	37ba <MTPD::loop()+0x686>
    37c8:	b.n	32c2 <MTPD::loop()+0x18e>
    37ca:	cmp.w	sl, #0
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
                                                    p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;
    37ce:	mov.w	r9, #24
              break;


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
    37d2:	mov	r2, fp
    37d4:	mov	r0, r4
    37d6:	it	eq
    37d8:	moveq.w	sl, #1
                                                    p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
    37dc:	mov	r7, r9
    37de:	uxth.w	r8, r8
    37e2:	add.w	r5, r4, #544	; 0x220
              break;


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
    37e6:	mov	r1, sl
    37e8:	bl	2ee4 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                                    p2); // parent

              CONTAINER->params[1]=p2;
    37ec:	str.w	fp, [r4, #48]	; 0x30


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
                                                    p2); // parent
    37f0:	str	r0, [r4, #52]	; 0x34

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;
    37f2:	b.n	31f4 <MTPD::loop()+0xc0>
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    37f4:	movw	r5, #9256	; 0x2428
    37f8:	mov	r2, r3
    37fa:	movs	r0, #1
    37fc:	str	r3, [sp, #28]
    37fe:	movw	r3, #9252	; 0x2424
    3802:	str.w	fp, [r4, r5]
    3806:	mov	r1, sl
    3808:	strb	r0, [r4, r3]
    380a:	mov	r0, r4
    380c:	bl	1fd4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3810:	movw	r3, #9252	; 0x2424
    3814:	ldr	r2, [r4, r5]
    3816:	mov.w	ip, #2
    381a:	strb.w	fp, [r4, r3]
    381e:	add	r1, sp, #36	; 0x24
    3820:	str.w	fp, [r4, r5]
    3824:	add.w	lr, r2, #12
    3828:	ldrh	r3, [r4, #38]	; 0x26
    382a:	movs	r2, #12
    382c:	mov	r0, r4
    382e:	str.w	lr, [sp, #36]	; 0x24
    3832:	strh.w	r3, [sp, #42]	; 0x2a
    3836:	add.w	r5, r4, #544	; 0x220
    383a:	ldr	r3, [r4, #40]	; 0x28
    383c:	strh.w	ip, [sp, #40]	; 0x28
    3840:	str	r3, [sp, #44]	; 0x2c
    3842:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    3846:	ldr	r3, [sp, #28]
    3848:	mov	r1, sl
    384a:	mov	r0, r4
    384c:	mov	r2, r3
    384e:	bl	1fd4 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3852:	ldr	r3, [sp, #36]	; 0x24
    3854:	ubfx	fp, r3, #0, #9
    3858:	cmp.w	fp, #0
    385c:	beq.w	32c2 <MTPD::loop()+0x18e>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3860:	movs	r2, #60	; 0x3c
    3862:	mov	r1, fp
    3864:	mov	r0, r5
    3866:	bl	9c00 <usb_mtp_send>
    386a:	cmp	r0, #0
    386c:	ble.n	3860 <MTPD::loop()+0x72c>
    386e:	b.n	32c2 <MTPD::loop()+0x18e>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    3870:	mov	r0, r4
    3872:	ldr	r1, [pc, #152]	; (390c <MTPD::loop()+0x7d8>)
    3874:	str	r3, [sp, #28]
    3876:	bl	19b4 <MTPD::writestring(char const*)>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    387a:	ldr	r3, [sp, #28]
    387c:	mov.w	lr, #2
    3880:	ldrh.w	ip, [r4, #38]	; 0x26
    3884:	add	r1, sp, #36	; 0x24
    3886:	ldr	r2, [r4, r3]
    3888:	strb.w	r5, [r4, fp]
    388c:	add.w	r0, r2, #12
    3890:	str	r5, [r4, r3]
    3892:	ldr	r3, [r4, #40]	; 0x28
    3894:	movs	r2, #12
    3896:	str	r0, [sp, #36]	; 0x24
    3898:	mov	r0, r4
    389a:	strh.w	lr, [sp, #40]	; 0x28
    389e:	strh.w	ip, [sp, #42]	; 0x2a
    38a2:	str	r3, [sp, #44]	; 0x2c
    38a4:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    38a8:	ldr	r1, [pc, #96]	; (390c <MTPD::loop()+0x7d8>)
    38aa:	mov	r0, r4
    38ac:	bl	19b4 <MTPD::writestring(char const*)>
    38b0:	b.n	3326 <MTPD::loop()+0x1f2>
    38b2:	mov	r1, sl
    38b4:	mov	r0, r4
    38b6:	str	r3, [sp, #28]
    38b8:	bl	1a80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    38bc:	ldr	r3, [sp, #28]
    38be:	mov.w	lr, #2
    38c2:	ldrh.w	ip, [r4, #38]	; 0x26
    38c6:	add	r1, sp, #36	; 0x24
    38c8:	ldr	r2, [r4, r3]
    38ca:	strb.w	r5, [r4, fp]
    38ce:	add.w	r0, r2, #12
    38d2:	str	r5, [r4, r3]
    38d4:	ldr	r3, [r4, #40]	; 0x28
    38d6:	movs	r2, #12
    38d8:	str	r0, [sp, #36]	; 0x24
    38da:	mov	r0, r4
    38dc:	strh.w	lr, [sp, #40]	; 0x28
    38e0:	strh.w	ip, [sp, #42]	; 0x2a
    38e4:	str	r3, [sp, #44]	; 0x2c
    38e6:	bl	1934 <MTPD::write(char const*, int) [clone .part.2]>
    38ea:	mov	r1, sl
    38ec:	mov	r0, r4
    38ee:	bl	1a80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    38f2:	b.n	34a0 <MTPD::loop()+0x36c>
    38f4:	mov	r1, sl
    38f6:	mov	r0, r4
    38f8:	bl	2eb8 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>

          default:
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
    38fc:	cmp	r0, #0
    38fe:	beq.w	3142 <MTPD::loop()+0xe>
    3902:	uxth.w	r8, r0
    3906:	add.w	r5, r4, #544	; 0x220
    390a:	b.n	31f4 <MTPD::loop()+0xc0>
    390c:	.word	0x20000294

00003910 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3910:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3912:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3914:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3916:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3918:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    391a:	beq.n	3924 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    391c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3920:	b.w	b5ec <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3924:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3926:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    392a:	bx	r3

0000392c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    392c:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    392e:	movw	r5, #513	; 0x201
    3932:	ldr	r4, [r0, #0]
    3934:	str	r5, [r4, #16]

	while (count > 0) {
    3936:	cbz	r3, 3980 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    3938:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    393a:	cbz	r1, 397a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    393c:	ldrb	r5, [r1, #0]
    393e:	adds	r1, #1
		count--; // how many bytes left to output.
    3940:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    3942:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    3944:	ldr	r5, [r4, #112]	; 0x70
    3946:	lsls	r5, r5, #30
    3948:	bmi.n	3958 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    394a:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    394c:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    394e:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    3950:	cbz	r2, 3958 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    3952:	strb	r5, [r2, #0]
    3954:	adds	r2, #1
    3956:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    3958:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    395a:	lsls	r5, r5, #31
    395c:	bpl.n	3944 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    395e:	cmp	r3, #0
    3960:	bne.n	393a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    3962:	cbz	r6, 3980 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3964:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    3966:	ldr	r3, [r1, #112]	; 0x70
    3968:	lsls	r3, r3, #30
    396a:	bmi.n	3966 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    396c:	ldr	r3, [r1, #116]	; 0x74
    396e:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    3970:	cbz	r2, 3976 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    3972:	strb	r3, [r2, #0]
    3974:	adds	r2, #1
			count_read--;
    3976:	subs	r6, #1
    3978:	b.n	3962 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    397a:	ldrb.w	r5, [r0, #60]	; 0x3c
    397e:	b.n	3940 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    3980:	pop	{r4, r5, r6}
    3982:	bx	lr

00003984 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3984:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    3986:	ldr	r4, [pc, #192]	; (3a48 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    3988:	ldr	r3, [pc, #192]	; (3a4c <_spi_dma_rxISR0()+0xc8>)
    398a:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    398c:	ldr	r5, [r4, #68]	; 0x44
    398e:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    3990:	ldr	r2, [r4, #64]	; 0x40
    3992:	strb	r1, [r3, #31]
    3994:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    3996:	strb	r1, [r3, #28]
    3998:	ldrb	r1, [r0, #4]
    399a:	strb	r1, [r3, #28]
    399c:	cbz	r2, 39de <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    399e:	cmp.w	r2, #32768	; 0x8000
    39a2:	bcs.n	39d6 <_spi_dma_rxISR0()+0x52>
    39a4:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    39a6:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    39a8:	ldrh	r1, [r3, #30]
    39aa:	lsls	r6, r1, #16
    39ac:	bmi.n	3a26 <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    39ae:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    39b0:	ldrh	r1, [r3, #30]
    39b2:	uxth	r1, r1
    39b4:	strh	r1, [r3, #22]
    39b6:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    39b8:	ldrh	r1, [r3, #30]
    39ba:	lsls	r1, r1, #16
    39bc:	bmi.n	3a18 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    39be:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    39c0:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    39c2:	ldrh	r2, [r3, #30]
    39c4:	uxth	r2, r2
    39c6:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    39c8:	str	r1, [r4, #64]	; 0x40
    39ca:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    39cc:	ldr	r3, [pc, #124]	; (3a4c <_spi_dma_rxISR0()+0xc8>)
    39ce:	strb	r2, [r3, #27]
    39d0:	ldrb	r2, [r5, #4]
    39d2:	strb	r2, [r3, #27]
    39d4:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    39d6:	ldr	r3, [pc, #120]	; (3a50 <_spi_dma_rxISR0()+0xcc>)
    39d8:	add	r3, r2
    39da:	str	r3, [r4, #64]	; 0x40
    39dc:	b.n	39ca <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    39de:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    39e0:	movs	r5, #15
    39e2:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    39e4:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    39e8:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    39ea:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    39ee:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    39f0:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    39f2:	ldr	r5, [r1, #0]
    39f4:	ldr	r1, [pc, #92]	; (3a54 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    39f6:	str	r2, [r3, #28]
    39f8:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    39fa:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    39fe:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    3a00:	strb.w	r6, [r4, #61]	; 0x3d
    3a04:	bne.n	3a36 <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3a06:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3a08:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3a0a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3a0c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3a0e:	beq.n	3a40 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3a10:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3a14:	b.w	b5ec <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    3a18:	ldrh	r1, [r3, #30]
    3a1a:	ubfx	r2, r2, #0, #9
    3a1e:	and.w	r1, r1, #65024	; 0xfe00
    3a22:	orrs	r2, r1
    3a24:	b.n	39be <_spi_dma_rxISR0()+0x3a>
    3a26:	ldrh	r1, [r3, #30]
    3a28:	ubfx	r6, r2, #0, #9
    3a2c:	and.w	r1, r1, #65024	; 0xfe00
    3a30:	orrs	r1, r6
    3a32:	strh	r1, [r3, #30]
    3a34:	b.n	39b0 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a36:	mov	r3, r5
    3a38:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3a3a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a3e:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3a40:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3a42:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3a46:	bx	r3
    3a48:	.word	0x20000bd4
    3a4c:	.word	0x400e8000
    3a50:	.word	0xffff8001
    3a54:	.word	0x00003911

00003a58 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    3a58:	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    3a5a:	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3a5c:	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3a60:	ldr.w	lr, [pc, #508]	; 3c60 <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3a64:	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3a66:	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    3a68:	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a6a:	ldr	r4, [pc, #468]	; (3c40 <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3a6c:	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a70:	ldr	r7, [pc, #464]	; (3c44 <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3a72:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3a74:	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a78:	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3a7a:	ldr	r2, [pc, #460]	; (3c48 <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a7c:	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    3a7e:	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3a80:	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3a84:	ldrb	r7, [r0, #16]
    3a86:	add	r7, r3
    3a88:	ldrb	r7, [r7, #16]
    3a8a:	add.w	r7, r2, r7, lsl #4
    3a8e:	ldr	r7, [r7, #8]
    3a90:	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    3a92:	ldrb	r7, [r0, #17]
    3a94:	add	r7, r3
    3a96:	ldrb.w	r7, [r7, #36]	; 0x24
    3a9a:	add.w	r7, r2, r7, lsl #4
    3a9e:	ldr	r7, [r7, #8]
    3aa0:	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    3aa2:	ldrb	r7, [r0, #18]
    3aa4:	add	r7, r3
    3aa6:	ldrb.w	r7, [r7, #56]	; 0x38
    3aaa:	add.w	r7, r2, r7, lsl #4
    3aae:	ldr	r7, [r7, #8]
    3ab0:	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    3ab2:	ldr	r7, [r1, #0]
    3ab4:	ldr	r6, [r3, #4]
    3ab6:	orrs	r6, r7
    3ab8:	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    3aba:	ldrb	r1, [r0, #16]
    3abc:	adds	r6, r3, r1
    3abe:	add.w	r1, r3, r1, lsl #2
    3ac2:	ldrb	r6, [r6, #16]
    3ac4:	ldr	r7, [r1, #20]
    3ac6:	add.w	r1, r2, r6, lsl #4
    3aca:	ldr	r1, [r1, #4]
    3acc:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    3ace:	ldrb	r1, [r0, #17]
    3ad0:	adds	r6, r3, r1
    3ad2:	adds	r1, #10
    3ad4:	ldrb.w	r6, [r6, #36]	; 0x24
    3ad8:	ldr.w	r7, [r3, r1, lsl #2]
    3adc:	add.w	r1, r2, r6, lsl #4
    3ae0:	ldr	r1, [r1, #4]
    3ae2:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3ae4:	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    3ae6:	ldr.w	lr, [r3, #72]	; 0x48

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3aea:	adds	r6, r3, r1
    3aec:	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    3af0:	ldr	r7, [r3, #32]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3af2:	ldrb.w	r6, [r6, #56]	; 0x38
    3af6:	ldr	r1, [r1, #60]	; 0x3c
    3af8:	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    3afc:	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3afe:	ldr	r2, [r2, #4]
    3b00:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    3b02:	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3b04:	ldr	r2, [r0, #0]
    3b06:	add	r1, r3
    3b08:	ldrb.w	r1, [r1, #68]	; 0x44
    3b0c:	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    3b10:	ldrb	r1, [r0, #16]
    3b12:	add	r1, r3
    3b14:	ldrb	r1, [r1, #28]
    3b16:	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    3b18:	ldrb	r1, [r0, #17]
    3b1a:	add	r3, r1
    3b1c:	ldrb.w	r3, [r3, #48]	; 0x30
    3b20:	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    3b22:	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    3b24:	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3b26:	ldrb	r3, [r0, #19]
    3b28:	cmp	r3, #0
    3b2a:	beq.n	3b80 <SPIClass::begin()+0x128>
			__disable_irq();
    3b2c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3b2e:	ldrb	r3, [r0, #19]
    3b30:	lsls	r4, r3, #31
    3b32:	bpl.n	3b42 <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3b34:	ldr	r2, [pc, #276]	; (3c4c <SPIClass::begin()+0x1f4>)
    3b36:	ldr	r3, [r0, #20]
    3b38:	ldr	r1, [r2, #0]
    3b3a:	ands	r3, r1
    3b3c:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    3b3e:	str	r3, [r2, #0]
    3b40:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    3b42:	lsls	r1, r3, #30
    3b44:	bpl.n	3b54 <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3b46:	ldr	r2, [pc, #264]	; (3c50 <SPIClass::begin()+0x1f8>)
    3b48:	ldr	r3, [r0, #24]
    3b4a:	ldr	r1, [r2, #0]
    3b4c:	ands	r3, r1
    3b4e:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    3b50:	str	r3, [r2, #0]
    3b52:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    3b54:	lsls	r2, r3, #29
    3b56:	bpl.n	3b66 <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3b58:	ldr	r2, [pc, #248]	; (3c54 <SPIClass::begin()+0x1fc>)
    3b5a:	ldr	r3, [r0, #28]
    3b5c:	ldr	r1, [r2, #0]
    3b5e:	ands	r3, r1
    3b60:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    3b62:	str	r3, [r2, #0]
    3b64:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    3b66:	lsls	r7, r3, #28
    3b68:	bpl.n	3b78 <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3b6a:	ldr	r2, [pc, #236]	; (3c58 <SPIClass::begin()+0x200>)
    3b6c:	ldr	r3, [r0, #32]
    3b6e:	ldr	r1, [r2, #0]
    3b70:	ands	r3, r1
    3b72:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    3b74:	str	r3, [r2, #0]
    3b76:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    3b78:	lsls	r6, r3, #27
    3b7a:	bmi.n	3c14 <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    3b7c:	cpsie	i
    3b7e:	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    3b80:	ldr	r5, [pc, #216]	; (3c5c <SPIClass::begin()+0x204>)
    3b82:	ldr	r3, [r0, #8]
    3b84:	cmp	r3, r5
    3b86:	beq.n	3c22 <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    3b88:	ldr	r3, [pc, #212]	; (3c60 <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    3b8a:	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    3b8c:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3b8e:	ldr	r4, [pc, #212]	; (3c64 <SPIClass::begin()+0x20c>)
    3b90:	ubfx	r6, r3, #4, #2
    3b94:	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    3b98:	ldr	r3, [pc, #204]	; (3c68 <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3b9a:	ldr.w	r4, [r4, r6, lsl #2]
    3b9e:	adds	r1, #1
    3ba0:	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    3ba4:	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    3ba8:	lsrs	r3, r3, #20
    3baa:	bne.n	3c00 <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3bac:	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    3bae:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3bb0:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    3bb2:	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    3bb4:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    3bb6:	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3bb8:	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    3bba:	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    3bbc:	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    3bbe:	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3bc0:	ldrb	r3, [r0, #19]
    3bc2:	cbz	r3, 3bfe <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    3bc4:	lsls	r5, r3, #31
    3bc6:	bpl.n	3bd0 <SPIClass::begin()+0x178>
    3bc8:	ldr	r3, [pc, #160]	; (3c6c <SPIClass::begin()+0x214>)
    3bca:	ldr	r2, [r0, #40]	; 0x28
    3bcc:	str	r2, [r3, #0]
    3bce:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    3bd0:	lsls	r4, r3, #30
    3bd2:	bpl.n	3bdc <SPIClass::begin()+0x184>
    3bd4:	ldr	r3, [pc, #152]	; (3c70 <SPIClass::begin()+0x218>)
    3bd6:	ldr	r2, [r0, #44]	; 0x2c
    3bd8:	str	r2, [r3, #0]
    3bda:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    3bdc:	lsls	r1, r3, #29
    3bde:	bpl.n	3be8 <SPIClass::begin()+0x190>
    3be0:	ldr	r3, [pc, #144]	; (3c74 <SPIClass::begin()+0x21c>)
    3be2:	ldr	r2, [r0, #48]	; 0x30
    3be4:	str	r2, [r3, #0]
    3be6:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    3be8:	lsls	r2, r3, #28
    3bea:	bpl.n	3bf4 <SPIClass::begin()+0x19c>
    3bec:	ldr	r3, [pc, #136]	; (3c78 <SPIClass::begin()+0x220>)
    3bee:	ldr	r2, [r0, #52]	; 0x34
    3bf0:	str	r2, [r3, #0]
    3bf2:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    3bf4:	lsls	r3, r3, #27
    3bf6:	bpl.n	3bfe <SPIClass::begin()+0x1a6>
    3bf8:	ldr	r2, [r0, #56]	; 0x38
    3bfa:	ldr	r3, [pc, #128]	; (3c7c <SPIClass::begin()+0x224>)
    3bfc:	str	r2, [r3, #0]
    3bfe:	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    3c00:	udiv	r1, r1, r3
    3c04:	cmp	r1, r5
    3c06:	it	hi
    3c08:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    3c0a:	cmp.w	r3, #258	; 0x102
    3c0e:	bcc.n	3c26 <SPIClass::begin()+0x1ce>
    3c10:	ldr	r3, [pc, #108]	; (3c80 <SPIClass::begin()+0x228>)
    3c12:	b.n	3bac <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    3c14:	ldr	r2, [pc, #108]	; (3c84 <SPIClass::begin()+0x22c>)
    3c16:	ldr	r3, [r0, #36]	; 0x24
    3c18:	ldr	r1, [r2, #0]
    3c1a:	ands	r3, r1
    3c1c:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    3c1e:	str	r3, [r2, #0]
    3c20:	b.n	3b7c <SPIClass::begin()+0x124>
    3c22:	ldr	r3, [r0, #12]
    3c24:	b.n	3bae <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    3c26:	cmp	r3, #2
    3c28:	it	ls
    3c2a:	movls	r3, #0
    3c2c:	bls.n	3bac <SPIClass::begin()+0x154>
    3c2e:	subs	r3, #2
    3c30:	lsrs	r4, r3, #1
    3c32:	lsls	r1, r4, #16
    3c34:	orr.w	r3, r3, r4, lsl #8
    3c38:	and.w	r1, r1, #16711680	; 0xff0000
    3c3c:	orrs	r3, r1
    3c3e:	b.n	3bac <SPIClass::begin()+0x154>
    3c40:	.word	0xe3ffffcf
    3c44:	.word	0x08000010
    3c48:	.word	0x20000510
    3c4c:	.word	0xe000e180
    3c50:	.word	0xe000e184
    3c54:	.word	0xe000e188
    3c58:	.word	0xe000e18c
    3c5c:	.word	0x003d0900
    3c60:	.word	0x400fc000
    3c64:	.word	0x200002dc
    3c68:	.word	0x431bde83
    3c6c:	.word	0xe000e100
    3c70:	.word	0xe000e104
    3c74:	.word	0xe000e108
    3c78:	.word	0xe000e10c
    3c7c:	.word	0xe000e110
    3c80:	.word	0x007f7fff
    3c84:	.word	0xe000e190

00003c88 <SPIClass::setMOSI(unsigned char)>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    3c88:	ldr	r2, [r0, #4]
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    3c8a:	ldrb	r3, [r0, #17]
    3c8c:	add	r3, r2
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    3c8e:	push	{r4, r5, r6, r7, lr}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    3c90:	ldrb.w	r3, [r3, #36]	; 0x24
    3c94:	cmp	r3, r1
    3c96:	beq.n	3ca8 <SPIClass::setMOSI(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    3c98:	ldrb.w	r3, [r2, #36]	; 0x24
    3c9c:	cmp	r1, r3
    3c9e:	beq.n	3caa <SPIClass::setMOSI(unsigned char)+0x22>
    3ca0:	ldrb.w	r3, [r2, #37]	; 0x25
    3ca4:	cmp	r1, r3
    3ca6:	beq.n	3ce8 <SPIClass::setMOSI(unsigned char)+0x60>
    3ca8:	pop	{r4, r5, r6, r7, pc}
    3caa:	movs	r4, #0
    3cac:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3cae:	ldr	r6, [r2, #0]
    3cb0:	ldr	r5, [r2, #4]
    3cb2:	ldr	r6, [r6, #0]
    3cb4:	tst	r6, r5
    3cb6:	beq.n	3ce4 <SPIClass::setMOSI(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    3cb8:	ldr	r5, [pc, #52]	; (3cf0 <SPIClass::setMOSI(unsigned char)+0x68>)
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    3cba:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    3cbc:	mov.w	lr, #184	; 0xb8
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    3cc0:	ldr	r7, [r2, #52]	; 0x34
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    3cc2:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    3cc6:	adds	r1, #10
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().mosi_pin[i])) = fastio;
    3cc8:	ldr	r3, [r3, #8]
    3cca:	str.w	lr, [r3]
					*(portConfigRegister(hardware().mosi_pin [i])) = hardware().mosi_mux[i];
    3cce:	ldrb.w	r3, [r6, #36]	; 0x24
    3cd2:	ldr.w	r2, [r2, r1, lsl #2]
    3cd6:	add.w	r5, r5, r3, lsl #4
    3cda:	ldr	r3, [r5, #4]
    3cdc:	str	r2, [r3, #0]
					hardware().mosi_select_input_register = hardware().mosi_select_val[i];
    3cde:	ldrb.w	r3, [r6, #48]	; 0x30
    3ce2:	str	r3, [r7, #0]
				}	
				mosi_pin_index = i;
    3ce4:	strb	r4, [r0, #17]
				return;
    3ce6:	b.n	3ca8 <SPIClass::setMOSI(unsigned char)+0x20>

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if (pin == hardware().mosi_pin[i] ) {
    3ce8:	movs	r4, #1
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    3cea:	mov	r1, r4
    3cec:	b.n	3cae <SPIClass::setMOSI(unsigned char)+0x26>
    3cee:	nop
    3cf0:	.word	0x20000510

00003cf4 <SPIClass::setMISO(unsigned char)>:
    3cf4:	ldr	r2, [r0, #4]
	}
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
    3cf6:	ldrb	r3, [r0, #16]
    3cf8:	add	r3, r2
		}
	}
}

void SPIClass::setMISO(uint8_t pin)
{
    3cfa:	push	{r4, r5, r6, r7}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    3cfc:	ldrb	r3, [r3, #16]
    3cfe:	cmp	r3, r1
    3d00:	beq.n	3d0e <SPIClass::setMISO(unsigned char)+0x1a>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    3d02:	ldrb	r3, [r2, #16]
    3d04:	cmp	r1, r3
    3d06:	beq.n	3d12 <SPIClass::setMISO(unsigned char)+0x1e>
    3d08:	ldrb	r3, [r2, #17]
    3d0a:	cmp	r1, r3
    3d0c:	beq.n	3d4a <SPIClass::setMISO(unsigned char)+0x56>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    3d0e:	pop	{r4, r5, r6, r7}
    3d10:	bx	lr

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    3d12:	movs	r4, #0
    3d14:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3d16:	ldr	r6, [r2, #0]
    3d18:	ldr	r5, [r2, #4]
    3d1a:	ldr	r6, [r6, #0]
    3d1c:	tst	r6, r5
    3d1e:	beq.n	3d46 <SPIClass::setMISO(unsigned char)+0x52>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    3d20:	ldr	r5, [pc, #44]	; (3d50 <SPIClass::setMISO(unsigned char)+0x5c>)
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    3d22:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    3d24:	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    3d26:	adds	r1, #4
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    3d28:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    3d2c:	add.w	r1, r2, r1, lsl #2
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    3d30:	ldr	r2, [r2, #32]
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().miso_pin[i])) = fastio;
    3d32:	ldr	r3, [r3, #8]
    3d34:	str	r7, [r3, #0]
					*(portConfigRegister(hardware().miso_pin[i])) = hardware().miso_mux[i];
    3d36:	ldrb	r3, [r6, #16]
    3d38:	ldr	r1, [r1, #4]
    3d3a:	add.w	r5, r5, r3, lsl #4
    3d3e:	ldr	r3, [r5, #4]
    3d40:	str	r1, [r3, #0]
					hardware().miso_select_input_register = hardware().miso_select_val[i];
    3d42:	ldrb	r3, [r6, #28]
    3d44:	str	r3, [r2, #0]
				}	
				miso_pin_index = i;
    3d46:	strb	r4, [r0, #16]
				return;
    3d48:	b.n	3d0e <SPIClass::setMISO(unsigned char)+0x1a>

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if (pin == hardware().miso_pin[i] ) {
    3d4a:	movs	r4, #1
}

void SPIClass::setMISO(uint8_t pin)
{
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    3d4c:	mov	r1, r4
    3d4e:	b.n	3d16 <SPIClass::setMISO(unsigned char)+0x22>
    3d50:	.word	0x20000510

00003d54 <SPIClass::setSCK(unsigned char)>:
    3d54:	ldr	r2, [r0, #4]
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
    3d56:	ldrb	r3, [r0, #18]
    3d58:	add	r3, r2
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    3d5a:	push	{r4, r5, r6, r7}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    3d5c:	ldrb.w	r3, [r3, #56]	; 0x38
    3d60:	cmp	r3, r1
    3d62:	beq.n	3d74 <SPIClass::setSCK(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    3d64:	ldrb.w	r3, [r2, #56]	; 0x38
    3d68:	cmp	r1, r3
    3d6a:	beq.n	3d78 <SPIClass::setSCK(unsigned char)+0x24>
    3d6c:	ldrb.w	r3, [r2, #57]	; 0x39
    3d70:	cmp	r1, r3
    3d72:	beq.n	3db4 <SPIClass::setSCK(unsigned char)+0x60>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    3d74:	pop	{r4, r5, r6, r7}
    3d76:	bx	lr

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    3d78:	movs	r4, #0
    3d7a:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    3d7c:	ldr	r6, [r2, #0]
    3d7e:	ldr	r5, [r2, #4]
    3d80:	ldr	r6, [r6, #0]
    3d82:	tst	r6, r5
    3d84:	beq.n	3db0 <SPIClass::setSCK(unsigned char)+0x5c>
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    3d86:	ldr	r5, [pc, #52]	; (3dbc <SPIClass::setSCK(unsigned char)+0x68>)
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    3d88:	adds	r6, r2, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    3d8a:	movs	r7, #184	; 0xb8
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    3d8c:	adds	r1, #14
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    3d8e:	add.w	r3, r5, r3, lsl #4
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    3d92:	add.w	r1, r2, r1, lsl #2
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    3d96:	ldr	r2, [r2, #72]	; 0x48
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					// BUGBUG:: Unclear what to do with previous pin as there is no unused setting like t3.x
					uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
					*(portControlRegister(hardware().sck_pin[i])) = fastio;
    3d98:	ldr	r3, [r3, #8]
    3d9a:	str	r7, [r3, #0]
					*(portConfigRegister(hardware().sck_pin [i])) = hardware().sck_mux[i];
    3d9c:	ldrb.w	r3, [r6, #56]	; 0x38
    3da0:	ldr	r1, [r1, #4]
    3da2:	add.w	r5, r5, r3, lsl #4
    3da6:	ldr	r3, [r5, #4]
    3da8:	str	r1, [r3, #0]
					hardware().sck_select_input_register = hardware().sck_select_val[i];
    3daa:	ldrb.w	r3, [r6, #68]	; 0x44
    3dae:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    3db0:	strb	r4, [r0, #18]
				return;
    3db2:	b.n	3d74 <SPIClass::setSCK(unsigned char)+0x20>

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if (pin == hardware().sck_pin[i] ) {
    3db4:	movs	r4, #1
}

void SPIClass::setSCK(uint8_t pin)
{
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    3db6:	mov	r1, r4
    3db8:	b.n	3d7c <SPIClass::setSCK(unsigned char)+0x28>
    3dba:	nop
    3dbc:	.word	0x20000510

00003dc0 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    3dc0:	cbz	r3, 3dc6 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3dc2:	b.w	392c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    3dc6:	bx	lr

00003dc8 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    3dc8:	bx	lr
    3dca:	nop

00003dcc <_GLOBAL__sub_I_SD>:
#include <Arduino.h>
#include <SD.h>

SDClass SD;
    3dcc:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    3dce:	ldr	r3, [pc, #64]	; (3e10 <_GLOBAL__sub_I_SD+0x44>)
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    3dd0:	movs	r4, #0
    3dd2:	ldr	r7, [pc, #64]	; (3e14 <_GLOBAL__sub_I_SD+0x48>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3dd4:	movs	r6, #7
    3dd6:	movs	r5, #40	; 0x28
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    3dd8:	ldr	r2, [pc, #60]	; (3e18 <_GLOBAL__sub_I_SD+0x4c>)
    3dda:	ldr	r1, [pc, #64]	; (3e1c <_GLOBAL__sub_I_SD+0x50>)
    3ddc:	mov	r0, r3
    3dde:	str	r7, [r3, #0]
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    3de0:	ldr	r7, [pc, #60]	; (3e20 <_GLOBAL__sub_I_SD+0x54>)
    3de2:	str.w	r2, [r3, #1164]	; 0x48c
    3de6:	str.w	r1, [r3, #1176]	; 0x498
    3dea:	str.w	r7, [r3, #1184]	; 0x4a0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3dee:	str.w	r6, [r3, #1188]	; 0x4a4
    3df2:	strb.w	r5, [r3, #1199]	; 0x4af
    3df6:	str.w	r4, [r3, #1148]	; 0x47c
    3dfa:	str.w	r4, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    3dfe:	strb.w	r4, [r3, #1172]	; 0x494
    3e02:	strb.w	r4, [r3, #1202]	; 0x4b2
    3e06:	ldr	r2, [pc, #28]	; (3e24 <_GLOBAL__sub_I_SD+0x58>)
    3e08:	ldr	r1, [pc, #28]	; (3e28 <_GLOBAL__sub_I_SD+0x5c>)
    3e0a:	pop	{r4, r5, r6, r7}
    3e0c:	b.w	bb40 <__aeabi_atexit>
    3e10:	.word	0x20005be8
    3e14:	.word	0x2000012c
    3e18:	.word	0x200004c0
    3e1c:	.word	0x20000468
    3e20:	.word	0x003d0900
    3e24:	.word	0x20000bb0
    3e28:	.word	0x00003dc9

00003e2c <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    3e2c:	push	{r3, r4, r5, lr}
    3e2e:	movs	r1, #10
    3e30:	mov	r5, r0
    3e32:	ldr	r0, [pc, #40]	; (3e5c <dbgPrint(unsigned short)+0x30>)
    3e34:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3e38:	ldr	r4, [pc, #36]	; (3e60 <dbgPrint(unsigned short)+0x34>)
    3e3a:	movs	r1, #13
    3e3c:	ldr	r0, [pc, #36]	; (3e64 <dbgPrint(unsigned short)+0x38>)
    3e3e:	bl	a3fc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3e42:	movs	r0, #46	; 0x2e
    3e44:	bl	a3d0 <usb_serial_putchar>
    3e48:	mov	r1, r5
    3e4a:	mov	r0, r4
    3e4c:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3e50:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    3e52:	ldmia.w	sp!, {r3, r4, r5, lr}
    3e56:	b.w	b728 <Print::println()>
    3e5a:	nop
    3e5c:	.word	0x2000035c
    3e60:	.word	0x20000c58
    3e64:	.word	0x20000368

00003e68 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3e68:	push	{r4, lr}
    3e6a:	mov	r4, r0
  bool rtn = sync();
    3e6c:	bl	542c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3e70:	movs	r3, #0
    3e72:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3e76:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3e7a:	pop	{r4, pc}

00003e7c <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3e7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3e80:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3e84:	sub	sp, #20
    3e86:	mov	r9, r0
    3e88:	mov	r8, r1
    3e8a:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3e8c:	add	r6, sp, #4
  size_t n = 0;
  if (!isOpen()) {
    3e8e:	ldrb.w	r4, [r0, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3e92:	ldmia.w	r3, {r0, r1, r2}
    3e96:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    3e9a:	cmp	r4, #0
    3e9c:	beq.n	3f14 <ExFatFile::getName(char*, unsigned int)+0x98>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3e9e:	ldrb.w	r3, [r9, #48]	; 0x30
    3ea2:	cmp	r3, #1
    3ea4:	bls.n	3f38 <ExFatFile::getName(char*, unsigned int)+0xbc>
    3ea6:	movs	r7, #1
    3ea8:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    3eaa:	cmp	r7, #1
    3eac:	mov	r1, r6
    3eae:	ldr.w	r0, [r9, #32]
    3eb2:	ite	eq
    3eb4:	moveq	r2, #64	; 0x40
    3eb6:	movne	r2, #32
    3eb8:	bl	4d90 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3ebc:	cmp	r0, #1
    3ebe:	bne.n	3f30 <ExFatFile::getName(char*, unsigned int)+0xb4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    3ec0:	movs	r2, #0
    3ec2:	mov	r1, r6
    3ec4:	ldr.w	r0, [r9, #32]
    3ec8:	bl	4d0c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3ecc:	cbz	r0, 3f28 <ExFatFile::getName(char*, unsigned int)+0xac>
    3ece:	ldrb	r3, [r0, #0]
    3ed0:	cmp	r3, #193	; 0xc1
    3ed2:	bne.n	3f28 <ExFatFile::getName(char*, unsigned int)+0xac>
    3ed4:	add.w	r1, r8, r4
    3ed8:	mov	r2, r4
    3eda:	add.w	lr, r0, #30
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    3ede:	adds	r4, #1
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3ee0:	movs	r3, #63	; 0x3f
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    3ee2:	cmp	r4, r5
    3ee4:	bcs.n	3f06 <ExFatFile::getName(char*, unsigned int)+0x8a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3ee6:	ldrh.w	r2, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3eea:	cmp	r2, #126	; 0x7e
    3eec:	it	ls
    3eee:	uxtbls	r3, r2
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3ef0:	cmp	r0, lr
    3ef2:	mov	r2, r4
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3ef4:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3ef8:	bne.n	3ede <ExFatFile::getName(char*, unsigned int)+0x62>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3efa:	adds	r7, #1
    3efc:	ldrb.w	r3, [r9, #48]	; 0x30
    3f00:	uxtb	r7, r7
    3f02:	cmp	r3, r7
    3f04:	bhi.n	3eaa <ExFatFile::getName(char*, unsigned int)+0x2e>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3f06:	movs	r3, #0
  return n;
    3f08:	mov	r0, r2
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3f0a:	strb.w	r3, [r8, r2]
  return n;

 fail:
  *name = 0;
  return 0;
}
    3f0e:	add	sp, #20
    3f10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
    3f14:	movs	r0, #81	; 0x51
    3f16:	bl	3e2c <dbgPrint(unsigned short)>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3f1a:	movs	r3, #0
  return 0;
    3f1c:	mov	r0, r3
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3f1e:	strb.w	r3, [r8]
  return 0;
}
    3f22:	add	sp, #20
    3f24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
    3f28:	movs	r0, #92	; 0x5c
    3f2a:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    3f2e:	b.n	3f1a <ExFatFile::getName(char*, unsigned int)+0x9e>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
      DBG_FAIL_MACRO;
    3f30:	movs	r0, #86	; 0x56
    3f32:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    3f36:	b.n	3f1a <ExFatFile::getName(char*, unsigned int)+0x9e>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3f38:	movs	r2, #0
    3f3a:	b.n	3f06 <ExFatFile::getName(char*, unsigned int)+0x8a>

00003f3c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3f3c:	push	{r3, r4, r5, lr}
    3f3e:	mov	r5, r1
  if (isOpen()) {
    3f40:	ldrb.w	r1, [r0, #49]	; 0x31
    3f44:	cbnz	r1, 3f60 <ExFatFile::openRoot(ExFatVolume*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3f46:	movs	r2, #56	; 0x38
    3f48:	mov	r4, r0
    3f4a:	bl	cf7c <memset>
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3f4e:	movs	r3, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3f50:	movs	r2, #64	; 0x40
  m_vol = vol;
    3f52:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3f54:	mov	r0, r3
    3f56:	strb.w	r3, [r4, #51]	; 0x33
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3f5a:	strb.w	r2, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    3f5e:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    3f60:	mov.w	r0, #444	; 0x1bc
    3f64:	bl	3e2c <dbgPrint(unsigned short)>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3f68:	movs	r0, #0
    3f6a:	pop	{r3, r4, r5, pc}

00003f6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3f6c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    3f70:	ldrb	r0, [r1, #0]
    3f72:	cmp	r0, #32
    3f74:	bne.n	3f7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    3f76:	ldrb.w	r0, [r1, #1]!
    3f7a:	cmp	r0, #32
    3f7c:	beq.n	3f76 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    3f7e:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    3f80:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    3f82:	cmp	r0, #47	; 0x2f
    3f84:	beq.n	4050 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
    3f86:	cmp	r0, #0
    3f88:	beq.n	4050 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3f8a:	cmp	r0, #92	; 0x5c
    3f8c:	beq.n	3fda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    3f8e:	sub.w	r4, r0, #34	; 0x22
    3f92:	uxtb	r4, r4
    3f94:	cmp	r4, #26
    3f96:	bls.n	3fe0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    3f98:	adds	r5, r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3f9a:	movs	r6, #0
    3f9c:	ldr.w	lr, [pc, #196]	; 4064 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>
    3fa0:	b.n	3faa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    3fa2:	cmp	r4, #26
    3fa4:	lsr.w	r7, lr, r4
    3fa8:	bls.n	3ff0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x84>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3faa:	sub.w	r4, r0, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3fae:	adds	r6, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3fb0:	sub.w	ip, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3fb4:	mov	r8, r5
    3fb6:	cmp	r4, #1
    3fb8:	mov	r7, r6
    3fba:	bls.n	3fda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    3fbc:	cmp	r0, #124	; 0x7c
    3fbe:	beq.n	3fda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3fc0:	cmp.w	ip, #94	; 0x5e
    3fc4:	bhi.n	3fda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3fc6:	ldrb.w	r0, [r5], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3fca:	sub.w	r4, r0, #34	; 0x22
    if (c == 0 || isDirSeparator(c)) {
    3fce:	cbz	r0, 3ffa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    3fd0:	cmp	r0, #47	; 0x2f
    3fd2:	uxtb	r4, r4
    3fd4:	beq.n	3ffa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    3fd6:	cmp	r0, #92	; 0x5c
    3fd8:	bne.n	3fa2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3fda:	movs	r0, #0
    3fdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fe0:	ldr	r5, [pc, #128]	; (4064 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>)
    3fe2:	lsr.w	r4, r5, r4
    3fe6:	lsls	r5, r4, #31
    3fe8:	bpl.n	3f98 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2c>
    3fea:	movs	r0, #0
    3fec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ff0:	lsls	r4, r7, #31
    3ff2:	bpl.n	3faa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    3ff4:	movs	r0, #0
    3ff6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3ffa:	cmp	r0, #47	; 0x2f
    3ffc:	beq.n	4002 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    3ffe:	cmp	r0, #32
    4000:	bne.n	404a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xde>
    4002:	adds	r0, r6, #1
    4004:	add	r0, r1
    4006:	mov	r5, r0
    4008:	ldrb.w	r4, [r0], #1
    400c:	cmp	r4, #32
    400e:	beq.n	4006 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
    4010:	cmp	r4, #47	; 0x2f
    4012:	beq.n	4006 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
  *ptr = &path[end];
    4014:	str	r5, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    4016:	cbz	r6, 4040 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd4>
    c = path[len - 1];
    4018:	add	r7, r1
    401a:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    401e:	cmp	r3, #32
    4020:	beq.n	4026 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xba>
    4022:	cmp	r3, #46	; 0x2e
    4024:	bne.n	403c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd0>
    4026:	subs	r3, r6, #1
    4028:	add	r1, r3
      break;
    }
    len--;
    402a:	mov	r6, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    402c:	cbz	r3, 4042 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    c = path[len - 1];
    402e:	ldrb.w	r0, [r1, #-1]!
    4032:	subs	r3, #1
    if (c != '.' && c != ' ') {
    4034:	cmp	r0, #46	; 0x2e
    4036:	beq.n	402a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
    4038:	cmp	r0, #32
    403a:	beq.n	402a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    403c:	cmp	r6, #255	; 0xff
    403e:	bgt.n	3fda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    4040:	mov	r3, r6
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    4042:	str	r3, [r2, #0]
  return true;
    4044:	movs	r0, #1
    4046:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    404a:	str.w	r8, [r3]
    404e:	b.n	4018 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xac>
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    4050:	cmp	r0, #32
    4052:	beq.n	4058 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xec>
    4054:	cmp	r0, #47	; 0x2f
    4056:	bne.n	405e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf2>
    4058:	movs	r7, #0
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    405a:	mov	r6, r7
    405c:	b.n	4002 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    405e:	str	r1, [r3, #0]
    4060:	movs	r3, #0
    4062:	b.n	4042 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    4064:	.word	0x05000101

00004068 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4068:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    406c:	ldrb.w	r3, [r0, #51]	; 0x33
    4070:	sub	sp, #12
    4072:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4074:	lsls	r5, r3, #31
    4076:	bpl.w	424c <ExFatFile::read(void*, unsigned int)+0x1e4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    407a:	lsls	r0, r3, #25
    407c:	mov	r5, r1
    407e:	mov	r6, r2
    4080:	bpl.w	41d4 <ExFatFile::read(void*, unsigned int)+0x16c>
    if ((m_curPosition + count) > m_validLength) {
    4084:	ldrd	r0, r1, [r4]
    4088:	ldrd	r2, r3, [r4, #16]
    408c:	adds.w	r8, r0, r6
    4090:	adc.w	r9, r1, #0
    4094:	cmp	r3, r9
    4096:	it	eq
    4098:	cmpeq	r2, r8
    409a:	bcc.w	41e0 <ExFatFile::read(void*, unsigned int)+0x178>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    409e:	cmp	r6, #0
    40a0:	beq.w	41e4 <ExFatFile::read(void*, unsigned int)+0x17c>
    40a4:	mov	sl, r4
    40a6:	mov	r8, r6
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    40a8:	movw	r9, #511	; 0x1ff
    40ac:	ldrd	r2, r3, [sl], #24
    40b0:	b.n	4156 <ExFatFile::read(void*, unsigned int)+0xee>
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    40b2:	orrs	r3, r2
    40b4:	bne.n	4196 <ExFatFile::read(void*, unsigned int)+0x12e>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    40b6:	ldrb.w	r3, [r4, #49]	; 0x31
    40ba:	lsls	r2, r3, #25
    40bc:	ite	mi
    40be:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    40c2:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    40c4:	str	r1, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    40c6:	subs	r1, #2
    40c8:	lsrs	r7, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    40ca:	ldrb.w	ip, [r0, #1085]	; 0x43d
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    40ce:	cmp	r8, r9
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    40d0:	ldr.w	r2, [r0, #1060]	; 0x424
    40d4:	lsl.w	lr, r1, ip
    40d8:	add.w	r1, r7, r2
    40dc:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    40de:	bls.n	416a <ExFatFile::read(void*, unsigned int)+0x102>
    40e0:	cmp.w	fp, #0
    40e4:	bne.n	416a <ExFatFile::read(void*, unsigned int)+0x102>
    40e6:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    40ea:	cmp	r1, r2
    40ec:	beq.n	416a <ExFatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    40ee:	cmp.w	r8, #1024	; 0x400
    40f2:	bcc.n	41a4 <ExFatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    40f4:	mov.w	lr, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    40f8:	mov.w	r3, r8, lsr #9
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    40fc:	lsl.w	ip, lr, ip
    4100:	rsb	lr, r7, ip
    4104:	mov	r7, r3
    4106:	cmp	r3, lr
    4108:	it	cs
    410a:	movcs	r7, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    410c:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    410e:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    4112:	bhi.n	412c <ExFatFile::read(void*, unsigned int)+0xc4>
    4114:	adds	r3, r1, r7
    4116:	cmp	r3, r2
    4118:	bls.n	412c <ExFatFile::read(void*, unsigned int)+0xc4>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    411a:	add.w	r0, r0, #524	; 0x20c
    411e:	str	r1, [sp, #4]
    4120:	bl	4a48 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    4124:	cmp	r0, #0
    4126:	beq.n	421a <ExFatFile::read(void*, unsigned int)+0x1b2>
    4128:	ldr	r0, [r4, #32]
    412a:	ldr	r1, [sp, #4]
    412c:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    4130:	mov	r3, r7
    4132:	mov	r2, r5
    4134:	ldr	r7, [r0, #0]
    4136:	ldr	r7, [r7, #12]
    4138:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    413a:	cmp	r0, #0
    413c:	beq.n	4210 <ExFatFile::read(void*, unsigned int)+0x1a8>
    413e:	mov	r0, fp
    4140:	movs	r1, #0
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    4142:	add	r5, fp
    m_curPosition += n;
    4144:	ldrd	r2, r3, [r4]
    4148:	adds	r2, r2, r0
    414a:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    414c:	subs.w	r8, r8, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    4150:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4154:	beq.n	41e4 <ExFatFile::read(void*, unsigned int)+0x17c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4156:	ldr	r0, [r4, #32]
    4158:	ldr.w	r7, [r0, #1072]	; 0x430
    415c:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    415e:	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
    4162:	cmp	r7, #0
    4164:	beq.n	40b2 <ExFatFile::read(void*, unsigned int)+0x4a>
    4166:	ldr	r1, [r4, #24]
    4168:	b.n	40c6 <ExFatFile::read(void*, unsigned int)+0x5e>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    416a:	add.w	r0, r0, #524	; 0x20c
    416e:	movs	r2, #0
    4170:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    4174:	cmp	r0, #0
    4176:	beq.n	41f2 <ExFatFile::read(void*, unsigned int)+0x18a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    4178:	rsb	r3, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    417c:	add.w	r1, r0, fp
    4180:	mov	r0, r5
    4182:	cmp	r3, r8
    4184:	it	cs
    4186:	movcs	r3, r8
    4188:	mov	fp, r3
    418a:	mov	r2, r3
    418c:	bl	9c8c <memcpy>
    4190:	movs	r1, #0
    4192:	mov	r0, fp
    4194:	b.n	4142 <ExFatFile::read(void*, unsigned int)+0xda>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    4196:	ldrb.w	r3, [r4, #51]	; 0x33
    419a:	lsls	r3, r3, #25
    419c:	bpl.n	41be <ExFatFile::read(void*, unsigned int)+0x156>
        m_curCluster++;
    419e:	ldr	r1, [r4, #24]
    41a0:	adds	r1, #1
    41a2:	b.n	40c4 <ExFatFile::read(void*, unsigned int)+0x5c>
    41a4:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    41a8:	mov	r2, r5
    41aa:	ldr	r3, [r0, #0]
    41ac:	ldr	r3, [r3, #8]
    41ae:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    41b0:	cbz	r0, 4224 <ExFatFile::read(void*, unsigned int)+0x1bc>
    41b2:	mov.w	r0, #512	; 0x200
    41b6:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    41b8:	mov.w	fp, #512	; 0x200
    41bc:	b.n	4142 <ExFatFile::read(void*, unsigned int)+0xda>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    41be:	mov	r2, sl
    41c0:	ldr	r1, [r4, #24]
    41c2:	bl	4d44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    41c6:	sxtb	r0, r0
        if (fg < 0) {
    41c8:	cmp	r0, #0
    41ca:	blt.n	422e <ExFatFile::read(void*, unsigned int)+0x1c6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    41cc:	beq.n	4238 <ExFatFile::read(void*, unsigned int)+0x1d0>
    41ce:	ldr	r0, [r4, #32]
    41d0:	ldr	r1, [r4, #24]
    41d2:	b.n	40c6 <ExFatFile::read(void*, unsigned int)+0x5e>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    41d4:	ldrb.w	r3, [r4, #49]	; 0x31
    41d8:	lsls	r1, r3, #28
    41da:	bmi.w	4084 <ExFatFile::read(void*, unsigned int)+0x1c>
    41de:	b.n	409e <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    41e0:	subs	r6, r2, r0
    41e2:	b.n	409e <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    41e4:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    41e8:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    41ec:	add	sp, #12
    41ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
        DBG_FAIL_MACRO;
    41f2:	movw	r0, #599	; 0x257
    41f6:	bl	3e2c <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    41fa:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    41fe:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    4202:	orr.w	r3, r3, #2
    4206:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    420a:	add	sp, #12
    420c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    4210:	mov.w	r0, #624	; 0x270
    4214:	bl	3e2c <dbgPrint(unsigned short)>
        goto fail;
    4218:	b.n	41fa <ExFatFile::read(void*, unsigned int)+0x192>
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
          DBG_FAIL_MACRO;
    421a:	movw	r0, #619	; 0x26b
    421e:	bl	3e2c <dbgPrint(unsigned short)>
          goto fail;
    4222:	b.n	41fa <ExFatFile::read(void*, unsigned int)+0x192>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    4224:	mov.w	r0, #632	; 0x278
    4228:	bl	3e2c <dbgPrint(unsigned short)>
        goto fail;
    422c:	b.n	41fa <ExFatFile::read(void*, unsigned int)+0x192>
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
        if (fg < 0) {
          DBG_FAIL_MACRO;
    422e:	movw	r0, #575	; 0x23f
    4232:	bl	3e2c <dbgPrint(unsigned short)>
          goto fail;
    4236:	b.n	41fa <ExFatFile::read(void*, unsigned int)+0x192>
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    4238:	ldrb.w	r3, [r4, #49]	; 0x31
    423c:	tst.w	r3, #80	; 0x50
    4240:	bne.n	41e8 <ExFatFile::read(void*, unsigned int)+0x180>
            break;
          }
          DBG_FAIL_MACRO;
    4242:	movw	r0, #583	; 0x247
    4246:	bl	3e2c <dbgPrint(unsigned short)>
          goto fail;
    424a:	b.n	41fa <ExFatFile::read(void*, unsigned int)+0x192>
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    424c:	movw	r0, #555	; 0x22b
    4250:	bl	3e2c <dbgPrint(unsigned short)>
    goto fail;
    4254:	b.n	41fa <ExFatFile::read(void*, unsigned int)+0x192>
    4256:	nop

00004258 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    4258:	push	{r4, r5, r6, r7, lr}
    425a:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    425c:	movs	r2, #1
    425e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
    4260:	ldr	r5, [r0, #24]
    4262:	add.w	r1, sp, #7
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
    4266:	ldrd	r6, r7, [r0]
    426a:	bl	4068 <ExFatFile::read(void*, unsigned int)>
    426e:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    4270:	str	r5, [r4, #24]
    4272:	ite	eq
    4274:	ldrbeq.w	r0, [sp, #7]
    4278:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    427c:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    4280:	add	sp, #12
    4282:	pop	{r4, r5, r6, r7, pc}

00004284 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4284:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4288:	ldrb.w	ip, [r0, #49]	; 0x31
    428c:	sub	sp, #20
    428e:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4290:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    4292:	cmp.w	ip, #0
    4296:	beq.n	436a <ExFatFile::seekSet(unsigned long long)+0xe6>
    4298:	mov	r6, r2
    429a:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    429c:	ldrd	r0, r1, [r0]
    42a0:	cmp	r1, r3
    42a2:	it	eq
    42a4:	cmpeq	r0, r2
    42a6:	beq.n	4384 <ExFatFile::seekSet(unsigned long long)+0x100>
    return true;
  }
  if (pos == 0) {
    42a8:	orrs.w	r3, r6, r7
    42ac:	bne.n	42be <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    42ae:	movs	r3, #0
    42b0:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    42b2:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    42b4:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    42b8:	add	sp, #20
    42ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    42be:	tst.w	ip, #8
    42c2:	beq.n	42d0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    if (pos > m_validLength) {
    42c4:	ldrd	r2, r3, [r4, #16]
    42c8:	cmp	r3, r7
    42ca:	it	eq
    42cc:	cmpeq	r2, r6
    42ce:	bcc.n	43a0 <ExFatFile::seekSet(unsigned long long)+0x11c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42d0:	ldr	r3, [r4, #32]
    42d2:	adds.w	r8, r6, #4294967295
    42d6:	ldrb.w	lr, [r3, #1085]	; 0x43d
    42da:	adc.w	r9, r7, #4294967295
    42de:	mov	sl, r8
    42e0:	str	r3, [sp, #12]
    42e2:	add.w	lr, lr, #9
    42e6:	mov	fp, r9
  if (isContiguous()) {
    42e8:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42ec:	uxtb.w	lr, lr
  if (isContiguous()) {
    42f0:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42f4:	rsb	r8, lr, #32
    42f8:	lsr.w	r2, sl, lr
    42fc:	strd	sl, fp, [sp]
    4300:	ldr	r3, [sp, #4]
    4302:	sub.w	sl, lr, #32
    4306:	lsl.w	fp, r3, r8
    430a:	lsr.w	r3, r3, sl
    430e:	orr.w	r2, r2, fp
    4312:	orr.w	fp, r2, r3
  if (isContiguous()) {
    4316:	bne.n	437c <ExFatFile::seekSet(unsigned long long)+0xf8>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4318:	adds.w	r2, r0, #4294967295
    431c:	adc.w	r3, r1, #4294967295
    4320:	lsr.w	lr, r2, lr
    4324:	lsl.w	r8, r3, r8
    4328:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    432c:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4330:	orr.w	lr, lr, r8
    4334:	orr.w	lr, lr, sl
  if (nNew < nCur || m_curPosition == 0) {
    4338:	beq.n	438c <ExFatFile::seekSet(unsigned long long)+0x108>
    433a:	cmp	fp, lr
    433c:	bcc.n	438c <ExFatFile::seekSet(unsigned long long)+0x108>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    433e:	rsb	fp, lr, fp
    4342:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4344:	add.w	r8, r4, #24
    4348:	mov	r5, fp
    434a:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    434c:	cmp	r5, #0
    434e:	beq.n	42b2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4350:	ldr	r1, [r4, #24]
    4352:	subs	r5, #1
    4354:	ldr	r0, [r4, #32]
    4356:	bl	4d44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    435a:	cmp	r0, #0
    435c:	bne.n	434a <ExFatFile::seekSet(unsigned long long)+0xc6>
      DBG_FAIL_MACRO;
    435e:	mov.w	r0, #700	; 0x2bc
    4362:	mov	r5, r9
    4364:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    4368:	b.n	4372 <ExFatFile::seekSet(unsigned long long)+0xee>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    436a:	movw	r0, #665	; 0x299
    436e:	bl	3e2c <dbgPrint(unsigned short)>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    4372:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    4374:	str	r5, [r4, #24]
  return false;
}
    4376:	add	sp, #20
    4378:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    437c:	ldr	r3, [r4, #28]
    437e:	add	r3, fp
    4380:	str	r3, [r4, #24]
    goto done;
    4382:	b.n	42b2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    4384:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    4386:	add	sp, #20
    4388:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    438c:	tst.w	ip, #64	; 0x40
    4390:	bne.n	4398 <ExFatFile::seekSet(unsigned long long)+0x114>
    4392:	ldr	r3, [r4, #28]
    4394:	str	r3, [r4, #24]
    4396:	b.n	4342 <ExFatFile::seekSet(unsigned long long)+0xbe>
    4398:	ldr	r3, [sp, #12]
    439a:	ldr.w	r3, [r3, #1068]	; 0x42c
    439e:	b.n	4394 <ExFatFile::seekSet(unsigned long long)+0x110>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
      DBG_FAIL_MACRO;
    43a0:	movw	r0, #679	; 0x2a7
    43a4:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    43a8:	b.n	4372 <ExFatFile::seekSet(unsigned long long)+0xee>
    43aa:	nop

000043ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    43ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43b0:	mov	fp, r3
    43b2:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    43b4:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    43b8:	mov	r6, r0
    43ba:	str	r2, [sp, #0]
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    43bc:	cbnz	r3, 43ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    43be:	ldrb.w	r3, [r1, #49]	; 0x31
    43c2:	mov	r5, r1
    43c4:	tst.w	r3, #80	; 0x50
    43c8:	bne.n	43e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36>
    DBG_FAIL_MACRO;
    43ca:	movs	r0, #206	; 0xce
    43cc:	bl	3e2c <dbgPrint(unsigned short)>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    43d0:	movs	r3, #0
  m_flags = 0;
  return false;
    43d2:	mov	r0, r3
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    43d4:	strb.w	r3, [r6, #49]	; 0x31
  m_flags = 0;
    43d8:	strb.w	r3, [r6, #51]	; 0x33
  return false;
}
    43dc:	add	sp, #76	; 0x4c
    43de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    43e2:	ldr	r3, [sp, #112]	; 0x70
    43e4:	and.w	r3, r3, #3
    43e8:	cmp	r3, #1
    43ea:	beq.w	460a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25e>
    43ee:	cmp	r3, #2
    43f0:	beq.n	4400 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    43f2:	cmp	r3, #0
    43f4:	beq.w	4606 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;
    default:
      DBG_FAIL_MACRO;
    43f8:	movs	r0, #220	; 0xdc
    43fa:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    43fe:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4400:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    4402:	ldr	r2, [sp, #112]	; 0x70
    4404:	and.w	r2, r2, #8
    4408:	orrs	r3, r2
    440a:	str	r3, [sp, #4]
  if (name) {
    440c:	ldr	r3, [sp, #0]
    440e:	cmp	r3, #0
    4410:	beq.w	4616 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x26a>
    nameHash = exFatHashName(name, nameLength, 0);
    4414:	movs	r2, #0
    4416:	mov	r0, r3
    4418:	mov	r1, fp
    441a:	bl	4f54 <exFatHashName(char const*, unsigned int, unsigned short)>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    441e:	movs	r2, #0
    4420:	str	r0, [sp, #8]
    4422:	movs	r3, #0
    4424:	mov	r0, r5
    4426:	bl	4284 <ExFatFile::seekSet(unsigned long long)>
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    442a:	add.w	r3, fp, #14
    442e:	ldr	r1, [pc, #708]	; (46f4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>)
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    4430:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4434:	smull	r2, r1, r1, r3
    4438:	asrs	r2, r3, #31

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    443a:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    443c:	mov	r7, r9
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    443e:	add	r3, r1
    4440:	rsb	r3, r2, r3, asr #3
    4444:	uxtb	r3, r3
    4446:	add.w	sl, r3, #2
    444a:	str	r3, [sp, #12]
    444c:	uxtb.w	sl, sl

  while (1) {
    n = dir->read(buf, 32);
    4450:	movs	r2, #32
    4452:	add	r1, sp, #40	; 0x28
    4454:	mov	r0, r5
    4456:	bl	4068 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    445a:	cmp	r0, #0
    445c:	beq.n	44dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      goto create;
    }
    if (n != 32) {
    445e:	cmp	r0, #32
    4460:	bne.w	460e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x262>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    4464:	ldrb.w	r3, [sp, #40]	; 0x28
    4468:	lsls	r2, r3, #24
    446a:	bmi.n	453c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x190>
      if (freeCount == 0) {
    446c:	cmp	r4, #0
    446e:	bne.n	4536 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18a>
        freePos.position = dir->curPosition() - 32;
    4470:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    4472:	ldr	r1, [r5, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4474:	subs	r2, #32
        freePos.cluster = dir->curCluster();
    4476:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4478:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    447a:	adds	r4, #1
    447c:	uxtb	r4, r4
      }
      if (!buf[0]) {
    447e:	cbz	r3, 44dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    4480:	cmp	r3, #192	; 0xc0
    4482:	beq.w	45aa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    4486:	cmp	r3, #193	; 0xc1
    4488:	beq.n	4552 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a6>
    448a:	cmp	r3, #133	; 0x85
    448c:	bne.n	4450 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    448e:	movs	r2, #56	; 0x38
    4490:	movs	r1, #0
    4492:	mov	r0, r6
    4494:	bl	cf7c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4498:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    449c:	ldrb.w	r2, [sp, #41]	; 0x29
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    44a0:	lsls	r0, r3, #27
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    44a2:	mov	r0, r5
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    44a4:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    44a8:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    44ac:	it	pl
    44ae:	orrpl.w	r2, r2, #8
    44b2:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    44b6:	ldr	r3, [r5, #0]
    44b8:	ldr	r1, [r5, #32]
    44ba:	ldr	r2, [r5, #24]
    44bc:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    44be:	str	r1, [r6, #32]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    44c0:	add	r1, sp, #40	; 0x28
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    44c2:	str	r2, [r6, #36]	; 0x24
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    44c4:	movs	r2, #32
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    44c6:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    44c8:	ldrb.w	r3, [r5, #51]	; 0x33
    44cc:	ubfx	r3, r3, #6, #1
    44d0:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    44d4:	bl	4068 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    44d8:	cmp	r0, #0
    44da:	bne.n	445e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    44dc:	ldr	r3, [sp, #112]	; 0x70
    44de:	lsls	r1, r3, #22
    44e0:	bpl.w	45fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    44e4:	ldr	r3, [sp, #4]
    44e6:	lsls	r2, r3, #30
    44e8:	bpl.w	45fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    44ec:	ldr	r3, [sp, #0]
    44ee:	cmp	r3, #0
    44f0:	beq.w	45fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    44f4:	cmp	r4, sl
    44f6:	bcc.n	4514 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x168>
    44f8:	b.n	4626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x27a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    44fa:	cmp	r0, #32
    44fc:	bne.w	46e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x33c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    4500:	cbnz	r4, 450c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
      freePos.position = dir->curPosition() - 32;
    4502:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    4504:	ldr	r1, [r5, #24]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    4506:	subs	r2, #32
      freePos.cluster = dir->curCluster();
    4508:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    450a:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    450c:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    450e:	cmp	sl, r4
    4510:	bls.w	4626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x27a>
    n = dir->read(buf, 32);
    4514:	movs	r2, #32
    4516:	add	r1, sp, #40	; 0x28
    4518:	mov	r0, r5
    451a:	bl	4068 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    451e:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    4520:	cmp	r0, #0
    4522:	bne.n	44fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14e>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    4524:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    4526:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    4528:	bl	5494 <ExFatFile::addDirCluster()>
    452c:	cmp	r0, #0
    452e:	beq.w	4746 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    4532:	str	r7, [r5, #24]
      continue;
    4534:	b.n	450e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x162>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    4536:	cmp	r4, sl
    4538:	bcs.n	447e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
    453a:	b.n	447a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xce>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    453c:	cmp.w	r9, #0
    4540:	bne.n	4480 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd4>
      if (freeCount < freeNeed) {
        freeCount = 0;
    4542:	cmp	r4, sl
    4544:	it	cc
    4546:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    4548:	cmp	r3, #133	; 0x85
    454a:	bne.n	4450 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    454c:	mov.w	r9, #1
    4550:	b.n	448e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    4552:	rsb	r8, r7, fp
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    4556:	mov	r2, r7
    4558:	ldr	r1, [sp, #0]
    455a:	add	r0, sp, #40	; 0x28
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    455c:	uxtb.w	r8, r8
    4560:	cmp.w	r8, #15
    4564:	it	cs
    4566:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    456a:	mov	r3, r8
    456c:	bl	4f90 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    4570:	cmp	r0, #0
    4572:	beq.n	45ea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    4574:	add	r7, r8
    4576:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4578:	cmp	fp, r7
    457a:	bne.w	4450 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    457e:	ldr	r3, [sp, #112]	; 0x70
    4580:	lsls	r3, r3, #20
    4582:	bmi.n	461c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x270>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4584:	ldr	r3, [sp, #112]	; 0x70
    4586:	tst.w	r3, #17408	; 0x4400
    458a:	bne.w	46f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34c>
    458e:	ldrb.w	r3, [r6, #51]	; 0x33
    4592:	lsls	r7, r3, #30
    4594:	bmi.w	46f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34c>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4598:	ldr	r3, [sp, #112]	; 0x70
    459a:	lsls	r3, r3, #21
    459c:	bpl.w	473c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x390>
    if (!(m_flags & FILE_FLAG_WRITE)) {
      DBG_FAIL_MACRO;
    45a0:	mov.w	r0, #334	; 0x14e
    45a4:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    45a8:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    45aa:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    45ae:	ldr	r2, [sp, #4]
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    45b0:	lsls	r1, r3, #30
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    45b2:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    45b6:	bpl.n	45c0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    45b8:	orr.w	r3, r2, #64	; 0x40
    45bc:	strb.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
    45c0:	ldr	r1, [sp, #60]	; 0x3c
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    45c2:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
    45c6:	str	r1, [r6, #28]
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    45c8:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    45cc:	ldrd	r0, r1, [sp, #64]	; 0x40
        if (!name) {
    45d0:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    45d2:	strd	r0, r1, [r6, #8]
        if (!name) {
    45d6:	cmp	r3, #0
    45d8:	beq.n	457e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d2>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    45da:	ldrb.w	r3, [sp, #43]	; 0x2b
    45de:	cmp	r3, fp
    45e0:	beq.n	45ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    45e2:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    45e6:	mov	r7, r9
    45e8:	b.n	4450 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    45ea:	mov	r9, r0
    45ec:	b.n	4450 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    45ee:	ldrh.w	r3, [sp, #44]	; 0x2c
    45f2:	ldr	r2, [sp, #8]
    45f4:	cmp	r3, r2
    45f6:	bne.n	45e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    45f8:	movs	r7, #0
    45fa:	b.n	4450 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    45fc:	movw	r0, #355	; 0x163
    4600:	bl	3e2c <dbgPrint(unsigned short)>
    goto fail;
    4604:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4606:	movs	r3, #1
    4608:	b.n	4402 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x56>
    460a:	movs	r3, #2
    460c:	b.n	4402 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x56>
    n = dir->read(buf, 32);
    if (n == 0) {
      goto create;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    460e:	movs	r0, #236	; 0xec
    4610:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    4614:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    4616:	ldr	r3, [sp, #0]
    4618:	str	r3, [sp, #8]
    461a:	b.n	442a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x7e>
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    461c:	mov.w	r0, #320	; 0x140
    4620:	bl	3e2c <dbgPrint(unsigned short)>
    goto fail;
    4624:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4626:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    462a:	movs	r1, #0
    462c:	movs	r2, #56	; 0x38
    462e:	mov	r0, r6
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4630:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4634:	mov	r7, r1

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4636:	add.w	r8, sp, #28
    463a:	add.w	r4, r6, #36	; 0x24
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    463e:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    4642:	bl	cf7c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4646:	ldr	r2, [sp, #12]
    4648:	ldr	r3, [r5, #32]
    464a:	add.w	r5, fp, #30
    464e:	add.w	r9, r2, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    4652:	movs	r2, #8
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4654:	str	r3, [r6, #32]
    4656:	uxtb	r5, r5
  m_attributes = FILE_ATTR_FILE;
    4658:	strb.w	r2, [r6, #49]	; 0x31
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    465c:	uxtb.w	r9, r9
    4660:	str.w	fp, [sp, #12]
    4664:	ldr.w	fp, [sp]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4668:	ldmia.w	r8, {r0, r1, r2}
    466c:	stmia.w	r4, {r0, r1, r2}
    4670:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    4672:	movs	r2, #1
    4674:	mov	r1, r8
    4676:	bl	4d0c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    467a:	mov	r4, r0
    467c:	cmp	r0, #0
    467e:	beq.n	4732 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x386>
    4680:	ldrsb.w	r3, [r0]
    4684:	cmp	r3, #0
    4686:	blt.n	4732 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x386>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4688:	movs	r2, #32
    468a:	movs	r1, #0
    468c:	bl	cf7c <memset>
    if (i == 0) {
    4690:	cmp	r7, #0
    4692:	beq.w	47a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3fa>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    4696:	cmp	r7, #1
    4698:	beq.n	4786 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3da>
    469a:	rsb	r3, r7, r7, lsl #4
    469e:	cmp	r5, #15

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    46a0:	mov.w	r1, #193	; 0xc1
    46a4:	mov	r2, r5
    46a6:	sub.w	r3, r3, #30
    46aa:	it	cs
    46ac:	movcs	r2, #15
    46ae:	strb	r1, [r4, #0]
    46b0:	uxtb	r3, r3
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    46b2:	cbz	r2, 46ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31e>
    46b4:	adds	r4, #2
    46b6:	sxth	r2, r2
    46b8:	add	r3, fp
    46ba:	add.w	r2, r4, r2, lsl #1
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    46be:	ldrb.w	r1, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    46c2:	strh.w	r1, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    46c6:	cmp	r2, r4
    46c8:	bne.n	46be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x312>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    46ca:	adds	r7, #1
    46cc:	uxtb	r7, r7
    46ce:	cmp	sl, r7
    46d0:	bls.n	475a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ae>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    46d2:	movs	r2, #32
    46d4:	mov	r1, r8
    46d6:	ldr	r0, [r6, #32]
    46d8:	bl	4d90 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    46dc:	cmp	r0, #1
    46de:	bne.n	4750 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3a4>
    46e0:	subs	r5, #15
    46e2:	ldr	r0, [r6, #32]
    46e4:	uxtb	r5, r5
    46e6:	b.n	4672 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2c6>
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    46e8:	mov.w	r0, #370	; 0x172
    46ec:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    46f0:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    46f2:	nop
    46f4:	.word	0x88888889
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    46f8:	ldrb.w	r3, [r6, #49]	; 0x31
    46fc:	tst.w	r3, #17
    4700:	bne.n	4728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37c>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4702:	ldr	r3, [sp, #112]	; 0x70
    4704:	lsls	r5, r3, #21
    4706:	bpl.n	473c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x390>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    4708:	ldrb.w	r3, [r6, #51]	; 0x33
    470c:	lsls	r4, r3, #30
    470e:	bpl.w	45a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f4>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    4712:	movs	r2, #0
    4714:	movs	r3, #0
    4716:	mov	r0, r6
    4718:	bl	4284 <ExFatFile::seekSet(unsigned long long)>
    471c:	cbnz	r0, 477a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ce>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
    471e:	mov.w	r0, #338	; 0x152
    4722:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    4726:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
      DBG_FAIL_MACRO;
    4728:	mov.w	r0, #326	; 0x146
    472c:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    4730:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    if (!cache || (cache[0] & 0x80)) {
      DBG_FAIL_MACRO;
    4732:	mov.w	r0, #394	; 0x18a
    4736:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    473a:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    473c:	ldr	r3, [sp, #112]	; 0x70
    473e:	lsls	r0, r3, #17
    4740:	bmi.n	4762 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3b6>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    4742:	movs	r0, #1
    4744:	b.n	43dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
        DBG_FAIL_MACRO;
    4746:	movw	r0, #363	; 0x16b
    474a:	bl	3e2c <dbgPrint(unsigned short)>
        goto fail;
    474e:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
    4750:	mov.w	r0, #388	; 0x184
    4754:	bl	3e2c <dbgPrint(unsigned short)>
        goto fail;
    4758:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    475a:	mov	r0, r6
    475c:	bl	542c <ExFatFile::sync()>
    4760:	b.n	43dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4762:	mov	r0, r6
    4764:	ldrd	r2, r3, [r6, #16]
    4768:	bl	4284 <ExFatFile::seekSet(unsigned long long)>
    476c:	cmp	r0, #0
    476e:	bne.n	4742 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
    DBG_FAIL_MACRO;
    4770:	mov.w	r0, #342	; 0x156
    4774:	bl	3e2c <dbgPrint(unsigned short)>
    goto fail;
    4778:	b.n	43d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    477a:	mov	r0, r6
    477c:	bl	5804 <ExFatFile::truncate()>
    4780:	cmp	r0, #0
    4782:	beq.n	471e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x372>
    4784:	b.n	4742 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4786:	ldr	r3, [sp, #4]
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4788:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    478a:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    478c:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4790:	strb	r1, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4792:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4794:	strb.w	r3, [r6, #51]	; 0x33

      dirStream->nameLength = nameLength;
    4798:	ldrb.w	r3, [sp, #12]
    479c:	strb	r3, [r4, #3]
    479e:	ldrh.w	r3, [sp, #8]
    47a2:	strh	r3, [r4, #4]
    47a4:	b.n	46ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31e>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    47a6:	movs	r3, #133	; 0x85
    47a8:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    47aa:	ldr	r3, [pc, #48]	; (47dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x430>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    47ac:	strb.w	r9, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    47b0:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    47b4:	ldr	r3, [r3, #0]
    47b6:	cmp	r3, #0
    47b8:	beq.n	46ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31e>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    47ba:	add.w	r2, sp, #23
    47be:	add.w	r1, sp, #26
    47c2:	add	r0, sp, #24
    47c4:	blx	r3
        dirFile->createTimeMs = ms10;
    47c6:	ldrb.w	r1, [sp, #23]
    47ca:	ldrh.w	r2, [sp, #26]
    47ce:	ldrh.w	r3, [sp, #24]
    47d2:	strb	r1, [r4, #20]
    47d4:	strh	r2, [r4, #8]
    47d6:	strh	r3, [r4, #10]
    47d8:	b.n	46ca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31e>
    47da:	nop
    47dc:	.word	0x2000609c

000047e0 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    47e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    47e4:	mov	r6, r0
    47e6:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    47e8:	movs	r0, #0
    47ea:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    47ec:	ldrb.w	r1, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    47f0:	str	r2, [sp, #12]
    47f2:	strb.w	r0, [sp, #73]	; 0x49
    47f6:	strb.w	r0, [sp, #74]	; 0x4a
    47fa:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    47fe:	cmp	r1, #0
    4800:	bne.n	48a2 <ExFatFile::open(ExFatFile*, char const*, int)+0xc2>
    4802:	mov	r9, r3
    4804:	ldrb.w	r3, [r5, #49]	; 0x31
    4808:	tst.w	r3, #80	; 0x50
    480c:	beq.n	48a2 <ExFatFile::open(ExFatFile*, char const*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    480e:	ldrb	r3, [r2, #0]
    4810:	mov	r1, r2
    4812:	cmp	r3, #47	; 0x2f
    4814:	beq.n	4884 <ExFatFile::open(ExFatFile*, char const*, int)+0xa4>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4816:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    481a:	add	r3, sp, #12
    481c:	add	r2, sp, #16
    481e:	mov	r0, r6
    4820:	bl	3f6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4824:	mov	r4, r0
    4826:	cmp	r0, #0
    4828:	beq.n	48b2 <ExFatFile::open(ExFatFile*, char const*, int)+0xd2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    482a:	ldr	r3, [sp, #12]
    482c:	ldrb	r3, [r3, #0]
    482e:	cmp	r3, #0
    4830:	beq.n	48c0 <ExFatFile::open(ExFatFile*, char const*, int)+0xe0>
    4832:	ldrb.w	r3, [sp, #16]
    4836:	mov	r1, r5
    4838:	ldr	r2, [sp, #20]
    483a:	mov	r0, r6
    483c:	str.w	r8, [sp]
    4840:	bl	43ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4844:	mov	r4, r0
    4846:	cmp	r0, #0
    4848:	beq.n	48dc <ExFatFile::open(ExFatFile*, char const*, int)+0xfc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    484a:	mov	r4, r6
    484c:	add	r7, sp, #24
    484e:	add.w	lr, r6, #48	; 0x30
    4852:	ldr	r0, [r4, #0]
    4854:	adds	r4, #16
    4856:	ldr.w	r1, [r4, #-12]
    485a:	mov	r5, r7
    485c:	ldr.w	r2, [r4, #-8]
    4860:	adds	r7, #16
    4862:	ldr.w	r3, [r4, #-4]
    4866:	cmp	r4, lr
    4868:	stmia	r5!, {r0, r1, r2, r3}
    486a:	bne.n	4852 <ExFatFile::open(ExFatFile*, char const*, int)+0x72>
    486c:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
    486e:	add	r5, sp, #24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    4870:	str	r0, [r7, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    4872:	mov	r0, r6
    4874:	bl	542c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4878:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    487c:	strb.w	r8, [r6, #51]	; 0x33
    4880:	ldr	r1, [sp, #12]
    4882:	b.n	481a <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4884:	adds	r1, #1
    4886:	str	r1, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4888:	ldrb	r3, [r1, #0]
    488a:	cmp	r3, #47	; 0x2f
    488c:	beq.n	4884 <ExFatFile::open(ExFatFile*, char const*, int)+0xa4>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    488e:	ldr	r1, [r5, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    4890:	cbz	r3, 48ea <ExFatFile::open(ExFatFile*, char const*, int)+0x10a>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4892:	add	r0, sp, #24
    4894:	bl	3f3c <ExFatFile::openRoot(ExFatVolume*)>
    4898:	mov	r4, r0
    489a:	cbz	r0, 48f4 <ExFatFile::open(ExFatFile*, char const*, int)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    489c:	add	r5, sp, #24
    489e:	ldr	r1, [sp, #12]
    48a0:	b.n	4816 <ExFatFile::open(ExFatFile*, char const*, int)+0x36>
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    48a2:	movs	r0, #125	; 0x7d
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    48a4:	movs	r4, #0
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    48a6:	bl	3e2c <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    48aa:	mov	r0, r4
    48ac:	add	sp, #84	; 0x54
    48ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    48b2:	movs	r0, #143	; 0x8f
    48b4:	bl	3e2c <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    48b8:	mov	r0, r4
    48ba:	add	sp, #84	; 0x54
    48bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    48c0:	ldrb.w	r3, [sp, #16]
    48c4:	mov	r1, r5
    48c6:	ldr	r2, [sp, #20]
    48c8:	mov	r0, r6
    48ca:	str.w	r9, [sp]
    48ce:	bl	43ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    48d2:	mov	r4, r0
    48d4:	mov	r0, r4
    48d6:	add	sp, #84	; 0x54
    48d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    48dc:	movs	r0, #150	; 0x96
    48de:	bl	3e2c <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    48e2:	mov	r0, r4
    48e4:	add	sp, #84	; 0x54
    48e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    48ea:	mov	r0, r6
    48ec:	bl	3f3c <ExFatFile::openRoot(ExFatVolume*)>
    48f0:	mov	r4, r0
    48f2:	b.n	48aa <ExFatFile::open(ExFatFile*, char const*, int)+0xca>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    48f4:	movs	r0, #136	; 0x88
    48f6:	bl	3e2c <dbgPrint(unsigned short)>
      goto fail;
    48fa:	b.n	48aa <ExFatFile::open(ExFatFile*, char const*, int)+0xca>

000048fc <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    48fc:	cbz	r1, 4906 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    48fe:	add.w	r1, r1, #1088	; 0x440
    4902:	b.w	47e0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4906:	mov	r0, r1
    4908:	bx	lr
    490a:	nop

0000490c <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    490c:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    490e:	ldrb.w	r3, [r0, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    4912:	sub	sp, #12
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4914:	cbnz	r3, 4920 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    4916:	ldrb.w	r5, [r1, #49]	; 0x31
    491a:	tst.w	r5, #80	; 0x50
    491e:	bne.n	492c <ExFatFile::openNext(ExFatFile*, int)+0x20>
    DBG_FAIL_MACRO;
    4920:	movs	r0, #176	; 0xb0
    4922:	bl	3e2c <dbgPrint(unsigned short)>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    4926:	movs	r0, #0
}
    4928:	add	sp, #12
    492a:	pop	{r4, r5, pc}
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    492c:	ldrd	r4, r5, [r1]
    4930:	movs	r5, #0
    4932:	and.w	r4, r4, #31
    4936:	orrs	r4, r5
    4938:	bne.n	4920 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    493a:	str	r2, [sp, #0]
    493c:	mov	r2, r3
    493e:	bl	43ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    4942:	add	sp, #12
    4944:	pop	{r4, r5, pc}
    4946:	nop

00004948 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4948:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    494a:	movs	r1, #10
    494c:	mov	r5, r0
    494e:	ldr	r0, [pc, #40]	; (4978 <dbgPrint(unsigned short)+0x30>)
    4950:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4954:	ldr	r4, [pc, #36]	; (497c <dbgPrint(unsigned short)+0x34>)
    4956:	movs	r1, #18
    4958:	ldr	r0, [pc, #36]	; (4980 <dbgPrint(unsigned short)+0x38>)
    495a:	bl	a3fc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    495e:	movs	r0, #46	; 0x2e
    4960:	bl	a3d0 <usb_serial_putchar>
    4964:	mov	r1, r5
    4966:	mov	r0, r4
    4968:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    496c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    496e:	ldmia.w	sp!, {r3, r4, r5, lr}
    4972:	b.w	b728 <Print::println()>
    4976:	nop
    4978:	.word	0x2000035c
    497c:	.word	0x20000c58
    4980:	.word	0x20000378

00004984 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4984:	push	{r3, r4, r5, lr}
    4986:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4988:	ldr	r0, [r0, #4]
    498a:	ldr	r3, [r0, #0]
    498c:	add.w	r2, r4, #12
    4990:	ldr	r1, [r4, #8]
    4992:	ldr	r3, [r3, #24]
    4994:	blx	r3
    4996:	mov	r5, r0
    4998:	cbz	r0, 49a6 <FsCache::sync() [clone .part.2]+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    499a:	ldrb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    499c:	mov	r0, r5
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    499e:	bic.w	r3, r3, #1
    49a2:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    49a4:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
    49a6:	movs	r0, #64	; 0x40
    49a8:	bl	4948 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    49ac:	mov	r0, r5
    49ae:	pop	{r3, r4, r5, pc}

000049b0 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    49b0:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    49b2:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    49b6:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    49b8:	str	r3, [r0, #8]
    49ba:	bx	lr

000049bc <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    49bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_blockDev) {
    49c0:	ldr	r4, [r0, #4]
    49c2:	cmp	r4, #0
    49c4:	beq.n	4a3c <FsCache::get(unsigned long, unsigned char)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    49c6:	ldr	r3, [r0, #8]
    49c8:	mov	r6, r0
    49ca:	mov	r8, r1
    49cc:	mov	r7, r2
    49ce:	cmp	r3, r1
    49d0:	beq.n	49f4 <FsCache::get(unsigned long, unsigned char)+0x38>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    49d2:	ldrb	r3, [r0, #0]
    49d4:	lsls	r2, r3, #31
    49d6:	bmi.n	4a04 <FsCache::get(unsigned long, unsigned char)+0x48>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    49d8:	lsls	r3, r7, #30
    49da:	bpl.n	4a1a <FsCache::get(unsigned long, unsigned char)+0x5e>
    49dc:	add.w	r5, r6, #12
    49e0:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    49e2:	and.w	r7, r7, #1
    49e6:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    49e8:	str.w	r8, [r6, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    49ec:	orrs	r7, r3
    49ee:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    49f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49f4:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    49f8:	and.w	r7, r7, #1
    49fc:	orrs	r7, r3
    49fe:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4a00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a04:	bl	4984 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    4a08:	mov	r4, r0
    4a0a:	cmp	r0, #0
    4a0c:	bne.n	49d8 <FsCache::get(unsigned long, unsigned char)+0x1c>
      DBG_FAIL_MACRO;
    4a0e:	movs	r0, #42	; 0x2a
    4a10:	bl	4948 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4a14:	mov	r0, r4
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    4a16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    4a1a:	ldr	r0, [r6, #4]
    4a1c:	add.w	r5, r6, #12
    4a20:	mov	r1, r8
    4a22:	ldr	r3, [r0, #0]
    4a24:	mov	r2, r5
    4a26:	ldr	r3, [r3, #8]
    4a28:	blx	r3
    4a2a:	mov	r4, r0
    4a2c:	cmp	r0, #0
    4a2e:	bne.n	49e0 <FsCache::get(unsigned long, unsigned char)+0x24>
        DBG_FAIL_MACRO;
    4a30:	movs	r0, #47	; 0x2f
    4a32:	bl	4948 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4a36:	mov	r0, r4
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
    4a38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    4a3c:	movs	r0, #37	; 0x25
    4a3e:	bl	4948 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    4a42:	mov	r0, r4
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
    4a44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004a48 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4a48:	ldrb	r3, [r0, #0]
    4a4a:	lsls	r3, r3, #31
    4a4c:	bmi.n	4a52 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    4a4e:	movs	r0, #1
    4a50:	bx	lr
    4a52:	b.w	4984 <FsCache::sync() [clone .part.2]>
    4a56:	nop

00004a58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4a58:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a5c:	mov	r8, r0
    4a5e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4a60:	mov	fp, r1
    4a62:	cmp	r1, #0
    4a64:	beq.n	4aee <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
    4a66:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4a68:	ldr.w	r3, [r8, #1064]	; 0x428
    4a6c:	cmp	r7, r3
    4a6e:	bcs.n	4ae6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
    4a70:	and.w	r5, r7, #7
    4a74:	movs	r3, #1
    4a76:	ubfx	sl, r7, #3, #9
    4a7a:	lsl.w	r5, r3, r5
    4a7e:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4a80:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4a82:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4a84:	ldr.w	r1, [r8, #1060]	; 0x424
    4a88:	movs	r2, #0
    4a8a:	mov	r0, r8
    4a8c:	add.w	r1, r1, r4, lsr #12
    4a90:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4a94:	cbz	r0, 4ac8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    4a96:	ldrb.w	r1, [r0, sl]
    4a9a:	b.n	4ab2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4a9c:	cmp	r2, r9
    4a9e:	beq.n	4af4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4aa0:	cmp	r7, r4
    4aa2:	beq.n	4ac6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4aa4:	ldr.w	r2, [r8, #1064]	; 0x428
    4aa8:	cmp	r4, r2
    4aaa:	bcs.n	4ada <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4aac:	ands.w	r5, r3, #255	; 0xff
    4ab0:	beq.n	4acc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4ab2:	adds	r4, #1
        if (!(mask & cache[i])) {
    4ab4:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4ab6:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4aba:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4abe:	beq.n	4a9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4ac0:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4ac2:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4ac4:	bne.n	4aa4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    4ac6:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4ac8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4acc:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4ad0:	movs	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4ad2:	cmp.w	sl, #512	; 0x200
    4ad6:	bne.n	4a96 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    4ad8:	b.n	4ade <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4ada:	movs	r6, #0
    4adc:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4ade:	mov.w	sl, #0
    4ae2:	movs	r5, #1
    4ae4:	b.n	4a84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    4ae6:	movs	r7, #0
    4ae8:	movs	r5, #1
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    4aea:	mov	sl, r7
    4aec:	b.n	4a80 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4aee:	ldr.w	r7, [r0, #1048]	; 0x418
    4af2:	b.n	4a68 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    4af4:	cmp.w	fp, #0
    4af8:	bne.n	4b04 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    4afa:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4afe:	it	eq
    4b00:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    4b04:	adds	r0, r6, #2
    4b06:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b0a:	nop

00004b0c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4b0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b10:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4b12:	movs	r6, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    4b14:	mov.w	r3, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4b18:	add.w	r9, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    4b1c:	str.w	r1, [r0, #1080]	; 0x438

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4b20:	mov	r8, r2
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4b22:	str	r1, [r0, #4]
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4b24:	mov	r2, r6
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4b26:	str.w	r1, [r0, #528]	; 0x210
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4b2a:	mov	r0, r9
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4b2c:	strb.w	r6, [r4, #1084]	; 0x43c
    4b30:	mov	r1, r6
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4b32:	strb	r6, [r4, #0]
    4b34:	strb.w	r6, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    4b38:	str	r3, [r4, #8]
    4b3a:	str.w	r3, [r4, #532]	; 0x214
    4b3e:	bl	49bc <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4b42:	clz	r5, r0
    4b46:	lsrs	r5, r5, #5
    4b48:	cmp.w	r8, #4
    4b4c:	it	hi
    4b4e:	orrhi.w	r5, r5, #1
    4b52:	cbnz	r5, 4bc4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xb8>
    4b54:	mov	r7, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4b56:	cmp.w	r8, #0
    4b5a:	bne.n	4b82 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x76>
fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t volStart = 0;
    4b5c:	mov	r6, r5
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4b5e:	movs	r2, #5
    4b60:	ldr	r1, [pc, #216]	; (4c3c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x130>)
    4b62:	adds	r0, r7, #3
    4b64:	bl	d61c <strncmp>
    4b68:	mov	r3, r0
    4b6a:	cmp	r0, #0
    4b6c:	bne.n	4c2e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x122>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4b6e:	ldrb.w	r2, [r7, #108]	; 0x6c
    4b72:	cmp	r2, #9
    4b74:	beq.n	4bd2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xc6>
    DBG_FAIL_MACRO;
    4b76:	movs	r0, #112	; 0x70
    4b78:	bl	4948 <dbgPrint(unsigned short)>
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
    4b7c:	mov	r0, r5
    4b7e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4b82:	add.w	r3, r8, #4294967295
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4b86:	add.w	r3, r0, r3, lsl #4
    4b8a:	ldrb.w	r2, [r3, #446]	; 0x1be
    4b8e:	lsls	r2, r2, #25
    4b90:	bne.n	4bb8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
    4b92:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4b96:	cbz	r3, 4bb8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4b98:	add.w	r7, r0, r8, lsl #4
    4b9c:	mov	r2, r5
    4b9e:	mov	r0, r9
    4ba0:	ldr.w	r6, [r7, #438]	; 0x1b6
    4ba4:	mov	r1, r6
    4ba6:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4baa:	mov	r7, r0
    4bac:	cmp	r0, #0
    4bae:	bne.n	4b5e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
      DBG_FAIL_MACRO;
    4bb0:	movs	r0, #101	; 0x65
    4bb2:	bl	4948 <dbgPrint(unsigned short)>
      goto fail;
    4bb6:	b.n	4b7c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x70>
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
      DBG_FAIL_MACRO;
    4bb8:	movs	r0, #95	; 0x5f
    4bba:	bl	4948 <dbgPrint(unsigned short)>
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
    4bbe:	mov	r0, r5
    4bc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4bc4:	mov	r5, r6
  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    4bc6:	movs	r0, #88	; 0x58
    4bc8:	bl	4948 <dbgPrint(unsigned short)>
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
    4bcc:	mov	r0, r5
    4bce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4bd2:	ldr	r2, [r7, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4bd4:	mov.w	lr, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4bd8:	mov	r1, r0
    4bda:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4bdc:	adds	r5, r2, r6
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4bde:	mov	r2, lr
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4be0:	str.w	r5, [r4, #1052]	; 0x41c
    4be4:	ldr	r5, [r7, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4be6:	str.w	r5, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4bea:	ldr	r5, [r7, #88]	; 0x58
    4bec:	add	r6, r5
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;
    4bee:	mov	r5, lr
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4bf0:	str.w	r6, [r4, #1060]	; 0x424
    4bf4:	ldr	r6, [r7, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4bf6:	str.w	r6, [r4, #1064]	; 0x428
    4bfa:	ldr	r6, [r7, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4bfc:	str.w	r6, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4c00:	ldrb.w	r6, [r7, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4c04:	str.w	r3, [r4, #1048]	; 0x418
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4c08:	add.w	r3, r6, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4c0c:	strb.w	r6, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4c10:	lsl.w	r3, lr, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4c14:	subs	r6, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4c16:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    4c1a:	str.w	r6, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4c1e:	bl	4a58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4c22:	movs	r3, #64	; 0x40
  return true;

 fail:
  return false;
}
    4c24:	mov	r0, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    4c26:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;

 fail:
  return false;
}
    4c2a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    4c2e:	movs	r0, #107	; 0x6b
    4c30:	bl	4948 <dbgPrint(unsigned short)>
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
    4c34:	mov	r0, r5
    4c36:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c3a:	nop
    4c3c:	.word	0x2000038c

00004c40 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4c40:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4c44:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4c46:	mov	r5, r2
    4c48:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4c4a:	ldr.w	r2, [r0, #1064]	; 0x428
    4c4e:	adds	r3, r1, r5
    4c50:	cmp	r3, r2
    4c52:	bhi.n	4cf4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb4>
    4c54:	mov	r9, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4c56:	cmp.w	sl, #0
    4c5a:	bne.n	4cca <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8a>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4c5c:	ldr.w	r3, [r0, #1048]	; 0x418
    4c60:	cmp	r1, r3
      m_bitmapStart = start;
    4c62:	it	cc
    4c64:	strcc.w	r1, [r0, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4c68:	and.w	r4, r1, #7
    4c6c:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4c6e:	ldr.w	r3, [r9, #1060]	; 0x424
  i = (start >> 3) & m_sectorMask;
    4c72:	ubfx	fp, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4c76:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4c7a:	add.w	r8, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4c7e:	uxtb	r4, r4
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4c80:	movs	r2, #1
    4c82:	mov	r1, r8
    4c84:	mov	r0, r9
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4c86:	add	r8, r2
    4c88:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4c8c:	mov	r6, r0
    4c8e:	cbz	r0, 4d00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    4c90:	add.w	r7, r0, fp
    4c94:	add.w	r3, r0, #512	; 0x200
    4c98:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4c9c:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4c9e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4ca2:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4ca6:	ite	ne
    4ca8:	movne	r6, #1
    4caa:	moveq	r6, #0
    4cac:	cmp	r6, sl
    4cae:	beq.n	4ce2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa2>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4cb0:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4cb2:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4cb6:	beq.n	4cee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xae>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4cb8:	ands.w	r4, r4, #255	; 0xff
    4cbc:	bne.n	4c9c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5c>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4cbe:	cmp	r3, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4cc0:	mov	fp, r4
    4cc2:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4cc6:	bne.n	4c98 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    4cc8:	b.n	4c80 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4cca:	ldr.w	r0, [r0, #1048]	; 0x418
    4cce:	cmp	r3, r0
    4cd0:	bls.n	4c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4cd2:	cmp	r1, r0
    4cd4:	bhi.n	4c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4cd6:	cmp	r3, r2
    4cd8:	it	cs
    4cda:	movcs	r3, #0
    4cdc:	str.w	r3, [r9, #1048]	; 0x418
    4ce0:	b.n	4c68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
    4ce2:	movs	r0, #216	; 0xd8
    4ce4:	bl	4948 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4ce8:	movs	r0, #0
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
    4cea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4cee:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4cf0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    4cf4:	movs	r0, #191	; 0xbf
    4cf6:	bl	4948 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4cfa:	movs	r0, #0
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
    4cfc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4d00:	movs	r0, #210	; 0xd2
    4d02:	bl	4948 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4d06:	mov	r0, r6
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4d08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004d0c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4d0c:	push	{r4, r5, r6, lr}
    4d0e:	mov	r6, r1
    4d10:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4d12:	ldr.w	r5, [r0, #1072]	; 0x430
    4d16:	add.w	r0, r0, #524	; 0x20c
    4d1a:	ldr	r1, [r1, #4]
    4d1c:	ldr	r3, [r6, #0]
    4d1e:	ands	r1, r5
    4d20:	ldr.w	r5, [r4, #1060]	; 0x424
    4d24:	subs	r3, #2
    4d26:	ldrb.w	r4, [r4, #1085]	; 0x43d
    4d2a:	add.w	r1, r5, r1, lsr #9
    4d2e:	lsls	r3, r4
    4d30:	add	r1, r3
    4d32:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4d36:	cbz	r0, 4d40 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    4d38:	ldr	r3, [r6, #4]
    4d3a:	ubfx	r3, r3, #0, #9
    4d3e:	add	r0, r3
}
    4d40:	pop	{r4, r5, r6, pc}
    4d42:	nop

00004d44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4d44:	push	{r3, r4, r5, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4d46:	ldr.w	r3, [r0, #1064]	; 0x428
    4d4a:	adds	r3, #1
    4d4c:	cmp	r3, r1
    4d4e:	bcs.n	4d5c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x18>
    DBG_FAIL_MACRO;
    4d50:	mov.w	r0, #276	; 0x114
    4d54:	bl	4948 <dbgPrint(unsigned short)>
    return -1;
    4d58:	movs	r0, #255	; 0xff
    4d5a:	pop	{r3, r4, r5, pc}
    4d5c:	mov	r4, r1
    4d5e:	ldr.w	r1, [r0, #1052]	; 0x41c
    4d62:	mov	r5, r2
    4d64:	add.w	r0, r0, #524	; 0x20c
    4d68:	movs	r2, #0
    4d6a:	add.w	r1, r1, r4, lsr #7
    4d6e:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4d72:	cbz	r0, 4d86 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    4d74:	lsls	r4, r4, #2
    4d76:	ubfx	r4, r4, #0, #9
    4d7a:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4d7c:	adds	r2, r3, #1
    4d7e:	beq.n	4d8a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x46>
    return 0;
  }
  *value = next;
    4d80:	str	r3, [r5, #0]
  return 1;
    4d82:	movs	r0, #1
    4d84:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    4d86:	movs	r0, #255	; 0xff
    4d88:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4d8a:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    4d8c:	pop	{r3, r4, r5, pc}
    4d8e:	nop

00004d90 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4d90:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4d92:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4d94:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4d96:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4d9a:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4d9c:	adds	r1, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4d9e:	ands	r3, r4
  pos->position += offset;
    4da0:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4da2:	ldrb.w	r4, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4da6:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4da8:	adds	r4, #9
    4daa:	uxtb	r4, r4
    4dac:	lsr.w	r4, r2, r4
  while (tmp--) {
    4db0:	cbz	r4, 4dc2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4db2:	ldrb	r3, [r5, #8]
    4db4:	cbz	r3, 4dc6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4db6:	ldr	r3, [r5, #0]
    4db8:	adds	r3, #1
    4dba:	str	r3, [r5, #0]
    4dbc:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4dbe:	cmp	r4, #0
    4dc0:	bne.n	4db2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4dc2:	movs	r0, #1
}
    4dc4:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4dc6:	mov	r2, r5
    4dc8:	ldr	r1, [r5, #0]
    4dca:	mov	r0, r6
    4dcc:	bl	4d44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4dd0:	sxtb	r0, r0
      if (status != 1) {
    4dd2:	cmp	r0, #1
    4dd4:	beq.n	4dbc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4dd6:	pop	{r4, r5, r6, pc}

00004dd8 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4dd8:	cmp	r1, #1
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4dda:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4ddc:	bls.n	4dea <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    4dde:	ldr.w	r3, [r0, #1064]	; 0x428
    4de2:	mov	r4, r1
    4de4:	adds	r3, #1
    4de6:	cmp	r1, r3
    4de8:	bls.n	4df6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    4dea:	mov.w	r0, #298	; 0x12a
    4dee:	bl	4948 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4df2:	movs	r0, #0
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
    4df4:	pop	{r4, r5, r6, pc}
    4df6:	ldr.w	r1, [r0, #1052]	; 0x41c
    4dfa:	mov	r5, r2
    4dfc:	add.w	r0, r0, #524	; 0x20c
    4e00:	movs	r2, #1
    4e02:	add.w	r1, r1, r4, lsr #7
    4e06:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4e0a:	mov	r6, r0
    4e0c:	cbz	r0, 4e1a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4e0e:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    4e10:	movs	r0, #1
    4e12:	ubfx	r4, r4, #0, #9
    4e16:	str	r5, [r6, r4]

 fail:
  return false;
}
    4e18:	pop	{r4, r5, r6, pc}
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    DBG_FAIL_MACRO;
    4e1a:	mov.w	r0, #304	; 0x130
    4e1e:	bl	4948 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4e22:	mov	r0, r6
    4e24:	pop	{r4, r5, r6, pc}
    4e26:	nop

00004e28 <ExFatPartition::freeChain(unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4e28:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e2c:	mov	r4, r1
    4e2e:	sub	sp, #8
    4e30:	mov	r7, r0
  uint32_t next;
  uint32_t start = cluster;
    4e32:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4e34:	add	r2, sp, #4
    4e36:	mov	r1, r4
    4e38:	mov	r0, r7
    4e3a:	bl	4d44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e3e:	movs	r2, #0
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4e40:	sxtb	r5, r0
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e42:	mov	r1, r4
    4e44:	mov	r0, r7
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
    4e46:	cmp	r5, r2
    4e48:	blt.n	4e86 <ExFatPartition::freeChain(unsigned long)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e4a:	bl	4dd8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4e4e:	mov	r1, r8
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e50:	mov	r6, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4e52:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4e54:	cbz	r0, 4e76 <ExFatPartition::freeChain(unsigned long)+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4e56:	adds	r2, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4e58:	mov	r0, r7
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4e5a:	ldr	r4, [sp, #4]
    4e5c:	cbz	r5, 4e62 <ExFatPartition::freeChain(unsigned long)+0x3a>
    4e5e:	cmp	r2, r4
    4e60:	beq.n	4e34 <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4e62:	rsb	r2, r8, r2
    4e66:	bl	4c40 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4e6a:	mov	r6, r0
    4e6c:	cbz	r0, 4e98 <ExFatPartition::freeChain(unsigned long)+0x70>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4e6e:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4e70:	cbz	r5, 4e7e <ExFatPartition::freeChain(unsigned long)+0x56>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4e72:	mov	r8, r4
    4e74:	b.n	4e34 <ExFatPartition::freeChain(unsigned long)+0xc>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    4e76:	movw	r0, #325	; 0x145
    4e7a:	bl	4948 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4e7e:	mov	r0, r6
    4e80:	add	sp, #8
    4e82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while (status);

  return true;

 fail:
  return false;
    4e86:	mov	r6, r2
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
    4e88:	movw	r0, #321	; 0x141
    4e8c:	bl	4948 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4e90:	mov	r0, r6
    4e92:	add	sp, #8
    4e94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
    4e98:	mov.w	r0, #330	; 0x14a
    4e9c:	bl	4948 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4ea0:	mov	r0, r6
    4ea2:	add	sp, #8
    4ea4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004ea8 <ExFatPartition::freeClusterCount()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4ea8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4eac:	movs	r4, #0

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4eae:	mov	r8, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    4eb0:	ldr.w	r6, [r0, #1060]	; 0x424
    4eb4:	add.w	r7, r0, #524	; 0x20c
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    4eb8:	mov	r5, r4
    4eba:	mov	r1, r6
    4ebc:	movs	r2, #0
    4ebe:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    4ec0:	adds	r6, #1
    4ec2:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4ec6:	cbz	r0, 4f14 <ExFatPartition::freeClusterCount()+0x6c>
    4ec8:	add.w	lr, r0, #4294967295
    4ecc:	ldr.w	ip, [r8, #1064]	; 0x428
    4ed0:	add.w	r9, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    4ed4:	ldrb.w	r0, [lr, #1]!
    4ed8:	cmp	r0, #255	; 0xff
    4eda:	beq.n	4f04 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    4edc:	cbz	r0, 4ef2 <ExFatPartition::freeClusterCount()+0x4a>
    4ede:	movs	r2, #8
    4ee0:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    4ee2:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4ee4:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    4ee8:	it	ne
    4eea:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4eec:	subs	r2, #1
    4eee:	uxtb	r3, r1
    4ef0:	bne.n	4ee2 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4ef2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4ef4:	cmp	ip, r5
    4ef6:	bls.n	4f0c <ExFatPartition::freeClusterCount()+0x64>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4ef8:	cmp	r5, r9
    4efa:	beq.n	4eba <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    4efc:	ldrb.w	r0, [lr, #1]!
    4f00:	cmp	r0, #255	; 0xff
    4f02:	bne.n	4edc <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4f04:	adds	r5, #8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    4f06:	adds	r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4f08:	cmp	ip, r5
    4f0a:	bhi.n	4ef8 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    4f0c:	rsb	r0, r4, ip
    4f10:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    4f14:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004f18 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4f18:	push	{r4, r5, r6, lr}
    4f1a:	sub	sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4f1c:	ldr.w	r1, [r0, #1068]	; 0x42c
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4f20:	mov	r5, r0
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    4f22:	movs	r4, #0
    4f24:	add	r6, sp, #8
    4f26:	str.w	r1, [r6, #-4]!
    4f2a:	b.n	4f30 <ExFatPartition::rootLength()+0x18>
  int8_t status;
  do {
    4f2c:	beq.n	4f42 <ExFatPartition::rootLength()+0x2a>
    4f2e:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    4f30:	mov	r2, r6
    4f32:	mov	r0, r5
    4f34:	bl	4d44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    n++;
    4f38:	adds	r4, #1
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4f3a:	sxtb	r0, r0
    if (status < 0) return 0;
    4f3c:	cmp	r0, #0
    4f3e:	bge.n	4f2c <ExFatPartition::rootLength()+0x14>
    4f40:	movs	r4, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    4f42:	ldrb.w	r0, [r5, #1085]	; 0x43d
    4f46:	adds	r0, #9
    4f48:	uxtb	r0, r0
}
    4f4a:	lsl.w	r0, r4, r0
    4f4e:	add	sp, #8
    4f50:	pop	{r4, r5, r6, pc}
    4f52:	nop

00004f54 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4f54:	cbz	r1, 4f8c <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
    4f56:	add	r1, r0
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4f58:	push	{r4, r5}
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4f5a:	ldrb.w	r4, [r0], #1
    4f5e:	lsls	r3, r2, #15
    4f60:	orr.w	r2, r3, r2, lsr #1
    if ('a' <= c && c <= 'z') {
    4f64:	sub.w	r3, r4, #97	; 0x61
      c -= 'a' - 'A';
    4f68:	sub.w	r5, r4, #32
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    4f6c:	cmp	r3, #25
      c -= 'a' - 'A';
    4f6e:	it	ls
    4f70:	uxtbls	r4, r5
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4f72:	cmp	r1, r0
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4f74:	uxtah	r2, r4, r2
    4f78:	uxth	r2, r2
    4f7a:	mov.w	r3, r2, lsl #15
    4f7e:	orr.w	r2, r3, r2, lsr #1
    4f82:	uxth	r2, r2
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4f84:	bne.n	4f5a <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4f86:	mov	r0, r2
    4f88:	pop	{r4, r5}
    4f8a:	bx	lr
    4f8c:	mov	r0, r2
    4f8e:	bx	lr

00004f90 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4f90:	cbz	r3, 4fe6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x56>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4f92:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4f94:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4f96:	cmp	r4, #126	; 0x7e
    4f98:	bhi.n	4fda <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
    4f9a:	add	r3, r2
    4f9c:	adds	r0, #2
    4f9e:	add	r2, r1
    4fa0:	add	r1, r3
    4fa2:	ldrb.w	r3, [r2], #1
    4fa6:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4fa8:	sub.w	r6, r3, #97	; 0x61
    4fac:	sub.w	r5, r4, #97	; 0x61
    4fb0:	cmp	r6, #25
    4fb2:	ite	ls
    4fb4:	movls	r6, #32
    4fb6:	movhi	r6, #0
    4fb8:	cmp	r5, #25
    4fba:	sub.w	r3, r3, r6
    4fbe:	ite	ls
    4fc0:	movls	r5, #32
    4fc2:	movhi	r5, #0
    4fc4:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4fc6:	subs	r4, r4, r5
    4fc8:	uxtb	r4, r4
    4fca:	cmp	r4, r3
    4fcc:	bne.n	4fda <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4fce:	cmp	r2, r1
    4fd0:	beq.n	4fe0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x50>
    4fd2:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4fd6:	cmp	r4, #126	; 0x7e
    4fd8:	bls.n	4fa2 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4fda:	movs	r0, #0
    }
  }
  return true;
}
    4fdc:	pop	{r4, r5, r6}
    4fde:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4fe0:	movs	r0, #1
}
    4fe2:	pop	{r4, r5, r6}
    4fe4:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4fe6:	movs	r0, #1
}
    4fe8:	bx	lr
    4fea:	nop

00004fec <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4fec:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4fee:	movs	r1, #10
    4ff0:	mov	r5, r0
    4ff2:	ldr	r0, [pc, #40]	; (501c <dbgPrint(unsigned short)+0x30>)
    4ff4:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4ff8:	ldr	r4, [pc, #36]	; (5020 <dbgPrint(unsigned short)+0x34>)
    4ffa:	movs	r1, #18
    4ffc:	ldr	r0, [pc, #36]	; (5024 <dbgPrint(unsigned short)+0x38>)
    4ffe:	bl	a3fc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5002:	movs	r0, #46	; 0x2e
    5004:	bl	a3d0 <usb_serial_putchar>
    5008:	mov	r1, r5
    500a:	mov	r0, r4
    500c:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5010:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    5012:	ldmia.w	sp!, {r3, r4, r5, lr}
    5016:	b.w	b728 <Print::println()>
    501a:	nop
    501c:	.word	0x2000035c
    5020:	.word	0x20000c58
    5024:	.word	0x20000394

00005028 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5028:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    502a:	push	{r3, r4, r5, r6, r7, lr}
    502c:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    502e:	ldr	r0, [r0, #32]
    5030:	cbz	r1, 5034 <ExFatFile::addCluster()+0xc>
    5032:	adds	r1, #1
    5034:	movs	r2, #1
    5036:	bl	4a58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    503a:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    503c:	mov	r6, r0
  if (find < 2) {
    503e:	bls.n	50c6 <ExFatFile::addCluster()+0x9e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    5040:	movs	r3, #1
    5042:	mov	r1, r0
    5044:	ldr	r0, [r4, #32]
    5046:	mov	r2, r3
    5048:	bl	4c40 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    504c:	mov	r7, r0
    504e:	cmp	r0, #0
    5050:	beq.n	50d2 <ExFatFile::addCluster()+0xaa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    5052:	ldr	r3, [r4, #24]
    5054:	cbnz	r3, 5068 <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5056:	ldrb.w	r3, [r4, #51]	; 0x33
    505a:	orr.w	r3, r3, #64	; 0x40
    505e:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    5062:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    5064:	mov	r0, r7
    5066:	pop	{r3, r4, r5, r6, r7, pc}
    5068:	ldrb.w	r2, [r4, #51]	; 0x33
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    506c:	lsls	r1, r2, #25
    506e:	bpl.n	5098 <ExFatFile::addCluster()+0x70>
    if (find == (m_curCluster + 1)) {
    5070:	adds	r1, r3, #1
    5072:	cmp	r6, r1
    5074:	beq.n	5062 <ExFatFile::addCluster()+0x3a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5076:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    507a:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    507c:	strb.w	r2, [r4, #51]	; 0x33
    5080:	b.n	5090 <ExFatFile::addCluster()+0x68>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    5082:	ldr	r0, [r4, #32]
    5084:	bl	4dd8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5088:	mov	r3, r0
    508a:	cbz	r0, 50dc <ExFatFile::addCluster()+0xb4>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    508c:	mov	r1, r5
    508e:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    5090:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5092:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    5094:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5096:	bcc.n	5082 <ExFatFile::addCluster()+0x5a>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    5098:	mov.w	r2, #4294967295
    509c:	mov	r1, r6
    509e:	ldr	r0, [r4, #32]
    50a0:	bl	4dd8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    50a4:	mov	r3, r0
    50a6:	cbz	r0, 50e6 <ExFatFile::addCluster()+0xbe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    50a8:	ldr	r1, [r4, #24]
    50aa:	cmp	r1, #0
    50ac:	beq.n	5062 <ExFatFile::addCluster()+0x3a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    50ae:	mov	r2, r6
    50b0:	ldr	r0, [r4, #32]
    50b2:	bl	4dd8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    50b6:	mov	r3, r0
    50b8:	cmp	r0, #0
    50ba:	bne.n	5062 <ExFatFile::addCluster()+0x3a>
      DBG_FAIL_MACRO;
    50bc:	movs	r0, #110	; 0x6e
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    50be:	mov	r7, r3
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    if (!m_vol->fatPut(m_curCluster, find)) {
      DBG_FAIL_MACRO;
    50c0:	bl	4fec <dbgPrint(unsigned short)>
      goto fail;
    50c4:	b.n	5064 <ExFatFile::addCluster()+0x3c>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    50c6:	movs	r7, #0
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    50c8:	movs	r0, #77	; 0x4d
    50ca:	bl	4fec <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    50ce:	mov	r0, r7
    50d0:	pop	{r3, r4, r5, r6, r7, pc}
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    50d2:	movs	r0, #81	; 0x51
    50d4:	bl	4fec <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    50d8:	mov	r0, r7
    50da:	pop	{r3, r4, r5, r6, r7, pc}
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    50dc:	movs	r0, #97	; 0x61
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    50de:	mov	r7, r3
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    50e0:	bl	4fec <dbgPrint(unsigned short)>
        goto fail;
    50e4:	b.n	5064 <ExFatFile::addCluster()+0x3c>
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    50e6:	movs	r0, #104	; 0x68
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    50e8:	mov	r7, r3
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    50ea:	bl	4fec <dbgPrint(unsigned short)>
    goto fail;
    50ee:	b.n	5064 <ExFatFile::addCluster()+0x3c>

000050f0 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    50f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    50f4:	add.w	r3, r0, #36	; 0x24
    50f8:	ldrb.w	r7, [r0, #51]	; 0x33

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    50fc:	sub	sp, #20
    50fe:	mov	r5, r0
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    5100:	and.w	r4, r7, #2
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
    5104:	add	r6, sp, #4
    5106:	ldmia.w	r3, {r0, r1, r2}
    510a:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    510e:	cmp	r4, #0
    5110:	beq.n	51da <ExFatFile::remove()+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    5112:	ldr	r1, [r5, #28]
    5114:	cbnz	r1, 5160 <ExFatFile::remove()+0x70>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5116:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    5118:	movs	r2, #1
    511a:	mov	r1, r6
    511c:	ldr	r0, [r5, #32]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    511e:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    5120:	bl	4d0c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    5124:	mov	r3, r0
    5126:	cmp	r0, #0
    5128:	beq.n	51c8 <ExFatFile::remove()+0xd8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    512a:	ldrb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    512c:	uxtb	r4, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    512e:	and.w	r2, r2, #127	; 0x7f
    5132:	strb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    5134:	ldrb.w	r3, [r5, #48]	; 0x30
    5138:	cmp	r3, r4
    513a:	bcc.n	51aa <ExFatFile::remove()+0xba>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    513c:	cmp	r4, #0
    513e:	beq.n	5118 <ExFatFile::remove()+0x28>
    5140:	movs	r2, #32
    5142:	mov	r1, r6
    5144:	ldr	r0, [r5, #32]
    5146:	bl	4d90 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    514a:	cmp	r0, #1
    514c:	beq.n	5118 <ExFatFile::remove()+0x28>
      DBG_FAIL_MACRO;
    514e:	movw	r0, #287	; 0x11f

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    5152:	movs	r4, #0
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
    5154:	bl	4fec <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    5158:	mov	r0, r4
    515a:	add	sp, #20
    515c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    5160:	lsls	r3, r7, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5162:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    5164:	bpl.n	51f0 <ExFatFile::remove()+0x100>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    5166:	ldrb.w	r2, [r0, #1085]	; 0x43d
    516a:	movs	r3, #0
    516c:	ldrd	r8, r9, [r5, #8]
    5170:	adds	r2, #9
    5172:	adds.w	r8, r8, #4294967295
    5176:	uxtb	r2, r2
    5178:	adc.w	r9, r9, #4294967295
    517c:	rsb	r7, r2, #32
    5180:	sub.w	r4, r2, #32
    5184:	lsr.w	r2, r8, r2
    5188:	lsl.w	r7, r9, r7
    518c:	lsr.w	r4, r9, r4
    5190:	orrs	r2, r7
    5192:	orrs	r2, r4
    5194:	adds	r2, #1
    5196:	bl	4c40 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    519a:	mov	r4, r0
    519c:	cmp	r0, #0
    519e:	bne.n	5116 <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    51a0:	mov.w	r0, #274	; 0x112
    51a4:	bl	4fec <dbgPrint(unsigned short)>
        goto fail;
    51a8:	b.n	5158 <ExFatFile::remove()+0x68>
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    51aa:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    51ac:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    51ae:	strb.w	r3, [r5, #49]	; 0x31
    51b2:	mov	r0, r4
  m_flags = 0;
    51b4:	strb.w	r3, [r5, #51]	; 0x33
    51b8:	bl	4a48 <FsCache::sync()>
    51bc:	cbnz	r0, 5204 <ExFatFile::remove()+0x114>
    51be:	movs	r4, #0
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    51c0:	mov	r0, r4
    51c2:	add	sp, #20
    51c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    51c8:	mov	r4, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    51ca:	mov.w	r0, #292	; 0x124
    51ce:	bl	4fec <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    51d2:	mov	r0, r4
    51d4:	add	sp, #20
    51d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    51da:	and.w	r3, r4, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    51de:	mov.w	r0, #266	; 0x10a

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    51e2:	mov	r4, r3
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    51e4:	bl	4fec <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    51e8:	mov	r0, r4
    51ea:	add	sp, #20
    51ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    51f0:	bl	4e28 <ExFatPartition::freeChain(unsigned long)>
    51f4:	mov	r4, r0
    51f6:	cmp	r0, #0
    51f8:	bne.n	5116 <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    51fa:	movw	r0, #279	; 0x117
    51fe:	bl	4fec <dbgPrint(unsigned short)>
        goto fail;
    5202:	b.n	5158 <ExFatFile::remove()+0x68>
    5204:	add.w	r0, r4, #524	; 0x20c
    5208:	bl	4a48 <FsCache::sync()>
    520c:	cmp	r0, #0
    520e:	beq.n	51be <ExFatFile::remove()+0xce>
    5210:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5214:	ldr	r3, [r0, #0]
    5216:	ldr	r3, [r3, #20]
    5218:	blx	r3
    521a:	mov	r4, r0
    521c:	b.n	5158 <ExFatFile::remove()+0x68>
    521e:	nop

00005220 <ExFatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    5220:	push	{r4, r5, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    5222:	ldrb.w	r3, [r0, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    5226:	sub	sp, #36	; 0x24
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    5228:	and.w	r3, r3, #16
    522c:	cbz	r3, 5272 <ExFatFile::rmdir()+0x52>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    522e:	movs	r2, #0
    5230:	movs	r3, #0
    5232:	mov	r4, r0
    5234:	bl	4284 <ExFatFile::seekSet(unsigned long long)>
    5238:	b.n	5248 <ExFatFile::rmdir()+0x28>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    523a:	cmp	r0, #32
    523c:	bne.n	5284 <ExFatFile::rmdir()+0x64>
    523e:	ldrb.w	r3, [sp]
    5242:	lsls	r2, r3, #24
    5244:	bmi.n	5284 <ExFatFile::rmdir()+0x64>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    5246:	cbz	r3, 5256 <ExFatFile::rmdir()+0x36>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    5248:	movs	r2, #32
    524a:	mov	r1, sp
    524c:	mov	r0, r4
    524e:	bl	4068 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5252:	cmp	r0, #0
    5254:	bne.n	523a <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    5256:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    525a:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    525c:	mov	r0, r4
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    525e:	orr.w	r3, r3, #2
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5262:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    5266:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    526a:	bl	50f0 <ExFatFile::remove()>

fail:
  return false;
}
    526e:	add	sp, #36	; 0x24
    5270:	pop	{r4, r5, pc}
    5272:	and.w	r5, r3, #255	; 0xff
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    DBG_FAIL_MACRO;
    5276:	mov.w	r0, #354	; 0x162
    527a:	bl	4fec <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    527e:	mov	r0, r5
}
    5280:	add	sp, #36	; 0x24
    5282:	pop	{r4, r5, pc}
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
      DBG_FAIL_MACRO;
    5284:	mov.w	r0, #366	; 0x16e
    5288:	bl	4fec <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    528c:	movs	r0, #0
}
    528e:	add	sp, #36	; 0x24
    5290:	pop	{r4, r5, pc}
    5292:	nop

00005294 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5294:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5298:	movs	r7, #0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    529a:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    529c:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    52a0:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    52a2:	add.w	r8, sp, #12
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    52a6:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    52a8:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    52aa:	ldmia.w	fp, {r0, r1, r2}
    52ae:	stmia.w	r8, {r0, r1, r2}

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    52b2:	movs	r2, #0
    52b4:	mov	r1, r8
    52b6:	ldr	r0, [r6, #32]
    52b8:	uxtb.w	r9, r7
    52bc:	bl	4d0c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    52c0:	mov	r5, r0
    52c2:	cmp	r0, #0
    52c4:	beq.w	53d6 <ExFatFile::syncDir()+0x142>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    52c8:	ldrb	r2, [r0, #0]
    52ca:	cmp	r2, #192	; 0xc0
    52cc:	beq.n	534e <ExFatFile::syncDir()+0xba>
    52ce:	cmp	r2, #193	; 0xc1
    52d0:	beq.n	52f2 <ExFatFile::syncDir()+0x5e>
    52d2:	cmp	r2, #133	; 0x85
    52d4:	beq.n	538a <ExFatFile::syncDir()+0xf6>

      case EXFAT_TYPE_NAME:
        break;

      default:
        DBG_FAIL_MACRO;
    52d6:	mov.w	r0, #452	; 0x1c4
    52da:	bl	4fec <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    52de:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    52e2:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    52e4:	orr.w	r3, r3, #1
    52e8:	strb.w	r3, [r6, #50]	; 0x32
  return false;
}
    52ec:	add	sp, #28
    52ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52f2:	mov	r3, r2
    52f4:	lsls	r1, r4, #15
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    52f6:	sub.w	r0, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    52fa:	movs	r2, #0
    52fc:	orr.w	r4, r1, r4, lsr #1
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5300:	clz	r0, r0
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5304:	movs	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5306:	uxtah	r4, r3, r4
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    530a:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    530c:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    530e:	add	r2, r1
    5310:	lsls	r3, r4, #15
    5312:	movs	r1, #3
    5314:	cmp	r2, #31
    5316:	orr.w	r3, r3, r4, lsr #1
    531a:	bhi.n	5330 <ExFatFile::syncDir()+0x9c>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    531c:	ldrb	r4, [r5, r2]
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    531e:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5320:	uxtah	r3, r4, r3
    5324:	uxth	r4, r3
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5326:	bne.n	532c <ExFatFile::syncDir()+0x98>
    5328:	cmp	r0, #0
    532a:	bne.n	530e <ExFatFile::syncDir()+0x7a>
    532c:	movs	r1, #1
    532e:	b.n	530e <ExFatFile::syncDir()+0x7a>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    5330:	cmp	sl, r9
    5332:	beq.n	53e0 <ExFatFile::syncDir()+0x14c>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    5334:	movs	r2, #32
    5336:	mov	r1, r8
    5338:	ldr	r0, [r6, #32]
    533a:	adds	r7, #1
    533c:	bl	4d90 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5340:	cmp	r0, #1
    5342:	beq.n	52b2 <ExFatFile::syncDir()+0x1e>
      DBG_FAIL_MACRO;
    5344:	movw	r0, #459	; 0x1cb
    5348:	bl	4fec <dbgPrint(unsigned short)>
      goto fail;
    534c:	b.n	52de <ExFatFile::syncDir()+0x4a>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    534e:	ldrb.w	r3, [r6, #51]	; 0x33
    5352:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5356:	ldrb	r3, [r0, #1]
    5358:	ite	ne
    535a:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    535e:	biceq.w	r3, r3, #2
    5362:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    5364:	ldr	r0, [r6, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    5366:	ldr	r1, [r6, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    5368:	ldrd	r2, r3, [r6, #16]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    536c:	str	r1, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    536e:	strd	r2, r3, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    5372:	ldrd	r2, r3, [r6, #8]
    5376:	strd	r2, r3, [r5, #24]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    537a:	ldrb.w	r3, [r0, #524]	; 0x20c
    537e:	orr.w	r3, r3, #1
    5382:	strb.w	r3, [r0, #524]	; 0x20c
    5386:	ldrb	r3, [r5, #0]
    5388:	b.n	52f4 <ExFatFile::syncDir()+0x60>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    538a:	ldrb.w	r1, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    538e:	ldr	r3, [pc, #152]	; (5428 <ExFatFile::syncDir()+0x194>)
    5390:	and.w	r1, r1, #55	; 0x37
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    5394:	ldrb.w	sl, [r0, #1]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5398:	ldr	r3, [r3, #0]
    539a:	strh	r1, [r0, #4]
    539c:	cmp	r3, #0
    539e:	beq.n	52f2 <ExFatFile::syncDir()+0x5e>
          m_vol->dataCacheDirty();
    53a0:	ldr.w	ip, [r6, #32]
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    53a4:	add.w	r2, sp, #7
    53a8:	add.w	r1, sp, #10
    53ac:	add	r0, sp, #8
    53ae:	ldrb.w	lr, [ip, #524]	; 0x20c
    53b2:	orr.w	lr, lr, #1
    53b6:	strb.w	lr, [ip, #524]	; 0x20c
    53ba:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    53bc:	ldrh.w	r3, [sp, #8]
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    53c0:	ldrh.w	r2, [sp, #10]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    53c4:	ldrb.w	r1, [sp, #7]
    53c8:	strh	r3, [r5, #14]
    53ca:	strh	r3, [r5, #18]
    53cc:	strb	r1, [r5, #21]
    53ce:	strh	r2, [r5, #12]
    53d0:	strh	r2, [r5, #16]
    53d2:	ldrb	r3, [r5, #0]
    53d4:	b.n	52f4 <ExFatFile::syncDir()+0x60>
  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
    53d6:	mov.w	r0, #414	; 0x19e
    53da:	bl	4fec <dbgPrint(unsigned short)>
      goto fail;
    53de:	b.n	52de <ExFatFile::syncDir()+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    53e0:	mov	r1, fp
    53e2:	movs	r2, #1
    53e4:	ldr	r0, [r6, #32]
    53e6:	bl	4d0c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    53ea:	cbz	r0, 5402 <ExFatFile::syncDir()+0x16e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    53ec:	ldr	r5, [r6, #32]
    53ee:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    53f0:	mov	r0, r5
    53f2:	bl	4a48 <FsCache::sync()>
    53f6:	cbnz	r0, 540c <ExFatFile::syncDir()+0x178>
    DBG_FAIL_MACRO;
    53f8:	movw	r0, #471	; 0x1d7
    53fc:	bl	4fec <dbgPrint(unsigned short)>
    goto fail;
    5400:	b.n	52de <ExFatFile::syncDir()+0x4a>
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
  if (!df) {
    DBG_FAIL_MACRO;
    5402:	mov.w	r0, #466	; 0x1d2
    5406:	bl	4fec <dbgPrint(unsigned short)>
    goto fail;
    540a:	b.n	52de <ExFatFile::syncDir()+0x4a>
    540c:	add.w	r0, r5, #524	; 0x20c
    5410:	bl	4a48 <FsCache::sync()>
    5414:	cmp	r0, #0
    5416:	beq.n	53f8 <ExFatFile::syncDir()+0x164>
    5418:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    541c:	ldr	r3, [r0, #0]
    541e:	ldr	r3, [r3, #20]
    5420:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5422:	cmp	r0, #0
    5424:	beq.n	53f8 <ExFatFile::syncDir()+0x164>
    5426:	b.n	52ec <ExFatFile::syncDir()+0x58>
    5428:	.word	0x2000609c

0000542c <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    542c:	ldrb.w	r2, [r0, #49]	; 0x31
    5430:	cbz	r2, 5460 <ExFatFile::sync()+0x34>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    5432:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5434:	ldrb.w	r2, [r0, #51]	; 0x33
    5438:	lsls	r1, r2, #24
    543a:	bmi.n	5464 <ExFatFile::sync()+0x38>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    543c:	ldr	r5, [r0, #32]
    543e:	mov	r4, r0
    5440:	mov	r0, r5
    5442:	bl	4a48 <FsCache::sync()>
    5446:	cbnz	r0, 5474 <ExFatFile::sync()+0x48>
    DBG_FAIL_MACRO;
    5448:	mov.w	r0, #392	; 0x188
    544c:	bl	4fec <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5450:	ldrb.w	r3, [r4, #50]	; 0x32
    5454:	movs	r0, #0
    5456:	orr.w	r3, r3, #1
    545a:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    545e:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    5460:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5462:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5464:	and.w	r2, r2, #127	; 0x7f
    5468:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    546c:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    5470:	b.w	5294 <ExFatFile::syncDir()>
    5474:	add.w	r0, r5, #524	; 0x20c
    5478:	bl	4a48 <FsCache::sync()>
    547c:	cmp	r0, #0
    547e:	beq.n	5448 <ExFatFile::sync()+0x1c>
    5480:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5484:	ldr	r3, [r0, #0]
    5486:	ldr	r3, [r3, #20]
    5488:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    548a:	cmp	r0, #0
    548c:	beq.n	5448 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    548e:	movs	r0, #1
    5490:	pop	{r3, r4, r5, pc}
    5492:	nop

00005494 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    5494:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5498:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    549c:	mov	r8, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    549e:	lsls	r1, r3, #25
    54a0:	bmi.n	554e <ExFatFile::addDirCluster()+0xba>
    54a2:	ldr	r0, [r0, #8]
    54a4:	ldr.w	r3, [r8, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    54a8:	ldr.w	r3, [r3, #1076]	; 0x434
    54ac:	add	r0, r3
    54ae:	cmp.w	r0, #67108864	; 0x4000000
    54b2:	bcs.n	5542 <ExFatFile::addDirCluster()+0xae>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    54b4:	mov	r0, r8
    54b6:	bl	5028 <ExFatFile::addCluster()>
    54ba:	cmp	r0, #0
    54bc:	beq.n	5536 <ExFatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    54be:	ldr.w	r5, [r8, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    54c2:	ldrb.w	r3, [r5, #524]	; 0x20c

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    54c6:	add.w	r4, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    54ca:	lsls	r2, r3, #31
    54cc:	bmi.n	5592 <ExFatFile::addDirCluster()+0xfe>
      return nullptr;
    }
    invalidate();
    return m_cacheBuffer;
    54ce:	add.w	r5, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    54d2:	mov	r0, r4
    54d4:	bl	49b0 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    54d8:	mov.w	r2, #512	; 0x200
    54dc:	movs	r1, #0
    54de:	mov	r0, r5
    54e0:	bl	cf7c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    54e4:	ldr.w	r2, [r8, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    54e8:	ldr.w	r7, [r8, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    54ec:	movs	r6, #1
    54ee:	ldrb.w	r3, [r2, #1085]	; 0x43d
    54f2:	subs	r7, #2
    54f4:	ldr.w	r1, [r2, #1060]	; 0x424
    54f8:	lsls	r7, r3
    54fa:	lsls.w	r3, r6, r3
    54fe:	add	r7, r1
    5500:	beq.n	5556 <ExFatFile::addDirCluster()+0xc2>
    5502:	movs	r4, #0
    5504:	b.n	5516 <ExFatFile::addDirCluster()+0x82>
    5506:	ldr.w	r2, [r8, #32]
    550a:	ldrb.w	r3, [r2, #1085]	; 0x43d
    550e:	lsl.w	r3, r6, r3
    5512:	cmp	r3, r4
    5514:	bls.n	5556 <ExFatFile::addDirCluster()+0xc2>
    5516:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    551a:	adds	r1, r7, r4
    551c:	mov	r2, r5
    551e:	adds	r4, #1
    5520:	ldr	r3, [r0, #0]
    5522:	ldr	r3, [r3, #24]
    5524:	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    5526:	cmp	r0, #0
    5528:	bne.n	5506 <ExFatFile::addDirCluster()+0x72>
      DBG_FAIL_MACRO;
    552a:	movs	r0, #145	; 0x91
    552c:	bl	4fec <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    5530:	movs	r0, #0
    5532:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    5536:	movs	r0, #133	; 0x85
    5538:	bl	4fec <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    553c:	movs	r0, #0
    553e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    5542:	movs	r0, #129	; 0x81
    5544:	bl	4fec <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    5548:	movs	r0, #0
    554a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    554e:	ldr	r0, [r0, #32]
    5550:	bl	4f18 <ExFatPartition::rootLength()>
    5554:	b.n	54a4 <ExFatFile::addDirCluster()+0x10>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    5556:	ldrb.w	r3, [r8, #49]	; 0x31
    555a:	lsls	r3, r3, #25
    555c:	bmi.n	5588 <ExFatFile::addDirCluster()+0xf4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    555e:	ldrb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5562:	movs	r5, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5564:	orn	r3, r3, #127	; 0x7f
    5568:	strb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    556c:	ldr.w	r4, [r2, #1076]	; 0x434
    5570:	ldrd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    5574:	ldrd	r0, r1, [r8, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5578:	adds	r2, r2, r4
    557a:	adcs	r3, r5
    m_validLength += m_vol->bytesPerCluster();
    557c:	adds	r0, r0, r4
    557e:	adcs	r1, r5
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5580:	strd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    5584:	strd	r0, r1, [r8, #16]
  }
  return sync();
    5588:	mov	r0, r8

 fail:
  return false;
}
    558a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    558e:	b.w	542c <ExFatFile::sync()>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5592:	mov	r0, r4
    5594:	bl	4a48 <FsCache::sync()>
    5598:	cmp	r0, #0
    559a:	bne.n	54ce <ExFatFile::addDirCluster()+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
  if (!cache) {
    DBG_FAIL_MACRO;
    559c:	movs	r0, #138	; 0x8a
    559e:	bl	4fec <dbgPrint(unsigned short)>
    55a2:	b.n	553c <ExFatFile::addDirCluster()+0xa8>

000055a4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    55a4:	push	{r4, r5, lr}
  if (!parent->isDir()) {
    55a6:	ldrb.w	r3, [r1, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    55aa:	sub	sp, #12
  if (!parent->isDir()) {
    55ac:	tst.w	r3, #80	; 0x50
    55b0:	beq.n	55fe <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x5a>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    55b2:	movw	r5, #2562	; 0xa02
    55b6:	ldrb	r3, [r2, #0]
    55b8:	ldr	r2, [r2, #4]
    55ba:	mov	r4, r0
    55bc:	str	r5, [sp, #0]
    55be:	bl	43ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    55c2:	cbz	r0, 55f2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    55c4:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    55c6:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    55c8:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    55cc:	bl	5494 <ExFatFile::addDirCluster()>
    55d0:	cbz	r0, 560a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    55d2:	ldr	r1, [r4, #24]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    55d4:	movs	r2, #0
    55d6:	movs	r3, #0
    55d8:	mov	r0, r4
    55da:	str	r1, [r4, #28]
    55dc:	bl	4284 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    55e0:	movs	r3, #193	; 0xc1
  return sync();
    55e2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    55e4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    55e8:	add	sp, #12
    55ea:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    55ee:	b.w	542c <ExFatFile::sync()>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    55f2:	movs	r0, #209	; 0xd1
    55f4:	bl	4fec <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    55f8:	movs	r0, #0
    55fa:	add	sp, #12
    55fc:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    55fe:	movs	r0, #204	; 0xcc
    5600:	bl	4fec <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5604:	movs	r0, #0
    5606:	add	sp, #12
    5608:	pop	{r4, r5, pc}

  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    560a:	movs	r0, #218	; 0xda
    560c:	bl	4fec <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5610:	movs	r0, #0
    5612:	add	sp, #12
    5614:	pop	{r4, r5, pc}
    5616:	nop

00005618 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5618:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    561c:	mov	r6, r0
    561e:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5620:	movs	r0, #0
    5622:	mov	r5, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5624:	ldrb.w	r1, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5628:	str	r2, [sp, #12]
    562a:	strb.w	r0, [sp, #73]	; 0x49
    562e:	strb.w	r0, [sp, #74]	; 0x4a
    5632:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5636:	cmp	r1, #0
    5638:	bne.n	56b2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    563a:	mov	r9, r3
    563c:	ldrb.w	r3, [r5, #49]	; 0x31
    5640:	tst.w	r3, #80	; 0x50
    5644:	beq.n	56b2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5646:	ldrb	r3, [r2, #0]
    5648:	mov	r1, r2
    564a:	cmp	r3, #47	; 0x2f
    564c:	beq.n	5694 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    564e:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5652:	add	r3, sp, #12
    5654:	add	r2, sp, #16
    5656:	mov	r0, r6
    5658:	bl	3f6c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    565c:	mov	r4, r0
    565e:	cmp	r0, #0
    5660:	beq.n	5702 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xea>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5662:	ldr	r3, [sp, #12]
    5664:	ldrb	r3, [r3, #0]
    5666:	cmp	r3, #0
    5668:	beq.n	5710 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf8>
    566a:	ldrb.w	r3, [sp, #16]
    566e:	mov	r1, r5
    5670:	ldr	r2, [sp, #20]
    5672:	mov	r0, r6
    5674:	str.w	r8, [sp]
    5678:	bl	43ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    567c:	mov	r4, r0
    567e:	cbnz	r0, 56d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb8>
      if (!pFlag || !mkdir(parent, &fname)) {
    5680:	cmp.w	r9, #0
    5684:	bne.n	56c2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
        DBG_FAIL_MACRO;
    5686:	movs	r0, #188	; 0xbc
    5688:	bl	4fec <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    568c:	mov	r0, r4
    568e:	add	sp, #84	; 0x54
    5690:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5694:	adds	r1, #1
    5696:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5698:	ldrb	r3, [r1, #0]
    569a:	cmp	r3, #47	; 0x2f
    569c:	beq.n	5694 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    569e:	ldr	r1, [r5, #32]
    56a0:	add	r0, sp, #24
    56a2:	bl	3f3c <ExFatFile::openRoot(ExFatVolume*)>
    56a6:	mov	r4, r0
    56a8:	cmp	r0, #0
    56aa:	beq.n	571e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x106>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    56ac:	add	r5, sp, #24
    56ae:	ldr	r1, [sp, #12]
    56b0:	b.n	564e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    56b2:	movs	r4, #0
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    56b4:	movs	r0, #165	; 0xa5
    56b6:	bl	4fec <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    56ba:	mov	r0, r4
    56bc:	add	sp, #84	; 0x54
    56be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    56c2:	mov	r1, r5
    56c4:	add	r2, sp, #16
    56c6:	mov	r0, r6
    56c8:	bl	55a4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    56cc:	cmp	r0, #0
    56ce:	beq.n	5686 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    56d0:	mov	r4, r6
    56d2:	add	r7, sp, #24
    56d4:	add.w	lr, r6, #48	; 0x30
    56d8:	ldr	r0, [r4, #0]
    56da:	adds	r4, #16
    56dc:	ldr.w	r1, [r4, #-12]
    56e0:	mov	r5, r7
    56e2:	ldr.w	r2, [r4, #-8]
    56e6:	adds	r7, #16
    56e8:	ldr.w	r3, [r4, #-4]
    56ec:	cmp	r4, lr
    56ee:	stmia	r5!, {r0, r1, r2, r3}
    56f0:	bne.n	56d8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc0>
    56f2:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    56f4:	add	r5, sp, #24
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    56f6:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    56f8:	mov	r0, r6
    56fa:	bl	3e68 <ExFatFile::close()>
    56fe:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    5700:	b.n	5652 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    5702:	movs	r0, #180	; 0xb4
    5704:	bl	4fec <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    5708:	mov	r0, r4
    570a:	add	sp, #84	; 0x54
    570c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    5710:	add	r2, sp, #16
    5712:	mov	r1, r5
    5714:	mov	r0, r6
    5716:	bl	55a4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    571a:	mov	r4, r0
    571c:	b.n	568c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    571e:	movs	r0, #173	; 0xad
    5720:	bl	4fec <dbgPrint(unsigned short)>
      goto fail;
    5724:	b.n	568c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
    5726:	nop

00005728 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    5728:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    572a:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    572e:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5730:	movs	r3, #0
    5732:	mov	r5, r0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5734:	ands.w	r4, r4, #24
    5738:	strb.w	r3, [sp, #49]	; 0x31
    573c:	strb.w	r3, [sp, #50]	; 0x32
    5740:	strb.w	r3, [sp, #51]	; 0x33
    5744:	strb.w	r3, [sp, #105]	; 0x69
    5748:	strb.w	r3, [sp, #106]	; 0x6a
    574c:	strb.w	r3, [sp, #107]	; 0x6b
    5750:	bne.n	5760 <ExFatFile::rename(ExFatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    5752:	movw	r0, #319	; 0x13f
    5756:	bl	4fec <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    575a:	mov	r0, r4
    575c:	add	sp, #116	; 0x74
    575e:	pop	{r4, r5, r6, r7, pc}
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    5760:	ldr	r0, [r1, #32]
    5762:	ldr	r4, [r5, #32]
    5764:	cmp	r4, r0
    5766:	beq.n	5778 <ExFatFile::rename(ExFatFile*, char const*)+0x50>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    5768:	mov	r4, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    576a:	mov.w	r0, #324	; 0x144
    576e:	bl	4fec <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    5772:	mov	r0, r4
    5774:	add	sp, #116	; 0x74
    5776:	pop	{r4, r5, r6, r7, pc}
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5778:	movw	r3, #2561	; 0xa01
    577c:	mov	r0, sp
    577e:	bl	47e0 <ExFatFile::open(ExFatFile*, char const*, int)>
    5782:	mov	r4, r0
    5784:	cbz	r0, 57f0 <ExFatFile::rename(ExFatFile*, char const*)+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    5786:	mov	r4, r5
    5788:	add.w	lr, r5, #48	; 0x30
    578c:	add	r7, sp, #56	; 0x38
    578e:	ldr	r0, [r4, #0]
    5790:	adds	r4, #16
    5792:	ldr.w	r1, [r4, #-12]
    5796:	mov	r6, r7
    5798:	ldr.w	r2, [r4, #-8]
    579c:	adds	r7, #16
    579e:	ldr.w	r3, [r4, #-4]
    57a2:	cmp	r4, lr
    57a4:	stmia	r6!, {r0, r1, r2, r3}
    57a6:	bne.n	578e <ExFatFile::rename(ExFatFile*, char const*)+0x66>
    57a8:	ldr	r0, [r4, #0]
  m_dirPos = file.m_dirPos;
    57aa:	add	r2, sp, #36	; 0x24
    57ac:	add.w	r3, r5, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    57b0:	str	r0, [r7, #0]
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    57b2:	ldrb.w	r4, [sp, #48]	; 0x30
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
    57b6:	ldmia	r2, {r0, r1, r2}
    57b8:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    57bc:	ldrb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    57c0:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    57c2:	strb.w	r4, [r5, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    57c6:	orn	r3, r3, #127	; 0x7f
    57ca:	strb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    57ce:	bl	542c <ExFatFile::sync()>
    57d2:	mov	r4, r0
    57d4:	cbz	r0, 57fa <ExFatFile::rename(ExFatFile*, char const*)+0xd2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    57d6:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    57d8:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    57da:	movs	r3, #8
  return oldFile.remove();
    57dc:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    57de:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    57e0:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    57e4:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    57e8:	bl	50f0 <ExFatFile::remove()>
    57ec:	mov	r4, r0
    57ee:	b.n	575a <ExFatFile::rename(ExFatFile*, char const*)+0x32>
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    57f0:	mov.w	r0, #328	; 0x148
    57f4:	bl	4fec <dbgPrint(unsigned short)>
    goto fail;
    57f8:	b.n	575a <ExFatFile::rename(ExFatFile*, char const*)+0x32>
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    DBG_FAIL_MACRO;
    57fa:	mov.w	r0, #336	; 0x150
    57fe:	bl	4fec <dbgPrint(unsigned short)>
    goto fail;
    5802:	b.n	575a <ExFatFile::rename(ExFatFile*, char const*)+0x32>

00005804 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5804:	push	{r4, r5, r6, r7, lr}
    5806:	ldrb.w	r3, [r0, #51]	; 0x33
    580a:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    580c:	and.w	r2, r3, #2
    5810:	cmp	r2, #0
    5812:	beq.n	58c0 <ExFatFile::truncate()+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5814:	ldr	r1, [r0, #28]
    5816:	mov	r4, r0
    5818:	cbz	r1, 587e <ExFatFile::truncate()+0x7a>
      return true;
  }
  if (isContiguous()) {
    581a:	and.w	r3, r3, #64	; 0x40
    581e:	and.w	r5, r3, #255	; 0xff
    5822:	cbz	r3, 5886 <ExFatFile::truncate()+0x82>
    5824:	ldr	r0, [r0, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    5826:	ldr	r5, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5828:	ldrb.w	r2, [r0, #1085]	; 0x43d
    582c:	ldrd	r6, r7, [r4, #8]
    5830:	adds	r2, #9
    5832:	adds.w	r6, r6, #4294967295
    5836:	uxtb	r2, r2
    5838:	adc.w	r7, r7, #4294967295
    583c:	rsb	lr, r2, #32
    5840:	sub.w	r3, r2, #32
    5844:	lsr.w	r2, r6, r2
    5848:	lsl.w	lr, r7, lr
    584c:	lsr.w	r3, r7, r3
    5850:	orr.w	r2, r2, lr
    5854:	orrs	r2, r3
    5856:	adds	r2, #1
    if (m_curCluster) {
    5858:	cmp	r5, #0
    585a:	beq.n	58d2 <ExFatFile::truncate()+0xce>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    585c:	subs	r1, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    585e:	adds	r3, r5, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5860:	subs	r5, r1, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    5862:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    5864:	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5866:	cbz	r2, 589a <ExFatFile::truncate()+0x96>
    5868:	movs	r3, #0
    586a:	ldr	r1, [sp, #4]
    586c:	bl	4c40 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5870:	mov	r5, r0
    5872:	cbnz	r0, 589a <ExFatFile::truncate()+0x96>
      DBG_FAIL_MACRO;
    5874:	movw	r0, #599	; 0x257
    5878:	bl	4fec <dbgPrint(unsigned short)>
      goto fail;
    587c:	b.n	5880 <ExFatFile::truncate()+0x7c>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    587e:	movs	r5, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    5880:	mov	r0, r5
    5882:	add	sp, #12
    5884:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    5886:	ldr	r3, [r0, #24]
    5888:	cbnz	r3, 58d8 <ExFatFile::truncate()+0xd4>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    588a:	str	r1, [sp, #4]
      m_firstCluster = 0;
    588c:	str	r3, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    588e:	ldr	r0, [r4, #32]
    5890:	bl	4e28 <ExFatPartition::freeChain(unsigned long)>
    5894:	mov	r5, r0
    5896:	cmp	r0, #0
    5898:	beq.n	5912 <ExFatFile::truncate()+0x10e>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    589a:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    589e:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    58a0:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    58a4:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    58a8:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    58ac:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    58b0:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    58b4:	bl	542c <ExFatFile::sync()>
    58b8:	mov	r5, r0

 fail:
  return false;
}
    58ba:	mov	r0, r5
    58bc:	add	sp, #12
    58be:	pop	{r4, r5, r6, r7, pc}
    58c0:	and.w	r5, r2, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    58c4:	movw	r0, #583	; 0x247
    58c8:	bl	4fec <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    58cc:	mov	r0, r5
    58ce:	add	sp, #12
    58d0:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    58d2:	str	r1, [sp, #4]
      m_firstCluster = 0;
    58d4:	str	r5, [r4, #28]
    58d6:	b.n	5866 <ExFatFile::truncate()+0x62>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    58d8:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    58da:	mov	r1, r3
    58dc:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    58de:	str.w	r5, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    58e2:	bl	4d44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    58e6:	sxtb	r0, r0
      if (fg < 0) {
    58e8:	cmp	r0, #0
    58ea:	blt.n	591c <ExFatFile::truncate()+0x118>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    58ec:	bne.n	58f6 <ExFatFile::truncate()+0xf2>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    58ee:	ldr	r1, [sp, #4]
    58f0:	cmp	r1, #0
    58f2:	beq.n	589a <ExFatFile::truncate()+0x96>
    58f4:	b.n	588e <ExFatFile::truncate()+0x8a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    58f6:	mov.w	r2, #4294967295
    58fa:	ldr	r1, [r4, #24]
    58fc:	ldr	r0, [r4, #32]
    58fe:	bl	4dd8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5902:	mov	r5, r0
    5904:	cmp	r0, #0
    5906:	bne.n	58ee <ExFatFile::truncate()+0xea>
          DBG_FAIL_MACRO;
    5908:	movw	r0, #614	; 0x266
    590c:	bl	4fec <dbgPrint(unsigned short)>
          goto fail;
    5910:	b.n	5880 <ExFatFile::truncate()+0x7c>
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
        DBG_FAIL_MACRO;
    5912:	mov.w	r0, #624	; 0x270
    5916:	bl	4fec <dbgPrint(unsigned short)>
        goto fail;
    591a:	b.n	5880 <ExFatFile::truncate()+0x7c>
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
      if (fg < 0) {
        DBG_FAIL_MACRO;
    591c:	mov.w	r0, #608	; 0x260
    5920:	bl	4fec <dbgPrint(unsigned short)>
        goto fail;
    5924:	b.n	5880 <ExFatFile::truncate()+0x7c>
    5926:	nop

00005928 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5928:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    592c:	ldrb.w	r3, [r0, #51]	; 0x33
    5930:	sub	sp, #20
    5932:	mov	r6, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5934:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5936:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5938:	bpl.w	5b5e <ExFatFile::write(void const*, unsigned int)+0x236>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    593c:	lsls	r2, r3, #28
    593e:	mov	r8, r1
    5940:	bmi.w	5b8c <ExFatFile::write(void const*, unsigned int)+0x264>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5944:	ldr	r3, [sp, #4]
    5946:	cmp	r3, #0
    5948:	beq.w	5be4 <ExFatFile::write(void const*, unsigned int)+0x2bc>
    594c:	mov	r1, r6
    594e:	ldr	r7, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5950:	mov.w	sl, #1
    5954:	mov	r9, r8
    5956:	ldrd	r2, r3, [r1], #24
    595a:	mov	fp, r2
    595c:	str	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    595e:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5960:	ldr	r1, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5962:	ldr.w	r4, [r0, #1072]	; 0x430
    5966:	and.w	r4, r4, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    596a:	ubfx	r8, r4, #0, #9
    if (clusterOffset == 0) {
    596e:	cbnz	r4, 59c8 <ExFatFile::write(void const*, unsigned int)+0xa0>
      // start of new cluster
      if (m_curCluster != 0) {
    5970:	cmp	r1, #0
    5972:	beq.w	5b0c <ExFatFile::write(void const*, unsigned int)+0x1e4>
        int fg;

        if (isContiguous()) {
    5976:	ldrb.w	r3, [r6, #51]	; 0x33
    597a:	lsls	r3, r3, #25
    597c:	bpl.w	5b50 <ExFatFile::write(void const*, unsigned int)+0x228>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5980:	ldrb.w	r2, [r0, #1085]	; 0x43d
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    5984:	ldr	r3, [r6, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5986:	adds	r2, #9
    5988:	ldrd	fp, ip, [r6, #8]
    598c:	uxtb	r2, r2
    598e:	adds.w	fp, fp, #4294967295
    5992:	rsb	lr, r2, #32
    5996:	sub.w	r5, r2, #32
    599a:	adc.w	ip, ip, #4294967295
    599e:	lsr.w	r2, fp, r2
    59a2:	lsl.w	lr, ip, lr
    59a6:	lsr.w	r5, ip, r5
    59aa:	orr.w	r2, r2, lr
    59ae:	orrs	r2, r5
    59b0:	add	r2, r3
    59b2:	cmp	r1, r2
    59b4:	bcc.w	5b38 <ExFatFile::write(void const*, unsigned int)+0x210>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    59b8:	mov	r0, r6
    59ba:	bl	5028 <ExFatFile::addCluster()>
    59be:	cmp	r0, #0
    59c0:	beq.w	5bd0 <ExFatFile::write(void const*, unsigned int)+0x2a8>
    59c4:	ldr	r0, [r6, #32]
    59c6:	ldr	r1, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    59c8:	lsrs	r4, r4, #9
    59ca:	subs	r1, #2
    59cc:	ldr.w	r5, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    59d0:	ldrb.w	r3, [r0, #1085]	; 0x43d
    59d4:	add	r5, r4
    59d6:	lsls	r1, r3
    59d8:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    59da:	cmp.w	r8, #0
    59de:	bne.n	5a9c <ExFatFile::write(void const*, unsigned int)+0x174>
    59e0:	cmp.w	r7, #512	; 0x200
    59e4:	bcc.n	5a9c <ExFatFile::write(void const*, unsigned int)+0x174>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    59e6:	cmp.w	r7, #1024	; 0x400
    59ea:	bcc.w	5b14 <ExFatFile::write(void const*, unsigned int)+0x1ec>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    59ee:	lsl.w	r2, sl, r3
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    59f2:	lsrs	r5, r7, #9
    59f4:	ldr.w	r3, [r0, #532]	; 0x214
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    59f8:	subs	r2, r2, r4
    59fa:	mov	r4, r5
    59fc:	cmp	r5, r2
    59fe:	it	cs
    5a00:	movcs	r4, r2
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5a02:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    5a04:	mov.w	r5, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5a08:	bhi.n	5a1e <ExFatFile::write(void const*, unsigned int)+0xf6>
    5a0a:	adds	r2, r4, r1
    5a0c:	cmp	r2, r3
    5a0e:	bls.n	5a1e <ExFatFile::write(void const*, unsigned int)+0xf6>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5a10:	add.w	r0, r0, #524	; 0x20c
    5a14:	str	r1, [sp, #8]
    5a16:	bl	49b0 <FsCache::invalidate()>
    5a1a:	ldr	r0, [r6, #32]
    5a1c:	ldr	r1, [sp, #8]
    5a1e:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5a22:	mov	r3, r4
    5a24:	mov	r2, r9
    5a26:	ldr	r4, [r0, #0]
    5a28:	ldr	r4, [r4, #28]
    5a2a:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    5a2c:	cmp	r0, #0
    5a2e:	beq.w	5bb8 <ExFatFile::write(void const*, unsigned int)+0x290>
    5a32:	mov	r0, r5
    5a34:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    5a36:	add	r9, r5
    toWrite -= n;
    5a38:	subs	r7, r7, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5a3a:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5a3e:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5a42:	adds.w	fp, r2, r0
    5a46:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5a4a:	cmp	r5, ip
    5a4c:	it	eq
    5a4e:	cmpeq	r4, fp
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5a50:	strd	fp, ip, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5a54:	bcs.n	5a66 <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5a56:	ldrb.w	r1, [r6, #51]	; 0x33
    5a5a:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    5a5e:	strd	fp, ip, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5a62:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5a66:	cmp	r7, #0
    5a68:	bne.w	595e <ExFatFile::write(void const*, unsigned int)+0x36>
    5a6c:	mov	r2, fp
    5a6e:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    5a70:	ldrd	r0, r1, [r6, #8]
    5a74:	cmp	r1, r3
    5a76:	it	eq
    5a78:	cmpeq	r0, r2
    5a7a:	bcc.w	5ba4 <ExFatFile::write(void const*, unsigned int)+0x27c>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5a7e:	ldr	r3, [pc, #364]	; (5bec <ExFatFile::write(void const*, unsigned int)+0x2c4>)
    5a80:	ldr	r3, [r3, #0]
    5a82:	cmp	r3, #0
    5a84:	beq.w	5bcc <ExFatFile::write(void const*, unsigned int)+0x2a4>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5a88:	ldrb.w	r3, [r6, #51]	; 0x33
    5a8c:	ldr	r0, [sp, #4]
    5a8e:	orn	r3, r3, #127	; 0x7f
    5a92:	strb.w	r3, [r6, #51]	; 0x33

fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return -1;
}
    5a96:	add	sp, #20
    5a98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5a9c:	cmp.w	r8, #0
    5aa0:	bne.n	5af4 <ExFatFile::write(void const*, unsigned int)+0x1cc>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5aa2:	add.w	r0, r0, #524	; 0x20c
    5aa6:	ldrd	r2, r3, [r6, #16]
    5aaa:	ldrd	r4, r5, [r6]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5aae:	cmp	r5, r3
    5ab0:	it	eq
    5ab2:	cmpeq	r4, r2
    5ab4:	ite	cc
    5ab6:	movcc	r2, #1
    5ab8:	movcs	r2, #3
    5aba:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5abe:	cbz	r0, 5b02 <ExFatFile::write(void const*, unsigned int)+0x1da>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5ac0:	rsb	r5, r8, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5ac4:	add	r0, r8
    5ac6:	mov	r1, r9
    5ac8:	cmp	r5, r7
    5aca:	it	cs
    5acc:	movcs	r5, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5ace:	add	r8, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5ad0:	mov	r2, r5
    5ad2:	bl	9c8c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5ad6:	cmp.w	r8, #512	; 0x200
    5ada:	bne.n	5a32 <ExFatFile::write(void const*, unsigned int)+0x10a>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    5adc:	ldr	r0, [r6, #32]
    5ade:	add.w	r0, r0, #524	; 0x20c
    5ae2:	bl	4a48 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    5ae6:	cmp	r0, #0
    5ae8:	bne.n	5a32 <ExFatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
    5aea:	mov.w	r0, #736	; 0x2e0
    5aee:	bl	4fec <dbgPrint(unsigned short)>
          goto fail;
    5af2:	b.n	5b66 <ExFatFile::write(void const*, unsigned int)+0x23e>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5af4:	movs	r2, #1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5af6:	add.w	r0, r0, #524	; 0x20c
    5afa:	bl	49bc <FsCache::get(unsigned long, unsigned char)>
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5afe:	cmp	r0, #0
    5b00:	bne.n	5ac0 <ExFatFile::write(void const*, unsigned int)+0x198>
        DBG_FAIL_MACRO;
    5b02:	mov.w	r0, #728	; 0x2d8
    5b06:	bl	4fec <dbgPrint(unsigned short)>
        goto fail;
    5b0a:	b.n	5b66 <ExFatFile::write(void const*, unsigned int)+0x23e>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5b0c:	ldr	r1, [r6, #28]
    5b0e:	cbz	r1, 5b3e <ExFatFile::write(void const*, unsigned int)+0x216>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5b10:	str	r1, [r6, #24]
    5b12:	b.n	59c8 <ExFatFile::write(void const*, unsigned int)+0xa0>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    5b14:	ldr.w	r3, [r0, #532]	; 0x214
    5b18:	cmp	r1, r3
    5b1a:	beq.n	5b7c <ExFatFile::write(void const*, unsigned int)+0x254>
    5b1c:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5b20:	mov	r2, r9
    5b22:	ldr	r3, [r0, #0]
    5b24:	ldr	r3, [r3, #24]
    5b26:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5b28:	cmp	r0, #0
    5b2a:	beq.n	5bc2 <ExFatFile::write(void const*, unsigned int)+0x29a>
    5b2c:	mov.w	r0, #512	; 0x200
    5b30:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5b32:	mov.w	r5, #512	; 0x200
    5b36:	b.n	5a36 <ExFatFile::write(void const*, unsigned int)+0x10e>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5b38:	adds	r1, #1
    5b3a:	str	r1, [r6, #24]
    5b3c:	b.n	59c8 <ExFatFile::write(void const*, unsigned int)+0xa0>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5b3e:	mov	r0, r6
    5b40:	bl	5028 <ExFatFile::addCluster()>
    5b44:	cmp	r0, #0
    5b46:	beq.n	5bda <ExFatFile::write(void const*, unsigned int)+0x2b2>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5b48:	ldr	r1, [r6, #24]
    5b4a:	ldr	r0, [r6, #32]
    5b4c:	str	r1, [r6, #28]
    5b4e:	b.n	59c8 <ExFatFile::write(void const*, unsigned int)+0xa0>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5b50:	ldr	r2, [sp, #12]
    5b52:	bl	4d44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    5b56:	cmp	r0, #0
    5b58:	bne.w	59c4 <ExFatFile::write(void const*, unsigned int)+0x9c>
    5b5c:	b.n	59b8 <ExFatFile::write(void const*, unsigned int)+0x90>
  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    5b5e:	mov.w	r0, #652	; 0x28c
    5b62:	bl	4fec <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5b66:	ldrb.w	r3, [r6, #50]	; 0x32
  return -1;
    5b6a:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5b6e:	orr.w	r3, r3, #1
    5b72:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
}
    5b76:	add	sp, #20
    5b78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5b7c:	add.w	r0, r0, #524	; 0x20c
    5b80:	str	r1, [sp, #8]
    5b82:	bl	49b0 <FsCache::invalidate()>
    5b86:	ldr	r0, [r6, #32]
    5b88:	ldr	r1, [sp, #8]
    5b8a:	b.n	5b1c <ExFatFile::write(void const*, unsigned int)+0x1f4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5b8c:	ldrd	r2, r3, [r0, #16]
    5b90:	bl	4284 <ExFatFile::seekSet(unsigned long long)>
    5b94:	cmp	r0, #0
    5b96:	bne.w	5944 <ExFatFile::write(void const*, unsigned int)+0x1c>
      DBG_FAIL_MACRO;
    5b9a:	movw	r0, #658	; 0x292
    5b9e:	bl	4fec <dbgPrint(unsigned short)>
      goto fail;
    5ba2:	b.n	5b66 <ExFatFile::write(void const*, unsigned int)+0x23e>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5ba4:	ldrb.w	r1, [r6, #51]	; 0x33
    5ba8:	ldr	r0, [sp, #4]
    5baa:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5bae:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5bb2:	strb.w	r1, [r6, #51]	; 0x33
    5bb6:	b.n	5b76 <ExFatFile::write(void const*, unsigned int)+0x24e>
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
        DBG_FAIL_MACRO;
    5bb8:	movw	r0, #758	; 0x2f6
    5bbc:	bl	4fec <dbgPrint(unsigned short)>
        goto fail;
    5bc0:	b.n	5b66 <ExFatFile::write(void const*, unsigned int)+0x23e>
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    5bc2:	movw	r0, #769	; 0x301
    5bc6:	bl	4fec <dbgPrint(unsigned short)>
        goto fail;
    5bca:	b.n	5b66 <ExFatFile::write(void const*, unsigned int)+0x23e>
    5bcc:	ldr	r0, [sp, #4]
    5bce:	b.n	5b76 <ExFatFile::write(void const*, unsigned int)+0x24e>
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5bd0:	movw	r0, #689	; 0x2b1
    5bd4:	bl	4fec <dbgPrint(unsigned short)>
            goto fail;
    5bd8:	b.n	5b66 <ExFatFile::write(void const*, unsigned int)+0x23e>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5bda:	movw	r0, #697	; 0x2b9
    5bde:	bl	4fec <dbgPrint(unsigned short)>
            goto fail;
    5be2:	b.n	5b66 <ExFatFile::write(void const*, unsigned int)+0x23e>
    5be4:	ldrd	r2, r3, [r6]
    5be8:	b.n	5a70 <ExFatFile::write(void const*, unsigned int)+0x148>
    5bea:	nop
    5bec:	.word	0x2000609c

00005bf0 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    5bf0:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5bf2:	movs	r1, #10
    5bf4:	mov	r5, r0
    5bf6:	ldr	r0, [pc, #40]	; (5c20 <dbgPrint(unsigned short)+0x30>)
    5bf8:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5bfc:	ldr	r4, [pc, #36]	; (5c24 <dbgPrint(unsigned short)+0x34>)
    5bfe:	movs	r1, #11
    5c00:	ldr	r0, [pc, #36]	; (5c28 <dbgPrint(unsigned short)+0x38>)
    5c02:	bl	a3fc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5c06:	movs	r0, #46	; 0x2e
    5c08:	bl	a3d0 <usb_serial_putchar>
    5c0c:	mov	r1, r5
    5c0e:	mov	r0, r4
    5c10:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5c14:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    5c16:	ldmia.w	sp!, {r3, r4, r5, lr}
    5c1a:	b.w	b728 <Print::println()>
    5c1e:	nop
    5c20:	.word	0x2000035c
    5c24:	.word	0x20000c58
    5c28:	.word	0x200003a8

00005c2c <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5c2c:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5c2e:	push	{r4, r5, r6, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5c30:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5c34:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5c36:	ldr	r0, [r0, #8]
    5c38:	mov	r1, r5
    5c3a:	bl	6ea0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5c3e:	mov	r6, r0
    5c40:	cbz	r0, 5c64 <FatFile::addCluster()+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5c42:	cbz	r5, 5c5c <FatFile::addCluster()+0x30>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5c44:	ldr	r3, [r4, #16]
    5c46:	adds	r5, #1
    5c48:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5c4a:	ldrb	r3, [r4, #2]
    5c4c:	it	ne
    5c4e:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c52:	orn	r3, r3, #127	; 0x7f
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5c56:	mov	r0, r6
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c58:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5c5a:	pop	{r4, r5, r6, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5c5c:	ldrb	r3, [r4, #2]
    5c5e:	orr.w	r3, r3, #64	; 0x40
    5c62:	b.n	5c52 <FatFile::addCluster()+0x26>
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    5c64:	movs	r0, #35	; 0x23
    5c66:	bl	5bf0 <dbgPrint(unsigned short)>
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5c6a:	mov	r0, r6
    5c6c:	pop	{r4, r5, r6, pc}
    5c6e:	nop

00005c70 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5c70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5c74:	ldrb	r3, [r0, #0]
    5c76:	and.w	r3, r3, #32
    5c7a:	cmp	r3, #0
    5c7c:	bne.n	5d02 <FatFile::addDirCluster()+0x92>
    5c7e:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5c82:	ldr	r2, [r0, #20]
    5c84:	ldr	r3, [pc, #184]	; (5d40 <FatFile::addDirCluster()+0xd0>)
    5c86:	mov	r5, r0
    5c88:	cmp	r2, r3
    5c8a:	bhi.n	5cf4 <FatFile::addDirCluster()+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5c8c:	bl	5c2c <FatFile::addCluster()>
    5c90:	mov	r8, r0
    5c92:	cmp	r0, #0
    5c94:	beq.n	5d12 <FatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5c96:	ldr	r1, [r5, #16]
    5c98:	ldr	r0, [r5, #8]
    5c9a:	bl	6d74 <FatPartition::clusterStartSector(unsigned long) const>
    5c9e:	mov	r6, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5ca0:	ldr	r0, [r5, #8]
    5ca2:	movs	r2, #5
    5ca4:	mov	r1, r6
    5ca6:	adds	r0, #40	; 0x28
    5ca8:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5cac:	mov	r7, r0
    5cae:	cmp	r0, #0
    5cb0:	beq.n	5d36 <FatFile::addDirCluster()+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5cb2:	mov.w	r2, #512	; 0x200
    5cb6:	mov	r1, r4
    5cb8:	bl	cf7c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5cbc:	ldr	r3, [r5, #8]
    5cbe:	ldrb	r2, [r3, #4]
    5cc0:	cmp	r2, #1
    5cc2:	bls.n	5d1e <FatFile::addDirCluster()+0xae>
    5cc4:	movs	r4, #1
    5cc6:	b.n	5cd2 <FatFile::addDirCluster()+0x62>
    5cc8:	ldr	r3, [r5, #8]
    5cca:	uxtb	r4, r4
    5ccc:	ldrb	r2, [r3, #4]
    5cce:	cmp	r2, r4
    5cd0:	bls.n	5d1e <FatFile::addDirCluster()+0xae>
    5cd2:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5cd4:	adds	r1, r4, r6
    5cd6:	mov	r2, r7
    5cd8:	adds	r4, #1
    5cda:	ldr	r3, [r0, #0]
    5cdc:	ldr	r3, [r3, #24]
    5cde:	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5ce0:	mov	r3, r0
    5ce2:	cmp	r0, #0
    5ce4:	bne.n	5cc8 <FatFile::addDirCluster()+0x58>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5ce6:	mov	r8, r3
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    if (!m_vol->writeSector(sector + i, pc->data)) {
      DBG_FAIL_MACRO;
    5ce8:	movs	r0, #83	; 0x53
    5cea:	bl	5bf0 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5cee:	mov	r0, r8
    5cf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5cf4:	movs	r0, #66	; 0x42
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5cf6:	mov	r8, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5cf8:	bl	5bf0 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5cfc:	mov	r0, r8
    5cfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5d02:	mov.w	r8, #0
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    5d06:	movs	r0, #61	; 0x3d
    5d08:	bl	5bf0 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5d0c:	mov	r0, r8
    5d0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    5d12:	movs	r0, #70	; 0x46
    5d14:	bl	5bf0 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5d18:	mov	r0, r8
    5d1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5d1e:	ldrb	r3, [r3, #6]
    5d20:	mov.w	r2, #512	; 0x200
    5d24:	ldr	r1, [r5, #20]
  return true;

fail:
  return false;
}
    5d26:	mov	r0, r8
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5d28:	lsl.w	r3, r2, r3
    5d2c:	uxtah	r3, r1, r3
    5d30:	str	r3, [r5, #20]
  return true;

fail:
  return false;
}
    5d32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    5d36:	movs	r0, #76	; 0x4c
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5d38:	mov	r8, r7
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    5d3a:	bl	5bf0 <dbgPrint(unsigned short)>
    5d3e:	b.n	5cfc <FatFile::addDirCluster()+0x8c>
    5d40:	.word	0x001ffdff

00005d44 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5d44:	push	{r3, r4, r5, lr}
    5d46:	mov	r5, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5d48:	ldr	r0, [r0, #8]
    5d4a:	mov	r2, r1
    5d4c:	adds	r0, #40	; 0x28
    5d4e:	ldr	r1, [r5, #24]
    5d50:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5d54:	mov	r4, r0
    5d56:	cbz	r0, 5d64 <FatFile::cacheDirEntry(unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5d58:	ldrh	r0, [r5, #4]
    5d5a:	and.w	r0, r0, #15
    5d5e:	add.w	r0, r4, r0, lsl #5

fail:
  return nullptr;
}
    5d62:	pop	{r3, r4, r5, pc}
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    DBG_FAIL_MACRO;
    5d64:	movs	r0, #101	; 0x65
    5d66:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);

fail:
  return nullptr;
    5d6a:	mov	r0, r4
    5d6c:	pop	{r3, r4, r5, pc}
    5d6e:	nop

00005d70 <FatFile::sync() [clone .part.38]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5d70:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5d72:	ldrsb.w	r3, [r0, #2]
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5d76:	sub	sp, #12
    5d78:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5d7a:	cmp	r3, #0
    5d7c:	blt.n	5dba <FatFile::sync() [clone .part.38]+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5d7e:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5d80:	add.w	r0, r5, #40	; 0x28
    5d84:	bl	6d64 <FatCache::sync()>
    5d88:	cbnz	r0, 5da0 <FatFile::sync() [clone .part.38]+0x30>
    return true;
  }
  DBG_FAIL_MACRO;
    5d8a:	movw	r0, #1183	; 0x49f
    5d8e:	bl	5bf0 <dbgPrint(unsigned short)>

fail:
  m_error |= WRITE_ERROR;
    5d92:	ldrb	r3, [r4, #1]
  return false;
    5d94:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5d96:	orr.w	r3, r3, #1
    5d9a:	strb	r3, [r4, #1]
  return false;
}
    5d9c:	add	sp, #12
    5d9e:	pop	{r4, r5, pc}
    5da0:	add.w	r0, r5, #564	; 0x234
    5da4:	bl	6d64 <FatCache::sync()>
    5da8:	cmp	r0, #0
    5daa:	beq.n	5d8a <FatFile::sync() [clone .part.38]+0x1a>
    5dac:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5dae:	ldr	r3, [r0, #0]
    5db0:	ldr	r3, [r3, #20]
    5db2:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5db4:	cmp	r0, #0
    5db6:	beq.n	5d8a <FatFile::sync() [clone .part.38]+0x1a>
    5db8:	b.n	5d9c <FatFile::sync() [clone .part.38]+0x2c>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5dba:	movs	r1, #1
    5dbc:	bl	5d44 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5dc0:	mov	r5, r0
    5dc2:	cbz	r0, 5e06 <FatFile::sync() [clone .part.38]+0x96>
    5dc4:	ldrb	r3, [r0, #0]
    5dc6:	cmp	r3, #229	; 0xe5
    5dc8:	beq.n	5e06 <FatFile::sync() [clone .part.38]+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5dca:	ldrb	r3, [r4, #0]
    5dcc:	lsls	r3, r3, #28
    5dce:	bpl.n	5dd4 <FatFile::sync() [clone .part.38]+0x64>
      setLe32(dir->fileSize, m_fileSize);
    5dd0:	ldr	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5dd2:	str	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5dd4:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5dd6:	ldr	r1, [pc, #56]	; (5e10 <FatFile::sync() [clone .part.38]+0xa0>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5dd8:	lsrs	r2, r3, #16
    5dda:	strh	r3, [r5, #26]
    5ddc:	ldr	r3, [r1, #0]
    5dde:	strh	r2, [r5, #20]
    5de0:	cbz	r3, 5dfc <FatFile::sync() [clone .part.38]+0x8c>
      FsDateTime::callback(&date, &time, &ms10);
    5de2:	add.w	r2, sp, #3
    5de6:	add.w	r1, sp, #6
    5dea:	add	r0, sp, #4
    5dec:	blx	r3
      setLe16(dir->modifyDate, date);
    5dee:	ldrh.w	r3, [sp, #4]
    5df2:	ldrh.w	r2, [sp, #6]
    5df6:	strh	r3, [r5, #24]
    5df8:	strh	r3, [r5, #18]
    5dfa:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5dfc:	ldrb	r3, [r4, #2]
    5dfe:	and.w	r3, r3, #127	; 0x7f
    5e02:	strb	r3, [r4, #2]
    5e04:	b.n	5d7e <FatFile::sync() [clone .part.38]+0xe>
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
    5e06:	movw	r0, #1158	; 0x486
    5e0a:	bl	5bf0 <dbgPrint(unsigned short)>
    5e0e:	b.n	5d92 <FatFile::sync() [clone .part.38]+0x22>
    5e10:	.word	0x2000609c

00005e14 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5e14:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5e16:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5e18:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5e1a:	cbnz	r3, 5e26 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5e1c:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5e1e:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5e20:	strb	r3, [r4, #0]
  m_flags = 0;
    5e22:	strb	r3, [r4, #2]
  return rtn;
}
    5e24:	pop	{r4, pc}
    5e26:	bl	5d70 <FatFile::sync() [clone .part.38]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5e2a:	movs	r3, #0
    5e2c:	strb	r3, [r4, #0]
  m_flags = 0;
    5e2e:	strb	r3, [r4, #2]
  return rtn;
}
    5e30:	pop	{r4, pc}
    5e32:	nop

00005e34 <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5e34:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    5e36:	ldrb	r4, [r0, #0]
    5e38:	cbnz	r4, 5e6a <FatFile::openRoot(FatVolume*)+0x36>
    5e3a:	mov	r6, r1
    5e3c:	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5e3e:	movs	r2, #36	; 0x24
    5e40:	mov	r1, r4
    5e42:	bl	cf7c <memset>

  m_vol = vol;
    5e46:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    5e48:	ldrb	r3, [r6, #7]
    5e4a:	cmp	r3, #16
    5e4c:	beq.n	5e5e <FatFile::openRoot(FatVolume*)+0x2a>
    5e4e:	cmp	r3, #32
    5e50:	bne.n	5e76 <FatFile::openRoot(FatVolume*)+0x42>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5e52:	movs	r3, #64	; 0x40
    5e54:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5e56:	movs	r3, #1
  return true;
    5e58:	mov	r0, r3
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5e5a:	strb	r3, [r5, #2]
  return true;

fail:
  return false;
}
    5e5c:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5e5e:	movs	r3, #32
    5e60:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5e62:	movs	r3, #1
  return true;
    5e64:	mov	r0, r3
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5e66:	strb	r3, [r5, #2]
  return true;

fail:
  return false;
}
    5e68:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    5e6a:	movw	r0, #639	; 0x27f
    5e6e:	bl	5bf0 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5e72:	movs	r0, #0
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    5e74:	pop	{r4, r5, r6, pc}
  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    break;

  default:
    DBG_FAIL_MACRO;
    5e76:	movw	r0, #658	; 0x292
    5e7a:	bl	5bf0 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5e7e:	mov	r0, r4
    5e80:	pop	{r4, r5, r6, pc}
    5e82:	nop

00005e84 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5e84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e88:	mov	r6, r0
    5e8a:	sub	sp, #72	; 0x48
    5e8c:	movs	r0, #0
    5e8e:	mov	r8, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5e90:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5e92:	str	r2, [sp, #4]
    5e94:	strb.w	r0, [sp, #36]	; 0x24
    5e98:	strb.w	r0, [sp, #37]	; 0x25
    5e9c:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5ea0:	cmp	r1, #0
    5ea2:	bne.n	5f34 <FatFile::open(FatFile*, char const*, int)+0xb0>
    5ea4:	mov	sl, r3
    5ea6:	ldrb.w	r3, [r8]
    5eaa:	tst.w	r3, #112	; 0x70
    5eae:	beq.n	5f34 <FatFile::open(FatFile*, char const*, int)+0xb0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5eb0:	ldrb	r3, [r2, #0]
    5eb2:	mov	r0, r2
    5eb4:	cmp	r3, #47	; 0x2f
    5eb6:	beq.n	5f12 <FatFile::open(FatFile*, char const*, int)+0x8e>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5eb8:	mov.w	r9, #0
    5ebc:	b.n	5ec8 <FatFile::open(FatFile*, char const*, int)+0x44>
    5ebe:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5ec0:	strb.w	r9, [r6]
  m_flags = 0;
    5ec4:	strb.w	r9, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5ec8:	add	r2, sp, #4
    5eca:	add	r1, sp, #12
    5ecc:	bl	73d8 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ed0:	add	r2, sp, #12
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5ed2:	mov	r7, r0
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ed4:	mov	r1, r8
    5ed6:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5ed8:	cmp	r0, #0
    5eda:	beq.n	5f46 <FatFile::open(FatFile*, char const*, int)+0xc2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5edc:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ede:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5ee0:	ldrb	r4, [r4, #0]
    5ee2:	cmp	r4, #0
    5ee4:	beq.n	5f56 <FatFile::open(FatFile*, char const*, int)+0xd2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ee6:	bl	7974 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5eea:	mov	r5, r6
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5eec:	mov	r7, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5eee:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5ef0:	cmp	r0, #0
    5ef2:	beq.n	5f6c <FatFile::open(FatFile*, char const*, int)+0xe8>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5ef4:	ldrb	r7, [r6, #0]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5ef6:	add.w	r8, sp, #36	; 0x24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5efa:	ldmia	r5!, {r0, r1, r2, r3}
    5efc:	stmia	r4!, {r0, r1, r2, r3}
    5efe:	ldmia	r5!, {r0, r1, r2, r3}
    5f00:	ldr	r5, [r5, #0]
    5f02:	stmia	r4!, {r0, r1, r2, r3}
    5f04:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5f06:	cmp	r7, #0
    5f08:	beq.n	5ebe <FatFile::open(FatFile*, char const*, int)+0x3a>
    5f0a:	mov	r0, r6
    5f0c:	bl	5d70 <FatFile::sync() [clone .part.38]>
    5f10:	b.n	5ebe <FatFile::open(FatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5f12:	adds	r0, #1
    5f14:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5f16:	ldrb	r3, [r0, #0]
    5f18:	cmp	r3, #47	; 0x2f
    5f1a:	beq.n	5f12 <FatFile::open(FatFile*, char const*, int)+0x8e>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5f1c:	ldr.w	r1, [r8, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    5f20:	cbz	r3, 5f7c <FatFile::open(FatFile*, char const*, int)+0xf8>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5f22:	add	r0, sp, #36	; 0x24
    5f24:	bl	5e34 <FatFile::openRoot(FatVolume*)>
    5f28:	mov	r7, r0
    5f2a:	cbz	r0, 5f86 <FatFile::open(FatFile*, char const*, int)+0x102>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5f2c:	add.w	r8, sp, #36	; 0x24
    5f30:	ldr	r0, [sp, #4]
    5f32:	b.n	5eb8 <FatFile::open(FatFile*, char const*, int)+0x34>
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    5f34:	mov.w	r0, #418	; 0x1a2
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5f38:	movs	r7, #0
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    5f3a:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5f3e:	mov	r0, r7
    5f40:	add	sp, #72	; 0x48
    5f42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    5f46:	mov.w	r0, #436	; 0x1b4
    5f4a:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5f4e:	mov	r0, r7
    5f50:	add	sp, #72	; 0x48
    5f52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5f56:	mov	r3, sl
    5f58:	add	r2, sp, #12
    5f5a:	mov	r1, r8
    5f5c:	mov	r0, r6
    5f5e:	bl	7974 <FatFile::open(FatFile*, fname_t*, int)>
    5f62:	mov	r7, r0

fail:
  return false;
}
    5f64:	mov	r0, r7
    5f66:	add	sp, #72	; 0x48
    5f68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    5f6c:	movw	r0, #443	; 0x1bb
    5f70:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5f74:	mov	r0, r7
    5f76:	add	sp, #72	; 0x48
    5f78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5f7c:	mov	r0, r6
    5f7e:	bl	5e34 <FatFile::openRoot(FatVolume*)>
    5f82:	mov	r7, r0
    5f84:	b.n	5f3e <FatFile::open(FatFile*, char const*, int)+0xba>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    5f86:	movw	r0, #429	; 0x1ad
    5f8a:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    5f8e:	b.n	5f3e <FatFile::open(FatFile*, char const*, int)+0xba>

00005f90 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5f90:	cbz	r1, 5f9a <FatFile::open(FatVolume*, char const*, int)+0xa>
    5f92:	add.w	r1, r1, #1088	; 0x440
    5f96:	b.w	5e84 <FatFile::open(FatFile*, char const*, int)>
}
    5f9a:	mov	r0, r1
    5f9c:	bx	lr
    5f9e:	nop

00005fa0 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5fa0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5fa4:	ldrb	r3, [r0, #2]
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5fa6:	sub	sp, #12
    5fa8:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5faa:	lsls	r7, r3, #31
    5fac:	bpl.w	616c <FatFile::read(void*, unsigned int)+0x1cc>
    5fb0:	mov	r7, r1
    5fb2:	ldrb	r1, [r0, #0]
    5fb4:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5fb6:	lsls	r6, r1, #28
    5fb8:	bmi.w	60c2 <FatFile::read(void*, unsigned int)+0x122>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5fbc:	lsls	r4, r1, #26
    5fbe:	bpl.n	5fd2 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5fc0:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5fc2:	ldr	r3, [r0, #20]
    5fc4:	ldrh	r2, [r2, #8]
    5fc6:	rsb	r3, r3, r2, lsl #5
    5fca:	uxth	r3, r3
    5fcc:	cmp	r9, r3
    5fce:	it	cs
    5fd0:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5fd2:	cmp.w	r9, #0
    5fd6:	beq.w	610c <FatFile::read(void*, unsigned int)+0x16c>
    5fda:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    5fdc:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5fde:	mov	r6, r9
    5fe0:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5fe4:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5fe8:	ldr	r2, [r5, #8]
    5fea:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    5fee:	bpl.n	606e <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5ff0:	ldr	r1, [r2, #32]
    5ff2:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5ff6:	cmp	r4, #0
    5ff8:	bne.n	609c <FatFile::read(void*, unsigned int)+0xfc>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5ffa:	cmp.w	r6, #512	; 0x200
    5ffe:	bcc.n	609c <FatFile::read(void*, unsigned int)+0xfc>
    6000:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    6002:	cmp	r1, r3
    6004:	beq.n	609c <FatFile::read(void*, unsigned int)+0xfc>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6006:	cmp.w	r6, #1024	; 0x400
    600a:	bcc.n	60e4 <FatFile::read(void*, unsigned int)+0x144>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    600c:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    600e:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    6012:	lsls	r0, r0, #26
    6014:	bmi.n	6022 <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6016:	ldrb	r0, [r2, #4]
    6018:	rsb	r0, r8, r0
    601c:	cmp	fp, r0
    601e:	it	cs
    6020:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    6022:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    6024:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    6028:	bhi.n	6042 <FatFile::read(void*, unsigned int)+0xa2>
    602a:	add	r3, fp
    602c:	cmp	r1, r3
    602e:	bcs.n	6042 <FatFile::read(void*, unsigned int)+0xa2>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    6030:	add.w	r0, r2, #40	; 0x28
    6034:	str	r1, [sp, #4]
    6036:	bl	6d64 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    603a:	cmp	r0, #0
    603c:	beq.n	613c <FatFile::read(void*, unsigned int)+0x19c>
    603e:	ldr	r2, [r5, #8]
    6040:	ldr	r1, [sp, #4]
    6042:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    6044:	mov	r3, fp
    6046:	mov	r2, r7
    6048:	ldr.w	lr, [r0]
    604c:	ldr.w	fp, [lr, #12]
    6050:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    6052:	cmp	r0, #0
    6054:	beq.n	6132 <FatFile::read(void*, unsigned int)+0x192>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    6056:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    6058:	subs	r6, r6, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    605a:	add	r7, r4
    m_curPosition += n;
    605c:	add	r3, r4
    605e:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    6060:	beq.n	610c <FatFile::read(void*, unsigned int)+0x16c>
    6062:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6064:	ubfx	r4, r3, #0, #9
    6068:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    606a:	lsls	r0, r1, #26
    606c:	bmi.n	5ff0 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    606e:	ldrb.w	r8, [r2, #5]
    6072:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    6076:	cmp	r4, #0
    6078:	bne.n	60e0 <FatFile::read(void*, unsigned int)+0x140>
    607a:	cmp.w	r8, #0
    607e:	bne.n	60e0 <FatFile::read(void*, unsigned int)+0x140>
        // start of new cluster
        if (m_curPosition == 0) {
    6080:	cbnz	r3, 60d0 <FatFile::read(void*, unsigned int)+0x130>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6082:	lsls	r0, r1, #25
    6084:	ite	mi
    6086:	ldrmi	r1, [r2, #32]
    6088:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    608a:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    608c:	mov	r0, r2
    608e:	bl	6d74 <FatPartition::clusterStartSector(unsigned long) const>
    6092:	ldr	r2, [r5, #8]
    6094:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    6098:	cmp	r4, #0
    609a:	beq.n	5ffa <FatFile::read(void*, unsigned int)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    609c:	add.w	r0, r2, #40	; 0x28
    60a0:	movs	r2, #0
    60a2:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    60a6:	cmp	r0, #0
    60a8:	beq.n	6118 <FatFile::read(void*, unsigned int)+0x178>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    60aa:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    60ae:	adds	r1, r0, r4
    60b0:	mov	r0, r7
    60b2:	cmp	r3, r6
    60b4:	it	cs
    60b6:	movcs	r3, r6
    60b8:	mov	r2, r3
    60ba:	mov	r4, r3
    60bc:	bl	9c8c <memcpy>
    60c0:	b.n	6056 <FatFile::read(void*, unsigned int)+0xb6>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    60c2:	ldr	r3, [r0, #28]
    60c4:	ldr	r2, [r0, #20]
    60c6:	subs	r3, r3, r2
    60c8:	cmp	r9, r3
    60ca:	it	cs
    60cc:	movcs	r9, r3
    60ce:	b.n	5fd2 <FatFile::read(void*, unsigned int)+0x32>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    60d0:	lsls	r1, r1, #28
    60d2:	bpl.n	60f6 <FatFile::read(void*, unsigned int)+0x156>
    60d4:	ldrb	r3, [r5, #2]
    60d6:	lsls	r3, r3, #25
    60d8:	bpl.n	60f6 <FatFile::read(void*, unsigned int)+0x156>
          m_curCluster++;
    60da:	ldr	r1, [r5, #16]
    60dc:	adds	r1, #1
    60de:	b.n	608a <FatFile::read(void*, unsigned int)+0xea>
    60e0:	ldr	r1, [r5, #16]
    60e2:	b.n	608c <FatFile::read(void*, unsigned int)+0xec>
    60e4:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    60e6:	mov	r2, r7
    60e8:	ldr	r3, [r0, #0]
    60ea:	ldr	r3, [r3, #8]
    60ec:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    60ee:	cbz	r0, 6146 <FatFile::read(void*, unsigned int)+0x1a6>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    60f0:	mov.w	r4, #512	; 0x200
    60f4:	b.n	6056 <FatFile::read(void*, unsigned int)+0xb6>
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    60f6:	mov	r0, r2
    60f8:	ldr	r1, [r5, #16]
    60fa:	mov	r2, sl
    60fc:	bl	6d80 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6100:	cmp	r0, #0
    6102:	blt.n	6150 <FatFile::read(void*, unsigned int)+0x1b0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    6104:	beq.n	615a <FatFile::read(void*, unsigned int)+0x1ba>
    6106:	ldr	r2, [r5, #8]
    6108:	ldr	r1, [r5, #16]
    610a:	b.n	608c <FatFile::read(void*, unsigned int)+0xec>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    610c:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    610e:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    6112:	add	sp, #12
    6114:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    6118:	movw	r0, #750	; 0x2ee
    611c:	bl	5bf0 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    6120:	ldrb	r3, [r5, #1]
  return -1;
    6122:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    6126:	orr.w	r3, r3, #2
    612a:	strb	r3, [r5, #1]
  return -1;
}
    612c:	add	sp, #12
    612e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    6132:	movw	r0, #775	; 0x307
    6136:	bl	5bf0 <dbgPrint(unsigned short)>
        goto fail;
    613a:	b.n	6120 <FatFile::read(void*, unsigned int)+0x180>
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
    613c:	movw	r0, #770	; 0x302
    6140:	bl	5bf0 <dbgPrint(unsigned short)>
          goto fail;
    6144:	b.n	6120 <FatFile::read(void*, unsigned int)+0x180>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    6146:	movw	r0, #783	; 0x30f
    614a:	bl	5bf0 <dbgPrint(unsigned short)>
        goto fail;
    614e:	b.n	6120 <FatFile::read(void*, unsigned int)+0x180>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    6150:	movw	r0, #726	; 0x2d6
    6154:	bl	5bf0 <dbgPrint(unsigned short)>
            goto fail;
    6158:	b.n	6120 <FatFile::read(void*, unsigned int)+0x180>
          }
          if (fg == 0) {
            if (isDir()) {
    615a:	ldrb	r3, [r5, #0]
    615c:	tst.w	r3, #112	; 0x70
    6160:	bne.n	610e <FatFile::read(void*, unsigned int)+0x16e>
              break;
            }
            DBG_FAIL_MACRO;
    6162:	movw	r0, #733	; 0x2dd
    6166:	bl	5bf0 <dbgPrint(unsigned short)>
            goto fail;
    616a:	b.n	6120 <FatFile::read(void*, unsigned int)+0x180>
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    DBG_FAIL_MACRO;
    616c:	movw	r0, #689	; 0x2b1
    6170:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
    6174:	b.n	6120 <FatFile::read(void*, unsigned int)+0x180>
    6176:	nop

00006178 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    6178:	push	{r4, r5, r6, lr}
    617a:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    617c:	movs	r2, #1
    617e:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    6180:	ldr	r6, [r0, #20]
    6182:	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    6186:	ldr	r5, [r0, #16]
    6188:	bl	5fa0 <FatFile::read(void*, unsigned int)>
    618c:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    618e:	str	r6, [r4, #20]
    6190:	ite	eq
    6192:	ldrbeq.w	r0, [sp, #7]
    6196:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    619a:	str	r5, [r4, #16]
  return c;
}
    619c:	add	sp, #8
    619e:	pop	{r4, r5, r6, pc}

000061a0 <FatFile::readDirCache(bool)>:
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;
    61a0:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    61a2:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    61a4:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    61a8:	sub	sp, #12
    61aa:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    61ac:	clz	r2, r5
    61b0:	lsrs	r2, r2, #5
    61b2:	cmp	r2, r1
    61b4:	bcs.n	61c6 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    61b6:	adds	r3, #32
    61b8:	str	r3, [r0, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    61ba:	ldr	r0, [r4, #8]
    61bc:	adds	r0, #52	; 0x34
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    61be:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    61c2:	add	sp, #12
    61c4:	pop	{r4, r5, pc}
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    61c6:	movs	r2, #1
    61c8:	add.w	r1, sp, #7
    61cc:	bl	5fa0 <FatFile::read(void*, unsigned int)>
    61d0:	sxtb	r0, r0
    if  (n != 1) {
    61d2:	cmp	r0, #1
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    61d4:	strb.w	r0, [sp, #7]
    if  (n != 1) {
    61d8:	bne.n	61e2 <FatFile::readDirCache(bool)+0x42>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    61da:	ldr	r3, [r4, #20]
    61dc:	adds	r3, #31
    61de:	str	r3, [r4, #20]
    61e0:	b.n	61ba <FatFile::readDirCache(bool)+0x1a>
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
    61e2:	cbnz	r0, 61e8 <FatFile::readDirCache(bool)+0x48>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    61e4:	movs	r0, #0
    61e6:	b.n	61c2 <FatFile::readDirCache(bool)+0x22>

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
        DBG_FAIL_MACRO;
    61e8:	movw	r0, #834	; 0x342
    61ec:	bl	5bf0 <dbgPrint(unsigned short)>
    61f0:	b.n	61e4 <FatFile::readDirCache(bool)+0x44>
    61f2:	nop

000061f4 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    61f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61f8:	ldrb	r3, [r0, #0]
    61fa:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    61fc:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    61fe:	cbz	r3, 6264 <FatFile::seekSet(unsigned long)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6200:	ldr	r2, [r0, #20]
    6202:	mov	r6, r1
    6204:	cmp	r2, r1
    6206:	beq.n	628c <FatFile::seekSet(unsigned long)+0x98>
    return true;
  }
  if (pos == 0) {
    6208:	cbnz	r1, 621c <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    620a:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    620c:	ldrb	r3, [r4, #2]
  return true;
    620e:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    6210:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6212:	bic.w	r3, r3, #32
    6216:	strb	r3, [r4, #2]
  return true;
    6218:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    621c:	lsls	r0, r3, #28
    621e:	bpl.n	6274 <FatFile::seekSet(unsigned long)+0x80>
    if (pos > m_fileSize) {
    6220:	ldr	r1, [r4, #28]
    6222:	cmp	r6, r1
    6224:	bhi.n	62a0 <FatFile::seekSet(unsigned long)+0xac>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6226:	ldr.w	lr, [r4, #8]
    622a:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    622c:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    622e:	ldrb.w	r1, [lr, #6]
    6232:	adds	r1, #9
    6234:	uxtb	r1, r1
    6236:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6238:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    623a:	cbz	r2, 6292 <FatFile::seekSet(unsigned long)+0x9e>
    623c:	cmp	r0, r5
    623e:	bhi.n	6292 <FatFile::seekSet(unsigned long)+0x9e>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    6240:	subs	r5, r5, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6242:	add.w	r8, r4, #16
    6246:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    6248:	cmp	r5, #0
    624a:	beq.n	620c <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    624c:	ldr	r1, [r4, #16]
    624e:	subs	r5, #1
    6250:	ldr	r0, [r4, #8]
    6252:	bl	6d80 <FatPartition::fatGet(unsigned long, unsigned long*)>
    6256:	cmp	r0, #0
    6258:	bgt.n	6246 <FatFile::seekSet(unsigned long)+0x52>
      DBG_FAIL_MACRO;
    625a:	movw	r0, #1133	; 0x46d
    625e:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    6262:	b.n	626c <FatFile::seekSet(unsigned long)+0x78>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    6264:	mov.w	r0, #1096	; 0x448
    6268:	bl	5bf0 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    626c:	str	r7, [r4, #16]
  return false;
    626e:	movs	r0, #0
    6270:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    6274:	lsls	r1, r3, #26
    6276:	bpl.n	6226 <FatFile::seekSet(unsigned long)+0x32>
    6278:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    627a:	ldrh	r3, [r3, #8]
    627c:	cmp.w	r6, r3, lsl #5
    6280:	bls.n	620c <FatFile::seekSet(unsigned long)+0x18>
      goto done;
    }
    DBG_FAIL_MACRO;
    6282:	movw	r0, #1117	; 0x45d
    6286:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
    628a:	b.n	626c <FatFile::seekSet(unsigned long)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    628c:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    628e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6292:	lsls	r3, r3, #25
    6294:	ite	mi
    6296:	ldrmi.w	r3, [lr, #32]
    629a:	ldrpl	r3, [r4, #32]
    629c:	str	r3, [r4, #16]
    629e:	b.n	6242 <FatFile::seekSet(unsigned long)+0x4e>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
    62a0:	movw	r0, #1110	; 0x456
    62a4:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    62a8:	b.n	626c <FatFile::seekSet(unsigned long)+0x78>
    62aa:	nop

000062ac <FatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    62ac:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    62ae:	ldrb	r3, [r0, #0]
    62b0:	lsls	r2, r3, #27
    62b2:	bmi.n	62c0 <FatFile::rmdir()+0x14>
    DBG_FAIL_MACRO;
    62b4:	mov.w	r0, #976	; 0x3d0
    62b8:	bl	5bf0 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    62bc:	movs	r0, #0
    62be:	pop	{r4, pc}
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    62c0:	movs	r1, #0
    62c2:	mov	r4, r0
    62c4:	bl	61f4 <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    62c8:	movs	r1, #1
    62ca:	mov	r0, r4
    62cc:	bl	61a0 <FatFile::readDirCache(bool)>
    if (!dir) {
    62d0:	cbz	r0, 62f0 <FatFile::rmdir()+0x44>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    62d2:	ldrb	r3, [r0, #0]
    62d4:	cbz	r3, 62f4 <FatFile::rmdir()+0x48>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    62d6:	cmp	r3, #46	; 0x2e
    62d8:	it	ne
    62da:	cmpne	r3, #229	; 0xe5
    62dc:	beq.n	62c8 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    62de:	ldrb	r3, [r0, #11]
    62e0:	lsls	r3, r3, #28
    62e2:	bmi.n	62c8 <FatFile::rmdir()+0x1c>
      DBG_FAIL_MACRO;
    62e4:	movw	r0, #1002	; 0x3ea
    62e8:	bl	5bf0 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    62ec:	movs	r0, #0
    62ee:	pop	{r4, pc}
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    62f0:	ldrb	r3, [r4, #1]
    62f2:	cbnz	r3, 630a <FatFile::rmdir()+0x5e>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    62f4:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    62f6:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    62f8:	mov	r0, r4
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    62fa:	orr.w	r3, r3, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    62fe:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    6300:	strb	r3, [r4, #2]
  return remove();

fail:
  return false;
}
    6302:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    6306:	b.w	7688 <FatFile::remove()>
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
        break;
      }
      DBG_FAIL_MACRO;
    630a:	movw	r0, #989	; 0x3dd
    630e:	bl	5bf0 <dbgPrint(unsigned short)>
    6312:	b.n	62bc <FatFile::rmdir()+0x10>

00006314 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6314:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6318:	mov	r8, r1
    631a:	mov	r7, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    631c:	movs	r1, #0
    631e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6320:	mov	r4, r0
    6322:	mov	r6, r3
    6324:	ldrb.w	r5, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6328:	bl	cf7c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    632c:	ldr.w	r0, [r8, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    6330:	and.w	r2, r7, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    6334:	ldr.w	r1, [r8, #32]
    6338:	add.w	r3, r0, #52	; 0x34
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    633c:	strh	r7, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    633e:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    6340:	add.w	r2, r3, r2, lsl #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    6344:	str	r1, [r4, #12]
    6346:	ldrb	r1, [r2, #11]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    6348:	lsls	r7, r1, #28
    634a:	bmi.n	63a2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    634c:	and.w	r1, r1, #23
    6350:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    6352:	ldrb	r3, [r2, #11]
    6354:	tst.w	r3, #24
    6358:	beq.n	637e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    635a:	and.w	r3, r6, #3
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    635e:	strb	r5, [r4, #3]

  switch (oflag & O_ACCMODE) {
    6360:	cmp	r3, #1
    6362:	beq.n	638e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7a>
    6364:	cmp	r3, #2
    6366:	beq.n	63b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
    6368:	cbz	r3, 63d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc2>
    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
      break;

    default:
      DBG_FAIL_MACRO;
    636a:	movw	r0, #541	; 0x21d
    636e:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    6372:	movs	r3, #0
    6374:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    6376:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6378:	strb	r3, [r4, #2]
  return false;
    637a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    637e:	and.w	r3, r6, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    6382:	orr.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
    6386:	strb	r5, [r4, #3]

  switch (oflag & O_ACCMODE) {
    6388:	cmp	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    638a:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    638c:	bne.n	6364 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x50>
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    638e:	ldrb	r3, [r4, #0]
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    6390:	movs	r5, #2
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6392:	tst.w	r3, #17
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    6396:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6398:	bne.n	63c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    639a:	sxtb	r5, r5
    639c:	and.w	lr, r6, #1024	; 0x400
    63a0:	b.n	63de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    63a2:	movw	r0, #514	; 0x202
    63a6:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    63aa:	movs	r3, #0
    63ac:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    63ae:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    63b0:	strb	r3, [r4, #2]
  return false;
    63b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    63b6:	ldrb	r3, [r4, #0]
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    63b8:	movs	r5, #3
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    63ba:	tst.w	r3, #17
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    63be:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    63c0:	beq.n	639a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x86>
      DBG_FAIL_MACRO;
    63c2:	movw	r0, #547	; 0x223
    63c6:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    63ca:	movs	r3, #0
    63cc:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    63ce:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    63d0:	strb	r3, [r4, #2]
  return false;
    63d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    63d6:	ands.w	lr, r6, #1024	; 0x400
    63da:	bne.n	6446 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x132>
    63dc:	movs	r5, #1
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    63de:	and.w	r3, r6, #8
    63e2:	orrs	r5, r3
    63e4:	uxtb	r5, r5
    63e6:	strb	r5, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    63e8:	ldrh	r1, [r2, #20]
    63ea:	ldrh	r3, [r2, #26]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    63ec:	ldr	r7, [r0, #48]	; 0x30

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    63ee:	orr.w	r1, r3, r1, lsl #16
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    63f2:	str	r7, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    63f4:	cmp.w	lr, #0
    63f8:	beq.n	640c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xf8>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    63fa:	cbnz	r1, 6436 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x122>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    63fc:	orn	r5, r5, #127	; 0x7f
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6400:	lsls	r3, r6, #17
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6402:	strb	r5, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6404:	bmi.n	6416 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x102>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    6406:	movs	r0, #1
    6408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    640c:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    640e:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    6410:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6412:	lsls	r3, r6, #17
    6414:	bpl.n	6406 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xf2>
    6416:	ldr	r1, [r4, #28]
    6418:	mov	r0, r4
    641a:	bl	61f4 <FatFile::seekSet(unsigned long)>
    641e:	cmp	r0, #0
    6420:	bne.n	6406 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xf2>
    DBG_FAIL_MACRO;
    6422:	mov.w	r0, #572	; 0x23c
    6426:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    642a:	movs	r3, #0
    642c:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    642e:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6430:	strb	r3, [r4, #2]
  return false;
    6432:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6436:	bl	6f5c <FatPartition::freeChain(unsigned long)>
    643a:	cbnz	r0, 6450 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x13c>
      DBG_FAIL_MACRO;
    643c:	movw	r0, #561	; 0x231
    6440:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    6444:	b.n	6372 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
        DBG_FAIL_MACRO;
    6446:	movw	r0, #526	; 0x20e
    644a:	bl	5bf0 <dbgPrint(unsigned short)>
        goto fail;
    644e:	b.n	6372 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    6450:	ldrb	r5, [r4, #2]
    6452:	b.n	63fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xe8>

00006454 <FatFile::openNext(FatFile*, int)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6454:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6458:	ldrb	r3, [r0, #0]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    645a:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    645c:	cbnz	r3, 6468 <FatFile::openNext(FatFile*, int)+0x14>
    645e:	ldrb	r3, [r1, #0]
    6460:	mov	r4, r1
    6462:	tst.w	r3, #112	; 0x70
    6466:	bne.n	647c <FatFile::openNext(FatFile*, int)+0x28>
    DBG_FAIL_MACRO;
    6468:	movw	r0, #591	; 0x24f
      lfnOrd = 0;
    }
  }

fail:
  return false;
    646c:	mov.w	sl, #0
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    6470:	bl	5bf0 <dbgPrint(unsigned short)>
    }
  }

fail:
  return false;
}
    6474:	mov	r0, sl
    6476:	add	sp, #8
    6478:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    647c:	ldr	r5, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    647e:	ands.w	r6, r5, #31
    6482:	bne.n	6468 <FatFile::openNext(FatFile*, int)+0x14>
    6484:	mov	r7, r0
    6486:	mov	r8, r2
    6488:	mov	r9, r6
    648a:	b.n	649c <FatFile::openNext(FatFile*, int)+0x48>
    648c:	ldrb	r1, [r0, #11]
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    648e:	tst.w	r1, #8
    6492:	beq.n	64ec <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    6494:	cmp	r1, #15
    6496:	beq.n	64c2 <FatFile::openNext(FatFile*, int)+0x6e>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    6498:	mov	r6, sl
    649a:	ldr	r5, [r4, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    649c:	movs	r1, #0
    649e:	mov	r0, r4
    64a0:	bl	61a0 <FatFile::readDirCache(bool)>
    if (!dir) {
    64a4:	mov	r2, r0
    64a6:	cbz	r0, 64da <FatFile::openNext(FatFile*, int)+0x86>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    64a8:	ldrb	r3, [r0, #0]
    64aa:	cbz	r3, 64d0 <FatFile::openNext(FatFile*, int)+0x7c>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    64ac:	cmp	r3, #229	; 0xe5
    64ae:	it	ne
    64b0:	cmpne	r3, #46	; 0x2e
    64b2:	ite	eq
    64b4:	moveq.w	sl, #1
    64b8:	movne.w	sl, #0
    64bc:	bne.n	648c <FatFile::openNext(FatFile*, int)+0x38>
      lfnOrd = 0;
    64be:	movs	r6, #0
    64c0:	b.n	649a <FatFile::openNext(FatFile*, int)+0x46>
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    64c2:	lsls	r1, r3, #25
    64c4:	bpl.n	649a <FatFile::openNext(FatFile*, int)+0x46>
        lfnOrd = ldir->order & 0X1F;
    64c6:	and.w	r6, r3, #31
        checksum = ldir->checksum;
    64ca:	ldrb.w	r9, [r0, #13]
    64ce:	b.n	649a <FatFile::openNext(FatFile*, int)+0x46>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    64d0:	mov	sl, r3
}
    64d2:	mov	r0, sl
    64d4:	add	sp, #8
    64d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    64da:	ldrb	r3, [r4, #1]
    64dc:	cmp	r3, #0
    64de:	beq.n	64d0 <FatFile::openNext(FatFile*, int)+0x7c>
        DBG_FAIL_MACRO;
    64e0:	mov.w	r0, #600	; 0x258
      lfnOrd = 0;
    }
  }

fail:
  return false;
    64e4:	mov	sl, r2
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    64e6:	bl	5bf0 <dbgPrint(unsigned short)>
    64ea:	b.n	6474 <FatFile::openNext(FatFile*, int)+0x20>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    64ec:	cbnz	r6, 650e <FatFile::openNext(FatFile*, int)+0xba>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    64ee:	str	r6, [sp, #0]
    64f0:	mov	r3, r8
    64f2:	ubfx	r2, r5, #5, #16
    64f6:	mov	r1, r4
    64f8:	mov	r0, r7
    64fa:	bl	6314 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    64fe:	mov	sl, r0
    6500:	cmp	r0, #0
    6502:	bne.n	6474 <FatFile::openNext(FatFile*, int)+0x20>
        DBG_FAIL_MACRO;
    6504:	movw	r0, #617	; 0x269
    6508:	bl	5bf0 <dbgPrint(unsigned short)>
        goto fail;
    650c:	b.n	6474 <FatFile::openNext(FatFile*, int)+0x20>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    650e:	bl	7244 <FatFile::lfnChecksum(unsigned char*)>
    6512:	cmp	r9, r0
    6514:	beq.n	64ee <FatFile::openNext(FatFile*, int)+0x9a>
        DBG_FAIL_MACRO;
    6516:	movw	r0, #613	; 0x265
    651a:	bl	5bf0 <dbgPrint(unsigned short)>
        goto fail;
    651e:	b.n	6474 <FatFile::openNext(FatFile*, int)+0x20>

00006520 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    6520:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    6524:	ldrb	r3, [r1, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    6526:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    6528:	tst.w	r3, #112	; 0x70
    652c:	beq.w	666e <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6530:	movw	r3, #2562	; 0xa02
    6534:	mov	r6, r1
    6536:	mov	r4, r0
    6538:	bl	7974 <FatFile::open(FatFile*, fname_t*, int)>
    653c:	cmp	r0, #0
    653e:	beq.w	665e <FatFile::mkdir(FatFile*, fname_t*)+0x13e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    6542:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6544:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    6546:	mov	r0, r4
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    6548:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    654a:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    654c:	bl	5c70 <FatFile::addDirCluster()>
    6550:	cmp	r0, #0
    6552:	beq.w	6694 <FatFile::mkdir(FatFile*, fname_t*)+0x174>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    6556:	ldr	r3, [r4, #16]
    6558:	movs	r1, #0
    655a:	mov	r0, r4
    655c:	str	r3, [r4, #32]
    655e:	bl	61f4 <FatFile::seekSet(unsigned long)>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6562:	ldrb	r3, [r4, #0]
    6564:	cmp	r3, #0
    6566:	bne.w	667e <FatFile::mkdir(FatFile*, fname_t*)+0x15e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    656a:	movs	r1, #1
    656c:	mov	r0, r4
    656e:	bl	5d44 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6572:	mov	r7, r0
    6574:	cmp	r0, #0
    6576:	beq.w	66ae <FatFile::mkdir(FatFile*, fname_t*)+0x18e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    657a:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    657c:	ldr	r0, [r0, #0]
    657e:	ldr	r1, [r7, #4]
    6580:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    6582:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    6584:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    6588:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    658a:	add	r5, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    658c:	ldr	r3, [r7, #12]
    658e:	ldrh.w	r8, [r7, #20]
    6592:	stmia.w	lr!, {r0, r1, r2, r3}
    6596:	ldr	r2, [r7, #24]
    6598:	ldr	r3, [r7, #28]
    659a:	ldr	r0, [r7, #16]
    659c:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    659e:	strb.w	ip, [r5, #-32]!
    65a2:	add.w	ip, sp, #10
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    65a6:	ldrh	r7, [r7, #26]
    65a8:	stmia.w	lr!, {r0, r1, r2, r3}
    65ac:	mov	r3, r5
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    65ae:	movs	r2, #32
    65b0:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    65b4:	cmp	ip, r3
    65b6:	bne.n	65b0 <FatFile::mkdir(FatFile*, fname_t*)+0x90>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    65b8:	ldr	r1, [r4, #32]
    65ba:	ldr	r0, [r4, #8]
    65bc:	bl	6d74 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    65c0:	ldr	r3, [r4, #8]
    65c2:	mov	r1, r0
    65c4:	movs	r2, #1
    65c6:	add.w	r0, r3, #40	; 0x28
    65ca:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    65ce:	mov	lr, r0
    65d0:	cmp	r0, #0
    65d2:	beq.n	66a4 <FatFile::mkdir(FatFile*, fname_t*)+0x184>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    65d4:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    65d8:	mov.w	r8, #46	; 0x2e
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    65dc:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    65e0:	mov	r7, r5
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    65e2:	ldmia	r5!, {r0, r1, r2, r3}
    65e4:	str.w	r0, [lr]
    65e8:	str.w	r1, [lr, #4]
    65ec:	str.w	r2, [lr, #8]
    65f0:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    65f4:	strb.w	r8, [sp, #1]
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    65f8:	ldmia	r5!, {r0, r1, r2, r3}
    65fa:	str.w	r0, [lr, #16]
    65fe:	str.w	r1, [lr, #20]
    6602:	str.w	r2, [lr, #24]
    6606:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    660a:	ldr	r3, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    660c:	lsrs	r2, r3, #16
    660e:	strh.w	r3, [sp, #26]
    6612:	strh.w	r2, [sp, #20]
    6616:	ldmia	r7!, {r0, r1, r2, r3}
    6618:	str.w	r0, [lr, #32]
    661c:	str.w	r1, [lr, #36]	; 0x24
    6620:	str.w	r2, [lr, #40]	; 0x28
    6624:	str.w	r3, [lr, #44]	; 0x2c
    6628:	ldmia	r7!, {r0, r1, r2, r3}
    662a:	str.w	r0, [lr, #48]	; 0x30
    662e:	str.w	r1, [lr, #52]	; 0x34
    6632:	str.w	r2, [lr, #56]	; 0x38
    6636:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    663a:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    663c:	add.w	r0, r4, #40	; 0x28
    6640:	bl	6d64 <FatCache::sync()>
    6644:	cbz	r0, 6666 <FatFile::mkdir(FatFile*, fname_t*)+0x146>
    6646:	add.w	r0, r4, #564	; 0x234
    664a:	bl	6d64 <FatCache::sync()>
    664e:	cbz	r0, 6666 <FatFile::mkdir(FatFile*, fname_t*)+0x146>
    6650:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6652:	ldr	r3, [r0, #0]
    6654:	ldr	r3, [r3, #20]

fail:
  return false;
}
    6656:	add	sp, #32
    6658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    665c:	bx	r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    665e:	mov.w	r0, #346	; 0x15a
    6662:	bl	5bf0 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    6666:	movs	r0, #0
    6668:	add	sp, #32
    666a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    666e:	movw	r0, #341	; 0x155
    6672:	bl	5bf0 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    6676:	movs	r0, #0
    6678:	add	sp, #32
    667a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    667e:	mov	r0, r4
    6680:	bl	5d70 <FatFile::sync() [clone .part.38]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    6684:	cmp	r0, #0
    6686:	bne.w	656a <FatFile::mkdir(FatFile*, fname_t*)+0x4a>
    DBG_FAIL_MACRO;
    668a:	movw	r0, #363	; 0x16b
    668e:	bl	5bf0 <dbgPrint(unsigned short)>
    6692:	b.n	6666 <FatFile::mkdir(FatFile*, fname_t*)+0x146>
  m_flags = FILE_FLAG_READ;
  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    6694:	movw	r0, #355	; 0x163
    6698:	bl	5bf0 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    669c:	movs	r0, #0
    669e:	add	sp, #32
    66a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    66a4:	mov.w	r0, #386	; 0x182
    66a8:	bl	5bf0 <dbgPrint(unsigned short)>
    66ac:	b.n	6666 <FatFile::mkdir(FatFile*, fname_t*)+0x146>
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    66ae:	movw	r0, #369	; 0x171
    66b2:	bl	5bf0 <dbgPrint(unsigned short)>
    66b6:	b.n	6666 <FatFile::mkdir(FatFile*, fname_t*)+0x146>

000066b8 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    66b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66bc:	mov	r6, r0
    66be:	sub	sp, #72	; 0x48
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    66c0:	movs	r0, #0
    66c2:	mov	r5, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    66c4:	ldrb	r1, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    66c6:	str	r2, [sp, #4]
    66c8:	strb.w	r0, [sp, #36]	; 0x24
    66cc:	strb.w	r0, [sp, #37]	; 0x25
    66d0:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    66d4:	cmp	r1, #0
    66d6:	bne.n	6746 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    66d8:	mov	r8, r3
    66da:	ldrb	r3, [r5, #0]
    66dc:	tst.w	r3, #112	; 0x70
    66e0:	beq.n	6746 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    66e2:	ldrb	r3, [r2, #0]
    66e4:	mov	r0, r2
    66e6:	cmp	r3, #47	; 0x2f
    66e8:	beq.n	6728 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    66ea:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    66ec:	add	r2, sp, #4
    66ee:	add	r1, sp, #12
    66f0:	bl	73d8 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    66f4:	add	r2, sp, #12
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    66f6:	mov	r4, r0
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    66f8:	mov	r1, r5
    66fa:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    66fc:	cmp	r0, #0
    66fe:	beq.n	6792 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    6700:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6702:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    6704:	ldrb	r4, [r4, #0]
    6706:	cmp	r4, #0
    6708:	beq.n	67a2 <FatFile::mkdir(FatFile*, char const*, bool)+0xea>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    670a:	bl	7974 <FatFile::open(FatFile*, fname_t*, int)>
    670e:	mov	r4, r0
    6710:	cbnz	r0, 6766 <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
      if (!pFlag || !mkdir(parent, &fname)) {
    6712:	cmp.w	r8, #0
    6716:	bne.n	6758 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
        DBG_FAIL_MACRO;
    6718:	mov.w	r0, #320	; 0x140
    671c:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    6720:	mov	r0, r4
    6722:	add	sp, #72	; 0x48
    6724:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    6728:	adds	r0, #1
    672a:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    672c:	ldrb	r3, [r0, #0]
    672e:	cmp	r3, #47	; 0x2f
    6730:	beq.n	6728 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    6732:	ldr	r1, [r5, #8]
    6734:	add	r0, sp, #36	; 0x24
    6736:	bl	5e34 <FatFile::openRoot(FatVolume*)>
    673a:	mov	r4, r0
    673c:	cmp	r0, #0
    673e:	beq.n	67b0 <FatFile::mkdir(FatFile*, char const*, bool)+0xf8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    6740:	add	r5, sp, #36	; 0x24
    6742:	ldr	r0, [sp, #4]
    6744:	b.n	66ea <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    6746:	movs	r4, #0
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    6748:	movw	r0, #297	; 0x129
    674c:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    6750:	mov	r0, r4
    6752:	add	sp, #72	; 0x48
    6754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    6758:	mov	r1, r5
    675a:	add	r2, sp, #12
    675c:	mov	r0, r6
    675e:	bl	6520 <FatFile::mkdir(FatFile*, fname_t*)>
    6762:	cmp	r0, #0
    6764:	beq.n	6718 <FatFile::mkdir(FatFile*, char const*, bool)+0x60>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    6766:	mov	r5, r6
    6768:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    676a:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    676e:	ldmia	r5!, {r0, r1, r2, r3}
    6770:	stmia	r4!, {r0, r1, r2, r3}
    6772:	ldmia	r5!, {r0, r1, r2, r3}
    6774:	ldr	r5, [r5, #0]
    6776:	stmia	r4!, {r0, r1, r2, r3}
    6778:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    677a:	cmp.w	lr, #0
    677e:	bne.n	678a <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    6780:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    6782:	add	r5, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6784:	strb	r7, [r6, #2]
    6786:	ldr	r0, [sp, #4]
    6788:	b.n	66ec <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    678a:	mov	r0, r6
    678c:	bl	5d70 <FatFile::sync() [clone .part.38]>
    6790:	b.n	6780 <FatFile::mkdir(FatFile*, char const*, bool)+0xc8>
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    6792:	mov.w	r0, #312	; 0x138
    6796:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    679a:	mov	r0, r4
    679c:	add	sp, #72	; 0x48
    679e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    67a2:	add	r2, sp, #12
    67a4:	mov	r1, r5
    67a6:	mov	r0, r6
    67a8:	bl	6520 <FatFile::mkdir(FatFile*, fname_t*)>
    67ac:	mov	r4, r0
    67ae:	b.n	6720 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    67b0:	movw	r0, #305	; 0x131
    67b4:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    67b8:	b.n	6720 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
    67ba:	nop

000067bc <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    67bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    67c0:	ldrb	r4, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    67c2:	sub	sp, #108	; 0x6c
    67c4:	movs	r6, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    67c6:	ands.w	r4, r4, #24
    67ca:	strb.w	r6, [sp, #32]
    67ce:	strb.w	r6, [sp, #33]	; 0x21
    67d2:	strb.w	r6, [sp, #34]	; 0x22
    67d6:	strb.w	r6, [sp, #68]	; 0x44
    67da:	strb.w	r6, [sp, #69]	; 0x45
    67de:	strb.w	r6, [sp, #70]	; 0x46
    67e2:	bne.n	67f4 <FatFile::rename(FatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    67e4:	movw	r0, #875	; 0x36b
    67e8:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    67ec:	mov	r0, r4
    67ee:	add	sp, #108	; 0x6c
    67f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    67f4:	mov	r8, r2
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    67f6:	ldr	r3, [r1, #8]
    67f8:	ldr	r2, [r0, #8]
    67fa:	mov	r5, r0
    67fc:	mov	r7, r1
    67fe:	cmp	r2, r3
    6800:	beq.n	6814 <FatFile::rename(FatFile*, char const*)+0x58>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    6802:	mov	r4, r6
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    6804:	movw	r0, #885	; 0x375
    6808:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    680c:	mov	r0, r4
    680e:	add	sp, #108	; 0x6c
    6810:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6814:	bl	5d70 <FatFile::sync() [clone .part.38]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    6818:	mov	lr, r5
    681a:	add	r4, sp, #68	; 0x44
    681c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6820:	stmia	r4!, {r0, r1, r2, r3}
    6822:	ldmia.w	lr!, {r0, r1, r2, r3}
    6826:	ldr.w	lr, [lr]
    682a:	stmia	r4!, {r0, r1, r2, r3}
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    682c:	mov	r1, r6
    682e:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    6830:	str.w	lr, [r4]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    6834:	bl	5d44 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6838:	mov	r4, r0
    683a:	cmp	r0, #0
    683c:	beq.w	69e4 <FatFile::rename(FatFile*, char const*)+0x228>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6840:	ldr	r0, [r0, #0]
    6842:	mov	lr, sp
    6844:	ldr	r1, [r4, #4]
    6846:	ldr	r2, [r4, #8]
    6848:	ldr	r3, [r4, #12]
  // make directory entry for new path
  if (isFile()) {
    684a:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    684e:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    6852:	and.w	ip, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6856:	ldr	r0, [r4, #16]
    6858:	ldr	r1, [r4, #20]
    685a:	ldr	r2, [r4, #24]
  // make directory entry for new path
  if (isFile()) {
    685c:	and.w	r9, ip, #255	; 0xff
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6860:	ldr	r3, [r4, #28]
    6862:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    6866:	cmp.w	ip, #0
    686a:	bne.w	6984 <FatFile::rename(FatFile*, char const*)+0x1c8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    686e:	mov	r3, r9
    6870:	mov	r2, r8
    6872:	mov	r1, r7
    6874:	add	r0, sp, #32
    6876:	bl	66b8 <FatFile::mkdir(FatFile*, char const*, bool)>
    687a:	mov	r4, r0
    687c:	cmp	r0, #0
    687e:	beq.w	69d0 <FatFile::rename(FatFile*, char const*)+0x214>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    6882:	ldr	r6, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    6884:	ldr	r2, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    6886:	movs	r7, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    6888:	ldrh.w	r3, [sp, #36]	; 0x24
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    688c:	movs	r1, #1
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    688e:	str	r2, [r5, #24]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    6890:	mov	r0, r5
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    6892:	strh	r3, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    6894:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    6898:	ldr	r3, [sp, #44]	; 0x2c
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    689a:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    689c:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    689e:	strb.w	r7, [sp, #32]
  file.m_flags = 0;
    68a2:	strb.w	r7, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    68a6:	bl	5d44 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    68aa:	mov	r4, r0
    68ac:	cmp	r0, #0
    68ae:	beq.w	69da <FatFile::rename(FatFile*, char const*)+0x21e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    68b2:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    68b4:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    68b8:	ldr.w	r0, [r3, #-91]!
  dir->attributes = entry.attributes;
    68bc:	strb	r2, [r4, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    68be:	ldr.w	lr, [r3, #4]
    68c2:	str.w	r0, [r4, #13]
    68c6:	ldr	r0, [r3, #8]
    68c8:	str.w	lr, [r4, #17]
    68cc:	str.w	r0, [r4, #21]
    68d0:	ldr.w	lr, [r3, #12]
    68d4:	ldrh	r0, [r3, #16]
    68d6:	ldrb	r3, [r3, #18]
    68d8:	str.w	lr, [r4, #25]
    68dc:	strh.w	r0, [r4, #29]
    68e0:	strb	r3, [r4, #31]
  dir->attributes = entry.attributes;

  // update dot dot if directory
  if (dirCluster) {
    68e2:	cmp	r6, #0
    68e4:	beq.n	695a <FatFile::rename(FatFile*, char const*)+0x19e>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    68e6:	mov	r1, r6
    68e8:	ldr	r0, [r5, #8]
    68ea:	bl	6d74 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    68ee:	ldr	r3, [r5, #8]
    68f0:	mov	r1, r0
    68f2:	mov	r2, r7
    68f4:	add.w	r0, r3, #40	; 0x28
    68f8:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    68fc:	mov	r4, r0
    68fe:	cmp	r0, #0
    6900:	beq.n	69ee <FatFile::rename(FatFile*, char const*)+0x232>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    6902:	ldr.w	r0, [r4, #32]!
    6906:	mov	r7, sp
    6908:	ldr	r1, [r4, #4]
    690a:	ldr	r2, [r4, #8]
    690c:	ldr	r3, [r4, #12]
    690e:	stmia	r7!, {r0, r1, r2, r3}
    6910:	ldr	r0, [r4, #16]
    6912:	ldr	r1, [r4, #20]
    6914:	ldr	r2, [r4, #24]
    6916:	ldr	r3, [r4, #28]
    6918:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    691a:	mov	r1, r6
    691c:	ldr	r0, [r5, #8]
    691e:	bl	6f5c <FatPartition::freeChain(unsigned long)>
    6922:	mov	r4, r0
    6924:	cmp	r0, #0
    6926:	beq.n	69c6 <FatFile::rename(FatFile*, char const*)+0x20a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    6928:	ldr	r1, [r5, #32]
    692a:	ldr	r0, [r5, #8]
    692c:	bl	6d74 <FatPartition::clusterStartSector(unsigned long) const>
    6930:	ldr	r3, [r5, #8]
    6932:	mov	r1, r0
    6934:	movs	r2, #1
    6936:	add.w	r0, r3, #40	; 0x28
    693a:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    693e:	mov	r4, r0
    6940:	cmp	r0, #0
    6942:	beq.n	69f8 <FatFile::rename(FatFile*, char const*)+0x23c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    6944:	mov	r6, sp
    6946:	ldmia	r6!, {r0, r1, r2, r3}
    6948:	str	r0, [r4, #32]
    694a:	str	r1, [r4, #36]	; 0x24
    694c:	str	r2, [r4, #40]	; 0x28
    694e:	str	r3, [r4, #44]	; 0x2c
    6950:	ldmia	r6!, {r0, r1, r2, r3}
    6952:	str	r0, [r4, #48]	; 0x30
    6954:	str	r1, [r4, #52]	; 0x34
    6956:	str	r2, [r4, #56]	; 0x38
    6958:	str	r3, [r4, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    695a:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    695c:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    695e:	movs	r3, #8
  if (!oldFile.remove()) {
    6960:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    6962:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6964:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6968:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    696c:	bl	7688 <FatFile::remove()>
    6970:	mov	r4, r0
    6972:	cbz	r0, 69a4 <FatFile::rename(FatFile*, char const*)+0x1e8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    6974:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6976:	add.w	r0, r4, #40	; 0x28
    697a:	bl	6d64 <FatCache::sync()>
    697e:	cbnz	r0, 69ae <FatFile::rename(FatFile*, char const*)+0x1f2>
    6980:	movs	r4, #0
    6982:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6984:	mov	r2, r8
    6986:	mov	r1, r7
    6988:	movw	r3, #2561	; 0xa01
    698c:	add	r0, sp, #32
    698e:	bl	5e84 <FatFile::open(FatFile*, char const*, int)>
    6992:	mov	r4, r0
    6994:	cmp	r0, #0
    6996:	bne.w	6884 <FatFile::rename(FatFile*, char const*)+0xc8>
      DBG_FAIL_MACRO;
    699a:	movw	r0, #901	; 0x385
    699e:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    69a2:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    DBG_FAIL_MACRO;
    69a4:	mov.w	r0, #964	; 0x3c4
    69a8:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
    69ac:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
    69ae:	add.w	r0, r4, #564	; 0x234
    69b2:	bl	6d64 <FatCache::sync()>
    69b6:	cmp	r0, #0
    69b8:	beq.n	6980 <FatFile::rename(FatFile*, char const*)+0x1c4>
    69ba:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    69bc:	ldr	r3, [r0, #0]
    69be:	ldr	r3, [r3, #20]
    69c0:	blx	r3
    69c2:	mov	r4, r0
    69c4:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
      DBG_FAIL_MACRO;
    69c6:	movw	r0, #947	; 0x3b3
    69ca:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    69ce:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
      DBG_FAIL_MACRO;
    69d0:	movw	r0, #907	; 0x38b
    69d4:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    69d8:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    69da:	movw	r0, #926	; 0x39e
    69de:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
    69e2:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
  // sync() and cache directory entry
  sync();
  oldFile = *this;
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
  if (!dir) {
    DBG_FAIL_MACRO;
    69e4:	movw	r0, #893	; 0x37d
    69e8:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
    69ec:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
  if (dirCluster) {
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    69ee:	mov.w	r0, #940	; 0x3ac
    69f2:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    69f6:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    69f8:	movw	r0, #954	; 0x3ba
    69fc:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    6a00:	b.n	67ec <FatFile::rename(FatFile*, char const*)+0x30>
    6a02:	nop

00006a04 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6a04:	ldrb	r3, [r0, #0]
    6a06:	cbz	r3, 6a0c <FatFile::sync()+0x8>
    6a08:	b.w	5d70 <FatFile::sync() [clone .part.38]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    6a0c:	movs	r0, #1
    6a0e:	bx	lr

00006a10 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6a10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a14:	ldrb	r3, [r0, #2]
    6a16:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6a18:	lsls	r5, r3, #30
    6a1a:	bpl.w	6ba8 <FatFile::write(void const*, unsigned int)+0x198>
    6a1e:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6a20:	lsls	r2, r3, #28
    6a22:	mov	r8, r1
    6a24:	bmi.w	6bd6 <FatFile::write(void const*, unsigned int)+0x1c6>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6a28:	ldr	r2, [r4, #20]
    6a2a:	mvns	r3, r2
    6a2c:	cmp	r9, r3
    6a2e:	bhi.w	6bcc <FatFile::write(void const*, unsigned int)+0x1bc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6a32:	cmp.w	r9, #0
    6a36:	beq.n	6ac2 <FatFile::write(void const*, unsigned int)+0xb2>
    6a38:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6a3a:	mov.w	fp, #0
    m_lbn = 0XFFFFFFFF;
    6a3e:	mov.w	sl, #4294967295
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6a42:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6a44:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6a48:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    6a4a:	ldrb	r5, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6a4c:	ands.w	r5, r5, r2, lsr #9
    6a50:	bne.n	6b44 <FatFile::write(void const*, unsigned int)+0x134>
    6a52:	cmp	r7, #0
    6a54:	bne.n	6b44 <FatFile::write(void const*, unsigned int)+0x134>
      // start of new cluster
      if (m_curCluster != 0) {
    6a56:	cmp	r1, #0
    6a58:	beq.n	6ae2 <FatFile::write(void const*, unsigned int)+0xd2>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6a5a:	ldrb	r3, [r4, #2]
    6a5c:	lsls	r3, r3, #25
    6a5e:	bpl.n	6b5e <FatFile::write(void const*, unsigned int)+0x14e>
    6a60:	ldr	r3, [r4, #28]
    6a62:	cmp	r3, r2
    6a64:	bls.n	6b5e <FatFile::write(void const*, unsigned int)+0x14e>
          m_curCluster++;
    6a66:	adds	r1, #1
    6a68:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6a6a:	bl	6d74 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    6a6e:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6a70:	cmp.w	r6, #512	; 0x200
    6a74:	bcc.w	6bec <FatFile::write(void const*, unsigned int)+0x1dc>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6a78:	cmp.w	r6, #1024	; 0x400
    6a7c:	ldr	r2, [r4, #8]
    6a7e:	bcc.n	6b7c <FatFile::write(void const*, unsigned int)+0x16c>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6a80:	ldrb	r7, [r2, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6a82:	lsrs	r3, r6, #9
    6a84:	ldr	r0, [r2, #48]	; 0x30
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6a86:	subs	r5, r7, r5
    6a88:	cmp	r3, r5
    6a8a:	it	cs
    6a8c:	movcs	r3, r5
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6a8e:	cmp	r0, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6a90:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6a94:	bcc.n	6aa6 <FatFile::write(void const*, unsigned int)+0x96>
    6a96:	add	r0, r3
    6a98:	cmp	r0, r1
    6a9a:	bls.n	6aa6 <FatFile::write(void const*, unsigned int)+0x96>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6a9c:	strb.w	fp, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    6aa0:	str.w	sl, [r2, #48]	; 0x30
    6aa4:	ldr	r2, [r4, #8]
    6aa6:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    6aa8:	mov	r2, r8
    6aaa:	ldr	r7, [r0, #0]
    6aac:	ldr	r7, [r7, #28]
    6aae:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    6ab0:	cmp	r0, #0
    6ab2:	beq.w	6c20 <FatFile::write(void const*, unsigned int)+0x210>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6ab6:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6ab8:	subs	r6, r6, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    6aba:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6abc:	add	r2, r5
    6abe:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6ac0:	bne.n	6a42 <FatFile::write(void const*, unsigned int)+0x32>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6ac2:	ldr	r3, [r4, #28]
    6ac4:	cmp	r3, r2
    6ac6:	bcc.w	6c06 <FatFile::write(void const*, unsigned int)+0x1f6>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6aca:	ldr	r3, [pc, #388]	; (6c50 <FatFile::write(void const*, unsigned int)+0x240>)
    6acc:	ldr	r3, [r3, #0]
    6ace:	cmp	r3, #0
    6ad0:	beq.w	6c48 <FatFile::write(void const*, unsigned int)+0x238>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ad4:	ldrb	r3, [r4, #2]
    6ad6:	mov	r0, r9
    6ad8:	orn	r3, r3, #127	; 0x7f
    6adc:	strb	r3, [r4, #2]
    6ade:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    6ae2:	ldr	r1, [r4, #32]
    6ae4:	cmp	r1, #0
    6ae6:	beq.n	6b96 <FatFile::write(void const*, unsigned int)+0x186>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    6ae8:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6aea:	bl	6d74 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6aee:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6af2:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6af4:	bcs.n	6a78 <FatFile::write(void const*, unsigned int)+0x68>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6af6:	rsb	r5, r7, #512	; 0x200
    6afa:	ldr	r0, [r4, #8]
    6afc:	cmp	r5, r6
    6afe:	it	cs
    6b00:	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6b02:	ldr	r2, [r4, #20]
    6b04:	ldr	r3, [r4, #28]
    6b06:	cmp	r2, r3
    6b08:	bcs.n	6b10 <FatFile::write(void const*, unsigned int)+0x100>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6b0a:	ldrb	r3, [r4, #2]
    6b0c:	lsls	r3, r3, #26
    6b0e:	bpl.n	6b5a <FatFile::write(void const*, unsigned int)+0x14a>
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    6b10:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6b12:	adds	r0, #40	; 0x28
    6b14:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    6b18:	cmp	r0, #0
    6b1a:	beq.n	6bfc <FatFile::write(void const*, unsigned int)+0x1ec>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6b1c:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6b1e:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    6b20:	mov	r2, r5
    6b22:	mov	r1, r8
    6b24:	bl	9c8c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6b28:	cmp.w	r7, #512	; 0x200
    6b2c:	bne.n	6ab6 <FatFile::write(void const*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    6b2e:	ldr	r0, [r4, #8]
    6b30:	adds	r0, #40	; 0x28
    6b32:	bl	6d64 <FatCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    6b36:	cmp	r0, #0
    6b38:	bne.n	6ab6 <FatFile::write(void const*, unsigned int)+0xa6>
          DBG_FAIL_MACRO;
    6b3a:	movw	r0, #1390	; 0x56e
    6b3e:	bl	5bf0 <dbgPrint(unsigned short)>
          goto fail;
    6b42:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6b44:	bl	6d74 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    6b48:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6b4a:	cmp	r7, #0
    6b4c:	beq.n	6a70 <FatFile::write(void const*, unsigned int)+0x60>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6b4e:	rsb	r5, r7, #512	; 0x200
    6b52:	ldr	r0, [r4, #8]
    6b54:	cmp	r5, r6
    6b56:	it	cs
    6b58:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    6b5a:	movs	r2, #1
    6b5c:	b.n	6b12 <FatFile::write(void const*, unsigned int)+0x102>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6b5e:	add.w	r2, r4, #16
    6b62:	bl	6d80 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6b66:	cmp	r0, #0
    6b68:	blt.n	6c2a <FatFile::write(void const*, unsigned int)+0x21a>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    6b6a:	bne.n	6b76 <FatFile::write(void const*, unsigned int)+0x166>
          // add cluster if at end of chain
          if (!addCluster()) {
    6b6c:	mov	r0, r4
    6b6e:	bl	5c2c <FatFile::addCluster()>
    6b72:	cmp	r0, #0
    6b74:	beq.n	6c3e <FatFile::write(void const*, unsigned int)+0x22e>
    6b76:	ldr	r1, [r4, #16]
    6b78:	ldr	r0, [r4, #8]
    6b7a:	b.n	6aea <FatFile::write(void const*, unsigned int)+0xda>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    6b7c:	ldr	r3, [r2, #48]	; 0x30
    6b7e:	cmp	r3, r1
    6b80:	beq.n	6bc0 <FatFile::write(void const*, unsigned int)+0x1b0>
    6b82:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6b84:	mov	r2, r8
    6b86:	ldr	r3, [r0, #0]
    6b88:	ldr	r3, [r3, #24]
    6b8a:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    6b8c:	cmp	r0, #0
    6b8e:	beq.n	6c16 <FatFile::write(void const*, unsigned int)+0x206>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    6b90:	mov.w	r5, #512	; 0x200
    6b94:	b.n	6ab6 <FatFile::write(void const*, unsigned int)+0xa6>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    6b96:	mov	r0, r4
    6b98:	bl	5c2c <FatFile::addCluster()>
    6b9c:	cmp	r0, #0
    6b9e:	beq.n	6c34 <FatFile::write(void const*, unsigned int)+0x224>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    6ba0:	ldr	r1, [r4, #16]
    6ba2:	ldr	r0, [r4, #8]
    6ba4:	str	r1, [r4, #32]
    6ba6:	b.n	6aea <FatFile::write(void const*, unsigned int)+0xda>
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    6ba8:	movw	r0, #1299	; 0x513
    6bac:	bl	5bf0 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6bb0:	ldrb	r3, [r4, #1]
  return -1;
    6bb2:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6bb6:	orr.w	r3, r3, #1
    6bba:	strb	r3, [r4, #1]
  return -1;
    6bbc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6bc0:	strb.w	fp, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    6bc4:	str.w	sl, [r2, #48]	; 0x30
    6bc8:	ldr	r2, [r4, #8]
    6bca:	b.n	6b82 <FatFile::write(void const*, unsigned int)+0x172>
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    6bcc:	movw	r0, #1311	; 0x51f
    6bd0:	bl	5bf0 <dbgPrint(unsigned short)>
    goto fail;
    6bd4:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    6bd6:	ldr	r1, [r0, #28]
    6bd8:	bl	61f4 <FatFile::seekSet(unsigned long)>
    6bdc:	cmp	r0, #0
    6bde:	bne.w	6a28 <FatFile::write(void const*, unsigned int)+0x18>
      DBG_FAIL_MACRO;
    6be2:	movw	r0, #1305	; 0x519
    6be6:	bl	5bf0 <dbgPrint(unsigned short)>
      goto fail;
    6bea:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
    6bec:	cmp.w	r6, #512	; 0x200
    6bf0:	mov	r5, r6
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6bf2:	ldr	r0, [r4, #8]
    6bf4:	it	cs
    6bf6:	movcs.w	r5, #512	; 0x200
    6bfa:	b.n	6b02 <FatFile::write(void const*, unsigned int)+0xf2>
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
        DBG_FAIL_MACRO;
    6bfc:	movw	r0, #1382	; 0x566
    6c00:	bl	5bf0 <dbgPrint(unsigned short)>
        goto fail;
    6c04:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6c06:	ldrb	r3, [r4, #2]
    6c08:	mov	r0, r9
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6c0a:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6c0c:	orn	r3, r3, #127	; 0x7f
    6c10:	strb	r3, [r4, #2]
    6c12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    6c16:	movw	r0, #1421	; 0x58d
    6c1a:	bl	5bf0 <dbgPrint(unsigned short)>
        goto fail;
    6c1e:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
        DBG_FAIL_MACRO;
    6c20:	movw	r0, #1410	; 0x582
    6c24:	bl	5bf0 <dbgPrint(unsigned short)>
        goto fail;
    6c28:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    6c2a:	mov.w	r0, #1328	; 0x530
    6c2e:	bl	5bf0 <dbgPrint(unsigned short)>
            goto fail;
    6c32:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6c34:	movw	r0, #1350	; 0x546
    6c38:	bl	5bf0 <dbgPrint(unsigned short)>
            goto fail;
    6c3c:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6c3e:	movw	r0, #1342	; 0x53e
    6c42:	bl	5bf0 <dbgPrint(unsigned short)>
            goto fail;
    6c46:	b.n	6bb0 <FatFile::write(void const*, unsigned int)+0x1a0>
    6c48:	mov	r0, r9
    6c4a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c4e:	nop
    6c50:	.word	0x2000609c

00006c54 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    6c54:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6c56:	movs	r1, #10
    6c58:	mov	r5, r0
    6c5a:	ldr	r0, [pc, #40]	; (6c84 <dbgPrint(unsigned short)+0x30>)
    6c5c:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6c60:	ldr	r4, [pc, #36]	; (6c88 <dbgPrint(unsigned short)+0x34>)
    6c62:	movs	r1, #16
    6c64:	ldr	r0, [pc, #36]	; (6c8c <dbgPrint(unsigned short)+0x38>)
    6c66:	bl	a3fc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6c6a:	movs	r0, #46	; 0x2e
    6c6c:	bl	a3d0 <usb_serial_putchar>
    6c70:	mov	r1, r5
    6c72:	mov	r0, r4
    6c74:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    6c78:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    6c7a:	ldmia.w	sp!, {r3, r4, r5, lr}
    6c7e:	b.w	b728 <Print::println()>
    6c82:	nop
    6c84:	.word	0x2000035c
    6c88:	.word	0x20000c58
    6c8c:	.word	0x200003b4

00006c90 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    6c90:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6c92:	ldr	r1, [r0, #8]
    6c94:	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6c96:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    6c9a:	mov	r4, r0
    6c9c:	ldr	r0, [r3, #0]
    6c9e:	mov	r2, r6
    6ca0:	ldr	r3, [r0, #0]
    6ca2:	ldr	r3, [r3, #24]
    6ca4:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    6ca6:	mov	r5, r0
    6ca8:	cbz	r0, 6cd4 <FatCache::sync() [clone .part.8]+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6caa:	ldrb	r3, [r4, #0]
    6cac:	lsls	r2, r3, #30
    6cae:	bmi.n	6cba <FatCache::sync() [clone .part.8]+0x2a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6cb0:	bic.w	r3, r3, #1
    6cb4:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    6cb6:	mov	r0, r5
    6cb8:	pop	{r4, r5, r6, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    6cba:	ldr	r3, [r4, #4]
    6cbc:	mov	r2, r6
    6cbe:	ldr	r1, [r4, #8]
    6cc0:	ldr	r0, [r3, #0]
    6cc2:	ldr	r6, [r3, #16]
    6cc4:	ldr	r3, [r0, #0]
    6cc6:	add	r1, r6
    6cc8:	ldr	r3, [r3, #24]
    6cca:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6ccc:	mov	r3, r0
    6cce:	cbz	r0, 6cde <FatCache::sync() [clone .part.8]+0x4e>
    6cd0:	ldrb	r3, [r4, #0]
    6cd2:	b.n	6cb0 <FatCache::sync() [clone .part.8]+0x20>
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
      DBG_FAIL_MACRO;
    6cd4:	movs	r0, #57	; 0x39
    6cd6:	bl	6c54 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    6cda:	mov	r0, r5
    6cdc:	pop	{r4, r5, r6, pc}
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6cde:	movs	r0, #64	; 0x40
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    6ce0:	mov	r5, r3
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6ce2:	bl	6c54 <dbgPrint(unsigned short)>
    6ce6:	b.n	6cb6 <FatCache::sync() [clone .part.8]+0x26>

00006ce8 <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6ce8:	ldr	r3, [r0, #8]
    6cea:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    6cec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cf0:	mov	r6, r0
    6cf2:	mov	r5, r2
  if (m_lbn != sector) {
    6cf4:	beq.n	6d18 <FatCache::read(unsigned long, unsigned char)+0x30>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6cf6:	ldrb	r3, [r0, #0]
    6cf8:	mov	r7, r1
    6cfa:	lsls	r2, r3, #31
    6cfc:	bmi.n	6d28 <FatCache::read(unsigned long, unsigned char)+0x40>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    6cfe:	lsls	r3, r5, #29
    6d00:	bpl.n	6d3e <FatCache::read(unsigned long, unsigned char)+0x56>
    6d02:	add.w	r4, r6, #12
    6d06:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6d08:	and.w	r5, r5, #3
    6d0c:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6d0e:	str	r7, [r6, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    6d10:	orrs	r5, r3
    6d12:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6d14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d18:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6d1c:	and.w	r5, r5, #3
    6d20:	orrs	r5, r3
    6d22:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6d24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d28:	bl	6c90 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    6d2c:	mov	r4, r0
    6d2e:	cmp	r0, #0
    6d30:	bne.n	6cfe <FatCache::read(unsigned long, unsigned char)+0x16>
      DBG_FAIL_MACRO;
    6d32:	movs	r0, #34	; 0x22
    6d34:	bl	6c54 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6d38:	mov	r0, r4
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    6d3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d3e:	ldr	r3, [r6, #4]
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6d40:	add.w	r4, r6, #12
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6d44:	mov	r1, r7
    6d46:	ldr	r0, [r3, #0]
    6d48:	mov	r2, r4
    6d4a:	ldr	r3, [r0, #0]
    6d4c:	ldr	r3, [r3, #8]
    6d4e:	blx	r3
    6d50:	mov	r8, r0
    6d52:	cmp	r0, #0
    6d54:	bne.n	6d06 <FatCache::read(unsigned long, unsigned char)+0x1e>
        DBG_FAIL_MACRO;
    6d56:	movs	r0, #39	; 0x27
    6d58:	bl	6c54 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6d5c:	mov	r0, r8
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
    6d5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d62:	nop

00006d64 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6d64:	ldrb	r3, [r0, #0]
    6d66:	lsls	r3, r3, #31
    6d68:	bmi.n	6d6e <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    6d6a:	movs	r0, #1
    6d6c:	bx	lr
    6d6e:	b.w	6c90 <FatCache::sync() [clone .part.8]>
    6d72:	nop

00006d74 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6d74:	ldrb	r3, [r0, #6]
    6d76:	subs	r1, #2
    6d78:	ldr	r0, [r0, #20]
    6d7a:	lsls	r1, r3
}
    6d7c:	add	r0, r1
    6d7e:	bx	lr

00006d80 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6d80:	cmp	r1, #1
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6d82:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6d84:	bls.n	6df0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x70>
    6d86:	ldr	r3, [r0, #28]
    6d88:	mov	r4, r1
    6d8a:	mov	r5, r0
    6d8c:	cmp	r1, r3
    6d8e:	bhi.n	6df0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x70>
    6d90:	ldrb	r3, [r0, #7]
    6d92:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6d94:	cmp	r3, #32
    6d96:	beq.n	6dc6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    6d98:	cmp	r3, #16
    6d9a:	bne.n	6de2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6d9c:	ldr	r3, [r0, #24]
    6d9e:	ubfx	r1, r1, #8, #8
    6da2:	movs	r2, #2
    6da4:	add.w	r0, r0, #564	; 0x234
    6da8:	add	r1, r3
    6daa:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6dae:	cbz	r0, 6dfc <FatPartition::fatGet(unsigned long, unsigned long*)+0x7c>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6db0:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    6db2:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    6db6:	ldr	r2, [r5, #28]
    6db8:	cmp	r3, r2
    6dba:	bhi.n	6dc2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    return 0;
  }
  *value = next;
    6dbc:	str	r3, [r6, #0]
  return 1;
    6dbe:	movs	r0, #1
    6dc0:	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    6dc2:	movs	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    6dc4:	pop	{r4, r5, r6, pc}
    6dc6:	ldr	r1, [r0, #24]
    6dc8:	movs	r2, #2
    6dca:	add.w	r0, r0, #564	; 0x234
    6dce:	add.w	r1, r1, r4, lsr #7
    6dd2:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6dd6:	cbz	r0, 6e08 <FatPartition::fatGet(unsigned long, unsigned long*)+0x88>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6dd8:	and.w	r4, r4, #127	; 0x7f
    6ddc:	ldr.w	r3, [r0, r4, lsl #2]
    6de0:	b.n	6db6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
      index = 0;
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    6de2:	mov.w	r0, #260	; 0x104
    6de6:	bl	6c54 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6dea:	mov.w	r0, #4294967295
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
    6dee:	pop	{r4, r5, r6, pc}
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6df0:	movs	r0, #214	; 0xd6
    6df2:	bl	6c54 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6df6:	mov.w	r0, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6dfa:	pop	{r4, r5, r6, pc}
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6dfc:	movs	r0, #232	; 0xe8
    6dfe:	bl	6c54 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6e02:	mov.w	r0, #4294967295
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6e06:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6e08:	movs	r0, #222	; 0xde
    6e0a:	bl	6c54 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6e0e:	mov.w	r0, #4294967295
  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6e12:	pop	{r4, r5, r6, pc}

00006e14 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6e14:	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6e16:	push	{r4, r5, r6, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6e18:	bls.n	6e3a <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6e1a:	ldr	r3, [r0, #28]
    6e1c:	mov	r4, r1
    6e1e:	cmp	r1, r3
    6e20:	bhi.n	6e3a <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6e22:	ldrb	r3, [r0, #7]
    6e24:	mov	r5, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6e26:	cmp	r3, #32
    6e28:	beq.n	6e46 <FatPartition::fatPut(unsigned long, unsigned long)+0x32>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    6e2a:	cmp	r3, #16
    6e2c:	beq.n	6e66 <FatPartition::fatPut(unsigned long, unsigned long)+0x52>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  } else {
    DBG_FAIL_MACRO;
    6e2e:	mov.w	r0, #342	; 0x156
    6e32:	bl	6c54 <dbgPrint(unsigned short)>
    goto fail;
  }

fail:
  return false;
    6e36:	movs	r0, #0
}
    6e38:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6e3a:	mov.w	r0, #280	; 0x118
    6e3e:	bl	6c54 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6e42:	movs	r0, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6e44:	pop	{r4, r5, r6, pc}
    6e46:	ldr	r1, [r0, #24]
    6e48:	movs	r2, #3
    6e4a:	add.w	r0, r0, #564	; 0x234
    6e4e:	add.w	r1, r1, r4, lsr #7
    6e52:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6e56:	mov	r6, r0
    6e58:	cbz	r0, 6e92 <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6e5a:	and.w	r4, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    6e5e:	movs	r0, #1
    6e60:	str.w	r5, [r6, r4, lsl #2]
    6e64:	pop	{r4, r5, r6, pc}
    6e66:	ldr	r3, [r0, #24]
    6e68:	ubfx	r1, r1, #8, #8
    6e6c:	add.w	r0, r0, #564	; 0x234
    6e70:	movs	r2, #3
    6e72:	add	r1, r3
    6e74:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6e78:	mov	r6, r0
    6e7a:	cbz	r0, 6e86 <FatPartition::fatPut(unsigned long, unsigned long)+0x72>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6e7c:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    6e7e:	movs	r0, #1
    6e80:	strh.w	r5, [r6, r4, lsl #1]
    6e84:	pop	{r4, r5, r6, pc}
  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6e86:	movw	r0, #301	; 0x12d
    6e8a:	bl	6c54 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6e8e:	mov	r0, r6
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6e90:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6e92:	mov.w	r0, #288	; 0x120
    6e96:	bl	6c54 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6e9a:	mov	r0, r6
    6e9c:	pop	{r4, r5, r6, pc}
    6e9e:	nop

00006ea0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6ea0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6ea4:	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6ea6:	sub	sp, #8
    6ea8:	mov	r5, r0
    6eaa:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6eac:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6eae:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6eb0:	bcs.n	6f16 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    6eb2:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6eb4:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6eb6:	adds	r4, #1
    6eb8:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6eba:	add	r2, sp, #4
    6ebc:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6ebe:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6ec0:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6ec2:	bls.n	6ed6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    6ec4:	cbnz	r6, 6f2a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6ec6:	ldr	r4, [r5, #12]
      setStart = true;
    6ec8:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6eca:	add	r2, sp, #4
    6ecc:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6ece:	adds	r4, #1
    if (find > m_lastCluster) {
    6ed0:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6ed2:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6ed4:	bhi.n	6ec4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    6ed6:	cmp	r7, r4
    6ed8:	beq.n	6f1a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6eda:	bl	6d80 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6ede:	cmp	r0, #0
    6ee0:	blt.n	6f32 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x92>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    6ee2:	beq.n	6eb6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    6ee4:	ldr	r3, [sp, #4]
    6ee6:	cmp	r3, #0
    6ee8:	bne.n	6eb6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    6eea:	cbz	r6, 6eee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    6eec:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6eee:	mvn.w	r2, #4026531840	; 0xf0000000
    6ef2:	mov	r1, r4
    6ef4:	mov	r0, r5
    6ef6:	bl	6e14 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    6efa:	mov	r6, r0
    6efc:	cbz	r0, 6f54 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xb4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    6efe:	cbnz	r7, 6f3a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9a>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6f00:	ldr	r3, [r5, #36]	; 0x24
    6f02:	cmp	r3, #0
    6f04:	blt.n	6f0a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      m_freeClusterCount += change;
    6f06:	subs	r3, #1
    6f08:	str	r3, [r5, #36]	; 0x24
  *next = find;
  return true;

fail:
  return false;
}
    6f0a:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    6f0c:	str.w	r4, [r8]
  return true;

fail:
  return false;
}
    6f10:	add	sp, #8
    6f12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    6f16:	movs	r6, #1
    6f18:	b.n	6eb6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      setStart = true;
      continue;
    }
    if (find == current) {
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
    6f1a:	movs	r0, #101	; 0x65
    6f1c:	bl	6c54 <dbgPrint(unsigned short)>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6f20:	movs	r6, #0
}
    6f22:	mov	r0, r6
    6f24:	add	sp, #8
    6f26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (1) {
    find++;
    if (find > m_lastCluster) {
      if (setStart) {
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
    6f2a:	movs	r0, #92	; 0x5c
    6f2c:	bl	6c54 <dbgPrint(unsigned short)>
        goto fail;
    6f30:	b.n	6f20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x80>
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    6f32:	movs	r0, #107	; 0x6b
    6f34:	bl	6c54 <dbgPrint(unsigned short)>
      goto fail;
    6f38:	b.n	6f20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    6f3a:	mov	r1, r7
    6f3c:	mov	r2, r4
    6f3e:	mov	r0, r5
    6f40:	bl	6e14 <FatPartition::fatPut(unsigned long, unsigned long)>
    6f44:	mov	r3, r0
    6f46:	cmp	r0, #0
    6f48:	bne.n	6f00 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
      DBG_FAIL_MACRO;
    6f4a:	movs	r0, #125	; 0x7d
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6f4c:	mov	r6, r3
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
      DBG_FAIL_MACRO;
    6f4e:	bl	6c54 <dbgPrint(unsigned short)>
      goto fail;
    6f52:	b.n	6f22 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
  if (setStart) {
    m_allocSearchStart = find;
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    6f54:	movs	r0, #119	; 0x77
    6f56:	bl	6c54 <dbgPrint(unsigned short)>
    goto fail;
    6f5a:	b.n	6f22 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>

00006f5c <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6f5c:	push	{r4, r5, r6, r7, lr}
    6f5e:	mov	r4, r0
    6f60:	sub	sp, #12
    6f62:	mov	r5, r1
    6f64:	b.n	6f88 <FatPartition::freeChain(unsigned long)+0x2c>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6f66:	bl	6e14 <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6f6a:	subs	r2, r5, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6f6c:	mov	r6, r0
    6f6e:	cbz	r0, 6fae <FatPartition::freeChain(unsigned long)+0x52>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6f70:	ldr	r3, [r4, #36]	; 0x24
    6f72:	cmp	r3, #0
      m_freeClusterCount += change;
    6f74:	add.w	r3, r3, #1
    6f78:	it	ge
    6f7a:	strge	r3, [r4, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6f7c:	ldr	r3, [r4, #12]
    6f7e:	cmp	r5, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    6f80:	ldr	r5, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6f82:	it	cc
    6f84:	strcc	r2, [r4, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6f86:	cbz	r7, 6fa8 <FatPartition::freeChain(unsigned long)+0x4c>
    fg = fatGet(cluster, &next);
    6f88:	add	r2, sp, #4
    6f8a:	mov	r1, r5
    6f8c:	mov	r0, r4
    6f8e:	bl	6d80 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6f92:	subs	r7, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6f94:	mov	r1, r5
    6f96:	mov.w	r2, #0
    6f9a:	mov	r0, r4
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6f9c:	bge.n	6f66 <FatPartition::freeChain(unsigned long)+0xa>
      DBG_FAIL_MACRO;
    6f9e:	movw	r0, #357	; 0x165
  } while (fg);

  return true;

fail:
  return false;
    6fa2:	mov	r6, r2
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    6fa4:	bl	6c54 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    6fa8:	mov	r0, r6
    6faa:	add	sp, #12
    6fac:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    6fae:	mov.w	r0, #362	; 0x16a
    6fb2:	bl	6c54 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    6fb6:	mov	r0, r6
    6fb8:	add	sp, #12
    6fba:	pop	{r4, r5, r6, r7, pc}

00006fbc <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6fbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    6fc0:	ldr	r4, [r0, #36]	; 0x24
    6fc2:	cmp	r4, #0
    6fc4:	blt.n	6fcc <FatPartition::freeClusterCount()+0x10>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6fc6:	mov	r0, r4
    6fc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fcc:	ldrb	r3, [r0, #7]
    6fce:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6fd0:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6fd2:	cmp	r3, #32
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6fd4:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6fd8:	beq.n	6ff0 <FatPartition::freeClusterCount()+0x34>
    6fda:	cmp	r3, #16
    6fdc:	beq.n	6ff0 <FatPartition::freeClusterCount()+0x34>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6fde:	mov.w	r4, #4294967295
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    6fe2:	movw	r0, #431	; 0x1af
    6fe6:	bl	6c54 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6fea:	mov	r0, r4
    6fec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    6ff0:	ldr	r5, [r6, #24]
    while (todo) {
    6ff2:	cmp.w	r8, #0
    6ff6:	beq.n	7084 <FatPartition::freeClusterCount()+0xc8>
    6ff8:	add.w	r7, r6, #564	; 0x234
    6ffc:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6ffe:	mov	r1, r5
    7000:	movs	r2, #2
    7002:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    7004:	adds	r5, #1
    7006:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    700a:	cbz	r0, 7072 <FatPartition::freeClusterCount()+0xb6>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    700c:	ldrb	r3, [r6, #7]
    700e:	cmp	r3, #16
    7010:	beq.n	7042 <FatPartition::freeClusterCount()+0x86>
      if (todo < n) {
    7012:	cmp.w	r8, #127	; 0x7f
    7016:	bhi.n	706c <FatPartition::freeClusterCount()+0xb0>
        n = todo;
    7018:	uxth.w	r2, r8
    701c:	mov	r1, r8
    701e:	subs	r2, #1
    7020:	subs	r3, r0, #4
    7022:	uxth	r2, r2
    7024:	add.w	r0, r0, r2, lsl #2
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    7028:	ldr.w	r2, [r3, #4]!
    702c:	cbnz	r2, 7030 <FatPartition::freeClusterCount()+0x74>
            free++;
    702e:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    7030:	cmp	r3, r0
    7032:	bne.n	7028 <FatPartition::freeClusterCount()+0x6c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    7034:	subs.w	r8, r8, r1
    7038:	bne.n	6ffe <FatPartition::freeClusterCount()+0x42>
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    703a:	str	r4, [r6, #36]	; 0x24
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    703c:	mov	r0, r4
    703e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    7042:	cmp.w	r8, #255	; 0xff
    7046:	bls.n	7088 <FatPartition::freeClusterCount()+0xcc>
    7048:	mov.w	r1, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    704c:	mov	r3, r1
    704e:	subs	r2, r3, #1
    7050:	subs	r3, r0, #2
    7052:	uxth	r2, r2
    7054:	add.w	r0, r0, r2, lsl #1
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    7058:	ldrh.w	r2, [r3, #2]!
    705c:	cbnz	r2, 7060 <FatPartition::freeClusterCount()+0xa4>
            free++;
    705e:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    7060:	cmp	r0, r3
    7062:	bne.n	7058 <FatPartition::freeClusterCount()+0x9c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    7064:	subs.w	r8, r8, r1
    7068:	bne.n	6ffe <FatPartition::freeClusterCount()+0x42>
    706a:	b.n	703a <FatPartition::freeClusterCount()+0x7e>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    706c:	movs	r1, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    706e:	mov	r2, r1
    7070:	b.n	701e <FatPartition::freeClusterCount()+0x62>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    7072:	mov.w	r4, #4294967295
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    7076:	movw	r0, #407	; 0x197
    707a:	bl	6c54 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    707e:	mov	r0, r4
    7080:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    7084:	mov	r4, r8
    7086:	b.n	703a <FatPartition::freeClusterCount()+0x7e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    7088:	uxth.w	r3, r8
    708c:	mov	r1, r8
    708e:	b.n	704e <FatPartition::freeClusterCount()+0x92>

00007090 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    7090:	push	{r3, r4, r5, r6, r7, lr}
    7092:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7094:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    7096:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    709a:	movs	r0, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    709c:	str	r1, [r4, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    709e:	mov	r6, r2
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    70a0:	str	r4, [r4, #44]	; 0x2c
    70a2:	str.w	r4, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    70a6:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    70a8:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    70aa:	strb.w	r5, [r4, #40]	; 0x28
    70ae:	strb.w	r5, [r4, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
    70b2:	str	r3, [r4, #48]	; 0x30
    70b4:	str.w	r3, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    70b8:	cbz	r2, 7102 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
    if (part > 4) {
    70ba:	cmp	r2, #4
    70bc:	bhi.n	70ea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    70be:	add.w	r7, r4, #40	; 0x28
    70c2:	mov	r2, r5
    70c4:	mov	r1, r5
    70c6:	mov	r0, r7
    70c8:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    70cc:	mvn.w	r3, #4026531840	; 0xf0000000
    70d0:	add.w	r1, r0, #446	; 0x1be
    70d4:	add	r3, r6
    70d6:	lsls	r3, r3, #4
    70d8:	adds	r2, r1, r3

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    70da:	cbz	r0, 70f6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    70dc:	ldrb	r0, [r2, #4]
    70de:	cbz	r0, 70f6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    70e0:	ldrb	r3, [r1, r3]
    70e2:	lsls	r3, r3, #25
    70e4:	bne.n	70f6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    70e6:	ldr	r6, [r2, #8]
    70e8:	b.n	7106 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x76>
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
    70ea:	mov.w	r0, #460	; 0x1cc
    70ee:	bl	6c54 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    70f2:	mov	r0, r5
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
      goto fail;
    70f4:	pop	{r3, r4, r5, r6, r7, pc}
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
    70f6:	mov.w	r0, #468	; 0x1d4
    70fa:	bl	6c54 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    70fe:	movs	r0, #0
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
      goto fail;
    7100:	pop	{r3, r4, r5, r6, r7, pc}
    7102:	add.w	r7, r4, #40	; 0x28
    7106:	mov	r0, r7
    7108:	movs	r2, #0
    710a:	mov	r1, r6
    710c:	bl	6ce8 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    7110:	cbz	r0, 7118 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x88>
    7112:	ldrb	r3, [r0, #16]
    7114:	cmp	r3, #2
    7116:	beq.n	7124 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x94>
    DBG_FAIL_MACRO;
    7118:	mov.w	r0, #478	; 0x1de
    711c:	bl	6c54 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    7120:	movs	r0, #0
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
    7122:	pop	{r3, r4, r5, r6, r7, pc}
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    7124:	ldrh.w	r3, [r0, #11]
    7128:	cmp.w	r3, #512	; 0x200
    712c:	bne.n	7118 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x88>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    712e:	ldrb	r2, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    7130:	movs	r5, #0
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7132:	subs	r3, r2, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7134:	cmp	r2, #1

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7136:	strb	r2, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    7138:	strb	r5, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    713a:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    713c:	beq.n	7166 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd6>
    713e:	movs	r5, #1
    7140:	mov	r1, r5
    7142:	b.n	7146 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
    7144:	mov	r5, r3
    7146:	lsls	r1, r1, #1
    7148:	adds	r3, r5, #1
    714a:	uxtb	r1, r1
    714c:	uxtb	r3, r3
    714e:	cmp	r2, r1
    7150:	beq.n	7164 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    if (tmp == 0) {
    7152:	cmp	r3, #9
    7154:	bne.n	7144 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    7156:	strb	r5, [r4, #6]
      DBG_FAIL_MACRO;
    7158:	movw	r0, #487	; 0x1e7
    715c:	bl	6c54 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    7160:	movs	r0, #0
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    7162:	pop	{r3, r4, r5, r6, r7, pc}
    7164:	strb	r5, [r4, #6]
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7166:	ldrh	r3, [r0, #22]
    7168:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    716a:	cbnz	r3, 7170 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe0>
    716c:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    716e:	str	r3, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7170:	ldrh	r2, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    7172:	ldrh.w	r7, [r0, #17]
    7176:	add	r2, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    7178:	lsls	r1, r7, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    717a:	strh	r7, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    717c:	add.w	r3, r2, r3, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7180:	str	r2, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    7182:	addw	r1, r1, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    7186:	ldrh.w	r2, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    718a:	str	r3, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    718c:	add.w	r3, r3, r1, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7190:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    7192:	cbnz	r2, 7196 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    7194:	ldr	r2, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7196:	subs	r3, r6, r3
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    7198:	movw	r1, #4084	; 0xff4
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    719c:	mov.w	r6, #4294967295
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    71a0:	add	r3, r2
    71a2:	str	r6, [r4, #36]	; 0x24

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    71a4:	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
    71a8:	adds	r3, r5, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    71aa:	cmp	r5, r1
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    71ac:	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    71ae:	bls.n	71cc <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x13c>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    71b0:	movw	r3, #65524	; 0xfff4
    71b4:	cmp	r5, r3
    71b6:	bls.n	71c4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x134>
    71b8:	ldr	r2, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    71ba:	movs	r3, #32
  }
  return true;
    71bc:	movs	r0, #1
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    71be:	str	r2, [r4, #32]
    m_fatType = 32;
    71c0:	strb	r3, [r4, #7]
    71c2:	pop	{r3, r4, r5, r6, r7, pc}
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    71c4:	movs	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
  }
  return true;
    71c6:	movs	r0, #1
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    71c8:	strb	r3, [r4, #7]
    71ca:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    71cc:	movs	r3, #12
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    71ce:	movw	r0, #525	; 0x20d

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    71d2:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    71d4:	bl	6c54 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    71d8:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    71da:	pop	{r3, r4, r5, r6, r7, pc}

000071dc <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    71dc:	cmp	r1, #4
    71de:	bls.n	71f8 <lfnGetChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    71e0:	cmp	r1, #10
    71e2:	bls.n	71f0 <lfnGetChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    71e4:	cmp	r1, #12
    71e6:	bhi.n	7202 <lfnGetChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    71e8:	add.w	r1, r0, r1, lsl #1
    71ec:	ldrh	r0, [r1, #6]
    71ee:	bx	lr
    71f0:	add.w	r1, r0, r1, lsl #1
    71f4:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    71f6:	bx	lr
    71f8:	add.w	r1, r0, r1, lsl #1
    71fc:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    7200:	bx	lr
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    7202:	movs	r0, #0
}
    7204:	bx	lr
    7206:	nop

00007208 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    7208:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    720a:	movs	r1, #10
    720c:	mov	r5, r0
    720e:	ldr	r0, [pc, #40]	; (7238 <dbgPrint(unsigned short)+0x30>)
    7210:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7214:	ldr	r4, [pc, #36]	; (723c <dbgPrint(unsigned short)+0x34>)
    7216:	movs	r1, #14
    7218:	ldr	r0, [pc, #36]	; (7240 <dbgPrint(unsigned short)+0x38>)
    721a:	bl	a3fc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    721e:	movs	r0, #46	; 0x2e
    7220:	bl	a3d0 <usb_serial_putchar>
    7224:	mov	r1, r5
    7226:	mov	r0, r4
    7228:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    722c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    722e:	ldmia.w	sp!, {r3, r4, r5, lr}
    7232:	b.w	b728 <Print::println()>
    7236:	nop
    7238:	.word	0x2000035c
    723c:	.word	0x20000c58
    7240:	.word	0x200003c8

00007244 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    7244:	push	{r4}
    7246:	mov	r4, r0
  uint8_t sum = 0;
    7248:	movs	r0, #0
    724a:	subs	r2, r4, #1
    724c:	adds	r4, #10
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    724e:	lsrs	r3, r0, #1
    7250:	ldrb.w	r1, [r2, #1]!
    7254:	orr.w	r0, r3, r0, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7258:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    725a:	uxtab	r0, r1, r0
    725e:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7260:	bne.n	724e <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    7262:	ldr.w	r4, [sp], #4
    7266:	bx	lr

00007268 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    7268:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    726a:	ldr	r3, [r1, #12]
    726c:	cbz	r3, 728c <FatFile::openCluster(FatFile*)+0x24>
    726e:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    7270:	movs	r2, #36	; 0x24
    7272:	movs	r1, #0
    7274:	mov	r5, r0
    7276:	bl	cf7c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    727a:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    727c:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    727e:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    7280:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    7282:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7284:	ldr	r3, [r4, #12]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    7286:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
    7288:	str	r3, [r5, #32]
  return true;
}
    728a:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    728c:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    728e:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    7292:	b.w	5e34 <FatFile::openRoot(FatVolume*)>
    7296:	nop

00007298 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    7298:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    729c:	movs	r3, #0
    729e:	sub	sp, #52	; 0x34
    72a0:	mov	r5, r2
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    72a2:	ldrb	r2, [r0, #0]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    72a4:	mov	r9, r1
    72a6:	strb.w	r3, [sp, #12]
    72aa:	strb.w	r3, [sp, #13]
    72ae:	strb.w	r3, [sp, #14]
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    72b2:	cmp	r2, #0
    72b4:	beq.n	7388 <FatFile::getName(char*, unsigned int)+0xf0>
    72b6:	cmp	r5, #12
    72b8:	ite	hi
    72ba:	movhi	r4, #0
    72bc:	movls	r4, #1
    72be:	cmp	r4, #0
    72c0:	bne.n	7388 <FatFile::getName(char*, unsigned int)+0xf0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    72c2:	ldrb	r3, [r0, #3]
    72c4:	mov	r8, r0
    72c6:	cmp	r3, #0
    72c8:	beq.n	739c <FatFile::getName(char*, unsigned int)+0x104>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    72ca:	mov	r1, r8
    72cc:	add	r0, sp, #12
    72ce:	bl	7268 <FatFile::openCluster(FatFile*)>
    72d2:	cmp	r0, #0
    72d4:	beq.n	73ae <FatFile::getName(char*, unsigned int)+0x116>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    72d6:	ldrb.w	r3, [r8, #3]
    72da:	cmp	r3, #0
    72dc:	beq.n	7380 <FatFile::getName(char*, unsigned int)+0xe8>
    72de:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    72e0:	str	r4, [sp, #4]
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    72e2:	ldrh.w	r1, [r8, #4]
    72e6:	add	r0, sp, #12
    72e8:	subs	r1, r1, r6
    72ea:	lsls	r1, r1, #5
    72ec:	bl	61f4 <FatFile::seekSet(unsigned long)>
    72f0:	mov	r7, r0
    72f2:	cmp	r0, #0
    72f4:	beq.n	73b6 <FatFile::getName(char*, unsigned int)+0x11e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    72f6:	movs	r1, #0
    72f8:	add	r0, sp, #12
    72fa:	bl	61a0 <FatFile::readDirCache(bool)>
    if (!ldir) {
    72fe:	mov	sl, r0
    7300:	cmp	r0, #0
    7302:	beq.n	73be <FatFile::getName(char*, unsigned int)+0x126>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    7304:	ldrb	r3, [r0, #11]
    7306:	cmp	r3, #15
    7308:	bne.n	73c6 <FatFile::getName(char*, unsigned int)+0x12e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    730a:	ldrb	r3, [r0, #0]
    730c:	and.w	r3, r3, #31
    7310:	cmp	r6, r3
    7312:	bne.n	73ce <FatFile::getName(char*, unsigned int)+0x136>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7314:	subs	r3, r6, #1
    7316:	add.w	r4, r3, r3, lsl #1
    731a:	add.w	r4, r3, r4, lsl #2
    731e:	mov	r3, r4
    7320:	add.w	r2, r9, r4
    7324:	add.w	fp, r4, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    7328:	subs	r1, r3, r4
    732a:	mov	r0, sl
    732c:	uxtb	r1, r1
    732e:	bl	71dc <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7332:	movs	r1, #63	; 0x3f
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    7334:	cbz	r0, 73aa <FatFile::getName(char*, unsigned int)+0x112>
    7336:	cmp	r5, r3
    7338:	bls.n	73aa <FatFile::getName(char*, unsigned int)+0x112>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    733a:	cmp	r0, #126	; 0x7e
    733c:	add.w	r3, r3, #1
    7340:	it	ls
    7342:	uxtbls	r1, r0
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    7344:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7346:	strb.w	r1, [r2], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    734a:	bne.n	7328 <FatFile::getName(char*, unsigned int)+0x90>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    734c:	cmp	r5, fp
    734e:	bls.n	7360 <FatFile::getName(char*, unsigned int)+0xc8>
    7350:	ldrb.w	r3, [sl]
    7354:	lsls	r2, r3, #25
    7356:	bpl.n	7360 <FatFile::getName(char*, unsigned int)+0xc8>
    name[k] = 0;
    7358:	ldrb.w	r3, [sp, #4]
    735c:	strb.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    7360:	add.w	r3, r9, r5
    7364:	ldrb.w	r2, [sp, #4]
    7368:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    736c:	ldrb.w	r3, [sl]
    7370:	lsls	r3, r3, #25
    7372:	bmi.n	7394 <FatFile::getName(char*, unsigned int)+0xfc>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7374:	adds	r6, #1
    7376:	ldrb.w	r3, [r8, #3]
    737a:	uxtb	r6, r6
    737c:	cmp	r3, r6
    737e:	bcs.n	72e2 <FatFile::getName(char*, unsigned int)+0x4a>
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    7380:	movs	r0, #166	; 0xa6
    7382:	bl	7208 <dbgPrint(unsigned short)>
    7386:	b.n	738e <FatFile::getName(char*, unsigned int)+0xf6>
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    7388:	movs	r0, #129	; 0x81
    738a:	bl	7208 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    738e:	movs	r7, #0
    7390:	strb.w	r7, [r9]
  return false;
}
    7394:	mov	r0, r7
    7396:	add	sp, #52	; 0x34
    7398:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    739c:	bl	7db8 <FatFile::getSFN(char*)>
    73a0:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    73a2:	mov	r0, r7
    73a4:	add	sp, #52	; 0x34
    73a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    73aa:	mov	fp, r3
    73ac:	b.n	734c <FatFile::getName(char*, unsigned int)+0xb4>
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    73ae:	movs	r0, #136	; 0x88
    73b0:	bl	7208 <dbgPrint(unsigned short)>
    goto fail;
    73b4:	b.n	738e <FatFile::getName(char*, unsigned int)+0xf6>
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    73b6:	movs	r0, #141	; 0x8d
    73b8:	bl	7208 <dbgPrint(unsigned short)>
      goto fail;
    73bc:	b.n	738e <FatFile::getName(char*, unsigned int)+0xf6>
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    73be:	movs	r0, #146	; 0x92
    73c0:	bl	7208 <dbgPrint(unsigned short)>
      goto fail;
    73c4:	b.n	738e <FatFile::getName(char*, unsigned int)+0xf6>
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
      DBG_FAIL_MACRO;
    73c6:	movs	r0, #150	; 0x96
    73c8:	bl	7208 <dbgPrint(unsigned short)>
      goto fail;
    73cc:	b.n	738e <FatFile::getName(char*, unsigned int)+0xf6>
    }
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
    73ce:	movs	r0, #154	; 0x9a
    73d0:	bl	7208 <dbgPrint(unsigned short)>
      goto fail;
    73d4:	b.n	738e <FatFile::getName(char*, unsigned int)+0xf6>
    73d6:	nop

000073d8 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    73d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    73dc:	ldrb	r3, [r0, #0]
    73de:	cmp	r3, #32
    73e0:	bne.n	73ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    73e2:	ldrb.w	r3, [r0, #1]!
    73e6:	cmp	r3, #32
    73e8:	beq.n	73e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    73ea:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    73ec:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    73ee:	cmp	r3, #0
    73f0:	it	ne
    73f2:	cmpne	r3, #47	; 0x2f
    73f4:	ite	eq
    73f6:	moveq.w	r8, #1
    73fa:	movne.w	r8, #0
    73fe:	beq.w	7664 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x28c>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7402:	cmp	r3, #92	; 0x5c
    7404:	beq.n	7452 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    7406:	sub.w	r4, r3, #34	; 0x22
    740a:	uxtb	r4, r4
    740c:	cmp	r4, #26
    740e:	bls.n	745e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x86>
    7410:	adds	r6, r0, #1
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    7412:	movs	r5, #0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7414:	ldr.w	lr, [pc, #620]	; 7684 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2ac>
    7418:	b.n	7422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x4a>
    741a:	cmp	r4, #26
    741c:	lsr.w	r7, lr, r4
    7420:	bls.n	746a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    7422:	sub.w	r4, r3, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    7426:	adds	r5, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7428:	sub.w	r9, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    742c:	mov	ip, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    742e:	cmp	r4, #1
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    7430:	mov	r7, r5
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    7432:	bls.n	7452 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    7434:	cmp	r3, #124	; 0x7c
    7436:	beq.n	7452 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7438:	cmp.w	r9, #94	; 0x5e
    743c:	bhi.n	7452 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    743e:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7442:	sub.w	r4, r3, #34	; 0x22
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    7446:	cmp	r3, #47	; 0x2f
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7448:	uxtb	r4, r4
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    744a:	beq.n	7470 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
    744c:	cbz	r3, 7470 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    744e:	cmp	r3, #92	; 0x5c
    7450:	bne.n	741a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    7452:	movs	r0, #211	; 0xd3
    7454:	bl	7208 <dbgPrint(unsigned short)>
  }
  return true;
  
 fail:
  return false;
}
    7458:	mov	r0, r8
    745a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    745e:	ldr	r5, [pc, #548]	; (7684 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2ac>)
    7460:	lsr.w	r4, r5, r4
    7464:	lsls	r5, r4, #31
    7466:	bmi.n	7452 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    7468:	b.n	7410 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x38>
    746a:	lsls	r4, r7, #31
    746c:	bmi.n	7452 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x7a>
    746e:	b.n	7422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    7470:	cmp	r3, #32
    7472:	beq.n	747a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    7474:	cmp	r3, #47	; 0x2f
    7476:	bne.w	7656 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x27e>
    747a:	adds	r3, r5, #1
    747c:	add	r3, r0
    747e:	mov	r6, r3
    7480:	ldrb.w	r4, [r3], #1
    7484:	cmp	r4, #32
    7486:	beq.n	747e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa6>
    7488:	cmp	r4, #47	; 0x2f
    748a:	beq.n	747e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa6>
  *ptr = &path[end];
    748c:	str	r6, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    748e:	cbz	r5, 74c0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe8>
    c = path[len - 1];
    7490:	add	r7, r0
    7492:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    7496:	cmp	r3, #32
    7498:	beq.n	749e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    749a:	cmp	r3, #46	; 0x2e
    749c:	bne.n	74b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xdc>
    749e:	subs	r3, r5, #1
    74a0:	adds	r4, r0, r3
      break;
    }
    len--;
    74a2:	mov	r5, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    74a4:	cbz	r3, 74c0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe8>
    c = path[len - 1];
    74a6:	ldrb.w	r2, [r4, #-1]!
    74aa:	subs	r3, #1
    if (c != '.' && c != ' ') {
    74ac:	cmp	r2, #46	; 0x2e
    74ae:	beq.n	74a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xca>
    74b0:	cmp	r2, #32
    74b2:	beq.n	74a2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xca>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    74b4:	cmp	r5, #255	; 0xff
    74b6:	bgt.w	7646 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x26e>
    74ba:	mov	r7, r5
    74bc:	subs	r4, r5, #1
    74be:	b.n	74c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xee>
    74c0:	mov.w	r4, #4294967295
    74c4:	mov	r7, r5
    74c6:	add.w	r3, r1, #12
    74ca:	add.w	r6, r1, #23
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    74ce:	movs	r2, #32
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    74d0:	str	r7, [r1, #4]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    74d2:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    74d6:	cmp	r3, r6
    74d8:	bne.n	74d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    74da:	ldrb	r3, [r0, #0]
    74dc:	cmp	r3, #46	; 0x2e
    74de:	beq.n	74e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10e>
    74e0:	cmp	r3, #32
    74e2:	bne.w	765c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x284>
    74e6:	mov	r6, r0
    74e8:	movs	r3, #0
    74ea:	ldrb.w	r2, [r6, #1]!
    74ee:	adds	r3, #1
    74f0:	cmp	r2, #46	; 0x2e
    74f2:	beq.n	74ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x112>
    74f4:	cmp	r2, #32
    74f6:	beq.n	74ea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x112>
    74f8:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    74fc:	adds	r2, r4, #1
    74fe:	beq.n	7518 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x140>
    7500:	ldrb	r6, [r0, r4]
    7502:	adds	r2, r0, r4
    7504:	cmp	r6, #46	; 0x2e
    7506:	bne.n	7512 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13a>
    7508:	b.n	7518 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x140>
    750a:	ldrb.w	r6, [r2, #-1]!
    750e:	cmp	r6, #46	; 0x2e
    7510:	beq.n	7518 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x140>
    7512:	adds.w	r4, r4, #4294967295
    7516:	bcs.n	750a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x132>
  for (; si < len; si++) {
    7518:	cmp	r5, r3
    751a:	mov.w	r9, #0
    751e:	ble.w	767e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2a6>
    7522:	mov.w	ip, #7
    7526:	mov.w	r8, #8
    752a:	mov	r6, r9
    752c:	mov	sl, r9
    c = path[si];
    752e:	ldrb	r2, [r0, r3]
    if (c == ' ' || (c == '.' && dot != si)) {
    7530:	cmp	r2, #32
    7532:	beq.n	753c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x164>
    7534:	cmp	r2, #46	; 0x2e
    7536:	bne.n	756a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
    7538:	cmp	r4, r3
    753a:	beq.n	756a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x192>
      is83 = false;
    753c:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    7540:	adds	r3, #1
    7542:	cmp	r3, r5
    7544:	blt.n	752e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x156>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7546:	ldrb	r3, [r1, #13]
    7548:	cmp	r3, #32
    754a:	beq.n	7602 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    754c:	cmp.w	lr, #0
    7550:	beq.n	762c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x254>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7552:	tst.w	sl, r9
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    7556:	mov.w	r8, #1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    755a:	it	ne
    755c:	movne.w	r9, #2
  }
  return true;
  
 fail:
  return false;
}
    7560:	mov	r0, r8
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7562:	strb.w	r9, [r1]
  }
  return true;
  
 fail:
  return false;
}
    7566:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    756a:	cmp	r2, #34	; 0x22
    756c:	beq.n	757e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
    756e:	cmp	r2, #124	; 0x7c
    7570:	beq.n	757e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    7572:	sub.w	r7, r2, #42	; 0x2a
    7576:	cmp	r7, #5
    7578:	bhi.n	75a4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1cc>
    757a:	cmp	r2, #45	; 0x2d
    757c:	beq.n	75a4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1cc>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    757e:	cmp	r4, r3
    7580:	beq.n	75bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1e4>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    7582:	cmp	r6, ip
    7584:	ite	ls
    7586:	movls	r2, #0
    7588:	movhi	r2, #1
    758a:	cbnz	r2, 75f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21e>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    758c:	mov	lr, r2
      c = '_';
    758e:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7590:	adds	r7, r6, #1
    7592:	add.w	fp, r1, r6
    7596:	uxtb	r6, r7
    7598:	strb.w	r2, [fp, #13]
      if (i < 7) {
    759c:	cmp	r6, #6
    759e:	bhi.n	7540 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
        fname->seqPos = i;
    75a0:	strb	r6, [r1, #12]
    75a2:	b.n	7540 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    75a4:	sub.w	r7, r2, #58	; 0x3a
    75a8:	cmp	r7, #5
    75aa:	bls.n	757e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    75ac:	sub.w	r7, r2, #91	; 0x5b
    75b0:	cmp	r7, #2
    75b2:	bls.n	757e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    75b4:	sub.w	r7, r2, #33	; 0x21
    75b8:	cmp	r7, #93	; 0x5d
    75ba:	bhi.n	757e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    75bc:	cmp	r4, r3
    75be:	beq.n	75d6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
    75c0:	cmp	r6, ip
    75c2:	bhi.n	75d6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    75c4:	sub.w	r7, r2, #97	; 0x61
    75c8:	cmp	r7, #25
    75ca:	bhi.n	761e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x246>
        c += 'A' - 'a';
    75cc:	subs	r2, #32
        lc |= bit;
    75ce:	orr.w	r9, r8, r9
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
    75d2:	uxtb	r2, r2
    75d4:	b.n	7590 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b8>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    75d6:	cmp.w	ip, #10
    75da:	beq.n	75fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x224>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
    75dc:	cmp	r4, r3
    75de:	beq.n	7610 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    75e0:	cmp	r4, r3
    75e2:	blt.n	75fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x224>
    75e4:	mov	r3, r4
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    75e6:	mov.w	ip, #10
      i = 8;    // Place for extension.
    75ea:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    75ec:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    75f0:	mov.w	lr, #0
    75f4:	b.n	7540 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    75f6:	cmp.w	ip, #10
    75fa:	bne.n	75e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x208>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    75fc:	ldrb	r3, [r1, #13]
    75fe:	cmp	r3, #32
    7600:	bne.n	762c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x254>
    DBG_FAIL_MACRO;
    7602:	movw	r0, #285	; 0x11d
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7606:	mov.w	r8, #0
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    DBG_FAIL_MACRO;
    760a:	bl	7208 <dbgPrint(unsigned short)>
    goto fail;
    760e:	b.n	7458 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
    7610:	mov	r3, r4
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    7612:	mov.w	ip, #10
      i = 8;    // Place for extension.
    7616:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    7618:	mov.w	r8, #16
    761c:	b.n	7540 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    761e:	sub.w	r7, r2, #65	; 0x41
    7622:	cmp	r7, #25
    7624:	bhi.n	7590 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b8>
        uc |= bit;
    7626:	orr.w	sl, r8, sl
    762a:	b.n	7590 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b8>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    762c:	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    762e:	mov.w	r8, #1
    fname->sfn[fname->seqPos] = '~';
    7632:	movs	r0, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    7634:	movs	r2, #49	; 0x31

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7636:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7638:	strb.w	r8, [r1]
    fname->sfn[fname->seqPos] = '~';
    763c:	strb	r0, [r3, #13]
  }
  return true;
  
 fail:
  return false;
}
    763e:	mov	r0, r8
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
    7640:	strb	r2, [r3, #14]
  }
  return true;
  
 fail:
  return false;
}
    7642:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7646:	mov.w	r8, #0
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    764a:	movs	r0, #229	; 0xe5
    764c:	bl	7208 <dbgPrint(unsigned short)>
  }
  return true;
  
 fail:
  return false;
}
    7650:	mov	r0, r8
    7652:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    7656:	str.w	ip, [r2]
    765a:	b.n	7490 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb8>
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    765c:	mov.w	lr, #1
    7660:	movs	r3, #0
    7662:	b.n	74fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x124>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    7664:	cmp	r3, #47	; 0x2f
  *ptr = &path[end];
    7666:	mov.w	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    766a:	beq.n	7670 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x298>
    766c:	cmp	r3, #32
    766e:	bne.n	7674 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x29c>
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    7670:	mov	r5, r7
    7672:	b.n	747a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    7674:	str	r0, [r2, #0]
    7676:	mov.w	r4, #4294967295
    767a:	mov	r5, r7
    767c:	b.n	74c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xee>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    767e:	mov	sl, r9
    7680:	b.n	7546 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    7682:	nop
    7684:	.word	0x05000101

00007688 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7688:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    768c:	ldrb	r3, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    768e:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7690:	movs	r2, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7692:	and.w	r3, r3, #2
    7696:	strb.w	r2, [sp, #4]
    769a:	strb.w	r2, [sp, #5]
    769e:	strb.w	r2, [sp, #6]
    76a2:	cmp	r3, #0
    76a4:	beq.n	7720 <FatFile::remove()+0x98>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    76a6:	ldr	r1, [r0, #32]
    76a8:	mov	r6, r0
    76aa:	cbnz	r1, 7704 <FatFile::remove()+0x7c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    76ac:	movs	r1, #1
    76ae:	mov	r0, r6
    76b0:	bl	5d44 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    76b4:	mov	r7, r0
    76b6:	cmp	r0, #0
    76b8:	beq.w	77e6 <FatFile::remove()+0x15e>
    76bc:	subs	r1, r7, #1
    76be:	add.w	r0, r7, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    76c2:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    76c4:	lsrs	r2, r4, #1
    76c6:	ldrb.w	r5, [r1, #1]!
    76ca:	orr.w	r3, r2, r4, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    76ce:	cmp	r1, r0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    76d0:	uxtab	r3, r5, r3
    76d4:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    76d6:	bne.n	76c4 <FatFile::remove()+0x3c>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    76d8:	mov.w	r8, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    76dc:	movs	r3, #0
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    76de:	strb.w	r8, [r7]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    76e2:	ldr	r5, [r6, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    76e4:	strb	r3, [r6, #0]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    76e6:	add.w	r0, r5, #40	; 0x28
  m_flags = 0;
    76ea:	strb	r3, [r6, #2]
    76ec:	bl	6d64 <FatCache::sync()>
    76f0:	cbnz	r0, 7734 <FatFile::remove()+0xac>

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    76f2:	movw	r0, #594	; 0x252
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    76f6:	movs	r5, #0
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    76f8:	bl	7208 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    76fc:	mov	r0, r5
    76fe:	add	sp, #40	; 0x28
    7700:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7704:	ldr	r0, [r0, #8]
    7706:	bl	6f5c <FatPartition::freeChain(unsigned long)>
    770a:	mov	r5, r0
    770c:	cmp	r0, #0
    770e:	bne.n	76ac <FatFile::remove()+0x24>
    DBG_FAIL_MACRO;
    7710:	movw	r0, #574	; 0x23e
    7714:	bl	7208 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    7718:	mov	r0, r5
    771a:	add	sp, #40	; 0x28
    771c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7720:	and.w	r5, r3, #255	; 0xff
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    7724:	movw	r0, #569	; 0x239
    7728:	bl	7208 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    772c:	mov	r0, r5
    772e:	add	sp, #40	; 0x28
    7730:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7734:	add.w	r0, r5, #564	; 0x234
    7738:	bl	6d64 <FatCache::sync()>
    773c:	cmp	r0, #0
    773e:	beq.n	76f2 <FatFile::remove()+0x6a>
    7740:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7742:	ldr	r3, [r0, #0]
    7744:	ldr	r3, [r3, #20]
    7746:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7748:	mov	r5, r0
    774a:	cmp	r0, #0
    774c:	beq.n	76f2 <FatFile::remove()+0x6a>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    774e:	ldrb	r3, [r6, #3]
    7750:	cmp	r3, #0
    7752:	beq.n	76fc <FatFile::remove()+0x74>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    7754:	mov	r1, r6
    7756:	add	r0, sp, #4
    7758:	bl	7268 <FatFile::openCluster(FatFile*)>
    775c:	mov	r3, r0
    775e:	cmp	r0, #0
    7760:	beq.n	77da <FatFile::remove()+0x152>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7762:	ldrb	r3, [r6, #3]
    7764:	cmp	r3, #0
    7766:	beq.n	77f2 <FatFile::remove()+0x16a>
    7768:	movs	r7, #1
    776a:	b.n	77ae <FatFile::remove()+0x126>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    776c:	add	r0, sp, #4
    776e:	bl	61a0 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7772:	adds	r1, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    7774:	mov	r3, r0
    7776:	cmp	r0, #0
    7778:	beq.n	77fe <FatFile::remove()+0x176>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    777a:	ldrb	r2, [r0, #11]
    777c:	cmp	r2, #15
    777e:	bne.n	77ce <FatFile::remove()+0x146>
        order != (ldir->order & 0X1F) ||
    7780:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7782:	and.w	r0, r2, #31
    7786:	cmp	r7, r0
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7788:	uxtb	r7, r1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    778a:	bne.n	77ce <FatFile::remove()+0x146>
        order != (ldir->order & 0X1F) ||
    778c:	ldrb	r1, [r3, #13]
    778e:	cmp	r1, r4
    7790:	bne.n	77ce <FatFile::remove()+0x146>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    7792:	strb.w	r8, [r3]
    m_vol->cacheDirty();
    7796:	ldr	r1, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    7798:	ldrb.w	r3, [r1, #40]	; 0x28
    779c:	orr.w	r3, r3, #1
    77a0:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    77a4:	lsls	r3, r2, #25
    77a6:	bmi.n	780a <FatFile::remove()+0x182>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    77a8:	ldrb	r3, [r6, #3]
    77aa:	cmp	r3, r7
    77ac:	bcc.n	77f2 <FatFile::remove()+0x16a>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    77ae:	ldrh	r1, [r6, #4]
    77b0:	add	r0, sp, #4
    77b2:	subs	r1, r1, r7
    77b4:	lsls	r1, r1, #5
    77b6:	bl	61f4 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    77ba:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    77bc:	mov	r3, r0
    77be:	cmp	r0, #0
    77c0:	bne.n	776c <FatFile::remove()+0xe4>
      DBG_FAIL_MACRO;
    77c2:	movw	r0, #607	; 0x25f
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77c6:	mov	r5, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    77c8:	bl	7208 <dbgPrint(unsigned short)>
      goto fail;
    77cc:	b.n	76fc <FatFile::remove()+0x74>
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    77ce:	movw	r0, #618	; 0x26a
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77d2:	movs	r5, #0
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    77d4:	bl	7208 <dbgPrint(unsigned short)>
      goto fail;
    77d8:	b.n	76fc <FatFile::remove()+0x74>
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    77da:	movw	r0, #602	; 0x25a
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77de:	mov	r5, r3
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    77e0:	bl	7208 <dbgPrint(unsigned short)>
    goto fail;
    77e4:	b.n	76fc <FatFile::remove()+0x74>
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    77e6:	mov.w	r0, #580	; 0x244
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    77ea:	mov	r5, r7
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    77ec:	bl	7208 <dbgPrint(unsigned short)>
    goto fail;
    77f0:	b.n	76fc <FatFile::remove()+0x74>
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    77f2:	movw	r0, #633	; 0x279

fail:
  return false;
    77f6:	movs	r5, #0
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    77f8:	bl	7208 <dbgPrint(unsigned short)>
    77fc:	b.n	76fc <FatFile::remove()+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    77fe:	mov.w	r0, #612	; 0x264
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7802:	mov	r5, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7804:	bl	7208 <dbgPrint(unsigned short)>
      goto fail;
    7808:	b.n	76fc <FatFile::remove()+0x74>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    780a:	ldr	r4, [r6, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    780c:	add.w	r0, r4, #40	; 0x28
    7810:	bl	6d64 <FatCache::sync()>
    7814:	cbnz	r0, 7822 <FatFile::remove()+0x19a>
        DBG_FAIL_MACRO;
    7816:	movw	r0, #626	; 0x272
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    781a:	movs	r5, #0
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
        DBG_FAIL_MACRO;
    781c:	bl	7208 <dbgPrint(unsigned short)>
        goto fail;
    7820:	b.n	76fc <FatFile::remove()+0x74>
    7822:	add.w	r0, r4, #564	; 0x234
    7826:	bl	6d64 <FatCache::sync()>
    782a:	cmp	r0, #0
    782c:	beq.n	7816 <FatFile::remove()+0x18e>
    782e:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7830:	ldr	r3, [r0, #0]
    7832:	ldr	r3, [r3, #20]
    7834:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7836:	cmp	r0, #0
    7838:	beq.n	7816 <FatFile::remove()+0x18e>
    783a:	b.n	76fc <FatFile::remove()+0x74>

0000783c <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    783c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
    7840:	ldrb	r3, [r1, #0]
    7842:	lsls	r2, r3, #31
    7844:	bpl.n	7938 <FatFile::lfnUniqueSfn(fname_t*)+0xfc>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    7846:	ldrb	r7, [r1, #12]
    7848:	mov	r5, r1
    784a:	mov	r8, r0
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');
    784c:	adds	r3, r1, r7
    784e:	ldrb	r2, [r3, #13]
    7850:	cmp	r2, #126	; 0x7e
    7852:	beq.n	787c <FatFile::lfnUniqueSfn(fname_t*)+0x40>
    7854:	ldrb	r3, [r3, #14]
    7856:	cmp	r3, #49	; 0x31
    7858:	beq.n	787c <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    785a:	movs	r1, #9
    785c:	ldr	r0, [pc, #264]	; (7968 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    785e:	bl	a3fc <usb_serial_write>
    7862:	movs	r1, #107	; 0x6b
    7864:	ldr	r0, [pc, #260]	; (796c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7866:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    786a:	movw	r1, #646	; 0x286
    786e:	ldr	r0, [pc, #256]	; (7970 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    7870:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7874:	ldr	r0, [pc, #248]	; (7970 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    7876:	bl	b728 <Print::println()>
    787a:	b.n	787a <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
    787c:	movs	r6, #2
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    787e:	add.w	r9, r5, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    7882:	ldr	r1, [r5, #4]
    7884:	ldr	r2, [r5, #8]
    7886:	adds	r3, r6, r1
    7888:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    788a:	cbz	r1, 78a0 <FatFile::lfnUniqueSfn(fname_t*)+0x64>
    788c:	adds	r0, r2, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    788e:	ldrb.w	r1, [r2], #1
    7892:	add.w	r3, r3, r3, lsl #5
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7896:	cmp	r0, r2
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    7898:	eor.w	r3, r3, r1
    789c:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    789e:	bne.n	788e <FatFile::lfnUniqueSfn(fname_t*)+0x52>
    78a0:	cmp	r7, #3
    78a2:	it	cs
    78a4:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    78a6:	adds	r2, r7, #4
    78a8:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    78aa:	and.w	r1, r3, #15
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    78ae:	subs	r4, r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    78b0:	lsrs	r3, r3, #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    78b2:	cmp	r1, #9
    78b4:	add.w	r0, r1, #55	; 0x37
    78b8:	it	ls
    78ba:	addls.w	r0, r1, #48	; 0x30
    78be:	adds	r1, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    78c0:	uxtb	r2, r4
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    78c2:	strb	r0, [r1, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    78c4:	cmp	r2, r7
    78c6:	bhi.n	78aa <FatFile::lfnUniqueSfn(fname_t*)+0x6e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    78c8:	adds	r3, r5, r7
    78ca:	movs	r2, #126	; 0x7e
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    78cc:	movs	r1, #0
    78ce:	mov	r0, r8
    78d0:	strb	r2, [r3, #13]
    78d2:	bl	61f4 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    78d6:	movs	r1, #1
    78d8:	mov	r0, r8
    78da:	bl	61a0 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    78de:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    78e0:	mov	r4, r0
    78e2:	cbz	r0, 790e <FatFile::lfnUniqueSfn(fname_t*)+0xd2>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    78e4:	ldrb	r3, [r0, #0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    78e6:	mov	r1, r0
    78e8:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    78ea:	cbz	r3, 7914 <FatFile::lfnUniqueSfn(fname_t*)+0xd8>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    78ec:	ldrb	r3, [r4, #11]
    78ee:	lsls	r3, r3, #28
    78f0:	bmi.n	78d6 <FatFile::lfnUniqueSfn(fname_t*)+0x9a>
    78f2:	bl	ce50 <memcmp>
    78f6:	mov	r4, r0
    78f8:	cmp	r0, #0
    78fa:	bne.n	78d6 <FatFile::lfnUniqueSfn(fname_t*)+0x9a>
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    78fc:	cmp	r6, #99	; 0x63
    78fe:	bne.n	791a <FatFile::lfnUniqueSfn(fname_t*)+0xde>
        break;
      }
    }
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;
    7900:	movw	r0, #686	; 0x2ae
    7904:	bl	7208 <dbgPrint(unsigned short)>

fail:
  return false;
    7908:	mov	r0, r4
    790a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    790e:	ldrb.w	r3, [r8, #1]
    7912:	cbnz	r3, 795a <FatFile::lfnUniqueSfn(fname_t*)+0x11e>

fail:
  return false;

done:
  return true;
    7914:	movs	r0, #1
    7916:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    791a:	movs	r1, #107	; 0x6b
    791c:	ldr	r0, [pc, #76]	; (796c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    791e:	bl	a3fc <usb_serial_write>
    7922:	adds	r6, #1
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7924:	mov.w	r1, #652	; 0x28c
    7928:	ldr	r0, [pc, #68]	; (7970 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    792a:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    792e:	ldr	r0, [pc, #64]	; (7970 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    7930:	bl	b728 <Print::println()>
    7934:	uxth	r6, r6
    7936:	b.n	7882 <FatFile::lfnUniqueSfn(fname_t*)+0x46>
    7938:	movs	r1, #9
    793a:	ldr	r0, [pc, #44]	; (7968 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    793c:	bl	a3fc <usb_serial_write>
    7940:	movs	r1, #107	; 0x6b
    7942:	ldr	r0, [pc, #40]	; (796c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7944:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7948:	movw	r1, #645	; 0x285
    794c:	ldr	r0, [pc, #32]	; (7970 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    794e:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7952:	ldr	r0, [pc, #28]	; (7970 <FatFile::lfnUniqueSfn(fname_t*)+0x134>)
    7954:	bl	b728 <Print::println()>
    7958:	b.n	7958 <FatFile::lfnUniqueSfn(fname_t*)+0x11c>
      if (!dir) {
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
    795a:	movw	r0, #673	; 0x2a1
    795e:	bl	7208 <dbgPrint(unsigned short)>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    7962:	mov	r0, r4
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
    7964:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7968:	.word	0x200003d8
    796c:	.word	0x200003e4
    7970:	.word	0x20000c58

00007974 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7974:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7978:	sub	sp, #52	; 0x34
    797a:	str	r3, [sp, #32]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    797c:	ldrb	r3, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    797e:	str	r0, [sp, #36]	; 0x24
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7980:	tst.w	r3, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7984:	str	r2, [sp, #12]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7986:	beq.n	798c <FatFile::open(FatFile*, fname_t*, int)+0x18>
    7988:	ldrb	r3, [r0, #0]
    798a:	cbz	r3, 799e <FatFile::open(FatFile*, fname_t*, int)+0x2a>
    DBG_FAIL_MACRO;
    798c:	movw	r0, #319	; 0x13f
    goto fail;
  }
  return true;

fail:
  return false;
    7990:	movs	r4, #0
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    7992:	bl	7208 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7996:	mov	r0, r4
    7998:	add	sp, #52	; 0x34
    799a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    799e:	ldr	r2, [sp, #12]
    79a0:	mov	r7, r1
    79a2:	ldrb	r3, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    79a4:	ldr.w	r9, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    79a8:	lsls	r3, r3, #30
    79aa:	bne.n	7a3c <FatFile::open(FatFile*, fname_t*, int)+0xc8>
    79ac:	mov.w	r8, #1
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    79b0:	ldr	r3, [sp, #12]
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    79b2:	mov.w	fp, #0
    79b6:	mov	r0, r7
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    79b8:	adds	r3, #13
    79ba:	mov	r1, fp
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    79bc:	str.w	fp, [sp, #28]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    79c0:	mov	r5, fp
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    79c2:	str	r3, [sp, #20]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    79c4:	mov	sl, fp
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    79c6:	str.w	fp, [sp, #16]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    79ca:	str.w	fp, [sp, #24]
    79ce:	bl	61f4 <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    79d2:	ldr	r6, [r7, #20]
    dir = dirFile->readDirCache(true);
    79d4:	movs	r1, #1
    79d6:	mov	r0, r7
    79d8:	bl	61a0 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    79dc:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    79e0:	mov	r3, r0
    79e2:	cmp	r0, #0
    79e4:	beq.w	7b80 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    79e8:	ldrb	r2, [r0, #0]
    79ea:	sub.w	r4, r2, #229	; 0xe5
    79ee:	clz	r4, r4
    79f2:	lsrs	r4, r4, #5
    79f4:	cmp	r2, #0
    79f6:	beq.n	7a6e <FatFile::open(FatFile*, fname_t*, int)+0xfa>
    79f8:	cmp	r4, #0
    79fa:	bne.n	7a6e <FatFile::open(FatFile*, fname_t*, int)+0xfa>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    79fc:	cmp	r5, r8
    79fe:	it	cc
    7a00:	movcc	r5, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7a02:	cmp	r2, #46	; 0x2e
    7a04:	it	eq
    7a06:	orreq.w	r4, r4, #1
    7a0a:	cbnz	r4, 7a68 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
    7a0c:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    7a0e:	cmp	r1, #15
    7a10:	beq.n	7aa4 <FatFile::open(FatFile*, fname_t*, int)+0x130>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    7a12:	lsls	r2, r1, #28
    7a14:	bmi.n	7a68 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
      if (lfnOrd) {
    7a16:	cmp.w	sl, #0
    7a1a:	bne.w	7d50 <FatFile::open(FatFile*, fname_t*, int)+0x3dc>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7a1e:	mov	r0, r3
    7a20:	movs	r2, #11
    7a22:	ldr	r1, [sp, #20]
    7a24:	bl	ce50 <memcmp>
    7a28:	cmp	r0, #0
    7a2a:	bne.n	79d2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    7a2c:	ldr	r3, [sp, #12]
    7a2e:	ldrb	r3, [r3, #0]
    7a30:	lsls	r0, r3, #31
    7a32:	bpl.w	7d2c <FatFile::open(FatFile*, fname_t*, int)+0x3b8>
          goto found;
        }
        fnameFound = true;
    7a36:	movs	r3, #1
    7a38:	str	r3, [sp, #24]
    7a3a:	b.n	79d2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7a3c:	add.w	r3, r9, #12
    7a40:	ldr	r2, [pc, #760]	; (7d3c <FatFile::open(FatFile*, fname_t*, int)+0x3c8>)
    7a42:	umull	r3, r8, r2, r3
    7a46:	mov.w	r8, r8, lsr #2
    7a4a:	add.w	r8, r8, #1
    7a4e:	uxtb.w	r8, r8
    7a52:	b.n	79b0 <FatFile::open(FatFile*, fname_t*, int)+0x3c>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7a54:	ldr	r1, [sp, #16]
    7a56:	subs	r1, #1
    7a58:	uxtb	r1, r1
    7a5a:	cmp	r2, r1
    7a5c:	str	r1, [sp, #16]
    7a5e:	bne.n	7a68 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
    7a60:	ldrb	r2, [r3, #13]
    7a62:	ldr	r1, [sp, #28]
    7a64:	cmp	r1, r2
    7a66:	beq.n	7aba <FatFile::open(FatFile*, fname_t*, int)+0x146>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
          // Not found.
          lfnOrd = 0;
    7a68:	mov.w	sl, #0
    7a6c:	b.n	79d2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    7a6e:	cmp	r5, #0
    7a70:	it	eq
    7a72:	moveq	fp, r6
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    7a74:	cmp	r5, r8
    7a76:	bcs.n	7a7c <FatFile::open(FatFile*, fname_t*, int)+0x108>
        freeFound++;
    7a78:	adds	r5, #1
    7a7a:	uxtb	r5, r5
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7a7c:	cmp	r2, #0
    7a7e:	bne.n	7a02 <FatFile::open(FatFile*, fname_t*, int)+0x8e>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7a80:	ldr	r2, [sp, #32]
    7a82:	mov	r3, r2
    7a84:	lsls	r2, r3, #22
    7a86:	bpl.n	7a92 <FatFile::open(FatFile*, fname_t*, int)+0x11e>
    7a88:	and.w	r3, r3, #3
    7a8c:	subs	r3, #1
    7a8e:	cmp	r3, #1
    7a90:	bls.n	7b24 <FatFile::open(FatFile*, fname_t*, int)+0x1b0>
    goto fail;
  }
  return true;

fail:
  return false;
    7a92:	movs	r4, #0
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    7a94:	mov.w	r0, #418	; 0x1a2
    7a98:	bl	7208 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7a9c:	mov	r0, r4
    7a9e:	add	sp, #52	; 0x34
    7aa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    7aa4:	cmp.w	sl, #0
    7aa8:	bne.n	7a54 <FatFile::open(FatFile*, fname_t*, int)+0xe0>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    7aaa:	lsls	r1, r2, #25
    7aac:	bpl.n	79d2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7aae:	and.w	sl, r2, #31
        checksum = ldir->checksum;
    7ab2:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7ab4:	str.w	sl, [sp, #16]
        checksum = ldir->checksum;
    7ab8:	str	r2, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7aba:	ldr	r2, [sp, #16]
    7abc:	subs	r2, #1
    7abe:	add.w	r4, r2, r2, lsl #1
    7ac2:	add.w	r4, r2, r4, lsl #2
      if (k >= len) {
    7ac6:	cmp	r9, r4
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7ac8:	mov	r2, r4
      if (k >= len) {
    7aca:	bls.n	7a68 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
    7acc:	add.w	r6, r4, #13
    7ad0:	b.n	7b00 <FatFile::open(FatFile*, fname_t*, int)+0x18c>
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7ad2:	cmp.w	ip, #25
    7ad6:	add.w	r0, r1, #32
    7ada:	it	ls
    7adc:	uxtbls	r1, r0
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7ade:	ldr	r0, [sp, #12]
    7ae0:	ldr	r0, [r0, #8]
    7ae2:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7ae4:	sub.w	r0, r2, #65	; 0x41
    7ae8:	add.w	ip, r2, #32
    7aec:	cmp	r0, #25
    7aee:	it	ls
    7af0:	uxtbls.w	r2, ip
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7af4:	cmp	r2, r1
    7af6:	bne.n	7a68 <FatFile::open(FatFile*, fname_t*, int)+0xf4>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    7af8:	cmp	lr, r6
    7afa:	mov	r2, lr
    7afc:	beq.w	79d2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
        uint16_t u = lfnGetChar(ldir, i);
    7b00:	subs	r1, r2, r4
    7b02:	mov	r0, r3
    7b04:	uxtb	r1, r1
    7b06:	bl	71dc <lfnGetChar(DirLfn_t*, unsigned char)>
        if (k == len) {
    7b0a:	cmp	r9, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7b0c:	add.w	lr, r2, #1
    7b10:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    7b12:	beq.w	7d02 <FatFile::open(FatFile*, fname_t*, int)+0x38e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7b16:	cmp	r0, #255	; 0xff
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    7b18:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7b1c:	bls.n	7ad2 <FatFile::open(FatFile*, fname_t*, int)+0x15e>
          // Not found.
          lfnOrd = 0;
    7b1e:	mov.w	sl, #0
    7b22:	b.n	79d2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    7b24:	cmp	r5, #0
    7b26:	it	eq
    7b28:	moveq	fp, r6
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7b2a:	cmp	r5, r8
    7b2c:	bcc.n	7b36 <FatFile::open(FatFile*, fname_t*, int)+0x1c2>
    7b2e:	b.n	7b94 <FatFile::open(FatFile*, fname_t*, int)+0x220>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7b30:	uxtb	r5, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7b32:	cmp	r8, r5
    7b34:	bls.n	7b94 <FatFile::open(FatFile*, fname_t*, int)+0x220>
    dir = dirFile->readDirCache();
    7b36:	movs	r1, #0
    7b38:	mov	r0, r7
    7b3a:	bl	61a0 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7b3e:	adds	r3, r5, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    7b40:	cmp	r0, #0
    7b42:	bne.n	7b30 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
      if (dirFile->getError()) {
    7b44:	ldrb	r3, [r7, #1]
    7b46:	mov	r4, r0
    7b48:	cbz	r3, 7b5e <FatFile::open(FatFile*, fname_t*, int)+0x1ea>
        DBG_FAIL_MACRO;
    7b4a:	mov.w	r0, #430	; 0x1ae
    7b4e:	bl	7208 <dbgPrint(unsigned short)>
        goto fail;
    7b52:	b.n	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7b54:	ldr	r3, [r7, #8]
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    7b56:	uxtb	r5, r5
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    7b58:	ldrb	r3, [r3, #4]
    7b5a:	cmp	r3, #1
    7b5c:	bhi.n	7b94 <FatFile::open(FatFile*, fname_t*, int)+0x220>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    7b5e:	cmp	r8, r5
    7b60:	bls.n	7b94 <FatFile::open(FatFile*, fname_t*, int)+0x220>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7b62:	mov	r0, r7
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    7b64:	adds	r5, #16
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7b66:	bl	5c70 <FatFile::addDirCluster()>
    7b6a:	cmp	r0, #0
    7b6c:	bne.n	7b54 <FatFile::open(FatFile*, fname_t*, int)+0x1e0>
    7b6e:	mov	r4, r0
      DBG_FAIL_MACRO;
    7b70:	movw	r0, #441	; 0x1b9
    7b74:	bl	7208 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7b78:	mov	r0, r4
    7b7a:	add	sp, #52	; 0x34
    7b7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    7b80:	ldrb	r2, [r7, #1]
    7b82:	cmp	r2, #0
    7b84:	beq.w	7a80 <FatFile::open(FatFile*, fname_t*, int)+0x10c>
        DBG_FAIL_MACRO;
    7b88:	movw	r0, #331	; 0x14b
    goto fail;
  }
  return true;

fail:
  return false;
    7b8c:	mov	r4, r3
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7b8e:	bl	7208 <dbgPrint(unsigned short)>
        goto fail;
    7b92:	b.n	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    7b94:	ldr	r3, [sp, #24]
    7b96:	cbz	r3, 7ba8 <FatFile::open(FatFile*, fname_t*, int)+0x234>
    if (!dirFile->lfnUniqueSfn(fname)) {
    7b98:	ldr	r1, [sp, #12]
    7b9a:	mov	r0, r7
    7b9c:	bl	783c <FatFile::lfnUniqueSfn(fname_t*)>
    7ba0:	mov	r4, r0
    7ba2:	cmp	r0, #0
    7ba4:	beq.w	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    7ba8:	mov.w	r1, fp, lsl #5
    7bac:	mov	r0, r7
    7bae:	bl	61f4 <FatFile::seekSet(unsigned long)>
    7bb2:	mov	r4, r0
    7bb4:	cmp	r0, #0
    7bb6:	beq.w	7d60 <FatFile::open(FatFile*, fname_t*, int)+0x3ec>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    7bba:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    7bbe:	ands.w	sl, r8, #255	; 0xff
    7bc2:	beq.n	7c6e <FatFile::open(FatFile*, fname_t*, int)+0x2fa>
    7bc4:	mov	r6, sl
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    7bc6:	mov.w	r8, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7bca:	movs	r5, #15
    7bcc:	ldr.w	fp, [sp, #12]
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    7bd0:	movs	r1, #0
    7bd2:	mov	r0, r7
    7bd4:	bl	61a0 <FatFile::readDirCache(bool)>
    if (!ldir) {
    7bd8:	cmp	r0, #0
    7bda:	beq.w	7d44 <FatFile::open(FatFile*, fname_t*, int)+0x3d0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    7bde:	ldr	r2, [r7, #8]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7be0:	cmp	r6, sl
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    7be2:	ldrb.w	r3, [r2, #40]	; 0x28
    7be6:	orr.w	r3, r3, #1
    7bea:	strb.w	r3, [r2, #40]	; 0x28
    7bee:	beq.w	7d74 <FatFile::open(FatFile*, fname_t*, int)+0x400>
    7bf2:	mov	r1, r6
    7bf4:	add.w	lr, fp, #12
    7bf8:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    7bfc:	movs	r3, #0
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7bfe:	strb	r1, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7c00:	strb	r5, [r0, #11]
    ldir->mustBeZero1 = 0;
    7c02:	strb.w	r8, [r0, #12]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7c06:	lsrs	r2, r3, #1
    7c08:	ldrb.w	r4, [lr, #1]!
    7c0c:	orr.w	r3, r2, r3, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7c10:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7c12:	uxtab	r3, r4, r3
    7c16:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7c18:	bne.n	7c06 <FatFile::open(FatFile*, fname_t*, int)+0x292>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7c1a:	and.w	r1, r1, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    7c1e:	strb	r3, [r0, #13]
    7c20:	adds	r2, r0, #4
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    7c22:	ldr.w	r4, [fp, #8]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7c26:	subs	r1, #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7c28:	strh.w	r8, [r0, #26]
  for (uint8_t i = 0; i < 13; i++, k++) {
    7c2c:	movs	r3, #0
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7c2e:	add.w	r0, r1, r1, lsl #1
    7c32:	add.w	r1, r1, r0, lsl #2
    7c36:	b.n	7c4c <FatFile::open(FatFile*, fname_t*, int)+0x2d8>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    7c38:	cmp	r3, #10
    7c3a:	ite	ls
    7c3c:	strhls	r0, [r2, #0]
    7c3e:	strhhi	r0, [r2, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    7c40:	adds	r3, #1
    7c42:	adds	r1, #1
    7c44:	adds	r2, #2
    7c46:	uxtb	r3, r3
    7c48:	cmp	r3, #13
    7c4a:	beq.n	7c66 <FatFile::open(FatFile*, fname_t*, int)+0x2f2>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7c4c:	cmp	r9, r1
    7c4e:	ite	ne
    7c50:	movne.w	r0, #4294967295
    7c54:	moveq	r0, #0
    7c56:	ite	hi
    7c58:	ldrbhi	r0, [r4, r1]
    7c5a:	uxthls	r0, r0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7c5c:	cmp	r3, #4
    7c5e:	bhi.n	7c38 <FatFile::open(FatFile*, fname_t*, int)+0x2c4>
    7c60:	strh.w	r0, [r2, #-3]
    7c64:	b.n	7c40 <FatFile::open(FatFile*, fname_t*, int)+0x2cc>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    7c66:	subs	r6, #1
    7c68:	ands.w	r6, r6, #255	; 0xff
    7c6c:	bne.n	7bd0 <FatFile::open(FatFile*, fname_t*, int)+0x25c>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7c6e:	ldr	r6, [r7, #20]
  dir = dirFile->readDirCache();
    7c70:	movs	r1, #0
    7c72:	mov	r0, r7
    7c74:	bl	61a0 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7c78:	ubfx	r6, r6, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    7c7c:	mov	r4, r0
    7c7e:	cmp	r0, #0
    7c80:	beq.n	7d6a <FatFile::open(FatFile*, fname_t*, int)+0x3f6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    7c82:	movs	r2, #32
    7c84:	movs	r1, #0
    7c86:	bl	cf7c <memset>
  memcpy(dir->name, fname->sfn, 11);
    7c8a:	ldr	r5, [sp, #12]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    7c8c:	ldr	r2, [pc, #176]	; (7d40 <FatFile::open(FatFile*, fname_t*, int)+0x3cc>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    7c8e:	mov	r3, r5
    7c90:	ldr.w	r0, [r3, #13]!
    7c94:	ldr	r1, [r3, #4]
    7c96:	str	r0, [r4, #0]
    7c98:	str	r1, [r4, #4]
    7c9a:	ldrh	r1, [r3, #8]
    7c9c:	ldrb	r3, [r3, #10]
    7c9e:	strh	r1, [r4, #8]
    7ca0:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7ca2:	ldrb	r3, [r5, #0]

  // set timestamps
  if (FsDateTime::callback) {
    7ca4:	ldr	r5, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7ca6:	and.w	r3, r3, #24
    7caa:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    7cac:	cbz	r5, 7cd2 <FatFile::open(FatFile*, fname_t*, int)+0x35e>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    7cae:	add.w	r2, sp, #43	; 0x2b
    7cb2:	add.w	r1, sp, #46	; 0x2e
    7cb6:	add	r0, sp, #44	; 0x2c
    7cb8:	blx	r5
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    7cba:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    7cbe:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    7cc2:	ldrb.w	r1, [sp, #43]	; 0x2b
    7cc6:	strh	r3, [r4, #16]
    7cc8:	strb	r1, [r4, #13]
    7cca:	strh	r3, [r4, #18]
    7ccc:	strh	r3, [r4, #24]
    7cce:	strh	r2, [r4, #14]
    7cd0:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    7cd2:	ldr	r2, [r7, #8]
    7cd4:	ldrb.w	r3, [r2, #40]	; 0x28
    7cd8:	orr.w	r3, r3, #1
    7cdc:	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    7ce0:	str.w	sl, [sp]
    7ce4:	mov	r2, r6
    7ce6:	ldr	r3, [sp, #32]
    7ce8:	mov	r1, r7
    7cea:	ldr	r0, [sp, #36]	; 0x24
    7cec:	bl	6314 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7cf0:	mov	r4, r0
    7cf2:	cmp	r0, #0
    7cf4:	bne.w	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    DBG_FAIL_MACRO;
    7cf8:	mov.w	r0, #504	; 0x1f8
    7cfc:	bl	7208 <dbgPrint(unsigned short)>
    goto fail;
    7d00:	b.n	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    7d02:	cmp	r0, #0
    7d04:	it	ne
    7d06:	movne.w	sl, #0
    7d0a:	b.n	79d2 <FatFile::open(FatFile*, fname_t*, int)+0x5e>
    7d0c:	subs	r0, r3, #1
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    7d0e:	mov	r2, r4
    7d10:	adds	r3, #10
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7d12:	lsrs	r1, r2, #1
    7d14:	ldrb.w	r5, [r0, #1]!
    7d18:	orr.w	r2, r1, r2, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7d1c:	cmp	r0, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7d1e:	uxtab	r2, r5, r2
    7d22:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7d24:	bne.n	7d12 <FatFile::open(FatFile*, fname_t*, int)+0x39e>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7d26:	ldr	r3, [sp, #28]
    7d28:	cmp	r3, r2
    7d2a:	bne.n	7d56 <FatFile::open(FatFile*, fname_t*, int)+0x3e2>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    7d2c:	ldr	r3, [sp, #32]
    7d2e:	lsls	r1, r3, #20
    7d30:	bpl.n	7ce0 <FatFile::open(FatFile*, fname_t*, int)+0x36c>
    DBG_FAIL_MACRO;
    7d32:	mov.w	r0, #410	; 0x19a
    7d36:	bl	7208 <dbgPrint(unsigned short)>
    goto fail;
    7d3a:	b.n	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7d3c:	.word	0x4ec4ec4f
    7d40:	.word	0x2000609c
    7d44:	mov	r4, r0
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7d46:	movw	r0, #463	; 0x1cf
    7d4a:	bl	7208 <dbgPrint(unsigned short)>
      goto fail;
    7d4e:	b.n	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7d50:	ldr	r2, [sp, #16]
    7d52:	cmp	r2, #1
    7d54:	beq.n	7d0c <FatFile::open(FatFile*, fname_t*, int)+0x398>
          goto found;
        }
        DBG_FAIL_MACRO;
    7d56:	movw	r0, #393	; 0x189
    7d5a:	bl	7208 <dbgPrint(unsigned short)>
        goto fail;
    7d5e:	b.n	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!dirFile->lfnUniqueSfn(fname)) {
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    7d60:	mov.w	r0, #456	; 0x1c8
    7d64:	bl	7208 <dbgPrint(unsigned short)>
    goto fail;
    7d68:	b.n	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7d6a:	movw	r0, #477	; 0x1dd
    7d6e:	bl	7208 <dbgPrint(unsigned short)>
    goto fail;
    7d72:	b.n	7996 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7d74:	orr.w	r1, r6, #64	; 0x40
    7d78:	uxtb	r1, r1
    7d7a:	b.n	7bf4 <FatFile::open(FatFile*, fname_t*, int)+0x280>

00007d7c <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    7d7c:	push	{r3, r4, r5, lr}
    7d7e:	movs	r1, #10
    7d80:	mov	r5, r0
    7d82:	ldr	r0, [pc, #40]	; (7dac <dbgPrint(unsigned short)+0x30>)
    7d84:	bl	a3fc <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7d88:	ldr	r4, [pc, #36]	; (7db0 <dbgPrint(unsigned short)+0x34>)
    7d8a:	movs	r1, #14
    7d8c:	ldr	r0, [pc, #36]	; (7db4 <dbgPrint(unsigned short)+0x38>)
    7d8e:	bl	a3fc <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7d92:	movs	r0, #46	; 0x2e
    7d94:	bl	a3d0 <usb_serial_putchar>
    7d98:	mov	r1, r5
    7d9a:	mov	r0, r4
    7d9c:	bl	b7f8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7da0:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    7da2:	ldmia.w	sp!, {r3, r4, r5, lr}
    7da6:	b.w	b728 <Print::println()>
    7daa:	nop
    7dac:	.word	0x2000035c
    7db0:	.word	0x20000c58
    7db4:	.word	0x20000450

00007db8 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    7db8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dbc:	ldrb	r4, [r0, #0]
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    7dbe:	cbz	r4, 7e28 <FatFile::getSFN(char*)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    7dc0:	ands.w	r4, r4, #96	; 0x60
    7dc4:	mov	r6, r1
    7dc6:	beq.n	7dd6 <FatFile::getSFN(char*)+0x1e>
    name[0] = '/';
    7dc8:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    7dca:	movs	r3, #0
    return true;
    7dcc:	movs	r0, #1
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    7dce:	strb	r2, [r1, #0]
    name[1] = '\0';
    7dd0:	strb	r3, [r1, #1]
    return true;
    7dd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    7dd6:	mov	r1, r4
    7dd8:	bl	5d44 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7ddc:	mov	r8, r0
    7dde:	cbz	r0, 7e34 <FatFile::getSFN(char*)+0x7c>
    7de0:	mov	r1, r4
    7de2:	subs	r0, #1
    7de4:	mov.w	lr, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7de8:	mov.w	ip, #46	; 0x2e
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    7dec:	mov	r5, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    7dee:	ldrb.w	r3, [r0, #1]!
    7df2:	cmp	r3, #32
    7df4:	beq.n	7e18 <FatFile::getSFN(char*)+0x60>
      continue;
    }
    if (i == 8) {
    7df6:	cmp	r1, #8
    7df8:	beq.n	7e40 <FatFile::getSFN(char*)+0x88>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7dfa:	sub.w	r2, r3, #65	; 0x41
      c += 'a' - 'A';
    }
    name[j++] = c;
    7dfe:	adds	r7, r5, #1
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7e00:	cmp	r2, #25
    7e02:	bhi.n	7e14 <FatFile::getSFN(char*)+0x5c>
    7e04:	ldrb.w	r2, [r8, #12]
      c += 'a' - 'A';
    7e08:	add.w	r4, r3, #32
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7e0c:	tst.w	lr, r2
      c += 'a' - 'A';
    7e10:	it	ne
    7e12:	uxtbne	r3, r4
    }
    name[j++] = c;
    7e14:	strb	r3, [r6, r5]
    7e16:	uxtb	r5, r7
    7e18:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    7e1a:	cmp	r1, #11
    7e1c:	bne.n	7dee <FatFile::getSFN(char*)+0x36>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    7e1e:	movs	r3, #0
  return true;
    7e20:	movs	r0, #1
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    7e22:	strb	r3, [r6, r5]
  return true;

fail:
  return false;
}
    7e24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    7e28:	movs	r0, #37	; 0x25
    7e2a:	bl	7d7c <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7e2e:	mov	r0, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    7e30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    DBG_FAIL_MACRO;
    7e34:	movs	r0, #48	; 0x30
    7e36:	bl	7d7c <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7e3a:	mov	r0, r8
    7e3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7e40:	adds	r2, r5, #1
    7e42:	strb.w	ip, [r6, r5]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    7e46:	mov.w	lr, #16
    7e4a:	ldrb	r3, [r0, #0]
      name[j++] = '.';
    7e4c:	uxtb	r5, r2
    7e4e:	b.n	7dfa <FatFile::getSFN(char*)+0x42>

00007e50 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7e50:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    7e52:	movs	r5, #0
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7e54:	mov	r6, r0
    7e56:	mov	r7, r1
  m_fFile = nullptr;
    7e58:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    7e5a:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    7e5c:	str	r5, [r0, #60]	; 0x3c
  if (from.m_fFile) {
    7e5e:	cbz	r4, 7e84 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7e60:	mov	r1, r0
    7e62:	movs	r0, #36	; 0x24
    7e64:	bl	80cc <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7e68:	strb	r5, [r0, #0]
    7e6a:	strb	r5, [r0, #1]
    *m_fFile = *from.m_fFile;
    7e6c:	mov	r4, r0
    7e6e:	strb	r5, [r0, #2]
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    7e70:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    7e72:	ldr	r5, [r7, #56]	; 0x38
    7e74:	ldmia	r5!, {r0, r1, r2, r3}
    7e76:	stmia	r4!, {r0, r1, r2, r3}
    7e78:	ldmia	r5!, {r0, r1, r2, r3}
    7e7a:	stmia	r4!, {r0, r1, r2, r3}
    7e7c:	ldr	r3, [r5, #0]
    7e7e:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    7e80:	mov	r0, r6
    7e82:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    7e84:	ldr	r3, [r1, #60]	; 0x3c
    7e86:	cmp	r3, #0
    7e88:	beq.n	7e80 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    7e8a:	mov	r1, r0
    7e8c:	movs	r0, #56	; 0x38
    7e8e:	bl	80cc <operator new(unsigned int, unsigned long*)>
    7e92:	strb.w	r4, [r0, #49]	; 0x31
    7e96:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    7e9a:	mov	r2, r0
    7e9c:	strb.w	r4, [r0, #51]	; 0x33
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    7ea0:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    7ea2:	ldr	r3, [r7, #60]	; 0x3c
    7ea4:	add.w	r1, r3, #48	; 0x30
    7ea8:	ldr	r7, [r3, #0]
    7eaa:	adds	r3, #16
    7eac:	ldr.w	r5, [r3, #-12]
    7eb0:	adds	r2, #16
    7eb2:	ldr.w	r4, [r3, #-8]
    7eb6:	ldr.w	r0, [r3, #-4]
    7eba:	cmp	r3, r1
    7ebc:	str.w	r7, [r2, #-16]
    7ec0:	str.w	r5, [r2, #-12]
    7ec4:	str.w	r4, [r2, #-8]
    7ec8:	str.w	r0, [r2, #-4]
    7ecc:	bne.n	7ea8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    7ece:	ldr	r3, [r3, #0]
    7ed0:	str	r3, [r2, #0]
    7ed2:	b.n	7e80 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00007ed4 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    7ed4:	push	{r4, lr}
    7ed6:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7ed8:	ldr	r0, [r0, #56]	; 0x38
    7eda:	cbz	r0, 7ee8 <FsBaseFile::close()+0x14>
    7edc:	bl	5e14 <FatFile::close()>
    7ee0:	cbz	r0, 7ee8 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    7ee2:	movs	r3, #0
    7ee4:	str	r3, [r4, #56]	; 0x38
    return true;
    7ee6:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    7ee8:	ldr	r0, [r4, #60]	; 0x3c
    7eea:	cbz	r0, 7ef8 <FsBaseFile::close()+0x24>
    7eec:	bl	3e68 <ExFatFile::close()>
    7ef0:	cbz	r0, 7ef8 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    7ef2:	movs	r3, #0
    7ef4:	str	r3, [r4, #60]	; 0x3c
    7ef6:	pop	{r4, pc}
    return true;
  }
  return false;
    7ef8:	movs	r0, #0
}
    7efa:	pop	{r4, pc}

00007efc <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7efc:	cbz	r1, 7f72 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7efe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f02:	mov	r4, r1
    7f04:	mov	r5, r0
    7f06:	mov	r8, r3
    7f08:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    7f0a:	bl	7ed4 <FsBaseFile::close()>
  if (vol->m_fVol) {
    7f0e:	ldr.w	r6, [r4, #1144]	; 0x478
    7f12:	cbz	r6, 7f40 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    7f14:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    7f16:	mov	r1, r5
    7f18:	movs	r0, #36	; 0x24
    7f1a:	bl	80cc <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7f1e:	mov	r3, r8
    7f20:	strb	r6, [r0, #0]
    7f22:	mov	r2, r7
    7f24:	strb	r6, [r0, #1]
    7f26:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    7f28:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7f2a:	ldr.w	r1, [r4, #1144]	; 0x478
    7f2e:	bl	5f90 <FatFile::open(FatVolume*, char const*, int)>
    7f32:	cbz	r0, 7f3a <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    7f34:	movs	r0, #1
    7f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    7f3a:	str	r0, [r5, #56]	; 0x38
    return false;
    7f3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    7f40:	ldr.w	r3, [r4, #1148]	; 0x47c
    7f44:	cbz	r3, 7f76 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    7f46:	mov	r1, r5
    7f48:	movs	r0, #56	; 0x38
    7f4a:	bl	80cc <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7f4e:	mov	r3, r8
    7f50:	strb.w	r6, [r0, #49]	; 0x31
    7f54:	mov	r2, r7
    7f56:	strb.w	r6, [r0, #50]	; 0x32
    7f5a:	strb.w	r6, [r0, #51]	; 0x33
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    7f5e:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7f60:	ldr.w	r1, [r4, #1148]	; 0x47c
    7f64:	bl	48fc <ExFatFile::open(ExFatVolume*, char const*, int)>
    7f68:	cmp	r0, #0
    7f6a:	bne.n	7f34 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    7f6c:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    7f6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7f72:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7f74:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7f76:	movs	r0, #0
    7f78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007f7c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7f7c:	push	{r3, r4, r5, r6, r7, lr}
    7f7e:	mov	r5, r1
    7f80:	mov	r7, r2
    7f82:	mov	r4, r0
  close();
    7f84:	bl	7ed4 <FsBaseFile::close()>
  if (dir->m_fFile) {
    7f88:	ldr	r6, [r5, #56]	; 0x38
    7f8a:	cbz	r6, 7fb0 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7f8c:	mov	r1, r4
    7f8e:	movs	r0, #36	; 0x24
    7f90:	bl	80cc <operator new(unsigned int, unsigned long*)>
    7f94:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7f96:	mov	r2, r7
    7f98:	strb	r1, [r0, #0]
    7f9a:	strb	r1, [r0, #1]
    7f9c:	strb	r1, [r0, #2]
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    7f9e:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7fa0:	ldr	r1, [r5, #56]	; 0x38
    7fa2:	bl	6454 <FatFile::openNext(FatFile*, int)>
    7fa6:	cbz	r0, 7fac <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    7fa8:	movs	r0, #1
    7faa:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    7fac:	str	r0, [r4, #56]	; 0x38
    7fae:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    7fb0:	ldr	r0, [r5, #60]	; 0x3c
    7fb2:	cbz	r0, 7fd8 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    7fb4:	mov	r1, r4
    7fb6:	movs	r0, #56	; 0x38
    7fb8:	bl	80cc <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7fbc:	mov	r2, r7
    7fbe:	strb.w	r6, [r0, #49]	; 0x31
    7fc2:	strb.w	r6, [r0, #50]	; 0x32
    7fc6:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    7fca:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7fcc:	ldr	r1, [r5, #60]	; 0x3c
    7fce:	bl	490c <ExFatFile::openNext(ExFatFile*, int)>
    7fd2:	cmp	r0, #0
    7fd4:	bne.n	7fa8 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    7fd6:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    7fd8:	pop	{r3, r4, r5, r6, r7, pc}
    7fda:	nop

00007fdc <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7fdc:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7fde:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7fe0:	mov	r5, r0
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    7fe2:	mov.w	r0, #1144	; 0x478
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
    7fe6:	str.w	r1, [r5, #1152]	; 0x480
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    7fea:	mov	r1, r5
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7fec:	str.w	r6, [r5, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    7ff0:	bl	80cc <operator new(unsigned int, unsigned long*)>
    7ff4:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    7ff6:	str	r6, [r0, #4]
    invalidate();
    7ff8:	bl	49b0 <FsCache::invalidate()>
    7ffc:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    8000:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    8004:	bl	49b0 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    8008:	strb.w	r6, [r4, #1084]	; 0x43c
    800c:	strb.w	r6, [r4, #1137]	; 0x471
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    8010:	mov	r0, r4
    8012:	strb.w	r6, [r4, #1138]	; 0x472
    8016:	movs	r2, #1
    8018:	strb.w	r6, [r4, #1139]	; 0x473
    801c:	str.w	r4, [r5, #1148]	; 0x47c
    8020:	ldr.w	r1, [r5, #1152]	; 0x480
    8024:	bl	4b0c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    8028:	cbnz	r0, 8068 <FsVolume::begin(BlockDeviceInterface*)+0x8c>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    802a:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    802c:	mov	r1, r5
    802e:	movw	r0, #1124	; 0x464
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    8032:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    8036:	bl	80cc <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    803a:	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    803c:	strb	r6, [r0, #7]
    803e:	mov	r4, r0
    8040:	strb.w	r6, [r0, #1088]	; 0x440
    8044:	strb.w	r6, [r0, #1089]	; 0x441
    8048:	strb.w	r6, [r0, #1090]	; 0x442
    804c:	str.w	r0, [r5, #1144]	; 0x478
    8050:	ldr.w	r1, [r5, #1152]	; 0x480
    8054:	bl	7090 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    8058:	cbnz	r0, 8086 <FsVolume::begin(BlockDeviceInterface*)+0xaa>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    805a:	movs	r3, #0
    805c:	ldr	r2, [pc, #64]	; (80a0 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  m_fVol = nullptr;
  return false;
    805e:	mov	r0, r3
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    8060:	str	r3, [r2, #0]
  m_fVol = nullptr;
    8062:	str.w	r3, [r5, #1144]	; 0x478
  return false;
    8066:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8068:	add.w	r6, r4, #1088	; 0x440
    806c:	mov	r0, r6
    806e:	bl	3e68 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    8072:	mov	r1, r4
    8074:	mov	r0, r6
    8076:	bl	3f3c <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    807a:	cmp	r0, #0
    807c:	beq.n	802a <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    807e:	ldr	r3, [pc, #32]	; (80a0 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  return true;
    8080:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    8082:	str	r5, [r3, #0]
  return true;
    8084:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8086:	add.w	r6, r4, #1088	; 0x440
    808a:	mov	r0, r6
    808c:	bl	5e14 <FatFile::close()>
    return m_vwd.openRoot(this);
    8090:	mov	r1, r4
    8092:	mov	r0, r6
    8094:	bl	5e34 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    8098:	cmp	r0, #0
    809a:	bne.n	807e <FsVolume::begin(BlockDeviceInterface*)+0xa2>
    809c:	b.n	805a <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    809e:	nop
    80a0:	.word	0x200060a0

000080a4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    80a4:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    80a6:	movs	r5, #0
    80a8:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    80ac:	ldr	r6, [pc, #24]	; (80c8 <FsVolume::open(char const*, int)+0x24>)
    80ae:	mov	r4, r0
    80b0:	str	r7, [r0, #8]
    80b2:	strb	r5, [r0, #4]
    80b4:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    80b6:	str	r5, [r0, #72]	; 0x48
    80b8:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    80ba:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    80be:	bl	7efc <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    80c2:	mov	r0, r4
    80c4:	pop	{r3, r4, r5, r6, r7, pc}
    80c6:	nop
    80c8:	.word	0x20000050

000080cc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    80cc:	mov	r0, r1
    80ce:	bx	lr

000080d0 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    80d0:	ldrb	r0, [r0, #23]
    80d2:	bx	lr

000080d4 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    80d4:	ldrb	r0, [r0, #25]
    80d6:	bx	lr

000080d8 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    80d8:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    80da:	ldr	r4, [r0, #0]
    80dc:	movs	r3, #1
    80de:	ldr	r4, [r4, #12]
    80e0:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    80e2:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    80e6:	bx	ip

000080e8 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    80e8:	ldrb	r0, [r0, #26]
    80ea:	bx	lr

000080ec <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    80ec:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    80ee:	ldr	r4, [r0, #0]
    80f0:	movs	r3, #1
    80f2:	ldr	r4, [r4, #28]
    80f4:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    80f6:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    80fa:	bx	ip

000080fc <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    80fc:	bx	lr
    80fe:	nop

00008100 <SdSpiCard::~SdSpiCard()>:
    8100:	push	{r4, lr}
    8102:	mov	r4, r0
    8104:	movs	r1, #28
    8106:	bl	b828 <operator delete(void*, unsigned int)>
    810a:	mov	r0, r4
    810c:	pop	{r4, pc}
    810e:	nop

00008110 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    8110:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8114:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    8116:	ldrb	r3, [r0, #20]
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    8118:	mov	r4, r0
    811a:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    811c:	cmp	r3, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    811e:	mov	r5, r2
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    8120:	beq.n	8132 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    8122:	ldr	r3, [r4, #0]
    8124:	mov	r0, r4
    8126:	ldr	r3, [r3, #20]
    8128:	blx	r3
    812a:	cbnz	r0, 8164 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    812c:	movs	r0, #0
    812e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    8132:	ldr	r3, [r0, #16]
    8134:	cmp	r3, r1
    8136:	bne.n	8122 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8138:	cbz	r7, 8154 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    813a:	movs	r6, #0
    if (!writeData(src)) {
    813c:	ldr	r3, [r4, #0]
    813e:	mov	r1, r5
    8140:	mov	r0, r4
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8142:	adds	r6, #1
    if (!writeData(src)) {
    8144:	ldr	r3, [r3, #68]	; 0x44
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8146:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    814a:	blx	r3
    814c:	cmp	r0, #0
    814e:	beq.n	812c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8150:	cmp	r7, r6
    8152:	bne.n	813c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    8154:	ldr	r3, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    8156:	ldrb	r2, [r4, #21]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    8158:	add	r7, r3
    815a:	str	r7, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    815c:	cbnz	r2, 817a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    815e:	movs	r0, #1
    8160:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    8164:	ldr	r3, [r4, #0]
    8166:	mov	r1, r6
    8168:	mov	r0, r4
    816a:	ldr	r3, [r3, #72]	; 0x48
    816c:	blx	r3
    816e:	cmp	r0, #0
    8170:	beq.n	812c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    8172:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    8174:	str	r6, [r4, #16]
    m_curState = WRITE_STATE;
    8176:	strb	r3, [r4, #20]
    8178:	b.n	8138 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    817a:	ldr	r3, [r4, #0]
    817c:	mov	r0, r4
    817e:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    8180:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    8184:	bx	r3
    8186:	nop

00008188 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    8188:	push	{r4, lr}
    818a:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    818c:	adds	r0, #4
    818e:	bl	9894 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    8192:	movs	r1, #0
    8194:	ldrb	r0, [r4, #22]
    8196:	bl	9ac8 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    819a:	movs	r3, #1
    819c:	strb	r3, [r4, #24]
    819e:	pop	{r4, pc}

000081a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    81a0:	push	{r3, r4, r5, lr}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    81a2:	adds	r5, r0, #4
    81a4:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    81a6:	movs	r1, #1
    81a8:	ldrb	r0, [r0, #22]
    81aa:	bl	9ac8 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    81ae:	movs	r1, #255	; 0xff
    81b0:	mov	r0, r5
    81b2:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    81b6:	mov	r0, r5
    81b8:	bl	99cc <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    81bc:	movs	r3, #0
    81be:	strb	r3, [r4, #24]
    81c0:	pop	{r3, r4, r5, pc}
    81c2:	nop

000081c4 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    81c4:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    81c6:	ldrb	r7, [r0, #24]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    81c8:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    81ca:	cbnz	r7, 81d0 <SdSpiCard::isBusy()+0xc>
    81cc:	bl	8188 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    81d0:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    81d2:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    81d4:	mov	r0, r5
    81d6:	bl	9a24 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    81da:	cmp	r0, #255	; 0xff
    81dc:	add.w	r3, r4, #4294967295
    81e0:	beq.n	81fe <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    81e2:	ands.w	r4, r3, #255	; 0xff
    81e6:	bne.n	81d4 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    81e8:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    81ea:	cbnz	r7, 81f0 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    81ec:	ldrb	r3, [r6, #24]
    81ee:	cbnz	r3, 81f4 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    81f0:	mov	r0, r4
    81f2:	pop	{r3, r4, r5, r6, r7, pc}
    81f4:	mov	r0, r6
    81f6:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    81fa:	mov	r0, r4
    81fc:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    81fe:	movs	r4, #0
    8200:	b.n	81ea <SdSpiCard::isBusy()+0x26>
    8202:	nop

00008204 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    8204:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8208:	ldr	r6, [pc, #104]	; (8274 <SdSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    820a:	mov	r4, r0
    820c:	mov	r8, r1
    820e:	mov	r9, r2
    8210:	ldr	r5, [r6, #0]
    8212:	adds	r7, r0, #4

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    8214:	uxth	r5, r5
    8216:	b.n	8224 <SdSpiCard::readData(unsigned char*, unsigned int)+0x20>
    8218:	ldr	r3, [r6, #0]
    821a:	uxth	r3, r3
    821c:	subs	r3, r3, r5
    821e:	cmp.w	r3, #300	; 0x12c
    8222:	bgt.n	8248 <SdSpiCard::readData(unsigned char*, unsigned int)+0x44>
    8224:	mov	r0, r7
    8226:	bl	9a24 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    822a:	cmp	r0, #255	; 0xff
    822c:	strb	r0, [r4, #25]
    822e:	beq.n	8218 <SdSpiCard::readData(unsigned char*, unsigned int)+0x14>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    8230:	cmp	r0, #254	; 0xfe
    8232:	beq.n	824e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8234:	movs	r3, #24
    8236:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8238:	ldrb	r0, [r4, #24]
    823a:	cbz	r0, 8244 <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
    823c:	mov	r0, r4
    823e:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    8242:	movs	r0, #0
}
    8244:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8248:	movs	r3, #29
    824a:	strb	r3, [r4, #23]
    824c:	b.n	8238 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    824e:	mov	r2, r9
    8250:	mov	r1, r8
    8252:	mov	r0, r7
    8254:	bl	9a3c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    8258:	strb	r0, [r4, #25]
    825a:	cbz	r0, 8262 <SdSpiCard::readData(unsigned char*, unsigned int)+0x5e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    825c:	movs	r3, #36	; 0x24
    825e:	strb	r3, [r4, #23]
    8260:	b.n	8238 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8262:	mov	r0, r7
    8264:	bl	9a24 <SdSpiArduinoDriver::receive()>
    8268:	mov	r0, r7
    826a:	bl	9a24 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    826e:	movs	r0, #1
    8270:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8274:	.word	0x20006dc4

00008278 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    8278:	push	{r3, r4, r5, r6, r7, lr}
    827a:	ldr	r5, [pc, #40]	; (82a4 <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    827c:	mov	r7, r1
    827e:	adds	r6, r0, #4
    8280:	ldr	r4, [r5, #0]
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    8282:	uxth	r4, r4
    8284:	b.n	8290 <SdSpiCard::waitNotBusy(unsigned short)+0x18>
    8286:	ldr	r3, [r5, #0]
    8288:	uxth	r3, r3
    828a:	subs	r3, r3, r4
    828c:	cmp	r3, r7
    828e:	bgt.n	829e <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    8290:	mov	r0, r6
    8292:	bl	9a24 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    8296:	cmp	r0, #255	; 0xff
    8298:	bne.n	8286 <SdSpiCard::waitNotBusy(unsigned short)+0xe>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    829a:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    829c:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    829e:	movs	r0, #0
    82a0:	pop	{r3, r4, r5, r6, r7, pc}
    82a2:	nop
    82a4:	.word	0x20006dc4

000082a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    82a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    82ac:	ldrb	r3, [r0, #24]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    82ae:	sub	sp, #8
    82b0:	mov	r6, r0
    82b2:	mov	r8, r1
    82b4:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    82b6:	cbnz	r3, 82bc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    82b8:	bl	8188 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    82bc:	cmp.w	r8, #0
    82c0:	bne.n	831c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    82c2:	adds	r5, r6, #4
    82c4:	orr.w	r1, r8, #64	; 0x40
    82c8:	add	r7, sp, #4
    82ca:	add	r4, sp, #8
    82cc:	mov	r0, r5
    82ce:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
    82d2:	ldrb.w	r1, [r4, #-1]!
    82d6:	mov	r0, r5
    82d8:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    82dc:	cmp	r4, r7
    82de:	bne.n	82d2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    82e0:	cmp.w	r8, #0
    82e4:	mov	r0, r5
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    82e6:	mov.w	r4, #0
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    82ea:	ite	eq
    82ec:	moveq	r1, #149	; 0x95
    82ee:	movne	r1, #135	; 0x87
    82f0:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    82f4:	mov	r0, r5
    82f6:	bl	9a24 <SdSpiArduinoDriver::receive()>
    82fa:	mov	r0, r5
    82fc:	bl	9a24 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    8300:	strb	r0, [r6, #25]
    8302:	uxtb	r3, r4
    8304:	adds	r4, #1
    8306:	lsrs	r2, r0, #7
    8308:	cmp	r3, #9
    830a:	ite	hi
    830c:	movhi	r3, #0
    830e:	andls.w	r3, r2, #1
    8312:	cmp	r3, #0
    8314:	bne.n	82fa <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
  }
  return m_status;
}
    8316:	add	sp, #8
    8318:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    831c:	mov.w	r1, #300	; 0x12c
    8320:	mov	r0, r6
    8322:	bl	8278 <SdSpiCard::waitNotBusy(unsigned short)>
    8326:	b.n	82c2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00008328 <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    8328:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    832c:	sub	sp, #36	; 0x24
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    832e:	mov.w	sl, #0
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    8332:	mov	r6, r0
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    8334:	adds	r4, r0, #4
    8336:	add	r7, sp, #4
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    8338:	strb.w	sl, [r0, #23]
  m_type = 0;
    833c:	strb.w	sl, [r0, #26]
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    8340:	movs	r5, #10
    8342:	ldr.w	r9, [pc, #428]	; 84f0 <SdSpiCard::begin(SdSpiConfig)+0x1c8>
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    8346:	stmia.w	r7, {r1, r2, r3}
    834a:	ldrb.w	r0, [sp, #4]
    834e:	ldr	r3, [sp, #8]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    8350:	strb	r0, [r6, #22]
    8352:	str	r3, [sp, #0]
    8354:	ldrb.w	r8, [sp, #5]
    8358:	ldr.w	fp, [r9]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    835c:	bl	9ac0 <sdCsInit(unsigned char)>
    8360:	ldrb	r0, [r6, #22]
    8362:	movs	r1, #1
    8364:	bl	9ac8 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    8368:	ldr	r1, [pc, #380]	; (84e8 <SdSpiCard::begin(SdSpiConfig)+0x1c0>)
    836a:	movs	r2, #7
    836c:	add	r3, sp, #20
    836e:	str	r1, [r6, #8]
    8370:	str	r2, [r6, #12]
    8372:	ldmia.w	r7, {r0, r1, r2}
    8376:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    837a:	mov	r0, r4
    837c:	ldmia	r3, {r1, r2, r3}
    837e:	bl	9998 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    8382:	mvn.w	r3, r8
    8386:	mov	r0, r6
  m_spiActive = false;
    8388:	strb.w	sl, [r6, #24]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    838c:	ubfx	r3, r3, #7, #1
  m_spiActive = false;
  m_curState = IDLE_STATE;
    8390:	strb.w	sl, [r6, #20]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    8394:	strb	r3, [r6, #21]
    8396:	bl	8188 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    839a:	ldrb	r0, [r6, #22]
    839c:	movs	r1, #1
    839e:	bl	9ac8 <sdCsWrite(unsigned char, bool)>
    83a2:	subs	r5, #1
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    83a4:	movs	r1, #255	; 0xff
    83a6:	mov	r0, r4
    83a8:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>

  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    83ac:	ands.w	r5, r5, #255	; 0xff
    83b0:	bne.n	83a2 <SdSpiCard::begin(SdSpiConfig)+0x7a>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    83b2:	mov	r1, r5
    83b4:	ldrb	r0, [r6, #22]
    83b6:	movs	r7, #10
    83b8:	bl	9ac8 <sdCsWrite(unsigned char, bool)>
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    83bc:	movs	r2, #0
    83be:	mov	r0, r6
    83c0:	mov	r1, r2
    83c2:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    83c6:	cmp	r0, #1
    83c8:	mov	r5, r0
    83ca:	beq.n	8402 <SdSpiCard::begin(SdSpiConfig)+0xda>
    83cc:	subs	r3, r7, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
    83ce:	ands.w	r7, r3, #255	; 0xff
    83d2:	beq.n	83ec <SdSpiCard::begin(SdSpiConfig)+0xc4>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    83d4:	movs	r1, #253	; 0xfd
    83d6:	mov	r0, r4
    83d8:	mov.w	r5, #520	; 0x208
    83dc:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    83e0:	mov	r0, r4
    83e2:	bl	9a24 <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    83e6:	subs	r5, #1
    83e8:	bne.n	83e0 <SdSpiCard::begin(SdSpiConfig)+0xb8>
    83ea:	b.n	83bc <SdSpiCard::begin(SdSpiConfig)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    83ec:	movs	r3, #1
    83ee:	strb	r3, [r6, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    83f0:	ldrb	r0, [r6, #24]
    83f2:	cbz	r0, 83fc <SdSpiCard::begin(SdSpiConfig)+0xd4>
    83f4:	mov	r0, r6
    83f6:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

fail:
  spiStop();
  return false;
    83fa:	movs	r0, #0
}
    83fc:	add	sp, #36	; 0x24
    83fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    8402:	mov.w	r2, #426	; 0x1aa
    8406:	movs	r1, #8
    8408:	mov	r0, r6
    840a:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    840e:	lsls	r3, r0, #29
    8410:	bmi.n	8432 <SdSpiCard::begin(SdSpiConfig)+0x10a>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    8412:	movs	r3, #2
    8414:	movs	r5, #4
    8416:	strb	r3, [r6, #26]
    8418:	subs	r5, #1
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    841a:	mov	r0, r4
    841c:	bl	9a24 <SdSpiArduinoDriver::receive()>
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
    8420:	strb	r0, [r6, #25]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    8422:	ands.w	r5, r5, #255	; 0xff
    8426:	bne.n	8418 <SdSpiCard::begin(SdSpiConfig)+0xf0>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    8428:	cmp	r0, #170	; 0xaa
    842a:	beq.n	8434 <SdSpiCard::begin(SdSpiConfig)+0x10c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    842c:	movs	r3, #6
    842e:	strb	r3, [r6, #23]
    8430:	b.n	83f0 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    8432:	strb	r5, [r6, #26]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    8434:	ldr	r3, [r6, #0]
    8436:	ldr	r7, [pc, #180]	; (84ec <SdSpiCard::begin(SdSpiConfig)+0x1c4>)
    8438:	ldr	r3, [r3, #64]	; 0x40
    843a:	cmp	r3, r7
    843c:	bne.n	849e <SdSpiCard::begin(SdSpiConfig)+0x176>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    843e:	ldrb	r0, [r6, #26]
    8440:	cmp	r0, #2
    8442:	ite	eq
    8444:	moveq.w	r5, #1073741824	; 0x40000000
    8448:	movne	r5, #0
    844a:	b.n	845a <SdSpiCard::begin(SdSpiConfig)+0x132>
    844c:	ldr.w	r3, [r9]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    8450:	uxth	r3, r3
    8452:	subs	r3, r3, r2
    8454:	cmp.w	r3, #2000	; 0x7d0
    8458:	bgt.n	84a4 <SdSpiCard::begin(SdSpiConfig)+0x17c>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    845a:	movs	r2, #0
    845c:	movs	r1, #55	; 0x37
    845e:	mov	r0, r6
    8460:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    8464:	mov	r2, r5
    8466:	movs	r1, #41	; 0x29
    8468:	mov	r0, r6
    846a:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    846e:	uxth.w	r2, fp
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    8472:	cmp	r0, #0
    8474:	bne.n	844c <SdSpiCard::begin(SdSpiConfig)+0x124>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    8476:	ldr	r3, [r6, #0]
    8478:	ldr	r3, [r3, #64]	; 0x40
    847a:	cmp	r3, r7
    847c:	bne.n	84aa <SdSpiCard::begin(SdSpiConfig)+0x182>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    847e:	ldrb	r0, [r6, #26]
    8480:	cmp	r0, #2
    8482:	beq.n	84b0 <SdSpiCard::begin(SdSpiConfig)+0x188>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8484:	ldrb	r3, [r6, #24]
    8486:	cbz	r3, 848e <SdSpiCard::begin(SdSpiConfig)+0x166>
    8488:	mov	r0, r6
    848a:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    848e:	movs	r3, #7
    8490:	ldr	r2, [sp, #0]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    8492:	movs	r0, #1
    8494:	str	r2, [r6, #8]
    8496:	str	r3, [r6, #12]

fail:
  spiStop();
  return false;
}
    8498:	add	sp, #36	; 0x24
    849a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    849e:	mov	r0, r6
    84a0:	blx	r3
    84a2:	b.n	8440 <SdSpiCard::begin(SdSpiConfig)+0x118>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    84a4:	movs	r3, #23
    84a6:	strb	r3, [r6, #23]
    84a8:	b.n	83f0 <SdSpiCard::begin(SdSpiConfig)+0xc8>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    84aa:	mov	r0, r6
    84ac:	blx	r3
    84ae:	b.n	8480 <SdSpiCard::begin(SdSpiConfig)+0x158>
    if (cardCommand(CMD58, 0)) {
    84b0:	movs	r2, #0
    84b2:	movs	r1, #58	; 0x3a
    84b4:	mov	r0, r6
    84b6:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    84ba:	cbz	r0, 84c2 <SdSpiCard::begin(SdSpiConfig)+0x19a>
    84bc:	movs	r3, #18
    84be:	strb	r3, [r6, #23]
    84c0:	b.n	83f0 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    84c2:	mov	r0, r4
    84c4:	bl	9a24 <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    84c8:	and.w	r0, r0, #192	; 0xc0
    84cc:	cmp	r0, #192	; 0xc0
    84ce:	bne.n	84d4 <SdSpiCard::begin(SdSpiConfig)+0x1ac>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    84d0:	movs	r3, #3
    84d2:	strb	r3, [r6, #26]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    84d4:	mov	r0, r4
    84d6:	bl	9a24 <SdSpiArduinoDriver::receive()>
    84da:	mov	r0, r4
    84dc:	bl	9a24 <SdSpiArduinoDriver::receive()>
    84e0:	mov	r0, r4
    84e2:	bl	9a24 <SdSpiArduinoDriver::receive()>
    84e6:	b.n	8484 <SdSpiCard::begin(SdSpiConfig)+0x15c>
    84e8:	.word	0x00061a80
    84ec:	.word	0x000080e9
    84f0:	.word	0x20006dc4

000084f4 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    84f4:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    84f6:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    84f8:	mov	r5, r0
    84fa:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    84fc:	ldr	r3, [r3, #20]
    84fe:	blx	r3
  if (cardCommand(CMD58, 0)) {
    8500:	mov	r0, r5
    8502:	movs	r2, #0
    8504:	movs	r1, #58	; 0x3a
    8506:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    850a:	cbnz	r0, 8528 <SdSpiCard::readOCR(unsigned long*)+0x34>
    850c:	adds	r7, r5, #4
    850e:	adds	r4, r6, #4
    8510:	mov	r0, r7
    8512:	bl	9a24 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    8516:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    851a:	cmp	r6, r4
    851c:	bne.n	8510 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    851e:	ldrb	r4, [r5, #24]
    8520:	cbnz	r4, 853e <SdSpiCard::readOCR(unsigned long*)+0x4a>
    8522:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    8524:	mov	r0, r4
    8526:	pop	{r3, r4, r5, r6, r7, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8528:	movs	r3, #18
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    852a:	ldrb	r4, [r5, #24]
    852c:	strb	r3, [r5, #23]
    852e:	cmp	r4, #0
    8530:	beq.n	8524 <SdSpiCard::readOCR(unsigned long*)+0x30>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    8532:	movs	r4, #0
    8534:	mov	r0, r5
    8536:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    853a:	mov	r0, r4
    853c:	pop	{r3, r4, r5, r6, r7, pc}
    853e:	mov	r0, r5
    8540:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8544:	mov	r0, r4
    8546:	pop	{r3, r4, r5, r6, r7, pc}

00008548 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8548:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    854a:	push	{r4, r5, r6, lr}
    854c:	mov	r4, r0
    854e:	mov	r5, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8550:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    8552:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8554:	blx	r3
  if (cardCommand(cmd, 0)) {
    8556:	mov	r1, r5
    8558:	mov	r0, r4
    855a:	movs	r2, #0
    855c:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8560:	cbz	r0, 8574 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    8562:	movs	r3, #27
    8564:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8566:	ldrb	r0, [r4, #24]
    8568:	cbz	r0, 8572 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    856a:	mov	r0, r4
    856c:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    8570:	movs	r0, #0
}
    8572:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    8574:	mov	r1, r6
    8576:	movs	r2, #16
    8578:	mov	r0, r4
    857a:	bl	8204 <SdSpiCard::readData(unsigned char*, unsigned int)>
    857e:	cmp	r0, #0
    8580:	beq.n	8566 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8582:	ldrb	r5, [r4, #24]
    8584:	cmp	r5, #0
    8586:	beq.n	8572 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    8588:	mov	r0, r4
    858a:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    858e:	mov	r0, r5
    8590:	pop	{r4, r5, r6, pc}
    8592:	nop

00008594 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    8594:	mov	r2, r1
    8596:	movs	r1, #9
    8598:	b.w	8548 <SdSpiCard::readRegister(unsigned char, void*)>

0000859c <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    859c:	mov	r2, r1
    859e:	movs	r1, #10
    85a0:	b.w	8548 <SdSpiCard::readRegister(unsigned char, void*)>

000085a4 <SdSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    85a4:	ldr	r3, [r0, #0]
    85a6:	ldr	r2, [pc, #144]	; (8638 <SdSpiCard::sectorCount()+0x94>)
    85a8:	ldr	r3, [r3, #52]	; 0x34
    85aa:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    85ac:	push	{r4, r5, lr}
    85ae:	sub	sp, #20
    85b0:	bne.n	8612 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    85b2:	mov	r2, sp
    85b4:	movs	r1, #9
    85b6:	bl	8548 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    85ba:	cbz	r0, 85cc <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    85bc:	ldrb.w	r3, [sp]
    85c0:	ands.w	r3, r3, #192	; 0xc0
    85c4:	beq.n	85d0 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    85c6:	cmp	r3, #64	; 0x40
    85c8:	beq.n	8618 <SdSpiCard::sectorCount()+0x74>
    85ca:	movs	r0, #0
}
    85cc:	add	sp, #20
    85ce:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    85d0:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    85d4:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85d8:	ldrb.w	r2, [sp, #7]
    85dc:	and.w	r4, r4, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    85e0:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85e4:	and.w	r3, r3, #3
    85e8:	lsls	r4, r4, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    85ea:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85ee:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    85f0:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    85f4:	orr.w	r0, r4, r0, lsr #7
    85f8:	and.w	r1, r1, #15
    85fc:	orr.w	r3, r2, r3, lsl #10
    8600:	add	r0, r1
    8602:	orr.w	r3, r3, r5, lsr #6
    8606:	subs	r0, #7
    8608:	adds	r3, #1
    860a:	lsl.w	r0, r3, r0
    860e:	add	sp, #20
    8610:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8612:	mov	r1, sp
    8614:	blx	r3
    8616:	b.n	85ba <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8618:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    861c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8620:	adds	r2, r3, #1
    8622:	ldrb.w	r0, [sp, #8]
    8626:	and.w	r3, r1, #63	; 0x3f
    862a:	add.w	r3, r2, r3, lsl #16
    862e:	add.w	r0, r3, r0, lsl #8
    8632:	lsls	r0, r0, #10
}
    8634:	add	sp, #20
    8636:	pop	{r4, r5, pc}
    8638:	.word	0x00008595

0000863c <SdSpiCard::readStart(unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    863c:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    863e:	mov	r2, r1
    8640:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8642:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    8644:	sub	sp, #12
    8646:	ldr	r5, [pc, #64]	; (8688 <SdSpiCard::readStart(unsigned long)+0x4c>)
    8648:	mov	r4, r0
    864a:	cmp	r3, r5
    864c:	bne.n	8680 <SdSpiCard::readStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    864e:	ldrb	r0, [r0, #26]
  if (type() != SD_CARD_TYPE_SDHC) {
    8650:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    8652:	mov.w	r1, #18
    8656:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    8658:	it	ne
    865a:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    865c:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8660:	cbz	r0, 867a <SdSpiCard::readStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8662:	movs	r3, #12
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8664:	ldrb	r0, [r4, #24]
    8666:	strb	r3, [r4, #23]
    8668:	cbnz	r0, 866e <SdSpiCard::readStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    866a:	add	sp, #12
    866c:	pop	{r4, r5, pc}
    866e:	mov	r0, r4
    8670:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8674:	movs	r0, #0
    8676:	add	sp, #12
    8678:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    867a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    867c:	add	sp, #12
    867e:	pop	{r4, r5, pc}
    8680:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    8682:	blx	r3
    8684:	ldr	r2, [sp, #4]
    8686:	b.n	8650 <SdSpiCard::readStart(unsigned long)+0x14>
    8688:	.word	0x000080e9

0000868c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    868c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8690:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    8692:	ldrb	r3, [r0, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8694:	mov	r6, r0
    8696:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    8698:	cmp	r3, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    869a:	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    869c:	beq.n	86ae <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    869e:	ldr	r3, [r6, #0]
    86a0:	mov	r0, r6
    86a2:	ldr	r3, [r3, #20]
    86a4:	blx	r3
    86a6:	cbnz	r0, 86e0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x54>
      return false;
    86a8:	movs	r0, #0
    86aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    86ae:	ldr	r3, [r0, #16]
    86b0:	cmp	r3, r1
    86b2:	bne.n	869e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    86b4:	cbz	r7, 86d0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    86b6:	movs	r5, #0
    if (!readData(dst, 512)) {
    86b8:	mov.w	r2, #512	; 0x200
    86bc:	mov	r1, r4
    86be:	mov	r0, r6
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    86c0:	adds	r5, #1
    86c2:	add	r4, r2
    if (!readData(dst, 512)) {
    86c4:	bl	8204 <SdSpiCard::readData(unsigned char*, unsigned int)>
    86c8:	cmp	r0, #0
    86ca:	beq.n	86a8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    86cc:	cmp	r7, r5
    86ce:	bne.n	86b8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    86d0:	ldr	r3, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    86d2:	ldrb	r2, [r6, #21]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    86d4:	add	r7, r3
    86d6:	str	r7, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    86d8:	cbnz	r2, 86f4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
    86da:	movs	r0, #1
    86dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    86e0:	mov	r1, r5
    86e2:	mov	r0, r6
    86e4:	bl	863c <SdSpiCard::readStart(unsigned long)>
    86e8:	cmp	r0, #0
    86ea:	beq.n	86a8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    86ec:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    86ee:	str	r5, [r6, #16]
    m_curState = READ_STATE;
    86f0:	strb	r3, [r6, #20]
    86f2:	b.n	86b4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    86f4:	ldr	r3, [r6, #0]
    86f6:	mov	r0, r6
    86f8:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    86fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    86fe:	bx	r3

00008700 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    8700:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    8702:	movs	r2, #0
    8704:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    8706:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8708:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    870c:	cbz	r0, 871a <SdSpiCard::readStop()+0x1a>
    870e:	movs	r3, #9
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8710:	ldrb	r4, [r5, #24]
    8712:	strb	r3, [r5, #23]
    8714:	cbnz	r4, 872e <SdSpiCard::readStop()+0x2e>
  return true;

fail:
  spiStop();
  return false;
}
    8716:	mov	r0, r4
    8718:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    871a:	ldrb	r4, [r5, #24]
    871c:	cbnz	r4, 8724 <SdSpiCard::readStop()+0x24>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    871e:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    8720:	mov	r0, r4
    8722:	pop	{r3, r4, r5, pc}
    8724:	mov	r0, r5
    8726:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    872a:	mov	r0, r4
    872c:	pop	{r3, r4, r5, pc}
    872e:	movs	r4, #0
    8730:	mov	r0, r5
    8732:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8736:	mov	r0, r4
    8738:	pop	{r3, r4, r5, pc}
    873a:	nop

0000873c <SdSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    873c:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    873e:	mov	r2, r1
    8740:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8742:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    8744:	sub	sp, #12
    8746:	ldr	r5, [pc, #64]	; (8788 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    8748:	mov	r4, r0
    874a:	cmp	r3, r5
    874c:	bne.n	8780 <SdSpiCard::writeStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    874e:	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8750:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    8752:	mov.w	r1, #25
    8756:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    8758:	it	ne
    875a:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    875c:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8760:	cbz	r0, 877a <SdSpiCard::writeStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8762:	movs	r3, #14
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8764:	ldrb	r0, [r4, #24]
    8766:	strb	r3, [r4, #23]
    8768:	cbnz	r0, 876e <SdSpiCard::writeStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    876a:	add	sp, #12
    876c:	pop	{r4, r5, pc}
    876e:	mov	r0, r4
    8770:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8774:	movs	r0, #0
    8776:	add	sp, #12
    8778:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    877a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    877c:	add	sp, #12
    877e:	pop	{r4, r5, pc}
    8780:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8782:	blx	r3
    8784:	ldr	r2, [sp, #4]
    8786:	b.n	8750 <SdSpiCard::writeStart(unsigned long)+0x14>
    8788:	.word	0x000080e9

0000878c <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    878c:	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    878e:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    8790:	ldr	r3, [r3, #52]	; 0x34
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8792:	sub	sp, #20
    8794:	ldr	r7, [pc, #164]	; (883c <SdSpiCard::erase(unsigned long, unsigned long)+0xb0>)
    8796:	mov	r4, r0
    8798:	mov	r5, r1
    879a:	mov	r6, r2
    879c:	cmp	r3, r7
    879e:	bne.n	87f8 <SdSpiCard::erase(unsigned long, unsigned long)+0x6c>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    87a0:	mov	r2, sp
    87a2:	movs	r1, #9
    87a4:	bl	8548 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    87a8:	cbz	r0, 87cc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    87aa:	ldrb.w	r3, [sp, #10]
    87ae:	lsls	r2, r3, #25
    87b0:	bpl.n	87dc <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    87b2:	ldrb	r3, [r4, #26]
    87b4:	cmp	r3, #3
    87b6:	beq.n	87bc <SdSpiCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    87b8:	lsls	r5, r5, #9
    lastSector <<= 9;
    87ba:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    87bc:	mov	r2, r5
    87be:	movs	r1, #32
    87c0:	mov	r0, r4
    87c2:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    87c6:	cbz	r0, 87fe <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    87c8:	movs	r3, #37	; 0x25
    87ca:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    87cc:	ldrb	r0, [r4, #24]
    87ce:	cbz	r0, 87d8 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    87d0:	mov	r0, r4
    87d2:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    87d6:	movs	r0, #0
}
    87d8:	add	sp, #20
    87da:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    87dc:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    87e0:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    87e4:	adds	r2, r6, #1
    87e6:	lsls	r3, r3, #1
    87e8:	orrs	r2, r5
    87ea:	orr.w	r3, r3, r1, lsr #7
    87ee:	tst	r3, r2
    87f0:	beq.n	87b2 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    87f2:	movs	r3, #38	; 0x26
    87f4:	strb	r3, [r4, #23]
    87f6:	b.n	87cc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    87f8:	mov	r1, sp
    87fa:	blx	r3
    87fc:	b.n	87a8 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    87fe:	mov	r2, r6
    8800:	movs	r1, #33	; 0x21
    8802:	mov	r0, r4
    8804:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8808:	cmp	r0, #0
    880a:	bne.n	87c8 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
      || cardCommand(CMD38, 0)) {
    880c:	mov	r2, r0
    880e:	movs	r1, #38	; 0x26
    8810:	mov	r0, r4
    8812:	bl	82a8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8816:	cmp	r0, #0
    8818:	bne.n	87c8 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    881a:	movw	r1, #10000	; 0x2710
    881e:	mov	r0, r4
    8820:	bl	8278 <SdSpiCard::waitNotBusy(unsigned short)>
    8824:	cbnz	r0, 882c <SdSpiCard::erase(unsigned long, unsigned long)+0xa0>
    8826:	movs	r3, #39	; 0x27
    8828:	strb	r3, [r4, #23]
    882a:	b.n	87cc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    882c:	ldrb	r5, [r4, #24]
    882e:	cmp	r5, #0
    8830:	beq.n	87d8 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    8832:	mov	r0, r4
    8834:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    8838:	mov	r0, r5
    883a:	b.n	87d8 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    883c:	.word	0x00008595

00008840 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8840:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8842:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8846:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8848:	bl	8278 <SdSpiCard::waitNotBusy(unsigned short)>
    884c:	mov	r6, r0
    884e:	cbnz	r0, 8868 <SdSpiCard::writeStop()+0x28>
    8850:	movs	r3, #30
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8852:	ldrb	r4, [r5, #24]
    8854:	strb	r3, [r5, #23]
    8856:	cbnz	r4, 885c <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8858:	mov	r0, r4
    885a:	pop	{r4, r5, r6, pc}
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    885c:	mov	r4, r6
    885e:	mov	r0, r5
    8860:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    8864:	mov	r0, r4
    8866:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8868:	movs	r1, #253	; 0xfd
    886a:	adds	r0, r5, #4
    886c:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8870:	ldrb	r4, [r5, #24]
    8872:	cbnz	r4, 887a <SdSpiCard::writeStop()+0x3a>
    8874:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8876:	mov	r0, r4
    8878:	pop	{r4, r5, r6, pc}
    887a:	mov	r0, r5
    887c:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    8880:	b.n	8858 <SdSpiCard::writeStop()+0x18>
    8882:	nop

00008884 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8884:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    8886:	ldrb	r3, [r0, #20]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8888:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    888a:	cmp	r3, #1
    888c:	beq.n	889a <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    888e:	cmp	r3, #2
    8890:	beq.n	88a6 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    8892:	movs	r3, #0
#endif  // ENABLE_DEDICATED_SPI
  return true;
    8894:	movs	r0, #1
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    8896:	strb	r3, [r4, #20]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    8898:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    889a:	bl	8700 <SdSpiCard::readStop()>
    889e:	cmp	r0, #0
    88a0:	bne.n	8892 <SdSpiCard::syncDevice()+0xe>
      return false;
    88a2:	movs	r0, #0
    88a4:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    88a6:	bl	8840 <SdSpiCard::writeStop()>
    88aa:	cmp	r0, #0
    88ac:	bne.n	8892 <SdSpiCard::syncDevice()+0xe>
    88ae:	b.n	88a2 <SdSpiCard::syncDevice()+0x1e>

000088b0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    88b0:	push	{r4, r5, r6, lr}
    88b2:	adds	r4, r0, #4
    88b4:	mov	r6, r2
    88b6:	mov	r5, r0
    88b8:	mov	r0, r4
    88ba:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    88be:	mov.w	r2, #512	; 0x200
    88c2:	mov	r1, r6
    88c4:	mov	r0, r4
    88c6:	bl	9a70 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    88ca:	mov	r0, r4
    88cc:	movs	r1, #255	; 0xff
    88ce:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
    88d2:	mov	r0, r4
    88d4:	movs	r1, #255	; 0xff
    88d6:	bl	9a5c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    88da:	mov	r0, r4
    88dc:	bl	9a24 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    88e0:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    88e4:	strb	r0, [r5, #25]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    88e6:	cmp	r3, #5
    88e8:	beq.n	88fe <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    88ea:	movs	r3, #31
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    88ec:	ldrb	r0, [r5, #24]
    88ee:	strb	r3, [r5, #23]
    88f0:	cbnz	r0, 88f4 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    88f2:	pop	{r4, r5, r6, pc}
    88f4:	mov	r0, r5
    88f6:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    88fa:	movs	r0, #0
    88fc:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    88fe:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    8900:	pop	{r4, r5, r6, pc}
    8902:	nop

00008904 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    8904:	push	{r3, r4, r5, lr}
    8906:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8908:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    890c:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    890e:	bl	8278 <SdSpiCard::waitNotBusy(unsigned short)>
    8912:	cbnz	r0, 8926 <SdSpiCard::writeData(unsigned char const*)+0x22>
    8914:	movs	r3, #35	; 0x23
    8916:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8918:	ldrb	r0, [r4, #24]
    891a:	cbz	r0, 8924 <SdSpiCard::writeData(unsigned char const*)+0x20>
    891c:	mov	r0, r4
    891e:	bl	81a0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    8922:	movs	r0, #0
}
    8924:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8926:	mov	r2, r5
    8928:	movs	r1, #252	; 0xfc
    892a:	mov	r0, r4
    892c:	bl	88b0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    8930:	cmp	r0, #0
    8932:	beq.n	8918 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    8934:	pop	{r3, r4, r5, pc}
    8936:	nop

00008938 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8938:	ldr	r3, [pc, #32]	; (895c <sdIrs()+0x24>)
    893a:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    893c:	ldr	r2, [pc, #32]	; (8960 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    893e:	ldr	r0, [pc, #36]	; (8964 <sdIrs()+0x2c>)
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    8940:	push	{r4}
  SDHC_IRQSIGEN = 0;
    8942:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8944:	ldr	r4, [r3, #48]	; 0x30
    8946:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8948:	ldr	r2, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    894a:	ldr.w	r4, [sp], #4
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
    894e:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8950:	ldr	r2, [r3, #72]	; 0x48
    8952:	bic.w	r2, r2, #129	; 0x81
    8956:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    8958:	strb	r1, [r0, #0]
}
    895a:	bx	lr
    895c:	.word	0x402c0000
    8960:	.word	0x200060c8
    8964:	.word	0x200060e0

00008968 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8968:	ldr	r3, [pc, #12]	; (8978 <isBusyCommandComplete()+0x10>)
    896a:	ldr	r0, [pc, #16]	; (897c <isBusyCommandComplete()+0x14>)
    896c:	ldr	r3, [r3, #48]	; 0x30
    896e:	ands	r0, r3
}
    8970:	clz	r0, r0
    8974:	lsrs	r0, r0, #5
    8976:	bx	lr
    8978:	.word	0x402c0000
    897c:	.word	0x000f0001

00008980 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8980:	ldr	r3, [pc, #8]	; (898c <isBusyCommandInhibit()+0xc>)
    8982:	ldr	r0, [r3, #36]	; 0x24
}
    8984:	and.w	r0, r0, #1
    8988:	bx	lr
    898a:	nop
    898c:	.word	0x402c0000

00008990 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8990:	ldr	r3, [pc, #4]	; (8998 <isBusyDMA()+0x8>)
    8992:	ldrb	r0, [r3, #0]
}
    8994:	bx	lr
    8996:	nop
    8998:	.word	0x200060e0

0000899c <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    899c:	ldr	r3, [pc, #12]	; (89ac <isBusyFifoRead()+0x10>)
    899e:	ldr	r0, [r3, #36]	; 0x24
    89a0:	eor.w	r0, r0, #2048	; 0x800
}
    89a4:	ubfx	r0, r0, #11, #1
    89a8:	bx	lr
    89aa:	nop
    89ac:	.word	0x402c0000

000089b0 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    89b0:	ldr	r3, [pc, #12]	; (89c0 <isBusyFifoWrite()+0x10>)
    89b2:	ldr	r0, [r3, #36]	; 0x24
    89b4:	eor.w	r0, r0, #1024	; 0x400
}
    89b8:	ubfx	r0, r0, #10, #1
    89bc:	bx	lr
    89be:	nop
    89c0:	.word	0x402c0000

000089c4 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    89c4:	ldr	r3, [pc, #12]	; (89d4 <isBusyTransferComplete()+0x10>)
    89c6:	ldr	r0, [pc, #16]	; (89d8 <isBusyTransferComplete()+0x14>)
    89c8:	ldr	r3, [r3, #48]	; 0x30
    89ca:	ands	r0, r3
}
    89cc:	clz	r0, r0
    89d0:	lsrs	r0, r0, #5
    89d2:	bx	lr
    89d4:	.word	0x402c0000
    89d8:	.word	0x117f0002

000089dc <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    89dc:	mov.w	r2, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    89e0:	ldr	r3, [pc, #172]	; (8a90 <setSdclk(unsigned long)+0xb4>)
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    89e2:	ldr	r1, [pc, #176]	; (8a94 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    89e4:	mul.w	r0, r2, r0
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    89e8:	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    89ea:	ldr.w	r2, [r3, #256]	; 0x100
    89ee:	ldr	r3, [pc, #168]	; (8a98 <setSdclk(unsigned long)+0xbc>)
    89f0:	ubfx	r1, r1, #11, #3
    89f4:	and.w	r2, r2, #63	; 0x3f
    89f8:	adds	r1, #1
    89fa:	umull	r2, r3, r3, r2
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    89fe:	push	{r4, r5, r6, r7}
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8a00:	lsrs	r3, r3, #2
    8a02:	ldr	r5, [pc, #152]	; (8a9c <setSdclk(unsigned long)+0xc0>)
    8a04:	udiv	r5, r5, r3
    8a08:	udiv	r5, r5, r1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8a0c:	cmp.w	r0, r5, lsr #4
    8a10:	bcs.n	8a84 <setSdclk(unsigned long)+0xa8>
    8a12:	movs	r2, #1
    8a14:	b.n	8a1a <setSdclk(unsigned long)+0x3e>
    8a16:	cmp	r2, #255	; 0xff
    8a18:	bhi.n	8a26 <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    8a1a:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8a1c:	lsls	r3, r2, #4
    8a1e:	udiv	r3, r5, r3
    8a22:	cmp	r0, r3
    8a24:	bcc.n	8a16 <setSdclk(unsigned long)+0x3a>
    8a26:	lsrs	r1, r2, #1
    8a28:	lsls	r7, r1, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a2a:	udiv	r3, r5, r2
    8a2e:	cmp	r0, r3
    8a30:	bcs.n	8a8a <setSdclk(unsigned long)+0xae>
    8a32:	lsls	r4, r2, #1
    8a34:	movs	r1, #1
    8a36:	b.n	8a3a <setSdclk(unsigned long)+0x5e>
    8a38:	mov	r4, r3
    dvs++;
    8a3a:	adds	r6, r1, #1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a3c:	udiv	r3, r5, r4
    8a40:	cmp	r0, r3
    8a42:	add.w	r3, r2, r4
    8a46:	bcs.n	8a80 <setSdclk(unsigned long)+0xa4>
    8a48:	cmp	r6, #16
    8a4a:	mov	r1, r6
    8a4c:	bne.n	8a38 <setSdclk(unsigned long)+0x5c>
    8a4e:	movs	r3, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a50:	mov.w	r2, #1000	; 0x3e8
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8a54:	ldr	r6, [pc, #72]	; (8aa0 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a56:	ldr	r1, [pc, #76]	; (8aa4 <setSdclk(unsigned long)+0xc8>)
    8a58:	mul.w	r4, r2, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8a5c:	ldr	r0, [pc, #72]	; (8aa8 <setSdclk(unsigned long)+0xcc>)

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8a5e:	mov	r2, r6
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8a60:	udiv	r5, r5, r4
    8a64:	str	r5, [r1, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8a66:	ldr	r1, [r6, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8a68:	ands	r0, r1
    8a6a:	orr.w	r0, r0, #917504	; 0xe0000
    8a6e:	orr.w	r1, r0, r7
    8a72:	orrs	r1, r3
    8a74:	str	r1, [r6, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8a76:	ldr	r3, [r2, #36]	; 0x24
    8a78:	lsls	r3, r3, #28
    8a7a:	bpl.n	8a76 <setSdclk(unsigned long)+0x9a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8a7c:	pop	{r4, r5, r6, r7}
    8a7e:	bx	lr
    8a80:	lsls	r3, r1, #4
    8a82:	b.n	8a50 <setSdclk(unsigned long)+0x74>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8a84:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    8a86:	movs	r2, #1
    8a88:	b.n	8a2a <setSdclk(unsigned long)+0x4e>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a8a:	mov	r4, r2
    8a8c:	movs	r3, #0
    8a8e:	b.n	8a50 <setSdclk(unsigned long)+0x74>
    8a90:	.word	0x400d8000
    8a94:	.word	0x400fc000
    8a98:	.word	0xaaaaaaab
    8a9c:	.word	0x5e69ec00
    8aa0:	.word	0x402c0000
    8aa4:	.word	0x200060e4
    8aa8:	.word	0xfff0000f

00008aac <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    8aac:	ldr	r3, [pc, #4]	; (8ab4 <SdioCard::errorCode() const+0x8>)
}
    8aae:	ldrb	r0, [r3, #0]
    8ab0:	bx	lr
    8ab2:	nop
    8ab4:	.word	0x20000c24

00008ab8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    8ab8:	ldr	r3, [pc, #4]	; (8ac0 <SdioCard::errorData() const+0x8>)
    8aba:	ldr	r0, [r3, #0]
}
    8abc:	bx	lr
    8abe:	nop
    8ac0:	.word	0x200060c8

00008ac4 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8ac4:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    8ac6:	ldr	r4, [pc, #20]	; (8adc <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8ac8:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    8aca:	ldmia	r4!, {r0, r1, r2, r3}
    8acc:	str	r0, [r5, #0]
  return true;
}
    8ace:	movs	r0, #1
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    8ad0:	str	r1, [r5, #4]
    8ad2:	str	r2, [r5, #8]
    8ad4:	str	r3, [r5, #12]
  return true;
}
    8ad6:	pop	{r4, r5}
    8ad8:	bx	lr
    8ada:	nop
    8adc:	.word	0x200060a8

00008ae0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8ae0:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    8ae2:	ldr	r4, [pc, #20]	; (8af8 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8ae4:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    8ae6:	ldmia	r4!, {r0, r1, r2, r3}
    8ae8:	str	r0, [r5, #0]
  return true;
}
    8aea:	movs	r0, #1
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    8aec:	str	r1, [r5, #4]
    8aee:	str	r2, [r5, #8]
    8af0:	str	r3, [r5, #12]
  return true;
}
    8af2:	pop	{r4, r5}
    8af4:	bx	lr
    8af6:	nop
    8af8:	.word	0x200060d0

00008afc <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8afc:	ldr	r3, [pc, #8]	; (8b08 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8afe:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8b00:	ldr	r3, [r3, #0]
    8b02:	str	r3, [r1, #0]
  return true;
}
    8b04:	bx	lr
    8b06:	nop
    8b08:	.word	0x200060c0

00008b0c <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    8b0c:	bx	lr
    8b0e:	nop

00008b10 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    8b10:	push	{r3, r4, r5, r6, r7, lr}
    8b12:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8b14:	ldr	r7, [pc, #28]	; (8b34 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8b16:	bl	aecc <micros>
    8b1a:	mov	r6, r0
    8b1c:	b.n	8b28 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8b1e:	bl	aecc <micros>
    8b22:	subs	r0, r0, r6
    8b24:	cmp	r0, r7
    8b26:	bhi.n	8b30 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8b28:	blx	r5
    8b2a:	mov	r4, r0
    8b2c:	cmp	r0, #0
    8b2e:	bne.n	8b1e <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    8b30:	mov	r0, r4
    8b32:	pop	{r3, r4, r5, r6, r7, pc}
    8b34:	.word	0x000f4240

00008b38 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8b38:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8b3c:	ldr.w	r8, [pc, #64]	; 8b80 <yieldTimeout(bool (*)())+0x48>
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8b40:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8b42:	ldr	r7, [pc, #56]	; (8b7c <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8b44:	str.w	r0, [r8]
  uint32_t m = micros();
    8b48:	bl	aecc <micros>
    8b4c:	mov	r6, r0
    8b4e:	b.n	8b5e <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8b50:	bl	aecc <micros>
    8b54:	subs	r0, r0, r6
    8b56:	cmp	r0, r7
    8b58:	bhi.n	8b70 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    8b5a:	bl	b4fc <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    8b5e:	blx	r5
    8b60:	mov	r4, r0
    8b62:	cmp	r0, #0
    8b64:	bne.n	8b50 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    8b66:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    8b6a:	mov	r0, r4
    8b6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8b70:	movs	r3, #0
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    8b72:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    8b74:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    8b78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b7c:	.word	0x000f4240
    8b80:	.word	0x200060b8

00008b84 <SdioCard::~SdioCard()>:
    8b84:	push	{r4, lr}
    8b86:	mov	r4, r0
    8b88:	movs	r1, #12
    8b8a:	bl	b828 <operator delete(void*, unsigned int)>
    8b8e:	mov	r0, r4
    8b90:	pop	{r4, pc}
    8b92:	nop

00008b94 <enableGPIO(bool) [clone .part.0]>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8b94:	ldr	r3, [pc, #60]	; (8bd4 <enableGPIO(bool) [clone .part.0]+0x40>)
    8b96:	movs	r2, #0

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8b98:	movw	r1, #28808	; 0x7088
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8b9c:	movw	r0, #4232	; 0x1088
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8ba0:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8ba4:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8ba8:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8bac:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8bb0:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8bb4:	str.w	r2, [r3, #456]	; 0x1c8

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8bb8:	str.w	r1, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    8bbc:	str.w	r1, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    8bc0:	str.w	r1, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8bc4:	str.w	r0, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    8bc8:	str.w	r1, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    8bcc:	str.w	r1, [r3, #952]	; 0x3b8
    8bd0:	bx	lr
    8bd2:	nop
    8bd4:	.word	0x401f8000

00008bd8 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    8bd8:	ldr	r3, [pc, #20]	; (8bf0 <SdioCard::type() const+0x18>)
    8bda:	ldrb	r3, [r3, #0]
    8bdc:	cbz	r3, 8bec <SdioCard::type() const+0x14>
    8bde:	ldr	r3, [pc, #20]	; (8bf4 <SdioCard::type() const+0x1c>)
    8be0:	ldrb	r3, [r3, #0]
    8be2:	cmp	r3, #0
    8be4:	ite	ne
    8be6:	movne	r0, #3
    8be8:	moveq	r0, #2
    8bea:	bx	lr
    8bec:	movs	r0, #1
}
    8bee:	bx	lr
    8bf0:	.word	0x200060a4
    8bf4:	.word	0x200060bc

00008bf8 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8bf8:	push	{r3, r4, r5, lr}
    8bfa:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8bfc:	ldr	r0, [pc, #80]	; (8c50 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8bfe:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8c00:	bl	8b10 <waitTimeout(bool (*)())>
    8c04:	cbnz	r0, 8c4a <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    8c06:	ldr	r3, [pc, #76]	; (8c54 <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8c08:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    8c0a:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8c0c:	bpl.n	8c1e <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8c0e:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8c10:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8c12:	bic.w	r1, r1, #255	; 0xff
    8c16:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8c18:	ldr	r1, [r3, #72]	; 0x48
    8c1a:	orrs	r2, r1
    8c1c:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8c1e:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    8c22:	ldr	r5, [pc, #48]	; (8c54 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    8c24:	ldr	r0, [pc, #48]	; (8c58 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    8c26:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    8c28:	bl	8b10 <waitTimeout(bool (*)())>
    8c2c:	cbnz	r0, 8c4a <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    8c2e:	ldr	r2, [r5, #48]	; 0x30
    8c30:	ldr	r3, [pc, #40]	; (8c5c <cardCommand(unsigned long, unsigned long)+0x64>)
    8c32:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8c34:	ldr	r2, [r3, #0]
    8c36:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8c38:	ldr	r2, [r3, #0]
    8c3a:	lsls	r2, r2, #31
    8c3c:	bpl.n	8c4a <cardCommand(unsigned long, unsigned long)+0x52>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8c3e:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8c40:	tst.w	r3, #983040	; 0xf0000
    8c44:	bne.n	8c4a <cardCommand(unsigned long, unsigned long)+0x52>
    8c46:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    8c48:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8c4a:	movs	r0, #0
    8c4c:	pop	{r3, r4, r5, pc}
    8c4e:	nop
    8c50:	.word	0x00008981
    8c54:	.word	0x402c0000
    8c58:	.word	0x00008969
    8c5c:	.word	0x200060c8

00008c60 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    8c60:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8c62:	ldr	r3, [pc, #16]	; (8c74 <SdioCard::status()+0x14>)
    8c64:	ldr	r0, [pc, #16]	; (8c78 <SdioCard::status()+0x18>)
    8c66:	ldr	r1, [r3, #0]
    8c68:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    8c6c:	cbz	r0, 8c72 <SdioCard::status()+0x12>
    8c6e:	ldr	r3, [pc, #12]	; (8c7c <SdioCard::status()+0x1c>)
    8c70:	ldr	r0, [r3, #16]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    8c72:	pop	{r3, pc}
    8c74:	.word	0x200060c4
    8c78:	.word	0x0d1a0000
    8c7c:	.word	0x402c0000

00008c80 <readReg16(unsigned long, void*)>:
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8c80:	ldr	r3, [pc, #80]	; (8cd4 <readReg16(unsigned long, void*)+0x54>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    8c82:	push	{r4, r5, r6, lr}
    8c84:	mov	r6, r1
    8c86:	sub	sp, #16
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8c88:	ldr	r1, [r3, #0]
    8c8a:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    8c8e:	cbz	r0, 8cce <readReg16(unsigned long, void*)+0x4e>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8c90:	ldr	r1, [pc, #68]	; (8cd8 <readReg16(unsigned long, void*)+0x58>)
    8c92:	add.w	r5, r6, #15
  for (int i = 0; i < 15; i++) {
    8c96:	movs	r3, #0
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8c98:	ldr	r2, [r1, #16]
    8c9a:	str	r2, [sp, #0]
    8c9c:	ldr	r4, [r1, #20]
    8c9e:	str	r4, [sp, #4]
    8ca0:	ldr	r4, [r1, #24]
    8ca2:	str	r4, [sp, #8]
    8ca4:	ldr	r1, [r1, #28]
    8ca6:	str	r1, [sp, #12]
    8ca8:	b.n	8cae <readReg16(unsigned long, void*)+0x2e>
    8caa:	ldr.w	r2, [r4, #-16]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8cae:	and.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8cb2:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8cb4:	lsls	r1, r1, #3
    8cb6:	bic.w	r4, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8cba:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8cbc:	lsr.w	r2, r2, r1
    8cc0:	add	r1, sp, #16
    8cc2:	strb.w	r2, [r5, #-1]!
    8cc6:	add	r4, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8cc8:	bne.n	8caa <readReg16(unsigned long, void*)+0x2a>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8cca:	movs	r3, #0
    8ccc:	strb	r3, [r6, #15]
  return true;
}
    8cce:	add	sp, #16
    8cd0:	pop	{r4, r5, r6, pc}
    8cd2:	nop
    8cd4:	.word	0x200060c4
    8cd8:	.word	0x402c0000

00008cdc <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    8cdc:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    8cde:	ldr	r3, [pc, #28]	; (8cfc <isBusyCMD13()+0x20>)
    8ce0:	ldr	r0, [pc, #28]	; (8d00 <isBusyCMD13()+0x24>)
    8ce2:	ldr	r1, [r3, #0]
    8ce4:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    8ce8:	cbz	r0, 8cf8 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    8cea:	ldr	r3, [pc, #24]	; (8d04 <isBusyCMD13()+0x28>)
    8cec:	ldr	r0, [r3, #16]
    8cee:	eor.w	r0, r0, #256	; 0x100
    8cf2:	ubfx	r0, r0, #8, #1
    8cf6:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    8cf8:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    8cfa:	pop	{r3, pc}
    8cfc:	.word	0x200060c4
    8d00:	.word	0x0d1a0000
    8d04:	.word	0x402c0000

00008d08 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8d08:	ldr	r3, [pc, #16]	; (8d1c <SdioCard::isBusy()+0x14>)
    8d0a:	ldr	r3, [r3, #0]
    8d0c:	cbz	r3, 8d10 <SdioCard::isBusy()+0x8>
    8d0e:	bx	r3
    8d10:	ldr	r3, [pc, #12]	; (8d20 <SdioCard::isBusy()+0x18>)
    8d12:	ldrb	r0, [r3, #0]
    8d14:	cbnz	r0, 8d18 <SdioCard::isBusy()+0x10>
}
    8d16:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8d18:	b.w	8cdc <isBusyCMD13()>
    8d1c:	.word	0x200060b8
    8d20:	.word	0x200060cc

00008d24 <waitDmaStatus() [clone .part.7]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8d24:	ldr	r3, [pc, #20]	; (8d3c <waitDmaStatus() [clone .part.7]+0x18>)
    8d26:	ldr	r0, [r3, #0]
    8d28:	ands.w	r0, r0, #2
    8d2c:	beq.n	8d3a <waitDmaStatus() [clone .part.7]+0x16>
    8d2e:	ldr	r3, [r3, #0]
    8d30:	ldr	r0, [pc, #12]	; (8d40 <waitDmaStatus() [clone .part.7]+0x1c>)
    8d32:	ands	r0, r3
    8d34:	clz	r0, r0
    8d38:	lsrs	r0, r0, #5
}
    8d3a:	bx	lr
    8d3c:	.word	0x200060c8
    8d40:	.word	0x117f0000

00008d44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    8d44:	push	{r3, r4, r5, r6, r7, lr}
    8d46:	ands.w	r4, r2, #3
    8d4a:	it	ne
    8d4c:	movne	r4, #1
    8d4e:	cmp	r3, #0
    8d50:	it	eq
    8d52:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    8d56:	cbz	r4, 8d6a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d58:	ldr	r1, [pc, #120]	; (8dd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8d5a:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8d5c:	ldr	r3, [pc, #120]	; (8dd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    8d5e:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d62:	strb	r0, [r1, #0]
  m_errorLine = line;
    8d64:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8d66:	movs	r0, #0
    8d68:	pop	{r3, r4, r5, r6, r7, pc}
    8d6a:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8d6c:	ldr	r0, [pc, #108]	; (8ddc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    8d6e:	mov	r5, r3
    8d70:	mov	r7, r1
    8d72:	mov	r4, r2
    8d74:	bl	8b38 <yieldTimeout(bool (*)())>
    8d78:	cbnz	r0, 8dc0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d7a:	lsls	r3, r5, #16
    8d7c:	ldr	r2, [pc, #96]	; (8de0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8d7e:	ldr	r5, [pc, #100]	; (8de4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    8d80:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d84:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8d86:	ldr	r1, [pc, #96]	; (8de8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8d88:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8d8c:	ldr	r3, [pc, #92]	; (8dec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d8e:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8d92:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d94:	ldr	r5, [pc, #88]	; (8df0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8d96:	ldr	r1, [pc, #92]	; (8df4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8d98:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8d9a:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d9c:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8d9e:	ldrb	r3, [r1, #0]
    8da0:	cbnz	r3, 8dd0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>
    8da2:	lsls	r1, r7, #9
    8da4:	mov	r0, r6
    8da6:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    8daa:	cmp	r0, #0
    8dac:	beq.n	8d66 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8dae:	ldr	r0, [pc, #72]	; (8df8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb4>)
    8db0:	bl	8b38 <yieldTimeout(bool (*)())>
    8db4:	cmp	r0, #0
    8db6:	bne.n	8d66 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8db8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8dbc:	b.w	8d24 <waitDmaStatus() [clone .part.7]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dc0:	ldr	r1, [pc, #16]	; (8dd4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8dc2:	movs	r0, #10
  m_errorLine = line;
    8dc4:	ldr	r3, [pc, #16]	; (8dd8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    8dc6:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dca:	strb	r0, [r1, #0]
  m_errorLine = line;
    8dcc:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8dce:	b.n	8d66 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8dd0:	mov	r1, r7
    8dd2:	b.n	8da4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    8dd4:	.word	0x20000c24
    8dd8:	.word	0x200060e8
    8ddc:	.word	0x00008cdd
    8de0:	.word	0x1fff0000
    8de4:	.word	0x200060e0
    8de8:	.word	0x200060c8
    8dec:	.word	0x402c0000
    8df0:	.word	0x117f0002
    8df4:	.word	0x200060bc
    8df8:	.word	0x00008991

00008dfc <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8dfc:	ldr	r1, [pc, #100]	; (8e64 <SdioCard::sectorCount()+0x68>)
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    8dfe:	push	{r4, r5, r6}
    8e00:	ldrb	r3, [r1, #0]
    8e02:	ands.w	r3, r3, #192	; 0xc0
    8e06:	beq.n	8e2c <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    8e08:	cmp	r3, #64	; 0x40
    8e0a:	beq.n	8e12 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    8e0c:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    8e0e:	pop	{r4, r5, r6}
    8e10:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8e12:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8e14:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8e16:	adds	r2, r3, #1
    8e18:	ldrb	r0, [r1, #8]
    8e1a:	and.w	r3, r4, #63	; 0x3f
    8e1e:	add.w	r3, r2, r3, lsl #16
    8e22:	add.w	r0, r3, r0, lsl #8
    8e26:	pop	{r4, r5, r6}
    8e28:	lsls	r0, r0, #10
    8e2a:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8e2c:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8e2e:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8e30:	ldrb	r2, [r1, #7]
    8e32:	and.w	r5, r5, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8e36:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8e38:	and.w	r3, r3, #3
    8e3c:	lsls	r5, r5, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8e3e:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8e40:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8e42:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8e44:	orr.w	r0, r5, r0, lsr #7
    8e48:	and.w	r1, r4, #15
    8e4c:	orr.w	r3, r2, r3, lsl #10
    8e50:	add	r0, r1
    8e52:	orr.w	r3, r3, r6, lsr #6
    8e56:	subs	r0, #7
    8e58:	adds	r3, #1
    8e5a:	pop	{r4, r5, r6}
    8e5c:	lsl.w	r0, r3, r0
    8e60:	bx	lr
    8e62:	nop
    8e64:	.word	0x200060d0

00008e68 <SdioCard::erase(unsigned long, unsigned long)>:
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8e68:	ldr	r0, [pc, #176]	; (8f1c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8e6a:	push	{r3, r4, r5, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8e6c:	ldrb	r3, [r0, #10]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8e6e:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8e70:	and.w	r2, r3, #64	; 0x40
    8e74:	cbnz	r2, 8e8e <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8e76:	and.w	r3, r3, #63	; 0x3f
    8e7a:	and.w	r4, r2, #255	; 0xff
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    8e7e:	ldrb	r2, [r0, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8e80:	adds	r0, r5, #1
    8e82:	lsls	r3, r3, #1
    8e84:	orrs	r0, r1
    8e86:	orr.w	r3, r3, r2, lsr #7
    8e8a:	tst	r3, r0
    8e8c:	bne.n	8ed2 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    8e8e:	ldr	r3, [pc, #144]	; (8f20 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    8e90:	ldrb	r3, [r3, #0]
    8e92:	cbnz	r3, 8e98 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8e94:	lsls	r1, r1, #9
    lastSector <<= 9;
    8e96:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8e98:	ldr	r0, [pc, #136]	; (8f24 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    8e9a:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    8e9e:	mov	r4, r0
    8ea0:	cbnz	r0, 8eb4 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ea2:	ldr	r1, [pc, #132]	; (8f28 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8ea4:	movs	r0, #15
  m_errorLine = line;
    8ea6:	ldr	r3, [pc, #132]	; (8f2c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8ea8:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eac:	strb	r0, [r1, #0]
  m_errorLine = line;
    8eae:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8eb0:	mov	r0, r4
    8eb2:	pop	{r3, r4, r5, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8eb4:	mov	r1, r5
    8eb6:	ldr	r0, [pc, #120]	; (8f30 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    8eb8:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    8ebc:	mov	r4, r0
    8ebe:	cbnz	r0, 8ee4 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ec0:	ldr	r1, [pc, #100]	; (8f28 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8ec2:	movs	r0, #16
  m_errorLine = line;
    8ec4:	ldr	r3, [pc, #100]	; (8f2c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8ec6:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eca:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8ecc:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8ece:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8ed0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ed2:	ldr	r1, [pc, #84]	; (8f28 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8ed4:	movs	r0, #38	; 0x26
  m_errorLine = line;
    8ed6:	ldr	r3, [pc, #84]	; (8f2c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8ed8:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8edc:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8ede:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8ee0:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8ee2:	pop	{r3, r4, r5, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    8ee4:	movs	r1, #0
    8ee6:	ldr	r0, [pc, #76]	; (8f34 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    8ee8:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    8eec:	mov	r4, r0
    8eee:	cbnz	r0, 8f00 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ef0:	ldr	r1, [pc, #52]	; (8f28 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8ef2:	movs	r0, #17
  m_errorLine = line;
    8ef4:	ldr	r3, [pc, #52]	; (8f2c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8ef6:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8efa:	strb	r0, [r1, #0]
  m_errorLine = line;
    8efc:	str	r2, [r3, #0]
    8efe:	b.n	8eb0 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    8f00:	ldr	r0, [pc, #52]	; (8f38 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    8f02:	bl	8b10 <waitTimeout(bool (*)())>
    8f06:	cmp	r0, #0
    8f08:	beq.n	8eb0 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f0a:	ldr	r1, [pc, #28]	; (8f28 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8f0c:	movs	r0, #39	; 0x27
  m_errorLine = line;
    8f0e:	ldr	r3, [pc, #28]	; (8f2c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8f10:	movw	r2, #701	; 0x2bd
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8f14:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f16:	strb	r0, [r1, #0]
  m_errorLine = line;
    8f18:	str	r2, [r3, #0]
    8f1a:	b.n	8eb0 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    8f1c:	.word	0x200060d0
    8f20:	.word	0x200060bc
    8f24:	.word	0x201a0000
    8f28:	.word	0x20000c24
    8f2c:	.word	0x200060e8
    8f30:	.word	0x211a0000
    8f34:	.word	0x261b0000
    8f38:	.word	0x00008cdd

00008f3c <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    8f3c:	push	{r4, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8f3e:	movs	r1, #0
    8f40:	ldr	r0, [pc, #80]	; (8f94 <transferStop()+0x58>)
    8f42:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    8f46:	mov	r4, r0
    8f48:	cbnz	r0, 8f5c <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f4a:	ldr	r1, [pc, #76]	; (8f98 <transferStop()+0x5c>)
    8f4c:	movs	r0, #9
  m_errorLine = line;
    8f4e:	ldr	r3, [pc, #76]	; (8f9c <transferStop()+0x60>)
    8f50:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f54:	strb	r0, [r1, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8f56:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f58:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8f5a:	pop	{r4, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8f5c:	ldr	r0, [pc, #64]	; (8fa0 <transferStop()+0x64>)
    8f5e:	bl	8b38 <yieldTimeout(bool (*)())>
    8f62:	cbnz	r0, 8f7e <transferStop()+0x42>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8f64:	ldr	r3, [pc, #60]	; (8fa4 <transferStop()+0x68>)
    8f66:	ldr	r0, [r3, #52]	; 0x34
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8f68:	ldr	r2, [r3, #40]	; 0x28
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8f6a:	ldr	r1, [r3, #44]	; 0x2c
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8f6c:	bic.w	r2, r2, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8f70:	orr.w	r1, r1, #67108864	; 0x4000000
    8f74:	str	r1, [r3, #44]	; 0x2c
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    8f76:	str	r0, [r3, #52]	; 0x34
  SDHC_PROCTL = proctl;
  return true;
}
    8f78:	mov	r0, r4
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
    8f7a:	str	r2, [r3, #40]	; 0x28
  return true;
}
    8f7c:	pop	{r4, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f7e:	ldr	r1, [pc, #24]	; (8f98 <transferStop()+0x5c>)
    8f80:	movs	r0, #10
  m_errorLine = line;
    8f82:	ldr	r3, [pc, #24]	; (8f9c <transferStop()+0x60>)
    8f84:	movw	r2, #543	; 0x21f
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8f88:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f8a:	strb	r0, [r1, #0]
  m_errorLine = line;
    8f8c:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8f8e:	mov	r0, r4
    8f90:	pop	{r4, pc}
    8f92:	nop
    8f94:	.word	0x0cdb0000
    8f98:	.word	0x20000c24
    8f9c:	.word	0x200060e8
    8fa0:	.word	0x00008cdd
    8fa4:	.word	0x402c0000

00008fa8 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8fa8:	b.w	8f3c <transferStop()>

00008fac <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8fac:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8fae:	ldr	r3, [pc, #156]	; (904c <SdioCard::writeData(unsigned char const*)+0xa0>)
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8fb0:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8fb2:	ldr	r2, [r3, #36]	; 0x24
    8fb4:	lsls	r0, r2, #23
    8fb6:	bmi.n	8fc8 <SdioCard::writeData(unsigned char const*)+0x1c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8fb8:	ldr	r2, [r3, #40]	; 0x28
    8fba:	bic.w	r2, r2, #65536	; 0x10000
    8fbe:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8fc0:	ldr	r2, [r3, #40]	; 0x28
    8fc2:	orr.w	r2, r2, #131072	; 0x20000
    8fc6:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8fc8:	ldr	r4, [pc, #128]	; (904c <SdioCard::writeData(unsigned char const*)+0xa0>)
  if (waitTimeout(isBusyFifoWrite)) {
    8fca:	ldr	r0, [pc, #132]	; (9050 <SdioCard::writeData(unsigned char const*)+0xa4>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8fcc:	ldr	r3, [r4, #40]	; 0x28
    8fce:	orr.w	r3, r3, #65536	; 0x10000
    8fd2:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    8fd4:	bl	8b10 <waitTimeout(bool (*)())>
    8fd8:	cmp	r0, #0
    8fda:	bne.n	9038 <SdioCard::writeData(unsigned char const*)+0x8c>
    8fdc:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8fde:	mov	r0, r4
    8fe0:	add.w	r5, r5, #508	; 0x1fc
    8fe4:	ldr	r2, [r0, #36]	; 0x24
    8fe6:	lsls	r1, r2, #21
    8fe8:	bpl.n	8fe4 <SdioCard::writeData(unsigned char const*)+0x38>
    8fea:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8fee:	ldr.w	r2, [r3, #4]!
    8ff2:	ldr	r4, [pc, #88]	; (904c <SdioCard::writeData(unsigned char const*)+0xa0>)
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8ff4:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    8ff6:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8ff8:	bne.n	8fee <SdioCard::writeData(unsigned char const*)+0x42>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8ffa:	cmp	r5, r1
    8ffc:	mov	r3, r1
    8ffe:	bne.n	8fe4 <SdioCard::writeData(unsigned char const*)+0x38>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    9000:	ldr	r0, [pc, #80]	; (9054 <SdioCard::writeData(unsigned char const*)+0xa8>)
    9002:	bl	8b10 <waitTimeout(bool (*)())>
    9006:	cbnz	r0, 9026 <SdioCard::writeData(unsigned char const*)+0x7a>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    9008:	ldr	r2, [r4, #48]	; 0x30
    900a:	ldr	r3, [pc, #76]	; (9058 <SdioCard::writeData(unsigned char const*)+0xac>)
    900c:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    900e:	ldr	r2, [r3, #0]
    9010:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9012:	ldr	r2, [r3, #0]
    9014:	lsls	r2, r2, #30
    9016:	bpl.n	9048 <SdioCard::writeData(unsigned char const*)+0x9c>
    9018:	ldr	r3, [r3, #0]
    901a:	ldr	r0, [pc, #64]	; (905c <SdioCard::writeData(unsigned char const*)+0xb0>)
    901c:	ands	r0, r3
    901e:	clz	r0, r0
    9022:	lsrs	r0, r0, #5
    9024:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9026:	ldr	r1, [pc, #56]	; (9060 <SdioCard::writeData(unsigned char const*)+0xb4>)
    9028:	movs	r0, #35	; 0x23
  m_errorLine = line;
    902a:	ldr	r3, [pc, #56]	; (9064 <SdioCard::writeData(unsigned char const*)+0xb8>)
    902c:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9030:	strb	r0, [r1, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    9032:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9034:	str	r2, [r3, #0]
    9036:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9038:	ldr	r1, [pc, #36]	; (9060 <SdioCard::writeData(unsigned char const*)+0xb4>)
    903a:	movs	r4, #32
  m_errorLine = line;
    903c:	ldr	r3, [pc, #36]	; (9064 <SdioCard::writeData(unsigned char const*)+0xb8>)
    903e:	movw	r2, #894	; 0x37e
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    9042:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9044:	strb	r4, [r1, #0]
  m_errorLine = line;
    9046:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    9048:	pop	{r3, r4, r5, pc}
    904a:	nop
    904c:	.word	0x402c0000
    9050:	.word	0x000089b1
    9054:	.word	0x000089c5
    9058:	.word	0x200060c8
    905c:	.word	0x117f0000
    9060:	.word	0x20000c24
    9064:	.word	0x200060e8

00009068 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9068:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    906a:	ldr	r0, [pc, #80]	; (90bc <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    906c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    906e:	bl	8b38 <yieldTimeout(bool (*)())>
    9072:	cbnz	r0, 90a8 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9074:	ldr	r3, [pc, #72]	; (90c0 <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9076:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    907a:	ldr	r1, [pc, #72]	; (90c4 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    907c:	ldr	r2, [r3, #40]	; 0x28
    907e:	bic.w	r2, r2, #65536	; 0x10000
    9082:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9084:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9086:	ldrb	r3, [r1, #0]
    9088:	cbnz	r3, 90a4 <SdioCard::writeStart(unsigned long)+0x3c>
    908a:	lsls	r1, r4, #9
    908c:	ldr	r0, [pc, #56]	; (90c8 <SdioCard::writeStart(unsigned long)+0x60>)
    908e:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    9092:	cbnz	r0, 90a2 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9094:	ldr	r1, [pc, #52]	; (90cc <SdioCard::writeStart(unsigned long)+0x64>)
    9096:	movs	r4, #14
  m_errorLine = line;
    9098:	ldr	r3, [pc, #52]	; (90d0 <SdioCard::writeStart(unsigned long)+0x68>)
    909a:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    909e:	strb	r4, [r1, #0]
  m_errorLine = line;
    90a0:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    90a2:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    90a4:	mov	r1, r4
    90a6:	b.n	908c <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90a8:	ldr	r1, [pc, #32]	; (90cc <SdioCard::writeStart(unsigned long)+0x64>)
    90aa:	movs	r0, #10
  m_errorLine = line;
    90ac:	ldr	r3, [pc, #32]	; (90d0 <SdioCard::writeStart(unsigned long)+0x68>)
    90ae:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90b2:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    90b4:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    90b6:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    90b8:	pop	{r4, pc}
    90ba:	nop
    90bc:	.word	0x00008cdd
    90c0:	.word	0x402c0000
    90c4:	.word	0x200060bc
    90c8:	.word	0x193a0020
    90cc:	.word	0x20000c24
    90d0:	.word	0x200060e8

000090d4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    90d4:	push	{r3, r4, r5, r6, r7, lr}
    90d6:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    90d8:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    90da:	mov	r4, r1
    90dc:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    90de:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    90e0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    90e2:	bmi.n	910c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    90e4:	cbz	r3, 9108 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    90e6:	add	r7, r1
    90e8:	b.n	90ee <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    90ea:	cmp	r4, r7
    90ec:	beq.n	9108 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    90ee:	ldr	r3, [r6, #0]
    90f0:	mov	r2, r5
    90f2:	mov	r1, r4
    90f4:	mov	r0, r6
    90f6:	ldr	r3, [r3, #8]
    90f8:	add.w	r5, r5, #512	; 0x200
    90fc:	adds	r4, #1
    90fe:	blx	r3
    9100:	cmp	r0, #0
    9102:	bne.n	90ea <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    9104:	movs	r0, #0
    9106:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    9108:	movs	r0, #1
    910a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    910c:	lsls	r0, r2, #30
    910e:	beq.n	9136 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9110:	cmp	r3, #0
    9112:	beq.n	9108 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9114:	add	r7, r1
    9116:	b.n	911c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    9118:	cmp	r7, r4
    911a:	beq.n	9108 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    911c:	ldr	r3, [r6, #0]
    911e:	mov	r2, r5
    9120:	mov	r1, r4
    9122:	mov	r0, r6
    9124:	ldr	r3, [r3, #8]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9126:	add.w	r5, r5, #512	; 0x200
    912a:	adds	r4, #1
        if (!readSector(sector, dst)) {
    912c:	blx	r3
    912e:	cmp	r0, #0
    9130:	bne.n	9118 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    9132:	movs	r0, #0
    9134:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9136:	ldr	r0, [pc, #24]	; (9150 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    9138:	bl	8d44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    913c:	cmp	r0, #0
    913e:	bne.n	9108 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9140:	ldr	r1, [pc, #16]	; (9154 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    9142:	movs	r4, #12
  m_errorLine = line;
    9144:	ldr	r3, [pc, #16]	; (9158 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    9146:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    914a:	strb	r4, [r1, #0]
  m_errorLine = line;
    914c:	str	r2, [r3, #0]
    914e:	pop	{r3, r4, r5, r6, r7, pc}
    9150:	.word	0x123a0037
    9154:	.word	0x20000c24
    9158:	.word	0x200060e8

0000915c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    915c:	push	{r3, r4, r5, r6, r7, lr}
    915e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    9160:	ldrb	r0, [r0, #8]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9162:	mov	r4, r1
    9164:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9166:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9168:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    916a:	bmi.n	9194 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    916c:	cbz	r3, 9190 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    916e:	add	r7, r1
    9170:	b.n	9176 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9172:	cmp	r4, r7
    9174:	beq.n	9190 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    9176:	ldr	r3, [r6, #0]
    9178:	mov	r2, r5
    917a:	mov	r1, r4
    917c:	mov	r0, r6
    917e:	ldr	r3, [r3, #24]
    9180:	add.w	r5, r5, #512	; 0x200
    9184:	adds	r4, #1
    9186:	blx	r3
    9188:	cmp	r0, #0
    918a:	bne.n	9172 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    918c:	movs	r0, #0
    918e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    9190:	movs	r0, #1
    9192:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    9194:	lsls	r0, r2, #30
    9196:	beq.n	91be <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9198:	cmp	r3, #0
    919a:	beq.n	9190 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    919c:	add	r7, r1
    919e:	b.n	91a4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    91a0:	cmp	r7, r4
    91a2:	beq.n	9190 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    91a4:	ldr	r3, [r6, #0]
    91a6:	mov	r2, r5
    91a8:	mov	r1, r4
    91aa:	mov	r0, r6
    91ac:	ldr	r3, [r3, #24]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    91ae:	add.w	r5, r5, #512	; 0x200
    91b2:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    91b4:	blx	r3
    91b6:	cmp	r0, #0
    91b8:	bne.n	91a0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    91ba:	movs	r0, #0
    91bc:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    91be:	ldr	r0, [pc, #24]	; (91d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    91c0:	bl	8d44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    91c4:	cmp	r0, #0
    91c6:	bne.n	9190 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91c8:	ldr	r1, [pc, #16]	; (91dc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    91ca:	movs	r4, #14
  m_errorLine = line;
    91cc:	ldr	r3, [pc, #16]	; (91e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    91ce:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91d2:	strb	r4, [r1, #0]
  m_errorLine = line;
    91d4:	str	r2, [r3, #0]
    91d6:	pop	{r3, r4, r5, r6, r7, pc}
    91d8:	.word	0x193a0027
    91dc:	.word	0x20000c24
    91e0:	.word	0x200060e8

000091e4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    91e4:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    91e6:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    91e8:	mov	r5, r2
    91ea:	sub.w	sp, sp, #512	; 0x200
    91ee:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    91f0:	lsls	r2, r3, #31
    91f2:	bpl.n	9228 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    91f4:	lsls	r3, r5, #30
    91f6:	beq.n	9206 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    91f8:	mov	r1, r5
    91fa:	mov.w	r2, #512	; 0x200
    91fe:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    9200:	mov	r5, sp
      memcpy(aligned, src, 512);
    9202:	bl	9c8c <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9206:	mov	r2, r5
    9208:	mov	r1, r6
    920a:	movs	r3, #1
    920c:	ldr	r0, [pc, #104]	; (9278 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    920e:	bl	8d44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9212:	cbnz	r0, 9222 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9214:	ldr	r1, [pc, #100]	; (927c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    9216:	movs	r4, #13
  m_errorLine = line;
    9218:	ldr	r3, [pc, #100]	; (9280 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    921a:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    921e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9220:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    9222:	add.w	sp, sp, #512	; 0x200
    9226:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9228:	ldrb	r3, [r0, #9]
    922a:	mov	r4, r0
    922c:	cmp	r3, #2
    922e:	beq.n	9242 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    9230:	ldr	r3, [r4, #0]
    9232:	mov	r0, r4
    9234:	ldr	r3, [r3, #20]
    9236:	blx	r3
    9238:	cbnz	r0, 9262 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7e>
        return false;
    923a:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    923c:	add.w	sp, sp, #512	; 0x200
    9240:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9242:	ldr	r3, [r0, #4]
    9244:	cmp	r1, r3
    9246:	bne.n	9230 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    9248:	ldr	r3, [r4, #0]
    924a:	mov	r1, r5
    924c:	mov	r0, r4
    924e:	ldr	r3, [r3, #68]	; 0x44
    9250:	blx	r3
    9252:	cmp	r0, #0
    9254:	beq.n	923a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    9256:	ldr	r3, [r4, #4]
    9258:	adds	r3, #1
    925a:	str	r3, [r4, #4]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    925c:	add.w	sp, sp, #512	; 0x200
    9260:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    9262:	ldr	r3, [r4, #0]
    9264:	mov	r1, r6
    9266:	mov	r0, r4
    9268:	ldr	r3, [r3, #72]	; 0x48
    926a:	blx	r3
    926c:	cmp	r0, #0
    926e:	beq.n	923a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    9270:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    9272:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    9274:	strb	r3, [r4, #9]
    9276:	b.n	9248 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    9278:	.word	0x183a0001
    927c:	.word	0x20000c24
    9280:	.word	0x200060e8

00009284 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    9284:	ldrb	r3, [r0, #9]
    9286:	cmp	r3, #1
    9288:	beq.n	92aa <SdioCard::syncDevice()+0x26>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    928a:	cmp	r3, #2
    928c:	beq.n	9292 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    928e:	movs	r0, #1
    9290:	bx	lr
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    9292:	push	{r4}
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    9294:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    9296:	movs	r4, #0
    9298:	ldr	r1, [pc, #28]	; (92b8 <SdioCard::syncDevice()+0x34>)
    929a:	strb	r4, [r0, #9]
    if (!writeStop()) {
    929c:	ldr	r3, [r3, #76]	; 0x4c
    929e:	cmp	r3, r1
    92a0:	bne.n	92b2 <SdioCard::syncDevice()+0x2e>
      return false;
    }
  }
  return true;
}
    92a2:	ldr.w	r4, [sp], #4
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    92a6:	b.w	8f3c <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    92aa:	movs	r3, #0
    92ac:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    92ae:	b.w	8f3c <transferStop()>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    92b2:	ldr.w	r4, [sp], #4
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    92b6:	bx	r3
    92b8:	.word	0x00008fa9

000092bc <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    92bc:	push	{r3, r4, r5, r6, r7, lr}
    92be:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    92c0:	ldr	r0, [pc, #108]	; (9330 <cardCMD6(unsigned long, unsigned char*)+0x74>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    92c2:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    92c4:	bl	8b10 <waitTimeout(bool (*)())>
    92c8:	cbz	r0, 92dc <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92ca:	ldr	r1, [pc, #104]	; (9334 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    92cc:	movs	r0, #10
  m_errorLine = line;
    92ce:	ldr	r3, [pc, #104]	; (9338 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    92d0:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92d4:	strb	r0, [r1, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    92d6:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    92d8:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    92da:	pop	{r3, r4, r5, r6, r7, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    92dc:	ldr	r2, [pc, #92]	; (933c <cardCMD6(unsigned long, unsigned char*)+0x80>)
    92de:	movs	r7, #1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    92e0:	ldr	r3, [pc, #92]	; (9340 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92e2:	mov	r1, r5
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    92e4:	strb	r7, [r2, #0]
  m_irqstat = 0;
    92e6:	ldr	r6, [pc, #92]	; (9344 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    92e8:	ldr	r5, [pc, #92]	; (9348 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    92ea:	ldr	r2, [pc, #96]	; (934c <cardCMD6(unsigned long, unsigned char*)+0x90>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    92ec:	str	r0, [r6, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    92ee:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92f0:	ldr	r0, [pc, #92]	; (9350 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    92f2:	str	r5, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    92f4:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    92f6:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    92fa:	cbnz	r0, 930c <cardCMD6(unsigned long, unsigned char*)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92fc:	ldr	r1, [pc, #52]	; (9334 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    92fe:	movs	r4, #4
  m_errorLine = line;
    9300:	ldr	r3, [pc, #52]	; (9338 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    9302:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9306:	strb	r4, [r1, #0]
  m_errorLine = line;
    9308:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    930a:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    930c:	ldr	r0, [pc, #68]	; (9354 <cardCMD6(unsigned long, unsigned char*)+0x98>)
    930e:	bl	8b38 <yieldTimeout(bool (*)())>
    9312:	cbnz	r0, 931c <cardCMD6(unsigned long, unsigned char*)+0x60>
    9314:	bl	8d24 <waitDmaStatus() [clone .part.7]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    9318:	cbz	r0, 931c <cardCMD6(unsigned long, unsigned char*)+0x60>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    931a:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    931c:	ldr	r1, [pc, #20]	; (9334 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    931e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    9320:	ldr	r3, [pc, #20]	; (9338 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    9322:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9326:	strb	r0, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    9328:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    932a:	str	r2, [r3, #0]
    932c:	pop	{r3, r4, r5, r6, r7, pc}
    932e:	nop
    9330:	.word	0x00008cdd
    9334:	.word	0x20000c24
    9338:	.word	0x200060e8
    933c:	.word	0x200060e0
    9340:	.word	0x402c0000
    9344:	.word	0x200060c8
    9348:	.word	0x00010040
    934c:	.word	0x117f0002
    9350:	.word	0x063a0011
    9354:	.word	0x00008991

00009358 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    9358:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    935c:	ldr	r2, [pc, #732]	; (963c <SdioCard::begin(SdioConfig)+0x2e4>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    935e:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    9360:	ldr	r5, [pc, #732]	; (9640 <SdioCard::begin(SdioConfig)+0x2e8>)
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9362:	movs	r4, #5
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    9364:	strb	r1, [r0, #8]
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    9366:	sub	sp, #68	; 0x44
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    9368:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    936a:	strb	r3, [r0, #9]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    936c:	ldr.w	r0, [r2, #256]	; 0x100
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    9370:	ldr	r7, [pc, #720]	; (9644 <SdioCard::begin(SdioConfig)+0x2ec>)
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9372:	orr.w	r0, r0, #128	; 0x80
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    9376:	ldr	r6, [pc, #720]	; (9648 <SdioCard::begin(SdioConfig)+0x2f0>)
  m_version2 = false;
    9378:	ldr.w	r8, [pc, #820]	; 96b0 <SdioCard::begin(SdioConfig)+0x358>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    937c:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    937e:	strb	r3, [r6, #0]
  m_version2 = false;
    9380:	strb.w	r3, [r8]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9384:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9388:	ldr.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    938c:	ldr	r3, [pc, #700]	; (964c <SdioCard::begin(SdioConfig)+0x2f4>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    938e:	bic.w	r0, r0, #63	; 0x3f
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9392:	ldr	r1, [pc, #700]	; (9650 <SdioCard::begin(SdioConfig)+0x2f8>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9394:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    9398:	ldr.w	r0, [r2, #256]	; 0x100
    939c:	orr.w	r0, r0, #24
    93a0:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    93a4:	ldr.w	r0, [r2, #256]	; 0x100
    93a8:	bic.w	r0, r0, #128	; 0x80
    93ac:	str.w	r0, [r2, #256]	; 0x100

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    93b0:	ldr.w	r2, [r3, #128]	; 0x80

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    93b4:	ldr	r0, [pc, #668]	; (9654 <SdioCard::begin(SdioConfig)+0x2fc>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    93b6:	orr.w	r2, r2, #12
    93ba:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    93be:	ldr	r2, [r3, #36]	; 0x24
    93c0:	bic.w	r2, r2, #14336	; 0x3800
    93c4:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    93c6:	ldr	r2, [r3, #28]
    93c8:	orr.w	r2, r2, #65536	; 0x10000
    93cc:	str	r2, [r3, #28]
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    93ce:	ldr	r2, [r3, #36]	; 0x24
    93d0:	orr.w	r2, r2, #2048	; 0x800
    93d4:	str	r2, [r3, #36]	; 0x24
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    93d6:	mov	r2, r0
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    93d8:	str.w	r4, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    93dc:	str.w	r4, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    93e0:	str.w	r4, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    93e4:	str.w	r4, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    93e8:	str.w	r4, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    93ec:	str.w	r4, [r1, #456]	; 0x1c8

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    93f0:	ldr	r1, [r0, #72]	; 0x48
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    93f2:	ldr	r3, [pc, #612]	; (9658 <SdioCard::begin(SdioConfig)+0x300>)

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    93f4:	orr.w	r1, r1, #2147483648	; 0x80000000
    93f8:	str	r1, [r0, #72]	; 0x48
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    93fa:	ldr	r1, [r0, #44]	; 0x2c
    93fc:	orrs	r3, r1
    93fe:	str	r3, [r0, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    9400:	ldr	r3, [r2, #44]	; 0x2c
    9402:	ldr	r4, [pc, #592]	; (9654 <SdioCard::begin(SdioConfig)+0x2fc>)
    9404:	lsls	r1, r3, #7
    9406:	bmi.n	9400 <SdioCard::begin(SdioConfig)+0xa8>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9408:	mov.w	r0, #400	; 0x190
    940c:	bl	89dc <setSdclk(unsigned long)>
    9410:	bl	8b94 <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    9414:	ldr	r1, [pc, #580]	; (965c <SdioCard::begin(SdioConfig)+0x304>)
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    9416:	ldr	r3, [pc, #584]	; (9660 <SdioCard::begin(SdioConfig)+0x308>)
    9418:	ldr	r2, [pc, #584]	; (9664 <SdioCard::begin(SdioConfig)+0x30c>)
    941a:	str	r1, [r4, #52]	; 0x34
    941c:	str.w	r2, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    9420:	ldr	r3, [pc, #580]	; (9668 <SdioCard::begin(SdioConfig)+0x310>)
    9422:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    9424:	ldr	r2, [pc, #580]	; (966c <SdioCard::begin(SdioConfig)+0x314>)
    9426:	mov.w	r1, #16384	; 0x4000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    942a:	strb	r0, [r3, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    942c:	mov	r3, r4
  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    942e:	str	r1, [r2, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9430:	ldr	r2, [r4, #44]	; 0x2c
    9432:	orr.w	r2, r2, #134217728	; 0x8000000
    9436:	str	r2, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9438:	ldr	r1, [r3, #44]	; 0x2c
    943a:	ands.w	r1, r1, #134217728	; 0x8000000
    943e:	bne.n	9438 <SdioCard::begin(SdioConfig)+0xe0>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9440:	mov	r0, r1
    9442:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    9446:	mov	r4, r0
    9448:	cmp	r0, #0
    944a:	beq.n	94e8 <SdioCard::begin(SdioConfig)+0x190>
    944c:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    944e:	mov.w	r1, #426	; 0x1aa
    9452:	ldr	r0, [pc, #540]	; (9670 <SdioCard::begin(SdioConfig)+0x318>)
    9454:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    9458:	cmp	r0, #0
    945a:	bne.n	9516 <SdioCard::begin(SdioConfig)+0x1be>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    945c:	subs	r4, #1
    945e:	bne.n	944e <SdioCard::begin(SdioConfig)+0xf6>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9460:	ldrb.w	r3, [r8]
    9464:	ldr	r4, [pc, #524]	; (9674 <SdioCard::begin(SdioConfig)+0x31c>)
    9466:	cmp	r3, #0
    9468:	it	eq
    946a:	moveq.w	r4, #3145728	; 0x300000
  int m = micros();
    946e:	bl	aecc <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9472:	ldr.w	r8, [pc, #576]	; 96b4 <SdioCard::begin(SdioConfig)+0x35c>
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    9476:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9478:	movs	r1, #0
    947a:	ldr	r0, [pc, #508]	; (9678 <SdioCard::begin(SdioConfig)+0x320>)
    947c:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    9480:	cbnz	r0, 9498 <SdioCard::begin(SdioConfig)+0x140>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9482:	movs	r1, #23
  m_errorLine = line;
    9484:	ldr	r3, [pc, #500]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    9486:	movw	r2, #621	; 0x26d
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    948a:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    948c:	strb	r1, [r5, #0]
  m_errorLine = line;
    948e:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    9490:	mov	r0, r4
    9492:	add	sp, #68	; 0x44
    9494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9498:	mov	r1, r4
    949a:	ldr	r0, [pc, #484]	; (9680 <SdioCard::begin(SdioConfig)+0x328>)
    949c:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    94a0:	cmp	r0, #0
    94a2:	beq.n	9482 <SdioCard::begin(SdioConfig)+0x12a>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    94a4:	bl	aecc <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    94a8:	rsb	r0, r9, r0
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    94ac:	ldr	r2, [pc, #420]	; (9654 <SdioCard::begin(SdioConfig)+0x2fc>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    94ae:	cmp	r0, r8
    94b0:	bhi.n	9482 <SdioCard::begin(SdioConfig)+0x12a>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    94b2:	ldr	r3, [r2, #16]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    94b4:	cmp	r3, #0
    94b6:	bge.n	9478 <SdioCard::begin(SdioConfig)+0x120>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    94b8:	ldr	r1, [r2, #16]
    94ba:	ldr	r3, [pc, #456]	; (9684 <SdioCard::begin(SdioConfig)+0x32c>)
    94bc:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    94be:	ldr	r3, [r2, #16]
    94c0:	lsls	r2, r3, #1
    94c2:	bpl.n	94c8 <SdioCard::begin(SdioConfig)+0x170>
    // Is high capacity.
    m_highCapacity = true;
    94c4:	movs	r3, #1
    94c6:	strb	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    94c8:	movs	r1, #0
    94ca:	ldr	r0, [pc, #444]	; (9688 <SdioCard::begin(SdioConfig)+0x330>)
    94cc:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    94d0:	mov	r4, r0
    94d2:	cbnz	r0, 94fc <SdioCard::begin(SdioConfig)+0x1a4>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94d4:	movs	r1, #2
  m_errorLine = line;
    94d6:	ldr	r3, [pc, #420]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    94d8:	movw	r2, #630	; 0x276

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94dc:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94de:	strb	r1, [r5, #0]
  m_errorLine = line;
    94e0:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94e2:	add	sp, #68	; 0x44
    94e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94e8:	movs	r1, #1
  m_errorLine = line;
    94ea:	ldr	r3, [pc, #400]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    94ec:	mov.w	r2, #604	; 0x25c

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94f0:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94f2:	strb	r1, [r5, #0]
  m_errorLine = line;
    94f4:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    94f6:	add	sp, #68	; 0x44
    94f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    94fc:	movs	r1, #0
    94fe:	ldr	r0, [pc, #396]	; (968c <SdioCard::begin(SdioConfig)+0x334>)
    9500:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    9504:	mov	r4, r0
    9506:	cbnz	r0, 953a <SdioCard::begin(SdioConfig)+0x1e2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9508:	movs	r1, #3
  m_errorLine = line;
    950a:	ldr	r3, [pc, #368]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    950c:	movw	r2, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9510:	strb	r1, [r5, #0]
  m_errorLine = line;
    9512:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    9514:	b.n	9490 <SdioCard::begin(SdioConfig)+0x138>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    9516:	ldr	r3, [pc, #316]	; (9654 <SdioCard::begin(SdioConfig)+0x2fc>)
    9518:	ldr	r3, [r3, #16]
    951a:	cmp.w	r3, #426	; 0x1aa
    951e:	beq.n	9530 <SdioCard::begin(SdioConfig)+0x1d8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9520:	movs	r1, #6
  m_errorLine = line;
    9522:	ldr	r3, [pc, #344]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    9524:	movw	r2, #610	; 0x262
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    9528:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    952a:	strb	r1, [r5, #0]
  m_errorLine = line;
    952c:	str	r2, [r3, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    952e:	b.n	9490 <SdioCard::begin(SdioConfig)+0x138>
      }
      m_version2 = true;
    9530:	movs	r3, #1
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9532:	ldr	r4, [pc, #320]	; (9674 <SdioCard::begin(SdioConfig)+0x31c>)
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    9534:	strb.w	r3, [r8]
    9538:	b.n	946e <SdioCard::begin(SdioConfig)+0x116>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    953a:	ldr	r6, [pc, #280]	; (9654 <SdioCard::begin(SdioConfig)+0x2fc>)
    953c:	ldr	r3, [pc, #336]	; (9690 <SdioCard::begin(SdioConfig)+0x338>)
    953e:	ldr	r2, [r6, #16]
    9540:	ldr.w	r8, [pc, #372]	; 96b8 <SdioCard::begin(SdioConfig)+0x360>
    9544:	ands	r3, r2

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9546:	ldr	r1, [pc, #332]	; (9694 <SdioCard::begin(SdioConfig)+0x33c>)
    9548:	ldr	r0, [pc, #332]	; (9698 <SdioCard::begin(SdioConfig)+0x340>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    954a:	str.w	r3, [r8]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    954e:	bl	8c80 <readReg16(unsigned long, void*)>
    9552:	mov	r4, r0
    9554:	cbnz	r0, 9564 <SdioCard::begin(SdioConfig)+0x20c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9556:	movs	r1, #7
  m_errorLine = line;
    9558:	ldr	r3, [pc, #288]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    955a:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    955e:	strb	r1, [r5, #0]
  m_errorLine = line;
    9560:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    9562:	b.n	9490 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9564:	ldr	r1, [pc, #308]	; (969c <SdioCard::begin(SdioConfig)+0x344>)
    9566:	ldr	r0, [pc, #312]	; (96a0 <SdioCard::begin(SdioConfig)+0x348>)
    9568:	bl	8c80 <readReg16(unsigned long, void*)>
    956c:	mov	r4, r0
    956e:	cbnz	r0, 957e <SdioCard::begin(SdioConfig)+0x226>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9570:	movs	r1, #8
  m_errorLine = line;
    9572:	ldr	r3, [pc, #264]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    9574:	movw	r2, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9578:	strb	r1, [r5, #0]
  m_errorLine = line;
    957a:	str	r2, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    957c:	b.n	9490 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    957e:	ldr.w	r1, [r8]
    9582:	ldr	r0, [pc, #288]	; (96a4 <SdioCard::begin(SdioConfig)+0x34c>)
    9584:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    9588:	mov	r4, r0
    958a:	cbnz	r0, 959a <SdioCard::begin(SdioConfig)+0x242>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    958c:	movs	r1, #5
  m_errorLine = line;
    958e:	ldr	r3, [pc, #236]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    9590:	mov.w	r2, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9594:	strb	r1, [r5, #0]
  m_errorLine = line;
    9596:	str	r2, [r3, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    9598:	b.n	9490 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    959a:	ldr.w	r1, [r8]
    959e:	ldr	r0, [pc, #216]	; (9678 <SdioCard::begin(SdioConfig)+0x320>)
    95a0:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    95a4:	cbnz	r0, 95b6 <SdioCard::begin(SdioConfig)+0x25e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    95a6:	movs	r1, #20
  m_errorLine = line;
    95a8:	ldr	r3, [pc, #208]	; (967c <SdioCard::begin(SdioConfig)+0x324>)
    95aa:	mov.w	r2, #648	; 0x288
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    95ae:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    95b0:	strb	r1, [r5, #0]
  m_errorLine = line;
    95b2:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    95b4:	b.n	9490 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    95b6:	movs	r1, #2
    95b8:	ldr	r0, [pc, #236]	; (96a8 <SdioCard::begin(SdioConfig)+0x350>)
    95ba:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    95be:	mov	r4, r0
    95c0:	cmp	r0, #0
    95c2:	beq.n	95a6 <SdioCard::begin(SdioConfig)+0x24e>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    95c4:	ldr	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    95c6:	mov.w	r2, #1048592	; 0x100010

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    95ca:	mvn.w	r0, #4278190080	; 0xff000000
    95ce:	mov	r1, sp
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    95d0:	bic.w	r3, r3, #6
    95d4:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    95d6:	ldr	r3, [r6, #40]	; 0x28
    95d8:	orr.w	r3, r3, #2
    95dc:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    95de:	str	r2, [r6, #68]	; 0x44

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    95e0:	bl	92bc <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    95e4:	cbz	r0, 95ee <SdioCard::begin(SdioConfig)+0x296>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    95e6:	ldrb.w	r3, [sp, #13]
    95ea:	lsls	r3, r3, #30
    95ec:	bmi.n	961c <SdioCard::begin(SdioConfig)+0x2c4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    95ee:	movw	r0, #25000	; 0x61a8
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    95f2:	ldr	r3, [pc, #92]	; (9650 <SdioCard::begin(SdioConfig)+0x2f8>)
    95f4:	movs	r2, #5
    95f6:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    95fa:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    95fe:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9602:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9606:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    960a:	str.w	r2, [r3, #456]	; 0x1c8
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    960e:	bl	89dc <setSdclk(unsigned long)>
    9612:	bl	8b94 <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    9616:	movs	r3, #1
    9618:	strb	r3, [r7, #0]
  return true;
    961a:	b.n	9490 <SdioCard::begin(SdioConfig)+0x138>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    961c:	mov	r1, sp
    961e:	ldr	r0, [pc, #140]	; (96ac <SdioCard::begin(SdioConfig)+0x354>)
    9620:	bl	92bc <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9624:	cmp	r0, #0
    9626:	beq.n	95ee <SdioCard::begin(SdioConfig)+0x296>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9628:	ldrb.w	r3, [sp, #16]
    962c:	and.w	r3, r3, #15
    9630:	cmp	r3, #1
    9632:	bne.n	95ee <SdioCard::begin(SdioConfig)+0x296>
    kHzSdClk = 50000;
    9634:	movw	r0, #50000	; 0xc350
    9638:	b.n	95f2 <SdioCard::begin(SdioConfig)+0x29a>
    963a:	nop
    963c:	.word	0x400d8000
    9640:	.word	0x20000c24
    9644:	.word	0x200060cc
    9648:	.word	0x200060bc
    964c:	.word	0x400fc000
    9650:	.word	0x401f8000
    9654:	.word	0x402c0000
    9658:	.word	0x01008000
    965c:	.word	0x117f000b
    9660:	.word	0x20008800
    9664:	.word	0x00008939
    9668:	.word	0xe000e46e
    966c:	.word	0xe000e10c
    9670:	.word	0x081a0000
    9674:	.word	0x40300000
    9678:	.word	0x371a0000
    967c:	.word	0x200060e8
    9680:	.word	0x29020000
    9684:	.word	0x200060c0
    9688:	.word	0x02090000
    968c:	.word	0x031a0000
    9690:	.word	0xffff0000
    9694:	.word	0x200060d0
    9698:	.word	0x09090000
    969c:	.word	0x200060a8
    96a0:	.word	0x0a090000
    96a4:	.word	0x071b0000
    96a8:	.word	0x061a0000
    96ac:	.word	0x80fffff1
    96b0:	.word	0x200060a4
    96b4:	.word	0x000f4240
    96b8:	.word	0x200060c4

000096bc <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    96bc:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    96be:	ldr	r3, [pc, #156]	; (975c <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    96c0:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    96c2:	ldr	r2, [r3, #36]	; 0x24
    96c4:	lsls	r4, r2, #22
    96c6:	bmi.n	96e4 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    96c8:	ldr	r2, [r3, #40]	; 0x28
    96ca:	bic.w	r2, r2, #65536	; 0x10000
    96ce:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    96d0:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    96d2:	ldr	r2, [r3, #40]	; 0x28
    96d4:	orr.w	r2, r2, #131072	; 0x20000
    96d8:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    96da:	ldr	r2, [r3, #40]	; 0x28
    96dc:	orr.w	r2, r2, #65536	; 0x10000
    96e0:	str	r2, [r3, #40]	; 0x28
    interrupts();
    96e2:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    96e4:	ldr	r0, [pc, #120]	; (9760 <SdioCard::readData(unsigned char*)+0xa4>)
    96e6:	bl	8b10 <waitTimeout(bool (*)())>
    96ea:	cmp	r0, #0
    96ec:	bne.n	974a <SdioCard::readData(unsigned char*)+0x8e>
    96ee:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    96f0:	ldr	r1, [pc, #104]	; (975c <SdioCard::readData(unsigned char*)+0xa0>)
    96f2:	add.w	r5, r5, #508	; 0x1fc
    96f6:	ldr	r2, [r1, #36]	; 0x24
    96f8:	lsls	r0, r2, #20
    96fa:	bpl.n	96f6 <SdioCard::readData(unsigned char*)+0x3a>
    96fc:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    9700:	ldr	r2, [r1, #32]
    9702:	ldr	r4, [pc, #88]	; (975c <SdioCard::readData(unsigned char*)+0xa0>)
    9704:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9708:	cmp	r0, r3
    970a:	bne.n	9700 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    970c:	cmp	r5, r0
    970e:	mov	r3, r0
    9710:	bne.n	96f6 <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    9712:	ldr	r0, [pc, #80]	; (9764 <SdioCard::readData(unsigned char*)+0xa8>)
    9714:	bl	8b10 <waitTimeout(bool (*)())>
    9718:	cbnz	r0, 9738 <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    971a:	ldr	r2, [r4, #48]	; 0x30
    971c:	ldr	r3, [pc, #72]	; (9768 <SdioCard::readData(unsigned char*)+0xac>)
    971e:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9720:	ldr	r2, [r3, #0]
    9722:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9724:	ldr	r2, [r3, #0]
    9726:	lsls	r2, r2, #30
    9728:	bpl.n	975a <SdioCard::readData(unsigned char*)+0x9e>
    972a:	ldr	r3, [r3, #0]
    972c:	ldr	r0, [pc, #60]	; (976c <SdioCard::readData(unsigned char*)+0xb0>)
    972e:	ands	r0, r3
    9730:	clz	r0, r0
    9734:	lsrs	r0, r0, #5
    9736:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9738:	ldr	r1, [pc, #52]	; (9770 <SdioCard::readData(unsigned char*)+0xb4>)
    973a:	movs	r0, #29
  m_errorLine = line;
    973c:	ldr	r3, [pc, #52]	; (9774 <SdioCard::readData(unsigned char*)+0xb8>)
    973e:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9742:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9744:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9746:	str	r2, [r3, #0]
    9748:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    974a:	ldr	r1, [pc, #36]	; (9770 <SdioCard::readData(unsigned char*)+0xb4>)
    974c:	movs	r4, #26
  m_errorLine = line;
    974e:	ldr	r3, [pc, #36]	; (9774 <SdioCard::readData(unsigned char*)+0xb8>)
    9750:	mov.w	r2, #748	; 0x2ec
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9754:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9756:	strb	r4, [r1, #0]
  m_errorLine = line;
    9758:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    975a:	pop	{r3, r4, r5, pc}
    975c:	.word	0x402c0000
    9760:	.word	0x0000899d
    9764:	.word	0x000089c5
    9768:	.word	0x200060c8
    976c:	.word	0x117f0000
    9770:	.word	0x20000c24
    9774:	.word	0x200060e8

00009778 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    9778:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    977a:	ldr	r0, [pc, #80]	; (97cc <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    977c:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    977e:	bl	8b38 <yieldTimeout(bool (*)())>
    9782:	cbnz	r0, 97b8 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9784:	ldr	r3, [pc, #72]	; (97d0 <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9786:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    978a:	ldr	r1, [pc, #72]	; (97d4 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    978c:	ldr	r2, [r3, #40]	; 0x28
    978e:	orr.w	r2, r2, #65536	; 0x10000
    9792:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9794:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9796:	ldrb	r3, [r1, #0]
    9798:	cbnz	r3, 97b4 <SdioCard::readStart(unsigned long)+0x3c>
    979a:	lsls	r1, r4, #9
    979c:	ldr	r0, [pc, #56]	; (97d8 <SdioCard::readStart(unsigned long)+0x60>)
    979e:	bl	8bf8 <cardCommand(unsigned long, unsigned long)>
    97a2:	cbnz	r0, 97b2 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97a4:	ldr	r1, [pc, #52]	; (97dc <SdioCard::readStart(unsigned long)+0x64>)
    97a6:	movs	r4, #12
  m_errorLine = line;
    97a8:	ldr	r3, [pc, #52]	; (97e0 <SdioCard::readStart(unsigned long)+0x68>)
    97aa:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97ae:	strb	r4, [r1, #0]
  m_errorLine = line;
    97b0:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    97b2:	pop	{r4, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    97b4:	mov	r1, r4
    97b6:	b.n	979c <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97b8:	ldr	r1, [pc, #32]	; (97dc <SdioCard::readStart(unsigned long)+0x64>)
    97ba:	movs	r0, #10
  m_errorLine = line;
    97bc:	ldr	r3, [pc, #32]	; (97e0 <SdioCard::readStart(unsigned long)+0x68>)
    97be:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    97c2:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    97c4:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    97c6:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    97c8:	pop	{r4, pc}
    97ca:	nop
    97cc:	.word	0x00008cdd
    97d0:	.word	0x402c0000
    97d4:	.word	0x200060bc
    97d8:	.word	0x123a0030
    97dc:	.word	0x20000c24
    97e0:	.word	0x200060e8

000097e4 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    97e4:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    97e6:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    97e8:	sub.w	sp, sp, #512	; 0x200
    97ec:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    97ee:	lsls	r4, r3, #31
    97f0:	bpl.n	9816 <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    97f2:	lsls	r3, r2, #30
    97f4:	beq.n	9832 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    97f6:	movs	r3, #1
    97f8:	ldr	r0, [pc, #140]	; (9888 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    97fa:	mov	r2, sp
    97fc:	bl	8d44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9800:	cbz	r0, 983e <SdioCard::readSector(unsigned long, unsigned char*)+0x5a>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    9802:	mov	r1, sp
    9804:	mov	r0, r5
    9806:	mov.w	r2, #512	; 0x200
    980a:	bl	9c8c <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    980e:	movs	r0, #1
}
    9810:	add.w	sp, sp, #512	; 0x200
    9814:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    9816:	ldrb	r3, [r0, #9]
    9818:	mov	r4, r0
    981a:	mov	r6, r1
    981c:	cmp	r3, #1
    981e:	beq.n	9854 <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
      if (!syncDevice()) {
    9820:	ldr	r3, [r4, #0]
    9822:	mov	r0, r4
    9824:	ldr	r3, [r3, #20]
    9826:	blx	r3
    9828:	cbnz	r0, 9872 <SdioCard::readSector(unsigned long, unsigned char*)+0x8e>
        return false;
    982a:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    982c:	add.w	sp, sp, #512	; 0x200
    9830:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9832:	movs	r3, #1
    9834:	ldr	r0, [pc, #80]	; (9888 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    9836:	bl	8d44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    983a:	cmp	r0, #0
    983c:	bne.n	980e <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    983e:	ldr	r1, [pc, #76]	; (988c <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    9840:	movs	r0, #11
  m_errorLine = line;
    9842:	ldr	r3, [pc, #76]	; (9890 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    9844:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9848:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    984a:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    984c:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    984e:	add.w	sp, sp, #512	; 0x200
    9852:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    9854:	ldr	r3, [r0, #4]
    9856:	cmp	r1, r3
    9858:	bne.n	9820 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    985a:	mov	r1, r5
    985c:	mov	r0, r4
    985e:	bl	96bc <SdioCard::readData(unsigned char*)>
    9862:	cmp	r0, #0
    9864:	beq.n	982a <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    9866:	ldr	r3, [r4, #4]
    9868:	adds	r3, #1
    986a:	str	r3, [r4, #4]
  }
  return true;
}
    986c:	add.w	sp, sp, #512	; 0x200
    9870:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    9872:	mov	r1, r6
    9874:	mov	r0, r4
    9876:	bl	9778 <SdioCard::readStart(unsigned long)>
    987a:	cmp	r0, #0
    987c:	beq.n	982a <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    987e:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    9880:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    9882:	strb	r3, [r4, #9]
    9884:	b.n	985a <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    9886:	nop
    9888:	.word	0x113a0011
    988c:	.word	0x20000c24
    9890:	.word	0x200060e8

00009894 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    9894:	ldr	r3, [r0, #0]
    9896:	ldr	r1, [r0, #4]
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    9898:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    989a:	ldrb	r2, [r3, #19]
    989c:	ldr	r4, [r0, #8]
    989e:	cmp	r2, #0
    98a0:	beq.n	98f4 <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    98a2:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    98a4:	ldrb	r2, [r3, #19]
    98a6:	lsls	r5, r2, #31
    98a8:	bpl.n	98b8 <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    98aa:	ldr	r0, [pc, #204]	; (9978 <SdSpiArduinoDriver::activate()+0xe4>)
    98ac:	ldr	r2, [r3, #20]
    98ae:	ldr	r5, [r0, #0]
    98b0:	ands	r2, r5
    98b2:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    98b4:	str	r2, [r0, #0]
    98b6:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    98b8:	lsls	r0, r2, #30
    98ba:	bpl.n	98ca <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    98bc:	ldr	r0, [pc, #188]	; (997c <SdSpiArduinoDriver::activate()+0xe8>)
    98be:	ldr	r2, [r3, #24]
    98c0:	ldr	r5, [r0, #0]
    98c2:	ands	r2, r5
    98c4:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    98c6:	str	r2, [r0, #0]
    98c8:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    98ca:	lsls	r5, r2, #29
    98cc:	bpl.n	98dc <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    98ce:	ldr	r0, [pc, #176]	; (9980 <SdSpiArduinoDriver::activate()+0xec>)
    98d0:	ldr	r2, [r3, #28]
    98d2:	ldr	r5, [r0, #0]
    98d4:	ands	r2, r5
    98d6:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    98d8:	str	r2, [r0, #0]
    98da:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    98dc:	lsls	r0, r2, #28
    98de:	bpl.n	98ee <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    98e0:	ldr	r0, [pc, #160]	; (9984 <SdSpiArduinoDriver::activate()+0xf0>)
    98e2:	ldr	r2, [r3, #32]
    98e4:	ldr	r5, [r0, #0]
    98e6:	ands	r2, r5
    98e8:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    98ea:	str	r2, [r0, #0]
    98ec:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    98ee:	lsls	r2, r2, #27
    98f0:	bmi.n	994a <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    98f2:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    98f4:	ldr	r2, [r3, #8]
    98f6:	cmp	r2, r1
    98f8:	beq.n	9958 <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    98fa:	ldr	r2, [pc, #140]	; (9988 <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    98fc:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    98fe:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9900:	ldr	r0, [pc, #136]	; (998c <SdSpiArduinoDriver::activate()+0xf8>)
    9902:	ubfx	r5, r2, #4, #2
    9906:	ubfx	r2, r2, #26, #3
    990a:	ldr.w	r0, [r0, r5, lsl #2]
    990e:	adds	r2, #1
    9910:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    9914:	cbz	r1, 9946 <SdSpiArduinoDriver::activate()+0xb2>
    9916:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    991a:	cbz	r2, 992e <SdSpiArduinoDriver::activate()+0x9a>
    991c:	udiv	r0, r0, r2
    9920:	cmp	r0, r1
    9922:	it	hi
    9924:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    9926:	cmp.w	r2, #258	; 0x102
    992a:	bcc.n	995c <SdSpiArduinoDriver::activate()+0xc8>
    992c:	ldr	r2, [pc, #96]	; (9990 <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    992e:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9930:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    9932:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9934:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    9936:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    9938:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    993a:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    993c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    993e:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    9940:	str	r1, [r3, #16]
  m_spi->beginTransaction(m_spiSettings);
}
    9942:	pop	{r4, r5}
    9944:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    9946:	mov	r2, r0
    9948:	b.n	991a <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    994a:	ldr	r0, [pc, #72]	; (9994 <SdSpiArduinoDriver::activate()+0x100>)
    994c:	ldr	r2, [r3, #36]	; 0x24
    994e:	ldr	r5, [r0, #0]
    9950:	ands	r2, r5
    9952:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    9954:	str	r2, [r0, #0]
    9956:	b.n	98f2 <SdSpiArduinoDriver::activate()+0x5e>
    9958:	ldr	r2, [r3, #12]
    995a:	b.n	9930 <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    995c:	cmp	r2, #2
    995e:	it	ls
    9960:	movls	r2, #0
    9962:	bls.n	992e <SdSpiArduinoDriver::activate()+0x9a>
    9964:	subs	r2, #2
    9966:	lsrs	r0, r2, #1
    9968:	lsls	r1, r0, #16
    996a:	orr.w	r2, r2, r0, lsl #8
    996e:	and.w	r1, r1, #16711680	; 0xff0000
    9972:	orrs	r2, r1
    9974:	b.n	992e <SdSpiArduinoDriver::activate()+0x9a>
    9976:	nop
    9978:	.word	0xe000e180
    997c:	.word	0xe000e184
    9980:	.word	0xe000e188
    9984:	.word	0xe000e18c
    9988:	.word	0x400fc000
    998c:	.word	0x200002dc
    9990:	.word	0x007f7fff
    9994:	.word	0xe000e190

00009998 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    9998:	push	{lr}
    999a:	sub	sp, #20
    999c:	add.w	lr, sp, #16
    99a0:	stmdb	lr, {r1, r2, r3}
    99a4:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    99a6:	cbz	r3, 99b6 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    m_spi = spiConfig.spiPort;
    99a8:	str	r3, [r0, #0]
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    99aa:	mov	r0, r3
}
    99ac:	add	sp, #20
    99ae:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    99b2:	b.w	3a58 <SPIClass::begin()>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    99b6:	ldr	r2, [pc, #16]	; (99c8 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x30>)
    99b8:	mov	r3, r2
    99ba:	str	r2, [r0, #0]
  }
  m_spi->begin();
    99bc:	mov	r0, r3
}
    99be:	add	sp, #20
    99c0:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    99c4:	b.w	3a58 <SPIClass::begin()>
    99c8:	.word	0x20000bd4

000099cc <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    99cc:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    99ce:	ldrb	r3, [r2, #19]
    99d0:	cbz	r3, 9a0c <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    99d2:	lsls	r0, r3, #31
    99d4:	bpl.n	99de <SdSpiArduinoDriver::deactivate()+0x12>
    99d6:	ldr	r3, [pc, #56]	; (9a10 <SdSpiArduinoDriver::deactivate()+0x44>)
    99d8:	ldr	r1, [r2, #40]	; 0x28
    99da:	str	r1, [r3, #0]
    99dc:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    99de:	lsls	r1, r3, #30
    99e0:	bpl.n	99ea <SdSpiArduinoDriver::deactivate()+0x1e>
    99e2:	ldr	r3, [pc, #48]	; (9a14 <SdSpiArduinoDriver::deactivate()+0x48>)
    99e4:	ldr	r1, [r2, #44]	; 0x2c
    99e6:	str	r1, [r3, #0]
    99e8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    99ea:	lsls	r0, r3, #29
    99ec:	bpl.n	99f6 <SdSpiArduinoDriver::deactivate()+0x2a>
    99ee:	ldr	r3, [pc, #40]	; (9a18 <SdSpiArduinoDriver::deactivate()+0x4c>)
    99f0:	ldr	r1, [r2, #48]	; 0x30
    99f2:	str	r1, [r3, #0]
    99f4:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    99f6:	lsls	r1, r3, #28
    99f8:	bpl.n	9a02 <SdSpiArduinoDriver::deactivate()+0x36>
    99fa:	ldr	r3, [pc, #32]	; (9a1c <SdSpiArduinoDriver::deactivate()+0x50>)
    99fc:	ldr	r1, [r2, #52]	; 0x34
    99fe:	str	r1, [r3, #0]
    9a00:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9a02:	lsls	r3, r3, #27
    9a04:	bpl.n	9a0c <SdSpiArduinoDriver::deactivate()+0x40>
    9a06:	ldr	r2, [r2, #56]	; 0x38
    9a08:	ldr	r3, [pc, #20]	; (9a20 <SdSpiArduinoDriver::deactivate()+0x54>)
    9a0a:	str	r2, [r3, #0]
    9a0c:	bx	lr
    9a0e:	nop
    9a10:	.word	0xe000e100
    9a14:	.word	0xe000e104
    9a18:	.word	0xe000e108
    9a1c:	.word	0xe000e10c
    9a20:	.word	0xe000e110

00009a24 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    9a24:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    9a26:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9a28:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    9a2a:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a2c:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a2e:	tst.w	r3, #2031616	; 0x1f0000
    9a32:	beq.n	9a2c <SdSpiArduinoDriver::receive()+0x8>
    9a34:	ldr	r0, [r2, #116]	; 0x74
  return m_spi->transfer(0XFF);
}
    9a36:	uxtb	r0, r0
    9a38:	bx	lr
    9a3a:	nop

00009a3c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9a3c:	push	{r4, r5, r6, lr}
    9a3e:	mov	r4, r1
    9a40:	mov	r6, r2
    9a42:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9a44:	movs	r1, #255	; 0xff
    9a46:	mov	r0, r4
    9a48:	bl	cf7c <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    9a4c:	ldr	r0, [r5, #0]
    9a4e:	mov	r3, r6
    9a50:	mov	r2, r4
    9a52:	mov	r1, r4
    9a54:	bl	3dc0 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9a58:	movs	r0, #0
    9a5a:	pop	{r4, r5, r6, pc}

00009a5c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    9a5c:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9a5e:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    9a60:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a62:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a64:	tst.w	r3, #2031616	; 0x1f0000
    9a68:	beq.n	9a62 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    9a6a:	ldr	r3, [r2, #116]	; 0x74
    9a6c:	bx	lr
    9a6e:	nop

00009a70 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9a70:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9a72:	subs	r5, r2, #1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9a74:	sub.w	sp, sp, #516	; 0x204
    9a78:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9a7a:	cmp.w	r5, #512	; 0x200
    9a7e:	bcc.n	9aa2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9a80:	cbz	r2, 9a9c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    9a82:	ldr	r2, [r0, #0]
    9a84:	adds	r0, r1, r3
    9a86:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    9a88:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    9a8c:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9a8e:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9a90:	tst.w	r3, #2031616	; 0x1f0000
    9a94:	beq.n	9a8e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9a96:	cmp	r1, r0
    9a98:	ldr	r3, [r2, #116]	; 0x74
    9a9a:	bne.n	9a88 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    9a9c:	add.w	sp, sp, #516	; 0x204
    9aa0:	pop	{r4, r5, pc}
    9aa2:	mov	r4, r2
    9aa4:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    9aa6:	mov	r0, sp
    9aa8:	bl	9c8c <memcpy>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    9aac:	mov	r3, r4
    9aae:	mov	r2, sp
    9ab0:	mov	r1, sp
    9ab2:	ldr	r0, [r5, #0]
    9ab4:	bl	3dc0 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    9ab8:	add.w	sp, sp, #516	; 0x204
    9abc:	pop	{r4, r5, pc}
    9abe:	nop

00009ac0 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    9ac0:	movs	r1, #1
    9ac2:	b.w	b16c <pinMode>
    9ac6:	nop

00009ac8 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9ac8:	b.w	b160 <digitalWrite>

00009acc <tx_event>:
	extern volatile uint8_t usb_configuration;

    static uint32_t mtp_TXcount=0;
	static uint32_t mtp_RXcount=0;
	
	static void tx_event(transfer_t *t) {mtp_TXcount++;}
    9acc:	ldr	r2, [pc, #8]	; (9ad8 <tx_event+0xc>)
    9ace:	ldr	r3, [r2, #0]
    9ad0:	adds	r3, #1
    9ad2:	str	r3, [r2, #0]
    9ad4:	bx	lr
    9ad6:	nop
    9ad8:	.word	0x20006ba0

00009adc <rx_event>:
	static void rx_event(transfer_t *t) {mtp_RXcount++;}
    9adc:	ldr	r2, [pc, #8]	; (9ae8 <rx_event+0xc>)
    9ade:	ldr	r3, [r2, #0]
    9ae0:	adds	r3, #1
    9ae2:	str	r3, [r2, #0]
    9ae4:	bx	lr
    9ae6:	nop
    9ae8:	.word	0x200068ec

00009aec <usb_mtp_wait>:
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
    9aec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		uint32_t wait_begin_at = systick_millis_count;
    9af0:	ldr	r4, [pc, #60]	; (9b30 <usb_mtp_wait+0x44>)
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    9af2:	ldr	r5, [pc, #64]	; (9b34 <usb_mtp_wait+0x48>)
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
    9af4:	ldr	r7, [r4, #0]
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    9af6:	ldrb	r3, [r5, #0]
    9af8:	cbz	r3, 9b20 <usb_mtp_wait+0x34>
    9afa:	mov	r6, r0
    9afc:	mov	r8, r1
    9afe:	b.n	9b10 <usb_mtp_wait+0x24>
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) break; // transfer descriptor ready
			if (systick_millis_count - wait_begin_at > timeout) return 0;
    9b00:	ldr	r3, [r4, #0]
    9b02:	subs	r3, r3, r7
    9b04:	cmp	r3, r8
    9b06:	bhi.n	9b28 <usb_mtp_wait+0x3c>
			yield();
    9b08:	bl	b4fc <yield>

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    9b0c:	ldrb	r3, [r5, #0]
    9b0e:	cbz	r3, 9b20 <usb_mtp_wait+0x34>
			uint32_t status = usb_transfer_status(xfer);
    9b10:	mov	r0, r6
    9b12:	bl	adfc <usb_transfer_status>
			if (!(status & 0x80)) break; // transfer descriptor ready
    9b16:	lsls	r3, r0, #24
    9b18:	bmi.n	9b00 <usb_mtp_wait+0x14>
			if (systick_millis_count - wait_begin_at > timeout) return 0;
			yield();
		}
		return 1;
    9b1a:	movs	r0, #1
    9b1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    9b20:	mov.w	r0, #4294967295
    9b24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) break; // transfer descriptor ready
			if (systick_millis_count - wait_begin_at > timeout) return 0;
    9b28:	movs	r0, #0
			yield();
		}
		return 1;
	}
    9b2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b2e:	nop
    9b30:	.word	0x20006dc4
    9b34:	.word	0x20006db8

00009b38 <usb_mtp_configure>:
	
	static void tx_event(transfer_t *t) {mtp_TXcount++;}
	static void rx_event(transfer_t *t) {mtp_RXcount++;}

	void usb_mtp_configure(void)
	{
    9b38:	push	{r4, r5, r6, lr}
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    9b3a:	movs	r4, #0

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
    9b3c:	ldr	r5, [pc, #76]	; (9b8c <usb_mtp_configure+0x54>)
	static void rx_event(transfer_t *t) {mtp_RXcount++;}

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
    9b3e:	movs	r2, #128	; 0x80
    9b40:	movs	r1, #0
    9b42:	ldr	r0, [pc, #76]	; (9b90 <usb_mtp_configure+0x58>)
    9b44:	bl	cf7c <memset>
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    9b48:	ldr	r6, [pc, #72]	; (9b94 <usb_mtp_configure+0x5c>)

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
    9b4a:	mov	r1, r4
    9b4c:	mov	r0, r5
    9b4e:	movs	r2, #32
    9b50:	bl	cf7c <memset>
		tx_head = 0;
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
    9b54:	mov	r2, r4
    9b56:	ldr	r3, [pc, #64]	; (9b98 <usb_mtp_configure+0x60>)
    9b58:	mov.w	r1, #512	; 0x200
    9b5c:	movs	r0, #4
	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    9b5e:	strb	r4, [r6, #0]
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
    9b60:	bl	ad18 <usb_config_tx>
		usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, rx_event);
    9b64:	mov	r2, r4
    9b66:	ldr	r3, [pc, #52]	; (9b9c <usb_mtp_configure+0x64>)
    9b68:	mov.w	r1, #512	; 0x200
    9b6c:	movs	r0, #4
    9b6e:	bl	acb4 <usb_config_rx>
		//usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, NULL); // why does this not work?
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    9b72:	mov	r0, r5
    9b74:	mov	r3, r4
    9b76:	ldr	r1, [pc, #40]	; (9ba0 <usb_mtp_configure+0x68>)
    9b78:	mov.w	r2, #512	; 0x200
    9b7c:	bl	ad80 <usb_prepare_transfer>
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    9b80:	mov	r1, r5
    9b82:	movs	r0, #4
	}
    9b84:	ldmia.w	sp!, {r4, r5, r6, lr}
		tx_head = 0;
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
		usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, rx_event);
		//usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, NULL); // why does this not work?
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    9b88:	b.w	add8 <usb_receive>
    9b8c:	.word	0x20006b00
    9b90:	.word	0x20006b20
    9b94:	.word	0x200068f0
    9b98:	.word	0x00009acd
    9b9c:	.word	0x00009add
    9ba0:	.word	0x200068f4

00009ba4 <usb_mtp_recv>:
		}
		return 1;
	}

	int usb_mtp_recv(void *buffer, uint32_t timeout)
	{
    9ba4:	push	{r4, lr}
    9ba6:	mov	r4, r0
		int ret= usb_mtp_wait(rx_transfer, timeout); if(ret<=0) return ret;
    9ba8:	ldr	r0, [pc, #68]	; (9bf0 <usb_mtp_recv+0x4c>)
    9baa:	bl	9aec <usb_mtp_wait>
    9bae:	cmp	r0, #0
    9bb0:	ble.n	9bee <usb_mtp_recv+0x4a>

		memcpy(buffer, rx_buffer, MTP_RX_SIZE);
    9bb2:	mov	r0, r4
    9bb4:	mov.w	r2, #512	; 0x200
    9bb8:	ldr	r1, [pc, #56]	; (9bf4 <usb_mtp_recv+0x50>)
		memset(rx_transfer, 0, sizeof(rx_transfer));

		NVIC_DISABLE_IRQ(IRQ_USB1);
    9bba:	mov.w	r4, #131072	; 0x20000

	int usb_mtp_recv(void *buffer, uint32_t timeout)
	{
		int ret= usb_mtp_wait(rx_transfer, timeout); if(ret<=0) return ret;

		memcpy(buffer, rx_buffer, MTP_RX_SIZE);
    9bbe:	bl	9c8c <memcpy>
		memset(rx_transfer, 0, sizeof(rx_transfer));
    9bc2:	movs	r2, #32
    9bc4:	movs	r1, #0
    9bc6:	ldr	r0, [pc, #40]	; (9bf0 <usb_mtp_recv+0x4c>)
    9bc8:	bl	cf7c <memset>

		NVIC_DISABLE_IRQ(IRQ_USB1);
    9bcc:	ldr	r1, [pc, #40]	; (9bf8 <usb_mtp_recv+0x54>)
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    9bce:	movs	r3, #0
    9bd0:	mov.w	r2, #512	; 0x200
		int ret= usb_mtp_wait(rx_transfer, timeout); if(ret<=0) return ret;

		memcpy(buffer, rx_buffer, MTP_RX_SIZE);
		memset(rx_transfer, 0, sizeof(rx_transfer));

		NVIC_DISABLE_IRQ(IRQ_USB1);
    9bd4:	str	r4, [r1, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    9bd6:	ldr	r0, [pc, #24]	; (9bf0 <usb_mtp_recv+0x4c>)
    9bd8:	ldr	r1, [pc, #24]	; (9bf4 <usb_mtp_recv+0x50>)
    9bda:	bl	ad80 <usb_prepare_transfer>
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    9bde:	movs	r0, #4
    9be0:	ldr	r1, [pc, #12]	; (9bf0 <usb_mtp_recv+0x4c>)
    9be2:	bl	add8 <usb_receive>
		NVIC_ENABLE_IRQ(IRQ_USB1);
    9be6:	ldr	r3, [pc, #20]	; (9bfc <usb_mtp_recv+0x58>)
		return MTP_RX_SIZE;
    9be8:	mov.w	r0, #512	; 0x200
		memset(rx_transfer, 0, sizeof(rx_transfer));

		NVIC_DISABLE_IRQ(IRQ_USB1);
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
		NVIC_ENABLE_IRQ(IRQ_USB1);
    9bec:	str	r4, [r3, #0]
		return MTP_RX_SIZE;
	}
    9bee:	pop	{r4, pc}
    9bf0:	.word	0x20006b00
    9bf4:	.word	0x200068f4
    9bf8:	.word	0xe000e18c
    9bfc:	.word	0xe000e10c

00009c00 <usb_mtp_send>:

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    9c00:	push	{r3, r4, r5, r6, r7, lr}
		transfer_t *xfer = tx_transfer + tx_head;
    9c02:	ldr	r6, [pc, #88]	; (9c5c <usb_mtp_send+0x5c>)
		NVIC_ENABLE_IRQ(IRQ_USB1);
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    9c04:	mov	r7, r0
		transfer_t *xfer = tx_transfer + tx_head;
    9c06:	ldr	r3, [pc, #88]	; (9c60 <usb_mtp_send+0x60>)
		NVIC_ENABLE_IRQ(IRQ_USB1);
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    9c08:	mov	r5, r1
		transfer_t *xfer = tx_transfer + tx_head;
    9c0a:	ldrb	r4, [r6, #0]
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    9c0c:	mov	r1, r2
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
    9c0e:	add.w	r4, r3, r4, lsl #5
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    9c12:	mov	r0, r4
    9c14:	bl	9aec <usb_mtp_wait>
    9c18:	cmp	r0, #0
    9c1a:	ble.n	9c52 <usb_mtp_send+0x52>

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    9c1c:	ldrb	r0, [r6, #0]
		memcpy(txdata, buffer, len);
    9c1e:	mov	r1, r7
	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    9c20:	ldr	r3, [pc, #64]	; (9c64 <usb_mtp_send+0x64>)
		memcpy(txdata, buffer, len);
    9c22:	mov	r2, r5
	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    9c24:	add.w	r3, r3, r0, lsl #9
		memcpy(txdata, buffer, len);
    9c28:	mov	r0, r3
    9c2a:	bl	9c8c <memcpy>
		usb_prepare_transfer(xfer, txdata, len, 0);
    9c2e:	movs	r3, #0
    9c30:	mov	r1, r0
    9c32:	mov	r2, r5
    9c34:	mov	r0, r4
    9c36:	bl	ad80 <usb_prepare_transfer>
		usb_transmit(MTP_TX_ENDPOINT, xfer);
    9c3a:	mov	r1, r4
    9c3c:	movs	r0, #4
    9c3e:	bl	adb0 <usb_transmit>
		if (++tx_head >= TX_NUM) tx_head = 0;
    9c42:	ldrb	r3, [r6, #0]
    9c44:	adds	r3, #1
    9c46:	uxtb	r3, r3
    9c48:	cmp	r3, #3
    9c4a:	bls.n	9c54 <usb_mtp_send+0x54>
    9c4c:	movs	r3, #0
		return len;
    9c4e:	mov	r0, r5

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
		memcpy(txdata, buffer, len);
		usb_prepare_transfer(xfer, txdata, len, 0);
		usb_transmit(MTP_TX_ENDPOINT, xfer);
		if (++tx_head >= TX_NUM) tx_head = 0;
    9c50:	strb	r3, [r6, #0]
		return len;
	}
    9c52:	pop	{r3, r4, r5, r6, r7, pc}

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
		memcpy(txdata, buffer, len);
		usb_prepare_transfer(xfer, txdata, len, 0);
		usb_transmit(MTP_TX_ENDPOINT, xfer);
		if (++tx_head >= TX_NUM) tx_head = 0;
    9c54:	strb	r3, [r6, #0]
		return len;
    9c56:	mov	r0, r5
    9c58:	pop	{r3, r4, r5, r6, r7, pc}
    9c5a:	nop
    9c5c:	.word	0x200068f0
    9c60:	.word	0x20006b20
    9c64:	.word	0x200060ec

00009c68 <usb_mtp_available>:
	}

	int usb_mtp_available(void)
	{
    9c68:	push	{r3, lr}
		if (!usb_configuration) return 0;
    9c6a:	ldr	r3, [pc, #24]	; (9c84 <usb_mtp_available+0x1c>)
    9c6c:	ldrb	r3, [r3, #0]
    9c6e:	cbnz	r3, 9c74 <usb_mtp_available+0xc>
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
    9c70:	movs	r0, #0
    9c72:	pop	{r3, pc}
	}

	int usb_mtp_available(void)
	{
		if (!usb_configuration) return 0;
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
    9c74:	ldr	r0, [pc, #16]	; (9c88 <usb_mtp_available+0x20>)
    9c76:	bl	adfc <usb_transfer_status>
    9c7a:	lsls	r3, r0, #24
    9c7c:	bmi.n	9c70 <usb_mtp_available+0x8>
    9c7e:	mov.w	r0, #512	; 0x200
		return 0;
	}
    9c82:	pop	{r3, pc}
    9c84:	.word	0x20006db8
    9c88:	.word	0x20006b00

00009c8c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9c8c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9c8e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9c92:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9c96:	bne.n	9d74 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9c98:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9c9a:	bcc.n	9d20 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9c9c:	ldr.w	r3, [r1], #4
    9ca0:	str.w	r3, [r0], #4
    9ca4:	ldr.w	r3, [r1], #4
    9ca8:	str.w	r3, [r0], #4
    9cac:	ldr.w	r3, [r1], #4
    9cb0:	str.w	r3, [r0], #4
    9cb4:	ldr.w	r3, [r1], #4
    9cb8:	str.w	r3, [r0], #4
    9cbc:	ldr.w	r3, [r1], #4
    9cc0:	str.w	r3, [r0], #4
    9cc4:	ldr.w	r3, [r1], #4
    9cc8:	str.w	r3, [r0], #4
    9ccc:	ldr.w	r3, [r1], #4
    9cd0:	str.w	r3, [r0], #4
    9cd4:	ldr.w	r3, [r1], #4
    9cd8:	str.w	r3, [r0], #4
    9cdc:	ldr.w	r3, [r1], #4
    9ce0:	str.w	r3, [r0], #4
    9ce4:	ldr.w	r3, [r1], #4
    9ce8:	str.w	r3, [r0], #4
    9cec:	ldr.w	r3, [r1], #4
    9cf0:	str.w	r3, [r0], #4
    9cf4:	ldr.w	r3, [r1], #4
    9cf8:	str.w	r3, [r0], #4
    9cfc:	ldr.w	r3, [r1], #4
    9d00:	str.w	r3, [r0], #4
    9d04:	ldr.w	r3, [r1], #4
    9d08:	str.w	r3, [r0], #4
    9d0c:	ldr.w	r3, [r1], #4
    9d10:	str.w	r3, [r0], #4
    9d14:	ldr.w	r3, [r1], #4
    9d18:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9d1c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9d1e:	bcs.n	9c9c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9d20:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9d22:	bcc.n	9d48 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9d24:	ldr.w	r3, [r1], #4
    9d28:	str.w	r3, [r0], #4
    9d2c:	ldr.w	r3, [r1], #4
    9d30:	str.w	r3, [r0], #4
    9d34:	ldr.w	r3, [r1], #4
    9d38:	str.w	r3, [r0], #4
    9d3c:	ldr.w	r3, [r1], #4
    9d40:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9d44:	subs	r2, #16
	bhs	.Lmid_block_loop
    9d46:	bcs.n	9d24 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9d48:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9d4a:	bcc.n	9d58 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9d4c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9d50:	str.w	r3, [r0], #4
	subs	r2, #4
    9d54:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9d56:	bcs.n	9d4c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9d58:	adds	r2, #4
	beq	.Ldone
    9d5a:	beq.n	9d6e <memcpy+0xe2>

	lsls	r2, r2, #31
    9d5c:	lsls	r2, r2, #31
	itt ne
    9d5e:	itt	ne
	ldrbne  r3, [r1], #1
    9d60:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d64:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9d68:	bcc.n	9d6e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9d6a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9d6c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9d6e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9d70:	bx	lr
    9d72:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9d74:	cmp	r2, #8
	blo	.Lbyte_copy
    9d76:	bcc.n	9da0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9d78:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9d7a:	beq.n	9c98 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9d7c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9d80:	beq.n	9c98 <memcpy+0xc>

	rsb	r3, #4
    9d82:	rsb	r3, r3, #4
	subs	r2, r3
    9d86:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9d88:	lsls	r3, r3, #31
	itt ne
    9d8a:	itt	ne
	ldrbne  r3, [r1], #1
    9d8c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d90:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9d94:	bcc.n	9c98 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9d96:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9d9a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9d9e:	b.n	9c98 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9da0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9da2:	bcc.n	9d58 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9da4:	subs	r2, #1
	ldrb    r3, [r1], #1
    9da6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9daa:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9dae:	bcs.n	9da4 <memcpy+0x118>

	ldrb	r3, [r1]
    9db0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9db2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9db4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9db6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9db8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9dba:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9dbc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9dbe:	bx	lr

00009dc0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9dc0:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9dc2:	ldr	r1, [pc, #80]	; (9e14 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9dc4:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9dc8:	ldr	r5, [pc, #76]	; (9e18 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9dca:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9dcc:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9dd0:	ldr	r6, [pc, #72]	; (9e1c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9dd2:	ldr	r2, [pc, #76]	; (9e20 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9dd4:	add.w	r5, r5, r0, lsl #5
    9dd8:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9dda:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9ddc:	mov	r0, r5
    9dde:	ldrh	r2, [r6, #0]
    9de0:	bl	ad80 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9de4:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9de6:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9dea:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    9dec:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9df0:	ldr	r2, [pc, #48]	; (9e24 <rx_queue_transfer+0x64>)
    9df2:	str	r3, [r2, #0]
		location += 32;
    9df4:	adds	r3, #32
	} while (location < end_addr);
    9df6:	cmp	r1, r3
    9df8:	bhi.n	9df2 <rx_queue_transfer+0x32>
	asm("dsb");
    9dfa:	dsb	sy
	asm("isb");
    9dfe:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9e02:	movs	r0, #3
    9e04:	mov	r1, r5
    9e06:	bl	add8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9e0a:	ldr	r3, [pc, #28]	; (9e28 <rx_queue_transfer+0x68>)
    9e0c:	mov.w	r2, #131072	; 0x20000
    9e10:	str	r2, [r3, #0]
    9e12:	pop	{r3, r4, r5, r6, r7, pc}
    9e14:	.word	0x20200000
    9e18:	.word	0x20006bc0
    9e1c:	.word	0x20006cce
    9e20:	.word	0xe000e18c
    9e24:	.word	0xe000ef5c
    9e28:	.word	0xe000e10c

00009e2c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e2c:	ldr	r2, [pc, #144]	; (9ec0 <rx_event+0x94>)
    9e2e:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    9e30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e34:	ubfx	r3, r3, #16, #15
    9e38:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    9e3a:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9e3c:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9e3e:	cmp	r4, #0
    9e40:	ble.n	9eb4 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    9e42:	ldr	r1, [pc, #128]	; (9ec4 <rx_event+0x98>)
		if (head != rx_tail) {
    9e44:	ldr	r2, [pc, #128]	; (9ec8 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    9e46:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    9e48:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    9e4a:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    9e4c:	ldr	r0, [pc, #124]	; (9ecc <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    9e4e:	ldr	r6, [pc, #128]	; (9ed0 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    9e50:	cmp	r3, r2
    9e52:	beq.n	9e64 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    9e54:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9e58:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9e5c:	rsb	r2, r7, #512	; 0x200
    9e60:	cmp	r4, r2
    9e62:	bls.n	9e8a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9e64:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    9e66:	movs	r2, #0
    9e68:	ldr	r7, [pc, #104]	; (9ed4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9e6a:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    9e6c:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    9e70:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    9e74:	ldr	r6, [pc, #96]	; (9ed8 <rx_event+0xac>)
    9e76:	ite	ls
    9e78:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9e7a:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    9e7c:	strb	r2, [r1, #0]
		rx_available += len;
    9e7e:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    9e80:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    9e82:	add	r4, r2
    9e84:	str	r4, [r6, #0]
    9e86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9e8a:	ldr	r3, [pc, #80]	; (9edc <rx_event+0xb0>)
    9e8c:	add.w	r0, r7, r8, lsl #9
    9e90:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9e92:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9e94:	add.w	r1, r3, r5, lsl #9
    9e98:	add	r0, r3
    9e9a:	bl	9c8c <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    9e9e:	ldr	r2, [pc, #56]	; (9ed8 <rx_event+0xac>)
				rx_queue_transfer(i);
    9ea0:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9ea2:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9ea6:	ldr	r3, [r2, #0]
    9ea8:	add	r4, r3
    9eaa:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9eac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    9eb0:	b.w	9dc0 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9eb4:	mov	r0, r5
	}
}
    9eb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9eba:	b.w	9dc0 <rx_queue_transfer>
    9ebe:	nop
    9ec0:	.word	0x20006cce
    9ec4:	.word	0x20006ce4
    9ec8:	.word	0x20006cc0
    9ecc:	.word	0x20006cc4
    9ed0:	.word	0x20006cd0
    9ed4:	.word	0x20006ba4
    9ed8:	.word	0x20006ce0
    9edc:	.word	0x20200000

00009ee0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9ee0:	ldr	r3, [pc, #120]	; (9f5c <usb_serial_flush_callback+0x7c>)
    9ee2:	ldrb	r2, [r3, #0]
    9ee4:	cbnz	r2, 9efe <usb_serial_flush_callback+0x1e>
    9ee6:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    9eea:	ldr	r2, [pc, #116]	; (9f60 <usb_serial_flush_callback+0x80>)
    9eec:	ldrb	r2, [r2, #0]
    9eee:	cbz	r2, 9efe <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    9ef0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    9ef4:	ldr	r5, [pc, #108]	; (9f64 <usb_serial_flush_callback+0x84>)
    9ef6:	ldrh	r2, [r5, #0]
    9ef8:	cbnz	r2, 9f00 <usb_serial_flush_callback+0x20>
    9efa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9efe:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9f00:	ldr	r6, [pc, #100]	; (9f68 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9f02:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9f06:	ldr	r7, [pc, #100]	; (9f6c <usb_serial_flush_callback+0x8c>)
    9f08:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9f0a:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9f0c:	ldr	r4, [pc, #96]	; (9f70 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9f0e:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9f12:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9f16:	mov	r0, r7
    9f18:	mov	r1, r4
    9f1a:	bl	ad80 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9f1e:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9f22:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9f26:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9f2a:	ldr	r3, [pc, #72]	; (9f74 <usb_serial_flush_callback+0x94>)
    9f2c:	str	r1, [r3, #0]
		location += 32;
    9f2e:	adds	r1, #32
	} while (location < end_addr);
    9f30:	cmp	r2, r1
    9f32:	bhi.n	9f2c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    9f34:	dsb	sy
	asm("isb");
    9f38:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9f3c:	movs	r0, #3
    9f3e:	mov	r1, r7
    9f40:	bl	adb0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9f44:	ldrb	r3, [r6, #0]
    9f46:	ldr	r2, [pc, #32]	; (9f68 <usb_serial_flush_callback+0x88>)
    9f48:	adds	r3, #1
    9f4a:	uxtb	r3, r3
    9f4c:	cmp	r3, #3
    9f4e:	it	hi
    9f50:	movhi	r3, #0
    9f52:	strb	r3, [r2, #0]
	tx_available = 0;
    9f54:	movs	r3, #0
    9f56:	strh	r3, [r5, #0]
    9f58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f5c:	.word	0x20006bb6
    9f60:	.word	0x20006db8
    9f64:	.word	0x20006ce6
    9f68:	.word	0x20006bb7
    9f6c:	.word	0x20006d00
    9f70:	.word	0x20201000
    9f74:	.word	0xe000ef70

00009f78 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9f78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f7c:	sub	sp, #20
    9f7e:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9f80:	str	r1, [sp, #4]
    9f82:	cmp	r1, #0
    9f84:	beq.w	a0cc <usb_serial_write.part.1+0x154>
    9f88:	movs	r3, #0
    9f8a:	ldr.w	r8, [pc, #348]	; a0e8 <usb_serial_write.part.1+0x170>
    9f8e:	ldr.w	r9, [pc, #332]	; a0dc <usb_serial_write.part.1+0x164>
    9f92:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    9f94:	ldr	r6, [pc, #312]	; (a0d0 <usb_serial_write.part.1+0x158>)
    9f96:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9f9a:	ldr.w	sl, [pc, #336]	; a0ec <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    9f9e:	ldr.w	fp, [pc, #336]	; a0f0 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    9fa2:	ldr	r2, [pc, #304]	; (a0d4 <usb_serial_write.part.1+0x15c>)
    9fa4:	ldrb	r4, [r2, #0]
    9fa6:	ldr	r2, [pc, #304]	; (a0d8 <usb_serial_write.part.1+0x160>)
    9fa8:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9fac:	cmp	r3, #0
    9fae:	bne.n	a08e <usb_serial_write.part.1+0x116>
    9fb0:	mov	r5, r3
    9fb2:	mov	r4, r3
    9fb4:	b.n	9fe0 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9fb6:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    9fba:	cbnz	r4, 9fbe <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    9fbc:	ldr	r5, [r6, #0]
    9fbe:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9fc0:	cmp	r3, #0
    9fc2:	bne.n	a082 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9fc4:	ldr	r3, [r6, #0]
    9fc6:	subs	r3, r3, r5
    9fc8:	cmp	r3, #120	; 0x78
    9fca:	bhi.n	a0c0 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9fcc:	ldrb.w	r3, [sl]
    9fd0:	cmp	r3, #0
    9fd2:	beq.n	a082 <usb_serial_write.part.1+0x10a>
			yield();
    9fd4:	bl	b4fc <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9fd8:	ldrh.w	r3, [r8]
    9fdc:	cmp	r3, #0
    9fde:	bne.n	a08a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    9fe0:	mov	r0, r7
    9fe2:	bl	adfc <usb_transfer_status>
			if (!(status & 0x80)) {
    9fe6:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9fea:	ldr	r2, [pc, #240]	; (a0dc <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    9fec:	bne.n	9fb6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9fee:	mov.w	r3, #2048	; 0x800
    9ff2:	ldr	r2, [pc, #224]	; (a0d4 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    9ff4:	strb.w	r0, [r9]
    9ff8:	ldrb	r4, [r2, #0]
    9ffa:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9ffc:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a000:	lsls	r4, r4, #11
		if (size >= tx_available) {
    a002:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a004:	ldr	r1, [pc, #216]	; (a0e0 <usb_serial_write.part.1+0x168>)
    a006:	add	r0, r4
		if (size >= tx_available) {
    a008:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a00a:	add	r0, r1
		if (size >= tx_available) {
    a00c:	bcc.n	a096 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a00e:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    a010:	ldr	r1, [sp, #8]
    a012:	bl	9c8c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a016:	movs	r3, #0
    a018:	mov	r1, r4
    a01a:	mov.w	r2, #2048	; 0x800
    a01e:	mov	r0, r7
    a020:	bl	ad80 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a024:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a028:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    a02c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a030:	str.w	r3, [fp]
		location += 32;
    a034:	adds	r3, #32
	} while (location < end_addr);
    a036:	cmp	r4, r3
    a038:	bhi.n	a030 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    a03a:	dsb	sy
	asm("isb");
    a03e:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a042:	movs	r0, #3
    a044:	mov	r1, r7
    a046:	bl	adb0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a04a:	ldr	r3, [pc, #136]	; (a0d4 <usb_serial_write.part.1+0x15c>)
    a04c:	ldr	r2, [pc, #132]	; (a0d4 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    a04e:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    a050:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    a052:	ldr	r0, [pc, #144]	; (a0e4 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    a054:	adds	r3, #1
    a056:	uxtb	r3, r3
    a058:	cmp	r3, #3
    a05a:	it	hi
    a05c:	movhi	r3, #0
    a05e:	strb	r3, [r2, #0]
			size -= tx_available;
    a060:	ldrh.w	r2, [r8]
			sent += tx_available;
    a064:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    a066:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    a06a:	add	r3, r2
    a06c:	str	r3, [sp, #0]
			data += tx_available;
    a06e:	ldr	r3, [sp, #8]
    a070:	add	r3, r2
    a072:	str	r3, [sp, #8]
    a074:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    a076:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a07a:	ldr	r1, [sp, #4]
    a07c:	subs	r2, r1, r2
    a07e:	str	r2, [sp, #4]
    a080:	bne.n	9fa2 <usb_serial_write.part.1+0x2a>
    a082:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a084:	add	sp, #20
    a086:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a08a:	ldr	r2, [pc, #72]	; (a0d4 <usb_serial_write.part.1+0x15c>)
    a08c:	ldrb	r4, [r2, #0]
    a08e:	mov	r2, r3
    a090:	rsb	r0, r3, #2048	; 0x800
    a094:	b.n	a000 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    a096:	ldr	r4, [sp, #4]
    a098:	ldr	r1, [sp, #8]
    a09a:	mov	r2, r4
    a09c:	str	r3, [sp, #12]
    a09e:	bl	9c8c <memcpy>
			tx_available -= size;
    a0a2:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a0a4:	ldr	r2, [pc, #60]	; (a0e4 <usb_serial_write.part.1+0x16c>)
    a0a6:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    a0aa:	subs	r3, r3, r4
    a0ac:	strh.w	r3, [r8]
    a0b0:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a0b2:	str.w	r1, [r2, #132]	; 0x84
    a0b6:	mov	r0, r3
    a0b8:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a0ba:	add	sp, #20
    a0bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    a0c0:	movs	r3, #1
				return sent;
    a0c2:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    a0c4:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a0c6:	add	sp, #20
    a0c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a0cc:	ldr	r0, [sp, #4]
    a0ce:	b.n	a084 <usb_serial_write.part.1+0x10c>
    a0d0:	.word	0x20006dc4
    a0d4:	.word	0x20006bb7
    a0d8:	.word	0x20006d00
    a0dc:	.word	0x20006ce5
    a0e0:	.word	0x20201000
    a0e4:	.word	0x402e0000
    a0e8:	.word	0x20006ce6
    a0ec:	.word	0x20006db8
    a0f0:	.word	0xe000ef70

0000a0f4 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    a0f4:	bx	lr
    a0f6:	nop

0000a0f8 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    a0f8:	ldr	r3, [pc, #196]	; (a1c0 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    a0fa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    a0fe:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    a100:	ldr	r7, [pc, #192]	; (a1c4 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    a102:	cmp	r3, #0
    a104:	beq.n	a1b0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    a106:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    a10a:	ldr.w	r8, [pc, #236]	; a1f8 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    a10e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a110:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a114:	movs	r1, #0
    a116:	movs	r2, #128	; 0x80
    a118:	ldr	r0, [pc, #172]	; (a1c8 <usb_serial_configure+0xd0>)
	tx_head = 0;
    a11a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a11c:	ldr	r6, [pc, #172]	; (a1cc <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a11e:	bl	cf7c <memset>
	tx_head = 0;
    a122:	ldr	r4, [pc, #172]	; (a1d0 <usb_serial_configure+0xd8>)
	tx_available = 0;
    a124:	ldr	r3, [pc, #172]	; (a1d4 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a126:	mov	r1, r5
    a128:	mov.w	r2, #256	; 0x100
    a12c:	ldr	r0, [pc, #168]	; (a1d8 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    a12e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a130:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    a132:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a134:	bl	cf7c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a138:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a13a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a13c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a13e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a140:	str	r5, [r6, #8]
    a142:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    a144:	ldr	r1, [pc, #148]	; (a1dc <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    a146:	ldr	r6, [pc, #152]	; (a1e0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    a148:	ldr	r0, [pc, #152]	; (a1e4 <usb_serial_configure+0xec>)
	rx_available = 0;
    a14a:	ldr.w	lr, [pc, #176]	; a1fc <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    a14e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a150:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    a152:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a154:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    a156:	str	r5, [r6, #0]
    a158:	str	r5, [r6, #4]
    a15a:	str	r5, [r6, #8]
    a15c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    a15e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a162:	bl	ad18 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a166:	ldrh.w	r1, [r8]
    a16a:	mov	r2, r5
    a16c:	ldr	r3, [pc, #120]	; (a1e8 <usb_serial_configure+0xf0>)
    a16e:	movs	r0, #3
    a170:	bl	acb4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a174:	mov	r3, r5
    a176:	ldrh	r1, [r7, #0]
    a178:	movs	r2, #1
    a17a:	movs	r0, #3
    a17c:	bl	ad18 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a180:	mov	r0, r4
    a182:	adds	r4, #1
    a184:	bl	9dc0 <rx_queue_transfer>
    a188:	cmp	r4, #8
    a18a:	bne.n	a180 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    a18c:	ldr	r3, [pc, #92]	; (a1ec <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    a18e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    a190:	ldr	r0, [pc, #92]	; (a1f0 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    a192:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    a194:	ldr	r4, [pc, #92]	; (a1f4 <usb_serial_configure+0xfc>)
    a196:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a198:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a19c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a1a0:	ldr.w	r2, [r3, #328]	; 0x148
    a1a4:	orr.w	r2, r2, #16777216	; 0x1000000
    a1a8:	str.w	r2, [r3, #328]	; 0x148
    a1ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    a1b0:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    a1b2:	ldr.w	r8, [pc, #68]	; a1f8 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    a1b6:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    a1b8:	strh.w	r3, [r8]
    a1bc:	b.n	a114 <usb_serial_configure+0x1c>
    a1be:	nop
    a1c0:	.word	0x20006d90
    a1c4:	.word	0x20006bb4
    a1c8:	.word	0x20006d00
    a1cc:	.word	0x20006cd0
    a1d0:	.word	0x20006bb7
    a1d4:	.word	0x20006ce6
    a1d8:	.word	0x20006bc0
    a1dc:	.word	0x20006ce4
    a1e0:	.word	0x20006ba4
    a1e4:	.word	0x20006cc0
    a1e8:	.word	0x00009e2d
    a1ec:	.word	0x402e0000
    a1f0:	.word	0x20006d80
    a1f4:	.word	0x00009ee1
    a1f8:	.word	0x20006cce
    a1fc:	.word	0x20006ce0

0000a200 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    a200:	ldr	r3, [pc, #196]	; (a2c8 <usb_serial_read+0xc8>)
    a202:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    a206:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    a20a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    a20c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    a20e:	ldr	r3, [pc, #188]	; (a2cc <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    a210:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    a212:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    a214:	cmp	r1, #0
    a216:	beq.n	a2c0 <usb_serial_read+0xc0>
    a218:	ldr	r3, [pc, #180]	; (a2d0 <usb_serial_read+0xd0>)
    a21a:	uxtb	r4, r4
    a21c:	ldrb	r3, [r3, #0]
    a21e:	cmp	r4, r3
    a220:	beq.n	a2c4 <usb_serial_read+0xc4>
    a222:	mov	sl, r0
    a224:	movs	r7, #0
    a226:	ldr.w	fp, [pc, #192]	; a2e8 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    a22a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a22c:	ldr	r3, [pc, #164]	; (a2d4 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    a22e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a232:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    a234:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a236:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    a238:	ldr	r3, [pc, #156]	; (a2d8 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    a23a:	it	cs
    a23c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a23e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a240:	ldr	r3, [pc, #144]	; (a2d4 <usb_serial_read+0xd4>)
    a242:	ldrh.w	lr, [r3, r5, lsl #1]
    a246:	ldr	r3, [pc, #148]	; (a2dc <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a248:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a24c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a250:	ldr	r3, [pc, #140]	; (a2e0 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    a252:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a256:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    a258:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a25a:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    a25c:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    a25e:	bcs.n	a294 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a260:	add.w	r1, lr, r5, lsl #9
    a264:	mov	r2, r8
    a266:	add	r1, r3
    a268:	bl	9c8c <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    a26c:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    a26e:	ldr.w	r1, [fp]
    a272:	mov	r0, r9
			rx_index[i] += len;
    a274:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    a278:	rsb	r1, r8, r1
			rx_index[i] += len;
    a27c:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    a27e:	str.w	r1, [fp]
			rx_index[i] += len;
    a282:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a286:	ldr	r3, [pc, #92]	; (a2e4 <usb_serial_read+0xe4>)
    a288:	mov.w	r2, #131072	; 0x20000
    a28c:	str	r2, [r3, #0]
	return count;
}
    a28e:	add	sp, #12
    a290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a294:	bl	9c8c <memcpy>
			p += avail;
			rx_available -= avail;
    a298:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    a29c:	uxtb	r3, r4
			rx_queue_transfer(i);
    a29e:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    a2a0:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    a2a2:	add	sl, r6
			rx_available -= avail;
    a2a4:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    a2a8:	ldr	r2, [pc, #32]	; (a2cc <usb_serial_read+0xcc>)
    a2aa:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    a2ac:	bl	9dc0 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    a2b0:	cmp	r9, r7
    a2b2:	bls.n	a2bc <usb_serial_read+0xbc>
    a2b4:	ldr	r3, [pc, #24]	; (a2d0 <usb_serial_read+0xd0>)
    a2b6:	ldrb	r3, [r3, #0]
    a2b8:	cmp	r4, r3
    a2ba:	bne.n	a22a <usb_serial_read+0x2a>
    a2bc:	mov	r0, r7
    a2be:	b.n	a286 <usb_serial_read+0x86>
    a2c0:	mov	r0, r1
    a2c2:	b.n	a286 <usb_serial_read+0x86>
    a2c4:	movs	r0, #0
    a2c6:	b.n	a286 <usb_serial_read+0x86>
    a2c8:	.word	0xe000e18c
    a2cc:	.word	0x20006cc0
    a2d0:	.word	0x20006ce4
    a2d4:	.word	0x20006ba4
    a2d8:	.word	0x20006cc4
    a2dc:	.word	0x20006cd0
    a2e0:	.word	0x20200000
    a2e4:	.word	0xe000e10c
    a2e8:	.word	0x20006ce0

0000a2ec <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a2ec:	ldr	r3, [pc, #44]	; (a31c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a2ee:	ldr	r2, [pc, #48]	; (a320 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a2f0:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    a2f2:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a2f4:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    a2f6:	cmp	r3, r2
    a2f8:	beq.n	a316 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a2fa:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a2fc:	ldr	r0, [pc, #36]	; (a324 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a2fe:	ldr	r2, [pc, #40]	; (a328 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    a300:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a302:	ldr	r1, [pc, #40]	; (a32c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    a304:	it	cs
    a306:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a308:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a30a:	ldrh.w	r1, [r1, r3, lsl #1]
    a30e:	add.w	r3, r2, r3, lsl #9
    a312:	ldrb	r0, [r3, r1]
    a314:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    a316:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    a31a:	bx	lr
    a31c:	.word	0x20006cc0
    a320:	.word	0x20006ce4
    a324:	.word	0x20006cc4
    a328:	.word	0x20200000
    a32c:	.word	0x20006ba4

0000a330 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    a330:	ldr	r3, [pc, #4]	; (a338 <usb_serial_available+0x8>)
    a332:	ldr	r0, [r3, #0]
}
    a334:	bx	lr
    a336:	nop
    a338:	.word	0x20006ce0

0000a33c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    a33c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a340:	ldr	r6, [pc, #84]	; (a398 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    a342:	ldr	r5, [pc, #88]	; (a39c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    a344:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    a346:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    a348:	uxtb	r4, r4
	while (tail != rx_head) {
    a34a:	cmp	r4, r3
    a34c:	beq.n	a392 <usb_serial_flush_input+0x56>
    a34e:	ldr.w	r9, [pc, #84]	; a3a4 <usb_serial_flush_input+0x68>
    a352:	ldr.w	fp, [pc, #84]	; a3a8 <usb_serial_flush_input+0x6c>
    a356:	ldr.w	r8, [pc, #84]	; a3ac <usb_serial_flush_input+0x70>
    a35a:	ldr	r7, [pc, #68]	; (a3a0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    a35c:	adds	r4, #1
    a35e:	cmp	r4, #8
    a360:	uxtb.w	sl, r4
    a364:	bls.n	a36a <usb_serial_flush_input+0x2e>
    a366:	movs	r4, #0
    a368:	mov	sl, r4
		uint32_t i = rx_list[tail];
    a36a:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a36e:	ldr.w	r2, [fp]
    a372:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    a376:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    a378:	ldrh.w	r1, [r7, r1, lsl #1]
    a37c:	subs	r3, r3, r1
    a37e:	subs	r3, r2, r3
    a380:	str.w	r3, [fp]
		rx_queue_transfer(i);
    a384:	bl	9dc0 <rx_queue_transfer>
		rx_tail = tail;
    a388:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    a38c:	ldrb	r3, [r5, #0]
    a38e:	cmp	r4, r3
    a390:	bne.n	a35c <usb_serial_flush_input+0x20>
    a392:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a396:	nop
    a398:	.word	0x20006cc0
    a39c:	.word	0x20006ce4
    a3a0:	.word	0x20006ba4
    a3a4:	.word	0x20006cc4
    a3a8:	.word	0x20006ce0
    a3ac:	.word	0x20006cd0

0000a3b0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a3b0:	push	{lr}
    a3b2:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    a3b4:	movs	r1, #1
    a3b6:	add.w	r0, sp, #7
    a3ba:	bl	a200 <usb_serial_read>
    a3be:	cbz	r0, a3ca <usb_serial_getchar+0x1a>
    a3c0:	ldrb.w	r0, [sp, #7]
	return -1;
}
    a3c4:	add	sp, #12
    a3c6:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    a3ca:	mov.w	r0, #4294967295
    a3ce:	b.n	a3c4 <usb_serial_getchar+0x14>

0000a3d0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a3d0:	ldr	r3, [pc, #36]	; (a3f8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a3d2:	push	{lr}
    a3d4:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a3d6:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a3d8:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a3dc:	cbnz	r3, a3e8 <usb_serial_putchar+0x18>
    a3de:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    a3e2:	add	sp, #12
    a3e4:	ldr.w	pc, [sp], #4
    a3e8:	movs	r1, #1
    a3ea:	add.w	r0, sp, #7
    a3ee:	bl	9f78 <usb_serial_write.part.1>
    a3f2:	add	sp, #12
    a3f4:	ldr.w	pc, [sp], #4
    a3f8:	.word	0x20006db8

0000a3fc <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a3fc:	ldr	r3, [pc, #16]	; (a410 <usb_serial_write+0x14>)
    a3fe:	ldrb	r3, [r3, #0]
    a400:	and.w	r2, r3, #255	; 0xff
    a404:	cbz	r3, a40a <usb_serial_write+0xe>
    a406:	b.w	9f78 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a40a:	mov	r0, r2
    a40c:	bx	lr
    a40e:	nop
    a410:	.word	0x20006db8

0000a414 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a414:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a418:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    a41a:	ldr.w	r8, [pc, #64]	; a45c <usb_serial_write_buffer_free+0x48>
    a41e:	movs	r3, #1
    a420:	ldr	r5, [pc, #48]	; (a454 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    a422:	mov	r7, r4
    a424:	ldr	r6, [pc, #48]	; (a458 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    a426:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a42a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a42c:	mov	r0, r5
    a42e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a430:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a432:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a436:	beq.n	a444 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a438:	bl	adfc <usb_transfer_status>
    a43c:	lsls	r3, r0, #24
    a43e:	it	pl
    a440:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a444:	cmp	r4, #4
    a446:	bne.n	a42a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a448:	movs	r3, #0
	return sum;
}
    a44a:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a44c:	strb.w	r3, [r8]
	return sum;
}
    a450:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a454:	.word	0x20006d00
    a458:	.word	0x20006bb7
    a45c:	.word	0x20006bb6

0000a460 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a460:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    a464:	ldr	r3, [pc, #124]	; (a4e4 <usb_serial_flush_output+0x84>)
    a466:	ldrb	r3, [r3, #0]
    a468:	cbz	r3, a470 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a46a:	ldr	r5, [pc, #124]	; (a4e8 <usb_serial_flush_output+0x88>)
    a46c:	ldrh	r2, [r5, #0]
    a46e:	cbnz	r2, a474 <usb_serial_flush_output+0x14>
    a470:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a474:	ldr.w	r8, [pc, #132]	; a4fc <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a478:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a47c:	ldr	r6, [pc, #108]	; (a4ec <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a47e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a482:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a486:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a488:	ldr	r4, [pc, #100]	; (a4f0 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a48a:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a48c:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a490:	ldr	r7, [pc, #96]	; (a4f4 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a492:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a496:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a498:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a49c:	mov	r1, r4
    a49e:	bl	ad80 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a4a2:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a4a6:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    a4aa:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a4ae:	ldr	r3, [pc, #72]	; (a4f8 <usb_serial_flush_output+0x98>)
    a4b0:	str	r1, [r3, #0]
		location += 32;
    a4b2:	adds	r1, #32
	} while (location < end_addr);
    a4b4:	cmp	r2, r1
    a4b6:	bhi.n	a4b0 <usb_serial_flush_output+0x50>
	asm("dsb");
    a4b8:	dsb	sy
	asm("isb");
    a4bc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a4c0:	movs	r0, #3
    a4c2:	mov	r1, r6
    a4c4:	bl	adb0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a4c8:	ldrb.w	r3, [r8]
    a4cc:	ldr	r2, [pc, #44]	; (a4fc <usb_serial_flush_output+0x9c>)
    a4ce:	adds	r3, #1
    a4d0:	uxtb	r3, r3
    a4d2:	cmp	r3, #3
    a4d4:	it	hi
    a4d6:	movhi	r3, #0
    a4d8:	strb	r3, [r2, #0]
	tx_available = 0;
    a4da:	movs	r3, #0
    a4dc:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    a4de:	strb	r3, [r7, #0]
    a4e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a4e4:	.word	0x20006db8
    a4e8:	.word	0x20006ce6
    a4ec:	.word	0x20006d00
    a4f0:	.word	0x20201000
    a4f4:	.word	0x20006bb6
    a4f8:	.word	0xe000ef70
    a4fc:	.word	0x20006bb7

0000a500 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a500:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    a502:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a504:	cbz	r3, a50e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a506:	ldr	r3, [r2, #4]
    a508:	orr.w	r3, r3, #32768	; 0x8000
    a50c:	str	r3, [r2, #4]
	}
	__disable_irq();
    a50e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a510:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a512:	cbz	r4, a54c <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a514:	ldr	r3, [pc, #80]	; (a568 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    a516:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a518:	ldr.w	r4, [r3, #432]	; 0x1b0
    a51c:	tst	r4, r1
    a51e:	bne.n	a560 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    a520:	ldr	r5, [pc, #72]	; (a56c <schedule_transfer+0x6c>)
    a522:	ldr	r7, [r5, #0]
    a524:	b.n	a530 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a526:	ldr	r4, [r5, #0]
    a528:	subs	r4, r4, r7
    a52a:	cmp.w	r4, #2400	; 0x960
    a52e:	bcs.n	a548 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a530:	ldr.w	r4, [r3, #320]	; 0x140
    a534:	orr.w	r4, r4, #16384	; 0x4000
    a538:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a53c:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a540:	ldr.w	r4, [r3, #320]	; 0x140
    a544:	lsls	r4, r4, #17
    a546:	bpl.n	a526 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a548:	tst	r1, r6
    a54a:	bne.n	a560 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    a54c:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    a54e:	ldr	r4, [pc, #24]	; (a568 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    a550:	str	r2, [r0, #8]
	endpoint->status = 0;
    a552:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    a554:	ldr.w	r3, [r4, #432]	; 0x1b0
    a558:	orrs	r1, r3
    a55a:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a55e:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    a560:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a562:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a564:	pop	{r4, r5, r6, r7}
    a566:	bx	lr
    a568:	.word	0x402e0000
    a56c:	.word	0xe0001004

0000a570 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a570:	push	{r4, r5, r6, lr}
    a572:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    a574:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    a576:	cbz	r0, a59e <run_callbacks+0x2e>
    a578:	mov	r2, r0
    a57a:	movs	r4, #0
    a57c:	b.n	a586 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    a57e:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    a580:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    a582:	cmp	r2, #1
    a584:	beq.n	a5a0 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    a586:	ldr	r3, [r2, #4]
    a588:	ands.w	r3, r3, #128	; 0x80
    a58c:	beq.n	a57e <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    a58e:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a590:	cbz	r4, a59e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    a592:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    a594:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    a596:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a598:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    a59a:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a59c:	bne.n	a592 <run_callbacks+0x22>
    a59e:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    a5a0:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    a5a2:	str	r3, [r6, #52]	; 0x34
			break;
    a5a4:	b.n	a590 <run_callbacks+0x20>
    a5a6:	nop

0000a5a8 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a5a8:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    a5aa:	cbnz	r1, a5e6 <endpoint0_transmit.constprop.1+0x3e>
    a5ac:	ldr	r4, [pc, #132]	; (a634 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a5ae:	ldr	r1, [pc, #136]	; (a638 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a5b0:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a5b2:	ldr	r3, [pc, #136]	; (a63c <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a5b4:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a5b6:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a5ba:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a5bc:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    a5be:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    a5c0:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a5c2:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    a5c4:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a5c6:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a5ca:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a5ce:	ldr	r5, [pc, #112]	; (a640 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    a5d0:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a5d4:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    a5d6:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a5da:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    a5dc:	ldr.w	r3, [r2, #432]	; 0x1b0
    a5e0:	cmp	r3, #0
    a5e2:	bne.n	a5dc <endpoint0_transmit.constprop.1+0x34>
}
    a5e4:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a5e6:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a5e8:	ldr	r3, [pc, #88]	; (a644 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5ea:	ldr	r5, [pc, #80]	; (a63c <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a5ec:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a5ee:	ldr	r4, [pc, #68]	; (a634 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a5f0:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a5f4:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a5f6:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a5f8:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a5fa:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a5fe:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a600:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a604:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a606:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a60a:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a60e:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    a612:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a614:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a616:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a61a:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a61e:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a622:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a624:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a626:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a62a:	ldr.w	r3, [r2, #432]	; 0x1b0
    a62e:	cmp	r3, #0
    a630:	bne.n	a62a <endpoint0_transmit.constprop.1+0x82>
    a632:	b.n	a5ae <endpoint0_transmit.constprop.1+0x6>
    a634:	.word	0x20008000
    a638:	.word	0x20007020
    a63c:	.word	0x402e0000
    a640:	.word	0x20006d94
    a644:	.word	0x20007000

0000a648 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    a648:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a64c:	ldr	r4, [pc, #696]	; (a908 <isr+0x2c0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    a64e:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a650:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a654:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    a658:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a65c:	beq.n	a71c <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a65e:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a662:	cmp	r3, #0
    a664:	beq.n	a712 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a666:	mov.w	fp, #65537	; 0x10001
    a66a:	ldr.w	r9, [pc, #708]	; a930 <isr+0x2e8>
    a66e:	ldr	r6, [pc, #668]	; (a90c <isr+0x2c4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a670:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a672:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    a674:	str.w	r3, [r4, #428]	; 0x1ac
    a678:	ldr	r0, [r6, #40]	; 0x28
    a67a:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a67c:	ldr.w	r3, [r4, #320]	; 0x140
    a680:	orr.w	r3, r3, #8192	; 0x2000
    a684:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a688:	ldr.w	r3, [r4, #320]	; 0x140
    a68c:	lsls	r7, r3, #18
    a68e:	bpl.n	a67c <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a690:	ldr.w	r3, [r5, #320]	; 0x140
    a694:	bic.w	r3, r3, #8192	; 0x2000
    a698:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a69c:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a6a0:	ldr.w	r3, [r4, #436]	; 0x1b4
    a6a4:	ands.w	r3, r3, #65537	; 0x10001
    a6a8:	bne.n	a6a0 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a6aa:	uxth	r1, r0
    a6ac:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    a6b0:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a6b4:	cmp	r1, r7
    a6b6:	bhi.w	a822 <isr+0x1da>
    a6ba:	cmp.w	r1, #1664	; 0x680
    a6be:	bcs.w	aa94 <isr+0x44c>
    a6c2:	cmp.w	r1, #258	; 0x102
    a6c6:	beq.w	a9a0 <isr+0x358>
    a6ca:	bhi.w	a8b6 <isr+0x26e>
    a6ce:	cmp	r1, #128	; 0x80
    a6d0:	beq.w	a986 <isr+0x33e>
    a6d4:	cmp	r1, #130	; 0x82
    a6d6:	bne.w	a8a6 <isr+0x25e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a6da:	uxth	r2, r2
    a6dc:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a6e0:	cmp	r1, #7
    a6e2:	bhi.w	a8a6 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a6e6:	lsls	r1, r1, #2
    a6e8:	ldr	r0, [pc, #548]	; (a910 <isr+0x2c8>)
		reply_buffer[0] = 0;
    a6ea:	ldr	r7, [pc, #552]	; (a914 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a6ec:	add	r0, r1
    a6ee:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a6f0:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    a6f2:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    a6f4:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a6f6:	bpl.w	ab12 <isr+0x4ca>
    a6fa:	lsls	r2, r1, #15
    a6fc:	bpl.n	a702 <isr+0xba>
			reply_buffer[0] = 1;
    a6fe:	movs	r3, #1
    a700:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    a702:	movs	r1, #2
    a704:	ldr	r0, [pc, #524]	; (a914 <isr+0x2cc>)
    a706:	bl	a5a8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a70a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a70e:	cmp	r3, #0
    a710:	bne.n	a674 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a712:	ldr	r2, [pc, #500]	; (a908 <isr+0x2c0>)
    a714:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a718:	cmp	r3, #0
    a71a:	bne.n	a7be <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    a71c:	tst.w	r8, #64	; 0x40
    a720:	beq.n	a754 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a722:	ldr	r3, [pc, #484]	; (a908 <isr+0x2c0>)
    a724:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a728:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a72a:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a72e:	ldr.w	r1, [r3, #444]	; 0x1bc
    a732:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a736:	ldr.w	r4, [r2, #432]	; 0x1b0
    a73a:	ldr	r3, [pc, #460]	; (a908 <isr+0x2c0>)
    a73c:	cmp	r4, #0
    a73e:	bne.n	a736 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a740:	mov.w	r2, #4294967295
    a744:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a748:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    a74c:	bl	a0f4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    a750:	ldr	r3, [pc, #452]	; (a918 <isr+0x2d0>)
    a752:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    a754:	tst.w	r8, #16777216	; 0x1000000
    a758:	beq.n	a762 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a75a:	ldr	r3, [pc, #448]	; (a91c <isr+0x2d4>)
    a75c:	ldr	r3, [r3, #0]
    a75e:	cbz	r3, a762 <isr+0x11a>
    a760:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    a762:	tst.w	r8, #33554432	; 0x2000000
    a766:	beq.n	a770 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a768:	ldr	r3, [pc, #436]	; (a920 <isr+0x2d8>)
    a76a:	ldr	r3, [r3, #0]
    a76c:	cbz	r3, a770 <isr+0x128>
    a76e:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    a770:	tst.w	r8, #4
    a774:	beq.n	a788 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a776:	ldr	r3, [pc, #400]	; (a908 <isr+0x2c0>)
    a778:	ldr.w	r3, [r3, #388]	; 0x184
    a77c:	ands.w	r3, r3, #512	; 0x200
    a780:	beq.n	a81c <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    a782:	ldr	r3, [pc, #416]	; (a924 <isr+0x2dc>)
    a784:	movs	r2, #1
    a786:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a788:	ldr	r3, [pc, #380]	; (a908 <isr+0x2c0>)
    a78a:	ldr.w	r2, [r3, #328]	; 0x148
    a78e:	lsls	r2, r2, #24
    a790:	bpl.n	a7b8 <isr+0x170>
    a792:	tst.w	r8, #128	; 0x80
    a796:	beq.n	a7b8 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    a798:	ldr	r1, [pc, #396]	; (a928 <isr+0x2e0>)
    a79a:	ldrb	r2, [r1, #0]
    a79c:	cbz	r2, a7b8 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    a79e:	subs	r2, #1
    a7a0:	uxtb	r2, r2
    a7a2:	strb	r2, [r1, #0]
    a7a4:	cbnz	r2, a7b8 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    a7a6:	ldr	r1, [pc, #388]	; (a92c <isr+0x2e4>)
    a7a8:	ldrb	r2, [r1, #0]
    a7aa:	and.w	r2, r2, #247	; 0xf7
    a7ae:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    a7b0:	cmp	r2, #0
    a7b2:	beq.w	ac1a <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    a7b6:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    a7b8:	add	sp, #12
    a7ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a7be:	ldr	r1, [pc, #368]	; (a930 <isr+0x2e8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    a7c0:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a7c4:	ldr	r0, [r1, #0]
    a7c6:	tst	r3, r0
    a7c8:	bne.w	ab98 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    a7cc:	ldr	r2, [pc, #328]	; (a918 <isr+0x2d0>)
    a7ce:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    a7d0:	ands	r5, r3
    a7d2:	beq.n	a71c <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    a7d4:	lsrs	r7, r5, #16
    a7d6:	beq.n	a7f8 <isr+0x1b0>
    a7d8:	ldr	r6, [pc, #304]	; (a90c <isr+0x2c4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    a7da:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    a7de:	rbit	r4, r7
    a7e2:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a7e6:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    a7ea:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a7ee:	adds	r0, #64	; 0x40
    a7f0:	bl	a570 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    a7f4:	bics	r7, r4
    a7f6:	bne.n	a7de <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    a7f8:	uxth	r5, r5
				while(rx) {
    a7fa:	cmp	r5, #0
    a7fc:	beq.n	a71c <isr+0xd4>
    a7fe:	ldr	r6, [pc, #268]	; (a90c <isr+0x2c4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    a800:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    a802:	rbit	r4, r5
    a806:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    a80a:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    a80e:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    a812:	bl	a570 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    a816:	bics	r5, r4
    a818:	bne.n	a802 <isr+0x1ba>
    a81a:	b.n	a71c <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    a81c:	ldr	r2, [pc, #260]	; (a924 <isr+0x2dc>)
    a81e:	strb	r3, [r2, #0]
    a820:	b.n	a788 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a822:	movw	r7, #8225	; 0x2021
    a826:	cmp	r1, r7
    a828:	beq.n	a89e <isr+0x256>
    a82a:	bhi.w	a940 <isr+0x2f8>
    a82e:	cmp.w	r1, #2176	; 0x880
    a832:	beq.w	aa78 <isr+0x430>
    a836:	cmp.w	r1, #2304	; 0x900
    a83a:	bne.n	a8a6 <isr+0x25e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a83c:	ubfx	r0, r0, #16, #8
    a840:	ldr	r1, [pc, #240]	; (a934 <isr+0x2ec>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a842:	mov.w	r2, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a846:	ldr	r7, [pc, #240]	; (a938 <isr+0x2f0>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a848:	strb	r0, [r1, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    a84a:	mov.w	r1, #13369548	; 0xcc00cc
    a84e:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a850:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a854:	str.w	r2, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a858:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    a85c:	str.w	r1, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    a860:	bl	a0f8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a864:	ldr	r2, [pc, #212]	; (a93c <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a866:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a868:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a86a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a86c:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a86e:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a870:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a872:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a874:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a878:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a87c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a87e:	orr.w	r2, r1, #65536	; 0x10000
    a882:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a886:	ldr	r2, [pc, #168]	; (a930 <isr+0x2e8>)
    a888:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a88a:	ldr.w	r3, [r4, #432]	; 0x1b0
    a88e:	cmp	r3, #0
    a890:	bne.n	a88a <isr+0x242>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a892:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a896:	cmp	r3, #0
    a898:	bne.w	a674 <isr+0x2c>
    a89c:	b.n	a712 <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    a89e:	lsrs	r1, r2, #16
    a8a0:	cmp	r1, #7
    a8a2:	beq.w	ab1a <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a8a6:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a8aa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a8ae:	cmp	r3, #0
    a8b0:	bne.w	a674 <isr+0x2c>
    a8b4:	b.n	a712 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a8b6:	movw	r7, #770	; 0x302
    a8ba:	cmp	r1, r7
    a8bc:	beq.w	aa18 <isr+0x3d0>
    a8c0:	cmp.w	r1, #1280	; 0x500
    a8c4:	bne.n	a8a6 <isr+0x25e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a8c6:	ldr	r2, [pc, #116]	; (a93c <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8c8:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a8ca:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a8cc:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a8ce:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a8d0:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8d2:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8d4:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a8d8:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a8dc:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a8de:	orr.w	r3, r1, #65536	; 0x10000
    a8e2:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a8e6:	ldr.w	r3, [r4, #432]	; 0x1b0
    a8ea:	cmp	r3, #0
    a8ec:	bne.n	a8e6 <isr+0x29e>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a8ee:	lsrs	r3, r0, #16
    a8f0:	lsls	r3, r3, #25
    a8f2:	orr.w	r3, r3, #16777216	; 0x1000000
    a8f6:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a8fa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a8fe:	cmp	r3, #0
    a900:	bne.w	a674 <isr+0x2c>
    a904:	b.n	a712 <isr+0xca>
    a906:	nop
    a908:	.word	0x402e0000
    a90c:	.word	0x20008000
    a910:	.word	0x402e01c0
    a914:	.word	0x20006da8
    a918:	.word	0x20006d84
    a91c:	.word	0x20006d80
    a920:	.word	0x20006d8c
    a924:	.word	0x20006d90
    a928:	.word	0x20006d98
    a92c:	.word	0x20006d88
    a930:	.word	0x20006d94
    a934:	.word	0x20006db8
    a938:	.word	0x00cc0002
    a93c:	.word	0x20007020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a940:	movw	r3, #8737	; 0x2221
    a944:	cmp	r1, r3
    a946:	beq.n	aa00 <isr+0x3b8>
    a948:	movw	r3, #8993	; 0x2321
    a94c:	cmp	r1, r3
    a94e:	bne.n	a8a6 <isr+0x25e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a950:	ldr	r3, [pc, #724]	; (ac28 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a952:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    a954:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a956:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a958:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a95a:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a95c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a95e:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a960:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a964:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a968:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a96a:	orr.w	r3, r2, #65536	; 0x10000
    a96e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a972:	ldr.w	r3, [r4, #432]	; 0x1b0
    a976:	cmp	r3, #0
    a978:	bne.n	a972 <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a97a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a97e:	cmp	r3, #0
    a980:	bne.w	a674 <isr+0x2c>
    a984:	b.n	a712 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a986:	ldr	r2, [pc, #676]	; (ac2c <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    a988:	movs	r1, #2
    a98a:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a98c:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    a98e:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    a990:	bl	a5a8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a994:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a998:	cmp	r3, #0
    a99a:	bne.w	a674 <isr+0x2c>
    a99e:	b.n	a712 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a9a0:	uxth	r2, r2
    a9a2:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a9a6:	cmp	r3, #7
    a9a8:	bhi.w	a8a6 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a9ac:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a9b0:	mov.w	r3, r3, lsl #2
    a9b4:	ldr	r2, [pc, #632]	; (ac30 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a9b6:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9ba:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a9be:	add	r2, r3
    a9c0:	ldr	r3, [r2, #0]
    a9c2:	ite	ne
    a9c4:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a9c8:	biceq.w	r3, r3, #1
    a9cc:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a9ce:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9d0:	ldr	r3, [pc, #596]	; (ac28 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a9d2:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a9d4:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9d6:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a9d8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a9da:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a9de:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a9e2:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a9e4:	orr.w	r3, r2, #65536	; 0x10000
    a9e8:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a9ec:	ldr.w	r3, [r4, #432]	; 0x1b0
    a9f0:	cmp	r3, #0
    a9f2:	bne.n	a9ec <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a9f4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a9f8:	cmp	r3, #0
    a9fa:	bne.w	a674 <isr+0x2c>
    a9fe:	b.n	a712 <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    aa00:	uxth	r2, r2
    aa02:	cmp	r2, #1
    aa04:	bne.n	a950 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    aa06:	ldr	r3, [pc, #556]	; (ac34 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    aa08:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    aa0c:	ldr	r2, [pc, #552]	; (ac38 <isr+0x5f0>)
    aa0e:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    aa10:	ldr	r3, [pc, #552]	; (ac3c <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    aa12:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    aa14:	strb	r0, [r3, #0]
    aa16:	b.n	a950 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    aa18:	uxth	r2, r2
    aa1a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    aa1e:	cmp	r3, #7
    aa20:	bhi.w	a8a6 <isr+0x25e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    aa24:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aa28:	mov.w	r3, r3, lsl #2
    aa2c:	ldr	r2, [pc, #512]	; (ac30 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aa2e:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa32:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aa36:	add	r2, r3
    aa38:	ldr	r3, [r2, #0]
    aa3a:	ite	ne
    aa3c:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    aa40:	orreq.w	r3, r3, #1
    aa44:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa46:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa48:	ldr	r3, [pc, #476]	; (ac28 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aa4a:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa4c:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa4e:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa50:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa52:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aa56:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aa5a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    aa5c:	orr.w	r3, r2, #65536	; 0x10000
    aa60:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    aa64:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa68:	cmp	r3, #0
    aa6a:	bne.n	aa64 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aa6c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aa70:	cmp	r3, #0
    aa72:	bne.w	a674 <isr+0x2c>
    aa76:	b.n	a712 <isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    aa78:	ldr	r2, [pc, #452]	; (ac40 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    aa7a:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    aa7c:	ldr	r3, [pc, #428]	; (ac2c <isr+0x5e4>)
    aa7e:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    aa80:	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    aa82:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    aa84:	bl	a5a8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aa88:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aa8c:	cmp	r3, #0
    aa8e:	bne.w	a674 <isr+0x2c>
    aa92:	b.n	a712 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    aa94:	ldr	r3, [pc, #428]	; (ac44 <isr+0x5fc>)
    aa96:	ldr	r1, [r3, #4]
    aa98:	cmp	r1, #0
    aa9a:	beq.w	a8a6 <isr+0x25e>
    aa9e:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    aaa0:	uxth.w	lr, r2
    aaa4:	b.n	aab0 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    aaa6:	adds	r3, #12
    aaa8:	ldr	r1, [r3, #4]
    aaaa:	cmp	r1, #0
    aaac:	beq.w	a8a6 <isr+0x25e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    aab0:	ldrh	r7, [r3, #0]
    aab2:	cmp	r7, r0
    aab4:	bne.n	aaa6 <isr+0x45e>
    aab6:	ldrh	r7, [r3, #2]
    aab8:	cmp	r7, lr
    aaba:	bne.n	aaa6 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    aabc:	lsrs	r7, r0, #8
    aabe:	cmp	r7, #3
    aac0:	beq.w	ac96 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    aac4:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    aac6:	lsrs	r2, r2, #16
    aac8:	cmp	r3, r2
    aaca:	it	cs
    aacc:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    aace:	cmp.w	r0, #512	; 0x200
    aad2:	beq.w	ac78 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    aad6:	cmp.w	r0, #1792	; 0x700
    aada:	beq.w	abf4 <isr+0x5ac>
    aade:	ldr	r7, [pc, #360]	; (ac48 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    aae0:	mov	r2, r3
    aae2:	str	r3, [sp, #4]
    aae4:	mov	r0, r7
    aae6:	bl	9c8c <memcpy>
    aaea:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    aaec:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    aaf0:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    aaf2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    aaf6:	ldr	r1, [pc, #340]	; (ac4c <isr+0x604>)
    aaf8:	str	r2, [r1, #0]
		location += 32;
    aafa:	adds	r2, #32
	} while (location < end_addr);
    aafc:	cmp	r7, r2
    aafe:	bhi.n	aaf6 <isr+0x4ae>
	asm("dsb");
    ab00:	dsb	sy
	asm("isb");
    ab04:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    ab08:	ldr	r0, [pc, #316]	; (ac48 <isr+0x600>)
    ab0a:	mov	r1, r3
    ab0c:	bl	a5a8 <endpoint0_transmit.constprop.1>
    ab10:	b.n	a70a <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ab12:	lsls	r3, r1, #31
    ab14:	bpl.w	a702 <isr+0xba>
    ab18:	b.n	a6fe <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ab1a:	ldr	r7, [pc, #308]	; (ac50 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ab1c:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    ab20:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ab22:	ldr	r1, [pc, #304]	; (ac54 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ab24:	ldr	r3, [pc, #304]	; (ac58 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ab26:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    ab28:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ab2c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ab2e:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    ab30:	ldr	r1, [pc, #296]	; (ac5c <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ab32:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    ab36:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ab38:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ab3c:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ab40:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ab42:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ab46:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ab4a:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    ab4e:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ab52:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ab54:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ab58:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ab5a:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    ab5c:	ldr.w	r3, [r4, #432]	; 0x1b0
    ab60:	cmp	r3, #0
    ab62:	bne.n	ab5c <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    ab64:	ldr	r2, [pc, #192]	; (ac28 <isr+0x5e0>)
    ab66:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ab68:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ab6c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ab6e:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ab70:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ab74:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ab76:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ab78:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ab7c:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    ab80:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    ab82:	orr.w	r3, r1, r0
    ab86:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ab8a:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    ab8e:	ldr.w	r3, [r4, #432]	; 0x1b0
    ab92:	cmp	r3, #0
    ab94:	bne.n	ab8e <isr+0x546>
    ab96:	b.n	a70a <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ab98:	ldr	r0, [pc, #180]	; (ac50 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab9a:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ab9e:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    aba0:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    aba2:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    aba4:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    aba6:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    aba8:	bne.w	a7cc <isr+0x184>
    abac:	uxth	r1, r0
    abae:	cmp	r1, #1
    abb0:	bne.w	a7cc <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    abb4:	ldr	r1, [pc, #164]	; (ac5c <isr+0x614>)
    abb6:	ldr	r4, [pc, #168]	; (ac60 <isr+0x618>)
    abb8:	ldmia	r1, {r0, r1}
    abba:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    abbc:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    abbe:	str	r0, [r4, #0]
    abc0:	strh	r1, [r4, #4]
    abc2:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    abc4:	bne.w	a7cc <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    abc8:	cpsid	i
	sof_usage |= (1 << interface);
    abca:	ldr	r0, [pc, #152]	; (ac64 <isr+0x61c>)
    abcc:	ldrb	r1, [r0, #0]
    abce:	orr.w	r1, r1, #8
    abd2:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    abd4:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    abd8:	lsls	r0, r1, #24
    abda:	bmi.n	abea <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    abdc:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    abe0:	movs	r0, #128	; 0x80
    abe2:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    abe6:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    abea:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    abec:	ldr	r2, [pc, #120]	; (ac68 <isr+0x620>)
    abee:	movs	r1, #80	; 0x50
    abf0:	strb	r1, [r2, #0]
    abf2:	b.n	a7cc <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    abf4:	ldr	r0, [pc, #116]	; (ac6c <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    abf6:	mov	r2, r3
    abf8:	ldr	r7, [pc, #76]	; (ac48 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    abfa:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    abfe:	ldr	r1, [pc, #112]	; (ac70 <isr+0x628>)
    ac00:	ldr	r0, [pc, #112]	; (ac74 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    ac02:	str	r3, [sp, #4]
    ac04:	cmp.w	lr, #0
    ac08:	it	eq
    ac0a:	moveq	r1, r0
    ac0c:	mov	r0, r7
    ac0e:	bl	9c8c <memcpy>
					usb_descriptor_buffer[1] = 7;
    ac12:	movs	r2, #7
    ac14:	ldr	r3, [sp, #4]
    ac16:	strb	r2, [r7, #1]
    ac18:	b.n	aaec <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ac1a:	ldr.w	r2, [r3, #328]	; 0x148
    ac1e:	bic.w	r2, r2, #128	; 0x80
    ac22:	str.w	r2, [r3, #328]	; 0x148
    ac26:	b.n	a7b6 <isr+0x16e>
    ac28:	.word	0x20007020
    ac2c:	.word	0x20006da8
    ac30:	.word	0x402e01c0
    ac34:	.word	0x20006dc4
    ac38:	.word	0x20006e54
    ac3c:	.word	0x20006ce8
    ac40:	.word	0x20006db8
    ac44:	.word	0x20000880
    ac48:	.word	0x20203000
    ac4c:	.word	0xe000ef70
    ac50:	.word	0x20006da0
    ac54:	.word	0x00070080
    ac58:	.word	0x20007000
    ac5c:	.word	0x20006db0
    ac60:	.word	0x20006e4c
    ac64:	.word	0x20006d88
    ac68:	.word	0x20006d98
    ac6c:	.word	0x20006d90
    ac70:	.word	0x60001a68
    ac74:	.word	0x60001ad4

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    ac78:	ldr	r0, [pc, #40]	; (aca4 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ac7a:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    ac7c:	ldr	r1, [pc, #40]	; (aca8 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    ac7e:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    ac80:	ldr	r0, [pc, #40]	; (acac <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    ac82:	str	r3, [sp, #4]
    ac84:	cmp	r7, #0
    ac86:	it	eq
    ac88:	moveq	r1, r0
    ac8a:	ldr	r0, [pc, #36]	; (acb0 <isr+0x668>)
    ac8c:	bl	9c8c <memcpy>
    ac90:	ldr	r7, [pc, #28]	; (acb0 <isr+0x668>)
    ac92:	ldr	r3, [sp, #4]
    ac94:	b.n	aaec <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    ac96:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    ac98:	ldrb	r3, [r1, #0]
    ac9a:	cmp	r3, r2
    ac9c:	it	cs
    ac9e:	movcs	r3, r2
    aca0:	b.n	aad6 <isr+0x48e>
    aca2:	nop
    aca4:	.word	0x20006d90
    aca8:	.word	0x60001ad4
    acac:	.word	0x60001a68
    acb0:	.word	0x20203000

0000acb4 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acb4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    acb6:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    acba:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acbe:	ite	ne
    acc0:	movne	r7, #0
    acc2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    acc6:	cmp	r2, #3
    acc8:	bls.n	acce <usb_config_rx+0x1a>
    acca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    acce:	mov.w	sl, r0, lsl #7
    acd2:	ldr.w	r9, [pc, #64]	; ad14 <usb_config_rx+0x60>
    acd6:	mov	r5, r1
    acd8:	mov	r4, r0
    acda:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    acde:	movs	r1, #0
    ace0:	movs	r2, #64	; 0x40
    ace2:	mov	r8, r3
    ace4:	mov	r0, r6
    ace6:	bl	cf7c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    acea:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    acec:	orr.w	r1, r7, r5, lsl #16
    acf0:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    acf4:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    acf8:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    acfa:	cmp.w	r8, #0
    acfe:	beq.n	acca <usb_config_rx+0x16>
    ad00:	ldr	r3, [pc, #12]	; (ad10 <usb_config_rx+0x5c>)
    ad02:	lsls	r0, r4
    ad04:	ldr	r4, [r3, #0]
    ad06:	orrs	r0, r4
    ad08:	str	r0, [r3, #0]
    ad0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad0e:	nop
    ad10:	.word	0x20006d84
    ad14:	.word	0x20008000

0000ad18 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ad18:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ad1a:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ad1e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ad22:	ite	ne
    ad24:	movne	r7, #0
    ad26:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ad2a:	cmp	r2, #3
    ad2c:	bls.n	ad32 <usb_config_tx+0x1a>
    ad2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad32:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ad34:	lsls	r5, r0, #7
    ad36:	ldr.w	r9, [pc, #68]	; ad7c <usb_config_tx+0x64>
    ad3a:	mov	r8, r1
    ad3c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad3e:	movs	r1, #0
    ad40:	mov	r4, r0
    ad42:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ad44:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad48:	mov	r0, sl
    ad4a:	bl	cf7c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ad4e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ad50:	orr.w	r1, r7, r8, lsl #16
    ad54:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ad58:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ad5c:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ad60:	cmp	r6, #0
    ad62:	beq.n	ad2e <usb_config_tx+0x16>
    ad64:	add.w	r0, r4, #16
    ad68:	ldr	r3, [pc, #12]	; (ad78 <usb_config_tx+0x60>)
    ad6a:	lsls	r2, r0
    ad6c:	ldr	r0, [r3, #0]
    ad6e:	orrs	r2, r0
    ad70:	str	r2, [r3, #0]
    ad72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad76:	nop
    ad78:	.word	0x20006d84
    ad7c:	.word	0x20008000

0000ad80 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad80:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    ad82:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    ad84:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad86:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    ad8a:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad8c:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ad8e:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ad90:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    ad94:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    ad98:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    ad9c:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ada0:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ada2:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    ada4:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    ada6:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    ada8:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    adaa:	pop	{r4, r5, r6, r7}
    adac:	bx	lr
    adae:	nop

0000adb0 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    adb0:	subs	r3, r0, #2
    adb2:	cmp	r3, #3
    adb4:	bls.n	adb8 <usb_transmit+0x8>
    adb6:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    adb8:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    adba:	ldr	r3, [pc, #24]	; (add4 <usb_transmit+0x24>)
    adbc:	add.w	r4, r0, #16
    adc0:	movs	r5, #1
    adc2:	mov	r2, r1
    adc4:	add.w	r0, r3, r0, lsl #7
    adc8:	lsl.w	r1, r5, r4
}
    adcc:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    adce:	b.w	a500 <schedule_transfer>
    add2:	nop
    add4:	.word	0x20008040

0000add8 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    add8:	subs	r3, r0, #2
    adda:	cmp	r3, #3
    addc:	bls.n	ade0 <usb_receive+0x8>
    adde:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    ade0:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ade2:	ldr	r3, [pc, #20]	; (adf8 <usb_receive+0x20>)
    ade4:	movs	r4, #1
    ade6:	mov	r2, r1
    ade8:	lsl.w	r1, r4, r0
    adec:	add.w	r0, r3, r0, lsl #7
}
    adf0:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    adf4:	b.w	a500 <schedule_transfer>
    adf8:	.word	0x20008000

0000adfc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    adfc:	ldr	r0, [r0, #4]
#endif
}
    adfe:	bx	lr

0000ae00 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    ae00:	cmp	r0, #0
    ae02:	beq.n	aeb4 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ae04:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    ae06:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae0a:	sub	sp, #20
    ae0c:	mov	fp, r0
    ae0e:	ldr	r4, [pc, #168]	; (aeb8 <delay+0xb8>)
    ae10:	ldr	r5, [pc, #168]	; (aebc <delay+0xbc>)
    ae12:	ldr	r6, [pc, #172]	; (aec0 <delay+0xc0>)
    ae14:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ae18:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ae1c:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    ae1e:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ae20:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    ae24:	cmp	r1, #0
    ae26:	bne.n	ae18 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ae28:	ldr	r7, [pc, #152]	; (aec4 <delay+0xc4>)
    ae2a:	strd	r8, r9, [sp, #8]
    ae2e:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    ae30:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae32:	ldr	r2, [pc, #148]	; (aec8 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    ae34:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ae38:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae3a:	ldr	r2, [r2, #0]
    ae3c:	movs	r7, #1
    ae3e:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    ae42:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae46:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    ae48:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae4a:	cmp	r3, r1
    ae4c:	it	eq
    ae4e:	cmpeq	r2, r8
    ae50:	ite	cs
    ae52:	movcs	sl, r8
    ae54:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    ae56:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ae5a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ae5e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    ae60:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ae62:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    ae66:	cmp	r3, #0
    ae68:	bne.n	ae5a <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ae6a:	ldr	r0, [sp, #4]
    ae6c:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    ae6e:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae70:	ldr	r0, [pc, #84]	; (aec8 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae72:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae76:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae78:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae7c:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    ae80:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae84:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae88:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    ae8a:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae8c:	cmp	r1, r3
    ae8e:	it	eq
    ae90:	cmpeq	r0, r8
    ae92:	ite	cs
    ae94:	movcs	r3, r8
    ae96:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae98:	add	r2, r3
    ae9a:	cmp	r2, lr
    ae9c:	bcc.n	aeae <delay+0xae>
			if (--msec == 0) return;
    ae9e:	subs.w	fp, fp, #1
			start += 1000;
    aea2:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    aea6:	bne.n	ae5a <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    aea8:	add	sp, #20
    aeaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    aeae:	bl	b4fc <yield>
	}
    aeb2:	b.n	ae5a <delay+0x5a>
    aeb4:	bx	lr
    aeb6:	nop
    aeb8:	.word	0x20008300
    aebc:	.word	0x20006dc4
    aec0:	.word	0x20006dbc
    aec4:	.word	0xe0001004
    aec8:	.word	0x20006dc0

0000aecc <micros>:
	// TODO...
}

uint32_t micros(void)
{
    aecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    aed0:	ldr	r2, [pc, #72]	; (af1c <micros+0x50>)
    aed2:	movs	r6, #1
    aed4:	ldr	r5, [pc, #72]	; (af20 <micros+0x54>)
    aed6:	ldr	r4, [pc, #76]	; (af24 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    aed8:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    aedc:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    aede:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    aee0:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    aee4:	cmp	r3, #0
    aee6:	bne.n	aed8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    aee8:	ldr	r2, [pc, #60]	; (af28 <micros+0x5c>)
    aeea:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aeec:	ldr	r7, [pc, #60]	; (af2c <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    aeee:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    aef0:	mov.w	r9, #0
    aef4:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aef8:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    aefa:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    aefe:	cmp	r9, r3
    af00:	umull	r6, r7, r2, r6
    af04:	it	eq
    af06:	cmpeq	r8, r7
    af08:	mov	r4, r7
    af0a:	ite	cs
    af0c:	movcs	r4, r7
    af0e:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    af10:	mla	r0, r0, r1, r4
    af14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    af18:	bx	lr
    af1a:	nop
    af1c:	.word	0x20008300
    af20:	.word	0x20006dc4
    af24:	.word	0x20006dbc
    af28:	.word	0xe0001004
    af2c:	.word	0x20006dc0

0000af30 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    af30:	movs	r0, #4
    af32:	mov	r1, lr
    af34:	tst	r0, r1
    af36:	beq.n	af40 <_MSP>
    af38:	mrs	r0, PSP
    af3c:	b.w	af50 <HardFault_HandlerC>

0000af40 <_MSP>:
    af40:	mrs	r0, MSP
    af44:	b.w	af50 <HardFault_HandlerC>

0000af48 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    af48:	bx	lr
    af4a:	nop

0000af4c <startup_default_late_hook>:
#endif

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    af4c:	bx	lr
    af4e:	nop

0000af50 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    af50:	ldr	r3, [pc, #108]	; (afc0 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    af52:	movs	r1, #5
    af54:	ldr	r2, [pc, #108]	; (afc4 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    af56:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    af58:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    af5a:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    af5e:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    af60:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    af64:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    af66:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    af68:	ldr	r4, [pc, #92]	; (afc8 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    af6a:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    af6c:	ldr	r0, [pc, #92]	; (afcc <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    af6e:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    af70:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    af74:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    af78:	ldr	r3, [r4, #0]
    af7a:	cmp	r3, r0
    af7c:	bls.n	af84 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    af7e:	ldr	r0, [pc, #80]	; (afd0 <HardFault_HandlerC+0x80>)
    af80:	bl	b82c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    af84:	ldr	r5, [pc, #56]	; (afc0 <HardFault_HandlerC+0x70>)
    af86:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    af88:	movs	r0, #0
    af8a:	ldr	r2, [pc, #72]	; (afd4 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    af8c:	ldr	r1, [pc, #72]	; (afd8 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    af8e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    af92:	str	r0, [sp, #4]
    af94:	ldr	r3, [sp, #4]
    af96:	cmp	r3, r2
    af98:	bhi.n	afa6 <HardFault_HandlerC+0x56>
    af9a:	ldr	r3, [sp, #4]
    af9c:	adds	r3, #1
    af9e:	str	r3, [sp, #4]
    afa0:	ldr	r3, [sp, #4]
    afa2:	cmp	r3, r2
    afa4:	bls.n	af9a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    afa6:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    afaa:	str	r0, [sp, #4]
    afac:	ldr	r3, [sp, #4]
    afae:	cmp	r3, r1
    afb0:	bhi.n	af8e <HardFault_HandlerC+0x3e>
    afb2:	ldr	r3, [sp, #4]
    afb4:	adds	r3, #1
    afb6:	str	r3, [sp, #4]
    afb8:	ldr	r3, [sp, #4]
    afba:	cmp	r3, r1
    afbc:	bls.n	afb2 <HardFault_HandlerC+0x62>
    afbe:	b.n	af8e <HardFault_HandlerC+0x3e>
    afc0:	.word	0x401bc000
    afc4:	.word	0x401f8000
    afc8:	.word	0x20000c6c
    afcc:	.word	0x23c345ff
    afd0:	.word	0x11e1a300
    afd4:	.word	0x000f423f
    afd8:	.word	0x0089543f

0000afdc <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    afdc:	ldr	r2, [pc, #36]	; (b004 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    afde:	push	{r3, lr}
        char *prev = __brkval;
    afe0:	ldr	r3, [r2, #0]
        if (incr != 0) {
    afe2:	cbz	r0, afee <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    afe4:	add	r0, r3
    afe6:	ldr	r1, [pc, #32]	; (b008 <_sbrk+0x2c>)
    afe8:	cmp	r0, r1
    afea:	bhi.n	aff2 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    afec:	str	r0, [r2, #0]
        }
        return prev;
}
    afee:	mov	r0, r3
    aff0:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    aff2:	bl	c790 <__errno>
    aff6:	movs	r2, #12
                        return (void *)-1;
    aff8:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    affc:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    affe:	mov	r0, r3
    b000:	pop	{r3, pc}
    b002:	nop
    b004:	.word	0x20000c28
    b008:	.word	0x20280000

0000b00c <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    b00c:	wfi
    b00e:	b.n	b00c <__cxa_pure_virtual>

0000b010 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    b010:	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b012:	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    b014:	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b016:	cbz	r3, b048 <sm_align_pool+0x38>
    b018:	cbz	r2, b03a <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    b01a:	ldr	r3, [pc, #64]	; (b05c <sm_align_pool+0x4c>)
    b01c:	umull	r1, r3, r3, r2
    b020:	lsrs	r3, r3, #3
    b022:	add.w	r3, r3, r3, lsl #1
    b026:	subs.w	r3, r2, r3, lsl #2
    b02a:	beq.n	b034 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    b02c:	subs	r2, r2, r3
    b02e:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    b030:	cmp	r2, #240	; 0xf0
    b032:	bls.n	b03a <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    b034:	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    b036:	mov	r0, r3
    b038:	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    b03a:	bl	c790 <__errno>
    b03e:	movs	r2, #28
    b040:	movs	r3, #0
    b042:	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    b044:	mov	r0, r3
    b046:	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    b048:	ldr	r3, [pc, #16]	; (b05c <sm_align_pool+0x4c>)
    b04a:	umull	r1, r3, r3, r2
    b04e:	lsrs	r3, r3, #3
    b050:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    b054:	subs.w	r3, r2, r3, lsl #2
    b058:	bne.n	b02c <sm_align_pool+0x1c>
    b05a:	b.n	b030 <sm_align_pool+0x20>
    b05c:	.word	0xaaaaaaab

0000b060 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    b060:	push	{r4, r5, r6, lr}
	if (!spool) {
    b062:	mov	r4, r0
    b064:	cmp	r0, #0
    b066:	beq.n	b0de <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    b068:	cbz	r1, b072 <sm_set_pool+0x12>
    b06a:	clz	r5, r2
    b06e:	lsrs	r5, r5, #5
    b070:	cbz	r5, b0b2 <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b072:	ldr	r0, [r4, #0]
    b074:	cbz	r0, b07a <sm_set_pool+0x1a>
    b076:	ldr	r2, [r4, #4]
    b078:	cbnz	r2, b088 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    b07a:	bl	c790 <__errno>
    b07e:	movs	r3, #22
		return 0;
    b080:	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    b082:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b084:	mov	r0, r2
    b086:	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    b088:	ldr	r1, [pc, #96]	; (b0ec <sm_set_pool+0x8c>)
    b08a:	umull	r3, r1, r1, r2
    b08e:	lsrs	r1, r1, #3
    b090:	add.w	r1, r1, r1, lsl #1
    b094:	subs.w	r1, r2, r1, lsl #2
    b098:	bne.n	b07a <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b09a:	ldr	r3, [r4, #8]
    b09c:	cbz	r3, b0a2 <sm_set_pool+0x42>
    b09e:	bl	cf7c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    b0a2:	movs	r3, #0
			return 1;
    b0a4:	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    b0a6:	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b0a8:	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    b0aa:	str	r3, [r4, #4]
    b0ac:	str	r3, [r4, #8]
    b0ae:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b0b0:	pop	{r4, r5, r6, pc}
    b0b2:	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    b0b4:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    b0b6:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    b0ba:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    b0bc:	bl	b010 <sm_align_pool>
    b0c0:	mov	r2, r0
    b0c2:	cmp	r0, #0
    b0c4:	beq.n	b084 <sm_set_pool+0x24>

	if (do_zero) {
    b0c6:	cbnz	r6, b0ce <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    b0c8:	movs	r2, #1
}
    b0ca:	mov	r0, r2
    b0cc:	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    b0ce:	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    b0d2:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    b0d4:	mov	r1, r5
    b0d6:	bl	cf7c <memset>
	}

	return 1;
    b0da:	movs	r2, #1
    b0dc:	b.n	b084 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    b0de:	bl	c790 <__errno>
    b0e2:	movs	r3, #22
		return 0;
    b0e4:	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    b0e6:	str	r3, [r0, #0]
		return 0;
    b0e8:	b.n	b084 <sm_set_pool+0x24>
    b0ea:	nop
    b0ec:	.word	0xaaaaaaab

0000b0f0 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    b0f0:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    b0f2:	ldr	r2, [pc, #24]	; (b10c <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    b0f4:	movs	r1, #7
    b0f6:	ldr	r3, [pc, #24]	; (b110 <Panic_Temp_isr+0x20>)
    b0f8:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    b0fa:	ldr	r3, [r2, #56]	; 0x38
    b0fc:	orr.w	r3, r3, #64	; 0x40
    b100:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    b102:	dsb	sy
  while (1) asm ("wfi");
    b106:	wfi
    b108:	b.n	b106 <Panic_Temp_isr+0x16>
    b10a:	nop
    b10c:	.word	0x400d4000
    b110:	.word	0x400ac000

0000b114 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b114:	lsls	r0, r0, #4
    b116:	ldr	r3, [pc, #60]	; (b154 <digitalWrite.part.0+0x40>)
    b118:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    b11a:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    b11c:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    b11e:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    b120:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    b122:	tst	r4, r0
    b124:	beq.n	b132 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    b126:	cbz	r1, b140 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    b128:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b12c:	ldr.w	r4, [sp], #4
    b130:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b132:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    b134:	cbnz	r1, b14a <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b136:	ldr	r2, [pc, #32]	; (b158 <digitalWrite.part.0+0x44>)
		}
	}
}
    b138:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b13c:	str	r2, [r3, #0]
		}
	}
}
    b13e:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    b140:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b144:	ldr.w	r4, [sp], #4
    b148:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b14a:	ldr	r2, [pc, #16]	; (b15c <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b14c:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b150:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b152:	bx	lr
    b154:	.word	0x20000510
    b158:	.word	0x00013038
    b15c:	.word	0x0001f038

0000b160 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    b160:	cmp	r0, #54	; 0x36
    b162:	bhi.n	b168 <digitalWrite+0x8>
    b164:	b.w	b114 <digitalWrite.part.0>
    b168:	bx	lr
    b16a:	nop

0000b16c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    b16c:	cmp	r0, #54	; 0x36
    b16e:	bhi.n	b1aa <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    b170:	lsls	r0, r0, #4
    b172:	ldr	r2, [pc, #104]	; (b1dc <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b174:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b176:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b17a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    b17c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b17e:	beq.n	b1ac <pinMode+0x40>
    b180:	cmp	r1, #4
    b182:	beq.n	b1ac <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b184:	ldr	r4, [r3, #12]
    b186:	ldr	r2, [r0, #4]
    b188:	bic.w	r2, r2, r4
    b18c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b18e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    b190:	cbz	r1, b1ce <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    b192:	cmp	r1, #2
    b194:	beq.n	b1d4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    b196:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b198:	ldr	r3, [r3, #4]
}
    b19a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b19e:	ite	eq
    b1a0:	ldreq	r1, [pc, #60]	; (b1e0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b1a2:	ldrne	r1, [pc, #64]	; (b1e4 <pinMode+0x78>)
    b1a4:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    b1a6:	movs	r2, #21
    b1a8:	str	r2, [r3, #0]
}
    b1aa:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b1ac:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    b1ae:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b1b0:	ldr	r4, [r0, #4]
    b1b2:	orr.w	r2, r2, r4
    b1b6:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b1b8:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    b1ba:	beq.n	b1ce <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    b1bc:	movw	r1, #2104	; 0x838
    b1c0:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b1c2:	ldr	r3, [r3, #4]
    b1c4:	movs	r2, #21
}
    b1c6:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b1ca:	str	r2, [r3, #0]
}
    b1cc:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b1ce:	movs	r1, #56	; 0x38
    b1d0:	str	r1, [r2, #0]
    b1d2:	b.n	b1c2 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b1d4:	ldr	r1, [pc, #16]	; (b1e8 <pinMode+0x7c>)
    b1d6:	str	r1, [r2, #0]
    b1d8:	b.n	b1c2 <pinMode+0x56>
    b1da:	nop
    b1dc:	.word	0x20000510
    b1e0:	.word	0x00013038
    b1e4:	.word	0x00010038
    b1e8:	.word	0x0001f038

0000b1ec <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b1ec:	ldr	r0, [pc, #656]	; (b480 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b1ee:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b1f2:	ldr	r3, [pc, #656]	; (b484 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b1f4:	ldr	r2, [r0, #120]	; 0x78
    b1f6:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    b1fa:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b1fc:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b1fe:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b200:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b204:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b208:	ldr	r4, [pc, #636]	; (b488 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b20a:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b20e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b210:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b214:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b216:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b218:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b21c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b220:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b224:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b228:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b22c:	ldrh.w	r0, [r3, #392]	; 0x188
    b230:	uxth	r0, r0
    b232:	orr.w	r0, r0, #240	; 0xf0
    b236:	strh.w	r0, [r3, #392]	; 0x188
    b23a:	add.w	r0, r1, r1, lsl #1
    b23e:	ldr	r3, [pc, #580]	; (b484 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    b240:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b242:	movs	r5, #0
    b244:	lsls	r0, r0, #5
    b246:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b248:	cmp	r1, #4
    b24a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b24c:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b250:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    b252:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b254:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b256:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b258:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b25a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b25c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b25e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b260:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b262:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b264:	bne.n	b23a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b266:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b26a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b26e:	ldr	r3, [pc, #540]	; (b48c <pwm_init+0x2a0>)
    b270:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b274:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b276:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b278:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b27c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b27e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b282:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b286:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b28a:	ldrh.w	r0, [r4, #392]	; 0x188
    b28e:	uxth	r0, r0
    b290:	orr.w	r0, r0, #3840	; 0xf00
    b294:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b298:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b29c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b2a0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b2a4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b2a8:	ldrh.w	r0, [r3, #392]	; 0x188
    b2ac:	uxth	r0, r0
    b2ae:	orr.w	r0, r0, #240	; 0xf0
    b2b2:	strh.w	r0, [r3, #392]	; 0x188
    b2b6:	add.w	r0, r1, r1, lsl #1
    b2ba:	ldr	r3, [pc, #464]	; (b48c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    b2bc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b2be:	movs	r5, #0
    b2c0:	lsls	r0, r0, #5
    b2c2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b2c4:	cmp	r1, #4
    b2c6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b2c8:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b2ca:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b2ce:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b2d0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b2d2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b2d4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b2d6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b2d8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b2da:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b2dc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b2de:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b2e0:	bne.n	b2b6 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b2e2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b2e6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b2ea:	ldr	r3, [pc, #420]	; (b490 <pwm_init+0x2a4>)
    b2ec:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b2f0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b2f2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b2f4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b2f8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b2fa:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b2fe:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b302:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b306:	ldrh.w	r0, [r4, #392]	; 0x188
    b30a:	uxth	r0, r0
    b30c:	orr.w	r0, r0, #3840	; 0xf00
    b310:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b314:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b318:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b31c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b320:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b324:	ldrh.w	r0, [r3, #392]	; 0x188
    b328:	uxth	r0, r0
    b32a:	orr.w	r0, r0, #240	; 0xf0
    b32e:	strh.w	r0, [r3, #392]	; 0x188
    b332:	add.w	r0, r1, r1, lsl #1
    b336:	ldr	r3, [pc, #344]	; (b490 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    b338:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b33a:	movs	r5, #0
    b33c:	lsls	r0, r0, #5
    b33e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b340:	cmp	r1, #4
    b342:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b344:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b346:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b34a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b34c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b34e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b350:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b352:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b354:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b356:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b358:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b35a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b35c:	bne.n	b332 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b35e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b362:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b366:	ldr	r3, [pc, #300]	; (b494 <pwm_init+0x2a8>)
    b368:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b36c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b36e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b370:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b374:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b376:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b37a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b37e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b382:	ldrh.w	r0, [r4, #392]	; 0x188
    b386:	uxth	r0, r0
    b388:	orr.w	r0, r0, #3840	; 0xf00
    b38c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b390:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b394:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b398:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b39c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b3a0:	ldrh.w	r0, [r3, #392]	; 0x188
    b3a4:	uxth	r0, r0
    b3a6:	orr.w	r0, r0, #240	; 0xf0
    b3aa:	strh.w	r0, [r3, #392]	; 0x188
    b3ae:	add.w	r0, r1, r1, lsl #1
    b3b2:	ldr	r3, [pc, #224]	; (b494 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    b3b4:	adds	r1, #1
    b3b6:	lsls	r0, r0, #5
    b3b8:	mov	r4, r3
    b3ba:	cmp	r1, #4
    b3bc:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b3be:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b3c0:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b3c4:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b3c6:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b3c8:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b3ca:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b3cc:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    b3ce:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b3d0:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b3d2:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b3d4:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b3d6:	bne.n	b3ae <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3d8:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b3dc:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b3de:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b3e0:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3e4:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b3e6:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b3ea:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b3ec:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3f0:	orrs	r3, r7
    b3f2:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b3f6:	ldrh.w	r3, [r4, #392]	; 0x188
    b3fa:	uxth	r3, r3
    b3fc:	orr.w	r3, r3, #3840	; 0xf00
    b400:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b404:	lsls	r0, r2, #5
    b406:	ldr	r3, [pc, #144]	; (b498 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b408:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b40a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b40c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b40e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b410:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b412:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b414:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b416:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b41a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b41c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b41e:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b420:	bne.n	b404 <pwm_init+0x218>
    b422:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b424:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b426:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b42a:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b42e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b430:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b434:	lsls	r0, r2, #5
    b436:	ldr	r3, [pc, #100]	; (b49c <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b438:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b43a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b43c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b43e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b440:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b442:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b444:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b446:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b448:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b44a:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b44c:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b44e:	bne.n	b434 <pwm_init+0x248>
    b450:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b452:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b454:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b458:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b45c:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b45e:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b462:	lsls	r0, r2, #5
    b464:	ldr	r3, [pc, #56]	; (b4a0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b466:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b468:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b46a:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b46c:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b46e:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b470:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b472:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b474:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b476:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b478:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b47a:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b47c:	bne.n	b462 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    b47e:	pop	{r4, r5, r6, r7, pc}
    b480:	.word	0x400fc000
    b484:	.word	0x403dc000
    b488:	.word	0xfc030000
    b48c:	.word	0x403e0000
    b490:	.word	0x403e4000
    b494:	.word	0x403e8000
    b498:	.word	0x401dc000
    b49c:	.word	0x401e0000
    b4a0:	.word	0x401e4000

0000b4a4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b4a4:	ldr	r2, [pc, #72]	; (b4f0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b4a6:	ldr	r3, [pc, #76]	; (b4f4 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b4a8:	ldr.w	r0, [r2, #544]	; 0x220
    b4ac:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b4b0:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b4b2:	push	{r4, lr}
    b4b4:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b4b6:	bhi.n	b4be <usb_init_serialnumber+0x1a>
    b4b8:	add.w	r0, r0, r0, lsl #2
    b4bc:	lsls	r0, r0, #1
    b4be:	ldr	r4, [pc, #56]	; (b4f8 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    b4c0:	add	r1, sp, #4
    b4c2:	movs	r2, #10
    b4c4:	bl	baf0 <ultoa>
    b4c8:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    b4ca:	movs	r3, #0
    b4cc:	mov	r0, r4
		char c = buf[i];
    b4ce:	ldrb.w	r2, [r1], #1
    b4d2:	adds	r3, #1
		if (!c) break;
    b4d4:	cbz	r2, b4e6 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b4d6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b4d8:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b4dc:	bne.n	b4ce <usb_init_serialnumber+0x2a>
    b4de:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b4e0:	strb	r3, [r4, #0]
}
    b4e2:	add	sp, #16
    b4e4:	pop	{r4, pc}
    b4e6:	lsls	r3, r3, #1
    b4e8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b4ea:	strb	r3, [r4, #0]
}
    b4ec:	add	sp, #16
    b4ee:	pop	{r4, pc}
    b4f0:	.word	0x401f4400
    b4f4:	.word	0x0098967f
    b4f8:	.word	0x20000c40

0000b4fc <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b4fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    b500:	ldr	r6, [pc, #200]	; (b5cc <yield+0xd0>)
    b502:	ldrb	r3, [r6, #0]
    b504:	cbz	r3, b52c <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    b506:	ldr	r7, [pc, #200]	; (b5d0 <yield+0xd4>)
    b508:	ldrb	r2, [r7, #0]
    b50a:	cbnz	r2, b52c <yield+0x30>
	running = 1;
    b50c:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b50e:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    b510:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b512:	bmi.n	b584 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    b514:	lsls	r2, r3, #30
    b516:	bmi.n	b54c <yield+0x50>

	running = 0;
    b518:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b51a:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    b51c:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b51e:	bpl.n	b52c <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    b520:	ldr	r3, [pc, #176]	; (b5d4 <yield+0xd8>)
    b522:	ldr	r2, [r3, #0]
    b524:	cbz	r2, b52c <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b526:	mrs	r2, IPSR
		if (ipsr != 0) return;
    b52a:	cbz	r2, b530 <yield+0x34>
    b52c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b530:	mrs	r0, PRIMASK
		__disable_irq();
    b534:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    b536:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    b538:	cbz	r2, b542 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    b53a:	ldr	r4, [pc, #156]	; (b5d8 <yield+0xdc>)
    b53c:	ldrb	r1, [r4, #0]
    b53e:	cmp	r1, #0
    b540:	beq.n	b5a2 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b542:	cmp	r0, #0
    b544:	bne.n	b52c <yield+0x30>
    b546:	cpsie	i
    b548:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b54c:	ldr.w	r8, [pc, #148]	; b5e4 <yield+0xe8>
    b550:	ldrb.w	r2, [r8]
    b554:	cmp	r2, #0
    b556:	beq.n	b518 <yield+0x1c>
    b558:	movs	r4, #0
    b55a:	ldr.w	r9, [pc, #140]	; b5e8 <yield+0xec>
    b55e:	b.n	b56c <yield+0x70>
    b560:	adds	r4, #1
    b562:	ldrb.w	r3, [r8]
    b566:	uxtb	r4, r4
    b568:	cmp	r3, r4
    b56a:	bls.n	b594 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    b56c:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    b570:	ldr	r3, [r5, #0]
    b572:	mov	r0, r5
    b574:	ldr	r3, [r3, #16]
    b576:	blx	r3
    b578:	cmp	r0, #0
    b57a:	beq.n	b560 <yield+0x64>
    b57c:	ldr	r3, [r5, #20]
    b57e:	ldr	r3, [r3, #8]
    b580:	blx	r3
    b582:	b.n	b560 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b584:	bl	a330 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    b588:	cbnz	r0, b5c0 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    b58a:	ldr	r3, [pc, #80]	; (b5dc <yield+0xe0>)
    b58c:	ldrb	r3, [r3, #0]
    b58e:	cbnz	r3, b598 <yield+0x9c>
    b590:	ldrb	r3, [r6, #0]
    b592:	b.n	b514 <yield+0x18>
    b594:	ldrb	r3, [r6, #0]
    b596:	b.n	b518 <yield+0x1c>
    b598:	ldrb	r3, [r6, #0]
    b59a:	and.w	r3, r3, #254	; 0xfe
    b59e:	strb	r3, [r6, #0]
    b5a0:	b.n	b514 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b5a2:	movs	r6, #1
		firstYield = first->_next;
    b5a4:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b5a6:	strb	r6, [r4, #0]
		firstYield = first->_next;
    b5a8:	str	r5, [r3, #0]
		if (firstYield) {
    b5aa:	cbz	r5, b5c6 <yield+0xca>
			firstYield->_prev = nullptr;
    b5ac:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b5ae:	cbnz	r0, b5b2 <yield+0xb6>
    b5b0:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b5b2:	movs	r5, #0
		(*(first->_function))(*first);
    b5b4:	ldr	r3, [r2, #8]
    b5b6:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b5b8:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    b5ba:	blx	r3
		runningFromYield = false;
    b5bc:	strb	r5, [r4, #0]
    b5be:	b.n	b52c <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    b5c0:	bl	b820 <serialEvent()>
    b5c4:	b.n	b58a <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    b5c6:	ldr	r3, [pc, #24]	; (b5e0 <yield+0xe4>)
    b5c8:	str	r5, [r3, #0]
    b5ca:	b.n	b5ae <yield+0xb2>
    b5cc:	.word	0x20000c56
    b5d0:	.word	0x20006ddc
    b5d4:	.word	0x20006dec
    b5d8:	.word	0x20006df0
    b5dc:	.word	0x60001b4a
    b5e0:	.word	0x20006de8
    b5e4:	.word	0x20006e14
    b5e8:	.word	0x20006df4

0000b5ec <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    b5ec:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b5ee:	mrs	r2, PRIMASK
		__disable_irq();
    b5f2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    b5f4:	ldrb	r3, [r0, #29]
    b5f6:	cbnz	r3, b606 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    b5f8:	ldrb	r1, [r0, #28]
    b5fa:	cmp	r1, #1
    b5fc:	beq.n	b610 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    b5fe:	cmp	r1, #3
    b600:	beq.n	b624 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    b602:	movs	r3, #1
    b604:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b606:	cbnz	r2, b60a <EventResponder::triggerEventNotImmediate()+0x1e>
    b608:	cpsie	i
	}
	enableInterrupts(irq);
}
    b60a:	ldr.w	r4, [sp], #4
    b60e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    b610:	ldr	r4, [pc, #68]	; (b658 <EventResponder::triggerEventNotImmediate()+0x6c>)
    b612:	ldr	r1, [r4, #0]
    b614:	cbz	r1, b640 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b616:	ldr	r1, [pc, #68]	; (b65c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    b618:	str	r3, [r0, #20]
				_prev = lastYield;
    b61a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    b61c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b61e:	str	r3, [r0, #24]
				_prev->_next = this;
    b620:	str	r0, [r3, #20]
    b622:	b.n	b602 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    b624:	ldr	r4, [pc, #56]	; (b660 <EventResponder::triggerEventNotImmediate()+0x74>)
    b626:	ldr	r1, [r4, #0]
    b628:	cbz	r1, b64c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b62a:	ldr	r1, [pc, #56]	; (b664 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    b62c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    b62e:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    b630:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b632:	str	r3, [r0, #24]
				_prev->_next = this;
    b634:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    b636:	ldr	r3, [pc, #48]	; (b668 <EventResponder::triggerEventNotImmediate()+0x7c>)
    b638:	mov.w	r1, #268435456	; 0x10000000
    b63c:	str	r1, [r3, #0]
    b63e:	b.n	b602 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    b640:	ldr	r3, [pc, #24]	; (b65c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    b642:	str	r1, [r0, #20]
				_prev = nullptr;
    b644:	str	r1, [r0, #24]
				firstYield = this;
    b646:	str	r0, [r4, #0]
				lastYield = this;
    b648:	str	r0, [r3, #0]
    b64a:	b.n	b602 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    b64c:	ldr	r3, [pc, #20]	; (b664 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    b64e:	str	r1, [r0, #20]
				_prev = nullptr;
    b650:	str	r1, [r0, #24]
				firstInterrupt = this;
    b652:	str	r0, [r4, #0]
				lastInterrupt = this;
    b654:	str	r0, [r3, #0]
    b656:	b.n	b636 <EventResponder::triggerEventNotImmediate()+0x4a>
    b658:	.word	0x20006dec
    b65c:	.word	0x20006de8
    b660:	.word	0x20006de0
    b664:	.word	0x20006de4
    b668:	.word	0xe000ed04

0000b66c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b66c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b66e:	mrs	r1, PRIMASK
		__disable_irq();
    b672:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b674:	ldr	r4, [pc, #48]	; (b6a8 <EventResponder::runFromInterrupt()+0x3c>)
    b676:	ldr	r3, [r4, #0]
		if (first) {
    b678:	cbz	r3, b69e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b67a:	ldr	r6, [pc, #48]	; (b6ac <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b67c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    b67e:	ldr	r2, [r3, #20]
    b680:	str	r2, [r4, #0]
			if (firstInterrupt) {
    b682:	cbz	r2, b6a4 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    b684:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b686:	cbnz	r1, b68a <EventResponder::runFromInterrupt()+0x1e>
    b688:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    b68a:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    b68c:	mov	r0, r3
    b68e:	ldr	r3, [r3, #8]
    b690:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b692:	mrs	r1, PRIMASK
		__disable_irq();
    b696:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b698:	ldr	r3, [r4, #0]
		if (first) {
    b69a:	cmp	r3, #0
    b69c:	bne.n	b67e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b69e:	cbnz	r1, b6a2 <EventResponder::runFromInterrupt()+0x36>
    b6a0:	cpsie	i
    b6a2:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b6a4:	str	r2, [r6, #0]
    b6a6:	b.n	b686 <EventResponder::runFromInterrupt()+0x1a>
    b6a8:	.word	0x20006de0
    b6ac:	.word	0x20006de4

0000b6b0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    b6b0:	b.w	b66c <EventResponder::runFromInterrupt()>

0000b6b4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b6b4:	ldr	r2, [pc, #16]	; (b6c8 <systick_isr+0x14>)
    b6b6:	ldr	r3, [pc, #20]	; (b6cc <systick_isr+0x18>)
    b6b8:	ldr	r1, [r2, #0]
	systick_millis_count++;
    b6ba:	ldr	r2, [pc, #20]	; (b6d0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b6bc:	str	r1, [r3, #0]
	systick_millis_count++;
    b6be:	ldr	r3, [r2, #0]
    b6c0:	adds	r3, #1
    b6c2:	str	r3, [r2, #0]
    b6c4:	bx	lr
    b6c6:	nop
    b6c8:	.word	0xe0001004
    b6cc:	.word	0x20006dbc
    b6d0:	.word	0x20006dc4

0000b6d4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    b6d4:	b.w	a33c <usb_serial_flush_input>

0000b6d8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    b6d8:	b.w	a2ec <usb_serial_peekchar>

0000b6dc <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    b6dc:	b.w	a3b0 <usb_serial_getchar>

0000b6e0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b6e0:	b.w	a330 <usb_serial_available>

0000b6e4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b6e4:	b.w	a460 <usb_serial_flush_output>

0000b6e8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b6e8:	b.w	a414 <usb_serial_write_buffer_free>

0000b6ec <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b6ec:	mov	r0, r1
    b6ee:	mov	r1, r2
    b6f0:	b.w	a3fc <usb_serial_write>

0000b6f4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b6f4:	mov	r0, r1
    b6f6:	b.w	a3d0 <usb_serial_putchar>
    b6fa:	nop

0000b6fc <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    b6fc:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    b6fe:	mov	r6, r1
    b700:	cbz	r1, b720 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    b702:	cbz	r2, b724 <Print::write(unsigned char const*, unsigned int)+0x28>
    b704:	mov	r7, r0
    b706:	mov	r4, r2
    b708:	movs	r5, #0
    b70a:	ldr	r3, [r7, #0]
    b70c:	mov	r0, r7
    b70e:	ldrb.w	r1, [r6], #1
    b712:	ldr	r3, [r3, #0]
    b714:	blx	r3
    b716:	subs	r4, #1
    b718:	add	r5, r0
    b71a:	bne.n	b70a <Print::write(unsigned char const*, unsigned int)+0xe>
    b71c:	mov	r0, r5
    b71e:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    b720:	mov	r0, r1
    b722:	pop	{r3, r4, r5, r6, r7, pc}
    b724:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    b726:	pop	{r3, r4, r5, r6, r7, pc}

0000b728 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b728:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    b72a:	ldr	r4, [pc, #24]	; (b744 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b72c:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    b72e:	ldr	r3, [r0, #0]
    b730:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b732:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    b734:	add	r1, sp, #4
    b736:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b738:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    b73c:	blx	r3
}
    b73e:	add	sp, #8
    b740:	pop	{r4, pc}
    b742:	nop
    b744:	.word	0x20000920

0000b748 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    b748:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    b74a:	push	{r4, lr}
    b74c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    b74e:	ldr	r3, [r3, #4]
    b750:	blx	r3
	return len;
}
    b752:	mov	r0, r4
    b754:	pop	{r4, pc}
    b756:	nop

0000b758 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    b758:	push	{r1, r2, r3}
    b75a:	push	{lr}
    b75c:	sub	sp, #8
    b75e:	add	r3, sp, #12
    b760:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    b764:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    b766:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    b768:	bl	d708 <vdprintf>
#endif
}
    b76c:	add	sp, #8
    b76e:	ldr.w	lr, [sp], #4
    b772:	add	sp, #12
    b774:	bx	lr
    b776:	nop

0000b778 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    b778:	push	{r4, r5, r6, r7, lr}
    b77a:	mov	r6, r0
    b77c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    b77e:	cmp	r2, #0
    b780:	beq.n	b7ea <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    b782:	cmp	r2, #1
    b784:	it	eq
    b786:	moveq	r2, #10
	}


	if (n == 0) {
    b788:	cbz	r1, b7e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    b78a:	movs	r5, #33	; 0x21
    b78c:	b.n	b790 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    b78e:	uxtb	r5, r7
    b790:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    b792:	udiv	r4, r1, r2
    b796:	mls	r1, r2, r4, r1
    b79a:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b79c:	cmp	r1, #9
    b79e:	add.w	r1, r0, #55	; 0x37
    b7a2:	add.w	r0, r0, #48	; 0x30
    b7a6:	it	hi
    b7a8:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    b7aa:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b7ac:	add	r4, sp, #40	; 0x28
    b7ae:	it	ls
    b7b0:	uxtbls	r0, r0
    b7b2:	add	r4, r5
    b7b4:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    b7b8:	cmp	r1, #0
    b7ba:	bne.n	b78e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    b7bc:	cbz	r3, b7cc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    b7be:	subs	r5, #1
		buf[i] = '-';
    b7c0:	add	r3, sp, #40	; 0x28
    b7c2:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    b7c4:	uxtb	r5, r5
		buf[i] = '-';
    b7c6:	add	r3, r5
    b7c8:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    b7cc:	ldr	r3, [r6, #0]
    b7ce:	add	r1, sp, #4
    b7d0:	rsb	r2, r5, #34	; 0x22
    b7d4:	mov	r0, r6
    b7d6:	add	r1, r5
    b7d8:	ldr	r3, [r3, #4]
    b7da:	blx	r3
}
    b7dc:	add	sp, #44	; 0x2c
    b7de:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    b7e0:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    b7e2:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    b7e4:	strb.w	r2, [sp, #37]	; 0x25
    b7e8:	b.n	b7bc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    b7ea:	ldr	r3, [r0, #0]
    b7ec:	uxtb	r1, r1
    b7ee:	ldr	r3, [r3, #0]
    b7f0:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    b7f2:	add	sp, #44	; 0x2c
    b7f4:	pop	{r4, r5, r6, r7, pc}
    b7f6:	nop

0000b7f8 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    b7f8:	cmp	r1, #0
    b7fa:	blt.n	b804 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    b7fc:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    b7fe:	movs	r2, #10
    b800:	b.w	b778 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    b804:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    b806:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    b808:	movs	r2, #10
    b80a:	b.w	b778 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    b80e:	nop

0000b810 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b810:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b812:	bl	b64 <setup>
	while (1) {
		loop();
    b816:	bl	bec <loop>
		yield();
    b81a:	bl	b4fc <yield>
    b81e:	b.n	b816 <main+0x6>

0000b820 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    b820:	bx	lr
    b822:	nop

0000b824 <operator new(unsigned int)>:
    b824:	b.w	c7ec <malloc>

0000b828 <operator delete(void*, unsigned int)>:
    b828:	b.w	c7fc <free>

0000b82c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b82c:	ldr	r2, [pc, #600]	; (ba88 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b82e:	ldr	r3, [pc, #604]	; (ba8c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b830:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    b832:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    b836:	ldr	r4, [pc, #600]	; (ba90 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b838:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    b83c:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    b83e:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b840:	bls.n	b87c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    b842:	ldr	r3, [pc, #592]	; (ba94 <set_arm_clock+0x268>)
    b844:	cmp	r0, r3
    b846:	bls.w	ba74 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b84a:	ldr	r3, [pc, #588]	; (ba98 <set_arm_clock+0x26c>)
    b84c:	movw	r5, #1575	; 0x627
    b850:	ldr	r7, [pc, #584]	; (ba9c <set_arm_clock+0x270>)
    b852:	add	r3, r0
    b854:	ldr	r4, [pc, #584]	; (baa0 <set_arm_clock+0x274>)
    b856:	lsrs	r2, r3, #8
    b858:	umull	r3, r2, r7, r2
    b85c:	lsrs	r3, r2, #7
    b85e:	add.w	r3, r3, r3, lsl #2
    b862:	add.w	r2, r3, r3, lsl #2
    b866:	addw	r3, r2, #1250	; 0x4e2
    b86a:	cmp	r3, r5
    b86c:	it	cs
    b86e:	movcs	r3, r5
    b870:	sub.w	r3, r3, #800	; 0x320
    b874:	umull	r3, r5, r4, r3
    b878:	lsrs	r5, r5, #3
    b87a:	b.n	b886 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    b87c:	ldr	r5, [pc, #548]	; (baa4 <set_arm_clock+0x278>)
    b87e:	cmp	r0, r5
    b880:	ite	ls
    b882:	movls	r5, #6
    b884:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b886:	ldr	r2, [pc, #516]	; (ba8c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b888:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b88c:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b890:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b892:	orr.w	r3, r3, #192	; 0xc0
    b896:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b89a:	bcs.n	b8b2 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b89c:	ldr	r3, [pc, #496]	; (ba90 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b89e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b8a2:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b8a4:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    b8a6:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b8a8:	ldr	r3, [r2, #0]
    b8aa:	cmp	r3, #0
    b8ac:	bge.n	b8a8 <set_arm_clock+0x7c>
    b8ae:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    b8b2:	ands.w	r3, lr, #33554432	; 0x2000000
    b8b6:	bne.n	b91c <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    b8b8:	ldr	r4, [pc, #492]	; (baa8 <set_arm_clock+0x27c>)
    b8ba:	ldr	r2, [pc, #496]	; (baac <set_arm_clock+0x280>)
    b8bc:	ldr.w	ip, [r4, #16]
    b8c0:	mov	r4, r2
    b8c2:	and.w	r2, ip, r2
    b8c6:	cmp	r2, r4
    b8c8:	itet	eq
    b8ca:	moveq.w	r3, #402653184	; 0x18000000
    b8ce:	movne.w	r2, #4096	; 0x1000
    b8d2:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b8d4:	eor.w	r4, lr, r3
    b8d8:	tst.w	r4, #939524096	; 0x38000000
    b8dc:	beq.n	b8f0 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    b8de:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b8e2:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    b8e6:	ldr	r4, [pc, #420]	; (ba8c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b8e8:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    b8ec:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b8f0:	eor.w	r3, r1, r2
    b8f4:	tst.w	r3, #12288	; 0x3000
    b8f8:	beq.n	b90c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    b8fa:	ldr	r3, [pc, #400]	; (ba8c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    b8fc:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    b900:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b902:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    b904:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b906:	ldr	r3, [r2, #72]	; 0x48
    b908:	lsls	r4, r3, #28
    b90a:	bmi.n	b906 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    b90c:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    b910:	ldr	r2, [pc, #376]	; (ba8c <set_arm_clock+0x260>)
    b912:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b916:	ldr	r3, [r2, #72]	; 0x48
    b918:	lsls	r1, r3, #26
    b91a:	bmi.n	b916 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    b91c:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b91e:	ldr	r4, [pc, #400]	; (bab0 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    b920:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    b922:	mul.w	r3, r1, r2
    b926:	mul.w	r3, r0, r3
    b92a:	cmp	r3, r4
    b92c:	bhi.n	b942 <set_arm_clock+0x116>
		if (div_arm < 8) {
    b92e:	cmp	r2, #7
    b930:	bhi.w	ba5e <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    b934:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    b936:	mul.w	r3, r1, r2
    b93a:	mul.w	r3, r0, r3
    b93e:	cmp	r3, r4
    b940:	bls.n	b92e <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b942:	ldr	r0, [pc, #368]	; (bab4 <set_arm_clock+0x288>)
    b944:	ldr	r4, [pc, #368]	; (bab8 <set_arm_clock+0x28c>)
    b946:	add	r0, r3
    b948:	umull	r0, r3, r4, r0
    b94c:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    b94e:	cmp	r3, #108	; 0x6c
    b950:	bhi.w	ba6a <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    b954:	cmp	r3, #53	; 0x35
    b956:	bhi.w	ba78 <set_arm_clock+0x24c>
    b95a:	ldr.w	r8, [pc, #392]	; bae4 <set_arm_clock+0x2b8>
    b95e:	movs	r3, #54	; 0x36
    b960:	ldr	r0, [pc, #344]	; (babc <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b962:	ldr.w	ip, [pc, #324]	; baa8 <set_arm_clock+0x27c>
    b966:	ldr	r4, [pc, #344]	; (bac0 <set_arm_clock+0x294>)
    b968:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    b96c:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b970:	and.w	r4, r9, r4
    b974:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    b976:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b97a:	beq.n	b994 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b97c:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b980:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b984:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b986:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b98a:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b98e:	ldr	r3, [r4, #0]
    b990:	cmp	r3, #0
    b992:	bge.n	b98e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b994:	ldr.w	ip, [pc, #244]	; ba8c <set_arm_clock+0x260>
    b998:	subs	r2, #1
    b99a:	ldr.w	r3, [ip, #16]
    b99e:	and.w	r3, r3, #7
    b9a2:	cmp	r3, r2
    b9a4:	beq.n	b9b6 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b9a6:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b9aa:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b9ac:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b9b0:	ldr	r3, [r4, #72]	; 0x48
    b9b2:	lsls	r3, r3, #15
    b9b4:	bmi.n	b9b0 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b9b6:	subs	r1, #1
    b9b8:	lsls	r1, r1, #10
    b9ba:	eor.w	r3, lr, r1
    b9be:	tst.w	r3, #7168	; 0x1c00
    b9c2:	beq.n	b9de <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    b9c4:	ldr	r3, [pc, #196]	; (ba8c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b9c6:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b9ca:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b9ce:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b9d0:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    b9d4:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b9d8:	ldr	r3, [r2, #72]	; 0x48
    b9da:	lsls	r1, r3, #30
    b9dc:	bmi.n	b9d8 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b9de:	ldr	r3, [pc, #228]	; (bac4 <set_arm_clock+0x298>)
    b9e0:	ldr	r1, [pc, #228]	; (bac8 <set_arm_clock+0x29c>)
    b9e2:	add	r3, r0
    b9e4:	lsrs	r3, r3, #7
    b9e6:	umull	r3, r1, r1, r3
    b9ea:	lsrs	r1, r1, #12
    b9ec:	cmp	r1, #4
    b9ee:	it	cs
    b9f0:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b9f2:	subs	r3, r1, #1
    b9f4:	lsls	r3, r3, #8
    b9f6:	eor.w	r2, lr, r3
    b9fa:	tst.w	r2, #768	; 0x300
    b9fe:	beq.n	ba10 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    ba00:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    ba04:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    ba08:	ldr	r2, [pc, #128]	; (ba8c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    ba0a:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    ba0e:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    ba10:	ldr	r3, [pc, #120]	; (ba8c <set_arm_clock+0x260>)
    ba12:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ba14:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    ba16:	bic.w	r4, r4, #33554432	; 0x2000000
    ba1a:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ba1c:	ldr	r3, [r2, #72]	; 0x48
    ba1e:	lsls	r3, r3, #26
    ba20:	bmi.n	ba1c <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba22:	ldr	r3, [pc, #168]	; (bacc <set_arm_clock+0x2a0>)
    ba24:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    ba28:	ldr	r4, [pc, #164]	; (bad0 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba2a:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba2c:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    ba30:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba32:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    ba36:	ldr	r4, [pc, #156]	; (bad4 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba38:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    ba3c:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba40:	ldr	r2, [pc, #148]	; (bad8 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    ba42:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ba44:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba46:	bcs.n	ba5a <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ba48:	ldr	r3, [pc, #68]	; (ba90 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ba4a:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ba4e:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ba50:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    ba52:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ba54:	ldr	r3, [r2, #0]
    ba56:	cmp	r3, #0
    ba58:	bge.n	ba54 <set_arm_clock+0x228>
	}

	return frequency;
}
    ba5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    ba5e:	cmp	r1, #4
    ba60:	bhi.w	b942 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    ba64:	adds	r1, #1
				div_arm = 1;
    ba66:	movs	r2, #1
    ba68:	b.n	b922 <set_arm_clock+0xf6>
    ba6a:	ldr.w	r8, [pc, #124]	; bae8 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    ba6e:	movs	r3, #108	; 0x6c
    ba70:	ldr	r0, [pc, #104]	; (badc <set_arm_clock+0x2b0>)
    ba72:	b.n	b962 <set_arm_clock+0x136>
    ba74:	movs	r5, #18
    ba76:	b.n	b886 <set_arm_clock+0x5a>
    ba78:	ldr	r0, [pc, #100]	; (bae0 <set_arm_clock+0x2b4>)
    ba7a:	ldr.w	r8, [pc, #112]	; baec <set_arm_clock+0x2c0>
    ba7e:	mul.w	r0, r0, r3
    ba82:	orr.w	r8, r3, r8
    ba86:	b.n	b962 <set_arm_clock+0x136>
    ba88:	.word	0x1f78a400
    ba8c:	.word	0x400fc000
    ba90:	.word	0x40080000
    ba94:	.word	0x23c34600
    ba98:	.word	0xdc3cba00
    ba9c:	.word	0x004cb223
    baa0:	.word	0x51eb851f
    baa4:	.word	0x016e3600
    baa8:	.word	0x400d8000
    baac:	.word	0x80003040
    bab0:	.word	0x269fb1ff
    bab4:	.word	0x005b8d80
    bab8:	.word	0x165e9f81
    babc:	.word	0x269fb200
    bac0:	.word	0x8001307f
    bac4:	.word	0x08f0d17f
    bac8:	.word	0x00e5109f
    bacc:	.word	0x431bde83
    bad0:	.word	0x20000c6c
    bad4:	.word	0x20000c68
    bad8:	.word	0x20006dc0
    badc:	.word	0x4d3f6400
    bae0:	.word	0x00b71b00
    bae4:	.word	0x80002036
    bae8:	.word	0x8000206c
    baec:	.word	0x80002000

0000baf0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    baf0:	push	{r4, r5, r6, r7}
    baf2:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    baf4:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    baf6:	mov	r7, r6
    baf8:	b.n	bafc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    bafa:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    bafc:	udiv	r3, r0, r2
    bb00:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bb04:	add.w	r4, r0, #55	; 0x37
    bb08:	cmp	r0, #9
    bb0a:	add.w	r0, r0, #48	; 0x30
    bb0e:	uxtb	r4, r4
    bb10:	it	ls
    bb12:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    bb14:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bb16:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    bb1a:	cmp	r3, #0
    bb1c:	bne.n	bafa <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    bb1e:	adds	r2, r1, r5
    bb20:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    bb22:	cbz	r5, bb38 <ultoa+0x48>
    bb24:	adds	r3, #1
		t = buf[j];
    bb26:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    bb2a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bb2c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    bb2e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bb30:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    bb32:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bb36:	blt.n	bb24 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    bb38:	mov	r0, r1
    bb3a:	pop	{r4, r5, r6, r7}
    bb3c:	bx	lr
    bb3e:	nop

0000bb40 <__aeabi_atexit>:
    bb40:	mov	r3, r1
    bb42:	mov	r1, r0
    bb44:	mov	r0, r3
    bb46:	b.w	c784 <__cxa_atexit>
    bb4a:	nop

0000bb4c <__aeabi_drsub>:
    bb4c:	eor.w	r1, r1, #2147483648	; 0x80000000
    bb50:	b.n	bb58 <__adddf3>
    bb52:	nop

0000bb54 <__aeabi_dsub>:
    bb54:	eor.w	r3, r3, #2147483648	; 0x80000000

0000bb58 <__adddf3>:
    bb58:	push	{r4, r5, lr}
    bb5a:	mov.w	r4, r1, lsl #1
    bb5e:	mov.w	r5, r3, lsl #1
    bb62:	teq	r4, r5
    bb66:	it	eq
    bb68:	teqeq	r0, r2
    bb6c:	itttt	ne
    bb6e:	orrsne.w	ip, r4, r0
    bb72:	orrsne.w	ip, r5, r2
    bb76:	mvnsne.w	ip, r4, asr #21
    bb7a:	mvnsne.w	ip, r5, asr #21
    bb7e:	beq.w	bd46 <__adddf3+0x1ee>
    bb82:	mov.w	r4, r4, lsr #21
    bb86:	rsbs	r5, r4, r5, lsr #21
    bb8a:	it	lt
    bb8c:	neglt	r5, r5
    bb8e:	ble.n	bbaa <__adddf3+0x52>
    bb90:	add	r4, r5
    bb92:	eor.w	r2, r0, r2
    bb96:	eor.w	r3, r1, r3
    bb9a:	eor.w	r0, r2, r0
    bb9e:	eor.w	r1, r3, r1
    bba2:	eor.w	r2, r0, r2
    bba6:	eor.w	r3, r1, r3
    bbaa:	cmp	r5, #54	; 0x36
    bbac:	it	hi
    bbae:	pophi	{r4, r5, pc}
    bbb0:	tst.w	r1, #2147483648	; 0x80000000
    bbb4:	mov.w	r1, r1, lsl #12
    bbb8:	mov.w	ip, #1048576	; 0x100000
    bbbc:	orr.w	r1, ip, r1, lsr #12
    bbc0:	beq.n	bbc8 <__adddf3+0x70>
    bbc2:	negs	r0, r0
    bbc4:	sbc.w	r1, r1, r1, lsl #1
    bbc8:	tst.w	r3, #2147483648	; 0x80000000
    bbcc:	mov.w	r3, r3, lsl #12
    bbd0:	orr.w	r3, ip, r3, lsr #12
    bbd4:	beq.n	bbdc <__adddf3+0x84>
    bbd6:	negs	r2, r2
    bbd8:	sbc.w	r3, r3, r3, lsl #1
    bbdc:	teq	r4, r5
    bbe0:	beq.w	bd32 <__adddf3+0x1da>
    bbe4:	sub.w	r4, r4, #1
    bbe8:	rsbs	lr, r5, #32
    bbec:	blt.n	bc0a <__adddf3+0xb2>
    bbee:	lsl.w	ip, r2, lr
    bbf2:	lsr.w	r2, r2, r5
    bbf6:	adds	r0, r0, r2
    bbf8:	adc.w	r1, r1, #0
    bbfc:	lsl.w	r2, r3, lr
    bc00:	adds	r0, r0, r2
    bc02:	asr.w	r3, r3, r5
    bc06:	adcs	r1, r3
    bc08:	b.n	bc28 <__adddf3+0xd0>
    bc0a:	sub.w	r5, r5, #32
    bc0e:	add.w	lr, lr, #32
    bc12:	cmp	r2, #1
    bc14:	lsl.w	ip, r3, lr
    bc18:	it	cs
    bc1a:	orrcs.w	ip, ip, #2
    bc1e:	asr.w	r3, r3, r5
    bc22:	adds	r0, r0, r3
    bc24:	adcs.w	r1, r1, r3, asr #31
    bc28:	and.w	r5, r1, #2147483648	; 0x80000000
    bc2c:	bpl.n	bc3e <__adddf3+0xe6>
    bc2e:	mov.w	lr, #0
    bc32:	rsbs	ip, ip, #0
    bc36:	sbcs.w	r0, lr, r0
    bc3a:	sbc.w	r1, lr, r1
    bc3e:	cmp.w	r1, #1048576	; 0x100000
    bc42:	bcc.n	bc7c <__adddf3+0x124>
    bc44:	cmp.w	r1, #2097152	; 0x200000
    bc48:	bcc.n	bc64 <__adddf3+0x10c>
    bc4a:	lsrs	r1, r1, #1
    bc4c:	movs.w	r0, r0, rrx
    bc50:	mov.w	ip, ip, rrx
    bc54:	add.w	r4, r4, #1
    bc58:	mov.w	r2, r4, lsl #21
    bc5c:	cmn.w	r2, #4194304	; 0x400000
    bc60:	bcs.w	bd98 <__adddf3+0x240>
    bc64:	cmp.w	ip, #2147483648	; 0x80000000
    bc68:	it	eq
    bc6a:	movseq.w	ip, r0, lsr #1
    bc6e:	adcs.w	r0, r0, #0
    bc72:	adc.w	r1, r1, r4, lsl #20
    bc76:	orr.w	r1, r1, r5
    bc7a:	pop	{r4, r5, pc}
    bc7c:	movs.w	ip, ip, lsl #1
    bc80:	adcs	r0, r0
    bc82:	adc.w	r1, r1, r1
    bc86:	tst.w	r1, #1048576	; 0x100000
    bc8a:	sub.w	r4, r4, #1
    bc8e:	bne.n	bc64 <__adddf3+0x10c>
    bc90:	teq	r1, #0
    bc94:	itt	eq
    bc96:	moveq	r1, r0
    bc98:	moveq	r0, #0
    bc9a:	clz	r3, r1
    bc9e:	it	eq
    bca0:	addeq	r3, #32
    bca2:	sub.w	r3, r3, #11
    bca6:	subs.w	r2, r3, #32
    bcaa:	bge.n	bcc6 <__adddf3+0x16e>
    bcac:	adds	r2, #12
    bcae:	ble.n	bcc2 <__adddf3+0x16a>
    bcb0:	add.w	ip, r2, #20
    bcb4:	rsb	r2, r2, #12
    bcb8:	lsl.w	r0, r1, ip
    bcbc:	lsr.w	r1, r1, r2
    bcc0:	b.n	bcdc <__adddf3+0x184>
    bcc2:	add.w	r2, r2, #20
    bcc6:	it	le
    bcc8:	rsble	ip, r2, #32
    bccc:	lsl.w	r1, r1, r2
    bcd0:	lsr.w	ip, r0, ip
    bcd4:	itt	le
    bcd6:	orrle.w	r1, r1, ip
    bcda:	lslle	r0, r2
    bcdc:	subs	r4, r4, r3
    bcde:	ittt	ge
    bce0:	addge.w	r1, r1, r4, lsl #20
    bce4:	orrge	r1, r5
    bce6:	popge	{r4, r5, pc}
    bce8:	mvn.w	r4, r4
    bcec:	subs	r4, #31
    bcee:	bge.n	bd2a <__adddf3+0x1d2>
    bcf0:	adds	r4, #12
    bcf2:	bgt.n	bd12 <__adddf3+0x1ba>
    bcf4:	add.w	r4, r4, #20
    bcf8:	rsb	r2, r4, #32
    bcfc:	lsr.w	r0, r0, r4
    bd00:	lsl.w	r3, r1, r2
    bd04:	orr.w	r0, r0, r3
    bd08:	lsr.w	r3, r1, r4
    bd0c:	orr.w	r1, r5, r3
    bd10:	pop	{r4, r5, pc}
    bd12:	rsb	r4, r4, #12
    bd16:	rsb	r2, r4, #32
    bd1a:	lsr.w	r0, r0, r2
    bd1e:	lsl.w	r3, r1, r4
    bd22:	orr.w	r0, r0, r3
    bd26:	mov	r1, r5
    bd28:	pop	{r4, r5, pc}
    bd2a:	lsr.w	r0, r1, r4
    bd2e:	mov	r1, r5
    bd30:	pop	{r4, r5, pc}
    bd32:	teq	r4, #0
    bd36:	eor.w	r3, r3, #1048576	; 0x100000
    bd3a:	itte	eq
    bd3c:	eoreq.w	r1, r1, #1048576	; 0x100000
    bd40:	addeq	r4, #1
    bd42:	subne	r5, #1
    bd44:	b.n	bbe4 <__adddf3+0x8c>
    bd46:	mvns.w	ip, r4, asr #21
    bd4a:	it	ne
    bd4c:	mvnsne.w	ip, r5, asr #21
    bd50:	beq.n	bda6 <__adddf3+0x24e>
    bd52:	teq	r4, r5
    bd56:	it	eq
    bd58:	teqeq	r0, r2
    bd5c:	beq.n	bd6a <__adddf3+0x212>
    bd5e:	orrs.w	ip, r4, r0
    bd62:	itt	eq
    bd64:	moveq	r1, r3
    bd66:	moveq	r0, r2
    bd68:	pop	{r4, r5, pc}
    bd6a:	teq	r1, r3
    bd6e:	ittt	ne
    bd70:	movne	r1, #0
    bd72:	movne	r0, #0
    bd74:	popne	{r4, r5, pc}
    bd76:	movs.w	ip, r4, lsr #21
    bd7a:	bne.n	bd88 <__adddf3+0x230>
    bd7c:	lsls	r0, r0, #1
    bd7e:	adcs	r1, r1
    bd80:	it	cs
    bd82:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    bd86:	pop	{r4, r5, pc}
    bd88:	adds.w	r4, r4, #4194304	; 0x400000
    bd8c:	itt	cc
    bd8e:	addcc.w	r1, r1, #1048576	; 0x100000
    bd92:	popcc	{r4, r5, pc}
    bd94:	and.w	r5, r1, #2147483648	; 0x80000000
    bd98:	orr.w	r1, r5, #2130706432	; 0x7f000000
    bd9c:	orr.w	r1, r1, #15728640	; 0xf00000
    bda0:	mov.w	r0, #0
    bda4:	pop	{r4, r5, pc}
    bda6:	mvns.w	ip, r4, asr #21
    bdaa:	itte	ne
    bdac:	movne	r1, r3
    bdae:	movne	r0, r2
    bdb0:	mvnseq.w	ip, r5, asr #21
    bdb4:	itt	ne
    bdb6:	movne	r3, r1
    bdb8:	movne	r2, r0
    bdba:	orrs.w	r4, r0, r1, lsl #12
    bdbe:	itte	eq
    bdc0:	orrseq.w	r5, r2, r3, lsl #12
    bdc4:	teqeq	r1, r3
    bdc8:	orrne.w	r1, r1, #524288	; 0x80000
    bdcc:	pop	{r4, r5, pc}
    bdce:	nop

0000bdd0 <__aeabi_ui2d>:
    bdd0:	teq	r0, #0
    bdd4:	itt	eq
    bdd6:	moveq	r1, #0
    bdd8:	bxeq	lr
    bdda:	push	{r4, r5, lr}
    bddc:	mov.w	r4, #1024	; 0x400
    bde0:	add.w	r4, r4, #50	; 0x32
    bde4:	mov.w	r5, #0
    bde8:	mov.w	r1, #0
    bdec:	b.n	bc90 <__adddf3+0x138>
    bdee:	nop

0000bdf0 <__aeabi_i2d>:
    bdf0:	teq	r0, #0
    bdf4:	itt	eq
    bdf6:	moveq	r1, #0
    bdf8:	bxeq	lr
    bdfa:	push	{r4, r5, lr}
    bdfc:	mov.w	r4, #1024	; 0x400
    be00:	add.w	r4, r4, #50	; 0x32
    be04:	ands.w	r5, r0, #2147483648	; 0x80000000
    be08:	it	mi
    be0a:	negmi	r0, r0
    be0c:	mov.w	r1, #0
    be10:	b.n	bc90 <__adddf3+0x138>
    be12:	nop

0000be14 <__aeabi_f2d>:
    be14:	lsls	r2, r0, #1
    be16:	mov.w	r1, r2, asr #3
    be1a:	mov.w	r1, r1, rrx
    be1e:	mov.w	r0, r2, lsl #28
    be22:	itttt	ne
    be24:	andsne.w	r3, r2, #4278190080	; 0xff000000
    be28:	teqne	r3, #4278190080	; 0xff000000
    be2c:	eorne.w	r1, r1, #939524096	; 0x38000000
    be30:	bxne	lr
    be32:	teq	r2, #0
    be36:	ite	ne
    be38:	teqne	r3, #4278190080	; 0xff000000
    be3c:	bxeq	lr
    be3e:	push	{r4, r5, lr}
    be40:	mov.w	r4, #896	; 0x380
    be44:	and.w	r5, r1, #2147483648	; 0x80000000
    be48:	bic.w	r1, r1, #2147483648	; 0x80000000
    be4c:	b.n	bc90 <__adddf3+0x138>
    be4e:	nop

0000be50 <__aeabi_ul2d>:
    be50:	orrs.w	r2, r0, r1
    be54:	it	eq
    be56:	bxeq	lr
    be58:	push	{r4, r5, lr}
    be5a:	mov.w	r5, #0
    be5e:	b.n	be76 <__aeabi_l2d+0x16>

0000be60 <__aeabi_l2d>:
    be60:	orrs.w	r2, r0, r1
    be64:	it	eq
    be66:	bxeq	lr
    be68:	push	{r4, r5, lr}
    be6a:	ands.w	r5, r1, #2147483648	; 0x80000000
    be6e:	bpl.n	be76 <__aeabi_l2d+0x16>
    be70:	negs	r0, r0
    be72:	sbc.w	r1, r1, r1, lsl #1
    be76:	mov.w	r4, #1024	; 0x400
    be7a:	add.w	r4, r4, #50	; 0x32
    be7e:	movs.w	ip, r1, lsr #22
    be82:	beq.w	bc3e <__adddf3+0xe6>
    be86:	mov.w	r2, #3
    be8a:	movs.w	ip, ip, lsr #3
    be8e:	it	ne
    be90:	addne	r2, #3
    be92:	movs.w	ip, ip, lsr #3
    be96:	it	ne
    be98:	addne	r2, #3
    be9a:	add.w	r2, r2, ip, lsr #3
    be9e:	rsb	r3, r2, #32
    bea2:	lsl.w	ip, r0, r3
    bea6:	lsr.w	r0, r0, r2
    beaa:	lsl.w	lr, r1, r3
    beae:	orr.w	r0, r0, lr
    beb2:	lsr.w	r1, r1, r2
    beb6:	add	r4, r2
    beb8:	b.n	bc3e <__adddf3+0xe6>
    beba:	nop

0000bebc <__aeabi_dmul>:
    bebc:	push	{r4, r5, r6, lr}
    bebe:	mov.w	ip, #255	; 0xff
    bec2:	orr.w	ip, ip, #1792	; 0x700
    bec6:	ands.w	r4, ip, r1, lsr #20
    beca:	ittte	ne
    becc:	andsne.w	r5, ip, r3, lsr #20
    bed0:	teqne	r4, ip
    bed4:	teqne	r5, ip
    bed8:	bleq	c098 <__aeabi_dmul+0x1dc>
    bedc:	add	r4, r5
    bede:	eor.w	r6, r1, r3
    bee2:	bic.w	r1, r1, ip, lsl #21
    bee6:	bic.w	r3, r3, ip, lsl #21
    beea:	orrs.w	r5, r0, r1, lsl #12
    beee:	it	ne
    bef0:	orrsne.w	r5, r2, r3, lsl #12
    bef4:	orr.w	r1, r1, #1048576	; 0x100000
    bef8:	orr.w	r3, r3, #1048576	; 0x100000
    befc:	beq.n	bf70 <__aeabi_dmul+0xb4>
    befe:	umull	ip, lr, r0, r2
    bf02:	mov.w	r5, #0
    bf06:	umlal	lr, r5, r1, r2
    bf0a:	and.w	r2, r6, #2147483648	; 0x80000000
    bf0e:	umlal	lr, r5, r0, r3
    bf12:	mov.w	r6, #0
    bf16:	umlal	r5, r6, r1, r3
    bf1a:	teq	ip, #0
    bf1e:	it	ne
    bf20:	orrne.w	lr, lr, #1
    bf24:	sub.w	r4, r4, #255	; 0xff
    bf28:	cmp.w	r6, #512	; 0x200
    bf2c:	sbc.w	r4, r4, #768	; 0x300
    bf30:	bcs.n	bf3c <__aeabi_dmul+0x80>
    bf32:	movs.w	lr, lr, lsl #1
    bf36:	adcs	r5, r5
    bf38:	adc.w	r6, r6, r6
    bf3c:	orr.w	r1, r2, r6, lsl #11
    bf40:	orr.w	r1, r1, r5, lsr #21
    bf44:	mov.w	r0, r5, lsl #11
    bf48:	orr.w	r0, r0, lr, lsr #21
    bf4c:	mov.w	lr, lr, lsl #11
    bf50:	subs.w	ip, r4, #253	; 0xfd
    bf54:	it	hi
    bf56:	cmphi.w	ip, #1792	; 0x700
    bf5a:	bhi.n	bf9a <__aeabi_dmul+0xde>
    bf5c:	cmp.w	lr, #2147483648	; 0x80000000
    bf60:	it	eq
    bf62:	movseq.w	lr, r0, lsr #1
    bf66:	adcs.w	r0, r0, #0
    bf6a:	adc.w	r1, r1, r4, lsl #20
    bf6e:	pop	{r4, r5, r6, pc}
    bf70:	and.w	r6, r6, #2147483648	; 0x80000000
    bf74:	orr.w	r1, r6, r1
    bf78:	orr.w	r0, r0, r2
    bf7c:	eor.w	r1, r1, r3
    bf80:	subs.w	r4, r4, ip, lsr #1
    bf84:	ittt	gt
    bf86:	rsbsgt	r5, r4, ip
    bf8a:	orrgt.w	r1, r1, r4, lsl #20
    bf8e:	popgt	{r4, r5, r6, pc}
    bf90:	orr.w	r1, r1, #1048576	; 0x100000
    bf94:	mov.w	lr, #0
    bf98:	subs	r4, #1
    bf9a:	bgt.w	c0f4 <__aeabi_dmul+0x238>
    bf9e:	cmn.w	r4, #54	; 0x36
    bfa2:	ittt	le
    bfa4:	movle	r0, #0
    bfa6:	andle.w	r1, r1, #2147483648	; 0x80000000
    bfaa:	pople	{r4, r5, r6, pc}
    bfac:	rsb	r4, r4, #0
    bfb0:	subs	r4, #32
    bfb2:	bge.n	c020 <__aeabi_dmul+0x164>
    bfb4:	adds	r4, #12
    bfb6:	bgt.n	bff0 <__aeabi_dmul+0x134>
    bfb8:	add.w	r4, r4, #20
    bfbc:	rsb	r5, r4, #32
    bfc0:	lsl.w	r3, r0, r5
    bfc4:	lsr.w	r0, r0, r4
    bfc8:	lsl.w	r2, r1, r5
    bfcc:	orr.w	r0, r0, r2
    bfd0:	and.w	r2, r1, #2147483648	; 0x80000000
    bfd4:	bic.w	r1, r1, #2147483648	; 0x80000000
    bfd8:	adds.w	r0, r0, r3, lsr #31
    bfdc:	lsr.w	r6, r1, r4
    bfe0:	adc.w	r1, r2, r6
    bfe4:	orrs.w	lr, lr, r3, lsl #1
    bfe8:	it	eq
    bfea:	biceq.w	r0, r0, r3, lsr #31
    bfee:	pop	{r4, r5, r6, pc}
    bff0:	rsb	r4, r4, #12
    bff4:	rsb	r5, r4, #32
    bff8:	lsl.w	r3, r0, r4
    bffc:	lsr.w	r0, r0, r5
    c000:	lsl.w	r2, r1, r4
    c004:	orr.w	r0, r0, r2
    c008:	and.w	r1, r1, #2147483648	; 0x80000000
    c00c:	adds.w	r0, r0, r3, lsr #31
    c010:	adc.w	r1, r1, #0
    c014:	orrs.w	lr, lr, r3, lsl #1
    c018:	it	eq
    c01a:	biceq.w	r0, r0, r3, lsr #31
    c01e:	pop	{r4, r5, r6, pc}
    c020:	rsb	r5, r4, #32
    c024:	lsl.w	r2, r0, r5
    c028:	orr.w	lr, lr, r2
    c02c:	lsr.w	r3, r0, r4
    c030:	lsl.w	r2, r1, r5
    c034:	orr.w	r3, r3, r2
    c038:	lsr.w	r0, r1, r4
    c03c:	and.w	r1, r1, #2147483648	; 0x80000000
    c040:	lsr.w	r2, r1, r4
    c044:	bic.w	r0, r0, r2
    c048:	add.w	r0, r0, r3, lsr #31
    c04c:	orrs.w	lr, lr, r3, lsl #1
    c050:	it	eq
    c052:	biceq.w	r0, r0, r3, lsr #31
    c056:	pop	{r4, r5, r6, pc}
    c058:	teq	r4, #0
    c05c:	bne.n	c07e <__aeabi_dmul+0x1c2>
    c05e:	and.w	r6, r1, #2147483648	; 0x80000000
    c062:	lsls	r0, r0, #1
    c064:	adc.w	r1, r1, r1
    c068:	tst.w	r1, #1048576	; 0x100000
    c06c:	it	eq
    c06e:	subeq	r4, #1
    c070:	beq.n	c062 <__aeabi_dmul+0x1a6>
    c072:	orr.w	r1, r1, r6
    c076:	teq	r5, #0
    c07a:	it	ne
    c07c:	bxne	lr
    c07e:	and.w	r6, r3, #2147483648	; 0x80000000
    c082:	lsls	r2, r2, #1
    c084:	adc.w	r3, r3, r3
    c088:	tst.w	r3, #1048576	; 0x100000
    c08c:	it	eq
    c08e:	subeq	r5, #1
    c090:	beq.n	c082 <__aeabi_dmul+0x1c6>
    c092:	orr.w	r3, r3, r6
    c096:	bx	lr
    c098:	teq	r4, ip
    c09c:	and.w	r5, ip, r3, lsr #20
    c0a0:	it	ne
    c0a2:	teqne	r5, ip
    c0a6:	beq.n	c0c2 <__aeabi_dmul+0x206>
    c0a8:	orrs.w	r6, r0, r1, lsl #1
    c0ac:	it	ne
    c0ae:	orrsne.w	r6, r2, r3, lsl #1
    c0b2:	bne.n	c058 <__aeabi_dmul+0x19c>
    c0b4:	eor.w	r1, r1, r3
    c0b8:	and.w	r1, r1, #2147483648	; 0x80000000
    c0bc:	mov.w	r0, #0
    c0c0:	pop	{r4, r5, r6, pc}
    c0c2:	orrs.w	r6, r0, r1, lsl #1
    c0c6:	itte	eq
    c0c8:	moveq	r0, r2
    c0ca:	moveq	r1, r3
    c0cc:	orrsne.w	r6, r2, r3, lsl #1
    c0d0:	beq.n	c106 <__aeabi_dmul+0x24a>
    c0d2:	teq	r4, ip
    c0d6:	bne.n	c0de <__aeabi_dmul+0x222>
    c0d8:	orrs.w	r6, r0, r1, lsl #12
    c0dc:	bne.n	c106 <__aeabi_dmul+0x24a>
    c0de:	teq	r5, ip
    c0e2:	bne.n	c0f0 <__aeabi_dmul+0x234>
    c0e4:	orrs.w	r6, r2, r3, lsl #12
    c0e8:	itt	ne
    c0ea:	movne	r0, r2
    c0ec:	movne	r1, r3
    c0ee:	bne.n	c106 <__aeabi_dmul+0x24a>
    c0f0:	eor.w	r1, r1, r3
    c0f4:	and.w	r1, r1, #2147483648	; 0x80000000
    c0f8:	orr.w	r1, r1, #2130706432	; 0x7f000000
    c0fc:	orr.w	r1, r1, #15728640	; 0xf00000
    c100:	mov.w	r0, #0
    c104:	pop	{r4, r5, r6, pc}
    c106:	orr.w	r1, r1, #2130706432	; 0x7f000000
    c10a:	orr.w	r1, r1, #16252928	; 0xf80000
    c10e:	pop	{r4, r5, r6, pc}

0000c110 <__aeabi_ddiv>:
    c110:	push	{r4, r5, r6, lr}
    c112:	mov.w	ip, #255	; 0xff
    c116:	orr.w	ip, ip, #1792	; 0x700
    c11a:	ands.w	r4, ip, r1, lsr #20
    c11e:	ittte	ne
    c120:	andsne.w	r5, ip, r3, lsr #20
    c124:	teqne	r4, ip
    c128:	teqne	r5, ip
    c12c:	bleq	c27e <__aeabi_ddiv+0x16e>
    c130:	sub.w	r4, r4, r5
    c134:	eor.w	lr, r1, r3
    c138:	orrs.w	r5, r2, r3, lsl #12
    c13c:	mov.w	r1, r1, lsl #12
    c140:	beq.w	c254 <__aeabi_ddiv+0x144>
    c144:	mov.w	r3, r3, lsl #12
    c148:	mov.w	r5, #268435456	; 0x10000000
    c14c:	orr.w	r3, r5, r3, lsr #4
    c150:	orr.w	r3, r3, r2, lsr #24
    c154:	mov.w	r2, r2, lsl #8
    c158:	orr.w	r5, r5, r1, lsr #4
    c15c:	orr.w	r5, r5, r0, lsr #24
    c160:	mov.w	r6, r0, lsl #8
    c164:	and.w	r1, lr, #2147483648	; 0x80000000
    c168:	cmp	r5, r3
    c16a:	it	eq
    c16c:	cmpeq	r6, r2
    c16e:	adc.w	r4, r4, #253	; 0xfd
    c172:	add.w	r4, r4, #768	; 0x300
    c176:	bcs.n	c17e <__aeabi_ddiv+0x6e>
    c178:	lsrs	r3, r3, #1
    c17a:	mov.w	r2, r2, rrx
    c17e:	subs	r6, r6, r2
    c180:	sbc.w	r5, r5, r3
    c184:	lsrs	r3, r3, #1
    c186:	mov.w	r2, r2, rrx
    c18a:	mov.w	r0, #1048576	; 0x100000
    c18e:	mov.w	ip, #524288	; 0x80000
    c192:	subs.w	lr, r6, r2
    c196:	sbcs.w	lr, r5, r3
    c19a:	ittt	cs
    c19c:	subcs	r6, r6, r2
    c19e:	movcs	r5, lr
    c1a0:	orrcs.w	r0, r0, ip
    c1a4:	lsrs	r3, r3, #1
    c1a6:	mov.w	r2, r2, rrx
    c1aa:	subs.w	lr, r6, r2
    c1ae:	sbcs.w	lr, r5, r3
    c1b2:	ittt	cs
    c1b4:	subcs	r6, r6, r2
    c1b6:	movcs	r5, lr
    c1b8:	orrcs.w	r0, r0, ip, lsr #1
    c1bc:	lsrs	r3, r3, #1
    c1be:	mov.w	r2, r2, rrx
    c1c2:	subs.w	lr, r6, r2
    c1c6:	sbcs.w	lr, r5, r3
    c1ca:	ittt	cs
    c1cc:	subcs	r6, r6, r2
    c1ce:	movcs	r5, lr
    c1d0:	orrcs.w	r0, r0, ip, lsr #2
    c1d4:	lsrs	r3, r3, #1
    c1d6:	mov.w	r2, r2, rrx
    c1da:	subs.w	lr, r6, r2
    c1de:	sbcs.w	lr, r5, r3
    c1e2:	ittt	cs
    c1e4:	subcs	r6, r6, r2
    c1e6:	movcs	r5, lr
    c1e8:	orrcs.w	r0, r0, ip, lsr #3
    c1ec:	orrs.w	lr, r5, r6
    c1f0:	beq.n	c224 <__aeabi_ddiv+0x114>
    c1f2:	mov.w	r5, r5, lsl #4
    c1f6:	orr.w	r5, r5, r6, lsr #28
    c1fa:	mov.w	r6, r6, lsl #4
    c1fe:	mov.w	r3, r3, lsl #3
    c202:	orr.w	r3, r3, r2, lsr #29
    c206:	mov.w	r2, r2, lsl #3
    c20a:	movs.w	ip, ip, lsr #4
    c20e:	bne.n	c192 <__aeabi_ddiv+0x82>
    c210:	tst.w	r1, #1048576	; 0x100000
    c214:	bne.n	c22e <__aeabi_ddiv+0x11e>
    c216:	orr.w	r1, r1, r0
    c21a:	mov.w	r0, #0
    c21e:	mov.w	ip, #2147483648	; 0x80000000
    c222:	b.n	c192 <__aeabi_ddiv+0x82>
    c224:	tst.w	r1, #1048576	; 0x100000
    c228:	itt	eq
    c22a:	orreq	r1, r0
    c22c:	moveq	r0, #0
    c22e:	subs.w	ip, r4, #253	; 0xfd
    c232:	it	hi
    c234:	cmphi.w	ip, #1792	; 0x700
    c238:	bhi.w	bf9a <__aeabi_dmul+0xde>
    c23c:	subs.w	ip, r5, r3
    c240:	itt	eq
    c242:	subseq.w	ip, r6, r2
    c246:	movseq.w	ip, r0, lsr #1
    c24a:	adcs.w	r0, r0, #0
    c24e:	adc.w	r1, r1, r4, lsl #20
    c252:	pop	{r4, r5, r6, pc}
    c254:	and.w	lr, lr, #2147483648	; 0x80000000
    c258:	orr.w	r1, lr, r1, lsr #12
    c25c:	adds.w	r4, r4, ip, lsr #1
    c260:	ittt	gt
    c262:	rsbsgt	r5, r4, ip
    c266:	orrgt.w	r1, r1, r4, lsl #20
    c26a:	popgt	{r4, r5, r6, pc}
    c26c:	orr.w	r1, r1, #1048576	; 0x100000
    c270:	mov.w	lr, #0
    c274:	subs	r4, #1
    c276:	b.n	bf9a <__aeabi_dmul+0xde>
    c278:	orr.w	lr, r5, r6
    c27c:	b.n	bf9a <__aeabi_dmul+0xde>
    c27e:	and.w	r5, ip, r3, lsr #20
    c282:	teq	r4, ip
    c286:	it	eq
    c288:	teqeq	r5, ip
    c28c:	beq.w	c106 <__aeabi_dmul+0x24a>
    c290:	teq	r4, ip
    c294:	bne.n	c2ac <__aeabi_ddiv+0x19c>
    c296:	orrs.w	r4, r0, r1, lsl #12
    c29a:	bne.w	c106 <__aeabi_dmul+0x24a>
    c29e:	teq	r5, ip
    c2a2:	bne.w	c0f0 <__aeabi_dmul+0x234>
    c2a6:	mov	r0, r2
    c2a8:	mov	r1, r3
    c2aa:	b.n	c106 <__aeabi_dmul+0x24a>
    c2ac:	teq	r5, ip
    c2b0:	bne.n	c2c0 <__aeabi_ddiv+0x1b0>
    c2b2:	orrs.w	r5, r2, r3, lsl #12
    c2b6:	beq.w	c0b4 <__aeabi_dmul+0x1f8>
    c2ba:	mov	r0, r2
    c2bc:	mov	r1, r3
    c2be:	b.n	c106 <__aeabi_dmul+0x24a>
    c2c0:	orrs.w	r6, r0, r1, lsl #1
    c2c4:	it	ne
    c2c6:	orrsne.w	r6, r2, r3, lsl #1
    c2ca:	bne.w	c058 <__aeabi_dmul+0x19c>
    c2ce:	orrs.w	r4, r0, r1, lsl #1
    c2d2:	bne.w	c0f0 <__aeabi_dmul+0x234>
    c2d6:	orrs.w	r5, r2, r3, lsl #1
    c2da:	bne.w	c0b4 <__aeabi_dmul+0x1f8>
    c2de:	b.n	c106 <__aeabi_dmul+0x24a>

0000c2e0 <__gedf2>:
    c2e0:	mov.w	ip, #4294967295
    c2e4:	b.n	c2f4 <__cmpdf2+0x4>
    c2e6:	nop

0000c2e8 <__ledf2>:
    c2e8:	mov.w	ip, #1
    c2ec:	b.n	c2f4 <__cmpdf2+0x4>
    c2ee:	nop

0000c2f0 <__cmpdf2>:
    c2f0:	mov.w	ip, #1
    c2f4:	str.w	ip, [sp, #-4]!
    c2f8:	mov.w	ip, r1, lsl #1
    c2fc:	mvns.w	ip, ip, asr #21
    c300:	mov.w	ip, r3, lsl #1
    c304:	it	ne
    c306:	mvnsne.w	ip, ip, asr #21
    c30a:	beq.n	c344 <__cmpdf2+0x54>
    c30c:	add	sp, #4
    c30e:	orrs.w	ip, r0, r1, lsl #1
    c312:	ite	eq
    c314:	orrseq.w	ip, r2, r3, lsl #1
    c318:	teqne	r1, r3
    c31c:	ittt	eq
    c31e:	teqeq	r0, r2
    c322:	moveq	r0, #0
    c324:	bxeq	lr
    c326:	cmn.w	r0, #0
    c32a:	teq	r1, r3
    c32e:	it	pl
    c330:	cmppl	r1, r3
    c332:	it	eq
    c334:	cmpeq	r0, r2
    c336:	ite	cs
    c338:	asrcs	r0, r3, #31
    c33a:	mvncc.w	r0, r3, asr #31
    c33e:	orr.w	r0, r0, #1
    c342:	bx	lr
    c344:	mov.w	ip, r1, lsl #1
    c348:	mvns.w	ip, ip, asr #21
    c34c:	bne.n	c354 <__cmpdf2+0x64>
    c34e:	orrs.w	ip, r0, r1, lsl #12
    c352:	bne.n	c364 <__cmpdf2+0x74>
    c354:	mov.w	ip, r3, lsl #1
    c358:	mvns.w	ip, ip, asr #21
    c35c:	bne.n	c30c <__cmpdf2+0x1c>
    c35e:	orrs.w	ip, r2, r3, lsl #12
    c362:	beq.n	c30c <__cmpdf2+0x1c>
    c364:	ldr.w	r0, [sp], #4
    c368:	bx	lr
    c36a:	nop

0000c36c <__aeabi_cdrcmple>:
    c36c:	mov	ip, r0
    c36e:	mov	r0, r2
    c370:	mov	r2, ip
    c372:	mov	ip, r1
    c374:	mov	r1, r3
    c376:	mov	r3, ip
    c378:	b.n	c37c <__aeabi_cdcmpeq>
    c37a:	nop

0000c37c <__aeabi_cdcmpeq>:
    c37c:	push	{r0, lr}
    c37e:	bl	c2f0 <__cmpdf2>
    c382:	cmp	r0, #0
    c384:	it	mi
    c386:	cmnmi.w	r0, #0
    c38a:	pop	{r0, pc}

0000c38c <__aeabi_dcmpeq>:
    c38c:	str.w	lr, [sp, #-8]!
    c390:	bl	c37c <__aeabi_cdcmpeq>
    c394:	ite	eq
    c396:	moveq	r0, #1
    c398:	movne	r0, #0
    c39a:	ldr.w	pc, [sp], #8
    c39e:	nop

0000c3a0 <__aeabi_dcmplt>:
    c3a0:	str.w	lr, [sp, #-8]!
    c3a4:	bl	c37c <__aeabi_cdcmpeq>
    c3a8:	ite	cc
    c3aa:	movcc	r0, #1
    c3ac:	movcs	r0, #0
    c3ae:	ldr.w	pc, [sp], #8
    c3b2:	nop

0000c3b4 <__aeabi_dcmple>:
    c3b4:	str.w	lr, [sp, #-8]!
    c3b8:	bl	c37c <__aeabi_cdcmpeq>
    c3bc:	ite	ls
    c3be:	movls	r0, #1
    c3c0:	movhi	r0, #0
    c3c2:	ldr.w	pc, [sp], #8
    c3c6:	nop

0000c3c8 <__aeabi_dcmpge>:
    c3c8:	str.w	lr, [sp, #-8]!
    c3cc:	bl	c36c <__aeabi_cdrcmple>
    c3d0:	ite	ls
    c3d2:	movls	r0, #1
    c3d4:	movhi	r0, #0
    c3d6:	ldr.w	pc, [sp], #8
    c3da:	nop

0000c3dc <__aeabi_dcmpgt>:
    c3dc:	str.w	lr, [sp, #-8]!
    c3e0:	bl	c36c <__aeabi_cdrcmple>
    c3e4:	ite	cc
    c3e6:	movcc	r0, #1
    c3e8:	movcs	r0, #0
    c3ea:	ldr.w	pc, [sp], #8
    c3ee:	nop

0000c3f0 <__aeabi_dcmpun>:
    c3f0:	mov.w	ip, r1, lsl #1
    c3f4:	mvns.w	ip, ip, asr #21
    c3f8:	bne.n	c400 <__aeabi_dcmpun+0x10>
    c3fa:	orrs.w	ip, r0, r1, lsl #12
    c3fe:	bne.n	c416 <__aeabi_dcmpun+0x26>
    c400:	mov.w	ip, r3, lsl #1
    c404:	mvns.w	ip, ip, asr #21
    c408:	bne.n	c410 <__aeabi_dcmpun+0x20>
    c40a:	orrs.w	ip, r2, r3, lsl #12
    c40e:	bne.n	c416 <__aeabi_dcmpun+0x26>
    c410:	mov.w	r0, #0
    c414:	bx	lr
    c416:	mov.w	r0, #1
    c41a:	bx	lr

0000c41c <__aeabi_d2iz>:
    c41c:	mov.w	r2, r1, lsl #1
    c420:	adds.w	r2, r2, #2097152	; 0x200000
    c424:	bcs.n	c452 <__aeabi_d2iz+0x36>
    c426:	bpl.n	c44c <__aeabi_d2iz+0x30>
    c428:	mvn.w	r3, #992	; 0x3e0
    c42c:	subs.w	r2, r3, r2, asr #21
    c430:	bls.n	c458 <__aeabi_d2iz+0x3c>
    c432:	mov.w	r3, r1, lsl #11
    c436:	orr.w	r3, r3, #2147483648	; 0x80000000
    c43a:	orr.w	r3, r3, r0, lsr #21
    c43e:	tst.w	r1, #2147483648	; 0x80000000
    c442:	lsr.w	r0, r3, r2
    c446:	it	ne
    c448:	negne	r0, r0
    c44a:	bx	lr
    c44c:	mov.w	r0, #0
    c450:	bx	lr
    c452:	orrs.w	r0, r0, r1, lsl #12
    c456:	bne.n	c464 <__aeabi_d2iz+0x48>
    c458:	ands.w	r0, r1, #2147483648	; 0x80000000
    c45c:	it	eq
    c45e:	mvneq.w	r0, #2147483648	; 0x80000000
    c462:	bx	lr
    c464:	mov.w	r0, #0
    c468:	bx	lr
    c46a:	nop

0000c46c <__aeabi_uldivmod>:
    c46c:	cbnz	r3, c484 <__aeabi_uldivmod+0x18>
    c46e:	cbnz	r2, c484 <__aeabi_uldivmod+0x18>
    c470:	cmp	r1, #0
    c472:	it	eq
    c474:	cmpeq	r0, #0
    c476:	itt	ne
    c478:	movne.w	r1, #4294967295
    c47c:	movne.w	r0, #4294967295
    c480:	b.w	c780 <__aeabi_idiv0>
    c484:	sub.w	ip, sp, #8
    c488:	strd	ip, lr, [sp, #-16]!
    c48c:	bl	c49c <__udivmoddi4>
    c490:	ldr.w	lr, [sp, #4]
    c494:	ldrd	r2, r3, [sp, #8]
    c498:	add	sp, #16
    c49a:	bx	lr

0000c49c <__udivmoddi4>:
    c49c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4a0:	mov	ip, r1
    c4a2:	mov	r6, r1
    c4a4:	mov	r4, r0
    c4a6:	ldr	r5, [sp, #32]
    c4a8:	cmp	r3, #0
    c4aa:	bne.n	c54e <__udivmoddi4+0xb2>
    c4ac:	cmp	r2, r1
    c4ae:	mov	r7, r2
    c4b0:	bls.n	c58c <__udivmoddi4+0xf0>
    c4b2:	clz	lr, r2
    c4b6:	cmp.w	lr, #0
    c4ba:	beq.n	c4d4 <__udivmoddi4+0x38>
    c4bc:	rsb	r4, lr, #32
    c4c0:	lsr.w	r4, r0, r4
    c4c4:	lsl.w	r6, r1, lr
    c4c8:	orr.w	ip, r4, r6
    c4cc:	lsl.w	r7, r2, lr
    c4d0:	lsl.w	r4, r0, lr
    c4d4:	mov.w	r9, r7, lsr #16
    c4d8:	lsrs	r2, r4, #16
    c4da:	udiv	r0, ip, r9
    c4de:	uxth.w	r8, r7
    c4e2:	mls	r6, r9, r0, ip
    c4e6:	orr.w	r6, r2, r6, lsl #16
    c4ea:	mul.w	r3, r0, r8
    c4ee:	cmp	r3, r6
    c4f0:	bls.n	c506 <__udivmoddi4+0x6a>
    c4f2:	adds	r6, r6, r7
    c4f4:	add.w	r2, r0, #4294967295
    c4f8:	bcs.w	c740 <__udivmoddi4+0x2a4>
    c4fc:	cmp	r3, r6
    c4fe:	bls.w	c740 <__udivmoddi4+0x2a4>
    c502:	subs	r0, #2
    c504:	add	r6, r7
    c506:	subs	r6, r6, r3
    c508:	uxth	r2, r4
    c50a:	udiv	r3, r6, r9
    c50e:	mls	r6, r9, r3, r6
    c512:	orr.w	r4, r2, r6, lsl #16
    c516:	mul.w	r8, r3, r8
    c51a:	cmp	r8, r4
    c51c:	bls.n	c532 <__udivmoddi4+0x96>
    c51e:	adds	r4, r4, r7
    c520:	add.w	r2, r3, #4294967295
    c524:	bcs.w	c73c <__udivmoddi4+0x2a0>
    c528:	cmp	r8, r4
    c52a:	bls.w	c73c <__udivmoddi4+0x2a0>
    c52e:	subs	r3, #2
    c530:	add	r4, r7
    c532:	rsb	r4, r8, r4
    c536:	orr.w	r0, r3, r0, lsl #16
    c53a:	movs	r1, #0
    c53c:	cmp	r5, #0
    c53e:	beq.n	c606 <__udivmoddi4+0x16a>
    c540:	lsr.w	r4, r4, lr
    c544:	movs	r3, #0
    c546:	str	r4, [r5, #0]
    c548:	str	r3, [r5, #4]
    c54a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c54e:	cmp	r3, r1
    c550:	bls.n	c562 <__udivmoddi4+0xc6>
    c552:	cmp	r5, #0
    c554:	beq.n	c602 <__udivmoddi4+0x166>
    c556:	movs	r1, #0
    c558:	stmia.w	r5, {r0, r6}
    c55c:	mov	r0, r1
    c55e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c562:	clz	r1, r3
    c566:	cmp	r1, #0
    c568:	bne.w	c68c <__udivmoddi4+0x1f0>
    c56c:	cmp	r3, r6
    c56e:	bcc.n	c576 <__udivmoddi4+0xda>
    c570:	cmp	r2, r0
    c572:	bhi.w	c766 <__udivmoddi4+0x2ca>
    c576:	subs	r4, r0, r2
    c578:	sbc.w	r6, r6, r3
    c57c:	movs	r0, #1
    c57e:	mov	ip, r6
    c580:	cmp	r5, #0
    c582:	beq.n	c606 <__udivmoddi4+0x16a>
    c584:	stmia.w	r5, {r4, ip}
    c588:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c58c:	cbnz	r2, c594 <__udivmoddi4+0xf8>
    c58e:	movs	r7, #1
    c590:	udiv	r7, r7, r2
    c594:	clz	lr, r7
    c598:	cmp.w	lr, #0
    c59c:	bne.n	c60a <__udivmoddi4+0x16e>
    c59e:	subs	r3, r6, r7
    c5a0:	mov.w	r8, r7, lsr #16
    c5a4:	uxth.w	ip, r7
    c5a8:	movs	r1, #1
    c5aa:	udiv	r0, r3, r8
    c5ae:	lsrs	r2, r4, #16
    c5b0:	mls	r6, r8, r0, r3
    c5b4:	orr.w	r6, r2, r6, lsl #16
    c5b8:	mul.w	r3, ip, r0
    c5bc:	cmp	r3, r6
    c5be:	bls.n	c5d0 <__udivmoddi4+0x134>
    c5c0:	adds	r6, r6, r7
    c5c2:	add.w	r2, r0, #4294967295
    c5c6:	bcs.n	c5ce <__udivmoddi4+0x132>
    c5c8:	cmp	r3, r6
    c5ca:	bhi.w	c76a <__udivmoddi4+0x2ce>
    c5ce:	mov	r0, r2
    c5d0:	subs	r6, r6, r3
    c5d2:	uxth	r2, r4
    c5d4:	udiv	r3, r6, r8
    c5d8:	mls	r6, r8, r3, r6
    c5dc:	orr.w	r4, r2, r6, lsl #16
    c5e0:	mul.w	ip, ip, r3
    c5e4:	cmp	ip, r4
    c5e6:	bls.n	c5f8 <__udivmoddi4+0x15c>
    c5e8:	adds	r4, r4, r7
    c5ea:	add.w	r2, r3, #4294967295
    c5ee:	bcs.n	c5f6 <__udivmoddi4+0x15a>
    c5f0:	cmp	ip, r4
    c5f2:	bhi.w	c760 <__udivmoddi4+0x2c4>
    c5f6:	mov	r3, r2
    c5f8:	rsb	r4, ip, r4
    c5fc:	orr.w	r0, r3, r0, lsl #16
    c600:	b.n	c53c <__udivmoddi4+0xa0>
    c602:	mov	r1, r5
    c604:	mov	r0, r5
    c606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c60a:	rsb	r1, lr, #32
    c60e:	lsl.w	r3, r6, lr
    c612:	lsl.w	r7, r7, lr
    c616:	lsr.w	r9, r0, r1
    c61a:	mov.w	r8, r7, lsr #16
    c61e:	lsrs	r6, r1
    c620:	orr.w	r9, r9, r3
    c624:	udiv	sl, r6, r8
    c628:	mov.w	r4, r9, lsr #16
    c62c:	mls	r6, r8, sl, r6
    c630:	uxth.w	ip, r7
    c634:	orr.w	r3, r4, r6, lsl #16
    c638:	mul.w	r2, sl, ip
    c63c:	cmp	r2, r3
    c63e:	lsl.w	r4, r0, lr
    c642:	bls.n	c65a <__udivmoddi4+0x1be>
    c644:	adds	r3, r3, r7
    c646:	add.w	r1, sl, #4294967295
    c64a:	bcs.w	c75c <__udivmoddi4+0x2c0>
    c64e:	cmp	r2, r3
    c650:	bls.w	c75c <__udivmoddi4+0x2c0>
    c654:	sub.w	sl, sl, #2
    c658:	add	r3, r7
    c65a:	subs	r3, r3, r2
    c65c:	uxth.w	r9, r9
    c660:	udiv	r1, r3, r8
    c664:	mls	r3, r8, r1, r3
    c668:	orr.w	r3, r9, r3, lsl #16
    c66c:	mul.w	r6, r1, ip
    c670:	cmp	r6, r3
    c672:	bls.n	c684 <__udivmoddi4+0x1e8>
    c674:	adds	r3, r3, r7
    c676:	add.w	r2, r1, #4294967295
    c67a:	bcs.n	c754 <__udivmoddi4+0x2b8>
    c67c:	cmp	r6, r3
    c67e:	bls.n	c754 <__udivmoddi4+0x2b8>
    c680:	subs	r1, #2
    c682:	add	r3, r7
    c684:	subs	r3, r3, r6
    c686:	orr.w	r1, r1, sl, lsl #16
    c68a:	b.n	c5aa <__udivmoddi4+0x10e>
    c68c:	rsb	lr, r1, #32
    c690:	lsr.w	r4, r2, lr
    c694:	lsls	r3, r1
    c696:	orrs	r3, r4
    c698:	lsr.w	r7, r0, lr
    c69c:	lsl.w	r4, r6, r1
    c6a0:	mov.w	ip, r3, lsr #16
    c6a4:	lsr.w	r6, r6, lr
    c6a8:	orrs	r4, r7
    c6aa:	udiv	r9, r6, ip
    c6ae:	lsrs	r7, r4, #16
    c6b0:	mls	r6, ip, r9, r6
    c6b4:	uxth.w	r8, r3
    c6b8:	orr.w	r6, r7, r6, lsl #16
    c6bc:	mul.w	r7, r9, r8
    c6c0:	cmp	r7, r6
    c6c2:	lsl.w	r2, r2, r1
    c6c6:	lsl.w	sl, r0, r1
    c6ca:	bls.n	c6de <__udivmoddi4+0x242>
    c6cc:	adds	r6, r6, r3
    c6ce:	add.w	r0, r9, #4294967295
    c6d2:	bcs.n	c758 <__udivmoddi4+0x2bc>
    c6d4:	cmp	r7, r6
    c6d6:	bls.n	c758 <__udivmoddi4+0x2bc>
    c6d8:	sub.w	r9, r9, #2
    c6dc:	add	r6, r3
    c6de:	subs	r6, r6, r7
    c6e0:	uxth	r0, r4
    c6e2:	udiv	r4, r6, ip
    c6e6:	mls	r6, ip, r4, r6
    c6ea:	orr.w	r7, r0, r6, lsl #16
    c6ee:	mul.w	r8, r4, r8
    c6f2:	cmp	r8, r7
    c6f4:	bls.n	c706 <__udivmoddi4+0x26a>
    c6f6:	adds	r7, r7, r3
    c6f8:	add.w	r0, r4, #4294967295
    c6fc:	bcs.n	c750 <__udivmoddi4+0x2b4>
    c6fe:	cmp	r8, r7
    c700:	bls.n	c750 <__udivmoddi4+0x2b4>
    c702:	subs	r4, #2
    c704:	add	r7, r3
    c706:	orr.w	r0, r4, r9, lsl #16
    c70a:	rsb	r7, r8, r7
    c70e:	umull	r8, r9, r0, r2
    c712:	cmp	r7, r9
    c714:	mov	r4, r8
    c716:	mov	r6, r9
    c718:	bcc.n	c744 <__udivmoddi4+0x2a8>
    c71a:	beq.n	c770 <__udivmoddi4+0x2d4>
    c71c:	cbz	r5, c778 <__udivmoddi4+0x2dc>
    c71e:	subs.w	r3, sl, r4
    c722:	sbc.w	r7, r7, r6
    c726:	lsl.w	lr, r7, lr
    c72a:	lsrs	r3, r1
    c72c:	lsrs	r7, r1
    c72e:	orr.w	r3, lr, r3
    c732:	stmia.w	r5, {r3, r7}
    c736:	movs	r1, #0
    c738:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c73c:	mov	r3, r2
    c73e:	b.n	c532 <__udivmoddi4+0x96>
    c740:	mov	r0, r2
    c742:	b.n	c506 <__udivmoddi4+0x6a>
    c744:	subs.w	r4, r8, r2
    c748:	sbc.w	r6, r9, r3
    c74c:	subs	r0, #1
    c74e:	b.n	c71c <__udivmoddi4+0x280>
    c750:	mov	r4, r0
    c752:	b.n	c706 <__udivmoddi4+0x26a>
    c754:	mov	r1, r2
    c756:	b.n	c684 <__udivmoddi4+0x1e8>
    c758:	mov	r9, r0
    c75a:	b.n	c6de <__udivmoddi4+0x242>
    c75c:	mov	sl, r1
    c75e:	b.n	c65a <__udivmoddi4+0x1be>
    c760:	subs	r3, #2
    c762:	add	r4, r7
    c764:	b.n	c5f8 <__udivmoddi4+0x15c>
    c766:	mov	r0, r1
    c768:	b.n	c580 <__udivmoddi4+0xe4>
    c76a:	subs	r0, #2
    c76c:	add	r6, r7
    c76e:	b.n	c5d0 <__udivmoddi4+0x134>
    c770:	cmp	sl, r8
    c772:	bcc.n	c744 <__udivmoddi4+0x2a8>
    c774:	mov	r6, r7
    c776:	b.n	c71c <__udivmoddi4+0x280>
    c778:	mov	r1, r5
    c77a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c77e:	nop

0000c780 <__aeabi_idiv0>:
    c780:	bx	lr
    c782:	nop

0000c784 <__cxa_atexit>:
    c784:	mov	r3, r2
    c786:	mov	r2, r1
    c788:	mov	r1, r0
    c78a:	movs	r0, #2
    c78c:	b.w	d768 <__register_exitproc>

0000c790 <__errno>:
    c790:	ldr	r3, [pc, #4]	; (c798 <__errno+0x8>)
    c792:	ldr	r0, [r3, #0]
    c794:	bx	lr
    c796:	nop
    c798:	.word	0x20001098

0000c79c <__libc_init_array>:
    c79c:	push	{r4, r5, r6, lr}
    c79e:	ldr	r6, [pc, #60]	; (c7dc <__libc_init_array+0x40>)
    c7a0:	ldr	r5, [pc, #60]	; (c7e0 <__libc_init_array+0x44>)
    c7a2:	subs	r6, r6, r5
    c7a4:	asrs	r6, r6, #2
    c7a6:	it	ne
    c7a8:	movne	r4, #0
    c7aa:	beq.n	c7b8 <__libc_init_array+0x1c>
    c7ac:	adds	r4, #1
    c7ae:	ldr.w	r3, [r5], #4
    c7b2:	blx	r3
    c7b4:	cmp	r6, r4
    c7b6:	bne.n	c7ac <__libc_init_array+0x10>
    c7b8:	ldr	r6, [pc, #40]	; (c7e4 <__libc_init_array+0x48>)
    c7ba:	ldr	r5, [pc, #44]	; (c7e8 <__libc_init_array+0x4c>)
    c7bc:	subs	r6, r6, r5
    c7be:	bl	108c0 <___init_veneer>
    c7c2:	asrs	r6, r6, #2
    c7c4:	it	ne
    c7c6:	movne	r4, #0
    c7c8:	beq.n	c7d8 <__libc_init_array+0x3c>
    c7ca:	adds	r4, #1
    c7cc:	ldr.w	r3, [r5], #4
    c7d0:	blx	r3
    c7d2:	cmp	r6, r4
    c7d4:	bne.n	c7ca <__libc_init_array+0x2e>
    c7d6:	pop	{r4, r5, r6, pc}
    c7d8:	pop	{r4, r5, r6, pc}
    c7da:	nop
    c7dc:	.word	0x60001ba8
    c7e0:	.word	0x60001ba8
    c7e4:	.word	0x60001bb4
    c7e8:	.word	0x60001ba8

0000c7ec <malloc>:
    c7ec:	ldr	r3, [pc, #8]	; (c7f8 <malloc+0xc>)
    c7ee:	mov	r1, r0
    c7f0:	ldr	r0, [r3, #0]
    c7f2:	b.w	c80c <_malloc_r>
    c7f6:	nop
    c7f8:	.word	0x20001098

0000c7fc <free>:
    c7fc:	ldr	r3, [pc, #8]	; (c808 <free+0xc>)
    c7fe:	mov	r1, r0
    c800:	ldr	r0, [r3, #0]
    c802:	b.w	d8a8 <_free_r>
    c806:	nop
    c808:	.word	0x20001098

0000c80c <_malloc_r>:
    c80c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c810:	add.w	r5, r1, #11
    c814:	cmp	r5, #22
    c816:	sub	sp, #12
    c818:	mov	r6, r0
    c81a:	bls.w	c95c <_malloc_r+0x150>
    c81e:	bics.w	r5, r5, #7
    c822:	bmi.w	c9a4 <_malloc_r+0x198>
    c826:	cmp	r1, r5
    c828:	bhi.w	c9a4 <_malloc_r+0x198>
    c82c:	bl	d018 <__malloc_lock>
    c830:	cmp.w	r5, #504	; 0x1f8
    c834:	bcc.w	cd70 <_malloc_r+0x564>
    c838:	lsrs	r3, r5, #9
    c83a:	beq.w	c9b2 <_malloc_r+0x1a6>
    c83e:	cmp	r3, #4
    c840:	bhi.w	cb4a <_malloc_r+0x33e>
    c844:	lsrs	r0, r5, #6
    c846:	add.w	lr, r0, #57	; 0x39
    c84a:	mov.w	r3, lr, lsl #1
    c84e:	adds	r0, #56	; 0x38
    c850:	ldr	r7, [pc, #784]	; (cb64 <_malloc_r+0x358>)
    c852:	add.w	r3, r7, r3, lsl #2
    c856:	sub.w	r1, r3, #8
    c85a:	ldr	r4, [r3, #4]
    c85c:	cmp	r1, r4
    c85e:	bne.n	c870 <_malloc_r+0x64>
    c860:	b.n	c9bc <_malloc_r+0x1b0>
    c862:	cmp	r2, #0
    c864:	bge.w	c9c0 <_malloc_r+0x1b4>
    c868:	ldr	r4, [r4, #12]
    c86a:	cmp	r1, r4
    c86c:	beq.w	c9bc <_malloc_r+0x1b0>
    c870:	ldr	r3, [r4, #4]
    c872:	bic.w	r3, r3, #3
    c876:	subs	r2, r3, r5
    c878:	cmp	r2, #15
    c87a:	ble.n	c862 <_malloc_r+0x56>
    c87c:	ldr	r1, [pc, #740]	; (cb64 <_malloc_r+0x358>)
    c87e:	ldr	r4, [r7, #16]
    c880:	add.w	lr, r1, #8
    c884:	cmp	r4, lr
    c886:	beq.w	cbf0 <_malloc_r+0x3e4>
    c88a:	ldr	r3, [r4, #4]
    c88c:	bic.w	r3, r3, #3
    c890:	subs	r2, r3, r5
    c892:	cmp	r2, #15
    c894:	bgt.w	cbca <_malloc_r+0x3be>
    c898:	cmp	r2, #0
    c89a:	str.w	lr, [r1, #20]
    c89e:	str.w	lr, [r1, #16]
    c8a2:	bge.w	c9e2 <_malloc_r+0x1d6>
    c8a6:	cmp.w	r3, #512	; 0x200
    c8aa:	bcs.w	cb7c <_malloc_r+0x370>
    c8ae:	lsrs	r3, r3, #3
    c8b0:	add.w	ip, r3, #1
    c8b4:	movs	r2, #1
    c8b6:	asrs	r3, r3, #2
    c8b8:	lsl.w	r3, r2, r3
    c8bc:	ldr	r2, [r1, #4]
    c8be:	ldr.w	r8, [r1, ip, lsl #3]
    c8c2:	str.w	r8, [r4, #8]
    c8c6:	add.w	r9, r1, ip, lsl #3
    c8ca:	orrs	r2, r3
    c8cc:	sub.w	r3, r9, #8
    c8d0:	str	r3, [r4, #12]
    c8d2:	str	r2, [r1, #4]
    c8d4:	str.w	r4, [r1, ip, lsl #3]
    c8d8:	str.w	r4, [r8, #12]
    c8dc:	asrs	r3, r0, #2
    c8de:	movs	r4, #1
    c8e0:	lsls	r4, r3
    c8e2:	cmp	r4, r2
    c8e4:	bhi.w	c9fc <_malloc_r+0x1f0>
    c8e8:	tst	r4, r2
    c8ea:	bne.n	c8fa <_malloc_r+0xee>
    c8ec:	bic.w	r0, r0, #3
    c8f0:	lsls	r4, r4, #1
    c8f2:	tst	r4, r2
    c8f4:	add.w	r0, r0, #4
    c8f8:	beq.n	c8f0 <_malloc_r+0xe4>
    c8fa:	add.w	r9, r7, r0, lsl #3
    c8fe:	mov	ip, r9
    c900:	mov	r8, r0
    c902:	ldr.w	r1, [ip, #12]
    c906:	cmp	ip, r1
    c908:	bne.n	c91a <_malloc_r+0x10e>
    c90a:	b.n	cbf4 <_malloc_r+0x3e8>
    c90c:	cmp	r2, #0
    c90e:	bge.w	cc14 <_malloc_r+0x408>
    c912:	ldr	r1, [r1, #12]
    c914:	cmp	ip, r1
    c916:	beq.w	cbf4 <_malloc_r+0x3e8>
    c91a:	ldr	r3, [r1, #4]
    c91c:	bic.w	r3, r3, #3
    c920:	subs	r2, r3, r5
    c922:	cmp	r2, #15
    c924:	ble.n	c90c <_malloc_r+0x100>
    c926:	mov	r4, r1
    c928:	ldr.w	ip, [r1, #12]
    c92c:	ldr.w	r8, [r4, #8]!
    c930:	adds	r3, r1, r5
    c932:	orr.w	r5, r5, #1
    c936:	str	r5, [r1, #4]
    c938:	orr.w	r1, r2, #1
    c93c:	str.w	ip, [r8, #12]
    c940:	mov	r0, r6
    c942:	str.w	r8, [ip, #8]
    c946:	str	r3, [r7, #20]
    c948:	str	r3, [r7, #16]
    c94a:	str.w	lr, [r3, #12]
    c94e:	str.w	lr, [r3, #8]
    c952:	str	r1, [r3, #4]
    c954:	str	r2, [r3, r2]
    c956:	bl	d01c <__malloc_unlock>
    c95a:	b.n	c99c <_malloc_r+0x190>
    c95c:	cmp	r1, #16
    c95e:	bhi.n	c9a4 <_malloc_r+0x198>
    c960:	bl	d018 <__malloc_lock>
    c964:	movs	r5, #16
    c966:	movs	r3, #6
    c968:	movs	r0, #2
    c96a:	ldr	r7, [pc, #504]	; (cb64 <_malloc_r+0x358>)
    c96c:	add.w	r3, r7, r3, lsl #2
    c970:	sub.w	r2, r3, #8
    c974:	ldr	r4, [r3, #4]
    c976:	cmp	r4, r2
    c978:	beq.w	cc06 <_malloc_r+0x3fa>
    c97c:	ldr	r3, [r4, #4]
    c97e:	ldr	r1, [r4, #12]
    c980:	ldr	r5, [r4, #8]
    c982:	bic.w	r3, r3, #3
    c986:	add	r3, r4
    c988:	mov	r0, r6
    c98a:	ldr	r2, [r3, #4]
    c98c:	str	r1, [r5, #12]
    c98e:	orr.w	r2, r2, #1
    c992:	str	r5, [r1, #8]
    c994:	str	r2, [r3, #4]
    c996:	bl	d01c <__malloc_unlock>
    c99a:	adds	r4, #8
    c99c:	mov	r0, r4
    c99e:	add	sp, #12
    c9a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9a4:	movs	r4, #0
    c9a6:	movs	r3, #12
    c9a8:	mov	r0, r4
    c9aa:	str	r3, [r6, #0]
    c9ac:	add	sp, #12
    c9ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9b2:	movs	r3, #128	; 0x80
    c9b4:	mov.w	lr, #64	; 0x40
    c9b8:	movs	r0, #63	; 0x3f
    c9ba:	b.n	c850 <_malloc_r+0x44>
    c9bc:	mov	r0, lr
    c9be:	b.n	c87c <_malloc_r+0x70>
    c9c0:	add	r3, r4
    c9c2:	ldr	r1, [r4, #12]
    c9c4:	ldr	r2, [r3, #4]
    c9c6:	ldr	r5, [r4, #8]
    c9c8:	orr.w	r2, r2, #1
    c9cc:	str	r1, [r5, #12]
    c9ce:	mov	r0, r6
    c9d0:	str	r5, [r1, #8]
    c9d2:	str	r2, [r3, #4]
    c9d4:	bl	d01c <__malloc_unlock>
    c9d8:	adds	r4, #8
    c9da:	mov	r0, r4
    c9dc:	add	sp, #12
    c9de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9e2:	add	r3, r4
    c9e4:	mov	r0, r6
    c9e6:	ldr	r2, [r3, #4]
    c9e8:	orr.w	r2, r2, #1
    c9ec:	str	r2, [r3, #4]
    c9ee:	bl	d01c <__malloc_unlock>
    c9f2:	adds	r4, #8
    c9f4:	mov	r0, r4
    c9f6:	add	sp, #12
    c9f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9fc:	ldr	r4, [r7, #8]
    c9fe:	ldr	r3, [r4, #4]
    ca00:	bic.w	r8, r3, #3
    ca04:	cmp	r8, r5
    ca06:	bcc.n	ca12 <_malloc_r+0x206>
    ca08:	rsb	r3, r5, r8
    ca0c:	cmp	r3, #15
    ca0e:	bgt.w	cb2a <_malloc_r+0x31e>
    ca12:	ldr	r3, [pc, #340]	; (cb68 <_malloc_r+0x35c>)
    ca14:	ldr.w	r9, [pc, #352]	; cb78 <_malloc_r+0x36c>
    ca18:	ldr	r2, [r3, #0]
    ca1a:	ldr.w	r3, [r9]
    ca1e:	adds	r3, #1
    ca20:	add	r2, r5
    ca22:	add.w	sl, r4, r8
    ca26:	beq.w	ccea <_malloc_r+0x4de>
    ca2a:	add.w	r2, r2, #4096	; 0x1000
    ca2e:	adds	r2, #15
    ca30:	bic.w	r2, r2, #4080	; 0xff0
    ca34:	bic.w	r2, r2, #15
    ca38:	mov	r1, r2
    ca3a:	mov	r0, r6
    ca3c:	str	r2, [sp, #4]
    ca3e:	bl	d400 <_sbrk_r>
    ca42:	cmp.w	r0, #4294967295
    ca46:	mov	fp, r0
    ca48:	ldr	r2, [sp, #4]
    ca4a:	beq.w	ccfe <_malloc_r+0x4f2>
    ca4e:	cmp	sl, r0
    ca50:	bhi.w	cc4c <_malloc_r+0x440>
    ca54:	ldr	r3, [pc, #276]	; (cb6c <_malloc_r+0x360>)
    ca56:	ldr	r1, [r3, #0]
    ca58:	cmp	sl, fp
    ca5a:	add	r1, r2
    ca5c:	str	r1, [r3, #0]
    ca5e:	beq.w	cd08 <_malloc_r+0x4fc>
    ca62:	ldr.w	r0, [r9]
    ca66:	ldr.w	lr, [pc, #272]	; cb78 <_malloc_r+0x36c>
    ca6a:	adds	r0, #1
    ca6c:	ittet	ne
    ca6e:	rsbne	sl, sl, fp
    ca72:	addne	r1, sl
    ca74:	streq.w	fp, [lr]
    ca78:	strne	r1, [r3, #0]
    ca7a:	ands.w	r1, fp, #7
    ca7e:	beq.w	ccb0 <_malloc_r+0x4a4>
    ca82:	rsb	r0, r1, #8
    ca86:	rsb	r1, r1, #4096	; 0x1000
    ca8a:	add	fp, r0
    ca8c:	adds	r1, #8
    ca8e:	add	r2, fp
    ca90:	ubfx	r2, r2, #0, #12
    ca94:	rsb	r9, r2, r1
    ca98:	mov	r1, r9
    ca9a:	mov	r0, r6
    ca9c:	str	r3, [sp, #4]
    ca9e:	bl	d400 <_sbrk_r>
    caa2:	adds	r3, r0, #1
    caa4:	ldr	r3, [sp, #4]
    caa6:	beq.w	cd28 <_malloc_r+0x51c>
    caaa:	rsb	r2, fp, r0
    caae:	add	r2, r9
    cab0:	orr.w	r2, r2, #1
    cab4:	ldr	r1, [r3, #0]
    cab6:	str.w	fp, [r7, #8]
    caba:	add	r1, r9
    cabc:	cmp	r4, r7
    cabe:	str.w	r2, [fp, #4]
    cac2:	str	r1, [r3, #0]
    cac4:	ldr.w	r9, [pc, #164]	; cb6c <_malloc_r+0x360>
    cac8:	beq.n	caf8 <_malloc_r+0x2ec>
    caca:	cmp.w	r8, #15
    cace:	bls.w	cccc <_malloc_r+0x4c0>
    cad2:	ldr	r2, [r4, #4]
    cad4:	sub.w	r3, r8, #12
    cad8:	bic.w	r3, r3, #7
    cadc:	adds	r0, r4, r3
    cade:	and.w	r2, r2, #1
    cae2:	mov.w	lr, #5
    cae6:	orrs	r2, r3
    cae8:	cmp	r3, #15
    caea:	str	r2, [r4, #4]
    caec:	str.w	lr, [r0, #4]
    caf0:	str.w	lr, [r0, #8]
    caf4:	bhi.w	cd30 <_malloc_r+0x524>
    caf8:	ldr	r3, [pc, #116]	; (cb70 <_malloc_r+0x364>)
    cafa:	ldr	r4, [r7, #8]
    cafc:	ldr	r2, [r3, #0]
    cafe:	cmp	r1, r2
    cb00:	it	hi
    cb02:	strhi	r1, [r3, #0]
    cb04:	ldr	r3, [pc, #108]	; (cb74 <_malloc_r+0x368>)
    cb06:	ldr	r2, [r3, #0]
    cb08:	cmp	r1, r2
    cb0a:	ldr	r2, [r4, #4]
    cb0c:	it	hi
    cb0e:	strhi	r1, [r3, #0]
    cb10:	bic.w	r2, r2, #3
    cb14:	cmp	r5, r2
    cb16:	sub.w	r3, r2, r5
    cb1a:	bhi.n	cb20 <_malloc_r+0x314>
    cb1c:	cmp	r3, #15
    cb1e:	bgt.n	cb2a <_malloc_r+0x31e>
    cb20:	mov	r0, r6
    cb22:	bl	d01c <__malloc_unlock>
    cb26:	movs	r4, #0
    cb28:	b.n	c99c <_malloc_r+0x190>
    cb2a:	adds	r2, r4, r5
    cb2c:	orr.w	r3, r3, #1
    cb30:	orr.w	r5, r5, #1
    cb34:	str	r5, [r4, #4]
    cb36:	mov	r0, r6
    cb38:	str	r2, [r7, #8]
    cb3a:	str	r3, [r2, #4]
    cb3c:	bl	d01c <__malloc_unlock>
    cb40:	adds	r4, #8
    cb42:	mov	r0, r4
    cb44:	add	sp, #12
    cb46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb4a:	cmp	r3, #20
    cb4c:	bls.n	cc32 <_malloc_r+0x426>
    cb4e:	cmp	r3, #84	; 0x54
    cb50:	bhi.w	cc9c <_malloc_r+0x490>
    cb54:	lsrs	r0, r5, #12
    cb56:	add.w	lr, r0, #111	; 0x6f
    cb5a:	mov.w	r3, lr, lsl #1
    cb5e:	adds	r0, #110	; 0x6e
    cb60:	b.n	c850 <_malloc_r+0x44>
    cb62:	nop
    cb64:	.word	0x20001208
    cb68:	.word	0x20006e20
    cb6c:	.word	0x20006e24
    cb70:	.word	0x20006e1c
    cb74:	.word	0x20006e18
    cb78:	.word	0x20001614
    cb7c:	lsrs	r2, r3, #9
    cb7e:	cmp	r2, #4
    cb80:	bls.n	cc40 <_malloc_r+0x434>
    cb82:	cmp	r2, #20
    cb84:	bhi.w	ccee <_malloc_r+0x4e2>
    cb88:	add.w	r1, r2, #92	; 0x5c
    cb8c:	lsls	r1, r1, #1
    cb8e:	adds	r2, #91	; 0x5b
    cb90:	add.w	ip, r7, r1, lsl #2
    cb94:	ldr.w	r1, [r7, r1, lsl #2]
    cb98:	ldr.w	r8, [pc, #476]	; cd78 <_malloc_r+0x56c>
    cb9c:	sub.w	ip, ip, #8
    cba0:	cmp	ip, r1
    cba2:	beq.w	ccb6 <_malloc_r+0x4aa>
    cba6:	ldr	r2, [r1, #4]
    cba8:	bic.w	r2, r2, #3
    cbac:	cmp	r3, r2
    cbae:	bcs.n	cbb6 <_malloc_r+0x3aa>
    cbb0:	ldr	r1, [r1, #8]
    cbb2:	cmp	ip, r1
    cbb4:	bne.n	cba6 <_malloc_r+0x39a>
    cbb6:	ldr.w	ip, [r1, #12]
    cbba:	ldr	r2, [r7, #4]
    cbbc:	str.w	ip, [r4, #12]
    cbc0:	str	r1, [r4, #8]
    cbc2:	str.w	r4, [ip, #8]
    cbc6:	str	r4, [r1, #12]
    cbc8:	b.n	c8dc <_malloc_r+0xd0>
    cbca:	adds	r3, r4, r5
    cbcc:	orr.w	r7, r2, #1
    cbd0:	orr.w	r5, r5, #1
    cbd4:	str	r5, [r4, #4]
    cbd6:	mov	r0, r6
    cbd8:	str	r3, [r1, #20]
    cbda:	str	r3, [r1, #16]
    cbdc:	str.w	lr, [r3, #12]
    cbe0:	str.w	lr, [r3, #8]
    cbe4:	str	r7, [r3, #4]
    cbe6:	str	r2, [r3, r2]
    cbe8:	adds	r4, #8
    cbea:	bl	d01c <__malloc_unlock>
    cbee:	b.n	c99c <_malloc_r+0x190>
    cbf0:	ldr	r2, [r1, #4]
    cbf2:	b.n	c8dc <_malloc_r+0xd0>
    cbf4:	add.w	r8, r8, #1
    cbf8:	tst.w	r8, #3
    cbfc:	add.w	ip, ip, #8
    cc00:	bne.w	c902 <_malloc_r+0xf6>
    cc04:	b.n	cc68 <_malloc_r+0x45c>
    cc06:	ldr	r4, [r3, #12]
    cc08:	cmp	r3, r4
    cc0a:	it	eq
    cc0c:	addeq	r0, #2
    cc0e:	beq.w	c87c <_malloc_r+0x70>
    cc12:	b.n	c97c <_malloc_r+0x170>
    cc14:	add	r3, r1
    cc16:	mov	r4, r1
    cc18:	ldr	r2, [r3, #4]
    cc1a:	ldr	r1, [r1, #12]
    cc1c:	ldr.w	r5, [r4, #8]!
    cc20:	orr.w	r2, r2, #1
    cc24:	str	r2, [r3, #4]
    cc26:	mov	r0, r6
    cc28:	str	r1, [r5, #12]
    cc2a:	str	r5, [r1, #8]
    cc2c:	bl	d01c <__malloc_unlock>
    cc30:	b.n	c99c <_malloc_r+0x190>
    cc32:	add.w	lr, r3, #92	; 0x5c
    cc36:	add.w	r0, r3, #91	; 0x5b
    cc3a:	mov.w	r3, lr, lsl #1
    cc3e:	b.n	c850 <_malloc_r+0x44>
    cc40:	lsrs	r2, r3, #6
    cc42:	add.w	r1, r2, #57	; 0x39
    cc46:	lsls	r1, r1, #1
    cc48:	adds	r2, #56	; 0x38
    cc4a:	b.n	cb90 <_malloc_r+0x384>
    cc4c:	cmp	r4, r7
    cc4e:	ldr	r3, [pc, #296]	; (cd78 <_malloc_r+0x56c>)
    cc50:	beq.w	ca54 <_malloc_r+0x248>
    cc54:	ldr	r4, [r3, #8]
    cc56:	ldr	r2, [r4, #4]
    cc58:	bic.w	r2, r2, #3
    cc5c:	b.n	cb14 <_malloc_r+0x308>
    cc5e:	ldr.w	r3, [r9], #-8
    cc62:	cmp	r9, r3
    cc64:	bne.w	cd6c <_malloc_r+0x560>
    cc68:	tst.w	r0, #3
    cc6c:	add.w	r0, r0, #4294967295
    cc70:	bne.n	cc5e <_malloc_r+0x452>
    cc72:	ldr	r3, [r7, #4]
    cc74:	bic.w	r3, r3, r4
    cc78:	str	r3, [r7, #4]
    cc7a:	lsls	r4, r4, #1
    cc7c:	cmp	r4, r3
    cc7e:	bhi.w	c9fc <_malloc_r+0x1f0>
    cc82:	cmp	r4, #0
    cc84:	beq.w	c9fc <_malloc_r+0x1f0>
    cc88:	tst	r4, r3
    cc8a:	mov	r0, r8
    cc8c:	bne.w	c8fa <_malloc_r+0xee>
    cc90:	lsls	r4, r4, #1
    cc92:	tst	r4, r3
    cc94:	add.w	r0, r0, #4
    cc98:	beq.n	cc90 <_malloc_r+0x484>
    cc9a:	b.n	c8fa <_malloc_r+0xee>
    cc9c:	cmp.w	r3, #340	; 0x154
    cca0:	bhi.n	ccd4 <_malloc_r+0x4c8>
    cca2:	lsrs	r0, r5, #15
    cca4:	add.w	lr, r0, #120	; 0x78
    cca8:	mov.w	r3, lr, lsl #1
    ccac:	adds	r0, #119	; 0x77
    ccae:	b.n	c850 <_malloc_r+0x44>
    ccb0:	mov.w	r1, #4096	; 0x1000
    ccb4:	b.n	ca8e <_malloc_r+0x282>
    ccb6:	movs	r1, #1
    ccb8:	ldr.w	r3, [r8, #4]
    ccbc:	asrs	r2, r2, #2
    ccbe:	lsl.w	r2, r1, r2
    ccc2:	orrs	r2, r3
    ccc4:	str.w	r2, [r8, #4]
    ccc8:	mov	r1, ip
    ccca:	b.n	cbbc <_malloc_r+0x3b0>
    cccc:	movs	r3, #1
    ccce:	str.w	r3, [fp, #4]
    ccd2:	b.n	cb20 <_malloc_r+0x314>
    ccd4:	movw	r2, #1364	; 0x554
    ccd8:	cmp	r3, r2
    ccda:	bhi.n	cd1e <_malloc_r+0x512>
    ccdc:	lsrs	r0, r5, #18
    ccde:	add.w	lr, r0, #125	; 0x7d
    cce2:	mov.w	r3, lr, lsl #1
    cce6:	adds	r0, #124	; 0x7c
    cce8:	b.n	c850 <_malloc_r+0x44>
    ccea:	adds	r2, #16
    ccec:	b.n	ca38 <_malloc_r+0x22c>
    ccee:	cmp	r2, #84	; 0x54
    ccf0:	bhi.n	cd40 <_malloc_r+0x534>
    ccf2:	lsrs	r2, r3, #12
    ccf4:	add.w	r1, r2, #111	; 0x6f
    ccf8:	lsls	r1, r1, #1
    ccfa:	adds	r2, #110	; 0x6e
    ccfc:	b.n	cb90 <_malloc_r+0x384>
    ccfe:	ldr	r4, [r7, #8]
    cd00:	ldr	r2, [r4, #4]
    cd02:	bic.w	r2, r2, #3
    cd06:	b.n	cb14 <_malloc_r+0x308>
    cd08:	ubfx	r0, sl, #0, #12
    cd0c:	cmp	r0, #0
    cd0e:	bne.w	ca62 <_malloc_r+0x256>
    cd12:	add	r2, r8
    cd14:	ldr	r3, [r7, #8]
    cd16:	orr.w	r2, r2, #1
    cd1a:	str	r2, [r3, #4]
    cd1c:	b.n	caf8 <_malloc_r+0x2ec>
    cd1e:	movs	r3, #254	; 0xfe
    cd20:	mov.w	lr, #127	; 0x7f
    cd24:	movs	r0, #126	; 0x7e
    cd26:	b.n	c850 <_malloc_r+0x44>
    cd28:	movs	r2, #1
    cd2a:	mov.w	r9, #0
    cd2e:	b.n	cab4 <_malloc_r+0x2a8>
    cd30:	add.w	r1, r4, #8
    cd34:	mov	r0, r6
    cd36:	bl	d8a8 <_free_r>
    cd3a:	ldr.w	r1, [r9]
    cd3e:	b.n	caf8 <_malloc_r+0x2ec>
    cd40:	cmp.w	r2, #340	; 0x154
    cd44:	bhi.n	cd52 <_malloc_r+0x546>
    cd46:	lsrs	r2, r3, #15
    cd48:	add.w	r1, r2, #120	; 0x78
    cd4c:	lsls	r1, r1, #1
    cd4e:	adds	r2, #119	; 0x77
    cd50:	b.n	cb90 <_malloc_r+0x384>
    cd52:	movw	r1, #1364	; 0x554
    cd56:	cmp	r2, r1
    cd58:	bhi.n	cd66 <_malloc_r+0x55a>
    cd5a:	lsrs	r2, r3, #18
    cd5c:	add.w	r1, r2, #125	; 0x7d
    cd60:	lsls	r1, r1, #1
    cd62:	adds	r2, #124	; 0x7c
    cd64:	b.n	cb90 <_malloc_r+0x384>
    cd66:	movs	r1, #254	; 0xfe
    cd68:	movs	r2, #126	; 0x7e
    cd6a:	b.n	cb90 <_malloc_r+0x384>
    cd6c:	ldr	r3, [r7, #4]
    cd6e:	b.n	cc7a <_malloc_r+0x46e>
    cd70:	lsrs	r0, r5, #3
    cd72:	adds	r3, r0, #1
    cd74:	lsls	r3, r3, #1
    cd76:	b.n	c96a <_malloc_r+0x15e>
    cd78:	.word	0x20001208

0000cd7c <__ascii_mbtowc>:
    cd7c:	sub	sp, #8
    cd7e:	cbz	r1, cd94 <__ascii_mbtowc+0x18>
    cd80:	cbz	r2, cd9a <__ascii_mbtowc+0x1e>
    cd82:	cbz	r3, cda0 <__ascii_mbtowc+0x24>
    cd84:	ldrb	r3, [r2, #0]
    cd86:	str	r3, [r1, #0]
    cd88:	ldrb	r2, [r2, #0]
    cd8a:	adds	r0, r2, #0
    cd8c:	it	ne
    cd8e:	movne	r0, #1
    cd90:	add	sp, #8
    cd92:	bx	lr
    cd94:	add	r1, sp, #4
    cd96:	cmp	r2, #0
    cd98:	bne.n	cd82 <__ascii_mbtowc+0x6>
    cd9a:	mov	r0, r2
    cd9c:	add	sp, #8
    cd9e:	bx	lr
    cda0:	mvn.w	r0, #1
    cda4:	b.n	cd90 <__ascii_mbtowc+0x14>
    cda6:	nop
	...

0000cdb0 <memchr>:
    cdb0:	and.w	r1, r1, #255	; 0xff
    cdb4:	cmp	r2, #16
    cdb6:	blt.n	ce10 <memchr+0x60>
    cdb8:	tst.w	r0, #7
    cdbc:	beq.n	cdd0 <memchr+0x20>
    cdbe:	ldrb.w	r3, [r0], #1
    cdc2:	subs	r2, #1
    cdc4:	cmp	r3, r1
    cdc6:	beq.n	ce24 <memchr+0x74>
    cdc8:	tst.w	r0, #7
    cdcc:	cbz	r2, ce20 <memchr+0x70>
    cdce:	bne.n	cdbe <memchr+0xe>
    cdd0:	push	{r4, r5, r6, r7}
    cdd2:	orr.w	r1, r1, r1, lsl #8
    cdd6:	orr.w	r1, r1, r1, lsl #16
    cdda:	bic.w	r4, r2, #7
    cdde:	mvns.w	r7, #0
    cde2:	movs	r3, #0
    cde4:	ldrd	r5, r6, [r0], #8
    cde8:	subs	r4, #8
    cdea:	eor.w	r5, r5, r1
    cdee:	eor.w	r6, r6, r1
    cdf2:	uadd8	r5, r5, r7
    cdf6:	sel	r5, r3, r7
    cdfa:	uadd8	r6, r6, r7
    cdfe:	sel	r6, r5, r7
    ce02:	cbnz	r6, ce28 <memchr+0x78>
    ce04:	bne.n	cde4 <memchr+0x34>
    ce06:	pop	{r4, r5, r6, r7}
    ce08:	and.w	r1, r1, #255	; 0xff
    ce0c:	and.w	r2, r2, #7
    ce10:	cbz	r2, ce20 <memchr+0x70>
    ce12:	ldrb.w	r3, [r0], #1
    ce16:	subs	r2, #1
    ce18:	eor.w	r3, r3, r1
    ce1c:	cbz	r3, ce24 <memchr+0x74>
    ce1e:	bne.n	ce12 <memchr+0x62>
    ce20:	movs	r0, #0
    ce22:	bx	lr
    ce24:	subs	r0, #1
    ce26:	bx	lr
    ce28:	cmp	r5, #0
    ce2a:	itte	eq
    ce2c:	moveq	r5, r6
    ce2e:	subeq	r0, #3
    ce30:	subne	r0, #7
    ce32:	tst.w	r5, #1
    ce36:	bne.n	ce48 <memchr+0x98>
    ce38:	adds	r0, #1
    ce3a:	tst.w	r5, #256	; 0x100
    ce3e:	ittt	eq
    ce40:	addeq	r0, #1
    ce42:	tsteq.w	r5, #98304	; 0x18000
    ce46:	addeq	r0, #1
    ce48:	pop	{r4, r5, r6, r7}
    ce4a:	subs	r0, #1
    ce4c:	bx	lr
    ce4e:	nop

0000ce50 <memcmp>:
    ce50:	cmp	r2, #3
    ce52:	push	{r4, r5, r6}
    ce54:	bls.n	cea4 <memcmp+0x54>
    ce56:	orr.w	r3, r0, r1
    ce5a:	lsls	r3, r3, #30
    ce5c:	beq.n	ce82 <memcmp+0x32>
    ce5e:	ldrb	r4, [r0, #0]
    ce60:	ldrb	r5, [r1, #0]
    ce62:	cmp	r4, r5
    ce64:	bne.n	ceac <memcmp+0x5c>
    ce66:	add	r2, r0
    ce68:	adds	r3, r0, #1
    ce6a:	b.n	ce78 <memcmp+0x28>
    ce6c:	ldrb.w	r4, [r3], #1
    ce70:	ldrb.w	r5, [r1, #1]!
    ce74:	cmp	r4, r5
    ce76:	bne.n	ceac <memcmp+0x5c>
    ce78:	cmp	r3, r2
    ce7a:	bne.n	ce6c <memcmp+0x1c>
    ce7c:	movs	r0, #0
    ce7e:	pop	{r4, r5, r6}
    ce80:	bx	lr
    ce82:	mov	r4, r1
    ce84:	mov	r3, r0
    ce86:	ldr	r6, [r3, #0]
    ce88:	ldr	r5, [r4, #0]
    ce8a:	cmp	r6, r5
    ce8c:	mov	r0, r3
    ce8e:	mov	r1, r4
    ce90:	add.w	r3, r3, #4
    ce94:	add.w	r4, r4, #4
    ce98:	bne.n	ce5e <memcmp+0xe>
    ce9a:	subs	r2, #4
    ce9c:	cmp	r2, #3
    ce9e:	mov	r0, r3
    cea0:	mov	r1, r4
    cea2:	bhi.n	ce86 <memcmp+0x36>
    cea4:	cmp	r2, #0
    cea6:	bne.n	ce5e <memcmp+0xe>
    cea8:	mov	r0, r2
    ceaa:	b.n	ce7e <memcmp+0x2e>
    ceac:	subs	r0, r4, r5
    ceae:	pop	{r4, r5, r6}
    ceb0:	bx	lr
    ceb2:	nop

0000ceb4 <memmove>:
    ceb4:	cmp	r0, r1
    ceb6:	push	{r4, r5, r6, r7, lr}
    ceb8:	bls.n	ced6 <memmove+0x22>
    ceba:	adds	r3, r1, r2
    cebc:	cmp	r0, r3
    cebe:	bcs.n	ced6 <memmove+0x22>
    cec0:	adds	r1, r0, r2
    cec2:	cmp	r2, #0
    cec4:	beq.n	cf6a <memmove+0xb6>
    cec6:	subs	r2, r3, r2
    cec8:	ldrb.w	r4, [r3, #-1]!
    cecc:	strb.w	r4, [r1, #-1]!
    ced0:	cmp	r3, r2
    ced2:	bne.n	cec8 <memmove+0x14>
    ced4:	pop	{r4, r5, r6, r7, pc}
    ced6:	cmp	r2, #15
    ced8:	bls.n	cf6c <memmove+0xb8>
    ceda:	orr.w	r3, r1, r0
    cede:	lsls	r3, r3, #30
    cee0:	bne.n	cf70 <memmove+0xbc>
    cee2:	add.w	r4, r0, #16
    cee6:	add.w	r3, r1, #16
    ceea:	mov	r5, r2
    ceec:	ldr.w	r6, [r3, #-16]
    cef0:	str.w	r6, [r4, #-16]
    cef4:	ldr.w	r6, [r3, #-12]
    cef8:	str.w	r6, [r4, #-12]
    cefc:	ldr.w	r6, [r3, #-8]
    cf00:	str.w	r6, [r4, #-8]
    cf04:	subs	r5, #16
    cf06:	ldr.w	r6, [r3, #-4]
    cf0a:	str.w	r6, [r4, #-4]
    cf0e:	cmp	r5, #15
    cf10:	add.w	r3, r3, #16
    cf14:	add.w	r4, r4, #16
    cf18:	bhi.n	ceec <memmove+0x38>
    cf1a:	sub.w	r3, r2, #16
    cf1e:	bic.w	r3, r3, #15
    cf22:	and.w	lr, r2, #15
    cf26:	adds	r3, #16
    cf28:	cmp.w	lr, #3
    cf2c:	add	r1, r3
    cf2e:	add	r3, r0
    cf30:	bls.n	cf76 <memmove+0xc2>
    cf32:	subs	r6, r3, #4
    cf34:	mov	r5, r1
    cf36:	mov	r4, lr
    cf38:	subs	r4, #4
    cf3a:	ldr.w	r7, [r5], #4
    cf3e:	str.w	r7, [r6, #4]!
    cf42:	cmp	r4, #3
    cf44:	bhi.n	cf38 <memmove+0x84>
    cf46:	sub.w	r4, lr, #4
    cf4a:	bic.w	r4, r4, #3
    cf4e:	adds	r4, #4
    cf50:	add	r3, r4
    cf52:	add	r1, r4
    cf54:	and.w	r2, r2, #3
    cf58:	cbz	r2, cf74 <memmove+0xc0>
    cf5a:	subs	r3, #1
    cf5c:	add	r2, r1
    cf5e:	ldrb.w	r4, [r1], #1
    cf62:	strb.w	r4, [r3, #1]!
    cf66:	cmp	r2, r1
    cf68:	bne.n	cf5e <memmove+0xaa>
    cf6a:	pop	{r4, r5, r6, r7, pc}
    cf6c:	mov	r3, r0
    cf6e:	b.n	cf58 <memmove+0xa4>
    cf70:	mov	r3, r0
    cf72:	b.n	cf5a <memmove+0xa6>
    cf74:	pop	{r4, r5, r6, r7, pc}
    cf76:	mov	r2, lr
    cf78:	b.n	cf58 <memmove+0xa4>
    cf7a:	nop

0000cf7c <memset>:
    cf7c:	push	{r4, r5, r6}
    cf7e:	lsls	r4, r0, #30
    cf80:	beq.n	d010 <memset+0x94>
    cf82:	subs	r4, r2, #1
    cf84:	cmp	r2, #0
    cf86:	beq.n	d00c <memset+0x90>
    cf88:	uxtb	r5, r1
    cf8a:	mov	r3, r0
    cf8c:	b.n	cf94 <memset+0x18>
    cf8e:	subs	r2, r4, #1
    cf90:	cbz	r4, d00c <memset+0x90>
    cf92:	mov	r4, r2
    cf94:	strb.w	r5, [r3], #1
    cf98:	lsls	r2, r3, #30
    cf9a:	bne.n	cf8e <memset+0x12>
    cf9c:	cmp	r4, #3
    cf9e:	bls.n	cffe <memset+0x82>
    cfa0:	uxtb	r5, r1
    cfa2:	orr.w	r5, r5, r5, lsl #8
    cfa6:	cmp	r4, #15
    cfa8:	orr.w	r5, r5, r5, lsl #16
    cfac:	bls.n	cfe2 <memset+0x66>
    cfae:	add.w	r2, r3, #16
    cfb2:	mov	r6, r4
    cfb4:	subs	r6, #16
    cfb6:	cmp	r6, #15
    cfb8:	str.w	r5, [r2, #-16]
    cfbc:	str.w	r5, [r2, #-12]
    cfc0:	str.w	r5, [r2, #-8]
    cfc4:	str.w	r5, [r2, #-4]
    cfc8:	add.w	r2, r2, #16
    cfcc:	bhi.n	cfb4 <memset+0x38>
    cfce:	sub.w	r2, r4, #16
    cfd2:	bic.w	r2, r2, #15
    cfd6:	and.w	r4, r4, #15
    cfda:	adds	r2, #16
    cfdc:	cmp	r4, #3
    cfde:	add	r3, r2
    cfe0:	bls.n	cffe <memset+0x82>
    cfe2:	mov	r6, r3
    cfe4:	mov	r2, r4
    cfe6:	subs	r2, #4
    cfe8:	cmp	r2, #3
    cfea:	str.w	r5, [r6], #4
    cfee:	bhi.n	cfe6 <memset+0x6a>
    cff0:	subs	r2, r4, #4
    cff2:	bic.w	r2, r2, #3
    cff6:	adds	r2, #4
    cff8:	add	r3, r2
    cffa:	and.w	r4, r4, #3
    cffe:	cbz	r4, d00c <memset+0x90>
    d000:	uxtb	r1, r1
    d002:	add	r4, r3
    d004:	strb.w	r1, [r3], #1
    d008:	cmp	r3, r4
    d00a:	bne.n	d004 <memset+0x88>
    d00c:	pop	{r4, r5, r6}
    d00e:	bx	lr
    d010:	mov	r4, r2
    d012:	mov	r3, r0
    d014:	b.n	cf9c <memset+0x20>
    d016:	nop

0000d018 <__malloc_lock>:
    d018:	bx	lr
    d01a:	nop

0000d01c <__malloc_unlock>:
    d01c:	bx	lr
    d01e:	nop

0000d020 <_realloc_r>:
    d020:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d024:	mov	r7, r2
    d026:	sub	sp, #12
    d028:	cmp	r1, #0
    d02a:	beq.w	d1b0 <_realloc_r+0x190>
    d02e:	mov	r6, r1
    d030:	mov	r9, r0
    d032:	add.w	r5, r7, #11
    d036:	bl	d018 <__malloc_lock>
    d03a:	ldr.w	lr, [r6, #-4]
    d03e:	cmp	r5, #22
    d040:	bic.w	r4, lr, #3
    d044:	sub.w	r8, r6, #8
    d048:	bhi.n	d0cc <_realloc_r+0xac>
    d04a:	movs	r2, #16
    d04c:	mov	r5, r2
    d04e:	cmp	r7, r5
    d050:	bhi.n	d0d6 <_realloc_r+0xb6>
    d052:	cmp	r4, r2
    d054:	bge.n	d142 <_realloc_r+0x122>
    d056:	ldr	r3, [pc, #804]	; (d37c <_realloc_r+0x35c>)
    d058:	ldr	r1, [r3, #8]
    d05a:	add.w	r0, r8, r4
    d05e:	cmp	r0, r1
    d060:	ldr	r1, [r0, #4]
    d062:	beq.w	d218 <_realloc_r+0x1f8>
    d066:	bic.w	r3, r1, #1
    d06a:	add	r3, r0
    d06c:	ldr	r3, [r3, #4]
    d06e:	lsls	r3, r3, #31
    d070:	bpl.n	d16e <_realloc_r+0x14e>
    d072:	tst.w	lr, #1
    d076:	beq.n	d0e4 <_realloc_r+0xc4>
    d078:	mov	r1, r7
    d07a:	mov	r0, r9
    d07c:	bl	c80c <_malloc_r>
    d080:	mov	r7, r0
    d082:	cbz	r0, d0be <_realloc_r+0x9e>
    d084:	ldr.w	r3, [r6, #-4]
    d088:	bic.w	r3, r3, #1
    d08c:	add	r3, r8
    d08e:	sub.w	r2, r0, #8
    d092:	cmp	r2, r3
    d094:	beq.w	d320 <_realloc_r+0x300>
    d098:	subs	r2, r4, #4
    d09a:	cmp	r2, #36	; 0x24
    d09c:	bhi.w	d302 <_realloc_r+0x2e2>
    d0a0:	cmp	r2, #19
    d0a2:	bhi.w	d2ae <_realloc_r+0x28e>
    d0a6:	mov	r3, r0
    d0a8:	mov	r2, r6
    d0aa:	ldr	r1, [r2, #0]
    d0ac:	str	r1, [r3, #0]
    d0ae:	ldr	r1, [r2, #4]
    d0b0:	str	r1, [r3, #4]
    d0b2:	ldr	r2, [r2, #8]
    d0b4:	str	r2, [r3, #8]
    d0b6:	mov	r1, r6
    d0b8:	mov	r0, r9
    d0ba:	bl	d8a8 <_free_r>
    d0be:	mov	r0, r9
    d0c0:	bl	d01c <__malloc_unlock>
    d0c4:	mov	r0, r7
    d0c6:	add	sp, #12
    d0c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0cc:	bic.w	r5, r5, #7
    d0d0:	cmp	r5, #0
    d0d2:	mov	r2, r5
    d0d4:	bge.n	d04e <_realloc_r+0x2e>
    d0d6:	movs	r3, #12
    d0d8:	movs	r0, #0
    d0da:	str.w	r3, [r9]
    d0de:	add	sp, #12
    d0e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0e4:	ldr.w	r3, [r6, #-8]
    d0e8:	rsb	sl, r3, r8
    d0ec:	ldr.w	r3, [sl, #4]
    d0f0:	bic.w	ip, r3, #3
    d0f4:	add.w	r3, r4, ip
    d0f8:	cmp	r3, r2
    d0fa:	blt.n	d078 <_realloc_r+0x58>
    d0fc:	mov	r7, sl
    d0fe:	ldr.w	r1, [sl, #12]
    d102:	ldr.w	r0, [r7, #8]!
    d106:	subs	r2, r4, #4
    d108:	cmp	r2, #36	; 0x24
    d10a:	str	r1, [r0, #12]
    d10c:	str	r0, [r1, #8]
    d10e:	bhi.w	d340 <_realloc_r+0x320>
    d112:	cmp	r2, #19
    d114:	bls.w	d33c <_realloc_r+0x31c>
    d118:	ldr	r1, [r6, #0]
    d11a:	str.w	r1, [sl, #8]
    d11e:	ldr	r1, [r6, #4]
    d120:	str.w	r1, [sl, #12]
    d124:	cmp	r2, #27
    d126:	bhi.w	d380 <_realloc_r+0x360>
    d12a:	adds	r6, #8
    d12c:	add.w	r2, sl, #16
    d130:	ldr	r1, [r6, #0]
    d132:	str	r1, [r2, #0]
    d134:	ldr	r1, [r6, #4]
    d136:	str	r1, [r2, #4]
    d138:	ldr	r1, [r6, #8]
    d13a:	str	r1, [r2, #8]
    d13c:	mov	r6, r7
    d13e:	mov	r4, r3
    d140:	mov	r8, sl
    d142:	subs	r3, r4, r5
    d144:	cmp	r3, #15
    d146:	bhi.n	d184 <_realloc_r+0x164>
    d148:	ldr.w	r3, [r8, #4]
    d14c:	and.w	r3, r3, #1
    d150:	orrs	r3, r4
    d152:	add	r4, r8
    d154:	str.w	r3, [r8, #4]
    d158:	ldr	r3, [r4, #4]
    d15a:	orr.w	r3, r3, #1
    d15e:	str	r3, [r4, #4]
    d160:	mov	r0, r9
    d162:	bl	d01c <__malloc_unlock>
    d166:	mov	r0, r6
    d168:	add	sp, #12
    d16a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d16e:	bic.w	r1, r1, #3
    d172:	add	r1, r4
    d174:	cmp	r1, r2
    d176:	blt.n	d1bc <_realloc_r+0x19c>
    d178:	ldr	r3, [r0, #12]
    d17a:	ldr	r2, [r0, #8]
    d17c:	mov	r4, r1
    d17e:	str	r3, [r2, #12]
    d180:	str	r2, [r3, #8]
    d182:	b.n	d142 <_realloc_r+0x122>
    d184:	ldr.w	r2, [r8, #4]
    d188:	add.w	r1, r8, r5
    d18c:	and.w	r2, r2, #1
    d190:	orrs	r5, r2
    d192:	orr.w	r2, r3, #1
    d196:	add	r3, r1
    d198:	str.w	r5, [r8, #4]
    d19c:	str	r2, [r1, #4]
    d19e:	ldr	r2, [r3, #4]
    d1a0:	orr.w	r2, r2, #1
    d1a4:	adds	r1, #8
    d1a6:	str	r2, [r3, #4]
    d1a8:	mov	r0, r9
    d1aa:	bl	d8a8 <_free_r>
    d1ae:	b.n	d160 <_realloc_r+0x140>
    d1b0:	mov	r1, r2
    d1b2:	add	sp, #12
    d1b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1b8:	b.w	c80c <_malloc_r>
    d1bc:	tst.w	lr, #1
    d1c0:	bne.w	d078 <_realloc_r+0x58>
    d1c4:	ldr.w	r3, [r6, #-8]
    d1c8:	rsb	sl, r3, r8
    d1cc:	ldr.w	r3, [sl, #4]
    d1d0:	bic.w	ip, r3, #3
    d1d4:	add.w	lr, r1, ip
    d1d8:	cmp	lr, r2
    d1da:	blt.n	d0f4 <_realloc_r+0xd4>
    d1dc:	ldr	r3, [r0, #12]
    d1de:	ldr	r2, [r0, #8]
    d1e0:	mov	r7, sl
    d1e2:	str	r3, [r2, #12]
    d1e4:	str	r2, [r3, #8]
    d1e6:	ldr.w	r1, [r7, #8]!
    d1ea:	ldr.w	r3, [sl, #12]
    d1ee:	str	r3, [r1, #12]
    d1f0:	subs	r2, r4, #4
    d1f2:	cmp	r2, #36	; 0x24
    d1f4:	str	r1, [r3, #8]
    d1f6:	bhi.w	d32c <_realloc_r+0x30c>
    d1fa:	cmp	r2, #19
    d1fc:	bls.n	d2c4 <_realloc_r+0x2a4>
    d1fe:	ldr	r3, [r6, #0]
    d200:	str.w	r3, [sl, #8]
    d204:	ldr	r3, [r6, #4]
    d206:	str.w	r3, [sl, #12]
    d20a:	cmp	r2, #27
    d20c:	bhi.w	d350 <_realloc_r+0x330>
    d210:	adds	r6, #8
    d212:	add.w	r3, sl, #16
    d216:	b.n	d2c6 <_realloc_r+0x2a6>
    d218:	bic.w	fp, r1, #3
    d21c:	add	fp, r4
    d21e:	add.w	r0, r5, #16
    d222:	cmp	fp, r0
    d224:	bge.n	d2da <_realloc_r+0x2ba>
    d226:	tst.w	lr, #1
    d22a:	bne.w	d078 <_realloc_r+0x58>
    d22e:	ldr.w	r1, [r6, #-8]
    d232:	rsb	sl, r1, r8
    d236:	ldr.w	r1, [sl, #4]
    d23a:	bic.w	ip, r1, #3
    d23e:	add	fp, ip
    d240:	cmp	r0, fp
    d242:	bgt.w	d0f4 <_realloc_r+0xd4>
    d246:	mov	r7, sl
    d248:	ldr.w	r1, [sl, #12]
    d24c:	ldr.w	r0, [r7, #8]!
    d250:	subs	r2, r4, #4
    d252:	cmp	r2, #36	; 0x24
    d254:	str	r1, [r0, #12]
    d256:	str	r0, [r1, #8]
    d258:	bhi.w	d3c4 <_realloc_r+0x3a4>
    d25c:	cmp	r2, #19
    d25e:	bls.w	d3ac <_realloc_r+0x38c>
    d262:	ldr	r1, [r6, #0]
    d264:	str.w	r1, [sl, #8]
    d268:	ldr	r1, [r6, #4]
    d26a:	str.w	r1, [sl, #12]
    d26e:	cmp	r2, #27
    d270:	bhi.w	d3d2 <_realloc_r+0x3b2>
    d274:	adds	r6, #8
    d276:	add.w	r2, sl, #16
    d27a:	ldr	r1, [r6, #0]
    d27c:	str	r1, [r2, #0]
    d27e:	ldr	r1, [r6, #4]
    d280:	str	r1, [r2, #4]
    d282:	ldr	r1, [r6, #8]
    d284:	str	r1, [r2, #8]
    d286:	add.w	r1, sl, r5
    d28a:	rsb	r2, r5, fp
    d28e:	orr.w	r2, r2, #1
    d292:	str	r1, [r3, #8]
    d294:	str	r2, [r1, #4]
    d296:	ldr.w	r3, [sl, #4]
    d29a:	and.w	r3, r3, #1
    d29e:	orrs	r5, r3
    d2a0:	mov	r0, r9
    d2a2:	str.w	r5, [sl, #4]
    d2a6:	bl	d01c <__malloc_unlock>
    d2aa:	mov	r0, r7
    d2ac:	b.n	d168 <_realloc_r+0x148>
    d2ae:	ldr	r3, [r6, #0]
    d2b0:	str	r3, [r0, #0]
    d2b2:	ldr	r3, [r6, #4]
    d2b4:	str	r3, [r0, #4]
    d2b6:	cmp	r2, #27
    d2b8:	bhi.n	d30a <_realloc_r+0x2ea>
    d2ba:	add.w	r3, r0, #8
    d2be:	add.w	r2, r6, #8
    d2c2:	b.n	d0aa <_realloc_r+0x8a>
    d2c4:	mov	r3, r7
    d2c6:	ldr	r2, [r6, #0]
    d2c8:	str	r2, [r3, #0]
    d2ca:	ldr	r2, [r6, #4]
    d2cc:	str	r2, [r3, #4]
    d2ce:	ldr	r2, [r6, #8]
    d2d0:	str	r2, [r3, #8]
    d2d2:	mov	r6, r7
    d2d4:	mov	r4, lr
    d2d6:	mov	r8, sl
    d2d8:	b.n	d142 <_realloc_r+0x122>
    d2da:	add.w	r1, r8, r5
    d2de:	rsb	fp, r5, fp
    d2e2:	orr.w	r2, fp, #1
    d2e6:	str	r1, [r3, #8]
    d2e8:	str	r2, [r1, #4]
    d2ea:	ldr.w	r3, [r6, #-4]
    d2ee:	and.w	r3, r3, #1
    d2f2:	orrs	r5, r3
    d2f4:	mov	r0, r9
    d2f6:	str.w	r5, [r6, #-4]
    d2fa:	bl	d01c <__malloc_unlock>
    d2fe:	mov	r0, r6
    d300:	b.n	d168 <_realloc_r+0x148>
    d302:	mov	r1, r6
    d304:	bl	ceb4 <memmove>
    d308:	b.n	d0b6 <_realloc_r+0x96>
    d30a:	ldr	r3, [r6, #8]
    d30c:	str	r3, [r0, #8]
    d30e:	ldr	r3, [r6, #12]
    d310:	str	r3, [r0, #12]
    d312:	cmp	r2, #36	; 0x24
    d314:	beq.n	d368 <_realloc_r+0x348>
    d316:	add.w	r3, r0, #16
    d31a:	add.w	r2, r6, #16
    d31e:	b.n	d0aa <_realloc_r+0x8a>
    d320:	ldr.w	r3, [r0, #-4]
    d324:	bic.w	r3, r3, #3
    d328:	add	r4, r3
    d32a:	b.n	d142 <_realloc_r+0x122>
    d32c:	mov	r1, r6
    d32e:	mov	r0, r7
    d330:	mov	r4, lr
    d332:	mov	r8, sl
    d334:	bl	ceb4 <memmove>
    d338:	mov	r6, r7
    d33a:	b.n	d142 <_realloc_r+0x122>
    d33c:	mov	r2, r7
    d33e:	b.n	d130 <_realloc_r+0x110>
    d340:	mov	r1, r6
    d342:	mov	r0, r7
    d344:	mov	r4, r3
    d346:	mov	r8, sl
    d348:	bl	ceb4 <memmove>
    d34c:	mov	r6, r7
    d34e:	b.n	d142 <_realloc_r+0x122>
    d350:	ldr	r3, [r6, #8]
    d352:	str.w	r3, [sl, #16]
    d356:	ldr	r3, [r6, #12]
    d358:	str.w	r3, [sl, #20]
    d35c:	cmp	r2, #36	; 0x24
    d35e:	beq.n	d398 <_realloc_r+0x378>
    d360:	adds	r6, #16
    d362:	add.w	r3, sl, #24
    d366:	b.n	d2c6 <_realloc_r+0x2a6>
    d368:	ldr	r3, [r6, #16]
    d36a:	str	r3, [r0, #16]
    d36c:	ldr	r3, [r6, #20]
    d36e:	str	r3, [r0, #20]
    d370:	add.w	r2, r6, #24
    d374:	add.w	r3, r0, #24
    d378:	b.n	d0aa <_realloc_r+0x8a>
    d37a:	nop
    d37c:	.word	0x20001208
    d380:	ldr	r1, [r6, #8]
    d382:	str.w	r1, [sl, #16]
    d386:	ldr	r1, [r6, #12]
    d388:	str.w	r1, [sl, #20]
    d38c:	cmp	r2, #36	; 0x24
    d38e:	beq.n	d3b0 <_realloc_r+0x390>
    d390:	adds	r6, #16
    d392:	add.w	r2, sl, #24
    d396:	b.n	d130 <_realloc_r+0x110>
    d398:	ldr	r3, [r6, #16]
    d39a:	str.w	r3, [sl, #24]
    d39e:	ldr	r3, [r6, #20]
    d3a0:	str.w	r3, [sl, #28]
    d3a4:	adds	r6, #24
    d3a6:	add.w	r3, sl, #32
    d3aa:	b.n	d2c6 <_realloc_r+0x2a6>
    d3ac:	mov	r2, r7
    d3ae:	b.n	d27a <_realloc_r+0x25a>
    d3b0:	ldr	r2, [r6, #16]
    d3b2:	str.w	r2, [sl, #24]
    d3b6:	ldr	r2, [r6, #20]
    d3b8:	str.w	r2, [sl, #28]
    d3bc:	adds	r6, #24
    d3be:	add.w	r2, sl, #32
    d3c2:	b.n	d130 <_realloc_r+0x110>
    d3c4:	mov	r1, r6
    d3c6:	mov	r0, r7
    d3c8:	str	r3, [sp, #4]
    d3ca:	bl	ceb4 <memmove>
    d3ce:	ldr	r3, [sp, #4]
    d3d0:	b.n	d286 <_realloc_r+0x266>
    d3d2:	ldr	r1, [r6, #8]
    d3d4:	str.w	r1, [sl, #16]
    d3d8:	ldr	r1, [r6, #12]
    d3da:	str.w	r1, [sl, #20]
    d3de:	cmp	r2, #36	; 0x24
    d3e0:	beq.n	d3ea <_realloc_r+0x3ca>
    d3e2:	adds	r6, #16
    d3e4:	add.w	r2, sl, #24
    d3e8:	b.n	d27a <_realloc_r+0x25a>
    d3ea:	ldr	r2, [r6, #16]
    d3ec:	str.w	r2, [sl, #24]
    d3f0:	ldr	r2, [r6, #20]
    d3f2:	str.w	r2, [sl, #28]
    d3f6:	adds	r6, #24
    d3f8:	add.w	r2, sl, #32
    d3fc:	b.n	d27a <_realloc_r+0x25a>
    d3fe:	nop

0000d400 <_sbrk_r>:
    d400:	push	{r3, r4, r5, lr}
    d402:	ldr	r4, [pc, #28]	; (d420 <_sbrk_r+0x20>)
    d404:	movs	r3, #0
    d406:	mov	r5, r0
    d408:	mov	r0, r1
    d40a:	str	r3, [r4, #0]
    d40c:	bl	afdc <_sbrk>
    d410:	adds	r3, r0, #1
    d412:	beq.n	d416 <_sbrk_r+0x16>
    d414:	pop	{r3, r4, r5, pc}
    d416:	ldr	r3, [r4, #0]
    d418:	cmp	r3, #0
    d41a:	beq.n	d414 <_sbrk_r+0x14>
    d41c:	str	r3, [r5, #0]
    d41e:	pop	{r3, r4, r5, pc}
    d420:	.word	0x20008ac0

0000d424 <strcat>:
    d424:	lsls	r3, r0, #30
    d426:	push	{r4, lr}
    d428:	mov	r4, r0
    d42a:	bne.n	d44e <strcat+0x2a>
    d42c:	ldr	r2, [r0, #0]
    d42e:	sub.w	r3, r2, #16843009	; 0x1010101
    d432:	bic.w	r3, r3, r2
    d436:	tst.w	r3, #2155905152	; 0x80808080
    d43a:	bne.n	d44e <strcat+0x2a>
    d43c:	ldr.w	r2, [r0, #4]!
    d440:	sub.w	r3, r2, #16843009	; 0x1010101
    d444:	bic.w	r3, r3, r2
    d448:	tst.w	r3, #2155905152	; 0x80808080
    d44c:	beq.n	d43c <strcat+0x18>
    d44e:	ldrb	r3, [r0, #0]
    d450:	cbz	r3, d45a <strcat+0x36>
    d452:	ldrb.w	r3, [r0, #1]!
    d456:	cmp	r3, #0
    d458:	bne.n	d452 <strcat+0x2e>
    d45a:	bl	d464 <strcpy>
    d45e:	mov	r0, r4
    d460:	pop	{r4, pc}
    d462:	nop

0000d464 <strcpy>:
    d464:	eor.w	r2, r0, r1
    d468:	mov	ip, r0
    d46a:	tst.w	r2, #3
    d46e:	bne.n	d510 <strcpy+0xac>
    d470:	tst.w	r1, #3
    d474:	bne.n	d4dc <strcpy+0x78>
    d476:	str.w	r4, [sp, #-4]!
    d47a:	tst.w	r1, #4
    d47e:	ldr.w	r3, [r1], #4
    d482:	beq.n	d49c <strcpy+0x38>
    d484:	sub.w	r2, r3, #16843009	; 0x1010101
    d488:	bics	r2, r3
    d48a:	tst.w	r2, #2155905152	; 0x80808080
    d48e:	itt	eq
    d490:	streq.w	r3, [ip], #4
    d494:	ldreq.w	r3, [r1], #4
    d498:	bne.n	d4c8 <strcpy+0x64>
    d49a:	nop
    d49c:	ldr.w	r4, [r1], #4
    d4a0:	sub.w	r2, r3, #16843009	; 0x1010101
    d4a4:	bics	r2, r3
    d4a6:	tst.w	r2, #2155905152	; 0x80808080
    d4aa:	sub.w	r2, r4, #16843009	; 0x1010101
    d4ae:	bne.n	d4c8 <strcpy+0x64>
    d4b0:	str.w	r3, [ip], #4
    d4b4:	bics	r2, r4
    d4b6:	tst.w	r2, #2155905152	; 0x80808080
    d4ba:	itt	eq
    d4bc:	ldreq.w	r3, [r1], #4
    d4c0:	streq.w	r4, [ip], #4
    d4c4:	beq.n	d49c <strcpy+0x38>
    d4c6:	mov	r3, r4
    d4c8:	strb.w	r3, [ip], #1
    d4cc:	tst.w	r3, #255	; 0xff
    d4d0:	mov.w	r3, r3, ror #8
    d4d4:	bne.n	d4c8 <strcpy+0x64>
    d4d6:	ldr.w	r4, [sp], #4
    d4da:	bx	lr
    d4dc:	tst.w	r1, #1
    d4e0:	beq.n	d4f0 <strcpy+0x8c>
    d4e2:	ldrb.w	r2, [r1], #1
    d4e6:	strb.w	r2, [ip], #1
    d4ea:	cmp	r2, #0
    d4ec:	it	eq
    d4ee:	bxeq	lr
    d4f0:	tst.w	r1, #2
    d4f4:	beq.n	d476 <strcpy+0x12>
    d4f6:	ldrh.w	r2, [r1], #2
    d4fa:	tst.w	r2, #255	; 0xff
    d4fe:	itet	ne
    d500:	strhne.w	r2, [ip], #2
    d504:	strbeq.w	r2, [ip]
    d508:	tstne.w	r2, #65280	; 0xff00
    d50c:	bne.n	d476 <strcpy+0x12>
    d50e:	bx	lr
    d510:	ldrb.w	r2, [r1], #1
    d514:	strb.w	r2, [ip], #1
    d518:	cmp	r2, #0
    d51a:	bne.n	d510 <strcpy+0xac>
    d51c:	bx	lr
    d51e:	nop
	...

0000d540 <strlen>:
    d540:	pld	[r0]
    d544:	strd	r4, r5, [sp, #-8]!
    d548:	bic.w	r1, r0, #7
    d54c:	mvn.w	ip, #0
    d550:	ands.w	r4, r0, #7
    d554:	pld	[r1, #32]
    d558:	bne.w	d5ee <strlen+0xae>
    d55c:	mov.w	r4, #0
    d560:	mvn.w	r0, #7
    d564:	ldrd	r2, r3, [r1]
    d568:	pld	[r1, #64]	; 0x40
    d56c:	add.w	r0, r0, #8
    d570:	uadd8	r2, r2, ip
    d574:	sel	r2, r4, ip
    d578:	uadd8	r3, r3, ip
    d57c:	sel	r3, r2, ip
    d580:	cbnz	r3, d5d6 <strlen+0x96>
    d582:	ldrd	r2, r3, [r1, #8]
    d586:	uadd8	r2, r2, ip
    d58a:	add.w	r0, r0, #8
    d58e:	sel	r2, r4, ip
    d592:	uadd8	r3, r3, ip
    d596:	sel	r3, r2, ip
    d59a:	cbnz	r3, d5d6 <strlen+0x96>
    d59c:	ldrd	r2, r3, [r1, #16]
    d5a0:	uadd8	r2, r2, ip
    d5a4:	add.w	r0, r0, #8
    d5a8:	sel	r2, r4, ip
    d5ac:	uadd8	r3, r3, ip
    d5b0:	sel	r3, r2, ip
    d5b4:	cbnz	r3, d5d6 <strlen+0x96>
    d5b6:	ldrd	r2, r3, [r1, #24]
    d5ba:	add.w	r1, r1, #32
    d5be:	uadd8	r2, r2, ip
    d5c2:	add.w	r0, r0, #8
    d5c6:	sel	r2, r4, ip
    d5ca:	uadd8	r3, r3, ip
    d5ce:	sel	r3, r2, ip
    d5d2:	cmp	r3, #0
    d5d4:	beq.n	d564 <strlen+0x24>
    d5d6:	cmp	r2, #0
    d5d8:	itt	eq
    d5da:	addeq	r0, #4
    d5dc:	moveq	r2, r3
    d5de:	rev	r2, r2
    d5e0:	clz	r2, r2
    d5e4:	ldrd	r4, r5, [sp], #8
    d5e8:	add.w	r0, r0, r2, lsr #3
    d5ec:	bx	lr
    d5ee:	ldrd	r2, r3, [r1]
    d5f2:	and.w	r5, r4, #3
    d5f6:	rsb	r0, r4, #0
    d5fa:	mov.w	r5, r5, lsl #3
    d5fe:	tst.w	r4, #4
    d602:	pld	[r1, #64]	; 0x40
    d606:	lsl.w	r5, ip, r5
    d60a:	orn	r2, r2, r5
    d60e:	itt	ne
    d610:	ornne	r3, r3, r5
    d614:	movne	r2, ip
    d616:	mov.w	r4, #0
    d61a:	b.n	d570 <strlen+0x30>

0000d61c <strncmp>:
    d61c:	cmp	r2, #0
    d61e:	beq.n	d6a4 <strncmp+0x88>
    d620:	orr.w	r3, r0, r1
    d624:	ands.w	r3, r3, #3
    d628:	push	{r4, r5, r6, r7}
    d62a:	bne.n	d678 <strncmp+0x5c>
    d62c:	cmp	r2, #3
    d62e:	bls.n	d678 <strncmp+0x5c>
    d630:	ldr	r4, [r0, #0]
    d632:	ldr	r5, [r1, #0]
    d634:	cmp	r4, r5
    d636:	bne.n	d678 <strncmp+0x5c>
    d638:	subs	r2, #4
    d63a:	beq.n	d6a8 <strncmp+0x8c>
    d63c:	sub.w	r5, r4, #16843009	; 0x1010101
    d640:	bic.w	r4, r5, r4
    d644:	tst.w	r4, #2155905152	; 0x80808080
    d648:	bne.n	d6ae <strncmp+0x92>
    d64a:	adds	r7, r0, #4
    d64c:	adds	r5, r1, #4
    d64e:	b.n	d66c <strncmp+0x50>
    d650:	ldr.w	r3, [r7], #4
    d654:	ldr	r6, [r1, #0]
    d656:	sub.w	r4, r3, #16843009	; 0x1010101
    d65a:	cmp	r3, r6
    d65c:	bic.w	r4, r4, r3
    d660:	bne.n	d678 <strncmp+0x5c>
    d662:	subs	r2, #4
    d664:	beq.n	d6a8 <strncmp+0x8c>
    d666:	tst.w	r4, #2155905152	; 0x80808080
    d66a:	bne.n	d6b4 <strncmp+0x98>
    d66c:	cmp	r2, #3
    d66e:	mov	r1, r5
    d670:	mov	r0, r7
    d672:	add.w	r5, r5, #4
    d676:	bhi.n	d650 <strncmp+0x34>
    d678:	ldrb	r3, [r0, #0]
    d67a:	ldrb	r4, [r1, #0]
    d67c:	cmp	r4, r3
    d67e:	add.w	r2, r2, #4294967295
    d682:	bne.n	d69e <strncmp+0x82>
    d684:	cbz	r2, d6a8 <strncmp+0x8c>
    d686:	cbnz	r4, d68e <strncmp+0x72>
    d688:	b.n	d6b8 <strncmp+0x9c>
    d68a:	cbz	r2, d6a8 <strncmp+0x8c>
    d68c:	cbz	r3, d6ae <strncmp+0x92>
    d68e:	ldrb.w	r3, [r0, #1]!
    d692:	ldrb.w	r4, [r1, #1]!
    d696:	cmp	r3, r4
    d698:	add.w	r2, r2, #4294967295
    d69c:	beq.n	d68a <strncmp+0x6e>
    d69e:	subs	r0, r3, r4
    d6a0:	pop	{r4, r5, r6, r7}
    d6a2:	bx	lr
    d6a4:	mov	r0, r2
    d6a6:	bx	lr
    d6a8:	mov	r0, r2
    d6aa:	pop	{r4, r5, r6, r7}
    d6ac:	bx	lr
    d6ae:	mov	r0, r3
    d6b0:	pop	{r4, r5, r6, r7}
    d6b2:	bx	lr
    d6b4:	movs	r0, #0
    d6b6:	b.n	d6a0 <strncmp+0x84>
    d6b8:	mov	r0, r4
    d6ba:	b.n	d6a0 <strncmp+0x84>

0000d6bc <_vdprintf_r>:
    d6bc:	push	{r4, r5, r6, r7, lr}
    d6be:	sub.w	sp, sp, #532	; 0x214
    d6c2:	add	r5, sp, #16
    d6c4:	str	r3, [sp, #0]
    d6c6:	mov	r7, r1
    d6c8:	mov	r3, r2
    d6ca:	mov.w	r4, #512	; 0x200
    d6ce:	add	r2, sp, #12
    d6d0:	mov	r1, r5
    d6d2:	str	r4, [sp, #12]
    d6d4:	mov	r6, r0
    d6d6:	bl	e0b8 <_vasnprintf_r>
    d6da:	cbz	r0, d700 <_vdprintf_r+0x44>
    d6dc:	mov	r4, r0
    d6de:	mov	r2, r0
    d6e0:	mov	r1, r7
    d6e2:	ldr	r3, [sp, #12]
    d6e4:	mov	r0, r6
    d6e6:	bl	d73c <_write_r>
    d6ea:	cmp	r4, r5
    d6ec:	str	r0, [sp, #12]
    d6ee:	beq.n	d6fa <_vdprintf_r+0x3e>
    d6f0:	mov	r0, r6
    d6f2:	mov	r1, r4
    d6f4:	bl	d8a8 <_free_r>
    d6f8:	ldr	r0, [sp, #12]
    d6fa:	add.w	sp, sp, #532	; 0x214
    d6fe:	pop	{r4, r5, r6, r7, pc}
    d700:	mov.w	r0, #4294967295
    d704:	b.n	d6fa <_vdprintf_r+0x3e>
    d706:	nop

0000d708 <vdprintf>:
    d708:	push	{r4}
    d70a:	ldr	r4, [pc, #16]	; (d71c <vdprintf+0x14>)
    d70c:	mov	r3, r2
    d70e:	mov	r2, r1
    d710:	mov	r1, r0
    d712:	ldr	r0, [r4, #0]
    d714:	ldr.w	r4, [sp], #4
    d718:	b.w	d6bc <_vdprintf_r>
    d71c:	.word	0x20001098

0000d720 <__ascii_wctomb>:
    d720:	cbz	r1, d72c <__ascii_wctomb+0xc>
    d722:	cmp	r2, #255	; 0xff
    d724:	bhi.n	d730 <__ascii_wctomb+0x10>
    d726:	strb	r2, [r1, #0]
    d728:	movs	r0, #1
    d72a:	bx	lr
    d72c:	mov	r0, r1
    d72e:	bx	lr
    d730:	movs	r3, #138	; 0x8a
    d732:	str	r3, [r0, #0]
    d734:	mov.w	r0, #4294967295
    d738:	bx	lr
    d73a:	nop

0000d73c <_write_r>:
    d73c:	push	{r4, r5, r6, lr}
    d73e:	mov	r5, r1
    d740:	ldr	r4, [pc, #32]	; (d764 <_write_r+0x28>)
    d742:	mov	r1, r2
    d744:	mov	r6, r0
    d746:	mov	r2, r3
    d748:	mov	r0, r5
    d74a:	movs	r3, #0
    d74c:	str	r3, [r4, #0]
    d74e:	bl	b748 <_write>
    d752:	adds	r3, r0, #1
    d754:	beq.n	d758 <_write_r+0x1c>
    d756:	pop	{r4, r5, r6, pc}
    d758:	ldr	r3, [r4, #0]
    d75a:	cmp	r3, #0
    d75c:	beq.n	d756 <_write_r+0x1a>
    d75e:	str	r3, [r6, #0]
    d760:	pop	{r4, r5, r6, pc}
    d762:	nop
    d764:	.word	0x20008ac0

0000d768 <__register_exitproc>:
    d768:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d76c:	ldr	r4, [pc, #148]	; (d804 <__register_exitproc+0x9c>)
    d76e:	ldr	r5, [r4, #0]
    d770:	ldr.w	r4, [r5, #328]	; 0x148
    d774:	mov	r6, r0
    d776:	mov	r8, r1
    d778:	mov	sl, r2
    d77a:	mov	r9, r3
    d77c:	cbz	r4, d7f0 <__register_exitproc+0x88>
    d77e:	ldr	r0, [r4, #4]
    d780:	cmp	r0, #31
    d782:	bgt.n	d7b4 <__register_exitproc+0x4c>
    d784:	adds	r3, r0, #1
    d786:	cbz	r6, d7a6 <__register_exitproc+0x3e>
    d788:	add.w	r5, r4, r0, lsl #2
    d78c:	movs	r2, #1
    d78e:	str.w	sl, [r5, #136]	; 0x88
    d792:	ldr.w	r1, [r4, #392]	; 0x188
    d796:	lsls	r2, r0
    d798:	orrs	r1, r2
    d79a:	cmp	r6, #2
    d79c:	str.w	r1, [r4, #392]	; 0x188
    d7a0:	str.w	r9, [r5, #264]	; 0x108
    d7a4:	beq.n	d7e4 <__register_exitproc+0x7c>
    d7a6:	adds	r0, #2
    d7a8:	str	r3, [r4, #4]
    d7aa:	str.w	r8, [r4, r0, lsl #2]
    d7ae:	movs	r0, #0
    d7b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d7b4:	ldr	r3, [pc, #80]	; (d808 <__register_exitproc+0xa0>)
    d7b6:	cbz	r3, d7fa <__register_exitproc+0x92>
    d7b8:	mov.w	r0, #400	; 0x190
    d7bc:	bl	c7ec <malloc>
    d7c0:	mov	r4, r0
    d7c2:	cbz	r0, d7fa <__register_exitproc+0x92>
    d7c4:	ldr.w	r3, [r5, #328]	; 0x148
    d7c8:	movs	r7, #0
    d7ca:	stmia.w	r0, {r3, r7}
    d7ce:	str.w	r4, [r5, #328]	; 0x148
    d7d2:	mov	r0, r7
    d7d4:	movs	r3, #1
    d7d6:	str.w	r7, [r4, #392]	; 0x188
    d7da:	str.w	r7, [r4, #396]	; 0x18c
    d7de:	cmp	r6, #0
    d7e0:	beq.n	d7a6 <__register_exitproc+0x3e>
    d7e2:	b.n	d788 <__register_exitproc+0x20>
    d7e4:	ldr.w	r1, [r4, #396]	; 0x18c
    d7e8:	orrs	r2, r1
    d7ea:	str.w	r2, [r4, #396]	; 0x18c
    d7ee:	b.n	d7a6 <__register_exitproc+0x3e>
    d7f0:	add.w	r4, r5, #332	; 0x14c
    d7f4:	str.w	r4, [r5, #328]	; 0x148
    d7f8:	b.n	d77e <__register_exitproc+0x16>
    d7fa:	mov.w	r0, #4294967295
    d7fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d802:	nop
    d804:	.word	0x20000924
    d808:	.word	0x0000c7ed

0000d80c <_malloc_trim_r>:
    d80c:	push	{r3, r4, r5, r6, r7, lr}
    d80e:	ldr	r7, [pc, #140]	; (d89c <_malloc_trim_r+0x90>)
    d810:	mov	r4, r1
    d812:	mov	r6, r0
    d814:	bl	d018 <__malloc_lock>
    d818:	ldr	r3, [r7, #8]
    d81a:	ldr	r5, [r3, #4]
    d81c:	bic.w	r5, r5, #3
    d820:	subs	r1, r5, r4
    d822:	addw	r1, r1, #4079	; 0xfef
    d826:	bic.w	r1, r1, #4080	; 0xff0
    d82a:	bic.w	r1, r1, #15
    d82e:	sub.w	r4, r1, #4096	; 0x1000
    d832:	cmp.w	r4, #4096	; 0x1000
    d836:	blt.n	d848 <_malloc_trim_r+0x3c>
    d838:	movs	r1, #0
    d83a:	mov	r0, r6
    d83c:	bl	d400 <_sbrk_r>
    d840:	ldr	r3, [r7, #8]
    d842:	add	r3, r5
    d844:	cmp	r0, r3
    d846:	beq.n	d852 <_malloc_trim_r+0x46>
    d848:	mov	r0, r6
    d84a:	bl	d01c <__malloc_unlock>
    d84e:	movs	r0, #0
    d850:	pop	{r3, r4, r5, r6, r7, pc}
    d852:	negs	r1, r4
    d854:	mov	r0, r6
    d856:	bl	d400 <_sbrk_r>
    d85a:	adds	r0, #1
    d85c:	beq.n	d87a <_malloc_trim_r+0x6e>
    d85e:	ldr	r3, [pc, #64]	; (d8a0 <_malloc_trim_r+0x94>)
    d860:	ldr	r2, [r7, #8]
    d862:	ldr	r1, [r3, #0]
    d864:	subs	r5, r5, r4
    d866:	orr.w	r5, r5, #1
    d86a:	mov	r0, r6
    d86c:	subs	r1, r1, r4
    d86e:	str	r5, [r2, #4]
    d870:	str	r1, [r3, #0]
    d872:	bl	d01c <__malloc_unlock>
    d876:	movs	r0, #1
    d878:	pop	{r3, r4, r5, r6, r7, pc}
    d87a:	movs	r1, #0
    d87c:	mov	r0, r6
    d87e:	bl	d400 <_sbrk_r>
    d882:	ldr	r2, [r7, #8]
    d884:	subs	r3, r0, r2
    d886:	cmp	r3, #15
    d888:	ble.n	d848 <_malloc_trim_r+0x3c>
    d88a:	ldr	r4, [pc, #24]	; (d8a4 <_malloc_trim_r+0x98>)
    d88c:	ldr	r1, [pc, #16]	; (d8a0 <_malloc_trim_r+0x94>)
    d88e:	ldr	r4, [r4, #0]
    d890:	orr.w	r3, r3, #1
    d894:	subs	r0, r0, r4
    d896:	str	r3, [r2, #4]
    d898:	str	r0, [r1, #0]
    d89a:	b.n	d848 <_malloc_trim_r+0x3c>
    d89c:	.word	0x20001208
    d8a0:	.word	0x20006e24
    d8a4:	.word	0x20001614

0000d8a8 <_free_r>:
    d8a8:	cmp	r1, #0
    d8aa:	beq.n	d938 <_free_r+0x90>
    d8ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8b0:	mov	r5, r1
    d8b2:	mov	r8, r0
    d8b4:	bl	d018 <__malloc_lock>
    d8b8:	ldr.w	r7, [r5, #-4]
    d8bc:	ldr	r1, [pc, #424]	; (da68 <_free_r+0x1c0>)
    d8be:	bic.w	r3, r7, #1
    d8c2:	sub.w	r4, r5, #8
    d8c6:	adds	r2, r4, r3
    d8c8:	ldr	r6, [r1, #8]
    d8ca:	ldr	r0, [r2, #4]
    d8cc:	cmp	r2, r6
    d8ce:	bic.w	r0, r0, #3
    d8d2:	beq.n	d99a <_free_r+0xf2>
    d8d4:	lsls	r6, r7, #31
    d8d6:	str	r0, [r2, #4]
    d8d8:	bmi.n	d8f2 <_free_r+0x4a>
    d8da:	ldr.w	r7, [r5, #-8]
    d8de:	subs	r4, r4, r7
    d8e0:	add.w	lr, r1, #8
    d8e4:	ldr	r5, [r4, #8]
    d8e6:	cmp	r5, lr
    d8e8:	add	r3, r7
    d8ea:	beq.n	d9cc <_free_r+0x124>
    d8ec:	ldr	r7, [r4, #12]
    d8ee:	str	r7, [r5, #12]
    d8f0:	str	r5, [r7, #8]
    d8f2:	adds	r5, r2, r0
    d8f4:	ldr	r5, [r5, #4]
    d8f6:	lsls	r5, r5, #31
    d8f8:	bpl.n	d980 <_free_r+0xd8>
    d8fa:	orr.w	r2, r3, #1
    d8fe:	str	r2, [r4, #4]
    d900:	str	r3, [r4, r3]
    d902:	cmp.w	r3, #512	; 0x200
    d906:	bcs.n	d93a <_free_r+0x92>
    d908:	lsrs	r3, r3, #3
    d90a:	adds	r2, r3, #1
    d90c:	ldr	r5, [r1, #4]
    d90e:	ldr.w	r7, [r1, r2, lsl #3]
    d912:	str	r7, [r4, #8]
    d914:	movs	r0, #1
    d916:	asrs	r3, r3, #2
    d918:	lsl.w	r3, r0, r3
    d91c:	add.w	r0, r1, r2, lsl #3
    d920:	orrs	r5, r3
    d922:	subs	r0, #8
    d924:	str	r0, [r4, #12]
    d926:	str	r5, [r1, #4]
    d928:	str.w	r4, [r1, r2, lsl #3]
    d92c:	str	r4, [r7, #12]
    d92e:	mov	r0, r8
    d930:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d934:	b.w	d01c <__malloc_unlock>
    d938:	bx	lr
    d93a:	lsrs	r2, r3, #9
    d93c:	cmp	r2, #4
    d93e:	bhi.n	d9e8 <_free_r+0x140>
    d940:	lsrs	r2, r3, #6
    d942:	add.w	r7, r2, #57	; 0x39
    d946:	lsls	r7, r7, #1
    d948:	add.w	r5, r2, #56	; 0x38
    d94c:	add.w	r0, r1, r7, lsl #2
    d950:	ldr.w	r2, [r1, r7, lsl #2]
    d954:	ldr	r1, [pc, #272]	; (da68 <_free_r+0x1c0>)
    d956:	subs	r0, #8
    d958:	cmp	r0, r2
    d95a:	beq.n	d9f8 <_free_r+0x150>
    d95c:	ldr	r1, [r2, #4]
    d95e:	bic.w	r1, r1, #3
    d962:	cmp	r3, r1
    d964:	bcs.n	d96c <_free_r+0xc4>
    d966:	ldr	r2, [r2, #8]
    d968:	cmp	r0, r2
    d96a:	bne.n	d95c <_free_r+0xb4>
    d96c:	ldr	r0, [r2, #12]
    d96e:	str	r0, [r4, #12]
    d970:	str	r2, [r4, #8]
    d972:	str	r4, [r0, #8]
    d974:	str	r4, [r2, #12]
    d976:	mov	r0, r8
    d978:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d97c:	b.w	d01c <__malloc_unlock>
    d980:	ldr	r5, [r2, #8]
    d982:	ldr	r7, [pc, #232]	; (da6c <_free_r+0x1c4>)
    d984:	cmp	r5, r7
    d986:	add	r3, r0
    d988:	beq.n	da0a <_free_r+0x162>
    d98a:	ldr	r0, [r2, #12]
    d98c:	str	r0, [r5, #12]
    d98e:	orr.w	r2, r3, #1
    d992:	str	r5, [r0, #8]
    d994:	str	r2, [r4, #4]
    d996:	str	r3, [r4, r3]
    d998:	b.n	d902 <_free_r+0x5a>
    d99a:	lsls	r7, r7, #31
    d99c:	add	r3, r0
    d99e:	bmi.n	d9b0 <_free_r+0x108>
    d9a0:	ldr.w	r2, [r5, #-8]
    d9a4:	subs	r4, r4, r2
    d9a6:	add	r3, r2
    d9a8:	ldr	r0, [r4, #8]
    d9aa:	ldr	r2, [r4, #12]
    d9ac:	str	r2, [r0, #12]
    d9ae:	str	r0, [r2, #8]
    d9b0:	ldr	r2, [pc, #188]	; (da70 <_free_r+0x1c8>)
    d9b2:	ldr	r2, [r2, #0]
    d9b4:	orr.w	r0, r3, #1
    d9b8:	cmp	r3, r2
    d9ba:	str	r0, [r4, #4]
    d9bc:	str	r4, [r1, #8]
    d9be:	bcc.n	d92e <_free_r+0x86>
    d9c0:	ldr	r3, [pc, #176]	; (da74 <_free_r+0x1cc>)
    d9c2:	mov	r0, r8
    d9c4:	ldr	r1, [r3, #0]
    d9c6:	bl	d80c <_malloc_trim_r>
    d9ca:	b.n	d92e <_free_r+0x86>
    d9cc:	adds	r1, r2, r0
    d9ce:	ldr	r1, [r1, #4]
    d9d0:	lsls	r1, r1, #31
    d9d2:	bmi.n	da5e <_free_r+0x1b6>
    d9d4:	ldr	r1, [r2, #8]
    d9d6:	ldr	r2, [r2, #12]
    d9d8:	str	r2, [r1, #12]
    d9da:	add	r3, r0
    d9dc:	orr.w	r0, r3, #1
    d9e0:	str	r1, [r2, #8]
    d9e2:	str	r0, [r4, #4]
    d9e4:	str	r3, [r4, r3]
    d9e6:	b.n	d92e <_free_r+0x86>
    d9e8:	cmp	r2, #20
    d9ea:	bhi.n	da1c <_free_r+0x174>
    d9ec:	add.w	r7, r2, #92	; 0x5c
    d9f0:	lsls	r7, r7, #1
    d9f2:	add.w	r5, r2, #91	; 0x5b
    d9f6:	b.n	d94c <_free_r+0xa4>
    d9f8:	asrs	r2, r5, #2
    d9fa:	ldr	r3, [r1, #4]
    d9fc:	movs	r5, #1
    d9fe:	lsl.w	r2, r5, r2
    da02:	orrs	r3, r2
    da04:	str	r3, [r1, #4]
    da06:	mov	r2, r0
    da08:	b.n	d96e <_free_r+0xc6>
    da0a:	orr.w	r2, r3, #1
    da0e:	str	r4, [r1, #20]
    da10:	str	r4, [r1, #16]
    da12:	str	r5, [r4, #12]
    da14:	str	r5, [r4, #8]
    da16:	str	r2, [r4, #4]
    da18:	str	r3, [r4, r3]
    da1a:	b.n	d92e <_free_r+0x86>
    da1c:	cmp	r2, #84	; 0x54
    da1e:	bhi.n	da2e <_free_r+0x186>
    da20:	lsrs	r2, r3, #12
    da22:	add.w	r7, r2, #111	; 0x6f
    da26:	lsls	r7, r7, #1
    da28:	add.w	r5, r2, #110	; 0x6e
    da2c:	b.n	d94c <_free_r+0xa4>
    da2e:	cmp.w	r2, #340	; 0x154
    da32:	bhi.n	da42 <_free_r+0x19a>
    da34:	lsrs	r2, r3, #15
    da36:	add.w	r7, r2, #120	; 0x78
    da3a:	lsls	r7, r7, #1
    da3c:	add.w	r5, r2, #119	; 0x77
    da40:	b.n	d94c <_free_r+0xa4>
    da42:	movw	r0, #1364	; 0x554
    da46:	cmp	r2, r0
    da48:	bhi.n	da58 <_free_r+0x1b0>
    da4a:	lsrs	r2, r3, #18
    da4c:	add.w	r7, r2, #125	; 0x7d
    da50:	lsls	r7, r7, #1
    da52:	add.w	r5, r2, #124	; 0x7c
    da56:	b.n	d94c <_free_r+0xa4>
    da58:	movs	r7, #254	; 0xfe
    da5a:	movs	r5, #126	; 0x7e
    da5c:	b.n	d94c <_free_r+0xa4>
    da5e:	orr.w	r2, r3, #1
    da62:	str	r2, [r4, #4]
    da64:	str	r3, [r4, r3]
    da66:	b.n	d92e <_free_r+0x86>
    da68:	.word	0x20001208
    da6c:	.word	0x20001210
    da70:	.word	0x20001610
    da74:	.word	0x20006e20

0000da78 <_localeconv_r>:
    da78:	ldr	r2, [pc, #16]	; (da8c <_localeconv_r+0x14>)
    da7a:	ldr	r3, [pc, #20]	; (da90 <_localeconv_r+0x18>)
    da7c:	ldr	r2, [r2, #0]
    da7e:	ldr	r0, [r2, #52]	; 0x34
    da80:	cmp	r0, #0
    da82:	it	eq
    da84:	moveq	r0, r3
    da86:	adds	r0, #240	; 0xf0
    da88:	bx	lr
    da8a:	nop
    da8c:	.word	0x20001098
    da90:	.word	0x2000109c

0000da94 <_Balloc>:
    da94:	ldr	r3, [r0, #76]	; 0x4c
    da96:	push	{r4, r5, r6, lr}
    da98:	mov	r5, r0
    da9a:	mov	r4, r1
    da9c:	cbz	r3, dab2 <_Balloc+0x1e>
    da9e:	ldr.w	r0, [r3, r4, lsl #2]
    daa2:	cbz	r0, dac6 <_Balloc+0x32>
    daa4:	ldr	r2, [r0, #0]
    daa6:	str.w	r2, [r3, r4, lsl #2]
    daaa:	movs	r3, #0
    daac:	str	r3, [r0, #16]
    daae:	str	r3, [r0, #12]
    dab0:	pop	{r4, r5, r6, pc}
    dab2:	movs	r2, #33	; 0x21
    dab4:	movs	r1, #4
    dab6:	bl	e118 <_calloc_r>
    daba:	str	r0, [r5, #76]	; 0x4c
    dabc:	mov	r3, r0
    dabe:	cmp	r0, #0
    dac0:	bne.n	da9e <_Balloc+0xa>
    dac2:	movs	r0, #0
    dac4:	pop	{r4, r5, r6, pc}
    dac6:	movs	r1, #1
    dac8:	lsl.w	r6, r1, r4
    dacc:	adds	r2, r6, #5
    dace:	mov	r0, r5
    dad0:	lsls	r2, r2, #2
    dad2:	bl	e118 <_calloc_r>
    dad6:	cmp	r0, #0
    dad8:	beq.n	dac2 <_Balloc+0x2e>
    dada:	str	r4, [r0, #4]
    dadc:	str	r6, [r0, #8]
    dade:	b.n	daaa <_Balloc+0x16>

0000dae0 <_Bfree>:
    dae0:	cbz	r1, daf0 <_Bfree+0x10>
    dae2:	ldr	r3, [r0, #76]	; 0x4c
    dae4:	ldr	r2, [r1, #4]
    dae6:	ldr.w	r0, [r3, r2, lsl #2]
    daea:	str	r0, [r1, #0]
    daec:	str.w	r1, [r3, r2, lsl #2]
    daf0:	bx	lr
    daf2:	nop

0000daf4 <__multadd>:
    daf4:	push	{r4, r5, r6, r7, lr}
    daf6:	ldr	r4, [r1, #16]
    daf8:	sub	sp, #12
    dafa:	mov	r5, r1
    dafc:	mov	r6, r0
    dafe:	add.w	lr, r1, #20
    db02:	movs	r7, #0
    db04:	ldr.w	r0, [lr]
    db08:	uxth	r1, r0
    db0a:	mla	r1, r2, r1, r3
    db0e:	lsrs	r3, r1, #16
    db10:	lsrs	r0, r0, #16
    db12:	mla	r3, r2, r0, r3
    db16:	uxth	r1, r1
    db18:	adds	r7, #1
    db1a:	add.w	r1, r1, r3, lsl #16
    db1e:	cmp	r4, r7
    db20:	str.w	r1, [lr], #4
    db24:	mov.w	r3, r3, lsr #16
    db28:	bgt.n	db04 <__multadd+0x10>
    db2a:	cbz	r3, db3c <__multadd+0x48>
    db2c:	ldr	r2, [r5, #8]
    db2e:	cmp	r4, r2
    db30:	bge.n	db42 <__multadd+0x4e>
    db32:	add.w	r2, r5, r4, lsl #2
    db36:	adds	r4, #1
    db38:	str	r3, [r2, #20]
    db3a:	str	r4, [r5, #16]
    db3c:	mov	r0, r5
    db3e:	add	sp, #12
    db40:	pop	{r4, r5, r6, r7, pc}
    db42:	ldr	r1, [r5, #4]
    db44:	str	r3, [sp, #4]
    db46:	adds	r1, #1
    db48:	mov	r0, r6
    db4a:	bl	da94 <_Balloc>
    db4e:	ldr	r2, [r5, #16]
    db50:	adds	r2, #2
    db52:	add.w	r1, r5, #12
    db56:	mov	r7, r0
    db58:	lsls	r2, r2, #2
    db5a:	adds	r0, #12
    db5c:	bl	9c8c <memcpy>
    db60:	ldr	r2, [r6, #76]	; 0x4c
    db62:	ldr	r1, [r5, #4]
    db64:	ldr	r3, [sp, #4]
    db66:	ldr.w	r0, [r2, r1, lsl #2]
    db6a:	str	r0, [r5, #0]
    db6c:	str.w	r5, [r2, r1, lsl #2]
    db70:	mov	r5, r7
    db72:	b.n	db32 <__multadd+0x3e>

0000db74 <__hi0bits>:
    db74:	lsrs	r3, r0, #16
    db76:	lsls	r3, r3, #16
    db78:	cbnz	r3, dba8 <__hi0bits+0x34>
    db7a:	lsls	r0, r0, #16
    db7c:	movs	r3, #16
    db7e:	tst.w	r0, #4278190080	; 0xff000000
    db82:	itt	eq
    db84:	lsleq	r0, r0, #8
    db86:	addeq	r3, #8
    db88:	tst.w	r0, #4026531840	; 0xf0000000
    db8c:	itt	eq
    db8e:	lsleq	r0, r0, #4
    db90:	addeq	r3, #4
    db92:	tst.w	r0, #3221225472	; 0xc0000000
    db96:	itt	eq
    db98:	lsleq	r0, r0, #2
    db9a:	addeq	r3, #2
    db9c:	cmp	r0, #0
    db9e:	blt.n	dbb0 <__hi0bits+0x3c>
    dba0:	lsls	r2, r0, #1
    dba2:	bmi.n	dbac <__hi0bits+0x38>
    dba4:	movs	r0, #32
    dba6:	bx	lr
    dba8:	movs	r3, #0
    dbaa:	b.n	db7e <__hi0bits+0xa>
    dbac:	adds	r0, r3, #1
    dbae:	bx	lr
    dbb0:	mov	r0, r3
    dbb2:	bx	lr

0000dbb4 <__lo0bits>:
    dbb4:	ldr	r3, [r0, #0]
    dbb6:	ands.w	r2, r3, #7
    dbba:	beq.n	dbcc <__lo0bits+0x18>
    dbbc:	lsls	r1, r3, #31
    dbbe:	bmi.n	dc02 <__lo0bits+0x4e>
    dbc0:	lsls	r2, r3, #30
    dbc2:	bmi.n	dc06 <__lo0bits+0x52>
    dbc4:	lsrs	r3, r3, #2
    dbc6:	str	r3, [r0, #0]
    dbc8:	movs	r0, #2
    dbca:	bx	lr
    dbcc:	uxth	r1, r3
    dbce:	cbnz	r1, dbd4 <__lo0bits+0x20>
    dbd0:	lsrs	r3, r3, #16
    dbd2:	movs	r2, #16
    dbd4:	tst.w	r3, #255	; 0xff
    dbd8:	itt	eq
    dbda:	lsreq	r3, r3, #8
    dbdc:	addeq	r2, #8
    dbde:	lsls	r1, r3, #28
    dbe0:	itt	eq
    dbe2:	lsreq	r3, r3, #4
    dbe4:	addeq	r2, #4
    dbe6:	lsls	r1, r3, #30
    dbe8:	itt	eq
    dbea:	lsreq	r3, r3, #2
    dbec:	addeq	r2, #2
    dbee:	lsls	r1, r3, #31
    dbf0:	bmi.n	dbfc <__lo0bits+0x48>
    dbf2:	lsrs	r3, r3, #1
    dbf4:	bne.n	dbfa <__lo0bits+0x46>
    dbf6:	movs	r0, #32
    dbf8:	bx	lr
    dbfa:	adds	r2, #1
    dbfc:	str	r3, [r0, #0]
    dbfe:	mov	r0, r2
    dc00:	bx	lr
    dc02:	movs	r0, #0
    dc04:	bx	lr
    dc06:	lsrs	r3, r3, #1
    dc08:	str	r3, [r0, #0]
    dc0a:	movs	r0, #1
    dc0c:	bx	lr
    dc0e:	nop

0000dc10 <__i2b>:
    dc10:	push	{r4, lr}
    dc12:	mov	r4, r1
    dc14:	movs	r1, #1
    dc16:	bl	da94 <_Balloc>
    dc1a:	movs	r2, #1
    dc1c:	str	r4, [r0, #20]
    dc1e:	str	r2, [r0, #16]
    dc20:	pop	{r4, pc}
    dc22:	nop

0000dc24 <__multiply>:
    dc24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc28:	ldr	r5, [r1, #16]
    dc2a:	ldr	r7, [r2, #16]
    dc2c:	cmp	r5, r7
    dc2e:	sub	sp, #12
    dc30:	mov	r4, r1
    dc32:	mov	r6, r2
    dc34:	bge.n	dc40 <__multiply+0x1c>
    dc36:	mov	r2, r5
    dc38:	mov	r4, r6
    dc3a:	mov	r5, r7
    dc3c:	mov	r6, r1
    dc3e:	mov	r7, r2
    dc40:	ldr	r3, [r4, #8]
    dc42:	ldr	r1, [r4, #4]
    dc44:	add.w	r8, r5, r7
    dc48:	cmp	r8, r3
    dc4a:	it	gt
    dc4c:	addgt	r1, #1
    dc4e:	bl	da94 <_Balloc>
    dc52:	add.w	ip, r0, #20
    dc56:	add.w	r9, ip, r8, lsl #2
    dc5a:	cmp	ip, r9
    dc5c:	str	r0, [sp, #0]
    dc5e:	bcs.n	dc6c <__multiply+0x48>
    dc60:	mov	r3, ip
    dc62:	movs	r1, #0
    dc64:	str.w	r1, [r3], #4
    dc68:	cmp	r9, r3
    dc6a:	bhi.n	dc64 <__multiply+0x40>
    dc6c:	add.w	r2, r6, #20
    dc70:	add.w	sl, r2, r7, lsl #2
    dc74:	add.w	r3, r4, #20
    dc78:	cmp	r2, sl
    dc7a:	add.w	lr, r3, r5, lsl #2
    dc7e:	bcs.n	dd2a <__multiply+0x106>
    dc80:	str.w	r9, [sp, #4]
    dc84:	mov	r9, r3
    dc86:	ldr.w	r3, [r2], #4
    dc8a:	uxth.w	fp, r3
    dc8e:	cmp.w	fp, #0
    dc92:	beq.n	dcd6 <__multiply+0xb2>
    dc94:	movs	r0, #0
    dc96:	mov	r7, r9
    dc98:	mov	r6, ip
    dc9a:	mov	r5, r0
    dc9c:	b.n	dca0 <__multiply+0x7c>
    dc9e:	mov	r6, r3
    dca0:	ldr.w	r4, [r7], #4
    dca4:	ldr	r0, [r6, #0]
    dca6:	uxth	r1, r4
    dca8:	uxth	r3, r0
    dcaa:	mla	r1, fp, r1, r3
    dcae:	lsrs	r4, r4, #16
    dcb0:	lsrs	r0, r0, #16
    dcb2:	adds	r3, r1, r5
    dcb4:	mla	r0, fp, r4, r0
    dcb8:	add.w	r0, r0, r3, lsr #16
    dcbc:	uxth	r1, r3
    dcbe:	mov	r3, r6
    dcc0:	orr.w	r1, r1, r0, lsl #16
    dcc4:	cmp	lr, r7
    dcc6:	mov.w	r5, r0, lsr #16
    dcca:	str.w	r1, [r3], #4
    dcce:	bhi.n	dc9e <__multiply+0x7a>
    dcd0:	str	r5, [r6, #4]
    dcd2:	ldr.w	r3, [r2, #-4]
    dcd6:	movs.w	fp, r3, lsr #16
    dcda:	beq.n	dd1e <__multiply+0xfa>
    dcdc:	ldr.w	r3, [ip]
    dce0:	mov	r7, ip
    dce2:	mov	r0, r3
    dce4:	mov	r5, r9
    dce6:	movs	r1, #0
    dce8:	b.n	dcec <__multiply+0xc8>
    dcea:	mov	r7, r6
    dcec:	ldrh	r4, [r5, #0]
    dcee:	lsrs	r0, r0, #16
    dcf0:	mla	r0, fp, r4, r0
    dcf4:	add	r1, r0
    dcf6:	uxth	r4, r3
    dcf8:	mov	r6, r7
    dcfa:	orr.w	r3, r4, r1, lsl #16
    dcfe:	str.w	r3, [r6], #4
    dd02:	ldr	r0, [r7, #4]
    dd04:	ldr.w	r4, [r5], #4
    dd08:	uxth	r3, r0
    dd0a:	lsrs	r4, r4, #16
    dd0c:	mla	r4, fp, r4, r3
    dd10:	add.w	r3, r4, r1, lsr #16
    dd14:	cmp	lr, r5
    dd16:	mov.w	r1, r3, lsr #16
    dd1a:	bhi.n	dcea <__multiply+0xc6>
    dd1c:	str	r3, [r7, #4]
    dd1e:	cmp	sl, r2
    dd20:	add.w	ip, ip, #4
    dd24:	bhi.n	dc86 <__multiply+0x62>
    dd26:	ldr.w	r9, [sp, #4]
    dd2a:	cmp.w	r8, #0
    dd2e:	ble.n	dd48 <__multiply+0x124>
    dd30:	ldr.w	r3, [r9, #-4]
    dd34:	sub.w	r9, r9, #4
    dd38:	cbz	r3, dd42 <__multiply+0x11e>
    dd3a:	b.n	dd48 <__multiply+0x124>
    dd3c:	ldr.w	r3, [r9, #-4]!
    dd40:	cbnz	r3, dd48 <__multiply+0x124>
    dd42:	subs.w	r8, r8, #1
    dd46:	bne.n	dd3c <__multiply+0x118>
    dd48:	ldr	r0, [sp, #0]
    dd4a:	str.w	r8, [r0, #16]
    dd4e:	add	sp, #12
    dd50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dd54 <__pow5mult>:
    dd54:	ands.w	r3, r2, #3
    dd58:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd5c:	mov	r4, r2
    dd5e:	mov	r7, r0
    dd60:	bne.n	ddc0 <__pow5mult+0x6c>
    dd62:	mov	r6, r1
    dd64:	asrs	r4, r4, #2
    dd66:	beq.n	dda2 <__pow5mult+0x4e>
    dd68:	ldr	r5, [r7, #72]	; 0x48
    dd6a:	cbz	r5, ddd2 <__pow5mult+0x7e>
    dd6c:	lsls	r3, r4, #31
    dd6e:	mov.w	r8, #0
    dd72:	bmi.n	dd82 <__pow5mult+0x2e>
    dd74:	asrs	r4, r4, #1
    dd76:	beq.n	dda2 <__pow5mult+0x4e>
    dd78:	ldr	r0, [r5, #0]
    dd7a:	cbz	r0, dda8 <__pow5mult+0x54>
    dd7c:	mov	r5, r0
    dd7e:	lsls	r3, r4, #31
    dd80:	bpl.n	dd74 <__pow5mult+0x20>
    dd82:	mov	r2, r5
    dd84:	mov	r1, r6
    dd86:	mov	r0, r7
    dd88:	bl	dc24 <__multiply>
    dd8c:	cbz	r6, ddbc <__pow5mult+0x68>
    dd8e:	ldr	r2, [r6, #4]
    dd90:	ldr	r3, [r7, #76]	; 0x4c
    dd92:	asrs	r4, r4, #1
    dd94:	ldr.w	r1, [r3, r2, lsl #2]
    dd98:	str	r1, [r6, #0]
    dd9a:	str.w	r6, [r3, r2, lsl #2]
    dd9e:	mov	r6, r0
    dda0:	bne.n	dd78 <__pow5mult+0x24>
    dda2:	mov	r0, r6
    dda4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dda8:	mov	r2, r5
    ddaa:	mov	r1, r5
    ddac:	mov	r0, r7
    ddae:	bl	dc24 <__multiply>
    ddb2:	str	r0, [r5, #0]
    ddb4:	str.w	r8, [r0]
    ddb8:	mov	r5, r0
    ddba:	b.n	dd7e <__pow5mult+0x2a>
    ddbc:	mov	r6, r0
    ddbe:	b.n	dd74 <__pow5mult+0x20>
    ddc0:	subs	r2, r3, #1
    ddc2:	ldr	r5, [pc, #44]	; (ddf0 <__pow5mult+0x9c>)
    ddc4:	movs	r3, #0
    ddc6:	ldr.w	r2, [r5, r2, lsl #2]
    ddca:	bl	daf4 <__multadd>
    ddce:	mov	r6, r0
    ddd0:	b.n	dd64 <__pow5mult+0x10>
    ddd2:	movs	r1, #1
    ddd4:	mov	r0, r7
    ddd6:	bl	da94 <_Balloc>
    ddda:	movw	r1, #625	; 0x271
    ddde:	movs	r2, #1
    dde0:	movs	r3, #0
    dde2:	str	r1, [r0, #20]
    dde4:	str	r2, [r0, #16]
    dde6:	mov	r5, r0
    dde8:	str	r0, [r7, #72]	; 0x48
    ddea:	str	r3, [r0, #0]
    ddec:	b.n	dd6c <__pow5mult+0x18>
    ddee:	nop
    ddf0:	.word	0x20000b30

0000ddf4 <__lshift>:
    ddf4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ddf8:	mov	r9, r2
    ddfa:	ldr	r2, [r1, #16]
    ddfc:	ldr	r3, [r1, #8]
    ddfe:	mov.w	r4, r9, asr #5
    de02:	add.w	r8, r4, r2
    de06:	add.w	r5, r8, #1
    de0a:	cmp	r5, r3
    de0c:	mov	r6, r1
    de0e:	mov	sl, r0
    de10:	ldr	r1, [r1, #4]
    de12:	ble.n	de1e <__lshift+0x2a>
    de14:	lsls	r3, r3, #1
    de16:	cmp	r5, r3
    de18:	add.w	r1, r1, #1
    de1c:	bgt.n	de14 <__lshift+0x20>
    de1e:	mov	r0, sl
    de20:	bl	da94 <_Balloc>
    de24:	cmp	r4, #0
    de26:	add.w	r2, r0, #20
    de2a:	ble.n	de9e <__lshift+0xaa>
    de2c:	add.w	r3, r2, r4, lsl #2
    de30:	movs	r1, #0
    de32:	str.w	r1, [r2], #4
    de36:	cmp	r3, r2
    de38:	bne.n	de32 <__lshift+0x3e>
    de3a:	ldr	r4, [r6, #16]
    de3c:	add.w	r1, r6, #20
    de40:	ands.w	r9, r9, #31
    de44:	add.w	lr, r1, r4, lsl #2
    de48:	beq.n	de8e <__lshift+0x9a>
    de4a:	rsb	r2, r9, #32
    de4e:	movs	r4, #0
    de50:	ldr	r7, [r1, #0]
    de52:	lsl.w	ip, r7, r9
    de56:	orr.w	r4, ip, r4
    de5a:	mov	ip, r3
    de5c:	str.w	r4, [r3], #4
    de60:	ldr.w	r4, [r1], #4
    de64:	cmp	lr, r1
    de66:	lsr.w	r4, r4, r2
    de6a:	bhi.n	de50 <__lshift+0x5c>
    de6c:	str.w	r4, [ip, #4]
    de70:	cbz	r4, de76 <__lshift+0x82>
    de72:	add.w	r5, r8, #2
    de76:	ldr.w	r3, [sl, #76]	; 0x4c
    de7a:	ldr	r2, [r6, #4]
    de7c:	subs	r5, #1
    de7e:	ldr.w	r1, [r3, r2, lsl #2]
    de82:	str	r5, [r0, #16]
    de84:	str	r1, [r6, #0]
    de86:	str.w	r6, [r3, r2, lsl #2]
    de8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de8e:	subs	r3, #4
    de90:	ldr.w	r2, [r1], #4
    de94:	str.w	r2, [r3, #4]!
    de98:	cmp	lr, r1
    de9a:	bhi.n	de90 <__lshift+0x9c>
    de9c:	b.n	de76 <__lshift+0x82>
    de9e:	mov	r3, r2
    dea0:	b.n	de3a <__lshift+0x46>
    dea2:	nop

0000dea4 <__mcmp>:
    dea4:	ldr	r2, [r0, #16]
    dea6:	ldr	r3, [r1, #16]
    dea8:	subs	r2, r2, r3
    deaa:	bne.n	ded4 <__mcmp+0x30>
    deac:	lsls	r3, r3, #2
    deae:	adds	r0, #20
    deb0:	adds	r1, #20
    deb2:	add	r1, r3
    deb4:	push	{r4}
    deb6:	add	r3, r0
    deb8:	b.n	debe <__mcmp+0x1a>
    deba:	cmp	r0, r3
    debc:	bcs.n	ded8 <__mcmp+0x34>
    debe:	ldr.w	r4, [r3, #-4]!
    dec2:	ldr.w	r2, [r1, #-4]!
    dec6:	cmp	r4, r2
    dec8:	beq.n	deba <__mcmp+0x16>
    deca:	bcc.n	dee0 <__mcmp+0x3c>
    decc:	movs	r0, #1
    dece:	ldr.w	r4, [sp], #4
    ded2:	bx	lr
    ded4:	mov	r0, r2
    ded6:	bx	lr
    ded8:	movs	r0, #0
    deda:	ldr.w	r4, [sp], #4
    dede:	bx	lr
    dee0:	mov.w	r0, #4294967295
    dee4:	b.n	dece <__mcmp+0x2a>
    dee6:	nop

0000dee8 <__mdiff>:
    dee8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    deec:	ldr	r3, [r1, #16]
    deee:	mov	r7, r1
    def0:	ldr	r1, [r2, #16]
    def2:	subs	r3, r3, r1
    def4:	cmp	r3, #0
    def6:	mov	r8, r2
    def8:	bne.n	df2a <__mdiff+0x42>
    defa:	lsls	r1, r1, #2
    defc:	add.w	r2, r7, #20
    df00:	add.w	r5, r8, #20
    df04:	adds	r3, r2, r1
    df06:	add	r1, r5
    df08:	b.n	df0e <__mdiff+0x26>
    df0a:	cmp	r2, r3
    df0c:	bcs.n	dfcc <__mdiff+0xe4>
    df0e:	ldr.w	r6, [r3, #-4]!
    df12:	ldr.w	r4, [r1, #-4]!
    df16:	cmp	r6, r4
    df18:	beq.n	df0a <__mdiff+0x22>
    df1a:	bcs.n	dfde <__mdiff+0xf6>
    df1c:	mov	r3, r7
    df1e:	mov	r4, r2
    df20:	mov	r7, r8
    df22:	mov.w	r9, #1
    df26:	mov	r8, r3
    df28:	b.n	df38 <__mdiff+0x50>
    df2a:	blt.n	dfe8 <__mdiff+0x100>
    df2c:	add.w	r5, r7, #20
    df30:	add.w	r4, r2, #20
    df34:	mov.w	r9, #0
    df38:	ldr	r1, [r7, #4]
    df3a:	bl	da94 <_Balloc>
    df3e:	ldr.w	r3, [r8, #16]
    df42:	ldr	r6, [r7, #16]
    df44:	str.w	r9, [r0, #12]
    df48:	add.w	ip, r4, r3, lsl #2
    df4c:	mov	lr, r4
    df4e:	add.w	r7, r5, r6, lsl #2
    df52:	add.w	r4, r0, #20
    df56:	movs	r3, #0
    df58:	ldr.w	r1, [lr], #4
    df5c:	ldr.w	r8, [r5], #4
    df60:	uxth	r2, r1
    df62:	uxtah	r3, r3, r8
    df66:	lsrs	r1, r1, #16
    df68:	subs	r2, r3, r2
    df6a:	rsb	r3, r1, r8, lsr #16
    df6e:	add.w	r3, r3, r2, asr #16
    df72:	uxth	r2, r2
    df74:	orr.w	r2, r2, r3, lsl #16
    df78:	cmp	ip, lr
    df7a:	str.w	r2, [r4], #4
    df7e:	mov.w	r3, r3, asr #16
    df82:	bhi.n	df58 <__mdiff+0x70>
    df84:	cmp	r7, r5
    df86:	bls.n	dfb8 <__mdiff+0xd0>
    df88:	mov	ip, r4
    df8a:	mov	r1, r5
    df8c:	ldr.w	lr, [r1], #4
    df90:	uxtah	r2, r3, lr
    df94:	asrs	r3, r2, #16
    df96:	add.w	r3, r3, lr, lsr #16
    df9a:	uxth	r2, r2
    df9c:	orr.w	r2, r2, r3, lsl #16
    dfa0:	cmp	r7, r1
    dfa2:	str.w	r2, [ip], #4
    dfa6:	mov.w	r3, r3, asr #16
    dfaa:	bhi.n	df8c <__mdiff+0xa4>
    dfac:	mvns	r5, r5
    dfae:	add	r5, r7
    dfb0:	bic.w	r5, r5, #3
    dfb4:	adds	r5, #4
    dfb6:	add	r4, r5
    dfb8:	subs	r4, #4
    dfba:	cbnz	r2, dfc6 <__mdiff+0xde>
    dfbc:	ldr.w	r3, [r4, #-4]!
    dfc0:	subs	r6, #1
    dfc2:	cmp	r3, #0
    dfc4:	beq.n	dfbc <__mdiff+0xd4>
    dfc6:	str	r6, [r0, #16]
    dfc8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dfcc:	movs	r1, #0
    dfce:	bl	da94 <_Balloc>
    dfd2:	movs	r2, #1
    dfd4:	movs	r3, #0
    dfd6:	str	r2, [r0, #16]
    dfd8:	str	r3, [r0, #20]
    dfda:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dfde:	mov	r4, r5
    dfe0:	mov.w	r9, #0
    dfe4:	mov	r5, r2
    dfe6:	b.n	df38 <__mdiff+0x50>
    dfe8:	mov	r3, r7
    dfea:	add.w	r4, r7, #20
    dfee:	add.w	r5, r8, #20
    dff2:	mov	r7, r8
    dff4:	mov.w	r9, #1
    dff8:	mov	r8, r3
    dffa:	b.n	df38 <__mdiff+0x50>

0000dffc <__d2b>:
    dffc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e000:	vmov	r6, r7, d0
    e004:	sub	sp, #12
    e006:	mov	r8, r1
    e008:	movs	r1, #1
    e00a:	mov	r4, r7
    e00c:	ubfx	r5, r7, #20, #11
    e010:	mov	r7, r2
    e012:	bl	da94 <_Balloc>
    e016:	ubfx	r4, r4, #0, #20
    e01a:	mov	r9, r0
    e01c:	cbz	r5, e022 <__d2b+0x26>
    e01e:	orr.w	r4, r4, #1048576	; 0x100000
    e022:	str	r4, [sp, #4]
    e024:	cbz	r6, e06e <__d2b+0x72>
    e026:	add	r0, sp, #8
    e028:	str.w	r6, [r0, #-8]!
    e02c:	bl	dbb4 <__lo0bits>
    e030:	cmp	r0, #0
    e032:	bne.n	e09e <__d2b+0xa2>
    e034:	ldmia.w	sp, {r2, r3}
    e038:	str.w	r2, [r9, #20]
    e03c:	cmp	r3, #0
    e03e:	ite	eq
    e040:	moveq	r1, #1
    e042:	movne	r1, #2
    e044:	str.w	r3, [r9, #24]
    e048:	str.w	r1, [r9, #16]
    e04c:	cbnz	r5, e086 <__d2b+0x8a>
    e04e:	add.w	r3, r9, r1, lsl #2
    e052:	subw	r0, r0, #1074	; 0x432
    e056:	str.w	r0, [r8]
    e05a:	ldr	r0, [r3, #16]
    e05c:	bl	db74 <__hi0bits>
    e060:	rsb	r0, r0, r1, lsl #5
    e064:	str	r0, [r7, #0]
    e066:	mov	r0, r9
    e068:	add	sp, #12
    e06a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e06e:	add	r0, sp, #4
    e070:	bl	dbb4 <__lo0bits>
    e074:	ldr	r3, [sp, #4]
    e076:	str.w	r3, [r9, #20]
    e07a:	movs	r1, #1
    e07c:	adds	r0, #32
    e07e:	str.w	r1, [r9, #16]
    e082:	cmp	r5, #0
    e084:	beq.n	e04e <__d2b+0x52>
    e086:	subw	r5, r5, #1075	; 0x433
    e08a:	add	r5, r0
    e08c:	rsb	r0, r0, #53	; 0x35
    e090:	str.w	r5, [r8]
    e094:	str	r0, [r7, #0]
    e096:	mov	r0, r9
    e098:	add	sp, #12
    e09a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e09e:	ldmia.w	sp, {r2, r3}
    e0a2:	rsb	r1, r0, #32
    e0a6:	lsl.w	r1, r3, r1
    e0aa:	orrs	r2, r1
    e0ac:	lsrs	r3, r0
    e0ae:	str	r3, [sp, #4]
    e0b0:	str.w	r2, [r9, #20]
    e0b4:	b.n	e03c <__d2b+0x40>
    e0b6:	nop

0000e0b8 <_vasnprintf_r>:
    e0b8:	push	{r4, r5, r6, lr}
    e0ba:	mov	r5, r2
    e0bc:	sub	sp, #104	; 0x68
    e0be:	ldr	r4, [r2, #0]
    e0c0:	cbz	r1, e0c6 <_vasnprintf_r+0xe>
    e0c2:	cmp	r4, #0
    e0c4:	bne.n	e0fc <_vasnprintf_r+0x44>
    e0c6:	movs	r4, #0
    e0c8:	mov.w	r2, #648	; 0x288
    e0cc:	strh.w	r2, [sp, #12]
    e0d0:	str	r4, [sp, #0]
    e0d2:	str	r4, [sp, #16]
    e0d4:	mov	r2, r3
    e0d6:	movw	r6, #65535	; 0xffff
    e0da:	ldr	r3, [sp, #120]	; 0x78
    e0dc:	str	r4, [sp, #8]
    e0de:	mov	r1, sp
    e0e0:	str	r4, [sp, #20]
    e0e2:	strh.w	r6, [sp, #14]
    e0e6:	bl	f0d8 <_svfprintf_r>
    e0ea:	cmp	r0, #0
    e0ec:	blt.n	e112 <_vasnprintf_r+0x5a>
    e0ee:	ldr	r3, [sp, #0]
    e0f0:	str	r0, [r5, #0]
    e0f2:	movs	r2, #0
    e0f4:	strb	r2, [r3, #0]
    e0f6:	ldr	r0, [sp, #16]
    e0f8:	add	sp, #104	; 0x68
    e0fa:	pop	{r4, r5, r6, pc}
    e0fc:	mov.w	r2, #1544	; 0x608
    e100:	str	r1, [sp, #0]
    e102:	str	r1, [sp, #16]
    e104:	strh.w	r2, [sp, #12]
    e108:	bge.n	e0d4 <_vasnprintf_r+0x1c>
    e10a:	movs	r3, #139	; 0x8b
    e10c:	str	r3, [r0, #0]
    e10e:	movs	r0, #0
    e110:	b.n	e0f8 <_vasnprintf_r+0x40>
    e112:	movs	r0, #0
    e114:	b.n	e0f8 <_vasnprintf_r+0x40>
    e116:	nop

0000e118 <_calloc_r>:
    e118:	push	{r4, lr}
    e11a:	mul.w	r1, r2, r1
    e11e:	bl	c80c <_malloc_r>
    e122:	mov	r4, r0
    e124:	cbz	r0, e15e <_calloc_r+0x46>
    e126:	ldr.w	r2, [r0, #-4]
    e12a:	bic.w	r2, r2, #3
    e12e:	subs	r2, #4
    e130:	cmp	r2, #36	; 0x24
    e132:	bhi.n	e166 <_calloc_r+0x4e>
    e134:	cmp	r2, #19
    e136:	bls.n	e162 <_calloc_r+0x4a>
    e138:	movs	r3, #0
    e13a:	cmp	r2, #27
    e13c:	str	r3, [r0, #0]
    e13e:	str	r3, [r0, #4]
    e140:	bls.n	e170 <_calloc_r+0x58>
    e142:	cmp	r2, #36	; 0x24
    e144:	str	r3, [r0, #8]
    e146:	str	r3, [r0, #12]
    e148:	iteee	ne
    e14a:	addne.w	r2, r0, #16
    e14e:	streq	r3, [r0, #16]
    e150:	streq	r3, [r0, #20]
    e152:	addeq.w	r2, r0, #24
    e156:	movs	r3, #0
    e158:	str	r3, [r2, #0]
    e15a:	str	r3, [r2, #4]
    e15c:	str	r3, [r2, #8]
    e15e:	mov	r0, r4
    e160:	pop	{r4, pc}
    e162:	mov	r2, r0
    e164:	b.n	e156 <_calloc_r+0x3e>
    e166:	movs	r1, #0
    e168:	bl	cf7c <memset>
    e16c:	mov	r0, r4
    e16e:	pop	{r4, pc}
    e170:	add.w	r2, r0, #8
    e174:	b.n	e156 <_calloc_r+0x3e>
    e176:	nop

0000e178 <quorem>:
    e178:	ldr	r2, [r0, #16]
    e17a:	ldr	r3, [r1, #16]
    e17c:	cmp	r3, r2
    e17e:	bgt.w	e29c <quorem+0x124>
    e182:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e186:	add.w	r8, r3, #4294967295
    e18a:	add.w	r7, r1, #20
    e18e:	add.w	fp, r0, #20
    e192:	ldr.w	r2, [r7, r8, lsl #2]
    e196:	ldr.w	r3, [fp, r8, lsl #2]
    e19a:	mov.w	r4, r8, lsl #2
    e19e:	sub	sp, #12
    e1a0:	adds	r2, #1
    e1a2:	udiv	r9, r3, r2
    e1a6:	add.w	r3, fp, r4
    e1aa:	str	r4, [sp, #0]
    e1ac:	add.w	sl, r7, r4
    e1b0:	str	r3, [sp, #4]
    e1b2:	cmp.w	r9, #0
    e1b6:	beq.n	e22c <quorem+0xb4>
    e1b8:	movs	r5, #0
    e1ba:	mov	ip, r7
    e1bc:	mov	lr, fp
    e1be:	mov	r3, r5
    e1c0:	ldr.w	r6, [ip], #4
    e1c4:	ldr.w	r2, [lr]
    e1c8:	uxth	r4, r6
    e1ca:	mla	r5, r9, r4, r5
    e1ce:	lsrs	r6, r6, #16
    e1d0:	lsrs	r4, r5, #16
    e1d2:	mla	r4, r9, r6, r4
    e1d6:	uxth	r5, r5
    e1d8:	subs	r3, r3, r5
    e1da:	uxth	r6, r4
    e1dc:	uxtah	r3, r3, r2
    e1e0:	rsb	r6, r6, r2, lsr #16
    e1e4:	add.w	r6, r6, r3, asr #16
    e1e8:	uxth	r3, r3
    e1ea:	orr.w	r3, r3, r6, lsl #16
    e1ee:	cmp	sl, ip
    e1f0:	str.w	r3, [lr], #4
    e1f4:	mov.w	r5, r4, lsr #16
    e1f8:	mov.w	r3, r6, asr #16
    e1fc:	bcs.n	e1c0 <quorem+0x48>
    e1fe:	ldr	r3, [sp, #0]
    e200:	ldr.w	r3, [fp, r3]
    e204:	cbnz	r3, e22c <quorem+0xb4>
    e206:	ldr	r4, [sp, #4]
    e208:	subs	r3, r4, #4
    e20a:	cmp	fp, r3
    e20c:	bcs.n	e228 <quorem+0xb0>
    e20e:	ldr.w	r3, [r4, #-4]
    e212:	cbnz	r3, e228 <quorem+0xb0>
    e214:	sub.w	r3, r4, #8
    e218:	b.n	e220 <quorem+0xa8>
    e21a:	ldr	r2, [r3, #0]
    e21c:	subs	r3, #4
    e21e:	cbnz	r2, e228 <quorem+0xb0>
    e220:	cmp	fp, r3
    e222:	add.w	r8, r8, #4294967295
    e226:	bcc.n	e21a <quorem+0xa2>
    e228:	str.w	r8, [r0, #16]
    e22c:	mov	r4, r0
    e22e:	bl	dea4 <__mcmp>
    e232:	cmp	r0, #0
    e234:	blt.n	e294 <quorem+0x11c>
    e236:	add.w	r9, r9, #1
    e23a:	mov	r5, fp
    e23c:	movs	r3, #0
    e23e:	ldr.w	r1, [r7], #4
    e242:	ldr	r0, [r5, #0]
    e244:	uxth	r2, r1
    e246:	subs	r2, r3, r2
    e248:	lsrs	r1, r1, #16
    e24a:	uxtah	r2, r2, r0
    e24e:	rsb	r3, r1, r0, lsr #16
    e252:	add.w	r3, r3, r2, asr #16
    e256:	uxth	r1, r2
    e258:	orr.w	r1, r1, r3, lsl #16
    e25c:	cmp	sl, r7
    e25e:	str.w	r1, [r5], #4
    e262:	mov.w	r3, r3, asr #16
    e266:	bcs.n	e23e <quorem+0xc6>
    e268:	ldr.w	r2, [fp, r8, lsl #2]
    e26c:	add.w	r3, fp, r8, lsl #2
    e270:	cbnz	r2, e294 <quorem+0x11c>
    e272:	subs	r2, r3, #4
    e274:	cmp	fp, r2
    e276:	bcs.n	e290 <quorem+0x118>
    e278:	ldr.w	r2, [r3, #-4]
    e27c:	cbnz	r2, e290 <quorem+0x118>
    e27e:	subs	r3, #8
    e280:	b.n	e288 <quorem+0x110>
    e282:	ldr	r2, [r3, #0]
    e284:	subs	r3, #4
    e286:	cbnz	r2, e290 <quorem+0x118>
    e288:	cmp	fp, r3
    e28a:	add.w	r8, r8, #4294967295
    e28e:	bcc.n	e282 <quorem+0x10a>
    e290:	str.w	r8, [r4, #16]
    e294:	mov	r0, r9
    e296:	add	sp, #12
    e298:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e29c:	movs	r0, #0
    e29e:	bx	lr

0000e2a0 <_dtoa_r>:
    e2a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2a4:	vmov	r6, r7, d0
    e2a8:	sub	sp, #108	; 0x6c
    e2aa:	ldr	r4, [r0, #64]	; 0x40
    e2ac:	ldr	r5, [sp, #144]	; 0x90
    e2ae:	str	r1, [sp, #0]
    e2b0:	mov	r9, r0
    e2b2:	str	r2, [sp, #20]
    e2b4:	str	r3, [sp, #12]
    e2b6:	vmov	sl, s0
    e2ba:	mov	fp, r7
    e2bc:	cbz	r4, e2d4 <_dtoa_r+0x34>
    e2be:	ldr	r2, [r0, #68]	; 0x44
    e2c0:	str	r2, [r4, #4]
    e2c2:	movs	r3, #1
    e2c4:	lsls	r3, r2
    e2c6:	str	r3, [r4, #8]
    e2c8:	mov	r1, r4
    e2ca:	bl	dae0 <_Bfree>
    e2ce:	movs	r3, #0
    e2d0:	str.w	r3, [r9, #64]	; 0x40
    e2d4:	cmp.w	fp, #0
    e2d8:	mov	r4, fp
    e2da:	blt.n	e346 <_dtoa_r+0xa6>
    e2dc:	movs	r3, #0
    e2de:	str	r3, [r5, #0]
    e2e0:	ldr	r3, [pc, #644]	; (e568 <_dtoa_r+0x2c8>)
    e2e2:	mov	r2, r3
    e2e4:	ands	r3, r4
    e2e6:	cmp	r3, r2
    e2e8:	beq.n	e318 <_dtoa_r+0x78>
    e2ea:	movs	r2, #0
    e2ec:	movs	r3, #0
    e2ee:	mov	r0, sl
    e2f0:	mov	r1, fp
    e2f2:	bl	c38c <__aeabi_dcmpeq>
    e2f6:	mov	r6, sl
    e2f8:	mov	r7, fp
    e2fa:	mov	r8, r0
    e2fc:	cbz	r0, e352 <_dtoa_r+0xb2>
    e2fe:	ldr	r2, [sp, #12]
    e300:	movs	r3, #1
    e302:	str	r3, [r2, #0]
    e304:	ldr	r3, [sp, #148]	; 0x94
    e306:	cmp	r3, #0
    e308:	beq.w	e488 <_dtoa_r+0x1e8>
    e30c:	ldr	r0, [pc, #604]	; (e56c <_dtoa_r+0x2cc>)
    e30e:	str	r0, [r3, #0]
    e310:	subs	r0, #1
    e312:	add	sp, #108	; 0x6c
    e314:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e318:	ldr	r2, [sp, #12]
    e31a:	movw	r3, #9999	; 0x270f
    e31e:	str	r3, [r2, #0]
    e320:	cmp.w	sl, #0
    e324:	beq.w	e45c <_dtoa_r+0x1bc>
    e328:	ldr	r0, [pc, #580]	; (e570 <_dtoa_r+0x2d0>)
    e32a:	ldr	r3, [sp, #148]	; 0x94
    e32c:	cmp	r3, #0
    e32e:	beq.n	e312 <_dtoa_r+0x72>
    e330:	ldrb	r3, [r0, #3]
    e332:	cmp	r3, #0
    e334:	beq.w	e48c <_dtoa_r+0x1ec>
    e338:	add.w	r3, r0, #8
    e33c:	ldr	r2, [sp, #148]	; 0x94
    e33e:	str	r3, [r2, #0]
    e340:	add	sp, #108	; 0x6c
    e342:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e346:	movs	r3, #1
    e348:	bic.w	r4, fp, #2147483648	; 0x80000000
    e34c:	str	r3, [r5, #0]
    e34e:	mov	fp, r4
    e350:	b.n	e2e0 <_dtoa_r+0x40>
    e352:	add	r2, sp, #96	; 0x60
    e354:	add	r1, sp, #100	; 0x64
    e356:	vmov	d0, r6, r7
    e35a:	mov	r0, r9
    e35c:	bl	dffc <__d2b>
    e360:	lsrs	r5, r4, #20
    e362:	str	r0, [sp, #40]	; 0x28
    e364:	bne.w	e46e <_dtoa_r+0x1ce>
    e368:	ldr	r5, [sp, #96]	; 0x60
    e36a:	ldr	r6, [sp, #100]	; 0x64
    e36c:	add	r6, r5
    e36e:	addw	r3, r6, #1074	; 0x432
    e372:	cmp	r3, #32
    e374:	ble.w	e888 <_dtoa_r+0x5e8>
    e378:	rsb	r3, r3, #64	; 0x40
    e37c:	addw	r0, r6, #1042	; 0x412
    e380:	lsls	r4, r3
    e382:	lsr.w	r0, sl, r0
    e386:	orrs	r0, r4
    e388:	bl	bdd0 <__aeabi_ui2d>
    e38c:	movs	r3, #1
    e38e:	subs	r4, r6, #1
    e390:	sub.w	r1, r1, #32505856	; 0x1f00000
    e394:	str	r3, [sp, #60]	; 0x3c
    e396:	movs	r2, #0
    e398:	ldr	r3, [pc, #472]	; (e574 <_dtoa_r+0x2d4>)
    e39a:	bl	bb54 <__aeabi_dsub>
    e39e:	add	r3, pc, #432	; (adr r3, e550 <_dtoa_r+0x2b0>)
    e3a0:	ldrd	r2, r3, [r3]
    e3a4:	bl	bebc <__aeabi_dmul>
    e3a8:	add	r3, pc, #428	; (adr r3, e558 <_dtoa_r+0x2b8>)
    e3aa:	ldrd	r2, r3, [r3]
    e3ae:	bl	bb58 <__adddf3>
    e3b2:	mov	r6, r0
    e3b4:	mov	r0, r4
    e3b6:	mov	r7, r1
    e3b8:	bl	bdf0 <__aeabi_i2d>
    e3bc:	add	r3, pc, #416	; (adr r3, e560 <_dtoa_r+0x2c0>)
    e3be:	ldrd	r2, r3, [r3]
    e3c2:	bl	bebc <__aeabi_dmul>
    e3c6:	mov	r2, r0
    e3c8:	mov	r3, r1
    e3ca:	mov	r0, r6
    e3cc:	mov	r1, r7
    e3ce:	bl	bb58 <__adddf3>
    e3d2:	mov	r6, r0
    e3d4:	mov	r7, r1
    e3d6:	bl	c41c <__aeabi_d2iz>
    e3da:	movs	r2, #0
    e3dc:	str	r0, [sp, #16]
    e3de:	movs	r3, #0
    e3e0:	mov	r0, r6
    e3e2:	mov	r1, r7
    e3e4:	bl	c3a0 <__aeabi_dcmplt>
    e3e8:	cmp	r0, #0
    e3ea:	bne.w	e83e <_dtoa_r+0x59e>
    e3ee:	ldr	r6, [sp, #16]
    e3f0:	cmp	r6, #22
    e3f2:	bhi.w	e838 <_dtoa_r+0x598>
    e3f6:	ldr	r3, [pc, #384]	; (e578 <_dtoa_r+0x2d8>)
    e3f8:	add.w	r3, r3, r6, lsl #3
    e3fc:	ldrd	r0, r1, [r3]
    e400:	mov	r2, sl
    e402:	mov	r3, fp
    e404:	bl	c3dc <__aeabi_dcmpgt>
    e408:	cmp	r0, #0
    e40a:	beq.w	e892 <_dtoa_r+0x5f2>
    e40e:	subs	r3, r6, #1
    e410:	str	r3, [sp, #16]
    e412:	movs	r3, #0
    e414:	str	r3, [sp, #52]	; 0x34
    e416:	subs	r5, r5, r4
    e418:	subs.w	r8, r5, #1
    e41c:	bmi.w	e874 <_dtoa_r+0x5d4>
    e420:	movs	r3, #0
    e422:	str	r3, [sp, #28]
    e424:	ldr	r3, [sp, #16]
    e426:	cmp	r3, #0
    e428:	blt.w	e862 <_dtoa_r+0x5c2>
    e42c:	add	r8, r3
    e42e:	str	r3, [sp, #48]	; 0x30
    e430:	movs	r3, #0
    e432:	str	r3, [sp, #24]
    e434:	ldr	r3, [sp, #0]
    e436:	cmp	r3, #9
    e438:	bhi.n	e490 <_dtoa_r+0x1f0>
    e43a:	cmp	r3, #5
    e43c:	ble.w	f0c8 <_dtoa_r+0xe28>
    e440:	subs	r3, #4
    e442:	str	r3, [sp, #0]
    e444:	movs	r6, #0
    e446:	ldr	r3, [sp, #0]
    e448:	subs	r3, #2
    e44a:	cmp	r3, #3
    e44c:	bhi.w	f096 <_dtoa_r+0xdf6>
    e450:	tbh	[pc, r3, lsl #1]
    e454:	.word	0x0224032b
    e458:	.word	0x04500336
    e45c:	ldr	r3, [pc, #272]	; (e570 <_dtoa_r+0x2d0>)
    e45e:	ldr	r2, [pc, #284]	; (e57c <_dtoa_r+0x2dc>)
    e460:	ubfx	r0, r4, #0, #20
    e464:	cmp	r0, #0
    e466:	ite	ne
    e468:	movne	r0, r3
    e46a:	moveq	r0, r2
    e46c:	b.n	e32a <_dtoa_r+0x8a>
    e46e:	ubfx	r3, fp, #0, #20
    e472:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    e476:	subw	r4, r5, #1023	; 0x3ff
    e47a:	mov	r0, sl
    e47c:	str.w	r8, [sp, #60]	; 0x3c
    e480:	orr.w	r1, r1, #3145728	; 0x300000
    e484:	ldr	r5, [sp, #96]	; 0x60
    e486:	b.n	e396 <_dtoa_r+0xf6>
    e488:	ldr	r0, [pc, #244]	; (e580 <_dtoa_r+0x2e0>)
    e48a:	b.n	e312 <_dtoa_r+0x72>
    e48c:	adds	r3, r0, #3
    e48e:	b.n	e33c <_dtoa_r+0x9c>
    e490:	movs	r1, #0
    e492:	str.w	r1, [r9, #68]	; 0x44
    e496:	mov	r0, r9
    e498:	mov	r4, r1
    e49a:	str	r1, [sp, #0]
    e49c:	bl	da94 <_Balloc>
    e4a0:	mov.w	r3, #4294967295
    e4a4:	str	r3, [sp, #32]
    e4a6:	str	r3, [sp, #56]	; 0x38
    e4a8:	movs	r3, #1
    e4aa:	str	r0, [sp, #36]	; 0x24
    e4ac:	str.w	r0, [r9, #64]	; 0x40
    e4b0:	str	r4, [sp, #20]
    e4b2:	str	r3, [sp, #44]	; 0x2c
    e4b4:	ldr	r3, [sp, #100]	; 0x64
    e4b6:	cmp	r3, #0
    e4b8:	blt.w	e65c <_dtoa_r+0x3bc>
    e4bc:	ldr	r2, [sp, #16]
    e4be:	cmp	r2, #14
    e4c0:	bgt.w	e65c <_dtoa_r+0x3bc>
    e4c4:	ldr	r3, [pc, #176]	; (e578 <_dtoa_r+0x2d8>)
    e4c6:	add.w	r3, r3, r2, lsl #3
    e4ca:	vldr	d7, [r3]
    e4ce:	ldr	r3, [sp, #20]
    e4d0:	cmp	r3, #0
    e4d2:	vstr	d7, [sp]
    e4d6:	blt.w	ead6 <_dtoa_r+0x836>
    e4da:	mov	r6, sl
    e4dc:	mov	r7, fp
    e4de:	ldrd	sl, fp, [sp]
    e4e2:	mov	r0, r6
    e4e4:	mov	r2, sl
    e4e6:	mov	r3, fp
    e4e8:	mov	r1, r7
    e4ea:	bl	c110 <__aeabi_ddiv>
    e4ee:	bl	c41c <__aeabi_d2iz>
    e4f2:	mov	r4, r0
    e4f4:	bl	bdf0 <__aeabi_i2d>
    e4f8:	mov	r2, sl
    e4fa:	mov	r3, fp
    e4fc:	bl	bebc <__aeabi_dmul>
    e500:	mov	r3, r1
    e502:	mov	r2, r0
    e504:	mov	r1, r7
    e506:	mov	r0, r6
    e508:	bl	bb54 <__aeabi_dsub>
    e50c:	ldr	r5, [sp, #36]	; 0x24
    e50e:	add.w	r3, r4, #48	; 0x30
    e512:	strb	r3, [r5, #0]
    e514:	ldr	r3, [sp, #32]
    e516:	cmp	r3, #1
    e518:	mov	r6, r0
    e51a:	mov	r7, r1
    e51c:	add.w	r5, r5, #1
    e520:	beq.n	e5e6 <_dtoa_r+0x346>
    e522:	movs	r2, #0
    e524:	ldr	r3, [pc, #92]	; (e584 <_dtoa_r+0x2e4>)
    e526:	bl	bebc <__aeabi_dmul>
    e52a:	movs	r2, #0
    e52c:	movs	r3, #0
    e52e:	mov	r6, r0
    e530:	mov	r7, r1
    e532:	bl	c38c <__aeabi_dcmpeq>
    e536:	cmp	r0, #0
    e538:	bne.n	e636 <_dtoa_r+0x396>
    e53a:	str.w	r9, [sp, #20]
    e53e:	ldr.w	sl, [sp, #32]
    e542:	ldr.w	fp, [sp, #36]	; 0x24
    e546:	ldrd	r8, r9, [sp]
    e54a:	b.n	e59e <_dtoa_r+0x2fe>
    e54c:	nop.w
    e550:	.word	0x636f4361
    e554:	.word	0x3fd287a7
    e558:	.word	0x8b60c8b3
    e55c:	.word	0x3fc68a28
    e560:	.word	0x509f79fb
    e564:	.word	0x3fd34413
    e568:	.word	0x7ff00000
    e56c:	.word	0x20000b4d
    e570:	.word	0x20000b48
    e574:	.word	0x3ff80000
    e578:	.word	0x20000a40
    e57c:	.word	0x20000b3c
    e580:	.word	0x20000b4c
    e584:	.word	0x40240000
    e588:	bl	bebc <__aeabi_dmul>
    e58c:	movs	r2, #0
    e58e:	movs	r3, #0
    e590:	mov	r6, r0
    e592:	mov	r7, r1
    e594:	bl	c38c <__aeabi_dcmpeq>
    e598:	cmp	r0, #0
    e59a:	bne.w	ecfa <_dtoa_r+0xa5a>
    e59e:	mov	r2, r8
    e5a0:	mov	r3, r9
    e5a2:	mov	r0, r6
    e5a4:	mov	r1, r7
    e5a6:	bl	c110 <__aeabi_ddiv>
    e5aa:	bl	c41c <__aeabi_d2iz>
    e5ae:	mov	r4, r0
    e5b0:	bl	bdf0 <__aeabi_i2d>
    e5b4:	mov	r2, r8
    e5b6:	mov	r3, r9
    e5b8:	bl	bebc <__aeabi_dmul>
    e5bc:	mov	r2, r0
    e5be:	mov	r3, r1
    e5c0:	mov	r0, r6
    e5c2:	mov	r1, r7
    e5c4:	bl	bb54 <__aeabi_dsub>
    e5c8:	add.w	lr, r4, #48	; 0x30
    e5cc:	strb.w	lr, [r5], #1
    e5d0:	rsb	lr, fp, r5
    e5d4:	cmp	lr, sl
    e5d6:	mov	r6, r0
    e5d8:	mov	r7, r1
    e5da:	mov.w	r2, #0
    e5de:	ldr	r3, [pc, #696]	; (e898 <_dtoa_r+0x5f8>)
    e5e0:	bne.n	e588 <_dtoa_r+0x2e8>
    e5e2:	ldr.w	r9, [sp, #20]
    e5e6:	mov	r2, r6
    e5e8:	mov	r3, r7
    e5ea:	mov	r0, r6
    e5ec:	mov	r1, r7
    e5ee:	bl	bb58 <__adddf3>
    e5f2:	mov	r6, r0
    e5f4:	mov	r7, r1
    e5f6:	mov	r2, r0
    e5f8:	mov	r3, r1
    e5fa:	ldrd	r0, r1, [sp]
    e5fe:	bl	c3a0 <__aeabi_dcmplt>
    e602:	cbnz	r0, e616 <_dtoa_r+0x376>
    e604:	mov	r2, r6
    e606:	mov	r3, r7
    e608:	ldrd	r0, r1, [sp]
    e60c:	bl	c38c <__aeabi_dcmpeq>
    e610:	cbz	r0, e636 <_dtoa_r+0x396>
    e612:	lsls	r3, r4, #31
    e614:	bpl.n	e636 <_dtoa_r+0x396>
    e616:	ldrb.w	r4, [r5, #-1]
    e61a:	ldr	r2, [sp, #36]	; 0x24
    e61c:	subs	r3, r5, #1
    e61e:	b.n	e62a <_dtoa_r+0x38a>
    e620:	cmp	r2, r3
    e622:	beq.w	ee1e <_dtoa_r+0xb7e>
    e626:	ldrb.w	r4, [r3, #-1]!
    e62a:	cmp	r4, #57	; 0x39
    e62c:	add.w	r5, r3, #1
    e630:	beq.n	e620 <_dtoa_r+0x380>
    e632:	adds	r4, #1
    e634:	strb	r4, [r3, #0]
    e636:	ldr	r1, [sp, #40]	; 0x28
    e638:	mov	r0, r9
    e63a:	bl	dae0 <_Bfree>
    e63e:	movs	r2, #0
    e640:	ldr	r3, [sp, #16]
    e642:	strb	r2, [r5, #0]
    e644:	ldr	r2, [sp, #12]
    e646:	adds	r3, #1
    e648:	str	r3, [r2, #0]
    e64a:	ldr	r3, [sp, #148]	; 0x94
    e64c:	cmp	r3, #0
    e64e:	beq.w	ed88 <_dtoa_r+0xae8>
    e652:	ldr	r0, [sp, #36]	; 0x24
    e654:	str	r5, [r3, #0]
    e656:	add	sp, #108	; 0x6c
    e658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e65c:	ldr	r2, [sp, #44]	; 0x2c
    e65e:	cmp	r2, #0
    e660:	beq.w	e880 <_dtoa_r+0x5e0>
    e664:	ldr	r2, [sp, #0]
    e666:	cmp	r2, #1
    e668:	ble.w	eb1a <_dtoa_r+0x87a>
    e66c:	ldr	r3, [sp, #32]
    e66e:	ldr	r2, [sp, #24]
    e670:	subs	r7, r3, #1
    e672:	cmp	r2, r7
    e674:	blt.w	ed8e <_dtoa_r+0xaee>
    e678:	subs	r7, r2, r7
    e67a:	ldr	r3, [sp, #32]
    e67c:	cmp	r3, #0
    e67e:	blt.w	ef82 <_dtoa_r+0xce2>
    e682:	ldr	r5, [sp, #28]
    e684:	ldr	r3, [sp, #32]
    e686:	ldr	r2, [sp, #28]
    e688:	movs	r1, #1
    e68a:	add	r2, r3
    e68c:	mov	r0, r9
    e68e:	str	r2, [sp, #28]
    e690:	add	r8, r3
    e692:	bl	dc10 <__i2b>
    e696:	mov	r6, r0
    e698:	cbz	r5, e6b4 <_dtoa_r+0x414>
    e69a:	cmp.w	r8, #0
    e69e:	ble.n	e6b4 <_dtoa_r+0x414>
    e6a0:	cmp	r5, r8
    e6a2:	ldr	r2, [sp, #28]
    e6a4:	mov	r3, r5
    e6a6:	it	ge
    e6a8:	movge	r3, r8
    e6aa:	subs	r2, r2, r3
    e6ac:	str	r2, [sp, #28]
    e6ae:	subs	r5, r5, r3
    e6b0:	rsb	r8, r3, r8
    e6b4:	ldr	r3, [sp, #24]
    e6b6:	cmp	r3, #0
    e6b8:	ble.w	eca6 <_dtoa_r+0xa06>
    e6bc:	ldr	r2, [sp, #44]	; 0x2c
    e6be:	cmp	r2, #0
    e6c0:	beq.w	eac8 <_dtoa_r+0x828>
    e6c4:	cmp	r7, #0
    e6c6:	beq.w	eac8 <_dtoa_r+0x828>
    e6ca:	mov	r1, r6
    e6cc:	mov	r2, r7
    e6ce:	mov	r0, r9
    e6d0:	bl	dd54 <__pow5mult>
    e6d4:	ldr	r2, [sp, #40]	; 0x28
    e6d6:	mov	r1, r0
    e6d8:	mov	r6, r0
    e6da:	mov	r0, r9
    e6dc:	bl	dc24 <__multiply>
    e6e0:	ldr	r1, [sp, #40]	; 0x28
    e6e2:	mov	r4, r0
    e6e4:	mov	r0, r9
    e6e6:	bl	dae0 <_Bfree>
    e6ea:	ldr	r3, [sp, #24]
    e6ec:	subs	r3, r3, r7
    e6ee:	str	r3, [sp, #24]
    e6f0:	bne.w	eac6 <_dtoa_r+0x826>
    e6f4:	movs	r1, #1
    e6f6:	mov	r0, r9
    e6f8:	bl	dc10 <__i2b>
    e6fc:	ldr	r3, [sp, #48]	; 0x30
    e6fe:	str	r0, [sp, #24]
    e700:	cmp	r3, #0
    e702:	beq.w	eb30 <_dtoa_r+0x890>
    e706:	mov	r1, r0
    e708:	mov	r2, r3
    e70a:	mov	r0, r9
    e70c:	bl	dd54 <__pow5mult>
    e710:	ldr	r3, [sp, #0]
    e712:	str	r0, [sp, #24]
    e714:	cmp	r3, #1
    e716:	ble.w	ed00 <_dtoa_r+0xa60>
    e71a:	movs	r7, #0
    e71c:	ldr	r2, [sp, #24]
    e71e:	ldr	r3, [r2, #16]
    e720:	add.w	r3, r2, r3, lsl #2
    e724:	ldr	r0, [r3, #16]
    e726:	bl	db74 <__hi0bits>
    e72a:	rsb	r0, r0, #32
    e72e:	add	r0, r8
    e730:	ands.w	r0, r0, #31
    e734:	beq.w	eb2c <_dtoa_r+0x88c>
    e738:	rsb	r3, r0, #32
    e73c:	cmp	r3, #4
    e73e:	ble.w	f0bc <_dtoa_r+0xe1c>
    e742:	rsb	r0, r0, #28
    e746:	ldr	r3, [sp, #28]
    e748:	add	r3, r0
    e74a:	str	r3, [sp, #28]
    e74c:	add	r5, r0
    e74e:	add	r8, r0
    e750:	ldr	r3, [sp, #28]
    e752:	cmp	r3, #0
    e754:	ble.n	e762 <_dtoa_r+0x4c2>
    e756:	mov	r1, r4
    e758:	mov	r2, r3
    e75a:	mov	r0, r9
    e75c:	bl	ddf4 <__lshift>
    e760:	mov	r4, r0
    e762:	cmp.w	r8, #0
    e766:	ble.n	e774 <_dtoa_r+0x4d4>
    e768:	mov	r2, r8
    e76a:	ldr	r1, [sp, #24]
    e76c:	mov	r0, r9
    e76e:	bl	ddf4 <__lshift>
    e772:	str	r0, [sp, #24]
    e774:	ldr	r3, [sp, #52]	; 0x34
    e776:	cmp	r3, #0
    e778:	bne.w	ec70 <_dtoa_r+0x9d0>
    e77c:	ldr	r3, [sp, #32]
    e77e:	cmp	r3, #0
    e780:	ble.w	ecaa <_dtoa_r+0xa0a>
    e784:	ldr	r3, [sp, #44]	; 0x2c
    e786:	cmp	r3, #0
    e788:	bne.w	eb74 <_dtoa_r+0x8d4>
    e78c:	ldr.w	fp, [sp, #36]	; 0x24
    e790:	ldr	r7, [sp, #32]
    e792:	ldr.w	r8, [sp, #24]
    e796:	mov	r5, fp
    e798:	b.n	e7a0 <_dtoa_r+0x500>
    e79a:	bl	daf4 <__multadd>
    e79e:	mov	r4, r0
    e7a0:	mov	r1, r8
    e7a2:	mov	r0, r4
    e7a4:	bl	e178 <quorem>
    e7a8:	add.w	sl, r0, #48	; 0x30
    e7ac:	strb.w	sl, [r5], #1
    e7b0:	rsb	r3, fp, r5
    e7b4:	cmp	r3, r7
    e7b6:	mov.w	r2, #10
    e7ba:	mov.w	r3, #0
    e7be:	mov	r1, r4
    e7c0:	mov	r0, r9
    e7c2:	blt.n	e79a <_dtoa_r+0x4fa>
    e7c4:	ldr	r3, [sp, #36]	; 0x24
    e7c6:	ldr	r2, [sp, #32]
    e7c8:	cmp	r2, #1
    e7ca:	ite	ge
    e7cc:	addge	r3, r3, r2
    e7ce:	addlt	r3, #1
    e7d0:	mov	r5, r3
    e7d2:	mov.w	fp, #0
    e7d6:	mov	r1, r4
    e7d8:	movs	r2, #1
    e7da:	mov	r0, r9
    e7dc:	bl	ddf4 <__lshift>
    e7e0:	ldr	r1, [sp, #24]
    e7e2:	str	r0, [sp, #40]	; 0x28
    e7e4:	bl	dea4 <__mcmp>
    e7e8:	cmp	r0, #0
    e7ea:	ble.w	edf8 <_dtoa_r+0xb58>
    e7ee:	ldrb.w	r2, [r5, #-1]
    e7f2:	ldr	r1, [sp, #36]	; 0x24
    e7f4:	subs	r3, r5, #1
    e7f6:	b.n	e802 <_dtoa_r+0x562>
    e7f8:	cmp	r3, r1
    e7fa:	beq.w	ece6 <_dtoa_r+0xa46>
    e7fe:	ldrb.w	r2, [r3, #-1]!
    e802:	cmp	r2, #57	; 0x39
    e804:	add.w	r5, r3, #1
    e808:	beq.n	e7f8 <_dtoa_r+0x558>
    e80a:	adds	r2, #1
    e80c:	strb	r2, [r3, #0]
    e80e:	ldr	r1, [sp, #24]
    e810:	mov	r0, r9
    e812:	bl	dae0 <_Bfree>
    e816:	cmp	r6, #0
    e818:	beq.w	e636 <_dtoa_r+0x396>
    e81c:	cmp.w	fp, #0
    e820:	beq.n	e82e <_dtoa_r+0x58e>
    e822:	cmp	fp, r6
    e824:	beq.n	e82e <_dtoa_r+0x58e>
    e826:	mov	r1, fp
    e828:	mov	r0, r9
    e82a:	bl	dae0 <_Bfree>
    e82e:	mov	r1, r6
    e830:	mov	r0, r9
    e832:	bl	dae0 <_Bfree>
    e836:	b.n	e636 <_dtoa_r+0x396>
    e838:	movs	r3, #1
    e83a:	str	r3, [sp, #52]	; 0x34
    e83c:	b.n	e416 <_dtoa_r+0x176>
    e83e:	ldr.w	r8, [sp, #16]
    e842:	mov	r0, r8
    e844:	bl	bdf0 <__aeabi_i2d>
    e848:	mov	r2, r0
    e84a:	mov	r3, r1
    e84c:	mov	r0, r6
    e84e:	mov	r1, r7
    e850:	bl	c38c <__aeabi_dcmpeq>
    e854:	cmp	r0, #0
    e856:	bne.w	e3ee <_dtoa_r+0x14e>
    e85a:	add.w	r3, r8, #4294967295
    e85e:	str	r3, [sp, #16]
    e860:	b.n	e3ee <_dtoa_r+0x14e>
    e862:	ldr	r2, [sp, #28]
    e864:	ldr	r3, [sp, #16]
    e866:	subs	r2, r2, r3
    e868:	negs	r3, r3
    e86a:	str	r3, [sp, #24]
    e86c:	movs	r3, #0
    e86e:	str	r2, [sp, #28]
    e870:	str	r3, [sp, #48]	; 0x30
    e872:	b.n	e434 <_dtoa_r+0x194>
    e874:	rsb	r3, r8, #0
    e878:	str	r3, [sp, #28]
    e87a:	mov.w	r8, #0
    e87e:	b.n	e424 <_dtoa_r+0x184>
    e880:	ldr	r7, [sp, #24]
    e882:	ldr	r5, [sp, #28]
    e884:	ldr	r6, [sp, #44]	; 0x2c
    e886:	b.n	e698 <_dtoa_r+0x3f8>
    e888:	rsb	r4, r3, #32
    e88c:	lsl.w	r0, sl, r4
    e890:	b.n	e388 <_dtoa_r+0xe8>
    e892:	str	r0, [sp, #52]	; 0x34
    e894:	b.n	e416 <_dtoa_r+0x176>
    e896:	nop
    e898:	.word	0x40240000
    e89c:	movs	r3, #0
    e89e:	str	r3, [sp, #44]	; 0x2c
    e8a0:	ldr	r3, [sp, #16]
    e8a2:	ldr	r2, [sp, #20]
    e8a4:	add	r3, r2
    e8a6:	str	r3, [sp, #56]	; 0x38
    e8a8:	adds	r3, #1
    e8aa:	cmp	r3, #0
    e8ac:	str	r3, [sp, #32]
    e8ae:	ble.w	edac <_dtoa_r+0xb0c>
    e8b2:	ldr	r4, [sp, #32]
    e8b4:	mov	r5, r4
    e8b6:	movs	r1, #0
    e8b8:	cmp	r5, #23
    e8ba:	str.w	r1, [r9, #68]	; 0x44
    e8be:	bls.n	e8d8 <_dtoa_r+0x638>
    e8c0:	movs	r2, #1
    e8c2:	movs	r3, #4
    e8c4:	lsls	r3, r3, #1
    e8c6:	add.w	r0, r3, #20
    e8ca:	cmp	r0, r5
    e8cc:	mov	r1, r2
    e8ce:	add.w	r2, r2, #1
    e8d2:	bls.n	e8c4 <_dtoa_r+0x624>
    e8d4:	str.w	r1, [r9, #68]	; 0x44
    e8d8:	mov	r0, r9
    e8da:	bl	da94 <_Balloc>
    e8de:	cmp	r4, #14
    e8e0:	str	r0, [sp, #36]	; 0x24
    e8e2:	str.w	r0, [r9, #64]	; 0x40
    e8e6:	bhi.w	e4b4 <_dtoa_r+0x214>
    e8ea:	cmp	r6, #0
    e8ec:	beq.w	e4b4 <_dtoa_r+0x214>
    e8f0:	ldr	r1, [sp, #16]
    e8f2:	cmp	r1, #0
    e8f4:	strd	sl, fp, [sp, #64]	; 0x40
    e8f8:	ble.w	ee30 <_dtoa_r+0xb90>
    e8fc:	ldr	r3, [pc, #576]	; (eb40 <_dtoa_r+0x8a0>)
    e8fe:	and.w	r2, r1, #15
    e902:	asrs	r6, r1, #4
    e904:	add.w	r3, r3, r2, lsl #3
    e908:	lsls	r0, r6, #27
    e90a:	ldrd	r4, r5, [r3]
    e90e:	bpl.w	ed9e <_dtoa_r+0xafe>
    e912:	ldr	r3, [pc, #560]	; (eb44 <_dtoa_r+0x8a4>)
    e914:	mov	r0, sl
    e916:	mov	r1, fp
    e918:	ldrd	r2, r3, [r3, #32]
    e91c:	bl	c110 <__aeabi_ddiv>
    e920:	strd	r0, r1, [sp, #72]	; 0x48
    e924:	and.w	r6, r6, #15
    e928:	mov.w	sl, #3
    e92c:	cbz	r6, e950 <_dtoa_r+0x6b0>
    e92e:	ldr	r7, [pc, #532]	; (eb44 <_dtoa_r+0x8a4>)
    e930:	lsls	r1, r6, #31
    e932:	bpl.n	e948 <_dtoa_r+0x6a8>
    e934:	mov	r0, r4
    e936:	mov	r1, r5
    e938:	ldrd	r2, r3, [r7]
    e93c:	bl	bebc <__aeabi_dmul>
    e940:	add.w	sl, sl, #1
    e944:	mov	r4, r0
    e946:	mov	r5, r1
    e948:	asrs	r6, r6, #1
    e94a:	add.w	r7, r7, #8
    e94e:	bne.n	e930 <_dtoa_r+0x690>
    e950:	mov	r2, r4
    e952:	mov	r3, r5
    e954:	ldrd	r0, r1, [sp, #72]	; 0x48
    e958:	bl	c110 <__aeabi_ddiv>
    e95c:	mov	r6, r0
    e95e:	mov	r7, r1
    e960:	ldr	r3, [sp, #52]	; 0x34
    e962:	cbz	r3, e976 <_dtoa_r+0x6d6>
    e964:	movs	r2, #0
    e966:	ldr	r3, [pc, #480]	; (eb48 <_dtoa_r+0x8a8>)
    e968:	mov	r0, r6
    e96a:	mov	r1, r7
    e96c:	bl	c3a0 <__aeabi_dcmplt>
    e970:	cmp	r0, #0
    e972:	bne.w	efaa <_dtoa_r+0xd0a>
    e976:	mov	r0, sl
    e978:	bl	bdf0 <__aeabi_i2d>
    e97c:	mov	r2, r6
    e97e:	mov	r3, r7
    e980:	bl	bebc <__aeabi_dmul>
    e984:	ldr	r3, [pc, #452]	; (eb4c <_dtoa_r+0x8ac>)
    e986:	movs	r2, #0
    e988:	bl	bb58 <__adddf3>
    e98c:	ldr	r3, [sp, #32]
    e98e:	mov	r4, r0
    e990:	sub.w	r5, r1, #54525952	; 0x3400000
    e994:	cmp	r3, #0
    e996:	beq.w	ed50 <_dtoa_r+0xab0>
    e99a:	ldr	r3, [sp, #16]
    e99c:	str	r3, [sp, #88]	; 0x58
    e99e:	ldr	r3, [sp, #32]
    e9a0:	str	r3, [sp, #72]	; 0x48
    e9a2:	ldr	r3, [sp, #44]	; 0x2c
    e9a4:	cmp	r3, #0
    e9a6:	beq.w	eed2 <_dtoa_r+0xc32>
    e9aa:	ldr	r2, [sp, #72]	; 0x48
    e9ac:	ldr	r3, [pc, #400]	; (eb40 <_dtoa_r+0x8a0>)
    e9ae:	ldr	r1, [pc, #416]	; (eb50 <_dtoa_r+0x8b0>)
    e9b0:	add.w	r3, r3, r2, lsl #3
    e9b4:	ldrd	r2, r3, [r3, #-8]
    e9b8:	movs	r0, #0
    e9ba:	bl	c110 <__aeabi_ddiv>
    e9be:	mov	r2, r4
    e9c0:	mov	r3, r5
    e9c2:	bl	bb54 <__aeabi_dsub>
    e9c6:	mov	sl, r0
    e9c8:	mov	fp, r1
    e9ca:	mov	r0, r6
    e9cc:	mov	r1, r7
    e9ce:	bl	c41c <__aeabi_d2iz>
    e9d2:	mov	r4, r0
    e9d4:	bl	bdf0 <__aeabi_i2d>
    e9d8:	mov	r2, r0
    e9da:	mov	r3, r1
    e9dc:	mov	r0, r6
    e9de:	mov	r1, r7
    e9e0:	bl	bb54 <__aeabi_dsub>
    e9e4:	adds	r4, #48	; 0x30
    e9e6:	ldr	r5, [sp, #36]	; 0x24
    e9e8:	uxtb	r4, r4
    e9ea:	mov	r6, r0
    e9ec:	mov	r7, r1
    e9ee:	strb	r4, [r5, #0]
    e9f0:	mov	r2, r0
    e9f2:	mov	r3, r1
    e9f4:	mov	r0, sl
    e9f6:	mov	r1, fp
    e9f8:	adds	r5, #1
    e9fa:	bl	c3dc <__aeabi_dcmpgt>
    e9fe:	cmp	r0, #0
    ea00:	bne.n	eaa4 <_dtoa_r+0x804>
    ea02:	mov	r2, r6
    ea04:	mov	r3, r7
    ea06:	movs	r0, #0
    ea08:	ldr	r1, [pc, #316]	; (eb48 <_dtoa_r+0x8a8>)
    ea0a:	bl	bb54 <__aeabi_dsub>
    ea0e:	mov	r2, r0
    ea10:	mov	r3, r1
    ea12:	mov	r0, sl
    ea14:	mov	r1, fp
    ea16:	bl	c3dc <__aeabi_dcmpgt>
    ea1a:	cmp	r0, #0
    ea1c:	bne.w	f030 <_dtoa_r+0xd90>
    ea20:	ldr	r2, [sp, #72]	; 0x48
    ea22:	cmp	r2, #1
    ea24:	ble.w	ee16 <_dtoa_r+0xb76>
    ea28:	ldr	r3, [sp, #72]	; 0x48
    ea2a:	ldr	r2, [sp, #36]	; 0x24
    ea2c:	str.w	r8, [sp, #72]	; 0x48
    ea30:	add	r3, r2
    ea32:	mov	r8, r3
    ea34:	b.n	ea52 <_dtoa_r+0x7b2>
    ea36:	movs	r0, #0
    ea38:	ldr	r1, [pc, #268]	; (eb48 <_dtoa_r+0x8a8>)
    ea3a:	bl	bb54 <__aeabi_dsub>
    ea3e:	mov	r2, sl
    ea40:	mov	r3, fp
    ea42:	bl	c3a0 <__aeabi_dcmplt>
    ea46:	cmp	r0, #0
    ea48:	bne.w	f030 <_dtoa_r+0xd90>
    ea4c:	cmp	r5, r8
    ea4e:	beq.w	ee12 <_dtoa_r+0xb72>
    ea52:	mov	r0, sl
    ea54:	mov	r1, fp
    ea56:	movs	r2, #0
    ea58:	ldr	r3, [pc, #248]	; (eb54 <_dtoa_r+0x8b4>)
    ea5a:	bl	bebc <__aeabi_dmul>
    ea5e:	movs	r2, #0
    ea60:	ldr	r3, [pc, #240]	; (eb54 <_dtoa_r+0x8b4>)
    ea62:	mov	sl, r0
    ea64:	mov	fp, r1
    ea66:	mov	r0, r6
    ea68:	mov	r1, r7
    ea6a:	bl	bebc <__aeabi_dmul>
    ea6e:	mov	r7, r1
    ea70:	mov	r6, r0
    ea72:	bl	c41c <__aeabi_d2iz>
    ea76:	mov	r4, r0
    ea78:	bl	bdf0 <__aeabi_i2d>
    ea7c:	mov	r2, r0
    ea7e:	mov	r3, r1
    ea80:	mov	r0, r6
    ea82:	mov	r1, r7
    ea84:	bl	bb54 <__aeabi_dsub>
    ea88:	adds	r4, #48	; 0x30
    ea8a:	uxtb	r4, r4
    ea8c:	mov	r2, sl
    ea8e:	mov	r3, fp
    ea90:	strb.w	r4, [r5], #1
    ea94:	mov	r6, r0
    ea96:	mov	r7, r1
    ea98:	bl	c3a0 <__aeabi_dcmplt>
    ea9c:	mov	r2, r6
    ea9e:	mov	r3, r7
    eaa0:	cmp	r0, #0
    eaa2:	beq.n	ea36 <_dtoa_r+0x796>
    eaa4:	ldr	r3, [sp, #88]	; 0x58
    eaa6:	str	r3, [sp, #16]
    eaa8:	b.n	e636 <_dtoa_r+0x396>
    eaaa:	movs	r3, #0
    eaac:	str	r3, [sp, #44]	; 0x2c
    eaae:	ldr	r3, [sp, #20]
    eab0:	cmp	r3, #0
    eab2:	ble.w	edb6 <_dtoa_r+0xb16>
    eab6:	mov	r5, r3
    eab8:	mov	r4, r3
    eaba:	str	r3, [sp, #56]	; 0x38
    eabc:	str	r3, [sp, #32]
    eabe:	b.n	e8b6 <_dtoa_r+0x616>
    eac0:	movs	r3, #1
    eac2:	str	r3, [sp, #44]	; 0x2c
    eac4:	b.n	eaae <_dtoa_r+0x80e>
    eac6:	str	r4, [sp, #40]	; 0x28
    eac8:	ldr	r2, [sp, #24]
    eaca:	ldr	r1, [sp, #40]	; 0x28
    eacc:	mov	r0, r9
    eace:	bl	dd54 <__pow5mult>
    ead2:	mov	r4, r0
    ead4:	b.n	e6f4 <_dtoa_r+0x454>
    ead6:	ldr	r3, [sp, #32]
    ead8:	cmp	r3, #0
    eada:	bgt.w	e4da <_dtoa_r+0x23a>
    eade:	bne.w	ed80 <_dtoa_r+0xae0>
    eae2:	movs	r2, #0
    eae4:	ldr	r3, [pc, #112]	; (eb58 <_dtoa_r+0x8b8>)
    eae6:	ldrd	r0, r1, [sp]
    eaea:	bl	bebc <__aeabi_dmul>
    eaee:	mov	r3, fp
    eaf0:	mov	r2, sl
    eaf2:	bl	c3c8 <__aeabi_dcmpge>
    eaf6:	ldr	r3, [sp, #32]
    eaf8:	str	r3, [sp, #24]
    eafa:	mov	r6, r3
    eafc:	cmp	r0, #0
    eafe:	beq.w	ecd6 <_dtoa_r+0xa36>
    eb02:	ldr	r3, [sp, #20]
    eb04:	ldr	r5, [sp, #36]	; 0x24
    eb06:	mvns	r3, r3
    eb08:	str	r3, [sp, #16]
    eb0a:	ldr	r1, [sp, #24]
    eb0c:	mov	r0, r9
    eb0e:	bl	dae0 <_Bfree>
    eb12:	cmp	r6, #0
    eb14:	beq.w	e636 <_dtoa_r+0x396>
    eb18:	b.n	e82e <_dtoa_r+0x58e>
    eb1a:	ldr	r2, [sp, #60]	; 0x3c
    eb1c:	cmp	r2, #0
    eb1e:	beq.w	ef92 <_dtoa_r+0xcf2>
    eb22:	addw	r3, r3, #1075	; 0x433
    eb26:	ldr	r7, [sp, #24]
    eb28:	ldr	r5, [sp, #28]
    eb2a:	b.n	e686 <_dtoa_r+0x3e6>
    eb2c:	movs	r0, #28
    eb2e:	b.n	e746 <_dtoa_r+0x4a6>
    eb30:	ldr	r3, [sp, #0]
    eb32:	cmp	r3, #1
    eb34:	ble.w	f038 <_dtoa_r+0xd98>
    eb38:	ldr	r7, [sp, #48]	; 0x30
    eb3a:	movs	r0, #1
    eb3c:	b.n	e72e <_dtoa_r+0x48e>
    eb3e:	nop
    eb40:	.word	0x20000a40
    eb44:	.word	0x20000b08
    eb48:	.word	0x3ff00000
    eb4c:	.word	0x401c0000
    eb50:	.word	0x3fe00000
    eb54:	.word	0x40240000
    eb58:	.word	0x40140000
    eb5c:	mov	r1, r6
    eb5e:	movs	r3, #0
    eb60:	movs	r2, #10
    eb62:	mov	r0, r9
    eb64:	bl	daf4 <__multadd>
    eb68:	ldr	r3, [sp, #56]	; 0x38
    eb6a:	cmp	r3, #0
    eb6c:	mov	r6, r0
    eb6e:	ble.w	f08c <_dtoa_r+0xdec>
    eb72:	str	r3, [sp, #32]
    eb74:	cmp	r5, #0
    eb76:	ble.n	eb84 <_dtoa_r+0x8e4>
    eb78:	mov	r1, r6
    eb7a:	mov	r2, r5
    eb7c:	mov	r0, r9
    eb7e:	bl	ddf4 <__lshift>
    eb82:	mov	r6, r0
    eb84:	cmp	r7, #0
    eb86:	bne.w	ee82 <_dtoa_r+0xbe2>
    eb8a:	mov	r8, r6
    eb8c:	ldr	r3, [sp, #32]
    eb8e:	ldr	r2, [sp, #36]	; 0x24
    eb90:	subs	r3, #1
    eb92:	adds	r3, r2, r3
    eb94:	str	r3, [sp, #32]
    eb96:	and.w	r3, sl, #1
    eb9a:	str	r3, [sp, #40]	; 0x28
    eb9c:	mov	r7, r2
    eb9e:	ldr.w	fp, [sp, #24]
    eba2:	mov	r0, r4
    eba4:	mov	r1, fp
    eba6:	bl	e178 <quorem>
    ebaa:	mov	r1, r6
    ebac:	mov	r5, r0
    ebae:	mov	r0, r4
    ebb0:	bl	dea4 <__mcmp>
    ebb4:	mov	r2, r8
    ebb6:	mov	r1, fp
    ebb8:	mov	sl, r0
    ebba:	mov	r0, r9
    ebbc:	bl	dee8 <__mdiff>
    ebc0:	ldr	r2, [r0, #12]
    ebc2:	mov	fp, r0
    ebc4:	add.w	r3, r5, #48	; 0x30
    ebc8:	cmp	r2, #0
    ebca:	bne.n	ec60 <_dtoa_r+0x9c0>
    ebcc:	mov	r1, r0
    ebce:	mov	r0, r4
    ebd0:	str	r3, [sp, #28]
    ebd2:	bl	dea4 <__mcmp>
    ebd6:	mov	r1, fp
    ebd8:	str	r0, [sp, #20]
    ebda:	mov	r0, r9
    ebdc:	bl	dae0 <_Bfree>
    ebe0:	ldr	r2, [sp, #20]
    ebe2:	ldr	r3, [sp, #28]
    ebe4:	cbnz	r2, ebf2 <_dtoa_r+0x952>
    ebe6:	ldr	r1, [sp, #0]
    ebe8:	cbnz	r1, ebf2 <_dtoa_r+0x952>
    ebea:	ldr	r1, [sp, #40]	; 0x28
    ebec:	cmp	r1, #0
    ebee:	beq.w	f05c <_dtoa_r+0xdbc>
    ebf2:	cmp.w	sl, #0
    ebf6:	blt.w	edc0 <_dtoa_r+0xb20>
    ebfa:	bne.n	ec08 <_dtoa_r+0x968>
    ebfc:	ldr	r1, [sp, #0]
    ebfe:	cbnz	r1, ec08 <_dtoa_r+0x968>
    ec00:	ldr	r1, [sp, #40]	; 0x28
    ec02:	cmp	r1, #0
    ec04:	beq.w	edc0 <_dtoa_r+0xb20>
    ec08:	cmp	r2, #0
    ec0a:	bgt.w	eeaa <_dtoa_r+0xc0a>
    ec0e:	ldr	r2, [sp, #32]
    ec10:	strb	r3, [r7, #0]
    ec12:	add.w	sl, r7, #1
    ec16:	cmp	r7, r2
    ec18:	mov	r5, sl
    ec1a:	beq.w	eec2 <_dtoa_r+0xc22>
    ec1e:	mov	r1, r4
    ec20:	movs	r3, #0
    ec22:	movs	r2, #10
    ec24:	mov	r0, r9
    ec26:	bl	daf4 <__multadd>
    ec2a:	cmp	r6, r8
    ec2c:	mov	r4, r0
    ec2e:	mov	r1, r6
    ec30:	mov.w	r3, #0
    ec34:	mov.w	r2, #10
    ec38:	mov	r0, r9
    ec3a:	beq.n	ec54 <_dtoa_r+0x9b4>
    ec3c:	bl	daf4 <__multadd>
    ec40:	mov	r1, r8
    ec42:	mov	r6, r0
    ec44:	movs	r3, #0
    ec46:	movs	r2, #10
    ec48:	mov	r0, r9
    ec4a:	bl	daf4 <__multadd>
    ec4e:	mov	r7, sl
    ec50:	mov	r8, r0
    ec52:	b.n	eb9e <_dtoa_r+0x8fe>
    ec54:	bl	daf4 <__multadd>
    ec58:	mov	r7, sl
    ec5a:	mov	r6, r0
    ec5c:	mov	r8, r0
    ec5e:	b.n	eb9e <_dtoa_r+0x8fe>
    ec60:	mov	r1, r0
    ec62:	mov	r0, r9
    ec64:	str	r3, [sp, #20]
    ec66:	bl	dae0 <_Bfree>
    ec6a:	movs	r2, #1
    ec6c:	ldr	r3, [sp, #20]
    ec6e:	b.n	ebf2 <_dtoa_r+0x952>
    ec70:	ldr	r1, [sp, #24]
    ec72:	mov	r0, r4
    ec74:	bl	dea4 <__mcmp>
    ec78:	cmp	r0, #0
    ec7a:	bge.w	e77c <_dtoa_r+0x4dc>
    ec7e:	mov	r1, r4
    ec80:	ldr	r4, [sp, #16]
    ec82:	movs	r3, #0
    ec84:	subs	r4, #1
    ec86:	movs	r2, #10
    ec88:	mov	r0, r9
    ec8a:	str	r4, [sp, #16]
    ec8c:	bl	daf4 <__multadd>
    ec90:	ldr	r3, [sp, #44]	; 0x2c
    ec92:	mov	r4, r0
    ec94:	cmp	r3, #0
    ec96:	bne.w	eb5c <_dtoa_r+0x8bc>
    ec9a:	ldr	r3, [sp, #56]	; 0x38
    ec9c:	cmp	r3, #0
    ec9e:	ble.w	f07c <_dtoa_r+0xddc>
    eca2:	str	r3, [sp, #32]
    eca4:	b.n	e78c <_dtoa_r+0x4ec>
    eca6:	ldr	r4, [sp, #40]	; 0x28
    eca8:	b.n	e6f4 <_dtoa_r+0x454>
    ecaa:	ldr	r3, [sp, #0]
    ecac:	cmp	r3, #2
    ecae:	ble.w	e784 <_dtoa_r+0x4e4>
    ecb2:	ldr	r3, [sp, #32]
    ecb4:	cmp	r3, #0
    ecb6:	bne.w	eff4 <_dtoa_r+0xd54>
    ecba:	ldr	r1, [sp, #24]
    ecbc:	movs	r2, #5
    ecbe:	mov	r0, r9
    ecc0:	bl	daf4 <__multadd>
    ecc4:	mov	r1, r0
    ecc6:	str	r0, [sp, #24]
    ecc8:	mov	r0, r4
    ecca:	bl	dea4 <__mcmp>
    ecce:	cmp	r0, #0
    ecd0:	str	r4, [sp, #40]	; 0x28
    ecd2:	ble.w	eb02 <_dtoa_r+0x862>
    ecd6:	ldr	r2, [sp, #16]
    ecd8:	ldr	r1, [sp, #36]	; 0x24
    ecda:	movs	r3, #49	; 0x31
    ecdc:	adds	r2, #1
    ecde:	str	r2, [sp, #16]
    ece0:	strb	r3, [r1, #0]
    ece2:	adds	r5, r1, #1
    ece4:	b.n	eb0a <_dtoa_r+0x86a>
    ece6:	ldr	r2, [sp, #16]
    ece8:	adds	r2, #1
    ecea:	str	r2, [sp, #16]
    ecec:	ldr	r2, [sp, #36]	; 0x24
    ecee:	movs	r3, #49	; 0x31
    ecf0:	strb	r3, [r2, #0]
    ecf2:	b.n	e80e <_dtoa_r+0x56e>
    ecf4:	movs	r3, #1
    ecf6:	str	r3, [sp, #44]	; 0x2c
    ecf8:	b.n	e8a0 <_dtoa_r+0x600>
    ecfa:	ldr.w	r9, [sp, #20]
    ecfe:	b.n	e636 <_dtoa_r+0x396>
    ed00:	cmp.w	sl, #0
    ed04:	bne.w	e71a <_dtoa_r+0x47a>
    ed08:	ubfx	r3, fp, #0, #20
    ed0c:	cmp	r3, #0
    ed0e:	bne.w	ef8e <_dtoa_r+0xcee>
    ed12:	bic.w	r7, fp, #2147483648	; 0x80000000
    ed16:	lsrs	r7, r7, #20
    ed18:	lsls	r7, r7, #20
    ed1a:	cbz	r7, ed28 <_dtoa_r+0xa88>
    ed1c:	ldr	r3, [sp, #28]
    ed1e:	adds	r3, #1
    ed20:	str	r3, [sp, #28]
    ed22:	add.w	r8, r8, #1
    ed26:	movs	r7, #1
    ed28:	ldr	r3, [sp, #48]	; 0x30
    ed2a:	movs	r0, #1
    ed2c:	cmp	r3, #0
    ed2e:	beq.w	e72e <_dtoa_r+0x48e>
    ed32:	b.n	e71c <_dtoa_r+0x47c>
    ed34:	mov	r0, sl
    ed36:	bl	bdf0 <__aeabi_i2d>
    ed3a:	mov	r2, r6
    ed3c:	mov	r3, r7
    ed3e:	bl	bebc <__aeabi_dmul>
    ed42:	movs	r2, #0
    ed44:	ldr	r3, [pc, #764]	; (f044 <_dtoa_r+0xda4>)
    ed46:	bl	bb58 <__adddf3>
    ed4a:	mov	r4, r0
    ed4c:	sub.w	r5, r1, #54525952	; 0x3400000
    ed50:	mov	r0, r6
    ed52:	mov	r1, r7
    ed54:	movs	r2, #0
    ed56:	ldr	r3, [pc, #752]	; (f048 <_dtoa_r+0xda8>)
    ed58:	bl	bb54 <__aeabi_dsub>
    ed5c:	mov	r2, r4
    ed5e:	mov	r3, r5
    ed60:	mov	r6, r0
    ed62:	mov	r7, r1
    ed64:	bl	c3dc <__aeabi_dcmpgt>
    ed68:	cmp	r0, #0
    ed6a:	bne.w	eeca <_dtoa_r+0xc2a>
    ed6e:	mov	r2, r4
    ed70:	add.w	r3, r5, #2147483648	; 0x80000000
    ed74:	mov	r0, r6
    ed76:	mov	r1, r7
    ed78:	bl	c3a0 <__aeabi_dcmplt>
    ed7c:	cmp	r0, #0
    ed7e:	beq.n	ee16 <_dtoa_r+0xb76>
    ed80:	movs	r3, #0
    ed82:	str	r3, [sp, #24]
    ed84:	mov	r6, r3
    ed86:	b.n	eb02 <_dtoa_r+0x862>
    ed88:	ldr	r0, [sp, #36]	; 0x24
    ed8a:	b.w	e312 <_dtoa_r+0x72>
    ed8e:	ldr	r3, [sp, #24]
    ed90:	ldr	r2, [sp, #48]	; 0x30
    ed92:	str	r7, [sp, #24]
    ed94:	subs	r3, r7, r3
    ed96:	add	r2, r3
    ed98:	str	r2, [sp, #48]	; 0x30
    ed9a:	movs	r7, #0
    ed9c:	b.n	e67a <_dtoa_r+0x3da>
    ed9e:	vldr	d7, [sp, #64]	; 0x40
    eda2:	mov.w	sl, #2
    eda6:	vstr	d7, [sp, #72]	; 0x48
    edaa:	b.n	e92c <_dtoa_r+0x68c>
    edac:	mov	r4, r3
    edae:	movs	r1, #0
    edb0:	str.w	r1, [r9, #68]	; 0x44
    edb4:	b.n	e8d8 <_dtoa_r+0x638>
    edb6:	movs	r4, #1
    edb8:	str	r4, [sp, #56]	; 0x38
    edba:	str	r4, [sp, #32]
    edbc:	str	r4, [sp, #20]
    edbe:	b.n	edae <_dtoa_r+0xb0e>
    edc0:	cmp	r2, #0
    edc2:	mov	sl, r3
    edc4:	ble.n	edea <_dtoa_r+0xb4a>
    edc6:	mov	r1, r4
    edc8:	movs	r2, #1
    edca:	mov	r0, r9
    edcc:	bl	ddf4 <__lshift>
    edd0:	ldr	r1, [sp, #24]
    edd2:	mov	r4, r0
    edd4:	bl	dea4 <__mcmp>
    edd8:	cmp	r0, #0
    edda:	ble.w	f06e <_dtoa_r+0xdce>
    edde:	cmp.w	sl, #57	; 0x39
    ede2:	beq.w	eff8 <_dtoa_r+0xd58>
    ede6:	add.w	sl, r5, #49	; 0x31
    edea:	mov	fp, r6
    edec:	strb.w	sl, [r7]
    edf0:	adds	r5, r7, #1
    edf2:	mov	r6, r8
    edf4:	str	r4, [sp, #40]	; 0x28
    edf6:	b.n	e80e <_dtoa_r+0x56e>
    edf8:	bne.n	ee04 <_dtoa_r+0xb64>
    edfa:	tst.w	sl, #1
    edfe:	beq.n	ee04 <_dtoa_r+0xb64>
    ee00:	b.n	e7ee <_dtoa_r+0x54e>
    ee02:	mov	r5, r2
    ee04:	ldrb.w	r3, [r5, #-1]
    ee08:	cmp	r3, #48	; 0x30
    ee0a:	add.w	r2, r5, #4294967295
    ee0e:	beq.n	ee02 <_dtoa_r+0xb62>
    ee10:	b.n	e80e <_dtoa_r+0x56e>
    ee12:	ldr.w	r8, [sp, #72]	; 0x48
    ee16:	ldrd	sl, fp, [sp, #64]	; 0x40
    ee1a:	b.w	e4b4 <_dtoa_r+0x214>
    ee1e:	ldr	r1, [sp, #36]	; 0x24
    ee20:	movs	r2, #48	; 0x30
    ee22:	strb	r2, [r1, #0]
    ee24:	ldr	r2, [sp, #16]
    ee26:	ldrb.w	r4, [r5, #-1]
    ee2a:	adds	r2, #1
    ee2c:	str	r2, [sp, #16]
    ee2e:	b.n	e632 <_dtoa_r+0x392>
    ee30:	ldr	r3, [sp, #16]
    ee32:	negs	r4, r3
    ee34:	cmp	r4, #0
    ee36:	beq.w	efa0 <_dtoa_r+0xd00>
    ee3a:	ldr	r3, [pc, #528]	; (f04c <_dtoa_r+0xdac>)
    ee3c:	and.w	r2, r4, #15
    ee40:	add.w	r3, r3, r2, lsl #3
    ee44:	ldrd	r2, r3, [r3]
    ee48:	ldrd	r0, r1, [sp, #64]	; 0x40
    ee4c:	bl	bebc <__aeabi_dmul>
    ee50:	asrs	r4, r4, #4
    ee52:	mov	r6, r0
    ee54:	mov	r7, r1
    ee56:	beq.w	f086 <_dtoa_r+0xde6>
    ee5a:	ldr	r5, [pc, #500]	; (f050 <_dtoa_r+0xdb0>)
    ee5c:	mov.w	sl, #2
    ee60:	lsls	r2, r4, #31
    ee62:	bpl.n	ee78 <_dtoa_r+0xbd8>
    ee64:	mov	r0, r6
    ee66:	mov	r1, r7
    ee68:	ldrd	r2, r3, [r5]
    ee6c:	bl	bebc <__aeabi_dmul>
    ee70:	add.w	sl, sl, #1
    ee74:	mov	r6, r0
    ee76:	mov	r7, r1
    ee78:	asrs	r4, r4, #1
    ee7a:	add.w	r5, r5, #8
    ee7e:	bne.n	ee60 <_dtoa_r+0xbc0>
    ee80:	b.n	e960 <_dtoa_r+0x6c0>
    ee82:	ldr	r1, [r6, #4]
    ee84:	mov	r0, r9
    ee86:	bl	da94 <_Balloc>
    ee8a:	ldr	r3, [r6, #16]
    ee8c:	adds	r2, r3, #2
    ee8e:	mov	r5, r0
    ee90:	lsls	r2, r2, #2
    ee92:	add.w	r1, r6, #12
    ee96:	adds	r0, #12
    ee98:	bl	9c8c <memcpy>
    ee9c:	mov	r1, r5
    ee9e:	movs	r2, #1
    eea0:	mov	r0, r9
    eea2:	bl	ddf4 <__lshift>
    eea6:	mov	r8, r0
    eea8:	b.n	eb8c <_dtoa_r+0x8ec>
    eeaa:	cmp	r3, #57	; 0x39
    eeac:	beq.w	eff8 <_dtoa_r+0xd58>
    eeb0:	add.w	sl, r3, #1
    eeb4:	mov	fp, r6
    eeb6:	strb.w	sl, [r7]
    eeba:	adds	r5, r7, #1
    eebc:	mov	r6, r8
    eebe:	str	r4, [sp, #40]	; 0x28
    eec0:	b.n	e80e <_dtoa_r+0x56e>
    eec2:	mov	fp, r6
    eec4:	mov	sl, r3
    eec6:	mov	r6, r8
    eec8:	b.n	e7d6 <_dtoa_r+0x536>
    eeca:	movs	r3, #0
    eecc:	str	r3, [sp, #24]
    eece:	mov	r6, r3
    eed0:	b.n	ecd6 <_dtoa_r+0xa36>
    eed2:	ldr	r3, [sp, #72]	; 0x48
    eed4:	ldr	r1, [pc, #372]	; (f04c <_dtoa_r+0xdac>)
    eed6:	subs	r2, r3, #1
    eed8:	add.w	r1, r1, r2, lsl #3
    eedc:	mov	r3, r5
    eede:	str	r2, [sp, #92]	; 0x5c
    eee0:	ldrd	r0, r1, [r1]
    eee4:	mov	r2, r4
    eee6:	bl	bebc <__aeabi_dmul>
    eeea:	strd	r0, r1, [sp, #80]	; 0x50
    eeee:	mov	r1, r7
    eef0:	mov	r0, r6
    eef2:	bl	c41c <__aeabi_d2iz>
    eef6:	mov	r4, r0
    eef8:	bl	bdf0 <__aeabi_i2d>
    eefc:	mov	r3, r1
    eefe:	mov	r2, r0
    ef00:	mov	r1, r7
    ef02:	mov	r0, r6
    ef04:	bl	bb54 <__aeabi_dsub>
    ef08:	ldr	r3, [sp, #72]	; 0x48
    ef0a:	mov	r7, r1
    ef0c:	ldr	r1, [sp, #36]	; 0x24
    ef0e:	adds	r4, #48	; 0x30
    ef10:	cmp	r3, #1
    ef12:	mov	r6, r0
    ef14:	strb	r4, [r1, #0]
    ef16:	add.w	r5, r1, #1
    ef1a:	beq.n	ef5e <_dtoa_r+0xcbe>
    ef1c:	ldr	r3, [sp, #72]	; 0x48
    ef1e:	ldr	r2, [sp, #36]	; 0x24
    ef20:	add	r3, r2
    ef22:	mov	sl, r3
    ef24:	mov	fp, r5
    ef26:	movs	r2, #0
    ef28:	ldr	r3, [pc, #296]	; (f054 <_dtoa_r+0xdb4>)
    ef2a:	mov	r0, r6
    ef2c:	mov	r1, r7
    ef2e:	bl	bebc <__aeabi_dmul>
    ef32:	mov	r7, r1
    ef34:	mov	r6, r0
    ef36:	bl	c41c <__aeabi_d2iz>
    ef3a:	mov	r4, r0
    ef3c:	bl	bdf0 <__aeabi_i2d>
    ef40:	adds	r4, #48	; 0x30
    ef42:	mov	r2, r0
    ef44:	mov	r3, r1
    ef46:	mov	r0, r6
    ef48:	mov	r1, r7
    ef4a:	bl	bb54 <__aeabi_dsub>
    ef4e:	strb.w	r4, [fp], #1
    ef52:	cmp	sl, fp
    ef54:	mov	r6, r0
    ef56:	mov	r7, r1
    ef58:	bne.n	ef26 <_dtoa_r+0xc86>
    ef5a:	ldr	r3, [sp, #92]	; 0x5c
    ef5c:	add	r5, r3
    ef5e:	movs	r2, #0
    ef60:	ldr	r3, [pc, #244]	; (f058 <_dtoa_r+0xdb8>)
    ef62:	ldrd	r0, r1, [sp, #80]	; 0x50
    ef66:	bl	bb58 <__adddf3>
    ef6a:	mov	r2, r6
    ef6c:	mov	r3, r7
    ef6e:	bl	c3a0 <__aeabi_dcmplt>
    ef72:	cmp	r0, #0
    ef74:	beq.n	f008 <_dtoa_r+0xd68>
    ef76:	ldr	r3, [sp, #88]	; 0x58
    ef78:	str	r3, [sp, #16]
    ef7a:	ldrb.w	r4, [r5, #-1]
    ef7e:	b.w	e61a <_dtoa_r+0x37a>
    ef82:	ldr	r3, [sp, #28]
    ef84:	ldr	r2, [sp, #32]
    ef86:	subs	r5, r3, r2
    ef88:	movs	r3, #0
    ef8a:	b.w	e686 <_dtoa_r+0x3e6>
    ef8e:	movs	r7, #0
    ef90:	b.n	ed28 <_dtoa_r+0xa88>
    ef92:	ldr	r3, [sp, #96]	; 0x60
    ef94:	ldr	r7, [sp, #24]
    ef96:	ldr	r5, [sp, #28]
    ef98:	rsb	r3, r3, #54	; 0x36
    ef9c:	b.w	e686 <_dtoa_r+0x3e6>
    efa0:	ldrd	r6, r7, [sp, #64]	; 0x40
    efa4:	mov.w	sl, #2
    efa8:	b.n	e960 <_dtoa_r+0x6c0>
    efaa:	ldr	r3, [sp, #32]
    efac:	cmp	r3, #0
    efae:	beq.w	ed34 <_dtoa_r+0xa94>
    efb2:	ldr	r3, [sp, #56]	; 0x38
    efb4:	cmp	r3, #0
    efb6:	ble.w	ee16 <_dtoa_r+0xb76>
    efba:	movs	r2, #0
    efbc:	ldr	r3, [pc, #148]	; (f054 <_dtoa_r+0xdb4>)
    efbe:	mov	r0, r6
    efc0:	mov	r1, r7
    efc2:	bl	bebc <__aeabi_dmul>
    efc6:	mov	r6, r0
    efc8:	mov	r7, r1
    efca:	add.w	r0, sl, #1
    efce:	bl	bdf0 <__aeabi_i2d>
    efd2:	mov	r2, r6
    efd4:	mov	r3, r7
    efd6:	bl	bebc <__aeabi_dmul>
    efda:	movs	r2, #0
    efdc:	ldr	r3, [pc, #100]	; (f044 <_dtoa_r+0xda4>)
    efde:	bl	bb58 <__adddf3>
    efe2:	ldr	r2, [sp, #16]
    efe4:	ldr	r3, [sp, #56]	; 0x38
    efe6:	str	r3, [sp, #72]	; 0x48
    efe8:	subs	r2, #1
    efea:	mov	r4, r0
    efec:	sub.w	r5, r1, #54525952	; 0x3400000
    eff0:	str	r2, [sp, #88]	; 0x58
    eff2:	b.n	e9a2 <_dtoa_r+0x702>
    eff4:	str	r4, [sp, #40]	; 0x28
    eff6:	b.n	eb02 <_dtoa_r+0x862>
    eff8:	movs	r2, #57	; 0x39
    effa:	mov	fp, r6
    effc:	str	r4, [sp, #40]	; 0x28
    effe:	mov	r6, r8
    f000:	strb	r2, [r7, #0]
    f002:	adds	r5, r7, #1
    f004:	b.w	e7f2 <_dtoa_r+0x552>
    f008:	ldrd	r2, r3, [sp, #80]	; 0x50
    f00c:	movs	r0, #0
    f00e:	ldr	r1, [pc, #72]	; (f058 <_dtoa_r+0xdb8>)
    f010:	bl	bb54 <__aeabi_dsub>
    f014:	mov	r2, r6
    f016:	mov	r3, r7
    f018:	bl	c3dc <__aeabi_dcmpgt>
    f01c:	cbnz	r0, f022 <_dtoa_r+0xd82>
    f01e:	b.n	ee16 <_dtoa_r+0xb76>
    f020:	mov	r5, r2
    f022:	ldrb.w	r3, [r5, #-1]
    f026:	cmp	r3, #48	; 0x30
    f028:	add.w	r2, r5, #4294967295
    f02c:	beq.n	f020 <_dtoa_r+0xd80>
    f02e:	b.n	eaa4 <_dtoa_r+0x804>
    f030:	ldr	r3, [sp, #88]	; 0x58
    f032:	str	r3, [sp, #16]
    f034:	b.w	e61a <_dtoa_r+0x37a>
    f038:	cmp.w	sl, #0
    f03c:	bne.w	eb38 <_dtoa_r+0x898>
    f040:	b.n	ed08 <_dtoa_r+0xa68>
    f042:	nop
    f044:	.word	0x401c0000
    f048:	.word	0x40140000
    f04c:	.word	0x20000a40
    f050:	.word	0x20000b08
    f054:	.word	0x40240000
    f058:	.word	0x3fe00000
    f05c:	cmp	r3, #57	; 0x39
    f05e:	mov	fp, sl
    f060:	mov	sl, r3
    f062:	beq.n	eff8 <_dtoa_r+0xd58>
    f064:	cmp.w	fp, #0
    f068:	bgt.w	ede6 <_dtoa_r+0xb46>
    f06c:	b.n	edea <_dtoa_r+0xb4a>
    f06e:	bne.w	edea <_dtoa_r+0xb4a>
    f072:	tst.w	sl, #1
    f076:	beq.w	edea <_dtoa_r+0xb4a>
    f07a:	b.n	edde <_dtoa_r+0xb3e>
    f07c:	ldr	r3, [sp, #0]
    f07e:	cmp	r3, #2
    f080:	bgt.n	f0ce <_dtoa_r+0xe2e>
    f082:	ldr	r3, [sp, #56]	; 0x38
    f084:	b.n	eca2 <_dtoa_r+0xa02>
    f086:	mov.w	sl, #2
    f08a:	b.n	e960 <_dtoa_r+0x6c0>
    f08c:	ldr	r3, [sp, #0]
    f08e:	cmp	r3, #2
    f090:	bgt.n	f0ce <_dtoa_r+0xe2e>
    f092:	ldr	r3, [sp, #56]	; 0x38
    f094:	b.n	eb72 <_dtoa_r+0x8d2>
    f096:	movs	r4, #0
    f098:	str.w	r4, [r9, #68]	; 0x44
    f09c:	mov	r1, r4
    f09e:	mov	r0, r9
    f0a0:	bl	da94 <_Balloc>
    f0a4:	mov.w	r3, #4294967295
    f0a8:	str	r3, [sp, #32]
    f0aa:	str	r3, [sp, #56]	; 0x38
    f0ac:	movs	r3, #1
    f0ae:	str	r0, [sp, #36]	; 0x24
    f0b0:	str	r4, [sp, #20]
    f0b2:	str.w	r0, [r9, #64]	; 0x40
    f0b6:	str	r3, [sp, #44]	; 0x2c
    f0b8:	b.w	e4b4 <_dtoa_r+0x214>
    f0bc:	beq.w	e750 <_dtoa_r+0x4b0>
    f0c0:	rsb	r0, r0, #60	; 0x3c
    f0c4:	b.w	e746 <_dtoa_r+0x4a6>
    f0c8:	movs	r6, #1
    f0ca:	b.w	e446 <_dtoa_r+0x1a6>
    f0ce:	ldr	r3, [sp, #56]	; 0x38
    f0d0:	str	r3, [sp, #32]
    f0d2:	b.n	ecb2 <_dtoa_r+0xa12>
    f0d4:	movs	r0, r0
	...

0000f0d8 <_svfprintf_r>:
    f0d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0dc:	sub	sp, #260	; 0x104
    f0de:	mov	r4, r1
    f0e0:	str	r1, [sp, #20]
    f0e2:	mov	r5, r2
    f0e4:	str	r3, [sp, #40]	; 0x28
    f0e6:	str	r0, [sp, #24]
    f0e8:	bl	da78 <_localeconv_r>
    f0ec:	ldr	r3, [r0, #0]
    f0ee:	str	r3, [sp, #76]	; 0x4c
    f0f0:	mov	r0, r3
    f0f2:	bl	d540 <strlen>
    f0f6:	ldrh	r3, [r4, #12]
    f0f8:	str	r0, [sp, #72]	; 0x48
    f0fa:	lsls	r6, r3, #24
    f0fc:	bpl.n	f106 <_svfprintf_r+0x2e>
    f0fe:	ldr	r3, [r4, #16]
    f100:	cmp	r3, #0
    f102:	beq.w	10368 <_svfprintf_r+0x1290>
    f106:	vldr	d7, [pc, #664]	; f3a0 <_svfprintf_r+0x2c8>
    f10a:	movs	r3, #0
    f10c:	vstr	d7, [sp, #64]	; 0x40
    f110:	str	r3, [sp, #56]	; 0x38
    f112:	str	r3, [sp, #148]	; 0x94
    f114:	str	r3, [sp, #144]	; 0x90
    f116:	str	r3, [sp, #84]	; 0x54
    f118:	str	r3, [sp, #28]
    f11a:	ldr.w	sl, [pc, #656]	; f3ac <_svfprintf_r+0x2d4>
    f11e:	add	r3, sp, #192	; 0xc0
    f120:	str	r3, [sp, #140]	; 0x8c
    f122:	mov	r9, r3
    f124:	mov	r8, r5
    f126:	ldrb.w	r3, [r8]
    f12a:	mov	r4, r8
    f12c:	cbz	r3, f16a <_svfprintf_r+0x92>
    f12e:	cmp	r3, #37	; 0x25
    f130:	bne.n	f138 <_svfprintf_r+0x60>
    f132:	b.n	f16a <_svfprintf_r+0x92>
    f134:	cmp	r3, #37	; 0x25
    f136:	beq.n	f140 <_svfprintf_r+0x68>
    f138:	ldrb.w	r3, [r4, #1]!
    f13c:	cmp	r3, #0
    f13e:	bne.n	f134 <_svfprintf_r+0x5c>
    f140:	rsb	r5, r8, r4
    f144:	cbz	r5, f16a <_svfprintf_r+0x92>
    f146:	ldr	r3, [sp, #144]	; 0x90
    f148:	ldr	r2, [sp, #148]	; 0x94
    f14a:	str.w	r8, [r9]
    f14e:	adds	r3, #1
    f150:	add	r2, r5
    f152:	cmp	r3, #7
    f154:	str.w	r5, [r9, #4]
    f158:	str	r2, [sp, #148]	; 0x94
    f15a:	str	r3, [sp, #144]	; 0x90
    f15c:	bgt.w	f2ac <_svfprintf_r+0x1d4>
    f160:	add.w	r9, r9, #8
    f164:	ldr	r3, [sp, #28]
    f166:	add	r3, r5
    f168:	str	r3, [sp, #28]
    f16a:	ldrb	r3, [r4, #0]
    f16c:	cmp	r3, #0
    f16e:	beq.w	f2be <_svfprintf_r+0x1e6>
    f172:	movs	r3, #0
    f174:	mov	r2, r3
    f176:	strb.w	r3, [sp, #111]	; 0x6f
    f17a:	mov	r1, r3
    f17c:	str	r3, [sp, #32]
    f17e:	str	r3, [sp, #12]
    f180:	mov.w	fp, #4294967295
    f184:	ldrb	r3, [r4, #1]
    f186:	add.w	r8, r4, #1
    f18a:	mov	r5, fp
    f18c:	add.w	r8, r8, #1
    f190:	sub.w	r0, r3, #32
    f194:	cmp	r0, #88	; 0x58
    f196:	bhi.w	fa02 <_svfprintf_r+0x92a>
    f19a:	tbh	[pc, r0, lsl #1]
    f19e:	.short	0x03a0
    f1a0:	.word	0x04320432
    f1a4:	.word	0x043203a8
    f1a8:	.word	0x04320432
    f1ac:	.word	0x04320432
    f1b0:	.word	0x03af0432
    f1b4:	.word	0x043203bd
    f1b8:	.word	0x00e2005d
    f1bc:	.word	0x01090432
    f1c0:	.word	0x01100110
    f1c4:	.word	0x01100110
    f1c8:	.word	0x01100110
    f1cc:	.word	0x01100110
    f1d0:	.word	0x04320110
    f1d4:	.word	0x04320432
    f1d8:	.word	0x04320432
    f1dc:	.word	0x04320432
    f1e0:	.word	0x04320432
    f1e4:	.word	0x01200432
    f1e8:	.word	0x04320286
    f1ec:	.word	0x04320286
    f1f0:	.word	0x04320432
    f1f4:	.word	0x02d40432
    f1f8:	.word	0x04320432
    f1fc:	.word	0x043202e5
    f200:	.word	0x04320432
    f204:	.word	0x04320432
    f208:	.word	0x0432030f
    f20c:	.word	0x033d0432
    f210:	.word	0x04320432
    f214:	.word	0x04320432
    f218:	.word	0x04320432
    f21c:	.word	0x04320432
    f220:	.word	0x04320432
    f224:	.word	0x0391037e
    f228:	.word	0x02860286
    f22c:	.word	0x03990286
    f230:	.word	0x04320391
    f234:	.word	0x04070432
    f238:	.word	0x04120432
    f23c:	.word	0x006400a3
    f240:	.word	0x043203c2
    f244:	.word	0x043203c9
    f248:	.word	0x043203ea
    f24c:	.word	0x03f20432
    f250:	ldr	r0, [sp, #32]
    f252:	str	r3, [sp, #40]	; 0x28
    f254:	negs	r0, r0
    f256:	str	r0, [sp, #32]
    f258:	ldr	r3, [sp, #12]
    f25a:	orr.w	r3, r3, #4
    f25e:	str	r3, [sp, #12]
    f260:	ldrb.w	r3, [r8]
    f264:	b.n	f18c <_svfprintf_r+0xb4>
    f266:	ldr	r0, [sp, #40]	; 0x28
    f268:	mov	fp, r5
    f26a:	movs	r1, #0
    f26c:	ldr	r4, [r0, #0]
    f26e:	strb.w	r1, [sp, #111]	; 0x6f
    f272:	adds	r7, r0, #4
    f274:	ldr	r0, [sp, #12]
    f276:	movs	r3, #48	; 0x30
    f278:	movs	r2, #120	; 0x78
    f27a:	cmp	fp, r1
    f27c:	strb.w	r3, [sp, #112]	; 0x70
    f280:	mov.w	r5, #0
    f284:	strb.w	r2, [sp, #113]	; 0x71
    f288:	orr.w	r3, r0, #2
    f28c:	blt.w	fa3c <_svfprintf_r+0x964>
    f290:	bic.w	r3, r0, #128	; 0x80
    f294:	orr.w	r3, r3, #2
    f298:	str	r3, [sp, #12]
    f29a:	orrs.w	r3, r4, r5
    f29e:	str	r7, [sp, #40]	; 0x28
    f2a0:	beq.w	f9e8 <_svfprintf_r+0x910>
    f2a4:	mov	r7, r1
    f2a6:	str	r2, [sp, #52]	; 0x34
    f2a8:	ldr	r0, [pc, #252]	; (f3a8 <_svfprintf_r+0x2d0>)
    f2aa:	b.n	f87a <_svfprintf_r+0x7a2>
    f2ac:	add	r2, sp, #140	; 0x8c
    f2ae:	ldr	r1, [sp, #20]
    f2b0:	ldr	r0, [sp, #24]
    f2b2:	bl	107bc <__ssprint_r>
    f2b6:	cbnz	r0, f2cc <_svfprintf_r+0x1f4>
    f2b8:	add.w	r9, sp, #192	; 0xc0
    f2bc:	b.n	f164 <_svfprintf_r+0x8c>
    f2be:	ldr	r3, [sp, #148]	; 0x94
    f2c0:	cbz	r3, f2cc <_svfprintf_r+0x1f4>
    f2c2:	ldr	r0, [sp, #24]
    f2c4:	ldr	r1, [sp, #20]
    f2c6:	add	r2, sp, #140	; 0x8c
    f2c8:	bl	107bc <__ssprint_r>
    f2cc:	ldr	r3, [sp, #20]
    f2ce:	ldrh	r3, [r3, #12]
    f2d0:	tst.w	r3, #64	; 0x40
    f2d4:	ldr	r3, [sp, #28]
    f2d6:	it	ne
    f2d8:	movne.w	r3, #4294967295
    f2dc:	mov	r0, r3
    f2de:	add	sp, #260	; 0x104
    f2e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2e4:	str	r3, [sp, #52]	; 0x34
    f2e6:	mov	fp, r5
    f2e8:	cmp	r2, #0
    f2ea:	bne.w	10754 <_svfprintf_r+0x167c>
    f2ee:	ldr	r2, [sp, #12]
    f2f0:	ands.w	r3, r2, #32
    f2f4:	beq.w	f784 <_svfprintf_r+0x6ac>
    f2f8:	ldr	r7, [sp, #40]	; 0x28
    f2fa:	adds	r7, #7
    f2fc:	bic.w	r3, r7, #7
    f300:	movs	r7, #0
    f302:	add.w	r1, r3, #8
    f306:	cmp	fp, r7
    f308:	str	r1, [sp, #40]	; 0x28
    f30a:	ldrd	r4, r5, [r3]
    f30e:	strb.w	r7, [sp, #111]	; 0x6f
    f312:	blt.w	101da <_svfprintf_r+0x1102>
    f316:	bic.w	r3, r2, #128	; 0x80
    f31a:	str	r3, [sp, #12]
    f31c:	orrs.w	r3, r4, r5
    f320:	beq.w	fa2c <_svfprintf_r+0x954>
    f324:	add	r6, sp, #192	; 0xc0
    f326:	lsrs	r2, r4, #3
    f328:	orr.w	r2, r2, r5, lsl #29
    f32c:	lsrs	r1, r5, #3
    f32e:	and.w	r3, r4, #7
    f332:	mov	r5, r1
    f334:	mov	r4, r2
    f336:	adds	r3, #48	; 0x30
    f338:	orrs.w	r2, r4, r5
    f33c:	strb.w	r3, [r6, #-1]!
    f340:	bne.n	f326 <_svfprintf_r+0x24e>
    f342:	ldr	r2, [sp, #12]
    f344:	lsls	r1, r2, #31
    f346:	bpl.w	f468 <_svfprintf_r+0x390>
    f34a:	cmp	r3, #48	; 0x30
    f34c:	beq.w	f468 <_svfprintf_r+0x390>
    f350:	movs	r2, #48	; 0x30
    f352:	subs	r3, r6, #1
    f354:	strb.w	r2, [r6, #-1]
    f358:	add	r2, sp, #192	; 0xc0
    f35a:	subs	r2, r2, r3
    f35c:	str	r2, [sp, #36]	; 0x24
    f35e:	mov	r6, r3
    f360:	b.n	f46e <_svfprintf_r+0x396>
    f362:	ldrb.w	r3, [r8]
    f366:	cmp	r3, #42	; 0x2a
    f368:	add.w	r4, r8, #1
    f36c:	beq.w	10738 <_svfprintf_r+0x1660>
    f370:	sub.w	r0, r3, #48	; 0x30
    f374:	cmp	r0, #9
    f376:	it	ls
    f378:	movls	r5, #0
    f37a:	bhi.w	1068a <_svfprintf_r+0x15b2>
    f37e:	ldrb.w	r3, [r4], #1
    f382:	add.w	r5, r5, r5, lsl #2
    f386:	add.w	r5, r0, r5, lsl #1
    f38a:	sub.w	r0, r3, #48	; 0x30
    f38e:	cmp	r0, #9
    f390:	bls.n	f37e <_svfprintf_r+0x2a6>
    f392:	orr.w	r5, r5, r5, asr #31
    f396:	mov	r8, r4
    f398:	b.n	f190 <_svfprintf_r+0xb8>
    f39a:	nop
    f39c:	nop.w
	...
    f3a8:	.word	0x20000b84
    f3ac:	.word	0x20000b50
    f3b0:	ldr	r3, [sp, #12]
    f3b2:	orr.w	r3, r3, #128	; 0x80
    f3b6:	str	r3, [sp, #12]
    f3b8:	ldrb.w	r3, [r8]
    f3bc:	b.n	f18c <_svfprintf_r+0xb4>
    f3be:	sub.w	r0, r3, #48	; 0x30
    f3c2:	movs	r3, #0
    f3c4:	mov	r4, r3
    f3c6:	ldrb.w	r3, [r8], #1
    f3ca:	add.w	r4, r4, r4, lsl #2
    f3ce:	add.w	r4, r0, r4, lsl #1
    f3d2:	sub.w	r0, r3, #48	; 0x30
    f3d6:	cmp	r0, #9
    f3d8:	bls.n	f3c6 <_svfprintf_r+0x2ee>
    f3da:	str	r4, [sp, #32]
    f3dc:	b.n	f190 <_svfprintf_r+0xb8>
    f3de:	str	r3, [sp, #52]	; 0x34
    f3e0:	mov	fp, r5
    f3e2:	cmp	r2, #0
    f3e4:	bne.w	10770 <_svfprintf_r+0x1698>
    f3e8:	ldr	r3, [sp, #12]
    f3ea:	orr.w	r3, r3, #16
    f3ee:	str	r3, [sp, #12]
    f3f0:	ldr	r3, [sp, #12]
    f3f2:	lsls	r4, r3, #26
    f3f4:	bpl.w	fe66 <_svfprintf_r+0xd8e>
    f3f8:	ldr	r7, [sp, #40]	; 0x28
    f3fa:	adds	r7, #7
    f3fc:	bic.w	r7, r7, #7
    f400:	ldrd	r2, r3, [r7]
    f404:	add.w	r1, r7, #8
    f408:	str	r1, [sp, #40]	; 0x28
    f40a:	mov	r4, r2
    f40c:	mov	r5, r3
    f40e:	cmp	r2, #0
    f410:	sbcs.w	r3, r3, #0
    f414:	blt.w	fedc <_svfprintf_r+0xe04>
    f418:	cmp.w	fp, #0
    f41c:	ldrb.w	r7, [sp, #111]	; 0x6f
    f420:	blt.w	fea2 <_svfprintf_r+0xdca>
    f424:	ldr	r3, [sp, #12]
    f426:	bic.w	r3, r3, #128	; 0x80
    f42a:	str	r3, [sp, #12]
    f42c:	orrs.w	r3, r4, r5
    f430:	beq.w	f804 <_svfprintf_r+0x72c>
    f434:	cmp	r5, #0
    f436:	it	eq
    f438:	cmpeq	r4, #10
    f43a:	bcc.w	f80e <_svfprintf_r+0x736>
    f43e:	add	r6, sp, #192	; 0xc0
    f440:	mov	r0, r4
    f442:	mov	r1, r5
    f444:	movs	r2, #10
    f446:	movs	r3, #0
    f448:	bl	c46c <__aeabi_uldivmod>
    f44c:	adds	r2, #48	; 0x30
    f44e:	strb.w	r2, [r6, #-1]!
    f452:	mov	r0, r4
    f454:	mov	r1, r5
    f456:	movs	r3, #0
    f458:	movs	r2, #10
    f45a:	bl	c46c <__aeabi_uldivmod>
    f45e:	mov	r4, r0
    f460:	mov	r5, r1
    f462:	orrs.w	r3, r4, r5
    f466:	bne.n	f440 <_svfprintf_r+0x368>
    f468:	add	r3, sp, #192	; 0xc0
    f46a:	subs	r3, r3, r6
    f46c:	str	r3, [sp, #36]	; 0x24
    f46e:	ldr	r3, [sp, #36]	; 0x24
    f470:	cmp	r3, fp
    f472:	it	lt
    f474:	movlt	r3, fp
    f476:	str	r3, [sp, #16]
    f478:	movs	r3, #0
    f47a:	str	r3, [sp, #60]	; 0x3c
    f47c:	cbz	r7, f484 <_svfprintf_r+0x3ac>
    f47e:	ldr	r3, [sp, #16]
    f480:	adds	r3, #1
    f482:	str	r3, [sp, #16]
    f484:	ldr	r3, [sp, #12]
    f486:	ands.w	r3, r3, #2
    f48a:	str	r3, [sp, #44]	; 0x2c
    f48c:	beq.n	f494 <_svfprintf_r+0x3bc>
    f48e:	ldr	r3, [sp, #16]
    f490:	adds	r3, #2
    f492:	str	r3, [sp, #16]
    f494:	ldr	r3, [sp, #12]
    f496:	ands.w	r3, r3, #132	; 0x84
    f49a:	str	r3, [sp, #48]	; 0x30
    f49c:	bne.w	fa56 <_svfprintf_r+0x97e>
    f4a0:	ldr	r3, [sp, #32]
    f4a2:	ldr	r2, [sp, #16]
    f4a4:	subs	r5, r3, r2
    f4a6:	cmp	r5, #0
    f4a8:	ble.w	fa56 <_svfprintf_r+0x97e>
    f4ac:	cmp	r5, #16
    f4ae:	ldr	r1, [sp, #148]	; 0x94
    f4b0:	ldr	r2, [sp, #144]	; 0x90
    f4b2:	ldr	r7, [pc, #672]	; (f754 <_svfprintf_r+0x67c>)
    f4b4:	ble.n	f506 <_svfprintf_r+0x42e>
    f4b6:	str	r6, [sp, #80]	; 0x50
    f4b8:	mov	r0, r9
    f4ba:	movs	r4, #16
    f4bc:	mov	r9, r7
    f4be:	ldr	r6, [sp, #20]
    f4c0:	mov	r7, r5
    f4c2:	ldr	r5, [sp, #24]
    f4c4:	b.n	f4d0 <_svfprintf_r+0x3f8>
    f4c6:	subs	r7, #16
    f4c8:	cmp	r7, #16
    f4ca:	add.w	r0, r0, #8
    f4ce:	ble.n	f4fe <_svfprintf_r+0x426>
    f4d0:	adds	r2, #1
    f4d2:	ldr	r3, [pc, #640]	; (f754 <_svfprintf_r+0x67c>)
    f4d4:	str	r2, [sp, #144]	; 0x90
    f4d6:	adds	r1, #16
    f4d8:	cmp	r2, #7
    f4da:	str	r1, [sp, #148]	; 0x94
    f4dc:	stmia.w	r0, {r3, r4}
    f4e0:	ble.n	f4c6 <_svfprintf_r+0x3ee>
    f4e2:	add	r2, sp, #140	; 0x8c
    f4e4:	mov	r1, r6
    f4e6:	mov	r0, r5
    f4e8:	bl	107bc <__ssprint_r>
    f4ec:	cmp	r0, #0
    f4ee:	bne.w	f2cc <_svfprintf_r+0x1f4>
    f4f2:	subs	r7, #16
    f4f4:	cmp	r7, #16
    f4f6:	ldr	r1, [sp, #148]	; 0x94
    f4f8:	ldr	r2, [sp, #144]	; 0x90
    f4fa:	add	r0, sp, #192	; 0xc0
    f4fc:	bgt.n	f4d0 <_svfprintf_r+0x3f8>
    f4fe:	ldr	r6, [sp, #80]	; 0x50
    f500:	mov	r5, r7
    f502:	mov	r7, r9
    f504:	mov	r9, r0
    f506:	adds	r2, #1
    f508:	adds	r4, r5, r1
    f50a:	cmp	r2, #7
    f50c:	str	r4, [sp, #148]	; 0x94
    f50e:	str	r2, [sp, #144]	; 0x90
    f510:	str.w	r7, [r9]
    f514:	str.w	r5, [r9, #4]
    f518:	bgt.w	fd76 <_svfprintf_r+0xc9e>
    f51c:	ldrb.w	r7, [sp, #111]	; 0x6f
    f520:	add.w	r9, r9, #8
    f524:	cbz	r7, f544 <_svfprintf_r+0x46c>
    f526:	ldr	r3, [sp, #144]	; 0x90
    f528:	adds	r3, #1
    f52a:	adds	r4, #1
    f52c:	add.w	r1, sp, #111	; 0x6f
    f530:	movs	r2, #1
    f532:	cmp	r3, #7
    f534:	str	r4, [sp, #148]	; 0x94
    f536:	str	r3, [sp, #144]	; 0x90
    f538:	stmia.w	r9, {r1, r2}
    f53c:	bgt.w	fc8a <_svfprintf_r+0xbb2>
    f540:	add.w	r9, r9, #8
    f544:	ldr	r3, [sp, #44]	; 0x2c
    f546:	cbz	r3, f564 <_svfprintf_r+0x48c>
    f548:	ldr	r3, [sp, #144]	; 0x90
    f54a:	adds	r3, #1
    f54c:	adds	r4, #2
    f54e:	add	r1, sp, #112	; 0x70
    f550:	movs	r2, #2
    f552:	cmp	r3, #7
    f554:	str	r4, [sp, #148]	; 0x94
    f556:	str	r3, [sp, #144]	; 0x90
    f558:	stmia.w	r9, {r1, r2}
    f55c:	bgt.w	fca2 <_svfprintf_r+0xbca>
    f560:	add.w	r9, r9, #8
    f564:	ldr	r3, [sp, #48]	; 0x30
    f566:	cmp	r3, #128	; 0x80
    f568:	beq.w	fb2e <_svfprintf_r+0xa56>
    f56c:	ldr	r3, [sp, #36]	; 0x24
    f56e:	rsb	r7, r3, fp
    f572:	cmp	r7, #0
    f574:	ble.n	f5de <_svfprintf_r+0x506>
    f576:	ldr	r2, [pc, #480]	; (f758 <_svfprintf_r+0x680>)
    f578:	ldr	r3, [sp, #144]	; 0x90
    f57a:	str	r2, [sp, #44]	; 0x2c
    f57c:	cmp	r7, #16
    f57e:	ble.n	f5c6 <_svfprintf_r+0x4ee>
    f580:	mov	r2, r4
    f582:	mov.w	fp, #16
    f586:	ldr	r5, [sp, #24]
    f588:	ldr	r4, [sp, #20]
    f58a:	b.n	f596 <_svfprintf_r+0x4be>
    f58c:	subs	r7, #16
    f58e:	cmp	r7, #16
    f590:	add.w	r9, r9, #8
    f594:	ble.n	f5c4 <_svfprintf_r+0x4ec>
    f596:	adds	r3, #1
    f598:	adds	r2, #16
    f59a:	cmp	r3, #7
    f59c:	str	r2, [sp, #148]	; 0x94
    f59e:	str	r3, [sp, #144]	; 0x90
    f5a0:	stmia.w	r9, {sl, fp}
    f5a4:	ble.n	f58c <_svfprintf_r+0x4b4>
    f5a6:	add	r2, sp, #140	; 0x8c
    f5a8:	mov	r1, r4
    f5aa:	mov	r0, r5
    f5ac:	bl	107bc <__ssprint_r>
    f5b0:	cmp	r0, #0
    f5b2:	bne.w	f2cc <_svfprintf_r+0x1f4>
    f5b6:	subs	r7, #16
    f5b8:	cmp	r7, #16
    f5ba:	ldr	r2, [sp, #148]	; 0x94
    f5bc:	ldr	r3, [sp, #144]	; 0x90
    f5be:	add.w	r9, sp, #192	; 0xc0
    f5c2:	bgt.n	f596 <_svfprintf_r+0x4be>
    f5c4:	mov	r4, r2
    f5c6:	adds	r3, #1
    f5c8:	ldr	r2, [sp, #44]	; 0x2c
    f5ca:	str	r3, [sp, #144]	; 0x90
    f5cc:	add	r4, r7
    f5ce:	cmp	r3, #7
    f5d0:	str	r4, [sp, #148]	; 0x94
    f5d2:	stmia.w	r9, {r2, r7}
    f5d6:	bgt.w	fc72 <_svfprintf_r+0xb9a>
    f5da:	add.w	r9, r9, #8
    f5de:	ldr	r3, [sp, #12]
    f5e0:	lsls	r2, r3, #23
    f5e2:	bmi.w	fa5a <_svfprintf_r+0x982>
    f5e6:	ldr	r3, [sp, #144]	; 0x90
    f5e8:	ldr	r1, [sp, #36]	; 0x24
    f5ea:	str.w	r6, [r9]
    f5ee:	adds	r3, #1
    f5f0:	add	r4, r1
    f5f2:	cmp	r3, #7
    f5f4:	str	r4, [sp, #148]	; 0x94
    f5f6:	str.w	r1, [r9, #4]
    f5fa:	str	r3, [sp, #144]	; 0x90
    f5fc:	bgt.w	fc46 <_svfprintf_r+0xb6e>
    f600:	add.w	r9, r9, #8
    f604:	ldr	r3, [sp, #12]
    f606:	lsls	r1, r3, #29
    f608:	bpl.n	f68a <_svfprintf_r+0x5b2>
    f60a:	ldr	r3, [sp, #32]
    f60c:	ldr	r2, [sp, #16]
    f60e:	subs	r5, r3, r2
    f610:	cmp	r5, #0
    f612:	ble.n	f68a <_svfprintf_r+0x5b2>
    f614:	cmp	r5, #16
    f616:	ldr	r3, [sp, #144]	; 0x90
    f618:	ldr	r7, [pc, #312]	; (f754 <_svfprintf_r+0x67c>)
    f61a:	ble.n	f664 <_svfprintf_r+0x58c>
    f61c:	mov	r2, r4
    f61e:	movs	r6, #16
    f620:	ldr.w	fp, [sp, #24]
    f624:	ldr	r4, [sp, #20]
    f626:	b.n	f632 <_svfprintf_r+0x55a>
    f628:	subs	r5, #16
    f62a:	cmp	r5, #16
    f62c:	add.w	r9, r9, #8
    f630:	ble.n	f662 <_svfprintf_r+0x58a>
    f632:	adds	r3, #1
    f634:	ldr	r1, [pc, #284]	; (f754 <_svfprintf_r+0x67c>)
    f636:	str	r3, [sp, #144]	; 0x90
    f638:	adds	r2, #16
    f63a:	cmp	r3, #7
    f63c:	str	r2, [sp, #148]	; 0x94
    f63e:	stmia.w	r9, {r1, r6}
    f642:	ble.n	f628 <_svfprintf_r+0x550>
    f644:	add	r2, sp, #140	; 0x8c
    f646:	mov	r1, r4
    f648:	mov	r0, fp
    f64a:	bl	107bc <__ssprint_r>
    f64e:	cmp	r0, #0
    f650:	bne.w	f2cc <_svfprintf_r+0x1f4>
    f654:	subs	r5, #16
    f656:	cmp	r5, #16
    f658:	ldr	r2, [sp, #148]	; 0x94
    f65a:	ldr	r3, [sp, #144]	; 0x90
    f65c:	add.w	r9, sp, #192	; 0xc0
    f660:	bgt.n	f632 <_svfprintf_r+0x55a>
    f662:	mov	r4, r2
    f664:	adds	r3, #1
    f666:	add	r4, r5
    f668:	cmp	r3, #7
    f66a:	str	r4, [sp, #148]	; 0x94
    f66c:	str	r3, [sp, #144]	; 0x90
    f66e:	str.w	r7, [r9]
    f672:	str.w	r5, [r9, #4]
    f676:	ble.n	f68a <_svfprintf_r+0x5b2>
    f678:	add	r2, sp, #140	; 0x8c
    f67a:	ldr	r1, [sp, #20]
    f67c:	ldr	r0, [sp, #24]
    f67e:	bl	107bc <__ssprint_r>
    f682:	cmp	r0, #0
    f684:	bne.w	f2cc <_svfprintf_r+0x1f4>
    f688:	ldr	r4, [sp, #148]	; 0x94
    f68a:	ldr	r3, [sp, #28]
    f68c:	ldr	r2, [sp, #32]
    f68e:	ldr	r1, [sp, #16]
    f690:	cmp	r2, r1
    f692:	ite	ge
    f694:	addge	r3, r3, r2
    f696:	addlt	r3, r3, r1
    f698:	str	r3, [sp, #28]
    f69a:	cmp	r4, #0
    f69c:	bne.w	fc5e <_svfprintf_r+0xb86>
    f6a0:	movs	r3, #0
    f6a2:	str	r3, [sp, #144]	; 0x90
    f6a4:	add.w	r9, sp, #192	; 0xc0
    f6a8:	b.n	f126 <_svfprintf_r+0x4e>
    f6aa:	str	r3, [sp, #52]	; 0x34
    f6ac:	mov	fp, r5
    f6ae:	cmp	r2, #0
    f6b0:	bne.w	10778 <_svfprintf_r+0x16a0>
    f6b4:	ldr	r3, [sp, #12]
    f6b6:	ldr	r7, [sp, #40]	; 0x28
    f6b8:	lsls	r2, r3, #28
    f6ba:	add.w	r7, r7, #7
    f6be:	bpl.w	101aa <_svfprintf_r+0x10d2>
    f6c2:	bic.w	r3, r7, #7
    f6c6:	vldr	d7, [r3]
    f6ca:	vstr	d7, [sp, #64]	; 0x40
    f6ce:	add.w	r2, r3, #8
    f6d2:	str	r2, [sp, #40]	; 0x28
    f6d4:	ldrd	r1, r2, [sp, #64]	; 0x40
    f6d8:	bic.w	r3, r2, #2147483648	; 0x80000000
    f6dc:	str	r1, [sp, #88]	; 0x58
    f6de:	str	r3, [sp, #92]	; 0x5c
    f6e0:	ldrd	r4, r5, [sp, #88]	; 0x58
    f6e4:	mov.w	r2, #4294967295
    f6e8:	mov	r0, r4
    f6ea:	mov	r1, r5
    f6ec:	ldr	r3, [pc, #108]	; (f75c <_svfprintf_r+0x684>)
    f6ee:	bl	c3f0 <__aeabi_dcmpun>
    f6f2:	cmp	r0, #0
    f6f4:	bne.w	100ac <_svfprintf_r+0xfd4>
    f6f8:	mov.w	r2, #4294967295
    f6fc:	ldr	r3, [pc, #92]	; (f75c <_svfprintf_r+0x684>)
    f6fe:	mov	r0, r4
    f700:	mov	r1, r5
    f702:	bl	c3b4 <__aeabi_dcmple>
    f706:	cmp	r0, #0
    f708:	bne.w	100ac <_svfprintf_r+0xfd4>
    f70c:	movs	r2, #0
    f70e:	movs	r3, #0
    f710:	ldrd	r0, r1, [sp, #64]	; 0x40
    f714:	bl	c3a0 <__aeabi_dcmplt>
    f718:	cmp	r0, #0
    f71a:	bne.w	105c2 <_svfprintf_r+0x14ea>
    f71e:	ldrb.w	r7, [sp, #111]	; 0x6f
    f722:	ldr	r6, [pc, #60]	; (f760 <_svfprintf_r+0x688>)
    f724:	ldr	r3, [pc, #60]	; (f764 <_svfprintf_r+0x68c>)
    f726:	ldr	r1, [sp, #12]
    f728:	bic.w	r1, r1, #128	; 0x80
    f72c:	str	r1, [sp, #12]
    f72e:	ldr	r1, [sp, #52]	; 0x34
    f730:	movs	r2, #3
    f732:	mov.w	fp, #0
    f736:	str	r2, [sp, #16]
    f738:	cmp	r1, #71	; 0x47
    f73a:	it	le
    f73c:	movle	r6, r3
    f73e:	str	r2, [sp, #36]	; 0x24
    f740:	str.w	fp, [sp, #60]	; 0x3c
    f744:	b.n	f47c <_svfprintf_r+0x3a4>
    f746:	ldr	r3, [sp, #12]
    f748:	orr.w	r3, r3, #8
    f74c:	str	r3, [sp, #12]
    f74e:	ldrb.w	r3, [r8]
    f752:	b.n	f18c <_svfprintf_r+0xb4>
    f754:	.word	0x20000ba0
    f758:	.word	0x20000b50
    f75c:	.word	0x7fefffff
    f760:	.word	0x20000b64
    f764:	.word	0x20000b60
    f768:	str	r3, [sp, #52]	; 0x34
    f76a:	mov	fp, r5
    f76c:	cmp	r2, #0
    f76e:	bne.w	10790 <_svfprintf_r+0x16b8>
    f772:	ldr	r3, [sp, #12]
    f774:	orr.w	r3, r3, #16
    f778:	str	r3, [sp, #12]
    f77a:	ldr	r2, [sp, #12]
    f77c:	ands.w	r3, r2, #32
    f780:	bne.w	f2f8 <_svfprintf_r+0x220>
    f784:	ldr	r1, [sp, #12]
    f786:	ands.w	r2, r1, #16
    f78a:	beq.w	10044 <_svfprintf_r+0xf6c>
    f78e:	ldr	r0, [sp, #40]	; 0x28
    f790:	strb.w	r3, [sp, #111]	; 0x6f
    f794:	cmp.w	fp, #0
    f798:	ldr	r4, [r0, #0]
    f79a:	add.w	r7, r0, #4
    f79e:	mov.w	r5, #0
    f7a2:	blt.w	101d8 <_svfprintf_r+0x1100>
    f7a6:	mov	r2, r1
    f7a8:	bic.w	r2, r2, #128	; 0x80
    f7ac:	str	r2, [sp, #12]
    f7ae:	orrs.w	r2, r4, r5
    f7b2:	str	r7, [sp, #40]	; 0x28
    f7b4:	beq.w	fa2c <_svfprintf_r+0x954>
    f7b8:	mov	r7, r3
    f7ba:	b.n	f324 <_svfprintf_r+0x24c>
    f7bc:	str	r3, [sp, #52]	; 0x34
    f7be:	mov	fp, r5
    f7c0:	cmp	r2, #0
    f7c2:	bne.w	10788 <_svfprintf_r+0x16b0>
    f7c6:	ldr	r3, [sp, #12]
    f7c8:	orr.w	r3, r3, #16
    f7cc:	str	r3, [sp, #12]
    f7ce:	ldr	r2, [sp, #12]
    f7d0:	ands.w	r3, r2, #32
    f7d4:	beq.w	fe30 <_svfprintf_r+0xd58>
    f7d8:	ldr	r7, [sp, #40]	; 0x28
    f7da:	adds	r7, #7
    f7dc:	bic.w	r3, r7, #7
    f7e0:	movs	r7, #0
    f7e2:	add.w	r1, r3, #8
    f7e6:	cmp	fp, r7
    f7e8:	str	r1, [sp, #40]	; 0x28
    f7ea:	ldrd	r4, r5, [r3]
    f7ee:	strb.w	r7, [sp, #111]	; 0x6f
    f7f2:	blt.w	fea2 <_svfprintf_r+0xdca>
    f7f6:	bic.w	r3, r2, #128	; 0x80
    f7fa:	str	r3, [sp, #12]
    f7fc:	orrs.w	r3, r4, r5
    f800:	bne.w	f434 <_svfprintf_r+0x35c>
    f804:	cmp.w	fp, #0
    f808:	beq.w	f9f6 <_svfprintf_r+0x91e>
    f80c:	movs	r4, #0
    f80e:	add	r6, sp, #256	; 0x100
    f810:	adds	r4, #48	; 0x30
    f812:	strb.w	r4, [r6, #-65]!
    f816:	b.n	f468 <_svfprintf_r+0x390>
    f818:	str	r3, [sp, #52]	; 0x34
    f81a:	mov	fp, r5
    f81c:	cmp	r2, #0
    f81e:	bne.w	10780 <_svfprintf_r+0x16a8>
    f822:	ldr	r3, [sp, #12]
    f824:	ldr	r0, [pc, #700]	; (fae4 <_svfprintf_r+0xa0c>)
    f826:	lsls	r5, r3, #26
    f828:	bpl.w	f996 <_svfprintf_r+0x8be>
    f82c:	ldr	r7, [sp, #40]	; 0x28
    f82e:	adds	r7, #7
    f830:	bic.w	r3, r7, #7
    f834:	ldrd	r4, r5, [r3]
    f838:	add.w	r2, r3, #8
    f83c:	str	r2, [sp, #40]	; 0x28
    f83e:	ldr	r2, [sp, #12]
    f840:	ands.w	r7, r2, #1
    f844:	beq.w	fcba <_svfprintf_r+0xbe2>
    f848:	orrs.w	r3, r4, r5
    f84c:	beq.w	10254 <_svfprintf_r+0x117c>
    f850:	ldrb.w	r2, [sp, #52]	; 0x34
    f854:	strb.w	r2, [sp, #113]	; 0x71
    f858:	movs	r7, #0
    f85a:	ldr	r2, [sp, #12]
    f85c:	strb.w	r7, [sp, #111]	; 0x6f
    f860:	movs	r3, #48	; 0x30
    f862:	cmp	fp, r7
    f864:	strb.w	r3, [sp, #112]	; 0x70
    f868:	orr.w	r3, r2, #2
    f86c:	blt.w	105cc <_svfprintf_r+0x14f4>
    f870:	bic.w	r3, r2, #128	; 0x80
    f874:	orr.w	r3, r3, #2
    f878:	str	r3, [sp, #12]
    f87a:	add	r6, sp, #192	; 0xc0
    f87c:	lsrs	r3, r4, #4
    f87e:	and.w	r1, r4, #15
    f882:	orr.w	r3, r3, r5, lsl #28
    f886:	lsrs	r2, r5, #4
    f888:	mov	r4, r3
    f88a:	mov	r5, r2
    f88c:	ldrb	r3, [r0, r1]
    f88e:	strb.w	r3, [r6, #-1]!
    f892:	orrs.w	r3, r4, r5
    f896:	bne.n	f87c <_svfprintf_r+0x7a4>
    f898:	b.n	f468 <_svfprintf_r+0x390>
    f89a:	ldr	r1, [sp, #40]	; 0x28
    f89c:	str	r3, [sp, #52]	; 0x34
    f89e:	ldr	r2, [r1, #0]
    f8a0:	strb.w	r2, [sp, #152]	; 0x98
    f8a4:	movs	r3, #0
    f8a6:	mov	r2, r1
    f8a8:	mov	r7, r3
    f8aa:	strb.w	r3, [sp, #111]	; 0x6f
    f8ae:	adds	r2, #4
    f8b0:	movs	r3, #1
    f8b2:	str	r3, [sp, #16]
    f8b4:	mov	fp, r7
    f8b6:	str	r7, [sp, #60]	; 0x3c
    f8b8:	str	r2, [sp, #40]	; 0x28
    f8ba:	str	r3, [sp, #36]	; 0x24
    f8bc:	add	r6, sp, #152	; 0x98
    f8be:	b.n	f484 <_svfprintf_r+0x3ac>
    f8c0:	str	r3, [sp, #52]	; 0x34
    f8c2:	mov	fp, r5
    f8c4:	cmp	r2, #0
    f8c6:	beq.w	f3f0 <_svfprintf_r+0x318>
    f8ca:	strb.w	r1, [sp, #111]	; 0x6f
    f8ce:	b.n	f3f0 <_svfprintf_r+0x318>
    f8d0:	ldr	r3, [sp, #12]
    f8d2:	orr.w	r3, r3, #64	; 0x40
    f8d6:	str	r3, [sp, #12]
    f8d8:	ldrb.w	r3, [r8]
    f8dc:	b.n	f18c <_svfprintf_r+0xb4>
    f8de:	ldrb.w	r3, [r8]
    f8e2:	cmp	r1, #0
    f8e4:	bne.w	f18c <_svfprintf_r+0xb4>
    f8e8:	movs	r2, #1
    f8ea:	movs	r1, #32
    f8ec:	b.n	f18c <_svfprintf_r+0xb4>
    f8ee:	ldr	r3, [sp, #12]
    f8f0:	orr.w	r3, r3, #1
    f8f4:	str	r3, [sp, #12]
    f8f6:	ldrb.w	r3, [r8]
    f8fa:	b.n	f18c <_svfprintf_r+0xb4>
    f8fc:	ldr	r4, [sp, #40]	; 0x28
    f8fe:	ldr	r3, [r4, #0]
    f900:	str	r3, [sp, #32]
    f902:	mov	r0, r3
    f904:	cmp	r0, #0
    f906:	mov	r3, r4
    f908:	add.w	r3, r3, #4
    f90c:	blt.w	f250 <_svfprintf_r+0x178>
    f910:	str	r3, [sp, #40]	; 0x28
    f912:	ldrb.w	r3, [r8]
    f916:	b.n	f18c <_svfprintf_r+0xb4>
    f918:	ldrb.w	r3, [r8]
    f91c:	movs	r2, #1
    f91e:	movs	r1, #43	; 0x2b
    f920:	b.n	f18c <_svfprintf_r+0xb4>
    f922:	ldr	r3, [sp, #12]
    f924:	orr.w	r3, r3, #32
    f928:	str	r3, [sp, #12]
    f92a:	ldrb.w	r3, [r8]
    f92e:	b.n	f18c <_svfprintf_r+0xb4>
    f930:	ldr	r2, [sp, #40]	; 0x28
    f932:	str	r3, [sp, #52]	; 0x34
    f934:	ldr	r6, [r2, #0]
    f936:	movs	r4, #0
    f938:	strb.w	r4, [sp, #111]	; 0x6f
    f93c:	adds	r7, r2, #4
    f93e:	cmp	r6, #0
    f940:	beq.w	1057c <_svfprintf_r+0x14a4>
    f944:	cmp	r5, #0
    f946:	blt.w	1040c <_svfprintf_r+0x1334>
    f94a:	mov	r2, r5
    f94c:	mov	r1, r4
    f94e:	mov	r0, r6
    f950:	bl	cdb0 <memchr>
    f954:	cmp	r0, #0
    f956:	beq.w	10620 <_svfprintf_r+0x1548>
    f95a:	subs	r3, r0, r6
    f95c:	str	r3, [sp, #36]	; 0x24
    f95e:	mov	fp, r4
    f960:	bic.w	r3, r3, r3, asr #31
    f964:	str	r7, [sp, #40]	; 0x28
    f966:	str	r3, [sp, #16]
    f968:	str.w	fp, [sp, #60]	; 0x3c
    f96c:	ldrb.w	r7, [sp, #111]	; 0x6f
    f970:	b.n	f47c <_svfprintf_r+0x3a4>
    f972:	str	r3, [sp, #52]	; 0x34
    f974:	mov	fp, r5
    f976:	cmp	r2, #0
    f978:	beq.w	f7ce <_svfprintf_r+0x6f6>
    f97c:	strb.w	r1, [sp, #111]	; 0x6f
    f980:	b.n	f7ce <_svfprintf_r+0x6f6>
    f982:	str	r3, [sp, #52]	; 0x34
    f984:	mov	fp, r5
    f986:	cmp	r2, #0
    f988:	bne.w	107a8 <_svfprintf_r+0x16d0>
    f98c:	ldr	r3, [sp, #12]
    f98e:	ldr	r0, [pc, #344]	; (fae8 <_svfprintf_r+0xa10>)
    f990:	lsls	r5, r3, #26
    f992:	bmi.w	f82c <_svfprintf_r+0x754>
    f996:	ldr	r3, [sp, #12]
    f998:	lsls	r4, r3, #27
    f99a:	bpl.w	1021a <_svfprintf_r+0x1142>
    f99e:	ldr	r2, [sp, #40]	; 0x28
    f9a0:	mov	r3, r2
    f9a2:	adds	r3, #4
    f9a4:	ldr	r4, [r2, #0]
    f9a6:	str	r3, [sp, #40]	; 0x28
    f9a8:	movs	r5, #0
    f9aa:	b.n	f83e <_svfprintf_r+0x766>
    f9ac:	ldrb.w	r3, [r8]
    f9b0:	cmp	r3, #108	; 0x6c
    f9b2:	beq.w	1033a <_svfprintf_r+0x1262>
    f9b6:	ldr	r0, [sp, #12]
    f9b8:	orr.w	r0, r0, #16
    f9bc:	str	r0, [sp, #12]
    f9be:	b.w	f18c <_svfprintf_r+0xb4>
    f9c2:	cmp	r2, #0
    f9c4:	bne.w	107a0 <_svfprintf_r+0x16c8>
    f9c8:	ldr	r3, [sp, #12]
    f9ca:	lsls	r3, r3, #26
    f9cc:	bpl.w	1007e <_svfprintf_r+0xfa6>
    f9d0:	ldr	r2, [sp, #40]	; 0x28
    f9d2:	ldr	r1, [sp, #28]
    f9d4:	ldr	r3, [r2, #0]
    f9d6:	asrs	r5, r1, #31
    f9d8:	mov	r0, r1
    f9da:	adds	r2, #4
    f9dc:	mov	r1, r5
    f9de:	str	r2, [sp, #40]	; 0x28
    f9e0:	strd	r0, r1, [r3]
    f9e4:	b.w	f126 <_svfprintf_r+0x4e>
    f9e8:	ldr	r0, [pc, #252]	; (fae8 <_svfprintf_r+0xa10>)
    f9ea:	str	r2, [sp, #52]	; 0x34
    f9ec:	cmp.w	fp, #0
    f9f0:	bne.w	fcdc <_svfprintf_r+0xc04>
    f9f4:	mov	r7, fp
    f9f6:	mov.w	fp, #0
    f9fa:	str.w	fp, [sp, #36]	; 0x24
    f9fe:	add	r6, sp, #192	; 0xc0
    fa00:	b.n	f46e <_svfprintf_r+0x396>
    fa02:	str	r3, [sp, #52]	; 0x34
    fa04:	cmp	r2, #0
    fa06:	bne.w	10798 <_svfprintf_r+0x16c0>
    fa0a:	ldr	r2, [sp, #52]	; 0x34
    fa0c:	cmp	r2, #0
    fa0e:	beq.w	f2be <_svfprintf_r+0x1e6>
    fa12:	movs	r3, #0
    fa14:	movs	r1, #1
    fa16:	mov	r7, r3
    fa18:	str	r1, [sp, #16]
    fa1a:	strb.w	r2, [sp, #152]	; 0x98
    fa1e:	strb.w	r3, [sp, #111]	; 0x6f
    fa22:	mov	fp, r3
    fa24:	str	r3, [sp, #60]	; 0x3c
    fa26:	str	r1, [sp, #36]	; 0x24
    fa28:	add	r6, sp, #152	; 0x98
    fa2a:	b.n	f484 <_svfprintf_r+0x3ac>
    fa2c:	cmp.w	fp, #0
    fa30:	beq.w	10650 <_svfprintf_r+0x1578>
    fa34:	movs	r7, #0
    fa36:	movs	r4, #0
    fa38:	movs	r5, #0
    fa3a:	b.n	f324 <_svfprintf_r+0x24c>
    fa3c:	ldr	r0, [pc, #168]	; (fae8 <_svfprintf_r+0xa10>)
    fa3e:	str	r3, [sp, #12]
    fa40:	str	r2, [sp, #52]	; 0x34
    fa42:	orrs.w	r3, r4, r5
    fa46:	str	r7, [sp, #40]	; 0x28
    fa48:	mov.w	r7, #0
    fa4c:	bne.w	f87a <_svfprintf_r+0x7a2>
    fa50:	movs	r4, #0
    fa52:	movs	r5, #0
    fa54:	b.n	f87a <_svfprintf_r+0x7a2>
    fa56:	ldr	r4, [sp, #148]	; 0x94
    fa58:	b.n	f524 <_svfprintf_r+0x44c>
    fa5a:	ldr	r3, [sp, #52]	; 0x34
    fa5c:	cmp	r3, #101	; 0x65
    fa5e:	ble.w	fbb6 <_svfprintf_r+0xade>
    fa62:	movs	r2, #0
    fa64:	movs	r3, #0
    fa66:	ldrd	r0, r1, [sp, #64]	; 0x40
    fa6a:	bl	c38c <__aeabi_dcmpeq>
    fa6e:	cmp	r0, #0
    fa70:	beq.w	fce0 <_svfprintf_r+0xc08>
    fa74:	ldr	r3, [sp, #144]	; 0x90
    fa76:	ldr	r2, [pc, #116]	; (faec <_svfprintf_r+0xa14>)
    fa78:	str.w	r2, [r9]
    fa7c:	adds	r3, #1
    fa7e:	adds	r4, #1
    fa80:	movs	r2, #1
    fa82:	cmp	r3, #7
    fa84:	str	r4, [sp, #148]	; 0x94
    fa86:	str	r3, [sp, #144]	; 0x90
    fa88:	str.w	r2, [r9, #4]
    fa8c:	bgt.w	1026c <_svfprintf_r+0x1194>
    fa90:	add.w	r9, r9, #8
    fa94:	ldr	r3, [sp, #116]	; 0x74
    fa96:	ldr	r2, [sp, #56]	; 0x38
    fa98:	cmp	r3, r2
    fa9a:	blt.n	faa4 <_svfprintf_r+0x9cc>
    fa9c:	ldr	r3, [sp, #12]
    fa9e:	lsls	r3, r3, #31
    faa0:	bpl.w	f604 <_svfprintf_r+0x52c>
    faa4:	ldr	r3, [sp, #144]	; 0x90
    faa6:	ldr	r1, [sp, #72]	; 0x48
    faa8:	ldr	r2, [sp, #76]	; 0x4c
    faaa:	str.w	r2, [r9]
    faae:	adds	r3, #1
    fab0:	add	r4, r1
    fab2:	cmp	r3, #7
    fab4:	str	r4, [sp, #148]	; 0x94
    fab6:	str.w	r1, [r9, #4]
    faba:	str	r3, [sp, #144]	; 0x90
    fabc:	bgt.w	1034e <_svfprintf_r+0x1276>
    fac0:	add.w	r9, r9, #8
    fac4:	ldr	r3, [sp, #56]	; 0x38
    fac6:	subs	r5, r3, #1
    fac8:	cmp	r5, #0
    faca:	ble.w	f604 <_svfprintf_r+0x52c>
    face:	ldr	r2, [pc, #32]	; (faf0 <_svfprintf_r+0xa18>)
    fad0:	ldr	r3, [sp, #144]	; 0x90
    fad2:	str	r2, [sp, #44]	; 0x2c
    fad4:	cmp	r5, #16
    fad6:	ble.w	feac <_svfprintf_r+0xdd4>
    fada:	movs	r6, #16
    fadc:	ldr	r7, [sp, #24]
    fade:	ldr.w	fp, [sp, #20]
    fae2:	b.n	fb00 <_svfprintf_r+0xa28>
    fae4:	.word	0x20000b70
    fae8:	.word	0x20000b84
    faec:	.word	0x20000b4c
    faf0:	.word	0x20000b50
    faf4:	add.w	r9, r9, #8
    faf8:	subs	r5, #16
    fafa:	cmp	r5, #16
    fafc:	ble.w	feac <_svfprintf_r+0xdd4>
    fb00:	adds	r3, #1
    fb02:	adds	r4, #16
    fb04:	cmp	r3, #7
    fb06:	str	r4, [sp, #148]	; 0x94
    fb08:	str	r3, [sp, #144]	; 0x90
    fb0a:	str.w	sl, [r9]
    fb0e:	str.w	r6, [r9, #4]
    fb12:	ble.n	faf4 <_svfprintf_r+0xa1c>
    fb14:	add	r2, sp, #140	; 0x8c
    fb16:	mov	r1, fp
    fb18:	mov	r0, r7
    fb1a:	bl	107bc <__ssprint_r>
    fb1e:	cmp	r0, #0
    fb20:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fb24:	ldr	r4, [sp, #148]	; 0x94
    fb26:	ldr	r3, [sp, #144]	; 0x90
    fb28:	add.w	r9, sp, #192	; 0xc0
    fb2c:	b.n	faf8 <_svfprintf_r+0xa20>
    fb2e:	ldr	r3, [sp, #32]
    fb30:	ldr	r2, [sp, #16]
    fb32:	subs	r7, r3, r2
    fb34:	cmp	r7, #0
    fb36:	ble.w	f56c <_svfprintf_r+0x494>
    fb3a:	ldr	r2, [pc, #752]	; (fe2c <_svfprintf_r+0xd54>)
    fb3c:	ldr	r3, [sp, #144]	; 0x90
    fb3e:	str	r2, [sp, #44]	; 0x2c
    fb40:	cmp	r7, #16
    fb42:	ble.n	fb9c <_svfprintf_r+0xac4>
    fb44:	mov	r2, r9
    fb46:	mov	r1, r4
    fb48:	mov	r9, r7
    fb4a:	movs	r5, #16
    fb4c:	mov	r7, r6
    fb4e:	ldr	r4, [sp, #24]
    fb50:	ldr	r6, [sp, #20]
    fb52:	b.n	fb62 <_svfprintf_r+0xa8a>
    fb54:	sub.w	r9, r9, #16
    fb58:	cmp.w	r9, #16
    fb5c:	add.w	r2, r2, #8
    fb60:	ble.n	fb94 <_svfprintf_r+0xabc>
    fb62:	adds	r3, #1
    fb64:	adds	r1, #16
    fb66:	cmp	r3, #7
    fb68:	str	r1, [sp, #148]	; 0x94
    fb6a:	str	r3, [sp, #144]	; 0x90
    fb6c:	str.w	sl, [r2]
    fb70:	str	r5, [r2, #4]
    fb72:	ble.n	fb54 <_svfprintf_r+0xa7c>
    fb74:	add	r2, sp, #140	; 0x8c
    fb76:	mov	r1, r6
    fb78:	mov	r0, r4
    fb7a:	bl	107bc <__ssprint_r>
    fb7e:	cmp	r0, #0
    fb80:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fb84:	sub.w	r9, r9, #16
    fb88:	cmp.w	r9, #16
    fb8c:	ldr	r1, [sp, #148]	; 0x94
    fb8e:	ldr	r3, [sp, #144]	; 0x90
    fb90:	add	r2, sp, #192	; 0xc0
    fb92:	bgt.n	fb62 <_svfprintf_r+0xa8a>
    fb94:	mov	r6, r7
    fb96:	mov	r4, r1
    fb98:	mov	r7, r9
    fb9a:	mov	r9, r2
    fb9c:	adds	r3, #1
    fb9e:	ldr	r2, [sp, #44]	; 0x2c
    fba0:	str	r3, [sp, #144]	; 0x90
    fba2:	add	r4, r7
    fba4:	cmp	r3, #7
    fba6:	str	r4, [sp, #148]	; 0x94
    fba8:	stmia.w	r9, {r2, r7}
    fbac:	bgt.w	1002a <_svfprintf_r+0xf52>
    fbb0:	add.w	r9, r9, #8
    fbb4:	b.n	f56c <_svfprintf_r+0x494>
    fbb6:	ldr	r3, [sp, #56]	; 0x38
    fbb8:	ldr	r5, [sp, #144]	; 0x90
    fbba:	cmp	r3, #1
    fbbc:	ble.w	ffd4 <_svfprintf_r+0xefc>
    fbc0:	adds	r5, #1
    fbc2:	adds	r4, #1
    fbc4:	movs	r3, #1
    fbc6:	cmp	r5, #7
    fbc8:	str	r4, [sp, #148]	; 0x94
    fbca:	str	r5, [sp, #144]	; 0x90
    fbcc:	str.w	r6, [r9]
    fbd0:	str.w	r3, [r9, #4]
    fbd4:	bgt.w	fff6 <_svfprintf_r+0xf1e>
    fbd8:	add.w	r9, r9, #8
    fbdc:	ldr	r2, [sp, #72]	; 0x48
    fbde:	ldr	r3, [sp, #76]	; 0x4c
    fbe0:	str.w	r3, [r9]
    fbe4:	adds	r5, #1
    fbe6:	add	r4, r2
    fbe8:	cmp	r5, #7
    fbea:	str	r4, [sp, #148]	; 0x94
    fbec:	str	r5, [sp, #144]	; 0x90
    fbee:	str.w	r2, [r9, #4]
    fbf2:	bgt.w	10010 <_svfprintf_r+0xf38>
    fbf6:	add.w	r9, r9, #8
    fbfa:	movs	r3, #0
    fbfc:	movs	r2, #0
    fbfe:	ldrd	r0, r1, [sp, #64]	; 0x40
    fc02:	bl	c38c <__aeabi_dcmpeq>
    fc06:	ldr	r3, [sp, #56]	; 0x38
    fc08:	cmp	r0, #0
    fc0a:	bne.w	fd94 <_svfprintf_r+0xcbc>
    fc0e:	subs	r3, #1
    fc10:	adds	r5, #1
    fc12:	adds	r6, #1
    fc14:	add	r4, r3
    fc16:	cmp	r5, #7
    fc18:	str	r5, [sp, #144]	; 0x90
    fc1a:	str	r4, [sp, #148]	; 0x94
    fc1c:	str.w	r6, [r9]
    fc20:	str.w	r3, [r9, #4]
    fc24:	bgt.w	fe12 <_svfprintf_r+0xd3a>
    fc28:	add.w	r9, r9, #8
    fc2c:	ldr	r2, [sp, #84]	; 0x54
    fc2e:	str.w	r2, [r9, #4]
    fc32:	adds	r5, #1
    fc34:	add	r4, r2
    fc36:	add	r3, sp, #124	; 0x7c
    fc38:	cmp	r5, #7
    fc3a:	str	r4, [sp, #148]	; 0x94
    fc3c:	str	r5, [sp, #144]	; 0x90
    fc3e:	str.w	r3, [r9]
    fc42:	ble.w	f600 <_svfprintf_r+0x528>
    fc46:	add	r2, sp, #140	; 0x8c
    fc48:	ldr	r1, [sp, #20]
    fc4a:	ldr	r0, [sp, #24]
    fc4c:	bl	107bc <__ssprint_r>
    fc50:	cmp	r0, #0
    fc52:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fc56:	ldr	r4, [sp, #148]	; 0x94
    fc58:	add.w	r9, sp, #192	; 0xc0
    fc5c:	b.n	f604 <_svfprintf_r+0x52c>
    fc5e:	add	r2, sp, #140	; 0x8c
    fc60:	ldr	r1, [sp, #20]
    fc62:	ldr	r0, [sp, #24]
    fc64:	bl	107bc <__ssprint_r>
    fc68:	cmp	r0, #0
    fc6a:	beq.w	f6a0 <_svfprintf_r+0x5c8>
    fc6e:	b.w	f2cc <_svfprintf_r+0x1f4>
    fc72:	add	r2, sp, #140	; 0x8c
    fc74:	ldr	r1, [sp, #20]
    fc76:	ldr	r0, [sp, #24]
    fc78:	bl	107bc <__ssprint_r>
    fc7c:	cmp	r0, #0
    fc7e:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fc82:	ldr	r4, [sp, #148]	; 0x94
    fc84:	add.w	r9, sp, #192	; 0xc0
    fc88:	b.n	f5de <_svfprintf_r+0x506>
    fc8a:	add	r2, sp, #140	; 0x8c
    fc8c:	ldr	r1, [sp, #20]
    fc8e:	ldr	r0, [sp, #24]
    fc90:	bl	107bc <__ssprint_r>
    fc94:	cmp	r0, #0
    fc96:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fc9a:	ldr	r4, [sp, #148]	; 0x94
    fc9c:	add.w	r9, sp, #192	; 0xc0
    fca0:	b.n	f544 <_svfprintf_r+0x46c>
    fca2:	add	r2, sp, #140	; 0x8c
    fca4:	ldr	r1, [sp, #20]
    fca6:	ldr	r0, [sp, #24]
    fca8:	bl	107bc <__ssprint_r>
    fcac:	cmp	r0, #0
    fcae:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fcb2:	ldr	r4, [sp, #148]	; 0x94
    fcb4:	add.w	r9, sp, #192	; 0xc0
    fcb8:	b.n	f564 <_svfprintf_r+0x48c>
    fcba:	cmp.w	fp, #0
    fcbe:	strb.w	r7, [sp, #111]	; 0x6f
    fcc2:	blt.w	10284 <_svfprintf_r+0x11ac>
    fcc6:	bic.w	r3, r2, #128	; 0x80
    fcca:	str	r3, [sp, #12]
    fccc:	orrs.w	r3, r4, r5
    fcd0:	bne.w	f87a <_svfprintf_r+0x7a2>
    fcd4:	cmp.w	fp, #0
    fcd8:	beq.w	f9f4 <_svfprintf_r+0x91c>
    fcdc:	movs	r7, #0
    fcde:	b.n	fa50 <_svfprintf_r+0x978>
    fce0:	ldr	r5, [sp, #116]	; 0x74
    fce2:	cmp	r5, #0
    fce4:	ble.w	1028a <_svfprintf_r+0x11b2>
    fce8:	ldr	r3, [sp, #60]	; 0x3c
    fcea:	ldr	r2, [sp, #56]	; 0x38
    fcec:	cmp	r3, r2
    fcee:	it	ge
    fcf0:	movge	r3, r2
    fcf2:	cmp	r3, #0
    fcf4:	mov	r5, r3
    fcf6:	ble.n	fd14 <_svfprintf_r+0xc3c>
    fcf8:	ldr	r3, [sp, #144]	; 0x90
    fcfa:	str.w	r6, [r9]
    fcfe:	adds	r3, #1
    fd00:	add	r4, r5
    fd02:	cmp	r3, #7
    fd04:	str	r4, [sp, #148]	; 0x94
    fd06:	str.w	r5, [r9, #4]
    fd0a:	str	r3, [sp, #144]	; 0x90
    fd0c:	bgt.w	10462 <_svfprintf_r+0x138a>
    fd10:	add.w	r9, r9, #8
    fd14:	ldr	r3, [sp, #60]	; 0x3c
    fd16:	cmp	r5, #0
    fd18:	it	ge
    fd1a:	subge	r3, r3, r5
    fd1c:	cmp	r3, #0
    fd1e:	mov	r5, r3
    fd20:	ble.w	ff14 <_svfprintf_r+0xe3c>
    fd24:	ldr	r2, [pc, #260]	; (fe2c <_svfprintf_r+0xd54>)
    fd26:	ldr	r3, [sp, #144]	; 0x90
    fd28:	str	r2, [sp, #44]	; 0x2c
    fd2a:	cmp	r5, #16
    fd2c:	ble.w	10236 <_svfprintf_r+0x115e>
    fd30:	mov	r2, r4
    fd32:	movs	r7, #16
    fd34:	ldr.w	fp, [sp, #24]
    fd38:	ldr	r4, [sp, #20]
    fd3a:	b.n	fd48 <_svfprintf_r+0xc70>
    fd3c:	add.w	r9, r9, #8
    fd40:	subs	r5, #16
    fd42:	cmp	r5, #16
    fd44:	ble.w	10234 <_svfprintf_r+0x115c>
    fd48:	adds	r3, #1
    fd4a:	adds	r2, #16
    fd4c:	cmp	r3, #7
    fd4e:	str	r2, [sp, #148]	; 0x94
    fd50:	str	r3, [sp, #144]	; 0x90
    fd52:	str.w	sl, [r9]
    fd56:	str.w	r7, [r9, #4]
    fd5a:	ble.n	fd3c <_svfprintf_r+0xc64>
    fd5c:	add	r2, sp, #140	; 0x8c
    fd5e:	mov	r1, r4
    fd60:	mov	r0, fp
    fd62:	bl	107bc <__ssprint_r>
    fd66:	cmp	r0, #0
    fd68:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fd6c:	ldr	r2, [sp, #148]	; 0x94
    fd6e:	ldr	r3, [sp, #144]	; 0x90
    fd70:	add.w	r9, sp, #192	; 0xc0
    fd74:	b.n	fd40 <_svfprintf_r+0xc68>
    fd76:	add	r2, sp, #140	; 0x8c
    fd78:	ldr	r1, [sp, #20]
    fd7a:	ldr	r0, [sp, #24]
    fd7c:	bl	107bc <__ssprint_r>
    fd80:	cmp	r0, #0
    fd82:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fd86:	ldrb.w	r7, [sp, #111]	; 0x6f
    fd8a:	ldr	r4, [sp, #148]	; 0x94
    fd8c:	add.w	r9, sp, #192	; 0xc0
    fd90:	b.w	f524 <_svfprintf_r+0x44c>
    fd94:	subs	r6, r3, #1
    fd96:	cmp	r6, #0
    fd98:	ble.w	fc2c <_svfprintf_r+0xb54>
    fd9c:	ldr	r3, [pc, #140]	; (fe2c <_svfprintf_r+0xd54>)
    fd9e:	str	r3, [sp, #44]	; 0x2c
    fda0:	cmp	r6, #16
    fda2:	ble.n	fdfe <_svfprintf_r+0xd26>
    fda4:	str.w	r8, [sp, #36]	; 0x24
    fda8:	movs	r7, #16
    fdaa:	mov	r8, r6
    fdac:	ldr.w	fp, [sp, #24]
    fdb0:	ldr	r6, [sp, #20]
    fdb2:	b.n	fdc2 <_svfprintf_r+0xcea>
    fdb4:	sub.w	r8, r8, #16
    fdb8:	cmp.w	r8, #16
    fdbc:	add.w	r9, r9, #8
    fdc0:	ble.n	fdf8 <_svfprintf_r+0xd20>
    fdc2:	adds	r5, #1
    fdc4:	adds	r4, #16
    fdc6:	cmp	r5, #7
    fdc8:	str	r4, [sp, #148]	; 0x94
    fdca:	str	r5, [sp, #144]	; 0x90
    fdcc:	str.w	sl, [r9]
    fdd0:	str.w	r7, [r9, #4]
    fdd4:	ble.n	fdb4 <_svfprintf_r+0xcdc>
    fdd6:	add	r2, sp, #140	; 0x8c
    fdd8:	mov	r1, r6
    fdda:	mov	r0, fp
    fddc:	bl	107bc <__ssprint_r>
    fde0:	cmp	r0, #0
    fde2:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fde6:	sub.w	r8, r8, #16
    fdea:	cmp.w	r8, #16
    fdee:	ldr	r4, [sp, #148]	; 0x94
    fdf0:	ldr	r5, [sp, #144]	; 0x90
    fdf2:	add.w	r9, sp, #192	; 0xc0
    fdf6:	bgt.n	fdc2 <_svfprintf_r+0xcea>
    fdf8:	mov	r6, r8
    fdfa:	ldr.w	r8, [sp, #36]	; 0x24
    fdfe:	ldr	r3, [sp, #44]	; 0x2c
    fe00:	adds	r5, #1
    fe02:	add	r4, r6
    fe04:	cmp	r5, #7
    fe06:	str	r4, [sp, #148]	; 0x94
    fe08:	str	r5, [sp, #144]	; 0x90
    fe0a:	stmia.w	r9, {r3, r6}
    fe0e:	ble.w	fc28 <_svfprintf_r+0xb50>
    fe12:	add	r2, sp, #140	; 0x8c
    fe14:	ldr	r1, [sp, #20]
    fe16:	ldr	r0, [sp, #24]
    fe18:	bl	107bc <__ssprint_r>
    fe1c:	cmp	r0, #0
    fe1e:	bne.w	f2cc <_svfprintf_r+0x1f4>
    fe22:	ldr	r4, [sp, #148]	; 0x94
    fe24:	ldr	r5, [sp, #144]	; 0x90
    fe26:	add.w	r9, sp, #192	; 0xc0
    fe2a:	b.n	fc2c <_svfprintf_r+0xb54>
    fe2c:	.word	0x20000b50
    fe30:	ldr	r1, [sp, #12]
    fe32:	ands.w	r2, r1, #16
    fe36:	beq.w	101e0 <_svfprintf_r+0x1108>
    fe3a:	ldr	r0, [sp, #40]	; 0x28
    fe3c:	strb.w	r3, [sp, #111]	; 0x6f
    fe40:	cmp.w	fp, #0
    fe44:	ldr	r4, [r0, #0]
    fe46:	add.w	r7, r0, #4
    fe4a:	mov.w	r5, #0
    fe4e:	blt.n	fe9e <_svfprintf_r+0xdc6>
    fe50:	mov	r2, r1
    fe52:	bic.w	r2, r2, #128	; 0x80
    fe56:	str	r2, [sp, #12]
    fe58:	orrs.w	r2, r4, r5
    fe5c:	str	r7, [sp, #40]	; 0x28
    fe5e:	mov	r7, r3
    fe60:	bne.w	f434 <_svfprintf_r+0x35c>
    fe64:	b.n	f804 <_svfprintf_r+0x72c>
    fe66:	ldr	r3, [sp, #12]
    fe68:	lsls	r0, r3, #27
    fe6a:	bmi.n	fec2 <_svfprintf_r+0xdea>
    fe6c:	ldr	r3, [sp, #12]
    fe6e:	lsls	r1, r3, #25
    fe70:	bpl.n	fec2 <_svfprintf_r+0xdea>
    fe72:	ldr	r1, [sp, #40]	; 0x28
    fe74:	ldrsh.w	r4, [r1]
    fe78:	adds	r1, #4
    fe7a:	asrs	r5, r4, #31
    fe7c:	mov	r2, r4
    fe7e:	mov	r3, r5
    fe80:	str	r1, [sp, #40]	; 0x28
    fe82:	b.w	f40e <_svfprintf_r+0x336>
    fe86:	ldr	r1, [sp, #40]	; 0x28
    fe88:	strb.w	r3, [sp, #111]	; 0x6f
    fe8c:	cmp.w	fp, #0
    fe90:	ldr	r4, [r1, #0]
    fe92:	add.w	r7, r1, #4
    fe96:	mov.w	r5, #0
    fe9a:	bge.w	10336 <_svfprintf_r+0x125e>
    fe9e:	str	r7, [sp, #40]	; 0x28
    fea0:	mov	r7, r3
    fea2:	orrs.w	r3, r4, r5
    fea6:	bne.w	f434 <_svfprintf_r+0x35c>
    feaa:	b.n	f80e <_svfprintf_r+0x736>
    feac:	adds	r3, #1
    feae:	ldr	r2, [sp, #44]	; 0x2c
    feb0:	str	r3, [sp, #144]	; 0x90
    feb2:	add	r4, r5
    feb4:	cmp	r3, #7
    feb6:	str	r4, [sp, #148]	; 0x94
    feb8:	stmia.w	r9, {r2, r5}
    febc:	ble.w	f600 <_svfprintf_r+0x528>
    fec0:	b.n	fc46 <_svfprintf_r+0xb6e>
    fec2:	ldr	r2, [sp, #40]	; 0x28
    fec4:	ldr	r4, [r2, #0]
    fec6:	mov	r3, r2
    fec8:	adds	r3, #4
    feca:	asrs	r5, r4, #31
    fecc:	mov	r2, r4
    fece:	str	r3, [sp, #40]	; 0x28
    fed0:	cmp	r2, #0
    fed2:	mov	r3, r5
    fed4:	sbcs.w	r3, r3, #0
    fed8:	bge.w	f418 <_svfprintf_r+0x340>
    fedc:	negs	r4, r4
    fede:	mov.w	r7, #45	; 0x2d
    fee2:	sbc.w	r5, r5, r5, lsl #1
    fee6:	cmp.w	fp, #0
    feea:	strb.w	r7, [sp, #111]	; 0x6f
    feee:	blt.w	f434 <_svfprintf_r+0x35c>
    fef2:	ldr	r3, [sp, #12]
    fef4:	bic.w	r3, r3, #128	; 0x80
    fef8:	str	r3, [sp, #12]
    fefa:	b.w	f434 <_svfprintf_r+0x35c>
    fefe:	add	r2, sp, #140	; 0x8c
    ff00:	ldr	r1, [sp, #20]
    ff02:	ldr	r0, [sp, #24]
    ff04:	bl	107bc <__ssprint_r>
    ff08:	cmp	r0, #0
    ff0a:	bne.w	f2cc <_svfprintf_r+0x1f4>
    ff0e:	ldr	r4, [sp, #148]	; 0x94
    ff10:	add.w	r9, sp, #192	; 0xc0
    ff14:	ldr	r2, [sp, #60]	; 0x3c
    ff16:	ldr	r3, [sp, #116]	; 0x74
    ff18:	add	r2, r6
    ff1a:	mov	r7, r2
    ff1c:	ldr	r2, [sp, #56]	; 0x38
    ff1e:	cmp	r3, r2
    ff20:	blt.n	ffb2 <_svfprintf_r+0xeda>
    ff22:	ldr	r2, [sp, #12]
    ff24:	lsls	r5, r2, #31
    ff26:	bmi.n	ffb2 <_svfprintf_r+0xeda>
    ff28:	ldr	r1, [sp, #56]	; 0x38
    ff2a:	add	r6, r1
    ff2c:	subs	r5, r6, r7
    ff2e:	subs	r3, r1, r3
    ff30:	cmp	r5, r3
    ff32:	it	ge
    ff34:	movge	r5, r3
    ff36:	cmp	r5, #0
    ff38:	mov	r6, r5
    ff3a:	ble.n	ff58 <_svfprintf_r+0xe80>
    ff3c:	ldr	r2, [sp, #144]	; 0x90
    ff3e:	str.w	r7, [r9]
    ff42:	adds	r2, #1
    ff44:	add	r4, r5
    ff46:	cmp	r2, #7
    ff48:	str	r4, [sp, #148]	; 0x94
    ff4a:	str.w	r5, [r9, #4]
    ff4e:	str	r2, [sp, #144]	; 0x90
    ff50:	bgt.w	10550 <_svfprintf_r+0x1478>
    ff54:	add.w	r9, r9, #8
    ff58:	cmp	r6, #0
    ff5a:	ite	ge
    ff5c:	subge	r5, r3, r6
    ff5e:	movlt	r5, r3
    ff60:	cmp	r5, #0
    ff62:	ble.w	f604 <_svfprintf_r+0x52c>
    ff66:	ldr	r2, [pc, #744]	; (10250 <_svfprintf_r+0x1178>)
    ff68:	ldr	r3, [sp, #144]	; 0x90
    ff6a:	str	r2, [sp, #44]	; 0x2c
    ff6c:	cmp	r5, #16
    ff6e:	ble.n	feac <_svfprintf_r+0xdd4>
    ff70:	movs	r6, #16
    ff72:	ldr	r7, [sp, #24]
    ff74:	ldr.w	fp, [sp, #20]
    ff78:	b.n	ff84 <_svfprintf_r+0xeac>
    ff7a:	add.w	r9, r9, #8
    ff7e:	subs	r5, #16
    ff80:	cmp	r5, #16
    ff82:	ble.n	feac <_svfprintf_r+0xdd4>
    ff84:	adds	r3, #1
    ff86:	adds	r4, #16
    ff88:	cmp	r3, #7
    ff8a:	str	r4, [sp, #148]	; 0x94
    ff8c:	str	r3, [sp, #144]	; 0x90
    ff8e:	str.w	sl, [r9]
    ff92:	str.w	r6, [r9, #4]
    ff96:	ble.n	ff7a <_svfprintf_r+0xea2>
    ff98:	add	r2, sp, #140	; 0x8c
    ff9a:	mov	r1, fp
    ff9c:	mov	r0, r7
    ff9e:	bl	107bc <__ssprint_r>
    ffa2:	cmp	r0, #0
    ffa4:	bne.w	f2cc <_svfprintf_r+0x1f4>
    ffa8:	ldr	r4, [sp, #148]	; 0x94
    ffaa:	ldr	r3, [sp, #144]	; 0x90
    ffac:	add.w	r9, sp, #192	; 0xc0
    ffb0:	b.n	ff7e <_svfprintf_r+0xea6>
    ffb2:	ldr	r2, [sp, #144]	; 0x90
    ffb4:	ldr	r0, [sp, #72]	; 0x48
    ffb6:	ldr	r1, [sp, #76]	; 0x4c
    ffb8:	str.w	r1, [r9]
    ffbc:	adds	r2, #1
    ffbe:	add	r4, r0
    ffc0:	cmp	r2, #7
    ffc2:	str	r4, [sp, #148]	; 0x94
    ffc4:	str.w	r0, [r9, #4]
    ffc8:	str	r2, [sp, #144]	; 0x90
    ffca:	bgt.w	10536 <_svfprintf_r+0x145e>
    ffce:	add.w	r9, r9, #8
    ffd2:	b.n	ff28 <_svfprintf_r+0xe50>
    ffd4:	ldr	r3, [sp, #12]
    ffd6:	lsls	r0, r3, #31
    ffd8:	bmi.w	fbc0 <_svfprintf_r+0xae8>
    ffdc:	adds	r5, #1
    ffde:	adds	r4, #1
    ffe0:	movs	r3, #1
    ffe2:	cmp	r5, #7
    ffe4:	str	r4, [sp, #148]	; 0x94
    ffe6:	str	r5, [sp, #144]	; 0x90
    ffe8:	str.w	r6, [r9]
    ffec:	str.w	r3, [r9, #4]
    fff0:	ble.w	fc28 <_svfprintf_r+0xb50>
    fff4:	b.n	fe12 <_svfprintf_r+0xd3a>
    fff6:	add	r2, sp, #140	; 0x8c
    fff8:	ldr	r1, [sp, #20]
    fffa:	ldr	r0, [sp, #24]
    fffc:	bl	107bc <__ssprint_r>
   10000:	cmp	r0, #0
   10002:	bne.w	f2cc <_svfprintf_r+0x1f4>
   10006:	ldr	r4, [sp, #148]	; 0x94
   10008:	ldr	r5, [sp, #144]	; 0x90
   1000a:	add.w	r9, sp, #192	; 0xc0
   1000e:	b.n	fbdc <_svfprintf_r+0xb04>
   10010:	add	r2, sp, #140	; 0x8c
   10012:	ldr	r1, [sp, #20]
   10014:	ldr	r0, [sp, #24]
   10016:	bl	107bc <__ssprint_r>
   1001a:	cmp	r0, #0
   1001c:	bne.w	f2cc <_svfprintf_r+0x1f4>
   10020:	ldr	r4, [sp, #148]	; 0x94
   10022:	ldr	r5, [sp, #144]	; 0x90
   10024:	add.w	r9, sp, #192	; 0xc0
   10028:	b.n	fbfa <_svfprintf_r+0xb22>
   1002a:	add	r2, sp, #140	; 0x8c
   1002c:	ldr	r1, [sp, #20]
   1002e:	ldr	r0, [sp, #24]
   10030:	bl	107bc <__ssprint_r>
   10034:	cmp	r0, #0
   10036:	bne.w	f2cc <_svfprintf_r+0x1f4>
   1003a:	ldr	r4, [sp, #148]	; 0x94
   1003c:	add.w	r9, sp, #192	; 0xc0
   10040:	b.w	f56c <_svfprintf_r+0x494>
   10044:	ldr	r1, [sp, #12]
   10046:	ands.w	r3, r1, #64	; 0x40
   1004a:	beq.w	101c0 <_svfprintf_r+0x10e8>
   1004e:	ldr	r0, [sp, #40]	; 0x28
   10050:	strb.w	r2, [sp, #111]	; 0x6f
   10054:	mov	r3, r0
   10056:	cmp.w	fp, #0
   1005a:	add.w	r3, r3, #4
   1005e:	ldrh	r4, [r0, #0]
   10060:	mov.w	r5, #0
   10064:	blt.w	103e8 <_svfprintf_r+0x1310>
   10068:	bic.w	r1, r1, #128	; 0x80
   1006c:	str	r1, [sp, #12]
   1006e:	orrs.w	r1, r4, r5
   10072:	str	r3, [sp, #40]	; 0x28
   10074:	beq.w	fa2c <_svfprintf_r+0x954>
   10078:	mov	r7, r2
   1007a:	b.w	f324 <_svfprintf_r+0x24c>
   1007e:	ldr	r3, [sp, #12]
   10080:	lsls	r7, r3, #27
   10082:	bmi.n	1009c <_svfprintf_r+0xfc4>
   10084:	ldr	r3, [sp, #12]
   10086:	lsls	r6, r3, #25
   10088:	bpl.n	1009c <_svfprintf_r+0xfc4>
   1008a:	ldr	r2, [sp, #40]	; 0x28
   1008c:	ldr	r3, [r2, #0]
   1008e:	adds	r2, #4
   10090:	str	r2, [sp, #40]	; 0x28
   10092:	ldrh.w	r2, [sp, #28]
   10096:	strh	r2, [r3, #0]
   10098:	b.w	f126 <_svfprintf_r+0x4e>
   1009c:	ldr	r2, [sp, #40]	; 0x28
   1009e:	ldr	r3, [r2, #0]
   100a0:	adds	r2, #4
   100a2:	str	r2, [sp, #40]	; 0x28
   100a4:	ldr	r2, [sp, #28]
   100a6:	str	r2, [r3, #0]
   100a8:	b.w	f126 <_svfprintf_r+0x4e>
   100ac:	ldrd	r0, r1, [sp, #64]	; 0x40
   100b0:	mov	r2, r0
   100b2:	mov	r3, r1
   100b4:	bl	c3f0 <__aeabi_dcmpun>
   100b8:	cmp	r0, #0
   100ba:	bne.w	106b8 <_svfprintf_r+0x15e0>
   100be:	ldr	r3, [sp, #52]	; 0x34
   100c0:	cmp.w	fp, #4294967295
   100c4:	bic.w	r7, r3, #32
   100c8:	beq.w	1059a <_svfprintf_r+0x14c2>
   100cc:	cmp	r7, #71	; 0x47
   100ce:	beq.w	103d6 <_svfprintf_r+0x12fe>
   100d2:	ldr	r3, [sp, #68]	; 0x44
   100d4:	ldr	r2, [sp, #12]
   100d6:	cmp	r3, #0
   100d8:	orr.w	r2, r2, #256	; 0x100
   100dc:	str	r2, [sp, #44]	; 0x2c
   100de:	blt.w	105d2 <_svfprintf_r+0x14fa>
   100e2:	vldr	d7, [sp, #64]	; 0x40
   100e6:	vstr	d7, [sp, #96]	; 0x60
   100ea:	movs	r3, #0
   100ec:	str	r3, [sp, #16]
   100ee:	ldr	r3, [sp, #52]	; 0x34
   100f0:	cmp	r3, #102	; 0x66
   100f2:	beq.w	105a0 <_svfprintf_r+0x14c8>
   100f6:	cmp	r3, #70	; 0x46
   100f8:	beq.w	10386 <_svfprintf_r+0x12ae>
   100fc:	cmp	r7, #69	; 0x45
   100fe:	ite	eq
   10100:	addeq.w	r5, fp, #1
   10104:	movne	r5, fp
   10106:	add	r2, sp, #132	; 0x84
   10108:	add	r3, sp, #120	; 0x78
   1010a:	str	r2, [sp, #4]
   1010c:	str	r3, [sp, #0]
   1010e:	mov	r2, r5
   10110:	add	r3, sp, #116	; 0x74
   10112:	movs	r1, #2
   10114:	vldr	d0, [sp, #96]	; 0x60
   10118:	ldr	r0, [sp, #24]
   1011a:	bl	e2a0 <_dtoa_r>
   1011e:	ldr	r3, [sp, #52]	; 0x34
   10120:	cmp	r3, #103	; 0x67
   10122:	mov	r6, r0
   10124:	bne.w	105fe <_svfprintf_r+0x1526>
   10128:	ldr	r3, [sp, #12]
   1012a:	lsls	r2, r3, #31
   1012c:	bpl.w	106a2 <_svfprintf_r+0x15ca>
   10130:	adds	r4, r6, r5
   10132:	movs	r2, #0
   10134:	movs	r3, #0
   10136:	ldrd	r0, r1, [sp, #96]	; 0x60
   1013a:	bl	c38c <__aeabi_dcmpeq>
   1013e:	cmp	r0, #0
   10140:	bne.w	1045e <_svfprintf_r+0x1386>
   10144:	ldr	r3, [sp, #132]	; 0x84
   10146:	cmp	r4, r3
   10148:	bls.n	10158 <_svfprintf_r+0x1080>
   1014a:	movs	r1, #48	; 0x30
   1014c:	adds	r2, r3, #1
   1014e:	str	r2, [sp, #132]	; 0x84
   10150:	strb	r1, [r3, #0]
   10152:	ldr	r3, [sp, #132]	; 0x84
   10154:	cmp	r4, r3
   10156:	bhi.n	1014c <_svfprintf_r+0x1074>
   10158:	subs	r3, r3, r6
   1015a:	cmp	r7, #71	; 0x47
   1015c:	str	r3, [sp, #56]	; 0x38
   1015e:	beq.w	10450 <_svfprintf_r+0x1378>
   10162:	ldr	r3, [sp, #52]	; 0x34
   10164:	cmp	r3, #101	; 0x65
   10166:	ble.w	1061c <_svfprintf_r+0x1544>
   1016a:	ldr	r3, [sp, #52]	; 0x34
   1016c:	cmp	r3, #102	; 0x66
   1016e:	ldr	r3, [sp, #116]	; 0x74
   10170:	str	r3, [sp, #60]	; 0x3c
   10172:	beq.w	10636 <_svfprintf_r+0x155e>
   10176:	ldr	r2, [sp, #60]	; 0x3c
   10178:	ldr	r1, [sp, #56]	; 0x38
   1017a:	cmp	r2, r1
   1017c:	blt.w	105e4 <_svfprintf_r+0x150c>
   10180:	ldr	r3, [sp, #12]
   10182:	lsls	r1, r3, #31
   10184:	bmi.w	106a6 <_svfprintf_r+0x15ce>
   10188:	bic.w	r3, r2, r2, asr #31
   1018c:	str	r2, [sp, #36]	; 0x24
   1018e:	movs	r2, #103	; 0x67
   10190:	str	r2, [sp, #52]	; 0x34
   10192:	ldr	r2, [sp, #16]
   10194:	cmp	r2, #0
   10196:	bne.w	103f8 <_svfprintf_r+0x1320>
   1019a:	str	r3, [sp, #16]
   1019c:	ldr	r3, [sp, #44]	; 0x2c
   1019e:	str	r3, [sp, #12]
   101a0:	mov	fp, r2
   101a2:	ldrb.w	r7, [sp, #111]	; 0x6f
   101a6:	b.w	f47c <_svfprintf_r+0x3a4>
   101aa:	bic.w	r7, r7, #7
   101ae:	vldr	d7, [r7]
   101b2:	add.w	r3, r7, #8
   101b6:	vstr	d7, [sp, #64]	; 0x40
   101ba:	str	r3, [sp, #40]	; 0x28
   101bc:	b.w	f6d4 <_svfprintf_r+0x5fc>
   101c0:	ldr	r1, [sp, #40]	; 0x28
   101c2:	strb.w	r3, [sp, #111]	; 0x6f
   101c6:	cmp.w	fp, #0
   101ca:	ldr	r4, [r1, #0]
   101cc:	add.w	r7, r1, #4
   101d0:	mov.w	r5, #0
   101d4:	bge.w	10330 <_svfprintf_r+0x1258>
   101d8:	str	r7, [sp, #40]	; 0x28
   101da:	movs	r7, #0
   101dc:	b.w	f324 <_svfprintf_r+0x24c>
   101e0:	ldr	r1, [sp, #12]
   101e2:	ands.w	r3, r1, #64	; 0x40
   101e6:	beq.w	fe86 <_svfprintf_r+0xdae>
   101ea:	ldr	r0, [sp, #40]	; 0x28
   101ec:	strb.w	r2, [sp, #111]	; 0x6f
   101f0:	mov	r3, r0
   101f2:	cmp.w	fp, #0
   101f6:	add.w	r3, r3, #4
   101fa:	ldrh	r4, [r0, #0]
   101fc:	mov.w	r5, #0
   10200:	blt.w	103e2 <_svfprintf_r+0x130a>
   10204:	bic.w	r1, r1, #128	; 0x80
   10208:	str	r1, [sp, #12]
   1020a:	orrs.w	r1, r4, r5
   1020e:	str	r3, [sp, #40]	; 0x28
   10210:	mov	r7, r2
   10212:	bne.w	f434 <_svfprintf_r+0x35c>
   10216:	b.w	f804 <_svfprintf_r+0x72c>
   1021a:	ldr	r3, [sp, #12]
   1021c:	ldr	r2, [sp, #40]	; 0x28
   1021e:	tst.w	r3, #64	; 0x40
   10222:	mov	r3, r2
   10224:	beq.w	103ec <_svfprintf_r+0x1314>
   10228:	adds	r3, #4
   1022a:	ldrh	r4, [r2, #0]
   1022c:	str	r3, [sp, #40]	; 0x28
   1022e:	movs	r5, #0
   10230:	b.w	f83e <_svfprintf_r+0x766>
   10234:	mov	r4, r2
   10236:	adds	r3, #1
   10238:	ldr	r2, [sp, #44]	; 0x2c
   1023a:	str	r3, [sp, #144]	; 0x90
   1023c:	add	r4, r5
   1023e:	cmp	r3, #7
   10240:	str	r4, [sp, #148]	; 0x94
   10242:	stmia.w	r9, {r2, r5}
   10246:	bgt.w	fefe <_svfprintf_r+0xe26>
   1024a:	add.w	r9, r9, #8
   1024e:	b.n	ff14 <_svfprintf_r+0xe3c>
   10250:	.word	0x20000b50
   10254:	movs	r7, #0
   10256:	cmp	fp, r7
   10258:	strb.w	r7, [sp, #111]	; 0x6f
   1025c:	blt.w	fa50 <_svfprintf_r+0x978>
   10260:	ldr	r3, [sp, #12]
   10262:	bic.w	r3, r3, #128	; 0x80
   10266:	str	r3, [sp, #12]
   10268:	b.w	f9ec <_svfprintf_r+0x914>
   1026c:	add	r2, sp, #140	; 0x8c
   1026e:	ldr	r1, [sp, #20]
   10270:	ldr	r0, [sp, #24]
   10272:	bl	107bc <__ssprint_r>
   10276:	cmp	r0, #0
   10278:	bne.w	f2cc <_svfprintf_r+0x1f4>
   1027c:	ldr	r4, [sp, #148]	; 0x94
   1027e:	add.w	r9, sp, #192	; 0xc0
   10282:	b.n	fa94 <_svfprintf_r+0x9bc>
   10284:	ldr	r7, [sp, #40]	; 0x28
   10286:	b.w	fa42 <_svfprintf_r+0x96a>
   1028a:	ldr	r3, [sp, #144]	; 0x90
   1028c:	ldr	r2, [pc, #736]	; (10570 <_svfprintf_r+0x1498>)
   1028e:	str.w	r2, [r9]
   10292:	adds	r3, #1
   10294:	adds	r4, #1
   10296:	movs	r2, #1
   10298:	cmp	r3, #7
   1029a:	str	r4, [sp, #148]	; 0x94
   1029c:	str	r3, [sp, #144]	; 0x90
   1029e:	str.w	r2, [r9, #4]
   102a2:	bgt.w	103bc <_svfprintf_r+0x12e4>
   102a6:	add.w	r9, r9, #8
   102aa:	cbnz	r5, 102b8 <_svfprintf_r+0x11e0>
   102ac:	ldr	r3, [sp, #56]	; 0x38
   102ae:	cbnz	r3, 102b8 <_svfprintf_r+0x11e0>
   102b0:	ldr	r3, [sp, #12]
   102b2:	lsls	r7, r3, #31
   102b4:	bpl.w	f604 <_svfprintf_r+0x52c>
   102b8:	ldr	r3, [sp, #144]	; 0x90
   102ba:	ldr	r1, [sp, #72]	; 0x48
   102bc:	ldr	r2, [sp, #76]	; 0x4c
   102be:	str.w	r2, [r9]
   102c2:	adds	r3, #1
   102c4:	add	r4, r1
   102c6:	cmp	r3, #7
   102c8:	str	r4, [sp, #148]	; 0x94
   102ca:	str.w	r1, [r9, #4]
   102ce:	str	r3, [sp, #144]	; 0x90
   102d0:	bgt.w	1066e <_svfprintf_r+0x1596>
   102d4:	add.w	r9, r9, #8
   102d8:	negs	r5, r5
   102da:	cmp	r5, #0
   102dc:	ble.w	10434 <_svfprintf_r+0x135c>
   102e0:	ldr	r2, [pc, #656]	; (10574 <_svfprintf_r+0x149c>)
   102e2:	str	r2, [sp, #44]	; 0x2c
   102e4:	cmp	r5, #16
   102e6:	ble.w	1047c <_svfprintf_r+0x13a4>
   102ea:	mov	r2, r4
   102ec:	movs	r7, #16
   102ee:	ldr.w	fp, [sp, #24]
   102f2:	ldr	r4, [sp, #20]
   102f4:	b.n	10302 <_svfprintf_r+0x122a>
   102f6:	add.w	r9, r9, #8
   102fa:	subs	r5, #16
   102fc:	cmp	r5, #16
   102fe:	ble.w	1047a <_svfprintf_r+0x13a2>
   10302:	adds	r3, #1
   10304:	adds	r2, #16
   10306:	cmp	r3, #7
   10308:	str	r2, [sp, #148]	; 0x94
   1030a:	str	r3, [sp, #144]	; 0x90
   1030c:	str.w	sl, [r9]
   10310:	str.w	r7, [r9, #4]
   10314:	ble.n	102f6 <_svfprintf_r+0x121e>
   10316:	add	r2, sp, #140	; 0x8c
   10318:	mov	r1, r4
   1031a:	mov	r0, fp
   1031c:	bl	107bc <__ssprint_r>
   10320:	cmp	r0, #0
   10322:	bne.w	f2cc <_svfprintf_r+0x1f4>
   10326:	ldr	r2, [sp, #148]	; 0x94
   10328:	ldr	r3, [sp, #144]	; 0x90
   1032a:	add.w	r9, sp, #192	; 0xc0
   1032e:	b.n	102fa <_svfprintf_r+0x1222>
   10330:	ldr	r2, [sp, #12]
   10332:	b.w	f7a8 <_svfprintf_r+0x6d0>
   10336:	ldr	r2, [sp, #12]
   10338:	b.n	fe52 <_svfprintf_r+0xd7a>
   1033a:	ldr	r3, [sp, #12]
   1033c:	orr.w	r3, r3, #32
   10340:	str	r3, [sp, #12]
   10342:	add.w	r8, r8, #1
   10346:	ldrb.w	r3, [r8]
   1034a:	b.w	f18c <_svfprintf_r+0xb4>
   1034e:	add	r2, sp, #140	; 0x8c
   10350:	ldr	r1, [sp, #20]
   10352:	ldr	r0, [sp, #24]
   10354:	bl	107bc <__ssprint_r>
   10358:	cmp	r0, #0
   1035a:	bne.w	f2cc <_svfprintf_r+0x1f4>
   1035e:	ldr	r4, [sp, #148]	; 0x94
   10360:	add.w	r9, sp, #192	; 0xc0
   10364:	b.w	fac4 <_svfprintf_r+0x9ec>
   10368:	movs	r1, #64	; 0x40
   1036a:	ldr	r0, [sp, #24]
   1036c:	bl	c80c <_malloc_r>
   10370:	ldr	r2, [sp, #20]
   10372:	str	r0, [r2, #0]
   10374:	str	r0, [r2, #16]
   10376:	cmp	r0, #0
   10378:	beq.w	10762 <_svfprintf_r+0x168a>
   1037c:	ldr	r2, [sp, #20]
   1037e:	movs	r3, #64	; 0x40
   10380:	str	r3, [r2, #20]
   10382:	b.w	f106 <_svfprintf_r+0x2e>
   10386:	add	r2, sp, #132	; 0x84
   10388:	add	r3, sp, #120	; 0x78
   1038a:	str	r2, [sp, #4]
   1038c:	str	r3, [sp, #0]
   1038e:	mov	r2, fp
   10390:	add	r3, sp, #116	; 0x74
   10392:	movs	r1, #3
   10394:	vldr	d0, [sp, #96]	; 0x60
   10398:	ldr	r0, [sp, #24]
   1039a:	bl	e2a0 <_dtoa_r>
   1039e:	mov	r5, fp
   103a0:	mov	r6, r0
   103a2:	ldr	r3, [sp, #52]	; 0x34
   103a4:	cmp	r3, #70	; 0x46
   103a6:	add.w	r4, r6, r5
   103aa:	bne.w	10132 <_svfprintf_r+0x105a>
   103ae:	ldrb	r3, [r6, #0]
   103b0:	cmp	r3, #48	; 0x30
   103b2:	beq.w	106c4 <_svfprintf_r+0x15ec>
   103b6:	ldr	r5, [sp, #116]	; 0x74
   103b8:	add	r4, r5
   103ba:	b.n	10132 <_svfprintf_r+0x105a>
   103bc:	add	r2, sp, #140	; 0x8c
   103be:	ldr	r1, [sp, #20]
   103c0:	ldr	r0, [sp, #24]
   103c2:	bl	107bc <__ssprint_r>
   103c6:	cmp	r0, #0
   103c8:	bne.w	f2cc <_svfprintf_r+0x1f4>
   103cc:	ldr	r5, [sp, #116]	; 0x74
   103ce:	ldr	r4, [sp, #148]	; 0x94
   103d0:	add.w	r9, sp, #192	; 0xc0
   103d4:	b.n	102aa <_svfprintf_r+0x11d2>
   103d6:	cmp.w	fp, #0
   103da:	it	eq
   103dc:	moveq.w	fp, #1
   103e0:	b.n	100d2 <_svfprintf_r+0xffa>
   103e2:	str	r3, [sp, #40]	; 0x28
   103e4:	mov	r7, r2
   103e6:	b.n	fea2 <_svfprintf_r+0xdca>
   103e8:	str	r3, [sp, #40]	; 0x28
   103ea:	b.n	101da <_svfprintf_r+0x1102>
   103ec:	adds	r3, #4
   103ee:	ldr	r4, [r2, #0]
   103f0:	str	r3, [sp, #40]	; 0x28
   103f2:	movs	r5, #0
   103f4:	b.w	f83e <_svfprintf_r+0x766>
   103f8:	movs	r7, #45	; 0x2d
   103fa:	str	r3, [sp, #16]
   103fc:	ldr	r3, [sp, #44]	; 0x2c
   103fe:	str	r3, [sp, #12]
   10400:	strb.w	r7, [sp, #111]	; 0x6f
   10404:	mov.w	fp, #0
   10408:	b.w	f47e <_svfprintf_r+0x3a6>
   1040c:	mov	r0, r6
   1040e:	bl	d540 <strlen>
   10412:	mov	fp, r4
   10414:	mov	r3, r0
   10416:	str	r0, [sp, #36]	; 0x24
   10418:	b.w	f960 <_svfprintf_r+0x888>
   1041c:	add	r2, sp, #140	; 0x8c
   1041e:	ldr	r1, [sp, #20]
   10420:	ldr	r0, [sp, #24]
   10422:	bl	107bc <__ssprint_r>
   10426:	cmp	r0, #0
   10428:	bne.w	f2cc <_svfprintf_r+0x1f4>
   1042c:	ldr	r4, [sp, #148]	; 0x94
   1042e:	ldr	r3, [sp, #144]	; 0x90
   10430:	add.w	r9, sp, #192	; 0xc0
   10434:	ldr	r1, [sp, #56]	; 0x38
   10436:	str.w	r6, [r9]
   1043a:	adds	r3, #1
   1043c:	add	r4, r1
   1043e:	cmp	r3, #7
   10440:	str	r4, [sp, #148]	; 0x94
   10442:	str	r3, [sp, #144]	; 0x90
   10444:	str.w	r1, [r9, #4]
   10448:	ble.w	f600 <_svfprintf_r+0x528>
   1044c:	b.w	fc46 <_svfprintf_r+0xb6e>
   10450:	ldr	r3, [sp, #116]	; 0x74
   10452:	adds	r5, r3, #3
   10454:	blt.n	10494 <_svfprintf_r+0x13bc>
   10456:	cmp	fp, r3
   10458:	blt.n	10494 <_svfprintf_r+0x13bc>
   1045a:	str	r3, [sp, #60]	; 0x3c
   1045c:	b.n	10176 <_svfprintf_r+0x109e>
   1045e:	mov	r3, r4
   10460:	b.n	10158 <_svfprintf_r+0x1080>
   10462:	add	r2, sp, #140	; 0x8c
   10464:	ldr	r1, [sp, #20]
   10466:	ldr	r0, [sp, #24]
   10468:	bl	107bc <__ssprint_r>
   1046c:	cmp	r0, #0
   1046e:	bne.w	f2cc <_svfprintf_r+0x1f4>
   10472:	ldr	r4, [sp, #148]	; 0x94
   10474:	add.w	r9, sp, #192	; 0xc0
   10478:	b.n	fd14 <_svfprintf_r+0xc3c>
   1047a:	mov	r4, r2
   1047c:	adds	r3, #1
   1047e:	ldr	r2, [sp, #44]	; 0x2c
   10480:	str	r3, [sp, #144]	; 0x90
   10482:	add	r4, r5
   10484:	cmp	r3, #7
   10486:	str	r4, [sp, #148]	; 0x94
   10488:	stmia.w	r9, {r2, r5}
   1048c:	bgt.n	1041c <_svfprintf_r+0x1344>
   1048e:	add.w	r9, r9, #8
   10492:	b.n	10434 <_svfprintf_r+0x135c>
   10494:	ldr	r2, [sp, #52]	; 0x34
   10496:	subs	r2, #2
   10498:	str	r2, [sp, #52]	; 0x34
   1049a:	subs	r3, #1
   1049c:	cmp	r3, #0
   1049e:	ldrb.w	r2, [sp, #52]	; 0x34
   104a2:	str	r3, [sp, #116]	; 0x74
   104a4:	it	lt
   104a6:	neglt	r3, r3
   104a8:	strb.w	r2, [sp, #124]	; 0x7c
   104ac:	ite	lt
   104ae:	movlt	r2, #45	; 0x2d
   104b0:	movge	r2, #43	; 0x2b
   104b2:	cmp	r3, #9
   104b4:	strb.w	r2, [sp, #125]	; 0x7d
   104b8:	ble.w	10692 <_svfprintf_r+0x15ba>
   104bc:	add.w	r0, sp, #139	; 0x8b
   104c0:	mov	r4, r0
   104c2:	ldr	r2, [pc, #180]	; (10578 <_svfprintf_r+0x14a0>)
   104c4:	smull	r2, r1, r2, r3
   104c8:	asrs	r2, r3, #31
   104ca:	rsb	r2, r2, r1, asr #2
   104ce:	add.w	r1, r2, r2, lsl #2
   104d2:	sub.w	r3, r3, r1, lsl #1
   104d6:	add.w	r1, r3, #48	; 0x30
   104da:	cmp	r2, #9
   104dc:	mov	r3, r2
   104de:	strb.w	r1, [r4, #-1]!
   104e2:	bgt.n	104c2 <_svfprintf_r+0x13ea>
   104e4:	mov	r1, r4
   104e6:	adds	r3, #48	; 0x30
   104e8:	uxtb	r2, r3
   104ea:	strb.w	r2, [r1, #-1]!
   104ee:	cmp	r0, r1
   104f0:	bls.w	1075c <_svfprintf_r+0x1684>
   104f4:	add.w	r1, sp, #126	; 0x7e
   104f8:	mov	r3, r4
   104fa:	b.n	10500 <_svfprintf_r+0x1428>
   104fc:	ldrb.w	r2, [r3], #1
   10500:	strb.w	r2, [r1], #1
   10504:	cmp	r0, r3
   10506:	bne.n	104fc <_svfprintf_r+0x1424>
   10508:	adds	r3, r0, #1
   1050a:	subs	r3, r3, r4
   1050c:	add.w	r2, sp, #126	; 0x7e
   10510:	add	r3, r2
   10512:	add	r2, sp, #124	; 0x7c
   10514:	subs	r3, r3, r2
   10516:	ldr	r2, [sp, #56]	; 0x38
   10518:	str	r3, [sp, #84]	; 0x54
   1051a:	cmp	r2, #1
   1051c:	add	r3, r2
   1051e:	str	r3, [sp, #36]	; 0x24
   10520:	ble.w	106f2 <_svfprintf_r+0x161a>
   10524:	ldr	r3, [sp, #36]	; 0x24
   10526:	ldr	r2, [sp, #72]	; 0x48
   10528:	add	r3, r2
   1052a:	movs	r2, #0
   1052c:	str	r3, [sp, #36]	; 0x24
   1052e:	str	r2, [sp, #60]	; 0x3c
   10530:	bic.w	r3, r3, r3, asr #31
   10534:	b.n	10192 <_svfprintf_r+0x10ba>
   10536:	add	r2, sp, #140	; 0x8c
   10538:	ldr	r1, [sp, #20]
   1053a:	ldr	r0, [sp, #24]
   1053c:	bl	107bc <__ssprint_r>
   10540:	cmp	r0, #0
   10542:	bne.w	f2cc <_svfprintf_r+0x1f4>
   10546:	ldr	r3, [sp, #116]	; 0x74
   10548:	ldr	r4, [sp, #148]	; 0x94
   1054a:	add.w	r9, sp, #192	; 0xc0
   1054e:	b.n	ff28 <_svfprintf_r+0xe50>
   10550:	add	r2, sp, #140	; 0x8c
   10552:	ldr	r1, [sp, #20]
   10554:	ldr	r0, [sp, #24]
   10556:	bl	107bc <__ssprint_r>
   1055a:	cmp	r0, #0
   1055c:	bne.w	f2cc <_svfprintf_r+0x1f4>
   10560:	ldr	r3, [sp, #116]	; 0x74
   10562:	ldr	r2, [sp, #56]	; 0x38
   10564:	ldr	r4, [sp, #148]	; 0x94
   10566:	subs	r3, r2, r3
   10568:	add.w	r9, sp, #192	; 0xc0
   1056c:	b.n	ff58 <_svfprintf_r+0xe80>
   1056e:	nop
   10570:	.word	0x20000b4c
   10574:	.word	0x20000b50
   10578:	.word	0x66666667
   1057c:	cmp	r5, #6
   1057e:	mov	r3, r5
   10580:	it	cs
   10582:	movcs	r3, #6
   10584:	str	r3, [sp, #36]	; 0x24
   10586:	bic.w	r3, r3, r3, asr #31
   1058a:	mov	fp, r6
   1058c:	str	r7, [sp, #40]	; 0x28
   1058e:	str	r6, [sp, #60]	; 0x3c
   10590:	mov	r7, r6
   10592:	str	r3, [sp, #16]
   10594:	ldr	r6, [pc, #536]	; (107b0 <_svfprintf_r+0x16d8>)
   10596:	b.w	f47c <_svfprintf_r+0x3a4>
   1059a:	mov.w	fp, #6
   1059e:	b.n	100d2 <_svfprintf_r+0xffa>
   105a0:	add	r2, sp, #132	; 0x84
   105a2:	add	r3, sp, #120	; 0x78
   105a4:	str	r2, [sp, #4]
   105a6:	str	r3, [sp, #0]
   105a8:	mov	r2, fp
   105aa:	add	r3, sp, #116	; 0x74
   105ac:	movs	r1, #3
   105ae:	vldr	d0, [sp, #96]	; 0x60
   105b2:	ldr	r0, [sp, #24]
   105b4:	bl	e2a0 <_dtoa_r>
   105b8:	mov	r5, fp
   105ba:	mov	r6, r0
   105bc:	add.w	r4, r0, fp
   105c0:	b.n	103ae <_svfprintf_r+0x12d6>
   105c2:	movs	r7, #45	; 0x2d
   105c4:	strb.w	r7, [sp, #111]	; 0x6f
   105c8:	b.w	f722 <_svfprintf_r+0x64a>
   105cc:	str	r3, [sp, #12]
   105ce:	b.w	f87a <_svfprintf_r+0x7a2>
   105d2:	ldrd	r1, r2, [sp, #64]	; 0x40
   105d6:	add.w	r3, r2, #2147483648	; 0x80000000
   105da:	str	r3, [sp, #100]	; 0x64
   105dc:	movs	r3, #45	; 0x2d
   105de:	str	r1, [sp, #96]	; 0x60
   105e0:	str	r3, [sp, #16]
   105e2:	b.n	100ee <_svfprintf_r+0x1016>
   105e4:	ldr	r2, [sp, #72]	; 0x48
   105e6:	ldr	r3, [sp, #56]	; 0x38
   105e8:	add	r3, r2
   105ea:	ldr	r2, [sp, #60]	; 0x3c
   105ec:	str	r3, [sp, #36]	; 0x24
   105ee:	cmp	r2, #0
   105f0:	ble.w	10706 <_svfprintf_r+0x162e>
   105f4:	movs	r2, #103	; 0x67
   105f6:	bic.w	r3, r3, r3, asr #31
   105fa:	str	r2, [sp, #52]	; 0x34
   105fc:	b.n	10192 <_svfprintf_r+0x10ba>
   105fe:	ldr	r3, [sp, #52]	; 0x34
   10600:	cmp	r3, #71	; 0x47
   10602:	bne.w	10130 <_svfprintf_r+0x1058>
   10606:	ldr	r3, [sp, #12]
   10608:	lsls	r3, r3, #31
   1060a:	bmi.w	103a2 <_svfprintf_r+0x12ca>
   1060e:	ldr	r3, [sp, #132]	; 0x84
   10610:	cmp	r7, #71	; 0x47
   10612:	sub.w	r3, r3, r6
   10616:	str	r3, [sp, #56]	; 0x38
   10618:	beq.w	10450 <_svfprintf_r+0x1378>
   1061c:	ldr	r3, [sp, #116]	; 0x74
   1061e:	b.n	1049a <_svfprintf_r+0x13c2>
   10620:	bic.w	r3, r5, r5, asr #31
   10624:	str	r7, [sp, #40]	; 0x28
   10626:	str	r3, [sp, #16]
   10628:	str	r5, [sp, #36]	; 0x24
   1062a:	mov	fp, r0
   1062c:	str	r0, [sp, #60]	; 0x3c
   1062e:	ldrb.w	r7, [sp, #111]	; 0x6f
   10632:	b.w	f47c <_svfprintf_r+0x3a4>
   10636:	cmp	r3, #0
   10638:	ble.n	10716 <_svfprintf_r+0x163e>
   1063a:	cmp.w	fp, #0
   1063e:	bne.n	106e0 <_svfprintf_r+0x1608>
   10640:	ldr	r2, [sp, #12]
   10642:	lsls	r4, r2, #31
   10644:	bmi.n	106e0 <_svfprintf_r+0x1608>
   10646:	mov	r2, r3
   10648:	str	r2, [sp, #36]	; 0x24
   1064a:	bic.w	r3, r3, r3, asr #31
   1064e:	b.n	10192 <_svfprintf_r+0x10ba>
   10650:	ldr	r3, [sp, #12]
   10652:	lsls	r3, r3, #31
   10654:	mov	r7, fp
   10656:	bpl.n	10664 <_svfprintf_r+0x158c>
   10658:	add	r6, sp, #256	; 0x100
   1065a:	movs	r3, #48	; 0x30
   1065c:	strb.w	r3, [r6, #-65]!
   10660:	b.w	f468 <_svfprintf_r+0x390>
   10664:	str.w	fp, [sp, #36]	; 0x24
   10668:	add	r6, sp, #192	; 0xc0
   1066a:	b.w	f46e <_svfprintf_r+0x396>
   1066e:	add	r2, sp, #140	; 0x8c
   10670:	ldr	r1, [sp, #20]
   10672:	ldr	r0, [sp, #24]
   10674:	bl	107bc <__ssprint_r>
   10678:	cmp	r0, #0
   1067a:	bne.w	f2cc <_svfprintf_r+0x1f4>
   1067e:	ldr	r5, [sp, #116]	; 0x74
   10680:	ldr	r4, [sp, #148]	; 0x94
   10682:	ldr	r3, [sp, #144]	; 0x90
   10684:	add.w	r9, sp, #192	; 0xc0
   10688:	b.n	102d8 <_svfprintf_r+0x1200>
   1068a:	mov	r8, r4
   1068c:	movs	r5, #0
   1068e:	b.w	f190 <_svfprintf_r+0xb8>
   10692:	adds	r3, #48	; 0x30
   10694:	movs	r2, #48	; 0x30
   10696:	strb.w	r3, [sp, #127]	; 0x7f
   1069a:	strb.w	r2, [sp, #126]	; 0x7e
   1069e:	add	r3, sp, #128	; 0x80
   106a0:	b.n	10512 <_svfprintf_r+0x143a>
   106a2:	ldr	r3, [sp, #132]	; 0x84
   106a4:	b.n	10158 <_svfprintf_r+0x1080>
   106a6:	ldr	r2, [sp, #72]	; 0x48
   106a8:	ldr	r3, [sp, #60]	; 0x3c
   106aa:	add	r3, r2
   106ac:	movs	r2, #103	; 0x67
   106ae:	str	r3, [sp, #36]	; 0x24
   106b0:	str	r2, [sp, #52]	; 0x34
   106b2:	bic.w	r3, r3, r3, asr #31
   106b6:	b.n	10192 <_svfprintf_r+0x10ba>
   106b8:	ldr	r6, [pc, #248]	; (107b4 <_svfprintf_r+0x16dc>)
   106ba:	ldr	r3, [pc, #252]	; (107b8 <_svfprintf_r+0x16e0>)
   106bc:	ldrb.w	r7, [sp, #111]	; 0x6f
   106c0:	b.w	f726 <_svfprintf_r+0x64e>
   106c4:	movs	r2, #0
   106c6:	movs	r3, #0
   106c8:	ldrd	r0, r1, [sp, #96]	; 0x60
   106cc:	bl	c38c <__aeabi_dcmpeq>
   106d0:	cmp	r0, #0
   106d2:	bne.w	103b6 <_svfprintf_r+0x12de>
   106d6:	rsb	r5, r5, #1
   106da:	str	r5, [sp, #116]	; 0x74
   106dc:	add	r4, r5
   106de:	b.n	10132 <_svfprintf_r+0x105a>
   106e0:	ldr	r3, [sp, #60]	; 0x3c
   106e2:	ldr	r2, [sp, #72]	; 0x48
   106e4:	adds	r5, r3, r2
   106e6:	add.w	r3, r5, fp
   106ea:	str	r3, [sp, #36]	; 0x24
   106ec:	bic.w	r3, r3, r3, asr #31
   106f0:	b.n	10192 <_svfprintf_r+0x10ba>
   106f2:	ldr	r3, [sp, #12]
   106f4:	ands.w	r3, r3, #1
   106f8:	bne.w	10524 <_svfprintf_r+0x144c>
   106fc:	str	r3, [sp, #60]	; 0x3c
   106fe:	ldr	r3, [sp, #36]	; 0x24
   10700:	bic.w	r3, r3, r3, asr #31
   10704:	b.n	10192 <_svfprintf_r+0x10ba>
   10706:	ldr	r3, [sp, #60]	; 0x3c
   10708:	ldr	r2, [sp, #36]	; 0x24
   1070a:	rsb	r3, r3, #1
   1070e:	add	r2, r3
   10710:	mov	r3, r2
   10712:	str	r2, [sp, #36]	; 0x24
   10714:	b.n	105f4 <_svfprintf_r+0x151c>
   10716:	cmp.w	fp, #0
   1071a:	bne.n	10722 <_svfprintf_r+0x164a>
   1071c:	ldr	r3, [sp, #12]
   1071e:	lsls	r0, r3, #31
   10720:	bpl.n	10732 <_svfprintf_r+0x165a>
   10722:	ldr	r3, [sp, #72]	; 0x48
   10724:	adds	r5, r3, #1
   10726:	add.w	r3, r5, fp
   1072a:	str	r3, [sp, #36]	; 0x24
   1072c:	bic.w	r3, r3, r3, asr #31
   10730:	b.n	10192 <_svfprintf_r+0x10ba>
   10732:	movs	r3, #1
   10734:	str	r3, [sp, #36]	; 0x24
   10736:	b.n	10192 <_svfprintf_r+0x10ba>
   10738:	ldr	r0, [sp, #40]	; 0x28
   1073a:	ldrb.w	r3, [r8, #1]
   1073e:	ldr	r5, [r0, #0]
   10740:	adds	r0, #4
   10742:	cmp	r5, #0
   10744:	str	r0, [sp, #40]	; 0x28
   10746:	mov	r8, r4
   10748:	bge.w	f18c <_svfprintf_r+0xb4>
   1074c:	mov.w	r5, #4294967295
   10750:	b.w	f18c <_svfprintf_r+0xb4>
   10754:	strb.w	r1, [sp, #111]	; 0x6f
   10758:	b.w	f2ee <_svfprintf_r+0x216>
   1075c:	add.w	r3, sp, #126	; 0x7e
   10760:	b.n	10512 <_svfprintf_r+0x143a>
   10762:	ldr	r2, [sp, #24]
   10764:	movs	r3, #12
   10766:	str	r3, [r2, #0]
   10768:	mov.w	r0, #4294967295
   1076c:	b.w	f2de <_svfprintf_r+0x206>
   10770:	strb.w	r1, [sp, #111]	; 0x6f
   10774:	b.w	f3e8 <_svfprintf_r+0x310>
   10778:	strb.w	r1, [sp, #111]	; 0x6f
   1077c:	b.w	f6b4 <_svfprintf_r+0x5dc>
   10780:	strb.w	r1, [sp, #111]	; 0x6f
   10784:	b.w	f822 <_svfprintf_r+0x74a>
   10788:	strb.w	r1, [sp, #111]	; 0x6f
   1078c:	b.w	f7c6 <_svfprintf_r+0x6ee>
   10790:	strb.w	r1, [sp, #111]	; 0x6f
   10794:	b.w	f772 <_svfprintf_r+0x69a>
   10798:	strb.w	r1, [sp, #111]	; 0x6f
   1079c:	b.w	fa0a <_svfprintf_r+0x932>
   107a0:	strb.w	r1, [sp, #111]	; 0x6f
   107a4:	b.w	f9c8 <_svfprintf_r+0x8f0>
   107a8:	strb.w	r1, [sp, #111]	; 0x6f
   107ac:	b.w	f98c <_svfprintf_r+0x8b4>
   107b0:	.word	0x20000b98
   107b4:	.word	0x20000b6c
   107b8:	.word	0x20000b68

000107bc <__ssprint_r>:
   107bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107c0:	ldr	r3, [r2, #8]
   107c2:	sub	sp, #12
   107c4:	mov	r8, r2
   107c6:	cmp	r3, #0
   107c8:	beq.n	108b0 <__ssprint_r+0xf4>
   107ca:	mov	fp, r0
   107cc:	mov.w	r9, #0
   107d0:	ldr	r6, [r2, #0]
   107d2:	ldr	r0, [r1, #0]
   107d4:	ldr	r3, [r1, #8]
   107d6:	mov	r5, r1
   107d8:	mov	r4, r9
   107da:	cmp	r4, #0
   107dc:	beq.n	1086a <__ssprint_r+0xae>
   107de:	cmp	r4, r3
   107e0:	mov	r7, r3
   107e2:	mov	sl, r3
   107e4:	bcc.n	10874 <__ssprint_r+0xb8>
   107e6:	ldrh	r3, [r5, #12]
   107e8:	tst.w	r3, #1152	; 0x480
   107ec:	beq.n	1084a <__ssprint_r+0x8e>
   107ee:	ldr	r7, [r5, #20]
   107f0:	ldr	r1, [r5, #16]
   107f2:	add.w	r7, r7, r7, lsl #1
   107f6:	rsb	sl, r1, r0
   107fa:	add.w	r7, r7, r7, lsr #31
   107fe:	adds	r0, r4, #1
   10800:	asrs	r7, r7, #1
   10802:	add	r0, sl
   10804:	cmp	r0, r7
   10806:	mov	r2, r7
   10808:	itt	hi
   1080a:	movhi	r7, r0
   1080c:	movhi	r2, r7
   1080e:	lsls	r3, r3, #21
   10810:	bpl.n	1087a <__ssprint_r+0xbe>
   10812:	mov	r1, r2
   10814:	mov	r0, fp
   10816:	bl	c80c <_malloc_r>
   1081a:	cmp	r0, #0
   1081c:	beq.n	1088e <__ssprint_r+0xd2>
   1081e:	mov	r2, sl
   10820:	ldr	r1, [r5, #16]
   10822:	str	r0, [sp, #4]
   10824:	bl	9c8c <memcpy>
   10828:	ldrh	r2, [r5, #12]
   1082a:	ldr	r3, [sp, #4]
   1082c:	bic.w	r2, r2, #1152	; 0x480
   10830:	orr.w	r2, r2, #128	; 0x80
   10834:	strh	r2, [r5, #12]
   10836:	rsb	r2, sl, r7
   1083a:	add.w	r0, r3, sl
   1083e:	str	r7, [r5, #20]
   10840:	str	r3, [r5, #16]
   10842:	str	r0, [r5, #0]
   10844:	str	r2, [r5, #8]
   10846:	mov	r7, r4
   10848:	mov	sl, r4
   1084a:	mov	r2, sl
   1084c:	mov	r1, r9
   1084e:	bl	ceb4 <memmove>
   10852:	ldr.w	r2, [r8, #8]
   10856:	ldr	r3, [r5, #8]
   10858:	ldr	r0, [r5, #0]
   1085a:	subs	r3, r3, r7
   1085c:	add	r0, sl
   1085e:	subs	r4, r2, r4
   10860:	str	r3, [r5, #8]
   10862:	str	r0, [r5, #0]
   10864:	str.w	r4, [r8, #8]
   10868:	cbz	r4, 108b0 <__ssprint_r+0xf4>
   1086a:	ldr.w	r9, [r6]
   1086e:	ldr	r4, [r6, #4]
   10870:	adds	r6, #8
   10872:	b.n	107da <__ssprint_r+0x1e>
   10874:	mov	r7, r4
   10876:	mov	sl, r4
   10878:	b.n	1084a <__ssprint_r+0x8e>
   1087a:	mov	r0, fp
   1087c:	bl	d020 <_realloc_r>
   10880:	mov	r3, r0
   10882:	cmp	r0, #0
   10884:	bne.n	10836 <__ssprint_r+0x7a>
   10886:	ldr	r1, [r5, #16]
   10888:	mov	r0, fp
   1088a:	bl	d8a8 <_free_r>
   1088e:	movs	r3, #12
   10890:	str.w	r3, [fp]
   10894:	ldrh	r3, [r5, #12]
   10896:	movs	r2, #0
   10898:	orr.w	r3, r3, #64	; 0x40
   1089c:	mov.w	r0, #4294967295
   108a0:	strh	r3, [r5, #12]
   108a2:	str.w	r2, [r8, #8]
   108a6:	str.w	r2, [r8, #4]
   108aa:	add	sp, #12
   108ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108b0:	movs	r0, #0
   108b2:	str.w	r0, [r8, #4]
   108b6:	add	sp, #12
   108b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108bc:	movs	r0, r0
	...

000108c0 <___init_veneer>:
   108c0:	ldr.w	pc, [pc]	; 108c4 <___init_veneer+0x4>
   108c4:	.word	0x60001b4d
	...

Disassembly of section .fini:

000108d0 <_fini>:
   108d0:	push	{r3, r4, r5, r6, r7, lr}
   108d2:	nop

Disassembly of section .text.csf:

60013ab4 <hab_csf>:
	...
