
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0001058c l    d  .fini	00000000 .fini
00010590 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1438 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00009900 l     F .text	0000000c startup_default_early_hook
0000990c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1438 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff143c l       .bss	00000000 object.8610
00010580 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
00000718 l     F .text	00000074 _GLOBAL__sub_I_storage
00000000 l    df *ABS*	00000000 Storage.cpp
00000ff8 l     F .text	00000094 MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]
000018c4 l     F .text	0000002e MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]
00000000 l    df *ABS*	00000000 MTP.cpp
000019b4 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00001ac0 l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00002c14 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]
0000fde0 l     O .text	00000024 supported_op
0000fe04 l     O .text	00000014 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
0000338c l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
0000373c l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff14c0 l     O .bss	00000004 cacheTime
1fff14c4 l     O .bss	00000007 tm
1fff14cc l     O .bss	00000004 sysTime
1fff14d0 l     O .bss	00000001 Status
1fff14d8 l     O .bss	00000004 prevMillis
1fff0978 l     O .data	00000004 syncInterval
0000fe74 l     O .text	0000000c monthDays
1fff14dc l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 SD.cpp
00003ae0 l     F .text	0000005c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00003b3c l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00004604 l     F .text	0000003c dbgPrint(unsigned short)
00004640 l     F .text	0000002c FsCache::sync() [clone .part.2]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00004c98 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFile.cpp
00005888 l     F .text	0000003c dbgPrint(unsigned short)
00005a08 l     F .text	000000a4 FatFile::sync() [clone .part.38]
00000000 l    df *ABS*	00000000 FatPartition.cpp
000068a8 l     F .text	0000003c dbgPrint(unsigned short)
000068e4 l     F .text	00000058 FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00006e34 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00006e5c l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00007988 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00007d70 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00007d88 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000836c l     F .text	00000030 sdIrs()
0000839c l     F .text	00000018 isBusyCommandComplete()
000083b4 l     F .text	00000010 isBusyCommandInhibit()
000083c4 l     F .text	0000000c isBusyDMA()
000083d0 l     F .text	00000014 isBusyFifoRead()
000083e4 l     F .text	00000014 isBusyFifoWrite()
000083f8 l     F .text	00000018 isBusyTransferComplete()
00008410 l     F .text	000000cc setSdclk(unsigned long)
00008540 l     F .text	00000028 waitTimeout(bool (*)())
00008568 l     F .text	0000004c yieldTimeout(bool (*)())
000085e4 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
00008660 l     F .text	00000064 readReg16(unsigned long, void*)
000086c4 l     F .text	0000002c isBusyCMD13()
0000870c l     F .text	00000020 waitDmaStatus() [clone .part.6]
0000872c l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008920 l     F .text	00000078 transferStop()
00008cd0 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff1998 l     O .bss	00000001 m_version2
1fff199c l     O .bss	00000010 m_cid
1fff19ac l     O .bss	00000004 m_busyFcn
1fff19b0 l     O .bss	00000001 m_highCapacity
1fff19b4 l     O .bss	00000004 m_ocr
1fff19b8 l     O .bss	00000004 m_rca
1fff19bc l     O .bss	00000004 m_irqstat
1fff097c l     O .data	00000001 m_errorCode
1fff19c0 l     O .bss	00000001 m_initDone
1fff19c4 l     O .bss	00000010 m_csd
1fff19d4 l     O .bss	00000001 m_dmaBusy
1fff19d8 l     O .bss	00000004 m_sdClkKhz
1fff19dc l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 usb1_mtp.c
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff19e1 l     O .bss	00000001 tx_noautoflush
1fff19e4 l     O .bss	00000004 tx_packet
1fff19e8 l     O .bss	00000001 transmit_previous_timeout
1fff19ec l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
00009940 l     F .text	0000004c digitalWrite.part.1
0000998c l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0984 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff19f8 l     O .bss	00000004 ep0_tx_ptr
1fff19fc l     O .bss	00000018 rx_last
1fff1a14 l     O .bss	00000002 ep0_tx_len
1fff1a18 l     O .bss	00000040 ep0_rx0_buf
1fff1a58 l     O .bss	00000018 rx_first
1fff1a70 l     O .bss	00000001 ep0_tx_data_toggle
1fff1a74 l     O .bss	00000040 ep0_rx1_buf
1fff1ab4 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff1acc l     O .bss	00000018 tx_last
1fff1ae4 l     O .bss	00000008 setup
1fff1aec l     O .bss	00000001 ep0_tx_bdt_bank
1fff1af0 l     O .bss	00000008 reply_buffer
1fff1afc l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1b02 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff1b31 l     O .bss	00000001 calibrating
1fff099d l     O .data	00000001 analog_config_bits
1fff1b32 l     O .bss	00000001 analog_reference_internal
1fff099e l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff09a0 l     O .data	00000012 device_descriptor
1fff09cc l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000cb0c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
000104f0 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d4c0 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
00010510 l     O .text	00000010 zeroes.7258
00010560 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0a90 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1438 l       .bss	00000000 __bss_start__
1fff1b84 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000098f8  w    F .text	00000006 adc0_isr
00000fc4 g     F .text	00000032 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0000b714 g     F .text	0000002c .hidden __aeabi_dcmpun
00009654 g     F .text	0000001c usb_serial_available
0000b6d8 g     F .text	00000012 .hidden __aeabi_dcmple
0000c784 g     F .text	000000ba strcpy
0000b614 g     F .text	0000007a .hidden __cmpdf2
00008adc g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000aa2c  w    F .text	000000ec yield
0000665c g     F .text	0000024c FatFile::write(void const*, unsigned int)
0000b614 g     F .text	0000007a .hidden __eqdf2
00007ce4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00004070 g     F .text	00000430 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff1454 g     O .bss	00000058 storage
1fff09b4 g     O .data	00000018 usb_string_manufacturer_name_default
0000b184 g     F .text	0000005a .hidden __floatdidf
000098b0  w    F .text	00000048 hard_fault_isr
000098f8  w    F .text	00000006 dma_ch6_isr
1fff1990 g     O .bss	00000004 FsDateTime::callback
0000abc4 g     F .text	00000020 Print::println()
000098f8  w    F .text	00000006 uart0_lon_isr
00003f54 g     F .text	0000011c ExFatFile::seekSet(unsigned long long)
00009d90 g     F .text	00000108 usb_rx_memory
00007cb8  w    F .text	00000004 SdSpiCard::errorCode() const
000004a8  w    F .text	0000000c File::flush()
000098f8  w    F .text	00000006 dma_ch8_isr
0000c33c g     F .text	00000002 __malloc_unlock
00000894  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff1994 g     O .bss	00000004 FsVolume::m_cwv
00005b18 g     F .text	00000104 FatFile::open(FatFile*, char const*, int)
0000acbc g     F .text	000000e0 analog_init
00009e98 g     F .text	00000084 usb_tx
000098f8  w    F .text	00000006 portcd_isr
0000c9bc g     F .text	0000004a _vdprintf_r
0000fd00  w    O .text	0000005c vtable for SDFile
0000c1d4 g     F .text	000000c6 memmove
0000cddc g     F .text	0000004c _Balloc
000098f8  w    F .text	00000006 can1_rx_warn_isr
00010598 g       .ARM.exidx	00000000 __exidx_end
000098f8  w    F .text	00000006 dma_error_isr
00006bb4 g     F .text	00000060 FatPartition::freeChain(unsigned long)
1fff1b14 g     O .bss	00000001 EventResponder::runningFromYield
000093f8 g     F .text	0000001a SdSpiArduinoDriver::receive()
00007ea8 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
000098f8  w    F .text	00000006 i2c0_isr
00001470 g     F .text	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000ab98 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b604 g     F .text	0000008a .hidden __gtdf2
00006e98 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000bab4 g     F .text	0000000c __errno
00000b84  w    F .text	00000026 SDFile::isDirectory()
00001770 g     F .text	00000154 MTPStorage_SD::ScanDir(unsigned long)
000098f8  w    F .text	00000006 portd_isr
000098f8  w    F .text	00000006 enet_error_isr
000005c0  w    F .text	00000028 File::~File()
1fff1b04 g     O .bss	00000004 EventResponder::firstInterrupt
00001dd0 g     F .text	0000008e MTPD::GetObjectHandles(unsigned long, unsigned long)
00007ce8  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00007a48 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
000098f8  w    F .text	00000006 tpm1_isr
00004bc8 g     F .text	0000003c ExFatPartition::rootLength()
00007cbc  w    F .text	00000004 SdSpiCard::errorData() const
0000ab88  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00010050 g     O .text	00000200 digital_pin_to_info_PGM
1fff1b80 g     O .bss	00000004 errno
00007f24 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
00009414 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00007574 g     F .text	00000412 FatFile::open(FatFile*, fname_t*, int)
000049d4 g     F .text	0000004a ExFatPartition::fatGet(unsigned long, unsigned long*)
00010598 g       .ARM.exidx	00000000 _etext
1fff1438 g       .bss	00000000 _sbss
0000b6a0 g     F .text	00000010 .hidden __aeabi_cdcmple
000084e8 g     F .text	0000000c SdioCard::errorData() const
00008bec g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
000098f8  w    F .text	00000006 porte_isr
0000070c g     F .text	0000000c loop
000098f8  w    F .text	00000006 portb_isr
000098f8  w    F .text	00000006 spi1_isr
000022b4 g     F .text	0000012c MTPD::GetStorageInfo(unsigned long)
000098f8  w    F .text	00000006 uart3_status_isr
00003c7c g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000098f8  w    F .text	00000006 mcm_isr
00009110 g     F .text	000000cc SdioCard::readData(unsigned char*)
000018f4 g     F .text	00000062 MTPStorage_SD::StartGetObjectHandles(unsigned long)
00007dec g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
1fff1b08 g     O .bss	00000004 EventResponder::lastInterrupt
000098f8  w    F .text	00000006 uart1_status_isr
00000c40  w    F .text	00000092 SDFile::seek(unsigned long, int)
00007ac0 g     F .text	00000028 FsBaseFile::close()
000094a8 g     F .text	00000134 memcpy
000098f8  w    F .text	00000006 randnum_isr
0000b690 g     F .text	00000020 .hidden __aeabi_cdrcmple
0000048c  w    F .text	0000000c File::available()
00000b18 g     F .text	0000001c MTPStorage_SD::freeClusters()
00001958 g     F .text	00000044 Storage_init()
00004ab8 g     F .text	0000009c ExFatPartition::freeChain(unsigned long)
00001544 g     F .text	00000110 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00005e0c g     F .text	0000002a FatFile::peek()
0000e420 g     F .text	000016e4 _svfprintf_r
0000b114 g     F .text	00000022 .hidden __floatsidf
00000880  w    F .text	00000014 SDFile::whoami()
1fff14bc  w    O .bss	00000001 SDFile::name()::zeroterm
1fff19f4 g     O .bss	00000004 systick_millis_count
0000b60c g     F .text	00000082 .hidden __ltdf2
00000954 g     F .text	00000020 MTPStorage_SD::clusterCount()
000053b0 g     F .text	000000d8 ExFatFile::rename(ExFatFile*, char const*)
000098b0  w    F .text	00000048 bus_fault_isr
00002ddc g     F .text	000005b0 MTPD::loop()
000098f8  w    F .text	00000006 watchdog_isr
0000b790 g     F .text	00000000 .hidden __aeabi_uldivmod
000098f8  w    F .text	00000006 i2c1_isr
1fff1af8 g     O .bss	00000001 usb_configuration
000098f8  w    F .text	00000006 dma_ch11_isr
000038b8  w    F .text	00000006 SdCardInterface::status()
00008ca0 g     F .text	00000030 SdioCard::syncDevice()
0000899c g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00000998  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00005e38 g     F .text	0000004e FatFile::readDirCache(bool)
000004b4  w    F .text	0000000c File::seek(unsigned long, int)
000098f8  w    F .text	00000006 i2c2_isr
1fff09b4  w    O .data	00000018 usb_string_manufacturer_name
1fff1b74 g     O .bss	0000000c usb_rx_byte_count_data
000098f8  w    F .text	00000006 pit1_isr
1fff0a38 g     O .data	00000008 usb_string_mtp
0000bb10 g     F .text	00000010 malloc
000098f8  w    F .text	00000006 dma_ch4_isr
000098f8  w    F .text	00000006 software_isr
0000fcdc  w    O .text	00000024 vtable for FsFile
000098f8  w    F .text	00000006 dma_ch7_isr
00010400 g     O .text	000000c8 __mprec_tens
0000a964 g     F .text	000000c8 usb_init
00007cd0  w    F .text	00000004 SdSpiCard::type() const
000098f8  w    F .text	00000006 lptmr_isr
1fff1b3c g     O .bss	00000004 __malloc_top_pad
00009a14 g     F .text	00000024 rtc_set
00007cf8 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005488 g     F .text	00000120 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000b0f4 g     F .text	0000001e .hidden __aeabi_ui2d
0000cdc0 g     F .text	0000001c _localeconv_r
00009a04 g     F .text	00000010 attachInterruptVector
000093b0 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
0000cf58 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
000094a4 g     F .text	00000002 usb_mtp_configure
000004e4  w    F .text	0000000c File::operator bool()
000069b8 g     F .text	0000000e FatCache::sync()
0000b7c0 g     F .text	000002e2 .hidden __udivmoddi4
00002118 g     F .text	0000019c MTPD::getObjectPropValue(unsigned long, unsigned long)
0000ae70 g     F .text	00000000 .hidden __aeabi_drsub
000058c4 g     F .text	00000042 FatFile::addCluster()
0000c720 g     F .text	00000024 _sbrk_r
00007f78 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
000085c4 g     F .text	00000020 SdioCard::type() const
00000480  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
000095dc g     F .text	00000048 usb_serial_getchar
000098f8  w    F .text	00000006 can1_bus_off_isr
000098f8  w    F .text	00000006 ftm2_isr
00000a88  w    F .text	0000004c SDFile::name()
1fff1b68 g     O .bss	00000008 usb_cdc_line_coding
00009a38 g     F .text	0000000a digitalWrite
1fff1b0c g     O .bss	00000004 EventResponder::lastYield
000098f8  w    F .text	00000006 uart5_status_isr
000098f8  w    F .text	00000006 lpuart0_status_isr
00003c4c g     F .text	0000002e ExFatFile::openRoot(ExFatVolume*)
0001027c g     O .text	00000006 usb_endpoint_config_table
000098f8  w    F .text	00000006 dma_ch9_isr
00000a08  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
000098f8  w    F .text	00000006 pit2_isr
0000b6c4 g     F .text	00000012 .hidden __aeabi_dcmplt
1fff1b38 g     O .bss	00000004 __malloc_max_sbrked_mem
00000b44  w    F .text	00000010 SDFile::position()
00009a44 g     F .text	0000000a pinMode
00008274 g     F .text	00000042 SdSpiCard::writeStop()
00001654 g     F .text	00000036 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00009cdc g     F .text	0000004c usb_free
000098f8  w    F .text	00000006 i2c3_isr
0000b138 g     F .text	0000003a .hidden __extendsfdf2
0000b434 g     F .text	000001d0 .hidden __aeabi_ddiv
0000ae7c g     F .text	00000276 .hidden __adddf3
000020ac g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00001a18 g     F .text	000000a8 MTPD::writestring(char const*)
00008338 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00000498  w    F .text	00000010 File::peek()
00006c14 g     F .text	000000d6 FatPartition::freeClusterCount()
00003a28  w    F .text	000000b8 SDClass::open(char const*, unsigned char)
00010590 g       .ARM.exidx	00000000 __exidx_start
0000b1e0 g     F .text	00000254 .hidden __aeabi_dmul
0000816c g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
000098f8  w    F .text	00000006 pit0_isr
1fff1b10 g     O .bss	00000004 EventResponder::firstYield
000102e4 g     O .text	00000004 _global_impure_ptr
000007c0 g     F .text	0000000c MTPStorage_SD::write(char const*, unsigned long)
000098f8  w    F .text	00000006 can1_error_isr
00000a54  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c340 g     F .text	000003de _realloc_r
00000b54  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000bac0 g     F .text	00000050 __libc_init_array
1fff1b84 g       .bss	00000000 __bss_end
00000ad4  w    F .text	00000044 SDFile::rewindDirectory()
000098f8  w    F .text	00000006 can0_wakeup_isr
000045b8 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000084f4 g     F .text	0000001c SdioCard::readCID(CID*)
00005120 g     F .text	00000114 ExFatFile::addDirCluster()
000098f8  w    F .text	00000006 flash_cmd_isr
000082e4 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
0000112c g     F .text	0000003a MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)
000104c8 g     O .text	00000028 __mprec_bigtens
0000ab70  w    F .text	00000004 usb_serial_class::clear()
0000b0f4 g     F .text	0000001e .hidden __floatunsidf
000098f8  w    F .text	00000006 uart2_status_isr
00009910 g     F .text	0000002c _sbrk
0000d1ec g     F .text	00000042 __mcmp
0000fe80  w    O .text	0000001c vtable for SDClass
0000078c  w    F .text	00000012 SDFile::operator bool()
1fff0980 g     O .data	00000004 __brkval
1fff19f0 g     O .bss	00000001 usb_cdc_line_rtsdtr
00009868 g     F .text	00000048 usb_serial_flush_callback
00010570 g     F .text	00000000 _init
000059dc g     F .text	0000002a FatFile::cacheDirEntry(unsigned char)
000098f8  w    F .text	00000006 svcall_isr
000038c4  w    F .text	00000062 SDClass::remove(char const*)
00000864  w    F .text	0000001c SDFile::close()
000098f8  w    F .text	00000006 dma_ch15_isr
00000d38  w    F .text	0000005c SDFile::~SDFile()
00003854 g     F .text	00000020 day()
000098f8  w    F .text	00000006 uart1_error_isr
0000cb2c g     F .text	00000028 __libc_fini_array
000098f8  w    F .text	00000006 usbhs_phy_isr
1fff1b84 g       .bss	00000000 _ebss
00008b64 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00001b7c g     F .text	00000214 MTPD::WriteDescriptor()
1fff0974 g     O .data	00000004 propertyListNum
00000a40  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000693c g     F .text	0000007a FatCache::read(unsigned long, unsigned char)
0000cebc g     F .text	00000040 __hi0bits
0000b740 g     F .text	0000004e .hidden __fixdfsi
00005234 g     F .text	00000072 ExFatFile::mkdir(ExFatFile*, ExName_t*)
000098f8 g     F .text	00000006 unused_isr
00001d90 g     F .text	0000003e MTPD::WriteStorageIDs()
000098f8  w    F .text	00000006 spi0_isr
000098f8  w    F .text	00000006 dma_ch3_isr
000038c0  w    F .text	00000002 SDClass::~SDClass()
000005c0  w    F .text	00000028 File::~File()
00003894 g     F .text	00000024 year()
0000acb8 g     F .text	00000004 operator delete(void*, unsigned int)
000098f8  w    F .text	00000006 flash_error_isr
0000ae7c g     F .text	00000276 .hidden __aeabi_dadd
0000b60c g     F .text	00000082 .hidden __ledf2
0000c744 g     F .text	0000003e strcat
000098f8  w    F .text	00000006 uart5_error_isr
000098f8  w    F .text	00000006 rtc_seconds_isr
000098f8  w    F .text	00000006 pdb_isr
0000d09c g     F .text	000000a0 __pow5mult
00005f44 g     F .text	00000068 FatFile::rmdir()
0000b174 g     F .text	0000006a .hidden __aeabi_ul2d
000098b0  w    F .text	00000048 usage_fault_isr
000098f8  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00006af4 g     F .text	000000c0 FatPartition::allocateCluster(unsigned long, unsigned long*)
000098f8  w    F .text	00000006 dma_ch14_isr
000039dc  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1b70 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ab60 g     F .text	00000010 systick_isr
000098f8  w    F .text	00000006 rtc_alarm_isr
00000504  w    F .text	0000000c File::isDirectory()
000079c4 g     F .text	00000084 FatFile::getSFN(char*)
000080bc g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
000098f8  w    F .text	00000006 dma_ch2_isr
1fff098c g     O .data	00000010 Serial
000098f8  w    F .text	00000006 ftm1_isr
0000ab90  w    F .text	00000006 usb_serial_class::write(unsigned char)
00007b68 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
00009900  w    F .text	0000000c startup_early_hook
000098f8  w    F .text	00000006 dma_ch13_isr
00004cd4 g     F .text	000000c6 ExFatFile::addCluster()
0000fc04  w    O .text	0000005c vtable for File
000098f8  w    F .text	00000006 uart2_error_isr
00009624 g     F .text	00000030 usb_serial_peekchar
0000b700 g     F .text	00000012 .hidden __aeabi_dcmpgt
00000ef0 g     F .text	00000002 mtp_yield()
0000c0d0 g     F .text	00000000 memchr
00006a68 g     F .text	0000008a FatPartition::fatPut(unsigned long, unsigned long)
1fff0a74 g     O .data	00000016 usb_string_serial_number_default
000098b0 g     F .text	00000048 fault_isr
0000cbf0 g     F .text	000001d0 _free_r
00008998 g     F .text	00000004 SdioCard::readStop()
00004678 g     F .text	0000008c FsCache::get(unsigned long, unsigned char)
0000b6ec g     F .text	00000012 .hidden __aeabi_dcmpge
000098f8  w    F .text	00000006 usb_charge_isr
0000ab80  w    F .text	00000004 usb_serial_class::flush()
000098f8  w    F .text	00000006 cmt_isr
0000ae78 g     F .text	0000027a .hidden __aeabi_dsub
00006cec g     F .text	00000146 FatPartition::init(BlockDeviceInterface*, unsigned char)
000098f8  w    F .text	00000006 usbhs_isr
00006194 g     F .text	00000188 FatFile::mkdir(FatFile*, fname_t*)
1fff1434 g     O .data	00000004 __malloc_sbrk_base
0000ab78  w    F .text	00000004 usb_serial_class::read()
000098f8  w    F .text	00000006 ftm3_isr
00000548  w    F .text	0000000c File::rewindDirectory()
000098f8  w    F .text	00000006 tsi0_isr
0000728c g     F .text	000001b2 FatFile::remove()
0000b174 g     F .text	0000006a .hidden __floatundidf
0000993c  w    F .text	00000002 __cxa_pure_virtual
0000d13c g     F .text	000000ae __lshift
0000631c g     F .text	000000fc FatFile::mkdir(FatFile*, char const*, bool)
000098f8  w    F .text	00000006 spi2_isr
00004c40 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
000010dc g     F .text	00000050 MTPStorage_SD::GetNextObjectHandle()
0000fb04 g     F .text	00000100 __ssprint_r
0000d400 g     F .text	0000005e _vasnprintf_r
0000acb0  w    F .text	00000002 serialEvent()
1fff1a71 g     O .bss	00000001 usb_reboot_timer
0000ca68 g     F .text	000000a4 __register_exitproc
000044a0 g     F .text	00000116 ExFatFile::open(ExFatFile*, char const*, int)
0000c91c g     F .text	000000a0 strncmp
000052a8 g     F .text	00000108 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00009670 g     F .text	00000038 usb_serial_flush_input
00004b54 g     F .text	00000072 ExFatPartition::freeClusterCount()
000011c0 g     F .text	0000006c MTPStorage_SD::ConstructFilename(int, char*, int)
0000cf6c g     F .text	00000130 __multiply
000097b0 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff1b40 g     O .bss	00000028 __malloc_current_mallinfo
0000d344 g     F .text	000000ba __d2b
1fff1b18 g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
000098f8  w    F .text	00000006 can0_bus_off_isr
000085b4  w    F .text	0000000e SdioCard::~SdioCard()
00003b8c g     F .text	000000be ExFatFile::getName(char*, unsigned int)
000007a0 g     F .text	00000004 MTPStorage_SD::readonly()
1fff1aed g     O .bss	00000001 usb_rx_memory_needed
00008a68 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00009f1c g     F .text	00000a48 usb_isr
0000baa8 g     F .text	0000000c __cxa_atexit
00003d40 g     F .text	000001e4 ExFatFile::read(void*, unsigned int)
0000b114 g     F .text	00000022 .hidden __aeabi_i2d
000009f0  w    F .text	00000018 SDFile::peek()
00004704 g     F .text	0000000e FsCache::sync()
0000c170 g     F .text	00000062 memcmp
00010250  w    O .text	00000028 vtable for usb_serial_class
00009434 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
000098f8  w    F .text	00000006 uart3_error_isr
00002ae4 g     F .text	0000007c MTPD::GetObject(unsigned long)
000094a0 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000baa4  w    F .text	00000002 .hidden __aeabi_ldiv0
00004ec4 g     F .text	00000072 ExFatFile::rmdir()
000098f8  w    F .text	00000006 porta_isr
000023e0 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000b434 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
00007fd4 g     F .text	00000098 SdSpiCard::sectorCount()
000098f8  w    F .text	00000006 low_voltage_isr
1fff1028 g     O .data	00000408 __malloc_av_
000098f8  w    F .text	00000006 can0_error_isr
00009b30 g     F .text	0000016c _init_Teensyduino_internal_
00000bac  w    F .text	00000014 SDFile::flush()
0000b1e0 g     F .text	00000254 .hidden __muldf3
00009810 g     F .text	00000058 usb_serial_flush_output
000098f8  w    F .text	00000006 dma_ch12_isr
0000c338 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00007020 g     F .text	0000026c FatFile::parsePathName(char const*, fname_t*, char const**)
000098f8  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000944c g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000d460 g     F .text	0000005e _calloc_r
000098f8  w    F .text	00000006 pit3_isr
00002b60 g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff14d4 g     O .bss	00000004 getTimePtr
1fff0988 g     O .data	00000001 yield_active_check_flags
000098f8  w    F .text	00000006 enet_rx_isr
000050b8 g     F .text	00000066 ExFatFile::sync()
00006418 g     F .text	00000238 FatFile::rename(FatFile*, char const*)
000086f0 g     F .text	0000001c SdioCard::isBusy()
000098f8  w    F .text	00000006 portc_isr
00008134 g     F .text	00000038 SdSpiCard::readStop()
0000c29c g     F .text	0000009a memset
0000aca0 g     F .text	00000010 main
1fff1b34 g     O .bss	00000004 __malloc_max_total_mem
00004714 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00003754 g     F .text	000000a0 now()
000055a8 g     F .text	000002e0 ExFatFile::write(void const*, unsigned int)
0000fd5c g     O .text	00000050 vtable for MTPStorage_SD
00002c40 g     F .text	00000126 MTPD::SendObjectInfo(unsigned long, unsigned long)
000098b0  w    F .text	00000048 memmanage_fault_isr
00000be8  w    F .text	00000058 SDFile::available()
000004d8  w    F .text	0000000c File::close()
0000ad9c g     F .text	0000007c usb_init_serialnumber
0001058c g       .text	00000000 __init_array_end
0000d5e8 g     F .text	00000e34 _dtoa_r
0000bb30 g     F .text	00000570 _malloc_r
1fff1b30 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
000098f8  w    F .text	00000006 debugmonitor_isr
0000ca20 g     F .text	0000001a __ascii_wctomb
00007a48 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000b184 g     F .text	0000005a .hidden __aeabi_l2d
00003584 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
00009a50 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000510  w    F .text	00000038 File::openNextFile(unsigned char)
000098f8  w    F .text	00000006 cmp1_isr
000098f8  w    F .text	00000006 ftm0_isr
00004f38 g     F .text	00000180 ExFatFile::syncDir()
0000cb54 g     F .text	0000009c _malloc_trim_r
1fff0a70 g     O .data	00000004 string0
000096a8 g     F .text	00000108 usb_serial_write
0000990c  w    F .text	00000002 startup_late_hook
0000ab7c  w    F .text	00000004 usb_serial_class::available()
1fff099c g     O .data	00000001 _serialEvent_default
00002bd0 g     F .text	00000044 MTPD::readstring(char*)
00006650 g     F .text	0000000c FatFile::sync()
0000398c  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0a40  w    O .data	0000002e usb_string_product_name
00009a94 g     F .text	0000009c delay
0000b614 g     F .text	0000007a .hidden __nedf2
000098f8  w    F .text	00000006 tpm0_isr
000007a8 g     F .text	00000018 MTPStorage_SD::CloseIndex()
0001058c g     F .fini	00000000 _fini
0000199c g     F .text	00000018 MTPD::get_buffer()
000004f0  w    F .text	00000014 File::name()
00003874 g     F .text	00000020 month()
0000806c g     F .text	00000050 SdSpiCard::readStart(unsigned long)
000045c8 g     F .text	0000003a ExFatFile::openNext(ExFatFile*, int)
0000abf4 g     F .text	0000001c Print::printf(char const*, ...)
000098f8  w    F .text	00000006 i2s0_rx_isr
000098f8  w    F .text	00000006 uart4_error_isr
0000ac90 g     F .text	00000010 Print::print(long)
00005aac g     F .text	0000001e FatFile::close()
000004c0  w    F .text	0000000c File::position()
00000cd4  w    F .text	00000064 SDFile::~SDFile()
000069c8 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000cb20 g     F .text	0000000c atexit
0000853c  w    F .text	00000002 SdioCard::~SdioCard()
00000b6c  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000580  w    F .text	00000018 File::write(unsigned char)
0000ca3c g     F .text	0000002c _write_r
1fff14e0 g     O .bss	000004b0 SD
0000884c g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
000098f8  w    F .text	00000006 can0_message_isr
1fff0eb8 g     O .data	00000004 _impure_ptr
0000fc94  w    O .text	00000024 vtable for Stream
000098f8  w    F .text	00000006 can1_message_isr
00003f24 g     F .text	0000002e ExFatFile::peek()
0000fcb8  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
000098f8  w    F .text	00000006 nmi_isr
00007440 g     F .text	00000134 FatFile::lfnUniqueSfn(fname_t*)
00000bd4  w    F .text	00000014 SDFile::write(void const*, unsigned int)
00007c8c g     F .text	00000028 FsVolume::open(char const*, int)
000084dc g     F .text	0000000c SdioCard::errorCode() const
00005c1c g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000bc0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
0001057c g       .text	00000000 __preinit_array_end
000007cc g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00007ce4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
000098f8  w    F .text	00000006 sdhc_isr
00003814 g     F .text	00000020 minute()
000047c8 g     F .text	00000110 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
000049a0 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000081bc g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000122c g     F .text	00000188 MTPStorage_SD::DeleteObject(unsigned long)
0000c0a0 g     F .text	0000002a __ascii_mbtowc
00007dac g     F .text	0000003e SdSpiCard::isBusy()
0000ffa0 g     O .text	00000058 vtable for SdSpiCard
00007fcc  w    F .text	00000008 SdSpiCard::readCID(CID*)
00000680 g     F .text	0000008c setup
00010284 g     O .text	00000060 usb_descriptor_list
00009d28 g     F .text	0000003c usb_rx
00008640 g     F .text	00000020 SdioCard::status()
00000d94 g     F .text	0000015c MTPStorage_SD::ResetIndex()
000098f8  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
000098f8  w    F .text	00000006 uart0_error_isr
000004cc  w    F .text	0000000c File::size()
00003928  w    F .text	00000062 SDClass::rmdir(char const*)
00009c9c g     F .text	00000040 usb_malloc
00005c2c g     F .text	000001de FatFile::read(void*, unsigned int)
000098f8  w    F .text	00000006 i2s0_isr
00005acc g     F .text	0000004a FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00007cb4 g     F .text	00000004 operator new(unsigned int, unsigned long*)
00007fc4  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
00000554  w    F .text	0000002c File::read()
000097c8 g     F .text	00000048 usb_serial_write_buffer_free
00007e6c g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
000098f8  w    F .text	00000006 enet_timer_isr
0000b6b0 g     F .text	00000012 .hidden __aeabi_dcmpeq
000005e8  w    F .text	00000030 File::~File()
0000abe4  w    F .text	0000000e _write
1fff1438 g       .data	00000000 _edata
00004a68 g     F .text	0000004e ExFatPartition::fatPut(unsigned long, unsigned long)
00001e60 g     F .text	0000024c MTPD::GetObjectInfo(unsigned long)
0000853c  w    F .text	00000002 SdioCard::~SdioCard()
000098f8  w    F .text	00000006 i2s0_tx_isr
000098f8  w    F .text	00000006 adc1_isr
000082b8 g     F .text	0000002c SdSpiCard::syncDevice()
00005908 g     F .text	000000d4 FatFile::addDirCluster()
00000474  w    F .text	0000000c File::read(void*, unsigned int)
0000ab84  w    F .text	00000004 usb_serial_class::availableForWrite()
000098f8  w    F .text	00000006 cmp0_isr
0000ae18 g     F .text	0000004c ultoa
000038c0  w    F .text	00000002 SDClass::~SDClass()
00003834 g     F .text	00000020 second()
00007ae8 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
0000108c g     F .text	0000004e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000acb4 g     F .text	00000004 operator new(unsigned int)
0000ab18 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1430 g     O .data	00000004 __malloc_trim_threshold
0000ab74  w    F .text	00000004 usb_serial_class::peek()
00000618  w    F .text	00000068 MTPStorage_SD::~MTPStorage_SD()
1fff14ac g     O .bss	00000010 mtpd
0000d230 g     F .text	00000114 __mdiff
0000852c g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b740 g     F .text	0000004e .hidden __aeabi_d2iz
00004a20 g     F .text	00000048 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff19e0 g     O .bss	00000001 usb_cdc_transmit_flush_timer
000098f8  w    F .text	00000006 pit_isr
000037f4 g     F .text	00000020 hour()
00008998 g     F .text	00000004 SdioCard::writeStop()
00007cd4  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00003b78 g     F .text	00000014 ExFatFile::close()
000102f8 g     O .text	00000101 _ctype_
000098f8  w    F .text	00000006 dac0_isr
00007cc0  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
0001057c g       .text	00000000 __init_array_start
0000baa4  w    F .text	00000002 .hidden __aeabi_idiv0
000098f8  w    F .text	00000006 can1_tx_warn_isr
00000ef4 g     F .text	000000d0 MTPStorage_SD::OpenIndex()
0000b714 g     F .text	0000002c .hidden __unorddf2
000098f8  w    F .text	00000006 uart0_status_isr
000098f8  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000c840 g     F .text	000000dc strlen
00006ebc g     F .text	0000002e FatFile::openCluster(FatFile*)
0000b6a0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b604 g     F .text	0000008a .hidden __gedf2
00005e88 g     F .text	000000ba FatFile::seekSet(unsigned long)
0000168c g     F .text	000000e4 MTPStorage_SD::Create(unsigned long, bool, char const*)
1fff0a40 g     O .data	0000002e usb_string_product_name_default
0000ca08 g     F .text	00000018 vdprintf
000098f8  w    F .text	00000006 dma_ch1_isr
000087e0 g     F .text	0000006c SdioCard::sectorCount()
00007bc8 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
00009d64 g     F .text	0000002c usb_tx_packet_count
000060dc g     F .text	000000b8 FatFile::openNext(FatFile*, int)
0000fff8 g     O .text	00000058 vtable for SdioCard
0000b138 g     F .text	0000003a .hidden __aeabi_f2d
000098f8  w    F .text	00000006 dma_ch5_isr
00001180 g     F .text	00000040 MTPStorage_SD::close()
00006eec g     F .text	00000134 FatFile::getName(char*, unsigned int)
000098f8  w    F .text	00000006 can0_rx_warn_isr
00000618  w    F .text	00000068 MTPStorage_SD::~MTPStorage_SD()
000013b4 g     F .text	000000bc MTPStorage_SD::rename(unsigned long, char const*)
000098f8  w    F .text	00000006 can0_tx_warn_isr
000098f8  w    F .text	00000006 uart4_status_isr
000091dc g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00009320 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000ae78 g     F .text	0000027a .hidden __subdf3
0001057c g       .text	00000000 __preinit_array_start
000048d8 g     F .text	000000c8 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00001168 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
00000598  w    F .text	00000028 File::whoami()
0000cefc g     F .text	0000005a __lo0bits
000007a4 g     F .text	00000004 MTPStorage_SD::has_directories()
00005fac g     F .text	00000130 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000ae64 g     F .text	0000000a __aeabi_atexit
00002ac8 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
00000974 g     F .text	00000024 MTPStorage_SD::clusterSize()
00004d9c g     F .text	00000126 ExFatFile::remove()
000098f8  w    F .text	00000006 cmp2_isr
0000ab5c g     F .text	00000004 pendablesrvreq_isr
00002d68 g     F .text	00000072 MTPD::SendObject()
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0ebc g     O .data	0000016c __global_locale
000098f8  w    F .text	00000006 wakeup_isr
00008d7c g     F .text	00000394 SdioCard::begin(SdioConfig)
0000466c g     F .text	0000000c FsCache::invalidate()
000098f8  w    F .text	00000006 cmp3_isr
0000358c g     F .text	000001b0 breakTime(long, tmElements_t&)
0000ac10 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000069d4 g     F .text	00000092 FatPartition::fatGet(unsigned long, unsigned long*)
0000bb20 g     F .text	00000010 free
000098f8  w    F .text	00000006 tpm2_isr
0000ce3c g     F .text	00000080 __multadd
0000ce28 g     F .text	00000012 _Bfree
00000b34  w    F .text	00000010 SDFile::size()
000098f8  w    F .text	00000006 dma_ch0_isr
00000d38  w    F .text	0000005c SDFile::~SDFile()
1fff0a74  w    O .data	00000016 usb_string_serial_number
000098f8  w    F .text	00000006 enet_tx_isr
00004c04 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00009250 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00008510 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	........]...a...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	................
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	9900 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	9b30 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	9a14 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	9a14 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	bac0 <__libc_init_array>

	startup_late_hook();
     32c:	bl	990c <startup_late_hook>
	main();
     330:	bl	aca0 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff1438
     360:	.word	0x00010594
     364:	.word	0x1fff0970
     368:	.word	0x1fff1438
     36c:	.word	0x1fff1b84
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1438
     42c:	.word	0x00000000
     430:	.word	0x00010590

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff143c
     460:	.word	0x00010590
     464:	.word	0x1fff1438
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     474:	ldr	r0, [r0, #16]
     476:	cbz	r0, 47e <File::read(void*, unsigned int)+0xa>
     478:	ldr	r3, [r0, #0]
     47a:	ldr	r3, [r3, #40]	; 0x28
     47c:	bx	r3
	}
     47e:	bx	lr

00000480 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     480:	ldr	r0, [r0, #16]
     482:	cbz	r0, 48a <File::write(void const*, unsigned int)+0xa>
     484:	ldr	r3, [r0, #0]
     486:	ldr	r3, [r3, #44]	; 0x2c
     488:	bx	r3
	}
     48a:	bx	lr

0000048c <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     48c:	ldr	r0, [r0, #16]
     48e:	cbz	r0, 496 <File::available()+0xa>
     490:	ldr	r3, [r0, #0]
     492:	ldr	r3, [r3, #16]
     494:	bx	r3
	}
     496:	bx	lr

00000498 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     498:	ldr	r0, [r0, #16]
     49a:	cbz	r0, 4a2 <File::peek()+0xa>
     49c:	ldr	r3, [r0, #0]
     49e:	ldr	r3, [r3, #24]
     4a0:	bx	r3
	}
     4a2:	mov.w	r0, #4294967295
     4a6:	bx	lr

000004a8 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4a8:	ldr	r0, [r0, #16]
     4aa:	cbz	r0, 4b2 <File::flush()+0xa>
     4ac:	ldr	r3, [r0, #0]
     4ae:	ldr	r3, [r3, #12]
     4b0:	bx	r3
     4b2:	bx	lr

000004b4 <File::seek(unsigned long, int)>:
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4b4:	ldr	r0, [r0, #16]
     4b6:	cbz	r0, 4be <File::seek(unsigned long, int)+0xa>
     4b8:	ldr	r3, [r0, #0]
     4ba:	ldr	r3, [r3, #48]	; 0x30
     4bc:	bx	r3
	}
     4be:	bx	lr

000004c0 <File::position()>:
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
     4c0:	ldr	r0, [r0, #16]
     4c2:	cbz	r0, 4ca <File::position()+0xa>
     4c4:	ldr	r3, [r0, #0]
     4c6:	ldr	r3, [r3, #52]	; 0x34
     4c8:	bx	r3
	}
     4ca:	bx	lr

000004cc <File::size()>:
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
     4cc:	ldr	r0, [r0, #16]
     4ce:	cbz	r0, 4d6 <File::size()+0xa>
     4d0:	ldr	r3, [r0, #0]
     4d2:	ldr	r3, [r3, #56]	; 0x38
     4d4:	bx	r3
	}
     4d6:	bx	lr

000004d8 <File::close()>:
	virtual void close() {
		if (f) f->close();
     4d8:	ldr	r0, [r0, #16]
     4da:	cbz	r0, 4e2 <File::close()+0xa>
     4dc:	ldr	r3, [r0, #0]
     4de:	ldr	r3, [r3, #60]	; 0x3c
     4e0:	bx	r3
     4e2:	bx	lr

000004e4 <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     4e4:	ldr	r0, [r0, #16]
     4e6:	cbz	r0, 4ee <File::operator bool()+0xa>
     4e8:	ldr	r3, [r0, #0]
     4ea:	ldr	r3, [r3, #64]	; 0x40
     4ec:	bx	r3
	}
     4ee:	bx	lr

000004f0 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::name()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #68]	; 0x44
     4f8:	bx	r3
	}
     4fa:	ldr	r0, [pc, #4]	; (500 <File::name()+0x10>)
     4fc:	bx	lr
     4fe:	nop
     500:	.word	0x0000fc78

00000504 <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     504:	ldr	r0, [r0, #16]
     506:	cbz	r0, 50e <File::isDirectory()+0xa>
     508:	ldr	r3, [r0, #0]
     50a:	ldr	r3, [r3, #72]	; 0x48
     50c:	bx	r3
	}
     50e:	bx	lr

00000510 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     510:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     512:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     514:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     516:	cbz	r3, 524 <File::openNextFile(unsigned char)+0x14>
     518:	ldr	r5, [r3, #0]
     51a:	mov	r1, r3
     51c:	ldr	r3, [r5, #76]	; 0x4c
     51e:	blx	r3
	}
     520:	mov	r0, r4
     522:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     524:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     528:	ldr	r2, [pc, #24]	; (544 <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     52a:	strb	r3, [r4, #4]
     52c:	strb	r3, [r4, #12]
     52e:	str	r0, [r4, #8]
     530:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     532:	ldr	r3, [r1, #16]
     534:	str	r3, [r4, #16]
		if (f) f->refcount++;
     536:	cmp	r3, #0
     538:	beq.n	520 <File::openNextFile(unsigned char)+0x10>
     53a:	ldr	r2, [r3, #16]
     53c:	adds	r2, #1
     53e:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     540:	mov	r0, r4
     542:	pop	{r3, r4, r5, pc}
     544:	.word	0x0000fc0c

00000548 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     548:	ldr	r0, [r0, #16]
     54a:	cbz	r0, 552 <File::rewindDirectory()+0xa>
     54c:	ldr	r3, [r0, #0]
     54e:	ldr	r3, [r3, #80]	; 0x50
     550:	bx	r3
     552:	bx	lr

00000554 <File::read()>:
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     554:	ldr	r0, [r0, #16]
     556:	cbz	r0, 57a <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     558:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     55a:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     55c:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     55e:	ldr	r3, [r3, #40]	; 0x28
     560:	movs	r2, #1
     562:	add.w	r1, sp, #7
     566:	blx	r3
     568:	cbz	r0, 574 <File::read()+0x20>
		return b;
     56a:	ldrb.w	r0, [sp, #7]
	}
     56e:	add	sp, #12
     570:	ldr.w	pc, [sp], #4
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     574:	mov.w	r0, #4294967295
     578:	b.n	56e <File::read()+0x1a>
     57a:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     57e:	bx	lr

00000580 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     580:	push	{r4, lr}
     582:	sub	sp, #8
     584:	add	r3, sp, #8
		return write(&b, 1);
     586:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     588:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     58c:	ldr	r4, [r2, #44]	; 0x2c
     58e:	mov	r1, r3
     590:	movs	r2, #1
     592:	blx	r4
	}
     594:	add	sp, #8
     596:	pop	{r4, pc}

00000598 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     598:	push	{r4, lr}
     59a:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     59c:	mov	r2, r0
     59e:	ldr	r3, [r0, #16]
     5a0:	ldr	r1, [pc, #20]	; (5b8 <File::whoami()+0x20>)
     5a2:	ldr	r0, [pc, #24]	; (5bc <File::whoami()+0x24>)
     5a4:	bl	abf4 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5a8:	ldr	r0, [r4, #16]
     5aa:	cbz	r0, 5b6 <File::whoami()+0x1e>
     5ac:	ldr	r3, [r0, #0]
	}
     5ae:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5b2:	ldr	r3, [r3, #36]	; 0x24
     5b4:	bx	r3
     5b6:	pop	{r4, pc}
     5b8:	.word	0x0000fc60
     5bc:	.word	0x1fff098c

000005c0 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5c0:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     5c2:	ldr	r3, [pc, #32]	; (5e4 <File::~File()+0x24>)
     5c4:	push	{r4, lr}
     5c6:	mov	r4, r0
     5c8:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5ca:	cbz	r2, 5de <File::~File()+0x1e>
     5cc:	ldr	r3, [r2, #16]
     5ce:	subs	r3, #1
     5d0:	str	r3, [r2, #16]
     5d2:	cbnz	r3, 5de <File::~File()+0x1e>
     5d4:	ldr	r0, [r0, #16]
     5d6:	cbz	r0, 5de <File::~File()+0x1e>
     5d8:	ldr	r3, [r0, #0]
     5da:	ldr	r3, [r3, #32]
     5dc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     5de:	mov	r0, r4
     5e0:	pop	{r4, pc}
     5e2:	nop
     5e4:	.word	0x0000fc0c

000005e8 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5e8:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     5ea:	ldr	r3, [pc, #40]	; (614 <File::~File()+0x2c>)
     5ec:	push	{r4, lr}
     5ee:	mov	r4, r0
     5f0:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5f2:	cbz	r2, 606 <File::~File()+0x1e>
     5f4:	ldr	r3, [r2, #16]
     5f6:	subs	r3, #1
     5f8:	str	r3, [r2, #16]
     5fa:	cbnz	r3, 606 <File::~File()+0x1e>
     5fc:	ldr	r0, [r0, #16]
     5fe:	cbz	r0, 606 <File::~File()+0x1e>
     600:	ldr	r3, [r0, #0]
     602:	ldr	r3, [r3, #32]
     604:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     606:	mov	r0, r4
     608:	movs	r1, #20
     60a:	bl	acb8 <operator delete(void*, unsigned int)>
     60e:	mov	r0, r4
     610:	pop	{r4, pc}
     612:	nop
     614:	.word	0x0000fc0c

00000618 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     618:	ldr	r2, [r0, #60]	; 0x3c

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
     61a:	push	{r3, r4, r5, lr}
     61c:	ldr	r3, [pc, #88]	; (678 <MTPStorage_SD::~MTPStorage_SD()+0x60>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     61e:	ldr	r5, [pc, #92]	; (67c <MTPStorage_SD::~MTPStorage_SD()+0x64>)
     620:	str	r3, [r0, #0]
     622:	mov	r4, r0
     624:	str	r5, [r0, #44]	; 0x2c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     626:	cbz	r2, 630 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     628:	ldr	r3, [r2, #16]
     62a:	subs	r3, #1
     62c:	str	r3, [r2, #16]
     62e:	cbz	r3, 65a <MTPStorage_SD::~MTPStorage_SD()+0x42>
     630:	ldr	r2, [r4, #40]	; 0x28
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     632:	str	r5, [r4, #24]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     634:	cbz	r2, 63e <MTPStorage_SD::~MTPStorage_SD()+0x26>
     636:	ldr	r3, [r2, #16]
     638:	subs	r3, #1
     63a:	str	r3, [r2, #16]
     63c:	cbz	r3, 668 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     63e:	ldr	r2, [r4, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     640:	str	r5, [r4, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     642:	cbz	r2, 656 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     644:	ldr	r3, [r2, #16]
     646:	subs	r3, #1
     648:	str	r3, [r2, #16]
     64a:	cbnz	r3, 656 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     64c:	ldr	r0, [r4, #20]
     64e:	cbz	r0, 656 <MTPStorage_SD::~MTPStorage_SD()+0x3e>
     650:	ldr	r3, [r0, #0]
     652:	ldr	r3, [r3, #32]
     654:	blx	r3
     656:	mov	r0, r4
     658:	pop	{r3, r4, r5, pc}
     65a:	ldr	r0, [r0, #60]	; 0x3c
     65c:	cmp	r0, #0
     65e:	beq.n	630 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     660:	ldr	r3, [r0, #0]
     662:	ldr	r3, [r3, #32]
     664:	blx	r3
     666:	b.n	630 <MTPStorage_SD::~MTPStorage_SD()+0x18>
     668:	ldr	r0, [r4, #40]	; 0x28
     66a:	cmp	r0, #0
     66c:	beq.n	63e <MTPStorage_SD::~MTPStorage_SD()+0x26>
     66e:	ldr	r3, [r0, #0]
     670:	ldr	r3, [r3, #32]
     672:	blx	r3
     674:	b.n	63e <MTPStorage_SD::~MTPStorage_SD()+0x26>
     676:	nop
     678:	.word	0x0000fd64
     67c:	.word	0x0000fc0c

00000680 <setup>:
    to=millis();
  }
}

void setup()
{ 
     680:	push	{r4, r5, r6, lr}
     682:	ldr	r2, [pc, #108]	; (6f0 <setup+0x70>)
     684:	ldr	r5, [pc, #108]	; (6f4 <setup+0x74>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     686:	ldr	r4, [pc, #112]	; (6f8 <setup+0x78>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     688:	ldr	r0, [pc, #112]	; (6fc <setup+0x7c>)
     68a:	sub	sp, #8
  while(!Serial && millis()<3000); 
     68c:	movw	r1, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     690:	ldrb	r3, [r5, #0]
     692:	cbz	r3, 6be <setup+0x3e>
     694:	ldrb	r3, [r4, #0]
     696:	lsls	r3, r3, #31
     698:	bpl.n	6be <setup+0x3e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     69a:	ldr	r3, [r2, #0]
     69c:	ldr	r6, [r0, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     69e:	subs	r3, r3, r6
     6a0:	cmp	r3, #14
     6a2:	bls.n	6be <setup+0x3e>
  usb_mtp_configure();
     6a4:	bl	94a4 <usb_mtp_configure>
  if(!Storage_init()) {Serial.println("No storage"); while(1);};
     6a8:	bl	1958 <Storage_init()>
     6ac:	cbnz	r0, 6d4 <setup+0x54>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     6ae:	movs	r1, #10
     6b0:	ldr	r0, [pc, #76]	; (700 <setup+0x80>)
     6b2:	bl	96a8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     6b6:	ldr	r0, [pc, #76]	; (704 <setup+0x84>)
     6b8:	bl	abc4 <Print::println()>
     6bc:	b.n	6bc <setup+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6be:	ldr	r3, [r2, #0]
     6c0:	str	r3, [sp, #4]
	return ret;
     6c2:	ldr	r3, [sp, #4]
  }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
     6c4:	cmp	r3, r1
     6c6:	bls.n	690 <setup+0x10>
  usb_mtp_configure();
     6c8:	bl	94a4 <usb_mtp_configure>
  if(!Storage_init()) {Serial.println("No storage"); while(1);};
     6cc:	bl	1958 <Storage_init()>
     6d0:	cmp	r0, #0
     6d2:	beq.n	6ae <setup+0x2e>
     6d4:	movs	r1, #8
     6d6:	ldr	r0, [pc, #48]	; (708 <setup+0x88>)
     6d8:	bl	96a8 <usb_serial_write>
     6dc:	ldr	r0, [pc, #36]	; (704 <setup+0x84>)
     6de:	bl	abc4 <Print::println()>

  Serial.println("MTP test");

#if USE_SDIO==1
  pinMode(13,OUTPUT);
     6e2:	movs	r1, #1
     6e4:	movs	r0, #13
     6e6:	bl	9a44 <pinMode>
#endif

}
     6ea:	add	sp, #8
     6ec:	pop	{r4, r5, r6, pc}
     6ee:	nop
     6f0:	.word	0x1fff19f4
     6f4:	.word	0x1fff1af8
     6f8:	.word	0x1fff19f0
     6fc:	.word	0x1fff1b70
     700:	.word	0x0000fc7c
     704:	.word	0x1fff098c
     708:	.word	0x0000fc88

0000070c <loop>:

void loop()
{ 
  mtpd.loop();
     70c:	ldr	r0, [pc, #4]	; (714 <loop+0x8>)
     70e:	b.w	2ddc <MTPD::loop()>
     712:	nop
     714:	.word	0x1fff14ac

00000718 <_GLOBAL__sub_I_storage>:

  //logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
     718:	push	{r3, r4, r5, r6, r7, lr}
     71a:	ldr	r4, [pc, #88]	; (774 <_GLOBAL__sub_I_storage+0x5c>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     71c:	ldr	r3, [pc, #88]	; (778 <_GLOBAL__sub_I_storage+0x60>)
     71e:	ldr	r0, [pc, #92]	; (77c <_GLOBAL__sub_I_storage+0x64>)
     720:	str	r0, [r4, #0]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     722:	movs	r5, #0
     724:	mov.w	r6, #1000	; 0x3e8
     728:	str	r3, [r4, #4]
     72a:	str	r3, [r4, #24]
     72c:	str	r3, [r4, #44]	; 0x2c
#endif

  #include "MTP.h"
  #include "usb1_mtp.h"

  MTPStorage_SD storage;
     72e:	ldr	r2, [pc, #80]	; (780 <_GLOBAL__sub_I_storage+0x68>)
     730:	ldr	r1, [pc, #80]	; (784 <_GLOBAL__sub_I_storage+0x6c>)
     732:	strb	r5, [r4, #8]
     734:	mvn.w	r7, #1
     738:	mov	r0, r4
     73a:	strb	r5, [r4, #16]
     73c:	str	r5, [r4, #20]
     73e:	strb	r5, [r4, #28]
     740:	strb.w	r5, [r4, #36]	; 0x24
     744:	str	r5, [r4, #40]	; 0x28
     746:	strb.w	r5, [r4, #48]	; 0x30
     74a:	strb.w	r5, [r4, #56]	; 0x38
     74e:	str	r5, [r4, #60]	; 0x3c
     750:	str	r6, [r4, #12]
     752:	str	r6, [r4, #32]
     754:	str	r6, [r4, #52]	; 0x34
     756:	str	r7, [r4, #68]	; 0x44
     758:	str	r5, [r4, #64]	; 0x40
     75a:	str	r5, [r4, #72]	; 0x48
     75c:	strb.w	r5, [r4, #76]	; 0x4c
     760:	strb.w	r5, [r4, #77]	; 0x4d
     764:	bl	ae64 <__aeabi_atexit>
#define MTP_NAME  "Teensy"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
     768:	ldr	r3, [pc, #28]	; (788 <_GLOBAL__sub_I_storage+0x70>)
     76a:	stmia.w	r3, {r4, r5}
     76e:	strb	r5, [r3, #8]
     770:	str	r5, [r3, #12]
     772:	pop	{r3, r4, r5, r6, r7, pc}
     774:	.word	0x1fff1454
     778:	.word	0x0000fc0c
     77c:	.word	0x0000fd64
     780:	.word	0x1fff0970
     784:	.word	0x00000619
     788:	.word	0x1fff14ac

0000078c <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     78c:	ldr	r3, [r0, #92]	; 0x5c
     78e:	cbz	r3, 794 <SDFile::operator bool()+0x8>
     790:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     792:	bx	lr
     794:	ldr	r0, [r0, #96]	; 0x60
     796:	adds	r0, #0
     798:	it	ne
     79a:	movne	r0, #1
     79c:	bx	lr
     79e:	nop

000007a0 <MTPStorage_SD::readonly()>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly() { return false; }
     7a0:	movs	r0, #0
     7a2:	bx	lr

000007a4 <MTPStorage_SD::has_directories()>:
  bool MTPStorage_SD::has_directories() { return true; }
     7a4:	movs	r0, #1
     7a6:	bx	lr

000007a8 <MTPStorage_SD::CloseIndex()>:
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::CloseIndex()
  {
     7a8:	push	{r4, lr}
     7aa:	mov	r4, r0
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     7ac:	ldr	r0, [r0, #20]
     7ae:	cbz	r0, 7b6 <MTPStorage_SD::CloseIndex()+0xe>
     7b0:	ldr	r3, [r0, #0]
     7b2:	ldr	r3, [r3, #60]	; 0x3c
     7b4:	blx	r3
    mtp_lock_storage(true);
    index_.close();
    mtp_lock_storage(false);
    index_generated = false;
     7b6:	movs	r3, #0
     7b8:	strb.w	r3, [r4, #76]	; 0x4c
    index_entries_ = 0;
     7bc:	str	r3, [r4, #72]	; 0x48
     7be:	pop	{r4, pc}

000007c0 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     7c0:	ldr	r0, [r0, #40]	; 0x28
     7c2:	cbz	r0, 7ca <MTPStorage_SD::write(char const*, unsigned long)+0xa>
     7c4:	ldr	r3, [r0, #0]
     7c6:	ldr	r3, [r3, #44]	; 0x2c
     7c8:	bx	r3
     7ca:	bx	lr

000007cc <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
  #define indexFile "/mtpindex.dat"

   #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
     7cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7d0:	mov	r7, r1
     7d2:	mov	r6, r2
     7d4:	mov	r8, r0
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
     7d6:	bl	3894 <year()>
     7da:	mov	r4, r0
     7dc:	bl	3874 <month()>
     7e0:	mov	r5, r0
     7e2:	bl	3854 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     7e6:	subw	r3, r4, #1980	; 0x7bc
     7ea:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     7ec:	cmp	r3, #127	; 0x7f
     7ee:	bhi.n	7f6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     7f0:	uxtb	r2, r5
     7f2:	cmp	r2, #12
     7f4:	bls.n	84e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     7f6:	movs	r3, #0
     7f8:	strh.w	r3, [r8]

    // Return time using FS_TIME macro to format fields.
    *time = FS_TIME(hour(), minute(), second());
     7fc:	bl	37f4 <hour()>
     800:	mov	r4, r0
     802:	bl	3814 <minute()>
     806:	mov	r5, r0
     808:	bl	3834 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     80c:	uxtb	r3, r4
     80e:	cmp	r3, #23
     810:	bhi.n	818 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     812:	uxtb	r3, r5
     814:	cmp	r3, #59	; 0x3b
     816:	bls.n	830 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     818:	movs	r3, #0
     81a:	strh	r3, [r7, #0]
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
     81c:	bl	3834 <second()>
     820:	tst.w	r0, #1
     824:	ite	ne
     826:	movne	r3, #100	; 0x64
     828:	moveq	r3, #0
     82a:	strb	r3, [r6, #0]
     82c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     830:	uxtb	r3, r0
     832:	cmp	r3, #59	; 0x3b
     834:	bhi.n	818 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     836:	lsls	r4, r4, #11
     838:	lsls	r3, r5, #5
     83a:	and.w	r4, r4, #522240	; 0x7f800
     83e:	and.w	r3, r3, #8160	; 0x1fe0
     842:	orrs	r3, r4
     844:	ubfx	r0, r0, #1, #7
     848:	orrs	r3, r0
     84a:	uxth	r3, r3
     84c:	b.n	81a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>
   #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
     84e:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     850:	cmp	r0, #31
     852:	bhi.n	7f6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     854:	lsls	r5, r5, #5
     856:	and.w	r5, r5, #8160	; 0x1fe0
     85a:	orrs	r0, r5
     85c:	orr.w	r3, r0, r3, lsl #9
     860:	uxth	r3, r3
     862:	b.n	7f8 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000864 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     864:	push	{r4, lr}
     866:	mov	r4, r0
		if (filename) {
     868:	ldr	r0, [r0, #100]	; 0x64
     86a:	cbz	r0, 874 <SDFile::close()+0x10>
			free(filename);
     86c:	bl	bb20 <free>
			filename = nullptr;
     870:	movs	r3, #0
     872:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     874:	add.w	r0, r4, #36	; 0x24
	}
     878:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     87c:	b.w	7ac0 <FsBaseFile::close()>

00000880 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     880:	mov	r2, r0
     882:	ldr	r3, [r0, #16]
     884:	ldr	r1, [pc, #4]	; (88c <SDFile::whoami()+0xc>)
     886:	ldr	r0, [pc, #8]	; (890 <SDFile::whoami()+0x10>)
     888:	b.w	abf4 <Print::printf(char const*, ...)>
     88c:	.word	0x0000fdac
     890:	.word	0x1fff098c

00000894 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     894:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     898:	movs	r3, #0
     89a:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     89c:	mov	r2, r3
     89e:	mov	r5, r0
     8a0:	adds	r1, #36	; 0x24
     8a2:	add	r0, sp, #16
     8a4:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     8a8:	ldr	r7, [pc, #148]	; (940 <SDFile::openNextFile(unsigned char)+0xac>)
     8aa:	strb.w	r3, [sp, #4]
     8ae:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     8b2:	str	r3, [sp, #72]	; 0x48
     8b4:	str	r3, [sp, #76]	; 0x4c
     8b6:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     8b8:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     8ba:	bl	7b68 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     8be:	ldr	r3, [sp, #72]	; 0x48
     8c0:	cmp	r3, #0
     8c2:	beq.n	92a <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     8c4:	movs	r0, #104	; 0x68
     8c6:	bl	acb4 <operator new(unsigned int)>
     8ca:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     8cc:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     8d0:	ldr	r2, [sp, #8]
     8d2:	ldrb.w	r3, [sp, #12]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     8d6:	ldr	r0, [pc, #108]	; (944 <SDFile::openNextFile(unsigned char)+0xb0>)
     8d8:	ldr	r1, [pc, #108]	; (948 <SDFile::openNextFile(unsigned char)+0xb4>)
     8da:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     8dc:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     8e0:	movs	r6, #0
     8e2:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     8e4:	str	r1, [r4, #20]
     8e6:	str	r2, [r4, #28]
     8e8:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     8ec:	add.w	r0, r4, #36	; 0x24
     8f0:	add	r1, sp, #16
     8f2:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     8f4:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     8f6:	str	r6, [r4, #16]
     8f8:	str.w	r8, [r4, #8]
     8fc:	bl	7a48 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     900:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     902:	ldr	r2, [pc, #72]	; (94c <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     904:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     906:	adds	r3, #1
     908:	str	r6, [r4, #100]	; 0x64
     90a:	strb	r6, [r5, #4]
     90c:	str.w	r8, [r5, #8]
     910:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     912:	str	r4, [r5, #16]
		if (f) f->refcount++;
     914:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     916:	str	r2, [r5, #0]
     918:	ldr	r3, [pc, #52]	; (950 <SDFile::openNextFile(unsigned char)+0xbc>)
     91a:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     91c:	add	r0, sp, #16
     91e:	bl	7ac0 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     922:	mov	r0, r5
     924:	add	sp, #80	; 0x50
     926:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     92a:	ldr	r3, [sp, #76]	; 0x4c
     92c:	cmp	r3, #0
     92e:	bne.n	8c4 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     930:	ldr	r2, [pc, #24]	; (94c <SDFile::openNextFile(unsigned char)+0xb8>)
     932:	strb	r3, [r5, #4]
     934:	str	r4, [r5, #8]
     936:	strb	r3, [r5, #12]
     938:	str	r3, [r5, #16]
     93a:	str	r2, [r5, #0]
     93c:	b.n	918 <SDFile::openNextFile(unsigned char)+0x84>
     93e:	nop
     940:	.word	0x0000fce4
     944:	.word	0x0000fd08
     948:	.word	0x0000fc9c
     94c:	.word	0x0000fc0c
     950:	.word	0x0000fcc0

00000954 <MTPStorage_SD::clusterCount()>:
#if USE_SDFS==1
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
#else
  uint32_t MTPStorage_SD::clusterCount() { return SD.sdfs.clusterCount(); }
     954:	ldr	r2, [pc, #24]	; (970 <MTPStorage_SD::clusterCount()+0x1c>)
     956:	ldr.w	r3, [r2, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     95a:	cbz	r3, 962 <MTPStorage_SD::clusterCount()+0xe>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     95c:	ldr	r0, [r3, #28]
     95e:	subs	r0, #1
     960:	bx	lr
     962:	ldr.w	r0, [r2, #1152]	; 0x480
     966:	cbz	r0, 96c <MTPStorage_SD::clusterCount()+0x18>
     968:	ldr.w	r0, [r0, #1064]	; 0x428
     96c:	bx	lr
     96e:	nop
     970:	.word	0x1fff14e0

00000974 <MTPStorage_SD::clusterSize()>:
  uint32_t MTPStorage_SD::freeClusters() { return SD.sdfs.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return SD.sdfs.sectorsPerCluster(); }
     974:	ldr	r2, [pc, #28]	; (994 <MTPStorage_SD::clusterSize()+0x20>)
     976:	ldr.w	r3, [r2, #1148]	; 0x47c
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     97a:	cbz	r3, 980 <MTPStorage_SD::clusterSize()+0xc>
     97c:	ldrb	r0, [r3, #4]
     97e:	bx	lr
     980:	ldr.w	r0, [r2, #1152]	; 0x480
     984:	cbz	r0, 990 <MTPStorage_SD::clusterSize()+0x1c>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
     986:	ldrb.w	r0, [r0, #1085]	; 0x43d
     98a:	movs	r3, #1
     98c:	lsl.w	r0, r3, r0
     990:	bx	lr
     992:	nop
     994:	.word	0x1fff14e0

00000998 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     998:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     99a:	cbz	r2, 9b6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     99c:	ldrb	r3, [r2, #0]
     99e:	and.w	r3, r3, #8
     9a2:	and.w	r0, r3, #255	; 0xff
     9a6:	cbz	r3, 9ea <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     9a8:	ldr	r3, [r2, #28]
     9aa:	ldr	r0, [r2, #20]
     9ac:	subs	r0, r3, r0
     9ae:	it	mi
     9b0:	mvnmi.w	r0, #2147483648	; 0x80000000
     9b4:	bx	lr
     9b6:	ldr	r1, [r0, #76]	; 0x4c
     9b8:	cbz	r1, 9ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     9ba:	ldrb.w	r3, [r1, #49]	; 0x31
     9be:	and.w	r3, r3, #8
     9c2:	and.w	r0, r3, #255	; 0xff
     9c6:	cbz	r3, 9ea <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     9c8:	ldrd	r2, r3, [r1, #16]
     9cc:	ldrd	r0, r1, [r1]
     9d0:	subs	r0, r2, r0
     9d2:	push	{r4, r5}
     9d4:	sbc.w	r1, r3, r1
     9d8:	movs	r5, #0
     9da:	mvn.w	r4, #2147483648	; 0x80000000
     9de:	cmp	r5, r1
     9e0:	it	eq
     9e2:	cmpeq	r4, r0
     9e4:	bcs.n	9e8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     9e6:	mov	r0, r4
    return BaseFile::available();
  }
     9e8:	pop	{r4, r5}
     9ea:	bx	lr
     9ec:	mov	r0, r1
     9ee:	bx	lr

000009f0 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     9f0:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     9f2:	cbz	r3, 9fa <SDFile::peek()+0xa>
     9f4:	mov	r0, r3
     9f6:	b.w	5e0c <FatFile::peek()>
     9fa:	ldr	r0, [r0, #96]	; 0x60
     9fc:	cbz	r0, a02 <SDFile::peek()+0x12>
     9fe:	b.w	3f24 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     a02:	mov.w	r0, #4294967295
     a06:	bx	lr

00000a08 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     a08:	push	{lr}
     a0a:	ldr	r3, [r0, #72]	; 0x48
     a0c:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     a0e:	cbz	r3, a2a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     a10:	mov	r0, r3
     a12:	movs	r2, #1
     a14:	add.w	r1, sp, #7
     a18:	bl	5c2c <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     a1c:	cmp	r0, #1
     a1e:	bne.n	a3a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     a20:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     a24:	add	sp, #12
     a26:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     a2a:	ldr	r0, [r0, #76]	; 0x4c
     a2c:	cbz	r0, a3a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     a2e:	movs	r2, #1
     a30:	add.w	r1, sp, #7
     a34:	bl	3d40 <ExFatFile::read(void*, unsigned int)>
     a38:	b.n	a1c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     a3a:	mov.w	r0, #4294967295
     a3e:	b.n	a24 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000a40 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     a40:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     a42:	cbz	r3, a4a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     a44:	mov	r0, r3
     a46:	b.w	6650 <FatFile::sync()>
     a4a:	ldr	r0, [r0, #76]	; 0x4c
     a4c:	cbz	r0, a52 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     a4e:	b.w	50b8 <ExFatFile::sync()>
     a52:	bx	lr

00000a54 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     a54:	push	{lr}
     a56:	ldr	r3, [r0, #72]	; 0x48
     a58:	sub	sp, #12
     a5a:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     a5e:	cbz	r3, a72 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     a60:	mov	r0, r3
     a62:	movs	r2, #1
     a64:	add.w	r1, sp, #7
     a68:	bl	665c <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     a6c:	add	sp, #12
     a6e:	ldr.w	pc, [sp], #4
     a72:	ldr	r0, [r0, #76]	; 0x4c
     a74:	cmp	r0, #0
     a76:	beq.n	a6c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     a78:	movs	r2, #1
     a7a:	add.w	r1, sp, #7
     a7e:	bl	55a8 <ExFatFile::write(void const*, unsigned int)>
     a82:	add	sp, #12
     a84:	ldr.w	pc, [sp], #4

00000a88 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     a88:	push	{r3, r4, r5, lr}
		if (!filename) {
     a8a:	ldr	r4, [r0, #100]	; 0x64
     a8c:	cbz	r4, a92 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     a8e:	mov	r0, r4
     a90:	pop	{r3, r4, r5, pc}
     a92:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     a94:	mov.w	r0, #256	; 0x100
     a98:	bl	bb10 <malloc>
     a9c:	mov	r1, r0
     a9e:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     aa0:	cbz	r0, ac4 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     aa2:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     aa4:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     aa6:	cbz	r0, ab4 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     aa8:	mov.w	r2, #256	; 0x100
     aac:	bl	6eec <FatFile::getName(char*, unsigned int)>
     ab0:	ldr	r4, [r5, #100]	; 0x64
     ab2:	b.n	a8e <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     ab4:	ldr	r0, [r5, #96]	; 0x60
     ab6:	cbz	r0, aca <SDFile::name()+0x42>
     ab8:	mov.w	r2, #256	; 0x100
     abc:	bl	3b8c <ExFatFile::getName(char*, unsigned int)>
     ac0:	ldr	r4, [r5, #100]	; 0x64
     ac2:	b.n	a8e <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     ac4:	ldr	r4, [pc, #8]	; (ad0 <SDFile::name()+0x48>)
     ac6:	str	r4, [r5, #100]	; 0x64
     ac8:	b.n	a8e <SDFile::name()+0x6>
     aca:	mov	r4, r1
     acc:	b.n	a8e <SDFile::name()+0x6>
     ace:	nop
     ad0:	.word	0x1fff14bc

00000ad4 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     ad4:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     ad6:	cbz	r3, b00 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     ad8:	ldrb	r2, [r3, #0]
     ada:	tst.w	r2, #112	; 0x70
     ade:	bne.n	ae2 <SDFile::rewindDirectory()+0xe>
     ae0:	bx	lr
     ae2:	push	{r4, lr}
     ae4:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     ae6:	movs	r1, #0
     ae8:	mov	r0, r3
     aea:	bl	5e88 <FatFile::seekSet(unsigned long)>
     aee:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     af0:	cbz	r0, afe <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     af2:	movs	r2, #0
     af4:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     af6:	ldmia.w	sp!, {r4, lr}
     afa:	b.w	3f54 <ExFatFile::seekSet(unsigned long long)>
     afe:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b00:	ldr	r0, [r0, #96]	; 0x60
     b02:	cmp	r0, #0
     b04:	beq.n	ae0 <SDFile::rewindDirectory()+0xc>
     b06:	ldrb.w	r3, [r0, #49]	; 0x31
     b0a:	tst.w	r3, #80	; 0x50
     b0e:	beq.n	ae0 <SDFile::rewindDirectory()+0xc>
     b10:	movs	r2, #0
     b12:	movs	r3, #0
     b14:	b.w	3f54 <ExFatFile::seekSet(unsigned long long)>

00000b18 <MTPStorage_SD::freeClusters()>:
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
#else
  uint32_t MTPStorage_SD::clusterCount() { return SD.sdfs.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return SD.sdfs.freeClusterCount(); }
     b18:	ldr	r3, [pc, #20]	; (b30 <MTPStorage_SD::freeClusters()+0x18>)
     b1a:	ldr.w	r0, [r3, #1148]	; 0x47c
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b1e:	cbz	r0, b24 <MTPStorage_SD::freeClusters()+0xc>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     b20:	b.w	6c14 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b24:	ldr.w	r0, [r3, #1152]	; 0x480
     b28:	cbz	r0, b2e <MTPStorage_SD::freeClusters()+0x16>
     b2a:	b.w	4b54 <ExFatPartition::freeClusterCount()>
     b2e:	bx	lr
     b30:	.word	0x1fff14e0

00000b34 <SDFile::size()>:
		return false;
	}
	virtual uint32_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
     b34:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     b36:	cbz	r3, b3c <SDFile::size()+0x8>
     b38:	ldr	r0, [r3, #28]
     b3a:	bx	lr
     b3c:	ldr	r0, [r0, #96]	; 0x60
     b3e:	cbz	r0, b42 <SDFile::size()+0xe>
     b40:	ldr	r0, [r0, #16]
		return sdfatfile.size();
	}
     b42:	bx	lr

00000b44 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint32_t position() {
     b44:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     b46:	cbz	r3, b4c <SDFile::position()+0x8>
     b48:	ldr	r0, [r3, #20]
     b4a:	bx	lr
     b4c:	ldr	r0, [r0, #96]	; 0x60
     b4e:	cbz	r0, b52 <SDFile::position()+0xe>
     b50:	ldr	r0, [r0, #0]
		return sdfatfile.curPosition();
	}
     b52:	bx	lr

00000b54 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     b54:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     b56:	cbz	r3, b5e <SDFile::read(void*, unsigned int)+0xa>
     b58:	mov	r0, r3
     b5a:	b.w	5c2c <FatFile::read(void*, unsigned int)>
     b5e:	ldr	r0, [r0, #96]	; 0x60
     b60:	cbz	r0, b66 <SDFile::read(void*, unsigned int)+0x12>
     b62:	b.w	3d40 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     b66:	mov.w	r0, #4294967295
     b6a:	bx	lr

00000b6c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     b6c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     b6e:	cbz	r3, b76 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     b70:	mov	r0, r3
     b72:	b.w	5e0c <FatFile::peek()>
     b76:	ldr	r0, [r0, #76]	; 0x4c
     b78:	cbz	r0, b7e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     b7a:	b.w	3f24 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     b7e:	mov.w	r0, #4294967295
     b82:	bx	lr

00000b84 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     b84:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b86:	cbz	r3, b96 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     b88:	ldrb	r3, [r3, #0]
     b8a:	tst.w	r3, #112	; 0x70
     b8e:	ite	ne
     b90:	movne	r0, #1
     b92:	moveq	r0, #0
     b94:	bx	lr
     b96:	ldr	r0, [r0, #96]	; 0x60
     b98:	cbz	r0, ba8 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     b9a:	ldrb.w	r3, [r0, #49]	; 0x31
     b9e:	tst.w	r3, #80	; 0x50
     ba2:	ite	ne
     ba4:	movne	r0, #1
     ba6:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     ba8:	bx	lr
     baa:	nop

00000bac <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     bac:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     bae:	cbz	r3, bb6 <SDFile::flush()+0xa>
     bb0:	mov	r0, r3
     bb2:	b.w	6650 <FatFile::sync()>
     bb6:	ldr	r0, [r0, #96]	; 0x60
     bb8:	cbz	r0, bbe <SDFile::flush()+0x12>
     bba:	b.w	50b8 <ExFatFile::sync()>
     bbe:	bx	lr

00000bc0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     bc0:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     bc2:	cbz	r3, bca <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     bc4:	mov	r0, r3
     bc6:	b.w	665c <FatFile::write(void const*, unsigned int)>
     bca:	ldr	r0, [r0, #76]	; 0x4c
     bcc:	cbz	r0, bd2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     bce:	b.w	55a8 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     bd2:	bx	lr

00000bd4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     bd4:	ldr	r3, [r0, #92]	; 0x5c
     bd6:	cbz	r3, bde <SDFile::write(void const*, unsigned int)+0xa>
     bd8:	mov	r0, r3
     bda:	b.w	665c <FatFile::write(void const*, unsigned int)>
     bde:	ldr	r0, [r0, #96]	; 0x60
     be0:	cbz	r0, be6 <SDFile::write(void const*, unsigned int)+0x12>
     be2:	b.w	55a8 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     be6:	bx	lr

00000be8 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     be8:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     bea:	cbz	r2, c06 <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     bec:	ldrb	r3, [r2, #0]
     bee:	and.w	r3, r3, #8
     bf2:	and.w	r0, r3, #255	; 0xff
     bf6:	cbz	r3, c3a <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     bf8:	ldr	r3, [r2, #28]
     bfa:	ldr	r0, [r2, #20]
     bfc:	subs	r0, r3, r0
     bfe:	it	mi
     c00:	mvnmi.w	r0, #2147483648	; 0x80000000
     c04:	bx	lr
     c06:	ldr	r1, [r0, #96]	; 0x60
     c08:	cbz	r1, c3c <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     c0a:	ldrb.w	r3, [r1, #49]	; 0x31
     c0e:	and.w	r3, r3, #8
     c12:	and.w	r0, r3, #255	; 0xff
     c16:	cbz	r3, c3a <SDFile::available()+0x52>
     c18:	ldrd	r2, r3, [r1, #16]
     c1c:	ldrd	r0, r1, [r1]
     c20:	subs	r0, r2, r0
     c22:	push	{r4, r5}
     c24:	sbc.w	r1, r3, r1
     c28:	movs	r5, #0
     c2a:	mvn.w	r4, #2147483648	; 0x80000000
     c2e:	cmp	r5, r1
     c30:	it	eq
     c32:	cmpeq	r4, r0
     c34:	bcs.n	c38 <SDFile::available()+0x50>
     c36:	mov	r0, r4
		return sdfatfile.available();
	}
     c38:	pop	{r4, r5}
     c3a:	bx	lr
     c3c:	mov	r0, r1
     c3e:	bx	lr

00000c40 <SDFile::seek(unsigned long, int)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool seek(uint32_t pos, int mode = SeekSet) {
     c40:	push	{r4, r5}
     c42:	mov	r4, r1
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     c44:	cbz	r2, c54 <SDFile::seek(unsigned long, int)+0x14>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     c46:	cmp	r2, #1
     c48:	beq.n	c80 <SDFile::seek(unsigned long, int)+0x40>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     c4a:	cmp	r2, #2
     c4c:	beq.n	c60 <SDFile::seek(unsigned long, int)+0x20>
		return false;
	}
     c4e:	movs	r0, #0
     c50:	pop	{r4, r5}
     c52:	bx	lr
     c54:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     c56:	cbz	r3, c98 <SDFile::seek(unsigned long, int)+0x58>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c58:	mov	r0, r3
     c5a:	pop	{r4, r5}
     c5c:	b.w	5e88 <FatFile::seekSet(unsigned long)>
     c60:	ldr	r5, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c62:	cbz	r5, ca6 <SDFile::seek(unsigned long, int)+0x66>
     c64:	ldr	r1, [r5, #28]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c66:	movs	r3, #0
     c68:	adds	r2, r4, r1
     c6a:	adc.w	r3, r3, #0
     c6e:	cmp	r3, #1
     c70:	it	eq
     c72:	cmpeq	r2, #0
     c74:	bcs.n	c4e <SDFile::seek(unsigned long, int)+0xe>
     c76:	add	r1, r4
     c78:	mov	r0, r5
     c7a:	pop	{r4, r5}
     c7c:	b.w	5e88 <FatFile::seekSet(unsigned long)>
     c80:	ldr	r5, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     c82:	cbz	r5, cbc <SDFile::seek(unsigned long, int)+0x7c>
     c84:	ldr	r1, [r5, #20]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c86:	movs	r3, #0
     c88:	adds	r2, r1, r4
     c8a:	adc.w	r3, r3, #0
     c8e:	cmp	r3, #1
     c90:	it	eq
     c92:	cmpeq	r2, #0
     c94:	bcs.n	c4e <SDFile::seek(unsigned long, int)+0xe>
     c96:	b.n	c76 <SDFile::seek(unsigned long, int)+0x36>
           m_xFile ? m_xFile->seekSet(pos) : false;
     c98:	ldr	r0, [r0, #96]	; 0x60
     c9a:	cmp	r0, #0
     c9c:	beq.n	c4e <SDFile::seek(unsigned long, int)+0xe>
     c9e:	mov	r2, r1
     ca0:	pop	{r4, r5}
     ca2:	b.w	3f54 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     ca6:	ldr	r0, [r0, #96]	; 0x60
     ca8:	cmp	r0, #0
     caa:	beq.n	c4e <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     cac:	ldrd	r2, r3, [r0, #16]
     cb0:	adds	r2, r2, r1
     cb2:	adc.w	r3, r3, #0
     cb6:	pop	{r4, r5}
     cb8:	b.w	3f54 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     cbc:	ldr	r0, [r0, #96]	; 0x60
     cbe:	cmp	r0, #0
     cc0:	beq.n	c4e <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     cc2:	ldrd	r2, r3, [r0]
     cc6:	adds	r2, r2, r1
     cc8:	adc.w	r3, r3, #0
     ccc:	pop	{r4, r5}
     cce:	b.w	3f54 <ExFatFile::seekSet(unsigned long long)>
     cd2:	nop

00000cd4 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     cd4:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     cd6:	ldr	r3, [r0, #92]	; 0x5c
     cd8:	ldr	r2, [pc, #80]	; (d2c <SDFile::~SDFile()+0x58>)
     cda:	str	r2, [r0, #0]
     cdc:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     cde:	add.w	r5, r0, #36	; 0x24
     ce2:	cbz	r3, d22 <SDFile::~SDFile()+0x4e>
     ce4:	mov	r0, r5
     ce6:	bl	7ac0 <FsBaseFile::close()>
		if (filename) free(filename);
     cea:	ldr	r0, [r4, #100]	; 0x64
     cec:	cbz	r0, cf2 <SDFile::~SDFile()+0x1e>
     cee:	bl	bb20 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     cf2:	ldr	r3, [pc, #60]	; (d30 <SDFile::~SDFile()+0x5c>)
     cf4:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     cf6:	mov	r0, r5
     cf8:	bl	7ac0 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     cfc:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     cfe:	ldr	r3, [pc, #52]	; (d34 <SDFile::~SDFile()+0x60>)
     d00:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d02:	cbz	r2, d16 <SDFile::~SDFile()+0x42>
     d04:	ldr	r3, [r2, #16]
     d06:	subs	r3, #1
     d08:	str	r3, [r2, #16]
     d0a:	cbnz	r3, d16 <SDFile::~SDFile()+0x42>
     d0c:	ldr	r0, [r4, #16]
     d0e:	cbz	r0, d16 <SDFile::~SDFile()+0x42>
     d10:	ldr	r3, [r0, #0]
     d12:	ldr	r3, [r3, #32]
     d14:	blx	r3
	}
     d16:	mov	r0, r4
     d18:	movs	r1, #104	; 0x68
     d1a:	bl	acb8 <operator delete(void*, unsigned int)>
     d1e:	mov	r0, r4
     d20:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d22:	ldr	r3, [r0, #96]	; 0x60
     d24:	cmp	r3, #0
     d26:	bne.n	ce4 <SDFile::~SDFile()+0x10>
     d28:	b.n	cea <SDFile::~SDFile()+0x16>
     d2a:	nop
     d2c:	.word	0x0000fd08
     d30:	.word	0x0000fcc0
     d34:	.word	0x0000fc0c

00000d38 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     d38:	push	{r3, r4, r5, lr}
     d3a:	ldr	r3, [r0, #92]	; 0x5c
     d3c:	ldr	r2, [pc, #72]	; (d88 <SDFile::~SDFile()+0x50>)
     d3e:	str	r2, [r0, #0]
     d40:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     d42:	add.w	r5, r0, #36	; 0x24
     d46:	cbz	r3, d7e <SDFile::~SDFile()+0x46>
     d48:	mov	r0, r5
     d4a:	bl	7ac0 <FsBaseFile::close()>
		if (filename) free(filename);
     d4e:	ldr	r0, [r4, #100]	; 0x64
     d50:	cbz	r0, d56 <SDFile::~SDFile()+0x1e>
     d52:	bl	bb20 <free>
     d56:	ldr	r3, [pc, #52]	; (d8c <SDFile::~SDFile()+0x54>)
     d58:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     d5a:	mov	r0, r5
     d5c:	bl	7ac0 <FsBaseFile::close()>
     d60:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d62:	ldr	r3, [pc, #44]	; (d90 <SDFile::~SDFile()+0x58>)
     d64:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d66:	cbz	r2, d7a <SDFile::~SDFile()+0x42>
     d68:	ldr	r3, [r2, #16]
     d6a:	subs	r3, #1
     d6c:	str	r3, [r2, #16]
     d6e:	cbnz	r3, d7a <SDFile::~SDFile()+0x42>
     d70:	ldr	r0, [r4, #16]
     d72:	cbz	r0, d7a <SDFile::~SDFile()+0x42>
     d74:	ldr	r3, [r0, #0]
     d76:	ldr	r3, [r3, #32]
     d78:	blx	r3
	}
     d7a:	mov	r0, r4
     d7c:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d7e:	ldr	r3, [r0, #96]	; 0x60
     d80:	cmp	r3, #0
     d82:	bne.n	d48 <SDFile::~SDFile()+0x10>
     d84:	b.n	d4e <SDFile::~SDFile()+0x16>
     d86:	nop
     d88:	.word	0x0000fd08
     d8c:	.word	0x0000fcc0
     d90:	.word	0x0000fc0c

00000d94 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     d94:	ldr	r3, [r0, #20]
     d96:	cmp	r3, #0
     d98:	beq.n	e92 <MTPStorage_SD::ResetIndex()+0xfe>
  uint32_t MTPStorage_SD::clusterSize() { return SD.sdfs.sectorsPerCluster(); }
#endif

  void MTPStorage_SD::ResetIndex() {
     d9a:	push	{r4, r5, r6, r7, lr}
     d9c:	ldr	r2, [r3, #0]
     d9e:	sub	sp, #84	; 0x54
     da0:	mov	r5, r0
     da2:	mov	r0, r3
     da4:	ldr	r3, [r2, #64]	; 0x40
     da6:	blx	r3
    if(!sd_isOpen(index_)) return;
     da8:	cbnz	r0, dae <MTPStorage_SD::ResetIndex()+0x1a>
    mtp_lock_storage(false);

    all_scanned_ = false;
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }
     daa:	add	sp, #84	; 0x54
     dac:	pop	{r4, r5, r6, r7, pc}
     dae:	ldr	r0, [r5, #20]
     db0:	cbz	r0, dc4 <MTPStorage_SD::ResetIndex()+0x30>
     db2:	ldr	r3, [r0, #0]
     db4:	ldr	r3, [r3, #64]	; 0x40
     db6:	blx	r3

  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
     db8:	cbz	r0, dc4 <MTPStorage_SD::ResetIndex()+0x30>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     dba:	ldr	r0, [r5, #20]
     dbc:	cbz	r0, dc4 <MTPStorage_SD::ResetIndex()+0x30>
     dbe:	ldr	r3, [r0, #0]
     dc0:	ldr	r3, [r3, #60]	; 0x3c
     dc2:	blx	r3
     dc4:	ldr	r3, [pc, #268]	; (ed4 <MTPStorage_SD::ResetIndex()+0x140>)
     dc6:	ldr.w	r4, [r3, #1148]	; 0x47c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     dca:	cmp	r4, #0
     dcc:	beq.n	e9c <MTPStorage_SD::ResetIndex()+0x108>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     dce:	mov	r1, r4
     dd0:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     dd2:	movs	r4, #0
     dd4:	movs	r3, #1
     dd6:	ldr	r2, [pc, #256]	; (ed8 <MTPStorage_SD::ResetIndex()+0x144>)
     dd8:	strb.w	r4, [sp]
     ddc:	mov	r6, sp
     dde:	strb.w	r4, [sp, #1]
     de2:	strb.w	r4, [sp, #2]
     de6:	bl	5c1c <FatFile::open(FatVolume*, char const*, int)>
     dea:	cmp	r0, #0
     dec:	bne.n	e94 <MTPStorage_SD::ResetIndex()+0x100>
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     dee:	movw	r3, #16898	; 0x4202
     df2:	mov	r0, r6
     df4:	ldr	r2, [pc, #224]	; (ed8 <MTPStorage_SD::ResetIndex()+0x144>)
     df6:	ldr	r1, [pc, #228]	; (edc <MTPStorage_SD::ResetIndex()+0x148>)
     df8:	bl	7c8c <FsVolume::open(char const*, int)>
     dfc:	ldr	r3, [sp, #72]	; 0x48
     dfe:	cmp	r3, #0
     e00:	beq.n	ec8 <MTPStorage_SD::ResetIndex()+0x134>
		if (file) return File(new SDFile(file));
     e02:	movs	r0, #104	; 0x68
     e04:	bl	acb4 <operator new(unsigned int)>
     e08:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     e0a:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e0e:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     e10:	ldr	r0, [pc, #204]	; (ee0 <MTPStorage_SD::ResetIndex()+0x14c>)
     e12:	ldr	r1, [pc, #208]	; (ee4 <MTPStorage_SD::ResetIndex()+0x150>)
     e14:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e16:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     e1a:	movs	r6, #0
     e1c:	str	r3, [r4, #8]
     e1e:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e20:	ldrb.w	r3, [sp, #12]
     e24:	str	r0, [r4, #0]
     e26:	str	r1, [r4, #20]
     e28:	str	r2, [r4, #28]
     e2a:	strb.w	r3, [r4, #32]
     e2e:	add.w	r0, r4, #36	; 0x24
     e32:	mov	r1, r7
     e34:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e36:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     e38:	str	r6, [r4, #16]
     e3a:	bl	7a48 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     e3e:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     e40:	ldr	r2, [pc, #164]	; (ee8 <MTPStorage_SD::ResetIndex()+0x154>)
     e42:	str	r6, [r4, #100]	; 0x64
     e44:	adds	r3, #1
     e46:	str	r2, [r4, #20]
     e48:	str	r3, [r4, #16]
     e4a:	ldr	r3, [pc, #160]	; (eec <MTPStorage_SD::ResetIndex()+0x158>)
     e4c:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     e4e:	mov	r0, r7
     e50:	bl	7ac0 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e54:	ldr	r2, [r5, #20]
     e56:	cbz	r2, e60 <MTPStorage_SD::ResetIndex()+0xcc>
     e58:	ldr	r3, [r2, #16]
     e5a:	subs	r3, #1
     e5c:	str	r3, [r2, #16]
     e5e:	cbz	r3, e84 <MTPStorage_SD::ResetIndex()+0xf0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
     e60:	str	r4, [r5, #20]
		if (f) f->refcount++;
     e62:	cbz	r4, e70 <MTPStorage_SD::ResetIndex()+0xdc>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e64:	ldr	r3, [r4, #16]
     e66:	cbnz	r3, e70 <MTPStorage_SD::ResetIndex()+0xdc>
     e68:	ldr	r3, [r4, #0]
     e6a:	mov	r0, r4
     e6c:	ldr	r3, [r3, #32]
     e6e:	blx	r3
    sd_remove(indexFile);
    index_ = sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
     e70:	movs	r3, #0
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
     e72:	mvn.w	r2, #1
    if(sd_isOpen(index_)) index_.close();
    sd_remove(indexFile);
    index_ = sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
     e76:	strb.w	r3, [r5, #77]	; 0x4d
    index_generated=false;
     e7a:	strb.w	r3, [r5, #76]	; 0x4c
    open_file_ = 0xFFFFFFFEUL;
     e7e:	str	r2, [r5, #68]	; 0x44
  }
     e80:	add	sp, #84	; 0x54
     e82:	pop	{r4, r5, r6, r7, pc}
     e84:	ldr	r0, [r5, #20]
     e86:	cmp	r0, #0
     e88:	beq.n	e60 <MTPStorage_SD::ResetIndex()+0xcc>
     e8a:	ldr	r3, [r0, #0]
     e8c:	ldr	r3, [r3, #32]
     e8e:	blx	r3
     e90:	b.n	e60 <MTPStorage_SD::ResetIndex()+0xcc>
     e92:	bx	lr
     e94:	mov	r0, sp
     e96:	bl	728c <FatFile::remove()>
     e9a:	b.n	dee <MTPStorage_SD::ResetIndex()+0x5a>
     e9c:	ldr.w	r1, [r3, #1152]	; 0x480
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     ea0:	mov	r6, sp
     ea2:	cmp	r1, #0
     ea4:	beq.n	dee <MTPStorage_SD::ResetIndex()+0x5a>
     ea6:	mov	r0, sp
     ea8:	movs	r3, #1
     eaa:	ldr	r2, [pc, #44]	; (ed8 <MTPStorage_SD::ResetIndex()+0x144>)
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     eac:	strb.w	r4, [sp, #49]	; 0x31
     eb0:	strb.w	r4, [sp, #50]	; 0x32
     eb4:	strb.w	r4, [sp, #51]	; 0x33
     eb8:	bl	45b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
     ebc:	cmp	r0, #0
     ebe:	beq.n	dee <MTPStorage_SD::ResetIndex()+0x5a>
     ec0:	mov	r0, sp
     ec2:	bl	4d9c <ExFatFile::remove()>
     ec6:	b.n	dee <MTPStorage_SD::ResetIndex()+0x5a>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     ec8:	ldr	r4, [sp, #76]	; 0x4c
     eca:	cmp	r4, #0
     ecc:	bne.n	e02 <MTPStorage_SD::ResetIndex()+0x6e>
     ece:	add	r7, sp, #16
     ed0:	b.n	e4a <MTPStorage_SD::ResetIndex()+0xb6>
     ed2:	nop
     ed4:	.word	0x1fff14e0
     ed8:	.word	0x0000fdcc
     edc:	.word	0x1fff14e4
     ee0:	.word	0x0000fd08
     ee4:	.word	0x0000fc9c
     ee8:	.word	0x0000fce4
     eec:	.word	0x0000fcc0

00000ef0 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
     ef0:	bx	lr
     ef2:	nop

00000ef4 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
     ef4:	push	{r4, r5, r6, r7, lr}
     ef6:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     ef8:	ldr	r0, [r0, #20]
     efa:	sub	sp, #84	; 0x54
     efc:	cbz	r0, f0a <MTPStorage_SD::OpenIndex()+0x16>
     efe:	ldr	r3, [r0, #0]
     f00:	ldr	r3, [r3, #64]	; 0x40
     f02:	blx	r3
     f04:	cbz	r0, f0a <MTPStorage_SD::OpenIndex()+0x16>
    mtp_lock_storage(true);
    index_=sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);
  }
     f06:	add	sp, #84	; 0x54
     f08:	pop	{r4, r5, r6, r7, pc}
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     f0a:	movw	r3, #16898	; 0x4202
     f0e:	ldr	r2, [pc, #156]	; (fac <MTPStorage_SD::OpenIndex()+0xb8>)
     f10:	ldr	r1, [pc, #156]	; (fb0 <MTPStorage_SD::OpenIndex()+0xbc>)
     f12:	mov	r0, sp
     f14:	bl	7c8c <FsVolume::open(char const*, int)>
     f18:	ldr	r3, [sp, #72]	; 0x48
     f1a:	cmp	r3, #0
     f1c:	beq.n	fa2 <MTPStorage_SD::OpenIndex()+0xae>
		if (file) return File(new SDFile(file));
     f1e:	movs	r0, #104	; 0x68
     f20:	bl	acb4 <operator new(unsigned int)>
     f24:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     f26:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     f2a:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     f2c:	ldr	r0, [pc, #132]	; (fb4 <MTPStorage_SD::OpenIndex()+0xc0>)
     f2e:	ldr	r1, [pc, #136]	; (fb8 <MTPStorage_SD::OpenIndex()+0xc4>)
     f30:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     f32:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     f36:	movs	r6, #0
     f38:	str	r3, [r4, #8]
     f3a:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     f3c:	ldrb.w	r3, [sp, #12]
     f40:	str	r0, [r4, #0]
     f42:	str	r1, [r4, #20]
     f44:	str	r2, [r4, #28]
     f46:	strb.w	r3, [r4, #32]
     f4a:	add.w	r0, r4, #36	; 0x24
     f4e:	mov	r1, r7
     f50:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     f52:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     f54:	str	r6, [r4, #16]
     f56:	bl	7a48 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     f5a:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f5c:	ldr	r2, [pc, #92]	; (fbc <MTPStorage_SD::OpenIndex()+0xc8>)
     f5e:	str	r6, [r4, #100]	; 0x64
     f60:	adds	r3, #1
     f62:	str	r2, [r4, #20]
     f64:	str	r3, [r4, #16]
     f66:	ldr	r3, [pc, #88]	; (fc0 <MTPStorage_SD::OpenIndex()+0xcc>)
     f68:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     f6a:	mov	r0, r7
     f6c:	bl	7ac0 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f70:	ldr	r2, [r5, #20]
     f72:	cbz	r2, f7c <MTPStorage_SD::OpenIndex()+0x88>
     f74:	ldr	r3, [r2, #16]
     f76:	subs	r3, #1
     f78:	str	r3, [r2, #16]
     f7a:	cbz	r3, f94 <MTPStorage_SD::OpenIndex()+0xa0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
     f7c:	str	r4, [r5, #20]
		if (f) f->refcount++;
     f7e:	cmp	r4, #0
     f80:	beq.n	f06 <MTPStorage_SD::OpenIndex()+0x12>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f82:	ldr	r3, [r4, #16]
     f84:	cmp	r3, #0
     f86:	bne.n	f06 <MTPStorage_SD::OpenIndex()+0x12>
     f88:	ldr	r3, [r4, #0]
     f8a:	mov	r0, r4
     f8c:	ldr	r3, [r3, #32]
     f8e:	blx	r3
     f90:	add	sp, #84	; 0x54
     f92:	pop	{r4, r5, r6, r7, pc}
     f94:	ldr	r0, [r5, #20]
     f96:	cmp	r0, #0
     f98:	beq.n	f7c <MTPStorage_SD::OpenIndex()+0x88>
     f9a:	ldr	r3, [r0, #0]
     f9c:	ldr	r3, [r3, #32]
     f9e:	blx	r3
     fa0:	b.n	f7c <MTPStorage_SD::OpenIndex()+0x88>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     fa2:	ldr	r4, [sp, #76]	; 0x4c
     fa4:	cmp	r4, #0
     fa6:	bne.n	f1e <MTPStorage_SD::OpenIndex()+0x2a>
     fa8:	add	r7, sp, #16
     faa:	b.n	f66 <MTPStorage_SD::OpenIndex()+0x72>
     fac:	.word	0x0000fdcc
     fb0:	.word	0x1fff14e4
     fb4:	.word	0x0000fd08
     fb8:	.word	0x0000fc9c
     fbc:	.word	0x0000fce4
     fc0:	.word	0x0000fcc0

00000fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
     fc4:	push	{r4, r5, r6, lr}
     fc6:	mov	r5, r0
     fc8:	mov	r4, r1
     fca:	mov	r6, r2
    OpenIndex();
     fcc:	bl	ef4 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     fd0:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
     fd2:	add.w	r4, r4, r4, lsl #2
     fd6:	cbz	r0, ff4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
     fd8:	ldr	r3, [r0, #0]
     fda:	lsls	r1, r4, #4
     fdc:	ldr	r3, [r3, #48]	; 0x30
     fde:	movs	r2, #0
     fe0:	blx	r3
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     fe2:	ldr	r0, [r5, #20]
     fe4:	cbz	r0, ff4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
     fe6:	ldr	r3, [r0, #0]
     fe8:	mov	r1, r6
     fea:	ldr	r3, [r3, #44]	; 0x2c
     fec:	movs	r2, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
     fee:	ldmia.w	sp!, {r4, r5, r6, lr}
     ff2:	bx	r3
     ff4:	pop	{r4, r5, r6, pc}
     ff6:	nop

00000ff8 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
     ff8:	push	{r4, r5, r6, lr}
     ffa:	ldr	r2, [pc, #136]	; (1084 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x8c>)
     ffc:	ldr.w	r5, [r2, #1148]	; 0x47c
  { if (index_generated) return; 
    index_generated = true;
    1000:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    1002:	sub	sp, #80	; 0x50
    1004:	mov	r4, r0
  { if (index_generated) return; 
    index_generated = true;
    1006:	strb.w	r3, [r0, #76]	; 0x4c
    100a:	cbz	r5, 1058 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x60>
    100c:	mov	r1, r5
    100e:	mov	r0, sp
    1010:	movs	r5, #0
    1012:	ldr	r2, [pc, #116]	; (1088 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x90>)
    1014:	strb.w	r5, [sp]
    1018:	mov	r6, sp
    101a:	strb.w	r5, [sp, #1]
    101e:	strb.w	r5, [sp, #2]
    1022:	bl	5c1c <FatFile::open(FatVolume*, char const*, int)>
    1026:	cbnz	r0, 1050 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x58>
    sd_remove(indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    r.parent = 0;
    1028:	movs	r3, #0
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    102a:	movs	r5, #1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    102c:	str	r5, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    102e:	mov	r0, r4
    1030:	mov	r2, r6
    1032:	mov	r1, r3
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    1034:	movs	r4, #47	; 0x2f
    sd_remove(indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    r.parent = 0;
    1036:	str	r3, [sp, #0]
    r.sibling = 0;
    1038:	str	r3, [sp, #8]
    r.child = 0;
    103a:	str	r3, [sp, #4]
    r.isdir = true;
    r.scanned = false;
    103c:	strb.w	r3, [sp, #13]
    index_entries_ = 0;
    Record r;
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    1040:	strb.w	r5, [sp, #12]
    r.scanned = false;
    strcpy(r.name, "/");
    1044:	strh.w	r4, [sp, #14]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1048:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }
    104c:	add	sp, #80	; 0x50
    104e:	pop	{r4, r5, r6, pc}
    1050:	mov	r0, sp
    1052:	bl	728c <FatFile::remove()>
    1056:	b.n	1028 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x30>
    1058:	ldr.w	r1, [r2, #1152]	; 0x480
    105c:	mov	r6, sp
    105e:	cmp	r1, #0
    1060:	beq.n	1028 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x30>
    1062:	mov	r0, sp
    1064:	ldr	r2, [pc, #32]	; (1088 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x90>)
    1066:	strb.w	r5, [sp, #49]	; 0x31
    106a:	strb.w	r5, [sp, #50]	; 0x32
    106e:	strb.w	r5, [sp, #51]	; 0x33
    1072:	bl	45b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1076:	cmp	r0, #0
    1078:	beq.n	1028 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x30>
    107a:	mov	r0, sp
    107c:	bl	4d9c <ExFatFile::remove()>
    1080:	b.n	1028 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x30>
    1082:	nop
    1084:	.word	0x1fff14e0
    1088:	.word	0x0000fdcc

0000108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    108c:	push	{r4, r5, r6, lr}
    108e:	mov	r5, r1
    1090:	mov	r4, r2
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1092:	movs	r1, #0
    1094:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    1096:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    1098:	bl	c29c <memset>
    if (i > index_entries_) 
    109c:	ldr	r3, [r5, #72]	; 0x48
    109e:	cmp	r3, r4
    10a0:	bcc.n	10cc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    10a2:	mov	r0, r5
    10a4:	bl	ef4 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    10a8:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    10aa:	add.w	r4, r4, r4, lsl #2
    10ae:	lsls	r1, r4, #4
    10b0:	cbz	r0, 10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    10b2:	ldr	r3, [r0, #0]
    10b4:	movs	r2, #0
    10b6:	ldr	r3, [r3, #48]	; 0x30
    10b8:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    10ba:	ldr	r0, [r5, #20]
    10bc:	cbz	r0, 10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    10be:	ldr	r3, [r0, #0]
    10c0:	movs	r2, #80	; 0x50
    10c2:	ldr	r3, [r3, #40]	; 0x28
    10c4:	mov	r1, r6
    10c6:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    10c8:	mov	r0, r6
    10ca:	pop	{r4, r5, r6, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    10cc:	movs	r2, #80	; 0x50
    10ce:	movs	r1, #0
    10d0:	mov	r0, r6
    10d2:	bl	c29c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    10d6:	mov	r0, r6
    10d8:	pop	{r4, r5, r6, pc}
    10da:	nop

000010dc <MTPStorage_SD::GetNextObjectHandle()>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    10dc:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    10de:	ldr	r5, [r0, #80]	; 0x50
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    10e0:	sub	sp, #84	; 0x54
    10e2:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    10e4:	cbnz	r5, 10f6 <MTPStorage_SD::GetNextObjectHandle()+0x1a>
    10e6:	b.n	1124 <MTPStorage_SD::GetNextObjectHandle()+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    10e8:	ldr	r3, [sp, #8]
    10ea:	str	r3, [r4, #80]	; 0x50
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    10ec:	ldrb.w	r3, [sp, #14]
    10f0:	cbnz	r3, 111e <MTPStorage_SD::GetNextObjectHandle()+0x42>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) 
    { if (next_ == 0) return 0;
    10f2:	ldr	r5, [r4, #80]	; 0x50
    10f4:	cbz	r5, 1124 <MTPStorage_SD::GetNextObjectHandle()+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    10f6:	mov	r2, r5
    10f8:	mov	r1, r4
    10fa:	mov	r0, sp
    10fc:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1100:	ldrb.w	r2, [r4, #84]	; 0x54
    1104:	cmp	r2, #0
    1106:	bne.n	10e8 <MTPStorage_SD::GetNextObjectHandle()+0xc>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1108:	ldr	r3, [r4, #80]	; 0x50
        if (next_ >= index_entries_) next_ = 0;
    110a:	ldr	r1, [r4, #72]	; 0x48
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    110c:	adds	r3, #1
    110e:	str	r3, [r4, #80]	; 0x50
        if (next_ >= index_entries_) next_ = 0;
    1110:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    1112:	ldrb.w	r3, [sp, #14]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    1116:	it	cs
    1118:	strcs	r2, [r4, #80]	; 0x50
      }
      if (r.name[0]) return ret;
    111a:	cmp	r3, #0
    111c:	beq.n	10f2 <MTPStorage_SD::GetNextObjectHandle()+0x16>
    }
  }
    111e:	mov	r0, r5
    1120:	add	sp, #84	; 0x54
    1122:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) 
    { if (next_ == 0) return 0;
    1124:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    1126:	mov	r0, r5
    1128:	add	sp, #84	; 0x54
    112a:	pop	{r4, r5, pc}

0000112c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    112c:	push	{r4, r5, r6, lr}
    112e:	sub	sp, #80	; 0x50
    1130:	mov	r6, r2
    Record r = ReadIndexRecord(handle);
    1132:	mov	r2, r1
    1134:	mov	r1, r0
    1136:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    1138:	mov	r4, r3
    113a:	ldr	r5, [sp, #96]	; 0x60
    Record r = ReadIndexRecord(handle);
    113c:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    1140:	mov	r0, r6
    1142:	add.w	r1, sp, #14
    1146:	bl	c784 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    114a:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    114e:	ldr	r2, [sp, #0]
    1150:	str	r2, [r5, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1152:	cbnz	r3, 115c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)+0x30>
    1154:	ldr	r3, [sp, #4]
    1156:	str	r3, [r4, #0]
  }
    1158:	add	sp, #80	; 0x50
    115a:	pop	{r4, r5, r6, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    115c:	mov.w	r3, #4294967295
    1160:	str	r3, [r4, #0]
  }
    1162:	add	sp, #80	; 0x50
    1164:	pop	{r4, r5, r6, pc}
    1166:	nop

00001168 <MTPStorage_SD::GetSize(unsigned long)>:

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    1168:	push	{lr}
    116a:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    116c:	mov	r2, r1
    116e:	mov	r1, r0
    1170:	mov	r0, sp
    1172:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    1176:	ldr	r0, [sp, #4]
    1178:	add	sp, #84	; 0x54
    117a:	ldr.w	pc, [sp], #4
    117e:	nop

00001180 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    1180:	push	{r4, r5, lr}
    1182:	mov	r4, r0
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    1184:	ldr	r0, [r0, #40]	; 0x28
    1186:	sub	sp, #84	; 0x54
    1188:	cbz	r0, 11bc <MTPStorage_SD::close()+0x3c>
    118a:	ldr	r3, [r0, #0]
    118c:	ldr	r3, [r3, #56]	; 0x38
    118e:	blx	r3
    1190:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
    1192:	ldr	r0, [r4, #40]	; 0x28
    1194:	cbz	r0, 119c <MTPStorage_SD::close()+0x1c>
    1196:	ldr	r3, [r0, #0]
    1198:	ldr	r3, [r3, #60]	; 0x3c
    119a:	blx	r3
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    119c:	mov	r0, sp
    119e:	ldr	r2, [r4, #68]	; 0x44
    11a0:	mov	r1, r4
    11a2:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    11a6:	mov	r2, sp
    11a8:	ldr	r1, [r4, #68]	; 0x44
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    11aa:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    11ac:	mov	r0, r4
    11ae:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    11b2:	mvn.w	r3, #1
    11b6:	str	r3, [r4, #68]	; 0x44
  }
    11b8:	add	sp, #84	; 0x54
    11ba:	pop	{r4, r5, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    11bc:	mov	r5, r0
    11be:	b.n	119c <MTPStorage_SD::close()+0x1c>

000011c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    11c0:	cbz	r1, 1210 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    mtp_lock_storage(false);
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    11c2:	push	{r4, r5, r6, lr}
    11c4:	sub	sp, #80	; 0x50
    11c6:	mov	r5, r2
    11c8:	mov	r4, r0
    if (i == 0) 
    { strcpy(out, "/");
    }
    else 
    { Record tmp = ReadIndexRecord(i);
    11ca:	mov	r2, r1
    11cc:	mov	r6, r3
    11ce:	mov	r1, r0
    11d0:	mov	r0, sp
    11d2:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      ConstructFilename(tmp.parent, out, len);
    11d6:	mov	r3, r6
    11d8:	mov	r0, r4
    11da:	mov	r2, r5
    11dc:	ldr	r1, [sp, #0]
    11de:	bl	11c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    11e2:	mov	r0, r5
    11e4:	bl	c840 <strlen>
    11e8:	adds	r3, r5, r0
    11ea:	mov	r4, r0
    11ec:	ldrb.w	r3, [r3, #-1]
    11f0:	cmp	r3, #47	; 0x2f
    11f2:	beq.n	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3c>
    11f4:	ldr	r3, [pc, #48]	; (1228 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    11f6:	ldrh	r3, [r3, #0]
    11f8:	strh	r3, [r5, r0]
    11fa:	adds	r4, #1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    11fc:	add.w	r0, sp, #14
    1200:	bl	c840 <strlen>
    1204:	add	r0, r4
    1206:	adds	r0, #1
    1208:	cmp	r0, r6
    120a:	bcc.n	1218 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x58>
    }
  }
    120c:	add	sp, #80	; 0x50
    120e:	pop	{r4, r5, r6, pc}
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    { strcpy(out, "/");
    1210:	ldr	r3, [pc, #20]	; (1228 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    1212:	ldrh	r3, [r3, #0]
    1214:	strh	r3, [r2, #0]
    1216:	bx	lr
    }
    else 
    { Record tmp = ReadIndexRecord(i);
      ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1218:	add.w	r1, sp, #14
    121c:	mov	r0, r5
    121e:	bl	c744 <strcat>
    }
  }
    1222:	add	sp, #80	; 0x50
    1224:	pop	{r4, r5, r6, pc}
    1226:	nop
    1228:	.word	0x0000fddc

0000122c <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    122c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1230:	adds	r2, r1, #1
    1232:	sub	sp, #496	; 0x1f0
    1234:	mov	r6, r1
    1236:	mov	r4, r0
    1238:	ite	ne
    123a:	movne	r5, r1
    123c:	moveq	r5, #0
    123e:	b.n	1250 <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    1240:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    1242:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    1244:	cbz	r3, 1270 <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    1246:	ldr	r3, [r4, #0]
    1248:	ldr	r3, [r3, #52]	; 0x34
    124a:	blx	r3
    124c:	cmp	r0, #0
    124e:	beq.n	1320 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    1250:	mov	r2, r5
    1252:	mov	r1, r4
    1254:	mov	r0, sp
    1256:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    125a:	movs	r2, #80	; 0x50
    125c:	mov	r1, sp
    125e:	add.w	r0, sp, r2
    1262:	bl	94a8 <memcpy>
      if (!r.isdir) break;
    1266:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    126a:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    126c:	cmp	r3, #0
    126e:	bne.n	1240 <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    1270:	adds	r3, r6, #1
    1272:	beq.n	1336 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    1274:	mov.w	r3, #256	; 0x100
    1278:	add	r2, sp, #240	; 0xf0
    127a:	mov	r1, r6
    127c:	mov	r0, r4
    127e:	bl	11c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    1282:	ldrb.w	r7, [sp, #92]	; 0x5c
    1286:	ldr	r3, [pc, #296]	; (13b0 <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    1288:	cmp	r7, #0
    128a:	beq.n	133e <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    128c:	ldr.w	r7, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    1290:	cbz	r7, 12fe <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    1292:	add	r5, sp, #160	; 0xa0
    1294:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1298:	add	r2, sp, #240	; 0xf0
    129a:	mov	r1, r7
    129c:	mov	r0, r5
    129e:	mov	r3, lr
    12a0:	strb.w	lr, [r5]
    12a4:	strb.w	lr, [r5, #1]
    12a8:	strb.w	lr, [r5, #2]
    12ac:	bl	5c1c <FatFile::open(FatVolume*, char const*, int)>
    12b0:	cbz	r0, 1320 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    12b2:	mov	r0, r5
    12b4:	bl	5f44 <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    12b8:	cbz	r0, 1320 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    int p = r.parent;
    12ba:	ldr.w	r8, [sp, #80]	; 0x50
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    12be:	movs	r3, #0
    int p = r.parent;
    WriteIndexRecord(object, r);
    12c0:	add	r2, sp, #80	; 0x50
    12c2:	mov	r1, r6
    12c4:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    12c6:	strb.w	r3, [sp, #94]	; 0x5e
    int p = r.parent;
    WriteIndexRecord(object, r);
    12ca:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    12ce:	mov	r2, r8
    12d0:	mov	r1, r4
    12d2:	mov	r0, r5
    12d4:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    12d8:	ldr	r7, [r5, #4]
    12da:	cmp	r6, r7
    12dc:	beq.n	1328 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    12de:	cbz	r7, 1336 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    12e0:	mov	r2, r7
    12e2:	mov	r1, r4
    12e4:	mov	r0, sp
    12e6:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    12ea:	movs	r2, #80	; 0x50
    12ec:	mov	r1, sp
    12ee:	mov	r0, r5
    12f0:	bl	94a8 <memcpy>
        if (tmp.sibling == object) 
    12f4:	ldr	r3, [r5, #8]
    12f6:	cmp	r6, r3
    12f8:	beq.n	1394 <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    12fa:	mov	r7, r3
    12fc:	b.n	12de <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    12fe:	ldr.w	r1, [r3, #1152]	; 0x480
    1302:	cbz	r1, 1320 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1304:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1306:	add	r2, sp, #240	; 0xf0
    1308:	mov	r3, r7
    130a:	mov	r0, r5
    130c:	strb.w	r7, [r5, #49]	; 0x31
    1310:	strb.w	r7, [r5, #50]	; 0x32
    1314:	strb.w	r7, [r5, #51]	; 0x33
    1318:	bl	45b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    131c:	cmp	r0, #0
    131e:	bne.n	13a6 <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    1320:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    1322:	add	sp, #496	; 0x1f0
    1324:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    1328:	ldr	r3, [sp, #88]	; 0x58
    132a:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    132c:	mov	r2, r5
    132e:	mov	r1, r8
    1330:	mov	r0, r4
    1332:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    1336:	movs	r0, #1
  }
    1338:	add	sp, #496	; 0x1f0
    133a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    133e:	ldr.w	lr, [r3, #1148]	; 0x47c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    1342:	cmp.w	lr, #0
    1346:	beq.n	1368 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    1348:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    134a:	add	r2, sp, #240	; 0xf0
    134c:	mov	r1, lr
    134e:	mov	r0, r5
    1350:	movs	r3, #1
    1352:	strb	r7, [r5, #0]
    1354:	strb	r7, [r5, #1]
    1356:	strb	r7, [r5, #2]
    1358:	bl	5c1c <FatFile::open(FatVolume*, char const*, int)>
    135c:	cmp	r0, #0
    135e:	beq.n	1320 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1360:	mov	r0, r5
    1362:	bl	728c <FatFile::remove()>
    1366:	b.n	12b8 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    1368:	ldr.w	r1, [r3, #1152]	; 0x480
    136c:	cmp	r1, #0
    136e:	beq.n	1320 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1370:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1372:	add	r2, sp, #240	; 0xf0
    1374:	mov	r0, r5
    1376:	movs	r3, #1
    1378:	strb.w	lr, [r5, #49]	; 0x31
    137c:	strb.w	lr, [r5, #50]	; 0x32
    1380:	strb.w	lr, [r5, #51]	; 0x33
    1384:	bl	45b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1388:	cmp	r0, #0
    138a:	beq.n	1320 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    138c:	mov	r0, r5
    138e:	bl	4d9c <ExFatFile::remove()>
    1392:	b.n	12b8 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    1394:	ldr	r3, [sp, #88]	; 0x58
    1396:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    1398:	mov	r0, r4
    139a:	mov	r2, r5
    139c:	mov	r1, r7
    139e:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    13a2:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    13a4:	b.n	1322 <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    13a6:	mov	r0, r5
    13a8:	bl	4ec4 <ExFatFile::rmdir()>
    13ac:	b.n	12b8 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    13ae:	nop
    13b0:	.word	0x1fff14e0

000013b4 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    13b4:	push	{r4, r5, r6, lr}
    13b6:	sub.w	sp, sp, #648	; 0x288
    13ba:	mov	r4, r0
    13bc:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    13be:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    13c2:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    13c4:	add	r2, sp, #136	; 0x88
    13c6:	bl	11c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    13ca:	mov	r2, r5
    13cc:	mov	r1, r4
    13ce:	add	r0, sp, #56	; 0x38
    13d0:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    13d4:	mov	r1, r6
    13d6:	add.w	r0, sp, #70	; 0x46
    13da:	bl	c784 <strcpy>
    WriteIndexRecord(handle, p1);
    13de:	mov	r0, r4
    13e0:	add	r2, sp, #56	; 0x38
    13e2:	mov	r1, r5
    13e4:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    13e8:	mov	r0, r4
    13ea:	mov.w	r3, #256	; 0x100
    13ee:	mov	r1, r5
    13f0:	add	r2, sp, #392	; 0x188
    13f2:	bl	11c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    13f6:	ldr	r3, [pc, #116]	; (146c <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    13f8:	ldr.w	r4, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    13fc:	cbz	r4, 1434 <MTPStorage_SD::rename(unsigned long, char const*)+0x80>
    13fe:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    1400:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1404:	add	r2, sp, #136	; 0x88
    1406:	mov	r1, r4
    1408:	mov	r0, sp
    140a:	mov	r3, r5
    140c:	strb.w	r5, [sp]
    1410:	strb.w	r5, [sp, #1]
    1414:	strb.w	r5, [sp, #2]
    1418:	bl	5b18 <FatFile::open(FatFile*, char const*, int)>
    141c:	cbnz	r0, 1424 <MTPStorage_SD::rename(unsigned long, char const*)+0x70>

    sd_rename(oldName,newName);
  }
    141e:	add.w	sp, sp, #648	; 0x288
    1422:	pop	{r4, r5, r6, pc}
    1424:	add	r2, sp, #392	; 0x188
    1426:	mov	r1, r4
    1428:	mov	r0, sp
    142a:	bl	6418 <FatFile::rename(FatFile*, char const*)>
    142e:	add.w	sp, sp, #648	; 0x288
    1432:	pop	{r4, r5, r6, pc}
    1434:	ldr.w	r1, [r3, #1152]	; 0x480
    1438:	cmp	r1, #0
    143a:	beq.n	141e <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    143c:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1440:	add	r2, sp, #136	; 0x88
    1442:	mov	r1, r5
    1444:	mov	r3, r4
    1446:	mov	r0, sp
    1448:	strb.w	r4, [sp, #49]	; 0x31
    144c:	strb.w	r4, [sp, #50]	; 0x32
    1450:	strb.w	r4, [sp, #51]	; 0x33
    1454:	bl	44a0 <ExFatFile::open(ExFatFile*, char const*, int)>
    1458:	cmp	r0, #0
    145a:	beq.n	141e <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
    145c:	add	r2, sp, #392	; 0x188
    145e:	mov	r1, r5
    1460:	mov	r0, sp
    1462:	bl	53b0 <ExFatFile::rename(ExFatFile*, char const*)>
    1466:	add.w	sp, sp, #648	; 0x288
    146a:	pop	{r4, r5, r6, pc}
    146c:	.word	0x1fff14e0

00001470 <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    1470:	push	{r4, r5, r6, lr}
    1472:	sub.w	sp, sp, #728	; 0x2d8
    1476:	mov	r4, r2
    1478:	mov	r5, r0
    147a:	mov	r6, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    147c:	mov.w	r3, #256	; 0x100
    1480:	add	r2, sp, #216	; 0xd8
    1482:	bl	11c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    1486:	mov	r2, r6
    1488:	mov	r1, r5
    148a:	add	r0, sp, #56	; 0x38
    148c:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    1490:	adds	r3, r4, #1
    1492:	it	eq
    1494:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    1496:	mov	r2, r4
    1498:	mov	r1, r5
    149a:	add	r0, sp, #136	; 0x88
    149c:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    14a0:	ldr	r3, [sp, #140]	; 0x8c
    14a2:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    14a4:	add	r2, sp, #56	; 0x38
    14a6:	mov	r1, r6
    14a8:	mov	r0, r5

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    p1.parent = newParent;
    14aa:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    14ac:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    14ae:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    14b2:	mov	r1, r4
    14b4:	add	r2, sp, #136	; 0x88
    14b6:	mov	r0, r5
    14b8:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    14bc:	mov.w	r3, #256	; 0x100
    14c0:	mov	r1, r6
    14c2:	mov	r0, r5
    14c4:	add	r2, sp, #472	; 0x1d8
    14c6:	bl	11c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    14ca:	ldr	r3, [pc, #116]	; (1540 <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    14cc:	ldr.w	r4, [r3, #1148]	; 0x47c
    14d0:	cbz	r4, 1508 <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    14d2:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    14d4:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    14d8:	add	r2, sp, #216	; 0xd8
    14da:	mov	r1, r4
    14dc:	mov	r0, sp
    14de:	mov	r3, r5
    14e0:	strb.w	r5, [sp]
    14e4:	strb.w	r5, [sp, #1]
    14e8:	strb.w	r5, [sp, #2]
    14ec:	bl	5b18 <FatFile::open(FatFile*, char const*, int)>
    14f0:	cbnz	r0, 14f8 <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd_rename(oldName,newName);
  }
    14f2:	add.w	sp, sp, #728	; 0x2d8
    14f6:	pop	{r4, r5, r6, pc}
    14f8:	add	r2, sp, #472	; 0x1d8
    14fa:	mov	r1, r4
    14fc:	mov	r0, sp
    14fe:	bl	6418 <FatFile::rename(FatFile*, char const*)>
    1502:	add.w	sp, sp, #728	; 0x2d8
    1506:	pop	{r4, r5, r6, pc}
    1508:	ldr.w	r1, [r3, #1152]	; 0x480
    150c:	cmp	r1, #0
    150e:	beq.n	14f2 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1510:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1514:	add	r2, sp, #216	; 0xd8
    1516:	mov	r1, r5
    1518:	mov	r3, r4
    151a:	mov	r0, sp
    151c:	strb.w	r4, [sp, #49]	; 0x31
    1520:	strb.w	r4, [sp, #50]	; 0x32
    1524:	strb.w	r4, [sp, #51]	; 0x33
    1528:	bl	44a0 <ExFatFile::open(ExFatFile*, char const*, int)>
    152c:	cmp	r0, #0
    152e:	beq.n	14f2 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    1530:	add	r2, sp, #472	; 0x1d8
    1532:	mov	r1, r5
    1534:	mov	r0, sp
    1536:	bl	53b0 <ExFatFile::rename(ExFatFile*, char const*)>
    153a:	add.w	sp, sp, #728	; 0x2d8
    153e:	pop	{r4, r5, r6, pc}
    1540:	.word	0x1fff14e0

00001544 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1544:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (open_file_ == i && mode_ == mode) return;
    1548:	ldr	r3, [r0, #68]	; 0x44
    154a:	cmp	r3, r1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    154c:	sub	sp, #340	; 0x154
    if (open_file_ == i && mode_ == mode) return;
    154e:	beq.n	1626 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe2>
    1550:	mov	r5, r0
    1552:	mov	r7, r2
    char filename[256];
    ConstructFilename(i, filename, 256);
    1554:	mov.w	r3, #256	; 0x100
    1558:	add	r2, sp, #80	; 0x50
    155a:	mov	r6, r1
    155c:	bl	11c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1560:	ldr	r0, [r5, #40]	; 0x28
    1562:	cbz	r0, 1576 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
    1564:	ldr	r3, [r0, #0]
    1566:	ldr	r3, [r3, #64]	; 0x40
    1568:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    156a:	cbz	r0, 1576 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    156c:	ldr	r0, [r5, #40]	; 0x28
    156e:	cbz	r0, 1576 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
    1570:	ldr	r3, [r0, #0]
    1572:	ldr	r3, [r3, #60]	; 0x3c
    1574:	blx	r3
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1576:	uxtb	r3, r7
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    1578:	cmp	r3, #1
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    157a:	add	r2, sp, #80	; 0x50
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    157c:	movw	r3, #16898	; 0x4202
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1580:	mov	r0, sp
    1582:	it	ne
    1584:	movne	r3, #0
    1586:	ldr	r1, [pc, #184]	; (1640 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xfc>)
    1588:	bl	7c8c <FsVolume::open(char const*, int)>
    158c:	ldr	r3, [sp, #72]	; 0x48
    158e:	cmp	r3, #0
    1590:	beq.n	1632 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xee>
		if (file) return File(new SDFile(file));
    1592:	movs	r0, #104	; 0x68
    1594:	bl	acb4 <operator new(unsigned int)>
    1598:	mov	r4, r0
    159a:	mov.w	r3, #1000	; 0x3e8
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    159e:	ldr	r2, [pc, #164]	; (1644 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x100>)
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    15a0:	ldrb.w	r0, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    15a4:	ldr	r1, [pc, #160]	; (1648 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x104>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    15a6:	str	r3, [r4, #8]
{
  public:
	constexpr Print() : write_error(0) {}
    15a8:	mov.w	r8, #0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    15ac:	ldr	r3, [sp, #8]
    15ae:	str	r2, [r4, #0]
    15b0:	add.w	r9, sp, #16
    15b4:	ldrb.w	r2, [sp, #12]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    15b8:	strb	r0, [r4, #24]
    15ba:	str	r1, [r4, #20]
    15bc:	str	r3, [r4, #28]
    15be:	strb.w	r2, [r4, #32]
    15c2:	add.w	r0, r4, #36	; 0x24
    15c6:	mov	r1, r9
{
  public:
	constexpr Print() : write_error(0) {}
    15c8:	strb.w	r8, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    15cc:	strb.w	r8, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    15d0:	str.w	r8, [r4, #16]
    15d4:	bl	7a48 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    15d8:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    15da:	ldr	r2, [pc, #112]	; (164c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x108>)
    15dc:	str.w	r8, [r4, #100]	; 0x64
    15e0:	adds	r3, #1
    15e2:	str	r2, [r4, #20]
    15e4:	str	r3, [r4, #16]
    15e6:	ldr	r3, [pc, #104]	; (1650 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10c>)
    15e8:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    15ea:	mov	r0, r9
    15ec:	bl	7ac0 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    15f0:	ldr	r2, [r5, #40]	; 0x28
    15f2:	cbz	r2, 15fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    15f4:	ldr	r3, [r2, #16]
    15f6:	subs	r3, #1
    15f8:	str	r3, [r2, #16]
    15fa:	cbz	r3, 160e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xca>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    15fc:	str	r4, [r5, #40]	; 0x28
		if (f) f->refcount++;
    15fe:	cbz	r4, 1604 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1600:	ldr	r3, [r4, #16]
    1602:	cbz	r3, 161c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xd8>
    file_=sd_open(filename,mode);
    open_file_ = i;
    1604:	str	r6, [r5, #68]	; 0x44
    mode_ = mode;
    1606:	str	r7, [r5, #64]	; 0x40
    mtp_lock_storage(false);
  }
    1608:	add	sp, #340	; 0x154
    160a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    160e:	ldr	r0, [r5, #40]	; 0x28
    1610:	cmp	r0, #0
    1612:	beq.n	15fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1614:	ldr	r3, [r0, #0]
    1616:	ldr	r3, [r3, #32]
    1618:	blx	r3
    161a:	b.n	15fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    161c:	ldr	r3, [r4, #0]
    161e:	mov	r0, r4
    1620:	ldr	r3, [r3, #32]
    1622:	blx	r3
    1624:	b.n	1604 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc0>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    1626:	ldr	r3, [r0, #64]	; 0x40
    1628:	cmp	r3, r2
    162a:	bne.n	1550 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    162c:	add	sp, #340	; 0x154
    162e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    1632:	ldr	r4, [sp, #76]	; 0x4c
    1634:	cmp	r4, #0
    1636:	bne.n	1592 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x4e>
    1638:	add.w	r9, sp, #16
    163c:	b.n	15e6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xa2>
    163e:	nop
    1640:	.word	0x1fff14e4
    1644:	.word	0x0000fd08
    1648:	.word	0x0000fc9c
    164c:	.word	0x0000fce4
    1650:	.word	0x0000fcc0

00001654 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1654:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1658:	mov	r4, r0
    165a:	mov	r7, r2
    OpenFileByIndex(handle);
    165c:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    165e:	mov	r5, r3
    1660:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    1662:	bl	1544 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    1666:	ldr	r0, [r4, #40]	; 0x28
    1668:	cbz	r0, 1686 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    166a:	ldr	r3, [r0, #0]
    166c:	mov	r1, r7
    166e:	ldr	r3, [r3, #48]	; 0x30
    1670:	movs	r2, #0
    1672:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    1674:	ldr	r0, [r4, #40]	; 0x28
    1676:	cbz	r0, 1686 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    1678:	ldr	r3, [r0, #0]
    167a:	mov	r2, r6
    167c:	mov	r1, r5
    167e:	ldr	r3, [r3, #40]	; 0x28
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    1680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1684:	bx	r3
    1686:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    168a:	nop

0000168c <MTPStorage_SD::Create(unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    168c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    1690:	cmp.w	r1, #4294967295
    1694:	ite	ne
    1696:	movne	r6, r1
    1698:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    169a:	sub	sp, #476	; 0x1dc
    169c:	mov	r5, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    169e:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    16a0:	mov	r4, r0
    16a2:	mov	r7, r2
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    16a4:	add	r0, sp, #56	; 0x38
    16a6:	mov	r2, r6
    16a8:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    16ac:	mov	r0, r5
    16ae:	bl	c840 <strlen>
    16b2:	cmp	r0, #62	; 0x3e
    16b4:	bls.n	16c0 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x34>
    16b6:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    16b8:	mov	r0, r5
    16ba:	add	sp, #476	; 0x1dc
    16bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    16c0:	adds	r2, r0, #1
    16c2:	mov	r1, r5
    16c4:	add.w	r0, sp, #150	; 0x96
    16c8:	bl	94a8 <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    16cc:	ldr	r5, [r4, #72]	; 0x48
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    16ce:	ldr	r3, [sp, #60]	; 0x3c
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    16d0:	str	r6, [sp, #136]	; 0x88
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    16d2:	adds	r2, r5, #1
    16d4:	str	r2, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    16d6:	mov	r1, r5
    16d8:	add	r2, sp, #136	; 0x88
    16da:	mov	r0, r4
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    16dc:	mov.w	r9, #0
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    16e0:	mov.w	r8, #1
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    16e4:	strb.w	r7, [sp, #148]	; 0x94
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    16e8:	str	r3, [sp, #144]	; 0x90
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    16ea:	str.w	r9, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    16ee:	strb.w	r8, [sp, #149]	; 0x95
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    16f2:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    16f6:	add	r2, sp, #56	; 0x38
    16f8:	mov	r1, r6
    16fa:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    16fc:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    16fe:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1702:	cbnz	r7, 1716 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x8a>
      sd_mkdir(filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    1704:	mov	r0, r4
    1706:	mov	r2, r8
    1708:	mov	r1, r5
    170a:	bl	1544 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    170e:	mov	r0, r5
    1710:	add	sp, #476	; 0x1dc
    1712:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    1716:	mov	r0, r4
    1718:	mov.w	r3, #256	; 0x100
    171c:	add	r2, sp, #216	; 0xd8
    171e:	mov	r1, r5
    1720:	bl	11c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1724:	ldr	r3, [pc, #68]	; (176c <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xe0>)
    1726:	ldr.w	r4, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    172a:	cbz	r4, 1748 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xbc>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    172c:	mov	r3, r8
    172e:	add	r2, sp, #216	; 0xd8
    1730:	add.w	r1, r4, #1088	; 0x440
    1734:	mov	r0, sp
    1736:	strb.w	r9, [sp]
    173a:	strb.w	r9, [sp, #1]
    173e:	strb.w	r9, [sp, #2]
    1742:	bl	631c <FatFile::mkdir(FatFile*, char const*, bool)>
    1746:	b.n	16b8 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    1748:	ldr.w	r1, [r3, #1152]	; 0x480
    174c:	cmp	r1, #0
    174e:	beq.n	16b8 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1750:	mov	r3, r8
    1752:	add	r2, sp, #216	; 0xd8
    1754:	add.w	r1, r1, #1088	; 0x440
    1758:	mov	r0, sp
    175a:	strb.w	r4, [sp, #49]	; 0x31
    175e:	strb.w	r4, [sp, #50]	; 0x32
    1762:	strb.w	r4, [sp, #51]	; 0x33
    1766:	bl	52a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    176a:	b.n	16b8 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    176c:	.word	0x1fff14e0

00001770 <MTPStorage_SD::ScanDir(unsigned long)>:
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  { Record record = ReadIndexRecord(i);
    1770:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1774:	sub	sp, #160	; 0xa0
    1776:	mov	r2, r1
    1778:	mov	r4, r0
    177a:	mov	r6, r1
    177c:	mov	r1, r0
    177e:	mov	r0, sp
    1780:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1784:	ldrb.w	r3, [sp, #12]
    1788:	cbz	r3, 1790 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    178a:	ldrb.w	r5, [sp, #13]
    178e:	cbz	r5, 1796 <MTPStorage_SD::ScanDir(unsigned long)+0x26>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    1790:	add	sp, #160	; 0xa0
    1792:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    1796:	mov	r0, r4
    1798:	mov	r2, r5
    179a:	mov	r1, r6
    179c:	bl	1544 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    17a0:	ldr	r0, [r4, #40]	; 0x28
    17a2:	cmp	r0, #0
    17a4:	beq.n	1790 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    17a6:	ldr	r3, [r0, #0]
    17a8:	ldr	r3, [r3, #64]	; 0x40
    17aa:	blx	r3
      if (!sd_isOpen(file_)) return;
    17ac:	cmp	r0, #0
    17ae:	beq.n	1790 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    17b0:	ldr	r7, [pc, #264]	; (18bc <MTPStorage_SD::ScanDir(unsigned long)+0x14c>)
    17b2:	mov.w	r8, #1000	; 0x3e8
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    17b6:	ldr	r1, [r4, #40]	; 0x28
    17b8:	cmp	r1, #0
    17ba:	beq.n	186a <MTPStorage_SD::ScanDir(unsigned long)+0xfa>
    17bc:	ldr	r3, [r1, #0]
    17be:	movs	r2, #0
    17c0:	ldr	r3, [r3, #76]	; 0x4c
    17c2:	add	r0, sp, #80	; 0x50
    17c4:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17c6:	ldr	r2, [r4, #60]	; 0x3c
    17c8:	cbz	r2, 17dc <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    17ca:	ldr	r3, [r2, #16]
    17cc:	subs	r3, #1
    17ce:	str	r3, [r2, #16]
    17d0:	cbnz	r3, 17dc <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    17d2:	ldr	r0, [r4, #60]	; 0x3c
    17d4:	cbz	r0, 17dc <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    17d6:	ldr	r3, [r0, #0]
    17d8:	ldr	r3, [r3, #32]
    17da:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    17dc:	ldr	r3, [sp, #96]	; 0x60
    17de:	str	r3, [r4, #60]	; 0x3c
		if (f) f->refcount++;
    17e0:	cbz	r3, 1800 <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    17e2:	ldr	r2, [r3, #16]
    17e4:	adds	r2, #1
    17e6:	str	r2, [r3, #16]
    17e8:	ldr	r2, [sp, #96]	; 0x60
		return *this;
	}
	virtual ~File() {
    17ea:	str	r7, [sp, #80]	; 0x50
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    17ec:	cbz	r2, 1800 <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    17ee:	ldr	r3, [r2, #16]
    17f0:	subs	r3, #1
    17f2:	str	r3, [r2, #16]
    17f4:	cbnz	r3, 1800 <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    17f6:	ldr	r0, [sp, #96]	; 0x60
    17f8:	cbz	r0, 1800 <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    17fa:	ldr	r3, [r0, #0]
    17fc:	ldr	r3, [r3, #32]
    17fe:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1800:	ldr	r0, [r4, #60]	; 0x3c
    1802:	cmp	r0, #0
    1804:	beq.n	188c <MTPStorage_SD::ScanDir(unsigned long)+0x11c>
    1806:	ldr	r3, [r0, #0]
    1808:	ldr	r3, [r3, #64]	; 0x40
    180a:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    180c:	cmp	r0, #0
    180e:	beq.n	188c <MTPStorage_SD::ScanDir(unsigned long)+0x11c>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    1810:	ldr	r0, [r4, #60]	; 0x3c

        Record r;
        r.parent = i;
    1812:	str	r6, [sp, #80]	; 0x50
        r.sibling = sibling;
    1814:	str	r5, [sp, #88]	; 0x58
    1816:	cmp	r0, #0
    1818:	beq.n	187c <MTPStorage_SD::ScanDir(unsigned long)+0x10c>
    181a:	ldr	r3, [r0, #0]
    181c:	ldr	r3, [r3, #72]	; 0x48
    181e:	blx	r3
        r.isdir = child_.isDirectory();
    1820:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    1824:	cmp	r0, #0
    1826:	beq.n	18a4 <MTPStorage_SD::ScanDir(unsigned long)+0x134>
    1828:	ldr	r0, [r4, #60]	; 0x3c
    182a:	movs	r3, #0
    182c:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    182e:	movs	r3, #0
    1830:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1834:	cmp	r0, #0
    1836:	beq.n	18b6 <MTPStorage_SD::ScanDir(unsigned long)+0x146>
    1838:	ldr	r3, [r0, #0]
    183a:	ldr	r3, [r3, #68]	; 0x44
    183c:	blx	r3
    183e:	mov	r1, r0
        sd_getName(child_,r.name,64);
    1840:	add.w	r0, sp, #94	; 0x5e
    1844:	bl	c784 <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1848:	ldr	r5, [r4, #72]	; 0x48
    184a:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    184c:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    184e:	str	r3, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    1850:	mov	r1, r5
    1852:	add	r2, sp, #80	; 0x50
    1854:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1858:	ldr	r0, [r4, #60]	; 0x3c
    185a:	cmp	r0, #0
    185c:	beq.n	17b6 <MTPStorage_SD::ScanDir(unsigned long)+0x46>
    185e:	ldr	r3, [r0, #0]
    1860:	ldr	r3, [r3, #60]	; 0x3c
    1862:	blx	r3
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    1864:	ldr	r1, [r4, #40]	; 0x28
    1866:	cmp	r1, #0
    1868:	bne.n	17bc <MTPStorage_SD::ScanDir(unsigned long)+0x4c>
    186a:	strb.w	r1, [sp, #84]	; 0x54
    186e:	str.w	r8, [sp, #88]	; 0x58
    1872:	strb.w	r1, [sp, #92]	; 0x5c
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    1876:	str	r7, [sp, #80]	; 0x50
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    1878:	str	r1, [sp, #96]	; 0x60
    187a:	b.n	17c6 <MTPStorage_SD::ScanDir(unsigned long)+0x56>
        if(!sd_isOpen(child_)) break;

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    187c:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    1880:	movs	r3, #0
    1882:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    1884:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1888:	ldr	r1, [pc, #52]	; (18c0 <MTPStorage_SD::ScanDir(unsigned long)+0x150>)
    188a:	b.n	1840 <MTPStorage_SD::ScanDir(unsigned long)+0xd0>
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    188c:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    188e:	mov	r2, sp
    1890:	mov	r1, r6
    1892:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    1894:	str	r5, [sp, #4]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    1896:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    189a:	bl	fc4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    189e:	add	sp, #160	; 0xa0
    18a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    18a4:	ldr	r0, [r4, #60]	; 0x3c
    18a6:	cmp	r0, #0
    18a8:	beq.n	1880 <MTPStorage_SD::ScanDir(unsigned long)+0x110>
    18aa:	ldr	r3, [r0, #0]
    18ac:	ldr	r3, [r3, #56]	; 0x38
    18ae:	blx	r3
    18b0:	mov	r3, r0
    18b2:	ldr	r0, [r4, #60]	; 0x3c
    18b4:	b.n	182c <MTPStorage_SD::ScanDir(unsigned long)+0xbc>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    18b6:	ldr	r1, [pc, #8]	; (18c0 <MTPStorage_SD::ScanDir(unsigned long)+0x150>)
    18b8:	b.n	1840 <MTPStorage_SD::ScanDir(unsigned long)+0xd0>
    18ba:	nop
    18bc:	.word	0x0000fc0c
    18c0:	.word	0x0000fc78

000018c4 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]>:

  void MTPStorage_SD::ScanAll() 
    18c4:	push	{r3, r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    18c6:	ldrb.w	r3, [r0, #76]	; 0x4c
    }
  }

  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    all_scanned_ = true;
    18ca:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
    18cc:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    18ce:	strb.w	r2, [r0, #77]	; 0x4d

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    18d2:	cbz	r3, 18ec <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]+0x28>
  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
    18d4:	ldr	r3, [r5, #72]	; 0x48
    18d6:	cbz	r3, 18ea <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]+0x26>
    18d8:	movs	r4, #0
    18da:	mov	r1, r4
    18dc:	mov	r0, r5
    18de:	bl	1770 <MTPStorage_SD::ScanDir(unsigned long)>
    18e2:	ldr	r3, [r5, #72]	; 0x48
    18e4:	adds	r4, #1
    18e6:	cmp	r3, r4
    18e8:	bhi.n	18da <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]+0x16>
    18ea:	pop	{r3, r4, r5, pc}
    18ec:	bl	ff8 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]>
    18f0:	b.n	18d4 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]+0x10>
    18f2:	nop

000018f4 <MTPStorage_SD::StartGetObjectHandles(unsigned long)>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    18f4:	push	{r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    18f6:	ldrb.w	r3, [r0, #76]	; 0x4c
    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    18fa:	sub	sp, #84	; 0x54
    18fc:	mov	r4, r0
    18fe:	mov	r5, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    1900:	cbz	r3, 193e <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4a>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    1902:	cbz	r5, 192a <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x36>
    { if (parent == 0xFFFFFFFF) parent = 0;
    1904:	adds	r3, r5, #1
    1906:	it	eq
    1908:	moveq	r5, #0

      ScanDir(parent);
    190a:	mov	r1, r5
    190c:	mov	r0, r4
    190e:	bl	1770 <MTPStorage_SD::ScanDir(unsigned long)>
      follow_sibling_ = true;
    1912:	movs	r3, #1
    1914:	strb.w	r3, [r4, #84]	; 0x54
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    1918:	mov	r2, r5
    191a:	mov	r1, r4
    191c:	mov	r0, sp
    191e:	bl	108c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1922:	ldr	r3, [sp, #4]
    1924:	str	r3, [r4, #80]	; 0x50
    else 
    { ScanAll();
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    1926:	add	sp, #84	; 0x54
    1928:	pop	{r4, r5, pc}
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    192a:	ldrb.w	r3, [r4, #77]	; 0x4d
    192e:	cbz	r3, 1944 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x50>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    1930:	movs	r2, #0
      next_ = 1;
    1932:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    1934:	strb.w	r2, [r4, #84]	; 0x54
      next_ = 1;
    1938:	str	r3, [r4, #80]	; 0x50
    }
  }
    193a:	add	sp, #84	; 0x54
    193c:	pop	{r4, r5, pc}
    193e:	bl	ff8 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]>
    1942:	b.n	1902 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0xe>
    1944:	mov	r0, r4
    1946:	bl	18c4 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    194a:	movs	r2, #0
      next_ = 1;
    194c:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    194e:	strb.w	r2, [r4, #84]	; 0x54
      next_ = 1;
    1952:	str	r3, [r4, #80]	; 0x50
    1954:	b.n	193a <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x46>
    1956:	nop

00001958 <Storage_init()>:
    *ms10 = second() & 1 ? 100 : 0;
  }


 bool Storage_init()
  { 
    1958:	push	{r3, r4, r5, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    195a:	ldr	r4, [pc, #52]	; (1990 <Storage_init()+0x38>)
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    195c:	subw	r5, r4, #1164	; 0x48c
    1960:	mov.w	r1, #0
    1964:	mov	r0, r4
    1966:	bl	8d7c <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    196a:	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    196c:	str.w	r4, [r5, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    1970:	bl	84dc <SdioCard::errorCode() const>
    1974:	cbz	r0, 197a <Storage_init()+0x22>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    if (!sd_begin(SD_CONFIG)) return false;
    1976:	movs	r0, #0
    1978:	pop	{r3, r4, r5, pc}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    197a:	ldr.w	r1, [r5, #1160]	; 0x488
    197e:	adds	r0, r5, #4
    1980:	bl	7bc8 <FsVolume::begin(BlockDeviceInterface*)>
    1984:	cmp	r0, #0
    1986:	beq.n	1976 <Storage_init()+0x1e>

    // Set Time callback
    FsDateTime::callback = dateTime;
    1988:	ldr	r3, [pc, #8]	; (1994 <Storage_init()+0x3c>)
    198a:	ldr	r2, [pc, #12]	; (1998 <Storage_init()+0x40>)
    198c:	str	r2, [r3, #0]

    return true;
	}
    198e:	pop	{r3, r4, r5, pc}
    1990:	.word	0x1fff196c
    1994:	.word	0x1fff1990
    1998:	.word	0x000007cd

0000199c <MTPD::get_buffer()>:
    }

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    199c:	push	{r4, lr}
    199e:	mov	r4, r0
    19a0:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    19a2:	cbnz	r0, 19ac <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    19a4:	bl	9c9c <usb_malloc>
    19a8:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    19aa:	cbz	r0, 19ae <MTPD::get_buffer()+0x12>
    19ac:	pop	{r4, pc}
    19ae:	bl	ef0 <mtp_yield()>
    19b2:	b.n	19a0 <MTPD::get_buffer()+0x4>

000019b4 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    19b4:	cmp	r2, #0
    19b6:	ble.n	1a16 <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    19b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    19bc:	mov.w	r9, #0
    19c0:	mov	r6, r2
    19c2:	mov	r7, r1
    19c4:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    19c6:	mov	r8, r9
    19c8:	b.n	19ce <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    19ca:	cmp	r6, r9
    19cc:	ble.n	1a12 <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    19ce:	mov	r0, r5
    19d0:	bl	199c <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    19d4:	ldr	r3, [r5, #4]
    19d6:	ldrh.w	r0, [r3], #8
    19da:	rsb	r2, r9, r6
    19de:	rsb	r4, r0, #64	; 0x40
    19e2:	cmp	r4, r2
    19e4:	it	ge
    19e6:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    19e8:	add.w	r1, r7, r9
    19ec:	add	r0, r3
    19ee:	mov	r2, r4
    19f0:	bl	94a8 <memcpy>
        data_buffer_->len += to_copy;
    19f4:	ldr	r1, [r5, #4]
    19f6:	ldrh	r3, [r1, #0]
    19f8:	add	r3, r4
    19fa:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    19fc:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    19fe:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    1a00:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    1a02:	bne.n	19ca <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    1a04:	movs	r0, #4
    1a06:	bl	9e98 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1a0a:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    1a0c:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1a10:	bgt.n	19ce <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    1a12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a16:	bx	lr

00001a18 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    1a18:	push	{r4, r5, lr}
    if (*str) 
    1a1a:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    1a1c:	sub	sp, #12
    1a1e:	mov	r4, r0
    if (*str) 
    1a20:	cbz	r3, 1a7c <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    1a22:	mov	r0, r1
    1a24:	mov	r5, r1
    1a26:	bl	c840 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a2a:	ldrb	r1, [r4, #8]
    1a2c:	adds	r0, #1
    1a2e:	strb.w	r0, [sp, #3]
    1a32:	cbz	r1, 1a8e <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    1a34:	ldr	r3, [r4, #12]
    1a36:	adds	r3, #1
    1a38:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a3a:	ldrb	r2, [r5, #0]
    1a3c:	cbnz	r2, 1a4c <MTPD::writestring(char const*)+0x34>
    1a3e:	b.n	1a74 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1a40:	ldr	r3, [r4, #12]
    1a42:	adds	r3, #2
    1a44:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a46:	ldrb.w	r2, [r5, #1]!
    1a4a:	cbz	r2, 1a6a <MTPD::writestring(char const*)+0x52>
    1a4c:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a50:	cmp	r1, #0
    1a52:	bne.n	1a40 <MTPD::writestring(char const*)+0x28>
    1a54:	movs	r2, #2
    1a56:	add.w	r1, sp, #6
    1a5a:	mov	r0, r4
    1a5c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a60:	ldrb.w	r2, [r5, #1]!
    1a64:	ldrb	r1, [r4, #8]
    1a66:	cmp	r2, #0
    1a68:	bne.n	1a4c <MTPD::writestring(char const*)+0x34>
    1a6a:	movs	r3, #0
    1a6c:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a70:	cbz	r1, 1ab2 <MTPD::writestring(char const*)+0x9a>
    1a72:	ldr	r3, [r4, #12]
      write_length_ += len;
    1a74:	adds	r3, #2
    1a76:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1a78:	add	sp, #12
    1a7a:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a7c:	ldrb	r2, [r0, #8]
    1a7e:	strb.w	r3, [sp, #2]
    1a82:	cbz	r2, 1aa4 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    1a84:	ldr	r3, [r0, #12]
    1a86:	adds	r3, #1
    1a88:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1a8a:	add	sp, #12
    1a8c:	pop	{r4, r5, pc}
    1a8e:	movs	r2, #1
    1a90:	add.w	r1, sp, #3
    1a94:	mov	r0, r4
    1a96:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a9a:	ldrb	r2, [r5, #0]
    1a9c:	ldrb	r1, [r4, #8]
    1a9e:	cmp	r2, #0
    1aa0:	bne.n	1a4c <MTPD::writestring(char const*)+0x34>
    1aa2:	b.n	1a6a <MTPD::writestring(char const*)+0x52>
    1aa4:	movs	r2, #1
    1aa6:	add.w	r1, sp, #2
    1aaa:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    1aae:	add	sp, #12
    1ab0:	pop	{r4, r5, pc}
    1ab2:	mov	r0, r4
    1ab4:	movs	r2, #2
    1ab6:	add	r1, sp, #4
    1ab8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1abc:	add	sp, #12
    1abe:	pop	{r4, r5, pc}

00001ac0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1ac0:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1ac2:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1ac4:	sub	sp, #8
    1ac6:	mov	r4, r0
    1ac8:	mov	r5, r1
    1aca:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1ace:	cbz	r3, 1b08 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    1ad0:	ldr	r3, [r0, #12]
    1ad2:	movw	r2, #65535	; 0xffff
    1ad6:	adds	r3, #2
    1ad8:	str	r3, [r0, #12]
    1ada:	strh.w	r2, [sp, #6]
    1ade:	adds	r3, #2
    1ae0:	movs	r2, #0
    1ae2:	str	r3, [r4, #12]
    1ae4:	strb.w	r2, [sp, #2]
    1ae8:	adds	r3, #1
    1aea:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1aec:	movw	r3, #54274	; 0xd402
    1af0:	cmp	r5, r3
    1af2:	beq.n	1b44 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1af4:	ldrb	r3, [r4, #8]
    1af6:	movs	r2, #0
    1af8:	strb.w	r2, [sp, #3]
    1afc:	cbz	r3, 1b60 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    1afe:	ldr	r3, [r4, #12]
    1b00:	adds	r3, #1
    1b02:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1b04:	add	sp, #8
    1b06:	pop	{r4, r5, r6, pc}
    1b08:	movs	r2, #2
    1b0a:	add	r1, sp, #4
    1b0c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1b10:	ldrb	r6, [r4, #8]
    1b12:	movw	r3, #65535	; 0xffff
    1b16:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b1a:	cbnz	r6, 1b70 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    1b1c:	movs	r2, #2
    1b1e:	add.w	r1, sp, #6
    1b22:	mov	r0, r4
    1b24:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1b28:	ldrb	r3, [r4, #8]
    1b2a:	strb.w	r6, [sp, #2]
    1b2e:	cbnz	r3, 1b74 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    1b30:	movs	r2, #1
    1b32:	add.w	r1, sp, #2
    1b36:	mov	r0, r4
    1b38:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1b3c:	movw	r3, #54274	; 0xd402
    1b40:	cmp	r5, r3
    1b42:	bne.n	1af4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    1b44:	ldr	r1, [pc, #48]	; (1b78 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    1b46:	mov	r0, r4
    1b48:	bl	1a18 <MTPD::writestring(char const*)>
    1b4c:	ldr	r1, [pc, #40]	; (1b78 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    1b4e:	mov	r0, r4
    1b50:	bl	1a18 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b54:	ldrb	r3, [r4, #8]
    1b56:	movs	r2, #0
    1b58:	strb.w	r2, [sp, #3]
    1b5c:	cmp	r3, #0
    1b5e:	bne.n	1afe <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    1b60:	mov	r0, r4
    1b62:	movs	r2, #1
    1b64:	add.w	r1, sp, #3
    1b68:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1b6c:	add	sp, #8
    1b6e:	pop	{r4, r5, r6, pc}
    1b70:	ldr	r3, [r4, #12]
    1b72:	b.n	1ade <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    1b74:	ldr	r3, [r4, #12]
    1b76:	b.n	1ae8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    1b78:	.word	0x0000fe18

00001b7c <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1b7c:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b7e:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1b80:	sub	sp, #44	; 0x2c
    1b82:	movs	r5, #100	; 0x64
    1b84:	mov	r4, r0
    1b86:	strh.w	r5, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b8a:	cmp	r3, #0
    1b8c:	beq.n	1c6e <MTPD::WriteDescriptor()+0xf2>
      write_length_ += len;
    1b8e:	ldr	r3, [r0, #12]
    1b90:	movs	r2, #6
    1b92:	adds	r3, #2
    1b94:	str	r3, [r0, #12]
    1b96:	str	r2, [sp, #20]
    1b98:	adds	r3, #4
    1b9a:	movs	r2, #100	; 0x64
    1b9c:	str	r3, [r4, #12]
    1b9e:	strh.w	r2, [sp, #4]
    1ba2:	adds	r3, #2
    1ba4:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    1ba6:	ldr	r1, [pc, #464]	; (1d78 <MTPD::WriteDescriptor()+0x1fc>)
    1ba8:	mov	r0, r4
    1baa:	bl	1a18 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1bae:	ldrb	r3, [r4, #8]
    1bb0:	movs	r2, #0
    1bb2:	strh.w	r2, [sp, #2]
    1bb6:	cmp	r3, #0
    1bb8:	beq.w	1d30 <MTPD::WriteDescriptor()+0x1b4>
      write_length_ += len;
    1bbc:	ldr	r3, [r4, #12]
    1bbe:	movs	r2, #18
    1bc0:	adds	r3, #2
    1bc2:	str	r3, [r4, #12]
    1bc4:	str	r2, [sp, #16]
    1bc6:	adds	r3, #4
    1bc8:	str	r3, [r4, #12]
    1bca:	movs	r6, #1
    1bcc:	ldr	r5, [pc, #428]	; (1d7c <MTPD::WriteDescriptor()+0x200>)
    1bce:	movw	r3, #4097	; 0x1001
    1bd2:	add.w	r7, r5, #34	; 0x22
    1bd6:	b.n	1be8 <MTPD::WriteDescriptor()+0x6c>
    1bd8:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bda:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1bdc:	add.w	r3, r3, #2
    1be0:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1be2:	beq.n	1c00 <MTPD::WriteDescriptor()+0x84>
    1be4:	ldrh.w	r3, [r5, #2]!
    1be8:	strh.w	r3, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1bec:	cmp	r6, #0
    1bee:	bne.n	1bd8 <MTPD::WriteDescriptor()+0x5c>
    1bf0:	movs	r2, #2
    1bf2:	add	r1, sp, #8
    1bf4:	mov	r0, r4
    1bf6:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1bfa:	cmp	r7, r5
    1bfc:	ldrb	r6, [r4, #8]
    1bfe:	bne.n	1be4 <MTPD::WriteDescriptor()+0x68>
    1c00:	movs	r3, #0
    1c02:	str	r3, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1c04:	cmp	r6, #0
    1c06:	beq.n	1ca2 <MTPD::WriteDescriptor()+0x126>
      write_length_ += len;
    1c08:	ldr	r3, [r4, #12]
    1c0a:	movs	r2, #1
    1c0c:	adds	r3, #4
    1c0e:	str	r3, [r4, #12]
    1c10:	str	r2, [sp, #32]
    1c12:	adds	r3, #4
    1c14:	movw	r2, #54274	; 0xd402
    1c18:	str	r3, [r4, #12]
    1c1a:	strh.w	r2, [sp, #14]
    1c1e:	adds	r3, #2
    1c20:	movs	r2, #0
    1c22:	str	r3, [r4, #12]
    1c24:	str	r2, [sp, #28]
    1c26:	adds	r3, #4
    1c28:	movs	r2, #2
    1c2a:	str	r3, [r4, #12]
    1c2c:	str	r2, [sp, #24]
    1c2e:	adds	r3, #4
    1c30:	mov.w	r2, #12288	; 0x3000
    1c34:	str	r3, [r4, #12]
    1c36:	strh.w	r2, [sp, #12]
    1c3a:	adds	r3, #2
    1c3c:	movw	r2, #12289	; 0x3001
    1c40:	str	r3, [r4, #12]
    1c42:	strh.w	r2, [sp, #10]
    1c46:	adds	r3, #2
    1c48:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    1c4a:	mov	r0, r4
    1c4c:	ldr	r1, [pc, #304]	; (1d80 <MTPD::WriteDescriptor()+0x204>)
    1c4e:	bl	1a18 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    1c52:	mov	r0, r4
    1c54:	ldr	r1, [pc, #300]	; (1d84 <MTPD::WriteDescriptor()+0x208>)
    1c56:	bl	1a18 <MTPD::writestring(char const*)>
    writestring(MTP_VERS);      // version
    1c5a:	mov	r0, r4
    1c5c:	ldr	r1, [pc, #296]	; (1d88 <MTPD::WriteDescriptor()+0x20c>)
    1c5e:	bl	1a18 <MTPD::writestring(char const*)>
    writestring(MTP_SERNR);     // serial
    1c62:	mov	r0, r4
    1c64:	ldr	r1, [pc, #292]	; (1d8c <MTPD::WriteDescriptor()+0x210>)
    1c66:	bl	1a18 <MTPD::writestring(char const*)>
  }
    1c6a:	add	sp, #44	; 0x2c
    1c6c:	pop	{r4, r5, r6, r7, pc}
    1c6e:	movs	r2, #2
    1c70:	add.w	r1, sp, #6
    1c74:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1c78:	ldrb	r3, [r4, #8]
    1c7a:	movs	r2, #6
    1c7c:	str	r2, [sp, #20]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1c7e:	cmp	r3, #0
    1c80:	bne.n	1d5e <MTPD::WriteDescriptor()+0x1e2>
    1c82:	movs	r2, #4
    1c84:	add	r1, sp, #20
    1c86:	mov	r0, r4
    1c88:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1c8c:	ldrb	r3, [r4, #8]
    1c8e:	strh.w	r5, [sp, #4]
    1c92:	cmp	r3, #0
    1c94:	bne.n	1d62 <MTPD::WriteDescriptor()+0x1e6>
    1c96:	movs	r2, #2
    1c98:	add	r1, sp, #4
    1c9a:	mov	r0, r4
    1c9c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1ca0:	b.n	1ba6 <MTPD::WriteDescriptor()+0x2a>
    1ca2:	movs	r2, #4
    1ca4:	add	r1, sp, #36	; 0x24
    1ca6:	mov	r0, r4
    1ca8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1cac:	ldrb	r3, [r4, #8]
    1cae:	movs	r2, #1
    1cb0:	str	r2, [sp, #32]
    1cb2:	cmp	r3, #0
    1cb4:	bne.n	1d66 <MTPD::WriteDescriptor()+0x1ea>
    1cb6:	movs	r2, #4
    1cb8:	add	r1, sp, #32
    1cba:	mov	r0, r4
    1cbc:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1cc0:	ldrb	r3, [r4, #8]
    1cc2:	movw	r2, #54274	; 0xd402
    1cc6:	strh.w	r2, [sp, #14]
    1cca:	cmp	r3, #0
    1ccc:	bne.n	1d6a <MTPD::WriteDescriptor()+0x1ee>
    1cce:	movs	r2, #2
    1cd0:	add.w	r1, sp, #14
    1cd4:	mov	r0, r4
    1cd6:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1cda:	ldrb	r3, [r4, #8]
    1cdc:	str	r6, [sp, #28]
    1cde:	cmp	r3, #0
    1ce0:	bne.n	1d6e <MTPD::WriteDescriptor()+0x1f2>
    1ce2:	movs	r2, #4
    1ce4:	add	r1, sp, #28
    1ce6:	mov	r0, r4
    1ce8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1cec:	ldrb	r3, [r4, #8]
    1cee:	movs	r5, #2
    1cf0:	str	r5, [sp, #24]
    1cf2:	cmp	r3, #0
    1cf4:	bne.n	1d72 <MTPD::WriteDescriptor()+0x1f6>
    1cf6:	movs	r2, #4
    1cf8:	add	r1, sp, #24
    1cfa:	mov	r0, r4
    1cfc:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1d00:	ldrb	r3, [r4, #8]
    1d02:	mov.w	r2, #12288	; 0x3000
    1d06:	strh.w	r2, [sp, #12]
    1d0a:	cbnz	r3, 1d56 <MTPD::WriteDescriptor()+0x1da>
    1d0c:	mov	r2, r5
    1d0e:	add	r1, sp, #12
    1d10:	mov	r0, r4
    1d12:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1d16:	ldrb	r3, [r4, #8]
    1d18:	movw	r2, #12289	; 0x3001
    1d1c:	strh.w	r2, [sp, #10]
    1d20:	cbnz	r3, 1d52 <MTPD::WriteDescriptor()+0x1d6>
    1d22:	mov	r2, r5
    1d24:	add.w	r1, sp, #10
    1d28:	mov	r0, r4
    1d2a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1d2e:	b.n	1c4a <MTPD::WriteDescriptor()+0xce>
    1d30:	movs	r2, #2
    1d32:	add.w	r1, sp, r2
    1d36:	mov	r0, r4
    1d38:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1d3c:	ldrb	r3, [r4, #8]
    1d3e:	movs	r2, #18
    1d40:	str	r2, [sp, #16]
    1d42:	cbnz	r3, 1d5a <MTPD::WriteDescriptor()+0x1de>
    1d44:	movs	r2, #4
    1d46:	add	r1, sp, #16
    1d48:	mov	r0, r4
    1d4a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1d4e:	ldrb	r6, [r4, #8]
    1d50:	b.n	1bcc <MTPD::WriteDescriptor()+0x50>
    1d52:	ldr	r3, [r4, #12]
    1d54:	b.n	1c46 <MTPD::WriteDescriptor()+0xca>
    1d56:	ldr	r3, [r4, #12]
    1d58:	b.n	1c3a <MTPD::WriteDescriptor()+0xbe>
    1d5a:	ldr	r3, [r4, #12]
    1d5c:	b.n	1bc6 <MTPD::WriteDescriptor()+0x4a>
    1d5e:	ldr	r3, [r4, #12]
    1d60:	b.n	1b98 <MTPD::WriteDescriptor()+0x1c>
    1d62:	ldr	r3, [r4, #12]
    1d64:	b.n	1ba2 <MTPD::WriteDescriptor()+0x26>
    1d66:	ldr	r3, [r4, #12]
    1d68:	b.n	1c12 <MTPD::WriteDescriptor()+0x96>
    1d6a:	ldr	r3, [r4, #12]
    1d6c:	b.n	1c1e <MTPD::WriteDescriptor()+0xa2>
    1d6e:	ldr	r3, [r4, #12]
    1d70:	b.n	1c26 <MTPD::WriteDescriptor()+0xaa>
    1d72:	ldr	r3, [r4, #12]
    1d74:	b.n	1c2e <MTPD::WriteDescriptor()+0xb2>
    1d76:	nop
    1d78:	.word	0x0000fe20
    1d7c:	.word	0x0000fde0
    1d80:	.word	0x0000fe34
    1d84:	.word	0x0000fe3c
    1d88:	.word	0x0000fe48
    1d8c:	.word	0x0000fe4c

00001d90 <MTPD::WriteStorageIDs()>:
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    1d90:	push	{r4, r5, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1d92:	ldrb	r3, [r0, #8]
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    1d94:	sub	sp, #12
    1d96:	movs	r5, #1
    1d98:	mov	r4, r0
    1d9a:	str	r5, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1d9c:	cbz	r3, 1dac <MTPD::WriteStorageIDs()+0x1c>
      write_length_ += len;
    1d9e:	ldr	r3, [r0, #12]
    1da0:	adds	r3, #4
    1da2:	str	r3, [r0, #12]
    1da4:	adds	r3, #4
    1da6:	str	r3, [r4, #12]
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    1da8:	add	sp, #12
    1daa:	pop	{r4, r5, pc}
    1dac:	movs	r2, #4
    1dae:	add.w	r1, sp, r2
    1db2:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1db6:	ldrb	r3, [r4, #8]
    1db8:	str	r5, [sp, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1dba:	cbnz	r3, 1dca <MTPD::WriteStorageIDs()+0x3a>
    1dbc:	mov	r0, r4
    1dbe:	movs	r2, #4
    1dc0:	mov	r1, sp
    1dc2:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    1dc6:	add	sp, #12
    1dc8:	pop	{r4, r5, pc}
    1dca:	ldr	r3, [r4, #12]
    1dcc:	b.n	1da4 <MTPD::WriteStorageIDs()+0x14>
    1dce:	nop

00001dd0 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1dd0:	push	{r4, r5, r6, lr}
    1dd2:	mov	r4, r0
    if (write_get_length_) {
    1dd4:	ldrb	r5, [r0, #8]
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1dd6:	ldr	r0, [r0, #0]
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1dd8:	sub	sp, #8
    1dda:	mov	r6, r2
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1ddc:	ldr	r3, [r0, #0]
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    1dde:	cbz	r5, 1dfe <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2e>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1de0:	mov	r1, r2
    1de2:	ldr	r3, [r3, #20]
    1de4:	blx	r3
    int num = 0;
    1de6:	movs	r5, #0
    while (storage_->GetNextObjectHandle()) num++;
    1de8:	ldr	r0, [r4, #0]
    1dea:	ldr	r3, [r0, #0]
    1dec:	ldr	r3, [r3, #24]
    1dee:	blx	r3
    1df0:	adds	r5, #1
    1df2:	cmp	r0, #0
    1df4:	bne.n	1de8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x18>
  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    1df6:	lsls	r5, r5, #2
    1df8:	str	r5, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
    1dfa:	add	sp, #8
    1dfc:	pop	{r4, r5, r6, pc}
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1dfe:	ldr	r3, [r3, #20]
    1e00:	mov	r1, r2
    1e02:	blx	r3
    1e04:	b.n	1e08 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    1e06:	adds	r5, #1
    1e08:	ldr	r0, [r4, #0]
    1e0a:	ldr	r3, [r0, #0]
    1e0c:	ldr	r3, [r3, #24]
    1e0e:	blx	r3
    1e10:	cmp	r0, #0
    1e12:	bne.n	1e06 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e14:	ldrb	r3, [r4, #8]
    1e16:	str	r5, [sp, #4]
    1e18:	cbz	r3, 1e50 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x80>
      write_length_ += len;
    1e1a:	ldr	r3, [r4, #12]
    1e1c:	adds	r3, #4
    1e1e:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    1e20:	ldr	r0, [r4, #0]
    1e22:	ldr	r3, [r0, #0]
    1e24:	mov	r1, r6
    1e26:	ldr	r3, [r3, #20]
    1e28:	blx	r3
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    1e2a:	ldr	r0, [r4, #0]
    1e2c:	ldr	r3, [r0, #0]
    1e2e:	ldr	r3, [r3, #24]
    1e30:	blx	r3
    1e32:	cmp	r0, #0
    1e34:	beq.n	1dfa <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e36:	ldrb	r3, [r4, #8]
    1e38:	str	r0, [sp, #0]
    1e3a:	cbz	r3, 1e44 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x74>
      write_length_ += len;
    1e3c:	ldr	r3, [r4, #12]
    1e3e:	adds	r3, #4
    1e40:	str	r3, [r4, #12]
    1e42:	b.n	1e2a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    1e44:	movs	r2, #4
    1e46:	mov	r1, sp
    1e48:	mov	r0, r4
    1e4a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1e4e:	b.n	1e2a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    1e50:	movs	r2, #4
    1e52:	add.w	r1, sp, r2
    1e56:	mov	r0, r4
    1e58:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1e5c:	b.n	1e20 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x50>
    1e5e:	nop

00001e60 <MTPD::GetObjectInfo(unsigned long)>:
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    1e60:	push	{r4, r5, r6, lr}
    1e62:	mov	r4, r0
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    1e64:	ldr	r0, [r0, #0]
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    1e66:	sub	sp, #328	; 0x148
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    1e68:	ldr	r3, [r0, #0]
    1e6a:	add	r5, sp, #24
    1e6c:	str	r5, [sp, #0]
    1e6e:	ldr	r6, [r3, #28]
    1e70:	add	r2, sp, #72	; 0x48
    1e72:	add	r3, sp, #20
    1e74:	blx	r6
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e76:	ldrb	r3, [r4, #8]
    1e78:	movs	r2, #1
    1e7a:	str	r2, [sp, #28]
    1e7c:	cmp	r3, #0
    1e7e:	beq.n	1f34 <MTPD::GetObjectInfo(unsigned long)+0xd4>
      write_length_ += len;
    1e80:	ldr	r3, [r4, #12]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1e82:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1e84:	adds	r3, #4
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1e86:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1e88:	str	r3, [r4, #12]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1e8a:	beq.w	2064 <MTPD::GetObjectInfo(unsigned long)+0x204>
    1e8e:	movs	r2, #0
    1e90:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1e94:	adds	r3, #2
    1e96:	movs	r2, #0
    1e98:	str	r3, [r4, #12]
    1e9a:	strh.w	r2, [sp, #14]
    1e9e:	adds	r3, #2
    1ea0:	ldr	r2, [sp, #20]
    1ea2:	str	r3, [r4, #12]
    1ea4:	str	r2, [sp, #60]	; 0x3c
    1ea6:	adds	r3, #4
    1ea8:	movs	r2, #0
    1eaa:	str	r3, [r4, #12]
    1eac:	strh.w	r2, [sp, #12]
    1eb0:	adds	r3, #2
    1eb2:	movs	r2, #0
    1eb4:	str	r3, [r4, #12]
    1eb6:	str	r2, [sp, #56]	; 0x38
    1eb8:	adds	r3, #4
    1eba:	movs	r2, #0
    1ebc:	str	r3, [r4, #12]
    1ebe:	str	r2, [sp, #52]	; 0x34
    1ec0:	adds	r3, #4
    1ec2:	movs	r2, #0
    1ec4:	str	r3, [r4, #12]
    1ec6:	str	r2, [sp, #48]	; 0x30
    1ec8:	adds	r3, #4
    1eca:	movs	r2, #0
    1ecc:	str	r3, [r4, #12]
    1ece:	str	r2, [sp, #44]	; 0x2c
    1ed0:	adds	r3, #4
    1ed2:	movs	r2, #0
    1ed4:	str	r3, [r4, #12]
    1ed6:	str	r2, [sp, #40]	; 0x28
    1ed8:	adds	r3, #4
    1eda:	movs	r2, #0
    1edc:	str	r3, [r4, #12]
    1ede:	str	r2, [sp, #36]	; 0x24
    1ee0:	adds	r3, #4
    1ee2:	ldr	r2, [r5, #0]
    1ee4:	str	r3, [r4, #12]
    1ee6:	str	r2, [sp, #32]
    1ee8:	ldr	r2, [sp, #20]
    1eea:	sub.w	r2, r2, #4294967295
    1eee:	clz	r2, r2
    1ef2:	lsrs	r2, r2, #5
    1ef4:	adds	r3, #4
    1ef6:	str	r3, [r4, #12]
    1ef8:	strh.w	r2, [sp, #18]
    1efc:	adds	r3, #2
    1efe:	movs	r2, #0
    1f00:	str	r3, [r4, #12]
    1f02:	str	r2, [sp, #68]	; 0x44
    1f04:	adds	r3, #4
    1f06:	movs	r2, #0
    1f08:	str	r3, [r4, #12]
    1f0a:	str	r2, [sp, #64]	; 0x40
    1f0c:	adds	r3, #4
    1f0e:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    1f10:	add	r1, sp, #72	; 0x48
    1f12:	mov	r0, r4
    1f14:	bl	1a18 <MTPD::writestring(char const*)>
    writestring("");  // date created
    1f18:	mov	r0, r4
    1f1a:	ldr	r1, [pc, #396]	; (20a8 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    1f1c:	bl	1a18 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    1f20:	mov	r0, r4
    1f22:	ldr	r1, [pc, #388]	; (20a8 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    1f24:	bl	1a18 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    1f28:	mov	r0, r4
    1f2a:	ldr	r1, [pc, #380]	; (20a8 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    1f2c:	bl	1a18 <MTPD::writestring(char const*)>
  }
    1f30:	add	sp, #328	; 0x148
    1f32:	pop	{r4, r5, r6, pc}
    1f34:	add	r1, sp, #28
    1f36:	movs	r2, #4
    1f38:	mov	r0, r4
    1f3a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1f3e:	ldr	r3, [sp, #20]
    1f40:	ldrb	r6, [r4, #8]
    1f42:	adds	r3, #1
    1f44:	movw	r3, #12289	; 0x3001
    1f48:	it	ne
    1f4a:	movne	r3, #0
    1f4c:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1f50:	cmp	r6, #0
    1f52:	bne.w	2076 <MTPD::GetObjectInfo(unsigned long)+0x216>
    1f56:	add	r1, sp, #16
    1f58:	movs	r2, #2
    1f5a:	mov	r0, r4
    1f5c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1f60:	ldrb	r3, [r4, #8]
    1f62:	strh.w	r6, [sp, #14]
    1f66:	cmp	r3, #0
    1f68:	bne.w	207a <MTPD::GetObjectInfo(unsigned long)+0x21a>
    1f6c:	movs	r2, #2
    1f6e:	add.w	r1, sp, #14
    1f72:	mov	r0, r4
    1f74:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1f78:	ldrb	r3, [r4, #8]
    1f7a:	ldr	r2, [sp, #20]
    1f7c:	str	r2, [sp, #60]	; 0x3c
    1f7e:	cmp	r3, #0
    1f80:	bne.n	207e <MTPD::GetObjectInfo(unsigned long)+0x21e>
    1f82:	add	r1, sp, #60	; 0x3c
    1f84:	movs	r2, #4
    1f86:	mov	r0, r4
    1f88:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1f8c:	ldrb	r3, [r4, #8]
    1f8e:	strh.w	r6, [sp, #12]
    1f92:	cmp	r3, #0
    1f94:	bne.n	2082 <MTPD::GetObjectInfo(unsigned long)+0x222>
    1f96:	add	r1, sp, #12
    1f98:	movs	r2, #2
    1f9a:	mov	r0, r4
    1f9c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1fa0:	ldrb	r3, [r4, #8]
    1fa2:	str	r6, [sp, #56]	; 0x38
    1fa4:	cmp	r3, #0
    1fa6:	bne.n	2086 <MTPD::GetObjectInfo(unsigned long)+0x226>
    1fa8:	add	r1, sp, #56	; 0x38
    1faa:	movs	r2, #4
    1fac:	mov	r0, r4
    1fae:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1fb2:	ldrb	r3, [r4, #8]
    1fb4:	str	r6, [sp, #52]	; 0x34
    1fb6:	cmp	r3, #0
    1fb8:	bne.n	208a <MTPD::GetObjectInfo(unsigned long)+0x22a>
    1fba:	add	r1, sp, #52	; 0x34
    1fbc:	movs	r2, #4
    1fbe:	mov	r0, r4
    1fc0:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1fc4:	ldrb	r3, [r4, #8]
    1fc6:	str	r6, [sp, #48]	; 0x30
    1fc8:	cmp	r3, #0
    1fca:	bne.n	208e <MTPD::GetObjectInfo(unsigned long)+0x22e>
    1fcc:	add	r1, sp, #48	; 0x30
    1fce:	movs	r2, #4
    1fd0:	mov	r0, r4
    1fd2:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1fd6:	ldrb	r3, [r4, #8]
    1fd8:	str	r6, [sp, #44]	; 0x2c
    1fda:	cmp	r3, #0
    1fdc:	bne.n	2092 <MTPD::GetObjectInfo(unsigned long)+0x232>
    1fde:	add	r1, sp, #44	; 0x2c
    1fe0:	movs	r2, #4
    1fe2:	mov	r0, r4
    1fe4:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1fe8:	ldrb	r3, [r4, #8]
    1fea:	str	r6, [sp, #40]	; 0x28
    1fec:	cmp	r3, #0
    1fee:	bne.n	2096 <MTPD::GetObjectInfo(unsigned long)+0x236>
    1ff0:	add	r1, sp, #40	; 0x28
    1ff2:	movs	r2, #4
    1ff4:	mov	r0, r4
    1ff6:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    1ffa:	ldrb	r3, [r4, #8]
    1ffc:	str	r6, [sp, #36]	; 0x24
    1ffe:	cmp	r3, #0
    2000:	bne.n	209a <MTPD::GetObjectInfo(unsigned long)+0x23a>
    2002:	movs	r2, #4
    2004:	add	r1, sp, #36	; 0x24
    2006:	mov	r0, r4
    2008:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    200c:	ldrb	r3, [r4, #8]
    200e:	ldr	r2, [r5, #0]
    2010:	str	r2, [sp, #32]
    2012:	cmp	r3, #0
    2014:	bne.n	209e <MTPD::GetObjectInfo(unsigned long)+0x23e>
    2016:	add	r1, sp, #32
    2018:	movs	r2, #4
    201a:	mov	r0, r4
    201c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2020:	ldr	r3, [sp, #20]
    2022:	ldrb	r6, [r4, #8]
    2024:	sub.w	r3, r3, #4294967295
    2028:	clz	r3, r3
    202c:	lsrs	r3, r3, #5
    202e:	strh.w	r3, [sp, #18]
    2032:	cmp	r6, #0
    2034:	bne.n	20a2 <MTPD::GetObjectInfo(unsigned long)+0x242>
    2036:	add.w	r1, sp, #18
    203a:	movs	r2, #2
    203c:	mov	r0, r4
    203e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2042:	ldrb	r5, [r4, #8]
    2044:	str	r6, [sp, #68]	; 0x44
    2046:	cbnz	r5, 2072 <MTPD::GetObjectInfo(unsigned long)+0x212>
    2048:	add	r1, sp, #68	; 0x44
    204a:	movs	r2, #4
    204c:	mov	r0, r4
    204e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2052:	ldrb	r3, [r4, #8]
    2054:	str	r5, [sp, #64]	; 0x40
    2056:	cbnz	r3, 206e <MTPD::GetObjectInfo(unsigned long)+0x20e>
    2058:	add	r1, sp, #64	; 0x40
    205a:	movs	r2, #4
    205c:	mov	r0, r4
    205e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2062:	b.n	1f10 <MTPD::GetObjectInfo(unsigned long)+0xb0>
    2064:	movw	r2, #12289	; 0x3001
    2068:	strh.w	r2, [sp, #16]
    206c:	b.n	1e94 <MTPD::GetObjectInfo(unsigned long)+0x34>
    206e:	ldr	r3, [r4, #12]
    2070:	b.n	1f0c <MTPD::GetObjectInfo(unsigned long)+0xac>
    2072:	ldr	r3, [r4, #12]
    2074:	b.n	1f04 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    2076:	ldr	r3, [r4, #12]
    2078:	b.n	1e94 <MTPD::GetObjectInfo(unsigned long)+0x34>
    207a:	ldr	r3, [r4, #12]
    207c:	b.n	1e9e <MTPD::GetObjectInfo(unsigned long)+0x3e>
    207e:	ldr	r3, [r4, #12]
    2080:	b.n	1ea6 <MTPD::GetObjectInfo(unsigned long)+0x46>
    2082:	ldr	r3, [r4, #12]
    2084:	b.n	1eb0 <MTPD::GetObjectInfo(unsigned long)+0x50>
    2086:	ldr	r3, [r4, #12]
    2088:	b.n	1eb8 <MTPD::GetObjectInfo(unsigned long)+0x58>
    208a:	ldr	r3, [r4, #12]
    208c:	b.n	1ec0 <MTPD::GetObjectInfo(unsigned long)+0x60>
    208e:	ldr	r3, [r4, #12]
    2090:	b.n	1ec8 <MTPD::GetObjectInfo(unsigned long)+0x68>
    2092:	ldr	r3, [r4, #12]
    2094:	b.n	1ed0 <MTPD::GetObjectInfo(unsigned long)+0x70>
    2096:	ldr	r3, [r4, #12]
    2098:	b.n	1ed8 <MTPD::GetObjectInfo(unsigned long)+0x78>
    209a:	ldr	r3, [r4, #12]
    209c:	b.n	1ee0 <MTPD::GetObjectInfo(unsigned long)+0x80>
    209e:	ldr	r3, [r4, #12]
    20a0:	b.n	1ee8 <MTPD::GetObjectInfo(unsigned long)+0x88>
    20a2:	ldr	r3, [r4, #12]
    20a4:	b.n	1efc <MTPD::GetObjectInfo(unsigned long)+0x9c>
    20a6:	nop
    20a8:	.word	0x0000fc78

000020ac <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    20ac:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    20ae:	ldr	r7, [pc, #96]	; (2110 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    20b0:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    20b2:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    20b4:	sub	sp, #12
    20b6:	mov	r5, r0
    20b8:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    20ba:	cbz	r2, 2102 <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    20bc:	ldr	r2, [r0, #12]
    20be:	adds	r2, #4
    20c0:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    20c2:	cbz	r3, 20fe <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    20c4:	ldr	r6, [pc, #76]	; (2114 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    20c6:	movw	r2, #56321	; 0xdc01
    20ca:	movs	r4, #0
    20cc:	b.n	20e0 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    20ce:	ldr	r3, [r5, #12]
    20d0:	adds	r3, #2
    20d2:	str	r3, [r5, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    20d4:	ldr	r3, [r7, #0]
    20d6:	adds	r4, #1
    20d8:	cmp	r3, r4
    20da:	bls.n	20fe <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    20dc:	ldrh.w	r2, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    20e0:	ldrb	r3, [r5, #8]
    20e2:	strh.w	r2, [sp, #2]
    20e6:	cmp	r3, #0
    20e8:	bne.n	20ce <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    20ea:	movs	r2, #2
    20ec:	add.w	r1, sp, r2
    20f0:	mov	r0, r5
    20f2:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    20f6:	ldr	r3, [r7, #0]
    20f8:	adds	r4, #1
    20fa:	cmp	r3, r4
    20fc:	bhi.n	20dc <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    20fe:	add	sp, #12
    2100:	pop	{r4, r5, r6, r7, pc}
    2102:	movs	r2, #4
    2104:	add.w	r1, sp, r2
    2108:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    210c:	ldr	r3, [r7, #0]
    210e:	b.n	20c2 <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    2110:	.word	0x1fff0974
    2114:	.word	0x0000fe04

00002118 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2118:	push	{r4, r5, r6, r7, lr}
    211a:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    211c:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    211e:	sub	sp, #188	; 0xbc
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    2120:	ldr	r3, [r0, #0]
    2122:	add	r4, sp, #20
    2124:	str	r4, [sp, #0]
    2126:	ldr	r6, [r3, #28]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2128:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    212a:	add	r3, sp, #16
    212c:	add	r2, sp, #56	; 0x38
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    212e:	mov	r7, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    2130:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    2132:	sub.w	r2, r4, #56320	; 0xdc00
    2136:	subs	r2, #1
    { char name[128];
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
      dir = size == 0xFFFFFFFFUL;
    2138:	ldr	r3, [sp, #16]
      switch(p2)
    213a:	cmp	r2, #67	; 0x43
    213c:	bhi.n	21a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    213e:	tbb	[pc, r2]
    2142:	.short	0x463d
    2144:	.word	0x2f2f6e61
    2148:	.word	0x2f313137
    214c:	.word	0x2f2f2f56
    2150:	.word	0x2f2f2f2f
    2154:	.word	0x2f2f2f2f
    2158:	.word	0x2f2f2f2f
    215c:	.word	0x2f2f2f2f
    2160:	.word	0x2f2f2f2f
    2164:	.word	0x2f2f2f2f
    2168:	.word	0x2f2f2f2f
    216c:	.word	0x2f2f2f2f
    2170:	.word	0x2f2f2f2f
    2174:	.word	0x2f2f2f2f
    2178:	.word	0x2f2f2f2f
    217c:	.word	0x2f2f2f2f
    2180:	.word	0x2f222f2f
    2184:	.short	0x372f
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2186:	ldrb	r3, [r5, #8]
    2188:	str	r7, [sp, #52]	; 0x34
    218a:	cmp	r3, #0
    218c:	beq.n	222e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x116>
      write_length_ += len;
    218e:	ldr	r3, [r5, #12]
    2190:	adds	r3, #4
    2192:	str	r3, [r5, #12]
    2194:	adds	r3, #4
    2196:	str	r3, [r5, #12]
    2198:	adds	r3, #4
    219a:	str	r3, [r5, #12]
    219c:	adds	r3, #4
    219e:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    21a0:	add	sp, #188	; 0xbc
    21a2:	pop	{r4, r5, r6, r7, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    21a4:	mov	r0, r5
    21a6:	ldr	r1, [pc, #264]	; (22b0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>)
    21a8:	bl	1a18 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    21ac:	add	sp, #188	; 0xbc
    21ae:	pop	{r4, r5, r6, r7, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    21b0:	add	r1, sp, #56	; 0x38
    21b2:	mov	r0, r5
    21b4:	bl	1a18 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    21b8:	add	sp, #188	; 0xbc
    21ba:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21bc:	ldrb	r3, [r5, #8]
    21be:	str	r7, [sp, #24]
    21c0:	cmp	r3, #0
    21c2:	beq.n	227c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
      write_length_ += len;
    21c4:	ldr	r3, [r5, #12]
    21c6:	adds	r3, #4
    21c8:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    21ca:	add	sp, #188	; 0xbc
    21cc:	pop	{r4, r5, r6, r7, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    21ce:	adds	r3, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21d0:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    21d2:	movw	r3, #12289	; 0x3001
    21d6:	it	ne
    21d8:	movne.w	r3, #12288	; 0x3000
    21dc:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21e0:	cmp	r2, #0
    21e2:	beq.n	2270 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
      write_length_ += len;
    21e4:	ldr	r3, [r5, #12]
    21e6:	adds	r3, #2
    21e8:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    21ea:	add	sp, #188	; 0xbc
    21ec:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21ee:	ldrb	r3, [r5, #8]
    21f0:	ldr	r2, [sp, #20]
    21f2:	str	r2, [sp, #36]	; 0x24
    21f4:	cmp	r3, #0
    21f6:	bne.n	21c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xac>
    21f8:	mov	r0, r5
    21fa:	movs	r2, #4
    21fc:	add	r1, sp, #36	; 0x24
    21fe:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2202:	b.n	21a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2204:	ldrb	r3, [r5, #8]
    2206:	movs	r2, #0
    2208:	strh.w	r2, [sp, #14]
    220c:	cmp	r3, #0
    220e:	bne.n	21e4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    2210:	mov	r0, r5
    2212:	movs	r2, #2
    2214:	add.w	r1, sp, #14
    2218:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    221c:	b.n	21a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    221e:	ldrb	r4, [r5, #8]
    2220:	str	r3, [sp, #32]
    2222:	cmp	r4, #0
    2224:	beq.n	2288 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    2226:	ldr	r3, [r5, #12]
    2228:	adds	r3, #4
    222a:	str	r3, [r5, #12]
    222c:	b.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    222e:	movs	r2, #4
    2230:	add	r1, sp, #52	; 0x34
    2232:	mov	r0, r5
    2234:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2238:	ldrb	r3, [r5, #8]
    223a:	ldr	r2, [sp, #20]
    223c:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    223e:	cmp	r3, #0
    2240:	bne.n	22ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x194>
    2242:	movs	r2, #4
    2244:	add	r1, sp, #48	; 0x30
    2246:	mov	r0, r5
    2248:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    224c:	ldrb	r4, [r5, #8]
    224e:	movs	r3, #1
    2250:	str	r3, [sp, #44]	; 0x2c
    2252:	cbnz	r4, 22a8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x190>
    2254:	movs	r2, #4
    2256:	add	r1, sp, #44	; 0x2c
    2258:	mov	r0, r5
    225a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    225e:	ldrb	r3, [r5, #8]
    2260:	str	r4, [sp, #40]	; 0x28
    2262:	cbnz	r3, 22a4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    2264:	mov	r0, r5
    2266:	movs	r2, #4
    2268:	add	r1, sp, #40	; 0x28
    226a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    226e:	b.n	21a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2270:	mov	r0, r5
    2272:	movs	r2, #2
    2274:	add	r1, sp, #12
    2276:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    227a:	b.n	21a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    227c:	mov	r0, r5
    227e:	movs	r2, #4
    2280:	add	r1, sp, #24
    2282:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2286:	b.n	21a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2288:	movs	r2, #4
    228a:	add	r1, sp, #32
    228c:	mov	r0, r5
    228e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2292:	ldrb	r3, [r5, #8]
    2294:	str	r4, [sp, #28]
    2296:	cbnz	r3, 22a4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    2298:	mov	r0, r5
    229a:	movs	r2, #4
    229c:	add	r1, sp, #28
    229e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    22a2:	b.n	21a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    22a4:	ldr	r3, [r5, #12]
    22a6:	b.n	219c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    22a8:	ldr	r3, [r5, #12]
    22aa:	b.n	2198 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
    22ac:	ldr	r3, [r5, #12]
    22ae:	b.n	2194 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7c>
    22b0:	.word	0x0000fc78

000022b4 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    22b4:	push	{r4, r5, r6, lr}
    22b6:	mov	r4, r0
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    22b8:	ldr	r0, [r0, #0]
    22ba:	ldr	r3, [r0, #0]
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    22bc:	sub	sp, #32
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    22be:	ldr	r3, [r3, #0]
    22c0:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22c2:	ldrb	r3, [r4, #8]
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    22c4:	cmp	r0, #0
    22c6:	ite	eq
    22c8:	moveq	r2, #4
    22ca:	movne	r2, #1
    22cc:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22d0:	cmp	r3, #0
    22d2:	beq.n	2374 <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    22d4:	ldr	r3, [r4, #12]
    22d6:	adds	r3, #2
    22d8:	str	r3, [r4, #12]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    22da:	ldr	r0, [r4, #0]
    22dc:	ldr	r3, [r0, #0]
    22de:	ldr	r3, [r3, #4]
    22e0:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22e2:	ldrb	r5, [r4, #8]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    22e4:	cmp	r0, #0
    22e6:	ite	eq
    22e8:	moveq	r3, #1
    22ea:	movne	r3, #2
    22ec:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22f0:	cmp	r5, #0
    22f2:	beq.n	23ae <MTPD::GetStorageInfo(unsigned long)+0xfa>
      write_length_ += len;
    22f4:	ldr	r3, [r4, #12]
    22f6:	movs	r2, #0
    22f8:	adds	r3, #2
    22fa:	str	r3, [r4, #12]
    22fc:	strh.w	r2, [sp, #8]
    2300:	adds	r3, #2
    2302:	str	r3, [r4, #12]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
    2304:	ldr	r0, [r4, #0]
    2306:	ldr	r3, [r0, #0]
    2308:	ldr	r3, [r3, #8]
    230a:	blx	r3
    230c:	mov	r5, r0
  uint64_t nsect = storage_->clusterSize() ;
    230e:	ldr	r0, [r4, #0]
    2310:	ldr	r3, [r0, #0]
    2312:	ldr	r3, [r3, #16]
    2314:	blx	r3
    2316:	mov	r6, r0
    2318:	umull	r0, r1, r5, r0
    231c:	lsls	r3, r1, #9
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    231e:	ldrb	r2, [r4, #8]
    2320:	orr.w	r3, r3, r0, lsr #23
    2324:	lsls	r0, r0, #9
    2326:	str	r3, [sp, #28]
    2328:	str	r0, [sp, #24]
    232a:	cmp	r2, #0
    232c:	beq.n	23a2 <MTPD::GetStorageInfo(unsigned long)+0xee>
      write_length_ += len;
    232e:	ldr	r3, [r4, #12]
    2330:	adds	r3, #8
    2332:	str	r3, [r4, #12]
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    2334:	ldr	r0, [r4, #0]
    2336:	ldr	r3, [r0, #0]
    2338:	ldr	r3, [r3, #12]
    233a:	blx	r3
    233c:	lsls	r2, r6, #9
    233e:	umull	r2, r3, r2, r0
    2342:	lsrs	r6, r6, #23
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2344:	ldrb	r1, [r4, #8]
    2346:	mla	r3, r0, r6, r3
    234a:	strd	r2, r3, [sp, #16]
    234e:	cbz	r1, 2382 <MTPD::GetStorageInfo(unsigned long)+0xce>
      write_length_ += len;
    2350:	ldr	r3, [r4, #12]
    2352:	mov.w	r2, #4294967295
    2356:	adds	r3, #8
    2358:	str	r3, [r4, #12]
    235a:	str	r2, [sp, #12]
    235c:	adds	r3, #4
    235e:	str	r3, [r4, #12]
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    write64(nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    writestring(MTP_STORE);  // storage descriptor
    2360:	mov	r0, r4
    2362:	ldr	r1, [pc, #116]	; (23d8 <MTPD::GetStorageInfo(unsigned long)+0x124>)
    2364:	bl	1a18 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    2368:	mov	r0, r4
    236a:	ldr	r1, [pc, #112]	; (23dc <MTPD::GetStorageInfo(unsigned long)+0x128>)
    236c:	bl	1a18 <MTPD::writestring(char const*)>
  }
    2370:	add	sp, #32
    2372:	pop	{r4, r5, r6, pc}
    2374:	movs	r2, #2
    2376:	add.w	r1, sp, #6
    237a:	mov	r0, r4
    237c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2380:	b.n	22da <MTPD::GetStorageInfo(unsigned long)+0x26>
    2382:	movs	r2, #8
    2384:	add	r1, sp, #16
    2386:	mov	r0, r4
    2388:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    238c:	ldrb	r3, [r4, #8]
    238e:	mov.w	r2, #4294967295
    2392:	str	r2, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2394:	cbnz	r3, 23ce <MTPD::GetStorageInfo(unsigned long)+0x11a>
    2396:	movs	r2, #4
    2398:	add	r1, sp, #12
    239a:	mov	r0, r4
    239c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    23a0:	b.n	2360 <MTPD::GetStorageInfo(unsigned long)+0xac>
    23a2:	movs	r2, #8
    23a4:	add	r1, sp, #24
    23a6:	mov	r0, r4
    23a8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    23ac:	b.n	2334 <MTPD::GetStorageInfo(unsigned long)+0x80>
    23ae:	movs	r2, #2
    23b0:	add.w	r1, sp, #10
    23b4:	mov	r0, r4
    23b6:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    23ba:	ldrb	r3, [r4, #8]
    23bc:	strh.w	r5, [sp, #8]
    23c0:	cbnz	r3, 23d2 <MTPD::GetStorageInfo(unsigned long)+0x11e>
    23c2:	movs	r2, #2
    23c4:	add	r1, sp, #8
    23c6:	mov	r0, r4
    23c8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    23cc:	b.n	2304 <MTPD::GetStorageInfo(unsigned long)+0x50>
    23ce:	ldr	r3, [r4, #12]
    23d0:	b.n	235c <MTPD::GetStorageInfo(unsigned long)+0xa8>
    23d2:	ldr	r3, [r4, #12]
    23d4:	b.n	2300 <MTPD::GetStorageInfo(unsigned long)+0x4c>
    23d6:	nop
    23d8:	.word	0x0000fe54
    23dc:	.word	0x0000fc78

000023e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    23e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    23e4:	sub.w	r1, r1, #56320	; 0xdc00
    23e8:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    23ea:	sub	sp, #148	; 0x94
    23ec:	mov	r4, r0
      switch(p1)
    23ee:	cmp	r1, #67	; 0x43
    23f0:	bhi.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    23f2:	tbh	[pc, r1, lsl #1]
    23f6:	.short	0x005c
    23f8:	.word	0x0080006e
    23fc:	.word	0x005900c6
    2400:	.word	0x00d80059
    2404:	.word	0x01690121
    2408:	.word	0x01b10059
    240c:	.word	0x00590059
    2410:	.word	0x00590059
    2414:	.word	0x00590059
    2418:	.word	0x00590059
    241c:	.word	0x00590059
    2420:	.word	0x00590059
    2424:	.word	0x00590059
    2428:	.word	0x00590059
    242c:	.word	0x00590059
    2430:	.word	0x00590059
    2434:	.word	0x00590059
    2438:	.word	0x00590059
    243c:	.word	0x00590059
    2440:	.word	0x00590059
    2444:	.word	0x00590059
    2448:	.word	0x00590059
    244c:	.word	0x00590059
    2450:	.word	0x00590059
    2454:	.word	0x00590059
    2458:	.word	0x00590059
    245c:	.word	0x00590059
    2460:	.word	0x00590059
    2464:	.word	0x00590059
    2468:	.word	0x00590059
    246c:	.word	0x00590059
    2470:	.word	0x00590059
    2474:	.word	0x01f70059
    2478:	.word	0x00590059
    247c:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    247e:	ldrb	r3, [r0, #8]
    2480:	movw	r2, #56388	; 0xdc44
    2484:	strh.w	r2, [sp, #70]	; 0x46
    2488:	cmp	r3, #0
    248a:	beq.w	2908 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    248e:	ldr	r3, [r4, #12]
    2490:	adds	r3, #2
    2492:	str	r3, [r4, #12]
    2494:	adds	r3, #2
    2496:	str	r3, [r4, #12]
    2498:	adds	r3, #1
    249a:	str	r3, [r4, #12]
    249c:	adds	r3, #1
    249e:	str	r3, [r4, #12]
    24a0:	adds	r3, #4
    24a2:	str	r3, [r4, #12]
    24a4:	adds	r3, #1
    24a6:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    24a8:	add	sp, #148	; 0x94
    24aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24ae:	ldrb	r3, [r0, #8]
    24b0:	movw	r2, #56321	; 0xdc01
    24b4:	strh.w	r2, [sp, #30]
    24b8:	cmp	r3, #0
    24ba:	beq.w	2a1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    24be:	ldr	r3, [r4, #12]
    24c0:	adds	r3, #2
    24c2:	str	r3, [r4, #12]
    24c4:	adds	r3, #2
    24c6:	str	r3, [r4, #12]
    24c8:	adds	r3, #1
    24ca:	str	r3, [r4, #12]
    24cc:	adds	r3, #4
    24ce:	str	r3, [r4, #12]
    24d0:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24d2:	ldrb	r3, [r0, #8]
    24d4:	movw	r2, #56322	; 0xdc02
    24d8:	strh.w	r2, [sp, #36]	; 0x24
    24dc:	cmp	r3, #0
    24de:	beq.w	288a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    24e2:	ldr	r3, [r4, #12]
    24e4:	adds	r3, #2
    24e6:	str	r3, [r4, #12]
    24e8:	adds	r3, #2
    24ea:	str	r3, [r4, #12]
    24ec:	adds	r3, #1
    24ee:	str	r3, [r4, #12]
    24f0:	adds	r3, #2
    24f2:	str	r3, [r4, #12]
    24f4:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    24f6:	ldrb	r3, [r0, #8]
    24f8:	movw	r2, #56323	; 0xdc03
    24fc:	strh.w	r2, [sp, #42]	; 0x2a
    2500:	cmp	r3, #0
    2502:	bne.n	24e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    2504:	movs	r2, #2
    2506:	add.w	r1, sp, #42	; 0x2a
    250a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    250e:	ldrb	r7, [r4, #8]
    2510:	movs	r6, #4
    2512:	strh.w	r6, [sp, #40]	; 0x28
    2516:	cmp	r7, #0
    2518:	bne.w	2ab2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    251c:	movs	r2, #2
    251e:	add	r1, sp, #40	; 0x28
    2520:	mov	r0, r4
    2522:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2526:	ldrb	r5, [r4, #8]
    2528:	strb.w	r7, [sp, #9]
    252c:	cmp	r5, #0
    252e:	bne.w	2aae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    2532:	movs	r2, #1
    2534:	add.w	r1, sp, #9
    2538:	mov	r0, r4
    253a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    253e:	ldrb	r7, [r4, #8]
    2540:	strh.w	r5, [sp, #38]	; 0x26
    2544:	cmp	r7, #0
    2546:	bne.w	2aaa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    254a:	movs	r2, #2
    254c:	add.w	r1, sp, #38	; 0x26
    2550:	mov	r0, r4
    2552:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2556:	ldrb	r5, [r4, #8]
    2558:	str	r7, [sp, #84]	; 0x54
    255a:	cmp	r5, #0
    255c:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2560:	mov	r2, r6
    2562:	add	r1, sp, #84	; 0x54
    2564:	mov	r0, r4
    2566:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    256a:	ldrb	r3, [r4, #8]
    256c:	strb.w	r5, [sp, #8]
    2570:	cmp	r3, #0
    2572:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2576:	mov	r0, r4
    2578:	movs	r2, #1
    257a:	add	r1, sp, #8
    257c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2580:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2582:	ldrb	r3, [r0, #8]
    2584:	movw	r2, #56324	; 0xdc04
    2588:	strh.w	r2, [sp, #46]	; 0x2e
    258c:	cmp	r3, #0
    258e:	beq.w	2808 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    2592:	ldr	r3, [r0, #12]
    2594:	adds	r3, #2
    2596:	str	r3, [r0, #12]
    2598:	adds	r3, #2
    259a:	str	r3, [r4, #12]
    259c:	adds	r3, #1
    259e:	str	r3, [r4, #12]
    25a0:	adds	r3, #8
    25a2:	str	r3, [r4, #12]
    25a4:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25a6:	ldrb	r3, [r0, #8]
    25a8:	movw	r2, #56327	; 0xdc07
    25ac:	strh.w	r2, [sp, #50]	; 0x32
    25b0:	cmp	r3, #0
    25b2:	bne.w	248e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    25b6:	movs	r2, #2
    25b8:	add.w	r1, sp, #50	; 0x32
    25bc:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    25c0:	ldrb	r3, [r4, #8]
    25c2:	movw	r2, #65535	; 0xffff
    25c6:	strh.w	r2, [sp, #48]	; 0x30
    25ca:	cmp	r3, #0
    25cc:	bne.w	2a9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    25d0:	movs	r2, #2
    25d2:	add	r1, sp, #48	; 0x30
    25d4:	mov	r0, r4
    25d6:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    25da:	ldrb	r6, [r4, #8]
    25dc:	movs	r5, #1
    25de:	strb.w	r5, [sp, #14]
    25e2:	cmp	r6, #0
    25e4:	bne.w	2a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    25e8:	mov	r2, r5
    25ea:	add.w	r1, sp, #14
    25ee:	mov	r0, r4
    25f0:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    25f4:	ldrb	r7, [r4, #8]
    25f6:	strb.w	r6, [sp, #13]
    25fa:	cmp	r7, #0
    25fc:	bne.w	2aa6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2600:	mov	r2, r5
    2602:	add.w	r1, sp, #13
    2606:	mov	r0, r4
    2608:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    260c:	ldrb	r6, [r4, #8]
    260e:	str	r7, [sp, #92]	; 0x5c
    2610:	cmp	r6, #0
    2612:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2616:	movs	r2, #4
    2618:	add	r1, sp, #92	; 0x5c
    261a:	mov	r0, r4
    261c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2620:	ldrb	r3, [r4, #8]
    2622:	strb.w	r6, [sp, #12]
    2626:	cmp	r3, #0
    2628:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    262c:	mov	r2, r5
    262e:	mov	r0, r4
    2630:	add	r1, sp, #12
    2632:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2636:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2638:	ldrb	r3, [r0, #8]
    263a:	movw	r2, #56328	; 0xdc08
    263e:	strh.w	r2, [sp, #54]	; 0x36
    2642:	cmp	r3, #0
    2644:	bne.w	248e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2648:	movs	r2, #2
    264a:	add.w	r1, sp, #54	; 0x36
    264e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2652:	ldrb	r6, [r4, #8]
    2654:	movw	r3, #65535	; 0xffff
    2658:	strh.w	r3, [sp, #52]	; 0x34
    265c:	cmp	r6, #0
    265e:	bne.w	2a9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2662:	movs	r2, #2
    2664:	add	r1, sp, #52	; 0x34
    2666:	mov	r0, r4
    2668:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    266c:	ldrb	r5, [r4, #8]
    266e:	strb.w	r6, [sp, #17]
    2672:	cmp	r5, #0
    2674:	bne.w	2a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2678:	movs	r2, #1
    267a:	add.w	r1, sp, #17
    267e:	mov	r0, r4
    2680:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2684:	ldrb	r6, [r4, #8]
    2686:	strb.w	r5, [sp, #16]
    268a:	cmp	r6, #0
    268c:	bne.w	2aa6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2690:	movs	r2, #1
    2692:	add	r1, sp, #16
    2694:	mov	r0, r4
    2696:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    269a:	ldrb	r5, [r4, #8]
    269c:	str	r6, [sp, #96]	; 0x60
    269e:	cmp	r5, #0
    26a0:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    26a4:	movs	r2, #4
    26a6:	add	r1, sp, #96	; 0x60
    26a8:	mov	r0, r4
    26aa:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    26ae:	ldrb	r3, [r4, #8]
    26b0:	strb.w	r5, [sp, #15]
    26b4:	cmp	r3, #0
    26b6:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    26ba:	mov	r0, r4
    26bc:	movs	r2, #1
    26be:	add.w	r1, sp, #15
    26c2:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    26c6:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    26c8:	ldrb	r3, [r0, #8]
    26ca:	movw	r2, #56329	; 0xdc09
    26ce:	strh.w	r2, [sp, #58]	; 0x3a
    26d2:	cmp	r3, #0
    26d4:	bne.w	248e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    26d8:	movs	r2, #2
    26da:	add.w	r1, sp, #58	; 0x3a
    26de:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    26e2:	ldrb	r6, [r4, #8]
    26e4:	movw	r3, #65535	; 0xffff
    26e8:	strh.w	r3, [sp, #56]	; 0x38
    26ec:	cmp	r6, #0
    26ee:	bne.w	2a9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    26f2:	movs	r2, #2
    26f4:	add	r1, sp, #56	; 0x38
    26f6:	mov	r0, r4
    26f8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    26fc:	ldrb	r5, [r4, #8]
    26fe:	strb.w	r6, [sp, #20]
    2702:	cmp	r5, #0
    2704:	bne.w	2a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2708:	movs	r2, #1
    270a:	add	r1, sp, #20
    270c:	mov	r0, r4
    270e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2712:	ldrb	r6, [r4, #8]
    2714:	strb.w	r5, [sp, #19]
    2718:	cmp	r6, #0
    271a:	bne.w	2aa6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    271e:	movs	r2, #1
    2720:	add.w	r1, sp, #19
    2724:	mov	r0, r4
    2726:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    272a:	ldrb	r5, [r4, #8]
    272c:	str	r6, [sp, #100]	; 0x64
    272e:	cmp	r5, #0
    2730:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2734:	movs	r2, #4
    2736:	add	r1, sp, #100	; 0x64
    2738:	mov	r0, r4
    273a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    273e:	ldrb	r3, [r4, #8]
    2740:	strb.w	r5, [sp, #18]
    2744:	cmp	r3, #0
    2746:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    274a:	mov	r0, r4
    274c:	movs	r2, #1
    274e:	add.w	r1, sp, #18
    2752:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2756:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2758:	ldrb	r3, [r0, #8]
    275a:	movw	r2, #56331	; 0xdc0b
    275e:	strh.w	r2, [sp, #62]	; 0x3e
    2762:	cmp	r3, #0
    2764:	bne.w	24be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    2768:	movs	r2, #2
    276a:	add.w	r1, sp, #62	; 0x3e
    276e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2772:	ldrb	r6, [r4, #8]
    2774:	movs	r3, #6
    2776:	strh.w	r3, [sp, #60]	; 0x3c
    277a:	cmp	r6, #0
    277c:	bne.w	2a92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    2780:	movs	r2, #2
    2782:	add	r1, sp, #60	; 0x3c
    2784:	mov	r0, r4
    2786:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    278a:	ldrb	r5, [r4, #8]
    278c:	strb.w	r6, [sp, #22]
    2790:	cmp	r5, #0
    2792:	bne.w	2a8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2796:	movs	r2, #1
    2798:	add.w	r1, sp, #22
    279c:	mov	r0, r4
    279e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    27a2:	ldrb	r6, [r4, #8]
    27a4:	str	r5, [sp, #108]	; 0x6c
    27a6:	cmp	r6, #0
    27a8:	bne.w	2a8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    27ac:	movs	r2, #4
    27ae:	add	r1, sp, #108	; 0x6c
    27b0:	mov	r0, r4
    27b2:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    27b6:	ldrb	r5, [r4, #8]
    27b8:	str	r6, [sp, #104]	; 0x68
    27ba:	cmp	r5, #0
    27bc:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    27c0:	movs	r2, #4
    27c2:	add	r1, sp, #104	; 0x68
    27c4:	mov	r0, r4
    27c6:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    27ca:	ldrb	r3, [r4, #8]
    27cc:	strb.w	r5, [sp, #21]
    27d0:	cmp	r3, #0
    27d2:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    27d6:	mov	r0, r4
    27d8:	movs	r2, #1
    27da:	add.w	r1, sp, #21
    27de:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    27e2:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    27e4:	ldrb	r3, [r0, #8]
    27e6:	movw	r2, #56385	; 0xdc41
    27ea:	strh.w	r2, [sp, #66]	; 0x42
    27ee:	cmp	r3, #0
    27f0:	beq.w	298a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    27f4:	ldr	r3, [r0, #12]
    27f6:	adds	r3, #2
    27f8:	str	r3, [r0, #12]
    27fa:	adds	r3, #2
    27fc:	str	r3, [r4, #12]
    27fe:	adds	r3, #1
    2800:	str	r3, [r4, #12]
    2802:	adds	r3, #8
    2804:	str	r3, [r4, #12]
    2806:	b.n	25a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    2808:	movs	r2, #2
    280a:	add.w	r1, sp, #46	; 0x2e
    280e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2812:	ldrb	r6, [r4, #8]
    2814:	movs	r5, #8
    2816:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    281a:	cmp	r6, #0
    281c:	bne.w	2aa2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    2820:	movs	r2, #2
    2822:	add	r1, sp, #44	; 0x2c
    2824:	mov	r0, r4
    2826:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    282a:	ldrb	r3, [r4, #8]
    282c:	strb.w	r6, [sp, #11]
    2830:	cmp	r3, #0
    2832:	bne.w	2a9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    2836:	movs	r2, #1
    2838:	add.w	r1, sp, #11
    283c:	mov	r0, r4
    283e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2842:	ldrb	r6, [r4, #8]
    2844:	movs	r2, #0
    2846:	movs	r3, #0
    2848:	strd	r2, r3, [sp, #120]	; 0x78
    284c:	cmp	r6, #0
    284e:	bne.w	2ab6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    2852:	mov	r2, r5
    2854:	add	r1, sp, #120	; 0x78
    2856:	mov	r0, r4
    2858:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    285c:	ldrb	r5, [r4, #8]
    285e:	str	r6, [sp, #88]	; 0x58
    2860:	cmp	r5, #0
    2862:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2866:	movs	r2, #4
    2868:	add	r1, sp, #88	; 0x58
    286a:	mov	r0, r4
    286c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2870:	ldrb	r3, [r4, #8]
    2872:	strb.w	r5, [sp, #10]
    2876:	cmp	r3, #0
    2878:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    287c:	mov	r0, r4
    287e:	movs	r2, #1
    2880:	add.w	r1, sp, #10
    2884:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2888:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    288a:	movs	r2, #2
    288c:	add	r1, sp, #36	; 0x24
    288e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2892:	ldrb	r7, [r4, #8]
    2894:	movs	r6, #4
    2896:	strh.w	r6, [sp, #34]	; 0x22
    289a:	cmp	r7, #0
    289c:	bne.w	2ab2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    28a0:	movs	r2, #2
    28a2:	add.w	r1, sp, #34	; 0x22
    28a6:	mov	r0, r4
    28a8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    28ac:	ldrb	r5, [r4, #8]
    28ae:	strb.w	r7, [sp, #7]
    28b2:	cmp	r5, #0
    28b4:	bne.w	2aae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    28b8:	movs	r2, #1
    28ba:	add.w	r1, sp, #7
    28be:	mov	r0, r4
    28c0:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    28c4:	ldrb	r7, [r4, #8]
    28c6:	strh.w	r5, [sp, #32]
    28ca:	cmp	r7, #0
    28cc:	bne.w	2aaa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    28d0:	movs	r2, #2
    28d2:	add	r1, sp, #32
    28d4:	mov	r0, r4
    28d6:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    28da:	ldrb	r5, [r4, #8]
    28dc:	str	r7, [sp, #80]	; 0x50
    28de:	cmp	r5, #0
    28e0:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    28e4:	mov	r2, r6
    28e6:	add	r1, sp, #80	; 0x50
    28e8:	mov	r0, r4
    28ea:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    28ee:	ldrb	r3, [r4, #8]
    28f0:	strb.w	r5, [sp, #6]
    28f4:	cmp	r3, #0
    28f6:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    28fa:	mov	r0, r4
    28fc:	movs	r2, #1
    28fe:	add.w	r1, sp, #6
    2902:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2906:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2908:	movs	r2, #2
    290a:	add.w	r1, sp, #70	; 0x46
    290e:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2912:	ldrb	r6, [r4, #8]
    2914:	movw	r3, #65535	; 0xffff
    2918:	strh.w	r3, [sp, #68]	; 0x44
    291c:	cmp	r6, #0
    291e:	bne.w	2a9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    2922:	movs	r2, #2
    2924:	add	r1, sp, #68	; 0x44
    2926:	mov	r0, r4
    2928:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    292c:	ldrb	r5, [r4, #8]
    292e:	strb.w	r6, [sp, #27]
    2932:	cmp	r5, #0
    2934:	bne.w	2a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2938:	movs	r2, #1
    293a:	add.w	r1, sp, #27
    293e:	mov	r0, r4
    2940:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2944:	ldrb	r6, [r4, #8]
    2946:	strb.w	r5, [sp, #26]
    294a:	cmp	r6, #0
    294c:	bne.w	2aa6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2950:	movs	r2, #1
    2952:	add.w	r1, sp, #26
    2956:	mov	r0, r4
    2958:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    295c:	ldrb	r5, [r4, #8]
    295e:	str	r6, [sp, #116]	; 0x74
    2960:	cmp	r5, #0
    2962:	bne.w	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2966:	movs	r2, #4
    2968:	add	r1, sp, #116	; 0x74
    296a:	mov	r0, r4
    296c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2970:	ldrb	r3, [r4, #8]
    2972:	strb.w	r5, [sp, #25]
    2976:	cmp	r3, #0
    2978:	bne.w	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    297c:	mov	r0, r4
    297e:	movs	r2, #1
    2980:	add.w	r1, sp, #25
    2984:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2988:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    298a:	movs	r2, #2
    298c:	add.w	r1, sp, #66	; 0x42
    2990:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2994:	ldrb	r5, [r4, #8]
    2996:	movs	r3, #10
    2998:	strh.w	r3, [sp, #64]	; 0x40
    299c:	cmp	r5, #0
    299e:	bne.w	2ac2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    29a2:	movs	r2, #2
    29a4:	add	r1, sp, #64	; 0x40
    29a6:	mov	r0, r4
    29a8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    29ac:	ldrb	r3, [r4, #8]
    29ae:	strb.w	r5, [sp, #24]
    29b2:	cmp	r3, #0
    29b4:	bne.w	2abe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    29b8:	movs	r2, #1
    29ba:	add	r1, sp, #24
    29bc:	mov	r0, r4
    29be:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    29c2:	ldrb	r3, [r4, #8]
    29c4:	mov.w	r8, #0
    29c8:	mov.w	r9, #0
    29cc:	strd	r8, r9, [sp, #136]	; 0x88
    29d0:	cmp	r3, #0
    29d2:	bne.n	2aba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    29d4:	movs	r2, #8
    29d6:	add	r1, sp, #136	; 0x88
    29d8:	mov	r0, r4
    29da:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    29de:	ldrb	r6, [r4, #8]
    29e0:	strd	r8, r9, [sp, #128]	; 0x80
    29e4:	cmp	r6, #0
    29e6:	bne.n	2ab6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    29e8:	movs	r2, #8
    29ea:	add	r1, sp, #128	; 0x80
    29ec:	mov	r0, r4
    29ee:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    29f2:	ldrb	r5, [r4, #8]
    29f4:	str	r6, [sp, #112]	; 0x70
    29f6:	cmp	r5, #0
    29f8:	bne.n	2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    29fa:	movs	r2, #4
    29fc:	add	r1, sp, #112	; 0x70
    29fe:	mov	r0, r4
    2a00:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2a04:	ldrb	r3, [r4, #8]
    2a06:	strb.w	r5, [sp, #23]
    2a0a:	cmp	r3, #0
    2a0c:	bne.n	2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2a0e:	mov	r0, r4
    2a10:	movs	r2, #1
    2a12:	add.w	r1, sp, #23
    2a16:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2a1a:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2a1c:	movs	r2, #2
    2a1e:	add.w	r1, sp, #30
    2a22:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2a26:	ldrb	r6, [r4, #8]
    2a28:	movs	r3, #6
    2a2a:	strh.w	r3, [sp, #28]
    2a2e:	cbnz	r6, 2a92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    2a30:	movs	r2, #2
    2a32:	add	r1, sp, #28
    2a34:	mov	r0, r4
    2a36:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2a3a:	ldrb	r5, [r4, #8]
    2a3c:	strb.w	r6, [sp, #5]
    2a40:	cbnz	r5, 2a8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2a42:	movs	r2, #1
    2a44:	add.w	r1, sp, #5
    2a48:	mov	r0, r4
    2a4a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2a4e:	ldrb	r6, [r4, #8]
    2a50:	str	r5, [sp, #76]	; 0x4c
    2a52:	cbnz	r6, 2a8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    2a54:	movs	r2, #4
    2a56:	add	r1, sp, #76	; 0x4c
    2a58:	mov	r0, r4
    2a5a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2a5e:	ldrb	r5, [r4, #8]
    2a60:	str	r6, [sp, #72]	; 0x48
    2a62:	cbnz	r5, 2a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2a64:	movs	r2, #4
    2a66:	add	r1, sp, #72	; 0x48
    2a68:	mov	r0, r4
    2a6a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2a6e:	ldrb	r3, [r4, #8]
    2a70:	strb.w	r5, [sp, #4]
    2a74:	cbnz	r3, 2a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2a76:	mov	r0, r4
    2a78:	movs	r2, #1
    2a7a:	add	r1, sp, #4
    2a7c:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2a80:	b.n	24a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2a82:	ldr	r3, [r4, #12]
    2a84:	b.n	24a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    2a86:	ldr	r3, [r4, #12]
    2a88:	b.n	24a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    2a8a:	ldr	r3, [r4, #12]
    2a8c:	b.n	24cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    2a8e:	ldr	r3, [r4, #12]
    2a90:	b.n	24c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    2a92:	ldr	r3, [r4, #12]
    2a94:	b.n	24c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    2a96:	ldr	r3, [r4, #12]
    2a98:	b.n	2498 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2a9a:	ldr	r3, [r4, #12]
    2a9c:	b.n	2494 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    2a9e:	ldr	r3, [r4, #12]
    2aa0:	b.n	259c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    2aa2:	ldr	r3, [r4, #12]
    2aa4:	b.n	2598 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    2aa6:	ldr	r3, [r4, #12]
    2aa8:	b.n	249c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    2aaa:	ldr	r3, [r4, #12]
    2aac:	b.n	24f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    2aae:	ldr	r3, [r4, #12]
    2ab0:	b.n	24ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    2ab2:	ldr	r3, [r4, #12]
    2ab4:	b.n	24e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    2ab6:	ldr	r3, [r4, #12]
    2ab8:	b.n	25a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    2aba:	ldr	r3, [r4, #12]
    2abc:	b.n	2802 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    2abe:	ldr	r3, [r4, #12]
    2ac0:	b.n	27fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    2ac2:	ldr	r3, [r4, #12]
    2ac4:	b.n	27fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    2ac6:	nop

00002ac8 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    2ac8:	push	{r4, lr}
    2aca:	mov	r4, r0
    2acc:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    2ace:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    2ad0:	cbnz	r3, 2ada <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    2ad2:	bl	9d28 <usb_rx>
    2ad6:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    2ad8:	cbz	r0, 2adc <MTPD::receive_buffer()+0x14>
    2ada:	pop	{r4, pc}
    2adc:	bl	ef0 <mtp_yield()>
    2ae0:	b.n	2acc <MTPD::receive_buffer()+0x4>
    2ae2:	nop

00002ae4 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2ae4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ae8:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    2aea:	ldr	r0, [r0, #0]
    2aec:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2aee:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    2af0:	ldr	r3, [r3, #32]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2af2:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    2af4:	blx	r3
    if (write_get_length_) {
    2af6:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    2af8:	mov	r7, r0
    if (write_get_length_) {
    2afa:	cbnz	r5, 2b54 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2afc:	cbz	r0, 2b4e <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2afe:	mov	r9, r5
    2b00:	b.n	2b06 <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2b02:	cmp	r7, r5
    2b04:	bls.n	2b4e <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    2b06:	mov	r0, r6
    2b08:	bl	199c <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    2b0c:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    2b10:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    2b14:	ldr	r1, [r0, #0]
    2b16:	subs	r4, r7, r5
    2b18:	rsb	lr, r2, #64	; 0x40
    2b1c:	cmp	r4, lr
    2b1e:	it	cs
    2b20:	movcs	r4, lr
    2b22:	str	r4, [sp, #0]
    2b24:	add	r3, r2
    2b26:	ldr.w	sl, [r1, #40]	; 0x28
    2b2a:	mov	r2, r5
    2b2c:	mov	r1, r8
    2b2e:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    2b30:	ldr	r1, [r6, #4]
    2b32:	ldrh	r3, [r1, #0]
    2b34:	add	r3, r4
    2b36:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2b38:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    2b3a:	add	r5, r4
        data_buffer_->len += to_copy;
    2b3c:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2b3e:	bne.n	2b02 <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    2b40:	movs	r0, #4
    2b42:	bl	9e98 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2b46:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2b48:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2b4c:	bhi.n	2b06 <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    2b4e:	add	sp, #8
    2b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    2b54:	ldr	r3, [r6, #12]
    2b56:	add	r7, r3
    2b58:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    2b5a:	add	sp, #8
    2b5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002b60 <MTPD::read(char*, unsigned long)>:
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2b60:	cbz	r2, 2bcc <MTPD::read(char*, unsigned long)+0x6c>
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    2b62:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b66:	mov	r6, r0
    2b68:	mov	r5, r1
    while (size) {
    2b6a:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    2b6c:	movs	r7, #0


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    2b6e:	mov	r0, r6
    2b70:	bl	2ac8 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2b74:	ldr	r3, [r6, #4]
    2b76:	ldrh.w	lr, [r3, #2]
    2b7a:	ldrh.w	ip, [r3]
    2b7e:	rsb	r4, lr, ip
    2b82:	cmp	r4, r8
    2b84:	it	cs
    2b86:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    2b88:	add.w	r1, r3, #8
    2b8c:	add	r1, lr
    2b8e:	mov	r0, r5
    2b90:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    2b92:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    2b96:	cbz	r5, 2ba8 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    2b98:	bl	94a8 <memcpy>
    2b9c:	ldr	r3, [r6, #4]
    2b9e:	ldrh.w	lr, [r3, #2]
    2ba2:	ldrh.w	ip, [r3]
        data += to_copy;
    2ba6:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    2ba8:	add	r4, lr
    2baa:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    2bac:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    2bae:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    2bb0:	beq.n	2bbc <MTPD::read(char*, unsigned long)+0x5c>
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2bb2:	cmp.w	r8, #0
    2bb6:	bne.n	2b6e <MTPD::read(char*, unsigned long)+0xe>
    2bb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    2bbc:	mov	r0, r3
    2bbe:	bl	9cdc <usb_free>
        data_buffer_ = NULL;
    2bc2:	str	r7, [r6, #4]
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2bc4:	cmp.w	r8, #0
    2bc8:	bne.n	2b6e <MTPD::read(char*, unsigned long)+0xe>
    2bca:	b.n	2bb8 <MTPD::read(char*, unsigned long)+0x58>
    2bcc:	bx	lr
    2bce:	nop

00002bd0 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2bd0:	push	{r4, r5, r6, lr}
    2bd2:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2bd4:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2bd6:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2bd8:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2bdc:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2bde:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2be2:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    2be6:	cbz	r4, 2c08 <MTPD::readstring(char*)+0x38>
    2be8:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2bea:	cbz	r2, 2c04 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2bec:	movs	r2, #2
    2bee:	add.w	r1, sp, #6
    2bf2:	mov	r0, r6
    2bf4:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2bf8:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    2bfc:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2c00:	cmp	r5, r4
    2c02:	bne.n	2bec <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    2c04:	add	sp, #8
    2c06:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    2c08:	lsls	r2, r2, #1
    2c0a:	mov	r1, r4
    2c0c:	mov	r0, r6
    2c0e:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2c12:	b.n	2c04 <MTPD::readstring(char*)+0x34>

00002c14 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>:
      }
    }
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    2c14:	push	{r4, r5, lr}
    2c16:	sub	sp, #132	; 0x84
    2c18:	mov	r4, r0
    2c1a:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2c1c:	movs	r2, #12
    2c1e:	mov	r1, sp
    2c20:	bl	2b60 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    2c24:	mov	r1, sp
    2c26:	mov	r0, r4
    2c28:	bl	2bd0 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    2c2c:	ldr	r0, [r4, #0]
    2c2e:	ldr	r3, [r0, #0]
    2c30:	mov	r2, sp
    2c32:	mov	r1, r5
    2c34:	ldr	r3, [r3, #64]	; 0x40
    2c36:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    2c38:	movw	r0, #8193	; 0x2001
    2c3c:	add	sp, #132	; 0x84
    2c3e:	pop	{r4, r5, pc}

00002c40 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2c40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2c44:	sub	sp, #268	; 0x10c


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2c46:	add	r1, sp, #8
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2c48:	mov	r9, r2


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2c4a:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2c4c:	mov	r5, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2c4e:	bl	2b60 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    2c52:	ldrh.w	r3, [sp, #12]
    2c56:	cmp	r3, #2
    2c58:	it	eq
    2c5a:	ldreq	r4, [sp, #8]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c5c:	mov.w	r2, #4
    2c60:	add	r1, sp, #8
    2c62:	mov	r0, r5
    2c64:	ite	eq
    2c66:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    2c68:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c6c:	bl	2b60 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c70:	movs	r2, #2
    2c72:	add	r1, sp, #8
    2c74:	mov	r0, r5
    2c76:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2c7a:	ldrh.w	r8, [sp, #8]
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2c7e:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c82:	movs	r2, #2
    2c84:	add	r1, sp, #8
    2c86:	mov	r0, r5
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2c88:	rsb	r8, r3, r8
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c8c:	bl	2b60 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c90:	movs	r2, #4
    2c92:	add	r1, sp, #8
    2c94:	mov	r0, r5
    2c96:	bl	2b60 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2c9a:	movs	r2, #2
    2c9c:	add	r1, sp, #8
    2c9e:	mov	r0, r5
    2ca0:	bl	2b60 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2ca4:	movs	r2, #4
    2ca6:	add	r1, sp, #8
    2ca8:	mov	r0, r5
    2caa:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2cae:	movs	r2, #4
    2cb0:	add	r1, sp, #8
    2cb2:	mov	r0, r5
    2cb4:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2cb8:	movs	r2, #4
    2cba:	add	r1, sp, #8
    2cbc:	mov	r0, r5
    2cbe:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2cc2:	movs	r2, #4
    2cc4:	add	r1, sp, #8
    2cc6:	mov	r0, r5
    2cc8:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2ccc:	movs	r2, #4
    2cce:	add	r1, sp, #8
    2cd0:	mov	r0, r5
    2cd2:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2cd6:	movs	r2, #4
    2cd8:	add	r1, sp, #8
    2cda:	mov	r0, r5
    2cdc:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2ce0:	movs	r2, #4
    2ce2:	add	r1, sp, #8
    2ce4:	mov	r0, r5
    2ce6:	bl	2b60 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2cea:	movs	r2, #2
    2cec:	add	r1, sp, #8
    2cee:	mov	r0, r5
    2cf0:	bl	2b60 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2cf4:	movs	r2, #4
    2cf6:	add	r1, sp, #8
    2cf8:	mov	r0, r5
    2cfa:	bl	2b60 <MTPD::read(char*, unsigned long)>
    2cfe:	movs	r2, #4
    2d00:	add	r1, sp, #8
    2d02:	mov	r0, r5
    2d04:	bl	2b60 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    2d08:	add	r1, sp, #8
    2d0a:	mov	r0, r5
    2d0c:	bl	2bd0 <MTPD::readstring(char*)>
    2d10:	add	r0, sp, #8
    2d12:	bl	c840 <strlen>
    2d16:	adds	r0, #1
    2d18:	sub.w	r4, r4, r0, lsl #1
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2d1c:	clz	r8, r8
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2d20:	cmp	r4, #3
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2d22:	mov.w	r8, r8, lsr #5
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2d26:	bls.n	2d40 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x100>
    2d28:	mov	r6, r4
    2d2a:	add	r7, sp, #4
    2d2c:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d2e:	movs	r2, #4
    2d30:	mov	r1, r7
    2d32:	mov	r0, r5
    2d34:	bl	2b60 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2d38:	cmp	r6, #3
    2d3a:	bhi.n	2d2c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xec>
    2d3c:	and.w	r4, r4, #3
    2d40:	add	r7, sp, #4
    while(len) {read8(); len--;}
    2d42:	cbz	r4, 2d52 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x112>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2d44:	movs	r2, #1
    2d46:	mov	r1, r7
    2d48:	mov	r0, r5
    2d4a:	bl	2b60 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    2d4e:	subs	r4, #1
    2d50:	bne.n	2d44 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x104>
    
    return storage_->Create(parent, dir, filename);
    2d52:	ldr	r0, [r5, #0]
    2d54:	ldr	r4, [r0, #0]
    2d56:	add	r3, sp, #8
    2d58:	mov	r2, r8
    2d5a:	mov	r1, r9
    2d5c:	ldr	r4, [r4, #36]	; 0x24
    2d5e:	blx	r4
  }
    2d60:	add	sp, #268	; 0x10c
    2d62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2d66:	nop

00002d68 <MTPD::SendObject()>:

  void MTPD::SendObject() {
    2d68:	push	{r4, r5, r6, r7, lr}
    2d6a:	sub	sp, #20


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2d6c:	movs	r2, #12
    2d6e:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    2d70:	mov	r7, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2d72:	bl	2b60 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    2d76:	ldrh.w	r3, [sp, #8]
    2d7a:	cmp	r3, #2
    2d7c:	beq.n	2d8a <MTPD::SendObject()+0x22>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    2d7e:	ldr	r0, [r7, #0]
    2d80:	ldr	r3, [r0, #0]
    2d82:	ldr	r3, [r3, #48]	; 0x30
    2d84:	blx	r3
  }
    2d86:	add	sp, #20
    2d88:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    2d8a:	ldr	r5, [sp, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2d8c:	subs	r5, #12
    2d8e:	beq.n	2d7e <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    2d90:	movs	r6, #0

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    2d92:	mov	r0, r7
    2d94:	bl	2ac8 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2d98:	ldmia.w	r7, {r0, r1}
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2d9c:	ldrh	r2, [r1, #2]
    2d9e:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2da2:	ldr	r3, [r0, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2da4:	subs	r4, r4, r2
    2da6:	cmp	r4, r5
    2da8:	it	cs
    2daa:	movcs	r4, r5
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2dac:	ldr	r3, [r3, #44]	; 0x2c
    2dae:	add	r1, r2
    2db0:	mov	r2, r4
    2db2:	blx	r3
      data_buffer_->index += to_copy;
    2db4:	ldr	r0, [r7, #4]
    2db6:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2db8:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    2dba:	add	r3, r4
    2dbc:	uxth	r3, r3
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2dbe:	cmp	r2, r3
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
    2dc0:	sub.w	r5, r5, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    2dc4:	strh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2dc6:	beq.n	2dce <MTPD::SendObject()+0x66>
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2dc8:	cmp	r5, #0
    2dca:	bne.n	2d92 <MTPD::SendObject()+0x2a>
    2dcc:	b.n	2d7e <MTPD::SendObject()+0x16>
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    2dce:	bl	9cdc <usb_free>
        data_buffer_ = NULL;
    2dd2:	str	r6, [r7, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2dd4:	cmp	r5, #0
    2dd6:	bne.n	2d92 <MTPD::SendObject()+0x2a>
    2dd8:	b.n	2d7e <MTPD::SendObject()+0x16>
    2dda:	nop

00002ddc <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    2ddc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2de0:	mov	r6, r0
    2de2:	sub	sp, #44	; 0x2c
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    2de4:	movs	r0, #5
    2de6:	bl	9d28 <usb_rx>
    2dea:	cmp	r0, #0
    2dec:	beq.n	2e52 <MTPD::loop()+0x76>
      printContainer();
    2dee:	ldr	r1, [r0, #28]
    2df0:	ldr	r3, [r0, #8]
    2df2:	ldrh	r2, [r0, #14]
    2df4:	str	r1, [sp, #16]
    2df6:	ldr	r1, [r0, #24]
    2df8:	str	r1, [sp, #12]
    2dfa:	ldr	r1, [r0, #20]
    2dfc:	str	r1, [sp, #8]
    2dfe:	ldr	r1, [r0, #16]
    2e00:	str	r1, [sp, #4]
    2e02:	ldrh	r1, [r0, #12]
    2e04:	str	r1, [sp, #0]
    2e06:	mov	r4, r0
    2e08:	ldr	r1, [pc, #716]	; (30d8 <MTPD::loop()+0x2fc>)
    2e0a:	ldr	r0, [pc, #720]	; (30dc <MTPD::loop()+0x300>)
    2e0c:	bl	abf4 <Print::printf(char const*, ...)>
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
    2e10:	ldrh	r3, [r4, #0]
    2e12:	cmp	r3, #11
    2e14:	bls.n	2e64 <MTPD::loop()+0x88>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
    2e16:	ldrh	r2, [r4, #12]
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    2e18:	movs	r5, #12
        
        if (CONTAINER->type == 1) { // command
    2e1a:	cmp	r2, #1
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    2e1c:	strh	r5, [r4, #0]
        
        if (CONTAINER->type == 1) { // command
    2e1e:	beq.n	2e6c <MTPD::loop()+0x90>
    2e20:	mov.w	r2, #8192	; 0x2000
    2e24:	ldr	r3, [r4, #8]
    2e26:	ldr	r5, [r4, #24]
    2e28:	ldr	r0, [r4, #28]
    2e2a:	mov	r6, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    2e2c:	movs	r7, #0
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    2e2e:	movs	r1, #3
    2e30:	strh	r1, [r4, #12]
        CONTAINER->op = return_code;
    2e32:	strh	r6, [r4, #14]
        CONTAINER->params[0] = p1;
    2e34:	str	r7, [r4, #20]
        printContainer();
    2e36:	str	r0, [sp, #16]
    2e38:	str	r5, [sp, #12]
    2e3a:	str	r7, [sp, #8]
    2e3c:	ldr	r0, [r4, #16]
    2e3e:	str	r0, [sp, #4]
    2e40:	str	r1, [sp, #0]
    2e42:	ldr	r0, [pc, #664]	; (30dc <MTPD::loop()+0x300>)
    2e44:	ldr	r1, [pc, #656]	; (30d8 <MTPD::loop()+0x2fc>)
    2e46:	bl	abf4 <Print::printf(char const*, ...)>

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    2e4a:	mov	r1, r4
    2e4c:	movs	r0, #4
    2e4e:	bl	9e98 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    2e52:	movs	r0, #6
    2e54:	bl	9d28 <usb_rx>
    2e58:	cbz	r0, 2e5e <MTPD::loop()+0x82>
      usb_free(receive_buffer);
    2e5a:	bl	9cdc <usb_free>
    }
  }
    2e5e:	add	sp, #44	; 0x2c
    2e60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    2e64:	mov	r0, r4
    2e66:	bl	9cdc <usb_free>
    2e6a:	b.n	2e52 <MTPD::loop()+0x76>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2e6c:	ldrh	r1, [r4, #14]
    2e6e:	movw	r3, #4108	; 0x100c
    2e72:	cmp	r1, r3
    2e74:	beq.w	312a <MTPD::loop()+0x34e>
    2e78:	bls.n	2f02 <MTPD::loop()+0x126>
    2e7a:	movw	r3, #4121	; 0x1019
    2e7e:	cmp	r1, r3
    2e80:	beq.w	314e <MTPD::loop()+0x372>
    2e84:	bls.n	2f44 <MTPD::loop()+0x168>
    2e86:	movw	r3, #38914	; 0x9802
    2e8a:	cmp	r1, r3
    2e8c:	beq.w	3210 <MTPD::loop()+0x434>
    2e90:	bhi.w	306a <MTPD::loop()+0x28e>
    2e94:	movw	r3, #4122	; 0x101a
    2e98:	cmp	r1, r3
    2e9a:	beq.w	3018 <MTPD::loop()+0x23c>
    2e9e:	movw	r3, #38913	; 0x9801
    2ea2:	cmp	r1, r3
    2ea4:	bne.w	3018 <MTPD::loop()+0x23c>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
            p1=CONTAINER->params[0];
    2ea8:	ldr	r7, [r4, #20]

              TRANSMIT(getObjectPropsSupported(p1));
    2eaa:	movs	r3, #1
    2eac:	movs	r5, #0
    2eae:	mov	r1, r7
    2eb0:	strb	r3, [r6, #8]
    2eb2:	mov	r0, r6
    2eb4:	str	r5, [r6, #12]
    2eb6:	bl	20ac <MTPD::getObjectPropsSupported(unsigned long)>
    2eba:	ldr	r3, [r6, #12]
    2ebc:	strb	r5, [r6, #8]
    2ebe:	adds	r3, #12
    2ec0:	movs	r2, #2
    2ec2:	strh.w	r2, [sp, #32]
    2ec6:	str	r3, [sp, #28]
    2ec8:	ldrh	r3, [r4, #14]
    2eca:	strh.w	r3, [sp, #34]	; 0x22
    2ece:	ldr	r3, [r4, #16]
    2ed0:	str	r3, [sp, #36]	; 0x24
    2ed2:	add	r1, sp, #28
    2ed4:	mov	r0, r6
    2ed6:	movs	r2, #12
    2ed8:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    2edc:	mov	r1, r7
    2ede:	mov	r0, r6
    2ee0:	bl	20ac <MTPD::getObjectPropsSupported(unsigned long)>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];

            TRANSMIT(getObjectPropValue(p1,p2));
    2ee4:	mov	r0, r6
    2ee6:	bl	199c <MTPD::get_buffer()>
    2eea:	ldr	r1, [r6, #4]
    2eec:	movs	r0, #4
    2eee:	bl	9e98 <usb_tx>
    2ef2:	str	r5, [r6, #4]
              break;
    2ef4:	movw	r2, #8193	; 0x2001
    2ef8:	ldr	r3, [r4, #8]
    2efa:	ldr	r5, [r4, #24]
    2efc:	ldr	r0, [r4, #28]
    2efe:	mov	r6, r2
    2f00:	b.n	2e2e <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2f02:	movw	r3, #4101	; 0x1005
    2f06:	cmp	r1, r3
    2f08:	beq.w	316e <MTPD::loop()+0x392>
    2f0c:	bls.n	2fb6 <MTPD::loop()+0x1da>
    2f0e:	movw	r3, #4104	; 0x1008
    2f12:	cmp	r1, r3
    2f14:	beq.w	309e <MTPD::loop()+0x2c2>
    2f18:	bhi.w	3032 <MTPD::loop()+0x256>
    2f1c:	movw	r3, #4102	; 0x1006
    2f20:	cmp	r1, r3
    2f22:	beq.w	31de <MTPD::loop()+0x402>
    2f26:	movw	r3, #4103	; 0x1007
    2f2a:	cmp	r1, r3
    2f2c:	bne.n	3018 <MTPD::loop()+0x23c>
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
    2f2e:	ldr	r5, [r4, #24]
    2f30:	cmp	r5, #0
    2f32:	beq.w	32fa <MTPD::loop()+0x51e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    2f36:	movw	r2, #8212	; 0x2014
    2f3a:	mov	r6, r2
    2f3c:	ldr	r3, [r4, #8]
    2f3e:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    2f40:	movs	r7, #0
    2f42:	b.n	2e2e <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2f44:	movw	r3, #4112	; 0x1010
    2f48:	cmp	r1, r3
    2f4a:	beq.n	3018 <MTPD::loop()+0x23c>
    2f4c:	bls.n	301e <MTPD::loop()+0x242>
    2f4e:	movw	r3, #4116	; 0x1014
    2f52:	cmp	r1, r3
    2f54:	beq.w	30e0 <MTPD::loop()+0x304>
    2f58:	movw	r3, #4117	; 0x1015
    2f5c:	cmp	r1, r3
    2f5e:	bne.n	3018 <MTPD::loop()+0x23c>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    2f60:	movs	r2, #0
    2f62:	movs	r3, #1
    2f64:	strb	r3, [r6, #8]
    2f66:	str	r2, [r6, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    2f68:	ldr	r2, [r4, #20]
    2f6a:	movw	r3, #54274	; 0xd402
    2f6e:	cmp	r2, r3
    2f70:	beq.w	3360 <MTPD::loop()+0x584>
    2f74:	movs	r3, #12
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    2f76:	movs	r1, #0
    2f78:	movs	r2, #2
    2f7a:	strb	r1, [r6, #8]
    2f7c:	strh.w	r2, [sp, #32]
    2f80:	str	r3, [sp, #28]
    2f82:	ldrh	r3, [r4, #14]
    2f84:	strh.w	r3, [sp, #34]	; 0x22
    2f88:	ldr	r3, [r4, #16]
    2f8a:	str	r3, [sp, #36]	; 0x24
    2f8c:	movs	r2, #12
    2f8e:	add	r1, sp, #28
    2f90:	mov	r0, r6
    2f92:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    2f96:	ldr	r2, [r4, #20]
    2f98:	movw	r3, #54274	; 0xd402
    2f9c:	cmp	r2, r3
    2f9e:	beq.w	3356 <MTPD::loop()+0x57a>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    2fa2:	mov	r0, r6
    2fa4:	bl	199c <MTPD::get_buffer()>
    2fa8:	movs	r7, #0
    2faa:	ldr	r1, [r6, #4]
    2fac:	movs	r0, #4
    2fae:	bl	9e98 <usb_tx>
    2fb2:	str	r7, [r6, #4]
    2fb4:	b.n	2ef4 <MTPD::loop()+0x118>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2fb6:	movw	r3, #4099	; 0x1003
    2fba:	cmp	r1, r3
    2fbc:	bhi.w	31a8 <MTPD::loop()+0x3cc>
    2fc0:	movw	r3, #4098	; 0x1002
    2fc4:	cmp	r1, r3
    2fc6:	bcs.n	302c <MTPD::loop()+0x250>
    2fc8:	movw	r3, #4097	; 0x1001
    2fcc:	cmp	r1, r3
    2fce:	bne.n	3018 <MTPD::loop()+0x23c>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    2fd0:	movs	r3, #1
    2fd2:	movs	r7, #0
    2fd4:	strb	r3, [r6, #8]
    2fd6:	mov	r0, r6
    2fd8:	str	r7, [r6, #12]
    2fda:	bl	1b7c <MTPD::WriteDescriptor()>
    2fde:	ldr	r3, [r6, #12]
    2fe0:	strb	r7, [r6, #8]
    2fe2:	adds	r3, #12
    2fe4:	movs	r2, #2
    2fe6:	strh.w	r2, [sp, #32]
    2fea:	str	r3, [sp, #28]
    2fec:	ldrh	r3, [r4, #14]
    2fee:	strh.w	r3, [sp, #34]	; 0x22
    2ff2:	ldr	r3, [r4, #16]
    2ff4:	str	r3, [sp, #36]	; 0x24
    2ff6:	mov	r0, r6
    2ff8:	movs	r2, #12
    2ffa:	add	r1, sp, #28
    2ffc:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    3000:	mov	r0, r6
    3002:	bl	1b7c <MTPD::WriteDescriptor()>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    3006:	mov	r0, r6
    3008:	bl	199c <MTPD::get_buffer()>
    300c:	ldr	r1, [r6, #4]
    300e:	movs	r0, #4
    3010:	bl	9e98 <usb_tx>
    3014:	str	r7, [r6, #4]
    3016:	b.n	2ef4 <MTPD::loop()+0x118>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    3018:	movw	r2, #8197	; 0x2005
    301c:	b.n	2e24 <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    301e:	movw	r3, #4109	; 0x100d
    3022:	cmp	r1, r3
    3024:	bne.n	3018 <MTPD::loop()+0x23c>
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    3026:	mov	r0, r6
    3028:	bl	2d68 <MTPD::SendObject()>
              break;
    302c:	movw	r2, #8193	; 0x2001
    3030:	b.n	2e24 <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3032:	movw	r3, #4105	; 0x1009
    3036:	cmp	r1, r3
    3038:	beq.w	326c <MTPD::loop()+0x490>
    303c:	movw	r3, #4107	; 0x100b
    3040:	cmp	r1, r3
    3042:	bne.n	3018 <MTPD::loop()+0x23c>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    3044:	ldr	r5, [r4, #24]
    3046:	cmp	r5, #0
    3048:	bne.w	2f36 <MTPD::loop()+0x15a>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    304c:	ldr	r0, [r6, #0]
    304e:	ldr	r1, [r4, #20]
    3050:	ldr	r3, [r0, #0]
    3052:	ldr	r3, [r3, #52]	; 0x34
    3054:	blx	r3
    3056:	cmp	r0, #0
    3058:	bne.n	302c <MTPD::loop()+0x250>
    305a:	movw	r2, #8210	; 0x2012
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    305e:	mov	r7, r0
    3060:	mov	r6, r2
    3062:	ldr	r3, [r4, #8]
    3064:	ldr	r5, [r4, #24]
    3066:	ldr	r0, [r4, #28]
    3068:	b.n	2e2e <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    306a:	movw	r3, #38915	; 0x9803
    306e:	cmp	r1, r3
    3070:	beq.w	32a8 <MTPD::loop()+0x4cc>
    3074:	movw	r3, #38916	; 0x9804
    3078:	cmp	r1, r3
    307a:	bne.n	3018 <MTPD::loop()+0x23c>
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];
    307c:	ldr	r5, [r4, #24]
            TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
    307e:	ldr	r7, [r4, #20]
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    3080:	mov	r0, r6
    3082:	bl	2ac8 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    3086:	movw	r3, #56327	; 0xdc07
    308a:	cmp	r5, r3
    308c:	beq.w	336e <MTPD::loop()+0x592>
    3090:	movw	r2, #8197	; 0x2005
    3094:	mov	r6, r2
    3096:	ldr	r3, [r4, #8]
    3098:	ldr	r5, [r4, #24]
    309a:	ldr	r0, [r4, #28]
    309c:	b.n	2e2e <MTPD::loop()+0x52>
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
    309e:	movs	r7, #0
    30a0:	strb	r2, [r6, #8]
    30a2:	str	r7, [r6, #12]
    30a4:	ldr	r1, [r4, #20]
    30a6:	mov	r0, r6
    30a8:	bl	1e60 <MTPD::GetObjectInfo(unsigned long)>
    30ac:	ldr	r3, [r6, #12]
    30ae:	strb	r7, [r6, #8]
    30b0:	adds	r3, #12
    30b2:	movs	r2, #2
    30b4:	strh.w	r2, [sp, #32]
    30b8:	str	r3, [sp, #28]
    30ba:	ldrh	r3, [r4, #14]
    30bc:	strh.w	r3, [sp, #34]	; 0x22
    30c0:	ldr	r3, [r4, #16]
    30c2:	str	r3, [sp, #36]	; 0x24
    30c4:	add	r1, sp, #28
    30c6:	mov	r0, r6
    30c8:	mov	r2, r5
    30ca:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    30ce:	ldr	r1, [r4, #20]
    30d0:	mov	r0, r6
    30d2:	bl	1e60 <MTPD::GetObjectInfo(unsigned long)>
    30d6:	b.n	3006 <MTPD::loop()+0x22a>
    30d8:	.word	0x0000fe5c
    30dc:	.word	0x1fff098c
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    30e0:	movs	r3, #1
    30e2:	movs	r2, #0
    30e4:	strb	r3, [r6, #8]
    30e6:	str	r2, [r6, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    30e8:	ldr	r1, [r4, #20]
    30ea:	movw	r3, #54274	; 0xd402
    30ee:	cmp	r1, r3
    30f0:	beq.w	32ee <MTPD::loop()+0x512>
    30f4:	movs	r3, #12
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    30f6:	movs	r1, #0
    30f8:	movs	r2, #2
    30fa:	strb	r1, [r6, #8]
    30fc:	strh.w	r2, [sp, #32]
    3100:	str	r3, [sp, #28]
    3102:	ldrh	r3, [r4, #14]
    3104:	strh.w	r3, [sp, #34]	; 0x22
    3108:	ldr	r3, [r4, #16]
    310a:	str	r3, [sp, #36]	; 0x24
    310c:	add	r1, sp, #28
    310e:	movs	r2, #12
    3110:	mov	r0, r6
    3112:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    3116:	ldr	r1, [r4, #20]
    3118:	movw	r3, #54274	; 0xd402
    311c:	cmp	r1, r3
    311e:	bne.w	2fa2 <MTPD::loop()+0x1c6>
    3122:	mov	r0, r6
    3124:	bl	1ac0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    3128:	b.n	2fa2 <MTPD::loop()+0x1c6>
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
    312a:	mov	r0, r6
    312c:	ldr	r2, [r4, #24]
    312e:	ldr	r1, [r4, #20]
    3130:	bl	2c40 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
    3134:	ldr	r7, [r4, #20]
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
    3136:	str	r0, [r4, #28]
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    3138:	movs	r3, #24
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    313a:	cmp	r7, #0
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
    313c:	movw	r2, #8193	; 0x2001
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    3140:	it	eq
    3142:	moveq	r7, #1
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    3144:	strh	r3, [r4, #0]
    3146:	str	r3, [r4, #8]
              break;
    3148:	mov	r6, r2
    314a:	ldr	r5, [r4, #24]
    314c:	b.n	2e2e <MTPD::loop()+0x52>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    314e:	ldr	r0, [r6, #0]
    3150:	ldr	r2, [r4, #28]
    3152:	ldr	r3, [r0, #0]
    3154:	ldr	r1, [r4, #20]
    3156:	ldr	r3, [r3, #68]	; 0x44
    3158:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    315a:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
    315e:	strh	r5, [r4, #0]
    3160:	str	r5, [r4, #8]
              break;
    3162:	mov	r3, r5
    3164:	mov	r6, r2
    3166:	ldr	r5, [r4, #24]
    3168:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    316a:	movs	r7, #0
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    316c:	b.n	2e2e <MTPD::loop()+0x52>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
    316e:	movs	r7, #0
    3170:	strb	r2, [r6, #8]
    3172:	str	r7, [r6, #12]
    3174:	ldr	r1, [r4, #20]
    3176:	mov	r0, r6
    3178:	bl	22b4 <MTPD::GetStorageInfo(unsigned long)>
    317c:	ldr	r3, [r6, #12]
    317e:	strb	r7, [r6, #8]
    3180:	adds	r3, #12
    3182:	movs	r2, #2
    3184:	strh.w	r2, [sp, #32]
    3188:	str	r3, [sp, #28]
    318a:	ldrh	r3, [r4, #14]
    318c:	strh.w	r3, [sp, #34]	; 0x22
    3190:	ldr	r3, [r4, #16]
    3192:	str	r3, [sp, #36]	; 0x24
    3194:	add	r1, sp, #28
    3196:	mov	r0, r6
    3198:	mov	r2, r5
    319a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    319e:	ldr	r1, [r4, #20]
    31a0:	mov	r0, r6
    31a2:	bl	22b4 <MTPD::GetStorageInfo(unsigned long)>
    31a6:	b.n	3006 <MTPD::loop()+0x22a>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    31a8:	movs	r7, #0
    31aa:	strb	r2, [r6, #8]
    31ac:	mov	r0, r6
    31ae:	str	r7, [r6, #12]
    31b0:	bl	1d90 <MTPD::WriteStorageIDs()>
    31b4:	ldr	r3, [r6, #12]
    31b6:	strb	r7, [r6, #8]
    31b8:	adds	r3, #12
    31ba:	movs	r2, #2
    31bc:	strh.w	r2, [sp, #32]
    31c0:	str	r3, [sp, #28]
    31c2:	ldrh	r3, [r4, #14]
    31c4:	strh.w	r3, [sp, #34]	; 0x22
    31c8:	ldr	r3, [r4, #16]
    31ca:	str	r3, [sp, #36]	; 0x24
    31cc:	mov	r0, r6
    31ce:	mov	r2, r5
    31d0:	add	r1, sp, #28
    31d2:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    31d6:	mov	r0, r6
    31d8:	bl	1d90 <MTPD::WriteStorageIDs()>
    31dc:	b.n	3006 <MTPD::loop()+0x22a>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
    31de:	ldr	r5, [r4, #24]
    31e0:	cmp	r5, #0
    31e2:	bne.w	2f36 <MTPD::loop()+0x15a>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    31e6:	ldr	r0, [r6, #0]
    31e8:	ldr	r1, [r4, #28]
    31ea:	ldr	r3, [r0, #0]
    31ec:	ldr	r3, [r3, #20]
    31ee:	blx	r3
    31f0:	b.n	31f4 <MTPD::loop()+0x418>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    31f2:	adds	r5, #1
    31f4:	ldr	r0, [r6, #0]
    31f6:	ldr	r3, [r0, #0]
    31f8:	ldr	r3, [r3, #24]
    31fa:	blx	r3
    31fc:	cmp	r0, #0
    31fe:	bne.n	31f2 <MTPD::loop()+0x416>
    return num;
    3200:	movw	r2, #8193	; 0x2001
    3204:	mov	r7, r5
    3206:	mov	r6, r2
    3208:	ldr	r3, [r4, #8]
    320a:	ldr	r5, [r4, #24]
    320c:	ldr	r0, [r4, #28]
    320e:	b.n	2e2e <MTPD::loop()+0x52>

              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            p1=CONTAINER->params[0];
    3210:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    3212:	ldr.w	r9, [r4, #24]

            TRANSMIT(getObjectPropDesc(p1,p2));
    3216:	strb	r2, [r6, #8]
    3218:	mov.w	r8, #0
    321c:	mov	r1, r7
    321e:	mov	r2, r9
    3220:	mov	r0, r6
    3222:	str.w	r8, [r6, #12]
    3226:	bl	23e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    322a:	ldr	r3, [r6, #12]
    322c:	strb.w	r8, [r6, #8]
    3230:	adds	r3, #12
    3232:	movs	r2, #2
    3234:	strh.w	r2, [sp, #32]
    3238:	str	r3, [sp, #28]
    323a:	ldrh	r3, [r4, #14]
    323c:	strh.w	r3, [sp, #34]	; 0x22
    3240:	ldr	r3, [r4, #16]
    3242:	str	r3, [sp, #36]	; 0x24
    3244:	mov	r2, r5
    3246:	add	r1, sp, #28
    3248:	mov	r0, r6
    324a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    324e:	mov	r2, r9
    3250:	mov	r1, r7
    3252:	mov	r0, r6
    3254:	bl	23e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3258:	mov	r0, r6
    325a:	bl	199c <MTPD::get_buffer()>
    325e:	ldr	r1, [r6, #4]
    3260:	movs	r0, #4
    3262:	bl	9e98 <usb_tx>
    3266:	str.w	r8, [r6, #4]
    326a:	b.n	2ef4 <MTPD::loop()+0x118>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    326c:	movs	r7, #0
    326e:	movs	r3, #1
    3270:	strb	r3, [r6, #8]
    3272:	str	r7, [r6, #12]
    3274:	ldr	r1, [r4, #20]
    3276:	mov	r0, r6
    3278:	bl	2ae4 <MTPD::GetObject(unsigned long)>
    327c:	ldr	r3, [r6, #12]
    327e:	strb	r7, [r6, #8]
    3280:	adds	r3, #12
    3282:	movs	r2, #2
    3284:	strh.w	r2, [sp, #32]
    3288:	str	r3, [sp, #28]
    328a:	ldrh	r3, [r4, #14]
    328c:	strh.w	r3, [sp, #34]	; 0x22
    3290:	ldr	r3, [r4, #16]
    3292:	str	r3, [sp, #36]	; 0x24
    3294:	add	r1, sp, #28
    3296:	mov	r0, r6
    3298:	movs	r2, #12
    329a:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    329e:	ldr	r1, [r4, #20]
    32a0:	mov	r0, r6
    32a2:	bl	2ae4 <MTPD::GetObject(unsigned long)>
    32a6:	b.n	3006 <MTPD::loop()+0x22a>

            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
    32a8:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    32aa:	ldr.w	r8, [r4, #24]

            TRANSMIT(getObjectPropValue(p1,p2));
    32ae:	movs	r5, #0
    32b0:	movs	r3, #1
    32b2:	mov	r1, r7
    32b4:	mov	r2, r8
    32b6:	strb	r3, [r6, #8]
    32b8:	mov	r0, r6
    32ba:	str	r5, [r6, #12]
    32bc:	bl	2118 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    32c0:	ldr	r3, [r6, #12]
    32c2:	strb	r5, [r6, #8]
    32c4:	adds	r3, #12
    32c6:	movs	r2, #2
    32c8:	strh.w	r2, [sp, #32]
    32cc:	str	r3, [sp, #28]
    32ce:	ldrh	r3, [r4, #14]
    32d0:	strh.w	r3, [sp, #34]	; 0x22
    32d4:	ldr	r3, [r4, #16]
    32d6:	str	r3, [sp, #36]	; 0x24
    32d8:	add	r1, sp, #28
    32da:	mov	r0, r6
    32dc:	movs	r2, #12
    32de:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    32e2:	mov	r2, r8
    32e4:	mov	r1, r7
    32e6:	mov	r0, r6
    32e8:	bl	2118 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    32ec:	b.n	2ee4 <MTPD::loop()+0x108>
    32ee:	mov	r0, r6
    32f0:	bl	1ac0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    32f4:	ldr	r3, [r6, #12]
    32f6:	adds	r3, #12
    32f8:	b.n	30f6 <MTPD::loop()+0x31a>
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    32fa:	movs	r3, #1
    32fc:	str	r5, [r6, #12]
    32fe:	strb	r3, [r6, #8]
    3300:	mov	r0, r6
    3302:	ldr	r2, [r4, #28]
    3304:	ldr	r1, [r4, #20]
    3306:	bl	1dd0 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    330a:	ldr	r3, [r6, #12]
    330c:	strb	r5, [r6, #8]
    330e:	adds	r3, #12
    3310:	movs	r2, #2
    3312:	strh.w	r2, [sp, #32]
    3316:	str	r3, [sp, #28]
    3318:	ldrh	r3, [r4, #14]
    331a:	strh.w	r3, [sp, #34]	; 0x22
    331e:	ldr	r3, [r4, #16]
    3320:	str	r3, [sp, #36]	; 0x24
    3322:	mov	r0, r6
    3324:	movs	r2, #12
    3326:	add	r1, sp, #28
    3328:	bl	19b4 <MTPD::write(char const*, int) [clone .part.2]>
    332c:	ldr	r2, [r4, #28]
    332e:	ldr	r1, [r4, #20]
    3330:	mov	r0, r6
    3332:	bl	1dd0 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3336:	mov	r0, r6
    3338:	bl	199c <MTPD::get_buffer()>
    333c:	ldr	r1, [r6, #4]
    333e:	movs	r0, #4
    3340:	bl	9e98 <usb_tx>
    3344:	str	r5, [r6, #4]
    3346:	movw	r2, #8193	; 0x2001
    334a:	ldr	r3, [r4, #8]
    334c:	ldr	r5, [r4, #24]
    334e:	ldr	r0, [r4, #28]
    3350:	mov	r6, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3352:	movs	r7, #0
    3354:	b.n	2e2e <MTPD::loop()+0x52>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    3356:	ldr	r1, [pc, #48]	; (3388 <MTPD::loop()+0x5ac>)
    3358:	mov	r0, r6
    335a:	bl	1a18 <MTPD::writestring(char const*)>
    335e:	b.n	2fa2 <MTPD::loop()+0x1c6>
    3360:	ldr	r1, [pc, #36]	; (3388 <MTPD::loop()+0x5ac>)
    3362:	mov	r0, r6
    3364:	bl	1a18 <MTPD::writestring(char const*)>
    3368:	ldr	r3, [r6, #12]
    336a:	adds	r3, #12
    336c:	b.n	2f76 <MTPD::loop()+0x19a>
    336e:	mov	r0, r6
    3370:	mov	r1, r7
    3372:	bl	2c14 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    3376:	cmp	r0, #0
    3378:	beq.w	2e64 <MTPD::loop()+0x88>
    337c:	uxth	r6, r0
    337e:	ldr	r3, [r4, #8]
    3380:	ldr	r5, [r4, #24]
    3382:	ldr	r0, [r4, #28]
    3384:	mov	r2, r6
    3386:	b.n	2e2e <MTPD::loop()+0x52>
    3388:	.word	0x0000fe18

0000338c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    338c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3390:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    3392:	ldr	r5, [r4, #12]
    3394:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3398:	ldr	r5, [pc, #484]	; (3580 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    339a:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    339c:	bne.n	3444 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    339e:	lsls	r7, r3, #31
    33a0:	bpl.w	350a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    33a4:	cmp	r1, #0
    33a6:	beq.w	3570 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    33aa:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    33ac:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    33ae:	it	ne
    33b0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    33b4:	str	r5, [r4, #52]	; 0x34
    33b6:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    33b8:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    33bc:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    33c0:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    33c4:	cmp.w	ip, #0
    33c8:	beq.w	351c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    33cc:	cbz	r1, 33d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    33ce:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    33d0:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    33d4:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    33d8:	ldr	r5, [r0, #4]
    33da:	ldrb	r6, [r5, #8]
			if (count == 2)
    33dc:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    33e0:	add.w	r6, r6, #4294967295
    33e4:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    33e8:	ite	eq
    33ea:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    33ee:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    33f2:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    33f4:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    33f6:	sub.w	ip, ip, #2
    33fa:	b.n	340e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    33fc:	cbz	r2, 3402 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    33fe:	strb	r4, [r2, #0]
    3400:	adds	r2, #1
						} 
						count_read--;
    3402:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3404:	and.w	r5, r5, #61440	; 0xf000
    3408:	cmp	r5, r6
    340a:	bls.n	343a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    340c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    340e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    3410:	tst.w	r5, #240	; 0xf0
    3414:	beq.n	3404 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    3416:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    3418:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    341c:	mov	r7, r2
    341e:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    3422:	bne.n	33fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    3424:	cbz	r2, 342e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    3426:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    342a:	strb	r4, [r2, #1]
    342c:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    342e:	and.w	r5, r5, #61440	; 0xf000
    3432:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    3434:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3438:	bhi.n	340c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    343a:	cmp.w	ip, #0
    343e:	beq.n	351c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    3440:	ldr	r4, [r0, #0]
    3442:	b.n	33cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    3444:	lsls	r5, r3, #31
    3446:	bpl.n	34e2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    3448:	cmp	r1, #0
    344a:	beq.w	3560 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    344e:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    3450:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3452:	it	ne
    3454:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    3458:	str	r5, [r4, #52]	; 0x34
    345a:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    345c:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    3460:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    3464:	cmp.w	lr, #0
    3468:	beq.n	34ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    346a:	cbz	r1, 3478 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    346c:	ldrb.w	ip, [r1, #1]
    3470:	ldrb	r5, [r1, #0]
    3472:	adds	r1, #2
    3474:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3478:	ldr	r5, [r0, #4]
    347a:	ldrb	r6, [r5, #8]
			if (count == 2)
    347c:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3480:	add.w	r6, r6, #4294967295
    3484:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    3488:	ite	eq
    348a:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    348e:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3492:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    3494:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    3496:	sub.w	lr, lr, #2
    349a:	b.n	34ae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    349c:	cbz	r2, 34a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    349e:	strb	r4, [r2, #0]
    34a0:	adds	r2, #1
						} 
						count_read--;
    34a2:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    34a4:	and.w	r5, r5, #61440	; 0xf000
    34a8:	cmp	r5, r6
    34aa:	bls.n	34d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    34ac:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    34ae:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    34b0:	tst.w	r5, #240	; 0xf0
    34b4:	beq.n	34a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    34b6:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    34ba:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    34bc:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    34be:	bne.n	349c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    34c0:	cbz	r2, 34cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    34c2:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    34c6:	asrs	r4, r4, #8
    34c8:	strb	r4, [r2, #1]
    34ca:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    34cc:	and.w	r5, r5, #61440	; 0xf000
    34d0:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    34d2:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    34d6:	bhi.n	34ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    34d8:	cmp.w	lr, #0
    34dc:	beq.n	34ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    34de:	ldr	r4, [r0, #0]
    34e0:	b.n	346a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    34e2:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    34e4:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    34e8:	cmp.w	lr, #0
    34ec:	bne.n	346a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    34ee:	cbz	r3, 3538 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    34f0:	ldr	r4, [r0, #0]
			sr = port().SR;
    34f2:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    34f4:	tst.w	r1, #240	; 0xf0
    34f8:	beq.n	34f2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    34fa:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    34fc:	lsls	r4, r3, #31
    34fe:	bpl.n	353c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    3500:	cbz	r2, 3506 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    3502:	strb	r1, [r2, #0]
    3504:	adds	r2, #1
					count_read--;
    3506:	subs	r3, #1
    3508:	b.n	34ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    350a:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    350e:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    3510:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    3514:	cmp.w	ip, #0
    3518:	bne.w	33cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    351c:	cbz	r3, 3538 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    351e:	ldr	r4, [r0, #0]
			sr = port().SR;
    3520:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    3522:	tst.w	r1, #240	; 0xf0
    3526:	beq.n	3520 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    3528:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    352a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    352c:	bpl.n	354e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    352e:	cbz	r2, 3534 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    3530:	strb	r1, [r2, #0]
    3532:	adds	r2, #1
					count_read--;
    3534:	subs	r3, #1
    3536:	b.n	351c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    3538:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    353c:	cbz	r2, 354a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    353e:	mov	r4, r2
						*p_read++ = w >> 8;
    3540:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    3542:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    3546:	strb	r5, [r2, #1]
    3548:	mov	r2, r4
					}
					count_read -= 2;
    354a:	subs	r3, #2
    354c:	b.n	34ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    354e:	cbz	r2, 355c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    3550:	mov	r4, r2
    3552:	asrs	r5, r1, #8
    3554:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    3558:	strb	r1, [r2, #1]
    355a:	mov	r2, r4
					}
					count_read -= 2;
    355c:	subs	r3, #2
    355e:	b.n	351c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3560:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3564:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3566:	it	ne
    3568:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    356c:	str	r5, [r4, #52]	; 0x34
    356e:	b.n	345c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3570:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3574:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3576:	it	ne
    3578:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    357c:	str	r5, [r4, #52]	; 0x34
    357e:	b.n	33b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    3580:	.word	0x801f0400

00003584 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    3584:	cbz	r3, 358a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3586:	b.w	338c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    358a:	bx	lr

0000358c <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    358c:	ldr	r2, [pc, #400]	; (3720 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    358e:	ldr	r3, [pc, #404]	; (3724 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    3590:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3594:	ldr	r6, [pc, #400]	; (3728 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3596:	ldr.w	sl, [pc, #416]	; 3738 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    359a:	ldr	r4, [pc, #400]	; (372c <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    359c:	ldr.w	r9, [pc, #400]	; 3730 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    35a0:	umull	r5, r2, r2, r0
    35a4:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35a8:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35ac:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35b0:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35b4:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35b8:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35ba:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35bc:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35c0:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35c4:	rsb	r6, fp, r7
    35c8:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35cc:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35ce:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35d0:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35d2:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35d6:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35da:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35de:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35e2:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35e4:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35e8:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35ec:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35f0:	adds	r6, #1
    35f2:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    35f4:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    35f6:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    35f8:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    35fa:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    35fc:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    35fe:	movw	fp, #365	; 0x16d
    3602:	mov.w	r8, #100	; 0x64
    3606:	mov.w	sl, #400	; 0x190
    360a:	b.n	362a <breakTime(long, tmElements_t&)+0x9e>
    360c:	rsb	r5, r6, r5, asr #7
    3610:	mls	r5, sl, r5, r3
    3614:	cbnz	r0, 3674 <breakTime(long, tmElements_t&)+0xe8>
    3616:	cmp	r5, #0
    3618:	ite	ne
    361a:	movne	r0, fp
    361c:	moveq.w	r0, #366	; 0x16e
    3620:	add	r2, r0
    3622:	cmp	ip, r2
    3624:	add.w	r4, r4, #1
    3628:	bcc.n	3652 <breakTime(long, tmElements_t&)+0xc6>
    362a:	uxtb	r7, r4
    362c:	addw	r3, r7, #1970	; 0x7b2
    3630:	smull	r0, r5, r9, r3
    3634:	asrs	r6, r3, #31
    3636:	rsb	r0, r6, r5, asr #5
    363a:	ands.w	lr, r3, #3
    363e:	mls	r0, r8, r0, r3
    3642:	beq.n	360c <breakTime(long, tmElements_t&)+0x80>
    3644:	movw	r0, #365	; 0x16d
    3648:	add	r2, r0
    364a:	cmp	ip, r2
    364c:	add.w	r4, r4, #1
    3650:	bcs.n	362a <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    3652:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3654:	cmp.w	lr, #0
    3658:	bne.n	367a <breakTime(long, tmElements_t&)+0xee>
    365a:	ldr	r0, [pc, #212]	; (3730 <breakTime(long, tmElements_t&)+0x1a4>)
    365c:	asrs	r6, r3, #31
    365e:	smull	r4, r0, r0, r3
    3662:	rsb	r4, r6, r0, asr #5
    3666:	movs	r5, #100	; 0x64
    3668:	mls	r4, r5, r4, r3
    366c:	cbz	r4, 36de <breakTime(long, tmElements_t&)+0x152>
    366e:	mov.w	r4, #366	; 0x16e
    3672:	b.n	3680 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3674:	mov.w	r0, #366	; 0x16e
    3678:	b.n	3620 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    367a:	movw	r4, #365	; 0x16d
    367e:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3680:	ldr	r0, [pc, #172]	; (3730 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    3682:	ldr	r5, [pc, #176]	; (3734 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3684:	smull	r7, r0, r0, r3
    3688:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    368c:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    368e:	rsb	r6, r6, r0, asr #7
    3692:	movs	r4, #100	; 0x64
    3694:	mov.w	r0, #400	; 0x190
    3698:	mls	r6, r0, r6, r3
    369c:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    36a0:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    36a4:	movs	r0, #1
    36a6:	movs	r3, #0
    36a8:	b.n	36b0 <breakTime(long, tmElements_t&)+0x124>
    36aa:	adds	r0, #1
    36ac:	uxtb	r0, r0
    36ae:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    36b0:	cmp	r3, #1
    36b2:	uxtb	r7, r3
    36b4:	beq.n	36f8 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    36b6:	ldrb	r4, [r3, r5]
    36b8:	cmp	r4, r2
    36ba:	bhi.n	36d0 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    36bc:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    36be:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    36c2:	bne.n	36aa <breakTime(long, tmElements_t&)+0x11e>
    36c4:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    36c6:	adds	r2, #1
    36c8:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    36ca:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    36cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36d0:	adds	r7, #1
    36d2:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    36d4:	adds	r2, #1
    36d6:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    36d8:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    36da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    36de:	mov.w	r4, #400	; 0x190
    36e2:	rsb	r0, r6, r0, asr #7
    36e6:	mls	r0, r4, r0, r3
    36ea:	cmp	r0, #0
    36ec:	movw	r4, #365	; 0x16d
    36f0:	it	eq
    36f2:	moveq.w	r4, #366	; 0x16e
    36f6:	b.n	3680 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    36f8:	cmp.w	lr, #0
    36fc:	bne.n	3714 <breakTime(long, tmElements_t&)+0x188>
    36fe:	cmp.w	r8, #0
    3702:	bne.n	371c <breakTime(long, tmElements_t&)+0x190>
    3704:	cmp	r6, #0
    3706:	ite	ne
    3708:	movne	r4, #28
    370a:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    370c:	cmp	r2, r4
    370e:	bcc.n	3718 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    3710:	subs	r2, r2, r4
    3712:	b.n	36aa <breakTime(long, tmElements_t&)+0x11e>
    3714:	movs	r4, #28
    3716:	b.n	370c <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    3718:	movs	r7, #2
    371a:	b.n	36c6 <breakTime(long, tmElements_t&)+0x13a>
    371c:	movs	r4, #29
    371e:	b.n	370c <breakTime(long, tmElements_t&)+0x180>
    3720:	.word	0xc22e4507
    3724:	.word	0x88888889
    3728:	.word	0x91a2b3c5
    372c:	.word	0xaaaaaaab
    3730:	.word	0x51eb851f
    3734:	.word	0x0000fe74
    3738:	.word	0x24924925

0000373c <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    373c:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    373e:	ldr	r1, [pc, #12]	; (374c <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3740:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    3742:	bl	358c <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    3746:	ldr	r3, [pc, #8]	; (3750 <refreshCache(long) [clone .part.0]+0x14>)
    3748:	str	r4, [r3, #0]
    374a:	pop	{r4, pc}
    374c:	.word	0x1fff14c4
    3750:	.word	0x1fff14c0

00003754 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    3754:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3756:	ldr	r4, [pc, #128]	; (37d8 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3758:	ldr	r6, [pc, #128]	; (37dc <now()+0x88>)
    375a:	ldr	r3, [r4, #0]
    375c:	ldr	r2, [r6, #0]
    375e:	ldr	r5, [pc, #128]	; (37e0 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    3760:	sub	sp, #12
    3762:	ldr	r0, [r5, #0]
    3764:	str	r3, [sp, #0]
	return ret;
    3766:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3768:	subs	r3, r3, r2
    376a:	cmp.w	r3, #1000	; 0x3e8
    376e:	bcc.n	3790 <now()+0x3c>
    3770:	adds	r0, #1
    3772:	b.n	3776 <now()+0x22>
    3774:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3776:	ldr	r3, [r4, #0]
    3778:	str	r3, [sp, #0]
	return ret;
    377a:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    377c:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3780:	subs	r3, r3, r2
    3782:	cmp.w	r3, #1000	; 0x3e8
    3786:	add.w	r1, r0, #1
    378a:	bcs.n	3774 <now()+0x20>
    378c:	str	r0, [r5, #0]
    378e:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    3790:	ldr	r7, [pc, #80]	; (37e4 <now()+0x90>)
    3792:	ldr	r3, [r7, #0]
    3794:	cmp	r0, r3
    3796:	bcc.n	37b8 <now()+0x64>
    if (getTimePtr != 0) {
    3798:	ldr	r3, [pc, #76]	; (37e8 <now()+0x94>)
    379a:	ldr	r3, [r3, #0]
    379c:	cbz	r3, 37b8 <now()+0x64>
      time_t t = getTimePtr();
    379e:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    37a0:	ldr	r3, [pc, #72]	; (37ec <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    37a2:	cbnz	r0, 37bc <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37a4:	ldr	r1, [pc, #72]	; (37f0 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    37a6:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37a8:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    37aa:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37ac:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    37ae:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37b0:	it	ne
    37b2:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    37b4:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    37b6:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    37b8:	add	sp, #12
    37ba:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37bc:	ldr	r2, [r4, #0]
    37be:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    37c0:	ldr	r3, [r3, #0]
  Status = timeSet;
    37c2:	ldr	r2, [pc, #44]	; (37f0 <now()+0x9c>)
	return ret;
    37c4:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    37c6:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    37c8:	add	r3, r0
  Status = timeSet;
    37ca:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    37cc:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    37ce:	str	r3, [r7, #0]
  Status = timeSet;
    37d0:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    37d2:	add	sp, #12
    37d4:	pop	{r4, r5, r6, r7, pc}
    37d6:	nop
    37d8:	.word	0x1fff19f4
    37dc:	.word	0x1fff14d8
    37e0:	.word	0x1fff14cc
    37e4:	.word	0x1fff14dc
    37e8:	.word	0x1fff14d4
    37ec:	.word	0x1fff0978
    37f0:	.word	0x1fff14d0

000037f4 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    37f4:	push	{r3, lr}
  return hour(now()); 
    37f6:	bl	3754 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    37fa:	ldr	r3, [pc, #16]	; (380c <hour()+0x18>)
    37fc:	ldr	r3, [r3, #0]
    37fe:	cmp	r0, r3
    3800:	beq.n	3806 <hour()+0x12>
    3802:	bl	373c <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    3806:	ldr	r3, [pc, #8]	; (3810 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    3808:	ldrb	r0, [r3, #2]
    380a:	pop	{r3, pc}
    380c:	.word	0x1fff14c0
    3810:	.word	0x1fff14c4

00003814 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    3814:	push	{r3, lr}
  return minute(now()); 
    3816:	bl	3754 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    381a:	ldr	r3, [pc, #16]	; (382c <minute()+0x18>)
    381c:	ldr	r3, [r3, #0]
    381e:	cmp	r0, r3
    3820:	beq.n	3826 <minute()+0x12>
    3822:	bl	373c <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    3826:	ldr	r3, [pc, #8]	; (3830 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    3828:	ldrb	r0, [r3, #1]
    382a:	pop	{r3, pc}
    382c:	.word	0x1fff14c0
    3830:	.word	0x1fff14c4

00003834 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    3834:	push	{r3, lr}
  return second(now()); 
    3836:	bl	3754 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    383a:	ldr	r3, [pc, #16]	; (384c <second()+0x18>)
    383c:	ldr	r3, [r3, #0]
    383e:	cmp	r0, r3
    3840:	beq.n	3846 <second()+0x12>
    3842:	bl	373c <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    3846:	ldr	r3, [pc, #8]	; (3850 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    3848:	ldrb	r0, [r3, #0]
    384a:	pop	{r3, pc}
    384c:	.word	0x1fff14c0
    3850:	.word	0x1fff14c4

00003854 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    3854:	push	{r3, lr}
  return(day(now())); 
    3856:	bl	3754 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    385a:	ldr	r3, [pc, #16]	; (386c <day()+0x18>)
    385c:	ldr	r3, [r3, #0]
    385e:	cmp	r0, r3
    3860:	beq.n	3866 <day()+0x12>
    3862:	bl	373c <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    3866:	ldr	r3, [pc, #8]	; (3870 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    3868:	ldrb	r0, [r3, #4]
    386a:	pop	{r3, pc}
    386c:	.word	0x1fff14c0
    3870:	.word	0x1fff14c4

00003874 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    3874:	push	{r3, lr}
  return month(now()); 
    3876:	bl	3754 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    387a:	ldr	r3, [pc, #16]	; (388c <month()+0x18>)
    387c:	ldr	r3, [r3, #0]
    387e:	cmp	r0, r3
    3880:	beq.n	3886 <month()+0x12>
    3882:	bl	373c <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    3886:	ldr	r3, [pc, #8]	; (3890 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    3888:	ldrb	r0, [r3, #5]
    388a:	pop	{r3, pc}
    388c:	.word	0x1fff14c0
    3890:	.word	0x1fff14c4

00003894 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    3894:	push	{r3, lr}
  return year(now()); 
    3896:	bl	3754 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    389a:	ldr	r3, [pc, #20]	; (38b0 <year()+0x1c>)
    389c:	ldr	r3, [r3, #0]
    389e:	cmp	r0, r3
    38a0:	beq.n	38a6 <year()+0x12>
    38a2:	bl	373c <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    38a6:	ldr	r3, [pc, #12]	; (38b4 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    38a8:	ldrb	r0, [r3, #6]
}
    38aa:	addw	r0, r0, #1970	; 0x7b2
    38ae:	pop	{r3, pc}
    38b0:	.word	0x1fff14c0
    38b4:	.word	0x1fff14c4

000038b8 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    38b8:	mov.w	r0, #4294967295
    38bc:	bx	lr
    38be:	nop

000038c0 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    38c0:	bx	lr
    38c2:	nop

000038c4 <SDClass::remove(char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool remove(const char *filepath) {
    38c4:	push	{r4, lr}
    38c6:	ldr.w	r4, [r0, #1148]	; 0x47c
    38ca:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    38cc:	cbz	r4, 38f8 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    38ce:	mov	r2, r1
    38d0:	mov	r0, sp
    38d2:	mov	r1, r4
    38d4:	movs	r3, #1
    38d6:	movs	r4, #0
    38d8:	strb.w	r4, [sp]
    38dc:	strb.w	r4, [sp, #1]
    38e0:	strb.w	r4, [sp, #2]
    38e4:	bl	5c1c <FatFile::open(FatVolume*, char const*, int)>
    38e8:	cbnz	r0, 38ee <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
    38ea:	add	sp, #56	; 0x38
    38ec:	pop	{r4, pc}
    38ee:	mov	r0, sp
    38f0:	bl	728c <FatFile::remove()>
    38f4:	add	sp, #56	; 0x38
    38f6:	pop	{r4, pc}
    38f8:	ldr.w	r0, [r0, #1152]	; 0x480
    38fc:	cmp	r0, #0
    38fe:	beq.n	38ea <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    3900:	mov	r2, r1
    3902:	movs	r3, #1
    3904:	mov	r1, r0
    3906:	mov	r0, sp
    3908:	strb.w	r4, [sp, #49]	; 0x31
    390c:	strb.w	r4, [sp, #50]	; 0x32
    3910:	strb.w	r4, [sp, #51]	; 0x33
    3914:	bl	45b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3918:	cmp	r0, #0
    391a:	beq.n	38ea <SDClass::remove(char const*)+0x26>
    391c:	mov	r0, sp
    391e:	bl	4d9c <ExFatFile::remove()>
    3922:	add	sp, #56	; 0x38
    3924:	pop	{r4, pc}
    3926:	nop

00003928 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    3928:	push	{r4, r5, lr}
    392a:	ldr.w	r4, [r0, #1148]	; 0x47c
    392e:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    3930:	cbz	r4, 395c <SDClass::rmdir(char const*)+0x34>
    3932:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    3934:	mov	r2, r1
    3936:	mov	r3, r5
    3938:	mov	r1, r4
    393a:	mov	r0, sp
    393c:	strb.w	r5, [sp]
    3940:	strb.w	r5, [sp, #1]
    3944:	strb.w	r5, [sp, #2]
    3948:	bl	5c1c <FatFile::open(FatVolume*, char const*, int)>
    394c:	cbnz	r0, 3952 <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
    394e:	add	sp, #60	; 0x3c
    3950:	pop	{r4, r5, pc}
    3952:	mov	r0, sp
    3954:	bl	5f44 <FatFile::rmdir()>
    3958:	add	sp, #60	; 0x3c
    395a:	pop	{r4, r5, pc}
    395c:	ldr.w	r0, [r0, #1152]	; 0x480
    3960:	cmp	r0, #0
    3962:	beq.n	394e <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    3964:	mov	r2, r1
    3966:	mov	r3, r4
    3968:	mov	r1, r0
    396a:	mov	r0, sp
    396c:	strb.w	r4, [sp, #49]	; 0x31
    3970:	strb.w	r4, [sp, #50]	; 0x32
    3974:	strb.w	r4, [sp, #51]	; 0x33
    3978:	bl	45b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    397c:	cmp	r0, #0
    397e:	beq.n	394e <SDClass::rmdir(char const*)+0x26>
    3980:	mov	r0, sp
    3982:	bl	4ec4 <ExFatFile::rmdir()>
    3986:	add	sp, #60	; 0x3c
    3988:	pop	{r4, r5, pc}
    398a:	nop

0000398c <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    398c:	push	{r4, lr}
    398e:	ldr.w	r4, [r0, #1148]	; 0x47c
    3992:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    3994:	cbz	r4, 39b6 <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    3996:	mov	r2, r1
    3998:	movs	r3, #1
    399a:	add.w	r1, r4, #1088	; 0x440
    399e:	mov	r0, sp
    39a0:	movs	r4, #0
    39a2:	strb.w	r4, [sp]
    39a6:	strb.w	r4, [sp, #1]
    39aa:	strb.w	r4, [sp, #2]
    39ae:	bl	631c <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
    39b2:	add	sp, #56	; 0x38
    39b4:	pop	{r4, pc}
    39b6:	ldr.w	r0, [r0, #1152]	; 0x480
    39ba:	cmp	r0, #0
    39bc:	beq.n	39b2 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    39be:	mov	r2, r1
    39c0:	movs	r3, #1
    39c2:	add.w	r1, r0, #1088	; 0x440
    39c6:	mov	r0, sp
    39c8:	strb.w	r4, [sp, #49]	; 0x31
    39cc:	strb.w	r4, [sp, #50]	; 0x32
    39d0:	strb.w	r4, [sp, #51]	; 0x33
    39d4:	bl	52a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    39d8:	add	sp, #56	; 0x38
    39da:	pop	{r4, pc}

000039dc <SDClass::exists(char const*)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    39dc:	push	{r4, r5, lr}
    39de:	ldr.w	r4, [r0, #1148]	; 0x47c
    39e2:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    39e4:	cbz	r4, 3a04 <SDClass::exists(char const*)+0x28>
    39e6:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    39e8:	mov	r2, r1
    39ea:	mov	r3, r5
    39ec:	mov	r1, r4
    39ee:	mov	r0, sp
    39f0:	strb.w	r5, [sp]
    39f4:	strb.w	r5, [sp, #1]
    39f8:	strb.w	r5, [sp, #2]
    39fc:	bl	5c1c <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    3a00:	add	sp, #60	; 0x3c
    3a02:	pop	{r4, r5, pc}
    3a04:	ldr.w	r0, [r0, #1152]	; 0x480
    3a08:	cmp	r0, #0
    3a0a:	beq.n	3a00 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    3a0c:	mov	r2, r1
    3a0e:	mov	r3, r4
    3a10:	mov	r1, r0
    3a12:	mov	r0, sp
    3a14:	strb.w	r4, [sp, #49]	; 0x31
    3a18:	strb.w	r4, [sp, #50]	; 0x32
    3a1c:	strb.w	r4, [sp, #51]	; 0x33
    3a20:	bl	45b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3a24:	add	sp, #60	; 0x3c
    3a26:	pop	{r4, r5, pc}

00003a28 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    3a28:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    3a2c:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    3a2e:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    3a30:	movw	r3, #16898	; 0x4202
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    3a34:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3a36:	it	ne
    3a38:	movne	r3, #0
    3a3a:	adds	r1, #4
    3a3c:	mov	r0, sp
    3a3e:	bl	7c8c <FsVolume::open(char const*, int)>
    3a42:	ldr	r3, [sp, #72]	; 0x48
    3a44:	cmp	r3, #0
    3a46:	beq.n	3ab2 <SDClass::open(char const*, unsigned char)+0x8a>
		if (file) return File(new SDFile(file));
    3a48:	movs	r0, #104	; 0x68
    3a4a:	bl	acb4 <operator new(unsigned int)>
    3a4e:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    3a50:	ldrb.w	r6, [sp, #4]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    3a54:	ldr	r0, [pc, #116]	; (3acc <SDClass::open(char const*, unsigned char)+0xa4>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    3a56:	ldr	r1, [pc, #120]	; (3ad0 <SDClass::open(char const*, unsigned char)+0xa8>)
    3a58:	ldr	r2, [sp, #8]
    3a5a:	ldrb.w	r3, [sp, #12]
    3a5e:	str	r0, [r4, #0]
    3a60:	add	r7, sp, #16
    3a62:	strb	r6, [r4, #24]
    3a64:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    3a66:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3a68:	mov.w	r8, #1000	; 0x3e8
    3a6c:	mov	r1, r7
    3a6e:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    3a72:	str	r2, [r4, #28]
    3a74:	strb.w	r3, [r4, #32]
    3a78:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3a7a:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    3a7c:	str	r6, [r4, #16]
    3a7e:	str.w	r8, [r4, #8]
    3a82:	bl	7a48 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    3a86:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3a88:	ldr	r1, [pc, #72]	; (3ad4 <SDClass::open(char const*, unsigned char)+0xac>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3a8a:	ldr	r2, [pc, #76]	; (3ad8 <SDClass::open(char const*, unsigned char)+0xb0>)
    3a8c:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    3a8e:	adds	r3, #1
    3a90:	strb	r6, [r5, #4]
    3a92:	str.w	r8, [r5, #8]
    3a96:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    3a98:	str	r4, [r5, #16]
    3a9a:	str	r1, [r4, #20]
		if (f) f->refcount++;
    3a9c:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3a9e:	str	r2, [r5, #0]
    3aa0:	ldr	r3, [pc, #56]	; (3adc <SDClass::open(char const*, unsigned char)+0xb4>)
    3aa2:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    3aa4:	mov	r0, r7
    3aa6:	bl	7ac0 <FsBaseFile::close()>
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
    3aaa:	mov	r0, r5
    3aac:	add	sp, #80	; 0x50
    3aae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    3ab2:	ldr	r3, [sp, #76]	; 0x4c
    3ab4:	cmp	r3, #0
    3ab6:	bne.n	3a48 <SDClass::open(char const*, unsigned char)+0x20>
    3ab8:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    3abc:	ldr	r2, [pc, #24]	; (3ad8 <SDClass::open(char const*, unsigned char)+0xb0>)
    3abe:	strb	r3, [r5, #4]
    3ac0:	strb	r3, [r5, #12]
    3ac2:	str	r3, [r5, #16]
    3ac4:	str	r1, [r5, #8]
    3ac6:	str	r2, [r5, #0]
    3ac8:	add	r7, sp, #16
    3aca:	b.n	3aa0 <SDClass::open(char const*, unsigned char)+0x78>
    3acc:	.word	0x0000fd08
    3ad0:	.word	0x0000fc9c
    3ad4:	.word	0x0000fce4
    3ad8:	.word	0x0000fc0c
    3adc:	.word	0x0000fcc0

00003ae0 <_GLOBAL__sub_I_SD>:
#include <Arduino.h>
#include <SD.h>

SDClass SD;
    3ae0:	push	{r4, r5, r6, r7}


class SDClass : public FS
{
public:
	SDClass() { }
    3ae2:	ldr	r3, [pc, #60]	; (3b20 <_GLOBAL__sub_I_SD+0x40>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    3ae4:	ldr	r4, [pc, #60]	; (3b24 <_GLOBAL__sub_I_SD+0x44>)
    3ae6:	str.w	r4, [r3, #1164]	; 0x48c
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    3aea:	movs	r5, #40	; 0x28
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    3aec:	movs	r4, #0
    3aee:	ldr	r0, [pc, #56]	; (3b28 <_GLOBAL__sub_I_SD+0x48>)
    3af0:	ldr	r7, [pc, #56]	; (3b2c <_GLOBAL__sub_I_SD+0x4c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    3af2:	ldr	r6, [pc, #60]	; (3b30 <_GLOBAL__sub_I_SD+0x50>)
    3af4:	strb.w	r5, [r3, #1195]	; 0x4ab
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    3af8:	strb.w	r4, [r3, #1172]	; 0x494
    3afc:	strb.w	r4, [r3, #1198]	; 0x4ae
    3b00:	str	r0, [r3, #0]
    3b02:	str.w	r7, [r3, #1176]	; 0x498
    3b06:	str.w	r6, [r3, #1184]	; 0x4a0
    3b0a:	str.w	r4, [r3, #1148]	; 0x47c
    3b0e:	str.w	r4, [r3, #1152]	; 0x480
    3b12:	ldr	r2, [pc, #32]	; (3b34 <_GLOBAL__sub_I_SD+0x54>)
    3b14:	ldr	r1, [pc, #32]	; (3b38 <_GLOBAL__sub_I_SD+0x58>)
    3b16:	mov	r0, r3
    3b18:	pop	{r4, r5, r6, r7}
    3b1a:	b.w	ae64 <__aeabi_atexit>
    3b1e:	nop
    3b20:	.word	0x1fff14e0
    3b24:	.word	0x00010000
    3b28:	.word	0x0000fe88
    3b2c:	.word	0x0000ffa8
    3b30:	.word	0x38011001
    3b34:	.word	0x1fff0970
    3b38:	.word	0x000038c1

00003b3c <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    3b3c:	push	{r3, r4, r5, lr}
    3b3e:	movs	r1, #10
    3b40:	mov	r5, r0
    3b42:	ldr	r0, [pc, #40]	; (3b6c <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3b44:	ldr	r4, [pc, #40]	; (3b70 <dbgPrint(unsigned short)+0x34>)
    3b46:	bl	96a8 <usb_serial_write>
    3b4a:	movs	r1, #13
    3b4c:	ldr	r0, [pc, #36]	; (3b74 <dbgPrint(unsigned short)+0x38>)
    3b4e:	bl	96a8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3b52:	movs	r0, #46	; 0x2e
    3b54:	bl	97b0 <usb_serial_putchar>
    3b58:	mov	r1, r5
    3b5a:	mov	r0, r4
    3b5c:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3b60:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    3b62:	ldmia.w	sp!, {r3, r4, r5, lr}
    3b66:	b.w	abc4 <Print::println()>
    3b6a:	nop
    3b6c:	.word	0x0000fe9c
    3b70:	.word	0x1fff098c
    3b74:	.word	0x0000fea8

00003b78 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3b78:	push	{r4, lr}
    3b7a:	mov	r4, r0
  bool rtn = sync();
    3b7c:	bl	50b8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3b80:	movs	r3, #0
    3b82:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3b86:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3b8a:	pop	{r4, pc}

00003b8c <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3b8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3b90:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3b94:	mov	r9, r0
    3b96:	mov	r8, r1
    3b98:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3b9a:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3b9e:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    3ba0:	ldrb.w	r3, [r9, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3ba4:	add	r6, sp, #4
    3ba6:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    3baa:	cmp	r3, #0
    3bac:	beq.n	3c24 <ExFatFile::getName(char*, unsigned int)+0x98>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3bae:	ldrb.w	r3, [r9, #48]	; 0x30
    3bb2:	cmp	r3, #1
    3bb4:	bls.n	3c46 <ExFatFile::getName(char*, unsigned int)+0xba>
    3bb6:	movs	r7, #1
    3bb8:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    3bba:	cmp	r7, #1
    3bbc:	ite	eq
    3bbe:	moveq	r2, #64	; 0x40
    3bc0:	movne	r2, #32
    3bc2:	mov	r1, r6
    3bc4:	ldr.w	r0, [r9, #32]
    3bc8:	bl	4a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3bcc:	cmp	r0, #1
    3bce:	bne.n	3c3e <ExFatFile::getName(char*, unsigned int)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    3bd0:	movs	r2, #0
    3bd2:	mov	r1, r6
    3bd4:	ldr.w	r0, [r9, #32]
    3bd8:	bl	49a0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3bdc:	cbz	r0, 3c36 <ExFatFile::getName(char*, unsigned int)+0xaa>
    3bde:	ldrb	r3, [r0, #0]
    3be0:	cmp	r3, #193	; 0xc1
    3be2:	bne.n	3c36 <ExFatFile::getName(char*, unsigned int)+0xaa>
    3be4:	add.w	r1, r0, #30
    3be8:	add.w	r2, r8, r4
    3bec:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    3bee:	adds	r4, #1
    3bf0:	cmp	r4, r5
    3bf2:	bcs.n	3c16 <ExFatFile::getName(char*, unsigned int)+0x8a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3bf4:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3bf8:	cmp	r3, #126	; 0x7e
    3bfa:	ite	ls
    3bfc:	uxtbls	r3, r3
    3bfe:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3c00:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3c02:	strb.w	r3, [r2], #1
    3c06:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3c08:	bne.n	3bee <ExFatFile::getName(char*, unsigned int)+0x62>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3c0a:	adds	r7, #1
    3c0c:	ldrb.w	r2, [r9, #48]	; 0x30
    3c10:	uxtb	r7, r7
    3c12:	cmp	r2, r7
    3c14:	bhi.n	3bba <ExFatFile::getName(char*, unsigned int)+0x2e>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3c16:	movs	r2, #0
  return n;
    3c18:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3c1a:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    3c1e:	add	sp, #20
    3c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
    3c24:	movs	r0, #81	; 0x51
    3c26:	bl	3b3c <dbgPrint(unsigned short)>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3c2a:	movs	r0, #0
    3c2c:	strb.w	r0, [r8]
  return 0;
}
    3c30:	add	sp, #20
    3c32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
    3c36:	movs	r0, #92	; 0x5c
    3c38:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    3c3c:	b.n	3c2a <ExFatFile::getName(char*, unsigned int)+0x9e>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
      DBG_FAIL_MACRO;
    3c3e:	movs	r0, #86	; 0x56
    3c40:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    3c44:	b.n	3c2a <ExFatFile::getName(char*, unsigned int)+0x9e>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3c46:	movs	r3, #0
    3c48:	b.n	3c16 <ExFatFile::getName(char*, unsigned int)+0x8a>
    3c4a:	nop

00003c4c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3c4c:	push	{r3, r4, r5, lr}
    3c4e:	mov	r5, r1
  if (isOpen()) {
    3c50:	ldrb.w	r1, [r0, #49]	; 0x31
    3c54:	cbnz	r1, 3c6e <ExFatFile::openRoot(ExFatVolume*)+0x22>
    3c56:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3c58:	movs	r2, #56	; 0x38
    3c5a:	bl	c29c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3c5e:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3c60:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3c62:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3c66:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3c6a:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    3c6c:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    3c6e:	mov.w	r0, #444	; 0x1bc
    3c72:	bl	3b3c <dbgPrint(unsigned short)>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3c76:	movs	r0, #0
    3c78:	pop	{r3, r4, r5, pc}
    3c7a:	nop

00003c7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3c7c:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    3c7e:	ldrb	r0, [r1, #0]
    3c80:	cmp	r0, #32
    3c82:	bne.n	3c8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3c84:	ldrb.w	r0, [r1, #1]!
    3c88:	cmp	r0, #32
    3c8a:	beq.n	3c84 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    3c8c:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    3c8e:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    3c90:	cmp	r0, #0
    3c92:	beq.n	3d38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    3c94:	cmp	r0, #47	; 0x2f
    3c96:	beq.n	3cf0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3c98:	cmp	r0, #92	; 0x5c
    3c9a:	beq.n	3cde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3c9c:	sub.w	r4, r0, #34	; 0x22
    3ca0:	uxtb	r4, r4
    3ca2:	cmp	r4, #29
    3ca4:	bls.n	3ce2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    3ca6:	ldr.w	lr, [pc, #148]	; 3d3c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    3caa:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3cac:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3cae:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3cb0:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3cb4:	mov	r7, r6
    3cb6:	beq.n	3cde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3cb8:	cmp	r5, #94	; 0x5e
    3cba:	bhi.n	3cde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3cbc:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3cc0:	sub.w	r5, r0, #34	; 0x22
    3cc4:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3cc6:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    3cc8:	cbz	r0, 3d2a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    3cca:	cmp	r0, #47	; 0x2f
    3ccc:	beq.n	3cf2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    3cce:	cmp	r0, #92	; 0x5c
    3cd0:	lsr.w	r7, lr, r5
    3cd4:	beq.n	3cde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3cd6:	cmp	r5, #29
    3cd8:	bhi.n	3cae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    3cda:	lsls	r5, r7, #31
    3cdc:	bpl.n	3cae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3cde:	movs	r0, #0
    3ce0:	pop	{r4, r5, r6, r7, pc}
    3ce2:	ldr	r5, [pc, #88]	; (3d3c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    3ce4:	lsr.w	r4, r5, r4
    3ce8:	lsls	r6, r4, #31
    3cea:	bpl.n	3ca6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    3cec:	movs	r0, #0
    3cee:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3cf0:	movs	r4, #0
    3cf2:	adds	r7, r1, r4
    3cf4:	mov	r6, r7
    3cf6:	mov	r5, r4
    3cf8:	movs	r0, #47	; 0x2f
    3cfa:	b.n	3d02 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    3cfc:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3d00:	adds	r5, #1
    3d02:	cmp	r0, #32
    3d04:	beq.n	3cfc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    3d06:	cmp	r0, #47	; 0x2f
    3d08:	beq.n	3cfc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    3d0a:	add	r1, r5
    3d0c:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    3d0e:	cbz	r4, 3d22 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    3d10:	mov	r1, r7
    c = path[len - 1];
    3d12:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    3d16:	cmp	r3, #46	; 0x2e
    3d18:	beq.n	3d1e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    3d1a:	cmp	r3, #32
    3d1c:	bne.n	3d30 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3d1e:	subs	r4, #1
    3d20:	bne.n	3d12 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    3d22:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    3d24:	str	r0, [r2, #0]
  return true;
    3d26:	movs	r0, #1
    3d28:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3d2a:	str	r7, [r3, #0]
    3d2c:	adds	r7, r1, r4
    3d2e:	b.n	3d10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    3d30:	cmp	r4, #255	; 0xff
    3d32:	ble.n	3d22 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3d34:	movs	r0, #0
    3d36:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3d38:	str	r1, [r3, #0]
    3d3a:	b.n	3d24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    3d3c:	.word	0x35000101

00003d40 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3d40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d44:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3d48:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3d4a:	sub	sp, #12
    3d4c:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3d4e:	bpl.w	3f1a <ExFatFile::read(void*, unsigned int)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3d52:	lsls	r0, r3, #25
    3d54:	mov	r5, r1
    3d56:	mov	r6, r2
    3d58:	bpl.w	3ea2 <ExFatFile::read(void*, unsigned int)+0x162>
    if ((m_curPosition + count) > m_validLength) {
    3d5c:	ldrd	r0, r1, [r4]
    3d60:	ldrd	r2, r3, [r4, #16]
    3d64:	adds.w	r8, r0, r6
    3d68:	adc.w	r9, r1, #0
    3d6c:	cmp	r3, r9
    3d6e:	it	eq
    3d70:	cmpeq	r2, r8
    3d72:	bcc.w	3eae <ExFatFile::read(void*, unsigned int)+0x16e>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3d76:	cmp	r6, #0
    3d78:	beq.w	3eb2 <ExFatFile::read(void*, unsigned int)+0x172>
    3d7c:	mov	r9, r4
    3d7e:	ldrd	r2, r3, [r9], #24
    3d82:	mov	r8, r6
    3d84:	b.n	3e26 <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    3d86:	orrs	r3, r2
    3d88:	bne.n	3e64 <ExFatFile::read(void*, unsigned int)+0x124>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3d8a:	ldrb.w	r3, [r4, #49]	; 0x31
    3d8e:	lsls	r2, r3, #25
    3d90:	ite	mi
    3d92:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    3d96:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    3d98:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3d9a:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3d9e:	ldr.w	r2, [r0, #1060]	; 0x424
    3da2:	subs	r1, #2
    3da4:	lsrs	r7, r7, #9
    3da6:	lsl.w	lr, r1, ip
    3daa:	adds	r1, r7, r2
    3dac:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    3dae:	cmp.w	sl, #0
    3db2:	bne.n	3e3a <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3db4:	cmp.w	r8, #512	; 0x200
    3db8:	bcc.n	3e3a <ExFatFile::read(void*, unsigned int)+0xfa>
    3dba:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    3dbe:	cmp	r1, r2
    3dc0:	beq.n	3e3a <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    3dc2:	cmp.w	r8, #1024	; 0x400
    3dc6:	bcc.n	3e72 <ExFatFile::read(void*, unsigned int)+0x132>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3dc8:	movs	r3, #1
    3dca:	lsl.w	ip, r3, ip
    3dce:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3dd2:	mov.w	r3, r8, lsr #9
    3dd6:	cmp	r7, r3
    3dd8:	it	cs
    3dda:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    3ddc:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3dde:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    3de2:	bhi.n	3dfc <ExFatFile::read(void*, unsigned int)+0xbc>
    3de4:	adds	r3, r7, r1
    3de6:	cmp	r3, r2
    3de8:	bls.n	3dfc <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    3dea:	add.w	r0, r0, #524	; 0x20c
    3dee:	str	r1, [sp, #4]
    3df0:	bl	4704 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    3df4:	cmp	r0, #0
    3df6:	beq.n	3ee8 <ExFatFile::read(void*, unsigned int)+0x1a8>
    3df8:	ldr	r0, [r4, #32]
    3dfa:	ldr	r1, [sp, #4]
    3dfc:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    3e00:	ldr	r2, [r0, #0]
    3e02:	mov	r3, r7
    3e04:	ldr	r7, [r2, #12]
    3e06:	mov	r2, r5
    3e08:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    3e0a:	cmp	r0, #0
    3e0c:	beq.n	3ede <ExFatFile::read(void*, unsigned int)+0x19e>
    3e0e:	mov	r0, fp
    3e10:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3e12:	ldrd	r2, r3, [r4]
    3e16:	adds	r2, r2, r0
    3e18:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3e1a:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3e1e:	add	r5, fp
    m_curPosition += n;
    3e20:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3e24:	beq.n	3eb2 <ExFatFile::read(void*, unsigned int)+0x172>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3e26:	ldr	r0, [r4, #32]
    3e28:	ldr.w	r7, [r0, #1072]	; 0x430
    3e2c:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3e2e:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    3e32:	cmp	r7, #0
    3e34:	beq.n	3d86 <ExFatFile::read(void*, unsigned int)+0x46>
    3e36:	ldr	r1, [r4, #24]
    3e38:	b.n	3d9a <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    3e3a:	add.w	r0, r0, #524	; 0x20c
    3e3e:	movs	r2, #0
    3e40:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    3e44:	cmp	r0, #0
    3e46:	beq.n	3ec0 <ExFatFile::read(void*, unsigned int)+0x180>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    3e48:	rsb	fp, sl, #512	; 0x200
    3e4c:	cmp	fp, r8
    3e4e:	it	cs
    3e50:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3e52:	add.w	r1, r0, sl
    3e56:	mov	r2, fp
    3e58:	mov	r0, r5
    3e5a:	bl	94a8 <memcpy>
    3e5e:	mov	r0, fp
    3e60:	movs	r1, #0
    3e62:	b.n	3e12 <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    3e64:	ldrb.w	r3, [r4, #51]	; 0x33
    3e68:	lsls	r3, r3, #25
    3e6a:	bpl.n	3e8c <ExFatFile::read(void*, unsigned int)+0x14c>
        m_curCluster++;
    3e6c:	ldr	r1, [r4, #24]
    3e6e:	adds	r1, #1
    3e70:	b.n	3d98 <ExFatFile::read(void*, unsigned int)+0x58>
    3e72:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    3e76:	ldr	r3, [r0, #0]
    3e78:	mov	r2, r5
    3e7a:	ldr	r3, [r3, #8]
    3e7c:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    3e7e:	cbz	r0, 3ef2 <ExFatFile::read(void*, unsigned int)+0x1b2>
    3e80:	mov.w	r0, #512	; 0x200
    3e84:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3e86:	mov.w	fp, #512	; 0x200
    3e8a:	b.n	3e12 <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3e8c:	mov	r2, r9
    3e8e:	ldr	r1, [r4, #24]
    3e90:	bl	49d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3e94:	sxtb	r0, r0
        if (fg < 0) {
    3e96:	cmp	r0, #0
    3e98:	blt.n	3efc <ExFatFile::read(void*, unsigned int)+0x1bc>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3e9a:	beq.n	3f06 <ExFatFile::read(void*, unsigned int)+0x1c6>
    3e9c:	ldr	r0, [r4, #32]
    3e9e:	ldr	r1, [r4, #24]
    3ea0:	b.n	3d9a <ExFatFile::read(void*, unsigned int)+0x5a>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3ea2:	ldrb.w	r3, [r4, #49]	; 0x31
    3ea6:	lsls	r1, r3, #28
    3ea8:	bmi.w	3d5c <ExFatFile::read(void*, unsigned int)+0x1c>
    3eac:	b.n	3d76 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3eae:	subs	r6, r2, r0
    3eb0:	b.n	3d76 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3eb2:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3eb6:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3eba:	add	sp, #12
    3ebc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
        DBG_FAIL_MACRO;
    3ec0:	movw	r0, #599	; 0x257
    3ec4:	bl	3b3c <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3ec8:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3ecc:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3ed0:	orr.w	r3, r3, #2
    3ed4:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    3ed8:	add	sp, #12
    3eda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    3ede:	mov.w	r0, #624	; 0x270
    3ee2:	bl	3b3c <dbgPrint(unsigned short)>
        goto fail;
    3ee6:	b.n	3ec8 <ExFatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
          DBG_FAIL_MACRO;
    3ee8:	movw	r0, #619	; 0x26b
    3eec:	bl	3b3c <dbgPrint(unsigned short)>
          goto fail;
    3ef0:	b.n	3ec8 <ExFatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    3ef2:	mov.w	r0, #632	; 0x278
    3ef6:	bl	3b3c <dbgPrint(unsigned short)>
        goto fail;
    3efa:	b.n	3ec8 <ExFatFile::read(void*, unsigned int)+0x188>
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
        if (fg < 0) {
          DBG_FAIL_MACRO;
    3efc:	movw	r0, #575	; 0x23f
    3f00:	bl	3b3c <dbgPrint(unsigned short)>
          goto fail;
    3f04:	b.n	3ec8 <ExFatFile::read(void*, unsigned int)+0x188>
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    3f06:	ldrb.w	r3, [r4, #49]	; 0x31
    3f0a:	tst.w	r3, #80	; 0x50
    3f0e:	bne.n	3eb6 <ExFatFile::read(void*, unsigned int)+0x176>
            break;
          }
          DBG_FAIL_MACRO;
    3f10:	movw	r0, #583	; 0x247
    3f14:	bl	3b3c <dbgPrint(unsigned short)>
          goto fail;
    3f18:	b.n	3ec8 <ExFatFile::read(void*, unsigned int)+0x188>
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    3f1a:	movw	r0, #555	; 0x22b
    3f1e:	bl	3b3c <dbgPrint(unsigned short)>
    goto fail;
    3f22:	b.n	3ec8 <ExFatFile::read(void*, unsigned int)+0x188>

00003f24 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    3f24:	push	{r4, r5, r6, r7, lr}
    3f26:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3f28:	movs	r2, #1
    3f2a:	add.w	r1, sp, #7
    3f2e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    3f30:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    3f34:	ldr	r5, [r0, #24]
    3f36:	bl	3d40 <ExFatFile::read(void*, unsigned int)>
    3f3a:	cmp	r0, #1
    3f3c:	it	eq
    3f3e:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3f42:	str	r5, [r4, #24]
    3f44:	it	ne
    3f46:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    3f4a:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3f4e:	add	sp, #12
    3f50:	pop	{r4, r5, r6, r7, pc}
    3f52:	nop

00003f54 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3f54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f58:	ldrb.w	ip, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3f5c:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3f5e:	sub	sp, #12
    3f60:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    3f62:	cmp.w	ip, #0
    3f66:	beq.n	403e <ExFatFile::seekSet(unsigned long long)+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3f68:	ldrd	r0, r1, [r0]
    3f6c:	cmp	r1, r3
    3f6e:	it	eq
    3f70:	cmpeq	r0, r2
    3f72:	mov	r6, r2
    3f74:	mov	r7, r3
    3f76:	beq.n	4058 <ExFatFile::seekSet(unsigned long long)+0x104>
    return true;
  }
  if (pos == 0) {
    3f78:	orrs.w	r3, r6, r7
    3f7c:	bne.n	3f8e <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    3f7e:	movs	r3, #0
    3f80:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    3f82:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3f84:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    3f88:	add	sp, #12
    3f8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3f8e:	tst.w	ip, #8
    3f92:	beq.n	3fa0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    if (pos > m_validLength) {
    3f94:	ldrd	r2, r3, [r4, #16]
    3f98:	cmp	r3, r7
    3f9a:	it	eq
    3f9c:	cmpeq	r2, r6
    3f9e:	bcc.n	4060 <ExFatFile::seekSet(unsigned long long)+0x10c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3fa0:	ldr	r3, [r4, #32]
    3fa2:	str	r3, [sp, #4]
    3fa4:	ldrb.w	lr, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    3fa8:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3fac:	add.w	lr, lr, #9
    3fb0:	uxtb.w	lr, lr
    3fb4:	adds.w	r2, r6, #4294967295
    3fb8:	adc.w	r3, r7, #4294967295
    3fbc:	rsb	r8, lr, #32
    3fc0:	lsl.w	fp, r3, r8
    3fc4:	lsr.w	r2, r2, lr
    3fc8:	orr.w	r2, r2, fp
    3fcc:	sub.w	fp, lr, #32
    3fd0:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    3fd4:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3fd8:	orr.w	r2, r2, r3
  if (isContiguous()) {
    3fdc:	bne.n	4050 <ExFatFile::seekSet(unsigned long long)+0xfc>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3fde:	adds.w	r9, r0, #4294967295
    3fe2:	adc.w	sl, r1, #4294967295
    3fe6:	lsr.w	lr, r9, lr
    3fea:	lsl.w	r8, sl, r8
    3fee:	orr.w	lr, lr, r8
    3ff2:	lsr.w	fp, sl, fp
    3ff6:	orr.w	lr, lr, fp
  if (nNew < nCur || m_curPosition == 0) {
    3ffa:	cmp	r2, lr
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3ffc:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3ffe:	bcc.n	4006 <ExFatFile::seekSet(unsigned long long)+0xb2>
    4000:	orrs.w	r3, r0, r1
    4004:	bne.n	406a <ExFatFile::seekSet(unsigned long long)+0x116>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4006:	tst.w	ip, #64	; 0x40
    400a:	itet	ne
    400c:	ldrne	r3, [sp, #4]
    400e:	ldreq	r3, [r4, #28]
    4010:	ldrne.w	r3, [r3, #1068]	; 0x42c
    4014:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4016:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4018:	add.w	r9, r4, #24
    401c:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    401e:	cmp.w	r8, #0
    4022:	beq.n	3f82 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4024:	ldr	r1, [r4, #24]
    4026:	ldr	r0, [r4, #32]
    4028:	bl	49d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    402c:	add.w	r8, r8, #4294967295
    4030:	cmp	r0, #0
    4032:	bne.n	401c <ExFatFile::seekSet(unsigned long long)+0xc8>
      DBG_FAIL_MACRO;
    4034:	mov.w	r0, #700	; 0x2bc
    4038:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    403c:	b.n	4046 <ExFatFile::seekSet(unsigned long long)+0xf2>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    403e:	movw	r0, #665	; 0x299
    4042:	bl	3b3c <dbgPrint(unsigned short)>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    4046:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    4048:	str	r5, [r4, #24]
  return false;
}
    404a:	add	sp, #12
    404c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    4050:	ldr	r3, [r4, #28]
    4052:	add	r2, r3
    4054:	str	r2, [r4, #24]
    goto done;
    4056:	b.n	3f82 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    4058:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    405a:	add	sp, #12
    405c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
      DBG_FAIL_MACRO;
    4060:	movw	r0, #679	; 0x2a7
    4064:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    4068:	b.n	4046 <ExFatFile::seekSet(unsigned long long)+0xf2>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    406a:	rsb	r2, lr, r2
    406e:	b.n	4016 <ExFatFile::seekSet(unsigned long long)+0xc2>

00004070 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4070:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4074:	mov	r5, r1
    4076:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4078:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    407c:	str	r2, [sp, #0]
    407e:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4080:	cbnz	r1, 408e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4082:	mov	fp, r3
    4084:	ldrb.w	r3, [r5, #49]	; 0x31
    4088:	tst.w	r3, #80	; 0x50
    408c:	bne.n	40a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34>
    DBG_FAIL_MACRO;
    408e:	movs	r0, #206	; 0xce
    4090:	bl	3b3c <dbgPrint(unsigned short)>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    4094:	movs	r0, #0
    4096:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
    409a:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
    409e:	add	sp, #76	; 0x4c
    40a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    40a4:	ldr	r3, [sp, #112]	; 0x70
    40a6:	and.w	r3, r3, #3
    40aa:	cmp	r3, #1
    40ac:	beq.w	42cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    40b0:	cmp	r3, #2
    40b2:	beq.n	40c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x52>
    40b4:	cmp	r3, #0
    40b6:	beq.w	42c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x258>
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;
    default:
      DBG_FAIL_MACRO;
    40ba:	movs	r0, #220	; 0xdc
    40bc:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    40c0:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    40c2:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    40c4:	ldr	r2, [sp, #112]	; 0x70
    40c6:	and.w	r2, r2, #8
    40ca:	orrs	r3, r2
    40cc:	str	r3, [sp, #4]
  if (name) {
    40ce:	ldr	r3, [sp, #0]
    40d0:	cmp	r3, #0
    40d2:	beq.w	42d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x268>
    nameHash = exFatHashName(name, nameLength, 0);
    40d6:	movs	r2, #0
    40d8:	mov	r0, r3
    40da:	mov	r1, fp
    40dc:	bl	4c04 <exFatHashName(char const*, unsigned int, unsigned short)>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    40e0:	movs	r2, #0
    40e2:	str	r0, [sp, #8]
    40e4:	movs	r3, #0
    40e6:	mov	r0, r5
    40e8:	bl	3f54 <ExFatFile::seekSet(unsigned long long)>
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    40ec:	ldr	r2, [pc, #708]	; (43b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x344>)
    40ee:	add.w	r3, fp, #14
    40f2:	smull	r1, r2, r2, r3
    40f6:	add	r2, r3
    40f8:	asrs	r3, r3, #31
    40fa:	rsb	r3, r3, r2, asr #3
    40fe:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    4100:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4104:	add.w	sl, r3, #2
    4108:	str	r3, [sp, #12]
    410a:	uxtb.w	sl, sl

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    410e:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    4110:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4112:	movs	r2, #32
    4114:	add	r1, sp, #40	; 0x28
    4116:	mov	r0, r5
    4118:	bl	3d40 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    411c:	cmp	r0, #0
    411e:	beq.n	419e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    4120:	cmp	r0, #32
    4122:	bne.w	42d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x260>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    4126:	ldrb.w	r3, [sp, #40]	; 0x28
    412a:	lsls	r2, r3, #24
    412c:	bmi.n	41fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
    412e:	cmp	r4, #0
    4130:	bne.n	41f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
    4132:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    4134:	ldr	r1, [r5, #24]
    4136:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4138:	subs	r2, #32
    413a:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    413c:	adds	r4, #1
    413e:	uxtb	r4, r4
      }
      if (!buf[0]) {
    4140:	cbz	r3, 419e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    4142:	cmp	r3, #192	; 0xc0
    4144:	beq.w	426c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
    4148:	cmp	r3, #193	; 0xc1
    414a:	beq.n	4214 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
    414c:	cmp	r3, #133	; 0x85
    414e:	bne.n	4112 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    4150:	movs	r2, #56	; 0x38
    4152:	movs	r1, #0
    4154:	mov	r0, r6
    4156:	bl	c29c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    415a:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    415e:	ldrb.w	r2, [sp, #41]	; 0x29
    4162:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    4166:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4168:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    416c:	it	pl
    416e:	orrpl.w	r2, r2, #8
    4172:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4176:	ldr	r3, [r5, #0]
    4178:	ldr	r1, [r5, #32]
    417a:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    417c:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    417e:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    4180:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4182:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    4184:	ldrb.w	r3, [r5, #51]	; 0x33
    4188:	ubfx	r3, r3, #6, #1
    418c:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4190:	movs	r2, #32
    4192:	add	r1, sp, #40	; 0x28
    4194:	mov	r0, r5
    4196:	bl	3d40 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    419a:	cmp	r0, #0
    419c:	bne.n	4120 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb0>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    419e:	ldr	r3, [sp, #112]	; 0x70
    41a0:	lsls	r1, r3, #22
    41a2:	bpl.w	42be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    41a6:	ldr	r3, [sp, #4]
    41a8:	lsls	r2, r3, #30
    41aa:	bpl.w	42be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    41ae:	ldr	r3, [sp, #0]
    41b0:	cmp	r3, #0
    41b2:	beq.w	42be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    41b6:	cmp	r4, sl
    41b8:	bcc.n	41d6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
    41ba:	b.n	42e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    41bc:	cmp	r0, #32
    41be:	bne.w	43aa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x33a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    41c2:	cbnz	r4, 41ce <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    41c4:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    41c6:	ldr	r1, [r5, #24]
    41c8:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    41ca:	subs	r2, #32
    41cc:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    41ce:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    41d0:	cmp	sl, r4
    41d2:	bls.w	42e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
    n = dir->read(buf, 32);
    41d6:	movs	r2, #32
    41d8:	add	r1, sp, #40	; 0x28
    41da:	mov	r0, r5
    41dc:	bl	3d40 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    41e0:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    41e2:	cmp	r0, #0
    41e4:	bne.n	41bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    41e6:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    41e8:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    41ea:	bl	5120 <ExFatFile::addDirCluster()>
    41ee:	cmp	r0, #0
    41f0:	beq.w	4406 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    41f4:	str	r7, [r5, #24]
      continue;
    41f6:	b.n	41d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    41f8:	cmp	r4, sl
    41fa:	bcs.n	4140 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    41fc:	b.n	413c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    41fe:	cmp.w	r9, #0
    4202:	bne.n	4142 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    4204:	cmp	r4, sl
    4206:	it	cc
    4208:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    420a:	cmp	r3, #133	; 0x85
    420c:	bne.n	4112 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        continue;
      }
      inSet = true;
    420e:	mov.w	r9, #1
    4212:	b.n	4150 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    4214:	rsb	r8, r7, fp
    4218:	uxtb.w	r8, r8
    421c:	cmp.w	r8, #15
    4220:	it	cs
    4222:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    4226:	mov	r3, r8
    4228:	mov	r2, r7
    422a:	ldr	r1, [sp, #0]
    422c:	add	r0, sp, #40	; 0x28
    422e:	bl	4c40 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    4232:	cmp	r0, #0
    4234:	beq.n	42ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23c>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    4236:	add	r7, r8
    4238:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    423a:	cmp	fp, r7
    423c:	bne.w	4112 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    4240:	ldr	r3, [sp, #112]	; 0x70
    4242:	lsls	r3, r3, #20
    4244:	bmi.n	42de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x26e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4246:	ldr	r3, [sp, #112]	; 0x70
    4248:	tst.w	r3, #17408	; 0x4400
    424c:	bne.w	43b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
    4250:	ldrb.w	r3, [r6, #51]	; 0x33
    4254:	lsls	r7, r3, #30
    4256:	bmi.w	43b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    425a:	ldr	r3, [sp, #112]	; 0x70
    425c:	lsls	r3, r3, #21
    425e:	bpl.w	43fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
      DBG_FAIL_MACRO;
    4262:	mov.w	r0, #334	; 0x14e
    4266:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    426a:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    426c:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4270:	ldr	r2, [sp, #4]
    4272:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4276:	lsls	r1, r3, #30
    4278:	bpl.n	4282 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x212>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    427a:	orr.w	r3, r2, #64	; 0x40
    427e:	strb.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4282:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4286:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    428a:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    428e:	ldr	r3, [sp, #60]	; 0x3c
    4290:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    4292:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4294:	strd	r0, r1, [r6, #8]
        if (!name) {
    4298:	cmp	r3, #0
    429a:	beq.n	4240 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    429c:	ldrb.w	r3, [sp, #43]	; 0x2b
    42a0:	cmp	r3, fp
    42a2:	beq.n	42b0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    42a4:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    42a8:	mov	r7, r9
    42aa:	b.n	4112 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    42ac:	mov	r9, r0
    42ae:	b.n	4112 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    42b0:	ldrh.w	r3, [sp, #44]	; 0x2c
    42b4:	ldr	r2, [sp, #8]
    42b6:	cmp	r3, r2
    42b8:	bne.n	42a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x234>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    42ba:	movs	r7, #0
    42bc:	b.n	4112 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    42be:	movw	r0, #355	; 0x163
    42c2:	bl	3b3c <dbgPrint(unsigned short)>
    goto fail;
    42c6:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    42c8:	movs	r3, #1
    42ca:	b.n	40c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    42cc:	movs	r3, #2
    42ce:	b.n	40c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    n = dir->read(buf, 32);
    if (n == 0) {
      goto create;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    42d0:	movs	r0, #236	; 0xec
    42d2:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    42d6:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    42d8:	ldr	r3, [sp, #0]
    42da:	str	r3, [sp, #8]
    42dc:	b.n	40ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x7c>
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    42de:	mov.w	r0, #320	; 0x140
    42e2:	bl	3b3c <dbgPrint(unsigned short)>
    goto fail;
    42e6:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    42e8:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    42ec:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    42ee:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    42f2:	movs	r1, #0
    42f4:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    42f6:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    42fa:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    42fe:	bl	c29c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4302:	ldr	r4, [sp, #12]
    4304:	ldr	r3, [r5, #32]
    4306:	str.w	fp, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    430a:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    430e:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    4312:	movs	r4, #8
    4314:	strb.w	r4, [r6, #49]	; 0x31
    4318:	add.w	r7, fp, #30
  m_dirPos = freePos;
    431c:	add.w	r4, r6, #36	; 0x24
    4320:	ldr.w	fp, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4324:	str	r3, [r6, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4326:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    432a:	stmia.w	r4, {r0, r1, r2}
    432e:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    4330:	movs	r5, #0
    4332:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    4334:	movs	r2, #1
    4336:	mov	r1, r8
    4338:	bl	49a0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    433c:	mov	r4, r0
    433e:	cmp	r0, #0
    4340:	beq.n	43f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
    4342:	ldrsb.w	r3, [r0]
    4346:	cmp	r3, #0
    4348:	blt.n	43f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    434a:	movs	r2, #32
    434c:	movs	r1, #0
    434e:	bl	c29c <memset>
    if (i == 0) {
    4352:	cmp	r5, #0
    4354:	beq.w	4466 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3f6>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    4358:	cmp	r5, #1
    435a:	beq.n	4446 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d6>
    435c:	rsb	r3, r5, r5, lsl #4
    4360:	cmp	r7, #15
    4362:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4366:	mov.w	r2, #193	; 0xc1
    436a:	mov	r1, r7
    436c:	it	cs
    436e:	movcs	r1, #15
    4370:	uxtb	r3, r3
    4372:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4374:	cbz	r1, 438c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    4376:	adds	r4, #2
    4378:	sxth	r1, r1
    437a:	add.w	r1, r4, r1, lsl #1
    437e:	add	r3, fp
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    4380:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4384:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4388:	cmp	r1, r4
    438a:	bne.n	4380 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    438c:	adds	r5, #1
    438e:	uxtb	r5, r5
    4390:	cmp	sl, r5
    4392:	bls.n	441a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3aa>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4394:	movs	r2, #32
    4396:	mov	r1, r8
    4398:	ldr	r0, [r6, #32]
    439a:	bl	4a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    439e:	cmp	r0, #1
    43a0:	bne.n	4410 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3a0>
    43a2:	subs	r7, #15
    43a4:	ldr	r0, [r6, #32]
    43a6:	uxtb	r7, r7
    43a8:	b.n	4334 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2c4>
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    43aa:	mov.w	r0, #370	; 0x172
    43ae:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    43b2:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    43b4:	.word	0x88888889
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    43b8:	ldrb.w	r3, [r6, #49]	; 0x31
    43bc:	tst.w	r3, #17
    43c0:	bne.n	43e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x378>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    43c2:	ldr	r3, [sp, #112]	; 0x70
    43c4:	lsls	r5, r3, #21
    43c6:	bpl.n	43fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    43c8:	ldrb.w	r3, [r6, #51]	; 0x33
    43cc:	lsls	r4, r3, #30
    43ce:	bpl.w	4262 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    43d2:	movs	r2, #0
    43d4:	movs	r3, #0
    43d6:	mov	r0, r6
    43d8:	bl	3f54 <ExFatFile::seekSet(unsigned long long)>
    43dc:	cbnz	r0, 443a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ca>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
    43de:	mov.w	r0, #338	; 0x152
    43e2:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    43e6:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
      DBG_FAIL_MACRO;
    43e8:	mov.w	r0, #326	; 0x146
    43ec:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    43f0:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    if (!cache || (cache[0] & 0x80)) {
      DBG_FAIL_MACRO;
    43f2:	mov.w	r0, #394	; 0x18a
    43f6:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    43fa:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    43fc:	ldr	r3, [sp, #112]	; 0x70
    43fe:	lsls	r0, r3, #17
    4400:	bmi.n	4422 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3b2>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    4402:	movs	r0, #1
    4404:	b.n	409e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
        DBG_FAIL_MACRO;
    4406:	movw	r0, #363	; 0x16b
    440a:	bl	3b3c <dbgPrint(unsigned short)>
        goto fail;
    440e:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
    4410:	mov.w	r0, #388	; 0x184
    4414:	bl	3b3c <dbgPrint(unsigned short)>
        goto fail;
    4418:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    441a:	mov	r0, r6
    441c:	bl	50b8 <ExFatFile::sync()>
    4420:	b.n	409e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4422:	ldrd	r2, r3, [r6, #16]
    4426:	mov	r0, r6
    4428:	bl	3f54 <ExFatFile::seekSet(unsigned long long)>
    442c:	cmp	r0, #0
    442e:	bne.n	4402 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
    DBG_FAIL_MACRO;
    4430:	mov.w	r0, #342	; 0x156
    4434:	bl	3b3c <dbgPrint(unsigned short)>
    goto fail;
    4438:	b.n	4094 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    443a:	mov	r0, r6
    443c:	bl	5488 <ExFatFile::truncate()>
    4440:	cmp	r0, #0
    4442:	beq.n	43de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36e>
    4444:	b.n	4402 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4446:	movs	r3, #192	; 0xc0
    4448:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    444a:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    444c:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    444e:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4452:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4454:	strb.w	r3, [r6, #51]	; 0x33

      dirStream->nameLength = nameLength;
    4458:	ldrb.w	r3, [sp, #12]
    445c:	strb	r3, [r4, #3]
    445e:	ldrh.w	r3, [sp, #8]
    4462:	strh	r3, [r4, #4]
    4464:	b.n	438c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    4466:	movs	r3, #133	; 0x85
    4468:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    446a:	ldr	r3, [pc, #48]	; (449c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x42c>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    446c:	strb.w	r9, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    4470:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    4474:	ldr	r3, [r3, #0]
    4476:	cmp	r3, #0
    4478:	beq.n	438c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    447a:	add.w	r2, sp, #23
    447e:	add.w	r1, sp, #26
    4482:	add	r0, sp, #24
    4484:	blx	r3
        dirFile->createTimeMs = ms10;
    4486:	ldrb.w	r1, [sp, #23]
    448a:	ldrh.w	r2, [sp, #26]
    448e:	ldrh.w	r3, [sp, #24]
    4492:	strb	r1, [r4, #20]
    4494:	strh	r2, [r4, #8]
    4496:	strh	r3, [r4, #10]
    4498:	b.n	438c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    449a:	nop
    449c:	.word	0x1fff1990

000044a0 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    44a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44a4:	mov	r6, r0
    44a6:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    44a8:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    44ac:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    44ae:	movs	r0, #0
    44b0:	strb.w	r0, [sp, #73]	; 0x49
    44b4:	strb.w	r0, [sp, #74]	; 0x4a
    44b8:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    44bc:	cmp	r4, #0
    44be:	bne.n	455c <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    44c0:	mov	r9, r3
    44c2:	ldrb.w	r3, [r1, #49]	; 0x31
    44c6:	tst.w	r3, #80	; 0x50
    44ca:	mov	r5, r1
    44cc:	beq.n	455c <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    44ce:	ldrb	r3, [r2, #0]
    44d0:	cmp	r3, #47	; 0x2f
    44d2:	mov	r1, r2
    44d4:	beq.n	453e <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    44d6:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    44da:	add	r3, sp, #12
    44dc:	add	r2, sp, #16
    44de:	mov	r0, r6
    44e0:	bl	3c7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    44e4:	mov	r4, r0
    44e6:	cmp	r0, #0
    44e8:	beq.n	456c <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    44ea:	ldr	r3, [sp, #12]
    44ec:	ldrb	r3, [r3, #0]
    44ee:	cmp	r3, #0
    44f0:	beq.n	457a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    44f2:	ldrb.w	r3, [sp, #16]
    44f6:	ldr	r2, [sp, #20]
    44f8:	str.w	r8, [sp]
    44fc:	mov	r1, r5
    44fe:	mov	r0, r6
    4500:	bl	4070 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4504:	mov	r4, r0
    4506:	cmp	r0, #0
    4508:	beq.n	4596 <ExFatFile::open(ExFatFile*, char const*, int)+0xf6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    450a:	mov	r4, r6
    450c:	add	r7, sp, #24
    450e:	add.w	lr, r6, #48	; 0x30
    4512:	ldr	r0, [r4, #0]
    4514:	ldr	r1, [r4, #4]
    4516:	ldr	r2, [r4, #8]
    4518:	ldr	r3, [r4, #12]
    451a:	mov	r5, r7
    451c:	stmia	r5!, {r0, r1, r2, r3}
    451e:	adds	r4, #16
    4520:	cmp	r4, lr
    4522:	mov	r7, r5
    4524:	bne.n	4512 <ExFatFile::open(ExFatFile*, char const*, int)+0x72>
    4526:	ldr	r0, [r4, #0]
    4528:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    452a:	mov	r0, r6
    452c:	bl	50b8 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    4530:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    4532:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    4536:	strb.w	r8, [r6, #51]	; 0x33
    453a:	ldr	r1, [sp, #12]
    453c:	b.n	44da <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    453e:	adds	r1, #1
    4540:	str	r1, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4542:	ldrb	r3, [r1, #0]
    4544:	cmp	r3, #47	; 0x2f
    4546:	beq.n	453e <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4548:	ldr	r1, [r5, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    454a:	cbz	r3, 45a4 <ExFatFile::open(ExFatFile*, char const*, int)+0x104>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    454c:	add	r0, sp, #24
    454e:	bl	3c4c <ExFatFile::openRoot(ExFatVolume*)>
    4552:	mov	r4, r0
    4554:	cbz	r0, 45ae <ExFatFile::open(ExFatFile*, char const*, int)+0x10e>
    4556:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    4558:	add	r5, sp, #24
    455a:	b.n	44d6 <ExFatFile::open(ExFatFile*, char const*, int)+0x36>
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    455c:	movs	r0, #125	; 0x7d
    455e:	bl	3b3c <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    4562:	movs	r4, #0
}
    4564:	mov	r0, r4
    4566:	add	sp, #84	; 0x54
    4568:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    456c:	movs	r0, #143	; 0x8f
    456e:	bl	3b3c <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    4572:	mov	r0, r4
    4574:	add	sp, #84	; 0x54
    4576:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    457a:	ldrb.w	r3, [sp, #16]
    457e:	ldr	r2, [sp, #20]
    4580:	str.w	r9, [sp]
    4584:	mov	r1, r5
    4586:	mov	r0, r6
    4588:	bl	4070 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    458c:	mov	r4, r0
    458e:	mov	r0, r4
    4590:	add	sp, #84	; 0x54
    4592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    4596:	movs	r0, #150	; 0x96
    4598:	bl	3b3c <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    459c:	mov	r0, r4
    459e:	add	sp, #84	; 0x54
    45a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    45a4:	mov	r0, r6
    45a6:	bl	3c4c <ExFatFile::openRoot(ExFatVolume*)>
    45aa:	mov	r4, r0
    45ac:	b.n	4564 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    45ae:	movs	r0, #136	; 0x88
    45b0:	bl	3b3c <dbgPrint(unsigned short)>
      goto fail;
    45b4:	b.n	4564 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    45b6:	nop

000045b8 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    45b8:	cbz	r1, 45c2 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    45ba:	add.w	r1, r1, #1088	; 0x440
    45be:	b.w	44a0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    45c2:	mov	r0, r1
    45c4:	bx	lr
    45c6:	nop

000045c8 <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    45c8:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    45ca:	ldrb.w	r3, [r0, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    45ce:	sub	sp, #12
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    45d0:	cbnz	r3, 45dc <ExFatFile::openNext(ExFatFile*, int)+0x14>
    45d2:	ldrb.w	r5, [r1, #49]	; 0x31
    45d6:	tst.w	r5, #80	; 0x50
    45da:	bne.n	45e8 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    DBG_FAIL_MACRO;
    45dc:	movs	r0, #176	; 0xb0
    45de:	bl	3b3c <dbgPrint(unsigned short)>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    45e2:	movs	r0, #0
}
    45e4:	add	sp, #12
    45e6:	pop	{r4, r5, pc}
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    45e8:	ldrd	r4, r5, [r1]
    45ec:	movs	r5, #0
    45ee:	and.w	r4, r4, #31
    45f2:	orrs	r4, r5
    45f4:	bne.n	45dc <ExFatFile::openNext(ExFatFile*, int)+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    45f6:	str	r2, [sp, #0]
    45f8:	mov	r2, r3
    45fa:	bl	4070 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    45fe:	add	sp, #12
    4600:	pop	{r4, r5, pc}
    4602:	nop

00004604 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4604:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4606:	movs	r1, #10
    4608:	mov	r5, r0
    460a:	ldr	r0, [pc, #40]	; (4634 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    460c:	ldr	r4, [pc, #40]	; (4638 <dbgPrint(unsigned short)+0x34>)
    460e:	bl	96a8 <usb_serial_write>
    4612:	movs	r1, #18
    4614:	ldr	r0, [pc, #36]	; (463c <dbgPrint(unsigned short)+0x38>)
    4616:	bl	96a8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    461a:	movs	r0, #46	; 0x2e
    461c:	bl	97b0 <usb_serial_putchar>
    4620:	mov	r1, r5
    4622:	mov	r0, r4
    4624:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4628:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    462a:	ldmia.w	sp!, {r3, r4, r5, lr}
    462e:	b.w	abc4 <Print::println()>
    4632:	nop
    4634:	.word	0x0000fe9c
    4638:	.word	0x1fff098c
    463c:	.word	0x0000feb8

00004640 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4640:	push	{r3, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4642:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4646:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4648:	ldr	r0, [r0, #4]
    464a:	ldr	r1, [r4, #8]
    464c:	ldr	r3, [r0, #0]
    464e:	ldr	r3, [r3, #24]
    4650:	blx	r3
    4652:	mov	r5, r0
    4654:	cbz	r0, 4662 <FsCache::sync() [clone .part.2]+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4656:	ldrb	r3, [r4, #0]
    4658:	bic.w	r3, r3, #1
    465c:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    465e:	mov	r0, r5
    4660:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
    4662:	movs	r0, #64	; 0x40
    4664:	bl	4604 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    4668:	mov	r0, r5
    466a:	pop	{r3, r4, r5, pc}

0000466c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    466c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    466e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4672:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    4674:	str	r3, [r0, #8]
    4676:	bx	lr

00004678 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4678:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_blockDev) {
    467c:	ldr	r4, [r0, #4]
    467e:	cmp	r4, #0
    4680:	beq.n	46f8 <FsCache::get(unsigned long, unsigned char)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4682:	ldr	r3, [r0, #8]
    4684:	cmp	r3, r1
    4686:	mov	r6, r0
    4688:	mov	r8, r1
    468a:	mov	r7, r2
    468c:	beq.n	46b0 <FsCache::get(unsigned long, unsigned char)+0x38>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    468e:	ldrb	r3, [r0, #0]
    4690:	lsls	r2, r3, #31
    4692:	bmi.n	46c0 <FsCache::get(unsigned long, unsigned char)+0x48>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4694:	lsls	r3, r7, #30
    4696:	bpl.n	46d6 <FsCache::get(unsigned long, unsigned char)+0x5e>
    4698:	add.w	r5, r6, #12
    469c:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    469e:	and.w	r7, r7, #1
    46a2:	orrs	r7, r3
    46a4:	strb	r7, [r6, #0]
    46a6:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    46a8:	str.w	r8, [r6, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    46ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46b0:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    46b4:	and.w	r7, r7, #1
    46b8:	orrs	r7, r3
    46ba:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    46bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46c0:	bl	4640 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    46c4:	mov	r4, r0
    46c6:	cmp	r0, #0
    46c8:	bne.n	4694 <FsCache::get(unsigned long, unsigned char)+0x1c>
      DBG_FAIL_MACRO;
    46ca:	movs	r0, #42	; 0x2a
    46cc:	bl	4604 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    46d0:	mov	r0, r4
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    46d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    46d6:	ldr	r0, [r6, #4]
    46d8:	ldr	r3, [r0, #0]
    46da:	add.w	r5, r6, #12
    46de:	ldr	r3, [r3, #8]
    46e0:	mov	r2, r5
    46e2:	mov	r1, r8
    46e4:	blx	r3
    46e6:	mov	r4, r0
    46e8:	cmp	r0, #0
    46ea:	bne.n	469c <FsCache::get(unsigned long, unsigned char)+0x24>
        DBG_FAIL_MACRO;
    46ec:	movs	r0, #47	; 0x2f
    46ee:	bl	4604 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    46f2:	mov	r0, r4
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
    46f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    46f8:	movs	r0, #37	; 0x25
    46fa:	bl	4604 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    46fe:	mov	r0, r4
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
    4700:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004704 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4704:	ldrb	r3, [r0, #0]
    4706:	lsls	r3, r3, #31
    4708:	bmi.n	470e <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    470a:	movs	r0, #1
    470c:	bx	lr
    470e:	b.w	4640 <FsCache::sync() [clone .part.2]>
    4712:	nop

00004714 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4714:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4718:	mov	r8, r0
    471a:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    471c:	mov	fp, r1
    471e:	cmp	r1, #0
    4720:	beq.n	47ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    4722:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4724:	ldr.w	r3, [r8, #1064]	; 0x428
    4728:	cmp	r7, r3
    472a:	bcs.n	47a4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    472c:	and.w	r5, r7, #7
    4730:	movs	r3, #1
    4732:	lsl.w	r5, r3, r5
    4736:	uxtb	r5, r5
    4738:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    473c:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    473e:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4740:	ldr.w	r1, [r8, #1060]	; 0x424
    4744:	movs	r2, #0
    4746:	add.w	r1, r1, r4, lsr #12
    474a:	mov	r0, r8
    474c:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4750:	cbz	r0, 4784 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    4752:	ldrb.w	r1, [r0, sl]
    4756:	b.n	476e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4758:	cmp	r2, r9
    475a:	beq.n	47b2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    475c:	cmp	r7, r4
    475e:	beq.n	4782 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4760:	ldr.w	r2, [r8, #1064]	; 0x428
    4764:	cmp	r4, r2
    4766:	bcs.n	4798 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4768:	ands.w	r5, r3, #255	; 0xff
    476c:	beq.n	4788 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    476e:	adds	r4, #1
        if (!(mask & cache[i])) {
    4770:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4772:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4776:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    477a:	beq.n	4758 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    477c:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    477e:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4780:	bne.n	4760 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    4782:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4784:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4788:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    478c:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4790:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4794:	bne.n	4752 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    4796:	b.n	479c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4798:	movs	r6, #0
    479a:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    479c:	mov.w	sl, #0
    47a0:	movs	r5, #1
    47a2:	b.n	4740 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    47a4:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    47a6:	mov	sl, r7
    47a8:	movs	r5, #1
    47aa:	b.n	473c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    47ac:	ldr.w	r7, [r0, #1048]	; 0x418
    47b0:	b.n	4724 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    47b2:	cmp.w	fp, #0
    47b6:	bne.n	47c2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    47b8:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    47bc:	it	eq
    47be:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    47c2:	adds	r0, r6, #2
    47c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000047c8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    47c8:	push	{r3, r4, r5, r6, r7, lr}
    47ca:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    47cc:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    47ce:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    47d2:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    47d6:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    47da:	str	r1, [r0, #4]
    47dc:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    47e0:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    47e2:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    47e4:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    47e8:	strb	r3, [r4, #0]
    47ea:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    47ee:	str	r6, [r4, #8]
    47f0:	str.w	r6, [r4, #532]	; 0x214
    47f4:	mov	r2, r3
    47f6:	mov	r1, r3
    47f8:	bl	4678 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    47fc:	cmp	r5, #4
    47fe:	bhi.n	486a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    4800:	mov	r6, r0
    4802:	cbz	r0, 486a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4804:	cbnz	r5, 4828 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4806:	movs	r2, #5
    4808:	ldr	r1, [pc, #200]	; (48d4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x10c>)
    480a:	adds	r0, r6, #3
    480c:	bl	c91c <strncmp>
    4810:	mov	r7, r0
    4812:	cmp	r0, #0
    4814:	bne.n	48c8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4816:	ldrb.w	r3, [r6, #108]	; 0x6c
    481a:	cmp	r3, #9
    481c:	beq.n	4874 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
    DBG_FAIL_MACRO;
    481e:	movs	r0, #112	; 0x70
    4820:	bl	4604 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4824:	mov	r0, r7
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
    4826:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4828:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    482a:	add.w	r3, r0, r3, lsl #4
    482e:	ldrb.w	r2, [r3, #446]	; 0x1be
    4832:	ands.w	r2, r2, #127	; 0x7f
    4836:	beq.n	4842 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x7a>
      DBG_FAIL_MACRO;
    4838:	movs	r0, #95	; 0x5f
    483a:	bl	4604 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    483e:	movs	r0, #0
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    4840:	pop	{r3, r4, r5, r6, r7, pc}
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4842:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4846:	cmp	r3, #0
    4848:	beq.n	4838 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x70>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    484a:	add.w	r5, r0, r5, lsl #4
    484e:	mov	r0, r7
    4850:	ldr.w	r5, [r5, #438]	; 0x1b6
    4854:	mov	r1, r5
    4856:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    485a:	mov	r6, r0
    485c:	cmp	r0, #0
    485e:	bne.n	4806 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
      DBG_FAIL_MACRO;
    4860:	movs	r0, #101	; 0x65
    4862:	bl	4604 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4866:	mov	r0, r6
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4868:	pop	{r3, r4, r5, r6, r7, pc}
  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    486a:	movs	r0, #88	; 0x58
    486c:	bl	4604 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4870:	movs	r0, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    goto fail;
    4872:	pop	{r3, r4, r5, r6, r7, pc}
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4874:	ldr	r3, [r6, #80]	; 0x50
    4876:	add	r3, r5
    4878:	str.w	r3, [r4, #1052]	; 0x41c
    487c:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    487e:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4882:	ldr	r3, [r6, #88]	; 0x58
    4884:	add	r5, r3
    4886:	str.w	r5, [r4, #1060]	; 0x424
    488a:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    488c:	str.w	r3, [r4, #1064]	; 0x428
    4890:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4892:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4896:	ldrb.w	r3, [r6, #109]	; 0x6d
    489a:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    489e:	movs	r6, #1
    48a0:	adds	r3, #9
    48a2:	lsl.w	r3, r6, r3
  m_clusterMask = m_bytesPerCluster - 1;
    48a6:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    48a8:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    48ac:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48ae:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    48b2:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    48b6:	mov	r0, r4
    48b8:	mov	r2, r6
    48ba:	bl	4714 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    48be:	movs	r3, #64	; 0x40
    48c0:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    48c4:	mov	r0, r6

 fail:
  return false;
}
    48c6:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    48c8:	movs	r0, #107	; 0x6b
    48ca:	bl	4604 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    48ce:	movs	r0, #0
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    goto fail;
    48d0:	pop	{r3, r4, r5, r6, r7, pc}
    48d2:	nop
    48d4:	.word	0x0000fecc

000048d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    48d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    48dc:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    48de:	mov	r9, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    48e0:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    48e4:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    48e6:	adds	r2, r1, r2
    48e8:	cmp	r2, r0
    48ea:	bhi.n	4988 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb0>
    48ec:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    48ee:	ldr.w	r3, [r9, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    48f2:	cmp.w	sl, #0
    48f6:	bne.n	4962 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8a>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    48f8:	cmp	r1, r3
      m_bitmapStart = start;
    48fa:	it	cc
    48fc:	strcc.w	r1, [r9, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4900:	and.w	r4, r1, #7
    4904:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4906:	ldr.w	r3, [r9, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    490a:	lsl.w	r4, r2, r4
    490e:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4910:	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    4914:	ubfx	fp, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4918:	movs	r2, #1
    491a:	mov	r1, r8
    491c:	mov	r0, r9
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    491e:	add	r8, r2
    4920:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4924:	mov	r6, r0
    4926:	cbz	r0, 4994 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbc>
    4928:	add.w	r7, r0, fp
    492c:	add.w	r3, r0, #512	; 0x200
    4930:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4934:	tst	r2, r4
    4936:	ite	ne
    4938:	movne	r6, #1
    493a:	moveq	r6, #0
    493c:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    493e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4942:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4946:	beq.n	4976 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9e>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4948:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    494a:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    494e:	beq.n	4982 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4950:	ands.w	r4, r4, #255	; 0xff
    4954:	bne.n	4934 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5c>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4956:	cmp	r3, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4958:	mov	fp, r4
    495a:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    495e:	bne.n	4930 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    4960:	b.n	4918 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4962:	cmp	r1, r3
    4964:	bhi.n	4900 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4966:	cmp	r2, r3
    4968:	bls.n	4900 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    496a:	cmp	r2, r0
    496c:	it	cs
    496e:	movcs	r2, #0
    4970:	str.w	r2, [r9, #1048]	; 0x418
    4974:	b.n	4900 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
    4976:	movs	r0, #216	; 0xd8
    4978:	bl	4604 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    497c:	movs	r0, #0
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
    497e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4982:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4984:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    4988:	movs	r0, #191	; 0xbf
    498a:	bl	4604 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    498e:	movs	r0, #0
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
    4990:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4994:	movs	r0, #210	; 0xd2
    4996:	bl	4604 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    499a:	mov	r0, r6
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    499c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000049a0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    49a0:	push	{r3, r4, r5, r6, r7, lr}
    49a2:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    49a4:	ldmia.w	r6, {r3, r5}
    49a8:	ldr.w	r1, [r0, #1072]	; 0x430
    49ac:	ldr.w	r4, [r0, #1060]	; 0x424
    49b0:	ldrb.w	r7, [r0, #1085]	; 0x43d
    49b4:	ands	r1, r5
    49b6:	subs	r3, #2
    49b8:	add.w	r1, r4, r1, lsr #9
    49bc:	lsls	r3, r7
    49be:	add	r1, r3
    49c0:	add.w	r0, r0, #524	; 0x20c
    49c4:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    49c8:	cbz	r0, 49d2 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    49ca:	ldr	r3, [r6, #4]
    49cc:	ubfx	r3, r3, #0, #9
    49d0:	add	r0, r3
}
    49d2:	pop	{r3, r4, r5, r6, r7, pc}

000049d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    49d4:	push	{r3, r4, r5, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    49d6:	ldr.w	r3, [r0, #1064]	; 0x428
    49da:	adds	r3, #1
    49dc:	cmp	r3, r1
    49de:	bcs.n	49ec <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x18>
    DBG_FAIL_MACRO;
    49e0:	mov.w	r0, #276	; 0x114
    49e4:	bl	4604 <dbgPrint(unsigned short)>
    return -1;
    49e8:	movs	r0, #255	; 0xff
    49ea:	pop	{r3, r4, r5, pc}
    49ec:	mov	r4, r1
    49ee:	ldr.w	r1, [r0, #1052]	; 0x41c
    49f2:	mov	r5, r2
    49f4:	add.w	r0, r0, #524	; 0x20c
    49f8:	add.w	r1, r1, r4, lsr #7
    49fc:	movs	r2, #0
    49fe:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4a02:	cbz	r0, 4a16 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    4a04:	lsls	r4, r4, #2
    4a06:	ubfx	r4, r4, #0, #9
    4a0a:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4a0c:	adds	r2, r3, #1
    4a0e:	beq.n	4a1a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x46>
    return 0;
  }
  *value = next;
    4a10:	str	r3, [r5, #0]
  return 1;
    4a12:	movs	r0, #1
    4a14:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    4a16:	movs	r0, #255	; 0xff
    4a18:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4a1a:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    4a1c:	pop	{r3, r4, r5, pc}
    4a1e:	nop

00004a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4a20:	push	{r4, r5, r6, lr}
    4a22:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4a24:	ldr	r1, [r1, #4]
    4a26:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4a2a:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4a2c:	adds	r0, r1, r2
    4a2e:	str	r0, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4a30:	ldrb.w	r4, [r6, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4a34:	ands	r3, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4a36:	adds	r4, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4a38:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4a3a:	uxtb	r4, r4
    4a3c:	lsr.w	r4, r2, r4
  while (tmp--) {
    4a40:	cbz	r4, 4a52 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4a42:	ldrb	r3, [r5, #8]
    4a44:	cbz	r3, 4a56 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4a46:	ldr	r3, [r5, #0]
    4a48:	adds	r3, #1
    4a4a:	str	r3, [r5, #0]
    4a4c:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4a4e:	cmp	r4, #0
    4a50:	bne.n	4a42 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4a52:	movs	r0, #1
}
    4a54:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4a56:	mov	r2, r5
    4a58:	ldr	r1, [r5, #0]
    4a5a:	mov	r0, r6
    4a5c:	bl	49d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4a60:	sxtb	r0, r0
      if (status != 1) {
    4a62:	cmp	r0, #1
    4a64:	beq.n	4a4c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4a66:	pop	{r4, r5, r6, pc}

00004a68 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4a68:	cmp	r1, #1
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4a6a:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4a6c:	bls.n	4a7a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    4a6e:	ldr.w	r3, [r0, #1064]	; 0x428
    4a72:	adds	r3, #1
    4a74:	cmp	r1, r3
    4a76:	mov	r4, r1
    4a78:	bls.n	4a86 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    4a7a:	mov.w	r0, #298	; 0x12a
    4a7e:	bl	4604 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4a82:	movs	r0, #0
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
    4a84:	pop	{r4, r5, r6, pc}
    4a86:	ldr.w	r1, [r0, #1052]	; 0x41c
    4a8a:	mov	r5, r2
    4a8c:	add.w	r0, r0, #524	; 0x20c
    4a90:	add.w	r1, r1, r4, lsr #7
    4a94:	movs	r2, #1
    4a96:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4a9a:	mov	r6, r0
    4a9c:	cbz	r0, 4aaa <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4a9e:	lsls	r4, r4, #2
    4aa0:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    4aa4:	movs	r0, #1
    4aa6:	str	r5, [r6, r4]

 fail:
  return false;
}
    4aa8:	pop	{r4, r5, r6, pc}
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    DBG_FAIL_MACRO;
    4aaa:	mov.w	r0, #304	; 0x130
    4aae:	bl	4604 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4ab2:	mov	r0, r6
    4ab4:	pop	{r4, r5, r6, pc}
    4ab6:	nop

00004ab8 <ExFatPartition::freeChain(unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4ab8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4abc:	mov	r4, r1
    4abe:	sub	sp, #12
    4ac0:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    4ac2:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4ac4:	mov	r1, r4
    4ac6:	add	r2, sp, #4
    4ac8:	mov	r0, r6
    4aca:	bl	49d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4ace:	movs	r2, #0
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4ad0:	sxtb	r5, r0
    if (status < 0) {
    4ad2:	cmp	r5, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4ad4:	mov	r1, r4
    4ad6:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4ad8:	add.w	r4, r4, #1
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
    4adc:	blt.n	4b30 <ExFatPartition::freeChain(unsigned long)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4ade:	bl	4a68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4ae2:	rsb	r2, r8, r4
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4ae6:	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4ae8:	mov	r1, r8
    4aea:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4aec:	cbz	r0, 4b44 <ExFatPartition::freeChain(unsigned long)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4aee:	ldr	r7, [sp, #4]
    4af0:	cmp	r4, r7
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4af2:	mov	r0, r6
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4af4:	bne.n	4b1e <ExFatPartition::freeChain(unsigned long)+0x66>
    4af6:	cmp	r5, #0
    4af8:	bne.n	4ac4 <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4afa:	mov	r3, r5
    4afc:	rsb	r2, r8, r4
    4b00:	mov	r1, r8
    4b02:	mov	r0, r6
    4b04:	bl	48d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4b08:	cbnz	r0, 4b16 <ExFatPartition::freeChain(unsigned long)+0x5e>
        DBG_FAIL_MACRO;
    4b0a:	mov.w	r0, #330	; 0x14a
    4b0e:	bl	4604 <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    4b12:	mov.w	r9, #0
}
    4b16:	mov	r0, r9
    4b18:	add	sp, #12
    4b1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4b1e:	bl	48d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4b22:	cmp	r0, #0
    4b24:	beq.n	4b0a <ExFatPartition::freeChain(unsigned long)+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4b26:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4b28:	cmp	r5, #0
    4b2a:	beq.n	4b16 <ExFatPartition::freeChain(unsigned long)+0x5e>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4b2c:	mov	r8, r4
    4b2e:	b.n	4ac4 <ExFatPartition::freeChain(unsigned long)+0xc>
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
    4b30:	movw	r0, #321	; 0x141
    4b34:	bl	4604 <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    4b38:	mov.w	r9, #0
}
    4b3c:	mov	r0, r9
    4b3e:	add	sp, #12
    4b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    4b44:	movw	r0, #325	; 0x145
    4b48:	bl	4604 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4b4c:	mov	r0, r9
    4b4e:	add	sp, #12
    4b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004b54 <ExFatPartition::freeClusterCount()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4b54:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4b58:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    4b5a:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4b5e:	mov	r8, r0
    4b60:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    4b64:	mov	r5, r4
    4b66:	mov	r1, r6
    4b68:	movs	r2, #0
    4b6a:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    4b6c:	adds	r6, #1
    4b6e:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4b72:	cbz	r0, 4bc2 <ExFatPartition::freeClusterCount()+0x6e>
    4b74:	add.w	lr, r0, #4294967295
    4b78:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    4b7c:	ldrb.w	r0, [lr, #1]!
    4b80:	cmp	r0, #255	; 0xff
    4b82:	add.w	r9, r5, #4096	; 0x1000
    4b86:	beq.n	4bb0 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    4b88:	cbz	r0, 4b9e <ExFatPartition::freeClusterCount()+0x4a>
    4b8a:	movs	r2, #8
    4b8c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    4b8e:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4b90:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    4b94:	it	ne
    4b96:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4b98:	subs	r2, #1
    4b9a:	uxtb	r3, r1
    4b9c:	bne.n	4b8e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4b9e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4ba0:	cmp	ip, r5
    4ba2:	bls.n	4bba <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4ba4:	cmp	r5, r9
    4ba6:	beq.n	4b66 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    4ba8:	ldrb.w	r0, [lr, #1]!
    4bac:	cmp	r0, #255	; 0xff
    4bae:	bne.n	4b88 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4bb0:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4bb2:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    4bb4:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4bb8:	bhi.n	4ba4 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    4bba:	rsb	r0, r4, ip
    4bbe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    4bc2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bc6:	nop

00004bc8 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4bc8:	push	{r4, r5, r6, lr}
    4bca:	sub	sp, #8
    4bcc:	add	r6, sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4bce:	ldr.w	r1, [r0, #1068]	; 0x42c
    4bd2:	str.w	r1, [r6, #-4]!
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4bd6:	mov	r5, r0
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    4bd8:	movs	r4, #0
    4bda:	b.n	4be4 <ExFatPartition::rootLength()+0x1c>
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4bdc:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    4be0:	beq.n	4bf4 <ExFatPartition::rootLength()+0x2c>
    4be2:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    4be4:	mov	r2, r6
    4be6:	mov	r0, r5
    4be8:	bl	49d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4bec:	sxtb	r0, r0
    if (status < 0) return 0;
    4bee:	cmp	r0, #0
    4bf0:	bge.n	4bdc <ExFatPartition::rootLength()+0x14>
    4bf2:	movs	r4, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    4bf4:	ldrb.w	r0, [r5, #1085]	; 0x43d
    4bf8:	adds	r0, #9
    4bfa:	uxtb	r0, r0
}
    4bfc:	lsl.w	r0, r4, r0
    4c00:	add	sp, #8
    4c02:	pop	{r4, r5, r6, pc}

00004c04 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4c04:	cbz	r1, 4c3a <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4c06:	push	{r4}
    4c08:	add	r1, r0
    4c0a:	lsls	r3, r2, #15
    4c0c:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4c10:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    4c14:	sub.w	r4, r2, #97	; 0x61
    4c18:	cmp	r4, #25
      c -= 'a' - 'A';
    4c1a:	itt	ls
    4c1c:	subls	r2, #32
    4c1e:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4c20:	uxtah	r2, r2, r3
    4c24:	uxth	r2, r2
    4c26:	lsls	r3, r2, #15
    4c28:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4c2c:	cmp	r1, r0
    4c2e:	uxth	r2, r2
    4c30:	bne.n	4c0a <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4c32:	mov	r0, r2
    4c34:	ldr.w	r4, [sp], #4
    4c38:	bx	lr
    4c3a:	mov	r0, r2
    4c3c:	bx	lr
    4c3e:	nop

00004c40 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4c40:	cbz	r3, 4c94 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4c42:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4c44:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4c46:	cmp	r4, #126	; 0x7e
    4c48:	bhi.n	4c88 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    4c4a:	add	r3, r2
    4c4c:	adds	r5, r1, r3
    4c4e:	add	r2, r1
    4c50:	adds	r0, #2
    4c52:	ldrb.w	r3, [r2], #1
    4c56:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4c58:	sub.w	r1, r3, #97	; 0x61
    4c5c:	cmp	r1, #25
    4c5e:	sub.w	r1, r4, #97	; 0x61
    4c62:	ite	ls
    4c64:	movls	r6, #32
    4c66:	movhi	r6, #0
    4c68:	cmp	r1, #25
    4c6a:	ite	ls
    4c6c:	movls	r1, #32
    4c6e:	movhi	r1, #0
    4c70:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4c72:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4c74:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4c76:	uxtb	r4, r4
    4c78:	cmp	r4, r3
    4c7a:	bne.n	4c88 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4c7c:	cmp	r2, r5
    4c7e:	beq.n	4c8e <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4c80:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4c84:	cmp	r4, #126	; 0x7e
    4c86:	bls.n	4c52 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4c88:	movs	r0, #0
    }
  }
  return true;
}
    4c8a:	pop	{r4, r5, r6}
    4c8c:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4c8e:	movs	r0, #1
}
    4c90:	pop	{r4, r5, r6}
    4c92:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4c94:	movs	r0, #1
}
    4c96:	bx	lr

00004c98 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4c98:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4c9a:	movs	r1, #10
    4c9c:	mov	r5, r0
    4c9e:	ldr	r0, [pc, #40]	; (4cc8 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4ca0:	ldr	r4, [pc, #40]	; (4ccc <dbgPrint(unsigned short)+0x34>)
    4ca2:	bl	96a8 <usb_serial_write>
    4ca6:	movs	r1, #18
    4ca8:	ldr	r0, [pc, #36]	; (4cd0 <dbgPrint(unsigned short)+0x38>)
    4caa:	bl	96a8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4cae:	movs	r0, #46	; 0x2e
    4cb0:	bl	97b0 <usb_serial_putchar>
    4cb4:	mov	r1, r5
    4cb6:	mov	r0, r4
    4cb8:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4cbc:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    4cbe:	ldmia.w	sp!, {r3, r4, r5, lr}
    4cc2:	b.w	abc4 <Print::println()>
    4cc6:	nop
    4cc8:	.word	0x0000fe9c
    4ccc:	.word	0x1fff098c
    4cd0:	.word	0x0000fed4

00004cd4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4cd4:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4cd6:	push	{r3, r4, r5, r6, r7, lr}
    4cd8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4cda:	ldr	r0, [r0, #32]
    4cdc:	cbz	r1, 4ce0 <ExFatFile::addCluster()+0xc>
    4cde:	adds	r1, #1
    4ce0:	movs	r2, #1
    4ce2:	bl	4714 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4ce6:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4ce8:	mov	r6, r0
  if (find < 2) {
    4cea:	bls.n	4d70 <ExFatFile::addCluster()+0x9c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4cec:	movs	r3, #1
    4cee:	mov	r1, r0
    4cf0:	mov	r2, r3
    4cf2:	ldr	r0, [r4, #32]
    4cf4:	bl	48d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4cf8:	mov	r7, r0
    4cfa:	cmp	r0, #0
    4cfc:	beq.n	4d7c <ExFatFile::addCluster()+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4cfe:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4d00:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4d04:	cbnz	r0, 4d14 <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4d06:	orr.w	r3, r3, #64	; 0x40
    4d0a:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4d0e:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4d10:	mov	r0, r7
    4d12:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4d14:	lsls	r2, r3, #25
    4d16:	bpl.n	4d42 <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    4d18:	adds	r2, r0, #1
    4d1a:	cmp	r6, r2
    4d1c:	beq.n	4d0e <ExFatFile::addCluster()+0x3a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4d1e:	bic.w	r2, r3, #64	; 0x40
    4d22:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4d26:	ldr	r3, [r4, #28]
    4d28:	b.n	4d38 <ExFatFile::addCluster()+0x64>
      if (!m_vol->fatPut(c, c + 1)) {
    4d2a:	ldr	r0, [r4, #32]
    4d2c:	bl	4a68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4d30:	mov	r3, r0
    4d32:	cbz	r0, 4d86 <ExFatFile::addCluster()+0xb2>
    4d34:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4d36:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4d38:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4d3a:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    4d3c:	mov	r1, r3
    4d3e:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4d40:	bcc.n	4d2a <ExFatFile::addCluster()+0x56>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4d42:	mov.w	r2, #4294967295
    4d46:	mov	r1, r6
    4d48:	ldr	r0, [r4, #32]
    4d4a:	bl	4a68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4d4e:	mov	r3, r0
    4d50:	cbz	r0, 4d90 <ExFatFile::addCluster()+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4d52:	ldr	r1, [r4, #24]
    4d54:	cmp	r1, #0
    4d56:	beq.n	4d0e <ExFatFile::addCluster()+0x3a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4d58:	mov	r2, r6
    4d5a:	ldr	r0, [r4, #32]
    4d5c:	bl	4a68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4d60:	mov	r3, r0
    4d62:	cmp	r0, #0
    4d64:	bne.n	4d0e <ExFatFile::addCluster()+0x3a>
      DBG_FAIL_MACRO;
    4d66:	movs	r0, #110	; 0x6e
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4d68:	mov	r7, r3
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    if (!m_vol->fatPut(m_curCluster, find)) {
      DBG_FAIL_MACRO;
    4d6a:	bl	4c98 <dbgPrint(unsigned short)>
      goto fail;
    4d6e:	b.n	4d10 <ExFatFile::addCluster()+0x3c>
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    4d70:	movs	r0, #77	; 0x4d
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4d72:	movs	r7, #0
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    4d74:	bl	4c98 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    4d78:	mov	r0, r7
    4d7a:	pop	{r3, r4, r5, r6, r7, pc}
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    4d7c:	movs	r0, #81	; 0x51
    4d7e:	bl	4c98 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    4d82:	mov	r0, r7
    4d84:	pop	{r3, r4, r5, r6, r7, pc}
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    4d86:	movs	r0, #97	; 0x61
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4d88:	mov	r7, r3
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    4d8a:	bl	4c98 <dbgPrint(unsigned short)>
        goto fail;
    4d8e:	b.n	4d10 <ExFatFile::addCluster()+0x3c>
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    4d90:	movs	r0, #104	; 0x68
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4d92:	mov	r7, r3
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    4d94:	bl	4c98 <dbgPrint(unsigned short)>
    goto fail;
    4d98:	b.n	4d10 <ExFatFile::addCluster()+0x3c>
    4d9a:	nop

00004d9c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4d9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    4da0:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4da4:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    4da6:	ldmia.w	r3, {r0, r1, r2}
    4daa:	ldrb.w	r7, [r5, #51]	; 0x33

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4dae:	sub	sp, #20
  DirPos_t pos = m_dirPos;
    4db0:	add	r6, sp, #4
  uint8_t* cache;
  if (!isWritable()) {
    4db2:	and.w	r4, r7, #2
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
    4db6:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    4dba:	cmp	r4, #0
    4dbc:	beq.n	4e98 <ExFatFile::remove()+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4dbe:	ldr	r1, [r5, #28]
    4dc0:	cbnz	r1, 4e0c <ExFatFile::remove()+0x70>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4dc2:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    4dc4:	movs	r2, #1
    4dc6:	mov	r1, r6
    4dc8:	ldr	r0, [r5, #32]
    4dca:	bl	49a0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4dce:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4dd0:	mov	r3, r0
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4dd2:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4dd4:	cmp	r0, #0
    4dd6:	beq.n	4e86 <ExFatFile::remove()+0xea>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4dd8:	ldrb	r2, [r3, #0]
    4dda:	and.w	r2, r2, #127	; 0x7f
    4dde:	strb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4de0:	ldrb.w	r3, [r5, #48]	; 0x30
    4de4:	cmp	r3, r4
    4de6:	bcc.n	4e56 <ExFatFile::remove()+0xba>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    4de8:	cmp	r4, #0
    4dea:	beq.n	4dc4 <ExFatFile::remove()+0x28>
    4dec:	movs	r2, #32
    4dee:	mov	r1, r6
    4df0:	ldr	r0, [r5, #32]
    4df2:	bl	4a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4df6:	cmp	r0, #1
    4df8:	beq.n	4dc4 <ExFatFile::remove()+0x28>
      DBG_FAIL_MACRO;
    4dfa:	movw	r0, #287	; 0x11f
    4dfe:	bl	4c98 <dbgPrint(unsigned short)>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4e02:	movs	r4, #0
}
    4e04:	mov	r0, r4
    4e06:	add	sp, #20
    4e08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4e0c:	lsls	r3, r7, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4e0e:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4e10:	bpl.n	4eae <ExFatFile::remove()+0x112>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4e12:	ldrd	r2, r3, [r5, #8]
    4e16:	ldrb.w	r4, [r0, #1085]	; 0x43d
    4e1a:	adds	r4, #9
    4e1c:	uxtb	r4, r4
    4e1e:	adds.w	r8, r2, #4294967295
    4e22:	adc.w	r9, r3, #4294967295
    4e26:	rsb	r7, r4, #32
    4e2a:	lsr.w	r2, r8, r4
    4e2e:	sub.w	r3, r4, #32
    4e32:	lsl.w	r7, r9, r7
    4e36:	lsr.w	r3, r9, r3
    4e3a:	orrs	r2, r7
    4e3c:	orrs	r2, r3
    4e3e:	adds	r2, #1
    4e40:	movs	r3, #0
    4e42:	bl	48d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4e46:	mov	r4, r0
    4e48:	cmp	r0, #0
    4e4a:	bne.n	4dc2 <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    4e4c:	mov.w	r0, #274	; 0x112
    4e50:	bl	4c98 <dbgPrint(unsigned short)>
        goto fail;
    4e54:	b.n	4e04 <ExFatFile::remove()+0x68>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    4e56:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    4e58:	movs	r3, #0
    4e5a:	mov	r0, r4
    4e5c:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4e60:	strb.w	r3, [r5, #51]	; 0x33
    4e64:	bl	4704 <FsCache::sync()>
    4e68:	cmp	r0, #0
    4e6a:	beq.n	4e02 <ExFatFile::remove()+0x66>
    4e6c:	add.w	r0, r4, #524	; 0x20c
    4e70:	bl	4704 <FsCache::sync()>
    4e74:	cmp	r0, #0
    4e76:	beq.n	4e02 <ExFatFile::remove()+0x66>
    4e78:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4e7c:	ldr	r3, [r0, #0]
    4e7e:	ldr	r3, [r3, #20]
    4e80:	blx	r3
    4e82:	mov	r4, r0
    4e84:	b.n	4e04 <ExFatFile::remove()+0x68>
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4e86:	mov.w	r0, #292	; 0x124

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4e8a:	mov	r4, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4e8c:	bl	4c98 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4e90:	mov	r0, r4
    4e92:	add	sp, #20
    4e94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4e98:	and.w	r3, r4, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    4e9c:	mov.w	r0, #266	; 0x10a

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4ea0:	mov	r4, r3
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    4ea2:	bl	4c98 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4ea6:	mov	r0, r4
    4ea8:	add	sp, #20
    4eaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    4eae:	bl	4ab8 <ExFatPartition::freeChain(unsigned long)>
    4eb2:	mov	r4, r0
    4eb4:	cmp	r0, #0
    4eb6:	bne.n	4dc2 <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    4eb8:	movw	r0, #279	; 0x117
    4ebc:	bl	4c98 <dbgPrint(unsigned short)>
        goto fail;
    4ec0:	b.n	4e04 <ExFatFile::remove()+0x68>
    4ec2:	nop

00004ec4 <ExFatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4ec4:	push	{r4, r5, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4ec6:	ldrb.w	r3, [r0, #49]	; 0x31
    4eca:	and.w	r3, r3, #16

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4ece:	sub	sp, #36	; 0x24
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4ed0:	cbz	r3, 4f16 <ExFatFile::rmdir()+0x52>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4ed2:	movs	r2, #0
    4ed4:	movs	r3, #0
    4ed6:	mov	r4, r0
    4ed8:	bl	3f54 <ExFatFile::seekSet(unsigned long long)>
    4edc:	b.n	4eec <ExFatFile::rmdir()+0x28>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    4ede:	cmp	r0, #32
    4ee0:	bne.n	4f28 <ExFatFile::rmdir()+0x64>
    4ee2:	ldrb.w	r3, [sp]
    4ee6:	lsls	r2, r3, #24
    4ee8:	bmi.n	4f28 <ExFatFile::rmdir()+0x64>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4eea:	cbz	r3, 4efa <ExFatFile::rmdir()+0x36>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    4eec:	movs	r2, #32
    4eee:	mov	r1, sp
    4ef0:	mov	r0, r4
    4ef2:	bl	3d40 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4ef6:	cmp	r0, #0
    4ef8:	bne.n	4ede <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4efa:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4efe:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    4f00:	orr.w	r3, r3, #2
    4f04:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4f08:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    4f0c:	mov	r0, r4
    4f0e:	bl	4d9c <ExFatFile::remove()>

fail:
  return false;
}
    4f12:	add	sp, #36	; 0x24
    4f14:	pop	{r4, r5, pc}
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    DBG_FAIL_MACRO;
    4f16:	mov.w	r0, #354	; 0x162
    4f1a:	and.w	r5, r3, #255	; 0xff
    4f1e:	bl	4c98 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4f22:	mov	r0, r5
}
    4f24:	add	sp, #36	; 0x24
    4f26:	pop	{r4, r5, pc}
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
      DBG_FAIL_MACRO;
    4f28:	mov.w	r0, #366	; 0x16e
    4f2c:	bl	4c98 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4f30:	movs	r0, #0
}
    4f32:	add	sp, #36	; 0x24
    4f34:	pop	{r4, r5, pc}
    4f36:	nop

00004f38 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4f38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4f3c:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4f40:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4f42:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4f46:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4f48:	add.w	r8, sp, #12
    4f4c:	stmia.w	r8, {r0, r1, r2}
    4f50:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    4f52:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4f54:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    4f56:	movs	r2, #0
    4f58:	mov	r1, r8
    4f5a:	ldr	r0, [r6, #32]
    4f5c:	bl	49a0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    4f60:	uxtb.w	r9, r7
    if (!cache) {
    4f64:	mov	r5, r0
    4f66:	cmp	r0, #0
    4f68:	beq.n	5062 <ExFatFile::syncDir()+0x12a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4f6a:	ldrb	r2, [r0, #0]
    4f6c:	cmp	r2, #192	; 0xc0
    4f6e:	beq.n	4fdc <ExFatFile::syncDir()+0xa4>
    4f70:	cmp	r2, #193	; 0xc1
    4f72:	beq.n	4f94 <ExFatFile::syncDir()+0x5c>
    4f74:	cmp	r2, #133	; 0x85
    4f76:	beq.n	5018 <ExFatFile::syncDir()+0xe0>

      case EXFAT_TYPE_NAME:
        break;

      default:
        DBG_FAIL_MACRO;
    4f78:	mov.w	r0, #452	; 0x1c4
    4f7c:	bl	4c98 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4f80:	ldrb.w	r3, [r6, #50]	; 0x32
    4f84:	orr.w	r3, r3, #1
    4f88:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    4f8c:	movs	r0, #0
}
    4f8e:	add	sp, #28
    4f90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f94:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4f96:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4f98:	ldrb	r2, [r5, r1]
    4f9a:	lsls	r3, r4, #15
    4f9c:	orr.w	r4, r3, r4, lsr #1
    4fa0:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fa4:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4fa6:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fa8:	add.w	r1, r1, #1
    4fac:	beq.n	4fd2 <ExFatFile::syncDir()+0x9a>
    4fae:	cmp	r1, #31
    4fb0:	bls.n	4f98 <ExFatFile::syncDir()+0x60>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    4fb2:	cmp	sl, r9
    4fb4:	beq.n	506c <ExFatFile::syncDir()+0x134>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4fb6:	movs	r2, #32
    4fb8:	mov	r1, r8
    4fba:	ldr	r0, [r6, #32]
    4fbc:	bl	4a20 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4fc0:	cmp	r0, #1
    4fc2:	add.w	r7, r7, #1
    4fc6:	beq.n	4f56 <ExFatFile::syncDir()+0x1e>
      DBG_FAIL_MACRO;
    4fc8:	movw	r0, #459	; 0x1cb
    4fcc:	bl	4c98 <dbgPrint(unsigned short)>
      goto fail;
    4fd0:	b.n	4f80 <ExFatFile::syncDir()+0x48>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fd2:	cmp	r0, #133	; 0x85
    4fd4:	ite	eq
    4fd6:	moveq	r1, #4
    4fd8:	movne	r1, #2
    4fda:	b.n	4f98 <ExFatFile::syncDir()+0x60>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4fdc:	ldrb.w	r3, [r6, #51]	; 0x33
    4fe0:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4fe4:	ldrb	r3, [r0, #1]
    4fe6:	ite	ne
    4fe8:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4fec:	biceq.w	r3, r3, #2
    4ff0:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    4ff2:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4ff6:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4ffa:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    4ffe:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5000:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5002:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    5006:	ldr	r2, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    5008:	ldrb.w	r3, [r2, #524]	; 0x20c
    500c:	orr.w	r3, r3, #1
    5010:	strb.w	r3, [r2, #524]	; 0x20c
    5014:	ldrb	r0, [r0, #0]
    5016:	b.n	4f96 <ExFatFile::syncDir()+0x5e>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5018:	ldr	r3, [pc, #152]	; (50b4 <ExFatFile::syncDir()+0x17c>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    501a:	ldrb.w	r1, [r6, #49]	; 0x31
    501e:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    5020:	ldrb.w	sl, [r0, #1]
    5024:	and.w	r1, r1, #55	; 0x37
    5028:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    502a:	cmp	r3, #0
    502c:	beq.n	4f94 <ExFatFile::syncDir()+0x5c>
          m_vol->dataCacheDirty();
    502e:	ldr	r1, [r6, #32]
    5030:	ldrb.w	r2, [r1, #524]	; 0x20c
    5034:	orr.w	r2, r2, #1
    5038:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    503c:	add	r0, sp, #8
    503e:	add.w	r2, sp, #7
    5042:	add.w	r1, sp, #10
    5046:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    5048:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    504c:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    5050:	ldrb.w	r1, [sp, #7]
    5054:	strb	r1, [r5, #21]
    5056:	strh	r2, [r5, #12]
    5058:	strh	r2, [r5, #16]
    505a:	strh	r3, [r5, #14]
    505c:	strh	r3, [r5, #18]
    505e:	ldrb	r0, [r5, #0]
    5060:	b.n	4f96 <ExFatFile::syncDir()+0x5e>
  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
    5062:	mov.w	r0, #414	; 0x19e
    5066:	bl	4c98 <dbgPrint(unsigned short)>
      goto fail;
    506a:	b.n	4f80 <ExFatFile::syncDir()+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    506c:	mov	r1, fp
    506e:	movs	r2, #1
    5070:	ldr	r0, [r6, #32]
    5072:	bl	49a0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5076:	cbz	r0, 508e <ExFatFile::syncDir()+0x156>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5078:	ldr	r5, [r6, #32]
    507a:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    507c:	mov	r0, r5
    507e:	bl	4704 <FsCache::sync()>
    5082:	cbnz	r0, 5098 <ExFatFile::syncDir()+0x160>
    DBG_FAIL_MACRO;
    5084:	movw	r0, #471	; 0x1d7
    5088:	bl	4c98 <dbgPrint(unsigned short)>
    goto fail;
    508c:	b.n	4f80 <ExFatFile::syncDir()+0x48>
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
  if (!df) {
    DBG_FAIL_MACRO;
    508e:	mov.w	r0, #466	; 0x1d2
    5092:	bl	4c98 <dbgPrint(unsigned short)>
    goto fail;
    5096:	b.n	4f80 <ExFatFile::syncDir()+0x48>
    5098:	add.w	r0, r5, #524	; 0x20c
    509c:	bl	4704 <FsCache::sync()>
    50a0:	cmp	r0, #0
    50a2:	beq.n	5084 <ExFatFile::syncDir()+0x14c>
    50a4:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    50a8:	ldr	r3, [r0, #0]
    50aa:	ldr	r3, [r3, #20]
    50ac:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    50ae:	cmp	r0, #0
    50b0:	beq.n	5084 <ExFatFile::syncDir()+0x14c>
    50b2:	b.n	4f8e <ExFatFile::syncDir()+0x56>
    50b4:	.word	0x1fff1990

000050b8 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    50b8:	ldrb.w	r2, [r0, #49]	; 0x31
    50bc:	cbz	r2, 50ec <ExFatFile::sync()+0x34>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    50be:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    50c0:	ldrb.w	r2, [r0, #51]	; 0x33
    50c4:	lsls	r1, r2, #24
    50c6:	bmi.n	50f0 <ExFatFile::sync()+0x38>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    50c8:	ldr	r5, [r0, #32]
    50ca:	mov	r4, r0
    50cc:	mov	r0, r5
    50ce:	bl	4704 <FsCache::sync()>
    50d2:	cbnz	r0, 5100 <ExFatFile::sync()+0x48>
    DBG_FAIL_MACRO;
    50d4:	mov.w	r0, #392	; 0x188
    50d8:	bl	4c98 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    50dc:	ldrb.w	r3, [r4, #50]	; 0x32
    50e0:	orr.w	r3, r3, #1
    50e4:	strb.w	r3, [r4, #50]	; 0x32
    50e8:	movs	r0, #0
  return false;
}
    50ea:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    50ec:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    50ee:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    50f0:	and.w	r2, r2, #127	; 0x7f
    50f4:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    50f8:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    50fc:	b.w	4f38 <ExFatFile::syncDir()>
    5100:	add.w	r0, r5, #524	; 0x20c
    5104:	bl	4704 <FsCache::sync()>
    5108:	cmp	r0, #0
    510a:	beq.n	50d4 <ExFatFile::sync()+0x1c>
    510c:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5110:	ldr	r3, [r0, #0]
    5112:	ldr	r3, [r3, #20]
    5114:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5116:	cmp	r0, #0
    5118:	beq.n	50d4 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    511a:	movs	r0, #1
    511c:	pop	{r3, r4, r5, pc}
    511e:	nop

00005120 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    5120:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5124:	ldrb.w	r3, [r0, #49]	; 0x31
    5128:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    512a:	mov	r8, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    512c:	bmi.n	51dc <ExFatFile::addDirCluster()+0xbc>
    512e:	ldr	r0, [r0, #8]
    5130:	ldr.w	r3, [r8, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    5134:	ldr.w	r3, [r3, #1076]	; 0x434
    5138:	add	r0, r3
    513a:	cmp.w	r0, #67108864	; 0x4000000
    513e:	bcs.n	51d0 <ExFatFile::addDirCluster()+0xb0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5140:	mov	r0, r8
    5142:	bl	4cd4 <ExFatFile::addCluster()>
    5146:	cmp	r0, #0
    5148:	beq.n	51c4 <ExFatFile::addDirCluster()+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    514a:	ldr.w	r5, [r8, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    514e:	ldrb.w	r3, [r5, #524]	; 0x20c
    5152:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    5154:	add.w	r4, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5158:	bmi.n	5222 <ExFatFile::addDirCluster()+0x102>
      return nullptr;
    }
    invalidate();
    515a:	mov	r0, r4
    return m_cacheBuffer;
    515c:	add.w	r5, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    5160:	bl	466c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    5164:	mov.w	r2, #512	; 0x200
    5168:	movs	r1, #0
    516a:	mov	r0, r5
    516c:	bl	c29c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    5170:	ldr.w	r2, [r8, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5174:	ldr.w	r3, [r8, #24]
    5178:	ldrb.w	r1, [r2, #1085]	; 0x43d
    517c:	ldr.w	r7, [r2, #1060]	; 0x424
    5180:	subs	r3, #2
    5182:	lsls	r3, r1
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5184:	movs	r6, #1
    5186:	add	r7, r3
    5188:	lsls.w	r3, r6, r1
    518c:	it	ne
    518e:	movne	r4, #0
    5190:	bne.n	51a4 <ExFatFile::addDirCluster()+0x84>
    5192:	b.n	51e4 <ExFatFile::addDirCluster()+0xc4>
    5194:	ldr.w	r2, [r8, #32]
    5198:	ldrb.w	r3, [r2, #1085]	; 0x43d
    519c:	lsl.w	r3, r6, r3
    51a0:	cmp	r3, r4
    51a2:	bls.n	51e4 <ExFatFile::addDirCluster()+0xc4>
    51a4:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    51a8:	ldr	r3, [r0, #0]
    51aa:	adds	r1, r7, r4
    51ac:	ldr	r3, [r3, #24]
    51ae:	mov	r2, r5
    51b0:	blx	r3
    51b2:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    51b4:	cmp	r0, #0
    51b6:	bne.n	5194 <ExFatFile::addDirCluster()+0x74>
      DBG_FAIL_MACRO;
    51b8:	movs	r0, #145	; 0x91
    51ba:	bl	4c98 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    51be:	movs	r0, #0
    51c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    51c4:	movs	r0, #133	; 0x85
    51c6:	bl	4c98 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    51ca:	movs	r0, #0
    51cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    51d0:	movs	r0, #129	; 0x81
    51d2:	bl	4c98 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    51d6:	movs	r0, #0
    51d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    51dc:	ldr	r0, [r0, #32]
    51de:	bl	4bc8 <ExFatPartition::rootLength()>
    51e2:	b.n	5130 <ExFatFile::addDirCluster()+0x10>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    51e4:	ldrb.w	r3, [r8, #49]	; 0x31
    51e8:	lsls	r3, r3, #25
    51ea:	bmi.n	5218 <ExFatFile::addDirCluster()+0xf8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    51ec:	ldrb.w	r3, [r8, #51]	; 0x33
    51f0:	orn	r3, r3, #127	; 0x7f
    51f4:	strb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    51f8:	ldr.w	r4, [r2, #1076]	; 0x434
    51fc:	ldrd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    5200:	ldrd	r0, r1, [r8, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5204:	adds	r2, r2, r4
    5206:	mov.w	r5, #0
    520a:	adcs	r3, r5
    m_validLength += m_vol->bytesPerCluster();
    520c:	adds	r0, r0, r4
    520e:	adcs	r1, r5
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5210:	strd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    5214:	strd	r0, r1, [r8, #16]
  }
  return sync();
    5218:	mov	r0, r8

 fail:
  return false;
}
    521a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    521e:	b.w	50b8 <ExFatFile::sync()>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5222:	mov	r0, r4
    5224:	bl	4704 <FsCache::sync()>
    5228:	cmp	r0, #0
    522a:	bne.n	515a <ExFatFile::addDirCluster()+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
  if (!cache) {
    DBG_FAIL_MACRO;
    522c:	movs	r0, #138	; 0x8a
    522e:	bl	4c98 <dbgPrint(unsigned short)>
    5232:	b.n	51ca <ExFatFile::addDirCluster()+0xaa>

00005234 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5234:	push	{r4, r5, lr}
  if (!parent->isDir()) {
    5236:	ldrb.w	r3, [r1, #49]	; 0x31
    523a:	tst.w	r3, #80	; 0x50

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    523e:	sub	sp, #12
  if (!parent->isDir()) {
    5240:	beq.n	528e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x5a>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    5242:	movw	r5, #2562	; 0xa02
    5246:	ldrb	r3, [r2, #0]
    5248:	ldr	r2, [r2, #4]
    524a:	str	r5, [sp, #0]
    524c:	mov	r4, r0
    524e:	bl	4070 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5252:	cbz	r0, 5282 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    5254:	movs	r3, #16
    5256:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    525a:	mov	r0, r4
    525c:	bl	5120 <ExFatFile::addDirCluster()>
    5260:	cbz	r0, 529a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    5262:	ldr	r3, [r4, #24]
    5264:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5266:	movs	r2, #0
    5268:	movs	r3, #0
    526a:	mov	r0, r4
    526c:	bl	3f54 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5270:	movs	r3, #193	; 0xc1
  return sync();
    5272:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5274:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    5278:	add	sp, #12
    527a:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    527e:	b.w	50b8 <ExFatFile::sync()>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    5282:	movs	r0, #209	; 0xd1
    5284:	bl	4c98 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5288:	movs	r0, #0
    528a:	add	sp, #12
    528c:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    528e:	movs	r0, #204	; 0xcc
    5290:	bl	4c98 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5294:	movs	r0, #0
    5296:	add	sp, #12
    5298:	pop	{r4, r5, pc}

  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    529a:	movs	r0, #218	; 0xda
    529c:	bl	4c98 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    52a0:	movs	r0, #0
    52a2:	add	sp, #12
    52a4:	pop	{r4, r5, pc}
    52a6:	nop

000052a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    52a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    52ac:	mov	r6, r0
    52ae:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    52b0:	ldrb.w	r4, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    52b4:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    52b6:	movs	r0, #0
    52b8:	strb.w	r0, [sp, #73]	; 0x49
    52bc:	strb.w	r0, [sp, #74]	; 0x4a
    52c0:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    52c4:	cmp	r4, #0
    52c6:	bne.n	5342 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    52c8:	mov	r9, r3
    52ca:	ldrb.w	r3, [r1, #49]	; 0x31
    52ce:	tst.w	r3, #80	; 0x50
    52d2:	mov	r5, r1
    52d4:	beq.n	5342 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    52d6:	ldrb	r3, [r2, #0]
    52d8:	cmp	r3, #47	; 0x2f
    52da:	mov	r1, r2
    52dc:	beq.n	5324 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    52de:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    52e2:	add	r3, sp, #12
    52e4:	add	r2, sp, #16
    52e6:	mov	r0, r6
    52e8:	bl	3c7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    52ec:	mov	r4, r0
    52ee:	cmp	r0, #0
    52f0:	beq.n	538c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    52f2:	ldr	r3, [sp, #12]
    52f4:	ldrb	r3, [r3, #0]
    52f6:	cmp	r3, #0
    52f8:	beq.n	539a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf2>
    52fa:	ldrb.w	r3, [sp, #16]
    52fe:	ldr	r2, [sp, #20]
    5300:	str.w	r8, [sp]
    5304:	mov	r1, r5
    5306:	mov	r0, r6
    5308:	bl	4070 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    530c:	mov	r4, r0
    530e:	cbnz	r0, 5360 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb8>
      if (!pFlag || !mkdir(parent, &fname)) {
    5310:	cmp.w	r9, #0
    5314:	bne.n	5352 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
        DBG_FAIL_MACRO;
    5316:	movs	r0, #188	; 0xbc
    5318:	bl	4c98 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    531c:	mov	r0, r4
    531e:	add	sp, #84	; 0x54
    5320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5324:	adds	r1, #1
    5326:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5328:	ldrb	r3, [r1, #0]
    532a:	cmp	r3, #47	; 0x2f
    532c:	beq.n	5324 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    532e:	ldr	r1, [r5, #32]
    5330:	add	r0, sp, #24
    5332:	bl	3c4c <ExFatFile::openRoot(ExFatVolume*)>
    5336:	mov	r4, r0
    5338:	cmp	r0, #0
    533a:	beq.n	53a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x100>
    533c:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    533e:	add	r5, sp, #24
    5340:	b.n	52de <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    5342:	movs	r0, #165	; 0xa5
    5344:	bl	4c98 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    5348:	movs	r4, #0
}
    534a:	mov	r0, r4
    534c:	add	sp, #84	; 0x54
    534e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    5352:	mov	r1, r5
    5354:	add	r2, sp, #16
    5356:	mov	r0, r6
    5358:	bl	5234 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    535c:	cmp	r0, #0
    535e:	beq.n	5316 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5360:	mov	r4, r6
    5362:	add	r7, sp, #24
    5364:	add.w	lr, r6, #48	; 0x30
    5368:	ldr	r0, [r4, #0]
    536a:	ldr	r1, [r4, #4]
    536c:	ldr	r2, [r4, #8]
    536e:	ldr	r3, [r4, #12]
    5370:	mov	r5, r7
    5372:	stmia	r5!, {r0, r1, r2, r3}
    5374:	adds	r4, #16
    5376:	cmp	r4, lr
    5378:	mov	r7, r5
    537a:	bne.n	5368 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc0>
    537c:	ldr	r0, [r4, #0]
    537e:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    5380:	mov	r0, r6
    5382:	bl	3b78 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    5386:	add	r5, sp, #24
    5388:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    538a:	b.n	52e2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    538c:	movs	r0, #180	; 0xb4
    538e:	bl	4c98 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    5392:	mov	r0, r4
    5394:	add	sp, #84	; 0x54
    5396:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    539a:	add	r2, sp, #16
    539c:	mov	r1, r5
    539e:	mov	r0, r6
    53a0:	bl	5234 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    53a4:	mov	r4, r0
    53a6:	b.n	531c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    53a8:	movs	r0, #173	; 0xad
    53aa:	bl	4c98 <dbgPrint(unsigned short)>
      goto fail;
    53ae:	b.n	531c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>

000053b0 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    53b0:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    53b2:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    53b6:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    53b8:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    53ba:	ands.w	r4, r4, #24
    53be:	strb.w	r3, [sp, #49]	; 0x31
    53c2:	strb.w	r3, [sp, #50]	; 0x32
    53c6:	strb.w	r3, [sp, #51]	; 0x33
    53ca:	strb.w	r3, [sp, #105]	; 0x69
    53ce:	strb.w	r3, [sp, #106]	; 0x6a
    53d2:	strb.w	r3, [sp, #107]	; 0x6b
    53d6:	bne.n	53e6 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
    DBG_FAIL_MACRO;
    53d8:	movw	r0, #319	; 0x13f
    53dc:	bl	4c98 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    53e0:	mov	r0, r4
    53e2:	add	sp, #116	; 0x74
    53e4:	pop	{r4, r5, r6, r7, pc}
    53e6:	mov	r5, r0
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    53e8:	ldr	r0, [r1, #32]
    53ea:	ldr	r4, [r5, #32]
    53ec:	cmp	r4, r0
    53ee:	beq.n	5400 <ExFatFile::rename(ExFatFile*, char const*)+0x50>
    DBG_FAIL_MACRO;
    53f0:	mov.w	r0, #324	; 0x144
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    53f4:	mov	r4, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    53f6:	bl	4c98 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    53fa:	mov	r0, r4
    53fc:	add	sp, #116	; 0x74
    53fe:	pop	{r4, r5, r6, r7, pc}
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5400:	movw	r3, #2561	; 0xa01
    5404:	mov	r0, sp
    5406:	bl	44a0 <ExFatFile::open(ExFatFile*, char const*, int)>
    540a:	mov	r4, r0
    540c:	cbz	r0, 5474 <ExFatFile::rename(ExFatFile*, char const*)+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    540e:	add	r7, sp, #56	; 0x38
    5410:	mov	r4, r5
    5412:	add.w	lr, r5, #48	; 0x30
    5416:	ldr	r0, [r4, #0]
    5418:	ldr	r1, [r4, #4]
    541a:	ldr	r2, [r4, #8]
    541c:	ldr	r3, [r4, #12]
    541e:	mov	r6, r7
    5420:	stmia	r6!, {r0, r1, r2, r3}
    5422:	adds	r4, #16
    5424:	cmp	r4, lr
    5426:	mov	r7, r6
    5428:	bne.n	5416 <ExFatFile::rename(ExFatFile*, char const*)+0x66>
    542a:	ldr	r0, [r4, #0]
    542c:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    542e:	add	r3, sp, #36	; 0x24
    5430:	ldmia.w	r3, {r0, r1, r2}
    5434:	add.w	r3, r5, #36	; 0x24
    5438:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    543c:	ldrb.w	r3, [r5, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    5440:	ldrb.w	r2, [sp, #48]	; 0x30
    5444:	strb.w	r2, [r5, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5448:	orn	r3, r3, #127	; 0x7f
    544c:	strb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    5450:	mov	r0, r5
    5452:	bl	50b8 <ExFatFile::sync()>
    5456:	mov	r4, r0
    5458:	cbz	r0, 547e <ExFatFile::rename(ExFatFile*, char const*)+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    545a:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    545c:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    545e:	movs	r3, #8
  return oldFile.remove();
    5460:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5462:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    5464:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    5468:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    546c:	bl	4d9c <ExFatFile::remove()>
    5470:	mov	r4, r0
    5472:	b.n	53e0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    5474:	mov.w	r0, #328	; 0x148
    5478:	bl	4c98 <dbgPrint(unsigned short)>
    goto fail;
    547c:	b.n	53e0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    DBG_FAIL_MACRO;
    547e:	mov.w	r0, #336	; 0x150
    5482:	bl	4c98 <dbgPrint(unsigned short)>
    goto fail;
    5486:	b.n	53e0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>

00005488 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5488:	push	{r4, r5, r6, r7, lr}
    548a:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    548e:	and.w	r2, r3, #2

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5492:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5494:	cmp	r2, #0
    5496:	beq.n	5542 <ExFatFile::truncate()+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5498:	ldr	r1, [r0, #28]
    549a:	mov	r4, r0
    549c:	cbz	r1, 5500 <ExFatFile::truncate()+0x78>
      return true;
  }
  if (isContiguous()) {
    549e:	and.w	r3, r3, #64	; 0x40
    54a2:	and.w	r5, r3, #255	; 0xff
    54a6:	cbz	r3, 5508 <ExFatFile::truncate()+0x80>
    54a8:	ldr	r0, [r0, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    54aa:	ldr	r5, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    54ac:	ldrb.w	r3, [r0, #1085]	; 0x43d
    54b0:	ldrd	r6, r7, [r4, #8]
    54b4:	adds	r3, #9
    54b6:	uxtb	r3, r3
    54b8:	adds.w	r6, r6, #4294967295
    54bc:	rsb	lr, r3, #32
    54c0:	adc.w	r7, r7, #4294967295
    54c4:	lsr.w	r2, r6, r3
    54c8:	lsl.w	lr, r7, lr
    54cc:	subs	r3, #32
    54ce:	orr.w	r2, r2, lr
    54d2:	lsr.w	r3, r7, r3
    54d6:	orrs	r2, r3
    54d8:	adds	r2, #1
    if (m_curCluster) {
    54da:	cmp	r5, #0
    54dc:	beq.n	5554 <ExFatFile::truncate()+0xcc>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    54de:	subs	r1, #1
    54e0:	subs	r1, r1, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    54e2:	adds	r5, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    54e4:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    54e6:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    54e8:	cbz	r2, 551c <ExFatFile::truncate()+0x94>
    54ea:	movs	r3, #0
    54ec:	ldr	r1, [sp, #4]
    54ee:	bl	48d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    54f2:	mov	r5, r0
    54f4:	cbnz	r0, 551c <ExFatFile::truncate()+0x94>
      DBG_FAIL_MACRO;
    54f6:	movw	r0, #599	; 0x257
    54fa:	bl	4c98 <dbgPrint(unsigned short)>
      goto fail;
    54fe:	b.n	5502 <ExFatFile::truncate()+0x7a>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5500:	movs	r5, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    5502:	mov	r0, r5
    5504:	add	sp, #12
    5506:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    5508:	ldr	r3, [r0, #24]
    550a:	cbnz	r3, 555a <ExFatFile::truncate()+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    550c:	str	r1, [sp, #4]
      m_firstCluster = 0;
    550e:	str	r3, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    5510:	ldr	r0, [r4, #32]
    5512:	bl	4ab8 <ExFatPartition::freeChain(unsigned long)>
    5516:	mov	r5, r0
    5518:	cmp	r0, #0
    551a:	beq.n	5594 <ExFatFile::truncate()+0x10c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    551c:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5520:	ldrb.w	r3, [r4, #51]	; 0x33
    5524:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5528:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    552c:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5530:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    5534:	mov	r0, r4
    5536:	bl	50b8 <ExFatFile::sync()>
    553a:	mov	r5, r0

 fail:
  return false;
}
    553c:	mov	r0, r5
    553e:	add	sp, #12
    5540:	pop	{r4, r5, r6, r7, pc}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    5542:	movw	r0, #583	; 0x247
    5546:	and.w	r5, r2, #255	; 0xff
    554a:	bl	4c98 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    554e:	mov	r0, r5
    5550:	add	sp, #12
    5552:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    5554:	str	r1, [sp, #4]
      m_firstCluster = 0;
    5556:	str	r5, [r4, #28]
    5558:	b.n	54e8 <ExFatFile::truncate()+0x60>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    555a:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    555c:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    555e:	str.w	r5, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5562:	ldr	r0, [r0, #32]
    5564:	bl	49d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5568:	sxtb	r0, r0
      if (fg < 0) {
    556a:	cmp	r0, #0
    556c:	blt.n	559e <ExFatFile::truncate()+0x116>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    556e:	bne.n	5578 <ExFatFile::truncate()+0xf0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    5570:	ldr	r1, [sp, #4]
    5572:	cmp	r1, #0
    5574:	beq.n	551c <ExFatFile::truncate()+0x94>
    5576:	b.n	5510 <ExFatFile::truncate()+0x88>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5578:	mov.w	r2, #4294967295
    557c:	ldr	r1, [r4, #24]
    557e:	ldr	r0, [r4, #32]
    5580:	bl	4a68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5584:	mov	r5, r0
    5586:	cmp	r0, #0
    5588:	bne.n	5570 <ExFatFile::truncate()+0xe8>
          DBG_FAIL_MACRO;
    558a:	movw	r0, #614	; 0x266
    558e:	bl	4c98 <dbgPrint(unsigned short)>
          goto fail;
    5592:	b.n	5502 <ExFatFile::truncate()+0x7a>
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
        DBG_FAIL_MACRO;
    5594:	mov.w	r0, #624	; 0x270
    5598:	bl	4c98 <dbgPrint(unsigned short)>
        goto fail;
    559c:	b.n	5502 <ExFatFile::truncate()+0x7a>
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
      if (fg < 0) {
        DBG_FAIL_MACRO;
    559e:	mov.w	r0, #608	; 0x260
    55a2:	bl	4c98 <dbgPrint(unsigned short)>
        goto fail;
    55a6:	b.n	5502 <ExFatFile::truncate()+0x7a>

000055a8 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    55a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55ac:	ldrb.w	r3, [r0, #51]	; 0x33
    55b0:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    55b2:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    55b4:	mov	r6, r0
    55b6:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    55b8:	bpl.w	5802 <ExFatFile::write(void const*, unsigned int)+0x25a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    55bc:	lsls	r2, r3, #28
    55be:	mov	sl, r1
    55c0:	bmi.w	5830 <ExFatFile::write(void const*, unsigned int)+0x288>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    55c4:	ldr	r3, [sp, #4]
    55c6:	cmp	r3, #0
    55c8:	beq.w	587e <ExFatFile::write(void const*, unsigned int)+0x2d6>
    55cc:	mov	r1, r6
    55ce:	ldrd	r2, r3, [r1], #24
    55d2:	ldr.w	r8, [sp, #4]
    55d6:	str	r1, [sp, #12]
    55d8:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    55da:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    55dc:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    55de:	ldr.w	r4, [r0, #1072]	; 0x430
    55e2:	mov	r3, fp
    55e4:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    55e6:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    55ea:	cbnz	r4, 5642 <ExFatFile::write(void const*, unsigned int)+0x9a>
      // start of new cluster
      if (m_curCluster != 0) {
    55ec:	cmp	r5, #0
    55ee:	beq.w	5794 <ExFatFile::write(void const*, unsigned int)+0x1ec>
        int fg;

        if (isContiguous()) {
    55f2:	ldrb.w	r3, [r6, #51]	; 0x33
    55f6:	lsls	r3, r3, #25
    55f8:	bpl.w	57c6 <ExFatFile::write(void const*, unsigned int)+0x21e>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    55fc:	ldrd	r2, r3, [r6, #8]
    5600:	ldrb.w	r7, [r0, #1085]	; 0x43d
    5604:	adds	r7, #9
    5606:	uxtb	r7, r7
    5608:	adds.w	r2, r2, #4294967295
    560c:	adc.w	r3, r3, #4294967295
    5610:	rsb	lr, r7, #32
    5614:	lsl.w	lr, r3, lr
    5618:	lsr.w	r1, r2, r7
    561c:	subs	r7, #32
    561e:	lsr.w	r7, r3, r7
    5622:	orr.w	r1, r1, lr
    5626:	ldr	r3, [r6, #28]
    5628:	orrs	r1, r7
    562a:	add	r3, r1
    562c:	cmp	r5, r3
    562e:	bcc.w	57c0 <ExFatFile::write(void const*, unsigned int)+0x218>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    5632:	mov	r0, r6
    5634:	bl	4cd4 <ExFatFile::addCluster()>
    5638:	cmp	r0, #0
    563a:	beq.w	586a <ExFatFile::write(void const*, unsigned int)+0x2c2>
    563e:	ldr	r0, [r6, #32]
    5640:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5642:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5646:	ldrb.w	lr, [r0, #1085]	; 0x43d
    564a:	lsrs	r4, r4, #9
    564c:	subs	r5, #2
    564e:	adds	r1, r4, r7
    5650:	lsl.w	r5, r5, lr
    5654:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5656:	cmp.w	r9, #0
    565a:	bne.w	5770 <ExFatFile::write(void const*, unsigned int)+0x1c8>
    565e:	cmp.w	r8, #512	; 0x200
    5662:	bcs.n	571a <ExFatFile::write(void const*, unsigned int)+0x172>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5664:	ldrd	r2, r3, [r6, #16]
    5668:	ldrd	r4, r5, [r6]
    566c:	cmp.w	r8, #512	; 0x200
    5670:	mov	r7, r8
    5672:	it	cs
    5674:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5678:	cmp	r5, r3
    567a:	it	eq
    567c:	cmpeq	r4, r2
    567e:	ite	cc
    5680:	movcc	r2, #1
    5682:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5684:	add.w	r0, r0, #524	; 0x20c
    5688:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    568c:	cmp	r0, #0
    568e:	beq.n	578a <ExFatFile::write(void const*, unsigned int)+0x1e2>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5690:	add	r0, r9
    5692:	mov	r2, r7
    5694:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5696:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5698:	bl	94a8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    569c:	cmp.w	r9, #512	; 0x200
    56a0:	beq.w	57e8 <ExFatFile::write(void const*, unsigned int)+0x240>
    56a4:	mov	r0, r7
    56a6:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    56a8:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    56ac:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    56b0:	adds.w	fp, r2, r0
    56b4:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    56b8:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    56ba:	mov	r2, fp
    56bc:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    56be:	it	eq
    56c0:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    56c2:	add	sl, r7
    toWrite -= n;
    56c4:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    56c8:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    56cc:	bcs.n	56e2 <ExFatFile::write(void const*, unsigned int)+0x13a>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    56ce:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    56d2:	mov	r4, ip
    56d4:	mov	r3, fp
    56d6:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    56da:	orn	r1, r1, #127	; 0x7f
    56de:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    56e2:	cmp.w	r8, #0
    56e6:	bne.w	55da <ExFatFile::write(void const*, unsigned int)+0x32>
    56ea:	mov	r2, fp
    56ec:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    56ee:	ldrd	r0, r1, [r6, #8]
    56f2:	cmp	r1, r3
    56f4:	it	eq
    56f6:	cmpeq	r0, r2
    56f8:	bcc.w	5848 <ExFatFile::write(void const*, unsigned int)+0x2a0>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    56fc:	ldr	r3, [pc, #388]	; (5884 <ExFatFile::write(void const*, unsigned int)+0x2dc>)
    56fe:	ldr	r3, [r3, #0]
    5700:	cmp	r3, #0
    5702:	beq.w	5866 <ExFatFile::write(void const*, unsigned int)+0x2be>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5706:	ldrb.w	r3, [r6, #51]	; 0x33
    570a:	ldr	r0, [sp, #4]
    570c:	orn	r3, r3, #127	; 0x7f
    5710:	strb.w	r3, [r6, #51]	; 0x33

fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return -1;
}
    5714:	add	sp, #20
    5716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    571a:	cmp.w	r8, #1024	; 0x400
    571e:	bcc.n	579c <ExFatFile::write(void const*, unsigned int)+0x1f4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5720:	movs	r3, #1
    5722:	lsl.w	lr, r3, lr
    5726:	rsb	lr, r4, lr
    572a:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    572e:	mov.w	r4, r8, lsr #9
    5732:	cmp	r4, lr
    5734:	it	cs
    5736:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5738:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    573a:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    573e:	bhi.n	5754 <ExFatFile::write(void const*, unsigned int)+0x1ac>
    5740:	adds	r2, r4, r1
    5742:	cmp	r2, r3
    5744:	bls.n	5754 <ExFatFile::write(void const*, unsigned int)+0x1ac>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5746:	add.w	r0, r0, #524	; 0x20c
    574a:	str	r1, [sp, #8]
    574c:	bl	466c <FsCache::invalidate()>
    5750:	ldr	r0, [r6, #32]
    5752:	ldr	r1, [sp, #8]
    5754:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5758:	ldr	r5, [r0, #0]
    575a:	mov	r3, r4
    575c:	mov	r2, sl
    575e:	ldr	r4, [r5, #28]
    5760:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    5762:	cmp	r0, #0
    5764:	bne.n	56a4 <ExFatFile::write(void const*, unsigned int)+0xfc>
        DBG_FAIL_MACRO;
    5766:	movw	r0, #758	; 0x2f6
    576a:	bl	4c98 <dbgPrint(unsigned short)>
        goto fail;
    576e:	b.n	580a <ExFatFile::write(void const*, unsigned int)+0x262>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5770:	rsb	r7, r9, #512	; 0x200
    5774:	cmp	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5776:	mov.w	r2, #1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    577a:	add.w	r0, r0, #524	; 0x20c
    577e:	it	cs
    5780:	movcs	r7, r8
    5782:	bl	4678 <FsCache::get(unsigned long, unsigned char)>
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5786:	cmp	r0, #0
    5788:	bne.n	5690 <ExFatFile::write(void const*, unsigned int)+0xe8>
        DBG_FAIL_MACRO;
    578a:	mov.w	r0, #728	; 0x2d8
    578e:	bl	4c98 <dbgPrint(unsigned short)>
        goto fail;
    5792:	b.n	580a <ExFatFile::write(void const*, unsigned int)+0x262>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5794:	ldr	r5, [r6, #28]
    5796:	cbz	r5, 57d6 <ExFatFile::write(void const*, unsigned int)+0x22e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5798:	str	r5, [r6, #24]
    579a:	b.n	5642 <ExFatFile::write(void const*, unsigned int)+0x9a>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    579c:	ldr.w	r3, [r0, #532]	; 0x214
    57a0:	cmp	r1, r3
    57a2:	beq.n	5820 <ExFatFile::write(void const*, unsigned int)+0x278>
    57a4:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    57a8:	ldr	r3, [r0, #0]
    57aa:	mov	r2, sl
    57ac:	ldr	r3, [r3, #24]
    57ae:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    57b0:	cmp	r0, #0
    57b2:	beq.n	585c <ExFatFile::write(void const*, unsigned int)+0x2b4>
    57b4:	mov.w	r0, #512	; 0x200
    57b8:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    57ba:	mov.w	r7, #512	; 0x200
    57be:	b.n	56a8 <ExFatFile::write(void const*, unsigned int)+0x100>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    57c0:	adds	r5, #1
    57c2:	str	r5, [r6, #24]
    57c4:	b.n	5642 <ExFatFile::write(void const*, unsigned int)+0x9a>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    57c6:	mov	r1, r5
    57c8:	ldr	r2, [sp, #12]
    57ca:	bl	49d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    57ce:	cmp	r0, #0
    57d0:	bne.w	563e <ExFatFile::write(void const*, unsigned int)+0x96>
    57d4:	b.n	5632 <ExFatFile::write(void const*, unsigned int)+0x8a>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    57d6:	mov	r0, r6
    57d8:	bl	4cd4 <ExFatFile::addCluster()>
    57dc:	cmp	r0, #0
    57de:	beq.n	5874 <ExFatFile::write(void const*, unsigned int)+0x2cc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    57e0:	ldr	r5, [r6, #24]
    57e2:	str	r5, [r6, #28]
    57e4:	ldr	r0, [r6, #32]
    57e6:	b.n	5642 <ExFatFile::write(void const*, unsigned int)+0x9a>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    57e8:	ldr	r0, [r6, #32]
    57ea:	add.w	r0, r0, #524	; 0x20c
    57ee:	bl	4704 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    57f2:	cmp	r0, #0
    57f4:	bne.w	56a4 <ExFatFile::write(void const*, unsigned int)+0xfc>
          DBG_FAIL_MACRO;
    57f8:	mov.w	r0, #736	; 0x2e0
    57fc:	bl	4c98 <dbgPrint(unsigned short)>
          goto fail;
    5800:	b.n	580a <ExFatFile::write(void const*, unsigned int)+0x262>
  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    5802:	mov.w	r0, #652	; 0x28c
    5806:	bl	4c98 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    580a:	ldrb.w	r3, [r6, #50]	; 0x32
    580e:	orr.w	r3, r3, #1
    5812:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    5816:	mov.w	r0, #4294967295
}
    581a:	add	sp, #20
    581c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5820:	add.w	r0, r0, #524	; 0x20c
    5824:	str	r1, [sp, #8]
    5826:	bl	466c <FsCache::invalidate()>
    582a:	ldr	r0, [r6, #32]
    582c:	ldr	r1, [sp, #8]
    582e:	b.n	57a4 <ExFatFile::write(void const*, unsigned int)+0x1fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5830:	ldrd	r2, r3, [r0, #16]
    5834:	bl	3f54 <ExFatFile::seekSet(unsigned long long)>
    5838:	cmp	r0, #0
    583a:	bne.w	55c4 <ExFatFile::write(void const*, unsigned int)+0x1c>
      DBG_FAIL_MACRO;
    583e:	movw	r0, #658	; 0x292
    5842:	bl	4c98 <dbgPrint(unsigned short)>
      goto fail;
    5846:	b.n	580a <ExFatFile::write(void const*, unsigned int)+0x262>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5848:	ldrb.w	r1, [r6, #51]	; 0x33
    584c:	ldr	r0, [sp, #4]
    584e:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5852:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5856:	strb.w	r1, [r6, #51]	; 0x33
    585a:	b.n	581a <ExFatFile::write(void const*, unsigned int)+0x272>
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    585c:	movw	r0, #769	; 0x301
    5860:	bl	4c98 <dbgPrint(unsigned short)>
        goto fail;
    5864:	b.n	580a <ExFatFile::write(void const*, unsigned int)+0x262>
    5866:	ldr	r0, [sp, #4]
    5868:	b.n	581a <ExFatFile::write(void const*, unsigned int)+0x272>
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    586a:	movw	r0, #689	; 0x2b1
    586e:	bl	4c98 <dbgPrint(unsigned short)>
            goto fail;
    5872:	b.n	580a <ExFatFile::write(void const*, unsigned int)+0x262>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5874:	movw	r0, #697	; 0x2b9
    5878:	bl	4c98 <dbgPrint(unsigned short)>
            goto fail;
    587c:	b.n	580a <ExFatFile::write(void const*, unsigned int)+0x262>
    587e:	ldrd	r2, r3, [r6]
    5882:	b.n	56ee <ExFatFile::write(void const*, unsigned int)+0x146>
    5884:	.word	0x1fff1990

00005888 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    5888:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    588a:	movs	r1, #10
    588c:	mov	r5, r0
    588e:	ldr	r0, [pc, #40]	; (58b8 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5890:	ldr	r4, [pc, #40]	; (58bc <dbgPrint(unsigned short)+0x34>)
    5892:	bl	96a8 <usb_serial_write>
    5896:	movs	r1, #11
    5898:	ldr	r0, [pc, #36]	; (58c0 <dbgPrint(unsigned short)+0x38>)
    589a:	bl	96a8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    589e:	movs	r0, #46	; 0x2e
    58a0:	bl	97b0 <usb_serial_putchar>
    58a4:	mov	r1, r5
    58a6:	mov	r0, r4
    58a8:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    58ac:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    58ae:	ldmia.w	sp!, {r3, r4, r5, lr}
    58b2:	b.w	abc4 <Print::println()>
    58b6:	nop
    58b8:	.word	0x0000fe9c
    58bc:	.word	0x1fff098c
    58c0:	.word	0x0000fee8

000058c4 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    58c4:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    58c6:	push	{r4, r5, r6, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    58c8:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    58cc:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    58ce:	mov	r1, r5
    58d0:	ldr	r0, [r0, #8]
    58d2:	bl	6af4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    58d6:	mov	r6, r0
    58d8:	cbz	r0, 58fc <FatFile::addCluster()+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    58da:	cbz	r5, 58f4 <FatFile::addCluster()+0x30>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    58dc:	ldr	r3, [r4, #16]
    58de:	adds	r5, #1
    58e0:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    58e2:	ldrb	r3, [r4, #2]
    58e4:	it	ne
    58e6:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    58ea:	orn	r3, r3, #127	; 0x7f
    58ee:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    58f0:	mov	r0, r6
    58f2:	pop	{r4, r5, r6, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    58f4:	ldrb	r3, [r4, #2]
    58f6:	orr.w	r3, r3, #64	; 0x40
    58fa:	b.n	58ea <FatFile::addCluster()+0x26>
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    58fc:	movs	r0, #35	; 0x23
    58fe:	bl	5888 <dbgPrint(unsigned short)>
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5902:	mov	r0, r6
    5904:	pop	{r4, r5, r6, pc}
    5906:	nop

00005908 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5908:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    590c:	ldrb	r3, [r0, #0]
    590e:	and.w	r3, r3, #32
    5912:	cmp	r3, #0
    5914:	bne.n	599a <FatFile::addDirCluster()+0x92>
    5916:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    591a:	ldr	r2, [r0, #20]
    591c:	ldr	r3, [pc, #184]	; (59d8 <FatFile::addDirCluster()+0xd0>)
    591e:	cmp	r2, r3
    5920:	mov	r5, r0
    5922:	bhi.n	598c <FatFile::addDirCluster()+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5924:	bl	58c4 <FatFile::addCluster()>
    5928:	mov	r8, r0
    592a:	cmp	r0, #0
    592c:	beq.n	59aa <FatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    592e:	ldr	r1, [r5, #16]
    5930:	ldr	r0, [r5, #8]
    5932:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
    5936:	mov	r6, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5938:	ldr	r0, [r5, #8]
    593a:	mov	r1, r6
    593c:	adds	r0, #40	; 0x28
    593e:	movs	r2, #5
    5940:	bl	693c <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5944:	mov	r7, r0
    5946:	cmp	r0, #0
    5948:	beq.n	59ce <FatFile::addDirCluster()+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    594a:	mov.w	r2, #512	; 0x200
    594e:	mov	r1, r4
    5950:	bl	c29c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5954:	ldr	r3, [r5, #8]
    5956:	ldrb	r2, [r3, #4]
    5958:	cmp	r2, #1
    595a:	bls.n	59b6 <FatFile::addDirCluster()+0xae>
    595c:	movs	r4, #1
    595e:	b.n	5968 <FatFile::addDirCluster()+0x60>
    5960:	ldr	r3, [r5, #8]
    5962:	ldrb	r2, [r3, #4]
    5964:	cmp	r2, r4
    5966:	bls.n	59b6 <FatFile::addDirCluster()+0xae>
    5968:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    596a:	ldr	r3, [r0, #0]
    596c:	adds	r1, r4, r6
    596e:	ldr	r3, [r3, #24]
    5970:	mov	r2, r7
    5972:	blx	r3
    5974:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5976:	mov	r3, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5978:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    597a:	cmp	r0, #0
    597c:	bne.n	5960 <FatFile::addDirCluster()+0x58>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    597e:	mov	r8, r3
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    if (!m_vol->writeSector(sector + i, pc->data)) {
      DBG_FAIL_MACRO;
    5980:	movs	r0, #83	; 0x53
    5982:	bl	5888 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5986:	mov	r0, r8
    5988:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    598c:	movs	r0, #66	; 0x42
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    598e:	mov	r8, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5990:	bl	5888 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5994:	mov	r0, r8
    5996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    599a:	movs	r0, #61	; 0x3d
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    599c:	mov.w	r8, #0
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    59a0:	bl	5888 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    59a4:	mov	r0, r8
    59a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    59aa:	movs	r0, #70	; 0x46
    59ac:	bl	5888 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    59b0:	mov	r0, r8
    59b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    59b6:	ldrb	r3, [r3, #6]
    59b8:	ldr	r1, [r5, #20]
    59ba:	mov.w	r2, #512	; 0x200
    59be:	lsl.w	r3, r2, r3
    59c2:	uxtah	r3, r1, r3
    59c6:	str	r3, [r5, #20]
  return true;

fail:
  return false;
}
    59c8:	mov	r0, r8
    59ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    59ce:	movs	r0, #76	; 0x4c
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    59d0:	mov	r8, r7
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    59d2:	bl	5888 <dbgPrint(unsigned short)>
    59d6:	b.n	5994 <FatFile::addDirCluster()+0x8c>
    59d8:	.word	0x001ffdff

000059dc <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    59dc:	push	{r3, r4, r5, lr}
    59de:	mov	r5, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    59e0:	ldr	r0, [r0, #8]
    59e2:	mov	r2, r1
    59e4:	adds	r0, #40	; 0x28
    59e6:	ldr	r1, [r5, #24]
    59e8:	bl	693c <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    59ec:	mov	r4, r0
    59ee:	cbz	r0, 59fc <FatFile::cacheDirEntry(unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    59f0:	ldrh	r0, [r5, #4]
    59f2:	and.w	r0, r0, #15
    59f6:	add.w	r0, r4, r0, lsl #5

fail:
  return nullptr;
}
    59fa:	pop	{r3, r4, r5, pc}
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    DBG_FAIL_MACRO;
    59fc:	movs	r0, #101	; 0x65
    59fe:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);

fail:
  return nullptr;
    5a02:	mov	r0, r4
    5a04:	pop	{r3, r4, r5, pc}
    5a06:	nop

00005a08 <FatFile::sync() [clone .part.38]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5a08:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5a0a:	ldrsb.w	r3, [r0, #2]
    5a0e:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5a10:	sub	sp, #8
    5a12:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5a14:	blt.n	5a52 <FatFile::sync() [clone .part.38]+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5a16:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5a18:	add.w	r0, r5, #40	; 0x28
    5a1c:	bl	69b8 <FatCache::sync()>
    5a20:	cbnz	r0, 5a38 <FatFile::sync() [clone .part.38]+0x30>
    return true;
  }
  DBG_FAIL_MACRO;
    5a22:	movw	r0, #1183	; 0x49f
    5a26:	bl	5888 <dbgPrint(unsigned short)>

fail:
  m_error |= WRITE_ERROR;
    5a2a:	ldrb	r3, [r4, #1]
    5a2c:	orr.w	r3, r3, #1
    5a30:	strb	r3, [r4, #1]
  return false;
    5a32:	movs	r0, #0
}
    5a34:	add	sp, #8
    5a36:	pop	{r4, r5, r6, pc}
    5a38:	add.w	r0, r5, #564	; 0x234
    5a3c:	bl	69b8 <FatCache::sync()>
    5a40:	cmp	r0, #0
    5a42:	beq.n	5a22 <FatFile::sync() [clone .part.38]+0x1a>
    5a44:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5a46:	ldr	r3, [r0, #0]
    5a48:	ldr	r3, [r3, #20]
    5a4a:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5a4c:	cmp	r0, #0
    5a4e:	beq.n	5a22 <FatFile::sync() [clone .part.38]+0x1a>
    5a50:	b.n	5a34 <FatFile::sync() [clone .part.38]+0x2c>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5a52:	movs	r1, #1
    5a54:	bl	59dc <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5a58:	mov	r5, r0
    5a5a:	cbz	r0, 5a9e <FatFile::sync() [clone .part.38]+0x96>
    5a5c:	ldrb	r3, [r0, #0]
    5a5e:	cmp	r3, #229	; 0xe5
    5a60:	beq.n	5a9e <FatFile::sync() [clone .part.38]+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5a62:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5a64:	ldr	r2, [pc, #64]	; (5aa8 <FatFile::sync() [clone .part.38]+0xa0>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5a66:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5a68:	itt	mi
    5a6a:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5a6c:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5a6e:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5a70:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5a72:	strh	r3, [r0, #26]
    5a74:	lsrs	r3, r3, #16
    5a76:	strh	r3, [r0, #20]
    5a78:	cbz	r6, 5a94 <FatFile::sync() [clone .part.38]+0x8c>
      FsDateTime::callback(&date, &time, &ms10);
    5a7a:	add.w	r2, sp, #3
    5a7e:	add.w	r1, sp, #6
    5a82:	add	r0, sp, #4
    5a84:	blx	r6
      setLe16(dir->modifyDate, date);
    5a86:	ldrh.w	r3, [sp, #4]
    5a8a:	ldrh.w	r2, [sp, #6]
    5a8e:	strh	r3, [r5, #24]
    5a90:	strh	r3, [r5, #18]
    5a92:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5a94:	ldrb	r3, [r4, #2]
    5a96:	and.w	r3, r3, #127	; 0x7f
    5a9a:	strb	r3, [r4, #2]
    5a9c:	b.n	5a16 <FatFile::sync() [clone .part.38]+0xe>
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
    5a9e:	movw	r0, #1158	; 0x486
    5aa2:	bl	5888 <dbgPrint(unsigned short)>
    5aa6:	b.n	5a2a <FatFile::sync() [clone .part.38]+0x22>
    5aa8:	.word	0x1fff1990

00005aac <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5aac:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5aae:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5ab0:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5ab2:	cbnz	r3, 5abe <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5ab4:	movs	r3, #0
    5ab6:	strb	r3, [r4, #0]
  m_flags = 0;
    5ab8:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5aba:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    5abc:	pop	{r4, pc}
    5abe:	bl	5a08 <FatFile::sync() [clone .part.38]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5ac2:	movs	r3, #0
    5ac4:	strb	r3, [r4, #0]
  m_flags = 0;
    5ac6:	strb	r3, [r4, #2]
  return rtn;
}
    5ac8:	pop	{r4, pc}
    5aca:	nop

00005acc <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5acc:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    5ace:	ldrb	r4, [r0, #0]
    5ad0:	cbnz	r4, 5afe <FatFile::openRoot(FatVolume*)+0x32>
    5ad2:	mov	r5, r0
    5ad4:	mov	r6, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5ad6:	movs	r2, #36	; 0x24
    5ad8:	mov	r1, r4
    5ada:	bl	c29c <memset>

  m_vol = vol;
    5ade:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    5ae0:	ldrb	r3, [r6, #7]
    5ae2:	cmp	r3, #16
    5ae4:	beq.n	5af4 <FatFile::openRoot(FatVolume*)+0x28>
    5ae6:	cmp	r3, #32
    5ae8:	bne.n	5b0a <FatFile::openRoot(FatVolume*)+0x3e>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5aea:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5aec:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5aee:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5af0:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    5af2:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5af4:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5af6:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5af8:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5afa:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    5afc:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    5afe:	movw	r0, #639	; 0x27f
    5b02:	bl	5888 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5b06:	movs	r0, #0
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    5b08:	pop	{r4, r5, r6, pc}
  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    break;

  default:
    DBG_FAIL_MACRO;
    5b0a:	movw	r0, #658	; 0x292
    5b0e:	bl	5888 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5b12:	mov	r0, r4
    5b14:	pop	{r4, r5, r6, pc}
    5b16:	nop

00005b18 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5b18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5b1c:	mov	r6, r0
    5b1e:	sub	sp, #76	; 0x4c
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5b20:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5b22:	str	r2, [sp, #4]
    5b24:	movs	r0, #0
    5b26:	strb.w	r0, [sp, #36]	; 0x24
    5b2a:	strb.w	r0, [sp, #37]	; 0x25
    5b2e:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5b32:	cmp	r4, #0
    5b34:	bne.n	5bc0 <FatFile::open(FatFile*, char const*, int)+0xa8>
    5b36:	mov	r9, r3
    5b38:	ldrb	r3, [r1, #0]
    5b3a:	tst.w	r3, #112	; 0x70
    5b3e:	mov	r5, r1
    5b40:	beq.n	5bc0 <FatFile::open(FatFile*, char const*, int)+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5b42:	ldrb	r3, [r2, #0]
    5b44:	cmp	r3, #47	; 0x2f
    5b46:	mov	r0, r2
    5b48:	beq.n	5ba2 <FatFile::open(FatFile*, char const*, int)+0x8a>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5b4a:	mov.w	r8, #0
    5b4e:	b.n	5b5c <FatFile::open(FatFile*, char const*, int)+0x44>
    5b50:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5b52:	strb.w	r8, [r6]
  m_flags = 0;
    5b56:	strb.w	r8, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5b5a:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5b5c:	add	r2, sp, #4
    5b5e:	add	r1, sp, #12
    5b60:	bl	7020 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5b64:	add	r2, sp, #12
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5b66:	mov	r7, r0
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5b68:	mov	r1, r5
    5b6a:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5b6c:	cmp	r0, #0
    5b6e:	beq.n	5bd2 <FatFile::open(FatFile*, char const*, int)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5b70:	ldr	r4, [sp, #4]
    5b72:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5b74:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5b76:	cmp	r4, #0
    5b78:	beq.n	5be2 <FatFile::open(FatFile*, char const*, int)+0xca>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5b7a:	bl	7574 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5b7e:	mov	r5, r6
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5b80:	mov	r7, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5b82:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5b84:	cmp	r0, #0
    5b86:	beq.n	5bf8 <FatFile::open(FatFile*, char const*, int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5b88:	ldmia	r5!, {r0, r1, r2, r3}
    5b8a:	stmia	r4!, {r0, r1, r2, r3}
    5b8c:	ldmia	r5!, {r0, r1, r2, r3}
    5b8e:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b90:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5b92:	ldr	r2, [r5, #0]
    5b94:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b96:	cmp	r3, #0
    5b98:	beq.n	5b50 <FatFile::open(FatFile*, char const*, int)+0x38>
    5b9a:	mov	r0, r6
    5b9c:	bl	5a08 <FatFile::sync() [clone .part.38]>
    5ba0:	b.n	5b50 <FatFile::open(FatFile*, char const*, int)+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5ba2:	adds	r0, #1
    5ba4:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5ba6:	ldrb	r3, [r0, #0]
    5ba8:	cmp	r3, #47	; 0x2f
    5baa:	beq.n	5ba2 <FatFile::open(FatFile*, char const*, int)+0x8a>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5bac:	ldr	r1, [r5, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    5bae:	cbz	r3, 5c08 <FatFile::open(FatFile*, char const*, int)+0xf0>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5bb0:	add	r0, sp, #36	; 0x24
    5bb2:	bl	5acc <FatFile::openRoot(FatVolume*)>
    5bb6:	mov	r7, r0
    5bb8:	cbz	r0, 5c12 <FatFile::open(FatFile*, char const*, int)+0xfa>
    5bba:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5bbc:	add	r5, sp, #36	; 0x24
    5bbe:	b.n	5b4a <FatFile::open(FatFile*, char const*, int)+0x32>
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    5bc0:	mov.w	r0, #418	; 0x1a2
    5bc4:	bl	5888 <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5bc8:	movs	r7, #0
}
    5bca:	mov	r0, r7
    5bcc:	add	sp, #76	; 0x4c
    5bce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    5bd2:	mov.w	r0, #436	; 0x1b4
    5bd6:	bl	5888 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5bda:	mov	r0, r7
    5bdc:	add	sp, #76	; 0x4c
    5bde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5be2:	mov	r3, r9
    5be4:	add	r2, sp, #12
    5be6:	mov	r1, r5
    5be8:	mov	r0, r6
    5bea:	bl	7574 <FatFile::open(FatFile*, fname_t*, int)>
    5bee:	mov	r7, r0

fail:
  return false;
}
    5bf0:	mov	r0, r7
    5bf2:	add	sp, #76	; 0x4c
    5bf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    5bf8:	movw	r0, #443	; 0x1bb
    5bfc:	bl	5888 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5c00:	mov	r0, r7
    5c02:	add	sp, #76	; 0x4c
    5c04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5c08:	mov	r0, r6
    5c0a:	bl	5acc <FatFile::openRoot(FatVolume*)>
    5c0e:	mov	r7, r0
    5c10:	b.n	5bca <FatFile::open(FatFile*, char const*, int)+0xb2>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    5c12:	movw	r0, #429	; 0x1ad
    5c16:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    5c1a:	b.n	5bca <FatFile::open(FatFile*, char const*, int)+0xb2>

00005c1c <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5c1c:	cbz	r1, 5c26 <FatFile::open(FatVolume*, char const*, int)+0xa>
    5c1e:	add.w	r1, r1, #1088	; 0x440
    5c22:	b.w	5b18 <FatFile::open(FatFile*, char const*, int)>
}
    5c26:	mov	r0, r1
    5c28:	bx	lr
    5c2a:	nop

00005c2c <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5c2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5c30:	ldrb	r3, [r0, #2]
    5c32:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5c34:	sub	sp, #12
    5c36:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5c38:	bpl.w	5de4 <FatFile::read(void*, unsigned int)+0x1b8>
    5c3c:	mov	r7, r1
    5c3e:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5c40:	lsls	r6, r1, #28
    5c42:	mov	r9, r2
    5c44:	bmi.w	5d56 <FatFile::read(void*, unsigned int)+0x12a>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5c48:	lsls	r4, r1, #26
    5c4a:	bpl.n	5c5e <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5c4c:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5c4e:	ldr	r3, [r0, #20]
    5c50:	ldrh	r2, [r2, #8]
    5c52:	rsb	r3, r3, r2, lsl #5
    5c56:	uxth	r3, r3
    5c58:	cmp	r9, r3
    5c5a:	it	cs
    5c5c:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5c5e:	cmp.w	r9, #0
    5c62:	beq.w	5da0 <FatFile::read(void*, unsigned int)+0x174>
    5c66:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5c68:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5c6a:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5c6c:	mov	r6, r9
    5c6e:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5c72:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5c76:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5c7a:	bpl.n	5cfc <FatFile::read(void*, unsigned int)+0xd0>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5c7c:	ldr	r1, [r2, #32]
    5c7e:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5c82:	cmp.w	fp, #0
    5c86:	bne.n	5d30 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5c88:	cmp.w	r6, #512	; 0x200
    5c8c:	bcc.n	5d30 <FatFile::read(void*, unsigned int)+0x104>
    5c8e:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    5c90:	cmp	r1, r3
    5c92:	beq.n	5d30 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5c94:	cmp.w	r6, #1024	; 0x400
    5c98:	bcc.n	5d68 <FatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5c9a:	ldrb	r0, [r5, #0]
    5c9c:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5c9e:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5ca2:	bmi.n	5cb0 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5ca4:	ldrb	r0, [r2, #4]
    5ca6:	rsb	r0, r8, r0
    5caa:	cmp	fp, r0
    5cac:	it	cs
    5cae:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5cb0:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5cb2:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5cb6:	bhi.n	5cd2 <FatFile::read(void*, unsigned int)+0xa6>
    5cb8:	add	r3, fp
    5cba:	cmp	r1, r3
    5cbc:	bcs.n	5cd2 <FatFile::read(void*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5cbe:	add.w	r0, r2, #40	; 0x28
    5cc2:	str	r1, [sp, #4]
    5cc4:	bl	69b8 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    5cc8:	cmp	r0, #0
    5cca:	beq.w	5dd0 <FatFile::read(void*, unsigned int)+0x1a4>
    5cce:	ldr	r2, [r5, #8]
    5cd0:	ldr	r1, [sp, #4]
    5cd2:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5cd4:	ldr	r2, [r0, #0]
    5cd6:	mov	r3, fp
    5cd8:	ldr.w	fp, [r2, #12]
    5cdc:	mov	r2, r7
    5cde:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5ce0:	cmp	r0, #0
    5ce2:	beq.n	5dc6 <FatFile::read(void*, unsigned int)+0x19a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5ce4:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5ce6:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5ce8:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5cea:	add	r7, r4
    m_curPosition += n;
    5cec:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5cee:	beq.n	5da0 <FatFile::read(void*, unsigned int)+0x174>
    5cf0:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5cf2:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5cf4:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5cf6:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5cfa:	bmi.n	5c7c <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5cfc:	ldrb.w	r8, [r2, #5]
    5d00:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5d04:	cmp.w	fp, #0
    5d08:	bne.n	5d64 <FatFile::read(void*, unsigned int)+0x138>
    5d0a:	cmp.w	r8, #0
    5d0e:	bne.n	5d64 <FatFile::read(void*, unsigned int)+0x138>
        // start of new cluster
        if (m_curPosition == 0) {
    5d10:	cmp	r3, #0
    5d12:	bne.n	5d7a <FatFile::read(void*, unsigned int)+0x14e>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5d14:	lsls	r1, r1, #25
    5d16:	ite	mi
    5d18:	ldrmi	r1, [r2, #32]
    5d1a:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5d1c:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5d1e:	mov	r0, r2
    5d20:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
    5d24:	ldr	r2, [r5, #8]
    5d26:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5d2a:	cmp.w	fp, #0
    5d2e:	beq.n	5c88 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5d30:	add.w	r0, r2, #40	; 0x28
    5d34:	movs	r2, #0
    5d36:	bl	693c <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    5d3a:	cmp	r0, #0
    5d3c:	beq.n	5dac <FatFile::read(void*, unsigned int)+0x180>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5d3e:	rsb	r4, fp, #512	; 0x200
    5d42:	cmp	r4, r6
    5d44:	it	cs
    5d46:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5d48:	add.w	r1, r0, fp
    5d4c:	mov	r2, r4
    5d4e:	mov	r0, r7
    5d50:	bl	94a8 <memcpy>
    5d54:	b.n	5ce4 <FatFile::read(void*, unsigned int)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5d56:	ldr	r3, [r0, #28]
    5d58:	ldr	r2, [r0, #20]
    5d5a:	subs	r3, r3, r2
    5d5c:	cmp	r9, r3
    5d5e:	it	cs
    5d60:	movcs	r9, r3
    5d62:	b.n	5c5e <FatFile::read(void*, unsigned int)+0x32>
    5d64:	ldr	r1, [r5, #16]
    5d66:	b.n	5d1e <FatFile::read(void*, unsigned int)+0xf2>
    5d68:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5d6a:	ldr	r3, [r0, #0]
    5d6c:	mov	r2, r7
    5d6e:	ldr	r3, [r3, #8]
    5d70:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    5d72:	cbz	r0, 5dda <FatFile::read(void*, unsigned int)+0x1ae>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5d74:	mov.w	r4, #512	; 0x200
    5d78:	b.n	5ce4 <FatFile::read(void*, unsigned int)+0xb8>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5d7a:	lsls	r3, r1, #28
    5d7c:	bpl.n	5d8a <FatFile::read(void*, unsigned int)+0x15e>
    5d7e:	ldrb	r3, [r5, #2]
    5d80:	lsls	r4, r3, #25
    5d82:	bpl.n	5d8a <FatFile::read(void*, unsigned int)+0x15e>
          m_curCluster++;
    5d84:	ldr	r1, [r5, #16]
    5d86:	adds	r1, #1
    5d88:	b.n	5d1c <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5d8a:	mov	r0, r2
    5d8c:	ldr	r1, [r5, #16]
    5d8e:	mov	r2, sl
    5d90:	bl	69d4 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5d94:	cmp	r0, #0
    5d96:	blt.n	5e00 <FatFile::read(void*, unsigned int)+0x1d4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5d98:	beq.n	5dee <FatFile::read(void*, unsigned int)+0x1c2>
    5d9a:	ldr	r2, [r5, #8]
    5d9c:	ldr	r1, [r5, #16]
    5d9e:	b.n	5d1e <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5da0:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5da2:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5da6:	add	sp, #12
    5da8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    5dac:	movw	r0, #750	; 0x2ee
    5db0:	bl	5888 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5db4:	ldrb	r3, [r5, #1]
  return -1;
    5db6:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5dba:	orr.w	r3, r3, #2
    5dbe:	strb	r3, [r5, #1]
  return -1;
}
    5dc0:	add	sp, #12
    5dc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    5dc6:	movw	r0, #775	; 0x307
    5dca:	bl	5888 <dbgPrint(unsigned short)>
        goto fail;
    5dce:	b.n	5db4 <FatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
    5dd0:	movw	r0, #770	; 0x302
    5dd4:	bl	5888 <dbgPrint(unsigned short)>
          goto fail;
    5dd8:	b.n	5db4 <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    5dda:	movw	r0, #783	; 0x30f
    5dde:	bl	5888 <dbgPrint(unsigned short)>
        goto fail;
    5de2:	b.n	5db4 <FatFile::read(void*, unsigned int)+0x188>
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    DBG_FAIL_MACRO;
    5de4:	movw	r0, #689	; 0x2b1
    5de8:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
    5dec:	b.n	5db4 <FatFile::read(void*, unsigned int)+0x188>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5dee:	ldrb	r3, [r5, #0]
    5df0:	tst.w	r3, #112	; 0x70
    5df4:	bne.n	5da2 <FatFile::read(void*, unsigned int)+0x176>
              break;
            }
            DBG_FAIL_MACRO;
    5df6:	movw	r0, #733	; 0x2dd
    5dfa:	bl	5888 <dbgPrint(unsigned short)>
            goto fail;
    5dfe:	b.n	5db4 <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    5e00:	movw	r0, #726	; 0x2d6
    5e04:	bl	5888 <dbgPrint(unsigned short)>
            goto fail;
    5e08:	b.n	5db4 <FatFile::read(void*, unsigned int)+0x188>
    5e0a:	nop

00005e0c <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5e0c:	push	{r4, r5, r6, lr}
    5e0e:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5e10:	movs	r2, #1
    5e12:	add.w	r1, sp, #7
    5e16:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5e18:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5e1a:	ldr	r5, [r0, #16]
    5e1c:	bl	5c2c <FatFile::read(void*, unsigned int)>
    5e20:	cmp	r0, #1
    5e22:	it	eq
    5e24:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5e28:	str	r6, [r4, #20]
    5e2a:	it	ne
    5e2c:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5e30:	str	r5, [r4, #16]
  return c;
}
    5e32:	add	sp, #8
    5e34:	pop	{r4, r5, r6, pc}
    5e36:	nop

00005e38 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5e38:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5e3a:	ldr	r3, [r0, #20]
    5e3c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5e40:	sub	sp, #12
    5e42:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5e44:	cbz	r5, 5e48 <FatFile::readDirCache(bool)+0x10>
    5e46:	cbnz	r1, 5e70 <FatFile::readDirCache(bool)+0x38>
    int8_t n = read(&n, 1);
    5e48:	movs	r2, #1
    5e4a:	add.w	r1, sp, #7
    5e4e:	mov	r0, r4
    5e50:	bl	5c2c <FatFile::read(void*, unsigned int)>
    5e54:	sxtb	r0, r0
    if  (n != 1) {
    5e56:	cmp	r0, #1
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    5e58:	strb.w	r0, [sp, #7]
    if  (n != 1) {
    5e5c:	bne.n	5e76 <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    5e5e:	ldr	r3, [r4, #20]
    5e60:	adds	r3, #31
    5e62:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5e64:	ldr	r0, [r4, #8]
    5e66:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5e68:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    5e6c:	add	sp, #12
    5e6e:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    5e70:	adds	r3, #32
    5e72:	str	r3, [r0, #20]
    5e74:	b.n	5e64 <FatFile::readDirCache(bool)+0x2c>
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
    5e76:	cbz	r0, 5e80 <FatFile::readDirCache(bool)+0x48>
        DBG_FAIL_MACRO;
    5e78:	movw	r0, #834	; 0x342
    5e7c:	bl	5888 <dbgPrint(unsigned short)>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    5e80:	movs	r0, #0
}
    5e82:	add	sp, #12
    5e84:	pop	{r4, r5, pc}
    5e86:	nop

00005e88 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5e88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e8c:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5e8e:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5e90:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5e92:	cmp	r3, #0
    5e94:	beq.n	5f06 <FatFile::seekSet(unsigned long)+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5e96:	ldr	r2, [r0, #20]
    5e98:	cmp	r2, r1
    5e9a:	mov	r6, r1
    5e9c:	beq.n	5f2e <FatFile::seekSet(unsigned long)+0xa6>
    return true;
  }
  if (pos == 0) {
    5e9e:	cbnz	r1, 5eb2 <FatFile::seekSet(unsigned long)+0x2a>
    // set position to start of file
    m_curCluster = 0;
    5ea0:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5ea2:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5ea4:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5ea6:	bic.w	r3, r3, #32
    5eaa:	strb	r3, [r4, #2]
  return true;
    5eac:	movs	r0, #1
    5eae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5eb2:	lsls	r0, r3, #28
    5eb4:	bpl.n	5f16 <FatFile::seekSet(unsigned long)+0x8e>
    if (pos > m_fileSize) {
    5eb6:	ldr	r1, [r4, #28]
    5eb8:	cmp	r6, r1
    5eba:	bhi.n	5f38 <FatFile::seekSet(unsigned long)+0xb0>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5ebc:	ldr.w	lr, [r4, #8]
    5ec0:	ldrb.w	r5, [lr, #6]
    5ec4:	adds	r5, #9
    5ec6:	uxtb	r1, r5
    5ec8:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5eca:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5ecc:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5ece:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5ed0:	cmp	r0, r5
    5ed2:	bhi.n	5ed6 <FatFile::seekSet(unsigned long)+0x4e>
    5ed4:	cbnz	r2, 5f34 <FatFile::seekSet(unsigned long)+0xac>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5ed6:	lsls	r3, r3, #25
    5ed8:	ite	mi
    5eda:	ldrmi.w	r3, [lr, #32]
    5ede:	ldrpl	r3, [r4, #32]
    5ee0:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5ee2:	add.w	r8, r4, #16
    5ee6:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5ee8:	cmp	r5, #0
    5eea:	beq.n	5ea2 <FatFile::seekSet(unsigned long)+0x1a>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5eec:	ldr	r1, [r4, #16]
    5eee:	ldr	r0, [r4, #8]
    5ef0:	bl	69d4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5ef4:	cmp	r0, #0
    5ef6:	add.w	r5, r5, #4294967295
    5efa:	bgt.n	5ee6 <FatFile::seekSet(unsigned long)+0x5e>
      DBG_FAIL_MACRO;
    5efc:	movw	r0, #1133	; 0x46d
    5f00:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    5f04:	b.n	5f0e <FatFile::seekSet(unsigned long)+0x86>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    5f06:	mov.w	r0, #1096	; 0x448
    5f0a:	bl	5888 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    5f0e:	str	r7, [r4, #16]
  return false;
    5f10:	movs	r0, #0
    5f12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5f16:	lsls	r1, r3, #26
    5f18:	bpl.n	5ebc <FatFile::seekSet(unsigned long)+0x34>
    5f1a:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5f1c:	ldrh	r3, [r3, #8]
    5f1e:	cmp.w	r6, r3, lsl #5
    5f22:	bls.n	5ea2 <FatFile::seekSet(unsigned long)+0x1a>
      goto done;
    }
    DBG_FAIL_MACRO;
    5f24:	movw	r0, #1117	; 0x45d
    5f28:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
    5f2c:	b.n	5f0e <FatFile::seekSet(unsigned long)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5f2e:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5f30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5f34:	subs	r5, r5, r0
    5f36:	b.n	5ee2 <FatFile::seekSet(unsigned long)+0x5a>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
    5f38:	movw	r0, #1110	; 0x456
    5f3c:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    5f40:	b.n	5f0e <FatFile::seekSet(unsigned long)+0x86>
    5f42:	nop

00005f44 <FatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    5f44:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    5f46:	ldrb	r3, [r0, #0]
    5f48:	lsls	r2, r3, #27
    5f4a:	bmi.n	5f58 <FatFile::rmdir()+0x14>
    DBG_FAIL_MACRO;
    5f4c:	mov.w	r0, #976	; 0x3d0
    5f50:	bl	5888 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    5f54:	movs	r0, #0
    5f56:	pop	{r4, pc}
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5f58:	movs	r1, #0
    5f5a:	mov	r4, r0
    5f5c:	bl	5e88 <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    5f60:	movs	r1, #1
    5f62:	mov	r0, r4
    5f64:	bl	5e38 <FatFile::readDirCache(bool)>
    if (!dir) {
    5f68:	cbz	r0, 5f88 <FatFile::rmdir()+0x44>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    5f6a:	ldrb	r3, [r0, #0]
    5f6c:	cbz	r3, 5f8c <FatFile::rmdir()+0x48>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    5f6e:	cmp	r3, #229	; 0xe5
    5f70:	beq.n	5f60 <FatFile::rmdir()+0x1c>
    5f72:	cmp	r3, #46	; 0x2e
    5f74:	beq.n	5f60 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    5f76:	ldrb	r3, [r0, #11]
    5f78:	lsls	r3, r3, #28
    5f7a:	bmi.n	5f60 <FatFile::rmdir()+0x1c>
      DBG_FAIL_MACRO;
    5f7c:	movw	r0, #1002	; 0x3ea
    5f80:	bl	5888 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    5f84:	movs	r0, #0
    5f86:	pop	{r4, pc}
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    5f88:	ldrb	r3, [r4, #1]
    5f8a:	cbnz	r3, 5fa2 <FatFile::rmdir()+0x5e>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    5f8c:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5f8e:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    5f90:	orr.w	r3, r3, #2
    5f94:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    5f96:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5f98:	mov	r0, r4

fail:
  return false;
}
    5f9a:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    5f9e:	b.w	728c <FatFile::remove()>
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
        break;
      }
      DBG_FAIL_MACRO;
    5fa2:	movw	r0, #989	; 0x3dd
    5fa6:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    5faa:	b.n	5f54 <FatFile::rmdir()+0x10>

00005fac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5fac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fb0:	mov	r8, r1
    5fb2:	mov	r7, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5fb4:	movs	r1, #0
    5fb6:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5fb8:	mov	r4, r0
    5fba:	mov	r6, r3
    5fbc:	ldrb.w	r5, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5fc0:	bl	c29c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5fc4:	ldr.w	r0, [r8, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5fc8:	ldr.w	r3, [r8, #32]
    5fcc:	str	r3, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5fce:	and.w	r2, r7, #15
    5fd2:	add.w	r3, r0, #52	; 0x34
    5fd6:	add.w	r2, r3, r2, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    5fda:	strh	r7, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5fdc:	str	r0, [r4, #8]
    5fde:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5fe0:	lsls	r7, r1, #28
    5fe2:	bmi.n	601c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5fe4:	and.w	r1, r1, #23
    5fe8:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    5fea:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5fec:	strb	r5, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5fee:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5ff2:	it	eq
    5ff4:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5ff8:	and.w	r3, r6, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    5ffc:	it	eq
    5ffe:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    6000:	cmp	r3, #1
    6002:	beq.n	60aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xfe>
    6004:	cmp	r3, #2
    6006:	beq.n	602e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>
    6008:	cbz	r3, 604c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
      break;

    default:
      DBG_FAIL_MACRO;
    600a:	movw	r0, #541	; 0x21d
    600e:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    6012:	movs	r0, #0
    6014:	strb	r0, [r4, #0]
  m_flags = 0;
    6016:	strb	r0, [r4, #2]
  return false;
    6018:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    601c:	movw	r0, #514	; 0x202
    6020:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    6024:	movs	r0, #0
    6026:	strb	r0, [r4, #0]
  m_flags = 0;
    6028:	strb	r0, [r4, #2]
  return false;
    602a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    602e:	ldrb	r3, [r4, #0]
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    6030:	movs	r5, #3
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6032:	tst.w	r3, #17
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    6036:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6038:	beq.n	60b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x10a>
      DBG_FAIL_MACRO;
    603a:	movw	r0, #547	; 0x223
    603e:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    6042:	movs	r0, #0
    6044:	strb	r0, [r4, #0]
  m_flags = 0;
    6046:	strb	r0, [r4, #2]
  return false;
    6048:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    604c:	ands.w	lr, r6, #1024	; 0x400
    6050:	bne.n	60ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x122>
    6052:	movs	r5, #1
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6054:	and.w	r3, r6, #8
    6058:	orrs	r5, r3
    605a:	uxtb	r5, r5
    605c:	strb	r5, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    605e:	ldrh	r1, [r2, #20]
    6060:	ldrh	r3, [r2, #26]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    6062:	ldr	r7, [r0, #48]	; 0x30
    6064:	str	r7, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    6066:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    606a:	cmp.w	lr, #0
    606e:	beq.n	6082 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6070:	cbnz	r1, 60be <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x112>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6072:	orn	r5, r5, #127	; 0x7f
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6076:	lsls	r3, r6, #17
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6078:	strb	r5, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    607a:	bmi.n	608c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    607c:	movs	r0, #1
    607e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    6082:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6084:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    6086:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6088:	lsls	r3, r6, #17
    608a:	bpl.n	607c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    608c:	ldr	r1, [r4, #28]
    608e:	mov	r0, r4
    6090:	bl	5e88 <FatFile::seekSet(unsigned long)>
    6094:	cmp	r0, #0
    6096:	bne.n	607c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    DBG_FAIL_MACRO;
    6098:	mov.w	r0, #572	; 0x23c
    609c:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    60a0:	movs	r0, #0
    60a2:	strb	r0, [r4, #0]
  m_flags = 0;
    60a4:	strb	r0, [r4, #2]
  return false;
    60a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    60aa:	ldrb	r3, [r4, #0]
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    60ac:	movs	r5, #2
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    60ae:	tst.w	r3, #17
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    60b2:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    60b4:	bne.n	603a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    60b6:	sxtb	r5, r5
    60b8:	and.w	lr, r6, #1024	; 0x400
    60bc:	b.n	6054 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    60be:	bl	6bb4 <FatPartition::freeChain(unsigned long)>
    60c2:	cbnz	r0, 60d8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x12c>
      DBG_FAIL_MACRO;
    60c4:	movw	r0, #561	; 0x231
    60c8:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    60cc:	b.n	6012 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
        DBG_FAIL_MACRO;
    60ce:	movw	r0, #526	; 0x20e
    60d2:	bl	5888 <dbgPrint(unsigned short)>
        goto fail;
    60d6:	b.n	6012 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    60d8:	ldrb	r5, [r4, #2]
    60da:	b.n	6072 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>

000060dc <FatFile::openNext(FatFile*, int)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    60dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    60e0:	ldrb	r3, [r0, #0]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    60e2:	sub	sp, #12
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    60e4:	cbnz	r3, 60f0 <FatFile::openNext(FatFile*, int)+0x14>
    60e6:	ldrb	r3, [r1, #0]
    60e8:	tst.w	r3, #112	; 0x70
    60ec:	mov	r5, r1
    60ee:	bne.n	6102 <FatFile::openNext(FatFile*, int)+0x26>
    DBG_FAIL_MACRO;
    60f0:	movw	r0, #591	; 0x24f
    60f4:	bl	5888 <dbgPrint(unsigned short)>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    60f8:	movs	r4, #0
}
    60fa:	mov	r0, r4
    60fc:	add	sp, #12
    60fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6102:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6104:	ands.w	r7, r6, #31
    6108:	bne.n	60f0 <FatFile::openNext(FatFile*, int)+0x14>
    610a:	mov	r8, r0
    610c:	mov	r9, r2
    610e:	mov	sl, r7
    6110:	b.n	6116 <FatFile::openNext(FatFile*, int)+0x3a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    6112:	movs	r7, #0
    6114:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    6116:	movs	r1, #0
    6118:	mov	r0, r5
    611a:	bl	5e38 <FatFile::readDirCache(bool)>
    if (!dir) {
    611e:	mov	r4, r0
    6120:	cbz	r0, 614e <FatFile::openNext(FatFile*, int)+0x72>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    6122:	ldrb	r3, [r0, #0]
    6124:	cmp	r3, #0
    6126:	beq.n	60f8 <FatFile::openNext(FatFile*, int)+0x1c>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6128:	cmp	r3, #46	; 0x2e
    612a:	beq.n	6112 <FatFile::openNext(FatFile*, int)+0x36>
    612c:	cmp	r3, #229	; 0xe5
    612e:	beq.n	6112 <FatFile::openNext(FatFile*, int)+0x36>
    6130:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    6132:	and.w	r2, r1, #8
    6136:	and.w	fp, r2, #255	; 0xff
    613a:	cbz	r2, 615e <FatFile::openNext(FatFile*, int)+0x82>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    613c:	cmp	r1, #15
    613e:	bne.n	6112 <FatFile::openNext(FatFile*, int)+0x36>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6140:	lsls	r2, r3, #25
    6142:	bpl.n	6114 <FatFile::openNext(FatFile*, int)+0x38>
        lfnOrd = ldir->order & 0X1F;
    6144:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    6148:	ldrb.w	sl, [r0, #13]
    614c:	b.n	6114 <FatFile::openNext(FatFile*, int)+0x38>
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    614e:	ldrb	r3, [r5, #1]
    6150:	cmp	r3, #0
    6152:	beq.n	60f8 <FatFile::openNext(FatFile*, int)+0x1c>
        DBG_FAIL_MACRO;
    6154:	mov.w	r0, #600	; 0x258
    6158:	bl	5888 <dbgPrint(unsigned short)>
    615c:	b.n	60fa <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    615e:	cbnz	r7, 6180 <FatFile::openNext(FatFile*, int)+0xa4>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    6160:	str	r7, [sp, #0]
    6162:	mov	r3, r9
    6164:	ubfx	r2, r6, #5, #16
    6168:	mov	r1, r5
    616a:	mov	r0, r8
    616c:	bl	5fac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6170:	mov	r4, r0
    6172:	cmp	r0, #0
    6174:	bne.n	60fa <FatFile::openNext(FatFile*, int)+0x1e>
        DBG_FAIL_MACRO;
    6176:	movw	r0, #617	; 0x269
    617a:	bl	5888 <dbgPrint(unsigned short)>
        goto fail;
    617e:	b.n	60fa <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6180:	bl	6e98 <FatFile::lfnChecksum(unsigned char*)>
    6184:	cmp	sl, r0
    6186:	beq.n	6160 <FatFile::openNext(FatFile*, int)+0x84>
        DBG_FAIL_MACRO;
    6188:	movw	r0, #613	; 0x265
      lfnOrd = 0;
    }
  }

fail:
  return false;
    618c:	mov	r4, fp
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
    618e:	bl	5888 <dbgPrint(unsigned short)>
        goto fail;
    6192:	b.n	60fa <FatFile::openNext(FatFile*, int)+0x1e>

00006194 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    6194:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    6198:	ldrb	r3, [r1, #0]
    619a:	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    619e:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    61a0:	beq.w	62d2 <FatFile::mkdir(FatFile*, fname_t*)+0x13e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    61a4:	movw	r3, #2562	; 0xa02
    61a8:	mov	r6, r1
    61aa:	mov	r4, r0
    61ac:	bl	7574 <FatFile::open(FatFile*, fname_t*, int)>
    61b0:	cmp	r0, #0
    61b2:	beq.w	62c2 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    61b6:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    61b8:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    61ba:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    61bc:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    61be:	mov	r0, r4
    61c0:	bl	5908 <FatFile::addDirCluster()>
    61c4:	cmp	r0, #0
    61c6:	beq.w	62f8 <FatFile::mkdir(FatFile*, fname_t*)+0x164>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    61ca:	ldr	r3, [r4, #16]
    61cc:	str	r3, [r4, #32]
    61ce:	movs	r1, #0
    61d0:	mov	r0, r4
    61d2:	bl	5e88 <FatFile::seekSet(unsigned long)>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    61d6:	ldrb	r3, [r4, #0]
    61d8:	cmp	r3, #0
    61da:	bne.w	62e2 <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    61de:	movs	r1, #1
    61e0:	mov	r0, r4
    61e2:	bl	59dc <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    61e6:	mov	r5, r0
    61e8:	cmp	r0, #0
    61ea:	beq.w	6312 <FatFile::mkdir(FatFile*, fname_t*)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    61ee:	movs	r3, #16
    61f0:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    61f2:	ldr	r2, [r0, #8]
    61f4:	ldr	r1, [r5, #4]
    61f6:	ldr	r3, [r5, #12]
    61f8:	ldr	r0, [r0, #0]
    61fa:	ldrh.w	r8, [r5, #20]
    61fe:	ldrh.w	r9, [r5, #26]
    6202:	mov	r7, sp
    6204:	stmia	r7!, {r0, r1, r2, r3}
    6206:	ldr	r1, [r5, #20]
    6208:	ldr	r2, [r5, #24]
    620a:	ldr	r3, [r5, #28]
    620c:	ldr	r0, [r5, #16]
  dot.name[0] = '.';
    620e:	add	r5, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    6210:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    6212:	movs	r3, #46	; 0x2e
    6214:	strb.w	r3, [r5, #-32]!
    6218:	add.w	r1, sp, #10
    621c:	mov	r3, r5
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    621e:	movs	r2, #32
    6220:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    6224:	cmp	r1, r3
    6226:	bne.n	6220 <FatFile::mkdir(FatFile*, fname_t*)+0x8c>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    6228:	ldr	r1, [r4, #32]
    622a:	ldr	r0, [r4, #8]
    622c:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6230:	ldr	r3, [r4, #8]
    6232:	mov	r1, r0
    6234:	movs	r2, #1
    6236:	add.w	r0, r3, #40	; 0x28
    623a:	bl	693c <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    623e:	mov	lr, r0
    6240:	cmp	r0, #0
    6242:	beq.n	6308 <FatFile::mkdir(FatFile*, fname_t*)+0x174>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    6244:	strh.w	r8, [sp, #20]
    6248:	strh.w	r9, [sp, #26]
    624c:	mov	r7, r5
    624e:	ldmia	r7!, {r0, r1, r2, r3}
    6250:	str.w	r0, [lr]
    6254:	str.w	r1, [lr, #4]
    6258:	str.w	r2, [lr, #8]
    625c:	str.w	r3, [lr, #12]
    6260:	ldmia	r7!, {r0, r1, r2, r3}
    6262:	str.w	r0, [lr, #16]
    6266:	str.w	r1, [lr, #20]
    626a:	str.w	r2, [lr, #24]
    626e:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    6272:	ldr	r3, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    6274:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    6278:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    627a:	lsrs	r3, r3, #16
    627c:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    6280:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    6284:	ldmia	r5!, {r0, r1, r2, r3}
    6286:	add.w	r6, lr, #32
    628a:	str.w	r0, [lr, #32]
    628e:	str	r1, [r6, #4]
    6290:	str	r2, [r6, #8]
    6292:	str	r3, [r6, #12]
    6294:	ldmia	r5!, {r0, r1, r2, r3}
    6296:	str	r0, [r6, #16]
    6298:	str	r1, [r6, #20]
    629a:	str	r2, [r6, #24]
    629c:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    629e:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    62a0:	add.w	r0, r4, #40	; 0x28
    62a4:	bl	69b8 <FatCache::sync()>
    62a8:	cbz	r0, 62ca <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    62aa:	add.w	r0, r4, #564	; 0x234
    62ae:	bl	69b8 <FatCache::sync()>
    62b2:	cbz	r0, 62ca <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    62b4:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    62b6:	ldr	r3, [r0, #0]
    62b8:	ldr	r3, [r3, #20]

fail:
  return false;
}
    62ba:	add	sp, #36	; 0x24
    62bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    62c0:	bx	r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    62c2:	mov.w	r0, #346	; 0x15a
    62c6:	bl	5888 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    62ca:	movs	r0, #0
    62cc:	add	sp, #36	; 0x24
    62ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    62d2:	movw	r0, #341	; 0x155
    62d6:	bl	5888 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    62da:	movs	r0, #0
    62dc:	add	sp, #36	; 0x24
    62de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    62e2:	mov	r0, r4
    62e4:	bl	5a08 <FatFile::sync() [clone .part.38]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    62e8:	cmp	r0, #0
    62ea:	bne.w	61de <FatFile::mkdir(FatFile*, fname_t*)+0x4a>
    DBG_FAIL_MACRO;
    62ee:	movw	r0, #363	; 0x16b
    62f2:	bl	5888 <dbgPrint(unsigned short)>
    62f6:	b.n	62ca <FatFile::mkdir(FatFile*, fname_t*)+0x136>
  m_flags = FILE_FLAG_READ;
  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    62f8:	movw	r0, #355	; 0x163
    62fc:	bl	5888 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    6300:	movs	r0, #0
    6302:	add	sp, #36	; 0x24
    6304:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    6308:	mov.w	r0, #386	; 0x182
    630c:	bl	5888 <dbgPrint(unsigned short)>
    6310:	b.n	62ca <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    6312:	movw	r0, #369	; 0x171
    6316:	bl	5888 <dbgPrint(unsigned short)>
    631a:	b.n	62ca <FatFile::mkdir(FatFile*, fname_t*)+0x136>

0000631c <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    631c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6320:	mov	r6, r0
    6322:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    6324:	ldrb	r4, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    6326:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6328:	movs	r0, #0
    632a:	strb.w	r0, [sp, #36]	; 0x24
    632e:	strb.w	r0, [sp, #37]	; 0x25
    6332:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    6336:	cmp	r4, #0
    6338:	bne.n	63aa <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    633a:	mov	r8, r3
    633c:	ldrb	r3, [r1, #0]
    633e:	tst.w	r3, #112	; 0x70
    6342:	mov	r5, r1
    6344:	beq.n	63aa <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    6346:	ldrb	r3, [r2, #0]
    6348:	cmp	r3, #47	; 0x2f
    634a:	mov	r0, r2
    634c:	beq.n	638c <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    634e:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6350:	add	r2, sp, #4
    6352:	add	r1, sp, #12
    6354:	bl	7020 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6358:	add	r2, sp, #12
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    635a:	mov	r4, r0
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    635c:	mov	r1, r5
    635e:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6360:	cmp	r0, #0
    6362:	beq.n	63f0 <FatFile::mkdir(FatFile*, char const*, bool)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    6364:	ldr	r4, [sp, #4]
    6366:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6368:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    636a:	cmp	r4, #0
    636c:	beq.n	6400 <FatFile::mkdir(FatFile*, char const*, bool)+0xe4>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    636e:	bl	7574 <FatFile::open(FatFile*, fname_t*, int)>
    6372:	mov	r4, r0
    6374:	cbnz	r0, 63ca <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
      if (!pFlag || !mkdir(parent, &fname)) {
    6376:	cmp.w	r8, #0
    637a:	bne.n	63bc <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
        DBG_FAIL_MACRO;
    637c:	mov.w	r0, #320	; 0x140
    6380:	bl	5888 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    6384:	mov	r0, r4
    6386:	add	sp, #72	; 0x48
    6388:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    638c:	adds	r0, #1
    638e:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    6390:	ldrb	r3, [r0, #0]
    6392:	cmp	r3, #47	; 0x2f
    6394:	beq.n	638c <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    6396:	ldr	r1, [r5, #8]
    6398:	add	r0, sp, #36	; 0x24
    639a:	bl	5acc <FatFile::openRoot(FatVolume*)>
    639e:	mov	r4, r0
    63a0:	cmp	r0, #0
    63a2:	beq.n	640e <FatFile::mkdir(FatFile*, char const*, bool)+0xf2>
    63a4:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    63a6:	add	r5, sp, #36	; 0x24
    63a8:	b.n	634e <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    63aa:	movw	r0, #297	; 0x129
    63ae:	bl	5888 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    63b2:	movs	r4, #0
}
    63b4:	mov	r0, r4
    63b6:	add	sp, #72	; 0x48
    63b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    63bc:	mov	r1, r5
    63be:	add	r2, sp, #12
    63c0:	mov	r0, r6
    63c2:	bl	6194 <FatFile::mkdir(FatFile*, fname_t*)>
    63c6:	cmp	r0, #0
    63c8:	beq.n	637c <FatFile::mkdir(FatFile*, char const*, bool)+0x60>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    63ca:	mov	r5, r6
    63cc:	ldmia	r5!, {r0, r1, r2, r3}
    63ce:	add	r4, sp, #36	; 0x24
    63d0:	stmia	r4!, {r0, r1, r2, r3}
    63d2:	ldmia	r5!, {r0, r1, r2, r3}
    63d4:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    63d6:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    63d8:	ldr	r2, [r5, #0]
    63da:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    63dc:	cbnz	r3, 63e8 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    63de:	strb	r7, [r6, #0]
  m_flags = 0;
    63e0:	strb	r7, [r6, #2]
    63e2:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    63e4:	add	r5, sp, #36	; 0x24
    63e6:	b.n	6350 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    63e8:	mov	r0, r6
    63ea:	bl	5a08 <FatFile::sync() [clone .part.38]>
    63ee:	b.n	63de <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    63f0:	mov.w	r0, #312	; 0x138
    63f4:	bl	5888 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    63f8:	mov	r0, r4
    63fa:	add	sp, #72	; 0x48
    63fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    6400:	add	r2, sp, #12
    6402:	mov	r1, r5
    6404:	mov	r0, r6
    6406:	bl	6194 <FatFile::mkdir(FatFile*, fname_t*)>
    640a:	mov	r4, r0
    640c:	b.n	6384 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    640e:	movw	r0, #305	; 0x131
    6412:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    6416:	b.n	6384 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>

00006418 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6418:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    641c:	ldrb	r4, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    641e:	sub	sp, #104	; 0x68
    6420:	movs	r6, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    6422:	ands.w	r4, r4, #24
    6426:	strb.w	r6, [sp, #32]
    642a:	strb.w	r6, [sp, #33]	; 0x21
    642e:	strb.w	r6, [sp, #34]	; 0x22
    6432:	strb.w	r6, [sp, #68]	; 0x44
    6436:	strb.w	r6, [sp, #69]	; 0x45
    643a:	strb.w	r6, [sp, #70]	; 0x46
    643e:	bne.n	6450 <FatFile::rename(FatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    6440:	movw	r0, #875	; 0x36b
    6444:	bl	5888 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    6448:	mov	r0, r4
    644a:	add	sp, #104	; 0x68
    644c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6450:	mov	r8, r2
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    6452:	ldr	r3, [r1, #8]
    6454:	ldr	r2, [r0, #8]
    6456:	cmp	r2, r3
    6458:	mov	r5, r0
    645a:	mov	r7, r1
    645c:	beq.n	6470 <FatFile::rename(FatFile*, char const*)+0x58>
    DBG_FAIL_MACRO;
    645e:	movw	r0, #885	; 0x375
    6462:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    6466:	mov	r4, r6
}
    6468:	mov	r0, r4
    646a:	add	sp, #104	; 0x68
    646c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6470:	bl	5a08 <FatFile::sync() [clone .part.38]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    6474:	mov	lr, r5
    6476:	ldmia.w	lr!, {r0, r1, r2, r3}
    647a:	add	r4, sp, #68	; 0x44
    647c:	stmia	r4!, {r0, r1, r2, r3}
    647e:	ldmia.w	lr!, {r0, r1, r2, r3}
    6482:	stmia	r4!, {r0, r1, r2, r3}
    6484:	ldr.w	r3, [lr]
    6488:	str	r3, [r4, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    648a:	mov	r1, r6
    648c:	mov	r0, r5
    648e:	bl	59dc <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6492:	mov	r4, r0
    6494:	cmp	r0, #0
    6496:	beq.w	6632 <FatFile::rename(FatFile*, char const*)+0x21a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    649a:	ldr	r1, [r4, #4]
    649c:	ldr	r2, [r4, #8]
    649e:	ldr	r3, [r4, #12]
    64a0:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    64a2:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    64a6:	mov	lr, sp
    64a8:	stmia.w	lr!, {r0, r1, r2, r3}
    64ac:	ldr	r1, [r4, #20]
    64ae:	ldr	r2, [r4, #24]
    64b0:	ldr	r3, [r4, #28]
    64b2:	ldr	r0, [r4, #16]
  // make directory entry for new path
  if (isFile()) {
    64b4:	and.w	r4, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    64b8:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    64bc:	and.w	r3, r4, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    64c0:	mov	r2, r8
    64c2:	mov	r1, r7
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    64c4:	cmp	r4, #0
    64c6:	bne.w	65d6 <FatFile::rename(FatFile*, char const*)+0x1be>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    64ca:	add	r0, sp, #32
    64cc:	bl	631c <FatFile::mkdir(FatFile*, char const*, bool)>
    64d0:	mov	r4, r0
    64d2:	cmp	r0, #0
    64d4:	beq.w	661e <FatFile::rename(FatFile*, char const*)+0x206>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    64d8:	ldr	r6, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    64da:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    64dc:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    64e0:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    64e4:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    64e6:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
    64e8:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    64ea:	movs	r7, #0
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    64ec:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    64ee:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    64f0:	movs	r1, #1
    64f2:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    64f4:	strb.w	r7, [sp, #32]
  file.m_flags = 0;
    64f8:	strb.w	r7, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    64fc:	bl	59dc <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6500:	mov	r4, r0
    6502:	cmp	r0, #0
    6504:	beq.w	6628 <FatFile::rename(FatFile*, char const*)+0x210>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    6508:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    650a:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    650e:	ldr.w	r0, [r3, #-91]!
    6512:	str.w	r0, [r4, #13]
    6516:	ldr	r0, [r3, #4]
    6518:	str.w	r0, [r4, #17]
    651c:	ldr	r0, [r3, #8]
    651e:	str.w	r0, [r4, #21]
    6522:	ldr	r0, [r3, #12]
    6524:	str.w	r0, [r4, #25]
    6528:	ldrh	r0, [r3, #16]
    652a:	ldrb	r3, [r3, #18]
    652c:	strh.w	r0, [r4, #29]
    6530:	strb	r3, [r4, #31]
  dir->attributes = entry.attributes;
    6532:	strb	r2, [r4, #11]

  // update dot dot if directory
  if (dirCluster) {
    6534:	cmp	r6, #0
    6536:	beq.n	65ac <FatFile::rename(FatFile*, char const*)+0x194>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6538:	mov	r1, r6
    653a:	ldr	r0, [r5, #8]
    653c:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6540:	ldr	r3, [r5, #8]
    6542:	mov	r1, r0
    6544:	mov	r2, r7
    6546:	add.w	r0, r3, #40	; 0x28
    654a:	bl	693c <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    654e:	mov	r4, r0
    6550:	cmp	r0, #0
    6552:	beq.n	663c <FatFile::rename(FatFile*, char const*)+0x224>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    6554:	ldr.w	r0, [r4, #32]!
    6558:	ldr	r1, [r4, #4]
    655a:	ldr	r2, [r4, #8]
    655c:	ldr	r3, [r4, #12]
    655e:	mov	r7, sp
    6560:	stmia	r7!, {r0, r1, r2, r3}
    6562:	ldr	r0, [r4, #16]
    6564:	ldr	r1, [r4, #20]
    6566:	ldr	r2, [r4, #24]
    6568:	ldr	r3, [r4, #28]
    656a:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    656c:	mov	r1, r6
    656e:	ldr	r0, [r5, #8]
    6570:	bl	6bb4 <FatPartition::freeChain(unsigned long)>
    6574:	mov	r4, r0
    6576:	cmp	r0, #0
    6578:	beq.n	6614 <FatFile::rename(FatFile*, char const*)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    657a:	ldr	r1, [r5, #32]
    657c:	ldr	r0, [r5, #8]
    657e:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
    6582:	ldr	r3, [r5, #8]
    6584:	mov	r1, r0
    6586:	movs	r2, #1
    6588:	add.w	r0, r3, #40	; 0x28
    658c:	bl	693c <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6590:	mov	r4, r0
    6592:	cmp	r0, #0
    6594:	beq.n	6646 <FatFile::rename(FatFile*, char const*)+0x22e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    6596:	mov	r6, sp
    6598:	ldmia	r6!, {r0, r1, r2, r3}
    659a:	str	r0, [r4, #32]
    659c:	str	r1, [r4, #36]	; 0x24
    659e:	str	r2, [r4, #40]	; 0x28
    65a0:	str	r3, [r4, #44]	; 0x2c
    65a2:	ldmia	r6!, {r0, r1, r2, r3}
    65a4:	str	r0, [r4, #48]	; 0x30
    65a6:	str	r1, [r4, #52]	; 0x34
    65a8:	str	r2, [r4, #56]	; 0x38
    65aa:	str	r3, [r4, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    65ac:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    65ae:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    65b0:	movs	r3, #8
  if (!oldFile.remove()) {
    65b2:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    65b4:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    65b6:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    65ba:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    65be:	bl	728c <FatFile::remove()>
    65c2:	mov	r4, r0
    65c4:	cbz	r0, 65f2 <FatFile::rename(FatFile*, char const*)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    65c6:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    65c8:	add.w	r0, r4, #40	; 0x28
    65cc:	bl	69b8 <FatCache::sync()>
    65d0:	cbnz	r0, 65fc <FatFile::rename(FatFile*, char const*)+0x1e4>
    65d2:	movs	r4, #0
    65d4:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    65d6:	movw	r3, #2561	; 0xa01
    65da:	add	r0, sp, #32
    65dc:	bl	5b18 <FatFile::open(FatFile*, char const*, int)>
    65e0:	mov	r4, r0
    65e2:	cmp	r0, #0
    65e4:	bne.w	64da <FatFile::rename(FatFile*, char const*)+0xc2>
      DBG_FAIL_MACRO;
    65e8:	movw	r0, #901	; 0x385
    65ec:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    65f0:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    DBG_FAIL_MACRO;
    65f2:	mov.w	r0, #964	; 0x3c4
    65f6:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
    65fa:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
    65fc:	add.w	r0, r4, #564	; 0x234
    6600:	bl	69b8 <FatCache::sync()>
    6604:	cmp	r0, #0
    6606:	beq.n	65d2 <FatFile::rename(FatFile*, char const*)+0x1ba>
    6608:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    660a:	ldr	r3, [r0, #0]
    660c:	ldr	r3, [r3, #20]
    660e:	blx	r3
    6610:	mov	r4, r0
    6612:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
      DBG_FAIL_MACRO;
    6614:	movw	r0, #947	; 0x3b3
    6618:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    661c:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
      DBG_FAIL_MACRO;
    661e:	movw	r0, #907	; 0x38b
    6622:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    6626:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    6628:	movw	r0, #926	; 0x39e
    662c:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
    6630:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
  // sync() and cache directory entry
  sync();
  oldFile = *this;
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
  if (!dir) {
    DBG_FAIL_MACRO;
    6632:	movw	r0, #893	; 0x37d
    6636:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
    663a:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
  if (dirCluster) {
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    663c:	mov.w	r0, #940	; 0x3ac
    6640:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    6644:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6646:	movw	r0, #954	; 0x3ba
    664a:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    664e:	b.n	6448 <FatFile::rename(FatFile*, char const*)+0x30>

00006650 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6650:	ldrb	r3, [r0, #0]
    6652:	cbz	r3, 6658 <FatFile::sync()+0x8>
    6654:	b.w	5a08 <FatFile::sync() [clone .part.38]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    6658:	movs	r0, #1
    665a:	bx	lr

0000665c <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    665c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6660:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6662:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6664:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6666:	bpl.w	67d2 <FatFile::write(void const*, unsigned int)+0x176>
    666a:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    666c:	lsls	r2, r3, #28
    666e:	mov	r8, r1
    6670:	bmi.w	682c <FatFile::write(void const*, unsigned int)+0x1d0>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6674:	ldr	r2, [r4, #20]
    6676:	mvns	r3, r2
    6678:	cmp	r9, r3
    667a:	bhi.w	6822 <FatFile::write(void const*, unsigned int)+0x1c6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    667e:	cmp.w	r9, #0
    6682:	beq.w	6842 <FatFile::write(void const*, unsigned int)+0x1e6>
    6686:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6688:	mov.w	sl, #0
    668c:	b.n	66fa <FatFile::write(void const*, unsigned int)+0x9e>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    668e:	cmp	r1, #0
    6690:	beq.w	6796 <FatFile::write(void const*, unsigned int)+0x13a>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6694:	ldrb	r3, [r4, #2]
    6696:	lsls	r3, r3, #25
    6698:	bpl.w	67a6 <FatFile::write(void const*, unsigned int)+0x14a>
    669c:	ldr	r3, [r4, #28]
    669e:	cmp	r3, r2
    66a0:	bls.w	67a6 <FatFile::write(void const*, unsigned int)+0x14a>
          m_curCluster++;
    66a4:	adds	r1, #1
    66a6:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    66a8:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    66ac:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    66b0:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    66b2:	bcs.n	6734 <FatFile::write(void const*, unsigned int)+0xd8>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    66b4:	ldr	r2, [r4, #20]
    66b6:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    66b8:	ldr	r0, [r4, #8]
    66ba:	cmp.w	r6, #512	; 0x200
    66be:	mov	r5, r6
    66c0:	it	cs
    66c2:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    66c6:	cmp	r2, r3
    66c8:	bcc.n	67c4 <FatFile::write(void const*, unsigned int)+0x168>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    66ca:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    66cc:	adds	r0, #40	; 0x28
    66ce:	bl	693c <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    66d2:	cmp	r0, #0
    66d4:	beq.w	685c <FatFile::write(void const*, unsigned int)+0x200>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    66d8:	add	r0, r7
    66da:	mov	r2, r5
    66dc:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    66de:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    66e0:	bl	94a8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    66e4:	cmp.w	r7, #512	; 0x200
    66e8:	beq.w	67f8 <FatFile::write(void const*, unsigned int)+0x19c>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    66ec:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    66ee:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    66f0:	add	r2, r5
    src += n;
    66f2:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    66f4:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    66f6:	beq.w	6842 <FatFile::write(void const*, unsigned int)+0x1e6>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    66fa:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    66fc:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    66fe:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6700:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6704:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6708:	bne.n	6724 <FatFile::write(void const*, unsigned int)+0xc8>
    670a:	cmp	r7, #0
    670c:	beq.n	668e <FatFile::write(void const*, unsigned int)+0x32>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    670e:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
    6712:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6714:	rsb	r5, r7, #512	; 0x200
    6718:	cmp	r5, r6
    671a:	it	cs
    671c:	movcs	r5, r6
    671e:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    6720:	movs	r2, #1
    6722:	b.n	66cc <FatFile::write(void const*, unsigned int)+0x70>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6724:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    6728:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    672a:	cmp	r7, #0
    672c:	bne.n	6714 <FatFile::write(void const*, unsigned int)+0xb8>
    672e:	cmp.w	r6, #512	; 0x200
    6732:	bcc.n	66b4 <FatFile::write(void const*, unsigned int)+0x58>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6734:	cmp.w	r6, #1024	; 0x400
    6738:	ldr	r2, [r4, #8]
    673a:	bcc.n	677c <FatFile::write(void const*, unsigned int)+0x120>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    673c:	ldrb	r3, [r2, #4]
    673e:	ldr	r7, [r2, #48]	; 0x30
    6740:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6742:	lsrs	r0, r6, #9
    6744:	cmp	r3, r0
    6746:	it	cs
    6748:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    674a:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    674c:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6750:	bcc.n	6764 <FatFile::write(void const*, unsigned int)+0x108>
    6752:	add	r7, r3
    6754:	cmp	r7, r1
    6756:	bls.n	6764 <FatFile::write(void const*, unsigned int)+0x108>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6758:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    675c:	mov.w	r0, #4294967295
    6760:	str	r0, [r2, #48]	; 0x30
    6762:	ldr	r2, [r4, #8]
    6764:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    6766:	ldr	r2, [r0, #0]
    6768:	ldr	r7, [r2, #28]
    676a:	mov	r2, r8
    676c:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    676e:	cmp	r0, #0
    6770:	bne.n	66ec <FatFile::write(void const*, unsigned int)+0x90>
        DBG_FAIL_MACRO;
    6772:	movw	r0, #1410	; 0x582
    6776:	bl	5888 <dbgPrint(unsigned short)>
        goto fail;
    677a:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    677c:	ldr	r3, [r2, #48]	; 0x30
    677e:	cmp	r3, r1
    6780:	beq.n	67ea <FatFile::write(void const*, unsigned int)+0x18e>
    6782:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6784:	ldr	r3, [r0, #0]
    6786:	mov	r2, r8
    6788:	ldr	r3, [r3, #24]
    678a:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    678c:	cmp	r0, #0
    678e:	beq.n	6876 <FatFile::write(void const*, unsigned int)+0x21a>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    6790:	mov.w	r5, #512	; 0x200
    6794:	b.n	66ec <FatFile::write(void const*, unsigned int)+0x90>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    6796:	ldr	r1, [r4, #32]
    6798:	cmp	r1, #0
    679a:	beq.n	6810 <FatFile::write(void const*, unsigned int)+0x1b4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    679c:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    679e:	bl	69c8 <FatPartition::clusterStartSector(unsigned long) const>
    67a2:	mov	r1, r0
    67a4:	b.n	672e <FatFile::write(void const*, unsigned int)+0xd2>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    67a6:	add.w	r2, r4, #16
    67aa:	bl	69d4 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    67ae:	cmp	r0, #0
    67b0:	blt.n	6886 <FatFile::write(void const*, unsigned int)+0x22a>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    67b2:	bne.n	67be <FatFile::write(void const*, unsigned int)+0x162>
          // add cluster if at end of chain
          if (!addCluster()) {
    67b4:	mov	r0, r4
    67b6:	bl	58c4 <FatFile::addCluster()>
    67ba:	cmp	r0, #0
    67bc:	beq.n	6890 <FatFile::write(void const*, unsigned int)+0x234>
    67be:	ldr	r0, [r4, #8]
    67c0:	ldr	r1, [r4, #16]
    67c2:	b.n	679e <FatFile::write(void const*, unsigned int)+0x142>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    67c4:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    67c6:	tst.w	r3, #32
    67ca:	ite	eq
    67cc:	moveq	r2, #1
    67ce:	movne	r2, #5
    67d0:	b.n	66cc <FatFile::write(void const*, unsigned int)+0x70>
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    67d2:	movw	r0, #1299	; 0x513
    67d6:	bl	5888 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    67da:	ldrb	r3, [r4, #1]
    67dc:	orr.w	r3, r3, #1
    67e0:	strb	r3, [r4, #1]
  return -1;
    67e2:	mov.w	r0, #4294967295
    67e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    67ea:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    67ee:	mov.w	r3, #4294967295
    67f2:	str	r3, [r2, #48]	; 0x30
    67f4:	ldr	r2, [r4, #8]
    67f6:	b.n	6782 <FatFile::write(void const*, unsigned int)+0x126>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    67f8:	ldr	r0, [r4, #8]
    67fa:	adds	r0, #40	; 0x28
    67fc:	bl	69b8 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    6800:	cmp	r0, #0
    6802:	bne.w	66ec <FatFile::write(void const*, unsigned int)+0x90>
          DBG_FAIL_MACRO;
    6806:	movw	r0, #1390	; 0x56e
    680a:	bl	5888 <dbgPrint(unsigned short)>
          goto fail;
    680e:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    6810:	mov	r0, r4
    6812:	bl	58c4 <FatFile::addCluster()>
    6816:	cmp	r0, #0
    6818:	beq.n	689a <FatFile::write(void const*, unsigned int)+0x23e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    681a:	ldr	r1, [r4, #16]
    681c:	str	r1, [r4, #32]
    681e:	ldr	r0, [r4, #8]
    6820:	b.n	679e <FatFile::write(void const*, unsigned int)+0x142>
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    6822:	movw	r0, #1311	; 0x51f
    6826:	bl	5888 <dbgPrint(unsigned short)>
    goto fail;
    682a:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    682c:	ldr	r1, [r0, #28]
    682e:	bl	5e88 <FatFile::seekSet(unsigned long)>
    6832:	cmp	r0, #0
    6834:	bne.w	6674 <FatFile::write(void const*, unsigned int)+0x18>
      DBG_FAIL_MACRO;
    6838:	movw	r0, #1305	; 0x519
    683c:	bl	5888 <dbgPrint(unsigned short)>
      goto fail;
    6840:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6842:	ldr	r3, [r4, #28]
    6844:	cmp	r3, r2
    6846:	bcc.n	6866 <FatFile::write(void const*, unsigned int)+0x20a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6848:	ldr	r3, [pc, #88]	; (68a4 <FatFile::write(void const*, unsigned int)+0x248>)
    684a:	ldr	r3, [r3, #0]
    684c:	cbz	r3, 6880 <FatFile::write(void const*, unsigned int)+0x224>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    684e:	ldrb	r3, [r4, #2]
    6850:	orn	r3, r3, #127	; 0x7f
    6854:	strb	r3, [r4, #2]
    6856:	mov	r0, r9
    6858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
        DBG_FAIL_MACRO;
    685c:	movw	r0, #1382	; 0x566
    6860:	bl	5888 <dbgPrint(unsigned short)>
        goto fail;
    6864:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6866:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6868:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    686a:	orn	r3, r3, #127	; 0x7f
    686e:	strb	r3, [r4, #2]
    6870:	mov	r0, r9
    6872:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    6876:	movw	r0, #1421	; 0x58d
    687a:	bl	5888 <dbgPrint(unsigned short)>
        goto fail;
    687e:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
    6880:	mov	r0, r9
    6882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    6886:	mov.w	r0, #1328	; 0x530
    688a:	bl	5888 <dbgPrint(unsigned short)>
            goto fail;
    688e:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6890:	movw	r0, #1342	; 0x53e
    6894:	bl	5888 <dbgPrint(unsigned short)>
            goto fail;
    6898:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    689a:	movw	r0, #1350	; 0x546
    689e:	bl	5888 <dbgPrint(unsigned short)>
            goto fail;
    68a2:	b.n	67da <FatFile::write(void const*, unsigned int)+0x17e>
    68a4:	.word	0x1fff1990

000068a8 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    68a8:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    68aa:	movs	r1, #10
    68ac:	mov	r5, r0
    68ae:	ldr	r0, [pc, #40]	; (68d8 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    68b0:	ldr	r4, [pc, #40]	; (68dc <dbgPrint(unsigned short)+0x34>)
    68b2:	bl	96a8 <usb_serial_write>
    68b6:	movs	r1, #16
    68b8:	ldr	r0, [pc, #36]	; (68e0 <dbgPrint(unsigned short)+0x38>)
    68ba:	bl	96a8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    68be:	movs	r0, #46	; 0x2e
    68c0:	bl	97b0 <usb_serial_putchar>
    68c4:	mov	r1, r5
    68c6:	mov	r0, r4
    68c8:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    68cc:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    68ce:	ldmia.w	sp!, {r3, r4, r5, lr}
    68d2:	b.w	abc4 <Print::println()>
    68d6:	nop
    68d8:	.word	0x0000fe9c
    68dc:	.word	0x1fff098c
    68e0:	.word	0x0000fef4

000068e4 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    68e4:	push	{r3, r4, r5, r6, r7, lr}
    68e6:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    68e8:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    68ea:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    68ee:	mov	r4, r0
    68f0:	ldr	r0, [r3, #0]
    68f2:	ldr	r3, [r0, #0]
    68f4:	mov	r2, r6
    68f6:	ldr	r3, [r3, #24]
    68f8:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    68fa:	mov	r5, r0
    68fc:	cbz	r0, 6928 <FatCache::sync() [clone .part.8]+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    68fe:	ldrb	r3, [r4, #0]
    6900:	lsls	r2, r3, #30
    6902:	bmi.n	690e <FatCache::sync() [clone .part.8]+0x2a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6904:	bic.w	r3, r3, #1
    6908:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    690a:	mov	r0, r5
    690c:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    690e:	ldr	r3, [r4, #4]
    6910:	ldr	r1, [r4, #8]
    6912:	ldr	r0, [r3, #0]
    6914:	ldr	r7, [r3, #16]
    6916:	ldr	r3, [r0, #0]
    6918:	mov	r2, r6
    691a:	ldr	r3, [r3, #24]
    691c:	add	r1, r7
    691e:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    6920:	mov	r3, r0
    6922:	cbz	r0, 6932 <FatCache::sync() [clone .part.8]+0x4e>
    6924:	ldrb	r3, [r4, #0]
    6926:	b.n	6904 <FatCache::sync() [clone .part.8]+0x20>
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
      DBG_FAIL_MACRO;
    6928:	movs	r0, #57	; 0x39
    692a:	bl	68a8 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    692e:	mov	r0, r5
    6930:	pop	{r3, r4, r5, r6, r7, pc}
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6932:	movs	r0, #64	; 0x40
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    6934:	mov	r5, r3
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6936:	bl	68a8 <dbgPrint(unsigned short)>
    693a:	b.n	690a <FatCache::sync() [clone .part.8]+0x26>

0000693c <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    693c:	ldr	r3, [r0, #8]
    693e:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    6940:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6944:	mov	r6, r0
    6946:	mov	r5, r2
  if (m_lbn != sector) {
    6948:	beq.n	696c <FatCache::read(unsigned long, unsigned char)+0x30>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    694a:	ldrb	r3, [r0, #0]
    694c:	lsls	r2, r3, #31
    694e:	mov	r7, r1
    6950:	bmi.n	697c <FatCache::read(unsigned long, unsigned char)+0x40>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    6952:	lsls	r3, r5, #29
    6954:	bpl.n	6992 <FatCache::read(unsigned long, unsigned char)+0x56>
    6956:	add.w	r4, r6, #12
    695a:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    695c:	and.w	r5, r5, #3
    6960:	orrs	r5, r3
    6962:	strb	r5, [r6, #0]
    6964:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6966:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    6968:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    696c:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6970:	and.w	r5, r5, #3
    6974:	orrs	r5, r3
    6976:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6978:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    697c:	bl	68e4 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    6980:	mov	r4, r0
    6982:	cmp	r0, #0
    6984:	bne.n	6952 <FatCache::read(unsigned long, unsigned char)+0x16>
      DBG_FAIL_MACRO;
    6986:	movs	r0, #34	; 0x22
    6988:	bl	68a8 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    698c:	mov	r0, r4
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    698e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6992:	ldr	r3, [r6, #4]
    6994:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6996:	ldr	r3, [r0, #0]
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6998:	add.w	r4, r6, #12
    699c:	ldr	r3, [r3, #8]
    699e:	mov	r2, r4
    69a0:	mov	r1, r7
    69a2:	blx	r3
    69a4:	mov	r8, r0
    69a6:	cmp	r0, #0
    69a8:	bne.n	695a <FatCache::read(unsigned long, unsigned char)+0x1e>
        DBG_FAIL_MACRO;
    69aa:	movs	r0, #39	; 0x27
    69ac:	bl	68a8 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    69b0:	mov	r0, r8
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
    69b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69b6:	nop

000069b8 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    69b8:	ldrb	r3, [r0, #0]
    69ba:	lsls	r3, r3, #31
    69bc:	bmi.n	69c2 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    69be:	movs	r0, #1
    69c0:	bx	lr
    69c2:	b.w	68e4 <FatCache::sync() [clone .part.8]>
    69c6:	nop

000069c8 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    69c8:	ldrb	r3, [r0, #6]
    69ca:	ldr	r0, [r0, #20]
    69cc:	subs	r1, #2
    69ce:	lsls	r1, r3
}
    69d0:	add	r0, r1
    69d2:	bx	lr

000069d4 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    69d4:	cmp	r1, #1
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    69d6:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    69d8:	bls.n	6a42 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    69da:	ldr	r3, [r0, #28]
    69dc:	cmp	r1, r3
    69de:	mov	r4, r1
    69e0:	mov	r5, r0
    69e2:	bhi.n	6a42 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    69e4:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    69e6:	cmp	r3, #32
    69e8:	mov	r6, r2
    69ea:	beq.n	6a18 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    69ec:	cmp	r3, #16
    69ee:	bne.n	6a34 <FatPartition::fatGet(unsigned long, unsigned long*)+0x60>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    69f0:	ldr	r3, [r0, #24]
    69f2:	ubfx	r1, r1, #8, #8
    69f6:	add	r1, r3
    69f8:	movs	r2, #2
    69fa:	add.w	r0, r0, #564	; 0x234
    69fe:	bl	693c <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6a02:	cbz	r0, 6a4e <FatPartition::fatGet(unsigned long, unsigned long*)+0x7a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6a04:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    6a06:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    6a0a:	ldr	r2, [r5, #28]
    6a0c:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    6a0e:	itte	ls
    6a10:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    6a12:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    6a14:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    6a16:	pop	{r4, r5, r6, pc}
    6a18:	ldr	r1, [r0, #24]
    6a1a:	movs	r2, #2
    6a1c:	add.w	r1, r1, r4, lsr #7
    6a20:	add.w	r0, r0, #564	; 0x234
    6a24:	bl	693c <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6a28:	cbz	r0, 6a5a <FatPartition::fatGet(unsigned long, unsigned long*)+0x86>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6a2a:	and.w	r4, r4, #127	; 0x7f
    6a2e:	ldr.w	r3, [r0, r4, lsl #2]
    6a32:	b.n	6a0a <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
      index = 0;
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    6a34:	mov.w	r0, #260	; 0x104
    6a38:	bl	68a8 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6a3c:	mov.w	r0, #4294967295
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
    6a40:	pop	{r4, r5, r6, pc}
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6a42:	movs	r0, #214	; 0xd6
    6a44:	bl	68a8 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6a48:	mov.w	r0, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6a4c:	pop	{r4, r5, r6, pc}
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6a4e:	movs	r0, #232	; 0xe8
    6a50:	bl	68a8 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6a54:	mov.w	r0, #4294967295
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6a58:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6a5a:	movs	r0, #222	; 0xde
    6a5c:	bl	68a8 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6a60:	mov.w	r0, #4294967295
  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6a64:	pop	{r4, r5, r6, pc}
    6a66:	nop

00006a68 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6a68:	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6a6a:	push	{r4, r5, r6, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6a6c:	bls.n	6a8e <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6a6e:	ldr	r3, [r0, #28]
    6a70:	cmp	r1, r3
    6a72:	mov	r4, r1
    6a74:	bhi.n	6a8e <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6a76:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6a78:	cmp	r3, #32
    6a7a:	mov	r5, r2
    6a7c:	beq.n	6a9a <FatPartition::fatPut(unsigned long, unsigned long)+0x32>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    6a7e:	cmp	r3, #16
    6a80:	beq.n	6aba <FatPartition::fatPut(unsigned long, unsigned long)+0x52>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  } else {
    DBG_FAIL_MACRO;
    6a82:	mov.w	r0, #342	; 0x156
    6a86:	bl	68a8 <dbgPrint(unsigned short)>
    goto fail;
  }

fail:
  return false;
    6a8a:	movs	r0, #0
}
    6a8c:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6a8e:	mov.w	r0, #280	; 0x118
    6a92:	bl	68a8 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6a96:	movs	r0, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6a98:	pop	{r4, r5, r6, pc}
    6a9a:	ldr	r1, [r0, #24]
    6a9c:	movs	r2, #3
    6a9e:	add.w	r0, r0, #564	; 0x234
    6aa2:	add.w	r1, r1, r4, lsr #7
    6aa6:	bl	693c <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6aaa:	mov	r6, r0
    6aac:	cbz	r0, 6ae6 <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6aae:	and.w	r4, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    6ab2:	movs	r0, #1
    6ab4:	str.w	r5, [r6, r4, lsl #2]
    6ab8:	pop	{r4, r5, r6, pc}
    6aba:	ldr	r3, [r0, #24]
    6abc:	ubfx	r1, r1, #8, #8
    6ac0:	add.w	r0, r0, #564	; 0x234
    6ac4:	add	r1, r3
    6ac6:	movs	r2, #3
    6ac8:	bl	693c <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6acc:	mov	r6, r0
    6ace:	cbz	r0, 6ada <FatPartition::fatPut(unsigned long, unsigned long)+0x72>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6ad0:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    6ad2:	movs	r0, #1
    6ad4:	strh.w	r5, [r6, r4, lsl #1]
    6ad8:	pop	{r4, r5, r6, pc}
  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6ada:	movw	r0, #301	; 0x12d
    6ade:	bl	68a8 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6ae2:	mov	r0, r6
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6ae4:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6ae6:	mov.w	r0, #288	; 0x120
    6aea:	bl	68a8 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6aee:	mov	r0, r6
    6af0:	pop	{r4, r5, r6, pc}
    6af2:	nop

00006af4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6af4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6af8:	ldr	r4, [r0, #12]
    6afa:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6afc:	sub	sp, #8
    6afe:	mov	r5, r0
    6b00:	mov	r7, r1
    6b02:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6b04:	itte	cc
    6b06:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6b08:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    6b0a:	movcs	r6, #1
    6b0c:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    6b0e:	adds	r4, #1
    if (find > m_lastCluster) {
    6b10:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6b12:	add	r2, sp, #4
    6b14:	mov	r0, r5
    6b16:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6b18:	bls.n	6b2e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    6b1a:	cbnz	r6, 6b82 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8e>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6b1c:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6b1e:	adds	r4, #1
    if (find > m_lastCluster) {
    6b20:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    6b22:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6b26:	add	r2, sp, #4
    6b28:	mov	r0, r5
    6b2a:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6b2c:	bhi.n	6b1a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    6b2e:	cmp	r7, r4
    6b30:	beq.n	6b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6b32:	bl	69d4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6b36:	cmp	r0, #0
    6b38:	blt.n	6b8a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    6b3a:	beq.n	6b0c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    6b3c:	ldr	r3, [sp, #4]
    6b3e:	cmp	r3, #0
    6b40:	bne.n	6b0c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    6b42:	cbz	r6, 6b46 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    6b44:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6b46:	mvn.w	r2, #4026531840	; 0xf0000000
    6b4a:	mov	r1, r4
    6b4c:	mov	r0, r5
    6b4e:	bl	6a68 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    6b52:	mov	r6, r0
    6b54:	cbz	r0, 6bac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    6b56:	cbnz	r7, 6b92 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9e>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6b58:	ldr	r3, [r5, #36]	; 0x24
    6b5a:	cmp	r3, #0
      m_freeClusterCount += change;
    6b5c:	it	ge
    6b5e:	addge.w	r3, r3, #4294967295
  *next = find;
  return true;

fail:
  return false;
}
    6b62:	mov	r0, r6
    6b64:	it	ge
    6b66:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    6b68:	str.w	r4, [r8]
  return true;

fail:
  return false;
}
    6b6c:	add	sp, #8
    6b6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      setStart = true;
      continue;
    }
    if (find == current) {
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
    6b72:	movs	r0, #101	; 0x65
    6b74:	bl	68a8 <dbgPrint(unsigned short)>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6b78:	movs	r6, #0
}
    6b7a:	mov	r0, r6
    6b7c:	add	sp, #8
    6b7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (1) {
    find++;
    if (find > m_lastCluster) {
      if (setStart) {
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
    6b82:	movs	r0, #92	; 0x5c
    6b84:	bl	68a8 <dbgPrint(unsigned short)>
        goto fail;
    6b88:	b.n	6b78 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    6b8a:	movs	r0, #107	; 0x6b
    6b8c:	bl	68a8 <dbgPrint(unsigned short)>
      goto fail;
    6b90:	b.n	6b78 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    6b92:	mov	r1, r7
    6b94:	mov	r2, r4
    6b96:	mov	r0, r5
    6b98:	bl	6a68 <FatPartition::fatPut(unsigned long, unsigned long)>
    6b9c:	mov	r3, r0
    6b9e:	cmp	r0, #0
    6ba0:	bne.n	6b58 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
      DBG_FAIL_MACRO;
    6ba2:	movs	r0, #125	; 0x7d
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6ba4:	mov	r6, r3
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
      DBG_FAIL_MACRO;
    6ba6:	bl	68a8 <dbgPrint(unsigned short)>
      goto fail;
    6baa:	b.n	6b7a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>
  if (setStart) {
    m_allocSearchStart = find;
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    6bac:	movs	r0, #119	; 0x77
    6bae:	bl	68a8 <dbgPrint(unsigned short)>
    goto fail;
    6bb2:	b.n	6b7a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>

00006bb4 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6bb4:	push	{r4, r5, r6, r7, lr}
    6bb6:	mov	r5, r0
    6bb8:	sub	sp, #12
    6bba:	mov	r4, r1
    6bbc:	b.n	6be0 <FatPartition::freeChain(unsigned long)+0x2c>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6bbe:	bl	6a68 <FatPartition::fatPut(unsigned long, unsigned long)>
    6bc2:	mov	r6, r0
    6bc4:	cbz	r0, 6c06 <FatPartition::freeChain(unsigned long)+0x52>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6bc6:	ldr	r3, [r5, #36]	; 0x24
    6bc8:	cmp	r3, #0
      m_freeClusterCount += change;
    6bca:	itt	ge
    6bcc:	addge	r3, #1
    6bce:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6bd0:	ldr	r3, [r5, #12]
    6bd2:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    6bd4:	itt	cc
    6bd6:	addcc.w	r4, r4, #4294967295
    6bda:	strcc	r4, [r5, #12]
    }
    cluster = next;
    6bdc:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6bde:	cbz	r7, 6c00 <FatPartition::freeChain(unsigned long)+0x4c>
    fg = fatGet(cluster, &next);
    6be0:	add	r2, sp, #4
    6be2:	mov	r1, r4
    6be4:	mov	r0, r5
    6be6:	bl	69d4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6bea:	subs	r7, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6bec:	mov	r1, r4
    6bee:	mov.w	r2, #0
    6bf2:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6bf4:	bge.n	6bbe <FatPartition::freeChain(unsigned long)+0xa>
      DBG_FAIL_MACRO;
    6bf6:	movw	r0, #357	; 0x165
    6bfa:	bl	68a8 <dbgPrint(unsigned short)>
  } while (fg);

  return true;

fail:
  return false;
    6bfe:	movs	r6, #0
}
    6c00:	mov	r0, r6
    6c02:	add	sp, #12
    6c04:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    6c06:	mov.w	r0, #362	; 0x16a
    6c0a:	bl	68a8 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    6c0e:	mov	r0, r6
    6c10:	add	sp, #12
    6c12:	pop	{r4, r5, r6, r7, pc}

00006c14 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6c14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    6c18:	ldr	r4, [r0, #36]	; 0x24
    6c1a:	cmp	r4, #0
    6c1c:	blt.n	6c24 <FatPartition::freeClusterCount()+0x10>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6c1e:	mov	r0, r4
    6c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c24:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6c26:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6c28:	cmp	r3, #16
    6c2a:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6c2c:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6c30:	beq.n	6c48 <FatPartition::freeClusterCount()+0x34>
    6c32:	cmp	r3, #32
    6c34:	beq.n	6c48 <FatPartition::freeClusterCount()+0x34>
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    6c36:	movw	r0, #431	; 0x1af
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6c3a:	mov.w	r4, #4294967295
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    6c3e:	bl	68a8 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6c42:	mov	r0, r4
    6c44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    6c48:	ldr	r5, [r6, #24]
    while (todo) {
    6c4a:	cmp.w	r8, #0
    6c4e:	beq.n	6cde <FatPartition::freeClusterCount()+0xca>
    6c50:	add.w	r7, r6, #564	; 0x234
    6c54:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6c56:	mov	r1, r5
    6c58:	movs	r2, #2
    6c5a:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    6c5c:	adds	r5, #1
    6c5e:	bl	693c <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    6c62:	cbz	r0, 6ccc <FatPartition::freeClusterCount()+0xb8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6c64:	ldrb	r3, [r6, #7]
    6c66:	cmp	r3, #16
    6c68:	beq.n	6c9a <FatPartition::freeClusterCount()+0x86>
      if (todo < n) {
    6c6a:	cmp.w	r8, #127	; 0x7f
    6c6e:	bhi.n	6cc4 <FatPartition::freeClusterCount()+0xb0>
        n = todo;
    6c70:	uxth.w	r1, r8
    6c74:	mov	lr, r8
    6c76:	subs	r1, #1
    6c78:	uxth	r1, r1
    6c7a:	add.w	r1, r0, r1, lsl #2
    6c7e:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    6c80:	ldr.w	r2, [r3, #4]!
    6c84:	cbnz	r2, 6c88 <FatPartition::freeClusterCount()+0x74>
            free++;
    6c86:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    6c88:	cmp	r3, r1
    6c8a:	bne.n	6c80 <FatPartition::freeClusterCount()+0x6c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6c8c:	subs.w	r8, r8, lr
    6c90:	bne.n	6c56 <FatPartition::freeClusterCount()+0x42>
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6c92:	str	r4, [r6, #36]	; 0x24
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6c94:	mov	r0, r4
    6c96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6c9a:	cmp.w	r8, #255	; 0xff
    6c9e:	bls.n	6ce2 <FatPartition::freeClusterCount()+0xce>
    6ca0:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6ca4:	mov	r3, lr
    6ca6:	subs	r1, r3, #1
    6ca8:	uxth	r1, r1
    6caa:	add.w	r1, r0, r1, lsl #1
    6cae:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    6cb0:	ldrh.w	r2, [r3, #2]!
    6cb4:	cbnz	r2, 6cb8 <FatPartition::freeClusterCount()+0xa4>
            free++;
    6cb6:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    6cb8:	cmp	r1, r3
    6cba:	bne.n	6cb0 <FatPartition::freeClusterCount()+0x9c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6cbc:	subs.w	r8, r8, lr
    6cc0:	bne.n	6c56 <FatPartition::freeClusterCount()+0x42>
    6cc2:	b.n	6c92 <FatPartition::freeClusterCount()+0x7e>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6cc4:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6cc8:	mov	r1, lr
    6cca:	b.n	6c76 <FatPartition::freeClusterCount()+0x62>
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    6ccc:	movw	r0, #407	; 0x197
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6cd0:	mov.w	r4, #4294967295
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    6cd4:	bl	68a8 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6cd8:	mov	r0, r4
    6cda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6cde:	mov	r4, r8
    6ce0:	b.n	6c92 <FatPartition::freeClusterCount()+0x7e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    6ce2:	uxth.w	r3, r8
    6ce6:	mov	lr, r8
    6ce8:	b.n	6ca6 <FatPartition::freeClusterCount()+0x92>
    6cea:	nop

00006cec <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6cec:	push	{r3, r4, r5, r6, r7, lr}
    6cee:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6cf0:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    6cf2:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    6cf6:	movs	r0, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    6cf8:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    6cfa:	str	r4, [r4, #44]	; 0x2c
    6cfc:	str.w	r4, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    6d00:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6d02:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6d04:	strb.w	r5, [r4, #40]	; 0x28
    6d08:	strb.w	r5, [r4, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
    6d0c:	str	r3, [r4, #48]	; 0x30
    6d0e:	str.w	r3, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6d12:	mov	r6, r2
    6d14:	cbz	r2, 6d5a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x6e>
    if (part > 4) {
    6d16:	cmp	r2, #4
    6d18:	bhi.n	6d4e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6d1a:	add.w	r7, r4, #40	; 0x28
    6d1e:	mov	r2, r5
    6d20:	mov	r0, r7
    6d22:	mov	r1, r5
    6d24:	bl	693c <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    6d28:	add.w	r6, r6, #268435456	; 0x10000000
    6d2c:	subs	r6, #1
    6d2e:	lsls	r6, r6, #4
    6d30:	add.w	r3, r0, #446	; 0x1be
    6d34:	adds	r2, r3, r6

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6d36:	cbz	r0, 6d42 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    6d38:	ldrb	r1, [r2, #4]
    6d3a:	cbz	r1, 6d42 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    6d3c:	ldrb	r3, [r3, r6]
    6d3e:	lsls	r3, r3, #25
    6d40:	beq.n	6d7c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x90>
      DBG_FAIL_MACRO;
    6d42:	mov.w	r0, #468	; 0x1d4
    6d46:	bl	68a8 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6d4a:	movs	r0, #0
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
      goto fail;
    6d4c:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
    6d4e:	mov.w	r0, #460	; 0x1cc
    6d52:	bl	68a8 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6d56:	mov	r0, r5
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
      goto fail;
    6d58:	pop	{r3, r4, r5, r6, r7, pc}
    6d5a:	add.w	r7, r4, #40	; 0x28
    6d5e:	mov	r0, r7
    6d60:	movs	r2, #0
    6d62:	mov	r1, r6
    6d64:	bl	693c <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6d68:	cbz	r0, 6d70 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    6d6a:	ldrb	r3, [r0, #16]
    6d6c:	cmp	r3, #2
    6d6e:	beq.n	6d80 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x94>
    DBG_FAIL_MACRO;
    6d70:	mov.w	r0, #478	; 0x1de
    6d74:	bl	68a8 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6d78:	movs	r0, #0
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
    6d7a:	pop	{r3, r4, r5, r6, r7, pc}
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6d7c:	ldr	r6, [r2, #8]
    6d7e:	b.n	6d5e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6d80:	ldrh.w	r3, [r0, #11]
    6d84:	cmp.w	r3, #512	; 0x200
    6d88:	bne.n	6d70 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6d8a:	ldrb	r5, [r0, #13]
    6d8c:	strb	r5, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6d8e:	subs	r3, r5, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6d90:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6d92:	cmp	r5, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6d94:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6d96:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6d98:	beq.n	6dc2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd6>
    6d9a:	movs	r2, #1
    6d9c:	mov	r1, r2
    6d9e:	b.n	6da2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
    6da0:	mov	r2, r3
    6da2:	lsls	r1, r1, #1
    6da4:	uxtb	r1, r1
    6da6:	adds	r3, r2, #1
    6da8:	cmp	r5, r1
    6daa:	uxtb	r3, r3
    6dac:	beq.n	6dc0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    if (tmp == 0) {
    6dae:	cmp	r3, #9
    6db0:	bne.n	6da0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    6db2:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
    6db4:	movw	r0, #487	; 0x1e7
    6db8:	bl	68a8 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6dbc:	movs	r0, #0
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    6dbe:	pop	{r3, r4, r5, r6, r7, pc}
    6dc0:	strb	r2, [r4, #6]
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6dc2:	ldrh	r1, [r0, #22]
    6dc4:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6dc6:	cbnz	r1, 6dcc <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe0>
    6dc8:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6dca:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6dcc:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6dce:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6dd2:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6dd4:	add	r7, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6dd6:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6dd8:	add.w	r5, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6ddc:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6de0:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6de4:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6de6:	add.w	r3, r5, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6dea:	str	r5, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6dec:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6dee:	cbnz	r1, 6df2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6df0:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6df2:	subs	r6, r6, r3
    6df4:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6df6:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6dfa:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6dfe:	adds	r5, r2, #1
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6e00:	mov.w	r1, #4294967295

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6e04:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6e06:	str	r5, [r4, #28]
    6e08:	str	r1, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6e0a:	bls.n	6e22 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x136>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6e0c:	movw	r3, #65524	; 0xfff4
    6e10:	cmp	r2, r3
    6e12:	ittet	hi
    6e14:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6e16:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    6e18:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    6e1a:	movhi	r3, #32
    6e1c:	strb	r3, [r4, #7]
  }
  return true;
    6e1e:	movs	r0, #1
    6e20:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    6e22:	movs	r3, #12
    6e24:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    6e26:	movw	r0, #525	; 0x20d
    6e2a:	bl	68a8 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6e2e:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6e30:	pop	{r3, r4, r5, r6, r7, pc}
    6e32:	nop

00006e34 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    6e34:	cmp	r1, #4
    6e36:	bls.n	6e52 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6e38:	cmp	r1, #10
    6e3a:	bls.n	6e4a <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    6e3c:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6e3e:	itte	ls
    6e40:	addls.w	r1, r0, r1, lsl #1
    6e44:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    6e46:	movhi	r0, #0
}
    6e48:	bx	lr
    6e4a:	add.w	r1, r0, r1, lsl #1
    6e4e:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    6e50:	bx	lr
    6e52:	add.w	r1, r0, r1, lsl #1
    6e56:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    6e5a:	bx	lr

00006e5c <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    6e5c:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6e5e:	movs	r1, #10
    6e60:	mov	r5, r0
    6e62:	ldr	r0, [pc, #40]	; (6e8c <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6e64:	ldr	r4, [pc, #40]	; (6e90 <dbgPrint(unsigned short)+0x34>)
    6e66:	bl	96a8 <usb_serial_write>
    6e6a:	movs	r1, #14
    6e6c:	ldr	r0, [pc, #36]	; (6e94 <dbgPrint(unsigned short)+0x38>)
    6e6e:	bl	96a8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6e72:	movs	r0, #46	; 0x2e
    6e74:	bl	97b0 <usb_serial_putchar>
    6e78:	mov	r1, r5
    6e7a:	mov	r0, r4
    6e7c:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    6e80:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    6e82:	ldmia.w	sp!, {r3, r4, r5, lr}
    6e86:	b.w	abc4 <Print::println()>
    6e8a:	nop
    6e8c:	.word	0x0000fe9c
    6e90:	.word	0x1fff098c
    6e94:	.word	0x0000ff08

00006e98 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    6e98:	push	{r4}
    6e9a:	subs	r2, r0, #1
    6e9c:	add.w	r4, r0, #10
  uint8_t sum = 0;
    6ea0:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6ea2:	ldrb.w	r1, [r2, #1]!
    6ea6:	lsrs	r3, r0, #1
    6ea8:	orr.w	r0, r3, r0, lsl #7
    6eac:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6eb0:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6eb2:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6eb4:	bne.n	6ea2 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    6eb6:	ldr.w	r4, [sp], #4
    6eba:	bx	lr

00006ebc <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    6ebc:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6ebe:	ldr	r3, [r1, #12]
    6ec0:	cbz	r3, 6ee0 <FatFile::openCluster(FatFile*)+0x24>
    6ec2:	mov	r5, r0
    6ec4:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    6ec6:	movs	r2, #36	; 0x24
    6ec8:	movs	r1, #0
    6eca:	bl	c29c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6ece:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6ed0:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    6ed2:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    6ed4:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    6ed6:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6ed8:	ldr	r3, [r4, #12]
    6eda:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    6edc:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6ede:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6ee0:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6ee2:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6ee6:	b.w	5acc <FatFile::openRoot(FatVolume*)>
    6eea:	nop

00006eec <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    6eec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ef0:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6ef2:	ldrb	r3, [r0, #0]
    6ef4:	movs	r4, #0
    6ef6:	strb.w	r4, [sp, #12]
    6efa:	strb.w	r4, [sp, #13]
    6efe:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    6f02:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6f04:	cbz	r3, 6f0c <FatFile::getName(char*, unsigned int)+0x20>
    6f06:	cmp	r2, #12
    6f08:	mov	r5, r2
    6f0a:	bhi.n	6f20 <FatFile::getName(char*, unsigned int)+0x34>
    DBG_FAIL_MACRO;
    6f0c:	movs	r0, #129	; 0x81
    6f0e:	bl	6e5c <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    6f12:	movs	r7, #0
    6f14:	strb.w	r7, [r9]
  return false;
}
    6f18:	mov	r0, r7
    6f1a:	add	sp, #52	; 0x34
    6f1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    6f20:	ldrb	r3, [r0, #3]
    6f22:	mov	r8, r0
    6f24:	cmp	r3, #0
    6f26:	beq.n	6fe6 <FatFile::getName(char*, unsigned int)+0xfa>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    6f28:	add	r0, sp, #12
    6f2a:	mov	r1, r8
    6f2c:	bl	6ebc <FatFile::openCluster(FatFile*)>
    6f30:	cmp	r0, #0
    6f32:	beq.n	6ff8 <FatFile::getName(char*, unsigned int)+0x10c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6f34:	ldrb.w	r3, [r8, #3]
    6f38:	cmp	r3, #0
    6f3a:	beq.n	6fde <FatFile::getName(char*, unsigned int)+0xf2>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6f3c:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6f3e:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    6f40:	ldrh.w	r1, [r8, #4]
    6f44:	subs	r1, r1, r6
    6f46:	lsls	r1, r1, #5
    6f48:	add	r0, sp, #12
    6f4a:	bl	5e88 <FatFile::seekSet(unsigned long)>
    6f4e:	mov	r7, r0
    6f50:	cmp	r0, #0
    6f52:	beq.n	7000 <FatFile::getName(char*, unsigned int)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    6f54:	movs	r1, #0
    6f56:	add	r0, sp, #12
    6f58:	bl	5e38 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6f5c:	mov	sl, r0
    6f5e:	cmp	r0, #0
    6f60:	beq.n	7008 <FatFile::getName(char*, unsigned int)+0x11c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    6f62:	ldrb	r3, [r0, #11]
    6f64:	cmp	r3, #15
    6f66:	bne.n	7010 <FatFile::getName(char*, unsigned int)+0x124>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    6f68:	ldrb	r3, [r0, #0]
    6f6a:	and.w	r3, r3, #31
    6f6e:	cmp	r6, r3
    6f70:	bne.n	7018 <FatFile::getName(char*, unsigned int)+0x12c>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6f72:	subs	r3, r6, #1
    6f74:	add.w	r2, r3, r3, lsl #1
    6f78:	add.w	r2, r3, r2, lsl #2
    6f7c:	mov	r3, r2
    6f7e:	add.w	r4, r9, r2
    6f82:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    6f86:	subs	r1, r3, r2
    6f88:	uxtb	r1, r1
    6f8a:	mov	r0, sl
    6f8c:	bl	6e34 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    6f90:	cbz	r0, 6ff4 <FatFile::getName(char*, unsigned int)+0x108>
    6f92:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6f94:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    6f98:	bls.n	6fbe <FatFile::getName(char*, unsigned int)+0xd2>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6f9a:	cmp	r0, #126	; 0x7e
    6f9c:	ite	ls
    6f9e:	uxtbls	r0, r0
    6fa0:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    6fa2:	cmp	r3, fp
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    6fa4:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    6fa8:	bne.n	6f86 <FatFile::getName(char*, unsigned int)+0x9a>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    6faa:	cmp	r5, fp
    6fac:	bls.n	6fbe <FatFile::getName(char*, unsigned int)+0xd2>
    6fae:	ldrb.w	r3, [sl]
    6fb2:	lsls	r2, r3, #25
    name[k] = 0;
    6fb4:	itt	mi
    6fb6:	ldrbmi.w	r3, [sp, #4]
    6fba:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    6fbe:	add.w	r3, r9, r5
    6fc2:	ldrb.w	r2, [sp, #4]
    6fc6:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6fca:	ldrb.w	r3, [sl]
    6fce:	lsls	r3, r3, #25
    6fd0:	bmi.n	6f18 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6fd2:	adds	r6, #1
    6fd4:	ldrb.w	r3, [r8, #3]
    6fd8:	uxtb	r6, r6
    6fda:	cmp	r3, r6
    6fdc:	bcs.n	6f40 <FatFile::getName(char*, unsigned int)+0x54>
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    6fde:	movs	r0, #166	; 0xa6
    6fe0:	bl	6e5c <dbgPrint(unsigned short)>
    6fe4:	b.n	6f12 <FatFile::getName(char*, unsigned int)+0x26>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    6fe6:	bl	79c4 <FatFile::getSFN(char*)>
    6fea:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    6fec:	mov	r0, r7
    6fee:	add	sp, #52	; 0x34
    6ff0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    6ff4:	mov	fp, r3
    6ff6:	b.n	6faa <FatFile::getName(char*, unsigned int)+0xbe>
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    6ff8:	movs	r0, #136	; 0x88
    6ffa:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
    6ffe:	b.n	6f12 <FatFile::getName(char*, unsigned int)+0x26>
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    7000:	movs	r0, #141	; 0x8d
    7002:	bl	6e5c <dbgPrint(unsigned short)>
      goto fail;
    7006:	b.n	6f12 <FatFile::getName(char*, unsigned int)+0x26>
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7008:	movs	r0, #146	; 0x92
    700a:	bl	6e5c <dbgPrint(unsigned short)>
      goto fail;
    700e:	b.n	6f12 <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
      DBG_FAIL_MACRO;
    7010:	movs	r0, #150	; 0x96
    7012:	bl	6e5c <dbgPrint(unsigned short)>
      goto fail;
    7016:	b.n	6f12 <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
    7018:	movs	r0, #154	; 0x9a
    701a:	bl	6e5c <dbgPrint(unsigned short)>
      goto fail;
    701e:	b.n	6f12 <FatFile::getName(char*, unsigned int)+0x26>

00007020 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    7020:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    7024:	ldrb	r3, [r0, #0]
    7026:	cmp	r3, #32
    7028:	bne.n	7032 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    702a:	ldrb.w	r3, [r0, #1]!
    702e:	cmp	r3, #32
    7030:	beq.n	702a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    7032:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    7034:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    7036:	cmp	r3, #0
    7038:	beq.w	726a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x24a>
    703c:	cmp	r3, #47	; 0x2f
    703e:	beq.n	70ac <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7040:	cmp	r3, #92	; 0x5c
    7042:	beq.n	708a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    7044:	sub.w	r4, r3, #34	; 0x22
    7048:	uxtb	r4, r4
    704a:	cmp	r4, #29
    704c:	bls.n	7096 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x76>
    704e:	ldr.w	lr, [pc, #568]	; 7288 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x268>
    7052:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    7054:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    7056:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7058:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    705c:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    705e:	beq.n	708a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7060:	cmp	r5, #94	; 0x5e
    7062:	bhi.n	708a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    7064:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7068:	sub.w	r5, r3, #34	; 0x22
    706c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    706e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    7070:	cmp	r3, #0
    7072:	beq.w	7226 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    7076:	cmp	r3, #47	; 0x2f
    7078:	beq.n	70ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8e>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    707a:	cmp	r3, #92	; 0x5c
    707c:	lsr.w	r7, lr, r5
    7080:	beq.n	708a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    7082:	cmp	r5, #29
    7084:	bhi.n	7056 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    7086:	lsls	r7, r7, #31
    7088:	bpl.n	7056 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    708a:	movs	r0, #211	; 0xd3
    708c:	bl	6e5c <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7090:	movs	r0, #0
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    7092:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7096:	ldr	r5, [pc, #496]	; (7288 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x268>)
    7098:	lsr.w	r4, r5, r4
    709c:	lsls	r4, r4, #31
    709e:	bpl.n	704e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    70a0:	movs	r0, #211	; 0xd3
    70a2:	bl	6e5c <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    70a6:	movs	r0, #0
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    70a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    70ac:	movs	r4, #0
    70ae:	adds	r7, r0, r4
    70b0:	mov	r6, r7
    70b2:	mov	r5, r4
    70b4:	movs	r3, #47	; 0x2f
    70b6:	b.n	70be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9e>
    70b8:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    70bc:	adds	r5, #1
    70be:	cmp	r3, #32
    70c0:	beq.n	70b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
    70c2:	cmp	r3, #47	; 0x2f
    70c4:	beq.n	70b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
  *ptr = &path[end];
    70c6:	add	r5, r0
    70c8:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    70ca:	cbz	r4, 70e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    70cc:	mov	r2, r7
    c = path[len - 1];
    70ce:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    70d2:	cmp	r3, #46	; 0x2e
    70d4:	beq.n	70dc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xbc>
    70d6:	cmp	r3, #32
    70d8:	bne.w	722c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20c>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    70dc:	subs	r4, #1
    70de:	bne.n	70ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0xae>
    70e0:	mov.w	r5, #4294967295
    70e4:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    70e6:	str	r3, [r1, #4]
    70e8:	add.w	r6, r1, #23
    70ec:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    70f0:	movs	r2, #32
    70f2:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    70f6:	cmp	r3, r6
    70f8:	bne.n	70f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd2>
    70fa:	subs	r6, r0, #1
    70fc:	movs	r2, #0
    70fe:	b.n	7102 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    7100:	adds	r2, #1
    7102:	ldrb.w	r3, [r6, #1]!
    7106:	cmp	r3, #46	; 0x2e
    7108:	beq.n	7100 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    710a:	cmp	r3, #32
    710c:	beq.n	7100 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    710e:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    7112:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    7114:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    7118:	beq.n	7134 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    711a:	ldrb	r7, [r0, r5]
    711c:	cmp	r7, #46	; 0x2e
    711e:	add.w	r6, r0, r5
    7122:	bne.n	712e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10e>
    7124:	b.n	7134 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    7126:	ldrb.w	r7, [r6, #-1]!
    712a:	cmp	r7, #46	; 0x2e
    712c:	beq.n	7134 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    712e:	adds.w	r5, r5, #4294967295
    7132:	bcs.n	7126 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
  for (; si < len; si++) {
    7134:	cmp	r2, r4
    7136:	mov.w	r9, #0
    713a:	bge.w	7274 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x254>
    713e:	mov	r6, r9
    7140:	mov	sl, r9
    7142:	movs	r7, #7
    7144:	mov.w	r8, #8
    7148:	b.n	7196 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x176>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    714a:	cmp	r3, #46	; 0x2e
    714c:	beq.n	71dc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1bc>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    714e:	cmp	r3, #34	; 0x22
    7150:	beq.n	716a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    7152:	cmp	r3, #124	; 0x7c
    7154:	beq.n	716a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    7156:	sub.w	lr, r3, #42	; 0x2a
    715a:	cmp.w	lr, #5
    715e:	bls.n	71f0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d0>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    7160:	sub.w	lr, r3, #58	; 0x3a
    7164:	cmp.w	lr, #5
    7168:	bhi.n	721a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fa>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    716a:	cmp	r5, r2
    716c:	beq.n	71e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    716e:	cmp	r7, r6
    7170:	bcc.n	71c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a4>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    7172:	mov.w	ip, #0
      c = '_';
    7176:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7178:	add.w	lr, r6, #1
    717c:	add.w	fp, r1, r6
    7180:	uxtb.w	r6, lr
      if (i < 7) {
    7184:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7186:	strb.w	r3, [fp, #13]
      if (i < 7) {
    718a:	bhi.n	718e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
        fname->seqPos = i;
    718c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    718e:	adds	r2, #1
    7190:	cmp	r2, r4
    7192:	bge.n	71a4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x184>
    7194:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    7196:	cmp	r3, #32
    7198:	bne.n	714a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    719a:	adds	r2, #1
    719c:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    719e:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    71a2:	blt.n	7194 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x174>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    71a4:	ldrb	r3, [r1, #13]
    71a6:	cmp	r3, #32
    71a8:	beq.n	7256 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    71aa:	cmp.w	ip, #0
    71ae:	beq.n	723c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    71b0:	tst.w	sl, r9
    71b4:	it	ne
    71b6:	movne.w	r9, #2
    71ba:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    71be:	movs	r0, #1
    71c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    71c4:	cmp	r7, #10
    71c6:	beq.n	7250 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    71c8:	cmp	r5, r2
    71ca:	blt.n	7250 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
    71cc:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    71ce:	movs	r7, #10
      i = 8;    // Place for extension.
    71d0:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    71d2:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    71d6:	mov.w	ip, #0
    71da:	b.n	718e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    71dc:	cmp	r5, r2
    71de:	bne.n	719a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x17a>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    71e0:	cmp	r7, #10
    71e2:	beq.n	7250 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
    71e4:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    71e6:	movs	r7, #10
      i = 8;    // Place for extension.
    71e8:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    71ea:	mov.w	r8, #16
    71ee:	b.n	718e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    71f0:	cmp	r3, #45	; 0x2d
    71f2:	bne.n	716a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    71f4:	sub.w	lr, r3, #33	; 0x21
    71f8:	cmp.w	lr, #93	; 0x5d
    71fc:	bhi.n	716a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    71fe:	cmp	r5, r2
    7200:	beq.n	71e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c0>
    7202:	cmp	r7, r6
    7204:	bcc.n	71c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    7206:	sub.w	lr, r3, #97	; 0x61
    720a:	cmp.w	lr, #25
    720e:	bhi.n	7278 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x258>
        c += 'A' - 'a';
    7210:	subs	r3, #32
    7212:	uxtb	r3, r3
        lc |= bit;
    7214:	orr.w	r9, r8, r9
    7218:	b.n	7178 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    721a:	sub.w	lr, r3, #91	; 0x5b
    721e:	cmp.w	lr, #2
    7222:	bls.n	716a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    7224:	b.n	71f4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d4>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    7226:	str	r7, [r2, #0]
    7228:	adds	r7, r0, r4
    722a:	b.n	70cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    722c:	cmp	r4, #255	; 0xff
    722e:	ble.n	7264 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
    DBG_FAIL_MACRO;
    7230:	movs	r0, #229	; 0xe5
    7232:	bl	6e5c <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7236:	movs	r0, #0
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
    7238:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    723c:	ldrb	r3, [r1, #12]
    723e:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7240:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    7242:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    7244:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7246:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    7248:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    724a:	strb	r2, [r3, #14]
    724c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7250:	ldrb	r3, [r1, #13]
    7252:	cmp	r3, #32
    7254:	bne.n	723c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21c>
    DBG_FAIL_MACRO;
    7256:	movw	r0, #285	; 0x11d
    725a:	bl	6e5c <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    725e:	movs	r0, #0
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    DBG_FAIL_MACRO;
    goto fail;
    7260:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7264:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    7266:	mov	r3, r4
    7268:	b.n	70e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    726a:	str	r0, [r2, #0]
    726c:	mov	r4, r3
    726e:	mov.w	r5, #4294967295
    7272:	b.n	70e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    7274:	mov	sl, r9
    7276:	b.n	71a4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x184>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    7278:	sub.w	lr, r3, #65	; 0x41
    727c:	cmp.w	lr, #25
        uc |= bit;
    7280:	it	ls
    7282:	orrls.w	sl, r8, sl
    7286:	b.n	7178 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
    7288:	.word	0x35000101

0000728c <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    728c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7290:	ldrb	r3, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7292:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7294:	movs	r2, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7296:	and.w	r3, r3, #2
    729a:	strb.w	r2, [sp, #4]
    729e:	strb.w	r2, [sp, #5]
    72a2:	strb.w	r2, [sp, #6]
    72a6:	cmp	r3, #0
    72a8:	beq.n	7324 <FatFile::remove()+0x98>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    72aa:	ldr	r1, [r0, #32]
    72ac:	mov	r6, r0
    72ae:	cbnz	r1, 7308 <FatFile::remove()+0x7c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    72b0:	movs	r1, #1
    72b2:	mov	r0, r6
    72b4:	bl	59dc <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    72b8:	mov	r7, r0
    72ba:	cmp	r0, #0
    72bc:	beq.w	73e8 <FatFile::remove()+0x15c>
    72c0:	subs	r1, r7, #1
    72c2:	add.w	r0, r7, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    72c6:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    72c8:	lsrs	r2, r4, #1
    72ca:	ldrb.w	r5, [r1, #1]!
    72ce:	orr.w	r3, r2, r4, lsl #7
    72d2:	uxtab	r3, r5, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    72d6:	cmp	r1, r0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    72d8:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    72da:	bne.n	72c8 <FatFile::remove()+0x3c>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    72dc:	mov.w	r8, #229	; 0xe5
    72e0:	strb.w	r8, [r7]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    72e4:	ldr	r5, [r6, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    72e6:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    72e8:	add.w	r0, r5, #40	; 0x28
    72ec:	strb	r3, [r6, #0]
  m_flags = 0;
    72ee:	strb	r3, [r6, #2]
    72f0:	bl	69b8 <FatCache::sync()>
    72f4:	cbnz	r0, 7338 <FatFile::remove()+0xac>

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    72f6:	movw	r0, #594	; 0x252
    72fa:	bl	6e5c <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    72fe:	movs	r5, #0
}
    7300:	mov	r0, r5
    7302:	add	sp, #40	; 0x28
    7304:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7308:	ldr	r0, [r0, #8]
    730a:	bl	6bb4 <FatPartition::freeChain(unsigned long)>
    730e:	mov	r5, r0
    7310:	cmp	r0, #0
    7312:	bne.n	72b0 <FatFile::remove()+0x24>
    DBG_FAIL_MACRO;
    7314:	movw	r0, #574	; 0x23e
    7318:	bl	6e5c <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    731c:	mov	r0, r5
    731e:	add	sp, #40	; 0x28
    7320:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    7324:	movw	r0, #569	; 0x239
    7328:	and.w	r5, r3, #255	; 0xff
    732c:	bl	6e5c <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    7330:	mov	r0, r5
    7332:	add	sp, #40	; 0x28
    7334:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7338:	add.w	r0, r5, #564	; 0x234
    733c:	bl	69b8 <FatCache::sync()>
    7340:	cmp	r0, #0
    7342:	beq.n	72f6 <FatFile::remove()+0x6a>
    7344:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7346:	ldr	r3, [r0, #0]
    7348:	ldr	r3, [r3, #20]
    734a:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    734c:	mov	r5, r0
    734e:	cmp	r0, #0
    7350:	beq.n	72f6 <FatFile::remove()+0x6a>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    7352:	ldrb	r3, [r6, #3]
    7354:	cmp	r3, #0
    7356:	beq.n	7300 <FatFile::remove()+0x74>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    7358:	add	r0, sp, #4
    735a:	mov	r1, r6
    735c:	bl	6ebc <FatFile::openCluster(FatFile*)>
    7360:	mov	r3, r0
    7362:	cmp	r0, #0
    7364:	beq.n	73dc <FatFile::remove()+0x150>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7366:	ldrb	r3, [r6, #3]
    7368:	movs	r7, #1
    736a:	cbnz	r3, 73b0 <FatFile::remove()+0x124>
    736c:	b.n	73f4 <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    736e:	add	r0, sp, #4
    7370:	bl	5e38 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7374:	adds	r1, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    7376:	mov	r3, r0
    7378:	cmp	r0, #0
    737a:	beq.n	7400 <FatFile::remove()+0x174>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    737c:	ldrb	r2, [r0, #11]
    737e:	cmp	r2, #15
    7380:	bne.n	73d0 <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    7382:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7384:	and.w	r0, r2, #31
    7388:	cmp	r7, r0
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    738a:	uxtb	r7, r1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    738c:	bne.n	73d0 <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    738e:	ldrb	r1, [r3, #13]
    7390:	cmp	r1, r4
    7392:	bne.n	73d0 <FatFile::remove()+0x144>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    7394:	strb.w	r8, [r3]
    m_vol->cacheDirty();
    7398:	ldr	r1, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    739a:	ldrb.w	r3, [r1, #40]	; 0x28
    739e:	orr.w	r3, r3, #1
    73a2:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    73a6:	lsls	r3, r2, #25
    73a8:	bmi.n	740c <FatFile::remove()+0x180>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    73aa:	ldrb	r3, [r6, #3]
    73ac:	cmp	r3, r7
    73ae:	bcc.n	73f4 <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    73b0:	ldrh	r1, [r6, #4]
    73b2:	subs	r1, r1, r7
    73b4:	lsls	r1, r1, #5
    73b6:	add	r0, sp, #4
    73b8:	bl	5e88 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    73bc:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    73be:	mov	r3, r0
    73c0:	cmp	r0, #0
    73c2:	bne.n	736e <FatFile::remove()+0xe2>
      DBG_FAIL_MACRO;
    73c4:	movw	r0, #607	; 0x25f
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    73c8:	mov	r5, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    73ca:	bl	6e5c <dbgPrint(unsigned short)>
      goto fail;
    73ce:	b.n	7300 <FatFile::remove()+0x74>
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    73d0:	movw	r0, #618	; 0x26a
    73d4:	bl	6e5c <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    73d8:	movs	r5, #0
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    73da:	b.n	7300 <FatFile::remove()+0x74>
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    73dc:	movw	r0, #602	; 0x25a
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    73e0:	mov	r5, r3
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    73e2:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
    73e6:	b.n	7300 <FatFile::remove()+0x74>
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    73e8:	mov.w	r0, #580	; 0x244
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    73ec:	mov	r5, r7
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    73ee:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
    73f2:	b.n	7300 <FatFile::remove()+0x74>
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    73f4:	movw	r0, #633	; 0x279
    73f8:	bl	6e5c <dbgPrint(unsigned short)>

fail:
  return false;
    73fc:	movs	r5, #0
    73fe:	b.n	7300 <FatFile::remove()+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7400:	mov.w	r0, #612	; 0x264
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7404:	mov	r5, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7406:	bl	6e5c <dbgPrint(unsigned short)>
      goto fail;
    740a:	b.n	7300 <FatFile::remove()+0x74>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    740c:	ldr	r4, [r6, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    740e:	add.w	r0, r4, #40	; 0x28
    7412:	bl	69b8 <FatCache::sync()>
    7416:	cbnz	r0, 7424 <FatFile::remove()+0x198>
        DBG_FAIL_MACRO;
    7418:	movw	r0, #626	; 0x272
    741c:	bl	6e5c <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7420:	movs	r5, #0
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
        DBG_FAIL_MACRO;
        goto fail;
    7422:	b.n	7300 <FatFile::remove()+0x74>
    7424:	add.w	r0, r4, #564	; 0x234
    7428:	bl	69b8 <FatCache::sync()>
    742c:	cmp	r0, #0
    742e:	beq.n	7418 <FatFile::remove()+0x18c>
    7430:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7432:	ldr	r3, [r0, #0]
    7434:	ldr	r3, [r3, #20]
    7436:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7438:	cmp	r0, #0
    743a:	beq.n	7418 <FatFile::remove()+0x18c>
    743c:	b.n	7300 <FatFile::remove()+0x74>
    743e:	nop

00007440 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    7440:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
    7444:	ldrb	r3, [r1, #0]
    7446:	lsls	r2, r3, #31
    7448:	bpl.n	7538 <FatFile::lfnUniqueSfn(fname_t*)+0xf8>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    744a:	ldrb	r7, [r1, #12]
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');
    744c:	adds	r3, r1, r7
    744e:	mov	r5, r1
    7450:	ldrb	r2, [r3, #13]
    7452:	cmp	r2, #126	; 0x7e
    7454:	mov	r8, r0
    7456:	beq.n	7480 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
    7458:	ldrb	r3, [r3, #14]
    745a:	cmp	r3, #49	; 0x31
    745c:	beq.n	7480 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    745e:	movs	r1, #9
    7460:	ldr	r0, [pc, #260]	; (7568 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    7462:	bl	96a8 <usb_serial_write>
    7466:	movs	r1, #107	; 0x6b
    7468:	ldr	r0, [pc, #256]	; (756c <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    746a:	bl	96a8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    746e:	movw	r1, #646	; 0x286
    7472:	ldr	r0, [pc, #252]	; (7570 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7474:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7478:	ldr	r0, [pc, #244]	; (7570 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    747a:	bl	abc4 <Print::println()>
    747e:	b.n	747e <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
    7480:	movs	r6, #2
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7482:	add.w	r9, r5, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    7486:	ldr	r1, [r5, #4]
    7488:	ldr	r2, [r5, #8]
    748a:	adds	r3, r6, r1
    748c:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    748e:	cbz	r1, 74a2 <FatFile::lfnUniqueSfn(fname_t*)+0x62>
    7490:	adds	r0, r2, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    7492:	ldrb.w	r1, [r2], #1
    7496:	add.w	r3, r3, r3, lsl #5
    749a:	eors	r3, r1
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    749c:	cmp	r0, r2
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    749e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    74a0:	bne.n	7492 <FatFile::lfnUniqueSfn(fname_t*)+0x52>
    74a2:	cmp	r7, #3
    74a4:	it	cs
    74a6:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    74a8:	adds	r2, r7, #4
    74aa:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    74ac:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    74b0:	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    74b2:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    74b4:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    74b6:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    74b8:	ite	ls
    74ba:	addls	r1, #48	; 0x30
    74bc:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    74be:	cmp	r2, r7
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    74c0:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    74c4:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    74c6:	bhi.n	74ac <FatFile::lfnUniqueSfn(fname_t*)+0x6c>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    74c8:	adds	r3, r5, r7
    74ca:	movs	r2, #126	; 0x7e
    74cc:	strb	r2, [r3, #13]
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    74ce:	movs	r1, #0
    74d0:	mov	r0, r8
    74d2:	bl	5e88 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    74d6:	movs	r1, #1
    74d8:	mov	r0, r8
    74da:	bl	5e38 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    74de:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    74e0:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    74e2:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    74e4:	cbz	r0, 750e <FatFile::lfnUniqueSfn(fname_t*)+0xce>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    74e6:	ldrb	r3, [r4, #0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    74e8:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    74ea:	cbz	r3, 7514 <FatFile::lfnUniqueSfn(fname_t*)+0xd4>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    74ec:	ldrb	r3, [r4, #11]
    74ee:	lsls	r3, r3, #28
    74f0:	bmi.n	74d6 <FatFile::lfnUniqueSfn(fname_t*)+0x96>
    74f2:	bl	c170 <memcmp>
    74f6:	mov	r4, r0
    74f8:	cmp	r0, #0
    74fa:	bne.n	74d6 <FatFile::lfnUniqueSfn(fname_t*)+0x96>
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    74fc:	cmp	r6, #99	; 0x63
    74fe:	bne.n	751a <FatFile::lfnUniqueSfn(fname_t*)+0xda>
        break;
      }
    }
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;
    7500:	movw	r0, #686	; 0x2ae
    7504:	bl	6e5c <dbgPrint(unsigned short)>

fail:
  return false;
    7508:	mov	r0, r4
    750a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    750e:	ldrb.w	r3, [r8, #1]
    7512:	cbnz	r3, 755a <FatFile::lfnUniqueSfn(fname_t*)+0x11a>

fail:
  return false;

done:
  return true;
    7514:	movs	r0, #1
    7516:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    751a:	movs	r1, #107	; 0x6b
    751c:	ldr	r0, [pc, #76]	; (756c <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    751e:	bl	96a8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7522:	mov.w	r1, #652	; 0x28c
    7526:	ldr	r0, [pc, #72]	; (7570 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7528:	bl	ac90 <Print::print(long)>
    752c:	adds	r6, #1
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    752e:	ldr	r0, [pc, #64]	; (7570 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7530:	bl	abc4 <Print::println()>
    7534:	uxth	r6, r6
    7536:	b.n	7486 <FatFile::lfnUniqueSfn(fname_t*)+0x46>
    7538:	movs	r1, #9
    753a:	ldr	r0, [pc, #44]	; (7568 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    753c:	bl	96a8 <usb_serial_write>
    7540:	movs	r1, #107	; 0x6b
    7542:	ldr	r0, [pc, #40]	; (756c <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    7544:	bl	96a8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7548:	movw	r1, #645	; 0x285
    754c:	ldr	r0, [pc, #32]	; (7570 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    754e:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7552:	ldr	r0, [pc, #28]	; (7570 <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7554:	bl	abc4 <Print::println()>
    7558:	b.n	7558 <FatFile::lfnUniqueSfn(fname_t*)+0x118>
      if (!dir) {
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
    755a:	movw	r0, #673	; 0x2a1
    755e:	bl	6e5c <dbgPrint(unsigned short)>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    7562:	mov	r0, r4
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
    7564:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7568:	.word	0x0000ff18
    756c:	.word	0x0000ff24
    7570:	.word	0x1fff098c

00007574 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7574:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7578:	mov	r6, r1
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    757a:	ldrb	r1, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    757c:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    757e:	tst.w	r1, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7582:	str	r0, [sp, #32]
    7584:	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7586:	beq.n	758c <FatFile::open(FatFile*, fname_t*, int)+0x18>
    7588:	ldrb	r3, [r0, #0]
    758a:	cbz	r3, 759e <FatFile::open(FatFile*, fname_t*, int)+0x2a>
    DBG_FAIL_MACRO;
    758c:	movw	r0, #319	; 0x13f
    7590:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7594:	movs	r5, #0
}
    7596:	mov	r0, r5
    7598:	add	sp, #52	; 0x34
    759a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    759e:	ldrb	r3, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    75a0:	ldr.w	r8, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    75a4:	lsls	r3, r3, #30
    75a6:	mov	fp, r2
    75a8:	bne.n	762c <FatFile::open(FatFile*, fname_t*, int)+0xb8>
    75aa:	movs	r7, #1
    75ac:	movs	r1, #0
    75ae:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    75b0:	mov	r9, r1
    75b2:	bl	5e88 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    75b6:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    75ba:	str.w	r9, [sp, #28]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    75be:	str.w	r9, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    75c2:	mov	r4, r9
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    75c4:	mov	sl, r9
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    75c6:	str.w	r9, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    75ca:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    75cc:	movs	r1, #1
    75ce:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    75d0:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    75d2:	bl	5e38 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    75d6:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    75da:	mov	r3, r0
    75dc:	cmp	r0, #0
    75de:	beq.w	76f6 <FatFile::open(FatFile*, fname_t*, int)+0x182>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    75e2:	ldrb	r2, [r0, #0]
    75e4:	cmp	r2, #229	; 0xe5
    75e6:	beq.n	7658 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
    75e8:	cmp	r2, #0
    75ea:	beq.n	7658 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    75ec:	cmp	r4, r7
    75ee:	it	cc
    75f0:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    75f2:	cmp	r2, #46	; 0x2e
    75f4:	beq.n	7652 <FatFile::open(FatFile*, fname_t*, int)+0xde>
    75f6:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    75f8:	cmp	r1, #15
    75fa:	beq.n	7674 <FatFile::open(FatFile*, fname_t*, int)+0x100>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    75fc:	and.w	r1, r1, #8
    7600:	and.w	r2, r1, #255	; 0xff
    7604:	cbnz	r1, 7652 <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (lfnOrd) {
    7606:	cmp.w	sl, #0
    760a:	bne.w	795e <FatFile::open(FatFile*, fname_t*, int)+0x3ea>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    760e:	mov	r0, r3
    7610:	movs	r2, #11
    7612:	ldr	r1, [sp, #16]
    7614:	bl	c170 <memcmp>
    7618:	cmp	r0, #0
    761a:	bne.n	75cc <FatFile::open(FatFile*, fname_t*, int)+0x58>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    761c:	ldrb.w	r3, [fp]
    7620:	lsls	r0, r3, #31
    7622:	bpl.w	793e <FatFile::open(FatFile*, fname_t*, int)+0x3ca>
          goto found;
        }
        fnameFound = true;
    7626:	movs	r3, #1
    7628:	str	r3, [sp, #20]
    762a:	b.n	75cc <FatFile::open(FatFile*, fname_t*, int)+0x58>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    762c:	ldr	r7, [pc, #744]	; (7918 <FatFile::open(FatFile*, fname_t*, int)+0x3a4>)
    762e:	add.w	r3, r8, #12
    7632:	umull	r3, r7, r7, r3
    7636:	lsrs	r7, r7, #2
    7638:	adds	r7, #1
    763a:	uxtb	r7, r7
    763c:	b.n	75ac <FatFile::open(FatFile*, fname_t*, int)+0x38>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    763e:	ldr	r1, [sp, #12]
    7640:	subs	r1, #1
    7642:	uxtb	r1, r1
    7644:	cmp	r2, r1
    7646:	str	r1, [sp, #12]
    7648:	bne.n	7652 <FatFile::open(FatFile*, fname_t*, int)+0xde>
    764a:	ldrb	r2, [r3, #13]
    764c:	ldr	r1, [sp, #28]
    764e:	cmp	r1, r2
    7650:	beq.n	768a <FatFile::open(FatFile*, fname_t*, int)+0x116>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    7652:	mov.w	sl, #0
    7656:	b.n	75cc <FatFile::open(FatFile*, fname_t*, int)+0x58>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    7658:	cmp	r4, #0
    765a:	it	eq
    765c:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    765e:	cmp	r4, r7
        freeFound++;
    7660:	itt	cc
    7662:	addcc	r4, #1
    7664:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7666:	cmp	r2, #0
    7668:	beq.n	76fe <FatFile::open(FatFile*, fname_t*, int)+0x18a>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    766a:	cmp	r2, #229	; 0xe5
    766c:	bne.n	75f2 <FatFile::open(FatFile*, fname_t*, int)+0x7e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    766e:	mov.w	sl, #0
    7672:	b.n	75cc <FatFile::open(FatFile*, fname_t*, int)+0x58>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    7674:	cmp.w	sl, #0
    7678:	bne.n	763e <FatFile::open(FatFile*, fname_t*, int)+0xca>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    767a:	lsls	r5, r2, #25
    767c:	bpl.n	75cc <FatFile::open(FatFile*, fname_t*, int)+0x58>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    767e:	and.w	sl, r2, #31
        checksum = ldir->checksum;
    7682:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7684:	str.w	sl, [sp, #12]
        checksum = ldir->checksum;
    7688:	str	r2, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    768a:	ldr	r2, [sp, #12]
    768c:	subs	r2, #1
    768e:	add.w	r5, r2, r2, lsl #1
    7692:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    7696:	cmp	r8, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7698:	mov	r2, r5
      if (k >= len) {
    769a:	bls.n	7652 <FatFile::open(FatFile*, fname_t*, int)+0xde>
    769c:	add.w	r1, r5, #13
    76a0:	str.w	sl, [sp, #36]	; 0x24
    76a4:	mov	sl, r1
    76a6:	b.n	76d2 <FatFile::open(FatFile*, fname_t*, int)+0x15e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    76a8:	ldr.w	r0, [fp, #8]
    76ac:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    76ae:	cmp.w	ip, #25
    76b2:	it	ls
    76b4:	addls	r1, #32
    76b6:	sub.w	r0, r2, #65	; 0x41
    76ba:	it	ls
    76bc:	uxtbls	r1, r1
    76be:	cmp	r0, #25
    76c0:	itt	ls
    76c2:	addls	r2, #32
    76c4:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    76c6:	cmp	r2, r1
    76c8:	bne.n	7652 <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    76ca:	cmp	lr, sl
    76cc:	beq.w	785a <FatFile::open(FatFile*, fname_t*, int)+0x2e6>
    76d0:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    76d2:	subs	r1, r2, r5
    76d4:	uxtb	r1, r1
    76d6:	mov	r0, r3
    76d8:	bl	6e34 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    76dc:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    76de:	cmp	r8, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    76e0:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    76e4:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    76e8:	beq.w	7908 <FatFile::open(FatFile*, fname_t*, int)+0x394>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    76ec:	cmp	r0, #255	; 0xff
    76ee:	bls.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x134>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    76f0:	mov.w	sl, #0
    76f4:	b.n	75cc <FatFile::open(FatFile*, fname_t*, int)+0x58>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    76f6:	ldrb	r2, [r6, #1]
    76f8:	cmp	r2, #0
    76fa:	bne.w	7860 <FatFile::open(FatFile*, fname_t*, int)+0x2ec>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    76fe:	ldr	r2, [sp, #24]
    7700:	mov	r3, r2
    7702:	lsls	r2, r3, #22
    7704:	bpl.n	7710 <FatFile::open(FatFile*, fname_t*, int)+0x19c>
    7706:	and.w	r3, r3, #3
    770a:	subs	r3, #1
    770c:	cmp	r3, #1
    770e:	bls.n	7722 <FatFile::open(FatFile*, fname_t*, int)+0x1ae>
    DBG_FAIL_MACRO;
    7710:	mov.w	r0, #418	; 0x1a2
    7714:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7718:	movs	r5, #0
}
    771a:	mov	r0, r5
    771c:	add	sp, #52	; 0x34
    771e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    7722:	cmp	r4, #0
    7724:	it	eq
    7726:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7728:	cmp	r4, r7
    772a:	bcc.n	7734 <FatFile::open(FatFile*, fname_t*, int)+0x1c0>
    772c:	b.n	7780 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    772e:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7730:	cmp	r7, r4
    7732:	bls.n	7780 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    dir = dirFile->readDirCache();
    7734:	movs	r1, #0
    7736:	mov	r0, r6
    7738:	bl	5e38 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    773c:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    773e:	cmp	r0, #0
    7740:	bne.n	772e <FatFile::open(FatFile*, fname_t*, int)+0x1ba>
      if (dirFile->getError()) {
    7742:	ldrb	r2, [r6, #1]
    7744:	mov	r3, r0
    7746:	cbz	r2, 775c <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        DBG_FAIL_MACRO;
    7748:	mov.w	r0, #430	; 0x1ae
    goto fail;
  }
  return true;

fail:
  return false;
    774c:	mov	r5, r3

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    774e:	bl	6e5c <dbgPrint(unsigned short)>
        goto fail;
    7752:	b.n	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7754:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    7756:	ldrb	r3, [r3, #4]
    7758:	cmp	r3, #1
    775a:	bhi.n	7780 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    775c:	cmp	r7, r4
    775e:	bls.n	7780 <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7760:	mov	r0, r6
    7762:	bl	5908 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    7766:	adds	r4, #16
    7768:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    776a:	cmp	r0, #0
    776c:	bne.n	7754 <FatFile::open(FatFile*, fname_t*, int)+0x1e0>
    776e:	mov	r5, r0
      DBG_FAIL_MACRO;
    7770:	movw	r0, #441	; 0x1b9
    7774:	bl	6e5c <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7778:	mov	r0, r5
    777a:	add	sp, #52	; 0x34
    777c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    7780:	ldr	r3, [sp, #20]
    7782:	cbz	r3, 7794 <FatFile::open(FatFile*, fname_t*, int)+0x220>
    if (!dirFile->lfnUniqueSfn(fname)) {
    7784:	mov	r1, fp
    7786:	mov	r0, r6
    7788:	bl	7440 <FatFile::lfnUniqueSfn(fname_t*)>
    778c:	mov	r5, r0
    778e:	cmp	r0, #0
    7790:	beq.w	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    7794:	mov.w	r1, r9, lsl #5
    7798:	mov	r0, r6
    779a:	bl	5e88 <FatFile::seekSet(unsigned long)>
    779e:	mov	r5, r0
    77a0:	cmp	r0, #0
    77a2:	beq.w	7970 <FatFile::open(FatFile*, fname_t*, int)+0x3fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    77a6:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    77a8:	ands.w	sl, r7, #255	; 0xff
    77ac:	beq.n	7874 <FatFile::open(FatFile*, fname_t*, int)+0x300>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    77ae:	orr.w	r5, sl, #64	; 0x40
    77b2:	uxtb	r5, r5
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    77b4:	mov	r7, sl
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    77b6:	mov.w	r9, #0
    77ba:	movs	r1, #0
    77bc:	mov	r0, r6
    77be:	bl	5e38 <FatFile::readDirCache(bool)>
    if (!ldir) {
    77c2:	cmp	r0, #0
    77c4:	beq.w	7950 <FatFile::open(FatFile*, fname_t*, int)+0x3dc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    77c8:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    77ca:	ldrb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    77ce:	cmp	sl, r7
    77d0:	orr.w	r3, r3, #1
    77d4:	ite	ne
    77d6:	movne	r4, r7
    77d8:	moveq	r4, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    77da:	movs	r1, #15
    77dc:	strb.w	r3, [r2, #40]	; 0x28
    77e0:	add.w	lr, fp, #23
    77e4:	add.w	r3, fp, #12
    ldir->mustBeZero1 = 0;
    77e8:	strb.w	r9, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    77ec:	strb	r4, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    77ee:	strb	r1, [r0, #11]
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    77f0:	movs	r2, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    77f2:	ldrb.w	ip, [r3, #1]!
    77f6:	lsrs	r1, r2, #1
    77f8:	orr.w	r2, r1, r2, lsl #7
    77fc:	uxtab	r2, ip, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7800:	cmp	r3, lr
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7802:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7804:	bne.n	77f2 <FatFile::open(FatFile*, fname_t*, int)+0x27e>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    7806:	and.w	r4, r4, #31
    780a:	subs	r4, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    780c:	strb	r2, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    780e:	add.w	r3, r4, r4, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    7812:	ldr.w	r2, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7816:	strh.w	r9, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    781a:	add.w	r4, r4, r3, lsl #2
    781e:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    7820:	movs	r3, #0
    7822:	b.n	7842 <FatFile::open(FatFile*, fname_t*, int)+0x2ce>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7824:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7826:	ldrb	r1, [r2, r4]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7828:	bls.n	7854 <FatFile::open(FatFile*, fname_t*, int)+0x2e0>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    782a:	cmp	r3, #10
    782c:	ite	ls
    782e:	strhls	r1, [r0, #0]
    7830:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    7832:	adds	r3, #1
    7834:	uxtb	r3, r3
    7836:	cmp	r3, #13
    7838:	add.w	r4, r4, #1
    783c:	add.w	r0, r0, #2
    7840:	beq.n	786c <FatFile::open(FatFile*, fname_t*, int)+0x2f8>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7842:	cmp	r8, r4
    7844:	bhi.n	7824 <FatFile::open(FatFile*, fname_t*, int)+0x2b0>
    7846:	ite	ne
    7848:	movne.w	r1, #4294967295
    784c:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    784e:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7850:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7852:	bhi.n	782a <FatFile::open(FatFile*, fname_t*, int)+0x2b6>
    7854:	strh.w	r1, [r0, #-3]
    7858:	b.n	7832 <FatFile::open(FatFile*, fname_t*, int)+0x2be>
    785a:	ldr.w	sl, [sp, #36]	; 0x24
    785e:	b.n	75cc <FatFile::open(FatFile*, fname_t*, int)+0x58>
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7860:	movw	r0, #331	; 0x14b
    goto fail;
  }
  return true;

fail:
  return false;
    7864:	mov	r5, r3
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7866:	bl	6e5c <dbgPrint(unsigned short)>
        goto fail;
    786a:	b.n	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    786c:	subs	r7, #1
    786e:	ands.w	r7, r7, #255	; 0xff
    7872:	bne.n	77ba <FatFile::open(FatFile*, fname_t*, int)+0x246>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    7874:	movs	r1, #0
    7876:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7878:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    787a:	bl	5e38 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    787e:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    7882:	mov	r4, r0
    7884:	cmp	r0, #0
    7886:	beq.n	797a <FatFile::open(FatFile*, fname_t*, int)+0x406>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    7888:	movs	r2, #32
    788a:	movs	r1, #0
    788c:	bl	c29c <memset>
  memcpy(dir->name, fname->sfn, 11);
    7890:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    7892:	ldr	r2, [pc, #136]	; (791c <FatFile::open(FatFile*, fname_t*, int)+0x3a8>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    7894:	ldr.w	r1, [r3, #13]!
    7898:	ldr	r0, [r3, #4]
    789a:	str	r0, [r4, #4]
    789c:	str	r1, [r4, #0]
    789e:	ldrh	r1, [r3, #8]
    78a0:	ldrb	r3, [r3, #10]
    78a2:	strb	r3, [r4, #10]
    78a4:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    78a6:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    78aa:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    78ac:	and.w	r3, r3, #24
    78b0:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    78b2:	cbz	r7, 78d8 <FatFile::open(FatFile*, fname_t*, int)+0x364>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    78b4:	add.w	r2, sp, #43	; 0x2b
    78b8:	add.w	r1, sp, #46	; 0x2e
    78bc:	add	r0, sp, #44	; 0x2c
    78be:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    78c0:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    78c4:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    78c8:	ldrb.w	r1, [sp, #43]	; 0x2b
    78cc:	strb	r1, [r4, #13]
    78ce:	strh	r3, [r4, #16]
    78d0:	strh	r3, [r4, #18]
    78d2:	strh	r3, [r4, #24]
    78d4:	strh	r2, [r4, #14]
    78d6:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    78d8:	ldr	r2, [r6, #8]
    78da:	ldrb.w	r3, [r2, #40]	; 0x28
    78de:	orr.w	r3, r3, #1
    78e2:	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    78e6:	mov	r2, r5
    78e8:	str.w	sl, [sp]
    78ec:	ldr	r3, [sp, #24]
    78ee:	ldr	r0, [sp, #32]
    78f0:	mov	r1, r6
    78f2:	bl	5fac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    78f6:	mov	r5, r0
    78f8:	cmp	r0, #0
    78fa:	bne.w	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    DBG_FAIL_MACRO;
    78fe:	mov.w	r0, #504	; 0x1f8
    7902:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
    7906:	b.n	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    7908:	cmp	r0, #0
    790a:	ldr.w	sl, [sp, #36]	; 0x24
    790e:	it	ne
    7910:	movne.w	sl, #0
    7914:	b.n	75cc <FatFile::open(FatFile*, fname_t*, int)+0x58>
    7916:	nop
    7918:	.word	0x4ec4ec4f
    791c:	.word	0x1fff1990
    7920:	subs	r4, r3, #1
    7922:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7924:	ldrb.w	r0, [r4, #1]!
    7928:	lsrs	r1, r2, #1
    792a:	orr.w	r2, r1, r2, lsl #7
    792e:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7932:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7934:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7936:	bne.n	7924 <FatFile::open(FatFile*, fname_t*, int)+0x3b0>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7938:	ldr	r3, [sp, #28]
    793a:	cmp	r3, r2
    793c:	bne.n	7964 <FatFile::open(FatFile*, fname_t*, int)+0x3f0>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    793e:	ldr	r3, [sp, #24]
    7940:	lsls	r1, r3, #20
    7942:	bpl.n	78e6 <FatFile::open(FatFile*, fname_t*, int)+0x372>
    DBG_FAIL_MACRO;
    7944:	mov.w	r0, #410	; 0x19a
    7948:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    794c:	movs	r5, #0

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
    794e:	b.n	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7950:	mov	r3, r0
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7952:	movw	r0, #463	; 0x1cf
    goto fail;
  }
  return true;

fail:
  return false;
    7956:	mov	r5, r3
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7958:	bl	6e5c <dbgPrint(unsigned short)>
      goto fail;
    795c:	b.n	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    795e:	ldr	r1, [sp, #12]
    7960:	cmp	r1, #1
    7962:	beq.n	7920 <FatFile::open(FatFile*, fname_t*, int)+0x3ac>
          goto found;
        }
        DBG_FAIL_MACRO;
    7964:	movw	r0, #393	; 0x189
    7968:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    796c:	movs	r5, #0
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
    796e:	b.n	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!dirFile->lfnUniqueSfn(fname)) {
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    7970:	mov.w	r0, #456	; 0x1c8
    7974:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
    7978:	b.n	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    797a:	movw	r0, #477	; 0x1dd
    goto fail;
  }
  return true;

fail:
  return false;
    797e:	mov	r5, r4
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7980:	bl	6e5c <dbgPrint(unsigned short)>
    goto fail;
    7984:	b.n	7596 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7986:	nop

00007988 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    7988:	push	{r3, r4, r5, lr}
    798a:	movs	r1, #10
    798c:	mov	r5, r0
    798e:	ldr	r0, [pc, #40]	; (79b8 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7990:	ldr	r4, [pc, #40]	; (79bc <dbgPrint(unsigned short)+0x34>)
    7992:	bl	96a8 <usb_serial_write>
    7996:	movs	r1, #14
    7998:	ldr	r0, [pc, #36]	; (79c0 <dbgPrint(unsigned short)+0x38>)
    799a:	bl	96a8 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    799e:	movs	r0, #46	; 0x2e
    79a0:	bl	97b0 <usb_serial_putchar>
    79a4:	mov	r1, r5
    79a6:	mov	r0, r4
    79a8:	bl	ac90 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    79ac:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    79ae:	ldmia.w	sp!, {r3, r4, r5, lr}
    79b2:	b.w	abc4 <Print::println()>
    79b6:	nop
    79b8:	.word	0x0000fe9c
    79bc:	.word	0x1fff098c
    79c0:	.word	0x0000ff90

000079c4 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    79c4:	push	{r3, r4, r5, r6, r7, lr}
    79c6:	ldrb	r4, [r0, #0]
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    79c8:	cbz	r4, 7a26 <FatFile::getSFN(char*)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    79ca:	ands.w	r4, r4, #96	; 0x60
    79ce:	mov	r5, r1
    79d0:	beq.n	79de <FatFile::getSFN(char*)+0x1a>
    name[0] = '/';
    79d2:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    79d4:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    79d6:	strb	r2, [r1, #0]
    name[1] = '\0';
    79d8:	strb	r3, [r1, #1]
    return true;
    79da:	movs	r0, #1
    79dc:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    79de:	mov	r1, r4
    79e0:	bl	59dc <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    79e4:	mov	r6, r0
    79e6:	cbz	r0, 7a30 <FatFile::getSFN(char*)+0x6c>
    79e8:	mov	r1, r4
    79ea:	mov	r2, r4
    79ec:	subs	r0, #1
    79ee:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    79f0:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    79f4:	ldrb.w	r3, [r0, #1]!
    79f8:	cmp	r3, #32
    79fa:	beq.n	7a18 <FatFile::getSFN(char*)+0x54>
      continue;
    }
    if (i == 8) {
    79fc:	cmp	r1, #8
    79fe:	beq.n	7a3a <FatFile::getSFN(char*)+0x76>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7a00:	sub.w	r4, r3, #65	; 0x41
    7a04:	cmp	r4, #25
    7a06:	bhi.n	7a12 <FatFile::getSFN(char*)+0x4e>
    7a08:	ldrb	r4, [r6, #12]
    7a0a:	tst	r7, r4
      c += 'a' - 'A';
    7a0c:	itt	ne
    7a0e:	addne	r3, #32
    7a10:	uxtbne	r3, r3
    }
    name[j++] = c;
    7a12:	strb	r3, [r5, r2]
    7a14:	adds	r2, #1
    7a16:	uxtb	r2, r2
    7a18:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    7a1a:	cmp	r1, #11
    7a1c:	bne.n	79f4 <FatFile::getSFN(char*)+0x30>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    7a1e:	movs	r3, #0
    7a20:	strb	r3, [r5, r2]
  return true;
    7a22:	movs	r0, #1

fail:
  return false;
}
    7a24:	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    7a26:	movs	r0, #37	; 0x25
    7a28:	bl	7988 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7a2c:	mov	r0, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    7a2e:	pop	{r3, r4, r5, r6, r7, pc}
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    DBG_FAIL_MACRO;
    7a30:	movs	r0, #48	; 0x30
    7a32:	bl	7988 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7a36:	mov	r0, r6
    7a38:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7a3a:	strb.w	lr, [r5, r2]
    7a3e:	adds	r2, #1
    7a40:	uxtb	r2, r2
    7a42:	ldrb	r3, [r0, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    7a44:	movs	r7, #16
    7a46:	b.n	7a00 <FatFile::getSFN(char*)+0x3c>

00007a48 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7a48:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    7a4a:	movs	r5, #0
    7a4c:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    7a4e:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    7a50:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7a52:	mov	r6, r0
    7a54:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    7a56:	cbz	r4, 7a7c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7a58:	mov	r1, r0
    7a5a:	movs	r0, #36	; 0x24
    7a5c:	bl	7cb4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7a60:	strb	r5, [r0, #0]
    7a62:	strb	r5, [r0, #1]
    7a64:	strb	r5, [r0, #2]
    7a66:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    7a68:	ldr	r5, [r7, #56]	; 0x38
    7a6a:	mov	r4, r0
    7a6c:	ldmia	r5!, {r0, r1, r2, r3}
    7a6e:	stmia	r4!, {r0, r1, r2, r3}
    7a70:	ldmia	r5!, {r0, r1, r2, r3}
    7a72:	stmia	r4!, {r0, r1, r2, r3}
    7a74:	ldr	r3, [r5, #0]
    7a76:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    7a78:	mov	r0, r6
    7a7a:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    7a7c:	ldr	r3, [r1, #60]	; 0x3c
    7a7e:	cmp	r3, #0
    7a80:	beq.n	7a78 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    7a82:	mov	r1, r0
    7a84:	movs	r0, #56	; 0x38
    7a86:	bl	7cb4 <operator new(unsigned int, unsigned long*)>
    7a8a:	strb.w	r4, [r0, #49]	; 0x31
    7a8e:	strb.w	r4, [r0, #50]	; 0x32
    7a92:	strb.w	r4, [r0, #51]	; 0x33
    7a96:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    7a98:	ldr	r3, [r7, #60]	; 0x3c
    7a9a:	mov	r2, r0
    7a9c:	add.w	r1, r3, #48	; 0x30
    7aa0:	ldr	r5, [r3, #0]
    7aa2:	ldr	r4, [r3, #4]
    7aa4:	ldr	r0, [r3, #8]
    7aa6:	ldr	r7, [r3, #12]
    7aa8:	str	r7, [r2, #12]
    7aaa:	adds	r3, #16
    7aac:	cmp	r3, r1
    7aae:	str	r5, [r2, #0]
    7ab0:	str	r4, [r2, #4]
    7ab2:	str	r0, [r2, #8]
    7ab4:	add.w	r2, r2, #16
    7ab8:	bne.n	7aa0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    7aba:	ldr	r3, [r3, #0]
    7abc:	str	r3, [r2, #0]
    7abe:	b.n	7a78 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00007ac0 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    7ac0:	push	{r4, lr}
    7ac2:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7ac4:	ldr	r0, [r0, #56]	; 0x38
    7ac6:	cbz	r0, 7ad4 <FsBaseFile::close()+0x14>
    7ac8:	bl	5aac <FatFile::close()>
    7acc:	cbz	r0, 7ad4 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    7ace:	movs	r3, #0
    7ad0:	str	r3, [r4, #56]	; 0x38
    return true;
    7ad2:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    7ad4:	ldr	r0, [r4, #60]	; 0x3c
    7ad6:	cbz	r0, 7ae4 <FsBaseFile::close()+0x24>
    7ad8:	bl	3b78 <ExFatFile::close()>
    7adc:	cbz	r0, 7ae4 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    7ade:	movs	r3, #0
    7ae0:	str	r3, [r4, #60]	; 0x3c
    7ae2:	pop	{r4, pc}
    return true;
  }
  return false;
    7ae4:	movs	r0, #0
}
    7ae6:	pop	{r4, pc}

00007ae8 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7ae8:	cbz	r1, 7b5e <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7aea:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aee:	mov	r4, r1
    7af0:	mov	r5, r0
    7af2:	mov	r8, r3
    7af4:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    7af6:	bl	7ac0 <FsBaseFile::close()>
  if (vol->m_fVol) {
    7afa:	ldr.w	r6, [r4, #1144]	; 0x478
    7afe:	cbz	r6, 7b2c <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    7b00:	mov	r1, r5
    7b02:	movs	r0, #36	; 0x24
    7b04:	bl	7cb4 <operator new(unsigned int, unsigned long*)>
    7b08:	movs	r1, #0
    7b0a:	strb	r1, [r0, #0]
    7b0c:	strb	r1, [r0, #1]
    7b0e:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7b10:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    7b14:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7b16:	mov	r3, r8
    7b18:	mov	r2, r7
    7b1a:	bl	5c1c <FatFile::open(FatVolume*, char const*, int)>
    7b1e:	cbz	r0, 7b26 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    7b20:	movs	r0, #1
    7b22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    7b26:	str	r0, [r5, #56]	; 0x38
    return false;
    7b28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    7b2c:	ldr.w	r3, [r4, #1148]	; 0x47c
    7b30:	cbz	r3, 7b62 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    7b32:	mov	r1, r5
    7b34:	movs	r0, #56	; 0x38
    7b36:	bl	7cb4 <operator new(unsigned int, unsigned long*)>
    7b3a:	strb.w	r6, [r0, #49]	; 0x31
    7b3e:	strb.w	r6, [r0, #50]	; 0x32
    7b42:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7b46:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    7b4a:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7b4c:	mov	r3, r8
    7b4e:	mov	r2, r7
    7b50:	bl	45b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7b54:	cmp	r0, #0
    7b56:	bne.n	7b20 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    7b58:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    7b5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7b5e:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7b60:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7b62:	movs	r0, #0
    7b64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007b68 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7b68:	push	{r3, r4, r5, r6, r7, lr}
    7b6a:	mov	r5, r1
    7b6c:	mov	r7, r2
    7b6e:	mov	r4, r0
  close();
    7b70:	bl	7ac0 <FsBaseFile::close()>
  if (dir->m_fFile) {
    7b74:	ldr	r6, [r5, #56]	; 0x38
    7b76:	cbz	r6, 7b9c <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7b78:	mov	r1, r4
    7b7a:	movs	r0, #36	; 0x24
    7b7c:	bl	7cb4 <operator new(unsigned int, unsigned long*)>
    7b80:	movs	r2, #0
    7b82:	strb	r2, [r0, #0]
    7b84:	strb	r2, [r0, #1]
    7b86:	strb	r2, [r0, #2]
    7b88:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7b8a:	mov	r2, r7
    7b8c:	ldr	r1, [r5, #56]	; 0x38
    7b8e:	bl	60dc <FatFile::openNext(FatFile*, int)>
    7b92:	cbz	r0, 7b98 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    7b94:	movs	r0, #1
    7b96:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    7b98:	str	r0, [r4, #56]	; 0x38
    7b9a:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    7b9c:	ldr	r0, [r5, #60]	; 0x3c
    7b9e:	cbz	r0, 7bc4 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    7ba0:	mov	r1, r4
    7ba2:	movs	r0, #56	; 0x38
    7ba4:	bl	7cb4 <operator new(unsigned int, unsigned long*)>
    7ba8:	strb.w	r6, [r0, #49]	; 0x31
    7bac:	strb.w	r6, [r0, #50]	; 0x32
    7bb0:	strb.w	r6, [r0, #51]	; 0x33
    7bb4:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7bb6:	mov	r2, r7
    7bb8:	ldr	r1, [r5, #60]	; 0x3c
    7bba:	bl	45c8 <ExFatFile::openNext(ExFatFile*, int)>
    7bbe:	cmp	r0, #0
    7bc0:	bne.n	7b94 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    7bc2:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    7bc4:	pop	{r3, r4, r5, r6, r7, pc}
    7bc6:	nop

00007bc8 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7bc8:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7bca:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7bcc:	mov	r5, r0
  m_blockDev = blockDev;
    7bce:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    7bd2:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    7bd6:	mov	r1, r0
    7bd8:	mov.w	r0, #1144	; 0x478
    7bdc:	bl	7cb4 <operator new(unsigned int, unsigned long*)>
    7be0:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    7be2:	str	r6, [r0, #4]
    invalidate();
    7be4:	bl	466c <FsCache::invalidate()>
    7be8:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    7bec:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    7bf0:	bl	466c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    7bf4:	strb.w	r6, [r4, #1084]	; 0x43c
    7bf8:	strb.w	r6, [r4, #1137]	; 0x471
    7bfc:	strb.w	r6, [r4, #1138]	; 0x472
    7c00:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7c04:	ldr.w	r1, [r5, #1152]	; 0x480
    7c08:	str.w	r4, [r5, #1148]	; 0x47c
    7c0c:	mov	r0, r4
    7c0e:	movs	r2, #1
    7c10:	bl	47c8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    7c14:	cbnz	r0, 7c52 <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    7c16:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    7c18:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    7c1a:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    7c1e:	movw	r0, #1124	; 0x464
    7c22:	bl	7cb4 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    7c26:	strb	r6, [r0, #7]
    7c28:	strb.w	r6, [r0, #1088]	; 0x440
    7c2c:	strb.w	r6, [r0, #1089]	; 0x441
    7c30:	strb.w	r6, [r0, #1090]	; 0x442
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7c34:	movs	r2, #1
    7c36:	ldr.w	r1, [r5, #1152]	; 0x480
    7c3a:	str.w	r0, [r5, #1144]	; 0x478
    7c3e:	mov	r4, r0
    7c40:	bl	6cec <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    7c44:	cbnz	r0, 7c70 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    7c46:	ldr	r3, [pc, #64]	; (7c88 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    7c48:	movs	r0, #0
    7c4a:	str	r0, [r3, #0]
  m_fVol = nullptr;
    7c4c:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    7c50:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7c52:	add.w	r6, r4, #1088	; 0x440
    7c56:	mov	r0, r6
    7c58:	bl	3b78 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7c5c:	mov	r1, r4
    7c5e:	mov	r0, r6
    7c60:	bl	3c4c <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    7c64:	cmp	r0, #0
    7c66:	beq.n	7c16 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    7c68:	ldr	r3, [pc, #28]	; (7c88 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    7c6a:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    7c6c:	str	r5, [r3, #0]
  return true;
    7c6e:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7c70:	add.w	r6, r4, #1088	; 0x440
    7c74:	mov	r0, r6
    7c76:	bl	5aac <FatFile::close()>
    return m_vwd.openRoot(this);
    7c7a:	mov	r1, r4
    7c7c:	mov	r0, r6
    7c7e:	bl	5acc <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    7c82:	cmp	r0, #0
    7c84:	bne.n	7c68 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    7c86:	b.n	7c46 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    7c88:	.word	0x1fff1994

00007c8c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    7c8c:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    7c8e:	movs	r5, #0
    7c90:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7c94:	ldr	r6, [pc, #24]	; (7cb0 <FsVolume::open(char const*, int)+0x24>)
    7c96:	str	r7, [r0, #8]
    7c98:	mov	r4, r0
    7c9a:	strb	r5, [r0, #4]
    7c9c:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    7c9e:	str	r5, [r0, #72]	; 0x48
    7ca0:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7ca2:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7ca6:	bl	7ae8 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7caa:	mov	r0, r4
    7cac:	pop	{r3, r4, r5, r6, r7, pc}
    7cae:	nop
    7cb0:	.word	0x0000fce4

00007cb4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7cb4:	mov	r0, r1
    7cb6:	bx	lr

00007cb8 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    7cb8:	ldrb	r0, [r0, #19]
    7cba:	bx	lr

00007cbc <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    7cbc:	ldrb	r0, [r0, #21]
    7cbe:	bx	lr

00007cc0 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    7cc0:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7cc2:	ldr	r4, [r0, #0]
    7cc4:	ldr	r4, [r4, #12]
    7cc6:	movs	r3, #1
    7cc8:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    7cca:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7cce:	bx	ip

00007cd0 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    7cd0:	ldrb	r0, [r0, #22]
    7cd2:	bx	lr

00007cd4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    7cd4:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7cd6:	ldr	r4, [r0, #0]
    7cd8:	ldr	r4, [r4, #28]
    7cda:	movs	r3, #1
    7cdc:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    7cde:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7ce2:	bx	ip

00007ce4 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    7ce4:	bx	lr
    7ce6:	nop

00007ce8 <SdSpiCard::~SdSpiCard()>:
    7ce8:	push	{r4, lr}
    7cea:	movs	r1, #24
    7cec:	mov	r4, r0
    7cee:	bl	acb8 <operator delete(void*, unsigned int)>
    7cf2:	mov	r0, r4
    7cf4:	pop	{r4, pc}
    7cf6:	nop

00007cf8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7cf8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cfc:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7cfe:	ldrb	r1, [r0, #16]
    7d00:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7d02:	mov	r4, r0
    7d04:	mov	r5, r2
    7d06:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7d08:	beq.n	7d1a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    7d0a:	ldr	r3, [r4, #0]
    7d0c:	mov	r0, r4
    7d0e:	ldr	r3, [r3, #20]
    7d10:	blx	r3
    7d12:	cbnz	r0, 7d4c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    7d14:	movs	r0, #0
    7d16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7d1a:	ldr	r3, [r0, #12]
    7d1c:	cmp	r3, r6
    7d1e:	bne.n	7d0a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d20:	movs	r6, #0
    7d22:	cbz	r7, 7d3c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    7d24:	ldr	r3, [r4, #0]
    7d26:	mov	r1, r5
    7d28:	ldr	r3, [r3, #68]	; 0x44
    7d2a:	mov	r0, r4
    7d2c:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d2e:	adds	r6, #1
    7d30:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    7d34:	cmp	r0, #0
    7d36:	beq.n	7d14 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d38:	cmp	r7, r6
    7d3a:	bne.n	7d24 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7d3c:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    7d3e:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7d40:	add	r7, r3
    7d42:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    7d44:	cbnz	r2, 7d62 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    7d46:	movs	r0, #1
    7d48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    7d4c:	ldr	r3, [r4, #0]
    7d4e:	mov	r1, r6
    7d50:	ldr	r3, [r3, #72]	; 0x48
    7d52:	mov	r0, r4
    7d54:	blx	r3
    7d56:	cmp	r0, #0
    7d58:	beq.n	7d14 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    7d5a:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7d5c:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    7d5e:	strb	r3, [r4, #16]
    7d60:	b.n	7d20 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7d62:	ldr	r3, [r4, #0]
    7d64:	mov	r0, r4
    7d66:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    7d68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7d6c:	bx	r3
    7d6e:	nop

00007d70 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    7d70:	push	{r4, lr}
    7d72:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    7d74:	adds	r0, #4
    7d76:	bl	9320 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    7d7a:	ldrb	r0, [r4, #18]
    7d7c:	movs	r1, #0
    7d7e:	bl	94a0 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    7d82:	movs	r3, #1
    7d84:	strb	r3, [r4, #20]
    7d86:	pop	{r4, pc}

00007d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    7d88:	push	{r3, r4, r5, lr}
    7d8a:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7d8c:	movs	r1, #1
    7d8e:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7d90:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7d92:	bl	94a0 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7d96:	mov	r0, r5
    7d98:	movs	r1, #255	; 0xff
    7d9a:	bl	9434 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    7d9e:	mov	r0, r5
    7da0:	bl	93b0 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7da4:	movs	r3, #0
    7da6:	strb	r3, [r4, #20]
    7da8:	pop	{r3, r4, r5, pc}
    7daa:	nop

00007dac <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7dac:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    7dae:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7db0:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    7db2:	cbnz	r7, 7db8 <SdSpiCard::isBusy()+0xc>
    7db4:	bl	7d70 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    7db8:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7dba:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7dbc:	mov	r0, r5
    7dbe:	bl	93f8 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    7dc2:	cmp	r0, #255	; 0xff
    7dc4:	add.w	r3, r4, #4294967295
    7dc8:	beq.n	7de6 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    7dca:	ands.w	r4, r3, #255	; 0xff
    7dce:	bne.n	7dbc <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    7dd0:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    7dd2:	cbnz	r7, 7dd8 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7dd4:	ldrb	r3, [r6, #20]
    7dd6:	cbnz	r3, 7ddc <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    7dd8:	mov	r0, r4
    7dda:	pop	{r3, r4, r5, r6, r7, pc}
    7ddc:	mov	r0, r6
    7dde:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7de2:	mov	r0, r4
    7de4:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    7de6:	movs	r4, #0
    7de8:	b.n	7dd2 <SdSpiCard::isBusy()+0x26>
    7dea:	nop

00007dec <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    7dec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7df0:	ldr	r6, [pc, #116]	; (7e68 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    7df2:	sub	sp, #12
    7df4:	ldr	r3, [r6, #0]
    7df6:	str	r3, [sp, #0]
	return ret;
    7df8:	ldr	r5, [sp, #0]
    7dfa:	mov	r4, r0
    7dfc:	mov	r8, r1
    7dfe:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7e00:	uxth	r5, r5
    7e02:	adds	r7, r0, #4
    7e04:	b.n	7e16 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e06:	ldr	r3, [r6, #0]
    7e08:	str	r3, [sp, #4]
	return ret;
    7e0a:	ldr	r3, [sp, #4]
    7e0c:	uxth	r3, r3
    7e0e:	subs	r3, r3, r5
    7e10:	cmp.w	r3, #300	; 0x12c
    7e14:	bgt.n	7e3c <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    7e16:	mov	r0, r7
    7e18:	bl	93f8 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7e1c:	cmp	r0, #255	; 0xff
    7e1e:	strb	r0, [r4, #21]
    7e20:	beq.n	7e06 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    7e22:	cmp	r0, #254	; 0xfe
    7e24:	beq.n	7e42 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7e26:	movs	r3, #24
    7e28:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7e2a:	ldrb	r0, [r4, #20]
    7e2c:	cbz	r0, 7e36 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7e2e:	mov	r0, r4
    7e30:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    7e34:	movs	r0, #0
}
    7e36:	add	sp, #12
    7e38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7e3c:	movs	r3, #29
    7e3e:	strb	r3, [r4, #19]
    7e40:	b.n	7e2a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    7e42:	mov	r2, r9
    7e44:	mov	r1, r8
    7e46:	mov	r0, r7
    7e48:	bl	9414 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    7e4c:	strb	r0, [r4, #21]
    7e4e:	cbz	r0, 7e56 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7e50:	movs	r3, #36	; 0x24
    7e52:	strb	r3, [r4, #19]
    7e54:	b.n	7e2a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7e56:	mov	r0, r7
    7e58:	bl	93f8 <SdSpiArduinoDriver::receive()>
    7e5c:	mov	r0, r7
    7e5e:	bl	93f8 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    7e62:	movs	r0, #1
    7e64:	b.n	7e36 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7e66:	nop
    7e68:	.word	0x1fff19f4

00007e6c <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    7e6c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e6e:	ldr	r5, [pc, #52]	; (7ea4 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    7e70:	sub	sp, #12
    7e72:	ldr	r3, [r5, #0]
    7e74:	str	r3, [sp, #0]
	return ret;
    7e76:	ldr	r4, [sp, #0]
    7e78:	mov	r7, r1
    7e7a:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7e7c:	uxth	r4, r4
    7e7e:	b.n	7e8e <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e80:	ldr	r3, [r5, #0]
    7e82:	str	r3, [sp, #4]
	return ret;
    7e84:	ldr	r3, [sp, #4]
    7e86:	uxth	r3, r3
    7e88:	subs	r3, r3, r4
    7e8a:	cmp	r3, r7
    7e8c:	bgt.n	7e9e <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    7e8e:	mov	r0, r6
    7e90:	bl	93f8 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7e94:	cmp	r0, #255	; 0xff
    7e96:	bne.n	7e80 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    7e98:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    7e9a:	add	sp, #12
    7e9c:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    7e9e:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    7ea0:	add	sp, #12
    7ea2:	pop	{r4, r5, r6, r7, pc}
    7ea4:	.word	0x1fff19f4

00007ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7ea8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    7eac:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7eae:	sub	sp, #8
    7eb0:	mov	r6, r0
    7eb2:	mov	r8, r1
    7eb4:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    7eb6:	cbnz	r3, 7ebc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    7eb8:	bl	7d70 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    7ebc:	cmp.w	r8, #0
    7ec0:	bne.n	7f18 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7ec2:	adds	r4, r6, #4
    7ec4:	mov	r0, r4
    7ec6:	orr.w	r1, r8, #64	; 0x40
    7eca:	bl	9434 <SdSpiArduinoDriver::send(unsigned char)>
    7ece:	add	r7, sp, #4
    7ed0:	add	r5, sp, #8
    7ed2:	ldrb.w	r1, [r5, #-1]!
    7ed6:	mov	r0, r4
    7ed8:	bl	9434 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    7edc:	cmp	r5, r7
    7ede:	bne.n	7ed2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7ee0:	cmp.w	r8, #0
    7ee4:	ite	eq
    7ee6:	moveq	r1, #149	; 0x95
    7ee8:	movne	r1, #135	; 0x87
    7eea:	mov	r0, r4
    7eec:	bl	9434 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7ef0:	mov	r0, r4
    7ef2:	bl	93f8 <SdSpiArduinoDriver::receive()>
    7ef6:	movs	r5, #11
    7ef8:	mov	r0, r4
    7efa:	bl	93f8 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7efe:	lsls	r3, r0, #24
    7f00:	strb	r0, [r6, #21]
    7f02:	bmi.n	7f0a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    7f04:	add	sp, #8
    7f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f0a:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7f0c:	ands.w	r5, r3, #255	; 0xff
    7f10:	bne.n	7ef8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    7f12:	add	sp, #8
    7f14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    7f18:	mov.w	r1, #300	; 0x12c
    7f1c:	mov	r0, r6
    7f1e:	bl	7e6c <SdSpiCard::waitNotBusy(unsigned short)>
    7f22:	b.n	7ec2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00007f24 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7f24:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    7f26:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7f28:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    7f2a:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    7f2c:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    7f2e:	blx	r3
  if (cardCommand(CMD58, 0)) {
    7f30:	mov	r0, r5
    7f32:	movs	r2, #0
    7f34:	movs	r1, #58	; 0x3a
    7f36:	bl	7ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7f3a:	cbnz	r0, 7f58 <SdSpiCard::readOCR(unsigned long*)+0x34>
    7f3c:	adds	r7, r5, #4
    7f3e:	adds	r4, r6, #4
    7f40:	mov	r0, r7
    7f42:	bl	93f8 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    7f46:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    7f4a:	cmp	r6, r4
    7f4c:	bne.n	7f40 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7f4e:	ldrb	r4, [r5, #20]
    7f50:	cbnz	r4, 7f6e <SdSpiCard::readOCR(unsigned long*)+0x4a>
    7f52:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    7f54:	mov	r0, r4
    7f56:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7f58:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7f5a:	movs	r3, #18
    7f5c:	strb	r3, [r5, #19]
    7f5e:	cmp	r4, #0
    7f60:	beq.n	7f54 <SdSpiCard::readOCR(unsigned long*)+0x30>
    7f62:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7f64:	movs	r4, #0
    7f66:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    7f6a:	mov	r0, r4
    7f6c:	pop	{r3, r4, r5, r6, r7, pc}
    7f6e:	mov	r0, r5
    7f70:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7f74:	mov	r0, r4
    7f76:	pop	{r3, r4, r5, r6, r7, pc}

00007f78 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7f78:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    7f7a:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7f7c:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    7f7e:	mov	r4, r0
    7f80:	mov	r5, r1
    7f82:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    7f84:	blx	r3
  if (cardCommand(cmd, 0)) {
    7f86:	mov	r1, r5
    7f88:	mov	r0, r4
    7f8a:	movs	r2, #0
    7f8c:	bl	7ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    7f90:	cbz	r0, 7fa4 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    7f92:	movs	r3, #27
    7f94:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7f96:	ldrb	r0, [r4, #20]
    7f98:	cbz	r0, 7fa2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    7f9a:	mov	r0, r4
    7f9c:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    7fa0:	movs	r0, #0
}
    7fa2:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    7fa4:	mov	r1, r6
    7fa6:	movs	r2, #16
    7fa8:	mov	r0, r4
    7faa:	bl	7dec <SdSpiCard::readData(unsigned char*, unsigned int)>
    7fae:	cmp	r0, #0
    7fb0:	beq.n	7f96 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7fb2:	ldrb	r5, [r4, #20]
    7fb4:	cmp	r5, #0
    7fb6:	beq.n	7fa2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    7fb8:	mov	r0, r4
    7fba:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7fbe:	mov	r0, r5
    7fc0:	pop	{r4, r5, r6, pc}
    7fc2:	nop

00007fc4 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7fc4:	mov	r2, r1
    7fc6:	movs	r1, #9
    7fc8:	b.w	7f78 <SdSpiCard::readRegister(unsigned char, void*)>

00007fcc <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    7fcc:	mov	r2, r1
    7fce:	movs	r1, #10
    7fd0:	b.w	7f78 <SdSpiCard::readRegister(unsigned char, void*)>

00007fd4 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7fd4:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7fd6:	ldr	r3, [r0, #0]
    7fd8:	ldr	r2, [pc, #140]	; (8068 <SdSpiCard::sectorCount()+0x94>)
    7fda:	ldr	r3, [r3, #52]	; 0x34
    7fdc:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    7fde:	sub	sp, #20
    7fe0:	bne.n	8042 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    7fe2:	mov	r2, sp
    7fe4:	movs	r1, #9
    7fe6:	bl	7f78 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7fea:	cbz	r0, 7ffc <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7fec:	ldrb.w	r3, [sp]
    7ff0:	ands.w	r3, r3, #192	; 0xc0
    7ff4:	beq.n	8000 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7ff6:	cmp	r3, #64	; 0x40
    7ff8:	beq.n	8048 <SdSpiCard::sectorCount()+0x74>
    7ffa:	movs	r0, #0
}
    7ffc:	add	sp, #20
    7ffe:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8000:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8004:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8008:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    800c:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8010:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8014:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8018:	and.w	r4, r4, #3
    801c:	lsls	r4, r4, #1
    801e:	lsls	r2, r2, #2
    8020:	and.w	r3, r3, #3
    8024:	orr.w	r0, r4, r0, lsr #7
    8028:	and.w	r1, r1, #15
    802c:	orr.w	r3, r2, r3, lsl #10
    8030:	add	r0, r1
    8032:	orr.w	r3, r3, r5, lsr #6
    8036:	adds	r3, #1
    8038:	subs	r0, #7
    803a:	lsl.w	r0, r3, r0
    803e:	add	sp, #20
    8040:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8042:	mov	r1, sp
    8044:	blx	r3
    8046:	b.n	7fea <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8048:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    804c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8050:	ldrb.w	r0, [sp, #8]
    8054:	adds	r2, r3, #1
    8056:	and.w	r3, r1, #63	; 0x3f
    805a:	add.w	r3, r2, r3, lsl #16
    805e:	add.w	r0, r3, r0, lsl #8
    8062:	lsls	r0, r0, #10
}
    8064:	add	sp, #20
    8066:	pop	{r4, r5, pc}
    8068:	.word	0x00007fc5

0000806c <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    806c:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    806e:	ldr	r3, [r0, #0]
    8070:	ldr	r5, [pc, #68]	; (80b8 <SdSpiCard::readStart(unsigned long)+0x4c>)
    8072:	ldr	r3, [r3, #64]	; 0x40
    8074:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    8076:	sub	sp, #12
    8078:	mov	r4, r0
    807a:	mov	r2, r1
    807c:	bne.n	80ae <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    807e:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    8080:	cmp	r0, #3
    sector <<= 9;
    8082:	it	ne
    8084:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    8086:	movs	r1, #18
    8088:	mov	r0, r4
    808a:	bl	7ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    808e:	cbz	r0, 80a8 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8090:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8092:	movs	r3, #12
    8094:	strb	r3, [r4, #19]
    8096:	cbnz	r0, 809c <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    8098:	add	sp, #12
    809a:	pop	{r4, r5, pc}
    809c:	mov	r0, r4
    809e:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    80a2:	movs	r0, #0
    80a4:	add	sp, #12
    80a6:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    80a8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    80aa:	add	sp, #12
    80ac:	pop	{r4, r5, pc}
    80ae:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    80b0:	blx	r3
    80b2:	ldr	r2, [sp, #4]
    80b4:	b.n	8080 <SdSpiCard::readStart(unsigned long)+0x14>
    80b6:	nop
    80b8:	.word	0x00007cd1

000080bc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    80bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80c0:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    80c2:	ldrb	r1, [r0, #16]
    80c4:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    80c6:	mov	r6, r0
    80c8:	mov	r4, r2
    80ca:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    80cc:	beq.n	80de <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    80ce:	ldr	r3, [r6, #0]
    80d0:	mov	r0, r6
    80d2:	ldr	r3, [r3, #20]
    80d4:	blx	r3
    80d6:	cbnz	r0, 8112 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    80d8:	movs	r0, #0
    80da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    80de:	ldr	r3, [r0, #12]
    80e0:	cmp	r3, r5
    80e2:	bne.n	80ce <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    80e4:	movs	r5, #0
    80e6:	cbz	r7, 8102 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    80e8:	mov	r1, r4
    80ea:	mov.w	r2, #512	; 0x200
    80ee:	mov	r0, r6
    80f0:	bl	7dec <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    80f4:	adds	r5, #1
    80f6:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    80fa:	cmp	r0, #0
    80fc:	beq.n	80d8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    80fe:	cmp	r7, r5
    8100:	bne.n	80e8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    8102:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    8104:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    8106:	add	r7, r3
    8108:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    810a:	cbnz	r2, 8126 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    810c:	movs	r0, #1
    810e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    8112:	mov	r1, r5
    8114:	mov	r0, r6
    8116:	bl	806c <SdSpiCard::readStart(unsigned long)>
    811a:	cmp	r0, #0
    811c:	beq.n	80d8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    811e:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    8120:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    8122:	strb	r3, [r6, #16]
    8124:	b.n	80e4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    8126:	ldr	r3, [r6, #0]
    8128:	mov	r0, r6
    812a:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    812c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    8130:	bx	r3
    8132:	nop

00008134 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    8134:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    8136:	movs	r2, #0
    8138:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    813a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    813c:	bl	7ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8140:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    8142:	cbz	r0, 814e <SdSpiCard::readStop()+0x1a>
    8144:	movs	r3, #9
    8146:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8148:	cbnz	r4, 8160 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    814a:	mov	r0, r4
    814c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    814e:	cbnz	r4, 8156 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    8150:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    8152:	mov	r0, r4
    8154:	pop	{r3, r4, r5, pc}
    8156:	mov	r0, r5
    8158:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    815c:	mov	r0, r4
    815e:	pop	{r3, r4, r5, pc}
    8160:	mov	r0, r5
    8162:	movs	r4, #0
    8164:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    8168:	mov	r0, r4
    816a:	pop	{r3, r4, r5, pc}

0000816c <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    816c:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    816e:	ldr	r3, [r0, #0]
    8170:	ldr	r5, [pc, #68]	; (81b8 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    8172:	ldr	r3, [r3, #64]	; 0x40
    8174:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    8176:	sub	sp, #12
    8178:	mov	r4, r0
    817a:	mov	r2, r1
    817c:	bne.n	81ae <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    817e:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8180:	cmp	r0, #3
    sector <<= 9;
    8182:	it	ne
    8184:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    8186:	movs	r1, #25
    8188:	mov	r0, r4
    818a:	bl	7ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    818e:	cbz	r0, 81a8 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8190:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8192:	movs	r3, #14
    8194:	strb	r3, [r4, #19]
    8196:	cbnz	r0, 819c <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    8198:	add	sp, #12
    819a:	pop	{r4, r5, pc}
    819c:	mov	r0, r4
    819e:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    81a2:	movs	r0, #0
    81a4:	add	sp, #12
    81a6:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    81a8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    81aa:	add	sp, #12
    81ac:	pop	{r4, r5, pc}
    81ae:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    81b0:	blx	r3
    81b2:	ldr	r2, [sp, #4]
    81b4:	b.n	8180 <SdSpiCard::writeStart(unsigned long)+0x14>
    81b6:	nop
    81b8:	.word	0x00007cd1

000081bc <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    81bc:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    81be:	ldr	r3, [r0, #0]
    81c0:	ldr	r7, [pc, #172]	; (8270 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    81c2:	ldr	r3, [r3, #52]	; 0x34
    81c4:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    81c6:	sub	sp, #20
    81c8:	mov	r4, r0
    81ca:	mov	r5, r1
    81cc:	mov	r6, r2
    81ce:	bne.n	822c <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    81d0:	mov	r2, sp
    81d2:	movs	r1, #9
    81d4:	bl	7f78 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    81d8:	cbz	r0, 8200 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    81da:	ldrb.w	r3, [sp, #10]
    81de:	lsls	r2, r3, #25
    81e0:	bpl.n	8210 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    81e2:	ldrb	r3, [r4, #22]
    81e4:	cmp	r3, #3
    firstSector <<= 9;
    81e6:	it	ne
    81e8:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    81ea:	mov	r2, r5
    81ec:	mov.w	r1, #32
    81f0:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    81f2:	it	ne
    81f4:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    81f6:	bl	7ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    81fa:	cbz	r0, 8232 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    81fc:	movs	r3, #37	; 0x25
    81fe:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8200:	ldrb	r0, [r4, #20]
    8202:	cbz	r0, 820c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    8204:	mov	r0, r4
    8206:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    820a:	movs	r0, #0
}
    820c:	add	sp, #20
    820e:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8210:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8214:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8218:	lsls	r3, r3, #1
    821a:	adds	r2, r6, #1
    821c:	orr.w	r3, r3, r1, lsr #7
    8220:	orrs	r2, r5
    8222:	tst	r3, r2
    8224:	beq.n	81e2 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    8226:	movs	r3, #38	; 0x26
    8228:	strb	r3, [r4, #19]
    822a:	b.n	8200 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    822c:	mov	r1, sp
    822e:	blx	r3
    8230:	b.n	81d8 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    8232:	mov	r2, r6
    8234:	movs	r1, #33	; 0x21
    8236:	mov	r0, r4
    8238:	bl	7ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    823c:	cmp	r0, #0
    823e:	bne.n	81fc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    8240:	mov	r2, r0
    8242:	movs	r1, #38	; 0x26
    8244:	mov	r0, r4
    8246:	bl	7ea8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    824a:	cmp	r0, #0
    824c:	bne.n	81fc <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    824e:	movw	r1, #10000	; 0x2710
    8252:	mov	r0, r4
    8254:	bl	7e6c <SdSpiCard::waitNotBusy(unsigned short)>
    8258:	cbnz	r0, 8260 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    825a:	movs	r3, #39	; 0x27
    825c:	strb	r3, [r4, #19]
    825e:	b.n	8200 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8260:	ldrb	r5, [r4, #20]
    8262:	cmp	r5, #0
    8264:	beq.n	820c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    8266:	mov	r0, r4
    8268:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    826c:	mov	r0, r5
    826e:	b.n	820c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    8270:	.word	0x00007fc5

00008274 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8274:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8276:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    827a:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    827c:	bl	7e6c <SdSpiCard::waitNotBusy(unsigned short)>
    8280:	mov	r6, r0
    8282:	cbnz	r0, 829c <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8284:	ldrb	r4, [r5, #20]
    8286:	movs	r3, #30
    8288:	strb	r3, [r5, #19]
    828a:	cbnz	r4, 8290 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    828c:	mov	r0, r4
    828e:	pop	{r4, r5, r6, pc}
    8290:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    8292:	mov	r4, r6
    8294:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    8298:	mov	r0, r4
    829a:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    829c:	movs	r1, #253	; 0xfd
    829e:	adds	r0, r5, #4
    82a0:	bl	9434 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    82a4:	ldrb	r4, [r5, #20]
    82a6:	cbnz	r4, 82ae <SdSpiCard::writeStop()+0x3a>
    82a8:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    82aa:	mov	r0, r4
    82ac:	pop	{r4, r5, r6, pc}
    82ae:	mov	r0, r5
    82b0:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    82b4:	b.n	828c <SdSpiCard::writeStop()+0x18>
    82b6:	nop

000082b8 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    82b8:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    82ba:	ldrb	r3, [r0, #16]
    82bc:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    82be:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    82c0:	beq.n	82ce <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    82c2:	cmp	r3, #2
    82c4:	beq.n	82da <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    82c6:	movs	r3, #0
    82c8:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    82ca:	movs	r0, #1
    82cc:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    82ce:	bl	8134 <SdSpiCard::readStop()>
    82d2:	cmp	r0, #0
    82d4:	bne.n	82c6 <SdSpiCard::syncDevice()+0xe>
      return false;
    82d6:	movs	r0, #0
    82d8:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    82da:	bl	8274 <SdSpiCard::writeStop()>
    82de:	cmp	r0, #0
    82e0:	bne.n	82c6 <SdSpiCard::syncDevice()+0xe>
    82e2:	b.n	82d6 <SdSpiCard::syncDevice()+0x1e>

000082e4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    82e4:	push	{r4, r5, r6, lr}
    82e6:	adds	r4, r0, #4
    82e8:	mov	r6, r2
    82ea:	mov	r5, r0
    82ec:	mov	r0, r4
    82ee:	bl	9434 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    82f2:	mov.w	r2, #512	; 0x200
    82f6:	mov	r1, r6
    82f8:	mov	r0, r4
    82fa:	bl	944c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    82fe:	mov	r0, r4
    8300:	movs	r1, #255	; 0xff
    8302:	bl	9434 <SdSpiArduinoDriver::send(unsigned char)>
    8306:	mov	r0, r4
    8308:	movs	r1, #255	; 0xff
    830a:	bl	9434 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    830e:	mov	r0, r4
    8310:	bl	93f8 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8314:	and.w	r3, r0, #31
    8318:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    831a:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    831c:	beq.n	8332 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    831e:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8320:	movs	r3, #31
    8322:	strb	r3, [r5, #19]
    8324:	cbnz	r0, 8328 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    8326:	pop	{r4, r5, r6, pc}
    8328:	mov	r0, r5
    832a:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    832e:	movs	r0, #0
    8330:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    8332:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    8334:	pop	{r4, r5, r6, pc}
    8336:	nop

00008338 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    8338:	push	{r3, r4, r5, lr}
    833a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    833c:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    8340:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8342:	bl	7e6c <SdSpiCard::waitNotBusy(unsigned short)>
    8346:	cbnz	r0, 835a <SdSpiCard::writeData(unsigned char const*)+0x22>
    8348:	movs	r3, #35	; 0x23
    834a:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    834c:	ldrb	r0, [r4, #20]
    834e:	cbz	r0, 8358 <SdSpiCard::writeData(unsigned char const*)+0x20>
    8350:	mov	r0, r4
    8352:	bl	7d88 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    8356:	movs	r0, #0
}
    8358:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    835a:	mov	r2, r5
    835c:	movs	r1, #252	; 0xfc
    835e:	mov	r0, r4
    8360:	bl	82e4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    8364:	cmp	r0, #0
    8366:	beq.n	834c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    8368:	pop	{r3, r4, r5, pc}
    836a:	nop

0000836c <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    836c:	push	{r4}
  SDHC_IRQSIGEN = 0;
    836e:	ldr	r4, [pc, #28]	; (838c <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    8370:	ldr	r2, [pc, #28]	; (8390 <sdIrs()+0x24>)
    8372:	ldr	r1, [pc, #32]	; (8394 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    8374:	ldr	r0, [pc, #32]	; (8398 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8376:	movs	r3, #0
    8378:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    837a:	ldr	r4, [r2, #0]
    837c:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    837e:	ldr	r1, [r1, #0]
    8380:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    8382:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    8386:	strb	r3, [r0, #0]
}
    8388:	bx	lr
    838a:	nop
    838c:	.word	0x400b1038
    8390:	.word	0x400b1030
    8394:	.word	0x1fff19bc
    8398:	.word	0x1fff19d4

0000839c <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    839c:	ldr	r3, [pc, #12]	; (83ac <isBusyCommandComplete()+0x10>)
    839e:	ldr	r0, [pc, #16]	; (83b0 <isBusyCommandComplete()+0x14>)
    83a0:	ldr	r3, [r3, #0]
    83a2:	ands	r0, r3
}
    83a4:	clz	r0, r0
    83a8:	lsrs	r0, r0, #5
    83aa:	bx	lr
    83ac:	.word	0x400b1030
    83b0:	.word	0x000f0001

000083b4 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    83b4:	ldr	r3, [pc, #8]	; (83c0 <isBusyCommandInhibit()+0xc>)
    83b6:	ldr	r0, [r3, #0]
}
    83b8:	and.w	r0, r0, #1
    83bc:	bx	lr
    83be:	nop
    83c0:	.word	0x400b1024

000083c4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    83c4:	ldr	r3, [pc, #4]	; (83cc <isBusyDMA()+0x8>)
    83c6:	ldrb	r0, [r3, #0]
}
    83c8:	bx	lr
    83ca:	nop
    83cc:	.word	0x1fff19d4

000083d0 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    83d0:	ldr	r3, [pc, #12]	; (83e0 <isBusyFifoRead()+0x10>)
    83d2:	ldr	r0, [r3, #0]
    83d4:	eor.w	r0, r0, #2048	; 0x800
}
    83d8:	ubfx	r0, r0, #11, #1
    83dc:	bx	lr
    83de:	nop
    83e0:	.word	0x400b1024

000083e4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    83e4:	ldr	r3, [pc, #12]	; (83f4 <isBusyFifoWrite()+0x10>)
    83e6:	ldr	r0, [r3, #0]
    83e8:	eor.w	r0, r0, #1024	; 0x400
}
    83ec:	ubfx	r0, r0, #10, #1
    83f0:	bx	lr
    83f2:	nop
    83f4:	.word	0x400b1024

000083f8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    83f8:	ldr	r3, [pc, #12]	; (8408 <isBusyTransferComplete()+0x10>)
    83fa:	ldr	r0, [pc, #16]	; (840c <isBusyTransferComplete()+0x14>)
    83fc:	ldr	r3, [r3, #0]
    83fe:	ands	r0, r3
}
    8400:	clz	r0, r0
    8404:	lsrs	r0, r0, #5
    8406:	bx	lr
    8408:	.word	0x400b1030
    840c:	.word	0x117f0002

00008410 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    8410:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8414:	ldr	r3, [pc, #176]	; (84c8 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    8416:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    841a:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    841c:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    841e:	bhi.n	84b8 <setSdclk(unsigned long)+0xa8>
    8420:	ldr	r5, [pc, #168]	; (84cc <setSdclk(unsigned long)+0xbc>)
    8422:	movs	r2, #8
    8424:	movs	r1, #1
    sdclkfs <<= 1;
    8426:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8428:	lsls	r3, r1, #4
    842a:	udiv	r3, r5, r3
    842e:	cmp	r0, r3
    8430:	ldr	r4, [pc, #152]	; (84cc <setSdclk(unsigned long)+0xbc>)
    8432:	bcs.n	84b0 <setSdclk(unsigned long)+0xa0>
    8434:	subs	r2, #1
    8436:	bne.n	8426 <setSdclk(unsigned long)+0x16>
    8438:	udiv	r4, r4, r1
    843c:	lsrs	r3, r1, #1
    843e:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8440:	cmp	r0, r4
    8442:	bcs.n	84c0 <setSdclk(unsigned long)+0xb0>
    8444:	ldr	r6, [pc, #132]	; (84cc <setSdclk(unsigned long)+0xbc>)
    8446:	lsls	r3, r1, #1
    8448:	movs	r2, #1
    844a:	b.n	844e <setSdclk(unsigned long)+0x3e>
    844c:	mov	r3, r4
    844e:	udiv	r4, r6, r3
    8452:	cmp	r0, r4
    dvs++;
    8454:	add.w	r5, r2, #1
    8458:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    845c:	bcs.n	84ac <setSdclk(unsigned long)+0x9c>
    845e:	cmp	r5, #16
    8460:	mov	r2, r5
    8462:	bne.n	844c <setSdclk(unsigned long)+0x3c>
    8464:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8466:	ldr	r6, [pc, #104]	; (84d0 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8468:	ldr	r4, [pc, #104]	; (84d4 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    846a:	ldr	r0, [pc, #96]	; (84cc <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    846c:	ldr	r1, [pc, #104]	; (84d8 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    846e:	mov.w	r5, #1000	; 0x3e8
    8472:	mul.w	r3, r5, r3
    8476:	udiv	r3, r0, r3
    847a:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    847c:	ldr	r3, [r4, #0]
    847e:	bic.w	r3, r3, #8
    8482:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8484:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8486:	bic.w	r3, r0, #1044480	; 0xff000
    848a:	bic.w	r3, r3, #4080	; 0xff0
    848e:	orr.w	r3, r3, #917504	; 0xe0000
    8492:	orrs	r3, r7
    8494:	orrs	r2, r3
    8496:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8498:	ldr	r3, [r1, #0]
    849a:	lsls	r3, r3, #28
    849c:	bpl.n	8498 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    849e:	ldr	r2, [pc, #52]	; (84d4 <setSdclk(unsigned long)+0xc4>)
    84a0:	ldr	r3, [r2, #0]
    84a2:	orr.w	r3, r3, #8
    84a6:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    84a8:	pop	{r4, r5, r6, r7}
    84aa:	bx	lr
    84ac:	lsls	r2, r2, #4
    84ae:	b.n	8466 <setSdclk(unsigned long)+0x56>
    84b0:	udiv	r4, r4, r1
    84b4:	lsls	r7, r1, #7
    84b6:	b.n	8440 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    84b8:	ldr	r4, [pc, #16]	; (84cc <setSdclk(unsigned long)+0xbc>)
    84ba:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    84bc:	movs	r1, #1
    84be:	b.n	8440 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    84c0:	mov	r3, r1
    84c2:	movs	r2, #0
    84c4:	b.n	8466 <setSdclk(unsigned long)+0x56>
    84c6:	nop
    84c8:	.word	0x005b8d7f
    84cc:	.word	0x05b8d800
    84d0:	.word	0x1fff19d8
    84d4:	.word	0x400b102c
    84d8:	.word	0x400b1024

000084dc <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    84dc:	ldr	r3, [pc, #4]	; (84e4 <SdioCard::errorCode() const+0x8>)
}
    84de:	ldrb	r0, [r3, #0]
    84e0:	bx	lr
    84e2:	nop
    84e4:	.word	0x1fff097c

000084e8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    84e8:	ldr	r3, [pc, #4]	; (84f0 <SdioCard::errorData() const+0x8>)
    84ea:	ldr	r0, [r3, #0]
}
    84ec:	bx	lr
    84ee:	nop
    84f0:	.word	0x1fff19bc

000084f4 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    84f4:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    84f6:	ldr	r4, [pc, #20]	; (850c <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    84f8:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    84fa:	ldmia	r4!, {r0, r1, r2, r3}
    84fc:	str	r0, [r5, #0]
    84fe:	str	r1, [r5, #4]
    8500:	str	r2, [r5, #8]
    8502:	str	r3, [r5, #12]
  return true;
}
    8504:	movs	r0, #1
    8506:	pop	{r4, r5}
    8508:	bx	lr
    850a:	nop
    850c:	.word	0x1fff199c

00008510 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8510:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    8512:	ldr	r4, [pc, #20]	; (8528 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8514:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    8516:	ldmia	r4!, {r0, r1, r2, r3}
    8518:	str	r0, [r5, #0]
    851a:	str	r1, [r5, #4]
    851c:	str	r2, [r5, #8]
    851e:	str	r3, [r5, #12]
  return true;
}
    8520:	movs	r0, #1
    8522:	pop	{r4, r5}
    8524:	bx	lr
    8526:	nop
    8528:	.word	0x1fff19c4

0000852c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    852c:	ldr	r3, [pc, #8]	; (8538 <SdioCard::readOCR(unsigned long*)+0xc>)
    852e:	ldr	r3, [r3, #0]
    8530:	str	r3, [r1, #0]
  return true;
}
    8532:	movs	r0, #1
    8534:	bx	lr
    8536:	nop
    8538:	.word	0x1fff19b4

0000853c <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    853c:	bx	lr
    853e:	nop

00008540 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    8540:	push	{r3, r4, r5, r6, r7, lr}
    8542:	mov	r5, r0
  uint32_t m = micros();
    8544:	bl	9a50 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8548:	ldr	r7, [pc, #24]	; (8564 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    854a:	mov	r6, r0
    854c:	b.n	8558 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    854e:	bl	9a50 <micros>
    8552:	subs	r0, r0, r6
    8554:	cmp	r0, r7
    8556:	bhi.n	8560 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8558:	blx	r5
    855a:	mov	r4, r0
    855c:	cmp	r0, #0
    855e:	bne.n	854e <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    8560:	mov	r0, r4
    8562:	pop	{r3, r4, r5, r6, r7, pc}
    8564:	.word	0x000f4240

00008568 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8568:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    856c:	ldr.w	r8, [pc, #64]	; 85b0 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8570:	ldr	r7, [pc, #56]	; (85ac <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    8572:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8576:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    8578:	bl	9a50 <micros>
    857c:	mov	r6, r0
    857e:	b.n	858e <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8580:	bl	9a50 <micros>
    8584:	subs	r0, r0, r6
    8586:	cmp	r0, r7
    8588:	bhi.n	85a0 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    858a:	bl	aa2c <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    858e:	blx	r5
    8590:	mov	r4, r0
    8592:	cmp	r0, #0
    8594:	bne.n	8580 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    8596:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    859a:	mov	r0, r4
    859c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    85a0:	movs	r3, #0
    85a2:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    85a6:	mov	r0, r4
    85a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85ac:	.word	0x000f4240
    85b0:	.word	0x1fff19ac

000085b4 <SdioCard::~SdioCard()>:
    85b4:	push	{r4, lr}
    85b6:	movs	r1, #12
    85b8:	mov	r4, r0
    85ba:	bl	acb8 <operator delete(void*, unsigned int)>
    85be:	mov	r0, r4
    85c0:	pop	{r4, pc}
    85c2:	nop

000085c4 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    85c4:	ldr	r3, [pc, #20]	; (85dc <SdioCard::type() const+0x18>)
    85c6:	ldrb	r3, [r3, #0]
    85c8:	cbz	r3, 85d8 <SdioCard::type() const+0x14>
    85ca:	ldr	r3, [pc, #20]	; (85e0 <SdioCard::type() const+0x1c>)
    85cc:	ldrb	r3, [r3, #0]
    85ce:	cmp	r3, #0
    85d0:	ite	ne
    85d2:	movne	r0, #3
    85d4:	moveq	r0, #2
    85d6:	bx	lr
    85d8:	movs	r0, #1
}
    85da:	bx	lr
    85dc:	.word	0x1fff1998
    85e0:	.word	0x1fff19b0

000085e4 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    85e4:	push	{r3, r4, r5, lr}
    85e6:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    85e8:	ldr	r0, [pc, #60]	; (8628 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    85ea:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    85ec:	bl	8540 <waitTimeout(bool (*)())>
    85f0:	cbz	r0, 85f6 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    85f2:	movs	r0, #0
    85f4:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    85f6:	ldr	r2, [pc, #52]	; (862c <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    85f8:	ldr	r3, [pc, #52]	; (8630 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    85fa:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    85fc:	ldr	r0, [pc, #52]	; (8634 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    85fe:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    8600:	bl	8540 <waitTimeout(bool (*)())>
    8604:	cmp	r0, #0
    8606:	bne.n	85f2 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    8608:	ldr	r2, [pc, #44]	; (8638 <cardCommand(unsigned long, unsigned long)+0x54>)
    860a:	ldr	r3, [pc, #48]	; (863c <cardCommand(unsigned long, unsigned long)+0x58>)
    860c:	ldr	r1, [r2, #0]
    860e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8610:	ldr	r1, [r3, #0]
    8612:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8614:	ldr	r2, [r3, #0]
    8616:	lsls	r2, r2, #31
    8618:	bpl.n	85f2 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    861a:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    861c:	tst.w	r3, #983040	; 0xf0000
    8620:	bne.n	85f2 <cardCommand(unsigned long, unsigned long)+0xe>
    8622:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    8624:	pop	{r3, r4, r5, pc}
    8626:	nop
    8628:	.word	0x000083b5
    862c:	.word	0x400b1008
    8630:	.word	0x400b100c
    8634:	.word	0x0000839d
    8638:	.word	0x400b1030
    863c:	.word	0x1fff19bc

00008640 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    8640:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8642:	ldr	r3, [pc, #16]	; (8654 <SdioCard::status()+0x14>)
    8644:	ldr	r0, [pc, #16]	; (8658 <SdioCard::status()+0x18>)
    8646:	ldr	r1, [r3, #0]
    8648:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    864c:	cbz	r0, 8652 <SdioCard::status()+0x12>
    864e:	ldr	r3, [pc, #12]	; (865c <SdioCard::status()+0x1c>)
    8650:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    8652:	pop	{r3, pc}
    8654:	.word	0x1fff19b8
    8658:	.word	0x0d1a0000
    865c:	.word	0x400b1010

00008660 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    8660:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8662:	ldr	r3, [pc, #84]	; (86b8 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    8664:	sub	sp, #20
    8666:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8668:	ldr	r1, [r3, #0]
    866a:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    866e:	cbz	r0, 86b2 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8670:	ldr	r2, [pc, #72]	; (86bc <readReg16(unsigned long, void*)+0x5c>)
    8672:	ldr	r3, [pc, #76]	; (86c0 <readReg16(unsigned long, void*)+0x60>)
    8674:	ldr	r2, [r2, #0]
    8676:	str	r2, [sp, #0]
    8678:	ldr	r1, [r3, #0]
    867a:	str	r1, [sp, #4]
    867c:	ldr	r1, [r3, #4]
    867e:	str	r1, [sp, #8]
    8680:	adds	r3, #8
    8682:	add.w	r4, r5, #15
    8686:	ldr	r3, [r3, #0]
    8688:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    868a:	movs	r3, #0
    868c:	b.n	8692 <readReg16(unsigned long, void*)+0x32>
    868e:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8692:	and.w	r1, r3, #3
    8696:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8698:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    869a:	lsrs	r2, r1
    869c:	add.w	lr, sp, #16
    86a0:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    86a4:	cmp	r3, #15
    86a6:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    86a8:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    86ac:	bne.n	868e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    86ae:	movs	r3, #0
    86b0:	strb	r3, [r5, #15]
  return true;
}
    86b2:	add	sp, #20
    86b4:	pop	{r4, r5, pc}
    86b6:	nop
    86b8:	.word	0x1fff19b8
    86bc:	.word	0x400b1010
    86c0:	.word	0x400b1014

000086c4 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    86c4:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    86c6:	ldr	r3, [pc, #28]	; (86e4 <isBusyCMD13()+0x20>)
    86c8:	ldr	r0, [pc, #28]	; (86e8 <isBusyCMD13()+0x24>)
    86ca:	ldr	r1, [r3, #0]
    86cc:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    86d0:	cbz	r0, 86e0 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    86d2:	ldr	r3, [pc, #24]	; (86ec <isBusyCMD13()+0x28>)
    86d4:	ldr	r0, [r3, #0]
    86d6:	eor.w	r0, r0, #256	; 0x100
    86da:	ubfx	r0, r0, #8, #1
    86de:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    86e0:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    86e2:	pop	{r3, pc}
    86e4:	.word	0x1fff19b8
    86e8:	.word	0x0d1a0000
    86ec:	.word	0x400b1010

000086f0 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    86f0:	ldr	r3, [pc, #16]	; (8704 <SdioCard::isBusy()+0x14>)
    86f2:	ldr	r3, [r3, #0]
    86f4:	cbz	r3, 86f8 <SdioCard::isBusy()+0x8>
    86f6:	bx	r3
    86f8:	ldr	r3, [pc, #12]	; (8708 <SdioCard::isBusy()+0x18>)
    86fa:	ldrb	r0, [r3, #0]
    86fc:	cbnz	r0, 8700 <SdioCard::isBusy()+0x10>
}
    86fe:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8700:	b.w	86c4 <isBusyCMD13()>
    8704:	.word	0x1fff19ac
    8708:	.word	0x1fff19c0

0000870c <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    870c:	ldr	r3, [pc, #20]	; (8724 <waitDmaStatus() [clone .part.6]+0x18>)
    870e:	ldr	r0, [r3, #0]
    8710:	ands.w	r0, r0, #2
    8714:	beq.n	8722 <waitDmaStatus() [clone .part.6]+0x16>
    8716:	ldr	r3, [r3, #0]
    8718:	ldr	r0, [pc, #12]	; (8728 <waitDmaStatus() [clone .part.6]+0x1c>)
    871a:	ands	r0, r3
    871c:	clz	r0, r0
    8720:	lsrs	r0, r0, #5
}
    8722:	bx	lr
    8724:	.word	0x1fff19bc
    8728:	.word	0x117f0000

0000872c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    872c:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    872e:	lsls	r4, r2, #30
    8730:	bne.n	8734 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    8732:	cbnz	r3, 8746 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8734:	ldr	r1, [pc, #124]	; (87b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    8736:	ldr	r3, [pc, #128]	; (87b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8738:	movs	r0, #36	; 0x24
  m_errorLine = line;
    873a:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    873e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8740:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8742:	movs	r0, #0
    8744:	pop	{r3, r4, r5, r6, r7, pc}
    8746:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8748:	ldr	r0, [pc, #112]	; (87bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    874a:	mov	r4, r3
    874c:	mov	r7, r1
    874e:	mov	r5, r2
    8750:	bl	8568 <yieldTimeout(bool (*)())>
    8754:	cbnz	r0, 879e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8756:	ldr	r1, [pc, #104]	; (87c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8758:	ldr	r2, [pc, #104]	; (87c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    875a:	ldr.w	lr, [pc, #128]	; 87dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    875e:	mov.w	ip, #1
    8762:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8766:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8768:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    876a:	ldr	r4, [pc, #92]	; (87c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    876c:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    876e:	ldr	r2, [pc, #92]	; (87cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8770:	ldr	r1, [pc, #92]	; (87d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    8772:	ldr	r0, [pc, #96]	; (87d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8774:	orr.w	r3, r3, #512	; 0x200
    8778:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    877a:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    877c:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    877e:	cbnz	r3, 87ae <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    8780:	lsls	r1, r7, #9
    8782:	mov	r0, r6
    8784:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8788:	cmp	r0, #0
    878a:	beq.n	8742 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    878c:	ldr	r0, [pc, #72]	; (87d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    878e:	bl	8568 <yieldTimeout(bool (*)())>
    8792:	cmp	r0, #0
    8794:	bne.n	8742 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8796:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    879a:	b.w	870c <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    879e:	ldr	r1, [pc, #20]	; (87b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    87a0:	ldr	r3, [pc, #20]	; (87b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87a2:	movs	r0, #10
  m_errorLine = line;
    87a4:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    87a8:	strb	r0, [r1, #0]
  m_errorLine = line;
    87aa:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    87ac:	b.n	8742 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    87ae:	mov	r1, r7
    87b0:	b.n	8782 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    87b2:	nop
    87b4:	.word	0x1fff097c
    87b8:	.word	0x1fff19dc
    87bc:	.word	0x000086c5
    87c0:	.word	0x1fff19bc
    87c4:	.word	0x400b1000
    87c8:	.word	0x400b1004
    87cc:	.word	0x1fff19b0
    87d0:	.word	0x400b1038
    87d4:	.word	0x117f0002
    87d8:	.word	0x000083c5
    87dc:	.word	0x1fff19d4

000087e0 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    87e0:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    87e2:	ldr	r1, [pc, #100]	; (8848 <SdioCard::sectorCount()+0x68>)
    87e4:	ldrb	r3, [r1, #0]
    87e6:	ands.w	r3, r3, #192	; 0xc0
    87ea:	beq.n	8810 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    87ec:	cmp	r3, #64	; 0x40
    87ee:	beq.n	87f6 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    87f0:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    87f2:	pop	{r4, r5, r6}
    87f4:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    87f6:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    87f8:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    87fa:	ldrb	r0, [r1, #8]
    87fc:	adds	r2, r3, #1
    87fe:	and.w	r3, r4, #63	; 0x3f
    8802:	add.w	r3, r2, r3, lsl #16
    8806:	add.w	r0, r3, r0, lsl #8
    880a:	lsls	r0, r0, #10
    880c:	pop	{r4, r5, r6}
    880e:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8810:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8812:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8814:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8816:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8818:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    881a:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    881c:	and.w	r1, r5, #3
    8820:	lsls	r1, r1, #1
    8822:	and.w	r3, r3, #3
    8826:	lsls	r2, r2, #2
    8828:	orr.w	r0, r1, r0, lsr #7
    882c:	orr.w	r3, r2, r3, lsl #10
    8830:	and.w	r1, r4, #15
    8834:	orr.w	r3, r3, r6, lsr #6
    8838:	add	r0, r1
    883a:	subs	r0, #7
    883c:	adds	r3, #1
    883e:	lsl.w	r0, r3, r0
    8842:	pop	{r4, r5, r6}
    8844:	bx	lr
    8846:	nop
    8848:	.word	0x1fff19c4

0000884c <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    884c:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    884e:	ldr	r6, [pc, #176]	; (8900 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    8850:	ldrb	r3, [r6, #10]
    8852:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8856:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8858:	cbnz	r0, 8872 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    885a:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    885e:	ldrb	r2, [r6, #11]
    8860:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8864:	lsls	r3, r3, #1
    8866:	adds	r0, r5, #1
    8868:	orr.w	r3, r3, r2, lsr #7
    886c:	orrs	r0, r1
    886e:	tst	r3, r0
    8870:	bne.n	88b6 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    8872:	ldr	r3, [pc, #144]	; (8904 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    8874:	ldrb	r3, [r3, #0]
    8876:	cbnz	r3, 887c <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8878:	lsls	r1, r1, #9
    lastSector <<= 9;
    887a:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    887c:	ldr	r0, [pc, #136]	; (8908 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    887e:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8882:	mov	r4, r0
    8884:	cbnz	r0, 8898 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8886:	ldr	r1, [pc, #132]	; (890c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8888:	ldr	r3, [pc, #132]	; (8910 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    888a:	movs	r0, #15
  m_errorLine = line;
    888c:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8890:	strb	r0, [r1, #0]
  m_errorLine = line;
    8892:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8894:	mov	r0, r4
    8896:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8898:	mov	r1, r5
    889a:	ldr	r0, [pc, #120]	; (8914 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    889c:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    88a0:	mov	r4, r0
    88a2:	cbnz	r0, 88c8 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88a4:	ldr	r1, [pc, #100]	; (890c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    88a6:	ldr	r3, [pc, #104]	; (8910 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88a8:	movs	r0, #16
  m_errorLine = line;
    88aa:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88ae:	strb	r0, [r1, #0]
  m_errorLine = line;
    88b0:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    88b2:	mov	r0, r4
    88b4:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88b6:	ldr	r1, [pc, #84]	; (890c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    88b8:	ldr	r3, [pc, #84]	; (8910 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88ba:	movs	r0, #38	; 0x26
  m_errorLine = line;
    88bc:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88c0:	strb	r0, [r1, #0]
  m_errorLine = line;
    88c2:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    88c4:	mov	r0, r4
    88c6:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    88c8:	movs	r1, #0
    88ca:	ldr	r0, [pc, #76]	; (8918 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    88cc:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    88d0:	mov	r4, r0
    88d2:	cbnz	r0, 88e4 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88d4:	ldr	r1, [pc, #52]	; (890c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    88d6:	ldr	r3, [pc, #56]	; (8910 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88d8:	movs	r0, #17
  m_errorLine = line;
    88da:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88de:	strb	r0, [r1, #0]
  m_errorLine = line;
    88e0:	str	r2, [r3, #0]
    88e2:	b.n	8894 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    88e4:	ldr	r0, [pc, #52]	; (891c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    88e6:	bl	8540 <waitTimeout(bool (*)())>
    88ea:	cmp	r0, #0
    88ec:	beq.n	8894 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88ee:	ldr	r1, [pc, #28]	; (890c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    88f0:	ldr	r3, [pc, #28]	; (8910 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88f2:	movs	r0, #39	; 0x27
  m_errorLine = line;
    88f4:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    88f8:	strb	r0, [r1, #0]
  m_errorLine = line;
    88fa:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    88fc:	movs	r4, #0
    88fe:	b.n	8894 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    8900:	.word	0x1fff19c4
    8904:	.word	0x1fff19b0
    8908:	.word	0x201a0000
    890c:	.word	0x1fff097c
    8910:	.word	0x1fff19dc
    8914:	.word	0x211a0000
    8918:	.word	0x261b0000
    891c:	.word	0x000086c5

00008920 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    8920:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8922:	movs	r1, #0
    8924:	ldr	r0, [pc, #84]	; (897c <transferStop()+0x5c>)
    8926:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    892a:	mov	r4, r0
    892c:	cbnz	r0, 8940 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    892e:	ldr	r1, [pc, #80]	; (8980 <transferStop()+0x60>)
  m_errorLine = line;
    8930:	ldr	r3, [pc, #80]	; (8984 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8932:	movs	r0, #9
  m_errorLine = line;
    8934:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8938:	strb	r0, [r1, #0]
  m_errorLine = line;
    893a:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    893c:	mov	r0, r4
    893e:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8940:	ldr	r0, [pc, #68]	; (8988 <transferStop()+0x68>)
    8942:	bl	8568 <yieldTimeout(bool (*)())>
    8946:	cbnz	r0, 8966 <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8948:	ldr	r0, [pc, #64]	; (898c <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    894a:	ldr	r1, [pc, #68]	; (8990 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    894c:	ldr	r5, [pc, #68]	; (8994 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    894e:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8950:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8952:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8954:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8958:	orr.w	r2, r2, #67108864	; 0x4000000
    895c:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    895e:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    8960:	str	r3, [r1, #0]
  return true;
}
    8962:	mov	r0, r4
    8964:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8966:	ldr	r1, [pc, #24]	; (8980 <transferStop()+0x60>)
  m_errorLine = line;
    8968:	ldr	r3, [pc, #24]	; (8984 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    896a:	movs	r0, #10
  m_errorLine = line;
    896c:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8970:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8972:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8974:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8976:	mov	r0, r4
    8978:	pop	{r4, r5, r6, pc}
    897a:	nop
    897c:	.word	0x0cdb0000
    8980:	.word	0x1fff097c
    8984:	.word	0x1fff19dc
    8988:	.word	0x000086c5
    898c:	.word	0x400b1034
    8990:	.word	0x400b1028
    8994:	.word	0x400b102c

00008998 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8998:	b.w	8920 <transferStop()>

0000899c <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    899c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    899e:	ldr	r3, [pc, #160]	; (8a40 <SdioCard::writeData(unsigned char const*)+0xa4>)
    89a0:	ldr	r3, [r3, #0]
    89a2:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    89a4:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    89a6:	bmi.n	89ba <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    89a8:	ldr	r3, [pc, #152]	; (8a44 <SdioCard::writeData(unsigned char const*)+0xa8>)
    89aa:	ldr	r2, [r3, #0]
    89ac:	bic.w	r2, r2, #65536	; 0x10000
    89b0:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    89b2:	ldr	r2, [r3, #0]
    89b4:	orr.w	r2, r2, #131072	; 0x20000
    89b8:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    89ba:	ldr	r2, [pc, #136]	; (8a44 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    89bc:	ldr	r0, [pc, #136]	; (8a48 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    89be:	ldr	r3, [r2, #0]
    89c0:	orr.w	r3, r3, #65536	; 0x10000
    89c4:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    89c6:	bl	8540 <waitTimeout(bool (*)())>
    89ca:	cmp	r0, #0
    89cc:	bne.n	8a2c <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    89ce:	ldr	r4, [pc, #112]	; (8a40 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    89d0:	ldr	r0, [pc, #120]	; (8a4c <SdioCard::writeData(unsigned char const*)+0xb0>)
    89d2:	subs	r3, r5, #4
    89d4:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    89d8:	ldr	r2, [r4, #0]
    89da:	lsls	r1, r2, #21
    89dc:	bpl.n	89d8 <SdioCard::writeData(unsigned char const*)+0x3c>
    89de:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    89e2:	ldr.w	r2, [r3, #4]!
    89e6:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    89e8:	cmp	r1, r3
    89ea:	bne.n	89e2 <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    89ec:	cmp	r5, r1
    89ee:	mov	r3, r1
    89f0:	bne.n	89d8 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    89f2:	ldr	r0, [pc, #92]	; (8a50 <SdioCard::writeData(unsigned char const*)+0xb4>)
    89f4:	bl	8540 <waitTimeout(bool (*)())>
    89f8:	cbnz	r0, 8a1a <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    89fa:	ldr	r2, [pc, #88]	; (8a54 <SdioCard::writeData(unsigned char const*)+0xb8>)
    89fc:	ldr	r3, [pc, #88]	; (8a58 <SdioCard::writeData(unsigned char const*)+0xbc>)
    89fe:	ldr	r1, [r2, #0]
    8a00:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8a02:	ldr	r1, [r3, #0]
    8a04:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8a06:	ldr	r2, [r3, #0]
    8a08:	lsls	r2, r2, #30
    8a0a:	bpl.n	8a3c <SdioCard::writeData(unsigned char const*)+0xa0>
    8a0c:	ldr	r3, [r3, #0]
    8a0e:	ldr	r0, [pc, #76]	; (8a5c <SdioCard::writeData(unsigned char const*)+0xc0>)
    8a10:	ands	r0, r3
    8a12:	clz	r0, r0
    8a16:	lsrs	r0, r0, #5
    8a18:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a1a:	ldr	r1, [pc, #68]	; (8a60 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    8a1c:	ldr	r3, [pc, #68]	; (8a64 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a1e:	movs	r0, #35	; 0x23
  m_errorLine = line;
    8a20:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a24:	strb	r0, [r1, #0]
  m_errorLine = line;
    8a26:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    8a28:	movs	r0, #0
    8a2a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a2c:	ldr	r1, [pc, #48]	; (8a60 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    8a2e:	ldr	r3, [pc, #52]	; (8a64 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a30:	movs	r0, #32
  m_errorLine = line;
    8a32:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a36:	strb	r0, [r1, #0]
  m_errorLine = line;
    8a38:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8a3a:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8a3c:	pop	{r3, r4, r5, pc}
    8a3e:	nop
    8a40:	.word	0x400b1024
    8a44:	.word	0x400b1028
    8a48:	.word	0x000083e5
    8a4c:	.word	0x400b1020
    8a50:	.word	0x000083f9
    8a54:	.word	0x400b1030
    8a58:	.word	0x1fff19bc
    8a5c:	.word	0x117f0000
    8a60:	.word	0x1fff097c
    8a64:	.word	0x1fff19dc

00008a68 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8a68:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    8a6a:	ldr	r0, [pc, #80]	; (8abc <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8a6c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    8a6e:	bl	8568 <yieldTimeout(bool (*)())>
    8a72:	cbnz	r0, 8aa8 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8a74:	ldr	r2, [pc, #72]	; (8ac0 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8a76:	ldr	r1, [pc, #76]	; (8ac4 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8a78:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8a7a:	ldr	r0, [pc, #76]	; (8ac8 <SdioCard::writeStart(unsigned long)+0x60>)
    8a7c:	ldr	r5, [pc, #76]	; (8acc <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8a7e:	bic.w	r3, r3, #65536	; 0x10000
    8a82:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8a84:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8a86:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8a88:	cbnz	r3, 8aa4 <SdioCard::writeStart(unsigned long)+0x3c>
    8a8a:	lsls	r1, r4, #9
    8a8c:	ldr	r0, [pc, #64]	; (8ad0 <SdioCard::writeStart(unsigned long)+0x68>)
    8a8e:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8a92:	cbnz	r0, 8aa2 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a94:	ldr	r1, [pc, #60]	; (8ad4 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8a96:	ldr	r3, [pc, #64]	; (8ad8 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a98:	movs	r4, #14
  m_errorLine = line;
    8a9a:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a9e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8aa0:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8aa2:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8aa4:	mov	r1, r4
    8aa6:	b.n	8a8c <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8aa8:	ldr	r1, [pc, #40]	; (8ad4 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8aaa:	ldr	r3, [pc, #44]	; (8ad8 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8aac:	movs	r0, #10
  m_errorLine = line;
    8aae:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ab2:	strb	r0, [r1, #0]
  m_errorLine = line;
    8ab4:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8ab6:	movs	r0, #0
    8ab8:	pop	{r3, r4, r5, pc}
    8aba:	nop
    8abc:	.word	0x000086c5
    8ac0:	.word	0x400b1028
    8ac4:	.word	0x1fff19b0
    8ac8:	.word	0x400b1004
    8acc:	.word	0xffff0200
    8ad0:	.word	0x193a0022
    8ad4:	.word	0x1fff097c
    8ad8:	.word	0x1fff19dc

00008adc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8adc:	push	{r3, r4, r5, r6, r7, lr}
    8ade:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8ae0:	ldrb	r0, [r0, #8]
    8ae2:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8ae4:	mov	r4, r1
    8ae6:	mov	r5, r2
    8ae8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8aea:	bmi.n	8b14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8aec:	cbz	r3, 8b10 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8aee:	add	r7, r1
    8af0:	b.n	8af6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8af2:	cmp	r4, r7
    8af4:	beq.n	8b10 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    8af6:	ldr	r3, [r6, #0]
    8af8:	mov	r2, r5
    8afa:	mov	r1, r4
    8afc:	ldr	r3, [r3, #8]
    8afe:	mov	r0, r6
    8b00:	blx	r3
    8b02:	adds	r4, #1
    8b04:	add.w	r5, r5, #512	; 0x200
    8b08:	cmp	r0, #0
    8b0a:	bne.n	8af2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    8b0c:	movs	r0, #0
    8b0e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8b10:	movs	r0, #1
    8b12:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    8b14:	lsls	r0, r2, #30
    8b16:	beq.n	8b3e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8b18:	cmp	r3, #0
    8b1a:	beq.n	8b10 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8b1c:	add	r7, r1
    8b1e:	b.n	8b24 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    8b20:	cmp	r7, r4
    8b22:	beq.n	8b10 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    8b24:	ldr	r3, [r6, #0]
    8b26:	mov	r2, r5
    8b28:	mov	r1, r4
    8b2a:	ldr	r3, [r3, #8]
    8b2c:	mov	r0, r6
    8b2e:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8b30:	adds	r4, #1
    8b32:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    8b36:	cmp	r0, #0
    8b38:	bne.n	8b20 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    8b3a:	movs	r0, #0
    8b3c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    8b3e:	ldr	r0, [pc, #24]	; (8b58 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    8b40:	bl	872c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8b44:	cmp	r0, #0
    8b46:	bne.n	8b10 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b48:	ldr	r1, [pc, #16]	; (8b5c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    8b4a:	ldr	r3, [pc, #20]	; (8b60 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b4c:	movs	r4, #12
  m_errorLine = line;
    8b4e:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b52:	strb	r4, [r1, #0]
  m_errorLine = line;
    8b54:	str	r2, [r3, #0]
    8b56:	pop	{r3, r4, r5, r6, r7, pc}
    8b58:	.word	0x123a0037
    8b5c:	.word	0x1fff097c
    8b60:	.word	0x1fff19dc

00008b64 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8b64:	push	{r3, r4, r5, r6, r7, lr}
    8b66:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8b68:	ldrb	r0, [r0, #8]
    8b6a:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8b6c:	mov	r4, r1
    8b6e:	mov	r5, r2
    8b70:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8b72:	bmi.n	8b9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8b74:	cbz	r3, 8b98 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8b76:	add	r7, r1
    8b78:	b.n	8b7e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    8b7a:	cmp	r4, r7
    8b7c:	beq.n	8b98 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    8b7e:	ldr	r3, [r6, #0]
    8b80:	mov	r2, r5
    8b82:	mov	r1, r4
    8b84:	ldr	r3, [r3, #24]
    8b86:	mov	r0, r6
    8b88:	blx	r3
    8b8a:	adds	r4, #1
    8b8c:	add.w	r5, r5, #512	; 0x200
    8b90:	cmp	r0, #0
    8b92:	bne.n	8b7a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    8b94:	movs	r0, #0
    8b96:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8b98:	movs	r0, #1
    8b9a:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    8b9c:	lsls	r0, r2, #30
    8b9e:	beq.n	8bc6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8ba0:	cmp	r3, #0
    8ba2:	beq.n	8b98 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8ba4:	add	r7, r1
    8ba6:	b.n	8bac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    8ba8:	cmp	r7, r4
    8baa:	beq.n	8b98 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    8bac:	ldr	r3, [r6, #0]
    8bae:	mov	r2, r5
    8bb0:	mov	r1, r4
    8bb2:	ldr	r3, [r3, #24]
    8bb4:	mov	r0, r6
    8bb6:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8bb8:	adds	r4, #1
    8bba:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    8bbe:	cmp	r0, #0
    8bc0:	bne.n	8ba8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    8bc2:	movs	r0, #0
    8bc4:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    8bc6:	ldr	r0, [pc, #24]	; (8be0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    8bc8:	bl	872c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8bcc:	cmp	r0, #0
    8bce:	bne.n	8b98 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8bd0:	ldr	r1, [pc, #16]	; (8be4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    8bd2:	ldr	r3, [pc, #20]	; (8be8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8bd4:	movs	r4, #14
  m_errorLine = line;
    8bd6:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8bda:	strb	r4, [r1, #0]
  m_errorLine = line;
    8bdc:	str	r2, [r3, #0]
    8bde:	pop	{r3, r4, r5, r6, r7, pc}
    8be0:	.word	0x193a0027
    8be4:	.word	0x1fff097c
    8be8:	.word	0x1fff19dc

00008bec <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8bec:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8bee:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8bf0:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8bf2:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8bf4:	sub.w	sp, sp, #512	; 0x200
    8bf8:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    8bfa:	bpl.n	8c30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    8bfc:	lsls	r3, r5, #30
    8bfe:	beq.n	8c0e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    8c00:	mov	r1, r5
    8c02:	mov	r0, sp
    8c04:	mov.w	r2, #512	; 0x200
    8c08:	bl	94a8 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    8c0c:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    8c0e:	mov	r2, r5
    8c10:	mov	r1, r6
    8c12:	movs	r3, #1
    8c14:	ldr	r0, [pc, #120]	; (8c90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    8c16:	bl	872c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8c1a:	cbnz	r0, 8c2a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c1c:	ldr	r1, [pc, #116]	; (8c94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    8c1e:	ldr	r3, [pc, #120]	; (8c98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c20:	movs	r4, #13
  m_errorLine = line;
    8c22:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c26:	strb	r4, [r1, #0]
  m_errorLine = line;
    8c28:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    8c2a:	add.w	sp, sp, #512	; 0x200
    8c2e:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8c30:	ldrb	r3, [r0, #9]
    8c32:	cmp	r3, #2
    8c34:	mov	r4, r0
    8c36:	beq.n	8c4a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    8c38:	ldr	r3, [r4, #0]
    8c3a:	mov	r0, r4
    8c3c:	ldr	r3, [r3, #20]
    8c3e:	blx	r3
    8c40:	cbnz	r0, 8c7a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    8c42:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    8c44:	add.w	sp, sp, #512	; 0x200
    8c48:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8c4a:	ldr	r3, [r0, #4]
    8c4c:	cmp	r1, r3
    8c4e:	bne.n	8c38 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    8c50:	ldr	r3, [r4, #0]
    8c52:	mov	r1, r5
    8c54:	ldr	r3, [r3, #68]	; 0x44
    8c56:	mov	r0, r4
    8c58:	blx	r3
    8c5a:	cmp	r0, #0
    8c5c:	beq.n	8c42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    8c5e:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8c60:	ldr	r2, [pc, #56]	; (8c9c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    8c62:	adds	r3, #1
    8c64:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8c66:	ldr	r3, [r2, #0]
    8c68:	lsrs	r3, r3, #16
    8c6a:	lsls	r3, r3, #16
    8c6c:	cmp	r3, #0
    8c6e:	bne.n	8c2a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    8c70:	ldr	r3, [r4, #0]
    8c72:	mov	r0, r4
    8c74:	ldr	r3, [r3, #20]
    8c76:	blx	r3
    8c78:	b.n	8c2a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    8c7a:	ldr	r3, [r4, #0]
    8c7c:	mov	r1, r6
    8c7e:	ldr	r3, [r3, #72]	; 0x48
    8c80:	mov	r0, r4
    8c82:	blx	r3
    8c84:	cmp	r0, #0
    8c86:	beq.n	8c42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    8c88:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    8c8a:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    8c8c:	strb	r3, [r4, #9]
    8c8e:	b.n	8c50 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    8c90:	.word	0x183a0001
    8c94:	.word	0x1fff097c
    8c98:	.word	0x1fff19dc
    8c9c:	.word	0x400b1004

00008ca0 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    8ca0:	ldrb	r3, [r0, #9]
    8ca2:	cmp	r3, #1
    8ca4:	beq.n	8cc0 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    8ca6:	cmp	r3, #2
    8ca8:	beq.n	8cae <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    8caa:	movs	r0, #1
    8cac:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8cae:	movs	r1, #0
    if (!writeStop()) {
    8cb0:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8cb2:	strb	r1, [r0, #9]
    if (!writeStop()) {
    8cb4:	ldr	r3, [r3, #76]	; 0x4c
    8cb6:	ldr	r2, [pc, #20]	; (8ccc <SdioCard::syncDevice()+0x2c>)
    8cb8:	cmp	r3, r2
    8cba:	bne.n	8cc8 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8cbc:	b.w	8920 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    8cc0:	movs	r3, #0
    8cc2:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    8cc4:	b.w	8920 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    8cc8:	bx	r3
    8cca:	nop
    8ccc:	.word	0x00008999

00008cd0 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8cd0:	push	{r3, r4, r5, r6, r7, lr}
    8cd2:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8cd4:	ldr	r0, [pc, #116]	; (8d4c <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8cd6:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8cd8:	bl	8540 <waitTimeout(bool (*)())>
    8cdc:	cbz	r0, 8cf0 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cde:	ldr	r1, [pc, #112]	; (8d50 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8ce0:	ldr	r3, [pc, #112]	; (8d54 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ce2:	movs	r0, #10
  m_errorLine = line;
    8ce4:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ce8:	strb	r0, [r1, #0]
  m_errorLine = line;
    8cea:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8cec:	movs	r0, #0
    8cee:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8cf0:	ldr	r2, [pc, #100]	; (8d58 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8cf2:	ldr.w	lr, [pc, #132]	; 8d78 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8cf6:	ldr	r7, [pc, #100]	; (8d5c <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8cf8:	ldr	r6, [pc, #100]	; (8d60 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8cfa:	ldr	r3, [pc, #104]	; (8d64 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8cfc:	mov.w	ip, #1
    8d00:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d04:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8d06:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8d08:	ldr	r5, [pc, #92]	; (8d68 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d0a:	ldr	r2, [pc, #96]	; (8d6c <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8d0c:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d0e:	ldr	r0, [pc, #96]	; (8d70 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8d10:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d12:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d14:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8d18:	cbnz	r0, 8d2a <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d1a:	ldr	r1, [pc, #52]	; (8d50 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8d1c:	ldr	r3, [pc, #52]	; (8d54 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d1e:	movs	r4, #4
  m_errorLine = line;
    8d20:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d24:	strb	r4, [r1, #0]
  m_errorLine = line;
    8d26:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    8d28:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8d2a:	ldr	r0, [pc, #72]	; (8d74 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    8d2c:	bl	8568 <yieldTimeout(bool (*)())>
    8d30:	cbnz	r0, 8d3a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    8d32:	bl	870c <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    8d36:	cbz	r0, 8d3a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    8d38:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d3a:	ldr	r1, [pc, #20]	; (8d50 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8d3c:	ldr	r3, [pc, #20]	; (8d54 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d3e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8d40:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d44:	strb	r0, [r1, #0]
  m_errorLine = line;
    8d46:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    8d48:	movs	r0, #0
    8d4a:	pop	{r3, r4, r5, r6, r7, pc}
    8d4c:	.word	0x000086c5
    8d50:	.word	0x1fff097c
    8d54:	.word	0x1fff19dc
    8d58:	.word	0x1fff19bc
    8d5c:	.word	0x400b1000
    8d60:	.word	0x400b1004
    8d64:	.word	0x400b1038
    8d68:	.word	0x00010040
    8d6c:	.word	0x117f0002
    8d70:	.word	0x063a0011
    8d74:	.word	0x000083c5
    8d78:	.word	0x1fff19d4

00008d7c <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8d7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8d80:	ldr	r5, [pc, #568]	; (8fbc <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8d82:	ldr	r4, [pc, #572]	; (8fc0 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    8d84:	ldr.w	r8, [pc, #684]	; 9034 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8d88:	ldr	r7, [pc, #568]	; (8fc4 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    8d8a:	ldr	r6, [pc, #572]	; (8fc8 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    8d8c:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    8d8e:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8d90:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8d92:	strb	r3, [r0, #9]
  m_initDone = false;
    8d94:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8d98:	strb	r3, [r7, #0]
  m_version2 = false;
    8d9a:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8d9c:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8d9e:	ldr	r2, [pc, #556]	; (8fcc <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8da0:	ldr	r0, [pc, #556]	; (8fd0 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8da2:	ldr	r1, [pc, #560]	; (8fd4 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8da4:	ldr.w	lr, [pc, #656]	; 9038 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8da8:	orr.w	r3, r3, #201326592	; 0xc000000
    8dac:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8dae:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8db0:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8db4:	orr.w	r3, r3, #131072	; 0x20000
    8db8:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8dba:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8dbc:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8dc0:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8dc4:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8dc8:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8dca:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8dce:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8dd0:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8dd2:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8dd4:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8dd6:	ldr	r3, [r2, #0]
    8dd8:	orr.w	r3, r3, #16777216	; 0x1000000
    8ddc:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8de0:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8de2:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8de4:	ldr	r3, [r2, #0]
    8de6:	ldr	r4, [pc, #496]	; (8fd8 <SdioCard::begin(SdioConfig)+0x25c>)
    8de8:	lsls	r1, r3, #7
    8dea:	bmi.n	8de4 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8dec:	mov.w	r0, #400	; 0x190
    8df0:	bl	8410 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8df4:	ldr.w	ip, [pc, #472]	; 8fd0 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8df8:	ldr.w	lr, [pc, #572]	; 9038 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8dfc:	ldr	r1, [pc, #468]	; (8fd4 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8dfe:	ldr	r2, [pc, #476]	; (8fdc <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8e00:	ldr	r0, [pc, #476]	; (8fe0 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8e02:	movw	r3, #1091	; 0x443
    8e06:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8e0a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8e0e:	mov.w	lr, #1088	; 0x440
    8e12:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8e16:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8e18:	add.w	r2, r2, #409600	; 0x64000
    8e1c:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8e1e:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8e20:	ldr	r0, [pc, #448]	; (8fe4 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8e22:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8e24:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    8e26:	ldr	r1, [pc, #448]	; (8fe8 <SdioCard::begin(SdioConfig)+0x26c>)
    8e28:	movs	r0, #81	; 0x51
    8e2a:	bl	9a04 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8e2e:	ldr	r3, [pc, #444]	; (8fec <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8e30:	ldr	r1, [pc, #444]	; (8ff0 <SdioCard::begin(SdioConfig)+0x274>)
    8e32:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8e34:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8e38:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8e3a:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8e3c:	ldr	r3, [r4, #0]
    8e3e:	orr.w	r3, r3, #134217728	; 0x8000000
    8e42:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8e44:	ldr	r1, [r4, #0]
    8e46:	ands.w	r1, r1, #134217728	; 0x8000000
    8e4a:	bne.n	8e44 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    8e4c:	mov	r0, r1
    8e4e:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8e52:	mov	r4, r0
    8e54:	cmp	r0, #0
    8e56:	beq.n	8ef6 <SdioCard::begin(SdioConfig)+0x17a>
    8e58:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    8e5a:	mov.w	r1, #426	; 0x1aa
    8e5e:	ldr	r0, [pc, #404]	; (8ff4 <SdioCard::begin(SdioConfig)+0x278>)
    8e60:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8e64:	cmp	r0, #0
    8e66:	bne.n	8f24 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8e68:	subs	r4, #1
    8e6a:	bne.n	8e5a <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8e6c:	ldrb	r3, [r6, #0]
    8e6e:	ldr	r6, [pc, #392]	; (8ff8 <SdioCard::begin(SdioConfig)+0x27c>)
    8e70:	cmp	r3, #0
    8e72:	it	eq
    8e74:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    8e78:	bl	9a50 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8e7c:	ldr	r4, [pc, #380]	; (8ffc <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    8e7e:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e80:	movs	r1, #0
    8e82:	ldr	r0, [pc, #380]	; (9000 <SdioCard::begin(SdioConfig)+0x284>)
    8e84:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8e88:	cbnz	r0, 8ea0 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8e8a:	ldr	r2, [pc, #376]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8e8c:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e90:	movs	r3, #23
  m_errorLine = line;
    8e92:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e94:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    8e96:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8e98:	mov	r0, r4
    8e9a:	add	sp, #68	; 0x44
    8e9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8ea0:	mov	r1, r6
    8ea2:	ldr	r0, [pc, #356]	; (9008 <SdioCard::begin(SdioConfig)+0x28c>)
    8ea4:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8ea8:	cmp	r0, #0
    8eaa:	beq.n	8e8a <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8eac:	bl	9a50 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8eb0:	ldr	r3, [pc, #344]	; (900c <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8eb2:	ldr	r2, [pc, #328]	; (8ffc <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8eb4:	rsb	r0, r9, r0
    8eb8:	cmp	r0, r3
    8eba:	bhi.n	8e8a <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8ebc:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    8ebe:	cmp	r3, #0
    8ec0:	bge.n	8e80 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    8ec2:	ldr	r3, [pc, #332]	; (9010 <SdioCard::begin(SdioConfig)+0x294>)
    8ec4:	ldr	r1, [r2, #0]
    8ec6:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    8ec8:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8eca:	ldr	r0, [pc, #328]	; (9014 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    8ecc:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    8ece:	it	mi
    8ed0:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8ed2:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    8ed6:	it	mi
    8ed8:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8eda:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8ede:	mov	r4, r0
    8ee0:	cbnz	r0, 8f0a <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8ee2:	ldr	r2, [pc, #288]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8ee4:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ee8:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8eea:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8eec:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8eee:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8ef0:	add	sp, #68	; 0x44
    8ef2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8ef6:	ldr	r2, [pc, #268]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8ef8:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8efc:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8efe:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f00:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f02:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8f04:	add	sp, #68	; 0x44
    8f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8f0a:	movs	r1, #0
    8f0c:	ldr	r0, [pc, #264]	; (9018 <SdioCard::begin(SdioConfig)+0x29c>)
    8f0e:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8f12:	mov	r4, r0
    8f14:	cbnz	r0, 8f46 <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f16:	ldr	r2, [pc, #236]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8f18:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f1c:	movs	r3, #3
  m_errorLine = line;
    8f1e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f20:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    8f22:	b.n	8e98 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    8f24:	ldr	r3, [pc, #212]	; (8ffc <SdioCard::begin(SdioConfig)+0x280>)
    8f26:	ldr	r3, [r3, #0]
    8f28:	cmp.w	r3, #426	; 0x1aa
    8f2c:	beq.n	8f3e <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f2e:	ldr	r2, [pc, #212]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8f30:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f34:	movs	r3, #6
  m_errorLine = line;
    8f36:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f38:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    8f3a:	movs	r4, #0
    8f3c:	b.n	8e98 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    8f3e:	movs	r3, #1
    8f40:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8f42:	ldr	r6, [pc, #180]	; (8ff8 <SdioCard::begin(SdioConfig)+0x27c>)
    8f44:	b.n	8e78 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8f46:	ldr	r3, [pc, #180]	; (8ffc <SdioCard::begin(SdioConfig)+0x280>)
    8f48:	ldr	r6, [pc, #208]	; (901c <SdioCard::begin(SdioConfig)+0x2a0>)
    8f4a:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8f4c:	ldr	r1, [pc, #208]	; (9020 <SdioCard::begin(SdioConfig)+0x2a4>)
    8f4e:	ldr	r0, [pc, #212]	; (9024 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8f50:	lsrs	r3, r3, #16
    8f52:	lsls	r3, r3, #16
    8f54:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8f56:	bl	8660 <readReg16(unsigned long, void*)>
    8f5a:	mov	r4, r0
    8f5c:	cbnz	r0, 8f6c <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f5e:	ldr	r2, [pc, #164]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8f60:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f64:	movs	r3, #7
  m_errorLine = line;
    8f66:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f68:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    8f6a:	b.n	8e98 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    8f6c:	ldr	r1, [pc, #184]	; (9028 <SdioCard::begin(SdioConfig)+0x2ac>)
    8f6e:	ldr	r0, [pc, #188]	; (902c <SdioCard::begin(SdioConfig)+0x2b0>)
    8f70:	bl	8660 <readReg16(unsigned long, void*)>
    8f74:	mov	r4, r0
    8f76:	cbnz	r0, 8f86 <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f78:	ldr	r2, [pc, #136]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8f7a:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f7e:	movs	r3, #8
  m_errorLine = line;
    8f80:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f82:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    8f84:	b.n	8e98 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8f86:	ldr	r1, [r6, #0]
    8f88:	ldr	r0, [pc, #164]	; (9030 <SdioCard::begin(SdioConfig)+0x2b4>)
    8f8a:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8f8e:	mov	r4, r0
    8f90:	cbnz	r0, 8fa0 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f92:	ldr	r2, [pc, #112]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8f94:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f98:	movs	r3, #5
  m_errorLine = line;
    8f9a:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f9c:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    8f9e:	b.n	8e98 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8fa0:	ldr	r1, [r6, #0]
    8fa2:	ldr	r0, [pc, #92]	; (9000 <SdioCard::begin(SdioConfig)+0x284>)
    8fa4:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    8fa8:	cmp	r0, #0
    8faa:	bne.n	903c <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8fac:	ldr	r2, [pc, #84]	; (9004 <SdioCard::begin(SdioConfig)+0x288>)
    8fae:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fb2:	movs	r3, #20
  m_errorLine = line;
    8fb4:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fb6:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    8fb8:	movs	r4, #0
    8fba:	b.n	8e98 <SdioCard::begin(SdioConfig)+0x11c>
    8fbc:	.word	0x1fff097c
    8fc0:	.word	0x4000d800
    8fc4:	.word	0x1fff19b0
    8fc8:	.word	0x1fff1998
    8fcc:	.word	0x40048030
    8fd0:	.word	0x4004d000
    8fd4:	.word	0x4004d008
    8fd8:	.word	0x400b102c
    8fdc:	.word	0x4004d00c
    8fe0:	.word	0x4004d010
    8fe4:	.word	0x117f000b
    8fe8:	.word	0x0000836d
    8fec:	.word	0xe000e108
    8ff0:	.word	0xe000e451
    8ff4:	.word	0x081a0000
    8ff8:	.word	0x40300000
    8ffc:	.word	0x400b1010
    9000:	.word	0x371a0000
    9004:	.word	0x1fff19dc
    9008:	.word	0x29020000
    900c:	.word	0x000f4240
    9010:	.word	0x1fff19b4
    9014:	.word	0x02090000
    9018:	.word	0x031a0000
    901c:	.word	0x1fff19b8
    9020:	.word	0x1fff19c4
    9024:	.word	0x09090000
    9028:	.word	0x1fff199c
    902c:	.word	0x0a090000
    9030:	.word	0x071b0000
    9034:	.word	0x1fff19c0
    9038:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    903c:	movs	r1, #2
    903e:	ldr	r0, [pc, #168]	; (90e8 <SdioCard::begin(SdioConfig)+0x36c>)
    9040:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    9044:	mov	r4, r0
    9046:	cmp	r0, #0
    9048:	beq.n	8fac <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    904a:	ldr	r3, [pc, #160]	; (90ec <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    904c:	ldr	r0, [pc, #160]	; (90f0 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    904e:	ldr	r2, [r3, #0]
    9050:	bic.w	r2, r2, #6
    9054:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9056:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9058:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    905c:	orr.w	r2, r2, #2
    9060:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9062:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9064:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9066:	mvn.w	r0, #4278190080	; 0xff000000
    906a:	bl	8cd0 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    906e:	cbz	r0, 9078 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9070:	ldrb.w	r3, [sp, #13]
    9074:	lsls	r3, r3, #30
    9076:	bmi.n	90ca <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    9078:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    907c:	ldr.w	fp, [pc, #132]	; 9104 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    9080:	ldr.w	sl, [pc, #132]	; 9108 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9084:	ldr.w	r9, [pc, #132]	; 910c <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    9088:	ldr	r7, [pc, #104]	; (90f4 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    908a:	ldr	r6, [pc, #108]	; (90f8 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    908c:	ldr	r5, [pc, #108]	; (90fc <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    908e:	movw	r3, #259	; 0x103
    9092:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    9096:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    909a:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    909e:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    90a0:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    90a2:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    90a4:	bl	8410 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    90a8:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    90ac:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    90b0:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    90b2:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    90b6:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    90ba:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    90be:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    90c0:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    90c2:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    90c4:	strb.w	r2, [r8]
  return true;
    90c8:	b.n	8e98 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    90ca:	mov	r1, sp
    90cc:	ldr	r0, [pc, #48]	; (9100 <SdioCard::begin(SdioConfig)+0x384>)
    90ce:	bl	8cd0 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    90d2:	cmp	r0, #0
    90d4:	beq.n	9078 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    90d6:	ldrb.w	r3, [sp, #16]
    90da:	and.w	r3, r3, #15
    90de:	cmp	r3, #1
    90e0:	bne.n	9078 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    90e2:	movw	r0, #50000	; 0xc350
    90e6:	b.n	907c <SdioCard::begin(SdioConfig)+0x300>
    90e8:	.word	0x061a0000
    90ec:	.word	0x400b1028
    90f0:	.word	0x400b1044
    90f4:	.word	0x4004d00c
    90f8:	.word	0x4004d010
    90fc:	.word	0x4004d014
    9100:	.word	0x80fffff1
    9104:	.word	0x4004d000
    9108:	.word	0x4004d004
    910c:	.word	0x4004d008

00009110 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    9110:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9112:	ldr	r3, [pc, #160]	; (91b4 <SdioCard::readData(unsigned char*)+0xa4>)
    9114:	ldr	r3, [r3, #0]
    9116:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    9118:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    911a:	bmi.n	913a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    911c:	ldr	r3, [pc, #152]	; (91b8 <SdioCard::readData(unsigned char*)+0xa8>)
    911e:	ldr	r2, [r3, #0]
    9120:	bic.w	r2, r2, #65536	; 0x10000
    9124:	str	r2, [r3, #0]
    noInterrupts();
    9126:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9128:	ldr	r2, [r3, #0]
    912a:	orr.w	r2, r2, #131072	; 0x20000
    912e:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9130:	ldr	r2, [r3, #0]
    9132:	orr.w	r2, r2, #65536	; 0x10000
    9136:	str	r2, [r3, #0]
    interrupts();
    9138:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    913a:	ldr	r0, [pc, #128]	; (91bc <SdioCard::readData(unsigned char*)+0xac>)
    913c:	bl	8540 <waitTimeout(bool (*)())>
    9140:	cmp	r0, #0
    9142:	bne.n	91a2 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9144:	ldr	r4, [pc, #108]	; (91b4 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    9146:	ldr	r0, [pc, #120]	; (91c0 <SdioCard::readData(unsigned char*)+0xb0>)
    9148:	subs	r3, r5, #4
    914a:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    914e:	ldr	r2, [r4, #0]
    9150:	lsls	r1, r2, #20
    9152:	bpl.n	914e <SdioCard::readData(unsigned char*)+0x3e>
    9154:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    9158:	ldr	r2, [r0, #0]
    915a:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    915e:	cmp	r1, r3
    9160:	bne.n	9158 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9162:	cmp	r5, r1
    9164:	mov	r3, r1
    9166:	bne.n	914e <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    9168:	ldr	r0, [pc, #88]	; (91c4 <SdioCard::readData(unsigned char*)+0xb4>)
    916a:	bl	8540 <waitTimeout(bool (*)())>
    916e:	cbnz	r0, 9190 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    9170:	ldr	r2, [pc, #84]	; (91c8 <SdioCard::readData(unsigned char*)+0xb8>)
    9172:	ldr	r3, [pc, #88]	; (91cc <SdioCard::readData(unsigned char*)+0xbc>)
    9174:	ldr	r1, [r2, #0]
    9176:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9178:	ldr	r1, [r3, #0]
    917a:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    917c:	ldr	r2, [r3, #0]
    917e:	lsls	r2, r2, #30
    9180:	bpl.n	91b2 <SdioCard::readData(unsigned char*)+0xa2>
    9182:	ldr	r3, [r3, #0]
    9184:	ldr	r0, [pc, #72]	; (91d0 <SdioCard::readData(unsigned char*)+0xc0>)
    9186:	ands	r0, r3
    9188:	clz	r0, r0
    918c:	lsrs	r0, r0, #5
    918e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9190:	ldr	r1, [pc, #64]	; (91d4 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    9192:	ldr	r3, [pc, #68]	; (91d8 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9194:	movs	r0, #29
  m_errorLine = line;
    9196:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    919a:	strb	r0, [r1, #0]
  m_errorLine = line;
    919c:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    919e:	movs	r0, #0
    91a0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91a2:	ldr	r1, [pc, #48]	; (91d4 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    91a4:	ldr	r3, [pc, #48]	; (91d8 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91a6:	movs	r0, #26
  m_errorLine = line;
    91a8:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    91ac:	strb	r0, [r1, #0]
  m_errorLine = line;
    91ae:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    91b0:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    91b2:	pop	{r3, r4, r5, pc}
    91b4:	.word	0x400b1024
    91b8:	.word	0x400b1028
    91bc:	.word	0x000083d1
    91c0:	.word	0x400b1020
    91c4:	.word	0x000083f9
    91c8:	.word	0x400b1030
    91cc:	.word	0x1fff19bc
    91d0:	.word	0x117f0000
    91d4:	.word	0x1fff097c
    91d8:	.word	0x1fff19dc

000091dc <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    91dc:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    91de:	ldr	r0, [pc, #80]	; (9230 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    91e0:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    91e2:	bl	8568 <yieldTimeout(bool (*)())>
    91e6:	cbnz	r0, 921c <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    91e8:	ldr	r2, [pc, #72]	; (9234 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    91ea:	ldr	r1, [pc, #76]	; (9238 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    91ec:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    91ee:	ldr	r0, [pc, #76]	; (923c <SdioCard::readStart(unsigned long)+0x60>)
    91f0:	ldr	r5, [pc, #76]	; (9240 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    91f2:	orr.w	r3, r3, #65536	; 0x10000
    91f6:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    91f8:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    91fa:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    91fc:	cbnz	r3, 9218 <SdioCard::readStart(unsigned long)+0x3c>
    91fe:	lsls	r1, r4, #9
    9200:	ldr	r0, [pc, #64]	; (9244 <SdioCard::readStart(unsigned long)+0x68>)
    9202:	bl	85e4 <cardCommand(unsigned long, unsigned long)>
    9206:	cbnz	r0, 9216 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9208:	ldr	r1, [pc, #60]	; (9248 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    920a:	ldr	r3, [pc, #64]	; (924c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    920c:	movs	r4, #12
  m_errorLine = line;
    920e:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9212:	strb	r4, [r1, #0]
  m_errorLine = line;
    9214:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    9216:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9218:	mov	r1, r4
    921a:	b.n	9200 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    921c:	ldr	r1, [pc, #40]	; (9248 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    921e:	ldr	r3, [pc, #44]	; (924c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9220:	movs	r0, #10
  m_errorLine = line;
    9222:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9226:	strb	r0, [r1, #0]
  m_errorLine = line;
    9228:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    922a:	movs	r0, #0
    922c:	pop	{r3, r4, r5, pc}
    922e:	nop
    9230:	.word	0x000086c5
    9234:	.word	0x400b1028
    9238:	.word	0x1fff19b0
    923c:	.word	0x400b1004
    9240:	.word	0xffff0200
    9244:	.word	0x123a0032
    9248:	.word	0x1fff097c
    924c:	.word	0x1fff19dc

00009250 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9250:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    9252:	ldrb	r3, [r0, #8]
    9254:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9256:	sub.w	sp, sp, #512	; 0x200
    925a:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    925c:	bpl.n	9284 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    925e:	lsls	r3, r2, #30
    9260:	beq.n	92a2 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9262:	mov	r2, sp
    9264:	movs	r3, #1
    9266:	ldr	r0, [pc, #168]	; (9310 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    9268:	bl	872c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    926c:	cbz	r0, 92ae <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    926e:	mov	r1, sp
    9270:	mov	r0, r5
    9272:	mov.w	r2, #512	; 0x200
    9276:	bl	94a8 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    927a:	movs	r5, #1
}
    927c:	mov	r0, r5
    927e:	add.w	sp, sp, #512	; 0x200
    9282:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    9284:	ldrb	r3, [r0, #9]
    9286:	cmp	r3, #1
    9288:	mov	r4, r0
    928a:	mov	r6, r1
    928c:	beq.n	92c6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    928e:	ldr	r3, [r4, #0]
    9290:	mov	r0, r4
    9292:	ldr	r3, [r3, #20]
    9294:	blx	r3
    9296:	cbnz	r0, 92ec <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    9298:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    929a:	mov	r0, r5
    929c:	add.w	sp, sp, #512	; 0x200
    92a0:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    92a2:	movs	r3, #1
    92a4:	ldr	r0, [pc, #104]	; (9310 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    92a6:	bl	872c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    92aa:	cmp	r0, #0
    92ac:	bne.n	927a <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92ae:	ldr	r1, [pc, #100]	; (9314 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    92b0:	ldr	r3, [pc, #100]	; (9318 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92b2:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    92b4:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    92b6:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92ba:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    92bc:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    92be:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    92c0:	add.w	sp, sp, #512	; 0x200
    92c4:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    92c6:	ldr	r3, [r0, #4]
    92c8:	cmp	r1, r3
    92ca:	bne.n	928e <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    92cc:	mov	r1, r5
    92ce:	mov	r0, r4
    92d0:	bl	9110 <SdioCard::readData(unsigned char*)>
    92d4:	mov	r5, r0
    92d6:	cmp	r0, #0
    92d8:	beq.n	9298 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    92da:	ldr	r3, [pc, #64]	; (931c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    92dc:	ldr	r3, [r3, #0]
    92de:	lsrs	r3, r3, #16
    92e0:	lsls	r3, r3, #16
    92e2:	cbz	r3, 9300 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    92e4:	ldr	r3, [r4, #4]
    92e6:	adds	r3, #1
    92e8:	str	r3, [r4, #4]
    92ea:	b.n	929a <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    92ec:	mov	r1, r6
    92ee:	mov	r0, r4
    92f0:	bl	91dc <SdioCard::readStart(unsigned long)>
    92f4:	cmp	r0, #0
    92f6:	beq.n	9298 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    92f8:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    92fa:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    92fc:	strb	r3, [r4, #9]
    92fe:	b.n	92cc <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    9300:	ldr	r3, [r4, #0]
    9302:	mov	r0, r4
    9304:	ldr	r3, [r3, #20]
    9306:	blx	r3
    9308:	cmp	r0, #0
    930a:	bne.n	92e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    930c:	b.n	9298 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    930e:	nop
    9310:	.word	0x113a0011
    9314:	.word	0x1fff097c
    9318:	.word	0x1fff19dc
    931c:	.word	0x400b1004

00009320 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    9320:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    9322:	ldr	r3, [r0, #0]
    9324:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    9326:	ldrb	r1, [r3, #11]
    9328:	cbz	r1, 936a <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    932a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    932c:	ldrb	r1, [r3, #11]
    932e:	lsls	r0, r1, #31
    9330:	bpl.n	9340 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9332:	ldr	r0, [pc, #100]	; (9398 <SdSpiArduinoDriver::activate()+0x78>)
    9334:	ldr	r1, [r3, #12]
    9336:	ldr	r4, [r0, #0]
    9338:	ands	r1, r4
    933a:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    933c:	str	r1, [r0, #0]
    933e:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    9340:	lsls	r4, r1, #30
    9342:	bpl.n	9352 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9344:	ldr	r0, [pc, #84]	; (939c <SdSpiArduinoDriver::activate()+0x7c>)
    9346:	ldr	r1, [r3, #16]
    9348:	ldr	r4, [r0, #0]
    934a:	ands	r1, r4
    934c:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    934e:	str	r1, [r0, #0]
    9350:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    9352:	lsls	r0, r1, #29
    9354:	bpl.n	9364 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    9356:	ldr	r0, [pc, #72]	; (93a0 <SdSpiArduinoDriver::activate()+0x80>)
    9358:	ldr	r1, [r3, #20]
    935a:	ldr	r4, [r0, #0]
    935c:	ands	r1, r4
    935e:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    9360:	str	r1, [r0, #0]
    9362:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    9364:	lsls	r1, r1, #28
    9366:	bmi.n	9388 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    9368:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    936a:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    936c:	ldr	r1, [r3, #12]
    936e:	cmp	r1, r2
    9370:	beq.n	9382 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    9372:	ldr	r0, [pc, #48]	; (93a4 <SdSpiArduinoDriver::activate()+0x84>)
    9374:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    9376:	ldr	r1, [pc, #48]	; (93a8 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    9378:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    937a:	orr.w	r0, r2, #1073741824	; 0x40000000
    937e:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    9380:	str	r1, [r3, #0]
}
    9382:	ldr.w	r4, [sp], #4
    9386:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9388:	ldr	r0, [pc, #32]	; (93ac <SdSpiArduinoDriver::activate()+0x8c>)
    938a:	ldr	r1, [r3, #24]
    938c:	ldr	r4, [r0, #0]
    938e:	ands	r1, r4
    9390:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    9392:	str	r1, [r0, #0]
    9394:	b.n	9368 <SdSpiArduinoDriver::activate()+0x48>
    9396:	nop
    9398:	.word	0xe000e180
    939c:	.word	0xe000e184
    93a0:	.word	0xe000e188
    93a4:	.word	0x003f4001
    93a8:	.word	0x803f0000
    93ac:	.word	0xe000e18c

000093b0 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    93b0:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    93b2:	ldrb	r3, [r2, #11]
    93b4:	cbz	r3, 93e4 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    93b6:	lsls	r1, r3, #31
    93b8:	bpl.n	93c2 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    93ba:	ldr	r3, [pc, #44]	; (93e8 <SdSpiArduinoDriver::deactivate()+0x38>)
    93bc:	ldr	r1, [r2, #28]
    93be:	str	r1, [r3, #0]
    93c0:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    93c2:	lsls	r0, r3, #30
    93c4:	bpl.n	93ce <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    93c6:	ldr	r3, [pc, #36]	; (93ec <SdSpiArduinoDriver::deactivate()+0x3c>)
    93c8:	ldr	r1, [r2, #32]
    93ca:	str	r1, [r3, #0]
    93cc:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    93ce:	lsls	r1, r3, #29
    93d0:	bpl.n	93da <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    93d2:	ldr	r3, [pc, #28]	; (93f0 <SdSpiArduinoDriver::deactivate()+0x40>)
    93d4:	ldr	r1, [r2, #36]	; 0x24
    93d6:	str	r1, [r3, #0]
    93d8:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    93da:	lsls	r3, r3, #28
    93dc:	bpl.n	93e4 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    93de:	ldr	r3, [pc, #20]	; (93f4 <SdSpiArduinoDriver::deactivate()+0x44>)
    93e0:	ldr	r2, [r2, #40]	; 0x28
    93e2:	str	r2, [r3, #0]
    93e4:	bx	lr
    93e6:	nop
    93e8:	.word	0xe000e100
    93ec:	.word	0xe000e104
    93f0:	.word	0xe000e108
    93f4:	.word	0xe000e10c

000093f8 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    93f8:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    93fa:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    93fc:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    9400:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9402:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    9404:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    9406:	ldr	r3, [r2, #44]	; 0x2c
    9408:	cmp	r3, #0
    940a:	bge.n	9406 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    940c:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    940e:	uxtb	r0, r0
    9410:	bx	lr
    9412:	nop

00009414 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9414:	push	{r4, r5, r6, lr}
    9416:	mov	r5, r0
    9418:	mov	r4, r1
    941a:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    941c:	mov	r0, r1
    941e:	movs	r1, #255	; 0xff
    9420:	bl	c29c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    9424:	ldr	r0, [r5, #0]
    9426:	mov	r3, r6
    9428:	mov	r2, r4
    942a:	mov	r1, r4
    942c:	bl	3584 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9430:	movs	r0, #0
    9432:	pop	{r4, r5, r6, pc}

00009434 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    9434:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9436:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9438:	mov.w	r3, #2147483648	; 0x80000000
    943c:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    943e:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    9440:	ldr	r3, [r2, #44]	; 0x2c
    9442:	cmp	r3, #0
    9444:	bge.n	9440 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    9446:	ldr	r3, [r2, #56]	; 0x38
    9448:	bx	lr
    944a:	nop

0000944c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    944c:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    944e:	subs	r5, r2, #1
    9450:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9454:	sub.w	sp, sp, #516	; 0x204
    9458:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    945a:	bcc.n	9482 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    945c:	cbz	r2, 947c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    945e:	ldr	r2, [r0, #0]
    9460:	ldr	r2, [r2, #0]
    9462:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9464:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    9468:	ldrb.w	r3, [r1], #1
    946c:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    946e:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    9470:	ldr	r3, [r2, #44]	; 0x2c
    9472:	cmp	r3, #0
    9474:	bge.n	9470 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9476:	cmp	r1, r0
		return port().POPR;
    9478:	ldr	r3, [r2, #56]	; 0x38
    947a:	bne.n	9468 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    947c:	add.w	sp, sp, #516	; 0x204
    9480:	pop	{r4, r5, pc}
    9482:	mov	r5, r0
    9484:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    9486:	mov	r0, sp
    9488:	bl	94a8 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    948c:	mov	r3, r4
    948e:	mov	r2, sp
    9490:	mov	r1, sp
    9492:	ldr	r0, [r5, #0]
    9494:	bl	3584 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    9498:	add.w	sp, sp, #516	; 0x204
    949c:	pop	{r4, r5, pc}
    949e:	nop

000094a0 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    94a0:	b.w	9a38 <digitalWrite>

000094a4 <usb_mtp_configure>:
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
	}

#else
	void usb_mtp_configure(void) {}
    94a4:	bx	lr
    94a6:	nop

000094a8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    94a8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    94aa:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    94ae:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    94b2:	bne.n	9590 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    94b4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    94b6:	bcc.n	953c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    94b8:	ldr.w	r3, [r1], #4
    94bc:	str.w	r3, [r0], #4
    94c0:	ldr.w	r3, [r1], #4
    94c4:	str.w	r3, [r0], #4
    94c8:	ldr.w	r3, [r1], #4
    94cc:	str.w	r3, [r0], #4
    94d0:	ldr.w	r3, [r1], #4
    94d4:	str.w	r3, [r0], #4
    94d8:	ldr.w	r3, [r1], #4
    94dc:	str.w	r3, [r0], #4
    94e0:	ldr.w	r3, [r1], #4
    94e4:	str.w	r3, [r0], #4
    94e8:	ldr.w	r3, [r1], #4
    94ec:	str.w	r3, [r0], #4
    94f0:	ldr.w	r3, [r1], #4
    94f4:	str.w	r3, [r0], #4
    94f8:	ldr.w	r3, [r1], #4
    94fc:	str.w	r3, [r0], #4
    9500:	ldr.w	r3, [r1], #4
    9504:	str.w	r3, [r0], #4
    9508:	ldr.w	r3, [r1], #4
    950c:	str.w	r3, [r0], #4
    9510:	ldr.w	r3, [r1], #4
    9514:	str.w	r3, [r0], #4
    9518:	ldr.w	r3, [r1], #4
    951c:	str.w	r3, [r0], #4
    9520:	ldr.w	r3, [r1], #4
    9524:	str.w	r3, [r0], #4
    9528:	ldr.w	r3, [r1], #4
    952c:	str.w	r3, [r0], #4
    9530:	ldr.w	r3, [r1], #4
    9534:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9538:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    953a:	bcs.n	94b8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    953c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    953e:	bcc.n	9564 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9540:	ldr.w	r3, [r1], #4
    9544:	str.w	r3, [r0], #4
    9548:	ldr.w	r3, [r1], #4
    954c:	str.w	r3, [r0], #4
    9550:	ldr.w	r3, [r1], #4
    9554:	str.w	r3, [r0], #4
    9558:	ldr.w	r3, [r1], #4
    955c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9560:	subs	r2, #16
	bhs	.Lmid_block_loop
    9562:	bcs.n	9540 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9564:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9566:	bcc.n	9574 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9568:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    956c:	str.w	r3, [r0], #4
	subs	r2, #4
    9570:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9572:	bcs.n	9568 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9574:	adds	r2, #4
	beq	.Ldone
    9576:	beq.n	958a <memcpy+0xe2>

	lsls	r2, r2, #31
    9578:	lsls	r2, r2, #31
	itt ne
    957a:	itt	ne
	ldrbne  r3, [r1], #1
    957c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9580:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9584:	bcc.n	958a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9586:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9588:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    958a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    958c:	bx	lr
    958e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9590:	cmp	r2, #8
	blo	.Lbyte_copy
    9592:	bcc.n	95bc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9594:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9596:	beq.n	94b4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9598:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    959c:	beq.n	94b4 <memcpy+0xc>

	rsb	r3, #4
    959e:	rsb	r3, r3, #4
	subs	r2, r3
    95a2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    95a4:	lsls	r3, r3, #31
	itt ne
    95a6:	itt	ne
	ldrbne  r3, [r1], #1
    95a8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    95ac:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    95b0:	bcc.n	94b4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    95b2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    95b6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    95ba:	b.n	94b4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    95bc:	subs	r2, #4
	blo	.Lcopy_less_than_4
    95be:	bcc.n	9574 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    95c0:	subs	r2, #1
	ldrb    r3, [r1], #1
    95c2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    95c6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    95ca:	bcs.n	95c0 <memcpy+0x118>

	ldrb	r3, [r1]
    95cc:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    95ce:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    95d0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    95d2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    95d4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    95d6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    95d8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    95da:	bx	lr

000095dc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    95dc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    95de:	ldr	r5, [pc, #60]	; (961c <usb_serial_getchar+0x40>)
    95e0:	ldr	r0, [r5, #0]
    95e2:	cbz	r0, 9604 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    95e4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    95e6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    95e8:	adds	r1, r0, r3
    95ea:	adds	r3, #1
	if (i >= rx_packet->len) {
    95ec:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    95ee:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    95f0:	bcs.n	95f8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    95f2:	strh	r3, [r0, #2]
	}
	return c;
    95f4:	mov	r0, r4
}
    95f6:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    95f8:	bl	9cdc <usb_free>
		rx_packet = NULL;
    95fc:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    95fe:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    9600:	str	r3, [r5, #0]
    9602:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9604:	ldr	r3, [pc, #24]	; (9620 <usb_serial_getchar+0x44>)
    9606:	ldrb	r3, [r3, #0]
    9608:	cbz	r3, 9616 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    960a:	movs	r0, #2
    960c:	bl	9d28 <usb_rx>
    9610:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    9612:	cmp	r0, #0
    9614:	bne.n	95e4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9616:	mov.w	r0, #4294967295
    961a:	pop	{r3, r4, r5, pc}
    961c:	.word	0x1fff19ec
    9620:	.word	0x1fff1af8

00009624 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    9624:	push	{r4, lr}
	if (!rx_packet) {
    9626:	ldr	r4, [pc, #36]	; (964c <usb_serial_peekchar+0x28>)
    9628:	ldr	r0, [r4, #0]
    962a:	cbz	r0, 9634 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    962c:	ldrh	r3, [r0, #2]
    962e:	add	r0, r3
    9630:	ldrb	r0, [r0, #8]
}
    9632:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9634:	ldr	r3, [pc, #24]	; (9650 <usb_serial_peekchar+0x2c>)
    9636:	ldrb	r3, [r3, #0]
    9638:	cbz	r3, 9646 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    963a:	movs	r0, #2
    963c:	bl	9d28 <usb_rx>
    9640:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    9642:	cmp	r0, #0
    9644:	bne.n	962c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9646:	mov.w	r0, #4294967295
    964a:	pop	{r4, pc}
    964c:	.word	0x1fff19ec
    9650:	.word	0x1fff1af8

00009654 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9654:	ldr	r3, [pc, #16]	; (9668 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    9656:	ldr	r2, [pc, #20]	; (966c <usb_serial_available+0x18>)
    9658:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    965a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    965c:	cbz	r3, 9666 <usb_serial_available+0x12>
    965e:	ldrh	r2, [r3, #0]
    9660:	ldrh	r3, [r3, #2]
    9662:	subs	r3, r2, r3
    9664:	add	r0, r3
	return count;
}
    9666:	bx	lr
    9668:	.word	0x1fff19ec
    966c:	.word	0x1fff1b74

00009670 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    9670:	ldr	r3, [pc, #44]	; (96a0 <usb_serial_flush_input+0x30>)
    9672:	ldrb	r3, [r3, #0]
    9674:	cbz	r3, 969e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    9676:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    9678:	ldr	r4, [pc, #40]	; (96a4 <usb_serial_flush_input+0x34>)
    967a:	ldr	r0, [r4, #0]
    967c:	cbz	r0, 9692 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    967e:	bl	9cdc <usb_free>
		rx_packet = NULL;
    9682:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9684:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    9686:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9688:	bl	9d28 <usb_rx>
		if (!rx) break;
    968c:	cbz	r0, 969c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    968e:	bl	9cdc <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9692:	movs	r0, #2
    9694:	bl	9d28 <usb_rx>
		if (!rx) break;
    9698:	cmp	r0, #0
    969a:	bne.n	968e <usb_serial_flush_input+0x1e>
    969c:	pop	{r4, pc}
    969e:	bx	lr
    96a0:	.word	0x1fff1af8
    96a4:	.word	0x1fff19ec

000096a8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    96a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    96ac:	ldr.w	r9, [pc, #248]	; 97a8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    96b0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    96b2:	movs	r2, #1
    96b4:	strb.w	r2, [r9]
	while (size > 0) {
    96b8:	str	r1, [sp, #4]
    96ba:	cbz	r1, 9718 <usb_serial_write+0x70>
    96bc:	ldr.w	r8, [pc, #236]	; 97ac <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    96c0:	ldr	r7, [pc, #216]	; (979c <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    96c2:	ldr	r6, [sp, #4]
    96c4:	mov	fp, r0
		if (!tx_packet) {
    96c6:	ldr.w	r0, [r8]
    96ca:	cbz	r0, 973a <usb_serial_write+0x92>
    96cc:	ldr	r5, [pc, #208]	; (97a0 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    96ce:	ldrh	r4, [r0, #2]
    96d0:	rsb	r1, r4, #64	; 0x40
    96d4:	cmp	r1, r6
    96d6:	it	cs
    96d8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    96da:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    96de:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    96e0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    96e4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    96e6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    96e8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    96ec:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    96f0:	cbz	r1, 9708 <usb_serial_write+0x60>
    96f2:	subs	r4, #1
    96f4:	add	r2, r4
    96f6:	add	r1, fp
    96f8:	ldrb.w	r4, [fp], #1
    96fc:	strb.w	r4, [r2, #1]!
    9700:	cmp	fp, r1
    9702:	bne.n	96f8 <usb_serial_write+0x50>
    9704:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    9708:	cmp.w	lr, #63	; 0x3f
    970c:	bhi.n	9726 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    970e:	ldr	r2, [pc, #148]	; (97a4 <usb_serial_write+0xfc>)
    9710:	movs	r1, #5
    9712:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    9714:	cmp	r6, #0
    9716:	bne.n	96c6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    9718:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    971a:	movs	r3, #0
    971c:	strb.w	r3, [r9]
	return ret;
}
    9720:	add	sp, #12
    9722:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    9726:	movs	r2, #64	; 0x40
    9728:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    972a:	mov	r1, r0
    972c:	movs	r0, #3
    972e:	bl	9e98 <usb_tx>
			tx_packet = NULL;
    9732:	movs	r2, #0
    9734:	str.w	r2, [r8]
    9738:	b.n	970e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    973a:	ldrb	r2, [r7, #0]
    973c:	cbz	r2, 978a <usb_serial_write+0xe2>
    973e:	ldr	r5, [pc, #96]	; (97a0 <usb_serial_write+0xf8>)
    9740:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    9744:	mov.w	sl, #1
    9748:	b.n	975a <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    974a:	subs	r4, #1
    974c:	beq.n	977c <usb_serial_write+0xd4>
    974e:	ldrb	r2, [r5, #0]
    9750:	cbnz	r2, 977c <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    9752:	bl	aa2c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9756:	ldrb	r2, [r7, #0]
    9758:	cbz	r2, 978a <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    975a:	movs	r0, #3
    975c:	bl	9d64 <usb_tx_packet_count>
    9760:	cmp	r0, #7
    9762:	bhi.n	974a <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    9764:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    9768:	bl	9c9c <usb_malloc>
    976c:	str.w	r0, [r8]
					if (tx_packet) break;
    9770:	cmp	r0, #0
    9772:	bne.n	96ce <usb_serial_write+0x26>
					tx_noautoflush = 0;
    9774:	ldr	r3, [pc, #48]	; (97a8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9776:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    9778:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    977a:	bne.n	974e <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    977c:	movs	r3, #1
					return -1;
    977e:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    9782:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9784:	add	sp, #12
    9786:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    978a:	movs	r3, #0
					return -1;
    978c:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9790:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9794:	add	sp, #12
    9796:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    979a:	nop
    979c:	.word	0x1fff1af8
    97a0:	.word	0x1fff19e8
    97a4:	.word	0x1fff19e0
    97a8:	.word	0x1fff19e1
    97ac:	.word	0x1fff19e4

000097b0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    97b0:	push	{lr}
    97b2:	sub	sp, #12
    97b4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    97b6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    97b8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    97bc:	mov	r0, r3
    97be:	bl	96a8 <usb_serial_write>
}
    97c2:	add	sp, #12
    97c4:	ldr.w	pc, [sp], #4

000097c8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    97c8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    97ca:	ldr	r5, [pc, #56]	; (9804 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    97cc:	ldr	r4, [pc, #56]	; (9808 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    97ce:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    97d0:	movs	r3, #1
    97d2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    97d4:	cbz	r0, 97e2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    97d6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    97d8:	movs	r3, #0
    97da:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    97dc:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    97e0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    97e2:	ldr	r3, [pc, #40]	; (980c <usb_serial_write_buffer_free+0x44>)
    97e4:	ldrb	r3, [r3, #0]
    97e6:	cbnz	r3, 97ee <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    97e8:	movs	r0, #0
    97ea:	strb	r0, [r4, #0]
			return 0;
    97ec:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    97ee:	movs	r0, #3
    97f0:	bl	9d64 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    97f4:	cmp	r0, #7
    97f6:	bhi.n	97e8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    97f8:	bl	9c9c <usb_malloc>
    97fc:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    97fe:	cmp	r0, #0
    9800:	bne.n	97d6 <usb_serial_write_buffer_free+0xe>
    9802:	b.n	97e8 <usb_serial_write_buffer_free+0x20>
    9804:	.word	0x1fff19e4
    9808:	.word	0x1fff19e1
    980c:	.word	0x1fff1af8

00009810 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    9810:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    9812:	ldr	r3, [pc, #68]	; (9858 <usb_serial_flush_output+0x48>)
    9814:	ldrb	r3, [r3, #0]
    9816:	cbz	r3, 983c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    9818:	ldr	r6, [pc, #64]	; (985c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    981a:	ldr	r5, [pc, #68]	; (9860 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    981c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    981e:	movs	r7, #1
    9820:	strb	r7, [r5, #0]
	if (tx_packet) {
    9822:	cbz	r4, 983e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    9824:	ldr	r2, [pc, #60]	; (9864 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    9826:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9828:	movs	r7, #0
    982a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    982c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    982e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9830:	movs	r0, #3
    9832:	bl	9e98 <usb_tx>
		tx_packet = NULL;
    9836:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    9838:	movs	r3, #0
    983a:	strb	r3, [r5, #0]
    983c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    983e:	bl	9c9c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9842:	ldr	r3, [pc, #32]	; (9864 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    9844:	cbz	r0, 9852 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    9846:	mov	r1, r0
    9848:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    984a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    984c:	bl	9e98 <usb_tx>
    9850:	b.n	9838 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9852:	strb	r7, [r3, #0]
    9854:	b.n	9838 <usb_serial_flush_output+0x28>
    9856:	nop
    9858:	.word	0x1fff1af8
    985c:	.word	0x1fff19e4
    9860:	.word	0x1fff19e1
    9864:	.word	0x1fff19e0

00009868 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    9868:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    986a:	ldr	r3, [pc, #56]	; (98a4 <usb_serial_flush_callback+0x3c>)
    986c:	ldrb	r3, [r3, #0]
    986e:	cbnz	r3, 988e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    9870:	ldr	r4, [pc, #52]	; (98a8 <usb_serial_flush_callback+0x40>)
    9872:	ldr	r1, [r4, #0]
    9874:	cbz	r1, 9890 <usb_serial_flush_callback+0x28>
    9876:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    987a:	ldrh	r3, [r1, #2]
    987c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    987e:	movs	r0, #3
    9880:	bl	9e98 <usb_tx>
		tx_packet = NULL;
    9884:	str	r5, [r4, #0]
    9886:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9888:	ldr	r3, [pc, #32]	; (98ac <usb_serial_flush_callback+0x44>)
    988a:	movs	r2, #1
    988c:	strb	r2, [r3, #0]
    988e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    9890:	bl	9c9c <usb_malloc>
		if (tx) {
    9894:	cmp	r0, #0
    9896:	beq.n	9888 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    9898:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    989a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    989e:	movs	r0, #3
    98a0:	b.w	9e98 <usb_tx>
    98a4:	.word	0x1fff19e1
    98a8:	.word	0x1fff19e4
    98ac:	.word	0x1fff19e0

000098b0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    98b0:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    98b2:	ldr	r4, [pc, #64]	; (98f4 <fault_isr+0x44>)
    98b4:	b.n	98c8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    98b6:	ldr	r3, [r4, #0]
    98b8:	lsls	r1, r3, #21
    98ba:	bmi.n	98d8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    98bc:	ldr	r3, [r4, #0]
    98be:	lsls	r2, r3, #20
    98c0:	bmi.n	98e2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    98c2:	ldr	r3, [r4, #0]
    98c4:	lsls	r3, r3, #19
    98c6:	bmi.n	98ec <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    98c8:	ldr	r3, [r4, #0]
    98ca:	lsls	r0, r3, #13
    98cc:	bpl.n	98b6 <fault_isr+0x6>
    98ce:	bl	9f1c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    98d2:	ldr	r3, [r4, #0]
    98d4:	lsls	r1, r3, #21
    98d6:	bpl.n	98bc <fault_isr+0xc>
    98d8:	bl	98f8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    98dc:	ldr	r3, [r4, #0]
    98de:	lsls	r2, r3, #20
    98e0:	bpl.n	98c2 <fault_isr+0x12>
    98e2:	bl	98f8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    98e6:	ldr	r3, [r4, #0]
    98e8:	lsls	r3, r3, #19
    98ea:	bpl.n	98c8 <fault_isr+0x18>
    98ec:	bl	98f8 <unused_isr>
    98f0:	b.n	98c8 <fault_isr+0x18>
    98f2:	nop
    98f4:	.word	0x40048034

000098f8 <unused_isr>:
	}
}

void unused_isr(void)
{
    98f8:	push	{r3, lr}
	fault_isr();
    98fa:	bl	98b0 <fault_isr>
    98fe:	nop

00009900 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9900:	ldr	r3, [pc, #4]	; (9908 <startup_early_hook+0x8>)
    9902:	movs	r2, #16
    9904:	strh	r2, [r3, #0]
    9906:	bx	lr
    9908:	.word	0x40052000

0000990c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    990c:	bx	lr
    990e:	nop

00009910 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9910:	ldr	r1, [pc, #36]	; (9938 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    9912:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    9914:	ldr	r3, [r1, #0]
	if (incr != 0) {
    9916:	cbz	r0, 9926 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9918:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    991a:	add	r0, r3
    991c:	sub.w	r2, r2, #8192	; 0x2000
    9920:	cmp	r0, r2
    9922:	bcs.n	992a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9924:	str	r0, [r1, #0]
	}
	return prev;
    9926:	mov	r0, r3
}
    9928:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    992a:	bl	bab4 <__errno>
    992e:	movs	r3, #12
    9930:	str	r3, [r0, #0]
			return (void *)-1;
    9932:	mov.w	r0, #4294967295
    9936:	pop	{r3, pc}
    9938:	.word	0x1fff0980

0000993c <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    993c:	b.n	993c <__cxa_pure_virtual>
    993e:	nop

00009940 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9940:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9942:	ldr	r3, [pc, #68]	; (9988 <digitalWrite.part.1+0x48>)
    9944:	ldr.w	r2, [r3, r0, lsl #3]
    9948:	ldrb.w	r4, [r2, #640]	; 0x280
    994c:	cbz	r4, 995c <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    994e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9950:	cbz	r1, 9972 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    9952:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9956:	ldr.w	r4, [sp], #4
    995a:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    995c:	add.w	r3, r3, r0, lsl #3
    9960:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9962:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    9964:	cbnz	r1, 997c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    9966:	bic.w	r2, r2, #2
    996a:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    996c:	ldr.w	r4, [sp], #4
    9970:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    9972:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9976:	ldr.w	r4, [sp], #4
    997a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    997c:	orr.w	r2, r2, #3
    9980:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9982:	ldr.w	r4, [sp], #4
    9986:	bx	lr
    9988:	.word	0x00010050

0000998c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    998c:	ldr	r2, [pc, #112]	; (9a00 <pinMode.part.2+0x74>)
    998e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9992:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9994:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9996:	beq.n	99bc <pinMode.part.2+0x30>
    9998:	cmp	r1, #4
    999a:	beq.n	99d4 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    999c:	ldr.w	r0, [r2, r0, lsl #3]
    99a0:	movs	r2, #0
    99a2:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    99a6:	cbz	r1, 99b4 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    99a8:	cmp	r1, #2
    99aa:	beq.n	99ee <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    99ac:	cmp	r1, #3
    99ae:	beq.n	99f6 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    99b0:	str	r2, [r3, #0]
    99b2:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    99b4:	mov.w	r2, #256	; 0x100
    99b8:	str	r2, [r3, #0]
    99ba:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    99bc:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    99c0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    99c4:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    99c8:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    99ca:	ldr	r2, [r3, #0]
    99cc:	bic.w	r2, r2, #32
    99d0:	str	r2, [r3, #0]
    99d2:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    99d4:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    99d8:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    99dc:	movs	r0, #1
    99de:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    99e2:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    99e4:	ldr	r2, [r3, #0]
    99e6:	orr.w	r2, r2, #32
    99ea:	str	r2, [r3, #0]
    99ec:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    99ee:	movw	r2, #259	; 0x103
    99f2:	str	r2, [r3, #0]
    99f4:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    99f6:	mov.w	r2, #258	; 0x102
    99fa:	str	r2, [r3, #0]
    99fc:	bx	lr
    99fe:	nop
    9a00:	.word	0x00010050

00009a04 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9a04:	adds	r0, #16
    9a06:	ldr	r3, [pc, #8]	; (9a10 <attachInterruptVector+0xc>)
    9a08:	str.w	r1, [r3, r0, lsl #2]
    9a0c:	bx	lr
    9a0e:	nop
    9a10:	.word	0x1fff0200

00009a14 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    9a14:	push	{r4, r5}
	RTC_SR = 0;
    9a16:	ldr	r3, [pc, #20]	; (9a2c <rtc_set+0x18>)
	RTC_TPR = 0;
    9a18:	ldr	r5, [pc, #20]	; (9a30 <rtc_set+0x1c>)
	RTC_TSR = t;
    9a1a:	ldr	r4, [pc, #24]	; (9a34 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9a1c:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    9a1e:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9a20:	str	r2, [r3, #0]
	RTC_TPR = 0;
    9a22:	str	r2, [r5, #0]
	RTC_TSR = t;
    9a24:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    9a26:	str	r1, [r3, #0]
}
    9a28:	pop	{r4, r5}
    9a2a:	bx	lr
    9a2c:	.word	0x4003d014
    9a30:	.word	0x4003d004
    9a34:	.word	0x4003d000

00009a38 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9a38:	cmp	r0, #63	; 0x3f
    9a3a:	bhi.n	9a40 <digitalWrite+0x8>
    9a3c:	b.w	9940 <digitalWrite.part.1>
    9a40:	bx	lr
    9a42:	nop

00009a44 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    9a44:	cmp	r0, #63	; 0x3f
    9a46:	bhi.n	9a4c <pinMode+0x8>
    9a48:	b.w	998c <pinMode.part.2>
    9a4c:	bx	lr
    9a4e:	nop

00009a50 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9a50:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9a52:	ldr	r1, [pc, #48]	; (9a84 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9a54:	ldr	r3, [pc, #48]	; (9a88 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9a56:	ldr	r2, [pc, #52]	; (9a8c <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9a58:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9a5a:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9a5c:	ldr	r2, [r2, #0]
	__enable_irq();
    9a5e:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9a60:	lsls	r2, r2, #5
    9a62:	bpl.n	9a6a <micros+0x1a>
    9a64:	cmp	r3, #50	; 0x32
    9a66:	it	hi
    9a68:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9a6a:	ldr	r1, [pc, #36]	; (9a90 <micros+0x40>)
    9a6c:	rsb	r3, r3, #95744	; 0x17600
    9a70:	mov.w	r2, #1000	; 0x3e8
    9a74:	adds	r3, #255	; 0xff
    9a76:	umull	r1, r3, r1, r3
    9a7a:	mul.w	r0, r2, r0
}
    9a7e:	add.w	r0, r0, r3, lsr #6
    9a82:	bx	lr
    9a84:	.word	0x1fff19f4
    9a88:	.word	0xe000e018
    9a8c:	.word	0xe000ed04
    9a90:	.word	0xaaaaaaab

00009a94 <delay>:

void delay(uint32_t ms)
{
    9a94:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a98:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9a9a:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9a9c:	ldr	r7, [pc, #128]	; (9b20 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9a9e:	ldr	r3, [pc, #132]	; (9b24 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9aa0:	ldr	r2, [pc, #132]	; (9b28 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9aa2:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9aa4:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9aa6:	ldr	r2, [r2, #0]
	__enable_irq();
    9aa8:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9aaa:	lsls	r2, r2, #5
    9aac:	bpl.n	9ab4 <delay+0x20>
    9aae:	cmp	r3, #50	; 0x32
    9ab0:	it	hi
    9ab2:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    9ab4:	cbz	r5, 9b1c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9ab6:	rsb	r3, r3, #95744	; 0x17600
    9aba:	ldr	r6, [pc, #112]	; (9b2c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9abc:	ldr.w	r9, [pc, #100]	; 9b24 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9ac0:	ldr.w	r8, [pc, #100]	; 9b28 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9ac4:	adds	r3, #255	; 0xff
    9ac6:	mov.w	r2, #1000	; 0x3e8
    9aca:	umull	r1, r3, r6, r3
    9ace:	mul.w	r4, r2, r4
    9ad2:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9ad6:	cpsid	i
	current = SYST_CVR;
    9ad8:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9adc:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9ade:	ldr.w	lr, [r8]
	__enable_irq();
    9ae2:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9ae4:	rsb	r3, r1, #95744	; 0x17600
    9ae8:	adds	r3, #255	; 0xff
    9aea:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9aee:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9af2:	rsb	r3, r4, r3, lsr #6
    9af6:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9afa:	beq.n	9b02 <delay+0x6e>
    9afc:	cmp	r1, #50	; 0x32
    9afe:	it	hi
    9b00:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9b02:	mla	r3, r0, r2, r3
    9b06:	cmp.w	r3, #1000	; 0x3e8
    9b0a:	bcc.n	9b16 <delay+0x82>
				ms--;
				if (ms == 0) return;
    9b0c:	subs	r5, #1
    9b0e:	beq.n	9b1c <delay+0x88>
				start += 1000;
    9b10:	add.w	r4, r4, #1000	; 0x3e8
    9b14:	b.n	9ad6 <delay+0x42>
			}
			yield();
    9b16:	bl	aa2c <yield>
		}
    9b1a:	b.n	9ad6 <delay+0x42>
    9b1c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9b20:	.word	0x1fff19f4
    9b24:	.word	0xe000e018
    9b28:	.word	0xe000ed04
    9b2c:	.word	0xaaaaaaab

00009b30 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    9b30:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9b32:	ldr	r3, [pc, #312]	; (9c6c <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9b34:	ldr	r0, [pc, #312]	; (9c70 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    9b36:	ldr.w	ip, [pc, #348]	; 9c94 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9b3a:	ldr	r4, [pc, #312]	; (9c74 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    9b3c:	ldr	r1, [pc, #312]	; (9c78 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9b3e:	ldr.w	lr, [pc, #344]	; 9c98 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    9b42:	ldr	r6, [pc, #312]	; (9c7c <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    9b44:	ldr	r5, [pc, #312]	; (9c80 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    9b46:	ldr	r7, [pc, #316]	; (9c84 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9b48:	mov.w	r2, #134217728	; 0x8000000
    9b4c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9b4e:	mov.w	r2, #268435456	; 0x10000000
    9b52:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9b54:	mov.w	r2, #536870912	; 0x20000000
    9b58:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9b5a:	mov.w	r2, #1073741824	; 0x40000000
    9b5e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    9b60:	mov.w	r2, #2147483648	; 0x80000000
    9b64:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9b66:	movs	r2, #0
    9b68:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9b6a:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    9b6c:	movw	r0, #49151	; 0xbfff
    9b70:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9b74:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    9b78:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9b7a:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    9b7e:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    9b80:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    9b82:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9b84:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    9b88:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    9b8a:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    9b8e:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9b90:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    9b94:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9b96:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    9b9a:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9b9e:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    9ba2:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9ba6:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    9baa:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9bac:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9bb0:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9bb2:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9bb4:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    9bb6:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9bba:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9bbc:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    9bbe:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9bc0:	ldr	r4, [pc, #196]	; (9c88 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    9bc2:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    9bc4:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9bc6:	movs	r1, #9
    9bc8:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9bca:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    9bce:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9bd2:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    9bd4:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9bd6:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9bd8:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9bda:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    9bdc:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9bde:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9be2:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    9be6:	add.w	r7, r7, #520192	; 0x7f000
    9bea:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9bec:	addw	r4, r4, #2044	; 0x7fc
    9bf0:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    9bf2:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    9bf4:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    9bf6:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9bf8:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9bfc:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    9bfe:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    9c02:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    9c06:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9c08:	sub.w	r4, r4, #460800	; 0x70800
    9c0c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    9c10:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9c12:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9c14:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9c18:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9c1a:	ldr	r0, [pc, #112]	; (9c8c <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9c1c:	orr.w	r1, r1, #512	; 0x200
    9c20:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9c22:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9c24:	ldr	r4, [pc, #104]	; (9c90 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    9c26:	add.w	lr, lr, #65280	; 0xff00
    9c2a:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    9c2e:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    9c32:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9c36:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9c3a:	orr.w	r1, r1, #33554432	; 0x2000000
    9c3e:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    9c40:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    9c44:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9c48:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    9c4a:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9c4c:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    9c4e:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9c50:	str	r2, [r4, #0]
#endif
	analog_init();
    9c52:	bl	acbc <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    9c56:	movs	r0, #25
    9c58:	bl	9a94 <delay>
	usb_init();
    9c5c:	bl	a964 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    9c60:	movw	r0, #275	; 0x113
}
    9c64:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    9c68:	b.w	9a94 <delay>
    9c6c:	.word	0xe000e104
    9c70:	.word	0x40038004
    9c74:	.word	0x40038014
    9c78:	.word	0x4003801c
    9c7c:	.word	0x40038024
    9c80:	.word	0x4003802c
    9c84:	.word	0x40038034
    9c88:	.word	0x40038000
    9c8c:	.word	0x40048004
    9c90:	.word	0x400c9000
    9c94:	.word	0x40038008
    9c98:	.word	0x4003800c

00009c9c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9c9c:	cpsid	i
	avail = usb_buffer_available;
    9c9e:	ldr	r0, [pc, #52]	; (9cd4 <usb_malloc+0x38>)
    9ca0:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    9ca2:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    9ca6:	cmp	r3, #19
    9ca8:	bgt.n	9ccc <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9caa:	mov.w	r1, #2147483648	; 0x80000000
    9cae:	lsrs	r1, r3
    9cb0:	bic.w	r2, r2, r1
    9cb4:	str	r2, [r0, #0]
	__enable_irq();
    9cb6:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9cb8:	ldr	r0, [pc, #28]	; (9cd8 <usb_malloc+0x3c>)
    9cba:	add.w	r3, r3, r3, lsl #3
    9cbe:	lsls	r3, r3, #3
    9cc0:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    9cc2:	movs	r1, #0
    9cc4:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    9cc6:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9cc8:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9cca:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9ccc:	cpsie	i
		return NULL;
    9cce:	movs	r0, #0
    9cd0:	bx	lr
    9cd2:	nop
    9cd4:	.word	0x1fff0984
    9cd8:	.word	0x1fff03d0

00009cdc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9cdc:	ldr	r3, [pc, #52]	; (9d14 <usb_free+0x38>)
    9cde:	ldr	r2, [pc, #56]	; (9d18 <usb_free+0x3c>)
    9ce0:	subs	r3, r0, r3
    9ce2:	umull	r2, r3, r2, r3
    9ce6:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9ce8:	cmp	r3, #19
    9cea:	bhi.n	9d06 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9cec:	ldr	r2, [pc, #44]	; (9d1c <usb_free+0x40>)
    9cee:	ldrb	r2, [r2, #0]
    9cf0:	cbnz	r2, 9d08 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9cf2:	cpsid	i
	usb_buffer_available |= mask;
    9cf4:	ldr	r0, [pc, #40]	; (9d20 <usb_free+0x44>)
    9cf6:	mov.w	r1, #2147483648	; 0x80000000
    9cfa:	ldr	r2, [r0, #0]
    9cfc:	lsr.w	r3, r1, r3
    9d00:	orrs	r2, r3
    9d02:	str	r2, [r0, #0]
	__enable_irq();
    9d04:	cpsie	i
    9d06:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9d08:	ldr	r2, [pc, #24]	; (9d24 <usb_free+0x48>)
    9d0a:	ldrb	r2, [r2, #0]
    9d0c:	cmp	r2, #0
    9d0e:	beq.n	9cf2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9d10:	b.w	9d90 <usb_rx_memory>
    9d14:	.word	0x1fff03d0
    9d18:	.word	0x38e38e39
    9d1c:	.word	0x1fff1aed
    9d20:	.word	0x1fff0984
    9d24:	.word	0x1fff1af8

00009d28 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9d28:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9d2a:	cmp	r3, #5
    9d2c:	bhi.n	9d58 <usb_rx+0x30>
	__disable_irq();
    9d2e:	cpsid	i
	ret = rx_first[endpoint];
    9d30:	ldr	r1, [pc, #40]	; (9d5c <usb_rx+0x34>)
    9d32:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9d36:	cbz	r0, 9d54 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9d38:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9d3a:	ldr	r4, [pc, #36]	; (9d60 <usb_rx+0x38>)
    9d3c:	ldrh	r5, [r0, #0]
    9d3e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    9d42:	ldr	r6, [r0, #4]
    9d44:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9d48:	subs	r2, r2, r5
    9d4a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9d4e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9d50:	pop	{r4, r5, r6}
    9d52:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9d54:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9d56:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9d58:	movs	r0, #0
    9d5a:	bx	lr
    9d5c:	.word	0x1fff1a58
    9d60:	.word	0x1fff1b74

00009d64 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9d64:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9d66:	cmp	r0, #5
    9d68:	bhi.n	9d82 <usb_tx_packet_count+0x1e>
	__disable_irq();
    9d6a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9d6c:	ldr	r3, [pc, #28]	; (9d8c <usb_tx_packet_count+0x28>)
    9d6e:	ldr.w	r3, [r3, r0, lsl #2]
    9d72:	cbz	r3, 9d86 <usb_tx_packet_count+0x22>
    9d74:	movs	r0, #0
    9d76:	ldr	r3, [r3, #4]
    9d78:	adds	r0, #1
    9d7a:	cmp	r3, #0
    9d7c:	bne.n	9d76 <usb_tx_packet_count+0x12>
	__enable_irq();
    9d7e:	cpsie	i
	return count;
    9d80:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9d82:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    9d84:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    9d86:	mov	r0, r3
    9d88:	b.n	9d7e <usb_tx_packet_count+0x1a>
    9d8a:	nop
    9d8c:	.word	0x1fff1ab4

00009d90 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    9d90:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    9d92:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9d94:	ldr	r2, [pc, #236]	; (9e84 <usb_rx_memory+0xf4>)
    9d96:	ldrb	r3, [r2, #0]
    9d98:	lsls	r1, r3, #28
    9d9a:	bpl.n	9daa <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9d9c:	ldr	r3, [pc, #232]	; (9e88 <usb_rx_memory+0xf8>)
    9d9e:	ldr	r1, [r3, #32]
    9da0:	cmp	r1, #0
    9da2:	beq.n	9e44 <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9da4:	ldr	r1, [r3, #40]	; 0x28
    9da6:	cmp	r1, #0
    9da8:	beq.n	9e60 <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9daa:	ldrb	r3, [r2, #1]
    9dac:	lsls	r3, r3, #28
    9dae:	bpl.n	9dbe <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9db0:	ldr	r3, [pc, #212]	; (9e88 <usb_rx_memory+0xf8>)
    9db2:	ldr	r1, [r3, #64]	; 0x40
    9db4:	cmp	r1, #0
    9db6:	beq.n	9e74 <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9db8:	ldr	r1, [r3, #72]	; 0x48
    9dba:	cmp	r1, #0
    9dbc:	beq.n	9e64 <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9dbe:	ldrb	r3, [r2, #2]
    9dc0:	lsls	r5, r3, #28
    9dc2:	bpl.n	9dd2 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9dc4:	ldr	r3, [pc, #192]	; (9e88 <usb_rx_memory+0xf8>)
    9dc6:	ldr	r1, [r3, #96]	; 0x60
    9dc8:	cmp	r1, #0
    9dca:	beq.n	9e70 <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9dcc:	ldr	r1, [r3, #104]	; 0x68
    9dce:	cmp	r1, #0
    9dd0:	beq.n	9e68 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9dd2:	ldrb	r3, [r2, #3]
    9dd4:	lsls	r4, r3, #28
    9dd6:	bpl.n	9dea <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9dd8:	ldr	r3, [pc, #172]	; (9e88 <usb_rx_memory+0xf8>)
    9dda:	ldr.w	r1, [r3, #128]	; 0x80
    9dde:	cmp	r1, #0
    9de0:	beq.n	9e78 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9de2:	ldr.w	r1, [r3, #136]	; 0x88
    9de6:	cmp	r1, #0
    9de8:	beq.n	9e6c <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9dea:	ldrb	r3, [r2, #4]
    9dec:	lsls	r1, r3, #28
    9dee:	bpl.n	9e00 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9df0:	ldr	r3, [pc, #148]	; (9e88 <usb_rx_memory+0xf8>)
    9df2:	ldr.w	r1, [r3, #160]	; 0xa0
    9df6:	cmp	r1, #0
    9df8:	beq.n	9e80 <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9dfa:	ldr.w	r1, [r3, #168]	; 0xa8
    9dfe:	cbz	r1, 9e26 <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9e00:	ldrb	r3, [r2, #5]
    9e02:	lsls	r3, r3, #28
    9e04:	bpl.n	9e18 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e06:	ldr	r3, [pc, #128]	; (9e88 <usb_rx_memory+0xf8>)
    9e08:	ldr.w	r2, [r3, #192]	; 0xc0
    9e0c:	cmp	r2, #0
    9e0e:	beq.n	9e7c <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9e10:	ldr.w	r2, [r3, #200]	; 0xc8
    9e14:	movs	r4, #25
    9e16:	cbz	r2, 9e28 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9e18:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9e1a:	ldr	r3, [pc, #112]	; (9e8c <usb_rx_memory+0xfc>)
    9e1c:	movs	r2, #0
    9e1e:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9e20:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    9e22:	b.w	9cdc <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9e26:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9e28:	ldr	r1, [pc, #96]	; (9e8c <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9e2a:	ldr	r5, [pc, #100]	; (9e90 <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    9e2c:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9e2e:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9e32:	add.w	r3, r3, r4, lsl #3
    9e36:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9e38:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9e3a:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9e3c:	strb	r2, [r1, #0]
				__enable_irq();
    9e3e:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9e40:	pop	{r4, r5}
    9e42:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e44:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9e46:	ldr	r4, [pc, #68]	; (9e8c <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9e48:	ldr	r5, [pc, #72]	; (9e94 <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    9e4a:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9e4c:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9e50:	add.w	r3, r3, r2, lsl #3
    9e54:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9e56:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9e58:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9e5a:	strb	r2, [r4, #0]
				__enable_irq();
    9e5c:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9e5e:	b.n	9e40 <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9e60:	movs	r4, #5
    9e62:	b.n	9e28 <usb_rx_memory+0x98>
    9e64:	movs	r4, #9
    9e66:	b.n	9e28 <usb_rx_memory+0x98>
    9e68:	movs	r4, #13
    9e6a:	b.n	9e28 <usb_rx_memory+0x98>
    9e6c:	movs	r4, #17
    9e6e:	b.n	9e28 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e70:	movs	r2, #12
    9e72:	b.n	9e46 <usb_rx_memory+0xb6>
    9e74:	movs	r2, #8
    9e76:	b.n	9e46 <usb_rx_memory+0xb6>
    9e78:	movs	r2, #16
    9e7a:	b.n	9e46 <usb_rx_memory+0xb6>
    9e7c:	movs	r2, #24
    9e7e:	b.n	9e46 <usb_rx_memory+0xb6>
    9e80:	movs	r2, #20
    9e82:	b.n	9e46 <usb_rx_memory+0xb6>
    9e84:	.word	0x0001027c
    9e88:	.word	0x1fff0000
    9e8c:	.word	0x1fff1aed
    9e90:	.word	0x004000c8
    9e94:	.word	0x00400088

00009e98 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    9e98:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    9e9a:	cmp	r3, #5
    9e9c:	bhi.n	9eda <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9e9e:	ldr	r2, [pc, #108]	; (9f0c <usb_tx+0x74>)
    9ea0:	lsls	r0, r0, #5
    9ea2:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    9ea6:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9ea8:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    9eaa:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    9eac:	ldr	r4, [pc, #96]	; (9f10 <usb_tx+0x78>)
    9eae:	ldrb	r2, [r4, r3]
    9eb0:	cmp	r2, #3
    9eb2:	bhi.n	9eec <usb_tx+0x54>
    9eb4:	tbb	[pc, r2]
    9eb8:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    9ebc:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9ebe:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    9ec0:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9ec2:	tst.w	r0, #8
    9ec6:	ite	ne
    9ec8:	movne	r3, #200	; 0xc8
    9eca:	moveq	r3, #136	; 0x88
    9ecc:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9ed0:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9ed2:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9ed4:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    9ed6:	cpsie	i
}
    9ed8:	pop	{r4, r5}
    9eda:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    9edc:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    9ede:	movs	r2, #2
		break;
    9ee0:	b.n	9ebe <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    9ee2:	movs	r2, #5
    9ee4:	b.n	9ebe <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    9ee6:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    9ee8:	movs	r2, #4
		break;
    9eea:	b.n	9ebe <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9eec:	ldr	r2, [pc, #36]	; (9f14 <usb_tx+0x7c>)
    9eee:	ldr.w	r0, [r2, r3, lsl #2]
    9ef2:	cbz	r0, 9f04 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    9ef4:	ldr	r2, [pc, #32]	; (9f18 <usb_tx+0x80>)
    9ef6:	ldr.w	r0, [r2, r3, lsl #2]
    9efa:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9efc:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    9f00:	cpsie	i
		return;
    9f02:	b.n	9ed8 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    9f04:	str.w	r1, [r2, r3, lsl #2]
    9f08:	ldr	r2, [pc, #12]	; (9f18 <usb_tx+0x80>)
    9f0a:	b.n	9efc <usb_tx+0x64>
    9f0c:	.word	0x1fff0000
    9f10:	.word	0x1fff1afc
    9f14:	.word	0x1fff1ab4
    9f18:	.word	0x1fff1acc

00009f1c <usb_isr>:
}



void usb_isr(void)
{
    9f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9f20:	ldr.w	fp, [pc, #780]	; a230 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    9f24:	ldr.w	sl, [pc, #780]	; a234 <usb_isr+0x318>
}



void usb_isr(void)
{
    9f28:	sub	sp, #28
    9f2a:	b.n	9fb6 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9f2c:	ldr	r7, [pc, #692]	; (a1e4 <usb_isr+0x2c8>)
    9f2e:	mov.w	r8, r3, lsr #2
    9f32:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9f36:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9f38:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9f3c:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9f40:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9f42:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9f46:	and.w	r4, r3, #255	; 0xff
    9f4a:	cmp	r3, #0
    9f4c:	bne.w	a238 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    9f50:	ldr.w	r3, [r7, r8, lsl #3]
    9f54:	lsrs	r3, r3, #16
    9f56:	uxth	r1, r3
    9f58:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    9f5c:	cmp	r3, #0
    9f5e:	beq.w	a1d0 <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    9f62:	ldr	r3, [pc, #644]	; (a1e8 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    9f64:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    9f68:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    9f6c:	ldr.w	r2, [r3, r6, lsl #2]
    9f70:	cmp	r2, #0
    9f72:	beq.w	a2d4 <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    9f76:	ldr	r5, [pc, #628]	; (a1ec <usb_isr+0x2d0>)
    9f78:	ldr.w	r3, [r5, r6, lsl #2]
    9f7c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    9f7e:	ldr	r4, [pc, #624]	; (a1f0 <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    9f80:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    9f84:	ldrh.w	r3, [r4, r6, lsl #1]
    9f88:	add	r1, r3
    9f8a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    9f8e:	bl	9c9c <usb_malloc>
					if (packet) {
    9f92:	cmp	r0, #0
    9f94:	beq.w	a2c6 <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    9f98:	ldr	r2, [pc, #600]	; (a1f4 <usb_isr+0x2d8>)
    9f9a:	ldr	r3, [pc, #604]	; (a1f8 <usb_isr+0x2dc>)
    9f9c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9fa0:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    9fa4:	it	ne
    9fa6:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9fa8:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    9fac:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    9fb0:	movs	r3, #8
    9fb2:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9fb6:	ldrb.w	r4, [fp]
    9fba:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    9fbc:	lsls	r5, r4, #29
    9fbe:	bpl.n	9ff8 <usb_isr+0xdc>
		if (usb_configuration) {
    9fc0:	ldr	r3, [pc, #568]	; (a1fc <usb_isr+0x2e0>)
    9fc2:	ldrb	r3, [r3, #0]
    9fc4:	cbz	r3, 9ff2 <usb_isr+0xd6>
			t = usb_reboot_timer;
    9fc6:	ldr	r1, [pc, #568]	; (a200 <usb_isr+0x2e4>)
    9fc8:	ldrb	r2, [r1, #0]
			if (t) {
    9fca:	and.w	r3, r2, #255	; 0xff
    9fce:	cbz	r2, 9fdc <usb_isr+0xc0>
				usb_reboot_timer = --t;
    9fd0:	subs	r3, #1
    9fd2:	uxtb	r3, r3
    9fd4:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    9fd6:	cmp	r3, #0
    9fd8:	beq.w	a95a <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    9fdc:	ldr	r1, [pc, #548]	; (a204 <usb_isr+0x2e8>)
    9fde:	ldrb	r2, [r1, #0]
			if (t) {
    9fe0:	and.w	r3, r2, #255	; 0xff
    9fe4:	cbz	r2, 9ff2 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    9fe6:	subs	r3, #1
    9fe8:	uxtb	r3, r3
    9fea:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9fec:	cmp	r3, #0
    9fee:	beq.w	a2c0 <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    9ff2:	movs	r3, #4
    9ff4:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    9ff8:	and.w	r3, r4, #8
    9ffc:	and.w	r2, r3, #255	; 0xff
    a000:	cmp	r3, #0
    a002:	beq.w	a292 <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
    a006:	ldrb.w	r3, [sl]
    a00a:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    a00c:	lsrs	r6, r3, #4
    a00e:	bne.n	9f2c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a010:	lsrs	r0, r3, #2
    a012:	ldr.w	r9, [pc, #464]	; a1e4 <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a016:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a01a:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a01e:	ubfx	r2, r2, #2, #4
    a022:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    a024:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a026:	cmp	r2, #12
    a028:	bhi.w	a1b2 <usb_isr+0x296>
    a02c:	tbh	[pc, r2, lsl #1]
    a030:	.word	0x00c500c5
    a034:	.word	0x00c100c1
    a038:	.word	0x00c100c1
    a03c:	.word	0x00c100c1
    a040:	.word	0x00c1008b
    a044:	.word	0x00c100c1
    a048:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a04a:	ldr	r2, [r1, #0]
    a04c:	ldr	r5, [pc, #440]	; (a208 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    a04e:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a050:	ldr	r7, [pc, #440]	; (a20c <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a052:	ldr	r6, [pc, #444]	; (a210 <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a054:	ldr	r4, [pc, #412]	; (a1f4 <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    a056:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a058:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a05a:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a05e:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a060:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a062:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a064:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a068:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a06a:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    a06e:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a072:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a074:	beq.w	a716 <usb_isr+0x7fa>
    a078:	bls.w	a2dc <usb_isr+0x3c0>
    a07c:	movw	r4, #8993	; 0x2321
    a080:	cmp	r1, r4
    a082:	beq.w	a720 <usb_isr+0x804>
    a086:	bhi.w	a412 <usb_isr+0x4f6>
    a08a:	movw	r4, #8225	; 0x2021
    a08e:	cmp	r1, r4
    a090:	beq.w	a428 <usb_isr+0x50c>
    a094:	movw	r4, #8737	; 0x2221
    a098:	cmp	r1, r4
    a09a:	beq.w	a572 <usb_isr+0x656>
    a09e:	cmp.w	r1, #2304	; 0x900
    a0a2:	bne.w	a422 <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    a0a6:	ldr	r2, [pc, #340]	; (a1fc <usb_isr+0x2e0>)
    a0a8:	ldr	r4, [pc, #312]	; (a1e4 <usb_isr+0x2c8>)
    a0aa:	ldrb	r1, [r5, #2]
    a0ac:	strb	r1, [r2, #0]
    a0ae:	add.w	r5, r4, #192	; 0xc0
    a0b2:	b.n	a0ba <usb_isr+0x19e>
    a0b4:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a0b6:	cmp	r5, r4
    a0b8:	beq.n	a0ce <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    a0ba:	ldr	r3, [r4, #32]
    a0bc:	lsls	r0, r3, #24
    a0be:	bpl.n	a0b4 <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a0c0:	ldr	r0, [r4, #36]	; 0x24
    a0c2:	adds	r4, #8
    a0c4:	subs	r0, #8
    a0c6:	bl	9cdc <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a0ca:	cmp	r5, r4
    a0cc:	bne.n	a0ba <usb_isr+0x19e>
    a0ce:	ldr	r4, [pc, #324]	; (a214 <usb_isr+0x2f8>)
    a0d0:	ldr	r2, [pc, #276]	; (a1e8 <usb_isr+0x2cc>)
    a0d2:	ldr	r1, [pc, #324]	; (a218 <usb_isr+0x2fc>)
    a0d4:	ldr	r0, [pc, #324]	; (a21c <usb_isr+0x300>)
    a0d6:	ldr	r5, [pc, #276]	; (a1ec <usb_isr+0x2d0>)
    a0d8:	str	r4, [sp, #4]
    a0da:	movs	r3, #0
    a0dc:	ldr	r4, [pc, #272]	; (a1f0 <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a0de:	str	r6, [sp, #20]
    a0e0:	str	r5, [sp, #8]
    a0e2:	str	r4, [sp, #12]
    a0e4:	mov	r8, r0
    a0e6:	str	r7, [sp, #16]
    a0e8:	mov	r6, r2
    a0ea:	mov	r5, r1
    a0ec:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    a0ee:	ldr	r0, [r6, #0]
			while (p) {
    a0f0:	cbz	r0, a0fe <usb_isr+0x1e2>
				n = p->next;
    a0f2:	ldr	r7, [r0, #4]
				usb_free(p);
    a0f4:	bl	9cdc <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    a0f8:	mov	r0, r7
    a0fa:	cmp	r7, #0
    a0fc:	bne.n	a0f2 <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    a0fe:	movs	r3, #0
    a100:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    a102:	ldr	r3, [sp, #8]
			p = tx_first[i];
    a104:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    a106:	mov	r2, r3
    a108:	movs	r3, #0
    a10a:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    a10e:	cbz	r0, a11c <usb_isr+0x200>
				n = p->next;
    a110:	ldr	r7, [r0, #4]
				usb_free(p);
    a112:	bl	9cdc <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    a116:	mov	r0, r7
    a118:	cmp	r7, #0
    a11a:	bne.n	a110 <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a11c:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a11e:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a120:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a122:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    a124:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    a128:	ldr	r2, [sp, #12]
    a12a:	mov.w	r1, #0
			switch (tx_state[i]) {
    a12e:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    a130:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    a134:	cmp	r3, #3
    a136:	bhi.w	a64c <usb_isr+0x730>
    a13a:	tbh	[pc, r3, lsl #1]
    a13e:	.short	0x02e7
    a140:	.word	0x02e70283
    a144:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    a146:	ldr	r7, [pc, #196]	; (a20c <usb_isr+0x2f0>)
    a148:	ldr	r2, [r7, #0]
		if (data) {
    a14a:	cbz	r2, a19e <usb_isr+0x282>
			size = ep0_tx_len;
    a14c:	ldr	r3, [pc, #208]	; (a220 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a14e:	ldr	r6, [pc, #192]	; (a210 <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a150:	ldr	r1, [pc, #208]	; (a224 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    a152:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a154:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a156:	ldrb	r5, [r1, #0]
    a158:	cmp	r0, #64	; 0x40
    a15a:	mov	lr, r0
    a15c:	orr.w	r8, r5, #2
    a160:	it	cs
    a162:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a166:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    a168:	eor.w	r4, r4, #1
    a16c:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a16e:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a172:	ite	eq
    a174:	moveq	r4, #136	; 0x88
    a176:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a178:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a17c:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a17e:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a182:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a186:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a188:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a18a:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    a18e:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a190:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a192:	cbnz	r0, a19c <usb_isr+0x280>
    a194:	cmp.w	lr, #64	; 0x40
    a198:	it	ne
    a19a:	movne	r2, #0
    a19c:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    a19e:	ldr	r3, [pc, #104]	; (a208 <usb_isr+0x2ec>)
    a1a0:	ldrh	r2, [r3, #0]
    a1a2:	cmp.w	r2, #1280	; 0x500
    a1a6:	bne.n	a1b2 <usb_isr+0x296>
			setup.bRequest = 0;
    a1a8:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a1aa:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    a1ac:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a1ae:	ldr	r3, [pc, #120]	; (a228 <usb_isr+0x30c>)
    a1b0:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a1b2:	ldr	r2, [pc, #120]	; (a22c <usb_isr+0x310>)
    a1b4:	movs	r3, #1
    a1b6:	strb	r3, [r2, #0]
    a1b8:	b.n	9fb0 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    a1ba:	ldr	r2, [pc, #76]	; (a208 <usb_isr+0x2ec>)
    a1bc:	ldrh	r5, [r2, #0]
    a1be:	movw	r4, #8225	; 0x2021
    a1c2:	cmp	r5, r4
    a1c4:	beq.w	a3bc <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a1c8:	ldr	r2, [pc, #40]	; (a1f4 <usb_isr+0x2d8>)
    a1ca:	str.w	r2, [r9, r0, lsl #3]
    a1ce:	b.n	a1b2 <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a1d0:	ldr	r2, [pc, #32]	; (a1f4 <usb_isr+0x2d8>)
    a1d2:	ldr	r3, [pc, #36]	; (a1f8 <usb_isr+0x2dc>)
    a1d4:	tst.w	r9, #8
    a1d8:	it	ne
    a1da:	movne	r3, r2
    a1dc:	str.w	r3, [r7, r8, lsl #3]
    a1e0:	b.n	9fb0 <usb_isr+0x94>
    a1e2:	nop
    a1e4:	.word	0x1fff0000
    a1e8:	.word	0x1fff1a58
    a1ec:	.word	0x1fff19fc
    a1f0:	.word	0x1fff1b74
    a1f4:	.word	0x004000c8
    a1f8:	.word	0x00400088
    a1fc:	.word	0x1fff1af8
    a200:	.word	0x1fff1a71
    a204:	.word	0x1fff19e0
    a208:	.word	0x1fff1ae4
    a20c:	.word	0x1fff19f8
    a210:	.word	0x1fff1a70
    a214:	.word	0x1fff1afc
    a218:	.word	0x1fff1ab4
    a21c:	.word	0x1fff1acc
    a220:	.word	0x1fff1a14
    a224:	.word	0x1fff1aec
    a228:	.word	0x40072098
    a22c:	.word	0x40072094
    a230:	.word	0x40072080
    a234:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    a238:	bl	9cdc <usb_free>
				packet = tx_first[endpoint];
    a23c:	ldr	r2, [pc, #692]	; (a4f4 <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a23e:	ldr	r1, [pc, #696]	; (a4f8 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    a240:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    a244:	cmp	r3, #0
    a246:	beq.w	a39c <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a24a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a24c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a24e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    a252:	add.w	r2, r3, #8
    a256:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    a25a:	cmp	r4, #3
    a25c:	bhi.n	a26a <usb_isr+0x34e>
    a25e:	tbb	[pc, r4]
    a262:	.short	0x0f12
    a264:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    a266:	movs	r2, #4
    a268:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    a26a:	ldrh	r2, [r3, #0]
    a26c:	tst.w	r9, #8
    a270:	ite	eq
    a272:	moveq	r3, #136	; 0x88
    a274:	movne	r3, #200	; 0xc8
    a276:	orr.w	r3, r3, r2, lsl #16
    a27a:	str.w	r3, [r7, r8, lsl #3]
    a27e:	b.n	9fb0 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    a280:	movs	r2, #2
    a282:	strb	r2, [r1, r6]
						break;
    a284:	b.n	a26a <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    a286:	movs	r2, #3
    a288:	strb	r2, [r1, r6]
						break;
    a28a:	b.n	a26a <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    a28c:	movs	r2, #5
    a28e:	strb	r2, [r1, r6]
						break;
    a290:	b.n	a26a <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    a292:	lsls	r0, r4, #31
    a294:	bmi.w	a430 <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    a298:	lsls	r1, r4, #24
    a29a:	bmi.w	a4cc <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a29e:	lsls	r2, r4, #30
    a2a0:	bpl.n	a2b0 <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
    a2a2:	ldr	r2, [pc, #600]	; (a4fc <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a2a4:	ldr	r1, [pc, #600]	; (a500 <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a2a6:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a2a8:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a2aa:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    a2ac:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a2ae:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    a2b0:	lsls	r3, r4, #27
    a2b2:	bpl.n	a2ba <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    a2b4:	ldr	r3, [pc, #584]	; (a500 <usb_isr+0x5e4>)
    a2b6:	movs	r2, #16
    a2b8:	strb	r2, [r3, #0]
	}

}
    a2ba:	add	sp, #28
    a2bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    a2c0:	bl	9868 <usb_serial_flush_callback>
    a2c4:	b.n	9ff2 <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    a2c6:	ldr	r2, [pc, #572]	; (a504 <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    a2c8:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    a2cc:	ldrb	r3, [r2, #0]
    a2ce:	adds	r3, #1
    a2d0:	strb	r3, [r2, #0]
    a2d2:	b.n	9fb0 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    a2d4:	str.w	r0, [r3, r6, lsl #2]
    a2d8:	ldr	r5, [pc, #556]	; (a508 <usb_isr+0x5ec>)
    a2da:	b.n	9f7e <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a2dc:	movw	r4, #770	; 0x302
    a2e0:	cmp	r1, r4
    a2e2:	beq.w	a728 <usb_isr+0x80c>
    a2e6:	bhi.w	a48a <usb_isr+0x56e>
    a2ea:	cmp	r1, #130	; 0x82
    a2ec:	beq.w	a61e <usb_isr+0x702>
    a2f0:	cmp.w	r1, #258	; 0x102
    a2f4:	beq.w	a54c <usb_isr+0x630>
    a2f8:	cmp	r1, #128	; 0x80
    a2fa:	bne.w	a422 <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a2fe:	ldr	r4, [pc, #524]	; (a50c <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
    a300:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a302:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a304:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a306:	ldrh	r2, [r5, #6]
    a308:	cmp	r2, r0
    a30a:	bcs.w	a8aa <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a30e:	ldr	r1, [pc, #512]	; (a510 <usb_isr+0x5f4>)
    a310:	ldrb	r5, [r1, #0]
    a312:	cmp	r2, #64	; 0x40
    a314:	mov	lr, r2
    a316:	orr.w	ip, r5, #2
    a31a:	it	cs
    a31c:	movcs.w	lr, #64	; 0x40
    a320:	add.w	r3, r4, lr
    a324:	add.w	r0, r9, ip, lsl #3
    a328:	str	r3, [sp, #4]
    a32a:	movs	r3, #1
    a32c:	str	r4, [r0, #4]
    a32e:	mov.w	r8, lr, lsl #16
    a332:	rsb	r0, lr, r2
    a336:	str	r3, [sp, #8]
    a338:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a33a:	movs	r4, #200	; 0xc8
    a33c:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a340:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a344:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    a348:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a34a:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a34c:	ldr.w	ip, [pc, #472]	; a528 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
    a350:	ldr	r3, [pc, #448]	; (a514 <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
    a352:	ldr.w	r8, [pc, #444]	; a510 <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a356:	cmp	r0, #0
    a358:	bne.w	a5b4 <usb_isr+0x698>
    a35c:	cmp.w	lr, #64	; 0x40
    a360:	bne.n	a428 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a362:	orr.w	ip, r4, #2
    a366:	add.w	r3, r9, ip, lsl #3
    a36a:	ldr	r4, [sp, #4]
    a36c:	ldr.w	lr, [pc, #440]	; a528 <usb_isr+0x60c>
    a370:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a372:	cmp	r2, #0
    a374:	bne.w	a5e0 <usb_isr+0x6c4>
    a378:	lsls	r2, r0, #16
    a37a:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    a37e:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a382:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a386:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a388:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a38a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a38c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a38e:	cmp	r0, #64	; 0x40
    a390:	bne.n	a428 <usb_isr+0x50c>
    a392:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    a394:	ldr	r2, [pc, #384]	; (a518 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    a396:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    a398:	strh	r0, [r2, #0]
    a39a:	b.n	a428 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    a39c:	ldrb	r3, [r1, r6]
    a39e:	cmp	r3, #3
    a3a0:	bhi.w	a610 <usb_isr+0x6f4>
    a3a4:	add	r2, pc, #4	; (adr r2, a3ac <usb_isr+0x490>)
    a3a6:	ldr.w	pc, [r2, r3, lsl #2]
    a3aa:	nop
    a3ac:	.word	0x00009fb1
    a3b0:	.word	0x00009fb1
    a3b4:	.word	0x0000a485
    a3b8:	.word	0x0000a47f
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    a3bc:	ldrh	r2, [r2, #4]
    a3be:	cbnz	r2, a3e4 <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a3c0:	ldr	r2, [pc, #344]	; (a51c <usb_isr+0x600>)
    a3c2:	ldrb	r5, [r1, #0]
    a3c4:	ldrb	r4, [r1, #1]
    a3c6:	strb	r5, [r2, #0]
    a3c8:	strb	r4, [r2, #1]
    a3ca:	ldrb	r5, [r1, #2]
    a3cc:	ldrb	r4, [r1, #3]
    a3ce:	strb	r5, [r2, #2]
    a3d0:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a3d2:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a3d4:	ldrb	r5, [r1, #4]
    a3d6:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a3d8:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a3da:	ldrb	r5, [r1, #5]
    a3dc:	ldrb	r1, [r1, #6]
    a3de:	strb	r5, [r2, #5]
    a3e0:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a3e2:	beq.n	a4e0 <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3e4:	ldr	r1, [pc, #296]	; (a510 <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3e6:	ldr	r6, [pc, #300]	; (a514 <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3e8:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3ea:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a3ec:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3f0:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3f2:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a3f6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a3f8:	ite	eq
    a3fa:	moveq	r1, #136	; 0x88
    a3fc:	movne	r1, #200	; 0xc8
    a3fe:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a402:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a406:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a40a:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a40c:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a40e:	str	r1, [r2, #4]
    a410:	b.n	a1c8 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a412:	movw	r2, #26273	; 0x66a1
    a416:	cmp	r1, r2
    a418:	beq.n	a422 <usb_isr+0x506>
    a41a:	movw	r2, #26529	; 0x67a1
    a41e:	cmp	r1, r2
    a420:	beq.n	a4e8 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a422:	ldr	r2, [pc, #252]	; (a520 <usb_isr+0x604>)
    a424:	movs	r3, #15
    a426:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a428:	ldr	r2, [pc, #248]	; (a524 <usb_isr+0x608>)
    a42a:	movs	r3, #1
    a42c:	strb	r3, [r2, #0]
    a42e:	b.n	a1b2 <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a430:	ldr	r3, [pc, #244]	; (a528 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a432:	ldr	r0, [pc, #240]	; (a524 <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
    a434:	ldr	r1, [pc, #216]	; (a510 <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    a436:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a438:	mov.w	lr, #2
    a43c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a440:	ldr	r7, [pc, #220]	; (a520 <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    a442:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a444:	ldr	r1, [pc, #228]	; (a52c <usb_isr+0x610>)
    a446:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    a448:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a44a:	ldr	r6, [pc, #176]	; (a4fc <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
    a44c:	ldr	r5, [pc, #176]	; (a500 <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a44e:	ldr	r4, [pc, #224]	; (a530 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    a450:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a452:	movs	r1, #13
    a454:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a456:	movs	r1, #255	; 0xff
    a458:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a45a:	ldr.w	lr, [pc, #236]	; a548 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    a45e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a460:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a462:	ldr	r5, [pc, #208]	; (a534 <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a464:	ldr	r2, [pc, #208]	; (a538 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a466:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a46a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a46c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a46e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a472:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a474:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a476:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    a478:	add	sp, #28
    a47a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a47e:	movs	r3, #1
    a480:	strb	r3, [r1, r6]
						break;
    a482:	b.n	9fb0 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a484:	movs	r3, #0
    a486:	strb	r3, [r1, r6]
						break;
    a488:	b.n	9fb0 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a48a:	cmp.w	r1, #1280	; 0x500
    a48e:	beq.w	a720 <usb_isr+0x804>
    a492:	bcc.n	a422 <usb_isr+0x506>
    a494:	sub.w	r1, r1, #1664	; 0x680
    a498:	cmp	r1, #1
    a49a:	bhi.n	a422 <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    a49c:	ldr	r2, [pc, #156]	; (a53c <usb_isr+0x620>)
    a49e:	ldr	r4, [r2, #4]
    a4a0:	cmp	r4, #0
    a4a2:	beq.n	a422 <usb_isr+0x506>
    a4a4:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a4a6:	ldrh.w	lr, [r5, #4]
    a4aa:	b.n	a4b4 <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    a4ac:	adds	r2, #12
			if (list->addr == NULL) break;
    a4ae:	ldr	r4, [r2, #4]
    a4b0:	cmp	r4, #0
    a4b2:	beq.n	a422 <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a4b4:	ldrh	r3, [r2, #0]
    a4b6:	cmp	r3, r0
    a4b8:	bne.n	a4ac <usb_isr+0x590>
    a4ba:	ldrh	r3, [r2, #2]
    a4bc:	cmp	r3, lr
    a4be:	bne.n	a4ac <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    a4c0:	lsrs	r0, r0, #8
    a4c2:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    a4c4:	ite	eq
    a4c6:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    a4c8:	ldrhne	r0, [r2, #8]
    a4ca:	b.n	a306 <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a4cc:	ldr	r1, [pc, #80]	; (a520 <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
    a4ce:	ldr	r3, [pc, #48]	; (a500 <usb_isr+0x5e4>)
    a4d0:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a4d2:	movs	r0, #13
    a4d4:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    a4d6:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a4d8:	lsls	r2, r4, #30
    a4da:	bpl.w	a2b0 <usb_isr+0x394>
    a4de:	b.n	a2a2 <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a4e0:	ldr	r2, [pc, #92]	; (a540 <usb_isr+0x624>)
    a4e2:	movs	r1, #15
    a4e4:	strb	r1, [r2, #0]
    a4e6:	b.n	a3e4 <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    a4e8:	ldr	r4, [pc, #32]	; (a50c <usb_isr+0x5f0>)
    a4ea:	ldr	r3, [pc, #88]	; (a544 <usb_isr+0x628>)
    a4ec:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    a4ee:	movs	r0, #4
    a4f0:	b.n	a306 <usb_isr+0x3ea>
    a4f2:	nop
    a4f4:	.word	0x1fff1ab4
    a4f8:	.word	0x1fff1afc
    a4fc:	.word	0x40072088
    a500:	.word	0x40072080
    a504:	.word	0x1fff1aed
    a508:	.word	0x1fff19fc
    a50c:	.word	0x1fff1af0
    a510:	.word	0x1fff1aec
    a514:	.word	0x1fff1a70
    a518:	.word	0x1fff1a14
    a51c:	.word	0x1fff1b68
    a520:	.word	0x400720c0
    a524:	.word	0x40072094
    a528:	.word	0x1fff0000
    a52c:	.word	0x00400088
    a530:	.word	0x40072098
    a534:	.word	0x1fff1a18
    a538:	.word	0x1fff1a74
    a53c:	.word	0x00010284
    a540:	.word	0x1fff1a71
    a544:	.word	0x20010004
    a548:	.word	0x4007208c
    a54c:	ldrh	r1, [r5, #4]
    a54e:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a552:	cmp	r1, #6
    a554:	bhi.w	a422 <usb_isr+0x506>
    a558:	ldrh	r2, [r5, #2]
    a55a:	cmp	r2, #0
    a55c:	bne.w	a422 <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a560:	ldr	r4, [pc, #724]	; (a838 <usb_isr+0x91c>)
    a562:	str	r0, [sp, #8]
    a564:	lsls	r1, r1, #2
    a566:	add	r4, r1
    a568:	ldrb	r1, [r4, #0]
    a56a:	bic.w	r1, r1, #2
    a56e:	strb	r1, [r4, #0]
    a570:	b.n	a58c <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a572:	ldrh	r1, [r5, #4]
    a574:	cmp	r1, #0
    a576:	bne.w	a74e <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a57a:	ldr	r3, [pc, #704]	; (a83c <usb_isr+0x920>)
    a57c:	ldr	r2, [pc, #704]	; (a840 <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a57e:	ldr	r4, [pc, #708]	; (a844 <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a580:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a582:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a584:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a586:	str	r0, [sp, #8]
    a588:	mov	r2, r1
    a58a:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a58c:	movs	r0, #0
    a58e:	str	r0, [sp, #4]
    a590:	mov	r8, r0
    a592:	mov	lr, r0
    a594:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a596:	ldr	r1, [pc, #688]	; (a848 <usb_isr+0x92c>)
    a598:	ldrb	r5, [r1, #0]
    a59a:	orr.w	ip, r5, #2
    a59e:	add.w	r3, r9, ip, lsl #3
    a5a2:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5a4:	ldr	r3, [sp, #8]
    a5a6:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a5a8:	ldr	r3, [sp, #12]
    a5aa:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5ac:	ite	eq
    a5ae:	moveq	r4, #136	; 0x88
    a5b0:	movne	r4, #200	; 0xc8
    a5b2:	b.n	a33c <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    a5b4:	cmp	r0, #64	; 0x40
    a5b6:	bls.w	a362 <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a5ba:	orr.w	r4, r4, #2
    a5be:	add.w	r1, ip, r4, lsl #3
    a5c2:	ldr	r6, [sp, #4]
    a5c4:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5c6:	cbz	r2, a5f8 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
    a5c8:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5cc:	ldr	r2, [pc, #636]	; (a84c <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
    a5ce:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a5d0:	mov	r3, r6
    a5d2:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a5d4:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a5d8:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5da:	str.w	r2, [ip, r4, lsl #3]
    a5de:	b.n	a394 <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
    a5e0:	ldrb.w	r3, [sp, #8]
    a5e4:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5e6:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a5e8:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a5ea:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5ec:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a5f0:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a5f2:	str.w	r2, [lr, ip, lsl #3]
    a5f6:	b.n	a38e <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
    a5f8:	ldrb.w	r1, [sp, #8]
    a5fc:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a5fe:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a600:	ldr	r2, [pc, #588]	; (a850 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a602:	strb.w	r5, [r8]
    a606:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a608:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a60a:	str.w	r2, [ip, r4, lsl #3]
    a60e:	b.n	a394 <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    a610:	tst.w	r9, #8
    a614:	ite	eq
    a616:	moveq	r3, #2
    a618:	movne	r3, #3
    a61a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    a61c:	b.n	9fb0 <usb_isr+0x94>
    a61e:	ldrh	r1, [r5, #4]
    a620:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    a624:	cmp	r1, #6
    a626:	bhi.w	a422 <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a62a:	ldr	r3, [pc, #524]	; (a838 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a62c:	ldr	r4, [pc, #548]	; (a854 <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a62e:	lsls	r1, r1, #2
    a630:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a632:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a634:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a636:	ldrb	r2, [r3, #0]
    a638:	lsls	r3, r2, #30
    a63a:	bpl.w	a752 <usb_isr+0x836>
    a63e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    a640:	movs	r0, #2
    a642:	b.n	a306 <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a644:	ldr	r3, [sp, #4]
    a646:	mov.w	r2, #1
    a64a:	strb	r2, [r3, #0]
    a64c:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    a64e:	adds	r4, #1
    a650:	adds	r3, #1
    a652:	cmp	r4, #6
    a654:	add.w	r6, r6, #4
    a658:	add.w	r5, r5, #4
    a65c:	str	r3, [sp, #4]
    a65e:	bne.w	a0ee <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a662:	ldr	r5, [pc, #500]	; (a858 <usb_isr+0x93c>)
			*reg = epconf;
    a664:	ldr	r1, [pc, #500]	; (a85c <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a666:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    a668:	ldr	r4, [pc, #500]	; (a860 <usb_isr+0x944>)
    a66a:	ldr	r7, [sp, #16]
    a66c:	ldr	r6, [sp, #20]
    a66e:	movs	r0, #0
    a670:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a672:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a674:	lsls	r1, r2, #28
    a676:	bmi.w	a784 <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a67a:	ldrb	r2, [r5, #1]
			*reg = epconf;
    a67c:	ldr	r1, [pc, #484]	; (a864 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a67e:	ldr.w	r8, [pc, #504]	; a878 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a682:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a684:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a686:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a688:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    a68c:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a690:	bmi.n	a756 <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a692:	ldrb	r2, [r5, #2]
			*reg = epconf;
    a694:	ldr	r1, [pc, #464]	; (a868 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a696:	ldr.w	r8, [pc, #480]	; a878 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a69a:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a69c:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a69e:	mov.w	r1, #0
    a6a2:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    a6a6:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6aa:	bmi.w	a880 <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a6ae:	ldrb	r2, [r5, #3]
			*reg = epconf;
    a6b0:	ldr	r1, [pc, #440]	; (a86c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6b2:	ldr.w	r8, [pc, #452]	; a878 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a6b6:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6b8:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6ba:	mov.w	r1, #0
    a6be:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    a6c2:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6c6:	bmi.w	a80e <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a6ca:	ldr	r1, [pc, #420]	; (a870 <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a6cc:	ldrb	r2, [r5, #4]
			*reg = epconf;
    a6ce:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6d0:	movs	r1, #0
    a6d2:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    a6d6:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6da:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6dc:	ldr.w	r8, [pc, #408]	; a878 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6e0:	bmi.n	a7e0 <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a6e2:	ldrb	r2, [r5, #5]
			*reg = epconf;
    a6e4:	ldr	r1, [pc, #396]	; (a874 <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6e6:	ldr	r5, [pc, #400]	; (a878 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a6e8:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6ea:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6ec:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6ee:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    a6f2:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a6f6:	bmi.n	a7b2 <usb_isr+0x896>
    a6f8:	ldrb	r3, [r6, #0]
    a6fa:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a6fc:	movs	r1, #0
    a6fe:	eor.w	r2, r3, #1
    a702:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    a706:	str.w	r1, [r9, #216]	; 0xd8
    a70a:	b.n	a58c <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a70c:	ldr	r3, [sp, #4]
    a70e:	mov.w	r2, #0
    a712:	strb	r2, [r3, #0]
    a714:	b.n	a64c <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a716:	ldr	r2, [pc, #356]	; (a87c <usb_isr+0x960>)
    a718:	ldr	r4, [pc, #312]	; (a854 <usb_isr+0x938>)
    a71a:	ldrb	r2, [r2, #0]
    a71c:	strb	r2, [r4, #0]
    a71e:	b.n	a306 <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a720:	movs	r3, #1
    a722:	movs	r2, #0
    a724:	str	r3, [sp, #8]
    a726:	b.n	a58c <usb_isr+0x670>
    a728:	ldrh	r1, [r5, #4]
    a72a:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a72e:	cmp	r1, #6
    a730:	bhi.w	a422 <usb_isr+0x506>
    a734:	ldrh	r2, [r5, #2]
    a736:	cmp	r2, #0
    a738:	bne.w	a422 <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a73c:	ldr	r4, [pc, #248]	; (a838 <usb_isr+0x91c>)
    a73e:	str	r0, [sp, #8]
    a740:	lsls	r1, r1, #2
    a742:	add	r4, r1
    a744:	ldrb	r1, [r4, #0]
    a746:	orr.w	r1, r1, #2
    a74a:	strb	r1, [r4, #0]
    a74c:	b.n	a58c <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a74e:	str	r0, [sp, #8]
    a750:	b.n	a58c <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    a752:	movs	r0, #2
    a754:	b.n	a306 <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a756:	bl	9c9c <usb_malloc>
				if (p) {
    a75a:	cmp	r0, #0
    a75c:	beq.w	a936 <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
    a760:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a762:	ldr	r2, [pc, #236]	; (a850 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a764:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a768:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a76c:	bl	9c9c <usb_malloc>
				if (p) {
    a770:	cmp	r0, #0
    a772:	beq.w	a92a <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
    a776:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a778:	ldr	r2, [pc, #208]	; (a84c <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a77a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a77e:	str.w	r2, [r9, #72]	; 0x48
    a782:	b.n	a692 <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a784:	bl	9c9c <usb_malloc>
				if (p) {
    a788:	cmp	r0, #0
    a78a:	beq.w	a906 <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
    a78e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a790:	ldr	r2, [pc, #188]	; (a850 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a792:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a796:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a79a:	bl	9c9c <usb_malloc>
				if (p) {
    a79e:	cmp	r0, #0
    a7a0:	beq.w	a8fa <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
    a7a4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a7a6:	ldr	r2, [pc, #164]	; (a84c <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a7a8:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a7ac:	str.w	r2, [r9, #40]	; 0x28
    a7b0:	b.n	a67a <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a7b2:	bl	9c9c <usb_malloc>
				if (p) {
    a7b6:	cmp	r0, #0
    a7b8:	beq.w	a8ee <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
    a7bc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a7be:	ldr	r2, [pc, #144]	; (a850 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a7c0:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a7c4:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a7c8:	bl	9c9c <usb_malloc>
				if (p) {
    a7cc:	cmp	r0, #0
    a7ce:	beq.w	a8e2 <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
    a7d2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a7d4:	ldr	r2, [pc, #116]	; (a84c <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a7d6:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a7da:	str.w	r2, [r9, #200]	; 0xc8
    a7de:	b.n	a6f8 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a7e0:	bl	9c9c <usb_malloc>
				if (p) {
    a7e4:	cmp	r0, #0
    a7e6:	beq.w	a91e <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
    a7ea:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a7ec:	ldr	r2, [pc, #96]	; (a850 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a7ee:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a7f2:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a7f6:	bl	9c9c <usb_malloc>
				if (p) {
    a7fa:	cmp	r0, #0
    a7fc:	beq.w	a912 <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
    a800:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a802:	ldr	r2, [pc, #72]	; (a84c <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a804:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a808:	str.w	r2, [r9, #168]	; 0xa8
    a80c:	b.n	a6e2 <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a80e:	bl	9c9c <usb_malloc>
				if (p) {
    a812:	cmp	r0, #0
    a814:	beq.n	a8d6 <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
    a816:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a818:	ldr	r2, [pc, #52]	; (a850 <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a81a:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a81e:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a822:	bl	9c9c <usb_malloc>
				if (p) {
    a826:	cmp	r0, #0
    a828:	beq.n	a8ca <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
    a82a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a82c:	ldr	r2, [pc, #28]	; (a84c <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a82e:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a832:	str.w	r2, [r9, #136]	; 0x88
    a836:	b.n	a6ca <usb_isr+0x7ae>
    a838:	.word	0x400720c0
    a83c:	.word	0x1fff19f4
    a840:	.word	0x1fff1b70
    a844:	.word	0x1fff19f0
    a848:	.word	0x1fff1aec
    a84c:	.word	0x004000c8
    a850:	.word	0x00400088
    a854:	.word	0x1fff1af0
    a858:	.word	0x0001027c
    a85c:	.word	0x400720c4
    a860:	.word	0x1fff1aed
    a864:	.word	0x400720c8
    a868:	.word	0x400720cc
    a86c:	.word	0x400720d0
    a870:	.word	0x400720d4
    a874:	.word	0x400720d8
    a878:	.word	0x1fff0000
    a87c:	.word	0x1fff1af8
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a880:	bl	9c9c <usb_malloc>
				if (p) {
    a884:	cmp	r0, #0
    a886:	beq.n	a94e <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
    a888:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a88a:	ldr	r2, [pc, #208]	; (a95c <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a88c:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a890:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a894:	bl	9c9c <usb_malloc>
				if (p) {
    a898:	cmp	r0, #0
    a89a:	beq.n	a942 <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
    a89c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a89e:	ldr	r2, [pc, #192]	; (a960 <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a8a0:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8a4:	str.w	r2, [r9, #104]	; 0x68
    a8a8:	b.n	a6ae <usb_isr+0x792>
    a8aa:	cmp	r0, #64	; 0x40
    a8ac:	mov	lr, r0
    a8ae:	it	cs
    a8b0:	movcs.w	lr, #64	; 0x40
    a8b4:	add.w	r3, r4, lr
    a8b8:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a8ba:	movs	r3, #1
    a8bc:	rsb	r0, lr, r0
    a8c0:	mov.w	r8, lr, lsl #16
    a8c4:	movs	r2, #0
    a8c6:	str	r3, [sp, #8]
    a8c8:	b.n	a596 <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a8ca:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a8cc:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    a8d0:	adds	r2, #1
    a8d2:	strb	r2, [r4, #0]
    a8d4:	b.n	a6ca <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a8d6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a8d8:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    a8dc:	adds	r2, #1
    a8de:	strb	r2, [r4, #0]
    a8e0:	b.n	a822 <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a8e2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a8e4:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    a8e8:	adds	r2, #1
    a8ea:	strb	r2, [r4, #0]
    a8ec:	b.n	a6f8 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a8ee:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a8f0:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    a8f4:	adds	r2, #1
    a8f6:	strb	r2, [r4, #0]
    a8f8:	b.n	a7c8 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a8fa:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a8fc:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    a900:	adds	r2, #1
    a902:	strb	r2, [r4, #0]
    a904:	b.n	a67a <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a906:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a908:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    a90c:	adds	r2, #1
    a90e:	strb	r2, [r4, #0]
    a910:	b.n	a79a <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a912:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a914:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    a918:	adds	r2, #1
    a91a:	strb	r2, [r4, #0]
    a91c:	b.n	a6e2 <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a91e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a920:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    a924:	adds	r2, #1
    a926:	strb	r2, [r4, #0]
    a928:	b.n	a7f6 <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a92a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a92c:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    a930:	adds	r2, #1
    a932:	strb	r2, [r4, #0]
    a934:	b.n	a692 <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a936:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a938:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    a93c:	adds	r2, #1
    a93e:	strb	r2, [r4, #0]
    a940:	b.n	a76c <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a942:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a944:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    a948:	adds	r2, #1
    a94a:	strb	r2, [r4, #0]
    a94c:	b.n	a6ae <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a94e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a950:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    a954:	adds	r2, #1
    a956:	strb	r2, [r4, #0]
    a958:	b.n	a894 <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    a95a:	bkpt	0x0000
    a95c:	.word	0x00400088
    a960:	.word	0x004000c8

0000a964 <usb_init>:
}



void usb_init(void)
{
    a964:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a968:	ldr	r4, [pc, #144]	; (a9fc <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a96a:	bl	ad9c <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a96e:	movs	r2, #0
    a970:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a974:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    a976:	str	r2, [r3, #0]
		table[i].addr = 0;
    a978:	str	r2, [r3, #4]
    a97a:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a97c:	cmp	r3, r0
		table[i].desc = 0;
    a97e:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    a982:	bne.n	a976 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a984:	ldr	r0, [pc, #120]	; (aa00 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a986:	ldr	r2, [pc, #124]	; (aa04 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a988:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a98a:	ldr.w	lr, [pc, #144]	; aa1c <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a98e:	ldr	r7, [pc, #120]	; (aa08 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a990:	ldr	r5, [pc, #120]	; (aa0c <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a992:	ldr	r6, [pc, #124]	; (aa10 <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a994:	ldr.w	r8, [pc, #136]	; aa20 <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    a998:	ldr.w	ip, [pc, #136]	; aa24 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a99c:	ldr.w	r9, [pc, #136]	; aa28 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a9a0:	orr.w	r3, r3, #262144	; 0x40000
    a9a4:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a9a6:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a9a8:	ldr	r0, [pc, #104]	; (aa14 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a9aa:	orr.w	r3, r3, #50331648	; 0x3000000
    a9ae:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a9b0:	ubfx	r3, r4, #8, #8
    a9b4:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a9b8:	ubfx	r3, r4, #16, #8
    a9bc:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a9be:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a9c0:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a9c2:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a9c6:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a9c8:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a9cc:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a9d0:	ldr	r5, [pc, #68]	; (aa18 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    a9d2:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    a9d6:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a9d8:	movs	r3, #1
    a9da:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a9de:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a9e0:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a9e4:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a9e8:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    a9ea:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a9ee:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a9f0:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a9f2:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a9f4:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a9f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a9fc:	.word	0x1fff0000
    aa00:	.word	0x40048034
    aa04:	.word	0x4000d800
    aa08:	.word	0x400720b0
    aa0c:	.word	0x400720b4
    aa10:	.word	0x40072010
    aa14:	.word	0xe000e104
    aa18:	.word	0xe000e435
    aa1c:	.word	0x4007209c
    aa20:	.word	0x40072080
    aa24:	.word	0x40072088
    aa28:	.word	0x40072094

0000aa2c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    aa2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    aa30:	ldr	r6, [pc, #196]	; (aaf8 <yield+0xcc>)
    aa32:	ldrb	r3, [r6, #0]
    aa34:	cbz	r3, aa5c <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    aa36:	ldr	r7, [pc, #196]	; (aafc <yield+0xd0>)
    aa38:	ldrb	r2, [r7, #0]
    aa3a:	cbnz	r2, aa5c <yield+0x30>
	running = 1;
    aa3c:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    aa3e:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    aa40:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    aa42:	bmi.n	aab2 <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    aa44:	lsls	r2, r3, #30
    aa46:	bmi.n	aa7c <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    aa48:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    aa4a:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    aa4c:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    aa4e:	bpl.n	aa5c <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    aa50:	ldr	r3, [pc, #172]	; (ab00 <yield+0xd4>)
    aa52:	ldr	r2, [r3, #0]
    aa54:	cbz	r2, aa5c <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    aa56:	mrs	r2, IPSR
		if (ipsr != 0) return;
    aa5a:	cbz	r2, aa60 <yield+0x34>
    aa5c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    aa60:	mrs	r1, PRIMASK
		__disable_irq();
    aa64:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    aa66:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    aa68:	cbz	r0, aa72 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    aa6a:	ldr	r4, [pc, #152]	; (ab04 <yield+0xd8>)
    aa6c:	ldrb	r2, [r4, #0]
    aa6e:	cmp	r2, #0
    aa70:	beq.n	aad0 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    aa72:	cmp	r1, #0
    aa74:	bne.n	aa5c <yield+0x30>
    aa76:	cpsie	i
    aa78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    aa7c:	ldr.w	r8, [pc, #144]	; ab10 <yield+0xe4>
    aa80:	ldrb.w	r2, [r8]
    aa84:	cmp	r2, #0
    aa86:	beq.n	aa48 <yield+0x1c>
    aa88:	ldr.w	r9, [pc, #136]	; ab14 <yield+0xe8>
    aa8c:	movs	r4, #0
    aa8e:	b.n	aa9c <yield+0x70>
    aa90:	adds	r4, #1
    aa92:	ldrb.w	r3, [r8]
    aa96:	uxtb	r4, r4
    aa98:	cmp	r3, r4
    aa9a:	bls.n	aac2 <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    aa9c:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    aaa0:	ldr	r3, [r5, #0]
    aaa2:	mov	r0, r5
    aaa4:	ldr	r3, [r3, #16]
    aaa6:	blx	r3
    aaa8:	cmp	r0, #0
    aaaa:	beq.n	aa90 <yield+0x64>
    aaac:	ldr	r3, [r5, #16]
    aaae:	blx	r3
    aab0:	b.n	aa90 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    aab2:	bl	9654 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    aab6:	cbnz	r0, aaec <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    aab8:	ldr	r3, [pc, #76]	; (ab08 <yield+0xdc>)
    aaba:	ldrb	r3, [r3, #0]
    aabc:	cbnz	r3, aac6 <yield+0x9a>
    aabe:	ldrb	r3, [r6, #0]
    aac0:	b.n	aa44 <yield+0x18>
    aac2:	ldrb	r3, [r6, #0]
    aac4:	b.n	aa48 <yield+0x1c>
    aac6:	ldrb	r3, [r6, #0]
    aac8:	and.w	r3, r3, #254	; 0xfe
    aacc:	strb	r3, [r6, #0]
    aace:	b.n	aa44 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    aad0:	ldr	r5, [r0, #20]
    aad2:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    aad4:	movs	r3, #1
    aad6:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    aad8:	cbz	r5, aaf2 <yield+0xc6>
			firstYield->_prev = nullptr;
    aada:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    aadc:	cbnz	r1, aae0 <yield+0xb4>
    aade:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    aae0:	movs	r5, #0
    aae2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    aae4:	ldr	r3, [r0, #8]
    aae6:	blx	r3
		runningFromYield = false;
    aae8:	strb	r5, [r4, #0]
    aaea:	b.n	aa5c <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    aaec:	bl	acb0 <serialEvent()>
    aaf0:	b.n	aab8 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    aaf2:	ldr	r3, [pc, #24]	; (ab0c <yield+0xe0>)
    aaf4:	str	r5, [r3, #0]
    aaf6:	b.n	aadc <yield+0xb0>
    aaf8:	.word	0x1fff0988
    aafc:	.word	0x1fff1b02
    ab00:	.word	0x1fff1b10
    ab04:	.word	0x1fff1b14
    ab08:	.word	0x1fff099c
    ab0c:	.word	0x1fff1b0c
    ab10:	.word	0x1fff1b30
    ab14:	.word	0x1fff1b18

0000ab18 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    ab18:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ab1a:	mrs	r2, PRIMASK
		__disable_irq();
    ab1e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ab20:	ldr	r4, [pc, #48]	; (ab54 <EventResponder::runFromInterrupt()+0x3c>)
    ab22:	ldr	r0, [r4, #0]
		if (first) {
    ab24:	cbz	r0, ab48 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ab26:	ldr	r6, [pc, #48]	; (ab58 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    ab28:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    ab2a:	ldr	r3, [r0, #20]
    ab2c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    ab2e:	cbz	r3, ab4e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    ab30:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ab32:	cbnz	r2, ab36 <EventResponder::runFromInterrupt()+0x1e>
    ab34:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    ab36:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    ab38:	ldr	r3, [r0, #8]
    ab3a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ab3c:	mrs	r2, PRIMASK
		__disable_irq();
    ab40:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ab42:	ldr	r0, [r4, #0]
		if (first) {
    ab44:	cmp	r0, #0
    ab46:	bne.n	ab2a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ab48:	cbnz	r2, ab4c <EventResponder::runFromInterrupt()+0x34>
    ab4a:	cpsie	i
    ab4c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ab4e:	str	r3, [r6, #0]
    ab50:	b.n	ab32 <EventResponder::runFromInterrupt()+0x1a>
    ab52:	nop
    ab54:	.word	0x1fff1b04
    ab58:	.word	0x1fff1b08

0000ab5c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    ab5c:	b.w	ab18 <EventResponder::runFromInterrupt()>

0000ab60 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    ab60:	ldr	r2, [pc, #8]	; (ab6c <systick_isr+0xc>)
    ab62:	ldr	r3, [r2, #0]
    ab64:	adds	r3, #1
    ab66:	str	r3, [r2, #0]
    ab68:	bx	lr
    ab6a:	nop
    ab6c:	.word	0x1fff19f4

0000ab70 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    ab70:	b.w	9670 <usb_serial_flush_input>

0000ab74 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    ab74:	b.w	9624 <usb_serial_peekchar>

0000ab78 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    ab78:	b.w	95dc <usb_serial_getchar>

0000ab7c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ab7c:	b.w	9654 <usb_serial_available>

0000ab80 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ab80:	b.w	9810 <usb_serial_flush_output>

0000ab84 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ab84:	b.w	97c8 <usb_serial_write_buffer_free>

0000ab88 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ab88:	mov	r0, r1
    ab8a:	mov	r1, r2
    ab8c:	b.w	96a8 <usb_serial_write>

0000ab90 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ab90:	mov	r0, r1
    ab92:	b.w	97b0 <usb_serial_putchar>
    ab96:	nop

0000ab98 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    ab98:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    ab9a:	mov	r6, r1
    ab9c:	cbz	r1, abbc <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    ab9e:	cbz	r2, abc0 <Print::write(unsigned char const*, unsigned int)+0x28>
    aba0:	mov	r7, r0
    aba2:	mov	r4, r2
    aba4:	movs	r5, #0
    aba6:	ldr	r3, [r7, #0]
    aba8:	ldrb.w	r1, [r6], #1
    abac:	ldr	r3, [r3, #0]
    abae:	mov	r0, r7
    abb0:	blx	r3
    abb2:	subs	r4, #1
    abb4:	add	r5, r0
    abb6:	bne.n	aba6 <Print::write(unsigned char const*, unsigned int)+0xe>
    abb8:	mov	r0, r5
    abba:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    abbc:	mov	r0, r1
    abbe:	pop	{r3, r4, r5, r6, r7, pc}
    abc0:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    abc2:	pop	{r3, r4, r5, r6, r7, pc}

0000abc4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    abc4:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    abc6:	ldr	r2, [pc, #24]	; (abe0 <Print::println()+0x1c>)
	return write(buf, 2);
    abc8:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    abca:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    abcc:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    abce:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    abd0:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    abd2:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    abd6:	movs	r2, #2
    abd8:	blx	r3
}
    abda:	add	sp, #12
    abdc:	ldr.w	pc, [sp], #4
    abe0:	.word	0x00010278

0000abe4 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    abe4:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    abe6:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    abe8:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    abea:	ldr	r3, [r3, #4]
    abec:	blx	r3
	return len;
}
    abee:	mov	r0, r4
    abf0:	pop	{r4, pc}
    abf2:	nop

0000abf4 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    abf4:	push	{r1, r2, r3}
    abf6:	push	{lr}
    abf8:	sub	sp, #8
    abfa:	add	r2, sp, #12
    abfc:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    ac00:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    ac02:	bl	ca08 <vdprintf>
#endif
}
    ac06:	add	sp, #8
    ac08:	ldr.w	lr, [sp], #4
    ac0c:	add	sp, #12
    ac0e:	bx	lr

0000ac10 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    ac10:	push	{r4, r5, r6, r7, lr}
    ac12:	mov	r7, r0
    ac14:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    ac16:	cmp	r2, #0
    ac18:	beq.n	ac82 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    ac1a:	cmp	r2, #1
    ac1c:	it	eq
    ac1e:	moveq	r2, #10
	}


	if (n == 0) {
    ac20:	cbz	r1, ac78 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    ac22:	movs	r4, #33	; 0x21
    ac24:	b.n	ac28 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    ac26:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    ac28:	udiv	r5, r1, r2
    ac2c:	mls	r1, r2, r5, r1
    ac30:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ac32:	cmp	r1, #9
    ac34:	add.w	r1, r0, #48	; 0x30
    ac38:	it	ls
    ac3a:	uxtbls	r0, r1
    ac3c:	add	r1, sp, #40	; 0x28
    ac3e:	it	hi
    ac40:	addhi	r0, #55	; 0x37
    ac42:	add	r1, r4
    ac44:	it	hi
    ac46:	uxtbhi	r0, r0
    ac48:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    ac4c:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    ac4e:	mov	r1, r5
    ac50:	cmp	r5, #0
    ac52:	bne.n	ac26 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    ac54:	cbz	r3, ac64 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    ac56:	subs	r4, #1
    ac58:	uxtb	r4, r4
		buf[i] = '-';
    ac5a:	add	r3, sp, #40	; 0x28
    ac5c:	add	r3, r4
    ac5e:	movs	r2, #45	; 0x2d
    ac60:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    ac64:	ldr	r3, [r7, #0]
    ac66:	add	r2, sp, #4
    ac68:	adds	r1, r2, r4
    ac6a:	ldr	r3, [r3, #4]
    ac6c:	mov	r0, r7
    ac6e:	rsb	r2, r4, #34	; 0x22
    ac72:	blx	r3
}
    ac74:	add	sp, #44	; 0x2c
    ac76:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    ac78:	movs	r2, #48	; 0x30
    ac7a:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    ac7e:	movs	r4, #33	; 0x21
    ac80:	b.n	ac54 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    ac82:	ldr	r3, [r0, #0]
    ac84:	uxtb	r1, r1
    ac86:	ldr	r3, [r3, #0]
    ac88:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    ac8a:	add	sp, #44	; 0x2c
    ac8c:	pop	{r4, r5, r6, r7, pc}
    ac8e:	nop

0000ac90 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    ac90:	cmp	r1, #0
		sign = '-';
		n = -n;
    ac92:	itte	lt
    ac94:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    ac96:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    ac98:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    ac9a:	movs	r2, #10
    ac9c:	b.w	ac10 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000aca0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    aca0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    aca2:	bl	680 <setup>
	while (1) {
		loop();
    aca6:	bl	70c <loop>
		yield();
    acaa:	bl	aa2c <yield>
    acae:	b.n	aca6 <main+0x6>

0000acb0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    acb0:	bx	lr
    acb2:	nop

0000acb4 <operator new(unsigned int)>:
    acb4:	b.w	bb10 <malloc>

0000acb8 <operator delete(void*, unsigned int)>:
    acb8:	b.w	bb20 <free>

0000acbc <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    acbc:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    acbe:	ldr	r0, [pc, #164]	; (ad64 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    acc0:	ldr	r2, [pc, #164]	; (ad68 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    acc2:	ldr	r3, [pc, #168]	; (ad6c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    acc4:	ldr	r5, [pc, #168]	; (ad70 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    acc6:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    acc8:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    acca:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    accc:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    acce:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    acd0:	ldr	r4, [pc, #160]	; (ad74 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    acd2:	cmp	r3, #8
    acd4:	beq.n	ad38 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    acd6:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    acd8:	ldr	r0, [pc, #156]	; (ad78 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    acda:	ldr	r1, [pc, #160]	; (ad7c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    acdc:	beq.n	ad4e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    acde:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    ace0:	ite	eq
    ace2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    ace4:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    ace6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    ace8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    acea:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    acec:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    acee:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    acf0:	ldr	r3, [pc, #140]	; (ad80 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    acf2:	ldr	r1, [pc, #144]	; (ad84 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    acf4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    acf6:	ldr	r2, [pc, #144]	; (ad88 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    acf8:	cbz	r3, ad2a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    acfa:	movs	r3, #1
    acfc:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    acfe:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    ad00:	ldr	r3, [pc, #136]	; (ad8c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    ad02:	ldr	r1, [pc, #140]	; (ad90 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    ad04:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    ad06:	ldr	r2, [pc, #140]	; (ad94 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    ad08:	cmp	r3, #1
    ad0a:	bls.n	ad5a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    ad0c:	cmp	r3, #4
    ad0e:	bls.n	ad30 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    ad10:	cmp	r3, #8
    ad12:	bls.n	ad52 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    ad14:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    ad16:	ite	ls
    ad18:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    ad1a:	movhi	r3, #135	; 0x87
    ad1c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    ad1e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    ad20:	ldr	r3, [pc, #116]	; (ad98 <analog_init+0xdc>)
    ad22:	movs	r2, #1
    ad24:	strb	r2, [r3, #0]
}
    ad26:	pop	{r4, r5}
    ad28:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    ad2a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    ad2c:	str	r3, [r2, #0]
    ad2e:	b.n	ad00 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    ad30:	movs	r3, #132	; 0x84
    ad32:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    ad34:	str	r3, [r2, #0]
    ad36:	b.n	ad20 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ad38:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ad3c:	ldr	r1, [pc, #60]	; (ad7c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ad3e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ad40:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ad42:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ad44:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ad46:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ad48:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ad4a:	str	r3, [r1, #0]
    ad4c:	b.n	acf0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ad4e:	movs	r2, #57	; 0x39
    ad50:	b.n	ad42 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    ad52:	movs	r3, #133	; 0x85
    ad54:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    ad56:	str	r3, [r2, #0]
    ad58:	b.n	ad20 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    ad5a:	movs	r3, #128	; 0x80
    ad5c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    ad5e:	str	r3, [r2, #0]
    ad60:	b.n	ad20 <analog_init+0x64>
    ad62:	nop
    ad64:	.word	0x40074000
    ad68:	.word	0x40074001
    ad6c:	.word	0x1fff099d
    ad70:	.word	0x4003b008
    ad74:	.word	0x4003b00c
    ad78:	.word	0x400bb008
    ad7c:	.word	0x400bb00c
    ad80:	.word	0x1fff1b32
    ad84:	.word	0x4003b020
    ad88:	.word	0x400bb020
    ad8c:	.word	0x1fff099e
    ad90:	.word	0x4003b024
    ad94:	.word	0x400bb024
    ad98:	.word	0x1fff1b31

0000ad9c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    ad9c:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ad9e:	ldr	r2, [pc, #96]	; (ae00 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ada0:	ldr	r3, [pc, #96]	; (ae04 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ada2:	ldr	r1, [pc, #100]	; (ae08 <usb_init_serialnumber+0x6c>)
    ada4:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ada6:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ada8:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    adaa:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    adac:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    adae:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    adb0:	ldrb	r3, [r2, #0]
    adb2:	lsls	r3, r3, #24
    adb4:	bpl.n	adb0 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    adb6:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    adb8:	ldr	r3, [pc, #80]	; (ae0c <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    adba:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    adbc:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    adbe:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    adc0:	ldr	r3, [pc, #76]	; (ae10 <usb_init_serialnumber+0x74>)
    adc2:	ldr	r4, [pc, #80]	; (ae14 <usb_init_serialnumber+0x78>)
    adc4:	cmp	r0, r3
    adc6:	it	ls
    adc8:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    adcc:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    adce:	it	ls
    add0:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    add2:	movs	r2, #10
    add4:	bl	ae18 <ultoa>
    add8:	add	r1, sp, #4
    adda:	mov	r0, r4
	for (i=0; i<10; i++) {
    addc:	movs	r3, #0
		char c = buf[i];
    adde:	ldrb.w	r2, [r1], #1
    ade2:	adds	r3, #1
		if (!c) break;
    ade4:	cbz	r2, adf6 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    ade6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    ade8:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    adec:	bne.n	adde <usb_init_serialnumber+0x42>
    adee:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    adf0:	strb	r3, [r4, #0]
}
    adf2:	add	sp, #16
    adf4:	pop	{r4, pc}
    adf6:	lsls	r3, r3, #1
    adf8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    adfa:	strb	r3, [r4, #0]
}
    adfc:	add	sp, #16
    adfe:	pop	{r4, pc}
    ae00:	.word	0x40020004
    ae04:	.word	0x40020000
    ae08:	.word	0x41070000
    ae0c:	.word	0x4002000c
    ae10:	.word	0x0098967f
    ae14:	.word	0x1fff0a74

0000ae18 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    ae18:	push	{r4, r5, r6, r7}
    ae1a:	subs	r5, r1, #1
    ae1c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    ae1e:	movs	r4, #0
    ae20:	b.n	ae24 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    ae22:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    ae24:	udiv	r3, r0, r2
    ae28:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ae2c:	cmp	r0, #9
    ae2e:	add.w	r7, r0, #48	; 0x30
    ae32:	itet	hi
    ae34:	addhi	r0, #55	; 0x37
    ae36:	uxtbls	r0, r7
    ae38:	uxtbhi	r0, r0
    ae3a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    ae3e:	mov	r0, r3
    ae40:	cmp	r3, #0
    ae42:	bne.n	ae22 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    ae44:	adds	r2, r1, r4
    ae46:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    ae48:	cbz	r4, ae5e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    ae4a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    ae4c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    ae50:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ae52:	adds	r3, #1
    ae54:	subs	r0, r4, r3
    ae56:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    ae58:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ae5c:	blt.n	ae4a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    ae5e:	mov	r0, r1
    ae60:	pop	{r4, r5, r6, r7}
    ae62:	bx	lr

0000ae64 <__aeabi_atexit>:
    ae64:	mov	r3, r1
    ae66:	mov	r1, r0
    ae68:	mov	r0, r3
    ae6a:	b.w	baa8 <__cxa_atexit>
    ae6e:	nop

0000ae70 <__aeabi_drsub>:
    ae70:	eor.w	r1, r1, #2147483648	; 0x80000000
    ae74:	b.n	ae7c <__adddf3>
    ae76:	nop

0000ae78 <__aeabi_dsub>:
    ae78:	eor.w	r3, r3, #2147483648	; 0x80000000

0000ae7c <__adddf3>:
    ae7c:	push	{r4, r5, lr}
    ae7e:	mov.w	r4, r1, lsl #1
    ae82:	mov.w	r5, r3, lsl #1
    ae86:	teq	r4, r5
    ae8a:	it	eq
    ae8c:	teqeq	r0, r2
    ae90:	itttt	ne
    ae92:	orrsne.w	ip, r4, r0
    ae96:	orrsne.w	ip, r5, r2
    ae9a:	mvnsne.w	ip, r4, asr #21
    ae9e:	mvnsne.w	ip, r5, asr #21
    aea2:	beq.w	b06a <__adddf3+0x1ee>
    aea6:	mov.w	r4, r4, lsr #21
    aeaa:	rsbs	r5, r4, r5, lsr #21
    aeae:	it	lt
    aeb0:	neglt	r5, r5
    aeb2:	ble.n	aece <__adddf3+0x52>
    aeb4:	add	r4, r5
    aeb6:	eor.w	r2, r0, r2
    aeba:	eor.w	r3, r1, r3
    aebe:	eor.w	r0, r2, r0
    aec2:	eor.w	r1, r3, r1
    aec6:	eor.w	r2, r0, r2
    aeca:	eor.w	r3, r1, r3
    aece:	cmp	r5, #54	; 0x36
    aed0:	it	hi
    aed2:	pophi	{r4, r5, pc}
    aed4:	tst.w	r1, #2147483648	; 0x80000000
    aed8:	mov.w	r1, r1, lsl #12
    aedc:	mov.w	ip, #1048576	; 0x100000
    aee0:	orr.w	r1, ip, r1, lsr #12
    aee4:	beq.n	aeec <__adddf3+0x70>
    aee6:	negs	r0, r0
    aee8:	sbc.w	r1, r1, r1, lsl #1
    aeec:	tst.w	r3, #2147483648	; 0x80000000
    aef0:	mov.w	r3, r3, lsl #12
    aef4:	orr.w	r3, ip, r3, lsr #12
    aef8:	beq.n	af00 <__adddf3+0x84>
    aefa:	negs	r2, r2
    aefc:	sbc.w	r3, r3, r3, lsl #1
    af00:	teq	r4, r5
    af04:	beq.w	b056 <__adddf3+0x1da>
    af08:	sub.w	r4, r4, #1
    af0c:	rsbs	lr, r5, #32
    af10:	blt.n	af2e <__adddf3+0xb2>
    af12:	lsl.w	ip, r2, lr
    af16:	lsr.w	r2, r2, r5
    af1a:	adds	r0, r0, r2
    af1c:	adc.w	r1, r1, #0
    af20:	lsl.w	r2, r3, lr
    af24:	adds	r0, r0, r2
    af26:	asr.w	r3, r3, r5
    af2a:	adcs	r1, r3
    af2c:	b.n	af4c <__adddf3+0xd0>
    af2e:	sub.w	r5, r5, #32
    af32:	add.w	lr, lr, #32
    af36:	cmp	r2, #1
    af38:	lsl.w	ip, r3, lr
    af3c:	it	cs
    af3e:	orrcs.w	ip, ip, #2
    af42:	asr.w	r3, r3, r5
    af46:	adds	r0, r0, r3
    af48:	adcs.w	r1, r1, r3, asr #31
    af4c:	and.w	r5, r1, #2147483648	; 0x80000000
    af50:	bpl.n	af62 <__adddf3+0xe6>
    af52:	mov.w	lr, #0
    af56:	rsbs	ip, ip, #0
    af5a:	sbcs.w	r0, lr, r0
    af5e:	sbc.w	r1, lr, r1
    af62:	cmp.w	r1, #1048576	; 0x100000
    af66:	bcc.n	afa0 <__adddf3+0x124>
    af68:	cmp.w	r1, #2097152	; 0x200000
    af6c:	bcc.n	af88 <__adddf3+0x10c>
    af6e:	lsrs	r1, r1, #1
    af70:	movs.w	r0, r0, rrx
    af74:	mov.w	ip, ip, rrx
    af78:	add.w	r4, r4, #1
    af7c:	mov.w	r2, r4, lsl #21
    af80:	cmn.w	r2, #4194304	; 0x400000
    af84:	bcs.w	b0bc <__adddf3+0x240>
    af88:	cmp.w	ip, #2147483648	; 0x80000000
    af8c:	it	eq
    af8e:	movseq.w	ip, r0, lsr #1
    af92:	adcs.w	r0, r0, #0
    af96:	adc.w	r1, r1, r4, lsl #20
    af9a:	orr.w	r1, r1, r5
    af9e:	pop	{r4, r5, pc}
    afa0:	movs.w	ip, ip, lsl #1
    afa4:	adcs	r0, r0
    afa6:	adc.w	r1, r1, r1
    afaa:	tst.w	r1, #1048576	; 0x100000
    afae:	sub.w	r4, r4, #1
    afb2:	bne.n	af88 <__adddf3+0x10c>
    afb4:	teq	r1, #0
    afb8:	itt	eq
    afba:	moveq	r1, r0
    afbc:	moveq	r0, #0
    afbe:	clz	r3, r1
    afc2:	it	eq
    afc4:	addeq	r3, #32
    afc6:	sub.w	r3, r3, #11
    afca:	subs.w	r2, r3, #32
    afce:	bge.n	afea <__adddf3+0x16e>
    afd0:	adds	r2, #12
    afd2:	ble.n	afe6 <__adddf3+0x16a>
    afd4:	add.w	ip, r2, #20
    afd8:	rsb	r2, r2, #12
    afdc:	lsl.w	r0, r1, ip
    afe0:	lsr.w	r1, r1, r2
    afe4:	b.n	b000 <__adddf3+0x184>
    afe6:	add.w	r2, r2, #20
    afea:	it	le
    afec:	rsble	ip, r2, #32
    aff0:	lsl.w	r1, r1, r2
    aff4:	lsr.w	ip, r0, ip
    aff8:	itt	le
    affa:	orrle.w	r1, r1, ip
    affe:	lslle	r0, r2
    b000:	subs	r4, r4, r3
    b002:	ittt	ge
    b004:	addge.w	r1, r1, r4, lsl #20
    b008:	orrge	r1, r5
    b00a:	popge	{r4, r5, pc}
    b00c:	mvn.w	r4, r4
    b010:	subs	r4, #31
    b012:	bge.n	b04e <__adddf3+0x1d2>
    b014:	adds	r4, #12
    b016:	bgt.n	b036 <__adddf3+0x1ba>
    b018:	add.w	r4, r4, #20
    b01c:	rsb	r2, r4, #32
    b020:	lsr.w	r0, r0, r4
    b024:	lsl.w	r3, r1, r2
    b028:	orr.w	r0, r0, r3
    b02c:	lsr.w	r3, r1, r4
    b030:	orr.w	r1, r5, r3
    b034:	pop	{r4, r5, pc}
    b036:	rsb	r4, r4, #12
    b03a:	rsb	r2, r4, #32
    b03e:	lsr.w	r0, r0, r2
    b042:	lsl.w	r3, r1, r4
    b046:	orr.w	r0, r0, r3
    b04a:	mov	r1, r5
    b04c:	pop	{r4, r5, pc}
    b04e:	lsr.w	r0, r1, r4
    b052:	mov	r1, r5
    b054:	pop	{r4, r5, pc}
    b056:	teq	r4, #0
    b05a:	eor.w	r3, r3, #1048576	; 0x100000
    b05e:	itte	eq
    b060:	eoreq.w	r1, r1, #1048576	; 0x100000
    b064:	addeq	r4, #1
    b066:	subne	r5, #1
    b068:	b.n	af08 <__adddf3+0x8c>
    b06a:	mvns.w	ip, r4, asr #21
    b06e:	it	ne
    b070:	mvnsne.w	ip, r5, asr #21
    b074:	beq.n	b0ca <__adddf3+0x24e>
    b076:	teq	r4, r5
    b07a:	it	eq
    b07c:	teqeq	r0, r2
    b080:	beq.n	b08e <__adddf3+0x212>
    b082:	orrs.w	ip, r4, r0
    b086:	itt	eq
    b088:	moveq	r1, r3
    b08a:	moveq	r0, r2
    b08c:	pop	{r4, r5, pc}
    b08e:	teq	r1, r3
    b092:	ittt	ne
    b094:	movne	r1, #0
    b096:	movne	r0, #0
    b098:	popne	{r4, r5, pc}
    b09a:	movs.w	ip, r4, lsr #21
    b09e:	bne.n	b0ac <__adddf3+0x230>
    b0a0:	lsls	r0, r0, #1
    b0a2:	adcs	r1, r1
    b0a4:	it	cs
    b0a6:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b0aa:	pop	{r4, r5, pc}
    b0ac:	adds.w	r4, r4, #4194304	; 0x400000
    b0b0:	itt	cc
    b0b2:	addcc.w	r1, r1, #1048576	; 0x100000
    b0b6:	popcc	{r4, r5, pc}
    b0b8:	and.w	r5, r1, #2147483648	; 0x80000000
    b0bc:	orr.w	r1, r5, #2130706432	; 0x7f000000
    b0c0:	orr.w	r1, r1, #15728640	; 0xf00000
    b0c4:	mov.w	r0, #0
    b0c8:	pop	{r4, r5, pc}
    b0ca:	mvns.w	ip, r4, asr #21
    b0ce:	itte	ne
    b0d0:	movne	r1, r3
    b0d2:	movne	r0, r2
    b0d4:	mvnseq.w	ip, r5, asr #21
    b0d8:	itt	ne
    b0da:	movne	r3, r1
    b0dc:	movne	r2, r0
    b0de:	orrs.w	r4, r0, r1, lsl #12
    b0e2:	itte	eq
    b0e4:	orrseq.w	r5, r2, r3, lsl #12
    b0e8:	teqeq	r1, r3
    b0ec:	orrne.w	r1, r1, #524288	; 0x80000
    b0f0:	pop	{r4, r5, pc}
    b0f2:	nop

0000b0f4 <__aeabi_ui2d>:
    b0f4:	teq	r0, #0
    b0f8:	itt	eq
    b0fa:	moveq	r1, #0
    b0fc:	bxeq	lr
    b0fe:	push	{r4, r5, lr}
    b100:	mov.w	r4, #1024	; 0x400
    b104:	add.w	r4, r4, #50	; 0x32
    b108:	mov.w	r5, #0
    b10c:	mov.w	r1, #0
    b110:	b.n	afb4 <__adddf3+0x138>
    b112:	nop

0000b114 <__aeabi_i2d>:
    b114:	teq	r0, #0
    b118:	itt	eq
    b11a:	moveq	r1, #0
    b11c:	bxeq	lr
    b11e:	push	{r4, r5, lr}
    b120:	mov.w	r4, #1024	; 0x400
    b124:	add.w	r4, r4, #50	; 0x32
    b128:	ands.w	r5, r0, #2147483648	; 0x80000000
    b12c:	it	mi
    b12e:	negmi	r0, r0
    b130:	mov.w	r1, #0
    b134:	b.n	afb4 <__adddf3+0x138>
    b136:	nop

0000b138 <__aeabi_f2d>:
    b138:	lsls	r2, r0, #1
    b13a:	mov.w	r1, r2, asr #3
    b13e:	mov.w	r1, r1, rrx
    b142:	mov.w	r0, r2, lsl #28
    b146:	itttt	ne
    b148:	andsne.w	r3, r2, #4278190080	; 0xff000000
    b14c:	teqne	r3, #4278190080	; 0xff000000
    b150:	eorne.w	r1, r1, #939524096	; 0x38000000
    b154:	bxne	lr
    b156:	teq	r2, #0
    b15a:	ite	ne
    b15c:	teqne	r3, #4278190080	; 0xff000000
    b160:	bxeq	lr
    b162:	push	{r4, r5, lr}
    b164:	mov.w	r4, #896	; 0x380
    b168:	and.w	r5, r1, #2147483648	; 0x80000000
    b16c:	bic.w	r1, r1, #2147483648	; 0x80000000
    b170:	b.n	afb4 <__adddf3+0x138>
    b172:	nop

0000b174 <__aeabi_ul2d>:
    b174:	orrs.w	r2, r0, r1
    b178:	it	eq
    b17a:	bxeq	lr
    b17c:	push	{r4, r5, lr}
    b17e:	mov.w	r5, #0
    b182:	b.n	b19a <__aeabi_l2d+0x16>

0000b184 <__aeabi_l2d>:
    b184:	orrs.w	r2, r0, r1
    b188:	it	eq
    b18a:	bxeq	lr
    b18c:	push	{r4, r5, lr}
    b18e:	ands.w	r5, r1, #2147483648	; 0x80000000
    b192:	bpl.n	b19a <__aeabi_l2d+0x16>
    b194:	negs	r0, r0
    b196:	sbc.w	r1, r1, r1, lsl #1
    b19a:	mov.w	r4, #1024	; 0x400
    b19e:	add.w	r4, r4, #50	; 0x32
    b1a2:	movs.w	ip, r1, lsr #22
    b1a6:	beq.w	af62 <__adddf3+0xe6>
    b1aa:	mov.w	r2, #3
    b1ae:	movs.w	ip, ip, lsr #3
    b1b2:	it	ne
    b1b4:	addne	r2, #3
    b1b6:	movs.w	ip, ip, lsr #3
    b1ba:	it	ne
    b1bc:	addne	r2, #3
    b1be:	add.w	r2, r2, ip, lsr #3
    b1c2:	rsb	r3, r2, #32
    b1c6:	lsl.w	ip, r0, r3
    b1ca:	lsr.w	r0, r0, r2
    b1ce:	lsl.w	lr, r1, r3
    b1d2:	orr.w	r0, r0, lr
    b1d6:	lsr.w	r1, r1, r2
    b1da:	add	r4, r2
    b1dc:	b.n	af62 <__adddf3+0xe6>
    b1de:	nop

0000b1e0 <__aeabi_dmul>:
    b1e0:	push	{r4, r5, r6, lr}
    b1e2:	mov.w	ip, #255	; 0xff
    b1e6:	orr.w	ip, ip, #1792	; 0x700
    b1ea:	ands.w	r4, ip, r1, lsr #20
    b1ee:	ittte	ne
    b1f0:	andsne.w	r5, ip, r3, lsr #20
    b1f4:	teqne	r4, ip
    b1f8:	teqne	r5, ip
    b1fc:	bleq	b3bc <__aeabi_dmul+0x1dc>
    b200:	add	r4, r5
    b202:	eor.w	r6, r1, r3
    b206:	bic.w	r1, r1, ip, lsl #21
    b20a:	bic.w	r3, r3, ip, lsl #21
    b20e:	orrs.w	r5, r0, r1, lsl #12
    b212:	it	ne
    b214:	orrsne.w	r5, r2, r3, lsl #12
    b218:	orr.w	r1, r1, #1048576	; 0x100000
    b21c:	orr.w	r3, r3, #1048576	; 0x100000
    b220:	beq.n	b294 <__aeabi_dmul+0xb4>
    b222:	umull	ip, lr, r0, r2
    b226:	mov.w	r5, #0
    b22a:	umlal	lr, r5, r1, r2
    b22e:	and.w	r2, r6, #2147483648	; 0x80000000
    b232:	umlal	lr, r5, r0, r3
    b236:	mov.w	r6, #0
    b23a:	umlal	r5, r6, r1, r3
    b23e:	teq	ip, #0
    b242:	it	ne
    b244:	orrne.w	lr, lr, #1
    b248:	sub.w	r4, r4, #255	; 0xff
    b24c:	cmp.w	r6, #512	; 0x200
    b250:	sbc.w	r4, r4, #768	; 0x300
    b254:	bcs.n	b260 <__aeabi_dmul+0x80>
    b256:	movs.w	lr, lr, lsl #1
    b25a:	adcs	r5, r5
    b25c:	adc.w	r6, r6, r6
    b260:	orr.w	r1, r2, r6, lsl #11
    b264:	orr.w	r1, r1, r5, lsr #21
    b268:	mov.w	r0, r5, lsl #11
    b26c:	orr.w	r0, r0, lr, lsr #21
    b270:	mov.w	lr, lr, lsl #11
    b274:	subs.w	ip, r4, #253	; 0xfd
    b278:	it	hi
    b27a:	cmphi.w	ip, #1792	; 0x700
    b27e:	bhi.n	b2be <__aeabi_dmul+0xde>
    b280:	cmp.w	lr, #2147483648	; 0x80000000
    b284:	it	eq
    b286:	movseq.w	lr, r0, lsr #1
    b28a:	adcs.w	r0, r0, #0
    b28e:	adc.w	r1, r1, r4, lsl #20
    b292:	pop	{r4, r5, r6, pc}
    b294:	and.w	r6, r6, #2147483648	; 0x80000000
    b298:	orr.w	r1, r6, r1
    b29c:	orr.w	r0, r0, r2
    b2a0:	eor.w	r1, r1, r3
    b2a4:	subs.w	r4, r4, ip, lsr #1
    b2a8:	ittt	gt
    b2aa:	rsbsgt	r5, r4, ip
    b2ae:	orrgt.w	r1, r1, r4, lsl #20
    b2b2:	popgt	{r4, r5, r6, pc}
    b2b4:	orr.w	r1, r1, #1048576	; 0x100000
    b2b8:	mov.w	lr, #0
    b2bc:	subs	r4, #1
    b2be:	bgt.w	b418 <__aeabi_dmul+0x238>
    b2c2:	cmn.w	r4, #54	; 0x36
    b2c6:	ittt	le
    b2c8:	movle	r0, #0
    b2ca:	andle.w	r1, r1, #2147483648	; 0x80000000
    b2ce:	pople	{r4, r5, r6, pc}
    b2d0:	rsb	r4, r4, #0
    b2d4:	subs	r4, #32
    b2d6:	bge.n	b344 <__aeabi_dmul+0x164>
    b2d8:	adds	r4, #12
    b2da:	bgt.n	b314 <__aeabi_dmul+0x134>
    b2dc:	add.w	r4, r4, #20
    b2e0:	rsb	r5, r4, #32
    b2e4:	lsl.w	r3, r0, r5
    b2e8:	lsr.w	r0, r0, r4
    b2ec:	lsl.w	r2, r1, r5
    b2f0:	orr.w	r0, r0, r2
    b2f4:	and.w	r2, r1, #2147483648	; 0x80000000
    b2f8:	bic.w	r1, r1, #2147483648	; 0x80000000
    b2fc:	adds.w	r0, r0, r3, lsr #31
    b300:	lsr.w	r6, r1, r4
    b304:	adc.w	r1, r2, r6
    b308:	orrs.w	lr, lr, r3, lsl #1
    b30c:	it	eq
    b30e:	biceq.w	r0, r0, r3, lsr #31
    b312:	pop	{r4, r5, r6, pc}
    b314:	rsb	r4, r4, #12
    b318:	rsb	r5, r4, #32
    b31c:	lsl.w	r3, r0, r4
    b320:	lsr.w	r0, r0, r5
    b324:	lsl.w	r2, r1, r4
    b328:	orr.w	r0, r0, r2
    b32c:	and.w	r1, r1, #2147483648	; 0x80000000
    b330:	adds.w	r0, r0, r3, lsr #31
    b334:	adc.w	r1, r1, #0
    b338:	orrs.w	lr, lr, r3, lsl #1
    b33c:	it	eq
    b33e:	biceq.w	r0, r0, r3, lsr #31
    b342:	pop	{r4, r5, r6, pc}
    b344:	rsb	r5, r4, #32
    b348:	lsl.w	r2, r0, r5
    b34c:	orr.w	lr, lr, r2
    b350:	lsr.w	r3, r0, r4
    b354:	lsl.w	r2, r1, r5
    b358:	orr.w	r3, r3, r2
    b35c:	lsr.w	r0, r1, r4
    b360:	and.w	r1, r1, #2147483648	; 0x80000000
    b364:	lsr.w	r2, r1, r4
    b368:	bic.w	r0, r0, r2
    b36c:	add.w	r0, r0, r3, lsr #31
    b370:	orrs.w	lr, lr, r3, lsl #1
    b374:	it	eq
    b376:	biceq.w	r0, r0, r3, lsr #31
    b37a:	pop	{r4, r5, r6, pc}
    b37c:	teq	r4, #0
    b380:	bne.n	b3a2 <__aeabi_dmul+0x1c2>
    b382:	and.w	r6, r1, #2147483648	; 0x80000000
    b386:	lsls	r0, r0, #1
    b388:	adc.w	r1, r1, r1
    b38c:	tst.w	r1, #1048576	; 0x100000
    b390:	it	eq
    b392:	subeq	r4, #1
    b394:	beq.n	b386 <__aeabi_dmul+0x1a6>
    b396:	orr.w	r1, r1, r6
    b39a:	teq	r5, #0
    b39e:	it	ne
    b3a0:	bxne	lr
    b3a2:	and.w	r6, r3, #2147483648	; 0x80000000
    b3a6:	lsls	r2, r2, #1
    b3a8:	adc.w	r3, r3, r3
    b3ac:	tst.w	r3, #1048576	; 0x100000
    b3b0:	it	eq
    b3b2:	subeq	r5, #1
    b3b4:	beq.n	b3a6 <__aeabi_dmul+0x1c6>
    b3b6:	orr.w	r3, r3, r6
    b3ba:	bx	lr
    b3bc:	teq	r4, ip
    b3c0:	and.w	r5, ip, r3, lsr #20
    b3c4:	it	ne
    b3c6:	teqne	r5, ip
    b3ca:	beq.n	b3e6 <__aeabi_dmul+0x206>
    b3cc:	orrs.w	r6, r0, r1, lsl #1
    b3d0:	it	ne
    b3d2:	orrsne.w	r6, r2, r3, lsl #1
    b3d6:	bne.n	b37c <__aeabi_dmul+0x19c>
    b3d8:	eor.w	r1, r1, r3
    b3dc:	and.w	r1, r1, #2147483648	; 0x80000000
    b3e0:	mov.w	r0, #0
    b3e4:	pop	{r4, r5, r6, pc}
    b3e6:	orrs.w	r6, r0, r1, lsl #1
    b3ea:	itte	eq
    b3ec:	moveq	r0, r2
    b3ee:	moveq	r1, r3
    b3f0:	orrsne.w	r6, r2, r3, lsl #1
    b3f4:	beq.n	b42a <__aeabi_dmul+0x24a>
    b3f6:	teq	r4, ip
    b3fa:	bne.n	b402 <__aeabi_dmul+0x222>
    b3fc:	orrs.w	r6, r0, r1, lsl #12
    b400:	bne.n	b42a <__aeabi_dmul+0x24a>
    b402:	teq	r5, ip
    b406:	bne.n	b414 <__aeabi_dmul+0x234>
    b408:	orrs.w	r6, r2, r3, lsl #12
    b40c:	itt	ne
    b40e:	movne	r0, r2
    b410:	movne	r1, r3
    b412:	bne.n	b42a <__aeabi_dmul+0x24a>
    b414:	eor.w	r1, r1, r3
    b418:	and.w	r1, r1, #2147483648	; 0x80000000
    b41c:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b420:	orr.w	r1, r1, #15728640	; 0xf00000
    b424:	mov.w	r0, #0
    b428:	pop	{r4, r5, r6, pc}
    b42a:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b42e:	orr.w	r1, r1, #16252928	; 0xf80000
    b432:	pop	{r4, r5, r6, pc}

0000b434 <__aeabi_ddiv>:
    b434:	push	{r4, r5, r6, lr}
    b436:	mov.w	ip, #255	; 0xff
    b43a:	orr.w	ip, ip, #1792	; 0x700
    b43e:	ands.w	r4, ip, r1, lsr #20
    b442:	ittte	ne
    b444:	andsne.w	r5, ip, r3, lsr #20
    b448:	teqne	r4, ip
    b44c:	teqne	r5, ip
    b450:	bleq	b5a2 <__aeabi_ddiv+0x16e>
    b454:	sub.w	r4, r4, r5
    b458:	eor.w	lr, r1, r3
    b45c:	orrs.w	r5, r2, r3, lsl #12
    b460:	mov.w	r1, r1, lsl #12
    b464:	beq.w	b578 <__aeabi_ddiv+0x144>
    b468:	mov.w	r3, r3, lsl #12
    b46c:	mov.w	r5, #268435456	; 0x10000000
    b470:	orr.w	r3, r5, r3, lsr #4
    b474:	orr.w	r3, r3, r2, lsr #24
    b478:	mov.w	r2, r2, lsl #8
    b47c:	orr.w	r5, r5, r1, lsr #4
    b480:	orr.w	r5, r5, r0, lsr #24
    b484:	mov.w	r6, r0, lsl #8
    b488:	and.w	r1, lr, #2147483648	; 0x80000000
    b48c:	cmp	r5, r3
    b48e:	it	eq
    b490:	cmpeq	r6, r2
    b492:	adc.w	r4, r4, #253	; 0xfd
    b496:	add.w	r4, r4, #768	; 0x300
    b49a:	bcs.n	b4a2 <__aeabi_ddiv+0x6e>
    b49c:	lsrs	r3, r3, #1
    b49e:	mov.w	r2, r2, rrx
    b4a2:	subs	r6, r6, r2
    b4a4:	sbc.w	r5, r5, r3
    b4a8:	lsrs	r3, r3, #1
    b4aa:	mov.w	r2, r2, rrx
    b4ae:	mov.w	r0, #1048576	; 0x100000
    b4b2:	mov.w	ip, #524288	; 0x80000
    b4b6:	subs.w	lr, r6, r2
    b4ba:	sbcs.w	lr, r5, r3
    b4be:	ittt	cs
    b4c0:	subcs	r6, r6, r2
    b4c2:	movcs	r5, lr
    b4c4:	orrcs.w	r0, r0, ip
    b4c8:	lsrs	r3, r3, #1
    b4ca:	mov.w	r2, r2, rrx
    b4ce:	subs.w	lr, r6, r2
    b4d2:	sbcs.w	lr, r5, r3
    b4d6:	ittt	cs
    b4d8:	subcs	r6, r6, r2
    b4da:	movcs	r5, lr
    b4dc:	orrcs.w	r0, r0, ip, lsr #1
    b4e0:	lsrs	r3, r3, #1
    b4e2:	mov.w	r2, r2, rrx
    b4e6:	subs.w	lr, r6, r2
    b4ea:	sbcs.w	lr, r5, r3
    b4ee:	ittt	cs
    b4f0:	subcs	r6, r6, r2
    b4f2:	movcs	r5, lr
    b4f4:	orrcs.w	r0, r0, ip, lsr #2
    b4f8:	lsrs	r3, r3, #1
    b4fa:	mov.w	r2, r2, rrx
    b4fe:	subs.w	lr, r6, r2
    b502:	sbcs.w	lr, r5, r3
    b506:	ittt	cs
    b508:	subcs	r6, r6, r2
    b50a:	movcs	r5, lr
    b50c:	orrcs.w	r0, r0, ip, lsr #3
    b510:	orrs.w	lr, r5, r6
    b514:	beq.n	b548 <__aeabi_ddiv+0x114>
    b516:	mov.w	r5, r5, lsl #4
    b51a:	orr.w	r5, r5, r6, lsr #28
    b51e:	mov.w	r6, r6, lsl #4
    b522:	mov.w	r3, r3, lsl #3
    b526:	orr.w	r3, r3, r2, lsr #29
    b52a:	mov.w	r2, r2, lsl #3
    b52e:	movs.w	ip, ip, lsr #4
    b532:	bne.n	b4b6 <__aeabi_ddiv+0x82>
    b534:	tst.w	r1, #1048576	; 0x100000
    b538:	bne.n	b552 <__aeabi_ddiv+0x11e>
    b53a:	orr.w	r1, r1, r0
    b53e:	mov.w	r0, #0
    b542:	mov.w	ip, #2147483648	; 0x80000000
    b546:	b.n	b4b6 <__aeabi_ddiv+0x82>
    b548:	tst.w	r1, #1048576	; 0x100000
    b54c:	itt	eq
    b54e:	orreq	r1, r0
    b550:	moveq	r0, #0
    b552:	subs.w	ip, r4, #253	; 0xfd
    b556:	it	hi
    b558:	cmphi.w	ip, #1792	; 0x700
    b55c:	bhi.w	b2be <__aeabi_dmul+0xde>
    b560:	subs.w	ip, r5, r3
    b564:	itt	eq
    b566:	subseq.w	ip, r6, r2
    b56a:	movseq.w	ip, r0, lsr #1
    b56e:	adcs.w	r0, r0, #0
    b572:	adc.w	r1, r1, r4, lsl #20
    b576:	pop	{r4, r5, r6, pc}
    b578:	and.w	lr, lr, #2147483648	; 0x80000000
    b57c:	orr.w	r1, lr, r1, lsr #12
    b580:	adds.w	r4, r4, ip, lsr #1
    b584:	ittt	gt
    b586:	rsbsgt	r5, r4, ip
    b58a:	orrgt.w	r1, r1, r4, lsl #20
    b58e:	popgt	{r4, r5, r6, pc}
    b590:	orr.w	r1, r1, #1048576	; 0x100000
    b594:	mov.w	lr, #0
    b598:	subs	r4, #1
    b59a:	b.n	b2be <__aeabi_dmul+0xde>
    b59c:	orr.w	lr, r5, r6
    b5a0:	b.n	b2be <__aeabi_dmul+0xde>
    b5a2:	and.w	r5, ip, r3, lsr #20
    b5a6:	teq	r4, ip
    b5aa:	it	eq
    b5ac:	teqeq	r5, ip
    b5b0:	beq.w	b42a <__aeabi_dmul+0x24a>
    b5b4:	teq	r4, ip
    b5b8:	bne.n	b5d0 <__aeabi_ddiv+0x19c>
    b5ba:	orrs.w	r4, r0, r1, lsl #12
    b5be:	bne.w	b42a <__aeabi_dmul+0x24a>
    b5c2:	teq	r5, ip
    b5c6:	bne.w	b414 <__aeabi_dmul+0x234>
    b5ca:	mov	r0, r2
    b5cc:	mov	r1, r3
    b5ce:	b.n	b42a <__aeabi_dmul+0x24a>
    b5d0:	teq	r5, ip
    b5d4:	bne.n	b5e4 <__aeabi_ddiv+0x1b0>
    b5d6:	orrs.w	r5, r2, r3, lsl #12
    b5da:	beq.w	b3d8 <__aeabi_dmul+0x1f8>
    b5de:	mov	r0, r2
    b5e0:	mov	r1, r3
    b5e2:	b.n	b42a <__aeabi_dmul+0x24a>
    b5e4:	orrs.w	r6, r0, r1, lsl #1
    b5e8:	it	ne
    b5ea:	orrsne.w	r6, r2, r3, lsl #1
    b5ee:	bne.w	b37c <__aeabi_dmul+0x19c>
    b5f2:	orrs.w	r4, r0, r1, lsl #1
    b5f6:	bne.w	b414 <__aeabi_dmul+0x234>
    b5fa:	orrs.w	r5, r2, r3, lsl #1
    b5fe:	bne.w	b3d8 <__aeabi_dmul+0x1f8>
    b602:	b.n	b42a <__aeabi_dmul+0x24a>

0000b604 <__gedf2>:
    b604:	mov.w	ip, #4294967295
    b608:	b.n	b618 <__cmpdf2+0x4>
    b60a:	nop

0000b60c <__ledf2>:
    b60c:	mov.w	ip, #1
    b610:	b.n	b618 <__cmpdf2+0x4>
    b612:	nop

0000b614 <__cmpdf2>:
    b614:	mov.w	ip, #1
    b618:	str.w	ip, [sp, #-4]!
    b61c:	mov.w	ip, r1, lsl #1
    b620:	mvns.w	ip, ip, asr #21
    b624:	mov.w	ip, r3, lsl #1
    b628:	it	ne
    b62a:	mvnsne.w	ip, ip, asr #21
    b62e:	beq.n	b668 <__cmpdf2+0x54>
    b630:	add	sp, #4
    b632:	orrs.w	ip, r0, r1, lsl #1
    b636:	ite	eq
    b638:	orrseq.w	ip, r2, r3, lsl #1
    b63c:	teqne	r1, r3
    b640:	ittt	eq
    b642:	teqeq	r0, r2
    b646:	moveq	r0, #0
    b648:	bxeq	lr
    b64a:	cmn.w	r0, #0
    b64e:	teq	r1, r3
    b652:	it	pl
    b654:	cmppl	r1, r3
    b656:	it	eq
    b658:	cmpeq	r0, r2
    b65a:	ite	cs
    b65c:	asrcs	r0, r3, #31
    b65e:	mvncc.w	r0, r3, asr #31
    b662:	orr.w	r0, r0, #1
    b666:	bx	lr
    b668:	mov.w	ip, r1, lsl #1
    b66c:	mvns.w	ip, ip, asr #21
    b670:	bne.n	b678 <__cmpdf2+0x64>
    b672:	orrs.w	ip, r0, r1, lsl #12
    b676:	bne.n	b688 <__cmpdf2+0x74>
    b678:	mov.w	ip, r3, lsl #1
    b67c:	mvns.w	ip, ip, asr #21
    b680:	bne.n	b630 <__cmpdf2+0x1c>
    b682:	orrs.w	ip, r2, r3, lsl #12
    b686:	beq.n	b630 <__cmpdf2+0x1c>
    b688:	ldr.w	r0, [sp], #4
    b68c:	bx	lr
    b68e:	nop

0000b690 <__aeabi_cdrcmple>:
    b690:	mov	ip, r0
    b692:	mov	r0, r2
    b694:	mov	r2, ip
    b696:	mov	ip, r1
    b698:	mov	r1, r3
    b69a:	mov	r3, ip
    b69c:	b.n	b6a0 <__aeabi_cdcmpeq>
    b69e:	nop

0000b6a0 <__aeabi_cdcmpeq>:
    b6a0:	push	{r0, lr}
    b6a2:	bl	b614 <__cmpdf2>
    b6a6:	cmp	r0, #0
    b6a8:	it	mi
    b6aa:	cmnmi.w	r0, #0
    b6ae:	pop	{r0, pc}

0000b6b0 <__aeabi_dcmpeq>:
    b6b0:	str.w	lr, [sp, #-8]!
    b6b4:	bl	b6a0 <__aeabi_cdcmpeq>
    b6b8:	ite	eq
    b6ba:	moveq	r0, #1
    b6bc:	movne	r0, #0
    b6be:	ldr.w	pc, [sp], #8
    b6c2:	nop

0000b6c4 <__aeabi_dcmplt>:
    b6c4:	str.w	lr, [sp, #-8]!
    b6c8:	bl	b6a0 <__aeabi_cdcmpeq>
    b6cc:	ite	cc
    b6ce:	movcc	r0, #1
    b6d0:	movcs	r0, #0
    b6d2:	ldr.w	pc, [sp], #8
    b6d6:	nop

0000b6d8 <__aeabi_dcmple>:
    b6d8:	str.w	lr, [sp, #-8]!
    b6dc:	bl	b6a0 <__aeabi_cdcmpeq>
    b6e0:	ite	ls
    b6e2:	movls	r0, #1
    b6e4:	movhi	r0, #0
    b6e6:	ldr.w	pc, [sp], #8
    b6ea:	nop

0000b6ec <__aeabi_dcmpge>:
    b6ec:	str.w	lr, [sp, #-8]!
    b6f0:	bl	b690 <__aeabi_cdrcmple>
    b6f4:	ite	ls
    b6f6:	movls	r0, #1
    b6f8:	movhi	r0, #0
    b6fa:	ldr.w	pc, [sp], #8
    b6fe:	nop

0000b700 <__aeabi_dcmpgt>:
    b700:	str.w	lr, [sp, #-8]!
    b704:	bl	b690 <__aeabi_cdrcmple>
    b708:	ite	cc
    b70a:	movcc	r0, #1
    b70c:	movcs	r0, #0
    b70e:	ldr.w	pc, [sp], #8
    b712:	nop

0000b714 <__aeabi_dcmpun>:
    b714:	mov.w	ip, r1, lsl #1
    b718:	mvns.w	ip, ip, asr #21
    b71c:	bne.n	b724 <__aeabi_dcmpun+0x10>
    b71e:	orrs.w	ip, r0, r1, lsl #12
    b722:	bne.n	b73a <__aeabi_dcmpun+0x26>
    b724:	mov.w	ip, r3, lsl #1
    b728:	mvns.w	ip, ip, asr #21
    b72c:	bne.n	b734 <__aeabi_dcmpun+0x20>
    b72e:	orrs.w	ip, r2, r3, lsl #12
    b732:	bne.n	b73a <__aeabi_dcmpun+0x26>
    b734:	mov.w	r0, #0
    b738:	bx	lr
    b73a:	mov.w	r0, #1
    b73e:	bx	lr

0000b740 <__aeabi_d2iz>:
    b740:	mov.w	r2, r1, lsl #1
    b744:	adds.w	r2, r2, #2097152	; 0x200000
    b748:	bcs.n	b776 <__aeabi_d2iz+0x36>
    b74a:	bpl.n	b770 <__aeabi_d2iz+0x30>
    b74c:	mvn.w	r3, #992	; 0x3e0
    b750:	subs.w	r2, r3, r2, asr #21
    b754:	bls.n	b77c <__aeabi_d2iz+0x3c>
    b756:	mov.w	r3, r1, lsl #11
    b75a:	orr.w	r3, r3, #2147483648	; 0x80000000
    b75e:	orr.w	r3, r3, r0, lsr #21
    b762:	tst.w	r1, #2147483648	; 0x80000000
    b766:	lsr.w	r0, r3, r2
    b76a:	it	ne
    b76c:	negne	r0, r0
    b76e:	bx	lr
    b770:	mov.w	r0, #0
    b774:	bx	lr
    b776:	orrs.w	r0, r0, r1, lsl #12
    b77a:	bne.n	b788 <__aeabi_d2iz+0x48>
    b77c:	ands.w	r0, r1, #2147483648	; 0x80000000
    b780:	it	eq
    b782:	mvneq.w	r0, #2147483648	; 0x80000000
    b786:	bx	lr
    b788:	mov.w	r0, #0
    b78c:	bx	lr
    b78e:	nop

0000b790 <__aeabi_uldivmod>:
    b790:	cbnz	r3, b7a8 <__aeabi_uldivmod+0x18>
    b792:	cbnz	r2, b7a8 <__aeabi_uldivmod+0x18>
    b794:	cmp	r1, #0
    b796:	it	eq
    b798:	cmpeq	r0, #0
    b79a:	itt	ne
    b79c:	movne.w	r1, #4294967295
    b7a0:	movne.w	r0, #4294967295
    b7a4:	b.w	baa4 <__aeabi_idiv0>
    b7a8:	sub.w	ip, sp, #8
    b7ac:	strd	ip, lr, [sp, #-16]!
    b7b0:	bl	b7c0 <__udivmoddi4>
    b7b4:	ldr.w	lr, [sp, #4]
    b7b8:	ldrd	r2, r3, [sp, #8]
    b7bc:	add	sp, #16
    b7be:	bx	lr

0000b7c0 <__udivmoddi4>:
    b7c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7c4:	mov	ip, r1
    b7c6:	mov	r6, r1
    b7c8:	mov	r4, r0
    b7ca:	ldr	r5, [sp, #32]
    b7cc:	cmp	r3, #0
    b7ce:	bne.n	b872 <__udivmoddi4+0xb2>
    b7d0:	cmp	r2, r1
    b7d2:	mov	r7, r2
    b7d4:	bls.n	b8b0 <__udivmoddi4+0xf0>
    b7d6:	clz	lr, r2
    b7da:	cmp.w	lr, #0
    b7de:	beq.n	b7f8 <__udivmoddi4+0x38>
    b7e0:	rsb	r4, lr, #32
    b7e4:	lsr.w	r4, r0, r4
    b7e8:	lsl.w	r6, r1, lr
    b7ec:	orr.w	ip, r4, r6
    b7f0:	lsl.w	r7, r2, lr
    b7f4:	lsl.w	r4, r0, lr
    b7f8:	mov.w	r9, r7, lsr #16
    b7fc:	lsrs	r2, r4, #16
    b7fe:	udiv	r0, ip, r9
    b802:	uxth.w	r8, r7
    b806:	mls	r6, r9, r0, ip
    b80a:	orr.w	r6, r2, r6, lsl #16
    b80e:	mul.w	r3, r0, r8
    b812:	cmp	r3, r6
    b814:	bls.n	b82a <__udivmoddi4+0x6a>
    b816:	adds	r6, r6, r7
    b818:	add.w	r2, r0, #4294967295
    b81c:	bcs.w	ba64 <__udivmoddi4+0x2a4>
    b820:	cmp	r3, r6
    b822:	bls.w	ba64 <__udivmoddi4+0x2a4>
    b826:	subs	r0, #2
    b828:	add	r6, r7
    b82a:	subs	r6, r6, r3
    b82c:	uxth	r2, r4
    b82e:	udiv	r3, r6, r9
    b832:	mls	r6, r9, r3, r6
    b836:	orr.w	r4, r2, r6, lsl #16
    b83a:	mul.w	r8, r3, r8
    b83e:	cmp	r8, r4
    b840:	bls.n	b856 <__udivmoddi4+0x96>
    b842:	adds	r4, r4, r7
    b844:	add.w	r2, r3, #4294967295
    b848:	bcs.w	ba60 <__udivmoddi4+0x2a0>
    b84c:	cmp	r8, r4
    b84e:	bls.w	ba60 <__udivmoddi4+0x2a0>
    b852:	subs	r3, #2
    b854:	add	r4, r7
    b856:	rsb	r4, r8, r4
    b85a:	orr.w	r0, r3, r0, lsl #16
    b85e:	movs	r1, #0
    b860:	cmp	r5, #0
    b862:	beq.n	b92a <__udivmoddi4+0x16a>
    b864:	lsr.w	r4, r4, lr
    b868:	movs	r3, #0
    b86a:	str	r4, [r5, #0]
    b86c:	str	r3, [r5, #4]
    b86e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b872:	cmp	r3, r1
    b874:	bls.n	b886 <__udivmoddi4+0xc6>
    b876:	cmp	r5, #0
    b878:	beq.n	b926 <__udivmoddi4+0x166>
    b87a:	movs	r1, #0
    b87c:	stmia.w	r5, {r0, r6}
    b880:	mov	r0, r1
    b882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b886:	clz	r1, r3
    b88a:	cmp	r1, #0
    b88c:	bne.w	b9b0 <__udivmoddi4+0x1f0>
    b890:	cmp	r3, r6
    b892:	bcc.n	b89a <__udivmoddi4+0xda>
    b894:	cmp	r2, r0
    b896:	bhi.w	ba8a <__udivmoddi4+0x2ca>
    b89a:	subs	r4, r0, r2
    b89c:	sbc.w	r6, r6, r3
    b8a0:	movs	r0, #1
    b8a2:	mov	ip, r6
    b8a4:	cmp	r5, #0
    b8a6:	beq.n	b92a <__udivmoddi4+0x16a>
    b8a8:	stmia.w	r5, {r4, ip}
    b8ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8b0:	cbnz	r2, b8b8 <__udivmoddi4+0xf8>
    b8b2:	movs	r7, #1
    b8b4:	udiv	r7, r7, r2
    b8b8:	clz	lr, r7
    b8bc:	cmp.w	lr, #0
    b8c0:	bne.n	b92e <__udivmoddi4+0x16e>
    b8c2:	subs	r3, r6, r7
    b8c4:	mov.w	r8, r7, lsr #16
    b8c8:	uxth.w	ip, r7
    b8cc:	movs	r1, #1
    b8ce:	udiv	r0, r3, r8
    b8d2:	lsrs	r2, r4, #16
    b8d4:	mls	r6, r8, r0, r3
    b8d8:	orr.w	r6, r2, r6, lsl #16
    b8dc:	mul.w	r3, ip, r0
    b8e0:	cmp	r3, r6
    b8e2:	bls.n	b8f4 <__udivmoddi4+0x134>
    b8e4:	adds	r6, r6, r7
    b8e6:	add.w	r2, r0, #4294967295
    b8ea:	bcs.n	b8f2 <__udivmoddi4+0x132>
    b8ec:	cmp	r3, r6
    b8ee:	bhi.w	ba8e <__udivmoddi4+0x2ce>
    b8f2:	mov	r0, r2
    b8f4:	subs	r6, r6, r3
    b8f6:	uxth	r2, r4
    b8f8:	udiv	r3, r6, r8
    b8fc:	mls	r6, r8, r3, r6
    b900:	orr.w	r4, r2, r6, lsl #16
    b904:	mul.w	ip, ip, r3
    b908:	cmp	ip, r4
    b90a:	bls.n	b91c <__udivmoddi4+0x15c>
    b90c:	adds	r4, r4, r7
    b90e:	add.w	r2, r3, #4294967295
    b912:	bcs.n	b91a <__udivmoddi4+0x15a>
    b914:	cmp	ip, r4
    b916:	bhi.w	ba84 <__udivmoddi4+0x2c4>
    b91a:	mov	r3, r2
    b91c:	rsb	r4, ip, r4
    b920:	orr.w	r0, r3, r0, lsl #16
    b924:	b.n	b860 <__udivmoddi4+0xa0>
    b926:	mov	r1, r5
    b928:	mov	r0, r5
    b92a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b92e:	rsb	r1, lr, #32
    b932:	lsl.w	r3, r6, lr
    b936:	lsl.w	r7, r7, lr
    b93a:	lsr.w	r9, r0, r1
    b93e:	mov.w	r8, r7, lsr #16
    b942:	lsrs	r6, r1
    b944:	orr.w	r9, r9, r3
    b948:	udiv	sl, r6, r8
    b94c:	mov.w	r4, r9, lsr #16
    b950:	mls	r6, r8, sl, r6
    b954:	uxth.w	ip, r7
    b958:	orr.w	r3, r4, r6, lsl #16
    b95c:	mul.w	r2, sl, ip
    b960:	cmp	r2, r3
    b962:	lsl.w	r4, r0, lr
    b966:	bls.n	b97e <__udivmoddi4+0x1be>
    b968:	adds	r3, r3, r7
    b96a:	add.w	r1, sl, #4294967295
    b96e:	bcs.w	ba80 <__udivmoddi4+0x2c0>
    b972:	cmp	r2, r3
    b974:	bls.w	ba80 <__udivmoddi4+0x2c0>
    b978:	sub.w	sl, sl, #2
    b97c:	add	r3, r7
    b97e:	subs	r3, r3, r2
    b980:	uxth.w	r9, r9
    b984:	udiv	r1, r3, r8
    b988:	mls	r3, r8, r1, r3
    b98c:	orr.w	r3, r9, r3, lsl #16
    b990:	mul.w	r6, r1, ip
    b994:	cmp	r6, r3
    b996:	bls.n	b9a8 <__udivmoddi4+0x1e8>
    b998:	adds	r3, r3, r7
    b99a:	add.w	r2, r1, #4294967295
    b99e:	bcs.n	ba78 <__udivmoddi4+0x2b8>
    b9a0:	cmp	r6, r3
    b9a2:	bls.n	ba78 <__udivmoddi4+0x2b8>
    b9a4:	subs	r1, #2
    b9a6:	add	r3, r7
    b9a8:	subs	r3, r3, r6
    b9aa:	orr.w	r1, r1, sl, lsl #16
    b9ae:	b.n	b8ce <__udivmoddi4+0x10e>
    b9b0:	rsb	lr, r1, #32
    b9b4:	lsr.w	r4, r2, lr
    b9b8:	lsls	r3, r1
    b9ba:	orrs	r3, r4
    b9bc:	lsr.w	r7, r0, lr
    b9c0:	lsl.w	r4, r6, r1
    b9c4:	mov.w	ip, r3, lsr #16
    b9c8:	lsr.w	r6, r6, lr
    b9cc:	orrs	r4, r7
    b9ce:	udiv	r9, r6, ip
    b9d2:	lsrs	r7, r4, #16
    b9d4:	mls	r6, ip, r9, r6
    b9d8:	uxth.w	r8, r3
    b9dc:	orr.w	r6, r7, r6, lsl #16
    b9e0:	mul.w	r7, r9, r8
    b9e4:	cmp	r7, r6
    b9e6:	lsl.w	r2, r2, r1
    b9ea:	lsl.w	sl, r0, r1
    b9ee:	bls.n	ba02 <__udivmoddi4+0x242>
    b9f0:	adds	r6, r6, r3
    b9f2:	add.w	r0, r9, #4294967295
    b9f6:	bcs.n	ba7c <__udivmoddi4+0x2bc>
    b9f8:	cmp	r7, r6
    b9fa:	bls.n	ba7c <__udivmoddi4+0x2bc>
    b9fc:	sub.w	r9, r9, #2
    ba00:	add	r6, r3
    ba02:	subs	r6, r6, r7
    ba04:	uxth	r0, r4
    ba06:	udiv	r4, r6, ip
    ba0a:	mls	r6, ip, r4, r6
    ba0e:	orr.w	r7, r0, r6, lsl #16
    ba12:	mul.w	r8, r4, r8
    ba16:	cmp	r8, r7
    ba18:	bls.n	ba2a <__udivmoddi4+0x26a>
    ba1a:	adds	r7, r7, r3
    ba1c:	add.w	r0, r4, #4294967295
    ba20:	bcs.n	ba74 <__udivmoddi4+0x2b4>
    ba22:	cmp	r8, r7
    ba24:	bls.n	ba74 <__udivmoddi4+0x2b4>
    ba26:	subs	r4, #2
    ba28:	add	r7, r3
    ba2a:	orr.w	r0, r4, r9, lsl #16
    ba2e:	rsb	r7, r8, r7
    ba32:	umull	r8, r9, r0, r2
    ba36:	cmp	r7, r9
    ba38:	mov	r4, r8
    ba3a:	mov	r6, r9
    ba3c:	bcc.n	ba68 <__udivmoddi4+0x2a8>
    ba3e:	beq.n	ba94 <__udivmoddi4+0x2d4>
    ba40:	cbz	r5, ba9c <__udivmoddi4+0x2dc>
    ba42:	subs.w	r3, sl, r4
    ba46:	sbc.w	r7, r7, r6
    ba4a:	lsl.w	lr, r7, lr
    ba4e:	lsrs	r3, r1
    ba50:	lsrs	r7, r1
    ba52:	orr.w	r3, lr, r3
    ba56:	stmia.w	r5, {r3, r7}
    ba5a:	movs	r1, #0
    ba5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba60:	mov	r3, r2
    ba62:	b.n	b856 <__udivmoddi4+0x96>
    ba64:	mov	r0, r2
    ba66:	b.n	b82a <__udivmoddi4+0x6a>
    ba68:	subs.w	r4, r8, r2
    ba6c:	sbc.w	r6, r9, r3
    ba70:	subs	r0, #1
    ba72:	b.n	ba40 <__udivmoddi4+0x280>
    ba74:	mov	r4, r0
    ba76:	b.n	ba2a <__udivmoddi4+0x26a>
    ba78:	mov	r1, r2
    ba7a:	b.n	b9a8 <__udivmoddi4+0x1e8>
    ba7c:	mov	r9, r0
    ba7e:	b.n	ba02 <__udivmoddi4+0x242>
    ba80:	mov	sl, r1
    ba82:	b.n	b97e <__udivmoddi4+0x1be>
    ba84:	subs	r3, #2
    ba86:	add	r4, r7
    ba88:	b.n	b91c <__udivmoddi4+0x15c>
    ba8a:	mov	r0, r1
    ba8c:	b.n	b8a4 <__udivmoddi4+0xe4>
    ba8e:	subs	r0, #2
    ba90:	add	r6, r7
    ba92:	b.n	b8f4 <__udivmoddi4+0x134>
    ba94:	cmp	sl, r8
    ba96:	bcc.n	ba68 <__udivmoddi4+0x2a8>
    ba98:	mov	r6, r7
    ba9a:	b.n	ba40 <__udivmoddi4+0x280>
    ba9c:	mov	r1, r5
    ba9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    baa2:	nop

0000baa4 <__aeabi_idiv0>:
    baa4:	bx	lr
    baa6:	nop

0000baa8 <__cxa_atexit>:
    baa8:	mov	r3, r2
    baaa:	mov	r2, r1
    baac:	mov	r1, r0
    baae:	movs	r0, #2
    bab0:	b.w	ca68 <__register_exitproc>

0000bab4 <__errno>:
    bab4:	ldr	r3, [pc, #4]	; (babc <__errno+0x8>)
    bab6:	ldr	r0, [r3, #0]
    bab8:	bx	lr
    baba:	nop
    babc:	.word	0x1fff0eb8

0000bac0 <__libc_init_array>:
    bac0:	push	{r4, r5, r6, lr}
    bac2:	ldr	r6, [pc, #60]	; (bb00 <__libc_init_array+0x40>)
    bac4:	ldr	r5, [pc, #60]	; (bb04 <__libc_init_array+0x44>)
    bac6:	subs	r6, r6, r5
    bac8:	asrs	r6, r6, #2
    baca:	it	ne
    bacc:	movne	r4, #0
    bace:	beq.n	badc <__libc_init_array+0x1c>
    bad0:	adds	r4, #1
    bad2:	ldr.w	r3, [r5], #4
    bad6:	blx	r3
    bad8:	cmp	r6, r4
    bada:	bne.n	bad0 <__libc_init_array+0x10>
    badc:	ldr	r6, [pc, #40]	; (bb08 <__libc_init_array+0x48>)
    bade:	ldr	r5, [pc, #44]	; (bb0c <__libc_init_array+0x4c>)
    bae0:	subs	r6, r6, r5
    bae2:	bl	10570 <_init>
    bae6:	asrs	r6, r6, #2
    bae8:	it	ne
    baea:	movne	r4, #0
    baec:	beq.n	bafc <__libc_init_array+0x3c>
    baee:	adds	r4, #1
    baf0:	ldr.w	r3, [r5], #4
    baf4:	blx	r3
    baf6:	cmp	r6, r4
    baf8:	bne.n	baee <__libc_init_array+0x2e>
    bafa:	pop	{r4, r5, r6, pc}
    bafc:	pop	{r4, r5, r6, pc}
    bafe:	nop
    bb00:	.word	0x0001057c
    bb04:	.word	0x0001057c
    bb08:	.word	0x0001058c
    bb0c:	.word	0x0001057c

0000bb10 <malloc>:
    bb10:	ldr	r3, [pc, #8]	; (bb1c <malloc+0xc>)
    bb12:	mov	r1, r0
    bb14:	ldr	r0, [r3, #0]
    bb16:	b.w	bb30 <_malloc_r>
    bb1a:	nop
    bb1c:	.word	0x1fff0eb8

0000bb20 <free>:
    bb20:	ldr	r3, [pc, #8]	; (bb2c <free+0xc>)
    bb22:	mov	r1, r0
    bb24:	ldr	r0, [r3, #0]
    bb26:	b.w	cbf0 <_free_r>
    bb2a:	nop
    bb2c:	.word	0x1fff0eb8

0000bb30 <_malloc_r>:
    bb30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb34:	add.w	r5, r1, #11
    bb38:	cmp	r5, #22
    bb3a:	sub	sp, #12
    bb3c:	mov	r6, r0
    bb3e:	bls.w	bc80 <_malloc_r+0x150>
    bb42:	bics.w	r5, r5, #7
    bb46:	bmi.w	bcc8 <_malloc_r+0x198>
    bb4a:	cmp	r1, r5
    bb4c:	bhi.w	bcc8 <_malloc_r+0x198>
    bb50:	bl	c338 <__malloc_lock>
    bb54:	cmp.w	r5, #504	; 0x1f8
    bb58:	bcc.w	c094 <_malloc_r+0x564>
    bb5c:	lsrs	r3, r5, #9
    bb5e:	beq.w	bcd6 <_malloc_r+0x1a6>
    bb62:	cmp	r3, #4
    bb64:	bhi.w	be6e <_malloc_r+0x33e>
    bb68:	lsrs	r0, r5, #6
    bb6a:	add.w	lr, r0, #57	; 0x39
    bb6e:	mov.w	r3, lr, lsl #1
    bb72:	adds	r0, #56	; 0x38
    bb74:	ldr	r7, [pc, #784]	; (be88 <_malloc_r+0x358>)
    bb76:	add.w	r3, r7, r3, lsl #2
    bb7a:	sub.w	r1, r3, #8
    bb7e:	ldr	r4, [r3, #4]
    bb80:	cmp	r1, r4
    bb82:	bne.n	bb94 <_malloc_r+0x64>
    bb84:	b.n	bce0 <_malloc_r+0x1b0>
    bb86:	cmp	r2, #0
    bb88:	bge.w	bce4 <_malloc_r+0x1b4>
    bb8c:	ldr	r4, [r4, #12]
    bb8e:	cmp	r1, r4
    bb90:	beq.w	bce0 <_malloc_r+0x1b0>
    bb94:	ldr	r3, [r4, #4]
    bb96:	bic.w	r3, r3, #3
    bb9a:	subs	r2, r3, r5
    bb9c:	cmp	r2, #15
    bb9e:	ble.n	bb86 <_malloc_r+0x56>
    bba0:	ldr	r1, [pc, #740]	; (be88 <_malloc_r+0x358>)
    bba2:	ldr	r4, [r7, #16]
    bba4:	add.w	lr, r1, #8
    bba8:	cmp	r4, lr
    bbaa:	beq.w	bf14 <_malloc_r+0x3e4>
    bbae:	ldr	r3, [r4, #4]
    bbb0:	bic.w	r3, r3, #3
    bbb4:	subs	r2, r3, r5
    bbb6:	cmp	r2, #15
    bbb8:	bgt.w	beee <_malloc_r+0x3be>
    bbbc:	cmp	r2, #0
    bbbe:	str.w	lr, [r1, #20]
    bbc2:	str.w	lr, [r1, #16]
    bbc6:	bge.w	bd06 <_malloc_r+0x1d6>
    bbca:	cmp.w	r3, #512	; 0x200
    bbce:	bcs.w	bea0 <_malloc_r+0x370>
    bbd2:	lsrs	r3, r3, #3
    bbd4:	add.w	ip, r3, #1
    bbd8:	movs	r2, #1
    bbda:	asrs	r3, r3, #2
    bbdc:	lsl.w	r3, r2, r3
    bbe0:	ldr	r2, [r1, #4]
    bbe2:	ldr.w	r8, [r1, ip, lsl #3]
    bbe6:	str.w	r8, [r4, #8]
    bbea:	add.w	r9, r1, ip, lsl #3
    bbee:	orrs	r2, r3
    bbf0:	sub.w	r3, r9, #8
    bbf4:	str	r3, [r4, #12]
    bbf6:	str	r2, [r1, #4]
    bbf8:	str.w	r4, [r1, ip, lsl #3]
    bbfc:	str.w	r4, [r8, #12]
    bc00:	asrs	r3, r0, #2
    bc02:	movs	r4, #1
    bc04:	lsls	r4, r3
    bc06:	cmp	r4, r2
    bc08:	bhi.w	bd20 <_malloc_r+0x1f0>
    bc0c:	tst	r4, r2
    bc0e:	bne.n	bc1e <_malloc_r+0xee>
    bc10:	bic.w	r0, r0, #3
    bc14:	lsls	r4, r4, #1
    bc16:	tst	r4, r2
    bc18:	add.w	r0, r0, #4
    bc1c:	beq.n	bc14 <_malloc_r+0xe4>
    bc1e:	add.w	r9, r7, r0, lsl #3
    bc22:	mov	ip, r9
    bc24:	mov	r8, r0
    bc26:	ldr.w	r1, [ip, #12]
    bc2a:	cmp	ip, r1
    bc2c:	bne.n	bc3e <_malloc_r+0x10e>
    bc2e:	b.n	bf18 <_malloc_r+0x3e8>
    bc30:	cmp	r2, #0
    bc32:	bge.w	bf38 <_malloc_r+0x408>
    bc36:	ldr	r1, [r1, #12]
    bc38:	cmp	ip, r1
    bc3a:	beq.w	bf18 <_malloc_r+0x3e8>
    bc3e:	ldr	r3, [r1, #4]
    bc40:	bic.w	r3, r3, #3
    bc44:	subs	r2, r3, r5
    bc46:	cmp	r2, #15
    bc48:	ble.n	bc30 <_malloc_r+0x100>
    bc4a:	mov	r4, r1
    bc4c:	ldr.w	ip, [r1, #12]
    bc50:	ldr.w	r8, [r4, #8]!
    bc54:	adds	r3, r1, r5
    bc56:	orr.w	r5, r5, #1
    bc5a:	str	r5, [r1, #4]
    bc5c:	orr.w	r1, r2, #1
    bc60:	str.w	ip, [r8, #12]
    bc64:	mov	r0, r6
    bc66:	str.w	r8, [ip, #8]
    bc6a:	str	r3, [r7, #20]
    bc6c:	str	r3, [r7, #16]
    bc6e:	str.w	lr, [r3, #12]
    bc72:	str.w	lr, [r3, #8]
    bc76:	str	r1, [r3, #4]
    bc78:	str	r2, [r3, r2]
    bc7a:	bl	c33c <__malloc_unlock>
    bc7e:	b.n	bcc0 <_malloc_r+0x190>
    bc80:	cmp	r1, #16
    bc82:	bhi.n	bcc8 <_malloc_r+0x198>
    bc84:	bl	c338 <__malloc_lock>
    bc88:	movs	r5, #16
    bc8a:	movs	r3, #6
    bc8c:	movs	r0, #2
    bc8e:	ldr	r7, [pc, #504]	; (be88 <_malloc_r+0x358>)
    bc90:	add.w	r3, r7, r3, lsl #2
    bc94:	sub.w	r2, r3, #8
    bc98:	ldr	r4, [r3, #4]
    bc9a:	cmp	r4, r2
    bc9c:	beq.w	bf2a <_malloc_r+0x3fa>
    bca0:	ldr	r3, [r4, #4]
    bca2:	ldr	r1, [r4, #12]
    bca4:	ldr	r5, [r4, #8]
    bca6:	bic.w	r3, r3, #3
    bcaa:	add	r3, r4
    bcac:	mov	r0, r6
    bcae:	ldr	r2, [r3, #4]
    bcb0:	str	r1, [r5, #12]
    bcb2:	orr.w	r2, r2, #1
    bcb6:	str	r5, [r1, #8]
    bcb8:	str	r2, [r3, #4]
    bcba:	bl	c33c <__malloc_unlock>
    bcbe:	adds	r4, #8
    bcc0:	mov	r0, r4
    bcc2:	add	sp, #12
    bcc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcc8:	movs	r4, #0
    bcca:	movs	r3, #12
    bccc:	mov	r0, r4
    bcce:	str	r3, [r6, #0]
    bcd0:	add	sp, #12
    bcd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcd6:	movs	r3, #128	; 0x80
    bcd8:	mov.w	lr, #64	; 0x40
    bcdc:	movs	r0, #63	; 0x3f
    bcde:	b.n	bb74 <_malloc_r+0x44>
    bce0:	mov	r0, lr
    bce2:	b.n	bba0 <_malloc_r+0x70>
    bce4:	add	r3, r4
    bce6:	ldr	r1, [r4, #12]
    bce8:	ldr	r2, [r3, #4]
    bcea:	ldr	r5, [r4, #8]
    bcec:	orr.w	r2, r2, #1
    bcf0:	str	r1, [r5, #12]
    bcf2:	mov	r0, r6
    bcf4:	str	r5, [r1, #8]
    bcf6:	str	r2, [r3, #4]
    bcf8:	bl	c33c <__malloc_unlock>
    bcfc:	adds	r4, #8
    bcfe:	mov	r0, r4
    bd00:	add	sp, #12
    bd02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd06:	add	r3, r4
    bd08:	mov	r0, r6
    bd0a:	ldr	r2, [r3, #4]
    bd0c:	orr.w	r2, r2, #1
    bd10:	str	r2, [r3, #4]
    bd12:	bl	c33c <__malloc_unlock>
    bd16:	adds	r4, #8
    bd18:	mov	r0, r4
    bd1a:	add	sp, #12
    bd1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd20:	ldr	r4, [r7, #8]
    bd22:	ldr	r3, [r4, #4]
    bd24:	bic.w	r8, r3, #3
    bd28:	cmp	r8, r5
    bd2a:	bcc.n	bd36 <_malloc_r+0x206>
    bd2c:	rsb	r3, r5, r8
    bd30:	cmp	r3, #15
    bd32:	bgt.w	be4e <_malloc_r+0x31e>
    bd36:	ldr	r3, [pc, #340]	; (be8c <_malloc_r+0x35c>)
    bd38:	ldr.w	r9, [pc, #352]	; be9c <_malloc_r+0x36c>
    bd3c:	ldr	r2, [r3, #0]
    bd3e:	ldr.w	r3, [r9]
    bd42:	adds	r3, #1
    bd44:	add	r2, r5
    bd46:	add.w	sl, r4, r8
    bd4a:	beq.w	c00e <_malloc_r+0x4de>
    bd4e:	add.w	r2, r2, #4096	; 0x1000
    bd52:	adds	r2, #15
    bd54:	bic.w	r2, r2, #4080	; 0xff0
    bd58:	bic.w	r2, r2, #15
    bd5c:	mov	r1, r2
    bd5e:	mov	r0, r6
    bd60:	str	r2, [sp, #4]
    bd62:	bl	c720 <_sbrk_r>
    bd66:	cmp.w	r0, #4294967295
    bd6a:	mov	fp, r0
    bd6c:	ldr	r2, [sp, #4]
    bd6e:	beq.w	c022 <_malloc_r+0x4f2>
    bd72:	cmp	sl, r0
    bd74:	bhi.w	bf70 <_malloc_r+0x440>
    bd78:	ldr	r3, [pc, #276]	; (be90 <_malloc_r+0x360>)
    bd7a:	ldr	r1, [r3, #0]
    bd7c:	cmp	sl, fp
    bd7e:	add	r1, r2
    bd80:	str	r1, [r3, #0]
    bd82:	beq.w	c02c <_malloc_r+0x4fc>
    bd86:	ldr.w	r0, [r9]
    bd8a:	ldr.w	lr, [pc, #272]	; be9c <_malloc_r+0x36c>
    bd8e:	adds	r0, #1
    bd90:	ittet	ne
    bd92:	rsbne	sl, sl, fp
    bd96:	addne	r1, sl
    bd98:	streq.w	fp, [lr]
    bd9c:	strne	r1, [r3, #0]
    bd9e:	ands.w	r1, fp, #7
    bda2:	beq.w	bfd4 <_malloc_r+0x4a4>
    bda6:	rsb	r0, r1, #8
    bdaa:	rsb	r1, r1, #4096	; 0x1000
    bdae:	add	fp, r0
    bdb0:	adds	r1, #8
    bdb2:	add	r2, fp
    bdb4:	ubfx	r2, r2, #0, #12
    bdb8:	rsb	r9, r2, r1
    bdbc:	mov	r1, r9
    bdbe:	mov	r0, r6
    bdc0:	str	r3, [sp, #4]
    bdc2:	bl	c720 <_sbrk_r>
    bdc6:	adds	r3, r0, #1
    bdc8:	ldr	r3, [sp, #4]
    bdca:	beq.w	c04c <_malloc_r+0x51c>
    bdce:	rsb	r2, fp, r0
    bdd2:	add	r2, r9
    bdd4:	orr.w	r2, r2, #1
    bdd8:	ldr	r1, [r3, #0]
    bdda:	str.w	fp, [r7, #8]
    bdde:	add	r1, r9
    bde0:	cmp	r4, r7
    bde2:	str.w	r2, [fp, #4]
    bde6:	str	r1, [r3, #0]
    bde8:	ldr.w	r9, [pc, #164]	; be90 <_malloc_r+0x360>
    bdec:	beq.n	be1c <_malloc_r+0x2ec>
    bdee:	cmp.w	r8, #15
    bdf2:	bls.w	bff0 <_malloc_r+0x4c0>
    bdf6:	ldr	r2, [r4, #4]
    bdf8:	sub.w	r3, r8, #12
    bdfc:	bic.w	r3, r3, #7
    be00:	adds	r0, r4, r3
    be02:	and.w	r2, r2, #1
    be06:	mov.w	lr, #5
    be0a:	orrs	r2, r3
    be0c:	cmp	r3, #15
    be0e:	str	r2, [r4, #4]
    be10:	str.w	lr, [r0, #4]
    be14:	str.w	lr, [r0, #8]
    be18:	bhi.w	c054 <_malloc_r+0x524>
    be1c:	ldr	r3, [pc, #116]	; (be94 <_malloc_r+0x364>)
    be1e:	ldr	r4, [r7, #8]
    be20:	ldr	r2, [r3, #0]
    be22:	cmp	r1, r2
    be24:	it	hi
    be26:	strhi	r1, [r3, #0]
    be28:	ldr	r3, [pc, #108]	; (be98 <_malloc_r+0x368>)
    be2a:	ldr	r2, [r3, #0]
    be2c:	cmp	r1, r2
    be2e:	ldr	r2, [r4, #4]
    be30:	it	hi
    be32:	strhi	r1, [r3, #0]
    be34:	bic.w	r2, r2, #3
    be38:	cmp	r5, r2
    be3a:	sub.w	r3, r2, r5
    be3e:	bhi.n	be44 <_malloc_r+0x314>
    be40:	cmp	r3, #15
    be42:	bgt.n	be4e <_malloc_r+0x31e>
    be44:	mov	r0, r6
    be46:	bl	c33c <__malloc_unlock>
    be4a:	movs	r4, #0
    be4c:	b.n	bcc0 <_malloc_r+0x190>
    be4e:	adds	r2, r4, r5
    be50:	orr.w	r3, r3, #1
    be54:	orr.w	r5, r5, #1
    be58:	str	r5, [r4, #4]
    be5a:	mov	r0, r6
    be5c:	str	r2, [r7, #8]
    be5e:	str	r3, [r2, #4]
    be60:	bl	c33c <__malloc_unlock>
    be64:	adds	r4, #8
    be66:	mov	r0, r4
    be68:	add	sp, #12
    be6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be6e:	cmp	r3, #20
    be70:	bls.n	bf56 <_malloc_r+0x426>
    be72:	cmp	r3, #84	; 0x54
    be74:	bhi.w	bfc0 <_malloc_r+0x490>
    be78:	lsrs	r0, r5, #12
    be7a:	add.w	lr, r0, #111	; 0x6f
    be7e:	mov.w	r3, lr, lsl #1
    be82:	adds	r0, #110	; 0x6e
    be84:	b.n	bb74 <_malloc_r+0x44>
    be86:	nop
    be88:	.word	0x1fff1028
    be8c:	.word	0x1fff1b3c
    be90:	.word	0x1fff1b40
    be94:	.word	0x1fff1b38
    be98:	.word	0x1fff1b34
    be9c:	.word	0x1fff1434
    bea0:	lsrs	r2, r3, #9
    bea2:	cmp	r2, #4
    bea4:	bls.n	bf64 <_malloc_r+0x434>
    bea6:	cmp	r2, #20
    bea8:	bhi.w	c012 <_malloc_r+0x4e2>
    beac:	add.w	r1, r2, #92	; 0x5c
    beb0:	lsls	r1, r1, #1
    beb2:	adds	r2, #91	; 0x5b
    beb4:	add.w	ip, r7, r1, lsl #2
    beb8:	ldr.w	r1, [r7, r1, lsl #2]
    bebc:	ldr.w	r8, [pc, #476]	; c09c <_malloc_r+0x56c>
    bec0:	sub.w	ip, ip, #8
    bec4:	cmp	ip, r1
    bec6:	beq.w	bfda <_malloc_r+0x4aa>
    beca:	ldr	r2, [r1, #4]
    becc:	bic.w	r2, r2, #3
    bed0:	cmp	r3, r2
    bed2:	bcs.n	beda <_malloc_r+0x3aa>
    bed4:	ldr	r1, [r1, #8]
    bed6:	cmp	ip, r1
    bed8:	bne.n	beca <_malloc_r+0x39a>
    beda:	ldr.w	ip, [r1, #12]
    bede:	ldr	r2, [r7, #4]
    bee0:	str.w	ip, [r4, #12]
    bee4:	str	r1, [r4, #8]
    bee6:	str.w	r4, [ip, #8]
    beea:	str	r4, [r1, #12]
    beec:	b.n	bc00 <_malloc_r+0xd0>
    beee:	adds	r3, r4, r5
    bef0:	orr.w	r7, r2, #1
    bef4:	orr.w	r5, r5, #1
    bef8:	str	r5, [r4, #4]
    befa:	mov	r0, r6
    befc:	str	r3, [r1, #20]
    befe:	str	r3, [r1, #16]
    bf00:	str.w	lr, [r3, #12]
    bf04:	str.w	lr, [r3, #8]
    bf08:	str	r7, [r3, #4]
    bf0a:	str	r2, [r3, r2]
    bf0c:	adds	r4, #8
    bf0e:	bl	c33c <__malloc_unlock>
    bf12:	b.n	bcc0 <_malloc_r+0x190>
    bf14:	ldr	r2, [r1, #4]
    bf16:	b.n	bc00 <_malloc_r+0xd0>
    bf18:	add.w	r8, r8, #1
    bf1c:	tst.w	r8, #3
    bf20:	add.w	ip, ip, #8
    bf24:	bne.w	bc26 <_malloc_r+0xf6>
    bf28:	b.n	bf8c <_malloc_r+0x45c>
    bf2a:	ldr	r4, [r3, #12]
    bf2c:	cmp	r3, r4
    bf2e:	it	eq
    bf30:	addeq	r0, #2
    bf32:	beq.w	bba0 <_malloc_r+0x70>
    bf36:	b.n	bca0 <_malloc_r+0x170>
    bf38:	add	r3, r1
    bf3a:	mov	r4, r1
    bf3c:	ldr	r2, [r3, #4]
    bf3e:	ldr	r1, [r1, #12]
    bf40:	ldr.w	r5, [r4, #8]!
    bf44:	orr.w	r2, r2, #1
    bf48:	str	r2, [r3, #4]
    bf4a:	mov	r0, r6
    bf4c:	str	r1, [r5, #12]
    bf4e:	str	r5, [r1, #8]
    bf50:	bl	c33c <__malloc_unlock>
    bf54:	b.n	bcc0 <_malloc_r+0x190>
    bf56:	add.w	lr, r3, #92	; 0x5c
    bf5a:	add.w	r0, r3, #91	; 0x5b
    bf5e:	mov.w	r3, lr, lsl #1
    bf62:	b.n	bb74 <_malloc_r+0x44>
    bf64:	lsrs	r2, r3, #6
    bf66:	add.w	r1, r2, #57	; 0x39
    bf6a:	lsls	r1, r1, #1
    bf6c:	adds	r2, #56	; 0x38
    bf6e:	b.n	beb4 <_malloc_r+0x384>
    bf70:	cmp	r4, r7
    bf72:	ldr	r3, [pc, #296]	; (c09c <_malloc_r+0x56c>)
    bf74:	beq.w	bd78 <_malloc_r+0x248>
    bf78:	ldr	r4, [r3, #8]
    bf7a:	ldr	r2, [r4, #4]
    bf7c:	bic.w	r2, r2, #3
    bf80:	b.n	be38 <_malloc_r+0x308>
    bf82:	ldr.w	r3, [r9], #-8
    bf86:	cmp	r9, r3
    bf88:	bne.w	c090 <_malloc_r+0x560>
    bf8c:	tst.w	r0, #3
    bf90:	add.w	r0, r0, #4294967295
    bf94:	bne.n	bf82 <_malloc_r+0x452>
    bf96:	ldr	r3, [r7, #4]
    bf98:	bic.w	r3, r3, r4
    bf9c:	str	r3, [r7, #4]
    bf9e:	lsls	r4, r4, #1
    bfa0:	cmp	r4, r3
    bfa2:	bhi.w	bd20 <_malloc_r+0x1f0>
    bfa6:	cmp	r4, #0
    bfa8:	beq.w	bd20 <_malloc_r+0x1f0>
    bfac:	tst	r4, r3
    bfae:	mov	r0, r8
    bfb0:	bne.w	bc1e <_malloc_r+0xee>
    bfb4:	lsls	r4, r4, #1
    bfb6:	tst	r4, r3
    bfb8:	add.w	r0, r0, #4
    bfbc:	beq.n	bfb4 <_malloc_r+0x484>
    bfbe:	b.n	bc1e <_malloc_r+0xee>
    bfc0:	cmp.w	r3, #340	; 0x154
    bfc4:	bhi.n	bff8 <_malloc_r+0x4c8>
    bfc6:	lsrs	r0, r5, #15
    bfc8:	add.w	lr, r0, #120	; 0x78
    bfcc:	mov.w	r3, lr, lsl #1
    bfd0:	adds	r0, #119	; 0x77
    bfd2:	b.n	bb74 <_malloc_r+0x44>
    bfd4:	mov.w	r1, #4096	; 0x1000
    bfd8:	b.n	bdb2 <_malloc_r+0x282>
    bfda:	movs	r1, #1
    bfdc:	ldr.w	r3, [r8, #4]
    bfe0:	asrs	r2, r2, #2
    bfe2:	lsl.w	r2, r1, r2
    bfe6:	orrs	r2, r3
    bfe8:	str.w	r2, [r8, #4]
    bfec:	mov	r1, ip
    bfee:	b.n	bee0 <_malloc_r+0x3b0>
    bff0:	movs	r3, #1
    bff2:	str.w	r3, [fp, #4]
    bff6:	b.n	be44 <_malloc_r+0x314>
    bff8:	movw	r2, #1364	; 0x554
    bffc:	cmp	r3, r2
    bffe:	bhi.n	c042 <_malloc_r+0x512>
    c000:	lsrs	r0, r5, #18
    c002:	add.w	lr, r0, #125	; 0x7d
    c006:	mov.w	r3, lr, lsl #1
    c00a:	adds	r0, #124	; 0x7c
    c00c:	b.n	bb74 <_malloc_r+0x44>
    c00e:	adds	r2, #16
    c010:	b.n	bd5c <_malloc_r+0x22c>
    c012:	cmp	r2, #84	; 0x54
    c014:	bhi.n	c064 <_malloc_r+0x534>
    c016:	lsrs	r2, r3, #12
    c018:	add.w	r1, r2, #111	; 0x6f
    c01c:	lsls	r1, r1, #1
    c01e:	adds	r2, #110	; 0x6e
    c020:	b.n	beb4 <_malloc_r+0x384>
    c022:	ldr	r4, [r7, #8]
    c024:	ldr	r2, [r4, #4]
    c026:	bic.w	r2, r2, #3
    c02a:	b.n	be38 <_malloc_r+0x308>
    c02c:	ubfx	r0, sl, #0, #12
    c030:	cmp	r0, #0
    c032:	bne.w	bd86 <_malloc_r+0x256>
    c036:	add	r2, r8
    c038:	ldr	r3, [r7, #8]
    c03a:	orr.w	r2, r2, #1
    c03e:	str	r2, [r3, #4]
    c040:	b.n	be1c <_malloc_r+0x2ec>
    c042:	movs	r3, #254	; 0xfe
    c044:	mov.w	lr, #127	; 0x7f
    c048:	movs	r0, #126	; 0x7e
    c04a:	b.n	bb74 <_malloc_r+0x44>
    c04c:	movs	r2, #1
    c04e:	mov.w	r9, #0
    c052:	b.n	bdd8 <_malloc_r+0x2a8>
    c054:	add.w	r1, r4, #8
    c058:	mov	r0, r6
    c05a:	bl	cbf0 <_free_r>
    c05e:	ldr.w	r1, [r9]
    c062:	b.n	be1c <_malloc_r+0x2ec>
    c064:	cmp.w	r2, #340	; 0x154
    c068:	bhi.n	c076 <_malloc_r+0x546>
    c06a:	lsrs	r2, r3, #15
    c06c:	add.w	r1, r2, #120	; 0x78
    c070:	lsls	r1, r1, #1
    c072:	adds	r2, #119	; 0x77
    c074:	b.n	beb4 <_malloc_r+0x384>
    c076:	movw	r1, #1364	; 0x554
    c07a:	cmp	r2, r1
    c07c:	bhi.n	c08a <_malloc_r+0x55a>
    c07e:	lsrs	r2, r3, #18
    c080:	add.w	r1, r2, #125	; 0x7d
    c084:	lsls	r1, r1, #1
    c086:	adds	r2, #124	; 0x7c
    c088:	b.n	beb4 <_malloc_r+0x384>
    c08a:	movs	r1, #254	; 0xfe
    c08c:	movs	r2, #126	; 0x7e
    c08e:	b.n	beb4 <_malloc_r+0x384>
    c090:	ldr	r3, [r7, #4]
    c092:	b.n	bf9e <_malloc_r+0x46e>
    c094:	lsrs	r0, r5, #3
    c096:	adds	r3, r0, #1
    c098:	lsls	r3, r3, #1
    c09a:	b.n	bc8e <_malloc_r+0x15e>
    c09c:	.word	0x1fff1028

0000c0a0 <__ascii_mbtowc>:
    c0a0:	sub	sp, #8
    c0a2:	cbz	r1, c0b8 <__ascii_mbtowc+0x18>
    c0a4:	cbz	r2, c0be <__ascii_mbtowc+0x1e>
    c0a6:	cbz	r3, c0c4 <__ascii_mbtowc+0x24>
    c0a8:	ldrb	r3, [r2, #0]
    c0aa:	str	r3, [r1, #0]
    c0ac:	ldrb	r2, [r2, #0]
    c0ae:	adds	r0, r2, #0
    c0b0:	it	ne
    c0b2:	movne	r0, #1
    c0b4:	add	sp, #8
    c0b6:	bx	lr
    c0b8:	add	r1, sp, #4
    c0ba:	cmp	r2, #0
    c0bc:	bne.n	c0a6 <__ascii_mbtowc+0x6>
    c0be:	mov	r0, r2
    c0c0:	add	sp, #8
    c0c2:	bx	lr
    c0c4:	mvn.w	r0, #1
    c0c8:	b.n	c0b4 <__ascii_mbtowc+0x14>
    c0ca:	nop
    c0cc:			; <UNDEFINED> instruction: 0xffffffff

0000c0d0 <memchr>:
    c0d0:	and.w	r1, r1, #255	; 0xff
    c0d4:	cmp	r2, #16
    c0d6:	blt.n	c130 <memchr+0x60>
    c0d8:	tst.w	r0, #7
    c0dc:	beq.n	c0f0 <memchr+0x20>
    c0de:	ldrb.w	r3, [r0], #1
    c0e2:	subs	r2, #1
    c0e4:	cmp	r3, r1
    c0e6:	beq.n	c144 <memchr+0x74>
    c0e8:	tst.w	r0, #7
    c0ec:	cbz	r2, c140 <memchr+0x70>
    c0ee:	bne.n	c0de <memchr+0xe>
    c0f0:	push	{r4, r5, r6, r7}
    c0f2:	orr.w	r1, r1, r1, lsl #8
    c0f6:	orr.w	r1, r1, r1, lsl #16
    c0fa:	bic.w	r4, r2, #7
    c0fe:	mvns.w	r7, #0
    c102:	movs	r3, #0
    c104:	ldrd	r5, r6, [r0], #8
    c108:	subs	r4, #8
    c10a:	eor.w	r5, r5, r1
    c10e:	eor.w	r6, r6, r1
    c112:	uadd8	r5, r5, r7
    c116:	sel	r5, r3, r7
    c11a:	uadd8	r6, r6, r7
    c11e:	sel	r6, r5, r7
    c122:	cbnz	r6, c148 <memchr+0x78>
    c124:	bne.n	c104 <memchr+0x34>
    c126:	pop	{r4, r5, r6, r7}
    c128:	and.w	r1, r1, #255	; 0xff
    c12c:	and.w	r2, r2, #7
    c130:	cbz	r2, c140 <memchr+0x70>
    c132:	ldrb.w	r3, [r0], #1
    c136:	subs	r2, #1
    c138:	eor.w	r3, r3, r1
    c13c:	cbz	r3, c144 <memchr+0x74>
    c13e:	bne.n	c132 <memchr+0x62>
    c140:	movs	r0, #0
    c142:	bx	lr
    c144:	subs	r0, #1
    c146:	bx	lr
    c148:	cmp	r5, #0
    c14a:	itte	eq
    c14c:	moveq	r5, r6
    c14e:	subeq	r0, #3
    c150:	subne	r0, #7
    c152:	tst.w	r5, #1
    c156:	bne.n	c168 <memchr+0x98>
    c158:	adds	r0, #1
    c15a:	tst.w	r5, #256	; 0x100
    c15e:	ittt	eq
    c160:	addeq	r0, #1
    c162:	tsteq.w	r5, #98304	; 0x18000
    c166:	addeq	r0, #1
    c168:	pop	{r4, r5, r6, r7}
    c16a:	subs	r0, #1
    c16c:	bx	lr
    c16e:	nop

0000c170 <memcmp>:
    c170:	cmp	r2, #3
    c172:	push	{r4, r5, r6}
    c174:	bls.n	c1c4 <memcmp+0x54>
    c176:	orr.w	r3, r0, r1
    c17a:	lsls	r3, r3, #30
    c17c:	beq.n	c1a2 <memcmp+0x32>
    c17e:	ldrb	r4, [r0, #0]
    c180:	ldrb	r5, [r1, #0]
    c182:	cmp	r4, r5
    c184:	bne.n	c1cc <memcmp+0x5c>
    c186:	add	r2, r0
    c188:	adds	r3, r0, #1
    c18a:	b.n	c198 <memcmp+0x28>
    c18c:	ldrb.w	r4, [r3], #1
    c190:	ldrb.w	r5, [r1, #1]!
    c194:	cmp	r4, r5
    c196:	bne.n	c1cc <memcmp+0x5c>
    c198:	cmp	r3, r2
    c19a:	bne.n	c18c <memcmp+0x1c>
    c19c:	movs	r0, #0
    c19e:	pop	{r4, r5, r6}
    c1a0:	bx	lr
    c1a2:	mov	r4, r1
    c1a4:	mov	r3, r0
    c1a6:	ldr	r6, [r3, #0]
    c1a8:	ldr	r5, [r4, #0]
    c1aa:	cmp	r6, r5
    c1ac:	mov	r0, r3
    c1ae:	mov	r1, r4
    c1b0:	add.w	r3, r3, #4
    c1b4:	add.w	r4, r4, #4
    c1b8:	bne.n	c17e <memcmp+0xe>
    c1ba:	subs	r2, #4
    c1bc:	cmp	r2, #3
    c1be:	mov	r0, r3
    c1c0:	mov	r1, r4
    c1c2:	bhi.n	c1a6 <memcmp+0x36>
    c1c4:	cmp	r2, #0
    c1c6:	bne.n	c17e <memcmp+0xe>
    c1c8:	mov	r0, r2
    c1ca:	b.n	c19e <memcmp+0x2e>
    c1cc:	subs	r0, r4, r5
    c1ce:	pop	{r4, r5, r6}
    c1d0:	bx	lr
    c1d2:	nop

0000c1d4 <memmove>:
    c1d4:	cmp	r0, r1
    c1d6:	push	{r4, r5, r6, r7, lr}
    c1d8:	bls.n	c1f6 <memmove+0x22>
    c1da:	adds	r3, r1, r2
    c1dc:	cmp	r0, r3
    c1de:	bcs.n	c1f6 <memmove+0x22>
    c1e0:	adds	r1, r0, r2
    c1e2:	cmp	r2, #0
    c1e4:	beq.n	c28a <memmove+0xb6>
    c1e6:	subs	r2, r3, r2
    c1e8:	ldrb.w	r4, [r3, #-1]!
    c1ec:	strb.w	r4, [r1, #-1]!
    c1f0:	cmp	r3, r2
    c1f2:	bne.n	c1e8 <memmove+0x14>
    c1f4:	pop	{r4, r5, r6, r7, pc}
    c1f6:	cmp	r2, #15
    c1f8:	bls.n	c28c <memmove+0xb8>
    c1fa:	orr.w	r3, r1, r0
    c1fe:	lsls	r3, r3, #30
    c200:	bne.n	c290 <memmove+0xbc>
    c202:	add.w	r4, r0, #16
    c206:	add.w	r3, r1, #16
    c20a:	mov	r5, r2
    c20c:	ldr.w	r6, [r3, #-16]
    c210:	str.w	r6, [r4, #-16]
    c214:	ldr.w	r6, [r3, #-12]
    c218:	str.w	r6, [r4, #-12]
    c21c:	ldr.w	r6, [r3, #-8]
    c220:	str.w	r6, [r4, #-8]
    c224:	subs	r5, #16
    c226:	ldr.w	r6, [r3, #-4]
    c22a:	str.w	r6, [r4, #-4]
    c22e:	cmp	r5, #15
    c230:	add.w	r3, r3, #16
    c234:	add.w	r4, r4, #16
    c238:	bhi.n	c20c <memmove+0x38>
    c23a:	sub.w	r3, r2, #16
    c23e:	bic.w	r3, r3, #15
    c242:	and.w	lr, r2, #15
    c246:	adds	r3, #16
    c248:	cmp.w	lr, #3
    c24c:	add	r1, r3
    c24e:	add	r3, r0
    c250:	bls.n	c296 <memmove+0xc2>
    c252:	subs	r6, r3, #4
    c254:	mov	r5, r1
    c256:	mov	r4, lr
    c258:	subs	r4, #4
    c25a:	ldr.w	r7, [r5], #4
    c25e:	str.w	r7, [r6, #4]!
    c262:	cmp	r4, #3
    c264:	bhi.n	c258 <memmove+0x84>
    c266:	sub.w	r4, lr, #4
    c26a:	bic.w	r4, r4, #3
    c26e:	adds	r4, #4
    c270:	add	r3, r4
    c272:	add	r1, r4
    c274:	and.w	r2, r2, #3
    c278:	cbz	r2, c294 <memmove+0xc0>
    c27a:	subs	r3, #1
    c27c:	add	r2, r1
    c27e:	ldrb.w	r4, [r1], #1
    c282:	strb.w	r4, [r3, #1]!
    c286:	cmp	r2, r1
    c288:	bne.n	c27e <memmove+0xaa>
    c28a:	pop	{r4, r5, r6, r7, pc}
    c28c:	mov	r3, r0
    c28e:	b.n	c278 <memmove+0xa4>
    c290:	mov	r3, r0
    c292:	b.n	c27a <memmove+0xa6>
    c294:	pop	{r4, r5, r6, r7, pc}
    c296:	mov	r2, lr
    c298:	b.n	c278 <memmove+0xa4>
    c29a:	nop

0000c29c <memset>:
    c29c:	push	{r4, r5, r6}
    c29e:	lsls	r4, r0, #30
    c2a0:	beq.n	c330 <memset+0x94>
    c2a2:	subs	r4, r2, #1
    c2a4:	cmp	r2, #0
    c2a6:	beq.n	c32c <memset+0x90>
    c2a8:	uxtb	r5, r1
    c2aa:	mov	r3, r0
    c2ac:	b.n	c2b4 <memset+0x18>
    c2ae:	subs	r2, r4, #1
    c2b0:	cbz	r4, c32c <memset+0x90>
    c2b2:	mov	r4, r2
    c2b4:	strb.w	r5, [r3], #1
    c2b8:	lsls	r2, r3, #30
    c2ba:	bne.n	c2ae <memset+0x12>
    c2bc:	cmp	r4, #3
    c2be:	bls.n	c31e <memset+0x82>
    c2c0:	uxtb	r5, r1
    c2c2:	orr.w	r5, r5, r5, lsl #8
    c2c6:	cmp	r4, #15
    c2c8:	orr.w	r5, r5, r5, lsl #16
    c2cc:	bls.n	c302 <memset+0x66>
    c2ce:	add.w	r2, r3, #16
    c2d2:	mov	r6, r4
    c2d4:	subs	r6, #16
    c2d6:	cmp	r6, #15
    c2d8:	str.w	r5, [r2, #-16]
    c2dc:	str.w	r5, [r2, #-12]
    c2e0:	str.w	r5, [r2, #-8]
    c2e4:	str.w	r5, [r2, #-4]
    c2e8:	add.w	r2, r2, #16
    c2ec:	bhi.n	c2d4 <memset+0x38>
    c2ee:	sub.w	r2, r4, #16
    c2f2:	bic.w	r2, r2, #15
    c2f6:	and.w	r4, r4, #15
    c2fa:	adds	r2, #16
    c2fc:	cmp	r4, #3
    c2fe:	add	r3, r2
    c300:	bls.n	c31e <memset+0x82>
    c302:	mov	r6, r3
    c304:	mov	r2, r4
    c306:	subs	r2, #4
    c308:	cmp	r2, #3
    c30a:	str.w	r5, [r6], #4
    c30e:	bhi.n	c306 <memset+0x6a>
    c310:	subs	r2, r4, #4
    c312:	bic.w	r2, r2, #3
    c316:	adds	r2, #4
    c318:	add	r3, r2
    c31a:	and.w	r4, r4, #3
    c31e:	cbz	r4, c32c <memset+0x90>
    c320:	uxtb	r1, r1
    c322:	add	r4, r3
    c324:	strb.w	r1, [r3], #1
    c328:	cmp	r3, r4
    c32a:	bne.n	c324 <memset+0x88>
    c32c:	pop	{r4, r5, r6}
    c32e:	bx	lr
    c330:	mov	r4, r2
    c332:	mov	r3, r0
    c334:	b.n	c2bc <memset+0x20>
    c336:	nop

0000c338 <__malloc_lock>:
    c338:	bx	lr
    c33a:	nop

0000c33c <__malloc_unlock>:
    c33c:	bx	lr
    c33e:	nop

0000c340 <_realloc_r>:
    c340:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c344:	mov	r7, r2
    c346:	sub	sp, #12
    c348:	cmp	r1, #0
    c34a:	beq.w	c4d0 <_realloc_r+0x190>
    c34e:	mov	r6, r1
    c350:	mov	r9, r0
    c352:	add.w	r5, r7, #11
    c356:	bl	c338 <__malloc_lock>
    c35a:	ldr.w	lr, [r6, #-4]
    c35e:	cmp	r5, #22
    c360:	bic.w	r4, lr, #3
    c364:	sub.w	r8, r6, #8
    c368:	bhi.n	c3ec <_realloc_r+0xac>
    c36a:	movs	r2, #16
    c36c:	mov	r5, r2
    c36e:	cmp	r7, r5
    c370:	bhi.n	c3f6 <_realloc_r+0xb6>
    c372:	cmp	r4, r2
    c374:	bge.n	c462 <_realloc_r+0x122>
    c376:	ldr	r3, [pc, #804]	; (c69c <_realloc_r+0x35c>)
    c378:	ldr	r1, [r3, #8]
    c37a:	add.w	r0, r8, r4
    c37e:	cmp	r0, r1
    c380:	ldr	r1, [r0, #4]
    c382:	beq.w	c538 <_realloc_r+0x1f8>
    c386:	bic.w	r3, r1, #1
    c38a:	add	r3, r0
    c38c:	ldr	r3, [r3, #4]
    c38e:	lsls	r3, r3, #31
    c390:	bpl.n	c48e <_realloc_r+0x14e>
    c392:	tst.w	lr, #1
    c396:	beq.n	c404 <_realloc_r+0xc4>
    c398:	mov	r1, r7
    c39a:	mov	r0, r9
    c39c:	bl	bb30 <_malloc_r>
    c3a0:	mov	r7, r0
    c3a2:	cbz	r0, c3de <_realloc_r+0x9e>
    c3a4:	ldr.w	r3, [r6, #-4]
    c3a8:	bic.w	r3, r3, #1
    c3ac:	add	r3, r8
    c3ae:	sub.w	r2, r0, #8
    c3b2:	cmp	r2, r3
    c3b4:	beq.w	c640 <_realloc_r+0x300>
    c3b8:	subs	r2, r4, #4
    c3ba:	cmp	r2, #36	; 0x24
    c3bc:	bhi.w	c622 <_realloc_r+0x2e2>
    c3c0:	cmp	r2, #19
    c3c2:	bhi.w	c5ce <_realloc_r+0x28e>
    c3c6:	mov	r3, r0
    c3c8:	mov	r2, r6
    c3ca:	ldr	r1, [r2, #0]
    c3cc:	str	r1, [r3, #0]
    c3ce:	ldr	r1, [r2, #4]
    c3d0:	str	r1, [r3, #4]
    c3d2:	ldr	r2, [r2, #8]
    c3d4:	str	r2, [r3, #8]
    c3d6:	mov	r1, r6
    c3d8:	mov	r0, r9
    c3da:	bl	cbf0 <_free_r>
    c3de:	mov	r0, r9
    c3e0:	bl	c33c <__malloc_unlock>
    c3e4:	mov	r0, r7
    c3e6:	add	sp, #12
    c3e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3ec:	bic.w	r5, r5, #7
    c3f0:	cmp	r5, #0
    c3f2:	mov	r2, r5
    c3f4:	bge.n	c36e <_realloc_r+0x2e>
    c3f6:	movs	r3, #12
    c3f8:	movs	r0, #0
    c3fa:	str.w	r3, [r9]
    c3fe:	add	sp, #12
    c400:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c404:	ldr.w	r3, [r6, #-8]
    c408:	rsb	sl, r3, r8
    c40c:	ldr.w	r3, [sl, #4]
    c410:	bic.w	ip, r3, #3
    c414:	add.w	r3, r4, ip
    c418:	cmp	r3, r2
    c41a:	blt.n	c398 <_realloc_r+0x58>
    c41c:	mov	r7, sl
    c41e:	ldr.w	r1, [sl, #12]
    c422:	ldr.w	r0, [r7, #8]!
    c426:	subs	r2, r4, #4
    c428:	cmp	r2, #36	; 0x24
    c42a:	str	r1, [r0, #12]
    c42c:	str	r0, [r1, #8]
    c42e:	bhi.w	c660 <_realloc_r+0x320>
    c432:	cmp	r2, #19
    c434:	bls.w	c65c <_realloc_r+0x31c>
    c438:	ldr	r1, [r6, #0]
    c43a:	str.w	r1, [sl, #8]
    c43e:	ldr	r1, [r6, #4]
    c440:	str.w	r1, [sl, #12]
    c444:	cmp	r2, #27
    c446:	bhi.w	c6a0 <_realloc_r+0x360>
    c44a:	adds	r6, #8
    c44c:	add.w	r2, sl, #16
    c450:	ldr	r1, [r6, #0]
    c452:	str	r1, [r2, #0]
    c454:	ldr	r1, [r6, #4]
    c456:	str	r1, [r2, #4]
    c458:	ldr	r1, [r6, #8]
    c45a:	str	r1, [r2, #8]
    c45c:	mov	r6, r7
    c45e:	mov	r4, r3
    c460:	mov	r8, sl
    c462:	subs	r3, r4, r5
    c464:	cmp	r3, #15
    c466:	bhi.n	c4a4 <_realloc_r+0x164>
    c468:	ldr.w	r3, [r8, #4]
    c46c:	and.w	r3, r3, #1
    c470:	orrs	r3, r4
    c472:	add	r4, r8
    c474:	str.w	r3, [r8, #4]
    c478:	ldr	r3, [r4, #4]
    c47a:	orr.w	r3, r3, #1
    c47e:	str	r3, [r4, #4]
    c480:	mov	r0, r9
    c482:	bl	c33c <__malloc_unlock>
    c486:	mov	r0, r6
    c488:	add	sp, #12
    c48a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c48e:	bic.w	r1, r1, #3
    c492:	add	r1, r4
    c494:	cmp	r1, r2
    c496:	blt.n	c4dc <_realloc_r+0x19c>
    c498:	ldr	r3, [r0, #12]
    c49a:	ldr	r2, [r0, #8]
    c49c:	mov	r4, r1
    c49e:	str	r3, [r2, #12]
    c4a0:	str	r2, [r3, #8]
    c4a2:	b.n	c462 <_realloc_r+0x122>
    c4a4:	ldr.w	r2, [r8, #4]
    c4a8:	add.w	r1, r8, r5
    c4ac:	and.w	r2, r2, #1
    c4b0:	orrs	r5, r2
    c4b2:	orr.w	r2, r3, #1
    c4b6:	add	r3, r1
    c4b8:	str.w	r5, [r8, #4]
    c4bc:	str	r2, [r1, #4]
    c4be:	ldr	r2, [r3, #4]
    c4c0:	orr.w	r2, r2, #1
    c4c4:	adds	r1, #8
    c4c6:	str	r2, [r3, #4]
    c4c8:	mov	r0, r9
    c4ca:	bl	cbf0 <_free_r>
    c4ce:	b.n	c480 <_realloc_r+0x140>
    c4d0:	mov	r1, r2
    c4d2:	add	sp, #12
    c4d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4d8:	b.w	bb30 <_malloc_r>
    c4dc:	tst.w	lr, #1
    c4e0:	bne.w	c398 <_realloc_r+0x58>
    c4e4:	ldr.w	r3, [r6, #-8]
    c4e8:	rsb	sl, r3, r8
    c4ec:	ldr.w	r3, [sl, #4]
    c4f0:	bic.w	ip, r3, #3
    c4f4:	add.w	lr, r1, ip
    c4f8:	cmp	lr, r2
    c4fa:	blt.n	c414 <_realloc_r+0xd4>
    c4fc:	ldr	r3, [r0, #12]
    c4fe:	ldr	r2, [r0, #8]
    c500:	mov	r7, sl
    c502:	str	r3, [r2, #12]
    c504:	str	r2, [r3, #8]
    c506:	ldr.w	r1, [r7, #8]!
    c50a:	ldr.w	r3, [sl, #12]
    c50e:	str	r3, [r1, #12]
    c510:	subs	r2, r4, #4
    c512:	cmp	r2, #36	; 0x24
    c514:	str	r1, [r3, #8]
    c516:	bhi.w	c64c <_realloc_r+0x30c>
    c51a:	cmp	r2, #19
    c51c:	bls.n	c5e4 <_realloc_r+0x2a4>
    c51e:	ldr	r3, [r6, #0]
    c520:	str.w	r3, [sl, #8]
    c524:	ldr	r3, [r6, #4]
    c526:	str.w	r3, [sl, #12]
    c52a:	cmp	r2, #27
    c52c:	bhi.w	c670 <_realloc_r+0x330>
    c530:	adds	r6, #8
    c532:	add.w	r3, sl, #16
    c536:	b.n	c5e6 <_realloc_r+0x2a6>
    c538:	bic.w	fp, r1, #3
    c53c:	add	fp, r4
    c53e:	add.w	r0, r5, #16
    c542:	cmp	fp, r0
    c544:	bge.n	c5fa <_realloc_r+0x2ba>
    c546:	tst.w	lr, #1
    c54a:	bne.w	c398 <_realloc_r+0x58>
    c54e:	ldr.w	r1, [r6, #-8]
    c552:	rsb	sl, r1, r8
    c556:	ldr.w	r1, [sl, #4]
    c55a:	bic.w	ip, r1, #3
    c55e:	add	fp, ip
    c560:	cmp	r0, fp
    c562:	bgt.w	c414 <_realloc_r+0xd4>
    c566:	mov	r7, sl
    c568:	ldr.w	r1, [sl, #12]
    c56c:	ldr.w	r0, [r7, #8]!
    c570:	subs	r2, r4, #4
    c572:	cmp	r2, #36	; 0x24
    c574:	str	r1, [r0, #12]
    c576:	str	r0, [r1, #8]
    c578:	bhi.w	c6e4 <_realloc_r+0x3a4>
    c57c:	cmp	r2, #19
    c57e:	bls.w	c6cc <_realloc_r+0x38c>
    c582:	ldr	r1, [r6, #0]
    c584:	str.w	r1, [sl, #8]
    c588:	ldr	r1, [r6, #4]
    c58a:	str.w	r1, [sl, #12]
    c58e:	cmp	r2, #27
    c590:	bhi.w	c6f2 <_realloc_r+0x3b2>
    c594:	adds	r6, #8
    c596:	add.w	r2, sl, #16
    c59a:	ldr	r1, [r6, #0]
    c59c:	str	r1, [r2, #0]
    c59e:	ldr	r1, [r6, #4]
    c5a0:	str	r1, [r2, #4]
    c5a2:	ldr	r1, [r6, #8]
    c5a4:	str	r1, [r2, #8]
    c5a6:	add.w	r1, sl, r5
    c5aa:	rsb	r2, r5, fp
    c5ae:	orr.w	r2, r2, #1
    c5b2:	str	r1, [r3, #8]
    c5b4:	str	r2, [r1, #4]
    c5b6:	ldr.w	r3, [sl, #4]
    c5ba:	and.w	r3, r3, #1
    c5be:	orrs	r5, r3
    c5c0:	mov	r0, r9
    c5c2:	str.w	r5, [sl, #4]
    c5c6:	bl	c33c <__malloc_unlock>
    c5ca:	mov	r0, r7
    c5cc:	b.n	c488 <_realloc_r+0x148>
    c5ce:	ldr	r3, [r6, #0]
    c5d0:	str	r3, [r0, #0]
    c5d2:	ldr	r3, [r6, #4]
    c5d4:	str	r3, [r0, #4]
    c5d6:	cmp	r2, #27
    c5d8:	bhi.n	c62a <_realloc_r+0x2ea>
    c5da:	add.w	r3, r0, #8
    c5de:	add.w	r2, r6, #8
    c5e2:	b.n	c3ca <_realloc_r+0x8a>
    c5e4:	mov	r3, r7
    c5e6:	ldr	r2, [r6, #0]
    c5e8:	str	r2, [r3, #0]
    c5ea:	ldr	r2, [r6, #4]
    c5ec:	str	r2, [r3, #4]
    c5ee:	ldr	r2, [r6, #8]
    c5f0:	str	r2, [r3, #8]
    c5f2:	mov	r6, r7
    c5f4:	mov	r4, lr
    c5f6:	mov	r8, sl
    c5f8:	b.n	c462 <_realloc_r+0x122>
    c5fa:	add.w	r1, r8, r5
    c5fe:	rsb	fp, r5, fp
    c602:	orr.w	r2, fp, #1
    c606:	str	r1, [r3, #8]
    c608:	str	r2, [r1, #4]
    c60a:	ldr.w	r3, [r6, #-4]
    c60e:	and.w	r3, r3, #1
    c612:	orrs	r5, r3
    c614:	mov	r0, r9
    c616:	str.w	r5, [r6, #-4]
    c61a:	bl	c33c <__malloc_unlock>
    c61e:	mov	r0, r6
    c620:	b.n	c488 <_realloc_r+0x148>
    c622:	mov	r1, r6
    c624:	bl	c1d4 <memmove>
    c628:	b.n	c3d6 <_realloc_r+0x96>
    c62a:	ldr	r3, [r6, #8]
    c62c:	str	r3, [r0, #8]
    c62e:	ldr	r3, [r6, #12]
    c630:	str	r3, [r0, #12]
    c632:	cmp	r2, #36	; 0x24
    c634:	beq.n	c688 <_realloc_r+0x348>
    c636:	add.w	r3, r0, #16
    c63a:	add.w	r2, r6, #16
    c63e:	b.n	c3ca <_realloc_r+0x8a>
    c640:	ldr.w	r3, [r0, #-4]
    c644:	bic.w	r3, r3, #3
    c648:	add	r4, r3
    c64a:	b.n	c462 <_realloc_r+0x122>
    c64c:	mov	r1, r6
    c64e:	mov	r0, r7
    c650:	mov	r4, lr
    c652:	mov	r8, sl
    c654:	bl	c1d4 <memmove>
    c658:	mov	r6, r7
    c65a:	b.n	c462 <_realloc_r+0x122>
    c65c:	mov	r2, r7
    c65e:	b.n	c450 <_realloc_r+0x110>
    c660:	mov	r1, r6
    c662:	mov	r0, r7
    c664:	mov	r4, r3
    c666:	mov	r8, sl
    c668:	bl	c1d4 <memmove>
    c66c:	mov	r6, r7
    c66e:	b.n	c462 <_realloc_r+0x122>
    c670:	ldr	r3, [r6, #8]
    c672:	str.w	r3, [sl, #16]
    c676:	ldr	r3, [r6, #12]
    c678:	str.w	r3, [sl, #20]
    c67c:	cmp	r2, #36	; 0x24
    c67e:	beq.n	c6b8 <_realloc_r+0x378>
    c680:	adds	r6, #16
    c682:	add.w	r3, sl, #24
    c686:	b.n	c5e6 <_realloc_r+0x2a6>
    c688:	ldr	r3, [r6, #16]
    c68a:	str	r3, [r0, #16]
    c68c:	ldr	r3, [r6, #20]
    c68e:	str	r3, [r0, #20]
    c690:	add.w	r2, r6, #24
    c694:	add.w	r3, r0, #24
    c698:	b.n	c3ca <_realloc_r+0x8a>
    c69a:	nop
    c69c:	.word	0x1fff1028
    c6a0:	ldr	r1, [r6, #8]
    c6a2:	str.w	r1, [sl, #16]
    c6a6:	ldr	r1, [r6, #12]
    c6a8:	str.w	r1, [sl, #20]
    c6ac:	cmp	r2, #36	; 0x24
    c6ae:	beq.n	c6d0 <_realloc_r+0x390>
    c6b0:	adds	r6, #16
    c6b2:	add.w	r2, sl, #24
    c6b6:	b.n	c450 <_realloc_r+0x110>
    c6b8:	ldr	r3, [r6, #16]
    c6ba:	str.w	r3, [sl, #24]
    c6be:	ldr	r3, [r6, #20]
    c6c0:	str.w	r3, [sl, #28]
    c6c4:	adds	r6, #24
    c6c6:	add.w	r3, sl, #32
    c6ca:	b.n	c5e6 <_realloc_r+0x2a6>
    c6cc:	mov	r2, r7
    c6ce:	b.n	c59a <_realloc_r+0x25a>
    c6d0:	ldr	r2, [r6, #16]
    c6d2:	str.w	r2, [sl, #24]
    c6d6:	ldr	r2, [r6, #20]
    c6d8:	str.w	r2, [sl, #28]
    c6dc:	adds	r6, #24
    c6de:	add.w	r2, sl, #32
    c6e2:	b.n	c450 <_realloc_r+0x110>
    c6e4:	mov	r1, r6
    c6e6:	mov	r0, r7
    c6e8:	str	r3, [sp, #4]
    c6ea:	bl	c1d4 <memmove>
    c6ee:	ldr	r3, [sp, #4]
    c6f0:	b.n	c5a6 <_realloc_r+0x266>
    c6f2:	ldr	r1, [r6, #8]
    c6f4:	str.w	r1, [sl, #16]
    c6f8:	ldr	r1, [r6, #12]
    c6fa:	str.w	r1, [sl, #20]
    c6fe:	cmp	r2, #36	; 0x24
    c700:	beq.n	c70a <_realloc_r+0x3ca>
    c702:	adds	r6, #16
    c704:	add.w	r2, sl, #24
    c708:	b.n	c59a <_realloc_r+0x25a>
    c70a:	ldr	r2, [r6, #16]
    c70c:	str.w	r2, [sl, #24]
    c710:	ldr	r2, [r6, #20]
    c712:	str.w	r2, [sl, #28]
    c716:	adds	r6, #24
    c718:	add.w	r2, sl, #32
    c71c:	b.n	c59a <_realloc_r+0x25a>
    c71e:	nop

0000c720 <_sbrk_r>:
    c720:	push	{r3, r4, r5, lr}
    c722:	ldr	r4, [pc, #28]	; (c740 <_sbrk_r+0x20>)
    c724:	movs	r3, #0
    c726:	mov	r5, r0
    c728:	mov	r0, r1
    c72a:	str	r3, [r4, #0]
    c72c:	bl	9910 <_sbrk>
    c730:	adds	r3, r0, #1
    c732:	beq.n	c736 <_sbrk_r+0x16>
    c734:	pop	{r3, r4, r5, pc}
    c736:	ldr	r3, [r4, #0]
    c738:	cmp	r3, #0
    c73a:	beq.n	c734 <_sbrk_r+0x14>
    c73c:	str	r3, [r5, #0]
    c73e:	pop	{r3, r4, r5, pc}
    c740:	.word	0x1fff1b80

0000c744 <strcat>:
    c744:	lsls	r3, r0, #30
    c746:	push	{r4, lr}
    c748:	mov	r4, r0
    c74a:	bne.n	c76e <strcat+0x2a>
    c74c:	ldr	r2, [r0, #0]
    c74e:	sub.w	r3, r2, #16843009	; 0x1010101
    c752:	bic.w	r3, r3, r2
    c756:	tst.w	r3, #2155905152	; 0x80808080
    c75a:	bne.n	c76e <strcat+0x2a>
    c75c:	ldr.w	r2, [r0, #4]!
    c760:	sub.w	r3, r2, #16843009	; 0x1010101
    c764:	bic.w	r3, r3, r2
    c768:	tst.w	r3, #2155905152	; 0x80808080
    c76c:	beq.n	c75c <strcat+0x18>
    c76e:	ldrb	r3, [r0, #0]
    c770:	cbz	r3, c77a <strcat+0x36>
    c772:	ldrb.w	r3, [r0, #1]!
    c776:	cmp	r3, #0
    c778:	bne.n	c772 <strcat+0x2e>
    c77a:	bl	c784 <strcpy>
    c77e:	mov	r0, r4
    c780:	pop	{r4, pc}
    c782:	nop

0000c784 <strcpy>:
    c784:	eor.w	r2, r0, r1
    c788:	mov	ip, r0
    c78a:	tst.w	r2, #3
    c78e:	bne.n	c830 <strcpy+0xac>
    c790:	tst.w	r1, #3
    c794:	bne.n	c7fc <strcpy+0x78>
    c796:	str.w	r4, [sp, #-4]!
    c79a:	tst.w	r1, #4
    c79e:	ldr.w	r3, [r1], #4
    c7a2:	beq.n	c7bc <strcpy+0x38>
    c7a4:	sub.w	r2, r3, #16843009	; 0x1010101
    c7a8:	bics	r2, r3
    c7aa:	tst.w	r2, #2155905152	; 0x80808080
    c7ae:	itt	eq
    c7b0:	streq.w	r3, [ip], #4
    c7b4:	ldreq.w	r3, [r1], #4
    c7b8:	bne.n	c7e8 <strcpy+0x64>
    c7ba:	nop
    c7bc:	ldr.w	r4, [r1], #4
    c7c0:	sub.w	r2, r3, #16843009	; 0x1010101
    c7c4:	bics	r2, r3
    c7c6:	tst.w	r2, #2155905152	; 0x80808080
    c7ca:	sub.w	r2, r4, #16843009	; 0x1010101
    c7ce:	bne.n	c7e8 <strcpy+0x64>
    c7d0:	str.w	r3, [ip], #4
    c7d4:	bics	r2, r4
    c7d6:	tst.w	r2, #2155905152	; 0x80808080
    c7da:	itt	eq
    c7dc:	ldreq.w	r3, [r1], #4
    c7e0:	streq.w	r4, [ip], #4
    c7e4:	beq.n	c7bc <strcpy+0x38>
    c7e6:	mov	r3, r4
    c7e8:	strb.w	r3, [ip], #1
    c7ec:	tst.w	r3, #255	; 0xff
    c7f0:	mov.w	r3, r3, ror #8
    c7f4:	bne.n	c7e8 <strcpy+0x64>
    c7f6:	ldr.w	r4, [sp], #4
    c7fa:	bx	lr
    c7fc:	tst.w	r1, #1
    c800:	beq.n	c810 <strcpy+0x8c>
    c802:	ldrb.w	r2, [r1], #1
    c806:	strb.w	r2, [ip], #1
    c80a:	cmp	r2, #0
    c80c:	it	eq
    c80e:	bxeq	lr
    c810:	tst.w	r1, #2
    c814:	beq.n	c796 <strcpy+0x12>
    c816:	ldrh.w	r2, [r1], #2
    c81a:	tst.w	r2, #255	; 0xff
    c81e:	itet	ne
    c820:	strhne.w	r2, [ip], #2
    c824:	strbeq.w	r2, [ip]
    c828:	tstne.w	r2, #65280	; 0xff00
    c82c:	bne.n	c796 <strcpy+0x12>
    c82e:	bx	lr
    c830:	ldrb.w	r2, [r1], #1
    c834:	strb.w	r2, [ip], #1
    c838:	cmp	r2, #0
    c83a:	bne.n	c830 <strcpy+0xac>
    c83c:	bx	lr
    c83e:	nop

0000c840 <strlen>:
    c840:	pld	[r0]
    c844:	strd	r4, r5, [sp, #-8]!
    c848:	bic.w	r1, r0, #7
    c84c:	mvn.w	ip, #0
    c850:	ands.w	r4, r0, #7
    c854:	pld	[r1, #32]
    c858:	bne.w	c8ee <strlen+0xae>
    c85c:	mov.w	r4, #0
    c860:	mvn.w	r0, #7
    c864:	ldrd	r2, r3, [r1]
    c868:	pld	[r1, #64]	; 0x40
    c86c:	add.w	r0, r0, #8
    c870:	uadd8	r2, r2, ip
    c874:	sel	r2, r4, ip
    c878:	uadd8	r3, r3, ip
    c87c:	sel	r3, r2, ip
    c880:	cbnz	r3, c8d6 <strlen+0x96>
    c882:	ldrd	r2, r3, [r1, #8]
    c886:	uadd8	r2, r2, ip
    c88a:	add.w	r0, r0, #8
    c88e:	sel	r2, r4, ip
    c892:	uadd8	r3, r3, ip
    c896:	sel	r3, r2, ip
    c89a:	cbnz	r3, c8d6 <strlen+0x96>
    c89c:	ldrd	r2, r3, [r1, #16]
    c8a0:	uadd8	r2, r2, ip
    c8a4:	add.w	r0, r0, #8
    c8a8:	sel	r2, r4, ip
    c8ac:	uadd8	r3, r3, ip
    c8b0:	sel	r3, r2, ip
    c8b4:	cbnz	r3, c8d6 <strlen+0x96>
    c8b6:	ldrd	r2, r3, [r1, #24]
    c8ba:	add.w	r1, r1, #32
    c8be:	uadd8	r2, r2, ip
    c8c2:	add.w	r0, r0, #8
    c8c6:	sel	r2, r4, ip
    c8ca:	uadd8	r3, r3, ip
    c8ce:	sel	r3, r2, ip
    c8d2:	cmp	r3, #0
    c8d4:	beq.n	c864 <strlen+0x24>
    c8d6:	cmp	r2, #0
    c8d8:	itt	eq
    c8da:	addeq	r0, #4
    c8dc:	moveq	r2, r3
    c8de:	rev	r2, r2
    c8e0:	clz	r2, r2
    c8e4:	ldrd	r4, r5, [sp], #8
    c8e8:	add.w	r0, r0, r2, lsr #3
    c8ec:	bx	lr
    c8ee:	ldrd	r2, r3, [r1]
    c8f2:	and.w	r5, r4, #3
    c8f6:	rsb	r0, r4, #0
    c8fa:	mov.w	r5, r5, lsl #3
    c8fe:	tst.w	r4, #4
    c902:	pld	[r1, #64]	; 0x40
    c906:	lsl.w	r5, ip, r5
    c90a:	orn	r2, r2, r5
    c90e:	itt	ne
    c910:	ornne	r3, r3, r5
    c914:	movne	r2, ip
    c916:	mov.w	r4, #0
    c91a:	b.n	c870 <strlen+0x30>

0000c91c <strncmp>:
    c91c:	cmp	r2, #0
    c91e:	beq.n	c9a4 <strncmp+0x88>
    c920:	orr.w	r3, r0, r1
    c924:	ands.w	r3, r3, #3
    c928:	push	{r4, r5, r6, r7}
    c92a:	bne.n	c978 <strncmp+0x5c>
    c92c:	cmp	r2, #3
    c92e:	bls.n	c978 <strncmp+0x5c>
    c930:	ldr	r4, [r0, #0]
    c932:	ldr	r5, [r1, #0]
    c934:	cmp	r4, r5
    c936:	bne.n	c978 <strncmp+0x5c>
    c938:	subs	r2, #4
    c93a:	beq.n	c9a8 <strncmp+0x8c>
    c93c:	sub.w	r5, r4, #16843009	; 0x1010101
    c940:	bic.w	r4, r5, r4
    c944:	tst.w	r4, #2155905152	; 0x80808080
    c948:	bne.n	c9ae <strncmp+0x92>
    c94a:	adds	r7, r0, #4
    c94c:	adds	r5, r1, #4
    c94e:	b.n	c96c <strncmp+0x50>
    c950:	ldr.w	r3, [r7], #4
    c954:	ldr	r6, [r1, #0]
    c956:	sub.w	r4, r3, #16843009	; 0x1010101
    c95a:	cmp	r3, r6
    c95c:	bic.w	r4, r4, r3
    c960:	bne.n	c978 <strncmp+0x5c>
    c962:	subs	r2, #4
    c964:	beq.n	c9a8 <strncmp+0x8c>
    c966:	tst.w	r4, #2155905152	; 0x80808080
    c96a:	bne.n	c9b4 <strncmp+0x98>
    c96c:	cmp	r2, #3
    c96e:	mov	r1, r5
    c970:	mov	r0, r7
    c972:	add.w	r5, r5, #4
    c976:	bhi.n	c950 <strncmp+0x34>
    c978:	ldrb	r3, [r0, #0]
    c97a:	ldrb	r4, [r1, #0]
    c97c:	cmp	r4, r3
    c97e:	add.w	r2, r2, #4294967295
    c982:	bne.n	c99e <strncmp+0x82>
    c984:	cbz	r2, c9a8 <strncmp+0x8c>
    c986:	cbnz	r4, c98e <strncmp+0x72>
    c988:	b.n	c9b8 <strncmp+0x9c>
    c98a:	cbz	r2, c9a8 <strncmp+0x8c>
    c98c:	cbz	r3, c9ae <strncmp+0x92>
    c98e:	ldrb.w	r3, [r0, #1]!
    c992:	ldrb.w	r4, [r1, #1]!
    c996:	cmp	r3, r4
    c998:	add.w	r2, r2, #4294967295
    c99c:	beq.n	c98a <strncmp+0x6e>
    c99e:	subs	r0, r3, r4
    c9a0:	pop	{r4, r5, r6, r7}
    c9a2:	bx	lr
    c9a4:	mov	r0, r2
    c9a6:	bx	lr
    c9a8:	mov	r0, r2
    c9aa:	pop	{r4, r5, r6, r7}
    c9ac:	bx	lr
    c9ae:	mov	r0, r3
    c9b0:	pop	{r4, r5, r6, r7}
    c9b2:	bx	lr
    c9b4:	movs	r0, #0
    c9b6:	b.n	c9a0 <strncmp+0x84>
    c9b8:	mov	r0, r4
    c9ba:	b.n	c9a0 <strncmp+0x84>

0000c9bc <_vdprintf_r>:
    c9bc:	push	{r4, r5, r6, r7, lr}
    c9be:	sub.w	sp, sp, #532	; 0x214
    c9c2:	add	r5, sp, #16
    c9c4:	str	r3, [sp, #0]
    c9c6:	mov	r7, r1
    c9c8:	mov	r3, r2
    c9ca:	mov.w	r4, #512	; 0x200
    c9ce:	add	r2, sp, #12
    c9d0:	mov	r1, r5
    c9d2:	str	r4, [sp, #12]
    c9d4:	mov	r6, r0
    c9d6:	bl	d400 <_vasnprintf_r>
    c9da:	cbz	r0, ca00 <_vdprintf_r+0x44>
    c9dc:	mov	r4, r0
    c9de:	mov	r2, r0
    c9e0:	mov	r1, r7
    c9e2:	ldr	r3, [sp, #12]
    c9e4:	mov	r0, r6
    c9e6:	bl	ca3c <_write_r>
    c9ea:	cmp	r4, r5
    c9ec:	str	r0, [sp, #12]
    c9ee:	beq.n	c9fa <_vdprintf_r+0x3e>
    c9f0:	mov	r0, r6
    c9f2:	mov	r1, r4
    c9f4:	bl	cbf0 <_free_r>
    c9f8:	ldr	r0, [sp, #12]
    c9fa:	add.w	sp, sp, #532	; 0x214
    c9fe:	pop	{r4, r5, r6, r7, pc}
    ca00:	mov.w	r0, #4294967295
    ca04:	b.n	c9fa <_vdprintf_r+0x3e>
    ca06:	nop

0000ca08 <vdprintf>:
    ca08:	push	{r4}
    ca0a:	ldr	r4, [pc, #16]	; (ca1c <vdprintf+0x14>)
    ca0c:	mov	r3, r2
    ca0e:	mov	r2, r1
    ca10:	mov	r1, r0
    ca12:	ldr	r0, [r4, #0]
    ca14:	ldr.w	r4, [sp], #4
    ca18:	b.w	c9bc <_vdprintf_r>
    ca1c:	.word	0x1fff0eb8

0000ca20 <__ascii_wctomb>:
    ca20:	cbz	r1, ca2c <__ascii_wctomb+0xc>
    ca22:	cmp	r2, #255	; 0xff
    ca24:	bhi.n	ca30 <__ascii_wctomb+0x10>
    ca26:	strb	r2, [r1, #0]
    ca28:	movs	r0, #1
    ca2a:	bx	lr
    ca2c:	mov	r0, r1
    ca2e:	bx	lr
    ca30:	movs	r3, #138	; 0x8a
    ca32:	str	r3, [r0, #0]
    ca34:	mov.w	r0, #4294967295
    ca38:	bx	lr
    ca3a:	nop

0000ca3c <_write_r>:
    ca3c:	push	{r4, r5, r6, lr}
    ca3e:	mov	r5, r1
    ca40:	ldr	r4, [pc, #32]	; (ca64 <_write_r+0x28>)
    ca42:	mov	r1, r2
    ca44:	mov	r6, r0
    ca46:	mov	r2, r3
    ca48:	mov	r0, r5
    ca4a:	movs	r3, #0
    ca4c:	str	r3, [r4, #0]
    ca4e:	bl	abe4 <_write>
    ca52:	adds	r3, r0, #1
    ca54:	beq.n	ca58 <_write_r+0x1c>
    ca56:	pop	{r4, r5, r6, pc}
    ca58:	ldr	r3, [r4, #0]
    ca5a:	cmp	r3, #0
    ca5c:	beq.n	ca56 <_write_r+0x1a>
    ca5e:	str	r3, [r6, #0]
    ca60:	pop	{r4, r5, r6, pc}
    ca62:	nop
    ca64:	.word	0x1fff1b80

0000ca68 <__register_exitproc>:
    ca68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca6c:	ldr	r4, [pc, #148]	; (cb04 <__register_exitproc+0x9c>)
    ca6e:	ldr	r5, [r4, #0]
    ca70:	ldr.w	r4, [r5, #328]	; 0x148
    ca74:	mov	r6, r0
    ca76:	mov	r8, r1
    ca78:	mov	sl, r2
    ca7a:	mov	r9, r3
    ca7c:	cbz	r4, caf0 <__register_exitproc+0x88>
    ca7e:	ldr	r0, [r4, #4]
    ca80:	cmp	r0, #31
    ca82:	bgt.n	cab4 <__register_exitproc+0x4c>
    ca84:	adds	r3, r0, #1
    ca86:	cbz	r6, caa6 <__register_exitproc+0x3e>
    ca88:	add.w	r5, r4, r0, lsl #2
    ca8c:	movs	r2, #1
    ca8e:	str.w	sl, [r5, #136]	; 0x88
    ca92:	ldr.w	r1, [r4, #392]	; 0x188
    ca96:	lsls	r2, r0
    ca98:	orrs	r1, r2
    ca9a:	cmp	r6, #2
    ca9c:	str.w	r1, [r4, #392]	; 0x188
    caa0:	str.w	r9, [r5, #264]	; 0x108
    caa4:	beq.n	cae4 <__register_exitproc+0x7c>
    caa6:	adds	r0, #2
    caa8:	str	r3, [r4, #4]
    caaa:	str.w	r8, [r4, r0, lsl #2]
    caae:	movs	r0, #0
    cab0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cab4:	ldr	r3, [pc, #80]	; (cb08 <__register_exitproc+0xa0>)
    cab6:	cbz	r3, cafa <__register_exitproc+0x92>
    cab8:	mov.w	r0, #400	; 0x190
    cabc:	bl	bb10 <malloc>
    cac0:	mov	r4, r0
    cac2:	cbz	r0, cafa <__register_exitproc+0x92>
    cac4:	ldr.w	r3, [r5, #328]	; 0x148
    cac8:	movs	r7, #0
    caca:	stmia.w	r0, {r3, r7}
    cace:	str.w	r4, [r5, #328]	; 0x148
    cad2:	mov	r0, r7
    cad4:	movs	r3, #1
    cad6:	str.w	r7, [r4, #392]	; 0x188
    cada:	str.w	r7, [r4, #396]	; 0x18c
    cade:	cmp	r6, #0
    cae0:	beq.n	caa6 <__register_exitproc+0x3e>
    cae2:	b.n	ca88 <__register_exitproc+0x20>
    cae4:	ldr.w	r1, [r4, #396]	; 0x18c
    cae8:	orrs	r2, r1
    caea:	str.w	r2, [r4, #396]	; 0x18c
    caee:	b.n	caa6 <__register_exitproc+0x3e>
    caf0:	add.w	r4, r5, #332	; 0x14c
    caf4:	str.w	r4, [r5, #328]	; 0x148
    caf8:	b.n	ca7e <__register_exitproc+0x16>
    cafa:	mov.w	r0, #4294967295
    cafe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb02:	nop
    cb04:	.word	0x000102e4
    cb08:	.word	0x0000bb11

0000cb0c <register_fini>:
    cb0c:	ldr	r3, [pc, #8]	; (cb18 <register_fini+0xc>)
    cb0e:	cbz	r3, cb16 <register_fini+0xa>
    cb10:	ldr	r0, [pc, #8]	; (cb1c <register_fini+0x10>)
    cb12:	b.w	cb20 <atexit>
    cb16:	bx	lr
    cb18:	.word	0x00000000
    cb1c:	.word	0x0000cb2d

0000cb20 <atexit>:
    cb20:	movs	r3, #0
    cb22:	mov	r1, r0
    cb24:	mov	r2, r3
    cb26:	mov	r0, r3
    cb28:	b.w	ca68 <__register_exitproc>

0000cb2c <__libc_fini_array>:
    cb2c:	push	{r3, r4, r5, lr}
    cb2e:	ldr	r5, [pc, #28]	; (cb4c <__libc_fini_array+0x20>)
    cb30:	ldr	r4, [pc, #28]	; (cb50 <__libc_fini_array+0x24>)
    cb32:	subs	r4, r5, r4
    cb34:	asrs	r4, r4, #2
    cb36:	beq.n	cb44 <__libc_fini_array+0x18>
    cb38:	subs	r4, #1
    cb3a:	ldr.w	r3, [r5, #-4]!
    cb3e:	blx	r3
    cb40:	cmp	r4, #0
    cb42:	bne.n	cb38 <__libc_fini_array+0xc>
    cb44:	ldmia.w	sp!, {r3, r4, r5, lr}
    cb48:	b.w	1058c <__init_array_end>
	...

0000cb54 <_malloc_trim_r>:
    cb54:	push	{r3, r4, r5, r6, r7, lr}
    cb56:	ldr	r7, [pc, #140]	; (cbe4 <_malloc_trim_r+0x90>)
    cb58:	mov	r4, r1
    cb5a:	mov	r6, r0
    cb5c:	bl	c338 <__malloc_lock>
    cb60:	ldr	r3, [r7, #8]
    cb62:	ldr	r5, [r3, #4]
    cb64:	bic.w	r5, r5, #3
    cb68:	subs	r1, r5, r4
    cb6a:	addw	r1, r1, #4079	; 0xfef
    cb6e:	bic.w	r1, r1, #4080	; 0xff0
    cb72:	bic.w	r1, r1, #15
    cb76:	sub.w	r4, r1, #4096	; 0x1000
    cb7a:	cmp.w	r4, #4096	; 0x1000
    cb7e:	blt.n	cb90 <_malloc_trim_r+0x3c>
    cb80:	movs	r1, #0
    cb82:	mov	r0, r6
    cb84:	bl	c720 <_sbrk_r>
    cb88:	ldr	r3, [r7, #8]
    cb8a:	add	r3, r5
    cb8c:	cmp	r0, r3
    cb8e:	beq.n	cb9a <_malloc_trim_r+0x46>
    cb90:	mov	r0, r6
    cb92:	bl	c33c <__malloc_unlock>
    cb96:	movs	r0, #0
    cb98:	pop	{r3, r4, r5, r6, r7, pc}
    cb9a:	negs	r1, r4
    cb9c:	mov	r0, r6
    cb9e:	bl	c720 <_sbrk_r>
    cba2:	adds	r0, #1
    cba4:	beq.n	cbc2 <_malloc_trim_r+0x6e>
    cba6:	ldr	r3, [pc, #64]	; (cbe8 <_malloc_trim_r+0x94>)
    cba8:	ldr	r2, [r7, #8]
    cbaa:	ldr	r1, [r3, #0]
    cbac:	subs	r5, r5, r4
    cbae:	orr.w	r5, r5, #1
    cbb2:	mov	r0, r6
    cbb4:	subs	r1, r1, r4
    cbb6:	str	r5, [r2, #4]
    cbb8:	str	r1, [r3, #0]
    cbba:	bl	c33c <__malloc_unlock>
    cbbe:	movs	r0, #1
    cbc0:	pop	{r3, r4, r5, r6, r7, pc}
    cbc2:	movs	r1, #0
    cbc4:	mov	r0, r6
    cbc6:	bl	c720 <_sbrk_r>
    cbca:	ldr	r2, [r7, #8]
    cbcc:	subs	r3, r0, r2
    cbce:	cmp	r3, #15
    cbd0:	ble.n	cb90 <_malloc_trim_r+0x3c>
    cbd2:	ldr	r4, [pc, #24]	; (cbec <_malloc_trim_r+0x98>)
    cbd4:	ldr	r1, [pc, #16]	; (cbe8 <_malloc_trim_r+0x94>)
    cbd6:	ldr	r4, [r4, #0]
    cbd8:	orr.w	r3, r3, #1
    cbdc:	subs	r0, r0, r4
    cbde:	str	r3, [r2, #4]
    cbe0:	str	r0, [r1, #0]
    cbe2:	b.n	cb90 <_malloc_trim_r+0x3c>
    cbe4:	.word	0x1fff1028
    cbe8:	.word	0x1fff1b40
    cbec:	.word	0x1fff1434

0000cbf0 <_free_r>:
    cbf0:	cmp	r1, #0
    cbf2:	beq.n	cc80 <_free_r+0x90>
    cbf4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbf8:	mov	r5, r1
    cbfa:	mov	r8, r0
    cbfc:	bl	c338 <__malloc_lock>
    cc00:	ldr.w	r7, [r5, #-4]
    cc04:	ldr	r1, [pc, #424]	; (cdb0 <_free_r+0x1c0>)
    cc06:	bic.w	r3, r7, #1
    cc0a:	sub.w	r4, r5, #8
    cc0e:	adds	r2, r4, r3
    cc10:	ldr	r6, [r1, #8]
    cc12:	ldr	r0, [r2, #4]
    cc14:	cmp	r2, r6
    cc16:	bic.w	r0, r0, #3
    cc1a:	beq.n	cce2 <_free_r+0xf2>
    cc1c:	lsls	r6, r7, #31
    cc1e:	str	r0, [r2, #4]
    cc20:	bmi.n	cc3a <_free_r+0x4a>
    cc22:	ldr.w	r7, [r5, #-8]
    cc26:	subs	r4, r4, r7
    cc28:	add.w	lr, r1, #8
    cc2c:	ldr	r5, [r4, #8]
    cc2e:	cmp	r5, lr
    cc30:	add	r3, r7
    cc32:	beq.n	cd14 <_free_r+0x124>
    cc34:	ldr	r7, [r4, #12]
    cc36:	str	r7, [r5, #12]
    cc38:	str	r5, [r7, #8]
    cc3a:	adds	r5, r2, r0
    cc3c:	ldr	r5, [r5, #4]
    cc3e:	lsls	r5, r5, #31
    cc40:	bpl.n	ccc8 <_free_r+0xd8>
    cc42:	orr.w	r2, r3, #1
    cc46:	str	r2, [r4, #4]
    cc48:	str	r3, [r4, r3]
    cc4a:	cmp.w	r3, #512	; 0x200
    cc4e:	bcs.n	cc82 <_free_r+0x92>
    cc50:	lsrs	r3, r3, #3
    cc52:	adds	r2, r3, #1
    cc54:	ldr	r5, [r1, #4]
    cc56:	ldr.w	r7, [r1, r2, lsl #3]
    cc5a:	str	r7, [r4, #8]
    cc5c:	movs	r0, #1
    cc5e:	asrs	r3, r3, #2
    cc60:	lsl.w	r3, r0, r3
    cc64:	add.w	r0, r1, r2, lsl #3
    cc68:	orrs	r5, r3
    cc6a:	subs	r0, #8
    cc6c:	str	r0, [r4, #12]
    cc6e:	str	r5, [r1, #4]
    cc70:	str.w	r4, [r1, r2, lsl #3]
    cc74:	str	r4, [r7, #12]
    cc76:	mov	r0, r8
    cc78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cc7c:	b.w	c33c <__malloc_unlock>
    cc80:	bx	lr
    cc82:	lsrs	r2, r3, #9
    cc84:	cmp	r2, #4
    cc86:	bhi.n	cd30 <_free_r+0x140>
    cc88:	lsrs	r2, r3, #6
    cc8a:	add.w	r7, r2, #57	; 0x39
    cc8e:	lsls	r7, r7, #1
    cc90:	add.w	r5, r2, #56	; 0x38
    cc94:	add.w	r0, r1, r7, lsl #2
    cc98:	ldr.w	r2, [r1, r7, lsl #2]
    cc9c:	ldr	r1, [pc, #272]	; (cdb0 <_free_r+0x1c0>)
    cc9e:	subs	r0, #8
    cca0:	cmp	r0, r2
    cca2:	beq.n	cd40 <_free_r+0x150>
    cca4:	ldr	r1, [r2, #4]
    cca6:	bic.w	r1, r1, #3
    ccaa:	cmp	r3, r1
    ccac:	bcs.n	ccb4 <_free_r+0xc4>
    ccae:	ldr	r2, [r2, #8]
    ccb0:	cmp	r0, r2
    ccb2:	bne.n	cca4 <_free_r+0xb4>
    ccb4:	ldr	r0, [r2, #12]
    ccb6:	str	r0, [r4, #12]
    ccb8:	str	r2, [r4, #8]
    ccba:	str	r4, [r0, #8]
    ccbc:	str	r4, [r2, #12]
    ccbe:	mov	r0, r8
    ccc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ccc4:	b.w	c33c <__malloc_unlock>
    ccc8:	ldr	r5, [r2, #8]
    ccca:	ldr	r7, [pc, #232]	; (cdb4 <_free_r+0x1c4>)
    cccc:	cmp	r5, r7
    ccce:	add	r3, r0
    ccd0:	beq.n	cd52 <_free_r+0x162>
    ccd2:	ldr	r0, [r2, #12]
    ccd4:	str	r0, [r5, #12]
    ccd6:	orr.w	r2, r3, #1
    ccda:	str	r5, [r0, #8]
    ccdc:	str	r2, [r4, #4]
    ccde:	str	r3, [r4, r3]
    cce0:	b.n	cc4a <_free_r+0x5a>
    cce2:	lsls	r7, r7, #31
    cce4:	add	r3, r0
    cce6:	bmi.n	ccf8 <_free_r+0x108>
    cce8:	ldr.w	r2, [r5, #-8]
    ccec:	subs	r4, r4, r2
    ccee:	add	r3, r2
    ccf0:	ldr	r0, [r4, #8]
    ccf2:	ldr	r2, [r4, #12]
    ccf4:	str	r2, [r0, #12]
    ccf6:	str	r0, [r2, #8]
    ccf8:	ldr	r2, [pc, #188]	; (cdb8 <_free_r+0x1c8>)
    ccfa:	ldr	r2, [r2, #0]
    ccfc:	orr.w	r0, r3, #1
    cd00:	cmp	r3, r2
    cd02:	str	r0, [r4, #4]
    cd04:	str	r4, [r1, #8]
    cd06:	bcc.n	cc76 <_free_r+0x86>
    cd08:	ldr	r3, [pc, #176]	; (cdbc <_free_r+0x1cc>)
    cd0a:	mov	r0, r8
    cd0c:	ldr	r1, [r3, #0]
    cd0e:	bl	cb54 <_malloc_trim_r>
    cd12:	b.n	cc76 <_free_r+0x86>
    cd14:	adds	r1, r2, r0
    cd16:	ldr	r1, [r1, #4]
    cd18:	lsls	r1, r1, #31
    cd1a:	bmi.n	cda6 <_free_r+0x1b6>
    cd1c:	ldr	r1, [r2, #8]
    cd1e:	ldr	r2, [r2, #12]
    cd20:	str	r2, [r1, #12]
    cd22:	add	r3, r0
    cd24:	orr.w	r0, r3, #1
    cd28:	str	r1, [r2, #8]
    cd2a:	str	r0, [r4, #4]
    cd2c:	str	r3, [r4, r3]
    cd2e:	b.n	cc76 <_free_r+0x86>
    cd30:	cmp	r2, #20
    cd32:	bhi.n	cd64 <_free_r+0x174>
    cd34:	add.w	r7, r2, #92	; 0x5c
    cd38:	lsls	r7, r7, #1
    cd3a:	add.w	r5, r2, #91	; 0x5b
    cd3e:	b.n	cc94 <_free_r+0xa4>
    cd40:	asrs	r2, r5, #2
    cd42:	ldr	r3, [r1, #4]
    cd44:	movs	r5, #1
    cd46:	lsl.w	r2, r5, r2
    cd4a:	orrs	r3, r2
    cd4c:	str	r3, [r1, #4]
    cd4e:	mov	r2, r0
    cd50:	b.n	ccb6 <_free_r+0xc6>
    cd52:	orr.w	r2, r3, #1
    cd56:	str	r4, [r1, #20]
    cd58:	str	r4, [r1, #16]
    cd5a:	str	r5, [r4, #12]
    cd5c:	str	r5, [r4, #8]
    cd5e:	str	r2, [r4, #4]
    cd60:	str	r3, [r4, r3]
    cd62:	b.n	cc76 <_free_r+0x86>
    cd64:	cmp	r2, #84	; 0x54
    cd66:	bhi.n	cd76 <_free_r+0x186>
    cd68:	lsrs	r2, r3, #12
    cd6a:	add.w	r7, r2, #111	; 0x6f
    cd6e:	lsls	r7, r7, #1
    cd70:	add.w	r5, r2, #110	; 0x6e
    cd74:	b.n	cc94 <_free_r+0xa4>
    cd76:	cmp.w	r2, #340	; 0x154
    cd7a:	bhi.n	cd8a <_free_r+0x19a>
    cd7c:	lsrs	r2, r3, #15
    cd7e:	add.w	r7, r2, #120	; 0x78
    cd82:	lsls	r7, r7, #1
    cd84:	add.w	r5, r2, #119	; 0x77
    cd88:	b.n	cc94 <_free_r+0xa4>
    cd8a:	movw	r0, #1364	; 0x554
    cd8e:	cmp	r2, r0
    cd90:	bhi.n	cda0 <_free_r+0x1b0>
    cd92:	lsrs	r2, r3, #18
    cd94:	add.w	r7, r2, #125	; 0x7d
    cd98:	lsls	r7, r7, #1
    cd9a:	add.w	r5, r2, #124	; 0x7c
    cd9e:	b.n	cc94 <_free_r+0xa4>
    cda0:	movs	r7, #254	; 0xfe
    cda2:	movs	r5, #126	; 0x7e
    cda4:	b.n	cc94 <_free_r+0xa4>
    cda6:	orr.w	r2, r3, #1
    cdaa:	str	r2, [r4, #4]
    cdac:	str	r3, [r4, r3]
    cdae:	b.n	cc76 <_free_r+0x86>
    cdb0:	.word	0x1fff1028
    cdb4:	.word	0x1fff1030
    cdb8:	.word	0x1fff1430
    cdbc:	.word	0x1fff1b3c

0000cdc0 <_localeconv_r>:
    cdc0:	ldr	r2, [pc, #16]	; (cdd4 <_localeconv_r+0x14>)
    cdc2:	ldr	r3, [pc, #20]	; (cdd8 <_localeconv_r+0x18>)
    cdc4:	ldr	r2, [r2, #0]
    cdc6:	ldr	r0, [r2, #52]	; 0x34
    cdc8:	cmp	r0, #0
    cdca:	it	eq
    cdcc:	moveq	r0, r3
    cdce:	adds	r0, #240	; 0xf0
    cdd0:	bx	lr
    cdd2:	nop
    cdd4:	.word	0x1fff0eb8
    cdd8:	.word	0x1fff0ebc

0000cddc <_Balloc>:
    cddc:	ldr	r3, [r0, #76]	; 0x4c
    cdde:	push	{r4, r5, r6, lr}
    cde0:	mov	r5, r0
    cde2:	mov	r4, r1
    cde4:	cbz	r3, cdfa <_Balloc+0x1e>
    cde6:	ldr.w	r0, [r3, r4, lsl #2]
    cdea:	cbz	r0, ce0e <_Balloc+0x32>
    cdec:	ldr	r2, [r0, #0]
    cdee:	str.w	r2, [r3, r4, lsl #2]
    cdf2:	movs	r3, #0
    cdf4:	str	r3, [r0, #16]
    cdf6:	str	r3, [r0, #12]
    cdf8:	pop	{r4, r5, r6, pc}
    cdfa:	movs	r2, #33	; 0x21
    cdfc:	movs	r1, #4
    cdfe:	bl	d460 <_calloc_r>
    ce02:	str	r0, [r5, #76]	; 0x4c
    ce04:	mov	r3, r0
    ce06:	cmp	r0, #0
    ce08:	bne.n	cde6 <_Balloc+0xa>
    ce0a:	movs	r0, #0
    ce0c:	pop	{r4, r5, r6, pc}
    ce0e:	movs	r1, #1
    ce10:	lsl.w	r6, r1, r4
    ce14:	adds	r2, r6, #5
    ce16:	mov	r0, r5
    ce18:	lsls	r2, r2, #2
    ce1a:	bl	d460 <_calloc_r>
    ce1e:	cmp	r0, #0
    ce20:	beq.n	ce0a <_Balloc+0x2e>
    ce22:	str	r4, [r0, #4]
    ce24:	str	r6, [r0, #8]
    ce26:	b.n	cdf2 <_Balloc+0x16>

0000ce28 <_Bfree>:
    ce28:	cbz	r1, ce38 <_Bfree+0x10>
    ce2a:	ldr	r3, [r0, #76]	; 0x4c
    ce2c:	ldr	r2, [r1, #4]
    ce2e:	ldr.w	r0, [r3, r2, lsl #2]
    ce32:	str	r0, [r1, #0]
    ce34:	str.w	r1, [r3, r2, lsl #2]
    ce38:	bx	lr
    ce3a:	nop

0000ce3c <__multadd>:
    ce3c:	push	{r4, r5, r6, r7, lr}
    ce3e:	ldr	r4, [r1, #16]
    ce40:	sub	sp, #12
    ce42:	mov	r5, r1
    ce44:	mov	r6, r0
    ce46:	add.w	lr, r1, #20
    ce4a:	movs	r7, #0
    ce4c:	ldr.w	r0, [lr]
    ce50:	uxth	r1, r0
    ce52:	mla	r1, r2, r1, r3
    ce56:	lsrs	r3, r1, #16
    ce58:	lsrs	r0, r0, #16
    ce5a:	mla	r3, r2, r0, r3
    ce5e:	uxth	r1, r1
    ce60:	adds	r7, #1
    ce62:	add.w	r1, r1, r3, lsl #16
    ce66:	cmp	r4, r7
    ce68:	str.w	r1, [lr], #4
    ce6c:	mov.w	r3, r3, lsr #16
    ce70:	bgt.n	ce4c <__multadd+0x10>
    ce72:	cbz	r3, ce84 <__multadd+0x48>
    ce74:	ldr	r2, [r5, #8]
    ce76:	cmp	r4, r2
    ce78:	bge.n	ce8a <__multadd+0x4e>
    ce7a:	add.w	r2, r5, r4, lsl #2
    ce7e:	adds	r4, #1
    ce80:	str	r3, [r2, #20]
    ce82:	str	r4, [r5, #16]
    ce84:	mov	r0, r5
    ce86:	add	sp, #12
    ce88:	pop	{r4, r5, r6, r7, pc}
    ce8a:	ldr	r1, [r5, #4]
    ce8c:	str	r3, [sp, #4]
    ce8e:	adds	r1, #1
    ce90:	mov	r0, r6
    ce92:	bl	cddc <_Balloc>
    ce96:	ldr	r2, [r5, #16]
    ce98:	adds	r2, #2
    ce9a:	add.w	r1, r5, #12
    ce9e:	mov	r7, r0
    cea0:	lsls	r2, r2, #2
    cea2:	adds	r0, #12
    cea4:	bl	94a8 <memcpy>
    cea8:	ldr	r2, [r6, #76]	; 0x4c
    ceaa:	ldr	r1, [r5, #4]
    ceac:	ldr	r3, [sp, #4]
    ceae:	ldr.w	r0, [r2, r1, lsl #2]
    ceb2:	str	r0, [r5, #0]
    ceb4:	str.w	r5, [r2, r1, lsl #2]
    ceb8:	mov	r5, r7
    ceba:	b.n	ce7a <__multadd+0x3e>

0000cebc <__hi0bits>:
    cebc:	lsrs	r3, r0, #16
    cebe:	lsls	r3, r3, #16
    cec0:	cbnz	r3, cef0 <__hi0bits+0x34>
    cec2:	lsls	r0, r0, #16
    cec4:	movs	r3, #16
    cec6:	tst.w	r0, #4278190080	; 0xff000000
    ceca:	itt	eq
    cecc:	lsleq	r0, r0, #8
    cece:	addeq	r3, #8
    ced0:	tst.w	r0, #4026531840	; 0xf0000000
    ced4:	itt	eq
    ced6:	lsleq	r0, r0, #4
    ced8:	addeq	r3, #4
    ceda:	tst.w	r0, #3221225472	; 0xc0000000
    cede:	itt	eq
    cee0:	lsleq	r0, r0, #2
    cee2:	addeq	r3, #2
    cee4:	cmp	r0, #0
    cee6:	blt.n	cef8 <__hi0bits+0x3c>
    cee8:	lsls	r2, r0, #1
    ceea:	bmi.n	cef4 <__hi0bits+0x38>
    ceec:	movs	r0, #32
    ceee:	bx	lr
    cef0:	movs	r3, #0
    cef2:	b.n	cec6 <__hi0bits+0xa>
    cef4:	adds	r0, r3, #1
    cef6:	bx	lr
    cef8:	mov	r0, r3
    cefa:	bx	lr

0000cefc <__lo0bits>:
    cefc:	ldr	r3, [r0, #0]
    cefe:	ands.w	r2, r3, #7
    cf02:	beq.n	cf14 <__lo0bits+0x18>
    cf04:	lsls	r1, r3, #31
    cf06:	bmi.n	cf4a <__lo0bits+0x4e>
    cf08:	lsls	r2, r3, #30
    cf0a:	bmi.n	cf4e <__lo0bits+0x52>
    cf0c:	lsrs	r3, r3, #2
    cf0e:	str	r3, [r0, #0]
    cf10:	movs	r0, #2
    cf12:	bx	lr
    cf14:	uxth	r1, r3
    cf16:	cbnz	r1, cf1c <__lo0bits+0x20>
    cf18:	lsrs	r3, r3, #16
    cf1a:	movs	r2, #16
    cf1c:	tst.w	r3, #255	; 0xff
    cf20:	itt	eq
    cf22:	lsreq	r3, r3, #8
    cf24:	addeq	r2, #8
    cf26:	lsls	r1, r3, #28
    cf28:	itt	eq
    cf2a:	lsreq	r3, r3, #4
    cf2c:	addeq	r2, #4
    cf2e:	lsls	r1, r3, #30
    cf30:	itt	eq
    cf32:	lsreq	r3, r3, #2
    cf34:	addeq	r2, #2
    cf36:	lsls	r1, r3, #31
    cf38:	bmi.n	cf44 <__lo0bits+0x48>
    cf3a:	lsrs	r3, r3, #1
    cf3c:	bne.n	cf42 <__lo0bits+0x46>
    cf3e:	movs	r0, #32
    cf40:	bx	lr
    cf42:	adds	r2, #1
    cf44:	str	r3, [r0, #0]
    cf46:	mov	r0, r2
    cf48:	bx	lr
    cf4a:	movs	r0, #0
    cf4c:	bx	lr
    cf4e:	lsrs	r3, r3, #1
    cf50:	str	r3, [r0, #0]
    cf52:	movs	r0, #1
    cf54:	bx	lr
    cf56:	nop

0000cf58 <__i2b>:
    cf58:	push	{r4, lr}
    cf5a:	mov	r4, r1
    cf5c:	movs	r1, #1
    cf5e:	bl	cddc <_Balloc>
    cf62:	movs	r2, #1
    cf64:	str	r4, [r0, #20]
    cf66:	str	r2, [r0, #16]
    cf68:	pop	{r4, pc}
    cf6a:	nop

0000cf6c <__multiply>:
    cf6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf70:	ldr	r5, [r1, #16]
    cf72:	ldr	r7, [r2, #16]
    cf74:	cmp	r5, r7
    cf76:	sub	sp, #12
    cf78:	mov	r4, r1
    cf7a:	mov	r6, r2
    cf7c:	bge.n	cf88 <__multiply+0x1c>
    cf7e:	mov	r2, r5
    cf80:	mov	r4, r6
    cf82:	mov	r5, r7
    cf84:	mov	r6, r1
    cf86:	mov	r7, r2
    cf88:	ldr	r3, [r4, #8]
    cf8a:	ldr	r1, [r4, #4]
    cf8c:	add.w	r8, r5, r7
    cf90:	cmp	r8, r3
    cf92:	it	gt
    cf94:	addgt	r1, #1
    cf96:	bl	cddc <_Balloc>
    cf9a:	add.w	ip, r0, #20
    cf9e:	add.w	r9, ip, r8, lsl #2
    cfa2:	cmp	ip, r9
    cfa4:	str	r0, [sp, #0]
    cfa6:	bcs.n	cfb4 <__multiply+0x48>
    cfa8:	mov	r3, ip
    cfaa:	movs	r1, #0
    cfac:	str.w	r1, [r3], #4
    cfb0:	cmp	r9, r3
    cfb2:	bhi.n	cfac <__multiply+0x40>
    cfb4:	add.w	r2, r6, #20
    cfb8:	add.w	sl, r2, r7, lsl #2
    cfbc:	add.w	r3, r4, #20
    cfc0:	cmp	r2, sl
    cfc2:	add.w	lr, r3, r5, lsl #2
    cfc6:	bcs.n	d072 <__multiply+0x106>
    cfc8:	str.w	r9, [sp, #4]
    cfcc:	mov	r9, r3
    cfce:	ldr.w	r3, [r2], #4
    cfd2:	uxth.w	fp, r3
    cfd6:	cmp.w	fp, #0
    cfda:	beq.n	d01e <__multiply+0xb2>
    cfdc:	movs	r0, #0
    cfde:	mov	r7, r9
    cfe0:	mov	r6, ip
    cfe2:	mov	r5, r0
    cfe4:	b.n	cfe8 <__multiply+0x7c>
    cfe6:	mov	r6, r3
    cfe8:	ldr.w	r4, [r7], #4
    cfec:	ldr	r0, [r6, #0]
    cfee:	uxth	r1, r4
    cff0:	uxth	r3, r0
    cff2:	mla	r1, fp, r1, r3
    cff6:	lsrs	r4, r4, #16
    cff8:	lsrs	r0, r0, #16
    cffa:	adds	r3, r1, r5
    cffc:	mla	r0, fp, r4, r0
    d000:	add.w	r0, r0, r3, lsr #16
    d004:	uxth	r1, r3
    d006:	mov	r3, r6
    d008:	orr.w	r1, r1, r0, lsl #16
    d00c:	cmp	lr, r7
    d00e:	mov.w	r5, r0, lsr #16
    d012:	str.w	r1, [r3], #4
    d016:	bhi.n	cfe6 <__multiply+0x7a>
    d018:	str	r5, [r6, #4]
    d01a:	ldr.w	r3, [r2, #-4]
    d01e:	movs.w	fp, r3, lsr #16
    d022:	beq.n	d066 <__multiply+0xfa>
    d024:	ldr.w	r3, [ip]
    d028:	mov	r7, ip
    d02a:	mov	r0, r3
    d02c:	mov	r5, r9
    d02e:	movs	r1, #0
    d030:	b.n	d034 <__multiply+0xc8>
    d032:	mov	r7, r6
    d034:	ldrh	r4, [r5, #0]
    d036:	lsrs	r0, r0, #16
    d038:	mla	r0, fp, r4, r0
    d03c:	add	r1, r0
    d03e:	uxth	r4, r3
    d040:	mov	r6, r7
    d042:	orr.w	r3, r4, r1, lsl #16
    d046:	str.w	r3, [r6], #4
    d04a:	ldr	r0, [r7, #4]
    d04c:	ldr.w	r4, [r5], #4
    d050:	uxth	r3, r0
    d052:	lsrs	r4, r4, #16
    d054:	mla	r4, fp, r4, r3
    d058:	add.w	r3, r4, r1, lsr #16
    d05c:	cmp	lr, r5
    d05e:	mov.w	r1, r3, lsr #16
    d062:	bhi.n	d032 <__multiply+0xc6>
    d064:	str	r3, [r7, #4]
    d066:	cmp	sl, r2
    d068:	add.w	ip, ip, #4
    d06c:	bhi.n	cfce <__multiply+0x62>
    d06e:	ldr.w	r9, [sp, #4]
    d072:	cmp.w	r8, #0
    d076:	ble.n	d090 <__multiply+0x124>
    d078:	ldr.w	r3, [r9, #-4]
    d07c:	sub.w	r9, r9, #4
    d080:	cbz	r3, d08a <__multiply+0x11e>
    d082:	b.n	d090 <__multiply+0x124>
    d084:	ldr.w	r3, [r9, #-4]!
    d088:	cbnz	r3, d090 <__multiply+0x124>
    d08a:	subs.w	r8, r8, #1
    d08e:	bne.n	d084 <__multiply+0x118>
    d090:	ldr	r0, [sp, #0]
    d092:	str.w	r8, [r0, #16]
    d096:	add	sp, #12
    d098:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d09c <__pow5mult>:
    d09c:	ands.w	r3, r2, #3
    d0a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0a4:	mov	r4, r2
    d0a6:	mov	r7, r0
    d0a8:	bne.n	d108 <__pow5mult+0x6c>
    d0aa:	mov	r6, r1
    d0ac:	asrs	r4, r4, #2
    d0ae:	beq.n	d0ea <__pow5mult+0x4e>
    d0b0:	ldr	r5, [r7, #72]	; 0x48
    d0b2:	cbz	r5, d11a <__pow5mult+0x7e>
    d0b4:	lsls	r3, r4, #31
    d0b6:	mov.w	r8, #0
    d0ba:	bmi.n	d0ca <__pow5mult+0x2e>
    d0bc:	asrs	r4, r4, #1
    d0be:	beq.n	d0ea <__pow5mult+0x4e>
    d0c0:	ldr	r0, [r5, #0]
    d0c2:	cbz	r0, d0f0 <__pow5mult+0x54>
    d0c4:	mov	r5, r0
    d0c6:	lsls	r3, r4, #31
    d0c8:	bpl.n	d0bc <__pow5mult+0x20>
    d0ca:	mov	r2, r5
    d0cc:	mov	r1, r6
    d0ce:	mov	r0, r7
    d0d0:	bl	cf6c <__multiply>
    d0d4:	cbz	r6, d104 <__pow5mult+0x68>
    d0d6:	ldr	r2, [r6, #4]
    d0d8:	ldr	r3, [r7, #76]	; 0x4c
    d0da:	asrs	r4, r4, #1
    d0dc:	ldr.w	r1, [r3, r2, lsl #2]
    d0e0:	str	r1, [r6, #0]
    d0e2:	str.w	r6, [r3, r2, lsl #2]
    d0e6:	mov	r6, r0
    d0e8:	bne.n	d0c0 <__pow5mult+0x24>
    d0ea:	mov	r0, r6
    d0ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0f0:	mov	r2, r5
    d0f2:	mov	r1, r5
    d0f4:	mov	r0, r7
    d0f6:	bl	cf6c <__multiply>
    d0fa:	str	r0, [r5, #0]
    d0fc:	str.w	r8, [r0]
    d100:	mov	r5, r0
    d102:	b.n	d0c6 <__pow5mult+0x2a>
    d104:	mov	r6, r0
    d106:	b.n	d0bc <__pow5mult+0x20>
    d108:	subs	r2, r3, #1
    d10a:	ldr	r5, [pc, #44]	; (d138 <__pow5mult+0x9c>)
    d10c:	movs	r3, #0
    d10e:	ldr.w	r2, [r5, r2, lsl #2]
    d112:	bl	ce3c <__multadd>
    d116:	mov	r6, r0
    d118:	b.n	d0ac <__pow5mult+0x10>
    d11a:	movs	r1, #1
    d11c:	mov	r0, r7
    d11e:	bl	cddc <_Balloc>
    d122:	movw	r1, #625	; 0x271
    d126:	movs	r2, #1
    d128:	movs	r3, #0
    d12a:	str	r1, [r0, #20]
    d12c:	str	r2, [r0, #16]
    d12e:	mov	r5, r0
    d130:	str	r0, [r7, #72]	; 0x48
    d132:	str	r3, [r0, #0]
    d134:	b.n	d0b4 <__pow5mult+0x18>
    d136:	nop
    d138:	.word	0x000104f0

0000d13c <__lshift>:
    d13c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d140:	mov	r9, r2
    d142:	ldr	r2, [r1, #16]
    d144:	ldr	r3, [r1, #8]
    d146:	mov.w	r4, r9, asr #5
    d14a:	add.w	r8, r4, r2
    d14e:	add.w	r5, r8, #1
    d152:	cmp	r5, r3
    d154:	mov	r6, r1
    d156:	mov	sl, r0
    d158:	ldr	r1, [r1, #4]
    d15a:	ble.n	d166 <__lshift+0x2a>
    d15c:	lsls	r3, r3, #1
    d15e:	cmp	r5, r3
    d160:	add.w	r1, r1, #1
    d164:	bgt.n	d15c <__lshift+0x20>
    d166:	mov	r0, sl
    d168:	bl	cddc <_Balloc>
    d16c:	cmp	r4, #0
    d16e:	add.w	r2, r0, #20
    d172:	ble.n	d1e6 <__lshift+0xaa>
    d174:	add.w	r3, r2, r4, lsl #2
    d178:	movs	r1, #0
    d17a:	str.w	r1, [r2], #4
    d17e:	cmp	r3, r2
    d180:	bne.n	d17a <__lshift+0x3e>
    d182:	ldr	r4, [r6, #16]
    d184:	add.w	r1, r6, #20
    d188:	ands.w	r9, r9, #31
    d18c:	add.w	lr, r1, r4, lsl #2
    d190:	beq.n	d1d6 <__lshift+0x9a>
    d192:	rsb	r2, r9, #32
    d196:	movs	r4, #0
    d198:	ldr	r7, [r1, #0]
    d19a:	lsl.w	ip, r7, r9
    d19e:	orr.w	r4, ip, r4
    d1a2:	mov	ip, r3
    d1a4:	str.w	r4, [r3], #4
    d1a8:	ldr.w	r4, [r1], #4
    d1ac:	cmp	lr, r1
    d1ae:	lsr.w	r4, r4, r2
    d1b2:	bhi.n	d198 <__lshift+0x5c>
    d1b4:	str.w	r4, [ip, #4]
    d1b8:	cbz	r4, d1be <__lshift+0x82>
    d1ba:	add.w	r5, r8, #2
    d1be:	ldr.w	r3, [sl, #76]	; 0x4c
    d1c2:	ldr	r2, [r6, #4]
    d1c4:	subs	r5, #1
    d1c6:	ldr.w	r1, [r3, r2, lsl #2]
    d1ca:	str	r5, [r0, #16]
    d1cc:	str	r1, [r6, #0]
    d1ce:	str.w	r6, [r3, r2, lsl #2]
    d1d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d1d6:	subs	r3, #4
    d1d8:	ldr.w	r2, [r1], #4
    d1dc:	str.w	r2, [r3, #4]!
    d1e0:	cmp	lr, r1
    d1e2:	bhi.n	d1d8 <__lshift+0x9c>
    d1e4:	b.n	d1be <__lshift+0x82>
    d1e6:	mov	r3, r2
    d1e8:	b.n	d182 <__lshift+0x46>
    d1ea:	nop

0000d1ec <__mcmp>:
    d1ec:	ldr	r2, [r0, #16]
    d1ee:	ldr	r3, [r1, #16]
    d1f0:	subs	r2, r2, r3
    d1f2:	bne.n	d21c <__mcmp+0x30>
    d1f4:	lsls	r3, r3, #2
    d1f6:	adds	r0, #20
    d1f8:	adds	r1, #20
    d1fa:	add	r1, r3
    d1fc:	push	{r4}
    d1fe:	add	r3, r0
    d200:	b.n	d206 <__mcmp+0x1a>
    d202:	cmp	r0, r3
    d204:	bcs.n	d220 <__mcmp+0x34>
    d206:	ldr.w	r4, [r3, #-4]!
    d20a:	ldr.w	r2, [r1, #-4]!
    d20e:	cmp	r4, r2
    d210:	beq.n	d202 <__mcmp+0x16>
    d212:	bcc.n	d228 <__mcmp+0x3c>
    d214:	movs	r0, #1
    d216:	ldr.w	r4, [sp], #4
    d21a:	bx	lr
    d21c:	mov	r0, r2
    d21e:	bx	lr
    d220:	movs	r0, #0
    d222:	ldr.w	r4, [sp], #4
    d226:	bx	lr
    d228:	mov.w	r0, #4294967295
    d22c:	b.n	d216 <__mcmp+0x2a>
    d22e:	nop

0000d230 <__mdiff>:
    d230:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d234:	ldr	r3, [r1, #16]
    d236:	mov	r7, r1
    d238:	ldr	r1, [r2, #16]
    d23a:	subs	r3, r3, r1
    d23c:	cmp	r3, #0
    d23e:	mov	r8, r2
    d240:	bne.n	d272 <__mdiff+0x42>
    d242:	lsls	r1, r1, #2
    d244:	add.w	r2, r7, #20
    d248:	add.w	r5, r8, #20
    d24c:	adds	r3, r2, r1
    d24e:	add	r1, r5
    d250:	b.n	d256 <__mdiff+0x26>
    d252:	cmp	r2, r3
    d254:	bcs.n	d314 <__mdiff+0xe4>
    d256:	ldr.w	r6, [r3, #-4]!
    d25a:	ldr.w	r4, [r1, #-4]!
    d25e:	cmp	r6, r4
    d260:	beq.n	d252 <__mdiff+0x22>
    d262:	bcs.n	d326 <__mdiff+0xf6>
    d264:	mov	r3, r7
    d266:	mov	r4, r2
    d268:	mov	r7, r8
    d26a:	mov.w	r9, #1
    d26e:	mov	r8, r3
    d270:	b.n	d280 <__mdiff+0x50>
    d272:	blt.n	d330 <__mdiff+0x100>
    d274:	add.w	r5, r7, #20
    d278:	add.w	r4, r2, #20
    d27c:	mov.w	r9, #0
    d280:	ldr	r1, [r7, #4]
    d282:	bl	cddc <_Balloc>
    d286:	ldr.w	r3, [r8, #16]
    d28a:	ldr	r6, [r7, #16]
    d28c:	str.w	r9, [r0, #12]
    d290:	add.w	ip, r4, r3, lsl #2
    d294:	mov	lr, r4
    d296:	add.w	r7, r5, r6, lsl #2
    d29a:	add.w	r4, r0, #20
    d29e:	movs	r3, #0
    d2a0:	ldr.w	r1, [lr], #4
    d2a4:	ldr.w	r8, [r5], #4
    d2a8:	uxth	r2, r1
    d2aa:	uxtah	r3, r3, r8
    d2ae:	lsrs	r1, r1, #16
    d2b0:	subs	r2, r3, r2
    d2b2:	rsb	r3, r1, r8, lsr #16
    d2b6:	add.w	r3, r3, r2, asr #16
    d2ba:	uxth	r2, r2
    d2bc:	orr.w	r2, r2, r3, lsl #16
    d2c0:	cmp	ip, lr
    d2c2:	str.w	r2, [r4], #4
    d2c6:	mov.w	r3, r3, asr #16
    d2ca:	bhi.n	d2a0 <__mdiff+0x70>
    d2cc:	cmp	r7, r5
    d2ce:	bls.n	d300 <__mdiff+0xd0>
    d2d0:	mov	ip, r4
    d2d2:	mov	r1, r5
    d2d4:	ldr.w	lr, [r1], #4
    d2d8:	uxtah	r2, r3, lr
    d2dc:	asrs	r3, r2, #16
    d2de:	add.w	r3, r3, lr, lsr #16
    d2e2:	uxth	r2, r2
    d2e4:	orr.w	r2, r2, r3, lsl #16
    d2e8:	cmp	r7, r1
    d2ea:	str.w	r2, [ip], #4
    d2ee:	mov.w	r3, r3, asr #16
    d2f2:	bhi.n	d2d4 <__mdiff+0xa4>
    d2f4:	mvns	r5, r5
    d2f6:	add	r5, r7
    d2f8:	bic.w	r5, r5, #3
    d2fc:	adds	r5, #4
    d2fe:	add	r4, r5
    d300:	subs	r4, #4
    d302:	cbnz	r2, d30e <__mdiff+0xde>
    d304:	ldr.w	r3, [r4, #-4]!
    d308:	subs	r6, #1
    d30a:	cmp	r3, #0
    d30c:	beq.n	d304 <__mdiff+0xd4>
    d30e:	str	r6, [r0, #16]
    d310:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d314:	movs	r1, #0
    d316:	bl	cddc <_Balloc>
    d31a:	movs	r2, #1
    d31c:	movs	r3, #0
    d31e:	str	r2, [r0, #16]
    d320:	str	r3, [r0, #20]
    d322:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d326:	mov	r4, r5
    d328:	mov.w	r9, #0
    d32c:	mov	r5, r2
    d32e:	b.n	d280 <__mdiff+0x50>
    d330:	mov	r3, r7
    d332:	add.w	r4, r7, #20
    d336:	add.w	r5, r8, #20
    d33a:	mov	r7, r8
    d33c:	mov.w	r9, #1
    d340:	mov	r8, r3
    d342:	b.n	d280 <__mdiff+0x50>

0000d344 <__d2b>:
    d344:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d348:	vmov	r6, r7, d0
    d34c:	sub	sp, #12
    d34e:	mov	r8, r1
    d350:	movs	r1, #1
    d352:	mov	r4, r7
    d354:	ubfx	r5, r7, #20, #11
    d358:	mov	r7, r2
    d35a:	bl	cddc <_Balloc>
    d35e:	ubfx	r4, r4, #0, #20
    d362:	mov	r9, r0
    d364:	cbz	r5, d36a <__d2b+0x26>
    d366:	orr.w	r4, r4, #1048576	; 0x100000
    d36a:	str	r4, [sp, #4]
    d36c:	cbz	r6, d3b6 <__d2b+0x72>
    d36e:	add	r0, sp, #8
    d370:	str.w	r6, [r0, #-8]!
    d374:	bl	cefc <__lo0bits>
    d378:	cmp	r0, #0
    d37a:	bne.n	d3e6 <__d2b+0xa2>
    d37c:	ldmia.w	sp, {r2, r3}
    d380:	str.w	r2, [r9, #20]
    d384:	cmp	r3, #0
    d386:	ite	eq
    d388:	moveq	r1, #1
    d38a:	movne	r1, #2
    d38c:	str.w	r3, [r9, #24]
    d390:	str.w	r1, [r9, #16]
    d394:	cbnz	r5, d3ce <__d2b+0x8a>
    d396:	add.w	r3, r9, r1, lsl #2
    d39a:	subw	r0, r0, #1074	; 0x432
    d39e:	str.w	r0, [r8]
    d3a2:	ldr	r0, [r3, #16]
    d3a4:	bl	cebc <__hi0bits>
    d3a8:	rsb	r0, r0, r1, lsl #5
    d3ac:	str	r0, [r7, #0]
    d3ae:	mov	r0, r9
    d3b0:	add	sp, #12
    d3b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d3b6:	add	r0, sp, #4
    d3b8:	bl	cefc <__lo0bits>
    d3bc:	ldr	r3, [sp, #4]
    d3be:	str.w	r3, [r9, #20]
    d3c2:	movs	r1, #1
    d3c4:	adds	r0, #32
    d3c6:	str.w	r1, [r9, #16]
    d3ca:	cmp	r5, #0
    d3cc:	beq.n	d396 <__d2b+0x52>
    d3ce:	subw	r5, r5, #1075	; 0x433
    d3d2:	add	r5, r0
    d3d4:	rsb	r0, r0, #53	; 0x35
    d3d8:	str.w	r5, [r8]
    d3dc:	str	r0, [r7, #0]
    d3de:	mov	r0, r9
    d3e0:	add	sp, #12
    d3e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d3e6:	ldmia.w	sp, {r2, r3}
    d3ea:	rsb	r1, r0, #32
    d3ee:	lsl.w	r1, r3, r1
    d3f2:	orrs	r2, r1
    d3f4:	lsrs	r3, r0
    d3f6:	str	r3, [sp, #4]
    d3f8:	str.w	r2, [r9, #20]
    d3fc:	b.n	d384 <__d2b+0x40>
    d3fe:	nop

0000d400 <_vasnprintf_r>:
    d400:	push	{r4, r5, r6, lr}
    d402:	mov	r5, r2
    d404:	sub	sp, #104	; 0x68
    d406:	ldr	r4, [r2, #0]
    d408:	cbz	r1, d40e <_vasnprintf_r+0xe>
    d40a:	cmp	r4, #0
    d40c:	bne.n	d444 <_vasnprintf_r+0x44>
    d40e:	movs	r4, #0
    d410:	mov.w	r2, #648	; 0x288
    d414:	strh.w	r2, [sp, #12]
    d418:	str	r4, [sp, #0]
    d41a:	str	r4, [sp, #16]
    d41c:	mov	r2, r3
    d41e:	movw	r6, #65535	; 0xffff
    d422:	ldr	r3, [sp, #120]	; 0x78
    d424:	str	r4, [sp, #8]
    d426:	mov	r1, sp
    d428:	str	r4, [sp, #20]
    d42a:	strh.w	r6, [sp, #14]
    d42e:	bl	e420 <_svfprintf_r>
    d432:	cmp	r0, #0
    d434:	blt.n	d45a <_vasnprintf_r+0x5a>
    d436:	ldr	r3, [sp, #0]
    d438:	str	r0, [r5, #0]
    d43a:	movs	r2, #0
    d43c:	strb	r2, [r3, #0]
    d43e:	ldr	r0, [sp, #16]
    d440:	add	sp, #104	; 0x68
    d442:	pop	{r4, r5, r6, pc}
    d444:	mov.w	r2, #1544	; 0x608
    d448:	str	r1, [sp, #0]
    d44a:	str	r1, [sp, #16]
    d44c:	strh.w	r2, [sp, #12]
    d450:	bge.n	d41c <_vasnprintf_r+0x1c>
    d452:	movs	r3, #139	; 0x8b
    d454:	str	r3, [r0, #0]
    d456:	movs	r0, #0
    d458:	b.n	d440 <_vasnprintf_r+0x40>
    d45a:	movs	r0, #0
    d45c:	b.n	d440 <_vasnprintf_r+0x40>
    d45e:	nop

0000d460 <_calloc_r>:
    d460:	push	{r4, lr}
    d462:	mul.w	r1, r2, r1
    d466:	bl	bb30 <_malloc_r>
    d46a:	mov	r4, r0
    d46c:	cbz	r0, d4a6 <_calloc_r+0x46>
    d46e:	ldr.w	r2, [r0, #-4]
    d472:	bic.w	r2, r2, #3
    d476:	subs	r2, #4
    d478:	cmp	r2, #36	; 0x24
    d47a:	bhi.n	d4ae <_calloc_r+0x4e>
    d47c:	cmp	r2, #19
    d47e:	bls.n	d4aa <_calloc_r+0x4a>
    d480:	movs	r3, #0
    d482:	cmp	r2, #27
    d484:	str	r3, [r0, #0]
    d486:	str	r3, [r0, #4]
    d488:	bls.n	d4b8 <_calloc_r+0x58>
    d48a:	cmp	r2, #36	; 0x24
    d48c:	str	r3, [r0, #8]
    d48e:	str	r3, [r0, #12]
    d490:	iteee	ne
    d492:	addne.w	r2, r0, #16
    d496:	streq	r3, [r0, #16]
    d498:	streq	r3, [r0, #20]
    d49a:	addeq.w	r2, r0, #24
    d49e:	movs	r3, #0
    d4a0:	str	r3, [r2, #0]
    d4a2:	str	r3, [r2, #4]
    d4a4:	str	r3, [r2, #8]
    d4a6:	mov	r0, r4
    d4a8:	pop	{r4, pc}
    d4aa:	mov	r2, r0
    d4ac:	b.n	d49e <_calloc_r+0x3e>
    d4ae:	movs	r1, #0
    d4b0:	bl	c29c <memset>
    d4b4:	mov	r0, r4
    d4b6:	pop	{r4, pc}
    d4b8:	add.w	r2, r0, #8
    d4bc:	b.n	d49e <_calloc_r+0x3e>
    d4be:	nop

0000d4c0 <quorem>:
    d4c0:	ldr	r2, [r0, #16]
    d4c2:	ldr	r3, [r1, #16]
    d4c4:	cmp	r3, r2
    d4c6:	bgt.w	d5e4 <quorem+0x124>
    d4ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4ce:	add.w	r8, r3, #4294967295
    d4d2:	add.w	r7, r1, #20
    d4d6:	add.w	fp, r0, #20
    d4da:	ldr.w	r2, [r7, r8, lsl #2]
    d4de:	ldr.w	r3, [fp, r8, lsl #2]
    d4e2:	mov.w	r4, r8, lsl #2
    d4e6:	sub	sp, #12
    d4e8:	adds	r2, #1
    d4ea:	udiv	r9, r3, r2
    d4ee:	add.w	r3, fp, r4
    d4f2:	str	r4, [sp, #0]
    d4f4:	add.w	sl, r7, r4
    d4f8:	str	r3, [sp, #4]
    d4fa:	cmp.w	r9, #0
    d4fe:	beq.n	d574 <quorem+0xb4>
    d500:	movs	r5, #0
    d502:	mov	ip, r7
    d504:	mov	lr, fp
    d506:	mov	r3, r5
    d508:	ldr.w	r6, [ip], #4
    d50c:	ldr.w	r2, [lr]
    d510:	uxth	r4, r6
    d512:	mla	r5, r9, r4, r5
    d516:	lsrs	r6, r6, #16
    d518:	lsrs	r4, r5, #16
    d51a:	mla	r4, r9, r6, r4
    d51e:	uxth	r5, r5
    d520:	subs	r3, r3, r5
    d522:	uxth	r6, r4
    d524:	uxtah	r3, r3, r2
    d528:	rsb	r6, r6, r2, lsr #16
    d52c:	add.w	r6, r6, r3, asr #16
    d530:	uxth	r3, r3
    d532:	orr.w	r3, r3, r6, lsl #16
    d536:	cmp	sl, ip
    d538:	str.w	r3, [lr], #4
    d53c:	mov.w	r5, r4, lsr #16
    d540:	mov.w	r3, r6, asr #16
    d544:	bcs.n	d508 <quorem+0x48>
    d546:	ldr	r3, [sp, #0]
    d548:	ldr.w	r3, [fp, r3]
    d54c:	cbnz	r3, d574 <quorem+0xb4>
    d54e:	ldr	r4, [sp, #4]
    d550:	subs	r3, r4, #4
    d552:	cmp	fp, r3
    d554:	bcs.n	d570 <quorem+0xb0>
    d556:	ldr.w	r3, [r4, #-4]
    d55a:	cbnz	r3, d570 <quorem+0xb0>
    d55c:	sub.w	r3, r4, #8
    d560:	b.n	d568 <quorem+0xa8>
    d562:	ldr	r2, [r3, #0]
    d564:	subs	r3, #4
    d566:	cbnz	r2, d570 <quorem+0xb0>
    d568:	cmp	fp, r3
    d56a:	add.w	r8, r8, #4294967295
    d56e:	bcc.n	d562 <quorem+0xa2>
    d570:	str.w	r8, [r0, #16]
    d574:	mov	r4, r0
    d576:	bl	d1ec <__mcmp>
    d57a:	cmp	r0, #0
    d57c:	blt.n	d5dc <quorem+0x11c>
    d57e:	add.w	r9, r9, #1
    d582:	mov	r5, fp
    d584:	movs	r3, #0
    d586:	ldr.w	r1, [r7], #4
    d58a:	ldr	r0, [r5, #0]
    d58c:	uxth	r2, r1
    d58e:	subs	r2, r3, r2
    d590:	lsrs	r1, r1, #16
    d592:	uxtah	r2, r2, r0
    d596:	rsb	r3, r1, r0, lsr #16
    d59a:	add.w	r3, r3, r2, asr #16
    d59e:	uxth	r1, r2
    d5a0:	orr.w	r1, r1, r3, lsl #16
    d5a4:	cmp	sl, r7
    d5a6:	str.w	r1, [r5], #4
    d5aa:	mov.w	r3, r3, asr #16
    d5ae:	bcs.n	d586 <quorem+0xc6>
    d5b0:	ldr.w	r2, [fp, r8, lsl #2]
    d5b4:	add.w	r3, fp, r8, lsl #2
    d5b8:	cbnz	r2, d5dc <quorem+0x11c>
    d5ba:	subs	r2, r3, #4
    d5bc:	cmp	fp, r2
    d5be:	bcs.n	d5d8 <quorem+0x118>
    d5c0:	ldr.w	r2, [r3, #-4]
    d5c4:	cbnz	r2, d5d8 <quorem+0x118>
    d5c6:	subs	r3, #8
    d5c8:	b.n	d5d0 <quorem+0x110>
    d5ca:	ldr	r2, [r3, #0]
    d5cc:	subs	r3, #4
    d5ce:	cbnz	r2, d5d8 <quorem+0x118>
    d5d0:	cmp	fp, r3
    d5d2:	add.w	r8, r8, #4294967295
    d5d6:	bcc.n	d5ca <quorem+0x10a>
    d5d8:	str.w	r8, [r4, #16]
    d5dc:	mov	r0, r9
    d5de:	add	sp, #12
    d5e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5e4:	movs	r0, #0
    d5e6:	bx	lr

0000d5e8 <_dtoa_r>:
    d5e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5ec:	vmov	r6, r7, d0
    d5f0:	sub	sp, #108	; 0x6c
    d5f2:	ldr	r4, [r0, #64]	; 0x40
    d5f4:	ldr	r5, [sp, #144]	; 0x90
    d5f6:	str	r1, [sp, #0]
    d5f8:	mov	r9, r0
    d5fa:	str	r2, [sp, #20]
    d5fc:	str	r3, [sp, #12]
    d5fe:	vmov	sl, s0
    d602:	mov	fp, r7
    d604:	cbz	r4, d61c <_dtoa_r+0x34>
    d606:	ldr	r2, [r0, #68]	; 0x44
    d608:	str	r2, [r4, #4]
    d60a:	movs	r3, #1
    d60c:	lsls	r3, r2
    d60e:	str	r3, [r4, #8]
    d610:	mov	r1, r4
    d612:	bl	ce28 <_Bfree>
    d616:	movs	r3, #0
    d618:	str.w	r3, [r9, #64]	; 0x40
    d61c:	cmp.w	fp, #0
    d620:	mov	r4, fp
    d622:	blt.n	d68e <_dtoa_r+0xa6>
    d624:	movs	r3, #0
    d626:	str	r3, [r5, #0]
    d628:	ldr	r3, [pc, #644]	; (d8b0 <_dtoa_r+0x2c8>)
    d62a:	mov	r2, r3
    d62c:	ands	r3, r4
    d62e:	cmp	r3, r2
    d630:	beq.n	d660 <_dtoa_r+0x78>
    d632:	movs	r2, #0
    d634:	movs	r3, #0
    d636:	mov	r0, sl
    d638:	mov	r1, fp
    d63a:	bl	b6b0 <__aeabi_dcmpeq>
    d63e:	mov	r6, sl
    d640:	mov	r7, fp
    d642:	mov	r8, r0
    d644:	cbz	r0, d69a <_dtoa_r+0xb2>
    d646:	ldr	r2, [sp, #12]
    d648:	movs	r3, #1
    d64a:	str	r3, [r2, #0]
    d64c:	ldr	r3, [sp, #148]	; 0x94
    d64e:	cmp	r3, #0
    d650:	beq.w	d7d0 <_dtoa_r+0x1e8>
    d654:	ldr	r0, [pc, #604]	; (d8b4 <_dtoa_r+0x2cc>)
    d656:	str	r0, [r3, #0]
    d658:	subs	r0, #1
    d65a:	add	sp, #108	; 0x6c
    d65c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d660:	ldr	r2, [sp, #12]
    d662:	movw	r3, #9999	; 0x270f
    d666:	str	r3, [r2, #0]
    d668:	cmp.w	sl, #0
    d66c:	beq.w	d7a4 <_dtoa_r+0x1bc>
    d670:	ldr	r0, [pc, #580]	; (d8b8 <_dtoa_r+0x2d0>)
    d672:	ldr	r3, [sp, #148]	; 0x94
    d674:	cmp	r3, #0
    d676:	beq.n	d65a <_dtoa_r+0x72>
    d678:	ldrb	r3, [r0, #3]
    d67a:	cmp	r3, #0
    d67c:	beq.w	d7d4 <_dtoa_r+0x1ec>
    d680:	add.w	r3, r0, #8
    d684:	ldr	r2, [sp, #148]	; 0x94
    d686:	str	r3, [r2, #0]
    d688:	add	sp, #108	; 0x6c
    d68a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d68e:	movs	r3, #1
    d690:	bic.w	r4, fp, #2147483648	; 0x80000000
    d694:	str	r3, [r5, #0]
    d696:	mov	fp, r4
    d698:	b.n	d628 <_dtoa_r+0x40>
    d69a:	add	r2, sp, #96	; 0x60
    d69c:	add	r1, sp, #100	; 0x64
    d69e:	vmov	d0, r6, r7
    d6a2:	mov	r0, r9
    d6a4:	bl	d344 <__d2b>
    d6a8:	lsrs	r5, r4, #20
    d6aa:	str	r0, [sp, #40]	; 0x28
    d6ac:	bne.w	d7b6 <_dtoa_r+0x1ce>
    d6b0:	ldr	r5, [sp, #96]	; 0x60
    d6b2:	ldr	r6, [sp, #100]	; 0x64
    d6b4:	add	r6, r5
    d6b6:	addw	r3, r6, #1074	; 0x432
    d6ba:	cmp	r3, #32
    d6bc:	ble.w	dbd0 <_dtoa_r+0x5e8>
    d6c0:	rsb	r3, r3, #64	; 0x40
    d6c4:	addw	r0, r6, #1042	; 0x412
    d6c8:	lsls	r4, r3
    d6ca:	lsr.w	r0, sl, r0
    d6ce:	orrs	r0, r4
    d6d0:	bl	b0f4 <__aeabi_ui2d>
    d6d4:	movs	r3, #1
    d6d6:	subs	r4, r6, #1
    d6d8:	sub.w	r1, r1, #32505856	; 0x1f00000
    d6dc:	str	r3, [sp, #60]	; 0x3c
    d6de:	movs	r2, #0
    d6e0:	ldr	r3, [pc, #472]	; (d8bc <_dtoa_r+0x2d4>)
    d6e2:	bl	ae78 <__aeabi_dsub>
    d6e6:	add	r3, pc, #432	; (adr r3, d898 <_dtoa_r+0x2b0>)
    d6e8:	ldrd	r2, r3, [r3]
    d6ec:	bl	b1e0 <__aeabi_dmul>
    d6f0:	add	r3, pc, #428	; (adr r3, d8a0 <_dtoa_r+0x2b8>)
    d6f2:	ldrd	r2, r3, [r3]
    d6f6:	bl	ae7c <__adddf3>
    d6fa:	mov	r6, r0
    d6fc:	mov	r0, r4
    d6fe:	mov	r7, r1
    d700:	bl	b114 <__aeabi_i2d>
    d704:	add	r3, pc, #416	; (adr r3, d8a8 <_dtoa_r+0x2c0>)
    d706:	ldrd	r2, r3, [r3]
    d70a:	bl	b1e0 <__aeabi_dmul>
    d70e:	mov	r2, r0
    d710:	mov	r3, r1
    d712:	mov	r0, r6
    d714:	mov	r1, r7
    d716:	bl	ae7c <__adddf3>
    d71a:	mov	r6, r0
    d71c:	mov	r7, r1
    d71e:	bl	b740 <__aeabi_d2iz>
    d722:	movs	r2, #0
    d724:	str	r0, [sp, #16]
    d726:	movs	r3, #0
    d728:	mov	r0, r6
    d72a:	mov	r1, r7
    d72c:	bl	b6c4 <__aeabi_dcmplt>
    d730:	cmp	r0, #0
    d732:	bne.w	db86 <_dtoa_r+0x59e>
    d736:	ldr	r6, [sp, #16]
    d738:	cmp	r6, #22
    d73a:	bhi.w	db80 <_dtoa_r+0x598>
    d73e:	ldr	r3, [pc, #384]	; (d8c0 <_dtoa_r+0x2d8>)
    d740:	add.w	r3, r3, r6, lsl #3
    d744:	ldrd	r0, r1, [r3]
    d748:	mov	r2, sl
    d74a:	mov	r3, fp
    d74c:	bl	b700 <__aeabi_dcmpgt>
    d750:	cmp	r0, #0
    d752:	beq.w	dbda <_dtoa_r+0x5f2>
    d756:	subs	r3, r6, #1
    d758:	str	r3, [sp, #16]
    d75a:	movs	r3, #0
    d75c:	str	r3, [sp, #52]	; 0x34
    d75e:	subs	r5, r5, r4
    d760:	subs.w	r8, r5, #1
    d764:	bmi.w	dbbc <_dtoa_r+0x5d4>
    d768:	movs	r3, #0
    d76a:	str	r3, [sp, #28]
    d76c:	ldr	r3, [sp, #16]
    d76e:	cmp	r3, #0
    d770:	blt.w	dbaa <_dtoa_r+0x5c2>
    d774:	add	r8, r3
    d776:	str	r3, [sp, #48]	; 0x30
    d778:	movs	r3, #0
    d77a:	str	r3, [sp, #24]
    d77c:	ldr	r3, [sp, #0]
    d77e:	cmp	r3, #9
    d780:	bhi.n	d7d8 <_dtoa_r+0x1f0>
    d782:	cmp	r3, #5
    d784:	ble.w	e410 <_dtoa_r+0xe28>
    d788:	subs	r3, #4
    d78a:	str	r3, [sp, #0]
    d78c:	movs	r6, #0
    d78e:	ldr	r3, [sp, #0]
    d790:	subs	r3, #2
    d792:	cmp	r3, #3
    d794:	bhi.w	e3de <_dtoa_r+0xdf6>
    d798:	tbh	[pc, r3, lsl #1]
    d79c:	.word	0x0224032b
    d7a0:	.word	0x04500336
    d7a4:	ldr	r3, [pc, #272]	; (d8b8 <_dtoa_r+0x2d0>)
    d7a6:	ldr	r2, [pc, #284]	; (d8c4 <_dtoa_r+0x2dc>)
    d7a8:	ubfx	r0, r4, #0, #20
    d7ac:	cmp	r0, #0
    d7ae:	ite	ne
    d7b0:	movne	r0, r3
    d7b2:	moveq	r0, r2
    d7b4:	b.n	d672 <_dtoa_r+0x8a>
    d7b6:	ubfx	r3, fp, #0, #20
    d7ba:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    d7be:	subw	r4, r5, #1023	; 0x3ff
    d7c2:	mov	r0, sl
    d7c4:	str.w	r8, [sp, #60]	; 0x3c
    d7c8:	orr.w	r1, r1, #3145728	; 0x300000
    d7cc:	ldr	r5, [sp, #96]	; 0x60
    d7ce:	b.n	d6de <_dtoa_r+0xf6>
    d7d0:	ldr	r0, [pc, #244]	; (d8c8 <_dtoa_r+0x2e0>)
    d7d2:	b.n	d65a <_dtoa_r+0x72>
    d7d4:	adds	r3, r0, #3
    d7d6:	b.n	d684 <_dtoa_r+0x9c>
    d7d8:	movs	r1, #0
    d7da:	str.w	r1, [r9, #68]	; 0x44
    d7de:	mov	r0, r9
    d7e0:	mov	r4, r1
    d7e2:	str	r1, [sp, #0]
    d7e4:	bl	cddc <_Balloc>
    d7e8:	mov.w	r3, #4294967295
    d7ec:	str	r3, [sp, #32]
    d7ee:	str	r3, [sp, #56]	; 0x38
    d7f0:	movs	r3, #1
    d7f2:	str	r0, [sp, #36]	; 0x24
    d7f4:	str.w	r0, [r9, #64]	; 0x40
    d7f8:	str	r4, [sp, #20]
    d7fa:	str	r3, [sp, #44]	; 0x2c
    d7fc:	ldr	r3, [sp, #100]	; 0x64
    d7fe:	cmp	r3, #0
    d800:	blt.w	d9a4 <_dtoa_r+0x3bc>
    d804:	ldr	r2, [sp, #16]
    d806:	cmp	r2, #14
    d808:	bgt.w	d9a4 <_dtoa_r+0x3bc>
    d80c:	ldr	r3, [pc, #176]	; (d8c0 <_dtoa_r+0x2d8>)
    d80e:	add.w	r3, r3, r2, lsl #3
    d812:	vldr	d7, [r3]
    d816:	ldr	r3, [sp, #20]
    d818:	cmp	r3, #0
    d81a:	vstr	d7, [sp]
    d81e:	blt.w	de1e <_dtoa_r+0x836>
    d822:	mov	r6, sl
    d824:	mov	r7, fp
    d826:	ldrd	sl, fp, [sp]
    d82a:	mov	r0, r6
    d82c:	mov	r2, sl
    d82e:	mov	r3, fp
    d830:	mov	r1, r7
    d832:	bl	b434 <__aeabi_ddiv>
    d836:	bl	b740 <__aeabi_d2iz>
    d83a:	mov	r4, r0
    d83c:	bl	b114 <__aeabi_i2d>
    d840:	mov	r2, sl
    d842:	mov	r3, fp
    d844:	bl	b1e0 <__aeabi_dmul>
    d848:	mov	r3, r1
    d84a:	mov	r2, r0
    d84c:	mov	r1, r7
    d84e:	mov	r0, r6
    d850:	bl	ae78 <__aeabi_dsub>
    d854:	ldr	r5, [sp, #36]	; 0x24
    d856:	add.w	r3, r4, #48	; 0x30
    d85a:	strb	r3, [r5, #0]
    d85c:	ldr	r3, [sp, #32]
    d85e:	cmp	r3, #1
    d860:	mov	r6, r0
    d862:	mov	r7, r1
    d864:	add.w	r5, r5, #1
    d868:	beq.n	d92e <_dtoa_r+0x346>
    d86a:	movs	r2, #0
    d86c:	ldr	r3, [pc, #92]	; (d8cc <_dtoa_r+0x2e4>)
    d86e:	bl	b1e0 <__aeabi_dmul>
    d872:	movs	r2, #0
    d874:	movs	r3, #0
    d876:	mov	r6, r0
    d878:	mov	r7, r1
    d87a:	bl	b6b0 <__aeabi_dcmpeq>
    d87e:	cmp	r0, #0
    d880:	bne.n	d97e <_dtoa_r+0x396>
    d882:	str.w	r9, [sp, #20]
    d886:	ldr.w	sl, [sp, #32]
    d88a:	ldr.w	fp, [sp, #36]	; 0x24
    d88e:	ldrd	r8, r9, [sp]
    d892:	b.n	d8e6 <_dtoa_r+0x2fe>
    d894:	nop.w
    d898:	.word	0x636f4361
    d89c:	.word	0x3fd287a7
    d8a0:	.word	0x8b60c8b3
    d8a4:	.word	0x3fc68a28
    d8a8:	.word	0x509f79fb
    d8ac:	.word	0x3fd34413
    d8b0:	.word	0x7ff00000
    d8b4:	.word	0x0001050d
    d8b8:	.word	0x00010508
    d8bc:	.word	0x3ff80000
    d8c0:	.word	0x00010400
    d8c4:	.word	0x000104fc
    d8c8:	.word	0x0001050c
    d8cc:	.word	0x40240000
    d8d0:	bl	b1e0 <__aeabi_dmul>
    d8d4:	movs	r2, #0
    d8d6:	movs	r3, #0
    d8d8:	mov	r6, r0
    d8da:	mov	r7, r1
    d8dc:	bl	b6b0 <__aeabi_dcmpeq>
    d8e0:	cmp	r0, #0
    d8e2:	bne.w	e042 <_dtoa_r+0xa5a>
    d8e6:	mov	r2, r8
    d8e8:	mov	r3, r9
    d8ea:	mov	r0, r6
    d8ec:	mov	r1, r7
    d8ee:	bl	b434 <__aeabi_ddiv>
    d8f2:	bl	b740 <__aeabi_d2iz>
    d8f6:	mov	r4, r0
    d8f8:	bl	b114 <__aeabi_i2d>
    d8fc:	mov	r2, r8
    d8fe:	mov	r3, r9
    d900:	bl	b1e0 <__aeabi_dmul>
    d904:	mov	r2, r0
    d906:	mov	r3, r1
    d908:	mov	r0, r6
    d90a:	mov	r1, r7
    d90c:	bl	ae78 <__aeabi_dsub>
    d910:	add.w	lr, r4, #48	; 0x30
    d914:	strb.w	lr, [r5], #1
    d918:	rsb	lr, fp, r5
    d91c:	cmp	lr, sl
    d91e:	mov	r6, r0
    d920:	mov	r7, r1
    d922:	mov.w	r2, #0
    d926:	ldr	r3, [pc, #696]	; (dbe0 <_dtoa_r+0x5f8>)
    d928:	bne.n	d8d0 <_dtoa_r+0x2e8>
    d92a:	ldr.w	r9, [sp, #20]
    d92e:	mov	r2, r6
    d930:	mov	r3, r7
    d932:	mov	r0, r6
    d934:	mov	r1, r7
    d936:	bl	ae7c <__adddf3>
    d93a:	mov	r6, r0
    d93c:	mov	r7, r1
    d93e:	mov	r2, r0
    d940:	mov	r3, r1
    d942:	ldrd	r0, r1, [sp]
    d946:	bl	b6c4 <__aeabi_dcmplt>
    d94a:	cbnz	r0, d95e <_dtoa_r+0x376>
    d94c:	mov	r2, r6
    d94e:	mov	r3, r7
    d950:	ldrd	r0, r1, [sp]
    d954:	bl	b6b0 <__aeabi_dcmpeq>
    d958:	cbz	r0, d97e <_dtoa_r+0x396>
    d95a:	lsls	r3, r4, #31
    d95c:	bpl.n	d97e <_dtoa_r+0x396>
    d95e:	ldrb.w	r4, [r5, #-1]
    d962:	ldr	r2, [sp, #36]	; 0x24
    d964:	subs	r3, r5, #1
    d966:	b.n	d972 <_dtoa_r+0x38a>
    d968:	cmp	r2, r3
    d96a:	beq.w	e166 <_dtoa_r+0xb7e>
    d96e:	ldrb.w	r4, [r3, #-1]!
    d972:	cmp	r4, #57	; 0x39
    d974:	add.w	r5, r3, #1
    d978:	beq.n	d968 <_dtoa_r+0x380>
    d97a:	adds	r4, #1
    d97c:	strb	r4, [r3, #0]
    d97e:	ldr	r1, [sp, #40]	; 0x28
    d980:	mov	r0, r9
    d982:	bl	ce28 <_Bfree>
    d986:	movs	r2, #0
    d988:	ldr	r3, [sp, #16]
    d98a:	strb	r2, [r5, #0]
    d98c:	ldr	r2, [sp, #12]
    d98e:	adds	r3, #1
    d990:	str	r3, [r2, #0]
    d992:	ldr	r3, [sp, #148]	; 0x94
    d994:	cmp	r3, #0
    d996:	beq.w	e0d0 <_dtoa_r+0xae8>
    d99a:	ldr	r0, [sp, #36]	; 0x24
    d99c:	str	r5, [r3, #0]
    d99e:	add	sp, #108	; 0x6c
    d9a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9a4:	ldr	r2, [sp, #44]	; 0x2c
    d9a6:	cmp	r2, #0
    d9a8:	beq.w	dbc8 <_dtoa_r+0x5e0>
    d9ac:	ldr	r2, [sp, #0]
    d9ae:	cmp	r2, #1
    d9b0:	ble.w	de62 <_dtoa_r+0x87a>
    d9b4:	ldr	r3, [sp, #32]
    d9b6:	ldr	r2, [sp, #24]
    d9b8:	subs	r7, r3, #1
    d9ba:	cmp	r2, r7
    d9bc:	blt.w	e0d6 <_dtoa_r+0xaee>
    d9c0:	subs	r7, r2, r7
    d9c2:	ldr	r3, [sp, #32]
    d9c4:	cmp	r3, #0
    d9c6:	blt.w	e2ca <_dtoa_r+0xce2>
    d9ca:	ldr	r5, [sp, #28]
    d9cc:	ldr	r3, [sp, #32]
    d9ce:	ldr	r2, [sp, #28]
    d9d0:	movs	r1, #1
    d9d2:	add	r2, r3
    d9d4:	mov	r0, r9
    d9d6:	str	r2, [sp, #28]
    d9d8:	add	r8, r3
    d9da:	bl	cf58 <__i2b>
    d9de:	mov	r6, r0
    d9e0:	cbz	r5, d9fc <_dtoa_r+0x414>
    d9e2:	cmp.w	r8, #0
    d9e6:	ble.n	d9fc <_dtoa_r+0x414>
    d9e8:	cmp	r5, r8
    d9ea:	ldr	r2, [sp, #28]
    d9ec:	mov	r3, r5
    d9ee:	it	ge
    d9f0:	movge	r3, r8
    d9f2:	subs	r2, r2, r3
    d9f4:	str	r2, [sp, #28]
    d9f6:	subs	r5, r5, r3
    d9f8:	rsb	r8, r3, r8
    d9fc:	ldr	r3, [sp, #24]
    d9fe:	cmp	r3, #0
    da00:	ble.w	dfee <_dtoa_r+0xa06>
    da04:	ldr	r2, [sp, #44]	; 0x2c
    da06:	cmp	r2, #0
    da08:	beq.w	de10 <_dtoa_r+0x828>
    da0c:	cmp	r7, #0
    da0e:	beq.w	de10 <_dtoa_r+0x828>
    da12:	mov	r1, r6
    da14:	mov	r2, r7
    da16:	mov	r0, r9
    da18:	bl	d09c <__pow5mult>
    da1c:	ldr	r2, [sp, #40]	; 0x28
    da1e:	mov	r1, r0
    da20:	mov	r6, r0
    da22:	mov	r0, r9
    da24:	bl	cf6c <__multiply>
    da28:	ldr	r1, [sp, #40]	; 0x28
    da2a:	mov	r4, r0
    da2c:	mov	r0, r9
    da2e:	bl	ce28 <_Bfree>
    da32:	ldr	r3, [sp, #24]
    da34:	subs	r3, r3, r7
    da36:	str	r3, [sp, #24]
    da38:	bne.w	de0e <_dtoa_r+0x826>
    da3c:	movs	r1, #1
    da3e:	mov	r0, r9
    da40:	bl	cf58 <__i2b>
    da44:	ldr	r3, [sp, #48]	; 0x30
    da46:	str	r0, [sp, #24]
    da48:	cmp	r3, #0
    da4a:	beq.w	de78 <_dtoa_r+0x890>
    da4e:	mov	r1, r0
    da50:	mov	r2, r3
    da52:	mov	r0, r9
    da54:	bl	d09c <__pow5mult>
    da58:	ldr	r3, [sp, #0]
    da5a:	str	r0, [sp, #24]
    da5c:	cmp	r3, #1
    da5e:	ble.w	e048 <_dtoa_r+0xa60>
    da62:	movs	r7, #0
    da64:	ldr	r2, [sp, #24]
    da66:	ldr	r3, [r2, #16]
    da68:	add.w	r3, r2, r3, lsl #2
    da6c:	ldr	r0, [r3, #16]
    da6e:	bl	cebc <__hi0bits>
    da72:	rsb	r0, r0, #32
    da76:	add	r0, r8
    da78:	ands.w	r0, r0, #31
    da7c:	beq.w	de74 <_dtoa_r+0x88c>
    da80:	rsb	r3, r0, #32
    da84:	cmp	r3, #4
    da86:	ble.w	e404 <_dtoa_r+0xe1c>
    da8a:	rsb	r0, r0, #28
    da8e:	ldr	r3, [sp, #28]
    da90:	add	r3, r0
    da92:	str	r3, [sp, #28]
    da94:	add	r5, r0
    da96:	add	r8, r0
    da98:	ldr	r3, [sp, #28]
    da9a:	cmp	r3, #0
    da9c:	ble.n	daaa <_dtoa_r+0x4c2>
    da9e:	mov	r1, r4
    daa0:	mov	r2, r3
    daa2:	mov	r0, r9
    daa4:	bl	d13c <__lshift>
    daa8:	mov	r4, r0
    daaa:	cmp.w	r8, #0
    daae:	ble.n	dabc <_dtoa_r+0x4d4>
    dab0:	mov	r2, r8
    dab2:	ldr	r1, [sp, #24]
    dab4:	mov	r0, r9
    dab6:	bl	d13c <__lshift>
    daba:	str	r0, [sp, #24]
    dabc:	ldr	r3, [sp, #52]	; 0x34
    dabe:	cmp	r3, #0
    dac0:	bne.w	dfb8 <_dtoa_r+0x9d0>
    dac4:	ldr	r3, [sp, #32]
    dac6:	cmp	r3, #0
    dac8:	ble.w	dff2 <_dtoa_r+0xa0a>
    dacc:	ldr	r3, [sp, #44]	; 0x2c
    dace:	cmp	r3, #0
    dad0:	bne.w	debc <_dtoa_r+0x8d4>
    dad4:	ldr.w	fp, [sp, #36]	; 0x24
    dad8:	ldr	r7, [sp, #32]
    dada:	ldr.w	r8, [sp, #24]
    dade:	mov	r5, fp
    dae0:	b.n	dae8 <_dtoa_r+0x500>
    dae2:	bl	ce3c <__multadd>
    dae6:	mov	r4, r0
    dae8:	mov	r1, r8
    daea:	mov	r0, r4
    daec:	bl	d4c0 <quorem>
    daf0:	add.w	sl, r0, #48	; 0x30
    daf4:	strb.w	sl, [r5], #1
    daf8:	rsb	r3, fp, r5
    dafc:	cmp	r3, r7
    dafe:	mov.w	r2, #10
    db02:	mov.w	r3, #0
    db06:	mov	r1, r4
    db08:	mov	r0, r9
    db0a:	blt.n	dae2 <_dtoa_r+0x4fa>
    db0c:	ldr	r3, [sp, #36]	; 0x24
    db0e:	ldr	r2, [sp, #32]
    db10:	cmp	r2, #1
    db12:	ite	ge
    db14:	addge	r3, r3, r2
    db16:	addlt	r3, #1
    db18:	mov	r5, r3
    db1a:	mov.w	fp, #0
    db1e:	mov	r1, r4
    db20:	movs	r2, #1
    db22:	mov	r0, r9
    db24:	bl	d13c <__lshift>
    db28:	ldr	r1, [sp, #24]
    db2a:	str	r0, [sp, #40]	; 0x28
    db2c:	bl	d1ec <__mcmp>
    db30:	cmp	r0, #0
    db32:	ble.w	e140 <_dtoa_r+0xb58>
    db36:	ldrb.w	r2, [r5, #-1]
    db3a:	ldr	r1, [sp, #36]	; 0x24
    db3c:	subs	r3, r5, #1
    db3e:	b.n	db4a <_dtoa_r+0x562>
    db40:	cmp	r3, r1
    db42:	beq.w	e02e <_dtoa_r+0xa46>
    db46:	ldrb.w	r2, [r3, #-1]!
    db4a:	cmp	r2, #57	; 0x39
    db4c:	add.w	r5, r3, #1
    db50:	beq.n	db40 <_dtoa_r+0x558>
    db52:	adds	r2, #1
    db54:	strb	r2, [r3, #0]
    db56:	ldr	r1, [sp, #24]
    db58:	mov	r0, r9
    db5a:	bl	ce28 <_Bfree>
    db5e:	cmp	r6, #0
    db60:	beq.w	d97e <_dtoa_r+0x396>
    db64:	cmp.w	fp, #0
    db68:	beq.n	db76 <_dtoa_r+0x58e>
    db6a:	cmp	fp, r6
    db6c:	beq.n	db76 <_dtoa_r+0x58e>
    db6e:	mov	r1, fp
    db70:	mov	r0, r9
    db72:	bl	ce28 <_Bfree>
    db76:	mov	r1, r6
    db78:	mov	r0, r9
    db7a:	bl	ce28 <_Bfree>
    db7e:	b.n	d97e <_dtoa_r+0x396>
    db80:	movs	r3, #1
    db82:	str	r3, [sp, #52]	; 0x34
    db84:	b.n	d75e <_dtoa_r+0x176>
    db86:	ldr.w	r8, [sp, #16]
    db8a:	mov	r0, r8
    db8c:	bl	b114 <__aeabi_i2d>
    db90:	mov	r2, r0
    db92:	mov	r3, r1
    db94:	mov	r0, r6
    db96:	mov	r1, r7
    db98:	bl	b6b0 <__aeabi_dcmpeq>
    db9c:	cmp	r0, #0
    db9e:	bne.w	d736 <_dtoa_r+0x14e>
    dba2:	add.w	r3, r8, #4294967295
    dba6:	str	r3, [sp, #16]
    dba8:	b.n	d736 <_dtoa_r+0x14e>
    dbaa:	ldr	r2, [sp, #28]
    dbac:	ldr	r3, [sp, #16]
    dbae:	subs	r2, r2, r3
    dbb0:	negs	r3, r3
    dbb2:	str	r3, [sp, #24]
    dbb4:	movs	r3, #0
    dbb6:	str	r2, [sp, #28]
    dbb8:	str	r3, [sp, #48]	; 0x30
    dbba:	b.n	d77c <_dtoa_r+0x194>
    dbbc:	rsb	r3, r8, #0
    dbc0:	str	r3, [sp, #28]
    dbc2:	mov.w	r8, #0
    dbc6:	b.n	d76c <_dtoa_r+0x184>
    dbc8:	ldr	r7, [sp, #24]
    dbca:	ldr	r5, [sp, #28]
    dbcc:	ldr	r6, [sp, #44]	; 0x2c
    dbce:	b.n	d9e0 <_dtoa_r+0x3f8>
    dbd0:	rsb	r4, r3, #32
    dbd4:	lsl.w	r0, sl, r4
    dbd8:	b.n	d6d0 <_dtoa_r+0xe8>
    dbda:	str	r0, [sp, #52]	; 0x34
    dbdc:	b.n	d75e <_dtoa_r+0x176>
    dbde:	nop
    dbe0:	.word	0x40240000
    dbe4:	movs	r3, #0
    dbe6:	str	r3, [sp, #44]	; 0x2c
    dbe8:	ldr	r3, [sp, #16]
    dbea:	ldr	r2, [sp, #20]
    dbec:	add	r3, r2
    dbee:	str	r3, [sp, #56]	; 0x38
    dbf0:	adds	r3, #1
    dbf2:	cmp	r3, #0
    dbf4:	str	r3, [sp, #32]
    dbf6:	ble.w	e0f4 <_dtoa_r+0xb0c>
    dbfa:	ldr	r4, [sp, #32]
    dbfc:	mov	r5, r4
    dbfe:	movs	r1, #0
    dc00:	cmp	r5, #23
    dc02:	str.w	r1, [r9, #68]	; 0x44
    dc06:	bls.n	dc20 <_dtoa_r+0x638>
    dc08:	movs	r2, #1
    dc0a:	movs	r3, #4
    dc0c:	lsls	r3, r3, #1
    dc0e:	add.w	r0, r3, #20
    dc12:	cmp	r0, r5
    dc14:	mov	r1, r2
    dc16:	add.w	r2, r2, #1
    dc1a:	bls.n	dc0c <_dtoa_r+0x624>
    dc1c:	str.w	r1, [r9, #68]	; 0x44
    dc20:	mov	r0, r9
    dc22:	bl	cddc <_Balloc>
    dc26:	cmp	r4, #14
    dc28:	str	r0, [sp, #36]	; 0x24
    dc2a:	str.w	r0, [r9, #64]	; 0x40
    dc2e:	bhi.w	d7fc <_dtoa_r+0x214>
    dc32:	cmp	r6, #0
    dc34:	beq.w	d7fc <_dtoa_r+0x214>
    dc38:	ldr	r1, [sp, #16]
    dc3a:	cmp	r1, #0
    dc3c:	strd	sl, fp, [sp, #64]	; 0x40
    dc40:	ble.w	e178 <_dtoa_r+0xb90>
    dc44:	ldr	r3, [pc, #576]	; (de88 <_dtoa_r+0x8a0>)
    dc46:	and.w	r2, r1, #15
    dc4a:	asrs	r6, r1, #4
    dc4c:	add.w	r3, r3, r2, lsl #3
    dc50:	lsls	r0, r6, #27
    dc52:	ldrd	r4, r5, [r3]
    dc56:	bpl.w	e0e6 <_dtoa_r+0xafe>
    dc5a:	ldr	r3, [pc, #560]	; (de8c <_dtoa_r+0x8a4>)
    dc5c:	mov	r0, sl
    dc5e:	mov	r1, fp
    dc60:	ldrd	r2, r3, [r3, #32]
    dc64:	bl	b434 <__aeabi_ddiv>
    dc68:	strd	r0, r1, [sp, #72]	; 0x48
    dc6c:	and.w	r6, r6, #15
    dc70:	mov.w	sl, #3
    dc74:	cbz	r6, dc98 <_dtoa_r+0x6b0>
    dc76:	ldr	r7, [pc, #532]	; (de8c <_dtoa_r+0x8a4>)
    dc78:	lsls	r1, r6, #31
    dc7a:	bpl.n	dc90 <_dtoa_r+0x6a8>
    dc7c:	mov	r0, r4
    dc7e:	mov	r1, r5
    dc80:	ldrd	r2, r3, [r7]
    dc84:	bl	b1e0 <__aeabi_dmul>
    dc88:	add.w	sl, sl, #1
    dc8c:	mov	r4, r0
    dc8e:	mov	r5, r1
    dc90:	asrs	r6, r6, #1
    dc92:	add.w	r7, r7, #8
    dc96:	bne.n	dc78 <_dtoa_r+0x690>
    dc98:	mov	r2, r4
    dc9a:	mov	r3, r5
    dc9c:	ldrd	r0, r1, [sp, #72]	; 0x48
    dca0:	bl	b434 <__aeabi_ddiv>
    dca4:	mov	r6, r0
    dca6:	mov	r7, r1
    dca8:	ldr	r3, [sp, #52]	; 0x34
    dcaa:	cbz	r3, dcbe <_dtoa_r+0x6d6>
    dcac:	movs	r2, #0
    dcae:	ldr	r3, [pc, #480]	; (de90 <_dtoa_r+0x8a8>)
    dcb0:	mov	r0, r6
    dcb2:	mov	r1, r7
    dcb4:	bl	b6c4 <__aeabi_dcmplt>
    dcb8:	cmp	r0, #0
    dcba:	bne.w	e2f2 <_dtoa_r+0xd0a>
    dcbe:	mov	r0, sl
    dcc0:	bl	b114 <__aeabi_i2d>
    dcc4:	mov	r2, r6
    dcc6:	mov	r3, r7
    dcc8:	bl	b1e0 <__aeabi_dmul>
    dccc:	ldr	r3, [pc, #452]	; (de94 <_dtoa_r+0x8ac>)
    dcce:	movs	r2, #0
    dcd0:	bl	ae7c <__adddf3>
    dcd4:	ldr	r3, [sp, #32]
    dcd6:	mov	r4, r0
    dcd8:	sub.w	r5, r1, #54525952	; 0x3400000
    dcdc:	cmp	r3, #0
    dcde:	beq.w	e098 <_dtoa_r+0xab0>
    dce2:	ldr	r3, [sp, #16]
    dce4:	str	r3, [sp, #88]	; 0x58
    dce6:	ldr	r3, [sp, #32]
    dce8:	str	r3, [sp, #72]	; 0x48
    dcea:	ldr	r3, [sp, #44]	; 0x2c
    dcec:	cmp	r3, #0
    dcee:	beq.w	e21a <_dtoa_r+0xc32>
    dcf2:	ldr	r2, [sp, #72]	; 0x48
    dcf4:	ldr	r3, [pc, #400]	; (de88 <_dtoa_r+0x8a0>)
    dcf6:	ldr	r1, [pc, #416]	; (de98 <_dtoa_r+0x8b0>)
    dcf8:	add.w	r3, r3, r2, lsl #3
    dcfc:	ldrd	r2, r3, [r3, #-8]
    dd00:	movs	r0, #0
    dd02:	bl	b434 <__aeabi_ddiv>
    dd06:	mov	r2, r4
    dd08:	mov	r3, r5
    dd0a:	bl	ae78 <__aeabi_dsub>
    dd0e:	mov	sl, r0
    dd10:	mov	fp, r1
    dd12:	mov	r0, r6
    dd14:	mov	r1, r7
    dd16:	bl	b740 <__aeabi_d2iz>
    dd1a:	mov	r4, r0
    dd1c:	bl	b114 <__aeabi_i2d>
    dd20:	mov	r2, r0
    dd22:	mov	r3, r1
    dd24:	mov	r0, r6
    dd26:	mov	r1, r7
    dd28:	bl	ae78 <__aeabi_dsub>
    dd2c:	adds	r4, #48	; 0x30
    dd2e:	ldr	r5, [sp, #36]	; 0x24
    dd30:	uxtb	r4, r4
    dd32:	mov	r6, r0
    dd34:	mov	r7, r1
    dd36:	strb	r4, [r5, #0]
    dd38:	mov	r2, r0
    dd3a:	mov	r3, r1
    dd3c:	mov	r0, sl
    dd3e:	mov	r1, fp
    dd40:	adds	r5, #1
    dd42:	bl	b700 <__aeabi_dcmpgt>
    dd46:	cmp	r0, #0
    dd48:	bne.n	ddec <_dtoa_r+0x804>
    dd4a:	mov	r2, r6
    dd4c:	mov	r3, r7
    dd4e:	movs	r0, #0
    dd50:	ldr	r1, [pc, #316]	; (de90 <_dtoa_r+0x8a8>)
    dd52:	bl	ae78 <__aeabi_dsub>
    dd56:	mov	r2, r0
    dd58:	mov	r3, r1
    dd5a:	mov	r0, sl
    dd5c:	mov	r1, fp
    dd5e:	bl	b700 <__aeabi_dcmpgt>
    dd62:	cmp	r0, #0
    dd64:	bne.w	e378 <_dtoa_r+0xd90>
    dd68:	ldr	r2, [sp, #72]	; 0x48
    dd6a:	cmp	r2, #1
    dd6c:	ble.w	e15e <_dtoa_r+0xb76>
    dd70:	ldr	r3, [sp, #72]	; 0x48
    dd72:	ldr	r2, [sp, #36]	; 0x24
    dd74:	str.w	r8, [sp, #72]	; 0x48
    dd78:	add	r3, r2
    dd7a:	mov	r8, r3
    dd7c:	b.n	dd9a <_dtoa_r+0x7b2>
    dd7e:	movs	r0, #0
    dd80:	ldr	r1, [pc, #268]	; (de90 <_dtoa_r+0x8a8>)
    dd82:	bl	ae78 <__aeabi_dsub>
    dd86:	mov	r2, sl
    dd88:	mov	r3, fp
    dd8a:	bl	b6c4 <__aeabi_dcmplt>
    dd8e:	cmp	r0, #0
    dd90:	bne.w	e378 <_dtoa_r+0xd90>
    dd94:	cmp	r5, r8
    dd96:	beq.w	e15a <_dtoa_r+0xb72>
    dd9a:	mov	r0, sl
    dd9c:	mov	r1, fp
    dd9e:	movs	r2, #0
    dda0:	ldr	r3, [pc, #248]	; (de9c <_dtoa_r+0x8b4>)
    dda2:	bl	b1e0 <__aeabi_dmul>
    dda6:	movs	r2, #0
    dda8:	ldr	r3, [pc, #240]	; (de9c <_dtoa_r+0x8b4>)
    ddaa:	mov	sl, r0
    ddac:	mov	fp, r1
    ddae:	mov	r0, r6
    ddb0:	mov	r1, r7
    ddb2:	bl	b1e0 <__aeabi_dmul>
    ddb6:	mov	r7, r1
    ddb8:	mov	r6, r0
    ddba:	bl	b740 <__aeabi_d2iz>
    ddbe:	mov	r4, r0
    ddc0:	bl	b114 <__aeabi_i2d>
    ddc4:	mov	r2, r0
    ddc6:	mov	r3, r1
    ddc8:	mov	r0, r6
    ddca:	mov	r1, r7
    ddcc:	bl	ae78 <__aeabi_dsub>
    ddd0:	adds	r4, #48	; 0x30
    ddd2:	uxtb	r4, r4
    ddd4:	mov	r2, sl
    ddd6:	mov	r3, fp
    ddd8:	strb.w	r4, [r5], #1
    dddc:	mov	r6, r0
    ddde:	mov	r7, r1
    dde0:	bl	b6c4 <__aeabi_dcmplt>
    dde4:	mov	r2, r6
    dde6:	mov	r3, r7
    dde8:	cmp	r0, #0
    ddea:	beq.n	dd7e <_dtoa_r+0x796>
    ddec:	ldr	r3, [sp, #88]	; 0x58
    ddee:	str	r3, [sp, #16]
    ddf0:	b.n	d97e <_dtoa_r+0x396>
    ddf2:	movs	r3, #0
    ddf4:	str	r3, [sp, #44]	; 0x2c
    ddf6:	ldr	r3, [sp, #20]
    ddf8:	cmp	r3, #0
    ddfa:	ble.w	e0fe <_dtoa_r+0xb16>
    ddfe:	mov	r5, r3
    de00:	mov	r4, r3
    de02:	str	r3, [sp, #56]	; 0x38
    de04:	str	r3, [sp, #32]
    de06:	b.n	dbfe <_dtoa_r+0x616>
    de08:	movs	r3, #1
    de0a:	str	r3, [sp, #44]	; 0x2c
    de0c:	b.n	ddf6 <_dtoa_r+0x80e>
    de0e:	str	r4, [sp, #40]	; 0x28
    de10:	ldr	r2, [sp, #24]
    de12:	ldr	r1, [sp, #40]	; 0x28
    de14:	mov	r0, r9
    de16:	bl	d09c <__pow5mult>
    de1a:	mov	r4, r0
    de1c:	b.n	da3c <_dtoa_r+0x454>
    de1e:	ldr	r3, [sp, #32]
    de20:	cmp	r3, #0
    de22:	bgt.w	d822 <_dtoa_r+0x23a>
    de26:	bne.w	e0c8 <_dtoa_r+0xae0>
    de2a:	movs	r2, #0
    de2c:	ldr	r3, [pc, #112]	; (dea0 <_dtoa_r+0x8b8>)
    de2e:	ldrd	r0, r1, [sp]
    de32:	bl	b1e0 <__aeabi_dmul>
    de36:	mov	r3, fp
    de38:	mov	r2, sl
    de3a:	bl	b6ec <__aeabi_dcmpge>
    de3e:	ldr	r3, [sp, #32]
    de40:	str	r3, [sp, #24]
    de42:	mov	r6, r3
    de44:	cmp	r0, #0
    de46:	beq.w	e01e <_dtoa_r+0xa36>
    de4a:	ldr	r3, [sp, #20]
    de4c:	ldr	r5, [sp, #36]	; 0x24
    de4e:	mvns	r3, r3
    de50:	str	r3, [sp, #16]
    de52:	ldr	r1, [sp, #24]
    de54:	mov	r0, r9
    de56:	bl	ce28 <_Bfree>
    de5a:	cmp	r6, #0
    de5c:	beq.w	d97e <_dtoa_r+0x396>
    de60:	b.n	db76 <_dtoa_r+0x58e>
    de62:	ldr	r2, [sp, #60]	; 0x3c
    de64:	cmp	r2, #0
    de66:	beq.w	e2da <_dtoa_r+0xcf2>
    de6a:	addw	r3, r3, #1075	; 0x433
    de6e:	ldr	r7, [sp, #24]
    de70:	ldr	r5, [sp, #28]
    de72:	b.n	d9ce <_dtoa_r+0x3e6>
    de74:	movs	r0, #28
    de76:	b.n	da8e <_dtoa_r+0x4a6>
    de78:	ldr	r3, [sp, #0]
    de7a:	cmp	r3, #1
    de7c:	ble.w	e380 <_dtoa_r+0xd98>
    de80:	ldr	r7, [sp, #48]	; 0x30
    de82:	movs	r0, #1
    de84:	b.n	da76 <_dtoa_r+0x48e>
    de86:	nop
    de88:	.word	0x00010400
    de8c:	.word	0x000104c8
    de90:	.word	0x3ff00000
    de94:	.word	0x401c0000
    de98:	.word	0x3fe00000
    de9c:	.word	0x40240000
    dea0:	.word	0x40140000
    dea4:	mov	r1, r6
    dea6:	movs	r3, #0
    dea8:	movs	r2, #10
    deaa:	mov	r0, r9
    deac:	bl	ce3c <__multadd>
    deb0:	ldr	r3, [sp, #56]	; 0x38
    deb2:	cmp	r3, #0
    deb4:	mov	r6, r0
    deb6:	ble.w	e3d4 <_dtoa_r+0xdec>
    deba:	str	r3, [sp, #32]
    debc:	cmp	r5, #0
    debe:	ble.n	decc <_dtoa_r+0x8e4>
    dec0:	mov	r1, r6
    dec2:	mov	r2, r5
    dec4:	mov	r0, r9
    dec6:	bl	d13c <__lshift>
    deca:	mov	r6, r0
    decc:	cmp	r7, #0
    dece:	bne.w	e1ca <_dtoa_r+0xbe2>
    ded2:	mov	r8, r6
    ded4:	ldr	r3, [sp, #32]
    ded6:	ldr	r2, [sp, #36]	; 0x24
    ded8:	subs	r3, #1
    deda:	adds	r3, r2, r3
    dedc:	str	r3, [sp, #32]
    dede:	and.w	r3, sl, #1
    dee2:	str	r3, [sp, #40]	; 0x28
    dee4:	mov	r7, r2
    dee6:	ldr.w	fp, [sp, #24]
    deea:	mov	r0, r4
    deec:	mov	r1, fp
    deee:	bl	d4c0 <quorem>
    def2:	mov	r1, r6
    def4:	mov	r5, r0
    def6:	mov	r0, r4
    def8:	bl	d1ec <__mcmp>
    defc:	mov	r2, r8
    defe:	mov	r1, fp
    df00:	mov	sl, r0
    df02:	mov	r0, r9
    df04:	bl	d230 <__mdiff>
    df08:	ldr	r2, [r0, #12]
    df0a:	mov	fp, r0
    df0c:	add.w	r3, r5, #48	; 0x30
    df10:	cmp	r2, #0
    df12:	bne.n	dfa8 <_dtoa_r+0x9c0>
    df14:	mov	r1, r0
    df16:	mov	r0, r4
    df18:	str	r3, [sp, #28]
    df1a:	bl	d1ec <__mcmp>
    df1e:	mov	r1, fp
    df20:	str	r0, [sp, #20]
    df22:	mov	r0, r9
    df24:	bl	ce28 <_Bfree>
    df28:	ldr	r2, [sp, #20]
    df2a:	ldr	r3, [sp, #28]
    df2c:	cbnz	r2, df3a <_dtoa_r+0x952>
    df2e:	ldr	r1, [sp, #0]
    df30:	cbnz	r1, df3a <_dtoa_r+0x952>
    df32:	ldr	r1, [sp, #40]	; 0x28
    df34:	cmp	r1, #0
    df36:	beq.w	e3a4 <_dtoa_r+0xdbc>
    df3a:	cmp.w	sl, #0
    df3e:	blt.w	e108 <_dtoa_r+0xb20>
    df42:	bne.n	df50 <_dtoa_r+0x968>
    df44:	ldr	r1, [sp, #0]
    df46:	cbnz	r1, df50 <_dtoa_r+0x968>
    df48:	ldr	r1, [sp, #40]	; 0x28
    df4a:	cmp	r1, #0
    df4c:	beq.w	e108 <_dtoa_r+0xb20>
    df50:	cmp	r2, #0
    df52:	bgt.w	e1f2 <_dtoa_r+0xc0a>
    df56:	ldr	r2, [sp, #32]
    df58:	strb	r3, [r7, #0]
    df5a:	add.w	sl, r7, #1
    df5e:	cmp	r7, r2
    df60:	mov	r5, sl
    df62:	beq.w	e20a <_dtoa_r+0xc22>
    df66:	mov	r1, r4
    df68:	movs	r3, #0
    df6a:	movs	r2, #10
    df6c:	mov	r0, r9
    df6e:	bl	ce3c <__multadd>
    df72:	cmp	r6, r8
    df74:	mov	r4, r0
    df76:	mov	r1, r6
    df78:	mov.w	r3, #0
    df7c:	mov.w	r2, #10
    df80:	mov	r0, r9
    df82:	beq.n	df9c <_dtoa_r+0x9b4>
    df84:	bl	ce3c <__multadd>
    df88:	mov	r1, r8
    df8a:	mov	r6, r0
    df8c:	movs	r3, #0
    df8e:	movs	r2, #10
    df90:	mov	r0, r9
    df92:	bl	ce3c <__multadd>
    df96:	mov	r7, sl
    df98:	mov	r8, r0
    df9a:	b.n	dee6 <_dtoa_r+0x8fe>
    df9c:	bl	ce3c <__multadd>
    dfa0:	mov	r7, sl
    dfa2:	mov	r6, r0
    dfa4:	mov	r8, r0
    dfa6:	b.n	dee6 <_dtoa_r+0x8fe>
    dfa8:	mov	r1, r0
    dfaa:	mov	r0, r9
    dfac:	str	r3, [sp, #20]
    dfae:	bl	ce28 <_Bfree>
    dfb2:	movs	r2, #1
    dfb4:	ldr	r3, [sp, #20]
    dfb6:	b.n	df3a <_dtoa_r+0x952>
    dfb8:	ldr	r1, [sp, #24]
    dfba:	mov	r0, r4
    dfbc:	bl	d1ec <__mcmp>
    dfc0:	cmp	r0, #0
    dfc2:	bge.w	dac4 <_dtoa_r+0x4dc>
    dfc6:	mov	r1, r4
    dfc8:	ldr	r4, [sp, #16]
    dfca:	movs	r3, #0
    dfcc:	subs	r4, #1
    dfce:	movs	r2, #10
    dfd0:	mov	r0, r9
    dfd2:	str	r4, [sp, #16]
    dfd4:	bl	ce3c <__multadd>
    dfd8:	ldr	r3, [sp, #44]	; 0x2c
    dfda:	mov	r4, r0
    dfdc:	cmp	r3, #0
    dfde:	bne.w	dea4 <_dtoa_r+0x8bc>
    dfe2:	ldr	r3, [sp, #56]	; 0x38
    dfe4:	cmp	r3, #0
    dfe6:	ble.w	e3c4 <_dtoa_r+0xddc>
    dfea:	str	r3, [sp, #32]
    dfec:	b.n	dad4 <_dtoa_r+0x4ec>
    dfee:	ldr	r4, [sp, #40]	; 0x28
    dff0:	b.n	da3c <_dtoa_r+0x454>
    dff2:	ldr	r3, [sp, #0]
    dff4:	cmp	r3, #2
    dff6:	ble.w	dacc <_dtoa_r+0x4e4>
    dffa:	ldr	r3, [sp, #32]
    dffc:	cmp	r3, #0
    dffe:	bne.w	e33c <_dtoa_r+0xd54>
    e002:	ldr	r1, [sp, #24]
    e004:	movs	r2, #5
    e006:	mov	r0, r9
    e008:	bl	ce3c <__multadd>
    e00c:	mov	r1, r0
    e00e:	str	r0, [sp, #24]
    e010:	mov	r0, r4
    e012:	bl	d1ec <__mcmp>
    e016:	cmp	r0, #0
    e018:	str	r4, [sp, #40]	; 0x28
    e01a:	ble.w	de4a <_dtoa_r+0x862>
    e01e:	ldr	r2, [sp, #16]
    e020:	ldr	r1, [sp, #36]	; 0x24
    e022:	movs	r3, #49	; 0x31
    e024:	adds	r2, #1
    e026:	str	r2, [sp, #16]
    e028:	strb	r3, [r1, #0]
    e02a:	adds	r5, r1, #1
    e02c:	b.n	de52 <_dtoa_r+0x86a>
    e02e:	ldr	r2, [sp, #16]
    e030:	adds	r2, #1
    e032:	str	r2, [sp, #16]
    e034:	ldr	r2, [sp, #36]	; 0x24
    e036:	movs	r3, #49	; 0x31
    e038:	strb	r3, [r2, #0]
    e03a:	b.n	db56 <_dtoa_r+0x56e>
    e03c:	movs	r3, #1
    e03e:	str	r3, [sp, #44]	; 0x2c
    e040:	b.n	dbe8 <_dtoa_r+0x600>
    e042:	ldr.w	r9, [sp, #20]
    e046:	b.n	d97e <_dtoa_r+0x396>
    e048:	cmp.w	sl, #0
    e04c:	bne.w	da62 <_dtoa_r+0x47a>
    e050:	ubfx	r3, fp, #0, #20
    e054:	cmp	r3, #0
    e056:	bne.w	e2d6 <_dtoa_r+0xcee>
    e05a:	bic.w	r7, fp, #2147483648	; 0x80000000
    e05e:	lsrs	r7, r7, #20
    e060:	lsls	r7, r7, #20
    e062:	cbz	r7, e070 <_dtoa_r+0xa88>
    e064:	ldr	r3, [sp, #28]
    e066:	adds	r3, #1
    e068:	str	r3, [sp, #28]
    e06a:	add.w	r8, r8, #1
    e06e:	movs	r7, #1
    e070:	ldr	r3, [sp, #48]	; 0x30
    e072:	movs	r0, #1
    e074:	cmp	r3, #0
    e076:	beq.w	da76 <_dtoa_r+0x48e>
    e07a:	b.n	da64 <_dtoa_r+0x47c>
    e07c:	mov	r0, sl
    e07e:	bl	b114 <__aeabi_i2d>
    e082:	mov	r2, r6
    e084:	mov	r3, r7
    e086:	bl	b1e0 <__aeabi_dmul>
    e08a:	movs	r2, #0
    e08c:	ldr	r3, [pc, #764]	; (e38c <_dtoa_r+0xda4>)
    e08e:	bl	ae7c <__adddf3>
    e092:	mov	r4, r0
    e094:	sub.w	r5, r1, #54525952	; 0x3400000
    e098:	mov	r0, r6
    e09a:	mov	r1, r7
    e09c:	movs	r2, #0
    e09e:	ldr	r3, [pc, #752]	; (e390 <_dtoa_r+0xda8>)
    e0a0:	bl	ae78 <__aeabi_dsub>
    e0a4:	mov	r2, r4
    e0a6:	mov	r3, r5
    e0a8:	mov	r6, r0
    e0aa:	mov	r7, r1
    e0ac:	bl	b700 <__aeabi_dcmpgt>
    e0b0:	cmp	r0, #0
    e0b2:	bne.w	e212 <_dtoa_r+0xc2a>
    e0b6:	mov	r2, r4
    e0b8:	add.w	r3, r5, #2147483648	; 0x80000000
    e0bc:	mov	r0, r6
    e0be:	mov	r1, r7
    e0c0:	bl	b6c4 <__aeabi_dcmplt>
    e0c4:	cmp	r0, #0
    e0c6:	beq.n	e15e <_dtoa_r+0xb76>
    e0c8:	movs	r3, #0
    e0ca:	str	r3, [sp, #24]
    e0cc:	mov	r6, r3
    e0ce:	b.n	de4a <_dtoa_r+0x862>
    e0d0:	ldr	r0, [sp, #36]	; 0x24
    e0d2:	b.w	d65a <_dtoa_r+0x72>
    e0d6:	ldr	r3, [sp, #24]
    e0d8:	ldr	r2, [sp, #48]	; 0x30
    e0da:	str	r7, [sp, #24]
    e0dc:	subs	r3, r7, r3
    e0de:	add	r2, r3
    e0e0:	str	r2, [sp, #48]	; 0x30
    e0e2:	movs	r7, #0
    e0e4:	b.n	d9c2 <_dtoa_r+0x3da>
    e0e6:	vldr	d7, [sp, #64]	; 0x40
    e0ea:	mov.w	sl, #2
    e0ee:	vstr	d7, [sp, #72]	; 0x48
    e0f2:	b.n	dc74 <_dtoa_r+0x68c>
    e0f4:	mov	r4, r3
    e0f6:	movs	r1, #0
    e0f8:	str.w	r1, [r9, #68]	; 0x44
    e0fc:	b.n	dc20 <_dtoa_r+0x638>
    e0fe:	movs	r4, #1
    e100:	str	r4, [sp, #56]	; 0x38
    e102:	str	r4, [sp, #32]
    e104:	str	r4, [sp, #20]
    e106:	b.n	e0f6 <_dtoa_r+0xb0e>
    e108:	cmp	r2, #0
    e10a:	mov	sl, r3
    e10c:	ble.n	e132 <_dtoa_r+0xb4a>
    e10e:	mov	r1, r4
    e110:	movs	r2, #1
    e112:	mov	r0, r9
    e114:	bl	d13c <__lshift>
    e118:	ldr	r1, [sp, #24]
    e11a:	mov	r4, r0
    e11c:	bl	d1ec <__mcmp>
    e120:	cmp	r0, #0
    e122:	ble.w	e3b6 <_dtoa_r+0xdce>
    e126:	cmp.w	sl, #57	; 0x39
    e12a:	beq.w	e340 <_dtoa_r+0xd58>
    e12e:	add.w	sl, r5, #49	; 0x31
    e132:	mov	fp, r6
    e134:	strb.w	sl, [r7]
    e138:	adds	r5, r7, #1
    e13a:	mov	r6, r8
    e13c:	str	r4, [sp, #40]	; 0x28
    e13e:	b.n	db56 <_dtoa_r+0x56e>
    e140:	bne.n	e14c <_dtoa_r+0xb64>
    e142:	tst.w	sl, #1
    e146:	beq.n	e14c <_dtoa_r+0xb64>
    e148:	b.n	db36 <_dtoa_r+0x54e>
    e14a:	mov	r5, r2
    e14c:	ldrb.w	r3, [r5, #-1]
    e150:	cmp	r3, #48	; 0x30
    e152:	add.w	r2, r5, #4294967295
    e156:	beq.n	e14a <_dtoa_r+0xb62>
    e158:	b.n	db56 <_dtoa_r+0x56e>
    e15a:	ldr.w	r8, [sp, #72]	; 0x48
    e15e:	ldrd	sl, fp, [sp, #64]	; 0x40
    e162:	b.w	d7fc <_dtoa_r+0x214>
    e166:	ldr	r1, [sp, #36]	; 0x24
    e168:	movs	r2, #48	; 0x30
    e16a:	strb	r2, [r1, #0]
    e16c:	ldr	r2, [sp, #16]
    e16e:	ldrb.w	r4, [r5, #-1]
    e172:	adds	r2, #1
    e174:	str	r2, [sp, #16]
    e176:	b.n	d97a <_dtoa_r+0x392>
    e178:	ldr	r3, [sp, #16]
    e17a:	negs	r4, r3
    e17c:	cmp	r4, #0
    e17e:	beq.w	e2e8 <_dtoa_r+0xd00>
    e182:	ldr	r3, [pc, #528]	; (e394 <_dtoa_r+0xdac>)
    e184:	and.w	r2, r4, #15
    e188:	add.w	r3, r3, r2, lsl #3
    e18c:	ldrd	r2, r3, [r3]
    e190:	ldrd	r0, r1, [sp, #64]	; 0x40
    e194:	bl	b1e0 <__aeabi_dmul>
    e198:	asrs	r4, r4, #4
    e19a:	mov	r6, r0
    e19c:	mov	r7, r1
    e19e:	beq.w	e3ce <_dtoa_r+0xde6>
    e1a2:	ldr	r5, [pc, #500]	; (e398 <_dtoa_r+0xdb0>)
    e1a4:	mov.w	sl, #2
    e1a8:	lsls	r2, r4, #31
    e1aa:	bpl.n	e1c0 <_dtoa_r+0xbd8>
    e1ac:	mov	r0, r6
    e1ae:	mov	r1, r7
    e1b0:	ldrd	r2, r3, [r5]
    e1b4:	bl	b1e0 <__aeabi_dmul>
    e1b8:	add.w	sl, sl, #1
    e1bc:	mov	r6, r0
    e1be:	mov	r7, r1
    e1c0:	asrs	r4, r4, #1
    e1c2:	add.w	r5, r5, #8
    e1c6:	bne.n	e1a8 <_dtoa_r+0xbc0>
    e1c8:	b.n	dca8 <_dtoa_r+0x6c0>
    e1ca:	ldr	r1, [r6, #4]
    e1cc:	mov	r0, r9
    e1ce:	bl	cddc <_Balloc>
    e1d2:	ldr	r3, [r6, #16]
    e1d4:	adds	r2, r3, #2
    e1d6:	mov	r5, r0
    e1d8:	lsls	r2, r2, #2
    e1da:	add.w	r1, r6, #12
    e1de:	adds	r0, #12
    e1e0:	bl	94a8 <memcpy>
    e1e4:	mov	r1, r5
    e1e6:	movs	r2, #1
    e1e8:	mov	r0, r9
    e1ea:	bl	d13c <__lshift>
    e1ee:	mov	r8, r0
    e1f0:	b.n	ded4 <_dtoa_r+0x8ec>
    e1f2:	cmp	r3, #57	; 0x39
    e1f4:	beq.w	e340 <_dtoa_r+0xd58>
    e1f8:	add.w	sl, r3, #1
    e1fc:	mov	fp, r6
    e1fe:	strb.w	sl, [r7]
    e202:	adds	r5, r7, #1
    e204:	mov	r6, r8
    e206:	str	r4, [sp, #40]	; 0x28
    e208:	b.n	db56 <_dtoa_r+0x56e>
    e20a:	mov	fp, r6
    e20c:	mov	sl, r3
    e20e:	mov	r6, r8
    e210:	b.n	db1e <_dtoa_r+0x536>
    e212:	movs	r3, #0
    e214:	str	r3, [sp, #24]
    e216:	mov	r6, r3
    e218:	b.n	e01e <_dtoa_r+0xa36>
    e21a:	ldr	r3, [sp, #72]	; 0x48
    e21c:	ldr	r1, [pc, #372]	; (e394 <_dtoa_r+0xdac>)
    e21e:	subs	r2, r3, #1
    e220:	add.w	r1, r1, r2, lsl #3
    e224:	mov	r3, r5
    e226:	str	r2, [sp, #92]	; 0x5c
    e228:	ldrd	r0, r1, [r1]
    e22c:	mov	r2, r4
    e22e:	bl	b1e0 <__aeabi_dmul>
    e232:	strd	r0, r1, [sp, #80]	; 0x50
    e236:	mov	r1, r7
    e238:	mov	r0, r6
    e23a:	bl	b740 <__aeabi_d2iz>
    e23e:	mov	r4, r0
    e240:	bl	b114 <__aeabi_i2d>
    e244:	mov	r3, r1
    e246:	mov	r2, r0
    e248:	mov	r1, r7
    e24a:	mov	r0, r6
    e24c:	bl	ae78 <__aeabi_dsub>
    e250:	ldr	r3, [sp, #72]	; 0x48
    e252:	mov	r7, r1
    e254:	ldr	r1, [sp, #36]	; 0x24
    e256:	adds	r4, #48	; 0x30
    e258:	cmp	r3, #1
    e25a:	mov	r6, r0
    e25c:	strb	r4, [r1, #0]
    e25e:	add.w	r5, r1, #1
    e262:	beq.n	e2a6 <_dtoa_r+0xcbe>
    e264:	ldr	r3, [sp, #72]	; 0x48
    e266:	ldr	r2, [sp, #36]	; 0x24
    e268:	add	r3, r2
    e26a:	mov	sl, r3
    e26c:	mov	fp, r5
    e26e:	movs	r2, #0
    e270:	ldr	r3, [pc, #296]	; (e39c <_dtoa_r+0xdb4>)
    e272:	mov	r0, r6
    e274:	mov	r1, r7
    e276:	bl	b1e0 <__aeabi_dmul>
    e27a:	mov	r7, r1
    e27c:	mov	r6, r0
    e27e:	bl	b740 <__aeabi_d2iz>
    e282:	mov	r4, r0
    e284:	bl	b114 <__aeabi_i2d>
    e288:	adds	r4, #48	; 0x30
    e28a:	mov	r2, r0
    e28c:	mov	r3, r1
    e28e:	mov	r0, r6
    e290:	mov	r1, r7
    e292:	bl	ae78 <__aeabi_dsub>
    e296:	strb.w	r4, [fp], #1
    e29a:	cmp	sl, fp
    e29c:	mov	r6, r0
    e29e:	mov	r7, r1
    e2a0:	bne.n	e26e <_dtoa_r+0xc86>
    e2a2:	ldr	r3, [sp, #92]	; 0x5c
    e2a4:	add	r5, r3
    e2a6:	movs	r2, #0
    e2a8:	ldr	r3, [pc, #244]	; (e3a0 <_dtoa_r+0xdb8>)
    e2aa:	ldrd	r0, r1, [sp, #80]	; 0x50
    e2ae:	bl	ae7c <__adddf3>
    e2b2:	mov	r2, r6
    e2b4:	mov	r3, r7
    e2b6:	bl	b6c4 <__aeabi_dcmplt>
    e2ba:	cmp	r0, #0
    e2bc:	beq.n	e350 <_dtoa_r+0xd68>
    e2be:	ldr	r3, [sp, #88]	; 0x58
    e2c0:	str	r3, [sp, #16]
    e2c2:	ldrb.w	r4, [r5, #-1]
    e2c6:	b.w	d962 <_dtoa_r+0x37a>
    e2ca:	ldr	r3, [sp, #28]
    e2cc:	ldr	r2, [sp, #32]
    e2ce:	subs	r5, r3, r2
    e2d0:	movs	r3, #0
    e2d2:	b.w	d9ce <_dtoa_r+0x3e6>
    e2d6:	movs	r7, #0
    e2d8:	b.n	e070 <_dtoa_r+0xa88>
    e2da:	ldr	r3, [sp, #96]	; 0x60
    e2dc:	ldr	r7, [sp, #24]
    e2de:	ldr	r5, [sp, #28]
    e2e0:	rsb	r3, r3, #54	; 0x36
    e2e4:	b.w	d9ce <_dtoa_r+0x3e6>
    e2e8:	ldrd	r6, r7, [sp, #64]	; 0x40
    e2ec:	mov.w	sl, #2
    e2f0:	b.n	dca8 <_dtoa_r+0x6c0>
    e2f2:	ldr	r3, [sp, #32]
    e2f4:	cmp	r3, #0
    e2f6:	beq.w	e07c <_dtoa_r+0xa94>
    e2fa:	ldr	r3, [sp, #56]	; 0x38
    e2fc:	cmp	r3, #0
    e2fe:	ble.w	e15e <_dtoa_r+0xb76>
    e302:	movs	r2, #0
    e304:	ldr	r3, [pc, #148]	; (e39c <_dtoa_r+0xdb4>)
    e306:	mov	r0, r6
    e308:	mov	r1, r7
    e30a:	bl	b1e0 <__aeabi_dmul>
    e30e:	mov	r6, r0
    e310:	mov	r7, r1
    e312:	add.w	r0, sl, #1
    e316:	bl	b114 <__aeabi_i2d>
    e31a:	mov	r2, r6
    e31c:	mov	r3, r7
    e31e:	bl	b1e0 <__aeabi_dmul>
    e322:	movs	r2, #0
    e324:	ldr	r3, [pc, #100]	; (e38c <_dtoa_r+0xda4>)
    e326:	bl	ae7c <__adddf3>
    e32a:	ldr	r2, [sp, #16]
    e32c:	ldr	r3, [sp, #56]	; 0x38
    e32e:	str	r3, [sp, #72]	; 0x48
    e330:	subs	r2, #1
    e332:	mov	r4, r0
    e334:	sub.w	r5, r1, #54525952	; 0x3400000
    e338:	str	r2, [sp, #88]	; 0x58
    e33a:	b.n	dcea <_dtoa_r+0x702>
    e33c:	str	r4, [sp, #40]	; 0x28
    e33e:	b.n	de4a <_dtoa_r+0x862>
    e340:	movs	r2, #57	; 0x39
    e342:	mov	fp, r6
    e344:	str	r4, [sp, #40]	; 0x28
    e346:	mov	r6, r8
    e348:	strb	r2, [r7, #0]
    e34a:	adds	r5, r7, #1
    e34c:	b.w	db3a <_dtoa_r+0x552>
    e350:	ldrd	r2, r3, [sp, #80]	; 0x50
    e354:	movs	r0, #0
    e356:	ldr	r1, [pc, #72]	; (e3a0 <_dtoa_r+0xdb8>)
    e358:	bl	ae78 <__aeabi_dsub>
    e35c:	mov	r2, r6
    e35e:	mov	r3, r7
    e360:	bl	b700 <__aeabi_dcmpgt>
    e364:	cbnz	r0, e36a <_dtoa_r+0xd82>
    e366:	b.n	e15e <_dtoa_r+0xb76>
    e368:	mov	r5, r2
    e36a:	ldrb.w	r3, [r5, #-1]
    e36e:	cmp	r3, #48	; 0x30
    e370:	add.w	r2, r5, #4294967295
    e374:	beq.n	e368 <_dtoa_r+0xd80>
    e376:	b.n	ddec <_dtoa_r+0x804>
    e378:	ldr	r3, [sp, #88]	; 0x58
    e37a:	str	r3, [sp, #16]
    e37c:	b.w	d962 <_dtoa_r+0x37a>
    e380:	cmp.w	sl, #0
    e384:	bne.w	de80 <_dtoa_r+0x898>
    e388:	b.n	e050 <_dtoa_r+0xa68>
    e38a:	nop
    e38c:	.word	0x401c0000
    e390:	.word	0x40140000
    e394:	.word	0x00010400
    e398:	.word	0x000104c8
    e39c:	.word	0x40240000
    e3a0:	.word	0x3fe00000
    e3a4:	cmp	r3, #57	; 0x39
    e3a6:	mov	fp, sl
    e3a8:	mov	sl, r3
    e3aa:	beq.n	e340 <_dtoa_r+0xd58>
    e3ac:	cmp.w	fp, #0
    e3b0:	bgt.w	e12e <_dtoa_r+0xb46>
    e3b4:	b.n	e132 <_dtoa_r+0xb4a>
    e3b6:	bne.w	e132 <_dtoa_r+0xb4a>
    e3ba:	tst.w	sl, #1
    e3be:	beq.w	e132 <_dtoa_r+0xb4a>
    e3c2:	b.n	e126 <_dtoa_r+0xb3e>
    e3c4:	ldr	r3, [sp, #0]
    e3c6:	cmp	r3, #2
    e3c8:	bgt.n	e416 <_dtoa_r+0xe2e>
    e3ca:	ldr	r3, [sp, #56]	; 0x38
    e3cc:	b.n	dfea <_dtoa_r+0xa02>
    e3ce:	mov.w	sl, #2
    e3d2:	b.n	dca8 <_dtoa_r+0x6c0>
    e3d4:	ldr	r3, [sp, #0]
    e3d6:	cmp	r3, #2
    e3d8:	bgt.n	e416 <_dtoa_r+0xe2e>
    e3da:	ldr	r3, [sp, #56]	; 0x38
    e3dc:	b.n	deba <_dtoa_r+0x8d2>
    e3de:	movs	r4, #0
    e3e0:	str.w	r4, [r9, #68]	; 0x44
    e3e4:	mov	r1, r4
    e3e6:	mov	r0, r9
    e3e8:	bl	cddc <_Balloc>
    e3ec:	mov.w	r3, #4294967295
    e3f0:	str	r3, [sp, #32]
    e3f2:	str	r3, [sp, #56]	; 0x38
    e3f4:	movs	r3, #1
    e3f6:	str	r0, [sp, #36]	; 0x24
    e3f8:	str	r4, [sp, #20]
    e3fa:	str.w	r0, [r9, #64]	; 0x40
    e3fe:	str	r3, [sp, #44]	; 0x2c
    e400:	b.w	d7fc <_dtoa_r+0x214>
    e404:	beq.w	da98 <_dtoa_r+0x4b0>
    e408:	rsb	r0, r0, #60	; 0x3c
    e40c:	b.w	da8e <_dtoa_r+0x4a6>
    e410:	movs	r6, #1
    e412:	b.w	d78e <_dtoa_r+0x1a6>
    e416:	ldr	r3, [sp, #56]	; 0x38
    e418:	str	r3, [sp, #32]
    e41a:	b.n	dffa <_dtoa_r+0xa12>
    e41c:			; <UNDEFINED> instruction: 0xffffffff

0000e420 <_svfprintf_r>:
    e420:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e424:	sub	sp, #260	; 0x104
    e426:	mov	r4, r1
    e428:	str	r1, [sp, #20]
    e42a:	mov	r5, r2
    e42c:	str	r3, [sp, #40]	; 0x28
    e42e:	str	r0, [sp, #24]
    e430:	bl	cdc0 <_localeconv_r>
    e434:	ldr	r3, [r0, #0]
    e436:	str	r3, [sp, #76]	; 0x4c
    e438:	mov	r0, r3
    e43a:	bl	c840 <strlen>
    e43e:	ldrh	r3, [r4, #12]
    e440:	str	r0, [sp, #72]	; 0x48
    e442:	lsls	r6, r3, #24
    e444:	bpl.n	e44e <_svfprintf_r+0x2e>
    e446:	ldr	r3, [r4, #16]
    e448:	cmp	r3, #0
    e44a:	beq.w	f6b0 <_svfprintf_r+0x1290>
    e44e:	vldr	d7, [pc, #664]	; e6e8 <_svfprintf_r+0x2c8>
    e452:	movs	r3, #0
    e454:	vstr	d7, [sp, #64]	; 0x40
    e458:	str	r3, [sp, #56]	; 0x38
    e45a:	str	r3, [sp, #148]	; 0x94
    e45c:	str	r3, [sp, #144]	; 0x90
    e45e:	str	r3, [sp, #84]	; 0x54
    e460:	str	r3, [sp, #28]
    e462:	ldr.w	sl, [pc, #656]	; e6f4 <_svfprintf_r+0x2d4>
    e466:	add	r3, sp, #192	; 0xc0
    e468:	str	r3, [sp, #140]	; 0x8c
    e46a:	mov	r9, r3
    e46c:	mov	r8, r5
    e46e:	ldrb.w	r3, [r8]
    e472:	mov	r4, r8
    e474:	cbz	r3, e4b2 <_svfprintf_r+0x92>
    e476:	cmp	r3, #37	; 0x25
    e478:	bne.n	e480 <_svfprintf_r+0x60>
    e47a:	b.n	e4b2 <_svfprintf_r+0x92>
    e47c:	cmp	r3, #37	; 0x25
    e47e:	beq.n	e488 <_svfprintf_r+0x68>
    e480:	ldrb.w	r3, [r4, #1]!
    e484:	cmp	r3, #0
    e486:	bne.n	e47c <_svfprintf_r+0x5c>
    e488:	rsb	r5, r8, r4
    e48c:	cbz	r5, e4b2 <_svfprintf_r+0x92>
    e48e:	ldr	r3, [sp, #144]	; 0x90
    e490:	ldr	r2, [sp, #148]	; 0x94
    e492:	str.w	r8, [r9]
    e496:	adds	r3, #1
    e498:	add	r2, r5
    e49a:	cmp	r3, #7
    e49c:	str.w	r5, [r9, #4]
    e4a0:	str	r2, [sp, #148]	; 0x94
    e4a2:	str	r3, [sp, #144]	; 0x90
    e4a4:	bgt.w	e5f4 <_svfprintf_r+0x1d4>
    e4a8:	add.w	r9, r9, #8
    e4ac:	ldr	r3, [sp, #28]
    e4ae:	add	r3, r5
    e4b0:	str	r3, [sp, #28]
    e4b2:	ldrb	r3, [r4, #0]
    e4b4:	cmp	r3, #0
    e4b6:	beq.w	e606 <_svfprintf_r+0x1e6>
    e4ba:	movs	r3, #0
    e4bc:	mov	r2, r3
    e4be:	strb.w	r3, [sp, #111]	; 0x6f
    e4c2:	mov	r1, r3
    e4c4:	str	r3, [sp, #32]
    e4c6:	str	r3, [sp, #12]
    e4c8:	mov.w	fp, #4294967295
    e4cc:	ldrb	r3, [r4, #1]
    e4ce:	add.w	r8, r4, #1
    e4d2:	mov	r5, fp
    e4d4:	add.w	r8, r8, #1
    e4d8:	sub.w	r0, r3, #32
    e4dc:	cmp	r0, #88	; 0x58
    e4de:	bhi.w	ed4a <_svfprintf_r+0x92a>
    e4e2:	tbh	[pc, r0, lsl #1]
    e4e6:	.short	0x03a0
    e4e8:	.word	0x04320432
    e4ec:	.word	0x043203a8
    e4f0:	.word	0x04320432
    e4f4:	.word	0x04320432
    e4f8:	.word	0x03af0432
    e4fc:	.word	0x043203bd
    e500:	.word	0x00e2005d
    e504:	.word	0x01090432
    e508:	.word	0x01100110
    e50c:	.word	0x01100110
    e510:	.word	0x01100110
    e514:	.word	0x01100110
    e518:	.word	0x04320110
    e51c:	.word	0x04320432
    e520:	.word	0x04320432
    e524:	.word	0x04320432
    e528:	.word	0x04320432
    e52c:	.word	0x01200432
    e530:	.word	0x04320286
    e534:	.word	0x04320286
    e538:	.word	0x04320432
    e53c:	.word	0x02d40432
    e540:	.word	0x04320432
    e544:	.word	0x043202e5
    e548:	.word	0x04320432
    e54c:	.word	0x04320432
    e550:	.word	0x0432030f
    e554:	.word	0x033d0432
    e558:	.word	0x04320432
    e55c:	.word	0x04320432
    e560:	.word	0x04320432
    e564:	.word	0x04320432
    e568:	.word	0x04320432
    e56c:	.word	0x0391037e
    e570:	.word	0x02860286
    e574:	.word	0x03990286
    e578:	.word	0x04320391
    e57c:	.word	0x04070432
    e580:	.word	0x04120432
    e584:	.word	0x006400a3
    e588:	.word	0x043203c2
    e58c:	.word	0x043203c9
    e590:	.word	0x043203ea
    e594:	.word	0x03f20432
    e598:	ldr	r0, [sp, #32]
    e59a:	str	r3, [sp, #40]	; 0x28
    e59c:	negs	r0, r0
    e59e:	str	r0, [sp, #32]
    e5a0:	ldr	r3, [sp, #12]
    e5a2:	orr.w	r3, r3, #4
    e5a6:	str	r3, [sp, #12]
    e5a8:	ldrb.w	r3, [r8]
    e5ac:	b.n	e4d4 <_svfprintf_r+0xb4>
    e5ae:	ldr	r0, [sp, #40]	; 0x28
    e5b0:	mov	fp, r5
    e5b2:	movs	r1, #0
    e5b4:	ldr	r4, [r0, #0]
    e5b6:	strb.w	r1, [sp, #111]	; 0x6f
    e5ba:	adds	r7, r0, #4
    e5bc:	ldr	r0, [sp, #12]
    e5be:	movs	r3, #48	; 0x30
    e5c0:	movs	r2, #120	; 0x78
    e5c2:	cmp	fp, r1
    e5c4:	strb.w	r3, [sp, #112]	; 0x70
    e5c8:	mov.w	r5, #0
    e5cc:	strb.w	r2, [sp, #113]	; 0x71
    e5d0:	orr.w	r3, r0, #2
    e5d4:	blt.w	ed84 <_svfprintf_r+0x964>
    e5d8:	bic.w	r3, r0, #128	; 0x80
    e5dc:	orr.w	r3, r3, #2
    e5e0:	str	r3, [sp, #12]
    e5e2:	orrs.w	r3, r4, r5
    e5e6:	str	r7, [sp, #40]	; 0x28
    e5e8:	beq.w	ed30 <_svfprintf_r+0x910>
    e5ec:	mov	r7, r1
    e5ee:	str	r2, [sp, #52]	; 0x34
    e5f0:	ldr	r0, [pc, #252]	; (e6f0 <_svfprintf_r+0x2d0>)
    e5f2:	b.n	ebc2 <_svfprintf_r+0x7a2>
    e5f4:	add	r2, sp, #140	; 0x8c
    e5f6:	ldr	r1, [sp, #20]
    e5f8:	ldr	r0, [sp, #24]
    e5fa:	bl	fb04 <__ssprint_r>
    e5fe:	cbnz	r0, e614 <_svfprintf_r+0x1f4>
    e600:	add.w	r9, sp, #192	; 0xc0
    e604:	b.n	e4ac <_svfprintf_r+0x8c>
    e606:	ldr	r3, [sp, #148]	; 0x94
    e608:	cbz	r3, e614 <_svfprintf_r+0x1f4>
    e60a:	ldr	r0, [sp, #24]
    e60c:	ldr	r1, [sp, #20]
    e60e:	add	r2, sp, #140	; 0x8c
    e610:	bl	fb04 <__ssprint_r>
    e614:	ldr	r3, [sp, #20]
    e616:	ldrh	r3, [r3, #12]
    e618:	tst.w	r3, #64	; 0x40
    e61c:	ldr	r3, [sp, #28]
    e61e:	it	ne
    e620:	movne.w	r3, #4294967295
    e624:	mov	r0, r3
    e626:	add	sp, #260	; 0x104
    e628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e62c:	str	r3, [sp, #52]	; 0x34
    e62e:	mov	fp, r5
    e630:	cmp	r2, #0
    e632:	bne.w	fa9c <_svfprintf_r+0x167c>
    e636:	ldr	r2, [sp, #12]
    e638:	ands.w	r3, r2, #32
    e63c:	beq.w	eacc <_svfprintf_r+0x6ac>
    e640:	ldr	r7, [sp, #40]	; 0x28
    e642:	adds	r7, #7
    e644:	bic.w	r3, r7, #7
    e648:	movs	r7, #0
    e64a:	add.w	r1, r3, #8
    e64e:	cmp	fp, r7
    e650:	str	r1, [sp, #40]	; 0x28
    e652:	ldrd	r4, r5, [r3]
    e656:	strb.w	r7, [sp, #111]	; 0x6f
    e65a:	blt.w	f522 <_svfprintf_r+0x1102>
    e65e:	bic.w	r3, r2, #128	; 0x80
    e662:	str	r3, [sp, #12]
    e664:	orrs.w	r3, r4, r5
    e668:	beq.w	ed74 <_svfprintf_r+0x954>
    e66c:	add	r6, sp, #192	; 0xc0
    e66e:	lsrs	r2, r4, #3
    e670:	orr.w	r2, r2, r5, lsl #29
    e674:	lsrs	r1, r5, #3
    e676:	and.w	r3, r4, #7
    e67a:	mov	r5, r1
    e67c:	mov	r4, r2
    e67e:	adds	r3, #48	; 0x30
    e680:	orrs.w	r2, r4, r5
    e684:	strb.w	r3, [r6, #-1]!
    e688:	bne.n	e66e <_svfprintf_r+0x24e>
    e68a:	ldr	r2, [sp, #12]
    e68c:	lsls	r1, r2, #31
    e68e:	bpl.w	e7b0 <_svfprintf_r+0x390>
    e692:	cmp	r3, #48	; 0x30
    e694:	beq.w	e7b0 <_svfprintf_r+0x390>
    e698:	movs	r2, #48	; 0x30
    e69a:	subs	r3, r6, #1
    e69c:	strb.w	r2, [r6, #-1]
    e6a0:	add	r2, sp, #192	; 0xc0
    e6a2:	subs	r2, r2, r3
    e6a4:	str	r2, [sp, #36]	; 0x24
    e6a6:	mov	r6, r3
    e6a8:	b.n	e7b6 <_svfprintf_r+0x396>
    e6aa:	ldrb.w	r3, [r8]
    e6ae:	cmp	r3, #42	; 0x2a
    e6b0:	add.w	r4, r8, #1
    e6b4:	beq.w	fa80 <_svfprintf_r+0x1660>
    e6b8:	sub.w	r0, r3, #48	; 0x30
    e6bc:	cmp	r0, #9
    e6be:	it	ls
    e6c0:	movls	r5, #0
    e6c2:	bhi.w	f9d2 <_svfprintf_r+0x15b2>
    e6c6:	ldrb.w	r3, [r4], #1
    e6ca:	add.w	r5, r5, r5, lsl #2
    e6ce:	add.w	r5, r0, r5, lsl #1
    e6d2:	sub.w	r0, r3, #48	; 0x30
    e6d6:	cmp	r0, #9
    e6d8:	bls.n	e6c6 <_svfprintf_r+0x2a6>
    e6da:	orr.w	r5, r5, r5, asr #31
    e6de:	mov	r8, r4
    e6e0:	b.n	e4d8 <_svfprintf_r+0xb8>
    e6e2:	nop
    e6e4:	nop.w
	...
    e6f0:	.word	0x00010544
    e6f4:	.word	0x00010510
    e6f8:	ldr	r3, [sp, #12]
    e6fa:	orr.w	r3, r3, #128	; 0x80
    e6fe:	str	r3, [sp, #12]
    e700:	ldrb.w	r3, [r8]
    e704:	b.n	e4d4 <_svfprintf_r+0xb4>
    e706:	sub.w	r0, r3, #48	; 0x30
    e70a:	movs	r3, #0
    e70c:	mov	r4, r3
    e70e:	ldrb.w	r3, [r8], #1
    e712:	add.w	r4, r4, r4, lsl #2
    e716:	add.w	r4, r0, r4, lsl #1
    e71a:	sub.w	r0, r3, #48	; 0x30
    e71e:	cmp	r0, #9
    e720:	bls.n	e70e <_svfprintf_r+0x2ee>
    e722:	str	r4, [sp, #32]
    e724:	b.n	e4d8 <_svfprintf_r+0xb8>
    e726:	str	r3, [sp, #52]	; 0x34
    e728:	mov	fp, r5
    e72a:	cmp	r2, #0
    e72c:	bne.w	fab8 <_svfprintf_r+0x1698>
    e730:	ldr	r3, [sp, #12]
    e732:	orr.w	r3, r3, #16
    e736:	str	r3, [sp, #12]
    e738:	ldr	r3, [sp, #12]
    e73a:	lsls	r4, r3, #26
    e73c:	bpl.w	f1ae <_svfprintf_r+0xd8e>
    e740:	ldr	r7, [sp, #40]	; 0x28
    e742:	adds	r7, #7
    e744:	bic.w	r7, r7, #7
    e748:	ldrd	r2, r3, [r7]
    e74c:	add.w	r1, r7, #8
    e750:	str	r1, [sp, #40]	; 0x28
    e752:	mov	r4, r2
    e754:	mov	r5, r3
    e756:	cmp	r2, #0
    e758:	sbcs.w	r3, r3, #0
    e75c:	blt.w	f224 <_svfprintf_r+0xe04>
    e760:	cmp.w	fp, #0
    e764:	ldrb.w	r7, [sp, #111]	; 0x6f
    e768:	blt.w	f1ea <_svfprintf_r+0xdca>
    e76c:	ldr	r3, [sp, #12]
    e76e:	bic.w	r3, r3, #128	; 0x80
    e772:	str	r3, [sp, #12]
    e774:	orrs.w	r3, r4, r5
    e778:	beq.w	eb4c <_svfprintf_r+0x72c>
    e77c:	cmp	r5, #0
    e77e:	it	eq
    e780:	cmpeq	r4, #10
    e782:	bcc.w	eb56 <_svfprintf_r+0x736>
    e786:	add	r6, sp, #192	; 0xc0
    e788:	mov	r0, r4
    e78a:	mov	r1, r5
    e78c:	movs	r2, #10
    e78e:	movs	r3, #0
    e790:	bl	b790 <__aeabi_uldivmod>
    e794:	adds	r2, #48	; 0x30
    e796:	strb.w	r2, [r6, #-1]!
    e79a:	mov	r0, r4
    e79c:	mov	r1, r5
    e79e:	movs	r3, #0
    e7a0:	movs	r2, #10
    e7a2:	bl	b790 <__aeabi_uldivmod>
    e7a6:	mov	r4, r0
    e7a8:	mov	r5, r1
    e7aa:	orrs.w	r3, r4, r5
    e7ae:	bne.n	e788 <_svfprintf_r+0x368>
    e7b0:	add	r3, sp, #192	; 0xc0
    e7b2:	subs	r3, r3, r6
    e7b4:	str	r3, [sp, #36]	; 0x24
    e7b6:	ldr	r3, [sp, #36]	; 0x24
    e7b8:	cmp	r3, fp
    e7ba:	it	lt
    e7bc:	movlt	r3, fp
    e7be:	str	r3, [sp, #16]
    e7c0:	movs	r3, #0
    e7c2:	str	r3, [sp, #60]	; 0x3c
    e7c4:	cbz	r7, e7cc <_svfprintf_r+0x3ac>
    e7c6:	ldr	r3, [sp, #16]
    e7c8:	adds	r3, #1
    e7ca:	str	r3, [sp, #16]
    e7cc:	ldr	r3, [sp, #12]
    e7ce:	ands.w	r3, r3, #2
    e7d2:	str	r3, [sp, #44]	; 0x2c
    e7d4:	beq.n	e7dc <_svfprintf_r+0x3bc>
    e7d6:	ldr	r3, [sp, #16]
    e7d8:	adds	r3, #2
    e7da:	str	r3, [sp, #16]
    e7dc:	ldr	r3, [sp, #12]
    e7de:	ands.w	r3, r3, #132	; 0x84
    e7e2:	str	r3, [sp, #48]	; 0x30
    e7e4:	bne.w	ed9e <_svfprintf_r+0x97e>
    e7e8:	ldr	r3, [sp, #32]
    e7ea:	ldr	r2, [sp, #16]
    e7ec:	subs	r5, r3, r2
    e7ee:	cmp	r5, #0
    e7f0:	ble.w	ed9e <_svfprintf_r+0x97e>
    e7f4:	cmp	r5, #16
    e7f6:	ldr	r1, [sp, #148]	; 0x94
    e7f8:	ldr	r2, [sp, #144]	; 0x90
    e7fa:	ldr	r7, [pc, #672]	; (ea9c <_svfprintf_r+0x67c>)
    e7fc:	ble.n	e84e <_svfprintf_r+0x42e>
    e7fe:	str	r6, [sp, #80]	; 0x50
    e800:	mov	r0, r9
    e802:	movs	r4, #16
    e804:	mov	r9, r7
    e806:	ldr	r6, [sp, #20]
    e808:	mov	r7, r5
    e80a:	ldr	r5, [sp, #24]
    e80c:	b.n	e818 <_svfprintf_r+0x3f8>
    e80e:	subs	r7, #16
    e810:	cmp	r7, #16
    e812:	add.w	r0, r0, #8
    e816:	ble.n	e846 <_svfprintf_r+0x426>
    e818:	adds	r2, #1
    e81a:	ldr	r3, [pc, #640]	; (ea9c <_svfprintf_r+0x67c>)
    e81c:	str	r2, [sp, #144]	; 0x90
    e81e:	adds	r1, #16
    e820:	cmp	r2, #7
    e822:	str	r1, [sp, #148]	; 0x94
    e824:	stmia.w	r0, {r3, r4}
    e828:	ble.n	e80e <_svfprintf_r+0x3ee>
    e82a:	add	r2, sp, #140	; 0x8c
    e82c:	mov	r1, r6
    e82e:	mov	r0, r5
    e830:	bl	fb04 <__ssprint_r>
    e834:	cmp	r0, #0
    e836:	bne.w	e614 <_svfprintf_r+0x1f4>
    e83a:	subs	r7, #16
    e83c:	cmp	r7, #16
    e83e:	ldr	r1, [sp, #148]	; 0x94
    e840:	ldr	r2, [sp, #144]	; 0x90
    e842:	add	r0, sp, #192	; 0xc0
    e844:	bgt.n	e818 <_svfprintf_r+0x3f8>
    e846:	ldr	r6, [sp, #80]	; 0x50
    e848:	mov	r5, r7
    e84a:	mov	r7, r9
    e84c:	mov	r9, r0
    e84e:	adds	r2, #1
    e850:	adds	r4, r5, r1
    e852:	cmp	r2, #7
    e854:	str	r4, [sp, #148]	; 0x94
    e856:	str	r2, [sp, #144]	; 0x90
    e858:	str.w	r7, [r9]
    e85c:	str.w	r5, [r9, #4]
    e860:	bgt.w	f0be <_svfprintf_r+0xc9e>
    e864:	ldrb.w	r7, [sp, #111]	; 0x6f
    e868:	add.w	r9, r9, #8
    e86c:	cbz	r7, e88c <_svfprintf_r+0x46c>
    e86e:	ldr	r3, [sp, #144]	; 0x90
    e870:	adds	r3, #1
    e872:	adds	r4, #1
    e874:	add.w	r1, sp, #111	; 0x6f
    e878:	movs	r2, #1
    e87a:	cmp	r3, #7
    e87c:	str	r4, [sp, #148]	; 0x94
    e87e:	str	r3, [sp, #144]	; 0x90
    e880:	stmia.w	r9, {r1, r2}
    e884:	bgt.w	efd2 <_svfprintf_r+0xbb2>
    e888:	add.w	r9, r9, #8
    e88c:	ldr	r3, [sp, #44]	; 0x2c
    e88e:	cbz	r3, e8ac <_svfprintf_r+0x48c>
    e890:	ldr	r3, [sp, #144]	; 0x90
    e892:	adds	r3, #1
    e894:	adds	r4, #2
    e896:	add	r1, sp, #112	; 0x70
    e898:	movs	r2, #2
    e89a:	cmp	r3, #7
    e89c:	str	r4, [sp, #148]	; 0x94
    e89e:	str	r3, [sp, #144]	; 0x90
    e8a0:	stmia.w	r9, {r1, r2}
    e8a4:	bgt.w	efea <_svfprintf_r+0xbca>
    e8a8:	add.w	r9, r9, #8
    e8ac:	ldr	r3, [sp, #48]	; 0x30
    e8ae:	cmp	r3, #128	; 0x80
    e8b0:	beq.w	ee76 <_svfprintf_r+0xa56>
    e8b4:	ldr	r3, [sp, #36]	; 0x24
    e8b6:	rsb	r7, r3, fp
    e8ba:	cmp	r7, #0
    e8bc:	ble.n	e926 <_svfprintf_r+0x506>
    e8be:	ldr	r2, [pc, #480]	; (eaa0 <_svfprintf_r+0x680>)
    e8c0:	ldr	r3, [sp, #144]	; 0x90
    e8c2:	str	r2, [sp, #44]	; 0x2c
    e8c4:	cmp	r7, #16
    e8c6:	ble.n	e90e <_svfprintf_r+0x4ee>
    e8c8:	mov	r2, r4
    e8ca:	mov.w	fp, #16
    e8ce:	ldr	r5, [sp, #24]
    e8d0:	ldr	r4, [sp, #20]
    e8d2:	b.n	e8de <_svfprintf_r+0x4be>
    e8d4:	subs	r7, #16
    e8d6:	cmp	r7, #16
    e8d8:	add.w	r9, r9, #8
    e8dc:	ble.n	e90c <_svfprintf_r+0x4ec>
    e8de:	adds	r3, #1
    e8e0:	adds	r2, #16
    e8e2:	cmp	r3, #7
    e8e4:	str	r2, [sp, #148]	; 0x94
    e8e6:	str	r3, [sp, #144]	; 0x90
    e8e8:	stmia.w	r9, {sl, fp}
    e8ec:	ble.n	e8d4 <_svfprintf_r+0x4b4>
    e8ee:	add	r2, sp, #140	; 0x8c
    e8f0:	mov	r1, r4
    e8f2:	mov	r0, r5
    e8f4:	bl	fb04 <__ssprint_r>
    e8f8:	cmp	r0, #0
    e8fa:	bne.w	e614 <_svfprintf_r+0x1f4>
    e8fe:	subs	r7, #16
    e900:	cmp	r7, #16
    e902:	ldr	r2, [sp, #148]	; 0x94
    e904:	ldr	r3, [sp, #144]	; 0x90
    e906:	add.w	r9, sp, #192	; 0xc0
    e90a:	bgt.n	e8de <_svfprintf_r+0x4be>
    e90c:	mov	r4, r2
    e90e:	adds	r3, #1
    e910:	ldr	r2, [sp, #44]	; 0x2c
    e912:	str	r3, [sp, #144]	; 0x90
    e914:	add	r4, r7
    e916:	cmp	r3, #7
    e918:	str	r4, [sp, #148]	; 0x94
    e91a:	stmia.w	r9, {r2, r7}
    e91e:	bgt.w	efba <_svfprintf_r+0xb9a>
    e922:	add.w	r9, r9, #8
    e926:	ldr	r3, [sp, #12]
    e928:	lsls	r2, r3, #23
    e92a:	bmi.w	eda2 <_svfprintf_r+0x982>
    e92e:	ldr	r3, [sp, #144]	; 0x90
    e930:	ldr	r1, [sp, #36]	; 0x24
    e932:	str.w	r6, [r9]
    e936:	adds	r3, #1
    e938:	add	r4, r1
    e93a:	cmp	r3, #7
    e93c:	str	r4, [sp, #148]	; 0x94
    e93e:	str.w	r1, [r9, #4]
    e942:	str	r3, [sp, #144]	; 0x90
    e944:	bgt.w	ef8e <_svfprintf_r+0xb6e>
    e948:	add.w	r9, r9, #8
    e94c:	ldr	r3, [sp, #12]
    e94e:	lsls	r1, r3, #29
    e950:	bpl.n	e9d2 <_svfprintf_r+0x5b2>
    e952:	ldr	r3, [sp, #32]
    e954:	ldr	r2, [sp, #16]
    e956:	subs	r5, r3, r2
    e958:	cmp	r5, #0
    e95a:	ble.n	e9d2 <_svfprintf_r+0x5b2>
    e95c:	cmp	r5, #16
    e95e:	ldr	r3, [sp, #144]	; 0x90
    e960:	ldr	r7, [pc, #312]	; (ea9c <_svfprintf_r+0x67c>)
    e962:	ble.n	e9ac <_svfprintf_r+0x58c>
    e964:	mov	r2, r4
    e966:	movs	r6, #16
    e968:	ldr.w	fp, [sp, #24]
    e96c:	ldr	r4, [sp, #20]
    e96e:	b.n	e97a <_svfprintf_r+0x55a>
    e970:	subs	r5, #16
    e972:	cmp	r5, #16
    e974:	add.w	r9, r9, #8
    e978:	ble.n	e9aa <_svfprintf_r+0x58a>
    e97a:	adds	r3, #1
    e97c:	ldr	r1, [pc, #284]	; (ea9c <_svfprintf_r+0x67c>)
    e97e:	str	r3, [sp, #144]	; 0x90
    e980:	adds	r2, #16
    e982:	cmp	r3, #7
    e984:	str	r2, [sp, #148]	; 0x94
    e986:	stmia.w	r9, {r1, r6}
    e98a:	ble.n	e970 <_svfprintf_r+0x550>
    e98c:	add	r2, sp, #140	; 0x8c
    e98e:	mov	r1, r4
    e990:	mov	r0, fp
    e992:	bl	fb04 <__ssprint_r>
    e996:	cmp	r0, #0
    e998:	bne.w	e614 <_svfprintf_r+0x1f4>
    e99c:	subs	r5, #16
    e99e:	cmp	r5, #16
    e9a0:	ldr	r2, [sp, #148]	; 0x94
    e9a2:	ldr	r3, [sp, #144]	; 0x90
    e9a4:	add.w	r9, sp, #192	; 0xc0
    e9a8:	bgt.n	e97a <_svfprintf_r+0x55a>
    e9aa:	mov	r4, r2
    e9ac:	adds	r3, #1
    e9ae:	add	r4, r5
    e9b0:	cmp	r3, #7
    e9b2:	str	r4, [sp, #148]	; 0x94
    e9b4:	str	r3, [sp, #144]	; 0x90
    e9b6:	str.w	r7, [r9]
    e9ba:	str.w	r5, [r9, #4]
    e9be:	ble.n	e9d2 <_svfprintf_r+0x5b2>
    e9c0:	add	r2, sp, #140	; 0x8c
    e9c2:	ldr	r1, [sp, #20]
    e9c4:	ldr	r0, [sp, #24]
    e9c6:	bl	fb04 <__ssprint_r>
    e9ca:	cmp	r0, #0
    e9cc:	bne.w	e614 <_svfprintf_r+0x1f4>
    e9d0:	ldr	r4, [sp, #148]	; 0x94
    e9d2:	ldr	r3, [sp, #28]
    e9d4:	ldr	r2, [sp, #32]
    e9d6:	ldr	r1, [sp, #16]
    e9d8:	cmp	r2, r1
    e9da:	ite	ge
    e9dc:	addge	r3, r3, r2
    e9de:	addlt	r3, r3, r1
    e9e0:	str	r3, [sp, #28]
    e9e2:	cmp	r4, #0
    e9e4:	bne.w	efa6 <_svfprintf_r+0xb86>
    e9e8:	movs	r3, #0
    e9ea:	str	r3, [sp, #144]	; 0x90
    e9ec:	add.w	r9, sp, #192	; 0xc0
    e9f0:	b.n	e46e <_svfprintf_r+0x4e>
    e9f2:	str	r3, [sp, #52]	; 0x34
    e9f4:	mov	fp, r5
    e9f6:	cmp	r2, #0
    e9f8:	bne.w	fac0 <_svfprintf_r+0x16a0>
    e9fc:	ldr	r3, [sp, #12]
    e9fe:	ldr	r7, [sp, #40]	; 0x28
    ea00:	lsls	r2, r3, #28
    ea02:	add.w	r7, r7, #7
    ea06:	bpl.w	f4f2 <_svfprintf_r+0x10d2>
    ea0a:	bic.w	r3, r7, #7
    ea0e:	vldr	d7, [r3]
    ea12:	vstr	d7, [sp, #64]	; 0x40
    ea16:	add.w	r2, r3, #8
    ea1a:	str	r2, [sp, #40]	; 0x28
    ea1c:	ldrd	r1, r2, [sp, #64]	; 0x40
    ea20:	bic.w	r3, r2, #2147483648	; 0x80000000
    ea24:	str	r1, [sp, #88]	; 0x58
    ea26:	str	r3, [sp, #92]	; 0x5c
    ea28:	ldrd	r4, r5, [sp, #88]	; 0x58
    ea2c:	mov.w	r2, #4294967295
    ea30:	mov	r0, r4
    ea32:	mov	r1, r5
    ea34:	ldr	r3, [pc, #108]	; (eaa4 <_svfprintf_r+0x684>)
    ea36:	bl	b714 <__aeabi_dcmpun>
    ea3a:	cmp	r0, #0
    ea3c:	bne.w	f3f4 <_svfprintf_r+0xfd4>
    ea40:	mov.w	r2, #4294967295
    ea44:	ldr	r3, [pc, #92]	; (eaa4 <_svfprintf_r+0x684>)
    ea46:	mov	r0, r4
    ea48:	mov	r1, r5
    ea4a:	bl	b6d8 <__aeabi_dcmple>
    ea4e:	cmp	r0, #0
    ea50:	bne.w	f3f4 <_svfprintf_r+0xfd4>
    ea54:	movs	r2, #0
    ea56:	movs	r3, #0
    ea58:	ldrd	r0, r1, [sp, #64]	; 0x40
    ea5c:	bl	b6c4 <__aeabi_dcmplt>
    ea60:	cmp	r0, #0
    ea62:	bne.w	f90a <_svfprintf_r+0x14ea>
    ea66:	ldrb.w	r7, [sp, #111]	; 0x6f
    ea6a:	ldr	r6, [pc, #60]	; (eaa8 <_svfprintf_r+0x688>)
    ea6c:	ldr	r3, [pc, #60]	; (eaac <_svfprintf_r+0x68c>)
    ea6e:	ldr	r1, [sp, #12]
    ea70:	bic.w	r1, r1, #128	; 0x80
    ea74:	str	r1, [sp, #12]
    ea76:	ldr	r1, [sp, #52]	; 0x34
    ea78:	movs	r2, #3
    ea7a:	mov.w	fp, #0
    ea7e:	str	r2, [sp, #16]
    ea80:	cmp	r1, #71	; 0x47
    ea82:	it	le
    ea84:	movle	r6, r3
    ea86:	str	r2, [sp, #36]	; 0x24
    ea88:	str.w	fp, [sp, #60]	; 0x3c
    ea8c:	b.n	e7c4 <_svfprintf_r+0x3a4>
    ea8e:	ldr	r3, [sp, #12]
    ea90:	orr.w	r3, r3, #8
    ea94:	str	r3, [sp, #12]
    ea96:	ldrb.w	r3, [r8]
    ea9a:	b.n	e4d4 <_svfprintf_r+0xb4>
    ea9c:	.word	0x00010560
    eaa0:	.word	0x00010510
    eaa4:	.word	0x7fefffff
    eaa8:	.word	0x00010524
    eaac:	.word	0x00010520
    eab0:	str	r3, [sp, #52]	; 0x34
    eab2:	mov	fp, r5
    eab4:	cmp	r2, #0
    eab6:	bne.w	fad8 <_svfprintf_r+0x16b8>
    eaba:	ldr	r3, [sp, #12]
    eabc:	orr.w	r3, r3, #16
    eac0:	str	r3, [sp, #12]
    eac2:	ldr	r2, [sp, #12]
    eac4:	ands.w	r3, r2, #32
    eac8:	bne.w	e640 <_svfprintf_r+0x220>
    eacc:	ldr	r1, [sp, #12]
    eace:	ands.w	r2, r1, #16
    ead2:	beq.w	f38c <_svfprintf_r+0xf6c>
    ead6:	ldr	r0, [sp, #40]	; 0x28
    ead8:	strb.w	r3, [sp, #111]	; 0x6f
    eadc:	cmp.w	fp, #0
    eae0:	ldr	r4, [r0, #0]
    eae2:	add.w	r7, r0, #4
    eae6:	mov.w	r5, #0
    eaea:	blt.w	f520 <_svfprintf_r+0x1100>
    eaee:	mov	r2, r1
    eaf0:	bic.w	r2, r2, #128	; 0x80
    eaf4:	str	r2, [sp, #12]
    eaf6:	orrs.w	r2, r4, r5
    eafa:	str	r7, [sp, #40]	; 0x28
    eafc:	beq.w	ed74 <_svfprintf_r+0x954>
    eb00:	mov	r7, r3
    eb02:	b.n	e66c <_svfprintf_r+0x24c>
    eb04:	str	r3, [sp, #52]	; 0x34
    eb06:	mov	fp, r5
    eb08:	cmp	r2, #0
    eb0a:	bne.w	fad0 <_svfprintf_r+0x16b0>
    eb0e:	ldr	r3, [sp, #12]
    eb10:	orr.w	r3, r3, #16
    eb14:	str	r3, [sp, #12]
    eb16:	ldr	r2, [sp, #12]
    eb18:	ands.w	r3, r2, #32
    eb1c:	beq.w	f178 <_svfprintf_r+0xd58>
    eb20:	ldr	r7, [sp, #40]	; 0x28
    eb22:	adds	r7, #7
    eb24:	bic.w	r3, r7, #7
    eb28:	movs	r7, #0
    eb2a:	add.w	r1, r3, #8
    eb2e:	cmp	fp, r7
    eb30:	str	r1, [sp, #40]	; 0x28
    eb32:	ldrd	r4, r5, [r3]
    eb36:	strb.w	r7, [sp, #111]	; 0x6f
    eb3a:	blt.w	f1ea <_svfprintf_r+0xdca>
    eb3e:	bic.w	r3, r2, #128	; 0x80
    eb42:	str	r3, [sp, #12]
    eb44:	orrs.w	r3, r4, r5
    eb48:	bne.w	e77c <_svfprintf_r+0x35c>
    eb4c:	cmp.w	fp, #0
    eb50:	beq.w	ed3e <_svfprintf_r+0x91e>
    eb54:	movs	r4, #0
    eb56:	add	r6, sp, #256	; 0x100
    eb58:	adds	r4, #48	; 0x30
    eb5a:	strb.w	r4, [r6, #-65]!
    eb5e:	b.n	e7b0 <_svfprintf_r+0x390>
    eb60:	str	r3, [sp, #52]	; 0x34
    eb62:	mov	fp, r5
    eb64:	cmp	r2, #0
    eb66:	bne.w	fac8 <_svfprintf_r+0x16a8>
    eb6a:	ldr	r3, [sp, #12]
    eb6c:	ldr	r0, [pc, #700]	; (ee2c <_svfprintf_r+0xa0c>)
    eb6e:	lsls	r5, r3, #26
    eb70:	bpl.w	ecde <_svfprintf_r+0x8be>
    eb74:	ldr	r7, [sp, #40]	; 0x28
    eb76:	adds	r7, #7
    eb78:	bic.w	r3, r7, #7
    eb7c:	ldrd	r4, r5, [r3]
    eb80:	add.w	r2, r3, #8
    eb84:	str	r2, [sp, #40]	; 0x28
    eb86:	ldr	r2, [sp, #12]
    eb88:	ands.w	r7, r2, #1
    eb8c:	beq.w	f002 <_svfprintf_r+0xbe2>
    eb90:	orrs.w	r3, r4, r5
    eb94:	beq.w	f59c <_svfprintf_r+0x117c>
    eb98:	ldrb.w	r2, [sp, #52]	; 0x34
    eb9c:	strb.w	r2, [sp, #113]	; 0x71
    eba0:	movs	r7, #0
    eba2:	ldr	r2, [sp, #12]
    eba4:	strb.w	r7, [sp, #111]	; 0x6f
    eba8:	movs	r3, #48	; 0x30
    ebaa:	cmp	fp, r7
    ebac:	strb.w	r3, [sp, #112]	; 0x70
    ebb0:	orr.w	r3, r2, #2
    ebb4:	blt.w	f914 <_svfprintf_r+0x14f4>
    ebb8:	bic.w	r3, r2, #128	; 0x80
    ebbc:	orr.w	r3, r3, #2
    ebc0:	str	r3, [sp, #12]
    ebc2:	add	r6, sp, #192	; 0xc0
    ebc4:	lsrs	r3, r4, #4
    ebc6:	and.w	r1, r4, #15
    ebca:	orr.w	r3, r3, r5, lsl #28
    ebce:	lsrs	r2, r5, #4
    ebd0:	mov	r4, r3
    ebd2:	mov	r5, r2
    ebd4:	ldrb	r3, [r0, r1]
    ebd6:	strb.w	r3, [r6, #-1]!
    ebda:	orrs.w	r3, r4, r5
    ebde:	bne.n	ebc4 <_svfprintf_r+0x7a4>
    ebe0:	b.n	e7b0 <_svfprintf_r+0x390>
    ebe2:	ldr	r1, [sp, #40]	; 0x28
    ebe4:	str	r3, [sp, #52]	; 0x34
    ebe6:	ldr	r2, [r1, #0]
    ebe8:	strb.w	r2, [sp, #152]	; 0x98
    ebec:	movs	r3, #0
    ebee:	mov	r2, r1
    ebf0:	mov	r7, r3
    ebf2:	strb.w	r3, [sp, #111]	; 0x6f
    ebf6:	adds	r2, #4
    ebf8:	movs	r3, #1
    ebfa:	str	r3, [sp, #16]
    ebfc:	mov	fp, r7
    ebfe:	str	r7, [sp, #60]	; 0x3c
    ec00:	str	r2, [sp, #40]	; 0x28
    ec02:	str	r3, [sp, #36]	; 0x24
    ec04:	add	r6, sp, #152	; 0x98
    ec06:	b.n	e7cc <_svfprintf_r+0x3ac>
    ec08:	str	r3, [sp, #52]	; 0x34
    ec0a:	mov	fp, r5
    ec0c:	cmp	r2, #0
    ec0e:	beq.w	e738 <_svfprintf_r+0x318>
    ec12:	strb.w	r1, [sp, #111]	; 0x6f
    ec16:	b.n	e738 <_svfprintf_r+0x318>
    ec18:	ldr	r3, [sp, #12]
    ec1a:	orr.w	r3, r3, #64	; 0x40
    ec1e:	str	r3, [sp, #12]
    ec20:	ldrb.w	r3, [r8]
    ec24:	b.n	e4d4 <_svfprintf_r+0xb4>
    ec26:	ldrb.w	r3, [r8]
    ec2a:	cmp	r1, #0
    ec2c:	bne.w	e4d4 <_svfprintf_r+0xb4>
    ec30:	movs	r2, #1
    ec32:	movs	r1, #32
    ec34:	b.n	e4d4 <_svfprintf_r+0xb4>
    ec36:	ldr	r3, [sp, #12]
    ec38:	orr.w	r3, r3, #1
    ec3c:	str	r3, [sp, #12]
    ec3e:	ldrb.w	r3, [r8]
    ec42:	b.n	e4d4 <_svfprintf_r+0xb4>
    ec44:	ldr	r4, [sp, #40]	; 0x28
    ec46:	ldr	r3, [r4, #0]
    ec48:	str	r3, [sp, #32]
    ec4a:	mov	r0, r3
    ec4c:	cmp	r0, #0
    ec4e:	mov	r3, r4
    ec50:	add.w	r3, r3, #4
    ec54:	blt.w	e598 <_svfprintf_r+0x178>
    ec58:	str	r3, [sp, #40]	; 0x28
    ec5a:	ldrb.w	r3, [r8]
    ec5e:	b.n	e4d4 <_svfprintf_r+0xb4>
    ec60:	ldrb.w	r3, [r8]
    ec64:	movs	r2, #1
    ec66:	movs	r1, #43	; 0x2b
    ec68:	b.n	e4d4 <_svfprintf_r+0xb4>
    ec6a:	ldr	r3, [sp, #12]
    ec6c:	orr.w	r3, r3, #32
    ec70:	str	r3, [sp, #12]
    ec72:	ldrb.w	r3, [r8]
    ec76:	b.n	e4d4 <_svfprintf_r+0xb4>
    ec78:	ldr	r2, [sp, #40]	; 0x28
    ec7a:	str	r3, [sp, #52]	; 0x34
    ec7c:	ldr	r6, [r2, #0]
    ec7e:	movs	r4, #0
    ec80:	strb.w	r4, [sp, #111]	; 0x6f
    ec84:	adds	r7, r2, #4
    ec86:	cmp	r6, #0
    ec88:	beq.w	f8c4 <_svfprintf_r+0x14a4>
    ec8c:	cmp	r5, #0
    ec8e:	blt.w	f754 <_svfprintf_r+0x1334>
    ec92:	mov	r2, r5
    ec94:	mov	r1, r4
    ec96:	mov	r0, r6
    ec98:	bl	c0d0 <memchr>
    ec9c:	cmp	r0, #0
    ec9e:	beq.w	f968 <_svfprintf_r+0x1548>
    eca2:	subs	r3, r0, r6
    eca4:	str	r3, [sp, #36]	; 0x24
    eca6:	mov	fp, r4
    eca8:	bic.w	r3, r3, r3, asr #31
    ecac:	str	r7, [sp, #40]	; 0x28
    ecae:	str	r3, [sp, #16]
    ecb0:	str.w	fp, [sp, #60]	; 0x3c
    ecb4:	ldrb.w	r7, [sp, #111]	; 0x6f
    ecb8:	b.n	e7c4 <_svfprintf_r+0x3a4>
    ecba:	str	r3, [sp, #52]	; 0x34
    ecbc:	mov	fp, r5
    ecbe:	cmp	r2, #0
    ecc0:	beq.w	eb16 <_svfprintf_r+0x6f6>
    ecc4:	strb.w	r1, [sp, #111]	; 0x6f
    ecc8:	b.n	eb16 <_svfprintf_r+0x6f6>
    ecca:	str	r3, [sp, #52]	; 0x34
    eccc:	mov	fp, r5
    ecce:	cmp	r2, #0
    ecd0:	bne.w	faf0 <_svfprintf_r+0x16d0>
    ecd4:	ldr	r3, [sp, #12]
    ecd6:	ldr	r0, [pc, #344]	; (ee30 <_svfprintf_r+0xa10>)
    ecd8:	lsls	r5, r3, #26
    ecda:	bmi.w	eb74 <_svfprintf_r+0x754>
    ecde:	ldr	r3, [sp, #12]
    ece0:	lsls	r4, r3, #27
    ece2:	bpl.w	f562 <_svfprintf_r+0x1142>
    ece6:	ldr	r2, [sp, #40]	; 0x28
    ece8:	mov	r3, r2
    ecea:	adds	r3, #4
    ecec:	ldr	r4, [r2, #0]
    ecee:	str	r3, [sp, #40]	; 0x28
    ecf0:	movs	r5, #0
    ecf2:	b.n	eb86 <_svfprintf_r+0x766>
    ecf4:	ldrb.w	r3, [r8]
    ecf8:	cmp	r3, #108	; 0x6c
    ecfa:	beq.w	f682 <_svfprintf_r+0x1262>
    ecfe:	ldr	r0, [sp, #12]
    ed00:	orr.w	r0, r0, #16
    ed04:	str	r0, [sp, #12]
    ed06:	b.w	e4d4 <_svfprintf_r+0xb4>
    ed0a:	cmp	r2, #0
    ed0c:	bne.w	fae8 <_svfprintf_r+0x16c8>
    ed10:	ldr	r3, [sp, #12]
    ed12:	lsls	r3, r3, #26
    ed14:	bpl.w	f3c6 <_svfprintf_r+0xfa6>
    ed18:	ldr	r2, [sp, #40]	; 0x28
    ed1a:	ldr	r1, [sp, #28]
    ed1c:	ldr	r3, [r2, #0]
    ed1e:	asrs	r5, r1, #31
    ed20:	mov	r0, r1
    ed22:	adds	r2, #4
    ed24:	mov	r1, r5
    ed26:	str	r2, [sp, #40]	; 0x28
    ed28:	strd	r0, r1, [r3]
    ed2c:	b.w	e46e <_svfprintf_r+0x4e>
    ed30:	ldr	r0, [pc, #252]	; (ee30 <_svfprintf_r+0xa10>)
    ed32:	str	r2, [sp, #52]	; 0x34
    ed34:	cmp.w	fp, #0
    ed38:	bne.w	f024 <_svfprintf_r+0xc04>
    ed3c:	mov	r7, fp
    ed3e:	mov.w	fp, #0
    ed42:	str.w	fp, [sp, #36]	; 0x24
    ed46:	add	r6, sp, #192	; 0xc0
    ed48:	b.n	e7b6 <_svfprintf_r+0x396>
    ed4a:	str	r3, [sp, #52]	; 0x34
    ed4c:	cmp	r2, #0
    ed4e:	bne.w	fae0 <_svfprintf_r+0x16c0>
    ed52:	ldr	r2, [sp, #52]	; 0x34
    ed54:	cmp	r2, #0
    ed56:	beq.w	e606 <_svfprintf_r+0x1e6>
    ed5a:	movs	r3, #0
    ed5c:	movs	r1, #1
    ed5e:	mov	r7, r3
    ed60:	str	r1, [sp, #16]
    ed62:	strb.w	r2, [sp, #152]	; 0x98
    ed66:	strb.w	r3, [sp, #111]	; 0x6f
    ed6a:	mov	fp, r3
    ed6c:	str	r3, [sp, #60]	; 0x3c
    ed6e:	str	r1, [sp, #36]	; 0x24
    ed70:	add	r6, sp, #152	; 0x98
    ed72:	b.n	e7cc <_svfprintf_r+0x3ac>
    ed74:	cmp.w	fp, #0
    ed78:	beq.w	f998 <_svfprintf_r+0x1578>
    ed7c:	movs	r7, #0
    ed7e:	movs	r4, #0
    ed80:	movs	r5, #0
    ed82:	b.n	e66c <_svfprintf_r+0x24c>
    ed84:	ldr	r0, [pc, #168]	; (ee30 <_svfprintf_r+0xa10>)
    ed86:	str	r3, [sp, #12]
    ed88:	str	r2, [sp, #52]	; 0x34
    ed8a:	orrs.w	r3, r4, r5
    ed8e:	str	r7, [sp, #40]	; 0x28
    ed90:	mov.w	r7, #0
    ed94:	bne.w	ebc2 <_svfprintf_r+0x7a2>
    ed98:	movs	r4, #0
    ed9a:	movs	r5, #0
    ed9c:	b.n	ebc2 <_svfprintf_r+0x7a2>
    ed9e:	ldr	r4, [sp, #148]	; 0x94
    eda0:	b.n	e86c <_svfprintf_r+0x44c>
    eda2:	ldr	r3, [sp, #52]	; 0x34
    eda4:	cmp	r3, #101	; 0x65
    eda6:	ble.w	eefe <_svfprintf_r+0xade>
    edaa:	movs	r2, #0
    edac:	movs	r3, #0
    edae:	ldrd	r0, r1, [sp, #64]	; 0x40
    edb2:	bl	b6b0 <__aeabi_dcmpeq>
    edb6:	cmp	r0, #0
    edb8:	beq.w	f028 <_svfprintf_r+0xc08>
    edbc:	ldr	r3, [sp, #144]	; 0x90
    edbe:	ldr	r2, [pc, #116]	; (ee34 <_svfprintf_r+0xa14>)
    edc0:	str.w	r2, [r9]
    edc4:	adds	r3, #1
    edc6:	adds	r4, #1
    edc8:	movs	r2, #1
    edca:	cmp	r3, #7
    edcc:	str	r4, [sp, #148]	; 0x94
    edce:	str	r3, [sp, #144]	; 0x90
    edd0:	str.w	r2, [r9, #4]
    edd4:	bgt.w	f5b4 <_svfprintf_r+0x1194>
    edd8:	add.w	r9, r9, #8
    eddc:	ldr	r3, [sp, #116]	; 0x74
    edde:	ldr	r2, [sp, #56]	; 0x38
    ede0:	cmp	r3, r2
    ede2:	blt.n	edec <_svfprintf_r+0x9cc>
    ede4:	ldr	r3, [sp, #12]
    ede6:	lsls	r3, r3, #31
    ede8:	bpl.w	e94c <_svfprintf_r+0x52c>
    edec:	ldr	r3, [sp, #144]	; 0x90
    edee:	ldr	r1, [sp, #72]	; 0x48
    edf0:	ldr	r2, [sp, #76]	; 0x4c
    edf2:	str.w	r2, [r9]
    edf6:	adds	r3, #1
    edf8:	add	r4, r1
    edfa:	cmp	r3, #7
    edfc:	str	r4, [sp, #148]	; 0x94
    edfe:	str.w	r1, [r9, #4]
    ee02:	str	r3, [sp, #144]	; 0x90
    ee04:	bgt.w	f696 <_svfprintf_r+0x1276>
    ee08:	add.w	r9, r9, #8
    ee0c:	ldr	r3, [sp, #56]	; 0x38
    ee0e:	subs	r5, r3, #1
    ee10:	cmp	r5, #0
    ee12:	ble.w	e94c <_svfprintf_r+0x52c>
    ee16:	ldr	r2, [pc, #32]	; (ee38 <_svfprintf_r+0xa18>)
    ee18:	ldr	r3, [sp, #144]	; 0x90
    ee1a:	str	r2, [sp, #44]	; 0x2c
    ee1c:	cmp	r5, #16
    ee1e:	ble.w	f1f4 <_svfprintf_r+0xdd4>
    ee22:	movs	r6, #16
    ee24:	ldr	r7, [sp, #24]
    ee26:	ldr.w	fp, [sp, #20]
    ee2a:	b.n	ee48 <_svfprintf_r+0xa28>
    ee2c:	.word	0x00010530
    ee30:	.word	0x00010544
    ee34:	.word	0x0001050c
    ee38:	.word	0x00010510
    ee3c:	add.w	r9, r9, #8
    ee40:	subs	r5, #16
    ee42:	cmp	r5, #16
    ee44:	ble.w	f1f4 <_svfprintf_r+0xdd4>
    ee48:	adds	r3, #1
    ee4a:	adds	r4, #16
    ee4c:	cmp	r3, #7
    ee4e:	str	r4, [sp, #148]	; 0x94
    ee50:	str	r3, [sp, #144]	; 0x90
    ee52:	str.w	sl, [r9]
    ee56:	str.w	r6, [r9, #4]
    ee5a:	ble.n	ee3c <_svfprintf_r+0xa1c>
    ee5c:	add	r2, sp, #140	; 0x8c
    ee5e:	mov	r1, fp
    ee60:	mov	r0, r7
    ee62:	bl	fb04 <__ssprint_r>
    ee66:	cmp	r0, #0
    ee68:	bne.w	e614 <_svfprintf_r+0x1f4>
    ee6c:	ldr	r4, [sp, #148]	; 0x94
    ee6e:	ldr	r3, [sp, #144]	; 0x90
    ee70:	add.w	r9, sp, #192	; 0xc0
    ee74:	b.n	ee40 <_svfprintf_r+0xa20>
    ee76:	ldr	r3, [sp, #32]
    ee78:	ldr	r2, [sp, #16]
    ee7a:	subs	r7, r3, r2
    ee7c:	cmp	r7, #0
    ee7e:	ble.w	e8b4 <_svfprintf_r+0x494>
    ee82:	ldr	r2, [pc, #752]	; (f174 <_svfprintf_r+0xd54>)
    ee84:	ldr	r3, [sp, #144]	; 0x90
    ee86:	str	r2, [sp, #44]	; 0x2c
    ee88:	cmp	r7, #16
    ee8a:	ble.n	eee4 <_svfprintf_r+0xac4>
    ee8c:	mov	r2, r9
    ee8e:	mov	r1, r4
    ee90:	mov	r9, r7
    ee92:	movs	r5, #16
    ee94:	mov	r7, r6
    ee96:	ldr	r4, [sp, #24]
    ee98:	ldr	r6, [sp, #20]
    ee9a:	b.n	eeaa <_svfprintf_r+0xa8a>
    ee9c:	sub.w	r9, r9, #16
    eea0:	cmp.w	r9, #16
    eea4:	add.w	r2, r2, #8
    eea8:	ble.n	eedc <_svfprintf_r+0xabc>
    eeaa:	adds	r3, #1
    eeac:	adds	r1, #16
    eeae:	cmp	r3, #7
    eeb0:	str	r1, [sp, #148]	; 0x94
    eeb2:	str	r3, [sp, #144]	; 0x90
    eeb4:	str.w	sl, [r2]
    eeb8:	str	r5, [r2, #4]
    eeba:	ble.n	ee9c <_svfprintf_r+0xa7c>
    eebc:	add	r2, sp, #140	; 0x8c
    eebe:	mov	r1, r6
    eec0:	mov	r0, r4
    eec2:	bl	fb04 <__ssprint_r>
    eec6:	cmp	r0, #0
    eec8:	bne.w	e614 <_svfprintf_r+0x1f4>
    eecc:	sub.w	r9, r9, #16
    eed0:	cmp.w	r9, #16
    eed4:	ldr	r1, [sp, #148]	; 0x94
    eed6:	ldr	r3, [sp, #144]	; 0x90
    eed8:	add	r2, sp, #192	; 0xc0
    eeda:	bgt.n	eeaa <_svfprintf_r+0xa8a>
    eedc:	mov	r6, r7
    eede:	mov	r4, r1
    eee0:	mov	r7, r9
    eee2:	mov	r9, r2
    eee4:	adds	r3, #1
    eee6:	ldr	r2, [sp, #44]	; 0x2c
    eee8:	str	r3, [sp, #144]	; 0x90
    eeea:	add	r4, r7
    eeec:	cmp	r3, #7
    eeee:	str	r4, [sp, #148]	; 0x94
    eef0:	stmia.w	r9, {r2, r7}
    eef4:	bgt.w	f372 <_svfprintf_r+0xf52>
    eef8:	add.w	r9, r9, #8
    eefc:	b.n	e8b4 <_svfprintf_r+0x494>
    eefe:	ldr	r3, [sp, #56]	; 0x38
    ef00:	ldr	r5, [sp, #144]	; 0x90
    ef02:	cmp	r3, #1
    ef04:	ble.w	f31c <_svfprintf_r+0xefc>
    ef08:	adds	r5, #1
    ef0a:	adds	r4, #1
    ef0c:	movs	r3, #1
    ef0e:	cmp	r5, #7
    ef10:	str	r4, [sp, #148]	; 0x94
    ef12:	str	r5, [sp, #144]	; 0x90
    ef14:	str.w	r6, [r9]
    ef18:	str.w	r3, [r9, #4]
    ef1c:	bgt.w	f33e <_svfprintf_r+0xf1e>
    ef20:	add.w	r9, r9, #8
    ef24:	ldr	r2, [sp, #72]	; 0x48
    ef26:	ldr	r3, [sp, #76]	; 0x4c
    ef28:	str.w	r3, [r9]
    ef2c:	adds	r5, #1
    ef2e:	add	r4, r2
    ef30:	cmp	r5, #7
    ef32:	str	r4, [sp, #148]	; 0x94
    ef34:	str	r5, [sp, #144]	; 0x90
    ef36:	str.w	r2, [r9, #4]
    ef3a:	bgt.w	f358 <_svfprintf_r+0xf38>
    ef3e:	add.w	r9, r9, #8
    ef42:	movs	r3, #0
    ef44:	movs	r2, #0
    ef46:	ldrd	r0, r1, [sp, #64]	; 0x40
    ef4a:	bl	b6b0 <__aeabi_dcmpeq>
    ef4e:	ldr	r3, [sp, #56]	; 0x38
    ef50:	cmp	r0, #0
    ef52:	bne.w	f0dc <_svfprintf_r+0xcbc>
    ef56:	subs	r3, #1
    ef58:	adds	r5, #1
    ef5a:	adds	r6, #1
    ef5c:	add	r4, r3
    ef5e:	cmp	r5, #7
    ef60:	str	r5, [sp, #144]	; 0x90
    ef62:	str	r4, [sp, #148]	; 0x94
    ef64:	str.w	r6, [r9]
    ef68:	str.w	r3, [r9, #4]
    ef6c:	bgt.w	f15a <_svfprintf_r+0xd3a>
    ef70:	add.w	r9, r9, #8
    ef74:	ldr	r2, [sp, #84]	; 0x54
    ef76:	str.w	r2, [r9, #4]
    ef7a:	adds	r5, #1
    ef7c:	add	r4, r2
    ef7e:	add	r3, sp, #124	; 0x7c
    ef80:	cmp	r5, #7
    ef82:	str	r4, [sp, #148]	; 0x94
    ef84:	str	r5, [sp, #144]	; 0x90
    ef86:	str.w	r3, [r9]
    ef8a:	ble.w	e948 <_svfprintf_r+0x528>
    ef8e:	add	r2, sp, #140	; 0x8c
    ef90:	ldr	r1, [sp, #20]
    ef92:	ldr	r0, [sp, #24]
    ef94:	bl	fb04 <__ssprint_r>
    ef98:	cmp	r0, #0
    ef9a:	bne.w	e614 <_svfprintf_r+0x1f4>
    ef9e:	ldr	r4, [sp, #148]	; 0x94
    efa0:	add.w	r9, sp, #192	; 0xc0
    efa4:	b.n	e94c <_svfprintf_r+0x52c>
    efa6:	add	r2, sp, #140	; 0x8c
    efa8:	ldr	r1, [sp, #20]
    efaa:	ldr	r0, [sp, #24]
    efac:	bl	fb04 <__ssprint_r>
    efb0:	cmp	r0, #0
    efb2:	beq.w	e9e8 <_svfprintf_r+0x5c8>
    efb6:	b.w	e614 <_svfprintf_r+0x1f4>
    efba:	add	r2, sp, #140	; 0x8c
    efbc:	ldr	r1, [sp, #20]
    efbe:	ldr	r0, [sp, #24]
    efc0:	bl	fb04 <__ssprint_r>
    efc4:	cmp	r0, #0
    efc6:	bne.w	e614 <_svfprintf_r+0x1f4>
    efca:	ldr	r4, [sp, #148]	; 0x94
    efcc:	add.w	r9, sp, #192	; 0xc0
    efd0:	b.n	e926 <_svfprintf_r+0x506>
    efd2:	add	r2, sp, #140	; 0x8c
    efd4:	ldr	r1, [sp, #20]
    efd6:	ldr	r0, [sp, #24]
    efd8:	bl	fb04 <__ssprint_r>
    efdc:	cmp	r0, #0
    efde:	bne.w	e614 <_svfprintf_r+0x1f4>
    efe2:	ldr	r4, [sp, #148]	; 0x94
    efe4:	add.w	r9, sp, #192	; 0xc0
    efe8:	b.n	e88c <_svfprintf_r+0x46c>
    efea:	add	r2, sp, #140	; 0x8c
    efec:	ldr	r1, [sp, #20]
    efee:	ldr	r0, [sp, #24]
    eff0:	bl	fb04 <__ssprint_r>
    eff4:	cmp	r0, #0
    eff6:	bne.w	e614 <_svfprintf_r+0x1f4>
    effa:	ldr	r4, [sp, #148]	; 0x94
    effc:	add.w	r9, sp, #192	; 0xc0
    f000:	b.n	e8ac <_svfprintf_r+0x48c>
    f002:	cmp.w	fp, #0
    f006:	strb.w	r7, [sp, #111]	; 0x6f
    f00a:	blt.w	f5cc <_svfprintf_r+0x11ac>
    f00e:	bic.w	r3, r2, #128	; 0x80
    f012:	str	r3, [sp, #12]
    f014:	orrs.w	r3, r4, r5
    f018:	bne.w	ebc2 <_svfprintf_r+0x7a2>
    f01c:	cmp.w	fp, #0
    f020:	beq.w	ed3c <_svfprintf_r+0x91c>
    f024:	movs	r7, #0
    f026:	b.n	ed98 <_svfprintf_r+0x978>
    f028:	ldr	r5, [sp, #116]	; 0x74
    f02a:	cmp	r5, #0
    f02c:	ble.w	f5d2 <_svfprintf_r+0x11b2>
    f030:	ldr	r3, [sp, #60]	; 0x3c
    f032:	ldr	r2, [sp, #56]	; 0x38
    f034:	cmp	r3, r2
    f036:	it	ge
    f038:	movge	r3, r2
    f03a:	cmp	r3, #0
    f03c:	mov	r5, r3
    f03e:	ble.n	f05c <_svfprintf_r+0xc3c>
    f040:	ldr	r3, [sp, #144]	; 0x90
    f042:	str.w	r6, [r9]
    f046:	adds	r3, #1
    f048:	add	r4, r5
    f04a:	cmp	r3, #7
    f04c:	str	r4, [sp, #148]	; 0x94
    f04e:	str.w	r5, [r9, #4]
    f052:	str	r3, [sp, #144]	; 0x90
    f054:	bgt.w	f7aa <_svfprintf_r+0x138a>
    f058:	add.w	r9, r9, #8
    f05c:	ldr	r3, [sp, #60]	; 0x3c
    f05e:	cmp	r5, #0
    f060:	it	ge
    f062:	subge	r3, r3, r5
    f064:	cmp	r3, #0
    f066:	mov	r5, r3
    f068:	ble.w	f25c <_svfprintf_r+0xe3c>
    f06c:	ldr	r2, [pc, #260]	; (f174 <_svfprintf_r+0xd54>)
    f06e:	ldr	r3, [sp, #144]	; 0x90
    f070:	str	r2, [sp, #44]	; 0x2c
    f072:	cmp	r5, #16
    f074:	ble.w	f57e <_svfprintf_r+0x115e>
    f078:	mov	r2, r4
    f07a:	movs	r7, #16
    f07c:	ldr.w	fp, [sp, #24]
    f080:	ldr	r4, [sp, #20]
    f082:	b.n	f090 <_svfprintf_r+0xc70>
    f084:	add.w	r9, r9, #8
    f088:	subs	r5, #16
    f08a:	cmp	r5, #16
    f08c:	ble.w	f57c <_svfprintf_r+0x115c>
    f090:	adds	r3, #1
    f092:	adds	r2, #16
    f094:	cmp	r3, #7
    f096:	str	r2, [sp, #148]	; 0x94
    f098:	str	r3, [sp, #144]	; 0x90
    f09a:	str.w	sl, [r9]
    f09e:	str.w	r7, [r9, #4]
    f0a2:	ble.n	f084 <_svfprintf_r+0xc64>
    f0a4:	add	r2, sp, #140	; 0x8c
    f0a6:	mov	r1, r4
    f0a8:	mov	r0, fp
    f0aa:	bl	fb04 <__ssprint_r>
    f0ae:	cmp	r0, #0
    f0b0:	bne.w	e614 <_svfprintf_r+0x1f4>
    f0b4:	ldr	r2, [sp, #148]	; 0x94
    f0b6:	ldr	r3, [sp, #144]	; 0x90
    f0b8:	add.w	r9, sp, #192	; 0xc0
    f0bc:	b.n	f088 <_svfprintf_r+0xc68>
    f0be:	add	r2, sp, #140	; 0x8c
    f0c0:	ldr	r1, [sp, #20]
    f0c2:	ldr	r0, [sp, #24]
    f0c4:	bl	fb04 <__ssprint_r>
    f0c8:	cmp	r0, #0
    f0ca:	bne.w	e614 <_svfprintf_r+0x1f4>
    f0ce:	ldrb.w	r7, [sp, #111]	; 0x6f
    f0d2:	ldr	r4, [sp, #148]	; 0x94
    f0d4:	add.w	r9, sp, #192	; 0xc0
    f0d8:	b.w	e86c <_svfprintf_r+0x44c>
    f0dc:	subs	r6, r3, #1
    f0de:	cmp	r6, #0
    f0e0:	ble.w	ef74 <_svfprintf_r+0xb54>
    f0e4:	ldr	r3, [pc, #140]	; (f174 <_svfprintf_r+0xd54>)
    f0e6:	str	r3, [sp, #44]	; 0x2c
    f0e8:	cmp	r6, #16
    f0ea:	ble.n	f146 <_svfprintf_r+0xd26>
    f0ec:	str.w	r8, [sp, #36]	; 0x24
    f0f0:	movs	r7, #16
    f0f2:	mov	r8, r6
    f0f4:	ldr.w	fp, [sp, #24]
    f0f8:	ldr	r6, [sp, #20]
    f0fa:	b.n	f10a <_svfprintf_r+0xcea>
    f0fc:	sub.w	r8, r8, #16
    f100:	cmp.w	r8, #16
    f104:	add.w	r9, r9, #8
    f108:	ble.n	f140 <_svfprintf_r+0xd20>
    f10a:	adds	r5, #1
    f10c:	adds	r4, #16
    f10e:	cmp	r5, #7
    f110:	str	r4, [sp, #148]	; 0x94
    f112:	str	r5, [sp, #144]	; 0x90
    f114:	str.w	sl, [r9]
    f118:	str.w	r7, [r9, #4]
    f11c:	ble.n	f0fc <_svfprintf_r+0xcdc>
    f11e:	add	r2, sp, #140	; 0x8c
    f120:	mov	r1, r6
    f122:	mov	r0, fp
    f124:	bl	fb04 <__ssprint_r>
    f128:	cmp	r0, #0
    f12a:	bne.w	e614 <_svfprintf_r+0x1f4>
    f12e:	sub.w	r8, r8, #16
    f132:	cmp.w	r8, #16
    f136:	ldr	r4, [sp, #148]	; 0x94
    f138:	ldr	r5, [sp, #144]	; 0x90
    f13a:	add.w	r9, sp, #192	; 0xc0
    f13e:	bgt.n	f10a <_svfprintf_r+0xcea>
    f140:	mov	r6, r8
    f142:	ldr.w	r8, [sp, #36]	; 0x24
    f146:	ldr	r3, [sp, #44]	; 0x2c
    f148:	adds	r5, #1
    f14a:	add	r4, r6
    f14c:	cmp	r5, #7
    f14e:	str	r4, [sp, #148]	; 0x94
    f150:	str	r5, [sp, #144]	; 0x90
    f152:	stmia.w	r9, {r3, r6}
    f156:	ble.w	ef70 <_svfprintf_r+0xb50>
    f15a:	add	r2, sp, #140	; 0x8c
    f15c:	ldr	r1, [sp, #20]
    f15e:	ldr	r0, [sp, #24]
    f160:	bl	fb04 <__ssprint_r>
    f164:	cmp	r0, #0
    f166:	bne.w	e614 <_svfprintf_r+0x1f4>
    f16a:	ldr	r4, [sp, #148]	; 0x94
    f16c:	ldr	r5, [sp, #144]	; 0x90
    f16e:	add.w	r9, sp, #192	; 0xc0
    f172:	b.n	ef74 <_svfprintf_r+0xb54>
    f174:	.word	0x00010510
    f178:	ldr	r1, [sp, #12]
    f17a:	ands.w	r2, r1, #16
    f17e:	beq.w	f528 <_svfprintf_r+0x1108>
    f182:	ldr	r0, [sp, #40]	; 0x28
    f184:	strb.w	r3, [sp, #111]	; 0x6f
    f188:	cmp.w	fp, #0
    f18c:	ldr	r4, [r0, #0]
    f18e:	add.w	r7, r0, #4
    f192:	mov.w	r5, #0
    f196:	blt.n	f1e6 <_svfprintf_r+0xdc6>
    f198:	mov	r2, r1
    f19a:	bic.w	r2, r2, #128	; 0x80
    f19e:	str	r2, [sp, #12]
    f1a0:	orrs.w	r2, r4, r5
    f1a4:	str	r7, [sp, #40]	; 0x28
    f1a6:	mov	r7, r3
    f1a8:	bne.w	e77c <_svfprintf_r+0x35c>
    f1ac:	b.n	eb4c <_svfprintf_r+0x72c>
    f1ae:	ldr	r3, [sp, #12]
    f1b0:	lsls	r0, r3, #27
    f1b2:	bmi.n	f20a <_svfprintf_r+0xdea>
    f1b4:	ldr	r3, [sp, #12]
    f1b6:	lsls	r1, r3, #25
    f1b8:	bpl.n	f20a <_svfprintf_r+0xdea>
    f1ba:	ldr	r1, [sp, #40]	; 0x28
    f1bc:	ldrsh.w	r4, [r1]
    f1c0:	adds	r1, #4
    f1c2:	asrs	r5, r4, #31
    f1c4:	mov	r2, r4
    f1c6:	mov	r3, r5
    f1c8:	str	r1, [sp, #40]	; 0x28
    f1ca:	b.w	e756 <_svfprintf_r+0x336>
    f1ce:	ldr	r1, [sp, #40]	; 0x28
    f1d0:	strb.w	r3, [sp, #111]	; 0x6f
    f1d4:	cmp.w	fp, #0
    f1d8:	ldr	r4, [r1, #0]
    f1da:	add.w	r7, r1, #4
    f1de:	mov.w	r5, #0
    f1e2:	bge.w	f67e <_svfprintf_r+0x125e>
    f1e6:	str	r7, [sp, #40]	; 0x28
    f1e8:	mov	r7, r3
    f1ea:	orrs.w	r3, r4, r5
    f1ee:	bne.w	e77c <_svfprintf_r+0x35c>
    f1f2:	b.n	eb56 <_svfprintf_r+0x736>
    f1f4:	adds	r3, #1
    f1f6:	ldr	r2, [sp, #44]	; 0x2c
    f1f8:	str	r3, [sp, #144]	; 0x90
    f1fa:	add	r4, r5
    f1fc:	cmp	r3, #7
    f1fe:	str	r4, [sp, #148]	; 0x94
    f200:	stmia.w	r9, {r2, r5}
    f204:	ble.w	e948 <_svfprintf_r+0x528>
    f208:	b.n	ef8e <_svfprintf_r+0xb6e>
    f20a:	ldr	r2, [sp, #40]	; 0x28
    f20c:	ldr	r4, [r2, #0]
    f20e:	mov	r3, r2
    f210:	adds	r3, #4
    f212:	asrs	r5, r4, #31
    f214:	mov	r2, r4
    f216:	str	r3, [sp, #40]	; 0x28
    f218:	cmp	r2, #0
    f21a:	mov	r3, r5
    f21c:	sbcs.w	r3, r3, #0
    f220:	bge.w	e760 <_svfprintf_r+0x340>
    f224:	negs	r4, r4
    f226:	mov.w	r7, #45	; 0x2d
    f22a:	sbc.w	r5, r5, r5, lsl #1
    f22e:	cmp.w	fp, #0
    f232:	strb.w	r7, [sp, #111]	; 0x6f
    f236:	blt.w	e77c <_svfprintf_r+0x35c>
    f23a:	ldr	r3, [sp, #12]
    f23c:	bic.w	r3, r3, #128	; 0x80
    f240:	str	r3, [sp, #12]
    f242:	b.w	e77c <_svfprintf_r+0x35c>
    f246:	add	r2, sp, #140	; 0x8c
    f248:	ldr	r1, [sp, #20]
    f24a:	ldr	r0, [sp, #24]
    f24c:	bl	fb04 <__ssprint_r>
    f250:	cmp	r0, #0
    f252:	bne.w	e614 <_svfprintf_r+0x1f4>
    f256:	ldr	r4, [sp, #148]	; 0x94
    f258:	add.w	r9, sp, #192	; 0xc0
    f25c:	ldr	r2, [sp, #60]	; 0x3c
    f25e:	ldr	r3, [sp, #116]	; 0x74
    f260:	add	r2, r6
    f262:	mov	r7, r2
    f264:	ldr	r2, [sp, #56]	; 0x38
    f266:	cmp	r3, r2
    f268:	blt.n	f2fa <_svfprintf_r+0xeda>
    f26a:	ldr	r2, [sp, #12]
    f26c:	lsls	r5, r2, #31
    f26e:	bmi.n	f2fa <_svfprintf_r+0xeda>
    f270:	ldr	r1, [sp, #56]	; 0x38
    f272:	add	r6, r1
    f274:	subs	r5, r6, r7
    f276:	subs	r3, r1, r3
    f278:	cmp	r5, r3
    f27a:	it	ge
    f27c:	movge	r5, r3
    f27e:	cmp	r5, #0
    f280:	mov	r6, r5
    f282:	ble.n	f2a0 <_svfprintf_r+0xe80>
    f284:	ldr	r2, [sp, #144]	; 0x90
    f286:	str.w	r7, [r9]
    f28a:	adds	r2, #1
    f28c:	add	r4, r5
    f28e:	cmp	r2, #7
    f290:	str	r4, [sp, #148]	; 0x94
    f292:	str.w	r5, [r9, #4]
    f296:	str	r2, [sp, #144]	; 0x90
    f298:	bgt.w	f898 <_svfprintf_r+0x1478>
    f29c:	add.w	r9, r9, #8
    f2a0:	cmp	r6, #0
    f2a2:	ite	ge
    f2a4:	subge	r5, r3, r6
    f2a6:	movlt	r5, r3
    f2a8:	cmp	r5, #0
    f2aa:	ble.w	e94c <_svfprintf_r+0x52c>
    f2ae:	ldr	r2, [pc, #744]	; (f598 <_svfprintf_r+0x1178>)
    f2b0:	ldr	r3, [sp, #144]	; 0x90
    f2b2:	str	r2, [sp, #44]	; 0x2c
    f2b4:	cmp	r5, #16
    f2b6:	ble.n	f1f4 <_svfprintf_r+0xdd4>
    f2b8:	movs	r6, #16
    f2ba:	ldr	r7, [sp, #24]
    f2bc:	ldr.w	fp, [sp, #20]
    f2c0:	b.n	f2cc <_svfprintf_r+0xeac>
    f2c2:	add.w	r9, r9, #8
    f2c6:	subs	r5, #16
    f2c8:	cmp	r5, #16
    f2ca:	ble.n	f1f4 <_svfprintf_r+0xdd4>
    f2cc:	adds	r3, #1
    f2ce:	adds	r4, #16
    f2d0:	cmp	r3, #7
    f2d2:	str	r4, [sp, #148]	; 0x94
    f2d4:	str	r3, [sp, #144]	; 0x90
    f2d6:	str.w	sl, [r9]
    f2da:	str.w	r6, [r9, #4]
    f2de:	ble.n	f2c2 <_svfprintf_r+0xea2>
    f2e0:	add	r2, sp, #140	; 0x8c
    f2e2:	mov	r1, fp
    f2e4:	mov	r0, r7
    f2e6:	bl	fb04 <__ssprint_r>
    f2ea:	cmp	r0, #0
    f2ec:	bne.w	e614 <_svfprintf_r+0x1f4>
    f2f0:	ldr	r4, [sp, #148]	; 0x94
    f2f2:	ldr	r3, [sp, #144]	; 0x90
    f2f4:	add.w	r9, sp, #192	; 0xc0
    f2f8:	b.n	f2c6 <_svfprintf_r+0xea6>
    f2fa:	ldr	r2, [sp, #144]	; 0x90
    f2fc:	ldr	r0, [sp, #72]	; 0x48
    f2fe:	ldr	r1, [sp, #76]	; 0x4c
    f300:	str.w	r1, [r9]
    f304:	adds	r2, #1
    f306:	add	r4, r0
    f308:	cmp	r2, #7
    f30a:	str	r4, [sp, #148]	; 0x94
    f30c:	str.w	r0, [r9, #4]
    f310:	str	r2, [sp, #144]	; 0x90
    f312:	bgt.w	f87e <_svfprintf_r+0x145e>
    f316:	add.w	r9, r9, #8
    f31a:	b.n	f270 <_svfprintf_r+0xe50>
    f31c:	ldr	r3, [sp, #12]
    f31e:	lsls	r0, r3, #31
    f320:	bmi.w	ef08 <_svfprintf_r+0xae8>
    f324:	adds	r5, #1
    f326:	adds	r4, #1
    f328:	movs	r3, #1
    f32a:	cmp	r5, #7
    f32c:	str	r4, [sp, #148]	; 0x94
    f32e:	str	r5, [sp, #144]	; 0x90
    f330:	str.w	r6, [r9]
    f334:	str.w	r3, [r9, #4]
    f338:	ble.w	ef70 <_svfprintf_r+0xb50>
    f33c:	b.n	f15a <_svfprintf_r+0xd3a>
    f33e:	add	r2, sp, #140	; 0x8c
    f340:	ldr	r1, [sp, #20]
    f342:	ldr	r0, [sp, #24]
    f344:	bl	fb04 <__ssprint_r>
    f348:	cmp	r0, #0
    f34a:	bne.w	e614 <_svfprintf_r+0x1f4>
    f34e:	ldr	r4, [sp, #148]	; 0x94
    f350:	ldr	r5, [sp, #144]	; 0x90
    f352:	add.w	r9, sp, #192	; 0xc0
    f356:	b.n	ef24 <_svfprintf_r+0xb04>
    f358:	add	r2, sp, #140	; 0x8c
    f35a:	ldr	r1, [sp, #20]
    f35c:	ldr	r0, [sp, #24]
    f35e:	bl	fb04 <__ssprint_r>
    f362:	cmp	r0, #0
    f364:	bne.w	e614 <_svfprintf_r+0x1f4>
    f368:	ldr	r4, [sp, #148]	; 0x94
    f36a:	ldr	r5, [sp, #144]	; 0x90
    f36c:	add.w	r9, sp, #192	; 0xc0
    f370:	b.n	ef42 <_svfprintf_r+0xb22>
    f372:	add	r2, sp, #140	; 0x8c
    f374:	ldr	r1, [sp, #20]
    f376:	ldr	r0, [sp, #24]
    f378:	bl	fb04 <__ssprint_r>
    f37c:	cmp	r0, #0
    f37e:	bne.w	e614 <_svfprintf_r+0x1f4>
    f382:	ldr	r4, [sp, #148]	; 0x94
    f384:	add.w	r9, sp, #192	; 0xc0
    f388:	b.w	e8b4 <_svfprintf_r+0x494>
    f38c:	ldr	r1, [sp, #12]
    f38e:	ands.w	r3, r1, #64	; 0x40
    f392:	beq.w	f508 <_svfprintf_r+0x10e8>
    f396:	ldr	r0, [sp, #40]	; 0x28
    f398:	strb.w	r2, [sp, #111]	; 0x6f
    f39c:	mov	r3, r0
    f39e:	cmp.w	fp, #0
    f3a2:	add.w	r3, r3, #4
    f3a6:	ldrh	r4, [r0, #0]
    f3a8:	mov.w	r5, #0
    f3ac:	blt.w	f730 <_svfprintf_r+0x1310>
    f3b0:	bic.w	r1, r1, #128	; 0x80
    f3b4:	str	r1, [sp, #12]
    f3b6:	orrs.w	r1, r4, r5
    f3ba:	str	r3, [sp, #40]	; 0x28
    f3bc:	beq.w	ed74 <_svfprintf_r+0x954>
    f3c0:	mov	r7, r2
    f3c2:	b.w	e66c <_svfprintf_r+0x24c>
    f3c6:	ldr	r3, [sp, #12]
    f3c8:	lsls	r7, r3, #27
    f3ca:	bmi.n	f3e4 <_svfprintf_r+0xfc4>
    f3cc:	ldr	r3, [sp, #12]
    f3ce:	lsls	r6, r3, #25
    f3d0:	bpl.n	f3e4 <_svfprintf_r+0xfc4>
    f3d2:	ldr	r2, [sp, #40]	; 0x28
    f3d4:	ldr	r3, [r2, #0]
    f3d6:	adds	r2, #4
    f3d8:	str	r2, [sp, #40]	; 0x28
    f3da:	ldrh.w	r2, [sp, #28]
    f3de:	strh	r2, [r3, #0]
    f3e0:	b.w	e46e <_svfprintf_r+0x4e>
    f3e4:	ldr	r2, [sp, #40]	; 0x28
    f3e6:	ldr	r3, [r2, #0]
    f3e8:	adds	r2, #4
    f3ea:	str	r2, [sp, #40]	; 0x28
    f3ec:	ldr	r2, [sp, #28]
    f3ee:	str	r2, [r3, #0]
    f3f0:	b.w	e46e <_svfprintf_r+0x4e>
    f3f4:	ldrd	r0, r1, [sp, #64]	; 0x40
    f3f8:	mov	r2, r0
    f3fa:	mov	r3, r1
    f3fc:	bl	b714 <__aeabi_dcmpun>
    f400:	cmp	r0, #0
    f402:	bne.w	fa00 <_svfprintf_r+0x15e0>
    f406:	ldr	r3, [sp, #52]	; 0x34
    f408:	cmp.w	fp, #4294967295
    f40c:	bic.w	r7, r3, #32
    f410:	beq.w	f8e2 <_svfprintf_r+0x14c2>
    f414:	cmp	r7, #71	; 0x47
    f416:	beq.w	f71e <_svfprintf_r+0x12fe>
    f41a:	ldr	r3, [sp, #68]	; 0x44
    f41c:	ldr	r2, [sp, #12]
    f41e:	cmp	r3, #0
    f420:	orr.w	r2, r2, #256	; 0x100
    f424:	str	r2, [sp, #44]	; 0x2c
    f426:	blt.w	f91a <_svfprintf_r+0x14fa>
    f42a:	vldr	d7, [sp, #64]	; 0x40
    f42e:	vstr	d7, [sp, #96]	; 0x60
    f432:	movs	r3, #0
    f434:	str	r3, [sp, #16]
    f436:	ldr	r3, [sp, #52]	; 0x34
    f438:	cmp	r3, #102	; 0x66
    f43a:	beq.w	f8e8 <_svfprintf_r+0x14c8>
    f43e:	cmp	r3, #70	; 0x46
    f440:	beq.w	f6ce <_svfprintf_r+0x12ae>
    f444:	cmp	r7, #69	; 0x45
    f446:	ite	eq
    f448:	addeq.w	r5, fp, #1
    f44c:	movne	r5, fp
    f44e:	add	r2, sp, #132	; 0x84
    f450:	add	r3, sp, #120	; 0x78
    f452:	str	r2, [sp, #4]
    f454:	str	r3, [sp, #0]
    f456:	mov	r2, r5
    f458:	add	r3, sp, #116	; 0x74
    f45a:	movs	r1, #2
    f45c:	vldr	d0, [sp, #96]	; 0x60
    f460:	ldr	r0, [sp, #24]
    f462:	bl	d5e8 <_dtoa_r>
    f466:	ldr	r3, [sp, #52]	; 0x34
    f468:	cmp	r3, #103	; 0x67
    f46a:	mov	r6, r0
    f46c:	bne.w	f946 <_svfprintf_r+0x1526>
    f470:	ldr	r3, [sp, #12]
    f472:	lsls	r2, r3, #31
    f474:	bpl.w	f9ea <_svfprintf_r+0x15ca>
    f478:	adds	r4, r6, r5
    f47a:	movs	r2, #0
    f47c:	movs	r3, #0
    f47e:	ldrd	r0, r1, [sp, #96]	; 0x60
    f482:	bl	b6b0 <__aeabi_dcmpeq>
    f486:	cmp	r0, #0
    f488:	bne.w	f7a6 <_svfprintf_r+0x1386>
    f48c:	ldr	r3, [sp, #132]	; 0x84
    f48e:	cmp	r4, r3
    f490:	bls.n	f4a0 <_svfprintf_r+0x1080>
    f492:	movs	r1, #48	; 0x30
    f494:	adds	r2, r3, #1
    f496:	str	r2, [sp, #132]	; 0x84
    f498:	strb	r1, [r3, #0]
    f49a:	ldr	r3, [sp, #132]	; 0x84
    f49c:	cmp	r4, r3
    f49e:	bhi.n	f494 <_svfprintf_r+0x1074>
    f4a0:	subs	r3, r3, r6
    f4a2:	cmp	r7, #71	; 0x47
    f4a4:	str	r3, [sp, #56]	; 0x38
    f4a6:	beq.w	f798 <_svfprintf_r+0x1378>
    f4aa:	ldr	r3, [sp, #52]	; 0x34
    f4ac:	cmp	r3, #101	; 0x65
    f4ae:	ble.w	f964 <_svfprintf_r+0x1544>
    f4b2:	ldr	r3, [sp, #52]	; 0x34
    f4b4:	cmp	r3, #102	; 0x66
    f4b6:	ldr	r3, [sp, #116]	; 0x74
    f4b8:	str	r3, [sp, #60]	; 0x3c
    f4ba:	beq.w	f97e <_svfprintf_r+0x155e>
    f4be:	ldr	r2, [sp, #60]	; 0x3c
    f4c0:	ldr	r1, [sp, #56]	; 0x38
    f4c2:	cmp	r2, r1
    f4c4:	blt.w	f92c <_svfprintf_r+0x150c>
    f4c8:	ldr	r3, [sp, #12]
    f4ca:	lsls	r1, r3, #31
    f4cc:	bmi.w	f9ee <_svfprintf_r+0x15ce>
    f4d0:	bic.w	r3, r2, r2, asr #31
    f4d4:	str	r2, [sp, #36]	; 0x24
    f4d6:	movs	r2, #103	; 0x67
    f4d8:	str	r2, [sp, #52]	; 0x34
    f4da:	ldr	r2, [sp, #16]
    f4dc:	cmp	r2, #0
    f4de:	bne.w	f740 <_svfprintf_r+0x1320>
    f4e2:	str	r3, [sp, #16]
    f4e4:	ldr	r3, [sp, #44]	; 0x2c
    f4e6:	str	r3, [sp, #12]
    f4e8:	mov	fp, r2
    f4ea:	ldrb.w	r7, [sp, #111]	; 0x6f
    f4ee:	b.w	e7c4 <_svfprintf_r+0x3a4>
    f4f2:	bic.w	r7, r7, #7
    f4f6:	vldr	d7, [r7]
    f4fa:	add.w	r3, r7, #8
    f4fe:	vstr	d7, [sp, #64]	; 0x40
    f502:	str	r3, [sp, #40]	; 0x28
    f504:	b.w	ea1c <_svfprintf_r+0x5fc>
    f508:	ldr	r1, [sp, #40]	; 0x28
    f50a:	strb.w	r3, [sp, #111]	; 0x6f
    f50e:	cmp.w	fp, #0
    f512:	ldr	r4, [r1, #0]
    f514:	add.w	r7, r1, #4
    f518:	mov.w	r5, #0
    f51c:	bge.w	f678 <_svfprintf_r+0x1258>
    f520:	str	r7, [sp, #40]	; 0x28
    f522:	movs	r7, #0
    f524:	b.w	e66c <_svfprintf_r+0x24c>
    f528:	ldr	r1, [sp, #12]
    f52a:	ands.w	r3, r1, #64	; 0x40
    f52e:	beq.w	f1ce <_svfprintf_r+0xdae>
    f532:	ldr	r0, [sp, #40]	; 0x28
    f534:	strb.w	r2, [sp, #111]	; 0x6f
    f538:	mov	r3, r0
    f53a:	cmp.w	fp, #0
    f53e:	add.w	r3, r3, #4
    f542:	ldrh	r4, [r0, #0]
    f544:	mov.w	r5, #0
    f548:	blt.w	f72a <_svfprintf_r+0x130a>
    f54c:	bic.w	r1, r1, #128	; 0x80
    f550:	str	r1, [sp, #12]
    f552:	orrs.w	r1, r4, r5
    f556:	str	r3, [sp, #40]	; 0x28
    f558:	mov	r7, r2
    f55a:	bne.w	e77c <_svfprintf_r+0x35c>
    f55e:	b.w	eb4c <_svfprintf_r+0x72c>
    f562:	ldr	r3, [sp, #12]
    f564:	ldr	r2, [sp, #40]	; 0x28
    f566:	tst.w	r3, #64	; 0x40
    f56a:	mov	r3, r2
    f56c:	beq.w	f734 <_svfprintf_r+0x1314>
    f570:	adds	r3, #4
    f572:	ldrh	r4, [r2, #0]
    f574:	str	r3, [sp, #40]	; 0x28
    f576:	movs	r5, #0
    f578:	b.w	eb86 <_svfprintf_r+0x766>
    f57c:	mov	r4, r2
    f57e:	adds	r3, #1
    f580:	ldr	r2, [sp, #44]	; 0x2c
    f582:	str	r3, [sp, #144]	; 0x90
    f584:	add	r4, r5
    f586:	cmp	r3, #7
    f588:	str	r4, [sp, #148]	; 0x94
    f58a:	stmia.w	r9, {r2, r5}
    f58e:	bgt.w	f246 <_svfprintf_r+0xe26>
    f592:	add.w	r9, r9, #8
    f596:	b.n	f25c <_svfprintf_r+0xe3c>
    f598:	.word	0x00010510
    f59c:	movs	r7, #0
    f59e:	cmp	fp, r7
    f5a0:	strb.w	r7, [sp, #111]	; 0x6f
    f5a4:	blt.w	ed98 <_svfprintf_r+0x978>
    f5a8:	ldr	r3, [sp, #12]
    f5aa:	bic.w	r3, r3, #128	; 0x80
    f5ae:	str	r3, [sp, #12]
    f5b0:	b.w	ed34 <_svfprintf_r+0x914>
    f5b4:	add	r2, sp, #140	; 0x8c
    f5b6:	ldr	r1, [sp, #20]
    f5b8:	ldr	r0, [sp, #24]
    f5ba:	bl	fb04 <__ssprint_r>
    f5be:	cmp	r0, #0
    f5c0:	bne.w	e614 <_svfprintf_r+0x1f4>
    f5c4:	ldr	r4, [sp, #148]	; 0x94
    f5c6:	add.w	r9, sp, #192	; 0xc0
    f5ca:	b.n	eddc <_svfprintf_r+0x9bc>
    f5cc:	ldr	r7, [sp, #40]	; 0x28
    f5ce:	b.w	ed8a <_svfprintf_r+0x96a>
    f5d2:	ldr	r3, [sp, #144]	; 0x90
    f5d4:	ldr	r2, [pc, #736]	; (f8b8 <_svfprintf_r+0x1498>)
    f5d6:	str.w	r2, [r9]
    f5da:	adds	r3, #1
    f5dc:	adds	r4, #1
    f5de:	movs	r2, #1
    f5e0:	cmp	r3, #7
    f5e2:	str	r4, [sp, #148]	; 0x94
    f5e4:	str	r3, [sp, #144]	; 0x90
    f5e6:	str.w	r2, [r9, #4]
    f5ea:	bgt.w	f704 <_svfprintf_r+0x12e4>
    f5ee:	add.w	r9, r9, #8
    f5f2:	cbnz	r5, f600 <_svfprintf_r+0x11e0>
    f5f4:	ldr	r3, [sp, #56]	; 0x38
    f5f6:	cbnz	r3, f600 <_svfprintf_r+0x11e0>
    f5f8:	ldr	r3, [sp, #12]
    f5fa:	lsls	r7, r3, #31
    f5fc:	bpl.w	e94c <_svfprintf_r+0x52c>
    f600:	ldr	r3, [sp, #144]	; 0x90
    f602:	ldr	r1, [sp, #72]	; 0x48
    f604:	ldr	r2, [sp, #76]	; 0x4c
    f606:	str.w	r2, [r9]
    f60a:	adds	r3, #1
    f60c:	add	r4, r1
    f60e:	cmp	r3, #7
    f610:	str	r4, [sp, #148]	; 0x94
    f612:	str.w	r1, [r9, #4]
    f616:	str	r3, [sp, #144]	; 0x90
    f618:	bgt.w	f9b6 <_svfprintf_r+0x1596>
    f61c:	add.w	r9, r9, #8
    f620:	negs	r5, r5
    f622:	cmp	r5, #0
    f624:	ble.w	f77c <_svfprintf_r+0x135c>
    f628:	ldr	r2, [pc, #656]	; (f8bc <_svfprintf_r+0x149c>)
    f62a:	str	r2, [sp, #44]	; 0x2c
    f62c:	cmp	r5, #16
    f62e:	ble.w	f7c4 <_svfprintf_r+0x13a4>
    f632:	mov	r2, r4
    f634:	movs	r7, #16
    f636:	ldr.w	fp, [sp, #24]
    f63a:	ldr	r4, [sp, #20]
    f63c:	b.n	f64a <_svfprintf_r+0x122a>
    f63e:	add.w	r9, r9, #8
    f642:	subs	r5, #16
    f644:	cmp	r5, #16
    f646:	ble.w	f7c2 <_svfprintf_r+0x13a2>
    f64a:	adds	r3, #1
    f64c:	adds	r2, #16
    f64e:	cmp	r3, #7
    f650:	str	r2, [sp, #148]	; 0x94
    f652:	str	r3, [sp, #144]	; 0x90
    f654:	str.w	sl, [r9]
    f658:	str.w	r7, [r9, #4]
    f65c:	ble.n	f63e <_svfprintf_r+0x121e>
    f65e:	add	r2, sp, #140	; 0x8c
    f660:	mov	r1, r4
    f662:	mov	r0, fp
    f664:	bl	fb04 <__ssprint_r>
    f668:	cmp	r0, #0
    f66a:	bne.w	e614 <_svfprintf_r+0x1f4>
    f66e:	ldr	r2, [sp, #148]	; 0x94
    f670:	ldr	r3, [sp, #144]	; 0x90
    f672:	add.w	r9, sp, #192	; 0xc0
    f676:	b.n	f642 <_svfprintf_r+0x1222>
    f678:	ldr	r2, [sp, #12]
    f67a:	b.w	eaf0 <_svfprintf_r+0x6d0>
    f67e:	ldr	r2, [sp, #12]
    f680:	b.n	f19a <_svfprintf_r+0xd7a>
    f682:	ldr	r3, [sp, #12]
    f684:	orr.w	r3, r3, #32
    f688:	str	r3, [sp, #12]
    f68a:	add.w	r8, r8, #1
    f68e:	ldrb.w	r3, [r8]
    f692:	b.w	e4d4 <_svfprintf_r+0xb4>
    f696:	add	r2, sp, #140	; 0x8c
    f698:	ldr	r1, [sp, #20]
    f69a:	ldr	r0, [sp, #24]
    f69c:	bl	fb04 <__ssprint_r>
    f6a0:	cmp	r0, #0
    f6a2:	bne.w	e614 <_svfprintf_r+0x1f4>
    f6a6:	ldr	r4, [sp, #148]	; 0x94
    f6a8:	add.w	r9, sp, #192	; 0xc0
    f6ac:	b.w	ee0c <_svfprintf_r+0x9ec>
    f6b0:	movs	r1, #64	; 0x40
    f6b2:	ldr	r0, [sp, #24]
    f6b4:	bl	bb30 <_malloc_r>
    f6b8:	ldr	r2, [sp, #20]
    f6ba:	str	r0, [r2, #0]
    f6bc:	str	r0, [r2, #16]
    f6be:	cmp	r0, #0
    f6c0:	beq.w	faaa <_svfprintf_r+0x168a>
    f6c4:	ldr	r2, [sp, #20]
    f6c6:	movs	r3, #64	; 0x40
    f6c8:	str	r3, [r2, #20]
    f6ca:	b.w	e44e <_svfprintf_r+0x2e>
    f6ce:	add	r2, sp, #132	; 0x84
    f6d0:	add	r3, sp, #120	; 0x78
    f6d2:	str	r2, [sp, #4]
    f6d4:	str	r3, [sp, #0]
    f6d6:	mov	r2, fp
    f6d8:	add	r3, sp, #116	; 0x74
    f6da:	movs	r1, #3
    f6dc:	vldr	d0, [sp, #96]	; 0x60
    f6e0:	ldr	r0, [sp, #24]
    f6e2:	bl	d5e8 <_dtoa_r>
    f6e6:	mov	r5, fp
    f6e8:	mov	r6, r0
    f6ea:	ldr	r3, [sp, #52]	; 0x34
    f6ec:	cmp	r3, #70	; 0x46
    f6ee:	add.w	r4, r6, r5
    f6f2:	bne.w	f47a <_svfprintf_r+0x105a>
    f6f6:	ldrb	r3, [r6, #0]
    f6f8:	cmp	r3, #48	; 0x30
    f6fa:	beq.w	fa0c <_svfprintf_r+0x15ec>
    f6fe:	ldr	r5, [sp, #116]	; 0x74
    f700:	add	r4, r5
    f702:	b.n	f47a <_svfprintf_r+0x105a>
    f704:	add	r2, sp, #140	; 0x8c
    f706:	ldr	r1, [sp, #20]
    f708:	ldr	r0, [sp, #24]
    f70a:	bl	fb04 <__ssprint_r>
    f70e:	cmp	r0, #0
    f710:	bne.w	e614 <_svfprintf_r+0x1f4>
    f714:	ldr	r5, [sp, #116]	; 0x74
    f716:	ldr	r4, [sp, #148]	; 0x94
    f718:	add.w	r9, sp, #192	; 0xc0
    f71c:	b.n	f5f2 <_svfprintf_r+0x11d2>
    f71e:	cmp.w	fp, #0
    f722:	it	eq
    f724:	moveq.w	fp, #1
    f728:	b.n	f41a <_svfprintf_r+0xffa>
    f72a:	str	r3, [sp, #40]	; 0x28
    f72c:	mov	r7, r2
    f72e:	b.n	f1ea <_svfprintf_r+0xdca>
    f730:	str	r3, [sp, #40]	; 0x28
    f732:	b.n	f522 <_svfprintf_r+0x1102>
    f734:	adds	r3, #4
    f736:	ldr	r4, [r2, #0]
    f738:	str	r3, [sp, #40]	; 0x28
    f73a:	movs	r5, #0
    f73c:	b.w	eb86 <_svfprintf_r+0x766>
    f740:	movs	r7, #45	; 0x2d
    f742:	str	r3, [sp, #16]
    f744:	ldr	r3, [sp, #44]	; 0x2c
    f746:	str	r3, [sp, #12]
    f748:	strb.w	r7, [sp, #111]	; 0x6f
    f74c:	mov.w	fp, #0
    f750:	b.w	e7c6 <_svfprintf_r+0x3a6>
    f754:	mov	r0, r6
    f756:	bl	c840 <strlen>
    f75a:	mov	fp, r4
    f75c:	mov	r3, r0
    f75e:	str	r0, [sp, #36]	; 0x24
    f760:	b.w	eca8 <_svfprintf_r+0x888>
    f764:	add	r2, sp, #140	; 0x8c
    f766:	ldr	r1, [sp, #20]
    f768:	ldr	r0, [sp, #24]
    f76a:	bl	fb04 <__ssprint_r>
    f76e:	cmp	r0, #0
    f770:	bne.w	e614 <_svfprintf_r+0x1f4>
    f774:	ldr	r4, [sp, #148]	; 0x94
    f776:	ldr	r3, [sp, #144]	; 0x90
    f778:	add.w	r9, sp, #192	; 0xc0
    f77c:	ldr	r1, [sp, #56]	; 0x38
    f77e:	str.w	r6, [r9]
    f782:	adds	r3, #1
    f784:	add	r4, r1
    f786:	cmp	r3, #7
    f788:	str	r4, [sp, #148]	; 0x94
    f78a:	str	r3, [sp, #144]	; 0x90
    f78c:	str.w	r1, [r9, #4]
    f790:	ble.w	e948 <_svfprintf_r+0x528>
    f794:	b.w	ef8e <_svfprintf_r+0xb6e>
    f798:	ldr	r3, [sp, #116]	; 0x74
    f79a:	adds	r5, r3, #3
    f79c:	blt.n	f7dc <_svfprintf_r+0x13bc>
    f79e:	cmp	fp, r3
    f7a0:	blt.n	f7dc <_svfprintf_r+0x13bc>
    f7a2:	str	r3, [sp, #60]	; 0x3c
    f7a4:	b.n	f4be <_svfprintf_r+0x109e>
    f7a6:	mov	r3, r4
    f7a8:	b.n	f4a0 <_svfprintf_r+0x1080>
    f7aa:	add	r2, sp, #140	; 0x8c
    f7ac:	ldr	r1, [sp, #20]
    f7ae:	ldr	r0, [sp, #24]
    f7b0:	bl	fb04 <__ssprint_r>
    f7b4:	cmp	r0, #0
    f7b6:	bne.w	e614 <_svfprintf_r+0x1f4>
    f7ba:	ldr	r4, [sp, #148]	; 0x94
    f7bc:	add.w	r9, sp, #192	; 0xc0
    f7c0:	b.n	f05c <_svfprintf_r+0xc3c>
    f7c2:	mov	r4, r2
    f7c4:	adds	r3, #1
    f7c6:	ldr	r2, [sp, #44]	; 0x2c
    f7c8:	str	r3, [sp, #144]	; 0x90
    f7ca:	add	r4, r5
    f7cc:	cmp	r3, #7
    f7ce:	str	r4, [sp, #148]	; 0x94
    f7d0:	stmia.w	r9, {r2, r5}
    f7d4:	bgt.n	f764 <_svfprintf_r+0x1344>
    f7d6:	add.w	r9, r9, #8
    f7da:	b.n	f77c <_svfprintf_r+0x135c>
    f7dc:	ldr	r2, [sp, #52]	; 0x34
    f7de:	subs	r2, #2
    f7e0:	str	r2, [sp, #52]	; 0x34
    f7e2:	subs	r3, #1
    f7e4:	cmp	r3, #0
    f7e6:	ldrb.w	r2, [sp, #52]	; 0x34
    f7ea:	str	r3, [sp, #116]	; 0x74
    f7ec:	it	lt
    f7ee:	neglt	r3, r3
    f7f0:	strb.w	r2, [sp, #124]	; 0x7c
    f7f4:	ite	lt
    f7f6:	movlt	r2, #45	; 0x2d
    f7f8:	movge	r2, #43	; 0x2b
    f7fa:	cmp	r3, #9
    f7fc:	strb.w	r2, [sp, #125]	; 0x7d
    f800:	ble.w	f9da <_svfprintf_r+0x15ba>
    f804:	add.w	r0, sp, #139	; 0x8b
    f808:	mov	r4, r0
    f80a:	ldr	r2, [pc, #180]	; (f8c0 <_svfprintf_r+0x14a0>)
    f80c:	smull	r2, r1, r2, r3
    f810:	asrs	r2, r3, #31
    f812:	rsb	r2, r2, r1, asr #2
    f816:	add.w	r1, r2, r2, lsl #2
    f81a:	sub.w	r3, r3, r1, lsl #1
    f81e:	add.w	r1, r3, #48	; 0x30
    f822:	cmp	r2, #9
    f824:	mov	r3, r2
    f826:	strb.w	r1, [r4, #-1]!
    f82a:	bgt.n	f80a <_svfprintf_r+0x13ea>
    f82c:	mov	r1, r4
    f82e:	adds	r3, #48	; 0x30
    f830:	uxtb	r2, r3
    f832:	strb.w	r2, [r1, #-1]!
    f836:	cmp	r0, r1
    f838:	bls.w	faa4 <_svfprintf_r+0x1684>
    f83c:	add.w	r1, sp, #126	; 0x7e
    f840:	mov	r3, r4
    f842:	b.n	f848 <_svfprintf_r+0x1428>
    f844:	ldrb.w	r2, [r3], #1
    f848:	strb.w	r2, [r1], #1
    f84c:	cmp	r0, r3
    f84e:	bne.n	f844 <_svfprintf_r+0x1424>
    f850:	adds	r3, r0, #1
    f852:	subs	r3, r3, r4
    f854:	add.w	r2, sp, #126	; 0x7e
    f858:	add	r3, r2
    f85a:	add	r2, sp, #124	; 0x7c
    f85c:	subs	r3, r3, r2
    f85e:	ldr	r2, [sp, #56]	; 0x38
    f860:	str	r3, [sp, #84]	; 0x54
    f862:	cmp	r2, #1
    f864:	add	r3, r2
    f866:	str	r3, [sp, #36]	; 0x24
    f868:	ble.w	fa3a <_svfprintf_r+0x161a>
    f86c:	ldr	r3, [sp, #36]	; 0x24
    f86e:	ldr	r2, [sp, #72]	; 0x48
    f870:	add	r3, r2
    f872:	movs	r2, #0
    f874:	str	r3, [sp, #36]	; 0x24
    f876:	str	r2, [sp, #60]	; 0x3c
    f878:	bic.w	r3, r3, r3, asr #31
    f87c:	b.n	f4da <_svfprintf_r+0x10ba>
    f87e:	add	r2, sp, #140	; 0x8c
    f880:	ldr	r1, [sp, #20]
    f882:	ldr	r0, [sp, #24]
    f884:	bl	fb04 <__ssprint_r>
    f888:	cmp	r0, #0
    f88a:	bne.w	e614 <_svfprintf_r+0x1f4>
    f88e:	ldr	r3, [sp, #116]	; 0x74
    f890:	ldr	r4, [sp, #148]	; 0x94
    f892:	add.w	r9, sp, #192	; 0xc0
    f896:	b.n	f270 <_svfprintf_r+0xe50>
    f898:	add	r2, sp, #140	; 0x8c
    f89a:	ldr	r1, [sp, #20]
    f89c:	ldr	r0, [sp, #24]
    f89e:	bl	fb04 <__ssprint_r>
    f8a2:	cmp	r0, #0
    f8a4:	bne.w	e614 <_svfprintf_r+0x1f4>
    f8a8:	ldr	r3, [sp, #116]	; 0x74
    f8aa:	ldr	r2, [sp, #56]	; 0x38
    f8ac:	ldr	r4, [sp, #148]	; 0x94
    f8ae:	subs	r3, r2, r3
    f8b0:	add.w	r9, sp, #192	; 0xc0
    f8b4:	b.n	f2a0 <_svfprintf_r+0xe80>
    f8b6:	nop
    f8b8:	.word	0x0001050c
    f8bc:	.word	0x00010510
    f8c0:	.word	0x66666667
    f8c4:	cmp	r5, #6
    f8c6:	mov	r3, r5
    f8c8:	it	cs
    f8ca:	movcs	r3, #6
    f8cc:	str	r3, [sp, #36]	; 0x24
    f8ce:	bic.w	r3, r3, r3, asr #31
    f8d2:	mov	fp, r6
    f8d4:	str	r7, [sp, #40]	; 0x28
    f8d6:	str	r6, [sp, #60]	; 0x3c
    f8d8:	mov	r7, r6
    f8da:	str	r3, [sp, #16]
    f8dc:	ldr	r6, [pc, #536]	; (faf8 <_svfprintf_r+0x16d8>)
    f8de:	b.w	e7c4 <_svfprintf_r+0x3a4>
    f8e2:	mov.w	fp, #6
    f8e6:	b.n	f41a <_svfprintf_r+0xffa>
    f8e8:	add	r2, sp, #132	; 0x84
    f8ea:	add	r3, sp, #120	; 0x78
    f8ec:	str	r2, [sp, #4]
    f8ee:	str	r3, [sp, #0]
    f8f0:	mov	r2, fp
    f8f2:	add	r3, sp, #116	; 0x74
    f8f4:	movs	r1, #3
    f8f6:	vldr	d0, [sp, #96]	; 0x60
    f8fa:	ldr	r0, [sp, #24]
    f8fc:	bl	d5e8 <_dtoa_r>
    f900:	mov	r5, fp
    f902:	mov	r6, r0
    f904:	add.w	r4, r0, fp
    f908:	b.n	f6f6 <_svfprintf_r+0x12d6>
    f90a:	movs	r7, #45	; 0x2d
    f90c:	strb.w	r7, [sp, #111]	; 0x6f
    f910:	b.w	ea6a <_svfprintf_r+0x64a>
    f914:	str	r3, [sp, #12]
    f916:	b.w	ebc2 <_svfprintf_r+0x7a2>
    f91a:	ldrd	r1, r2, [sp, #64]	; 0x40
    f91e:	add.w	r3, r2, #2147483648	; 0x80000000
    f922:	str	r3, [sp, #100]	; 0x64
    f924:	movs	r3, #45	; 0x2d
    f926:	str	r1, [sp, #96]	; 0x60
    f928:	str	r3, [sp, #16]
    f92a:	b.n	f436 <_svfprintf_r+0x1016>
    f92c:	ldr	r2, [sp, #72]	; 0x48
    f92e:	ldr	r3, [sp, #56]	; 0x38
    f930:	add	r3, r2
    f932:	ldr	r2, [sp, #60]	; 0x3c
    f934:	str	r3, [sp, #36]	; 0x24
    f936:	cmp	r2, #0
    f938:	ble.w	fa4e <_svfprintf_r+0x162e>
    f93c:	movs	r2, #103	; 0x67
    f93e:	bic.w	r3, r3, r3, asr #31
    f942:	str	r2, [sp, #52]	; 0x34
    f944:	b.n	f4da <_svfprintf_r+0x10ba>
    f946:	ldr	r3, [sp, #52]	; 0x34
    f948:	cmp	r3, #71	; 0x47
    f94a:	bne.w	f478 <_svfprintf_r+0x1058>
    f94e:	ldr	r3, [sp, #12]
    f950:	lsls	r3, r3, #31
    f952:	bmi.w	f6ea <_svfprintf_r+0x12ca>
    f956:	ldr	r3, [sp, #132]	; 0x84
    f958:	cmp	r7, #71	; 0x47
    f95a:	sub.w	r3, r3, r6
    f95e:	str	r3, [sp, #56]	; 0x38
    f960:	beq.w	f798 <_svfprintf_r+0x1378>
    f964:	ldr	r3, [sp, #116]	; 0x74
    f966:	b.n	f7e2 <_svfprintf_r+0x13c2>
    f968:	bic.w	r3, r5, r5, asr #31
    f96c:	str	r7, [sp, #40]	; 0x28
    f96e:	str	r3, [sp, #16]
    f970:	str	r5, [sp, #36]	; 0x24
    f972:	mov	fp, r0
    f974:	str	r0, [sp, #60]	; 0x3c
    f976:	ldrb.w	r7, [sp, #111]	; 0x6f
    f97a:	b.w	e7c4 <_svfprintf_r+0x3a4>
    f97e:	cmp	r3, #0
    f980:	ble.n	fa5e <_svfprintf_r+0x163e>
    f982:	cmp.w	fp, #0
    f986:	bne.n	fa28 <_svfprintf_r+0x1608>
    f988:	ldr	r2, [sp, #12]
    f98a:	lsls	r4, r2, #31
    f98c:	bmi.n	fa28 <_svfprintf_r+0x1608>
    f98e:	mov	r2, r3
    f990:	str	r2, [sp, #36]	; 0x24
    f992:	bic.w	r3, r3, r3, asr #31
    f996:	b.n	f4da <_svfprintf_r+0x10ba>
    f998:	ldr	r3, [sp, #12]
    f99a:	lsls	r3, r3, #31
    f99c:	mov	r7, fp
    f99e:	bpl.n	f9ac <_svfprintf_r+0x158c>
    f9a0:	add	r6, sp, #256	; 0x100
    f9a2:	movs	r3, #48	; 0x30
    f9a4:	strb.w	r3, [r6, #-65]!
    f9a8:	b.w	e7b0 <_svfprintf_r+0x390>
    f9ac:	str.w	fp, [sp, #36]	; 0x24
    f9b0:	add	r6, sp, #192	; 0xc0
    f9b2:	b.w	e7b6 <_svfprintf_r+0x396>
    f9b6:	add	r2, sp, #140	; 0x8c
    f9b8:	ldr	r1, [sp, #20]
    f9ba:	ldr	r0, [sp, #24]
    f9bc:	bl	fb04 <__ssprint_r>
    f9c0:	cmp	r0, #0
    f9c2:	bne.w	e614 <_svfprintf_r+0x1f4>
    f9c6:	ldr	r5, [sp, #116]	; 0x74
    f9c8:	ldr	r4, [sp, #148]	; 0x94
    f9ca:	ldr	r3, [sp, #144]	; 0x90
    f9cc:	add.w	r9, sp, #192	; 0xc0
    f9d0:	b.n	f620 <_svfprintf_r+0x1200>
    f9d2:	mov	r8, r4
    f9d4:	movs	r5, #0
    f9d6:	b.w	e4d8 <_svfprintf_r+0xb8>
    f9da:	adds	r3, #48	; 0x30
    f9dc:	movs	r2, #48	; 0x30
    f9de:	strb.w	r3, [sp, #127]	; 0x7f
    f9e2:	strb.w	r2, [sp, #126]	; 0x7e
    f9e6:	add	r3, sp, #128	; 0x80
    f9e8:	b.n	f85a <_svfprintf_r+0x143a>
    f9ea:	ldr	r3, [sp, #132]	; 0x84
    f9ec:	b.n	f4a0 <_svfprintf_r+0x1080>
    f9ee:	ldr	r2, [sp, #72]	; 0x48
    f9f0:	ldr	r3, [sp, #60]	; 0x3c
    f9f2:	add	r3, r2
    f9f4:	movs	r2, #103	; 0x67
    f9f6:	str	r3, [sp, #36]	; 0x24
    f9f8:	str	r2, [sp, #52]	; 0x34
    f9fa:	bic.w	r3, r3, r3, asr #31
    f9fe:	b.n	f4da <_svfprintf_r+0x10ba>
    fa00:	ldr	r6, [pc, #248]	; (fafc <_svfprintf_r+0x16dc>)
    fa02:	ldr	r3, [pc, #252]	; (fb00 <_svfprintf_r+0x16e0>)
    fa04:	ldrb.w	r7, [sp, #111]	; 0x6f
    fa08:	b.w	ea6e <_svfprintf_r+0x64e>
    fa0c:	movs	r2, #0
    fa0e:	movs	r3, #0
    fa10:	ldrd	r0, r1, [sp, #96]	; 0x60
    fa14:	bl	b6b0 <__aeabi_dcmpeq>
    fa18:	cmp	r0, #0
    fa1a:	bne.w	f6fe <_svfprintf_r+0x12de>
    fa1e:	rsb	r5, r5, #1
    fa22:	str	r5, [sp, #116]	; 0x74
    fa24:	add	r4, r5
    fa26:	b.n	f47a <_svfprintf_r+0x105a>
    fa28:	ldr	r3, [sp, #60]	; 0x3c
    fa2a:	ldr	r2, [sp, #72]	; 0x48
    fa2c:	adds	r5, r3, r2
    fa2e:	add.w	r3, r5, fp
    fa32:	str	r3, [sp, #36]	; 0x24
    fa34:	bic.w	r3, r3, r3, asr #31
    fa38:	b.n	f4da <_svfprintf_r+0x10ba>
    fa3a:	ldr	r3, [sp, #12]
    fa3c:	ands.w	r3, r3, #1
    fa40:	bne.w	f86c <_svfprintf_r+0x144c>
    fa44:	str	r3, [sp, #60]	; 0x3c
    fa46:	ldr	r3, [sp, #36]	; 0x24
    fa48:	bic.w	r3, r3, r3, asr #31
    fa4c:	b.n	f4da <_svfprintf_r+0x10ba>
    fa4e:	ldr	r3, [sp, #60]	; 0x3c
    fa50:	ldr	r2, [sp, #36]	; 0x24
    fa52:	rsb	r3, r3, #1
    fa56:	add	r2, r3
    fa58:	mov	r3, r2
    fa5a:	str	r2, [sp, #36]	; 0x24
    fa5c:	b.n	f93c <_svfprintf_r+0x151c>
    fa5e:	cmp.w	fp, #0
    fa62:	bne.n	fa6a <_svfprintf_r+0x164a>
    fa64:	ldr	r3, [sp, #12]
    fa66:	lsls	r0, r3, #31
    fa68:	bpl.n	fa7a <_svfprintf_r+0x165a>
    fa6a:	ldr	r3, [sp, #72]	; 0x48
    fa6c:	adds	r5, r3, #1
    fa6e:	add.w	r3, r5, fp
    fa72:	str	r3, [sp, #36]	; 0x24
    fa74:	bic.w	r3, r3, r3, asr #31
    fa78:	b.n	f4da <_svfprintf_r+0x10ba>
    fa7a:	movs	r3, #1
    fa7c:	str	r3, [sp, #36]	; 0x24
    fa7e:	b.n	f4da <_svfprintf_r+0x10ba>
    fa80:	ldr	r0, [sp, #40]	; 0x28
    fa82:	ldrb.w	r3, [r8, #1]
    fa86:	ldr	r5, [r0, #0]
    fa88:	adds	r0, #4
    fa8a:	cmp	r5, #0
    fa8c:	str	r0, [sp, #40]	; 0x28
    fa8e:	mov	r8, r4
    fa90:	bge.w	e4d4 <_svfprintf_r+0xb4>
    fa94:	mov.w	r5, #4294967295
    fa98:	b.w	e4d4 <_svfprintf_r+0xb4>
    fa9c:	strb.w	r1, [sp, #111]	; 0x6f
    faa0:	b.w	e636 <_svfprintf_r+0x216>
    faa4:	add.w	r3, sp, #126	; 0x7e
    faa8:	b.n	f85a <_svfprintf_r+0x143a>
    faaa:	ldr	r2, [sp, #24]
    faac:	movs	r3, #12
    faae:	str	r3, [r2, #0]
    fab0:	mov.w	r0, #4294967295
    fab4:	b.w	e626 <_svfprintf_r+0x206>
    fab8:	strb.w	r1, [sp, #111]	; 0x6f
    fabc:	b.w	e730 <_svfprintf_r+0x310>
    fac0:	strb.w	r1, [sp, #111]	; 0x6f
    fac4:	b.w	e9fc <_svfprintf_r+0x5dc>
    fac8:	strb.w	r1, [sp, #111]	; 0x6f
    facc:	b.w	eb6a <_svfprintf_r+0x74a>
    fad0:	strb.w	r1, [sp, #111]	; 0x6f
    fad4:	b.w	eb0e <_svfprintf_r+0x6ee>
    fad8:	strb.w	r1, [sp, #111]	; 0x6f
    fadc:	b.w	eaba <_svfprintf_r+0x69a>
    fae0:	strb.w	r1, [sp, #111]	; 0x6f
    fae4:	b.w	ed52 <_svfprintf_r+0x932>
    fae8:	strb.w	r1, [sp, #111]	; 0x6f
    faec:	b.w	ed10 <_svfprintf_r+0x8f0>
    faf0:	strb.w	r1, [sp, #111]	; 0x6f
    faf4:	b.w	ecd4 <_svfprintf_r+0x8b4>
    faf8:	.word	0x00010558
    fafc:	.word	0x0001052c
    fb00:	.word	0x00010528

0000fb04 <__ssprint_r>:
    fb04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb08:	ldr	r3, [r2, #8]
    fb0a:	sub	sp, #12
    fb0c:	mov	r8, r2
    fb0e:	cmp	r3, #0
    fb10:	beq.n	fbf8 <__ssprint_r+0xf4>
    fb12:	mov	fp, r0
    fb14:	mov.w	r9, #0
    fb18:	ldr	r6, [r2, #0]
    fb1a:	ldr	r0, [r1, #0]
    fb1c:	ldr	r3, [r1, #8]
    fb1e:	mov	r5, r1
    fb20:	mov	r4, r9
    fb22:	cmp	r4, #0
    fb24:	beq.n	fbb2 <__ssprint_r+0xae>
    fb26:	cmp	r4, r3
    fb28:	mov	r7, r3
    fb2a:	mov	sl, r3
    fb2c:	bcc.n	fbbc <__ssprint_r+0xb8>
    fb2e:	ldrh	r3, [r5, #12]
    fb30:	tst.w	r3, #1152	; 0x480
    fb34:	beq.n	fb92 <__ssprint_r+0x8e>
    fb36:	ldr	r7, [r5, #20]
    fb38:	ldr	r1, [r5, #16]
    fb3a:	add.w	r7, r7, r7, lsl #1
    fb3e:	rsb	sl, r1, r0
    fb42:	add.w	r7, r7, r7, lsr #31
    fb46:	adds	r0, r4, #1
    fb48:	asrs	r7, r7, #1
    fb4a:	add	r0, sl
    fb4c:	cmp	r0, r7
    fb4e:	mov	r2, r7
    fb50:	itt	hi
    fb52:	movhi	r7, r0
    fb54:	movhi	r2, r7
    fb56:	lsls	r3, r3, #21
    fb58:	bpl.n	fbc2 <__ssprint_r+0xbe>
    fb5a:	mov	r1, r2
    fb5c:	mov	r0, fp
    fb5e:	bl	bb30 <_malloc_r>
    fb62:	cmp	r0, #0
    fb64:	beq.n	fbd6 <__ssprint_r+0xd2>
    fb66:	mov	r2, sl
    fb68:	ldr	r1, [r5, #16]
    fb6a:	str	r0, [sp, #4]
    fb6c:	bl	94a8 <memcpy>
    fb70:	ldrh	r2, [r5, #12]
    fb72:	ldr	r3, [sp, #4]
    fb74:	bic.w	r2, r2, #1152	; 0x480
    fb78:	orr.w	r2, r2, #128	; 0x80
    fb7c:	strh	r2, [r5, #12]
    fb7e:	rsb	r2, sl, r7
    fb82:	add.w	r0, r3, sl
    fb86:	str	r7, [r5, #20]
    fb88:	str	r3, [r5, #16]
    fb8a:	str	r0, [r5, #0]
    fb8c:	str	r2, [r5, #8]
    fb8e:	mov	r7, r4
    fb90:	mov	sl, r4
    fb92:	mov	r2, sl
    fb94:	mov	r1, r9
    fb96:	bl	c1d4 <memmove>
    fb9a:	ldr.w	r2, [r8, #8]
    fb9e:	ldr	r3, [r5, #8]
    fba0:	ldr	r0, [r5, #0]
    fba2:	subs	r3, r3, r7
    fba4:	add	r0, sl
    fba6:	subs	r4, r2, r4
    fba8:	str	r3, [r5, #8]
    fbaa:	str	r0, [r5, #0]
    fbac:	str.w	r4, [r8, #8]
    fbb0:	cbz	r4, fbf8 <__ssprint_r+0xf4>
    fbb2:	ldr.w	r9, [r6]
    fbb6:	ldr	r4, [r6, #4]
    fbb8:	adds	r6, #8
    fbba:	b.n	fb22 <__ssprint_r+0x1e>
    fbbc:	mov	r7, r4
    fbbe:	mov	sl, r4
    fbc0:	b.n	fb92 <__ssprint_r+0x8e>
    fbc2:	mov	r0, fp
    fbc4:	bl	c340 <_realloc_r>
    fbc8:	mov	r3, r0
    fbca:	cmp	r0, #0
    fbcc:	bne.n	fb7e <__ssprint_r+0x7a>
    fbce:	ldr	r1, [r5, #16]
    fbd0:	mov	r0, fp
    fbd2:	bl	cbf0 <_free_r>
    fbd6:	movs	r3, #12
    fbd8:	str.w	r3, [fp]
    fbdc:	ldrh	r3, [r5, #12]
    fbde:	movs	r2, #0
    fbe0:	orr.w	r3, r3, #64	; 0x40
    fbe4:	mov.w	r0, #4294967295
    fbe8:	strh	r3, [r5, #12]
    fbea:	str.w	r2, [r8, #8]
    fbee:	str.w	r2, [r8, #4]
    fbf2:	add	sp, #12
    fbf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbf8:	movs	r0, #0
    fbfa:	str.w	r0, [r8, #4]
    fbfe:	add	sp, #12
    fc00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fc04 <vtable for File>:
	...
    fc0c:	........m.......
    fc1c:	....U...........
    fc2c:	........u.......
    fc3c:	................
    fc4c:	................
    fc5c:	I...  File    th
    fc6c:	is=%x, f=%x.....
    fc7c:	No storage..MTP 
    fc8c:	test....

0000fc94 <vtable for Stream>:
	...
    fc9c:	=.......m...q...
    fcac:	=...=...=...

0000fcb8 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
    fcc0:	U.......m...A...
    fcd0:	........m...

0000fcdc <vtable for FsFile>:
	...
    fce4:	U.......m...A...
    fcf4:	........m...

0000fd00 <vtable for SDFile>:
	...
    fd08:	........m.......
    fd18:	....U.......9...
    fd28:	........U.......
    fd38:	A...E...5...e...
    fd48:	................
    fd58:	....

0000fd5c <vtable for MTPStorage_SD>:
	...
    fd64:	........U.......
    fd74:	u...........-...
    fd84:	i.......U.......
    fd94:	....-...........
    fda4:	....q...   SDFil
    fdb4:	e this=%x, refco
    fdc4:	unt=%u../mtpinde
    fdd4:	x.dat.../...

0000fde0 <supported_op>:
    fde0:	................
    fdf0:	................
    fe00:	....

0000fe04 <propertyList>:
    fe04:	................
    fe14:	A.D.Teensy..micr
    fe24:	osoft.com: 1.0;.
    fe34:	PJRC....Teensy_m
    fe44:	od..1.0.1234....
    fe54:	SD_Card.%x %d %d
    fe64:	 %d: %x %x %x...

0000fe74 <monthDays>:
    fe74:	............

0000fe80 <vtable for SDClass>:
	...
    fe88:	):...9...9...8..
    fe98:	)9..DBG_FAIL: ..
    fea8:	ExFatFile.cpp...
    feb8:	ExFatPartition.c
    fec8:	pp..EXFAT...ExFa
    fed8:	tFileWrite.cpp..
    fee8:	FatFile.cpp.FatP
    fef8:	artition.cpp....
    ff08:	FatFileLFN.cpp..
    ff18:	DBG_HALT ...C:\U
    ff28:	sers\zimme\Docum
    ff38:	ents\arduino-1.8
    ff48:	.12\hardware\tee
    ff58:	nsy\avr\librarie
    ff68:	s/SdFat-beta/src
    ff78:	/FatLib//FatFile
    ff88:	LFN.cpp.FatFileS
    ff98:	FN.cpp..

0000ffa0 <vtable for SdSpiCard>:
	...
    ffa8:	.|...|...|......
    ffb8:	.........|...|..
    ffc8:	.....|...|...}..
    ffd8:	........%....8..
    ffe8:	.|..9...m...u...

0000fff8 <vtable for SdioCard>:
	...
   10000:	=.......Q.......
   10010:	............e...
   10020:	M...............
   10030:	........-...A...
   10040:	........i.......

00010050 <digital_pin_to_info_PGM>:
   10050:	@..C@..@D..CD..@
   10060:	...C...@0..C0..@
   10070:	4..C4..@...C...@
   10080:	...C...@...C...@
   10090:	...C...@...C...@
   100a0:	...C...@...C...@
   100b0:	...C...@...C...@
   100c0:	...C...@...C...@
   100d0:	...C...@...C...@
   100e0:	...C...@...C...@
   100f0:	...C...@...C...@
   10100:	...C...@...C...@
   10110:	h .Ch..@...C...@
   10120:	8..C8..@<..C<..@
   10130:	@..C@..@H..CH..@
   10140:	L..CL..@(..C(..@
   10150:	,..C,..@` .C`..@
   10160:	d .Cd..@ ..C ..@
   10170:	$..C$..@(..C(..@
   10180:	,..C,..@D..CD..@
   10190:	p..Cp..@t..Ct..@
   101a0:	h..Ch..@P..CP..@
   101b0:	X..CX..@\..C\..@
   101c0:	T..CT..@ ..C ..@
   101d0:	$..C$..@...C...@
   101e0:	...C...@8..C8..@
   101f0:	4..C4..@0..C0..@
   10200:	<..C<..@,..C,..@
   10210:	( .C(..@, .C,..@
   10220:	. .C...@. .C...@
   10230:	. .C...@. .C...@
   10240:	. .C...@. .C...@

00010250 <vtable for usb_serial_class>:
	...
   10258:	................
   10268:	}...y...u...q...
   10278:	....

0001027c <usb_endpoint_config_table>:
   1027c:	........

00010284 <usb_descriptor_list>:
   10284:	................
   10294:	....i.......8...
   102a4:	........p.......
   102b4:	................
   102c4:	@...........t...
	...

000102e4 <_global_impure_ptr>:
   102e4:	....C...POSIX...
   102f4:	....

000102f8 <_ctype_>:
   102f8:	.         ((((( 
   10308:	                
   10318:	 ...............
   10328:	................
   10338:	..AAAAAA........
   10348:	................
   10358:	..BBBBBB........
   10368:	................
   10378:	 ...............
	...
   103f8:	........

00010400 <__mprec_tens>:
   10400:	.......?......$@
   10410:	......Y@.....@.@
   10420:	.......@.....j.@
   10430:	.......A......cA
   10440:	.......A....e..A
   10450:	... _..B....vH7B
   10460:	......mB..@..0.B
   10470:	.......B..4&.k.C
   10480:	...7y.AC....W4vC
   10490:	..Ngm..C.=.`.X.C
   104a0:	@..x...DP.....KD
   104b0:	..M....D.J...-.D
   104c0:	...yCx.D

000104c8 <__mprec_bigtens>:
   104c8:	...7y.AC.n.....F
   104d8:	..?..O8M2.0.Hw.Z
   104e8:	<.s..O.u

000104f0 <p05.6087>:
   104f0:	........}...Infi
   10500:	nity....NaN.0...

00010510 <zeroes.7258>:
   10510:	0000000000000000
   10520:	INF.inf.NAN.nan.
   10530:	0123456789ABCDEF
   10540:	....0123456789ab
   10550:	cdef....(null)..

00010560 <blanks.7257>:
   10560:	                

00010570 <_init>:
   10570:	push	{r3, r4, r5, r6, r7, lr}
   10572:	nop
   10574:	pop	{r3, r4, r5, r6, r7}
   10576:	pop	{r3}
   10578:	mov	lr, r3
   1057a:	bx	lr

0001057c <__init_array_start>:
   1057c:	.word	0x0000cb0d

00010580 <__frame_dummy_init_array_entry>:
   10580:	5........:..

Disassembly of section .fini:

0001058c <_fini>:
   1058c:	push	{r3, r4, r5, r6, r7, lr}
   1058e:	nop
