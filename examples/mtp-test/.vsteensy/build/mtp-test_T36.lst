
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00019d58 l    d  .fini	00000000 .fini
00019d5c l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff14e0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00012050 l     F .text	0000000c startup_default_early_hook
0001205c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff14e0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff14e4 l       .bss	00000000 object.8610
00019d4c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
0000061c l     F .text	00000002 __tcf_0
00002470 l     F .text	00000190 _GLOBAL__sub_I__Z17usb_mtp_configurev
00018ff4 l     O .text	00000010 lfs_cs
00000000 l    df *ABS*	00000000 Storage.cpp
000027e0 l     F .text	000000a0 File::invalidate() [clone .isra.0]
00002d48 l     F .text	00000070 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]
000041bc l     F .text	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.9] [clone .constprop.11]
000041ec l     F .text	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]
0000426c l     F .text	000001c0 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]
00004f20 l     F .text	00000a34 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]
00000000 l    df *ABS*	00000000 MTP.cpp
00005b90 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00005c9c l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00006e9c l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
00019364 l     O .text	00000028 supported_op
0001938c l     O .text	00000010 propertyList
000193ec l     O .text	00000006 supported_events
00000000 l    df *ABS*	00000000 SPI.cpp
0000764c l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00007ed4 l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff25fc l     O .bss	00000004 cacheTime
1fff2600 l     O .bss	00000007 tm
1fff2608 l     O .bss	00000004 sysTime
1fff260c l     O .bss	00000001 Status
1fff2614 l     O .bss	00000004 prevMillis
1fff0a20 l     O .data	00000004 syncInterval
000195a8 l     O .text	0000000c monthDays
1fff2618 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 SD.cpp
00008054 l     F .text	0000005c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 FmtNumber.cpp
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatFilePrint.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00008e1c l     F .text	0000001e FsCache::sync() [clone .part.2]
00008ea8 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00008edc l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00009da4 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
00009ec0 l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatFilePrint.cpp
00000000 l    df *ABS*	00000000 FatPartition.cpp
0000acac l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000b0d0 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
0000babc l     F .text	00000058 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000bea8 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
0000bec0 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000c6ac l     F .text	00000030 sdIrs()
0000c6dc l     F .text	00000018 isBusyCommandComplete()
0000c6f4 l     F .text	00000010 isBusyCommandInhibit()
0000c704 l     F .text	0000000c isBusyDMA()
0000c710 l     F .text	00000014 isBusyFifoRead()
0000c724 l     F .text	00000014 isBusyFifoWrite()
0000c738 l     F .text	00000018 isBusyTransferComplete()
0000c750 l     F .text	000000cc setSdclk(unsigned long)
0000c880 l     F .text	00000028 waitTimeout(bool (*)())
0000c8a8 l     F .text	0000004c yieldTimeout(bool (*)())
0000c924 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
0000c9a0 l     F .text	00000064 readReg16(unsigned long, void*)
0000ca04 l     F .text	0000002c isBusyCMD13()
0000ca4c l     F .text	00000020 waitDmaStatus() [clone .part.6]
0000ca6c l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000cc60 l     F .text	00000078 transferStop()
0000d010 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff2ad4 l     O .bss	00000001 m_version2
1fff2ad8 l     O .bss	00000010 m_cid
1fff2ae8 l     O .bss	00000004 m_busyFcn
1fff2aec l     O .bss	00000001 m_highCapacity
1fff2af0 l     O .bss	00000004 m_ocr
1fff2af4 l     O .bss	00000004 m_rca
1fff2af8 l     O .bss	00000004 m_irqstat
1fff0a24 l     O .data	00000001 m_errorCode
1fff2afc l     O .bss	00000001 m_initDone
1fff2b00 l     O .bss	00000010 m_csd
1fff2b10 l     O .bss	00000001 m_dmaBusy
1fff2b14 l     O .bss	00000004 m_sdClkKhz
1fff2b18 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 LittleFS.cpp
0000de36 l       .text	00000000 L_2023_delayNanoseconds
0000dfe8 l       .text	00000000 L_2582_delayNanoseconds
0001968c l     O .text	00000138 known_chips
00000000 l    df *ABS*	00000000 lfs.c
0000e0f8 l     F .text	0000003a lfs_alloc_lookahead
0000e134 l     F .text	00000074 lfs_dir_traverse_filter
0000e1a8 l     F .text	0000001c lfs_dir_commit_size
0000e1c4 l     F .text	0000000c lfs_fs_size_count
0000e1d0 l     F .text	00000034 lfs_deinit
0000e204 l     F .text	000000c4 lfs_init
0000e2c8 l     F .text	0000015e lfs_bd_read.isra.15
0000e428 l     F .text	0000004a lfs_fs_parent_match
0000e474 l     F .text	000004ac lfs_dir_fetchmatch
0000e920 l     F .text	00000088 lfs_fs_parent
0000e9a8 l     F .text	00000090 lfs_fs_pred
0000ea38 l     F .text	000001f4 lfs_dir_traverse
0000ec2c l     F .text	00000174 lfs_dir_getslice
0000eda0 l     F .text	00000048 lfs_dir_getgstate
0000ede8 l     F .text	00000180 lfs_dir_find
0000f70c l     F .text	0000003c lfs_dir_find_match
0000ef68 l     F .text	000000a4 lfs_dir_getinfo
0000f00c l     F .text	00000098 lfs_ctz_traverse.part.19
0000f0a4 l     F .text	000000f0 lfs_ctz_find.constprop.24
0000f194 l     F .text	000000d0 lfs_dir_getread.constprop.25
0000f264 l     F .text	0000007e lfs_bd_cmp.constprop.27
0000f2e4 l     F .text	0000008a lfs_bd_flush
0000f370 l     F .text	000000ac lfs_bd_prog
0000f41c l     F .text	0000003e lfs_dir_commitprog
0000f45c l     F .text	000000b6 lfs_dir_commitattr
0000f514 l     F .text	00000014 lfs_dir_commit_commit
0000f528 l     F .text	000001e2 lfs_dir_commitcrc
0000fc20 l     F .text	00000104 lfs_alloc
0000fd24 l     F .text	00000068 lfs_dir_alloc
0000fd8c l     F .text	00000106 lfs_file_relocate
00010268 l     F .text	0000010c lfs_file_flush
0001058c l     F .text	00000568 lfs_dir_compact
00011b14 l     F .text	0000008a lfs_dir_split
00010af4 l     F .text	000003e0 lfs_dir_commit
00010ed4 l     F .text	0000003c lfs_dir_drop
00010f10 l     F .text	0000016c lfs_fs_forceconsistency
000197d8 l     O .text	0000000c defaults.6836
00000000 l    df *ABS*	00000000 lfs_util.c
000197e4 l     O .text	00000040 rtable.5069
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff2b1d l     O .bss	00000001 tx_noautoflush
1fff2b20 l     O .bss	00000004 tx_packet
1fff2b24 l     O .bss	00000001 transmit_previous_timeout
1fff2b28 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0a2c l     O .data	00000012 device_descriptor
1fff0a58 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
000124ac l     F .text	0000004c digitalWrite.part.1
000124f8 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0b18 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff2b34 l     O .bss	00000004 ep0_tx_ptr
1fff2b38 l     O .bss	00000018 rx_last
1fff2b50 l     O .bss	00000002 ep0_tx_len
1fff2b54 l     O .bss	00000040 ep0_rx0_buf
1fff2b94 l     O .bss	00000018 rx_first
1fff2bac l     O .bss	00000001 ep0_tx_data_toggle
1fff2bb0 l     O .bss	00000040 ep0_rx1_buf
1fff2bf0 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff2c08 l     O .bss	00000018 tx_last
1fff2c20 l     O .bss	00000008 setup
1fff2c28 l     O .bss	00000001 ep0_tx_bdt_bank
1fff2c2c l     O .bss	00000008 reply_buffer
1fff2c38 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff2c3e l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff2c6d l     O .bss	00000001 calibrating
1fff0b31 l     O .data	00000001 analog_config_bits
1fff2c6e l     O .bss	00000001 analog_reference_internal
1fff0b32 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strspn.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019acc l     O .text	00000010 zeroes.7258
00019b1c l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001728c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000172ac l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00019d30 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff0b38 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff14e0 l       .bss	00000000 __bss_start__
1fff2cc0 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00012048  w    F .text	00000006 adc0_isr
00002bec g     F .text	0000015c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00014264 g     F .text	0000002c .hidden __aeabi_dcmpun
00011da4 g     F .text	0000001c usb_serial_available
00014228 g     F .text	00000012 .hidden __aeabi_dcmple
0000f748 g     F .text	000000a0 lfs_dir_open
000156dc g     F .text	000000ba strcpy
00014164 g     F .text	0000007a .hidden __cmpdf2
0000ce1c g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00013598  w    F .text	000000ec yield
0000f914 g     F .text	00000004 lfs_file_tell
0000a950 g     F .text	000001e8 FatFile::write(void const*, unsigned int)
00014164 g     F .text	0000007a .hidden __eqdf2
000009bc  w    F .text	00000016 LittleFSFile::truncate(unsigned long long)
0000be1c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
000137fc g     F .text	000000ba Print::printNumber64(unsigned long long, unsigned char, unsigned char)
00011a3c g     F .text	000000d8 lfs_format
00018fcc  w    O .text	00000028 vtable for LittleFS_Program
00008754 g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
0000f8ec g     F .text	00000028 lfs_dir_rewind
1fff20b8 g     O .bss	00000104 storage
1fff0a40 g     O .data	00000018 usb_string_manufacturer_name_default
0000a8d8 g     F .text	00000076 FatFile::truncate()
00003028 g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
00013cd4 g     F .text	0000005a .hidden __floatdidf
00012000  w    F .text	00000048 hard_fault_isr
00012048  w    F .text	00000006 dma_ch6_isr
1fff2acc g     O .bss	00000004 FsDateTime::callback
00011ba0 g     F .text	00000020 lfs_fs_size
000137b0 g     F .text	00000020 Print::println()
00012048  w    F .text	00000006 uart0_lon_isr
00008654 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
0001820c g     F .text	00000100 fcvtbuf
000128fc g     F .text	00000108 usb_rx_memory
0000bdf0  w    F .text	00000004 SdSpiCard::errorCode() const
000004b0  w    F .text	0000000c File::flush()
0000dc5c  w    F .text	00000006 LittleFS_SPIFlash::static_read(lfs_config const*, unsigned long, unsigned long, void*, unsigned long)
00007578 g     F .text	00000004 usb_init_events
00012048  w    F .text	00000006 dma_ch8_isr
00014edc g     F .text	00000002 __malloc_unlock
00000a1c  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff2ad0 g     O .bss	00000004 FsVolume::m_cwv
0000a1cc g     F .text	000000be FatFile::open(FatFile*, char const*, int)
000138d4 g     F .text	000000e0 analog_init
00012a04 g     F .text	00000084 usb_tx
00012048  w    F .text	00000006 portcd_isr
000005d4  w    F .text	00000006 LittleFSFile::peek()
0000ab38 g     F .text	00000020 FatFile::printModifyDateTime(Print*)
0001713c g     F .text	0000004a _vdprintf_r
00007c6c g     F .text	000000b0 SPIClass::setSCK(unsigned char)
00010494 g     F .text	00000034 lfs_file_seek
00018e6c  w    O .text	00000060 vtable for SDFile
00014d74 g     F .text	000000c6 memmove
0000dae4 g     F .text	00000178 LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)
00004224 g     F .text	00000046 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
0000076c  w    F .text	0000000c LittleFSFile::rewindDirectory()
000185bc g     F .text	0000004c _Balloc
00012048  w    F .text	00000006 can1_rx_warn_isr
000075fc g     F .text	0000002c MTPD::send_Event(unsigned short)
0000261c  w    F .text	00000004 MTPStorage_SD::get_FSCount()
00019d64 g       .ARM.exidx	00000000 __exidx_end
00012048  w    F .text	00000006 dma_error_isr
0000aed0 g     F .text	0000003c FatPartition::freeChain(unsigned long)
1fff0974 g     O .data	00000008 lfs_ram_str
00000cac  w    F .text	00000014 LittleFS::rename(char const*, char const*)
1fff2c50 g     O .bss	00000001 EventResponder::runningFromYield
0000d788 g     F .text	0000001a SdSpiArduinoDriver::receive()
0000bfe0 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
00012048  w    F .text	00000006 i2c0_isr
00013784 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
00014154 g     F .text	0000008a .hidden __gtdf2
0000df50  w    F .text	00000006 LittleFS_SPIFlash::static_prog(lfs_config const*, unsigned long, unsigned long, void const*, unsigned long)
0000b0f8 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
00014650 g     F .text	0000000c __errno
0000109c  w    F .text	00000026 SDFile::isDirectory()
00012048  w    F .text	00000006 portd_isr
00012048  w    F .text	00000006 enet_error_isr
000083d4 g     F .text	000000ae ExFatFile::printName(Print*)
000013e0  w    F .text	00000028 File::~File()
1fff2c40 g     O .bss	00000004 EventResponder::firstInterrupt
00006040 g     F .text	0000006e MTPD::GetObjectHandles(unsigned long, unsigned long)
0000be20  w    F .text	0000000e SdSpiCard::~SdSpiCard()
0000bb80 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
00012048  w    F .text	00000006 tpm1_isr
00009348 g     F .text	00000018 ExFatPartition::rootLength()
00011694 g     F .text	000003a8 lfs_rename
0000bdf4  w    F .text	00000004 SdSpiCard::errorData() const
00013774  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00019890 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e60 g     O .bss	00000190 ramfs
1fff2cbc g     O .bss	00000004 errno
0000c264 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
0000d7a4 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000b734 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
0000921c g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
00019d64 g       .ARM.exidx	00000000 _etext
00007978 g     F .text	00000134 _spi_dma_rxISR0()
1fff14e0 g       .bss	00000000 _sbss
0000d830 g     F .text	00000006 sdCsInit(unsigned char)
000141f0 g     F .text	00000010 .hidden __aeabi_cdcmple
0000c828 g     F .text	0000000c SdioCard::errorData() const
00002630 g     F .text	0000000c MTPStorage_SD::totalSize(unsigned long)
00004ce0 g     F .text	000000fe MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
0000cf2c g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
00000adc  w    F .text	00000014 LittleFS::mkdir(char const*)
00012048  w    F .text	00000006 porte_isr
00002424 g     F .text	0000004c loop
00012048  w    F .text	00000006 portb_isr
00012048  w    F .text	00000006 spi1_isr
00006524 g     F .text	00000144 MTPD::GetStorageInfo(unsigned long)
00012048  w    F .text	00000006 uart3_status_isr
00008310 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00012048  w    F .text	00000006 mcm_isr
0000d450 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000bf24 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
000014f4  w    F .text	00000060 LittleFSFile::~LittleFSFile()
1fff2c44 g     O .bss	00000004 EventResponder::lastInterrupt
00012048  w    F .text	00000006 uart1_status_isr
0000bbf8 g     F .text	00000028 FsBaseFile::close()
00011bf8 g     F .text	00000134 memcpy
00012048  w    F .text	00000006 randnum_isr
000141e0 g     F .text	00000020 .hidden __aeabi_cdrcmple
00000494  w    F .text	0000000c File::available()
000039a4 g     F .text	00000816 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00009254 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
0000332c g     F .text	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
0000a440 g     F .text	0000002a FatFile::peek()
00015a58 g     F .text	000016e4 _svfprintf_r
00013c64 g     F .text	00000022 .hidden __floatsidf
00000648  w    F .text	00000014 SDFile::whoami()
0000faac g     F .text	00000174 lfs_fs_traverseraw
1fff14fc  w    O .bss	00000001 SDFile::name()::zeroterm
00000688  w    F .text	00000016 LittleFS_RAM::static_prog(lfs_config const*, unsigned long, unsigned long, void const*, unsigned long)
1fff2b30 g     O .bss	00000004 systick_millis_count
0001415c g     F .text	00000082 .hidden __ltdf2
0000998c g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
00012000  w    F .text	00000048 bus_fault_isr
00018f54  w    O .text	00000028 vtable for LittleFS_RAM
0000fe94 g     F .text	000003d2 lfs_file_write
00000ed4  w    F .text	00000044 SDFile::truncate(unsigned long long)
00006f40 g     F .text	00000638 MTPD::loop()
0000d83c  w    F .text	00000004 LittleFS_SPIFlash::static_sync(lfs_config const*)
00000994  w    F .text	00000026 LittleFSFile::seek(unsigned long long, int)
00012048  w    F .text	00000006 watchdog_isr
000142e0 g     F .text	00000000 .hidden __aeabi_uldivmod
00012048  w    F .text	00000006 i2c1_isr
1fff2c34 g     O .bss	00000001 usb_configuration
00012048  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
0000cfe0 g     F .text	00000030 SdioCard::syncDevice()
0000ccdc g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
1fff2c51 g     O .bss	00000001 SPCRemulation::pinout
000012b8  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
0000a46c g     F .text	00000040 FatFile::readDirCache(bool)
00012048  w    F .text	00000006 i2c2_isr
1fff0a40  w    O .data	00000018 usb_string_manufacturer_name
1fff2cb0 g     O .bss	0000000c usb_rx_byte_count_data
00012048  w    F .text	00000006 pit1_isr
1fff0ac4 g     O .data	00000008 usb_string_mtp
000146ac g     F .text	00000010 malloc
00012048  w    F .text	00000006 dma_ch4_isr
00012048  w    F .text	00000006 software_isr
00018de8  w    O .text	00000024 vtable for FsFile
00012048  w    F .text	00000006 dma_ch7_isr
00007630  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00019c40 g     O .text	000000c8 __mprec_tens
000134d0 g     F .text	000000c8 usb_init
1fff25f8 g     O .bss	00000004 sessionID_
0000be08  w    F .text	00000004 SdSpiCard::type() const
00012048  w    F .text	00000006 lptmr_isr
1fff0998 g     O .data	00000004 lfs_progm_str
0000135c  w    F .text	00000084 SDFile::seek(unsigned long long, int)
1fff2c78 g     O .bss	00000004 __malloc_top_pad
00012580 g     F .text	00000024 rtc_set
1fff09e0 g     O .data	00000040 SPI1
0000be30 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00009a38 g     F .text	000000e2 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
00013c44 g     F .text	0000001e .hidden __aeabi_ui2d
000185a0 g     F .text	0000001c _localeconv_r
1fff0990 g     O .data	00000008 sd_str
00012570 g     F .text	00000010 attachInterruptVector
0000d740 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00018738 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
0000050c  w    F .text	0000000c File::operator bool()
0000ad58 g     F .text	0000000e FatCache::sync()
00014338 g     F .text	000002e2 .hidden __udivmoddi4
00006370 g     F .text	000001b4 MTPD::getObjectPropValue(unsigned long, unsigned long)
000139c0 g     F .text	00000000 .hidden __aeabi_drsub
00009dd8 g     F .text	00000034 FatFile::addCluster()
000152c0 g     F .text	00000024 _sbrk_r
0000c2b8 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
0000c904 g     F .text	00000020 SdioCard::type() const
00000488  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
00011d2c g     F .text	00000048 usb_serial_getchar
00012048  w    F .text	00000006 can1_bus_off_isr
00012048  w    F .text	00000006 ftm2_isr
00000e88  w    F .text	0000004c SDFile::name()
1fff2ca4 g     O .bss	00000008 usb_cdc_line_coding
000125a4 g     F .text	0000000a digitalWrite
1fff2c48 g     O .bss	00000004 EventResponder::lastYield
00012048  w    F .text	00000006 uart5_status_isr
00012048  w    F .text	00000006 lpuart0_status_isr
000082e8 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00019824 g     O .text	00000006 usb_endpoint_config_table
00000968  w    F .text	0000002a LittleFSFile::available()
00012048  w    F .text	00000006 dma_ch9_isr
00000d30  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00012048  w    F .text	00000006 pit2_isr
0000146c  w    F .text	00000058 LittleFSFile::~LittleFSFile()
00014214 g     F .text	00000012 .hidden __aeabi_dcmplt
0001954c g     O .text	0000005c SPISettings::ctar_clock_table
00018fa4  w    O .text	00000028 vtable for LittleFS_QSPIFlash
1fff2c74 g     O .bss	00000004 __malloc_max_sbrked_mem
000005fc  w    F .text	0000001a LittleFS::totalSize()
00001000  w    F .text	0000001a SDFile::position()
000125b0 g     F .text	0000000a pinMode
0000c5b4 g     F .text	00000042 SdSpiCard::writeStop()
00003798 g     F .text	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00012848 g     F .text	0000004c usb_free
00012048  w    F .text	00000006 i2c3_isr
00013c88 g     F .text	0000003a .hidden __extendsfdf2
00013f84 g     F .text	000001d0 .hidden __aeabi_ddiv
1fff2298 g     O .bss	00000360 spifs
000139cc g     F .text	00000276 .hidden __adddf3
00000930  w    F .text	0000001a LittleFSFile::size()
00006304 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00005bf4 g     F .text	000000a8 MTPD::writestring(char const*)
0000c678 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000004a0  w    F .text	00000010 File::peek()
0000af0c g     F .text	000000b0 FatPartition::freeClusterCount()
00001180  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
00019d5c g       .ARM.exidx	00000000 __exidx_start
00013d30 g     F .text	00000254 .hidden __aeabi_dmul
0000c4ac g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
00012048  w    F .text	00000006 pit0_isr
1fff2c4c g     O .bss	00000004 EventResponder::firstYield
00019abc g     O .text	00000004 _global_impure_ptr
00002648 g     F .text	00000080 MTPStorage_SD::write(char const*, unsigned long)
00012048  w    F .text	00000006 can1_error_isr
00000d7c  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00014ee0 g     F .text	000003de _realloc_r
00001038  w    F .text	00000018 SDFile::read(void*, unsigned int)
0001465c g     F .text	00000050 __libc_init_array
1fff2cc0 g       .bss	00000000 __bss_end
00012158 g     F .text	00000354 dtostrf
00000f68  w    F .text	00000044 SDFile::rewindDirectory()
00012048  w    F .text	00000006 can0_wakeup_isr
00008c28 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000c834 g     F .text	0000001c SdioCard::readCID(CID*)
00000af0  w    F .text	00000020 LittleFS::exists(char const*)
0000976c g     F .text	000000ea ExFatFile::addDirCluster()
00012048  w    F .text	00000006 flash_cmd_isr
00004eec g     F .text	00000034 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
0000c624 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00019d08 g     O .text	00000028 __mprec_bigtens
0001375c  w    F .text	00000004 usb_serial_class::clear()
00013c44 g     F .text	0000001e .hidden __floatunsidf
00012048  w    F .text	00000006 uart2_status_isr
00012060 g     F .text	0000002c _sbrk
000189cc g     F .text	00000042 __mcmp
000112e0 g     F .text	00000270 lfs_file_opencfg
00004438 g     F .text	000008a8 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
00018ecc  w    O .text	00000028 vtable for SDClass
000005c0  w    F .text	00000012 SDFile::operator bool()
1fff0a28 g     O .data	00000004 __brkval
000081e0 g     F .text	00000042 fsPrintDateTime(Print*, unsigned short, unsigned short)
1fff2b2c g     O .bss	00000001 usb_cdc_line_rtsdtr
00011fb8 g     F .text	00000048 usb_serial_flush_callback
00019d3c g     F .text	00000000 _init
00009ea0 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
00000c98  w    F .text	00000014 LittleFS::remove(char const*)
00012048  w    F .text	00000006 svcall_isr
0000111c  w    F .text	00000062 SDClass::remove(char const*)
00000750  w    F .text	0000001c SDFile::close()
00012048  w    F .text	00000006 dma_ch15_isr
000104c8 g     F .text	000000c4 lfs_file_truncate
000005f0  w    F .text	0000000a LittleFSFile::isDirectory()
000015cc  w    F .text	0000005c SDFile::~SDFile()
00007fec g     F .text	00000020 day()
00012048  w    F .text	00000006 uart1_error_isr
0001830c g     F .text	00000028 __libc_fini_array
00012048  w    F .text	00000006 usbhs_phy_isr
0000d6f0 g     F .text	00000050 SdSpiArduinoDriver::begin(SdSpiConfig)
1fff2cc0 g       .bss	00000000 _ebss
0000cea4 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005d58 g     F .text	00000280 MTPD::WriteDescriptor()
1fff099c g     O .data	00000004 propertyListNum
00001250  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000acf8 g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
000159fc g     F .text	00000024 strrchr
0001869c g     F .text	00000040 __hi0bits
00014290 g     F .text	0000004e .hidden __fixdfsi
00009858 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
00012048 g     F .text	00000006 unused_isr
00005fd8 g     F .text	00000068 MTPD::WriteStorageIDs()
00012048  w    F .text	00000006 spi0_isr
00012048  w    F .text	00000006 dma_ch3_isr
00008050  w    F .text	00000002 SDClass::~SDClass()
00005954 g     F .text	000001fc MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00000618  w    F .text	00000004 LittleFS_RAM::static_sync(lfs_config const*)
1fff1500 g     O .bss	00000960 sdx
000013e0  w    F .text	00000028 File::~File()
00001628 g     F .text	0000077c storage_configure()
0000802c g     F .text	00000024 year()
000138d0 g     F .text	00000004 operator delete(void*, unsigned int)
00012048  w    F .text	00000006 flash_error_isr
000139cc g     F .text	00000276 .hidden __aeabi_dadd
0001415c g     F .text	00000082 .hidden __ledf2
00012048  w    F .text	00000006 uart5_error_isr
00012048  w    F .text	00000006 rtc_seconds_isr
000194b8 g     O .text	00000094 SPIClass::spi0_hardware
00012048  w    F .text	00000006 pdb_isr
0001887c g     F .text	000000a0 __pow5mult
0000a684 g     F .text	0000005c FatFile::rmdir()
00013cc4 g     F .text	0000006a .hidden __aeabi_ul2d
00012000  w    F .text	00000048 usage_fault_isr
000005dc  w    F .text	00000012 LittleFSFile::operator bool()
00012048  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000ae4c g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
000009d4  w    F .text	0000001e LittleFSFile::write(void const*, unsigned int)
00014310 g     F .text	00000028 .hidden __popcountsi2
00012048  w    F .text	00000006 dma_ch14_isr
00001310  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
1fff2cac g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
000010c4  w    F .text	00000058 LittleFS::usedSize()
0000f918 g     F .text	00000016 lfs_file_size
0001374c g     F .text	00000010 systick_isr
00012048  w    F .text	00000006 rtc_alarm_isr
0000df58 g     F .text	00000198 LittleFS_SPIFlash::erase(unsigned long)
0000065c  w    F .text	00000014 LittleFSFile::whoami()
0000052c  w    F .text	0000000c File::isDirectory()
0000bb14 g     F .text	00000020 FatFile::getSFN(char*)
0000c3fc g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
00012048  w    F .text	00000006 dma_ch2_isr
1fff0b20 g     O .data	00000010 Serial
000080b0 g     F .text	00000054 fmtBase10(char*, unsigned short)
00012048  w    F .text	00000006 ftm1_isr
000004c8  w    F .text	00000016 File::seek(unsigned long long, int)
00008c78 g     F .text	00000060 ExFatFile::printFileSize(Print*)
0001377c  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000bca0 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
00012050  w    F .text	0000000c startup_early_hook
00012048  w    F .text	00000006 dma_ch13_isr
000093f4 g     F .text	0000008c ExFatFile::addCluster()
00018e0c  w    O .text	00000060 vtable for File
00012048  w    F .text	00000006 uart2_error_isr
00000fac  w    F .text	00000054 SDClass::usedSize()
00011d74 g     F .text	00000030 usb_serial_peekchar
00014250 g     F .text	00000012 .hidden __aeabi_dcmpgt
1fff098c g     O .data	00000004 lfs_qspi_str
00002880 g     F .text	00000002 mtp_yield()
00014c70 g     F .text	00000000 memchr
0000ade4 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
1fff0b00 g     O .data	00000016 usb_string_serial_number_default
00012000 g     F .text	00000048 fault_isr
000183d0 g     F .text	000001d0 _free_r
0000ccd8 g     F .text	00000004 SdioCard::readStop()
00008e48 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0001423c g     F .text	00000012 .hidden __aeabi_dcmpge
00000900  w    F .text	0000002e LittleFSFile::close()
00012048  w    F .text	00000006 usb_charge_isr
00004de0 g     F .text	0000010a MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0001376c  w    F .text	00000004 usb_serial_class::flush()
1fff1ff0 g     O .bss	000000c8 qspifs
0000094c  w    F .text	0000001a LittleFSFile::position()
00012048  w    F .text	00000006 cmt_isr
000139c8 g     F .text	0000027a .hidden __aeabi_dsub
0000afbc g     F .text	00000114 FatPartition::init(BlockDeviceInterface*, unsigned char)
00012048  w    F .text	00000006 usbhs_isr
00009fb8 g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
1fff14dc g     O .data	00000004 __malloc_sbrk_base
00013764  w    F .text	00000004 usb_serial_class::read()
00012048  w    F .text	00000006 ftm3_isr
00000570  w    F .text	0000000c File::rewindDirectory()
00012048  w    F .text	00000006 tsi0_isr
0000b554 g     F .text	00000128 FatFile::remove()
00013cc4 g     F .text	0000006a .hidden __floatundidf
0001208c  w    F .text	00000002 __cxa_pure_virtual
0001891c g     F .text	000000ae __lshift
0000a108 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
00012048  w    F .text	00000006 spi2_isr
0000939c g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
000009f4  w    F .text	0000001c LittleFSFile::read(void*, unsigned int)
00018be0 g     F .text	00000100 __ssprint_r
00018ce0 g     F .text	0000005e _vasnprintf_r
000138c8  w    F .text	00000002 serialEvent()
1fff2bad g     O .bss	00000001 usb_reboot_timer
000171e8 g     F .text	000000a4 __register_exitproc
00008b28 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00008158 g     F .text	00000050 fsFmtDate(char*, unsigned short)
00015820 g     F .text	0000002c strlcpy
0001595c g     F .text	000000a0 strncmp
000098b4 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00011dc0 g     F .text	00000038 usb_serial_flush_input
0000f810 g     F .text	000000dc lfs_dir_read
000092d4 g     F .text	00000072 ExFatPartition::freeClusterCount()
00003218 g     F .text	00000064 MTPStorage_SD::ConstructFilename(int, char*, int)
000081a8 g     F .text	00000038 fsFmtTime(char*, unsigned short)
0001874c g     F .text	00000130 __multiply
00011f00 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff2c7c g     O .bss	00000028 __malloc_current_mallinfo
00018b24 g     F .text	000000ba __d2b
1fff2c54 g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
00012048  w    F .text	00000006 can0_bus_off_isr
000111f4 g     F .text	0000009c lfs_file_sync
0000c8f4  w    F .text	0000000e SdioCard::~SdioCard()
00002620  w    F .text	00000008 MTPStorage_SD::get_FSName(unsigned long)
00008240 g     F .text	000000a6 ExFatFile::getName(char*, unsigned int)
1fff2c29 g     O .bss	00000001 usb_rx_memory_needed
0000cda8 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00012a88 g     F .text	00000a48 usb_isr
00014620 g     F .text	0000000c __cxa_atexit
00008484 g     F .text	0000019e ExFatFile::read(void*, unsigned int)
00000670  w    F .text	00000016 LittleFS_RAM::static_erase(lfs_config const*, unsigned long)
00013c64 g     F .text	00000022 .hidden __aeabi_i2d
00001050  w    F .text	00000018 SDFile::peek()
00008f08 g     F .text	0000000e FsCache::sync()
1fff09a0 g     O .data	00000040 SPI
00014d10 g     F .text	00000062 memcmp
00019a90  w    O .text	00000028 vtable for usb_serial_class
0000d7c4 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
00012048  w    F .text	00000006 uart3_error_isr
00006d6c g     F .text	0000007c MTPD::GetObject(unsigned long)
0000d838 g     F .text	00000004 sdCsWrite(unsigned char, bool)
0001461c  w    F .text	00000002 .hidden __aeabi_ldiv0
00009558 g     F .text	0000005a ExFatFile::rmdir()
0001107c g     F .text	00000178 lfs_mkdir
00012048  w    F .text	00000006 porta_isr
00006668 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00013f84 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
0000c314 g     F .text	00000098 SdSpiCard::sectorCount()
00012048  w    F .text	00000006 low_voltage_isr
0000262c g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff10d0 g     O .data	00000408 __malloc_av_
00012048  w    F .text	00000006 can0_error_isr
0001269c g     F .text	0000016c _init_Teensyduino_internal_
00000d68  w    F .text	00000014 SDFile::flush()
00013d30 g     F .text	00000254 .hidden __muldf3
00011290 g     F .text	0000004e lfs_file_close
00011f60 g     F .text	00000058 usb_serial_flush_output
00018ef4  w    O .text	00000060 vtable for LittleFSFile
00012048  w    F .text	00000006 dma_ch12_isr
00014ed8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000b24c g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
000006a0  w    F .text	00000016 LittleFS_RAM::static_read(lfs_config const*, unsigned long, unsigned long, void*, unsigned long)
00012048  w    F .text	00000006 can1_wakeup_isr
0000757c g     F .text	00000080 usb_mtp_sendEvent
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000d7dc g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00018d40 g     F .text	0000005e _calloc_r
00012048  w    F .text	00000006 pit3_isr
00007aac g     F .text	0000007c SPIClass::begin()
00006de8 g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff2610 g     O .bss	00000004 getTimePtr
1fff0b1c g     O .data	00000001 yield_active_check_flags
00012048  w    F .text	00000006 enet_rx_isr
0000970c g     F .text	0000005e ExFatFile::sync()
0000a4ac g     F .text	000001d6 FatFile::rename(FatFile*, char const*)
0000ca30 g     F .text	0000001c SdioCard::isBusy()
00012048  w    F .text	00000006 portc_isr
0000c474 g     F .text	00000038 SdSpiCard::readStop()
00014e3c g     F .text	0000009a memset
000138b8 g     F .text	00000010 main
1fff2c70 g     O .bss	00000004 __malloc_max_total_mem
00008f18 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00007eec g     F .text	000000a0 now()
00009b1c g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
000192c4 g     O .text	00000060 vtable for MTPStorage_SD
000157cc g     F .text	00000052 strlcat
00012000  w    F .text	00000048 memmanage_fault_isr
00009f74 g     F .text	00000044 FatFile::dirEntry(DirFat_t*)
00000cc0  w    F .text	00000058 SDFile::available()
00000500  w    F .text	0000000c File::close()
00012090 g     F .text	0000007c usb_init_serialnumber
00000b10  w    F .text	00000188 LittleFS::open(char const*, unsigned char)
00019d58 g       .text	00000000 __init_array_end
000173d8 g     F .text	00000e34 _dtoa_r
000146cc g     F .text	00000570 _malloc_r
1fff2c6c g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00012048  w    F .text	00000006 debugmonitor_isr
000171a0 g     F .text	0000001a __ascii_wctomb
0000bb80 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
00013cd4 g     F .text	0000005a .hidden __aeabi_l2d
00013684 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00007d1c g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
00008224 g     F .text	00000008 fsPrintDateTime(Print*, unsigned long)
000125bc g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000538  w    F .text	00000038 File::openNextFile(unsigned char)
00012048  w    F .text	00000006 cmp1_isr
0000b498 g     F .text	000000ba FatFile::printName(Print*)
00012048  w    F .text	00000006 ftm0_isr
000095b4 g     F .text	00000158 ExFatFile::syncDir()
00018334 g     F .text	0000009c _malloc_trim_r
1fff0afc g     O .data	00000004 string0
00011df8 g     F .text	00000108 usb_serial_write
00002600  w    F .text	0000001a MTPStorage_SD::addFilesystem(FS&, char const*)
0001205c  w    F .text	00000002 startup_late_hook
00013768  w    F .text	00000004 usb_serial_class::available()
00015408 g     F .text	000002dc strcmp
1fff0b30 g     O .data	00000001 _serialEvent_default
00006e58 g     F .text	00000044 MTPD::readstring(char*)
0000a8cc g     F .text	0000000c FatFile::sync()
1fff21bc g     O .bss	000000c8 progmfs
00000f18  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0acc  w    O .data	0000002e usb_string_product_name
00005b50 g     F .text	00000028 MTPD::GetNumObjects(unsigned long, unsigned long)
00012600 g     F .text	0000009c delay
00014164 g     F .text	0000007a .hidden __nedf2
00012048  w    F .text	00000006 tpm0_isr
000026c8 g     F .text	00000118 MTPStorage_SD::CloseIndex()
00019d58 g     F .fini	00000000 _fini
00005b78 g     F .text	00000018 MTPD::get_buffer()
00000518  w    F .text	00000014 File::name()
0000800c g     F .text	00000020 month()
00019488 g     O .text	0000002e SPISettings::ctar_div_table
0000c3ac g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00008c38 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
000152e4 g     F .text	0000004c sprintf
000137e0 g     F .text	0000001c Print::printf(char const*, ...)
00012048  w    F .text	00000006 i2s0_rx_isr
00012048  w    F .text	00000006 uart4_error_isr
00009f54 g     F .text	0000001e FatFile::close()
00008104 g     F .text	00000052 fmtBase10(char*, unsigned long)
000004e0  w    F .text	00000010 File::position()
00001408  w    F .text	00000064 SDFile::~SDFile()
0000f930 g     F .text	0000002e lfs_stat
0000ad68 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
000172a0 g     F .text	0000000c atexit
00015798 g     F .text	00000032 strcspn
0000c87c  w    F .text	00000002 SdioCard::~SdioCard()
00000d18  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000005a8  w    F .text	00000018 File::write(unsigned char)
000171bc g     F .text	0000002c _write_r
1fff261c g     O .bss	000004b0 SD
0000cb8c g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
00012048  w    F .text	00000006 can0_message_isr
00007b28 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff0f60 g     O .data	00000004 _impure_ptr
00018da0  w    O .text	00000024 vtable for Stream
00012048  w    F .text	00000006 can1_message_isr
00008624 g     F .text	0000002e ExFatFile::peek()
00018dc4  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00012048  w    F .text	00000006 nmi_isr
0000b67c g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
000012a4  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000bdc4 g     F .text	00000028 FsVolume::open(char const*, int)
0000c81c g     F .text	0000000c SdioCard::errorCode() const
0000a28c g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00001290  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00019d48 g       .text	00000000 __preinit_array_end
000006b8 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000be1c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00012048  w    F .text	00000006 sdhc_isr
00007fac g     F .text	00000020 minute()
00008fcc g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00009190 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000c4fc g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000442c g     F .text	0000000c MTPStorage_SD::DeleteObject(unsigned long)
00014c3c g     F .text	0000002a __ascii_mbtowc
0000bee4 g     F .text	0000003e SdSpiCard::isBusy()
000195bc g     O .text	00000058 vtable for SdSpiCard
0000c30c  w    F .text	00000008 SdSpiCard::readCID(CID*)
00001da4 g     F .text	00000680 setup
0001982c g     O .text	00000060 usb_descriptor_list
00012894 g     F .text	0000003c usb_rx
0000c980 g     F .text	00000020 SdioCard::status()
00002b6c g     F .text	00000080 MTPStorage_SD::ResetIndex()
00012048  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
00012048  w    F .text	00000006 uart0_error_isr
000004f0  w    F .text	00000010 File::size()
00000e24  w    F .text	00000062 SDClass::rmdir(char const*)
00012808 g     F .text	00000040 usb_malloc
0000a2a8 g     F .text	00000198 FatFile::read(void*, unsigned int)
00012048  w    F .text	00000006 i2s0_isr
00011bc0 g     F .text	00000038 lfs_crc
0000dc64 g     F .text	00000140 LittleFS_SPIFlash::wait(unsigned long)
0000a29c g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
0000bdec g     F .text	00000004 operator new(unsigned int, unsigned long*)
0000c304  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000057c  w    F .text	0000002c File::read()
00011f18 g     F .text	00000048 usb_serial_write_buffer_free
0000bfa4 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
00012048  w    F .text	00000006 enet_timer_isr
00014200 g     F .text	00000012 .hidden __aeabi_dcmpeq
000014c4  w    F .text	00000030 File::~File()
000137d0  w    F .text	0000000e _write
000008e8  w    F .text	00000018 LittleFSFile::name()
1fff14e0 g       .data	00000000 _edata
0000146c  w    F .text	00000058 LittleFSFile::~LittleFSFile()
00009230 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
0000d840 g     F .text	000002a4 LittleFS_SPIFlash::begin(unsigned char, SPIClass&)
000060b0 g     F .text	00000254 MTPD::GetObjectInfo(unsigned long)
0000c87c  w    F .text	00000002 SdioCard::~SdioCard()
00012048  w    F .text	00000006 i2s0_tx_isr
00012048  w    F .text	00000006 adc1_isr
00011564 g     F .text	00000130 lfs_remove
00000a10  w    F .text	0000000c LittleFSFile::flush()
0000c5f8 g     F .text	0000002c SdSpiCard::syncDevice()
00009e0c g     F .text	00000094 FatFile::addDirCluster()
0000047c  w    F .text	0000000c File::read(void*, unsigned int)
00013770  w    F .text	00000004 usb_serial_class::availableForWrite()
00012048  w    F .text	00000006 cmp0_isr
000004bc  w    F .text	0000000c File::truncate(unsigned long long)
00011550 g     F .text	00000014 lfs_file_open
0001210c g     F .text	0000004c ultoa
00008050  w    F .text	00000002 SDClass::~SDClass()
0000c05c g     F .text	00000208 SdSpiCard::begin(SdSpiConfig)
00007fcc g     F .text	00000020 second()
0000bc20 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00002db8 g     F .text	00000210 MTPStorage_SD::ReadIndexRecord(unsigned long)
000138cc g     F .text	00000004 operator new(unsigned int)
00013704 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff14d8 g     O .data	00000004 __malloc_trim_threshold
00013760  w    F .text	00000004 usb_serial_class::peek()
0001462c g     F .text	00000024 fcvtf
00002fc8 g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
00001554  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
1fff2284 g     O .bss	00000014 mtpd
00018a10 g     F .text	00000114 __mdiff
0000c86c g     F .text	00000010 SdioCard::readOCR(unsigned long*)
00014290 g     F .text	0000004e .hidden __aeabi_d2iz
000038f8 g     F .text	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
000091c4 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff2b1c g     O .bss	00000001 usb_cdc_transmit_flush_timer
00007844 g     F .text	00000134 _spi_dma_rxISR1()
0000dda4 g     F .text	000001ac LittleFS_SPIFlash::prog(unsigned long, unsigned long, void const*, unsigned long)
00012048  w    F .text	00000006 pit_isr
00007f8c g     F .text	00000020 hour()
0000ccd8 g     F .text	00000004 SdioCard::writeStop()
0000be0c  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
0000bb34 g     F .text	0000004a FatFile::printSFN(Print*)
0000822c g     F .text	00000014 ExFatFile::close()
00019b2c g     O .text	00000101 _ctype_
00012048  w    F .text	00000006 dac0_isr
0000bdf8  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00019d48 g       .text	00000000 __init_array_start
0001461c  w    F .text	00000002 .hidden __aeabi_idiv0
00012048  w    F .text	00000006 can1_tx_warn_isr
00002884 g     F .text	000002e8 MTPStorage_SD::OpenIndex()
00014264 g     F .text	0000002c .hidden __unorddf2
00000db0  w    F .text	00000074 SDClass::rename(char const*, char const*)
00012048  w    F .text	00000006 uart0_status_isr
00012048  w    F .text	00000006 mcg_isr
00001264  w    F .text	0000002c LittleFS::rmdir(char const*)
0000f960 g     F .text	0000014c lfs_mount
00015a20 g     F .text	00000034 strspn
00000400 g     O .text	00000010 flashconfigbytes
00018f7c  w    O .text	00000028 vtable for LittleFS_SPIFlash
0000ab58 g     F .text	0000003e FatFile::printFileSize(Print*)
00015880 g     F .text	000000dc strlen
0000b11c g     F .text	0000002e FatFile::openCluster(FatFile*)
0000e0f0  w    F .text	00000006 LittleFS_SPIFlash::static_erase(lfs_config const*, unsigned long)
000193f4 g     O .text	00000094 SPIClass::spi1_hardware
000141f0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00008cfc g     F .text	00000120 ExFatFile::ls(Print*, unsigned char, unsigned char)
00014154 g     F .text	0000008a .hidden __gedf2
0000a6e0 g     F .text	00000094 FatFile::seekSet(unsigned long)
1fff0acc g     O .data	0000002e usb_string_product_name_default
00017188 g     F .text	00000018 vdprintf
00012048  w    F .text	00000006 dma_ch1_isr
0000cb20 g     F .text	0000006c SdioCard::sectorCount()
0000bd00 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
00007628 g     F .text	00000008 MTPD::send_DeviceResetEvent()
000128d0 g     F .text	0000002c usb_tx_packet_count
0000a84c g     F .text	00000080 FatFile::openNext(FatFile*, int)
00015330 g     F .text	000000ce strchr
00019614 g     O .text	00000058 vtable for SdioCard
00013c88 g     F .text	0000003a .hidden __aeabi_f2d
00012048  w    F .text	00000006 dma_ch5_isr
0000307c g     F .text	0000019c MTPStorage_SD::close()
00010374 g     F .text	00000120 lfs_file_read
0000b14c g     F .text	00000100 FatFile::getName(char*, unsigned int)
00012048  w    F .text	00000006 can0_rx_warn_isr
0000f7e8 g     F .text	00000028 lfs_dir_close
00001554  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
0000327c g     F .text	000000b0 MTPStorage_SD::rename(unsigned long, char const*)
00012048  w    F .text	00000006 can0_tx_warn_isr
00000778  w    F .text	00000170 LittleFSFile::openNextFile(unsigned char)
00012048  w    F .text	00000006 uart4_status_isr
0000d51c g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000d660 g     F .text	00000090 SdSpiArduinoDriver::activate()
1fff097c g     O .data	00000010 lfs_spi_str
00008cd8 g     F .text	00000022 ExFatFile::printModifyDateTime(Print*)
0000ab98 g     F .text	00000114 FatFile::ls(Print*, unsigned char, unsigned char)
00002628 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
000139c8 g     F .text	0000027a .hidden __subdf3
00019d48 g       .text	00000000 __preinit_array_start
000090ac g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00003064 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
00000620  w    F .text	00000028 File::whoami()
000186dc g     F .text	0000005a __lo0bits
00009154 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
0000a774 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
000139b4 g     F .text	0000000a __aeabi_atexit
00006d50 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
00009480 g     F .text	000000d6 ExFatFile::remove()
00012048  w    F .text	00000006 cmp2_isr
00013748 g     F .text	00000004 pendablesrvreq_isr
00001068  w    F .text	00000034 SDClass::totalSize()
00006ec8 g     F .text	00000076 MTPD::SendObject()
0000263c g     F .text	0000000c MTPStorage_SD::usedSize(unsigned long)
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0f64 g     O .data	0000016c __global_locale
00012048  w    F .text	00000006 wakeup_isr
00007bcc g     F .text	000000a0 SPIClass::setMISO(unsigned char)
0000d0bc g     F .text	00000394 SdioCard::begin(SdioConfig)
00008e3c g     F .text	0000000c FsCache::invalidate()
00012048  w    F .text	00000006 cmp3_isr
00007d24 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000ad74 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
000146bc g     F .text	00000010 free
00012048  w    F .text	00000006 tpm2_isr
0001861c g     F .text	00000080 __multadd
00018608 g     F .text	00000012 _Bfree
0000101c  w    F .text	0000001a SDFile::size()
00012048  w    F .text	00000006 dma_ch0_isr
000015cc  w    F .text	0000005c SDFile::~SDFile()
1fff0b00  w    O .data	00000016 usb_string_serial_number
00012048  w    F .text	00000006 enet_tx_isr
00009360 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
0000d590 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
0000c850 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
       0:	... ....I ... ..
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
      10:	. ... ... ... ..
      20:	. ... ... ..I ..
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
      30:	I ... ..I7..M7..
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
      40:	I ..I ..I ..I ..
      50:	I ..I ..I ..I ..
      60:	I ..I ..I ..I ..
      70:	I ..I ..I ..I ..
      80:	I ..I ..I ..I ..
      90:	I ..I ..I ..I ..
      a0:	I ..I ..I ..I ..
      b0:	I ..I ..I ..I ..
      c0:	I ..I ..I ..I ..
      d0:	I ..I ..I ..I ..
      e0:	I ..I ..I ..I ..
      f0:	I ..I ..I ..I ..
     100:	I ..I ..I ..I ..
     110:	I ...*..I ..I ..
     120:	I ..I ..I ..I ..
     130:	I ..I ..I ..I ..
     140:	I ..I ..I ..I ..
     150:	I ..I ..I ..I ..
     160:	I ..I ..I ..I ..
     170:	I ..I ..I ..I ..
     180:	I ..I ..I ..I ..
     190:	I ..I ..I ..I ..
     1a0:	I ..I ..I ..I ..
     1b0:	I ..I ..I ..I ..
     1c0:	I ..I ..I ..I ..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	12050 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	1269c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	12580 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	12580 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	1465c <__libc_init_array>

	startup_late_hook();
     32c:	bl	1205c <startup_late_hook>
	main();
     330:	bl	138b8 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff14e0
     360:	.word	0x00019d60
     364:	.word	0x1fff0970
     368:	.word	0x1fff14e0
     36c:	.word	0x1fff2cc0
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff14e0
     42c:	.word	0x00000000
     430:	.word	0x00019d5c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff14e4
     460:	.word	0x00019d5c
     464:	.word	0x1fff14e0
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     47c:	ldr	r0, [r0, #16]
     47e:	cbz	r0, 486 <File::read(void*, unsigned int)+0xa>
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #40]	; 0x28
     484:	bx	r3
	}
     486:	bx	lr

00000488 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     488:	ldr	r0, [r0, #16]
     48a:	cbz	r0, 492 <File::write(void const*, unsigned int)+0xa>
     48c:	ldr	r3, [r0, #0]
     48e:	ldr	r3, [r3, #44]	; 0x2c
     490:	bx	r3
	}
     492:	bx	lr

00000494 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     494:	ldr	r0, [r0, #16]
     496:	cbz	r0, 49e <File::available()+0xa>
     498:	ldr	r3, [r0, #0]
     49a:	ldr	r3, [r3, #16]
     49c:	bx	r3
	}
     49e:	bx	lr

000004a0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     4a0:	ldr	r0, [r0, #16]
     4a2:	cbz	r0, 4aa <File::peek()+0xa>
     4a4:	ldr	r3, [r0, #0]
     4a6:	ldr	r3, [r3, #24]
     4a8:	bx	r3
	}
     4aa:	mov.w	r0, #4294967295
     4ae:	bx	lr

000004b0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4b0:	ldr	r0, [r0, #16]
     4b2:	cbz	r0, 4ba <File::flush()+0xa>
     4b4:	ldr	r3, [r0, #0]
     4b6:	ldr	r3, [r3, #12]
     4b8:	bx	r3
     4ba:	bx	lr

000004bc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
     4bc:	ldr	r0, [r0, #16]
     4be:	cbz	r0, 4c6 <File::truncate(unsigned long long)+0xa>
     4c0:	ldr	r1, [r0, #0]
     4c2:	ldr	r1, [r1, #48]	; 0x30
     4c4:	bx	r1
	}
     4c6:	bx	lr

000004c8 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
     4c8:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
     4ca:	ldr	r0, [r0, #16]
     4cc:	cbz	r0, 4d8 <File::seek(unsigned long long, int)+0x10>
     4ce:	ldr	r4, [r0, #0]
     4d0:	ldr	r1, [r4, #52]	; 0x34
	}
     4d2:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4d6:	bx	r1
	}
     4d8:	ldr.w	r4, [sp], #4
     4dc:	bx	lr
     4de:	nop

000004e0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
     4e0:	ldr	r0, [r0, #16]
     4e2:	cbz	r0, 4ea <File::position()+0xa>
     4e4:	ldr	r3, [r0, #0]
     4e6:	ldr	r3, [r3, #56]	; 0x38
     4e8:	bx	r3
	}
     4ea:	movs	r0, #0
     4ec:	movs	r1, #0
     4ee:	bx	lr

000004f0 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::size()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #60]	; 0x3c
     4f8:	bx	r3
	}
     4fa:	movs	r0, #0
     4fc:	movs	r1, #0
     4fe:	bx	lr

00000500 <File::close()>:
	virtual void close() {
		if (f) f->close();
     500:	ldr	r0, [r0, #16]
     502:	cbz	r0, 50a <File::close()+0xa>
     504:	ldr	r3, [r0, #0]
     506:	ldr	r3, [r3, #64]	; 0x40
     508:	bx	r3
     50a:	bx	lr

0000050c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::operator bool()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #68]	; 0x44
     514:	bx	r3
	}
     516:	bx	lr

00000518 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     518:	ldr	r0, [r0, #16]
     51a:	cbz	r0, 522 <File::name()+0xa>
     51c:	ldr	r3, [r0, #0]
     51e:	ldr	r3, [r3, #72]	; 0x48
     520:	bx	r3
	}
     522:	ldr	r0, [pc, #4]	; (528 <File::name()+0x10>)
     524:	bx	lr
     526:	nop
     528:	.word	0x00019064

0000052c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     52c:	ldr	r0, [r0, #16]
     52e:	cbz	r0, 536 <File::isDirectory()+0xa>
     530:	ldr	r3, [r0, #0]
     532:	ldr	r3, [r3, #76]	; 0x4c
     534:	bx	r3
	}
     536:	bx	lr

00000538 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     538:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     53a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     53c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     53e:	cbz	r3, 54c <File::openNextFile(unsigned char)+0x14>
     540:	ldr	r5, [r3, #0]
     542:	mov	r1, r3
     544:	ldr	r3, [r5, #80]	; 0x50
     546:	blx	r3
	}
     548:	mov	r0, r4
     54a:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     54c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     550:	ldr	r2, [pc, #24]	; (56c <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     552:	strb	r3, [r4, #4]
     554:	strb	r3, [r4, #12]
     556:	str	r0, [r4, #8]
     558:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     55a:	ldr	r3, [r1, #16]
     55c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     55e:	cmp	r3, #0
     560:	beq.n	548 <File::openNextFile(unsigned char)+0x10>
     562:	ldr	r2, [r3, #16]
     564:	adds	r2, #1
     566:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     568:	mov	r0, r4
     56a:	pop	{r3, r4, r5, pc}
     56c:	.word	0x00018e14

00000570 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     570:	ldr	r0, [r0, #16]
     572:	cbz	r0, 57a <File::rewindDirectory()+0xa>
     574:	ldr	r3, [r0, #0]
     576:	ldr	r3, [r3, #84]	; 0x54
     578:	bx	r3
     57a:	bx	lr

0000057c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     57c:	ldr	r0, [r0, #16]
     57e:	cbz	r0, 5a2 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     580:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     582:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     584:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     586:	ldr	r3, [r3, #40]	; 0x28
     588:	movs	r2, #1
     58a:	add.w	r1, sp, #7
     58e:	blx	r3
     590:	cbz	r0, 59c <File::read()+0x20>
		return b;
     592:	ldrb.w	r0, [sp, #7]
	}
     596:	add	sp, #12
     598:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     59c:	mov.w	r0, #4294967295
     5a0:	b.n	596 <File::read()+0x1a>
     5a2:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     5a6:	bx	lr

000005a8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     5a8:	push	{r4, lr}
     5aa:	sub	sp, #8
     5ac:	add	r3, sp, #8
		return write(&b, 1);
     5ae:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     5b0:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     5b4:	ldr	r4, [r2, #44]	; 0x2c
     5b6:	mov	r1, r3
     5b8:	movs	r2, #1
     5ba:	blx	r4
	}
     5bc:	add	sp, #8
     5be:	pop	{r4, pc}

000005c0 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     5c0:	ldr	r3, [r0, #92]	; 0x5c
     5c2:	cbz	r3, 5c8 <SDFile::operator bool()+0x8>
     5c4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5c6:	bx	lr
     5c8:	ldr	r0, [r0, #96]	; 0x60
     5ca:	adds	r0, #0
     5cc:	it	ne
     5ce:	movne	r0, #1
     5d0:	bx	lr
     5d2:	nop

000005d4 <LittleFSFile::peek()>:
		//Serial.println(" is regular file");
		return lfs_file_write(lfs, file, buf, size);
	}
	virtual int peek() {
		return -1; // TODO...
	}
     5d4:	mov.w	r0, #4294967295
     5d8:	bx	lr
     5da:	nop

000005dc <LittleFSFile::operator bool()>:
			dir = nullptr;
		}
		//Serial.println("  end of close");
	}
	virtual operator bool() {
		return file || dir;
     5dc:	ldr	r3, [r0, #24]
     5de:	cbz	r3, 5e4 <LittleFSFile::operator bool()+0x8>
     5e0:	movs	r0, #1
	}
     5e2:	bx	lr
			dir = nullptr;
		}
		//Serial.println("  end of close");
	}
	virtual operator bool() {
		return file || dir;
     5e4:	ldr	r0, [r0, #28]
     5e6:	adds	r0, #0
     5e8:	it	ne
     5ea:	movne	r0, #1
     5ec:	bx	lr
     5ee:	nop

000005f0 <LittleFSFile::isDirectory()>:
		const char *p = strrchr(fullpath, '/');
		if (p) return p + 1;
		return fullpath;
	}
	virtual boolean isDirectory(void) {
		return dir != nullptr;
     5f0:	ldr	r0, [r0, #28]
	}
     5f2:	adds	r0, #0
     5f4:	it	ne
     5f6:	movne	r0, #1
     5f8:	bx	lr
     5fa:	nop

000005fc <LittleFS::totalSize()>:
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
     5fc:	ldrb	r3, [r0, #5]
     5fe:	cbz	r3, 610 <LittleFS::totalSize()+0x14>
		return config.block_count * config.block_size;
     600:	ldr.w	r2, [r0, #160]	; 0xa0
     604:	ldr.w	r3, [r0, #156]	; 0x9c
	}
     608:	movs	r1, #0
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
		return config.block_count * config.block_size;
     60a:	mul.w	r0, r3, r2
	}
     60e:	bx	lr
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
     610:	mov	r0, r3
		return config.block_count * config.block_size;
	}
     612:	movs	r1, #0
     614:	bx	lr
     616:	nop

00000618 <LittleFS_RAM::static_sync(lfs_config const*)>:
		memset((uint8_t *)(c->context) + index, 0xFF, 256);
		return 0;
	}
	static int static_sync(const struct lfs_config *c) {
		return 0;
	}
     618:	movs	r0, #0
     61a:	bx	lr

0000061c <__tcf_0>:
    const char *sd_str[]={"sd1"}; // edit to reflect your configuration
    const int cs[] = {10}; // edit to reflect your configuration
  #endif
  const int nsd = sizeof(sd_str)/sizeof(const char *);

SDClass sdx[nsd];
     61c:	bx	lr
     61e:	nop

00000620 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     620:	push	{r4, lr}
     622:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     624:	mov	r2, r0
     626:	ldr	r3, [r0, #16]
     628:	ldr	r1, [pc, #20]	; (640 <File::whoami()+0x20>)
     62a:	ldr	r0, [pc, #24]	; (644 <File::whoami()+0x24>)
     62c:	bl	137e0 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     630:	ldr	r0, [r4, #16]
     632:	cbz	r0, 63e <File::whoami()+0x1e>
     634:	ldr	r3, [r0, #0]
	}
     636:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     63a:	ldr	r3, [r3, #36]	; 0x24
     63c:	bx	r3
     63e:	pop	{r4, pc}
     640:	.word	0x00019004
     644:	.word	0x1fff0b20

00000648 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     648:	mov	r2, r0
     64a:	ldr	r3, [r0, #16]
     64c:	ldr	r1, [pc, #4]	; (654 <SDFile::whoami()+0xc>)
     64e:	ldr	r0, [pc, #8]	; (658 <SDFile::whoami()+0x10>)
     650:	b.w	137e0 <Print::printf(char const*, ...)>
     654:	.word	0x00019020
     658:	.word	0x1fff0b20

0000065c <LittleFSFile::whoami()>:
		close();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("  LittleFSFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     65c:	mov	r2, r0
     65e:	ldr	r3, [r0, #16]
     660:	ldr	r1, [pc, #4]	; (668 <LittleFSFile::whoami()+0xc>)
     662:	ldr	r0, [pc, #8]	; (66c <LittleFSFile::whoami()+0x10>)
     664:	b.w	137e0 <Print::printf(char const*, ...)>
     668:	.word	0x00019040
     66c:	.word	0x1fff0b20

00000670 <LittleFS_RAM::static_erase(lfs_config const*, unsigned long)>:
		//Serial.printf("    ram wr: block=%d, offset=%d, size=%d\n", block, offset, size);
		uint32_t index = block * 256 + offset;
		memcpy((uint8_t *)(c->context) + index, buffer, size);
		return 0;
	}
	static int static_erase(const struct lfs_config *c, lfs_block_t block) {
     670:	push	{r3, lr}
		uint32_t index = block * 256;
		memset((uint8_t *)(c->context) + index, 0xFF, 256);
     672:	ldr	r0, [r0, #0]
     674:	mov.w	r2, #256	; 0x100
     678:	add.w	r0, r0, r1, lsl #8
     67c:	movs	r1, #255	; 0xff
     67e:	bl	14e3c <memset>
		return 0;
	}
     682:	movs	r0, #0
     684:	pop	{r3, pc}
     686:	nop

00000688 <LittleFS_RAM::static_prog(lfs_config const*, unsigned long, unsigned long, void const*, unsigned long)>:
		//Serial.printf("    ram rd: block=%d, offset=%d, size=%d\n", block, offset, size);
		uint32_t index = block * 256 + offset;
		memcpy(buffer, (uint8_t *)(c->context) + index, size);
		return 0;
	}
	static int static_prog(const struct lfs_config *c, lfs_block_t block,
     688:	push	{r3, lr}
	  lfs_off_t offset, const void *buffer, lfs_size_t size) {
		//Serial.printf("    ram wr: block=%d, offset=%d, size=%d\n", block, offset, size);
		uint32_t index = block * 256 + offset;
		memcpy((uint8_t *)(c->context) + index, buffer, size);
     68a:	ldr	r0, [r0, #0]
     68c:	add.w	r2, r2, r1, lsl #8
     690:	add	r0, r2
     692:	mov	r1, r3
     694:	ldr	r2, [sp, #8]
     696:	bl	11bf8 <memcpy>
		return 0;
	}
     69a:	movs	r0, #0
     69c:	pop	{r3, pc}
     69e:	nop

000006a0 <LittleFS_RAM::static_read(lfs_config const*, unsigned long, unsigned long, void*, unsigned long)>:
		//Serial.println("mounted atfer format");
		mounted = true;
		return true;
	}
private:
	static int static_read(const struct lfs_config *c, lfs_block_t block,
     6a0:	push	{r3, lr}
	  lfs_off_t offset, void *buffer, lfs_size_t size) {
		//Serial.printf("    ram rd: block=%d, offset=%d, size=%d\n", block, offset, size);
		uint32_t index = block * 256 + offset;
		memcpy(buffer, (uint8_t *)(c->context) + index, size);
     6a2:	ldr	r0, [r0, #0]
     6a4:	add.w	r1, r2, r1, lsl #8
     6a8:	add	r1, r0
     6aa:	ldr	r2, [sp, #8]
     6ac:	mov	r0, r3
     6ae:	bl	11bf8 <memcpy>
		return 0;
	}
     6b2:	movs	r0, #0
     6b4:	pop	{r3, pc}
     6b6:	nop

000006b8 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
/****  End of device specific change area  ****/

  // Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
   #include "TimeLib.h"
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { *date = FS_DATE(year(), month(), day());
     6b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6bc:	mov	r7, r1
     6be:	mov	r6, r2
     6c0:	mov	r8, r0
     6c2:	bl	802c <year()>
     6c6:	mov	r4, r0
     6c8:	bl	800c <month()>
     6cc:	mov	r5, r0
     6ce:	bl	7fec <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     6d2:	subw	r3, r4, #1980	; 0x7bc
     6d6:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     6d8:	cmp	r3, #127	; 0x7f
     6da:	bhi.n	6e2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     6dc:	uxtb	r2, r5
     6de:	cmp	r2, #12
     6e0:	bls.n	73a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     6e2:	movs	r3, #0
     6e4:	strh.w	r3, [r8]
    *time = FS_TIME(hour(), minute(), second());
     6e8:	bl	7f8c <hour()>
     6ec:	mov	r4, r0
     6ee:	bl	7fac <minute()>
     6f2:	mov	r5, r0
     6f4:	bl	7fcc <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     6f8:	uxtb	r3, r4
     6fa:	cmp	r3, #23
     6fc:	bhi.n	704 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     6fe:	uxtb	r3, r5
     700:	cmp	r3, #59	; 0x3b
     702:	bls.n	71c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     704:	movs	r3, #0
     706:	strh	r3, [r7, #0]
    *ms10 = second() & 1 ? 100 : 0;
     708:	bl	7fcc <second()>
     70c:	tst.w	r0, #1
     710:	ite	ne
     712:	movne	r3, #100	; 0x64
     714:	moveq	r3, #0
     716:	strb	r3, [r6, #0]
     718:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     71c:	uxtb	r3, r0
     71e:	cmp	r3, #59	; 0x3b
     720:	bhi.n	704 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     722:	lsls	r4, r4, #11
     724:	lsls	r3, r5, #5
     726:	and.w	r4, r4, #522240	; 0x7f800
     72a:	and.w	r3, r3, #8160	; 0x1fe0
     72e:	orrs	r3, r4
     730:	ubfx	r0, r0, #1, #7
     734:	orrs	r3, r0
     736:	uxth	r3, r3
     738:	b.n	706 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>
/****  End of device specific change area  ****/

  // Call back for file timestamps.  Only called for file create and sync(). needed by SDFat-beta
   #include "TimeLib.h"
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { *date = FS_DATE(year(), month(), day());
     73a:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     73c:	cmp	r0, #31
     73e:	bhi.n	6e2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     740:	lsls	r5, r5, #5
     742:	and.w	r5, r5, #8160	; 0x1fe0
     746:	orrs	r0, r5
     748:	orr.w	r3, r0, r3, lsl #9
     74c:	uxth	r3, r3
     74e:	b.n	6e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000750 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     750:	push	{r4, lr}
     752:	mov	r4, r0
		if (filename) {
     754:	ldr	r0, [r0, #100]	; 0x64
     756:	cbz	r0, 760 <SDFile::close()+0x10>
			free(filename);
     758:	bl	146bc <free>
			filename = nullptr;
     75c:	movs	r3, #0
     75e:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     760:	add.w	r0, r4, #36	; 0x24
	}
     764:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     768:	b.w	bbf8 <FsBaseFile::close()>

0000076c <LittleFSFile::rewindDirectory()>:
			free(d);
		}
		return File();
	}
	virtual void rewindDirectory(void) {
		if (dir) lfs_dir_rewind(lfs, dir);
     76c:	ldr	r1, [r0, #28]
     76e:	cbz	r1, 776 <LittleFSFile::rewindDirectory()+0xa>
     770:	ldr	r0, [r0, #20]
     772:	b.w	f8ec <lfs_dir_rewind>
     776:	bx	lr

00000778 <LittleFSFile::openNextFile(unsigned char)>:
		return fullpath;
	}
	virtual boolean isDirectory(void) {
		return dir != nullptr;
	}
	virtual File openNextFile(uint8_t mode=0) {
     778:	push	{r4, r5, r6, r7, lr}
		if (!dir) return File();
     77a:	ldr	r5, [r1, #28]
		return fullpath;
	}
	virtual boolean isDirectory(void) {
		return dir != nullptr;
	}
	virtual File openNextFile(uint8_t mode=0) {
     77c:	sub	sp, #180	; 0xb4
     77e:	mov	r6, r0
     780:	mov	r4, r1
		if (!dir) return File();
     782:	cbnz	r5, 798 <LittleFSFile::openNextFile(unsigned char)+0x20>
     784:	b.n	7b4 <LittleFSFile::openNextFile(unsigned char)+0x3c>
		struct lfs_info info;
		do {
			memset(&info, 0, sizeof(info)); // is this necessary?
			if (lfs_dir_read(lfs, dir, &info) <= 0) return File();
		} while (strcmp(info.name, ".") == 0 || strcmp(info.name, "..") == 0);
     786:	bl	15408 <strcmp>
     78a:	ldr	r1, [pc, #332]	; (8d8 <LittleFSFile::openNextFile(unsigned char)+0x160>)
     78c:	cbz	r0, 796 <LittleFSFile::openNextFile(unsigned char)+0x1e>
     78e:	add	r0, sp, #8
     790:	bl	15408 <strcmp>
     794:	cbnz	r0, 7cc <LittleFSFile::openNextFile(unsigned char)+0x54>
     796:	ldr	r5, [r4, #28]
	}
	virtual File openNextFile(uint8_t mode=0) {
		if (!dir) return File();
		struct lfs_info info;
		do {
			memset(&info, 0, sizeof(info)); // is this necessary?
     798:	movs	r2, #48	; 0x30
     79a:	movs	r1, #0
     79c:	mov	r0, sp
     79e:	bl	14e3c <memset>
			if (lfs_dir_read(lfs, dir, &info) <= 0) return File();
     7a2:	mov	r1, r5
     7a4:	mov	r2, sp
     7a6:	ldr	r0, [r4, #20]
     7a8:	bl	f810 <lfs_dir_read>
     7ac:	cmp	r0, #0
		} while (strcmp(info.name, ".") == 0 || strcmp(info.name, "..") == 0);
     7ae:	ldr	r1, [pc, #300]	; (8dc <LittleFSFile::openNextFile(unsigned char)+0x164>)
     7b0:	add	r0, sp, #8
	virtual File openNextFile(uint8_t mode=0) {
		if (!dir) return File();
		struct lfs_info info;
		do {
			memset(&info, 0, sizeof(info)); // is this necessary?
			if (lfs_dir_read(lfs, dir, &info) <= 0) return File();
     7b2:	bgt.n	786 <LittleFSFile::openNextFile(unsigned char)+0xe>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     7b4:	ldr	r2, [pc, #296]	; (8e0 <LittleFSFile::openNextFile(unsigned char)+0x168>)
     7b6:	str	r2, [r6, #0]
     7b8:	movs	r3, #0
     7ba:	mov.w	r1, #1000	; 0x3e8
				return File(new LittleFSFile(lfs, d, pathname));
			}
			free(d);
		}
		return File();
	}
     7be:	mov	r0, r6
     7c0:	strb	r3, [r6, #4]
     7c2:	strb	r3, [r6, #12]
     7c4:	str	r3, [r6, #16]
     7c6:	str	r1, [r6, #8]
     7c8:	add	sp, #180	; 0xb4
     7ca:	pop	{r4, r5, r6, r7, pc}
			memset(&info, 0, sizeof(info)); // is this necessary?
			if (lfs_dir_read(lfs, dir, &info) <= 0) return File();
		} while (strcmp(info.name, ".") == 0 || strcmp(info.name, "..") == 0);
		//Serial.printf("  next name = \"%s\"\n", info.name);
		char pathname[128];
		strlcpy(pathname, fullpath, sizeof(pathname));
     7cc:	movs	r2, #128	; 0x80
     7ce:	add.w	r1, r4, #36	; 0x24
     7d2:	add	r0, sp, #48	; 0x30
     7d4:	bl	15820 <strlcpy>
		size_t len = strlen(pathname);
     7d8:	add	r0, sp, #48	; 0x30
     7da:	bl	15880 <strlen>
		if (len > 0 && pathname[len-1] != '/' && len < sizeof(pathname)-2) {
     7de:	mov	r2, r0
     7e0:	cmp	r0, #0
     7e2:	bne.n	854 <LittleFSFile::openNextFile(unsigned char)+0xdc>
     7e4:	movs	r2, #128	; 0x80
     7e6:	add	r0, sp, #48	; 0x30
			// add trailing '/', if not already present
			pathname[len++] = '/';
			pathname[len] = 0;
		}
		strlcpy(pathname + len, info.name, sizeof(pathname) - len);
     7e8:	add	r1, sp, #8
     7ea:	bl	15820 <strlcpy>
		if (info.type == LFS_TYPE_REG) {
     7ee:	ldrb.w	r5, [sp]
     7f2:	cmp	r5, #1
     7f4:	beq.n	88a <LittleFSFile::openNextFile(unsigned char)+0x112>
			if (lfs_file_open(lfs, f, pathname, LFS_O_RDONLY) >= 0) {
				return File(new LittleFSFile(lfs, f, pathname));
			}
			free(f);
		} else { // LFS_TYPE_DIR
			lfs_dir_t *d = (lfs_dir_t *)malloc(sizeof(lfs_dir_t));
     7f6:	movs	r0, #52	; 0x34
     7f8:	bl	146ac <malloc>
			if (!d) return File();
     7fc:	mov	r7, r0
     7fe:	cmp	r0, #0
     800:	beq.n	7b4 <LittleFSFile::openNextFile(unsigned char)+0x3c>
			if (lfs_dir_open(lfs, d, pathname) >= 0) {
     802:	mov	r1, r0
     804:	add	r2, sp, #48	; 0x30
     806:	ldr	r0, [r4, #20]
     808:	bl	f748 <lfs_dir_open>
     80c:	cmp	r0, #0
     80e:	blt.n	8ce <LittleFSFile::openNextFile(unsigned char)+0x156>
				return File(new LittleFSFile(lfs, d, pathname));
     810:	movs	r0, #164	; 0xa4
     812:	bl	138cc <operator new(unsigned int)>
     816:	mov	r5, r0
     818:	ldr	r2, [r4, #20]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
     81a:	ldr	r3, [pc, #200]	; (8e4 <LittleFSFile::openNextFile(unsigned char)+0x16c>)
		lfs = lfsin;
		dir = dirin;
     81c:	str	r7, [r0, #28]
     81e:	movs	r4, #0
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
		lfs = lfsin;
     820:	str	r2, [r5, #20]
		dir = dirin;
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     822:	add	r1, sp, #48	; 0x30
     824:	adds	r0, #36	; 0x24
     826:	mov.w	r7, #1000	; 0x3e8
     82a:	movs	r2, #128	; 0x80
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
     82c:	str	r3, [r5, #0]
     82e:	strb	r4, [r5, #4]
     830:	strb	r4, [r5, #12]
     832:	str	r4, [r5, #16]
		lfs = lfsin;
		dir = dirin;
		file = nullptr;
     834:	str	r4, [r5, #24]
     836:	str	r7, [r5, #8]
		strlcpy(fullpath, name, sizeof(fullpath));
     838:	bl	15820 <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     83c:	ldr	r3, [r5, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     83e:	ldr	r2, [pc, #160]	; (8e0 <LittleFSFile::openNextFile(unsigned char)+0x168>)
     840:	strb	r4, [r6, #4]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     842:	adds	r3, #1
				return File(new LittleFSFile(lfs, d, pathname));
			}
			free(d);
		}
		return File();
	}
     844:	mov	r0, r6
     846:	str	r7, [r6, #8]
     848:	strb	r4, [r6, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     84a:	str	r5, [r6, #16]
		if (f) f->refcount++;
     84c:	str	r3, [r5, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     84e:	str	r2, [r6, #0]
     850:	add	sp, #180	; 0xb4
     852:	pop	{r4, r5, r6, r7, pc}
		} while (strcmp(info.name, ".") == 0 || strcmp(info.name, "..") == 0);
		//Serial.printf("  next name = \"%s\"\n", info.name);
		char pathname[128];
		strlcpy(pathname, fullpath, sizeof(pathname));
		size_t len = strlen(pathname);
		if (len > 0 && pathname[len-1] != '/' && len < sizeof(pathname)-2) {
     854:	add	r3, sp, #176	; 0xb0
     856:	add	r3, r0
     858:	ldrb.w	r1, [r3, #-129]
     85c:	cmp	r1, #47	; 0x2f
     85e:	beq.n	880 <LittleFSFile::openNextFile(unsigned char)+0x108>
     860:	cmp	r0, #125	; 0x7d
     862:	bhi.n	880 <LittleFSFile::openNextFile(unsigned char)+0x108>
			// add trailing '/', if not already present
			pathname[len++] = '/';
     864:	adds	r2, #1
			pathname[len] = 0;
     866:	add	r1, sp, #176	; 0xb0
     868:	add	r1, r2
		char pathname[128];
		strlcpy(pathname, fullpath, sizeof(pathname));
		size_t len = strlen(pathname);
		if (len > 0 && pathname[len-1] != '/' && len < sizeof(pathname)-2) {
			// add trailing '/', if not already present
			pathname[len++] = '/';
     86a:	movs	r0, #47	; 0x2f
     86c:	strb.w	r0, [r3, #-128]
			pathname[len] = 0;
     870:	movs	r5, #0
     872:	add	r3, sp, #48	; 0x30
     874:	adds	r0, r3, r2
     876:	strb.w	r5, [r1, #-128]
     87a:	rsb	r2, r2, #128	; 0x80
     87e:	b.n	7e8 <LittleFSFile::openNextFile(unsigned char)+0x70>
     880:	add	r3, sp, #48	; 0x30
     882:	adds	r0, r3, r2
     884:	rsb	r2, r2, #128	; 0x80
     888:	b.n	7e8 <LittleFSFile::openNextFile(unsigned char)+0x70>
		}
		strlcpy(pathname + len, info.name, sizeof(pathname) - len);
		if (info.type == LFS_TYPE_REG) {
			lfs_file_t *f = (lfs_file_t *)malloc(sizeof(lfs_file_t));
     88a:	movs	r0, #84	; 0x54
     88c:	bl	146ac <malloc>
			if (!f) return File();
     890:	mov	r7, r0
     892:	cmp	r0, #0
     894:	beq.n	7b4 <LittleFSFile::openNextFile(unsigned char)+0x3c>
			if (lfs_file_open(lfs, f, pathname, LFS_O_RDONLY) >= 0) {
     896:	mov	r1, r0
     898:	mov	r3, r5
     89a:	add	r2, sp, #48	; 0x30
     89c:	ldr	r0, [r4, #20]
     89e:	bl	11550 <lfs_file_open>
     8a2:	cmp	r0, #0
     8a4:	blt.n	8ce <LittleFSFile::openNextFile(unsigned char)+0x156>
				return File(new LittleFSFile(lfs, f, pathname));
     8a6:	movs	r0, #164	; 0xa4
     8a8:	bl	138cc <operator new(unsigned int)>
     8ac:	mov	r5, r0
     8ae:	ldr	r2, [r4, #20]
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
     8b0:	ldr	r3, [pc, #48]	; (8e4 <LittleFSFile::openNextFile(unsigned char)+0x16c>)
		lfs = lfsin;
		file = filein;
     8b2:	str	r7, [r0, #24]
     8b4:	movs	r4, #0
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
     8b6:	str	r2, [r5, #20]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     8b8:	add	r1, sp, #48	; 0x30
     8ba:	adds	r0, #36	; 0x24
     8bc:	mov.w	r7, #1000	; 0x3e8
     8c0:	movs	r2, #128	; 0x80
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
     8c2:	str	r3, [r5, #0]
     8c4:	strb	r4, [r5, #4]
     8c6:	strb	r4, [r5, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     8c8:	str	r4, [r5, #16]
		lfs = lfsin;
		file = filein;
		dir = nullptr;
     8ca:	str	r4, [r5, #28]
     8cc:	b.n	836 <LittleFSFile::openNextFile(unsigned char)+0xbe>
			lfs_dir_t *d = (lfs_dir_t *)malloc(sizeof(lfs_dir_t));
			if (!d) return File();
			if (lfs_dir_open(lfs, d, pathname) >= 0) {
				return File(new LittleFSFile(lfs, d, pathname));
			}
			free(d);
     8ce:	mov	r0, r7
     8d0:	bl	146bc <free>
     8d4:	b.n	7b4 <LittleFSFile::openNextFile(unsigned char)+0x3c>
     8d6:	nop
     8d8:	.word	0x0001906c
     8dc:	.word	0x00019068
     8e0:	.word	0x00018e14
     8e4:	.word	0x00018efc

000008e8 <LittleFSFile::name()>:
		//Serial.println("  end of close");
	}
	virtual operator bool() {
		return file || dir;
	}
	virtual const char * name() {
     8e8:	push	{r4, lr}
		const char *p = strrchr(fullpath, '/');
     8ea:	add.w	r4, r0, #36	; 0x24
     8ee:	mov	r0, r4
     8f0:	movs	r1, #47	; 0x2f
     8f2:	bl	159fc <strrchr>
		if (p) return p + 1;
     8f6:	cbz	r0, 8fc <LittleFSFile::name()+0x14>
     8f8:	adds	r0, #1
     8fa:	pop	{r4, pc}
     8fc:	mov	r0, r4
		return fullpath;
	}
     8fe:	pop	{r4, pc}

00000900 <LittleFSFile::close()>:
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
     900:	ldr	r1, [r0, #24]
		if (!file) return 0;
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
     902:	push	{r4, lr}
     904:	mov	r4, r0
		if (file) {
     906:	cbz	r1, 918 <LittleFSFile::close()+0x18>
			//Serial.printf("  close file, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_file_close(lfs, file); // we get stuck here, but why?
     908:	ldr	r0, [r0, #20]
     90a:	bl	11290 <lfs_file_close>
			free(file);
     90e:	ldr	r0, [r4, #24]
     910:	bl	146bc <free>
			file = nullptr;
     914:	movs	r3, #0
     916:	str	r3, [r4, #24]
		}
		if (dir) {
     918:	ldr	r1, [r4, #28]
     91a:	cbz	r1, 92c <LittleFSFile::close()+0x2c>
			//Serial.printf("  close dir, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_dir_close(lfs, dir);
     91c:	ldr	r0, [r4, #20]
     91e:	bl	f7e8 <lfs_dir_close>
			free(dir);
     922:	ldr	r0, [r4, #28]
     924:	bl	146bc <free>
			dir = nullptr;
     928:	movs	r3, #0
     92a:	str	r3, [r4, #28]
     92c:	pop	{r4, pc}
     92e:	nop

00000930 <LittleFSFile::size()>:
		lfs_soff_t pos = lfs_file_tell(lfs, file);
		if (pos < 0) pos = 0;
		return pos;
	}
	virtual uint64_t size() {
		if (!file) return 0;
     930:	ldr	r1, [r0, #24]
     932:	cbz	r1, 944 <LittleFSFile::size()+0x14>
		if (!file) return 0;
		lfs_soff_t pos = lfs_file_tell(lfs, file);
		if (pos < 0) pos = 0;
		return pos;
	}
	virtual uint64_t size() {
     934:	push	{r3, lr}
		if (!file) return 0;
		lfs_soff_t size = lfs_file_size(lfs, file);
     936:	ldr	r0, [r0, #20]
     938:	bl	f918 <lfs_file_size>
		if (size < 0) size = 0;
		return size;
     93c:	bic.w	r0, r0, r0, asr #31
     940:	asrs	r1, r0, #31
     942:	pop	{r3, pc}
		lfs_soff_t pos = lfs_file_tell(lfs, file);
		if (pos < 0) pos = 0;
		return pos;
	}
	virtual uint64_t size() {
		if (!file) return 0;
     944:	movs	r0, #0
     946:	movs	r1, #0
     948:	bx	lr
     94a:	nop

0000094c <LittleFSFile::position()>:
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
		return false;
	}
	virtual uint64_t position() {
		if (!file) return 0;
     94c:	ldr	r1, [r0, #24]
     94e:	cbz	r1, 960 <LittleFSFile::position()+0x14>
		else if (mode == SeekEnd) whence = LFS_SEEK_END;
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
		return false;
	}
	virtual uint64_t position() {
     950:	push	{r3, lr}
		if (!file) return 0;
		lfs_soff_t pos = lfs_file_tell(lfs, file);
     952:	ldr	r0, [r0, #20]
     954:	bl	f914 <lfs_file_tell>
		if (pos < 0) pos = 0;
		return pos;
     958:	bic.w	r0, r0, r0, asr #31
     95c:	asrs	r1, r0, #31
     95e:	pop	{r3, pc}
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
		return false;
	}
	virtual uint64_t position() {
		if (!file) return 0;
     960:	movs	r0, #0
     962:	movs	r1, #0
     964:	bx	lr
     966:	nop

00000968 <LittleFSFile::available()>:
	}
	virtual int peek() {
		return -1; // TODO...
	}
	virtual int available() {
		if (!file) return 0;
     968:	ldr	r1, [r0, #24]
     96a:	cbz	r1, 98e <LittleFSFile::available()+0x26>
		return lfs_file_write(lfs, file, buf, size);
	}
	virtual int peek() {
		return -1; // TODO...
	}
	virtual int available() {
     96c:	push	{r3, r4, r5, lr}
     96e:	mov	r4, r0
		if (!file) return 0;
		lfs_soff_t pos = lfs_file_tell(lfs, file);
     970:	ldr	r0, [r0, #20]
     972:	bl	f914 <lfs_file_tell>
		if (pos < 0) return 0;
     976:	subs	r5, r0, #0
     978:	blt.n	98a <LittleFSFile::available()+0x22>
		lfs_soff_t size = lfs_file_size(lfs, file);
     97a:	ldr	r1, [r4, #24]
     97c:	ldr	r0, [r4, #20]
     97e:	bl	f918 <lfs_file_size>
		if (size < 0) return 0;
     982:	cmp	r0, #0
     984:	blt.n	98a <LittleFSFile::available()+0x22>
		return size - pos;
     986:	subs	r0, r0, r5
	}
     988:	pop	{r3, r4, r5, pc}
	}
	virtual int peek() {
		return -1; // TODO...
	}
	virtual int available() {
		if (!file) return 0;
     98a:	movs	r0, #0
     98c:	pop	{r3, r4, r5, pc}
     98e:	movs	r0, #0
		lfs_soff_t pos = lfs_file_tell(lfs, file);
		if (pos < 0) return 0;
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) return 0;
		return size - pos;
	}
     990:	bx	lr
     992:	nop

00000994 <LittleFSFile::seek(unsigned long long, int)>:
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
		return false;
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
		if (!file) return false;
     994:	ldr	r1, [r0, #24]
	virtual bool truncate(uint64_t size=0) {
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
		return false;
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     996:	push	{r3, lr}
     998:	ldr	r3, [sp, #8]
		if (!file) return false;
     99a:	cbz	r1, 9b6 <LittleFSFile::seek(unsigned long long, int)+0x22>
		int whence;
		if (mode == SeekSet) whence = LFS_SEEK_SET;
     99c:	cbz	r3, 9aa <LittleFSFile::seek(unsigned long long, int)+0x16>
		else if (mode == SeekCur) whence = LFS_SEEK_CUR;
     99e:	cmp	r3, #1
     9a0:	beq.n	9aa <LittleFSFile::seek(unsigned long long, int)+0x16>
		else if (mode == SeekEnd) whence = LFS_SEEK_END;
     9a2:	cmp	r3, #2
     9a4:	beq.n	9aa <LittleFSFile::seek(unsigned long long, int)+0x16>
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
		return false;
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
		if (!file) return false;
     9a6:	movs	r0, #0
		else if (mode == SeekCur) whence = LFS_SEEK_CUR;
		else if (mode == SeekEnd) whence = LFS_SEEK_END;
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
		return false;
	}
     9a8:	pop	{r3, pc}
		int whence;
		if (mode == SeekSet) whence = LFS_SEEK_SET;
		else if (mode == SeekCur) whence = LFS_SEEK_CUR;
		else if (mode == SeekEnd) whence = LFS_SEEK_END;
		else return false;
		if (lfs_file_seek(lfs, file, pos, whence) >= 0) return true;
     9aa:	ldr	r0, [r0, #20]
     9ac:	bl	10494 <lfs_file_seek>
     9b0:	mvns	r0, r0
     9b2:	lsrs	r0, r0, #31
     9b4:	pop	{r3, pc}
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
		return false;
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
		if (!file) return false;
     9b6:	mov	r0, r1
     9b8:	pop	{r3, pc}
     9ba:	nop

000009bc <LittleFSFile::truncate(unsigned long long)>:
			return r;
		}
		return 0;
	}
	virtual bool truncate(uint64_t size=0) {
		if (!file) return false;
     9bc:	ldr	r1, [r0, #24]
     9be:	cbz	r1, 9ce <LittleFSFile::truncate(unsigned long long)+0x12>
			if (r < 0) r = 0;
			return r;
		}
		return 0;
	}
	virtual bool truncate(uint64_t size=0) {
     9c0:	push	{r3, lr}
		if (!file) return false;
		if (lfs_file_truncate(lfs, file, size) >= 0) return true;
     9c2:	ldr	r0, [r0, #20]
     9c4:	bl	104c8 <lfs_file_truncate>
     9c8:	mvns	r0, r0
     9ca:	lsrs	r0, r0, #31
     9cc:	pop	{r3, pc}
			return r;
		}
		return 0;
	}
	virtual bool truncate(uint64_t size=0) {
		if (!file) return false;
     9ce:	mov	r0, r1
     9d0:	bx	lr
     9d2:	nop

000009d4 <LittleFSFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("  LittleFSFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     9d4:	push	{r4}
		//Serial.println("write");
		if (!file) return 0;
     9d6:	ldr	r4, [r0, #24]
     9d8:	cbz	r4, 9ea <LittleFSFile::write(void const*, unsigned int)+0x16>
		//Serial.println(" is regular file");
		return lfs_file_write(lfs, file, buf, size);
     9da:	mov	r3, r2
     9dc:	ldr	r0, [r0, #20]
     9de:	mov	r2, r1
     9e0:	mov	r1, r4
	}
     9e2:	ldr.w	r4, [sp], #4
#endif
	virtual size_t write(const void *buf, size_t size) {
		//Serial.println("write");
		if (!file) return 0;
		//Serial.println(" is regular file");
		return lfs_file_write(lfs, file, buf, size);
     9e6:	b.w	fe94 <lfs_file_write>
	}
     9ea:	mov	r0, r4
     9ec:	ldr.w	r4, [sp], #4
     9f0:	bx	lr
     9f2:	nop

000009f4 <LittleFSFile::read(void*, unsigned int)>:
		return size - pos;
	}
	virtual void flush() {
		if (file) lfs_file_sync(lfs, file);
	}
	virtual size_t read(void *buf, size_t nbyte) {
     9f4:	push	{r4, lr}
		if (file) {
     9f6:	ldr	r4, [r0, #24]
     9f8:	cbz	r4, a0c <LittleFSFile::read(void*, unsigned int)+0x18>
     9fa:	mov	r3, r2
			lfs_ssize_t r = lfs_file_read(lfs, file, buf, nbyte);
     9fc:	ldr	r0, [r0, #20]
     9fe:	mov	r2, r1
     a00:	mov	r1, r4
     a02:	bl	10374 <lfs_file_read>
			if (r < 0) r = 0;
			return r;
     a06:	bic.w	r0, r0, r0, asr #31
     a0a:	pop	{r4, pc}
		}
		return 0;
     a0c:	mov	r0, r4
	}
     a0e:	pop	{r4, pc}

00000a10 <LittleFSFile::flush()>:
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) return 0;
		return size - pos;
	}
	virtual void flush() {
		if (file) lfs_file_sync(lfs, file);
     a10:	ldr	r1, [r0, #24]
     a12:	cbz	r1, a1a <LittleFSFile::flush()+0xa>
     a14:	ldr	r0, [r0, #20]
     a16:	b.w	111f4 <lfs_file_sync>
     a1a:	bx	lr

00000a1c <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     a1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a20:	movs	r3, #0
     a22:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     a24:	mov	r2, r3
     a26:	mov	r5, r0
     a28:	adds	r1, #36	; 0x24
     a2a:	add	r0, sp, #16
     a2c:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a30:	ldr	r7, [pc, #148]	; (ac8 <SDFile::openNextFile(unsigned char)+0xac>)
     a32:	strb.w	r3, [sp, #4]
     a36:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     a3a:	str	r3, [sp, #72]	; 0x48
     a3c:	str	r3, [sp, #76]	; 0x4c
     a3e:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a40:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     a42:	bl	bca0 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     a46:	ldr	r3, [sp, #72]	; 0x48
     a48:	cmp	r3, #0
     a4a:	beq.n	ab2 <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     a4c:	movs	r0, #104	; 0x68
     a4e:	bl	138cc <operator new(unsigned int)>
     a52:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     a54:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     a58:	ldr	r2, [sp, #8]
     a5a:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     a5e:	ldr	r0, [pc, #108]	; (acc <SDFile::openNextFile(unsigned char)+0xb0>)
     a60:	ldr	r1, [pc, #108]	; (ad0 <SDFile::openNextFile(unsigned char)+0xb4>)
     a62:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     a64:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     a68:	movs	r6, #0
     a6a:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     a6c:	str	r1, [r4, #20]
     a6e:	str	r2, [r4, #28]
     a70:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     a74:	add.w	r0, r4, #36	; 0x24
     a78:	add	r1, sp, #16
     a7a:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     a7c:	strb	r6, [r4, #12]
     a7e:	str	r6, [r4, #16]
     a80:	str.w	r8, [r4, #8]
     a84:	bl	bb80 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     a88:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     a8a:	ldr	r2, [pc, #72]	; (ad4 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a8c:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     a8e:	adds	r3, #1
     a90:	str	r6, [r4, #100]	; 0x64
     a92:	strb	r6, [r5, #4]
     a94:	str.w	r8, [r5, #8]
     a98:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     a9a:	str	r4, [r5, #16]
		if (f) f->refcount++;
     a9c:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     a9e:	str	r2, [r5, #0]
     aa0:	ldr	r3, [pc, #52]	; (ad8 <SDFile::openNextFile(unsigned char)+0xbc>)
     aa2:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     aa4:	add	r0, sp, #16
     aa6:	bl	bbf8 <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     aaa:	mov	r0, r5
     aac:	add	sp, #80	; 0x50
     aae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     ab2:	ldr	r3, [sp, #76]	; 0x4c
     ab4:	cmp	r3, #0
     ab6:	bne.n	a4c <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     ab8:	ldr	r2, [pc, #24]	; (ad4 <SDFile::openNextFile(unsigned char)+0xb8>)
     aba:	strb	r3, [r5, #4]
     abc:	str	r4, [r5, #8]
     abe:	strb	r3, [r5, #12]
     ac0:	str	r3, [r5, #16]
     ac2:	str	r2, [r5, #0]
     ac4:	b.n	aa0 <SDFile::openNextFile(unsigned char)+0x84>
     ac6:	nop
     ac8:	.word	0x00018df0
     acc:	.word	0x00018e74
     ad0:	.word	0x00018da8
     ad4:	.word	0x00018e14
     ad8:	.word	0x00018dcc

00000adc <LittleFS::mkdir(char const*)>:
		if (!mounted) return false;
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
		return true;
	}
	bool mkdir(const char *filepath) {
     adc:	push	{r3, lr}
		if (!mounted) return false;
     ade:	ldrb	r3, [r0, #5]
     ae0:	cbz	r3, aec <LittleFS::mkdir(char const*)+0x10>
		if (lfs_mkdir(&lfs, filepath) < 0) return false;
     ae2:	adds	r0, #8
     ae4:	bl	1107c <lfs_mkdir>
     ae8:	mvns	r3, r0
     aea:	lsrs	r3, r3, #31
		return true;
	}
     aec:	mov	r0, r3
     aee:	pop	{r3, pc}

00000af0 <LittleFS::exists(char const*)>:
			}
		}
		return File();
	}
	bool exists(const char *filepath) {
		if (!mounted) return false;
     af0:	ldrb	r3, [r0, #5]
     af2:	cbnz	r3, af8 <LittleFS::exists(char const*)+0x8>
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
		return true;
	}
     af4:	mov	r0, r3
     af6:	bx	lr
				return File(new LittleFSFile(&lfs, file, filepath));
			}
		}
		return File();
	}
	bool exists(const char *filepath) {
     af8:	push	{lr}
     afa:	sub	sp, #52	; 0x34
		if (!mounted) return false;
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
     afc:	mov	r2, sp
     afe:	adds	r0, #8
     b00:	bl	f930 <lfs_stat>
     b04:	mvns	r3, r0
     b06:	lsrs	r3, r3, #31
		return true;
	}
     b08:	mov	r0, r3
     b0a:	add	sp, #52	; 0x34
     b0c:	ldr.w	pc, [sp], #4

00000b10 <LittleFS::open(char const*, unsigned char)>:
		mounted = false;
		config.context = nullptr;
	}
	bool quickFormat();
	bool lowLevelFormat(char progressChar=0);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     b10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     b14:	mov	r5, r1
		//Serial.println("LittleFS open");
		if (!mounted) return File();
     b16:	ldrb	r1, [r1, #5]
		mounted = false;
		config.context = nullptr;
	}
	bool quickFormat();
	bool lowLevelFormat(char progressChar=0);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     b18:	sub	sp, #52	; 0x34
     b1a:	mov	r4, r0
		//Serial.println("LittleFS open");
		if (!mounted) return File();
     b1c:	cmp	r1, #0
     b1e:	beq.n	bb6 <LittleFS::open(char const*, unsigned char)+0xa6>
     b20:	mov	r7, r2
     b22:	mov	r6, r3
		if (mode == FILE_READ) {
     b24:	cmp	r3, #0
     b26:	bne.n	bd0 <LittleFS::open(char const*, unsigned char)+0xc0>
			struct lfs_info info;
			if (lfs_stat(&lfs, filepath, &info) < 0) return File();
     b28:	adds	r5, #8
     b2a:	mov	r0, r5
     b2c:	mov	r2, sp
     b2e:	mov	r1, r7
     b30:	bl	f930 <lfs_stat>
     b34:	cmp	r0, #0
     b36:	blt.n	bb6 <LittleFS::open(char const*, unsigned char)+0xa6>
			//Serial.printf("LittleFS open got info, name=%s\n", info.name);
			if (info.type == LFS_TYPE_REG) {
     b38:	ldrb.w	r8, [sp]
     b3c:	cmp.w	r8, #1
     b40:	beq.n	c3a <LittleFS::open(char const*, unsigned char)+0x12a>
					return File(new LittleFSFile(&lfs, file, filepath));
				}
				free(file);
			} else { // LFS_TYPE_DIR
				//Serial.println("  directory");
				lfs_dir_t *dir = (lfs_dir_t *)malloc(sizeof(lfs_dir_t));
     b42:	movs	r0, #52	; 0x34
     b44:	bl	146ac <malloc>
				if (!dir) return File();
     b48:	mov	r9, r0
     b4a:	cbz	r0, bb6 <LittleFS::open(char const*, unsigned char)+0xa6>
				if (lfs_dir_open(&lfs, dir, filepath) >= 0) {
     b4c:	mov	r1, r0
     b4e:	mov	r2, r7
     b50:	mov	r0, r5
     b52:	bl	f748 <lfs_dir_open>
     b56:	cmp	r0, #0
     b58:	blt.n	bb0 <LittleFS::open(char const*, unsigned char)+0xa0>
					return File(new LittleFSFile(&lfs, dir, filepath));
     b5a:	movs	r0, #164	; 0xa4
     b5c:	bl	138cc <operator new(unsigned int)>
     b60:	mov	r8, r0
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
     b62:	ldr	r3, [pc, #300]	; (c90 <LittleFS::open(char const*, unsigned char)+0x180>)
     b64:	strb	r6, [r0, #4]
		lfs = lfsin;
		dir = dirin;
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     b66:	mov	r1, r7
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
		lfs = lfsin;
     b68:	str.w	r5, [r8, #20]
		dir = dirin;
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     b6c:	adds	r0, #36	; 0x24
     b6e:	strb.w	r6, [r8, #12]
     b72:	str.w	r6, [r8, #16]
     b76:	mov.w	r5, #1000	; 0x3e8
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
		lfs = lfsin;
		dir = dirin;
     b7a:	str.w	r9, [r8, #28]
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     b7e:	movs	r2, #128	; 0x80
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
		lfs = lfsin;
		dir = dirin;
		file = nullptr;
     b80:	str.w	r6, [r8, #24]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (file), this=%x\n", (int)this);
	}
	LittleFSFile(lfs_t *lfsin, lfs_dir_t *dirin, const char *name) {
     b84:	str.w	r3, [r8]
     b88:	str.w	r5, [r8, #8]
		lfs = lfsin;
		dir = dirin;
		file = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     b8c:	bl	15820 <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     b90:	ldr.w	r3, [r8, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     b94:	ldr	r2, [pc, #252]	; (c94 <LittleFS::open(char const*, unsigned char)+0x184>)
     b96:	str	r5, [r4, #8]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     b98:	adds	r3, #1
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
			}
		}
		return File();
	}
     b9a:	mov	r0, r4
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     b9c:	str.w	r8, [r4, #16]
     ba0:	strb	r6, [r4, #4]
     ba2:	strb	r6, [r4, #12]
		if (f) f->refcount++;
     ba4:	str.w	r3, [r8, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     ba8:	str	r2, [r4, #0]
     baa:	add	sp, #52	; 0x34
     bac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				lfs_dir_t *dir = (lfs_dir_t *)malloc(sizeof(lfs_dir_t));
				if (!dir) return File();
				if (lfs_dir_open(&lfs, dir, filepath) >= 0) {
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
     bb0:	mov	r0, r9
     bb2:	bl	146bc <free>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     bb6:	ldr	r2, [pc, #220]	; (c94 <LittleFS::open(char const*, unsigned char)+0x184>)
     bb8:	str	r2, [r4, #0]
     bba:	movs	r3, #0
     bbc:	mov.w	r1, #1000	; 0x3e8
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
			}
		}
		return File();
	}
     bc0:	mov	r0, r4
     bc2:	strb	r3, [r4, #4]
     bc4:	strb	r3, [r4, #12]
     bc6:	str	r3, [r4, #16]
     bc8:	str	r1, [r4, #8]
     bca:	add	sp, #52	; 0x34
     bcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
			}
		} else {
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
     bd0:	movs	r0, #84	; 0x54
     bd2:	bl	146ac <malloc>
			if (!file) return File();
     bd6:	mov	r8, r0
     bd8:	cmp	r0, #0
     bda:	beq.n	bb6 <LittleFS::open(char const*, unsigned char)+0xa6>
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
     bdc:	adds	r5, #8
     bde:	mov	r0, r5
     be0:	movw	r3, #259	; 0x103
     be4:	mov	r2, r7
     be6:	mov	r1, r8
     be8:	bl	11550 <lfs_file_open>
     bec:	cmp	r0, #0
     bee:	blt.n	bb6 <LittleFS::open(char const*, unsigned char)+0xa6>
				if (mode == FILE_WRITE) {
     bf0:	cmp	r6, #1
     bf2:	beq.n	c82 <LittleFS::open(char const*, unsigned char)+0x172>
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
     bf4:	movs	r0, #164	; 0xa4
     bf6:	bl	138cc <operator new(unsigned int)>
     bfa:	mov	r6, r0
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
     bfc:	str	r5, [r0, #20]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     bfe:	mov	r1, r7
     c00:	movs	r5, #0
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
     c02:	ldr	r3, [pc, #140]	; (c90 <LittleFS::open(char const*, unsigned char)+0x180>)
     c04:	str	r3, [r6, #0]
     c06:	mov.w	r7, #1000	; 0x3e8
		lfs = lfsin;
		file = filein;
     c0a:	str.w	r8, [r6, #24]
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     c0e:	movs	r2, #128	; 0x80
     c10:	strb	r5, [r6, #4]
     c12:	strb	r5, [r6, #12]
     c14:	str	r5, [r6, #16]
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
		dir = nullptr;
     c16:	str	r5, [r6, #28]
     c18:	str	r7, [r6, #8]
		strlcpy(fullpath, name, sizeof(fullpath));
     c1a:	adds	r0, #36	; 0x24
     c1c:	bl	15820 <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     c20:	ldr	r3, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     c22:	ldr	r2, [pc, #112]	; (c94 <LittleFS::open(char const*, unsigned char)+0x184>)
     c24:	strb	r5, [r4, #4]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     c26:	adds	r3, #1
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
			}
		}
		return File();
	}
     c28:	mov	r0, r4
     c2a:	str	r7, [r4, #8]
     c2c:	strb	r5, [r4, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     c2e:	str	r6, [r4, #16]
		if (f) f->refcount++;
     c30:	str	r3, [r6, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     c32:	str	r2, [r4, #0]
     c34:	add	sp, #52	; 0x34
     c36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			struct lfs_info info;
			if (lfs_stat(&lfs, filepath, &info) < 0) return File();
			//Serial.printf("LittleFS open got info, name=%s\n", info.name);
			if (info.type == LFS_TYPE_REG) {
				//Serial.println("  regular file");
				lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
     c3a:	movs	r0, #84	; 0x54
     c3c:	bl	146ac <malloc>
				if (!file) return File();
     c40:	mov	r9, r0
     c42:	cmp	r0, #0
     c44:	beq.n	bb6 <LittleFS::open(char const*, unsigned char)+0xa6>
				if (lfs_file_open(&lfs, file, filepath, LFS_O_RDONLY) >= 0) {
     c46:	mov	r1, r0
     c48:	mov	r3, r8
     c4a:	mov	r2, r7
     c4c:	mov	r0, r5
     c4e:	bl	11550 <lfs_file_open>
     c52:	cmp	r0, #0
     c54:	blt.n	bb0 <LittleFS::open(char const*, unsigned char)+0xa0>
					return File(new LittleFSFile(&lfs, file, filepath));
     c56:	movs	r0, #164	; 0xa4
     c58:	bl	138cc <operator new(unsigned int)>
     c5c:	mov	r8, r0
     c5e:	strb	r6, [r0, #4]
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     c60:	mov	r1, r7
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
     c62:	str.w	r5, [r8, #20]
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
     c66:	ldr	r3, [pc, #40]	; (c90 <LittleFS::open(char const*, unsigned char)+0x180>)
     c68:	strb.w	r6, [r8, #12]
		lfs = lfsin;
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     c6c:	adds	r0, #36	; 0x24

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     c6e:	str.w	r6, [r8, #16]
     c72:	mov.w	r5, #1000	; 0x3e8
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
     c76:	str.w	r9, [r8, #24]
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
     c7a:	movs	r2, #128	; 0x80
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
		dir = nullptr;
     c7c:	str.w	r6, [r8, #28]
     c80:	b.n	b84 <LittleFS::open(char const*, unsigned char)+0x74>
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
			if (!file) return File();
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
				if (mode == FILE_WRITE) {
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
     c82:	movs	r3, #2
     c84:	movs	r2, #0
     c86:	mov	r1, r8
     c88:	mov	r0, r5
     c8a:	bl	10494 <lfs_file_seek>
     c8e:	b.n	bf4 <LittleFS::open(char const*, unsigned char)+0xe4>
     c90:	.word	0x00018efc
     c94:	.word	0x00018e14

00000c98 <LittleFS::remove(char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
		if (!mounted) return false;
		if (lfs_rename(&lfs, oldfilepath, newfilepath) < 0) return false;
		return true;
	}
	bool remove(const char *filepath) {
     c98:	push	{r3, lr}
		if (!mounted) return false;
     c9a:	ldrb	r3, [r0, #5]
     c9c:	cbz	r3, ca8 <LittleFS::remove(char const*)+0x10>
		if (lfs_remove(&lfs, filepath) < 0) return false;
     c9e:	adds	r0, #8
     ca0:	bl	11564 <lfs_remove>
     ca4:	mvns	r3, r0
     ca6:	lsrs	r3, r3, #31
		return true;
	}
     ca8:	mov	r0, r3
     caa:	pop	{r3, pc}

00000cac <LittleFS::rename(char const*, char const*)>:
	bool mkdir(const char *filepath) {
		if (!mounted) return false;
		if (lfs_mkdir(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     cac:	push	{r3, lr}
		if (!mounted) return false;
     cae:	ldrb	r3, [r0, #5]
     cb0:	cbz	r3, cbc <LittleFS::rename(char const*, char const*)+0x10>
		if (lfs_rename(&lfs, oldfilepath, newfilepath) < 0) return false;
     cb2:	adds	r0, #8
     cb4:	bl	11694 <lfs_rename>
     cb8:	mvns	r3, r0
     cba:	lsrs	r3, r3, #31
		return true;
	}
     cbc:	mov	r0, r3
     cbe:	pop	{r3, pc}

00000cc0 <SDFile::available()>:
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     cc0:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     cc2:	cbz	r2, cde <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     cc4:	ldrb	r3, [r2, #0]
     cc6:	and.w	r3, r3, #8
     cca:	and.w	r0, r3, #255	; 0xff
     cce:	cbz	r3, d12 <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     cd0:	ldr	r3, [r2, #28]
     cd2:	ldr	r0, [r2, #20]
     cd4:	subs	r0, r3, r0
     cd6:	it	mi
     cd8:	mvnmi.w	r0, #2147483648	; 0x80000000
     cdc:	bx	lr
     cde:	ldr	r1, [r0, #96]	; 0x60
     ce0:	cbz	r1, d14 <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     ce2:	ldrb.w	r3, [r1, #49]	; 0x31
     ce6:	and.w	r3, r3, #8
     cea:	and.w	r0, r3, #255	; 0xff
     cee:	cbz	r3, d12 <SDFile::available()+0x52>
     cf0:	ldrd	r2, r3, [r1, #16]
     cf4:	ldrd	r0, r1, [r1]
     cf8:	subs	r0, r2, r0
     cfa:	push	{r4, r5}
     cfc:	sbc.w	r1, r3, r1
     d00:	movs	r5, #0
     d02:	mvn.w	r4, #2147483648	; 0x80000000
     d06:	cmp	r5, r1
     d08:	it	eq
     d0a:	cmpeq	r4, r0
     d0c:	bcs.n	d10 <SDFile::available()+0x50>
     d0e:	mov	r0, r4
		return sdfatfile.available();
	}
     d10:	pop	{r4, r5}
     d12:	bx	lr
     d14:	mov	r0, r1
     d16:	bx	lr

00000d18 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     d18:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     d1a:	cbz	r3, d22 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     d1c:	mov	r0, r3
     d1e:	b.w	a440 <FatFile::peek()>
     d22:	ldr	r0, [r0, #76]	; 0x4c
     d24:	cbz	r0, d2a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     d26:	b.w	8624 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     d2a:	mov.w	r0, #4294967295
     d2e:	bx	lr

00000d30 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     d30:	push	{lr}
     d32:	ldr	r3, [r0, #72]	; 0x48
     d34:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     d36:	cbz	r3, d52 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     d38:	mov	r0, r3
     d3a:	movs	r2, #1
     d3c:	add.w	r1, sp, #7
     d40:	bl	a2a8 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     d44:	cmp	r0, #1
     d46:	bne.n	d62 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     d48:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     d4c:	add	sp, #12
     d4e:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     d52:	ldr	r0, [r0, #76]	; 0x4c
     d54:	cbz	r0, d62 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     d56:	movs	r2, #1
     d58:	add.w	r1, sp, #7
     d5c:	bl	8484 <ExFatFile::read(void*, unsigned int)>
     d60:	b.n	d44 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     d62:	mov.w	r0, #4294967295
     d66:	b.n	d4c <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000d68 <SDFile::flush()>:
	virtual void flush() {
     d68:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     d6a:	cbz	r3, d72 <SDFile::flush()+0xa>
     d6c:	mov	r0, r3
     d6e:	b.w	a8cc <FatFile::sync()>
     d72:	ldr	r0, [r0, #96]	; 0x60
     d74:	cbz	r0, d7a <SDFile::flush()+0x12>
     d76:	b.w	970c <ExFatFile::sync()>
     d7a:	bx	lr

00000d7c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     d7c:	push	{lr}
     d7e:	ldr	r3, [r0, #72]	; 0x48
     d80:	sub	sp, #12
     d82:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     d86:	cbz	r3, d9a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     d88:	mov	r0, r3
     d8a:	movs	r2, #1
     d8c:	add.w	r1, sp, #7
     d90:	bl	a950 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     d94:	add	sp, #12
     d96:	ldr.w	pc, [sp], #4
     d9a:	ldr	r0, [r0, #76]	; 0x4c
     d9c:	cmp	r0, #0
     d9e:	beq.n	d94 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     da0:	movs	r2, #1
     da2:	add.w	r1, sp, #7
     da6:	bl	9b1c <ExFatFile::write(void const*, unsigned int)>
     daa:	add	sp, #12
     dac:	ldr.w	pc, [sp], #4

00000db0 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     db0:	push	{r4, r5, r6, lr}
     db2:	ldr.w	r4, [r0, #1148]	; 0x47c
     db6:	sub	sp, #56	; 0x38
     db8:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     dba:	cbz	r4, dee <SDClass::rename(char const*, char const*)+0x3e>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     dbc:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
     dbe:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dc2:	mov	r2, r1
     dc4:	mov	r3, r5
     dc6:	mov	r1, r4
     dc8:	mov	r0, sp
     dca:	strb.w	r5, [sp]
     dce:	strb.w	r5, [sp, #1]
     dd2:	strb.w	r5, [sp, #2]
     dd6:	bl	a1cc <FatFile::open(FatFile*, char const*, int)>
     dda:	cbnz	r0, de0 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     ddc:	add	sp, #56	; 0x38
     dde:	pop	{r4, r5, r6, pc}
     de0:	mov	r2, r6
     de2:	mov	r1, r4
     de4:	mov	r0, sp
     de6:	bl	a4ac <FatFile::rename(FatFile*, char const*)>
     dea:	add	sp, #56	; 0x38
     dec:	pop	{r4, r5, r6, pc}
     dee:	ldr.w	r0, [r0, #1152]	; 0x480
     df2:	cmp	r0, #0
     df4:	beq.n	ddc <SDClass::rename(char const*, char const*)+0x2c>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
     df6:	add.w	r5, r0, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dfa:	mov	r2, r1
     dfc:	mov	r3, r4
     dfe:	mov	r1, r5
     e00:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     e02:	strb.w	r4, [sp, #49]	; 0x31
     e06:	strb.w	r4, [sp, #50]	; 0x32
     e0a:	strb.w	r4, [sp, #51]	; 0x33
     e0e:	bl	8b28 <ExFatFile::open(ExFatFile*, char const*, int)>
     e12:	cmp	r0, #0
     e14:	beq.n	ddc <SDClass::rename(char const*, char const*)+0x2c>
     e16:	mov	r2, r6
     e18:	mov	r1, r5
     e1a:	mov	r0, sp
     e1c:	bl	998c <ExFatFile::rename(ExFatFile*, char const*)>
     e20:	add	sp, #56	; 0x38
     e22:	pop	{r4, r5, r6, pc}

00000e24 <SDClass::rmdir(char const*)>:
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     e24:	push	{r4, r5, lr}
     e26:	ldr.w	r4, [r0, #1148]	; 0x47c
     e2a:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     e2c:	cbz	r4, e58 <SDClass::rmdir(char const*)+0x34>
     e2e:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     e30:	mov	r2, r1
     e32:	mov	r3, r5
     e34:	mov	r1, r4
     e36:	mov	r0, sp
     e38:	strb.w	r5, [sp]
     e3c:	strb.w	r5, [sp, #1]
     e40:	strb.w	r5, [sp, #2]
     e44:	bl	a28c <FatFile::open(FatVolume*, char const*, int)>
     e48:	cbnz	r0, e4e <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     e4a:	add	sp, #60	; 0x3c
     e4c:	pop	{r4, r5, pc}
     e4e:	mov	r0, sp
     e50:	bl	a684 <FatFile::rmdir()>
     e54:	add	sp, #60	; 0x3c
     e56:	pop	{r4, r5, pc}
     e58:	ldr.w	r0, [r0, #1152]	; 0x480
     e5c:	cmp	r0, #0
     e5e:	beq.n	e4a <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     e60:	mov	r2, r1
     e62:	mov	r3, r4
     e64:	mov	r1, r0
     e66:	mov	r0, sp
     e68:	strb.w	r4, [sp, #49]	; 0x31
     e6c:	strb.w	r4, [sp, #50]	; 0x32
     e70:	strb.w	r4, [sp, #51]	; 0x33
     e74:	bl	8c28 <ExFatFile::open(ExFatVolume*, char const*, int)>
     e78:	cmp	r0, #0
     e7a:	beq.n	e4a <SDClass::rmdir(char const*)+0x26>
     e7c:	mov	r0, sp
     e7e:	bl	9558 <ExFatFile::rmdir()>
     e82:	add	sp, #60	; 0x3c
     e84:	pop	{r4, r5, pc}
     e86:	nop

00000e88 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     e88:	push	{r3, r4, r5, lr}
		if (!filename) {
     e8a:	ldr	r4, [r0, #100]	; 0x64
     e8c:	cbz	r4, e92 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     e8e:	mov	r0, r4
     e90:	pop	{r3, r4, r5, pc}
     e92:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     e94:	mov.w	r0, #256	; 0x100
     e98:	bl	146ac <malloc>
     e9c:	mov	r1, r0
     e9e:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     ea0:	cbz	r0, ec4 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     ea2:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     ea4:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     ea6:	cbz	r0, eb4 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     ea8:	mov.w	r2, #256	; 0x100
     eac:	bl	b14c <FatFile::getName(char*, unsigned int)>
     eb0:	ldr	r4, [r5, #100]	; 0x64
     eb2:	b.n	e8e <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     eb4:	ldr	r0, [r5, #96]	; 0x60
     eb6:	cbz	r0, eca <SDFile::name()+0x42>
     eb8:	mov.w	r2, #256	; 0x100
     ebc:	bl	8240 <ExFatFile::getName(char*, unsigned int)>
     ec0:	ldr	r4, [r5, #100]	; 0x64
     ec2:	b.n	e8e <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     ec4:	ldr	r4, [pc, #8]	; (ed0 <SDFile::name()+0x48>)
     ec6:	str	r4, [r5, #100]	; 0x64
     ec8:	b.n	e8e <SDFile::name()+0x6>
     eca:	mov	r4, r1
     ecc:	b.n	e8e <SDFile::name()+0x6>
     ece:	nop
     ed0:	.word	0x1fff14fc

00000ed4 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     ed4:	push	{r4, r6, r7, lr}
     ed6:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     ed8:	cbz	r4, efe <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     eda:	cmp	r3, #1
     edc:	it	eq
     ede:	cmpeq	r2, #0
     ee0:	bcc.n	ee6 <SDFile::truncate(unsigned long long)+0x12>
     ee2:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
     ee4:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     ee6:	mov	r1, r2
     ee8:	mov	r0, r4
     eea:	bl	a6e0 <FatFile::seekSet(unsigned long)>
     eee:	cmp	r0, #0
     ef0:	beq.n	ee2 <SDFile::truncate(unsigned long long)+0xe>
     ef2:	mov	r0, r4
     ef4:	bl	a8d8 <FatFile::truncate()>
     ef8:	cmp	r0, #0
     efa:	beq.n	ee2 <SDFile::truncate(unsigned long long)+0xe>
     efc:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     efe:	ldr	r4, [r0, #96]	; 0x60
     f00:	cmp	r4, #0
     f02:	beq.n	ee2 <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     f04:	mov	r0, r4
     f06:	bl	8654 <ExFatFile::seekSet(unsigned long long)>
     f0a:	cmp	r0, #0
     f0c:	beq.n	ee2 <SDFile::truncate(unsigned long long)+0xe>
     f0e:	mov	r0, r4
     f10:	ldmia.w	sp!, {r4, r6, r7, lr}
     f14:	b.w	9a38 <ExFatFile::truncate()>

00000f18 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     f18:	push	{r4, lr}
     f1a:	ldr.w	r4, [r0, #1148]	; 0x47c
     f1e:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f20:	cbz	r4, f42 <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     f22:	mov	r2, r1
     f24:	movs	r3, #1
     f26:	addw	r1, r4, #1084	; 0x43c
     f2a:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     f2c:	movs	r4, #0
     f2e:	strb.w	r4, [sp]
     f32:	strb.w	r4, [sp, #1]
     f36:	strb.w	r4, [sp, #2]
     f3a:	bl	a108 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     f3e:	add	sp, #56	; 0x38
     f40:	pop	{r4, pc}
     f42:	ldr.w	r0, [r0, #1152]	; 0x480
     f46:	cmp	r0, #0
     f48:	beq.n	f3e <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     f4a:	mov	r2, r1
     f4c:	movs	r3, #1
     f4e:	add.w	r1, r0, #1088	; 0x440
     f52:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     f54:	strb.w	r4, [sp, #49]	; 0x31
     f58:	strb.w	r4, [sp, #50]	; 0x32
     f5c:	strb.w	r4, [sp, #51]	; 0x33
     f60:	bl	98b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f64:	add	sp, #56	; 0x38
     f66:	pop	{r4, pc}

00000f68 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     f68:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     f6a:	cbz	r3, f94 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     f6c:	ldrb	r2, [r3, #0]
     f6e:	tst.w	r2, #112	; 0x70
     f72:	bne.n	f76 <SDFile::rewindDirectory()+0xe>
     f74:	bx	lr
     f76:	push	{r4, lr}
     f78:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     f7a:	movs	r1, #0
     f7c:	mov	r0, r3
     f7e:	bl	a6e0 <FatFile::seekSet(unsigned long)>
     f82:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     f84:	cbz	r0, f92 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     f86:	movs	r2, #0
     f88:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     f8a:	ldmia.w	sp!, {r4, lr}
     f8e:	b.w	8654 <ExFatFile::seekSet(unsigned long long)>
     f92:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     f94:	ldr	r0, [r0, #96]	; 0x60
     f96:	cmp	r0, #0
     f98:	beq.n	f74 <SDFile::rewindDirectory()+0xc>
     f9a:	ldrb.w	r3, [r0, #49]	; 0x31
     f9e:	tst.w	r3, #80	; 0x50
     fa2:	beq.n	f74 <SDFile::rewindDirectory()+0xc>
     fa4:	movs	r2, #0
     fa6:	movs	r3, #0
     fa8:	b.w	8654 <ExFatFile::seekSet(unsigned long long)>

00000fac <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
     fac:	push	{r3, r4, r5, lr}
     fae:	mov	r5, r0
     fb0:	ldr.w	r0, [r0, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     fb4:	cbz	r0, fe8 <SDClass::usedSize()+0x3c>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     fb6:	ldr	r4, [r0, #28]
     fb8:	subs	r4, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     fba:	bl	af0c <FatPartition::freeClusterCount()>
     fbe:	ldr.w	r3, [r5, #1148]	; 0x47c
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     fc2:	subs	r4, r4, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     fc4:	cbz	r3, fd8 <SDClass::usedSize()+0x2c>
     fc6:	ldrb	r0, [r3, #6]
     fc8:	mov.w	r3, #512	; 0x200
     fcc:	lsl.w	r0, r3, r0
     fd0:	uxth	r0, r0
     fd2:	umull	r0, r1, r0, r4
     fd6:	pop	{r3, r4, r5, pc}
     fd8:	ldr.w	r3, [r5, #1152]	; 0x480
     fdc:	cbz	r3, ffa <SDClass::usedSize()+0x4e>
     fde:	ldr.w	r0, [r3, #1076]	; 0x434
     fe2:	umull	r0, r1, r0, r4
     fe6:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     fe8:	ldr.w	r3, [r5, #1152]	; 0x480
     fec:	cbz	r3, ffa <SDClass::usedSize()+0x4e>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     fee:	mov	r0, r3
     ff0:	ldr.w	r4, [r3, #1064]	; 0x428
     ff4:	bl	92d4 <ExFatPartition::freeClusterCount()>
     ff8:	b.n	fbe <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     ffa:	movs	r0, #0
     ffc:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     ffe:	pop	{r3, r4, r5, pc}

00001000 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
    1000:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    1002:	cbz	r3, 100a <SDFile::position()+0xa>
    1004:	ldr	r0, [r3, #20]
    1006:	movs	r1, #0
    1008:	bx	lr
    100a:	ldr	r3, [r0, #96]	; 0x60
    100c:	cbz	r3, 1014 <SDFile::position()+0x14>
    100e:	ldmia.w	r3, {r0, r1}
    1012:	bx	lr
    1014:	mov	r0, r3
    1016:	mov	r1, r3
		return sdfatfile.curPosition();
	}
    1018:	bx	lr
    101a:	nop

0000101c <SDFile::size()>:
	virtual uint64_t size() {
    101c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    101e:	cbz	r3, 1026 <SDFile::size()+0xa>
    1020:	ldr	r0, [r3, #28]
    1022:	movs	r1, #0
    1024:	bx	lr
    1026:	ldr	r3, [r0, #96]	; 0x60
    1028:	cbz	r3, 1030 <SDFile::size()+0x14>
    102a:	ldr	r0, [r3, #16]
    102c:	ldr	r1, [r3, #20]
    102e:	bx	lr
    1030:	mov	r0, r3
    1032:	mov	r1, r3
		return sdfatfile.size();
	}
    1034:	bx	lr
    1036:	nop

00001038 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
    1038:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    103a:	cbz	r3, 1042 <SDFile::read(void*, unsigned int)+0xa>
    103c:	mov	r0, r3
    103e:	b.w	a2a8 <FatFile::read(void*, unsigned int)>
    1042:	ldr	r0, [r0, #96]	; 0x60
    1044:	cbz	r0, 104a <SDFile::read(void*, unsigned int)+0x12>
    1046:	b.w	8484 <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
    104a:	mov.w	r0, #4294967295
    104e:	bx	lr

00001050 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
    1050:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
    1052:	cbz	r3, 105a <SDFile::peek()+0xa>
    1054:	mov	r0, r3
    1056:	b.w	a440 <FatFile::peek()>
    105a:	ldr	r0, [r0, #96]	; 0x60
    105c:	cbz	r0, 1062 <SDFile::peek()+0x12>
    105e:	b.w	8624 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
    1062:	mov.w	r0, #4294967295
    1066:	bx	lr

00001068 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    1068:	ldr.w	r2, [r0, #1148]	; 0x47c
    106c:	cbz	r2, 1082 <SDClass::totalSize()+0x1a>
    106e:	ldrb	r1, [r2, #6]
    1070:	ldr	r0, [r2, #28]
    1072:	mov.w	r3, #512	; 0x200
    1076:	lsls	r3, r1
    1078:	uxth	r3, r3
    107a:	subs	r0, #1
    107c:	umull	r0, r1, r3, r0
    1080:	bx	lr
    1082:	ldr.w	r2, [r0, #1152]	; 0x480
    1086:	cbz	r2, 1096 <SDClass::totalSize()+0x2e>
    1088:	ldr.w	r3, [r2, #1064]	; 0x428
    108c:	ldr.w	r0, [r2, #1076]	; 0x434
    1090:	umull	r0, r1, r3, r0
    1094:	bx	lr
    1096:	movs	r0, #0
    1098:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
    109a:	bx	lr

0000109c <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
    109c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    109e:	cbz	r3, 10ae <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
    10a0:	ldrb	r3, [r3, #0]
    10a2:	tst.w	r3, #112	; 0x70
    10a6:	ite	ne
    10a8:	movne	r0, #1
    10aa:	moveq	r0, #0
    10ac:	bx	lr
    10ae:	ldr	r0, [r0, #96]	; 0x60
    10b0:	cbz	r0, 10c0 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    10b2:	ldrb.w	r3, [r0, #49]	; 0x31
    10b6:	tst.w	r3, #80	; 0x50
    10ba:	ite	ne
    10bc:	movne	r0, #1
    10be:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
    10c0:	bx	lr
    10c2:	nop

000010c4 <LittleFS::usedSize()>:
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
    10c4:	ldrb	r3, [r0, #5]
    10c6:	cbnz	r3, 10ce <LittleFS::usedSize()+0xa>
    10c8:	movs	r0, #0
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
    10ca:	movs	r1, #0
    10cc:	bx	lr
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
    10ce:	push	{r4, lr}
    10d0:	mov	r4, r0
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
    10d2:	adds	r0, #8
    10d4:	bl	11ba0 <lfs_fs_size>
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    10d8:	cmp	r0, #0
    10da:	blt.n	10f0 <LittleFS::usedSize()+0x2c>
    10dc:	ldr.w	r3, [r4, #160]	; 0xa0
    10e0:	cmp	r3, r0
    10e2:	bcc.n	10f0 <LittleFS::usedSize()+0x2c>
		return blocks * config.block_size;
    10e4:	ldr.w	r3, [r4, #156]	; 0x9c
    10e8:	mul.w	r0, r3, r0
	}
    10ec:	movs	r1, #0
    10ee:	pop	{r4, pc}
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    10f0:	ldr	r3, [r4, #0]
    10f2:	ldr	r2, [pc, #36]	; (1118 <LittleFS::usedSize()+0x54>)
    10f4:	ldr	r3, [r3, #28]
    10f6:	cmp	r3, r2
    10f8:	bne.n	1110 <LittleFS::usedSize()+0x4c>
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    10fa:	ldrb	r3, [r4, #5]
    10fc:	cbz	r3, 110c <LittleFS::usedSize()+0x48>
		return config.block_count * config.block_size;
    10fe:	ldr.w	r0, [r4, #160]	; 0xa0
    1102:	ldr.w	r3, [r4, #156]	; 0x9c
    1106:	mul.w	r0, r3, r0
    110a:	b.n	10ec <LittleFS::usedSize()+0x28>
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
    110c:	movs	r0, #0
    110e:	b.n	10ec <LittleFS::usedSize()+0x28>
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    1110:	mov	r0, r4
		return blocks * config.block_size;
	}
    1112:	ldmia.w	sp!, {r4, lr}
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    1116:	bx	r3
    1118:	.word	0x000005fd

0000111c <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
    111c:	push	{r4, lr}
    111e:	ldr.w	r4, [r0, #1148]	; 0x47c
    1122:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    1124:	cbz	r4, 1150 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1126:	mov	r2, r1
    1128:	mov	r0, sp
    112a:	mov	r1, r4
    112c:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    112e:	movs	r4, #0
    1130:	strb.w	r4, [sp]
    1134:	strb.w	r4, [sp, #1]
    1138:	strb.w	r4, [sp, #2]
    113c:	bl	a28c <FatFile::open(FatVolume*, char const*, int)>
    1140:	cbnz	r0, 1146 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
    1142:	add	sp, #56	; 0x38
    1144:	pop	{r4, pc}
    1146:	mov	r0, sp
    1148:	bl	b554 <FatFile::remove()>
    114c:	add	sp, #56	; 0x38
    114e:	pop	{r4, pc}
    1150:	ldr.w	r0, [r0, #1152]	; 0x480
    1154:	cmp	r0, #0
    1156:	beq.n	1142 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1158:	mov	r2, r1
    115a:	movs	r3, #1
    115c:	mov	r1, r0
    115e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1160:	strb.w	r4, [sp, #49]	; 0x31
    1164:	strb.w	r4, [sp, #50]	; 0x32
    1168:	strb.w	r4, [sp, #51]	; 0x33
    116c:	bl	8c28 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1170:	cmp	r0, #0
    1172:	beq.n	1142 <SDClass::remove(char const*)+0x26>
    1174:	mov	r0, sp
    1176:	bl	9480 <ExFatFile::remove()>
    117a:	add	sp, #56	; 0x38
    117c:	pop	{r4, pc}
    117e:	nop

00001180 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    1180:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1184:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    1186:	sub	sp, #80	; 0x50
    1188:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    118a:	beq.n	1210 <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    118c:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
    118e:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    1192:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1196:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    1198:	it	ne
    119a:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    119c:	bl	bdc4 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    11a0:	ldr	r3, [sp, #72]	; 0x48
    11a2:	cmp	r3, #0
    11a4:	beq.n	1222 <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
    11a6:	movs	r0, #104	; 0x68
    11a8:	bl	138cc <operator new(unsigned int)>
    11ac:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    11ae:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    11b2:	ldr	r0, [pc, #136]	; (123c <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    11b4:	ldr	r1, [pc, #136]	; (1240 <SDClass::open(char const*, unsigned char)+0xc0>)
    11b6:	ldr	r2, [sp, #8]
    11b8:	ldrb.w	r3, [sp, #12]
    11bc:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    11be:	add	r7, sp, #16
    11c0:	strb	r6, [r4, #24]
    11c2:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    11c4:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    11c6:	mov.w	r8, #1000	; 0x3e8
    11ca:	mov	r1, r7
    11cc:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    11d0:	str	r2, [r4, #28]
    11d2:	strb.w	r3, [r4, #32]
    11d6:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    11d8:	strb	r6, [r4, #12]
    11da:	str	r6, [r4, #16]
    11dc:	str.w	r8, [r4, #8]
    11e0:	bl	bb80 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11e4:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    11e6:	ldr	r1, [pc, #92]	; (1244 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    11e8:	ldr	r2, [pc, #92]	; (1248 <SDClass::open(char const*, unsigned char)+0xc8>)
    11ea:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    11ec:	adds	r3, #1
    11ee:	strb	r6, [r5, #4]
    11f0:	str.w	r8, [r5, #8]
    11f4:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    11f6:	str	r4, [r5, #16]
    11f8:	str	r1, [r4, #20]
		if (f) f->refcount++;
    11fa:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    11fc:	str	r2, [r5, #0]
    11fe:	ldr	r3, [pc, #76]	; (124c <SDClass::open(char const*, unsigned char)+0xcc>)
    1200:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    1202:	mov	r0, r7
    1204:	bl	bbf8 <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
    1208:	mov	r0, r5
    120a:	add	sp, #80	; 0x50
    120c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    1210:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1214:	adds	r1, #4
    1216:	mov	r0, sp
    1218:	bl	bdc4 <FsVolume::open(char const*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    121c:	ldr	r3, [sp, #72]	; 0x48
    121e:	cmp	r3, #0
    1220:	bne.n	11a6 <SDClass::open(char const*, unsigned char)+0x26>
    1222:	ldr	r3, [sp, #76]	; 0x4c
    1224:	cmp	r3, #0
    1226:	bne.n	11a6 <SDClass::open(char const*, unsigned char)+0x26>
    1228:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    122c:	ldr	r2, [pc, #24]	; (1248 <SDClass::open(char const*, unsigned char)+0xc8>)
    122e:	strb	r3, [r5, #4]
    1230:	strb	r3, [r5, #12]
    1232:	str	r3, [r5, #16]
    1234:	str	r1, [r5, #8]
    1236:	str	r2, [r5, #0]
    1238:	add	r7, sp, #16
    123a:	b.n	11fe <SDClass::open(char const*, unsigned char)+0x7e>
    123c:	.word	0x00018e74
    1240:	.word	0x00018da8
    1244:	.word	0x00018df0
    1248:	.word	0x00018e14
    124c:	.word	0x00018dcc

00001250 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    1250:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    1252:	cbz	r3, 125a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
    1254:	mov	r0, r3
    1256:	b.w	a8cc <FatFile::sync()>
    125a:	ldr	r0, [r0, #76]	; 0x4c
    125c:	cbz	r0, 1262 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
    125e:	b.w	970c <ExFatFile::sync()>
    1262:	bx	lr

00001264 <LittleFS::rmdir(char const*)>:
		if (!mounted) return false;
		if (lfs_remove(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
    1264:	ldr	r2, [r0, #0]
	bool remove(const char *filepath) {
		if (!mounted) return false;
		if (lfs_remove(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rmdir(const char *filepath) {
    1266:	push	{r4, lr}
		return remove(filepath);
    1268:	ldr	r2, [r2, #16]
    126a:	ldr	r4, [pc, #32]	; (128c <LittleFS::rmdir(char const*)+0x28>)
    126c:	cmp	r2, r4
    126e:	bne.n	1286 <LittleFS::rmdir(char const*)+0x22>
    1270:	mov	r3, r0
		if (!mounted) return false;
		if (lfs_rename(&lfs, oldfilepath, newfilepath) < 0) return false;
		return true;
	}
	bool remove(const char *filepath) {
		if (!mounted) return false;
    1272:	ldrb	r0, [r0, #5]
    1274:	cbnz	r0, 1278 <LittleFS::rmdir(char const*)+0x14>
		if (lfs_remove(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
    1276:	pop	{r4, pc}
    1278:	mov	r0, r3
		if (lfs_rename(&lfs, oldfilepath, newfilepath) < 0) return false;
		return true;
	}
	bool remove(const char *filepath) {
		if (!mounted) return false;
		if (lfs_remove(&lfs, filepath) < 0) return false;
    127a:	adds	r0, #8
    127c:	bl	11564 <lfs_remove>
    1280:	mvns	r0, r0
    1282:	lsrs	r0, r0, #31
    1284:	pop	{r4, pc}
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
    1286:	ldmia.w	sp!, {r4, lr}
		if (!mounted) return false;
		if (lfs_remove(&lfs, filepath) < 0) return false;
		return true;
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
    128a:	bx	r2
    128c:	.word	0x00000c99

00001290 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    1290:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1292:	cbz	r3, 129a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
    1294:	mov	r0, r3
    1296:	b.w	a950 <FatFile::write(void const*, unsigned int)>
    129a:	ldr	r0, [r0, #76]	; 0x4c
    129c:	cbz	r0, 12a2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
    129e:	b.w	9b1c <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
    12a2:	bx	lr

000012a4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
    12a4:	ldr	r3, [r0, #92]	; 0x5c
    12a6:	cbz	r3, 12ae <SDFile::write(void const*, unsigned int)+0xa>
    12a8:	mov	r0, r3
    12aa:	b.w	a950 <FatFile::write(void const*, unsigned int)>
    12ae:	ldr	r0, [r0, #96]	; 0x60
    12b0:	cbz	r0, 12b6 <SDFile::write(void const*, unsigned int)+0x12>
    12b2:	b.w	9b1c <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
    12b6:	bx	lr

000012b8 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    12b8:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
    12ba:	cbz	r2, 12d6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
    12bc:	ldrb	r3, [r2, #0]
    12be:	and.w	r3, r3, #8
    12c2:	and.w	r0, r3, #255	; 0xff
    12c6:	cbz	r3, 130a <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    12c8:	ldr	r3, [r2, #28]
    12ca:	ldr	r0, [r2, #20]
    12cc:	subs	r0, r3, r0
    12ce:	it	mi
    12d0:	mvnmi.w	r0, #2147483648	; 0x80000000
    12d4:	bx	lr
    12d6:	ldr	r1, [r0, #76]	; 0x4c
    12d8:	cbz	r1, 130c <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
    12da:	ldrb.w	r3, [r1, #49]	; 0x31
    12de:	and.w	r3, r3, #8
    12e2:	and.w	r0, r3, #255	; 0xff
    12e6:	cbz	r3, 130a <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    12e8:	ldrd	r2, r3, [r1, #16]
    12ec:	ldrd	r0, r1, [r1]
    12f0:	subs	r0, r2, r0
    12f2:	push	{r4, r5}
    12f4:	sbc.w	r1, r3, r1
    12f8:	movs	r5, #0
    12fa:	mvn.w	r4, #2147483648	; 0x80000000
    12fe:	cmp	r5, r1
    1300:	it	eq
    1302:	cmpeq	r4, r0
    1304:	bcs.n	1308 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
    1306:	mov	r0, r4
    return BaseFile::available();
  }
    1308:	pop	{r4, r5}
    130a:	bx	lr
    130c:	mov	r0, r1
    130e:	bx	lr

00001310 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    1310:	push	{r4, r5, lr}
    1312:	ldr.w	r4, [r0, #1148]	; 0x47c
    1316:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1318:	cbz	r4, 1338 <SDClass::exists(char const*)+0x28>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    131a:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    131c:	mov	r2, r1
    131e:	mov	r3, r5
    1320:	mov	r1, r4
    1322:	mov	r0, sp
    1324:	strb.w	r5, [sp]
    1328:	strb.w	r5, [sp, #1]
    132c:	strb.w	r5, [sp, #2]
    1330:	bl	a28c <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    1334:	add	sp, #60	; 0x3c
    1336:	pop	{r4, r5, pc}
    1338:	ldr.w	r0, [r0, #1152]	; 0x480
    133c:	cmp	r0, #0
    133e:	beq.n	1334 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1340:	mov	r2, r1
    1342:	mov	r3, r4
    1344:	mov	r1, r0
    1346:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1348:	strb.w	r4, [sp, #49]	; 0x31
    134c:	strb.w	r4, [sp, #50]	; 0x32
    1350:	strb.w	r4, [sp, #51]	; 0x33
    1354:	bl	8c28 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1358:	add	sp, #60	; 0x3c
    135a:	pop	{r4, r5, pc}

0000135c <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    135c:	push	{r4, r6, r7}
    135e:	ldr	r4, [sp, #12]
    1360:	mov	r6, r2
    1362:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    1364:	cbz	r4, 1374 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    1366:	cmp	r4, #1
    1368:	beq.n	13a8 <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    136a:	cmp	r4, #2
    136c:	beq.n	138a <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
    136e:	movs	r0, #0
    1370:	pop	{r4, r6, r7}
    1372:	bx	lr
    1374:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    1376:	cbz	r4, 13b0 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1378:	cmp	r3, #1
    137a:	it	eq
    137c:	cmpeq	r2, #0
    137e:	bcs.n	136e <SDFile::seek(unsigned long long, int)+0x12>
    1380:	mov	r0, r4
    1382:	mov	r1, r2
    1384:	pop	{r4, r6, r7}
    1386:	b.w	a6e0 <FatFile::seekSet(unsigned long)>
    138a:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    138c:	cbz	r3, 13bc <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
    138e:	ldr	r2, [r3, #28]
    1390:	adds	r6, r6, r2
    1392:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1396:	cmp	r7, #1
    1398:	it	eq
    139a:	cmpeq	r6, #0
    139c:	bcs.n	136e <SDFile::seek(unsigned long long, int)+0x12>
    139e:	mov	r1, r6
    13a0:	mov	r0, r3
    13a2:	pop	{r4, r6, r7}
    13a4:	b.w	a6e0 <FatFile::seekSet(unsigned long)>
    13a8:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    13aa:	cbz	r3, 13d0 <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
    13ac:	ldr	r2, [r3, #20]
    13ae:	b.n	1390 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    13b0:	ldr	r0, [r0, #96]	; 0x60
    13b2:	cmp	r0, #0
    13b4:	beq.n	136e <SDFile::seek(unsigned long long, int)+0x12>
    13b6:	pop	{r4, r6, r7}
    13b8:	b.w	8654 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    13bc:	ldr	r0, [r0, #96]	; 0x60
    13be:	cmp	r0, #0
    13c0:	beq.n	136e <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    13c2:	ldrd	r2, r3, [r0, #16]
    13c6:	adds	r2, r2, r6
    13c8:	adcs	r3, r7
    13ca:	pop	{r4, r6, r7}
    13cc:	b.w	8654 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    13d0:	ldr	r0, [r0, #96]	; 0x60
    13d2:	cmp	r0, #0
    13d4:	beq.n	136e <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    13d6:	ldrd	r2, r3, [r0]
    13da:	adds	r2, r2, r6
    13dc:	adcs	r3, r7
    13de:	b.n	13b6 <SDFile::seek(unsigned long long, int)+0x5a>

000013e0 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    13e0:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    13e2:	ldr	r3, [pc, #32]	; (1404 <File::~File()+0x24>)
    13e4:	push	{r4, lr}
    13e6:	mov	r4, r0
    13e8:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    13ea:	cbz	r2, 13fe <File::~File()+0x1e>
    13ec:	ldr	r3, [r2, #16]
    13ee:	subs	r3, #1
    13f0:	str	r3, [r2, #16]
    13f2:	cbnz	r3, 13fe <File::~File()+0x1e>
    13f4:	ldr	r0, [r0, #16]
    13f6:	cbz	r0, 13fe <File::~File()+0x1e>
    13f8:	ldr	r3, [r0, #0]
    13fa:	ldr	r3, [r3, #32]
    13fc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    13fe:	mov	r0, r4
    1400:	pop	{r4, pc}
    1402:	nop
    1404:	.word	0x00018e14

00001408 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    1408:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    140a:	ldr	r3, [r0, #92]	; 0x5c
    140c:	ldr	r2, [pc, #80]	; (1460 <SDFile::~SDFile()+0x58>)
    140e:	str	r2, [r0, #0]
    1410:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    1412:	add.w	r5, r0, #36	; 0x24
    1416:	cbz	r3, 1456 <SDFile::~SDFile()+0x4e>
    1418:	mov	r0, r5
    141a:	bl	bbf8 <FsBaseFile::close()>
		if (filename) free(filename);
    141e:	ldr	r0, [r4, #100]	; 0x64
    1420:	cbz	r0, 1426 <SDFile::~SDFile()+0x1e>
    1422:	bl	146bc <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    1426:	ldr	r3, [pc, #60]	; (1464 <SDFile::~SDFile()+0x5c>)
    1428:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    142a:	mov	r0, r5
    142c:	bl	bbf8 <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1430:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1432:	ldr	r3, [pc, #52]	; (1468 <SDFile::~SDFile()+0x60>)
    1434:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1436:	cbz	r2, 144a <SDFile::~SDFile()+0x42>
    1438:	ldr	r3, [r2, #16]
    143a:	subs	r3, #1
    143c:	str	r3, [r2, #16]
    143e:	cbnz	r3, 144a <SDFile::~SDFile()+0x42>
    1440:	ldr	r0, [r4, #16]
    1442:	cbz	r0, 144a <SDFile::~SDFile()+0x42>
    1444:	ldr	r3, [r0, #0]
    1446:	ldr	r3, [r3, #32]
    1448:	blx	r3
	}
    144a:	mov	r0, r4
    144c:	movs	r1, #104	; 0x68
    144e:	bl	138d0 <operator delete(void*, unsigned int)>
    1452:	mov	r0, r4
    1454:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    1456:	ldr	r3, [r0, #96]	; 0x60
    1458:	cmp	r3, #0
    145a:	bne.n	1418 <SDFile::~SDFile()+0x10>
    145c:	b.n	141e <SDFile::~SDFile()+0x16>
    145e:	nop
    1460:	.word	0x00018e74
    1464:	.word	0x00018dcc
    1468:	.word	0x00018e14

0000146c <LittleFSFile::~LittleFSFile()>:
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
    146c:	ldr	r1, [r0, #24]
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (dir), this=%x\n", (int)this);
	}
	friend class LittleFS;
public:
	virtual ~LittleFSFile() {
    146e:	ldr	r3, [pc, #76]	; (14bc <LittleFSFile::~LittleFSFile()+0x50>)
    1470:	push	{r4, lr}
    1472:	mov	r4, r0
    1474:	str	r3, [r0, #0]
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
    1476:	cbz	r1, 1488 <LittleFSFile::~LittleFSFile()+0x1c>
			//Serial.printf("  close file, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_file_close(lfs, file); // we get stuck here, but why?
    1478:	ldr	r0, [r0, #20]
    147a:	bl	11290 <lfs_file_close>
			free(file);
    147e:	ldr	r0, [r4, #24]
    1480:	bl	146bc <free>
			file = nullptr;
    1484:	movs	r3, #0
    1486:	str	r3, [r4, #24]
		}
		if (dir) {
    1488:	ldr	r1, [r4, #28]
    148a:	cbz	r1, 149c <LittleFSFile::~LittleFSFile()+0x30>
			//Serial.printf("  close dir, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_dir_close(lfs, dir);
    148c:	ldr	r0, [r4, #20]
    148e:	bl	f7e8 <lfs_dir_close>
			free(dir);
    1492:	ldr	r0, [r4, #28]
    1494:	bl	146bc <free>
			dir = nullptr;
    1498:	movs	r3, #0
    149a:	str	r3, [r4, #28]
    149c:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    149e:	ldr	r3, [pc, #32]	; (14c0 <LittleFSFile::~LittleFSFile()+0x54>)
    14a0:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    14a2:	cbz	r2, 14b6 <LittleFSFile::~LittleFSFile()+0x4a>
    14a4:	ldr	r3, [r2, #16]
    14a6:	subs	r3, #1
    14a8:	str	r3, [r2, #16]
    14aa:	cbnz	r3, 14b6 <LittleFSFile::~LittleFSFile()+0x4a>
    14ac:	ldr	r0, [r4, #16]
    14ae:	cbz	r0, 14b6 <LittleFSFile::~LittleFSFile()+0x4a>
    14b0:	ldr	r3, [r0, #0]
    14b2:	ldr	r3, [r3, #32]
    14b4:	blx	r3
	friend class LittleFS;
public:
	virtual ~LittleFSFile() {
		//Serial.printf("  LittleFSFile dtor, this=%x\n", (int)this);
		close();
	}
    14b6:	mov	r0, r4
    14b8:	pop	{r4, pc}
    14ba:	nop
    14bc:	.word	0x00018efc
    14c0:	.word	0x00018e14

000014c4 <File::~File()>:
    14c4:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    14c6:	ldr	r3, [pc, #40]	; (14f0 <File::~File()+0x2c>)
    14c8:	push	{r4, lr}
    14ca:	mov	r4, r0
    14cc:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    14ce:	cbz	r2, 14e2 <File::~File()+0x1e>
    14d0:	ldr	r3, [r2, #16]
    14d2:	subs	r3, #1
    14d4:	str	r3, [r2, #16]
    14d6:	cbnz	r3, 14e2 <File::~File()+0x1e>
    14d8:	ldr	r0, [r0, #16]
    14da:	cbz	r0, 14e2 <File::~File()+0x1e>
    14dc:	ldr	r3, [r0, #0]
    14de:	ldr	r3, [r3, #32]
    14e0:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    14e2:	mov	r0, r4
    14e4:	movs	r1, #20
    14e6:	bl	138d0 <operator delete(void*, unsigned int)>
    14ea:	mov	r0, r4
    14ec:	pop	{r4, pc}
    14ee:	nop
    14f0:	.word	0x00018e14

000014f4 <LittleFSFile::~LittleFSFile()>:
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
    14f4:	ldr	r1, [r0, #24]
		strlcpy(fullpath, name, sizeof(fullpath));
		//Serial.printf("  LittleFSFile ctor (dir), this=%x\n", (int)this);
	}
	friend class LittleFS;
public:
	virtual ~LittleFSFile() {
    14f6:	ldr	r3, [pc, #84]	; (154c <LittleFSFile::~LittleFSFile()+0x58>)
    14f8:	push	{r4, lr}
    14fa:	mov	r4, r0
    14fc:	str	r3, [r0, #0]
		lfs_soff_t size = lfs_file_size(lfs, file);
		if (size < 0) size = 0;
		return size;
	}
	virtual void close() {
		if (file) {
    14fe:	cbz	r1, 1510 <LittleFSFile::~LittleFSFile()+0x1c>
			//Serial.printf("  close file, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_file_close(lfs, file); // we get stuck here, but why?
    1500:	ldr	r0, [r0, #20]
    1502:	bl	11290 <lfs_file_close>
			free(file);
    1506:	ldr	r0, [r4, #24]
    1508:	bl	146bc <free>
			file = nullptr;
    150c:	movs	r3, #0
    150e:	str	r3, [r4, #24]
		}
		if (dir) {
    1510:	ldr	r1, [r4, #28]
    1512:	cbz	r1, 1524 <LittleFSFile::~LittleFSFile()+0x30>
			//Serial.printf("  close dir, this=%x, lfs=%x", (int)this, (int)lfs);
			lfs_dir_close(lfs, dir);
    1514:	ldr	r0, [r4, #20]
    1516:	bl	f7e8 <lfs_dir_close>
			free(dir);
    151a:	ldr	r0, [r4, #28]
    151c:	bl	146bc <free>
			dir = nullptr;
    1520:	movs	r3, #0
    1522:	str	r3, [r4, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1524:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1526:	ldr	r3, [pc, #40]	; (1550 <LittleFSFile::~LittleFSFile()+0x5c>)
    1528:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    152a:	cbz	r2, 153e <LittleFSFile::~LittleFSFile()+0x4a>
    152c:	ldr	r3, [r2, #16]
    152e:	subs	r3, #1
    1530:	str	r3, [r2, #16]
    1532:	cbnz	r3, 153e <LittleFSFile::~LittleFSFile()+0x4a>
    1534:	ldr	r0, [r4, #16]
    1536:	cbz	r0, 153e <LittleFSFile::~LittleFSFile()+0x4a>
    1538:	ldr	r3, [r0, #0]
    153a:	ldr	r3, [r3, #32]
    153c:	blx	r3
	friend class LittleFS;
public:
	virtual ~LittleFSFile() {
		//Serial.printf("  LittleFSFile dtor, this=%x\n", (int)this);
		close();
	}
    153e:	mov	r0, r4
    1540:	movs	r1, #164	; 0xa4
    1542:	bl	138d0 <operator delete(void*, unsigned int)>
    1546:	mov	r0, r4
    1548:	pop	{r4, pc}
    154a:	nop
    154c:	.word	0x00018efc
    1550:	.word	0x00018e14

00001554 <MTPStorage_SD::~MTPStorage_SD()>:
    1554:	ldr.w	r2, [r0, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1558:	push	{r3, r4, r5, lr}
    155a:	ldr	r3, [pc, #104]	; (15c4 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    155c:	ldr	r5, [pc, #104]	; (15c8 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
    155e:	str	r3, [r0, #0]
    1560:	mov	r4, r0
    1562:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1566:	cbz	r2, 1570 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
    1568:	ldr	r3, [r2, #16]
    156a:	subs	r3, #1
    156c:	str	r3, [r2, #16]
    156e:	cbz	r3, 15a4 <MTPStorage_SD::~MTPStorage_SD()+0x50>
    1570:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1574:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1578:	cbz	r2, 1582 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
    157a:	ldr	r3, [r2, #16]
    157c:	subs	r3, #1
    157e:	str	r3, [r2, #16]
    1580:	cbz	r3, 15b4 <MTPStorage_SD::~MTPStorage_SD()+0x60>
    1582:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1586:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    158a:	cbz	r2, 15a0 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
    158c:	ldr	r3, [r2, #16]
    158e:	subs	r3, #1
    1590:	str	r3, [r2, #16]
    1592:	cbnz	r3, 15a0 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
    1594:	ldr.w	r0, [r4, #184]	; 0xb8
    1598:	cbz	r0, 15a0 <MTPStorage_SD::~MTPStorage_SD()+0x4c>
    159a:	ldr	r3, [r0, #0]
    159c:	ldr	r3, [r3, #32]
    159e:	blx	r3
    15a0:	mov	r0, r4
    15a2:	pop	{r3, r4, r5, pc}
    15a4:	ldr.w	r0, [r0, #224]	; 0xe0
    15a8:	cmp	r0, #0
    15aa:	beq.n	1570 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
    15ac:	ldr	r3, [r0, #0]
    15ae:	ldr	r3, [r3, #32]
    15b0:	blx	r3
    15b2:	b.n	1570 <MTPStorage_SD::~MTPStorage_SD()+0x1c>
    15b4:	ldr.w	r0, [r4, #204]	; 0xcc
    15b8:	cmp	r0, #0
    15ba:	beq.n	1582 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
    15bc:	ldr	r3, [r0, #0]
    15be:	ldr	r3, [r3, #32]
    15c0:	blx	r3
    15c2:	b.n	1582 <MTPStorage_SD::~MTPStorage_SD()+0x2e>
    15c4:	.word	0x000192cc
    15c8:	.word	0x00018e14

000015cc <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    15cc:	push	{r3, r4, r5, lr}
    15ce:	ldr	r3, [r0, #92]	; 0x5c
    15d0:	ldr	r2, [pc, #72]	; (161c <SDFile::~SDFile()+0x50>)
    15d2:	str	r2, [r0, #0]
    15d4:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
    15d6:	add.w	r5, r0, #36	; 0x24
    15da:	cbz	r3, 1612 <SDFile::~SDFile()+0x46>
    15dc:	mov	r0, r5
    15de:	bl	bbf8 <FsBaseFile::close()>
		if (filename) free(filename);
    15e2:	ldr	r0, [r4, #100]	; 0x64
    15e4:	cbz	r0, 15ea <SDFile::~SDFile()+0x1e>
    15e6:	bl	146bc <free>
    15ea:	ldr	r3, [pc, #52]	; (1620 <SDFile::~SDFile()+0x54>)
    15ec:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    15ee:	mov	r0, r5
    15f0:	bl	bbf8 <FsBaseFile::close()>
    15f4:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    15f6:	ldr	r3, [pc, #44]	; (1624 <SDFile::~SDFile()+0x58>)
    15f8:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    15fa:	cbz	r2, 160e <SDFile::~SDFile()+0x42>
    15fc:	ldr	r3, [r2, #16]
    15fe:	subs	r3, #1
    1600:	str	r3, [r2, #16]
    1602:	cbnz	r3, 160e <SDFile::~SDFile()+0x42>
    1604:	ldr	r0, [r4, #16]
    1606:	cbz	r0, 160e <SDFile::~SDFile()+0x42>
    1608:	ldr	r3, [r0, #0]
    160a:	ldr	r3, [r3, #32]
    160c:	blx	r3
	}
    160e:	mov	r0, r4
    1610:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    1612:	ldr	r3, [r0, #96]	; 0x60
    1614:	cmp	r3, #0
    1616:	bne.n	15dc <SDFile::~SDFile()+0x10>
    1618:	b.n	15e2 <SDFile::~SDFile()+0x16>
    161a:	nop
    161c:	.word	0x00018e74
    1620:	.word	0x00018dcc
    1624:	.word	0x00018e14

00001628 <storage_configure()>:

MTPStorage_SD storage;
MTPD    mtpd(&storage);

void storage_configure()
{
    1628:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    162c:	movs	r1, #11

MTPStorage_SD storage;
MTPD    mtpd(&storage);

void storage_configure()
{
    162e:	sub	sp, #76	; 0x4c
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    1630:	ldr	r0, [pc, #472]	; (180c <storage_configure()+0x1e4>)
    1632:	ldr	r4, [pc, #476]	; (1810 <storage_configure()+0x1e8>)
    1634:	ldr	r6, [pc, #476]	; (1814 <storage_configure()+0x1ec>)
    1636:	ldr.w	fp, [pc, #528]	; 1848 <storage_configure()+0x220>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    163a:	ldr.w	r9, [pc, #504]	; 1834 <storage_configure()+0x20c>
    163e:	bl	7b28 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
    1642:	movs	r1, #12
    1644:	ldr	r0, [pc, #452]	; (180c <storage_configure()+0x1e4>)
    1646:	bl	7bcc <SPIClass::setMISO(unsigned char)>
    164a:	addw	r7, r4, #1164	; 0x48c
      SPI.setSCK(SD_SCK);
    164e:	movs	r1, #13
    1650:	ldr	r0, [pc, #440]	; (180c <storage_configure()+0x1e4>)
    1652:	bl	7c6c <SPIClass::setSCK(unsigned char)>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    1656:	mov	r0, r7
    1658:	mov.w	r1, #0
    165c:	bl	d0bc <SdioCard::begin(SdioConfig)>
    #endif

    for(int ii=0; ii<nsd; ii++)
    1660:	movs	r5, #0
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    1662:	str.w	r7, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    1666:	cbz	r7, 1674 <storage_configure()+0x4c>
    1668:	mov	r0, r7
    166a:	bl	c81c <SdioCard::errorCode() const>
    166e:	cmp	r0, #0
    1670:	beq.w	1b28 <storage_configure()+0x500>
    { 
      #if defined(BUILTIN_SDCARD)
        if(cs[ii] == BUILTIN_SDCARD)
        {
          if(!sdx[ii].sdfs.begin(SdioConfig(FIFO_SDIO))) 
          { Serial.printf("SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
    1674:	ldr	r3, [r6, #0]
    1676:	str	r3, [sp, #0]
    1678:	mov	r2, r5
    167a:	movs	r3, #254	; 0xfe
    167c:	ldr	r1, [pc, #408]	; (1818 <storage_configure()+0x1f0>)
    167e:	ldr	r0, [pc, #412]	; (181c <storage_configure()+0x1f4>)
    1680:	bl	137e0 <Print::printf(char const*, ...)>
    1684:	ldr	r0, [pc, #404]	; (181c <storage_configure()+0x1f4>)
    1686:	bl	137b0 <Print::println()>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    for(int ii=0; ii<nsd; ii++)
    168a:	adds	r5, #1
    168c:	cmp	r5, #2
    168e:	add.w	r6, r6, #4
    1692:	add.w	r4, r4, #1200	; 0x4b0
    1696:	bne.w	19c4 <storage_configure()+0x39c>
    169a:	ldr	r7, [pc, #388]	; (1820 <storage_configure()+0x1f8>)
    169c:	ldr	r4, [pc, #388]	; (1824 <storage_configure()+0x1fc>)
    169e:	ldr	r6, [pc, #392]	; (1828 <storage_configure()+0x200>)
    16a0:	movs	r5, #0
    16a2:	mov	r8, r7
	LittleFS_RAM() { }
	bool begin(uint32_t size) {
#if defined(__IMXRT1062__)
		return begin(extmem_malloc(size), size);
#else
		return begin(malloc(size), size);
    16a4:	mov	r0, r8
    16a6:	bl	146ac <malloc>
#endif
	}
	bool begin(void *ptr, uint32_t size) {
		//Serial.println("configure "); delay(5);
		configured = false;
    16aa:	movs	r7, #0
		if (!ptr) return false;
    16ac:	str	r0, [sp, #8]
		return begin(malloc(size), size);
#endif
	}
	bool begin(void *ptr, uint32_t size) {
		//Serial.println("configure "); delay(5);
		configured = false;
    16ae:	strb	r7, [r4, #4]
		if (!ptr) return false;
    16b0:	cmp	r0, #0
    16b2:	beq.w	1858 <storage_configure()+0x230>
		memset(ptr, 0xFF, size); // always start with blank slate
    16b6:	mov	r2, r8
    16b8:	movs	r1, #255	; 0xff
    16ba:	add.w	r9, r4, #8
    16be:	bl	14e3c <memset>
    16c2:	add.w	sl, r4, #128	; 0x80
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
    16c6:	mov	r1, r7
    16c8:	movs	r2, #120	; 0x78
    16ca:	mov	r0, r9
    16cc:	bl	14e3c <memset>
		memset(&config, 0, sizeof(config));
    16d0:	mov	r1, r7
    16d2:	movs	r2, #72	; 0x48
    16d4:	mov	r0, sl
    16d6:	bl	14e3c <memset>
		config.context = ptr;
    16da:	ldr	r3, [sp, #8]
		config.read = &static_read;
		config.prog = &static_prog;
    16dc:	ldr.w	lr, [pc, #364]	; 184c <storage_configure()+0x224>
		if (!ptr) return false;
		memset(ptr, 0xFF, size); // always start with blank slate
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
    16e0:	str.w	r3, [r4, #128]	; 0x80
		config.erase = &static_erase;
		config.sync = &static_sync;
		config.read_size = 64;
		config.prog_size = 64;
		config.block_size = 256;
		config.block_count = size / 256;
    16e4:	mov.w	r2, r8, lsr #8
    16e8:	str.w	r2, [r4, #160]	; 0xa0
		memset(ptr, 0xFF, size); // always start with blank slate
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
    16ec:	ldr	r3, [pc, #316]	; (182c <storage_configure()+0x204>)
		config.prog = &static_prog;
		config.erase = &static_erase;
		config.sync = &static_sync;
    16ee:	ldr	r2, [pc, #320]	; (1830 <storage_configure()+0x208>)
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
		config.prog = &static_prog;
		config.erase = &static_erase;
    16f0:	ldr.w	ip, [pc, #348]	; 1850 <storage_configure()+0x228>
		memset(ptr, 0xFF, size); // always start with blank slate
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
    16f4:	str.w	r3, [r4, #132]	; 0x84
		config.block_count = size / 256;
		config.block_cycles = 50;
		config.cache_size = 64;
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
		config.file_max = 0;
    16f8:	str.w	r7, [r4, #192]	; 0xc0
		config.context = ptr;
		config.read = &static_read;
		config.prog = &static_prog;
		config.erase = &static_erase;
		config.sync = &static_sync;
		config.read_size = 64;
    16fc:	movs	r3, #64	; 0x40
		config.block_cycles = 50;
		config.cache_size = 64;
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
		config.file_max = 0;
		config.attr_max = 0;
    16fe:	str.w	r7, [r4, #196]	; 0xc4
		size = size & 0xFFFFFF00;
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
		config.prog = &static_prog;
    1702:	str.w	lr, [r4, #136]	; 0x88
		config.erase = &static_erase;
		config.sync = &static_sync;
    1706:	str.w	r2, [r4, #144]	; 0x90
		config.read_size = 64;
		config.prog_size = 64;
		config.block_size = 256;
    170a:	mov.w	lr, #256	; 0x100
		config.block_count = size / 256;
		config.block_cycles = 50;
		config.cache_size = 64;
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
    170e:	movs	r2, #39	; 0x27
		config.file_max = 0;
		config.attr_max = 0;
		configured = true;
    1710:	mov.w	fp, #1
		config.sync = &static_sync;
		config.read_size = 64;
		config.prog_size = 64;
		config.block_size = 256;
		config.block_count = size / 256;
		config.block_cycles = 50;
    1714:	movs	r7, #50	; 0x32
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
		config.file_max = 0;
		config.attr_max = 0;
		configured = true;
		if (lfs_format(&lfs, &config) < 0) return false;
    1716:	mov	r1, sl
    1718:	mov	r0, r9
		memset(&lfs, 0, sizeof(lfs));
		memset(&config, 0, sizeof(config));
		config.context = ptr;
		config.read = &static_read;
		config.prog = &static_prog;
		config.erase = &static_erase;
    171a:	str.w	ip, [r4, #140]	; 0x8c
		config.sync = &static_sync;
		config.read_size = 64;
    171e:	str.w	r3, [r4, #148]	; 0x94
		config.prog_size = 64;
    1722:	str.w	r3, [r4, #152]	; 0x98
		config.block_size = 256;
		config.block_count = size / 256;
		config.block_cycles = 50;
		config.cache_size = 64;
    1726:	str.w	r3, [r4, #168]	; 0xa8
		config.lookahead_size = 64;
    172a:	str.w	r3, [r4, #172]	; 0xac
		config.prog = &static_prog;
		config.erase = &static_erase;
		config.sync = &static_sync;
		config.read_size = 64;
		config.prog_size = 64;
		config.block_size = 256;
    172e:	str.w	lr, [r4, #156]	; 0x9c
		config.block_count = size / 256;
		config.block_cycles = 50;
    1732:	str.w	r7, [r4, #164]	; 0xa4
		config.cache_size = 64;
		config.lookahead_size = 64;
		config.name_max = LFS_NAME_MAX;
    1736:	str.w	r2, [r4, #188]	; 0xbc
		config.file_max = 0;
		config.attr_max = 0;
		configured = true;
    173a:	strb.w	fp, [r4, #4]
		if (lfs_format(&lfs, &config) < 0) return false;
    173e:	bl	11a3c <lfs_format>
    1742:	cmp	r0, #0
    1744:	blt.w	1858 <storage_configure()+0x230>
		//Serial.println("formatted");
		if (lfs_mount(&lfs, &config) < 0) return false;
    1748:	mov	r1, sl
    174a:	mov	r0, r9
    174c:	bl	f960 <lfs_mount>
    1750:	cmp	r0, #0
    1752:	blt.w	1858 <storage_configure()+0x230>
    1756:	ldr	r2, [pc, #220]	; (1834 <storage_configure()+0x20c>)
		//Serial.println("mounted atfer format");
		mounted = true;
    1758:	strb.w	fp, [r4, #5]
    175c:	ldr	r3, [r2, #4]
    175e:	cmp	r3, #19
    1760:	bgt.n	1770 <storage_configure()+0x148>
        sd_name[fsCount] = name;
    1762:	add.w	r7, r2, r3, lsl #2
    1766:	ldr	r0, [r6, #0]
    1768:	str	r0, [r7, #8]
        sdx[fsCount++] = &fs;
    176a:	add	r3, fp
    176c:	str	r4, [r7, #88]	; 0x58
    176e:	str	r3, [r2, #4]
      { Serial.printf("Ram Storage %d %s failed or missing",ii,lfs_ram_str[ii]); Serial.println();
      }
      else
      {
        storage.addFilesystem(ramfs[ii], lfs_ram_str[ii]);
        uint64_t totalSize = ramfs[ii].totalSize();
    1770:	ldr	r3, [r4, #0]
    1772:	ldr	r7, [pc, #196]	; (1838 <storage_configure()+0x210>)
    1774:	ldr	r2, [r3, #28]
    1776:	cmp	r2, r7
    1778:	bne.w	1abe <storage_configure()+0x496>
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
		return config.block_count * config.block_size;
    177c:	ldr.w	r2, [r4, #160]	; 0xa0
        uint64_t usedSize  = ramfs[ii].usedSize();
    1780:	ldr	r3, [r3, #24]
    1782:	ldr.w	r1, [r4, #156]	; 0x9c
    1786:	ldr	r0, [pc, #180]	; (183c <storage_configure()+0x214>)
    1788:	mul.w	sl, r1, r2
    178c:	cmp	r3, r0
    178e:	mov.w	r2, #0
    1792:	str	r2, [sp, #8]
    1794:	bne.w	1ab2 <storage_configure()+0x48a>
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
    1798:	mov	r0, r9
    179a:	bl	11ba0 <lfs_fs_size>
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    179e:	cmp	r0, #0
    17a0:	blt.w	1bfc <storage_configure()+0x5d4>
    17a4:	ldr.w	r3, [r4, #160]	; 0xa0
    17a8:	cmp	r3, r0
    17aa:	bcc.w	1bfc <storage_configure()+0x5d4>
		return blocks * config.block_size;
    17ae:	ldr.w	r7, [r4, #156]	; 0x9c
    17b2:	ldr	r3, [r6, #0]
    17b4:	mul.w	r7, r7, r0
    17b8:	mov.w	fp, #0
        Serial.printf("RAM Storage %d %s ",ii,lfs_ram_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    17bc:	ldr	r1, [pc, #128]	; (1840 <storage_configure()+0x218>)
    17be:	ldr	r0, [pc, #92]	; (181c <storage_configure()+0x1f4>)
    17c0:	mov	r2, r5
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    17c2:	mov.w	r9, #0
    17c6:	mov.w	r8, #10
    17ca:	bl	137e0 <Print::printf(char const*, ...)>
    17ce:	mov	r2, sl
    17d0:	ldr	r3, [sp, #8]
    17d2:	ldr	r0, [pc, #72]	; (181c <storage_configure()+0x1f4>)
    17d4:	stmia.w	sp, {r8, r9}
    17d8:	bl	137fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    17dc:	movs	r1, #1
    17de:	ldr	r0, [pc, #100]	; (1844 <storage_configure()+0x21c>)
    17e0:	bl	11df8 <usb_serial_write>
    17e4:	mov	r2, r7
    17e6:	mov	r3, fp
    17e8:	stmia.w	sp, {r8, r9}
    17ec:	ldr	r0, [pc, #44]	; (181c <storage_configure()+0x1f4>)
    17ee:	bl	137fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
      }
    }
    #endif

    #if USE_LFS_RAM==1
    for(int ii=0; ii<nfs_ram;ii++)
    17f2:	adds	r5, #1
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    17f4:	ldr	r0, [pc, #36]	; (181c <storage_configure()+0x1f4>)
    17f6:	bl	137b0 <Print::println()>
    17fa:	cmp	r5, #2
    17fc:	add.w	r4, r4, #200	; 0xc8
    1800:	add.w	r6, r6, #4
    1804:	beq.n	1878 <storage_configure()+0x250>
    1806:	ldr.w	r8, [pc, #76]	; 1854 <storage_configure()+0x22c>
    180a:	b.n	16a4 <storage_configure()+0x7c>
    180c:	.word	0x1fff09a0
    1810:	.word	0x1fff1500
    1814:	.word	0x1fff0990
    1818:	.word	0x00019174
    181c:	.word	0x1fff0b20
    1820:	.word	0x001e8480
    1824:	.word	0x1fff1e60
    1828:	.word	0x1fff0974
    182c:	.word	0x000006a1
    1830:	.word	0x00000619
    1834:	.word	0x1fff20b8
    1838:	.word	0x000005fd
    183c:	.word	0x000010c5
    1840:	.word	0x00019118
    1844:	.word	0x000193d8
    1848:	.word	0x01f78a40
    184c:	.word	0x00000689
    1850:	.word	0x00000671
    1854:	.word	0x003d0900
    {
      if(!ramfs[ii].begin(lfs_ram_size[ii])) 
      { Serial.printf("Ram Storage %d %s failed or missing",ii,lfs_ram_str[ii]); Serial.println();
    1858:	ldr	r3, [r6, #0]
    185a:	ldr	r1, [pc, #644]	; (1ae0 <storage_configure()+0x4b8>)
    185c:	ldr	r0, [pc, #644]	; (1ae4 <storage_configure()+0x4bc>)
    185e:	mov	r2, r5
    1860:	bl	137e0 <Print::printf(char const*, ...)>
      }
    }
    #endif

    #if USE_LFS_RAM==1
    for(int ii=0; ii<nfs_ram;ii++)
    1864:	adds	r5, #1
    {
      if(!ramfs[ii].begin(lfs_ram_size[ii])) 
      { Serial.printf("Ram Storage %d %s failed or missing",ii,lfs_ram_str[ii]); Serial.println();
    1866:	ldr	r0, [pc, #636]	; (1ae4 <storage_configure()+0x4bc>)
    1868:	bl	137b0 <Print::println()>
      }
    }
    #endif

    #if USE_LFS_RAM==1
    for(int ii=0; ii<nfs_ram;ii++)
    186c:	cmp	r5, #2
    186e:	add.w	r4, r4, #200	; 0xc8
    1872:	add.w	r6, r6, #4
    1876:	bne.n	1806 <storage_configure()+0x1de>

    #if USE_LFS_PROGM==1
    for(int ii=0; ii<nfs_progm;ii++)
    {
      if(!progmfs[ii].begin(lfs_progm_size[ii])) 
      { Serial.printf("Program Storage %d %s failed or missing",ii,lfs_progm_str[ii]); Serial.println();
    1878:	ldr	r3, [pc, #620]	; (1ae8 <storage_configure()+0x4c0>)
    187a:	ldr	r2, [pc, #624]	; (1aec <storage_configure()+0x4c4>)
    187c:	ldr	r1, [pc, #624]	; (1af0 <storage_configure()+0x4c8>)
    187e:	ldr	r3, [r3, #0]
    1880:	str	r2, [sp, #8]
    1882:	ldr	r0, [pc, #608]	; (1ae4 <storage_configure()+0x4bc>)
    1884:	ldr	r4, [pc, #620]	; (1af4 <storage_configure()+0x4cc>)
    1886:	ldr.w	sl, [pc, #664]	; 1b20 <storage_configure()+0x4f8>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    188a:	ldr.w	fp, [pc, #664]	; 1b24 <storage_configure()+0x4fc>
    188e:	movs	r2, #0
    1890:	bl	137e0 <Print::printf(char const*, ...)>
    1894:	ldr	r0, [pc, #588]	; (1ae4 <storage_configure()+0x4bc>)
    1896:	bl	137b0 <Print::println()>

    #if USE_LFS_QSPI==1
    for(int ii=0; ii<nfs_qspi;ii++)
    {
      if(!qspifs[ii].begin()) 
      { Serial.printf("QSPI Storage %d %s failed or missing",ii,lfs_qspi_str[ii]); Serial.println();
    189a:	ldr	r3, [pc, #604]	; (1af8 <storage_configure()+0x4d0>)
    189c:	ldr	r1, [pc, #604]	; (1afc <storage_configure()+0x4d4>)
    189e:	ldr	r3, [r3, #0]
    18a0:	ldr	r0, [pc, #576]	; (1ae4 <storage_configure()+0x4bc>)
    18a2:	movs	r2, #0
    18a4:	mov.w	r8, #3
    18a8:	bl	137e0 <Print::printf(char const*, ...)>
    18ac:	mov	r7, r8
    18ae:	ldr	r0, [pc, #564]	; (1ae4 <storage_configure()+0x4bc>)
    18b0:	bl	137b0 <Print::println()>
    #endif

    #if USE_LFS_SPI==1
    for(int ii=0; ii<nfs_spi;ii++)
    {
      if(!spifs[ii].begin(lfs_cs[ii])) 
    18b4:	ldr	r2, [pc, #584]	; (1b00 <storage_configure()+0x4d8>)
    18b6:	uxtb	r1, r7
    18b8:	mov	r0, r4

    #if USE_LFS_QSPI==1
    for(int ii=0; ii<nfs_qspi;ii++)
    {
      if(!qspifs[ii].begin()) 
      { Serial.printf("QSPI Storage %d %s failed or missing",ii,lfs_qspi_str[ii]); Serial.println();
    18ba:	movs	r6, #0
    #endif

    #if USE_LFS_SPI==1
    for(int ii=0; ii<nfs_spi;ii++)
    {
      if(!spifs[ii].begin(lfs_cs[ii])) 
    18bc:	bl	d840 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)>
    18c0:	cmp	r0, #0
    18c2:	beq.n	1998 <storage_configure()+0x370>
    18c4:	ldr.w	r3, [fp, #4]
      { Serial.printf("SPIFlash Storage %d %d %s failed or missing",ii,lfs_cs[ii],lfs_spi_str[ii]); Serial.println();
      }
      else
      {
        storage.addFilesystem(spifs[ii], lfs_spi_str[ii]);
    18c8:	ldr.w	r2, [sl]
    18cc:	cmp	r3, #19
    18ce:	bgt.n	18de <storage_configure()+0x2b6>
        sd_name[fsCount] = name;
    18d0:	add.w	r0, fp, r3, lsl #2
        sdx[fsCount++] = &fs;
    18d4:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
    18d6:	str	r2, [r0, #8]
        sdx[fsCount++] = &fs;
    18d8:	str	r4, [r0, #88]	; 0x58
    18da:	str.w	r3, [fp, #4]
        uint64_t totalSize = spifs[ii].totalSize();
    18de:	ldr	r3, [r4, #0]
    18e0:	ldr	r0, [pc, #544]	; (1b04 <storage_configure()+0x4dc>)
    18e2:	ldr	r1, [r3, #28]
    18e4:	cmp	r1, r0
    18e6:	bne.w	1a68 <storage_configure()+0x440>
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    18ea:	ldrb	r5, [r4, #5]
        uint64_t usedSize  = spifs[ii].usedSize();
    18ec:	ldr	r3, [r3, #24]
    18ee:	cmp	r5, #0
    18f0:	beq.w	1a4c <storage_configure()+0x424>
		return config.block_count * config.block_size;
    18f4:	ldr.w	r2, [r4, #160]	; 0xa0
    18f8:	ldr.w	r5, [r4, #156]	; 0x9c
    18fc:	ldr	r1, [pc, #520]	; (1b08 <storage_configure()+0x4e0>)
    18fe:	mul.w	r5, r5, r2
    1902:	cmp	r3, r1
    1904:	mov.w	r2, #0
    1908:	str	r2, [sp, #16]
    190a:	bne.w	1a5a <storage_configure()+0x432>
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
    190e:	add.w	r0, r4, #8
    1912:	bl	11ba0 <lfs_fs_size>
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    1916:	cmp	r0, #0
    1918:	blt.w	1a8c <storage_configure()+0x464>
    191c:	ldr.w	r3, [r4, #160]	; 0xa0
    1920:	cmp	r3, r0
    1922:	bcc.w	1a8c <storage_configure()+0x464>
		return blocks * config.block_size;
    1926:	ldr.w	r3, [r4, #156]	; 0x9c
    192a:	ldr.w	r2, [sl]
    192e:	mul.w	r9, r3, r0
    1932:	movs	r3, #0
    1934:	str	r3, [sp, #28]
        Serial.printf("SPIFlash Storage %d %d %s ",ii,lfs_cs[ii],lfs_spi_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    1936:	mov	r3, r7
    1938:	ldr	r1, [pc, #464]	; (1b0c <storage_configure()+0x4e4>)
    193a:	str	r2, [sp, #0]
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    193c:	mov.w	r8, #0
    1940:	mov	r2, r6
    1942:	movs	r7, #10
    1944:	ldr	r0, [pc, #412]	; (1ae4 <storage_configure()+0x4bc>)
    1946:	bl	137e0 <Print::printf(char const*, ...)>
    194a:	mov	r2, r5
    194c:	ldr	r3, [sp, #16]
    194e:	ldr	r0, [pc, #404]	; (1ae4 <storage_configure()+0x4bc>)
    1950:	stmia.w	sp, {r7, r8}
    1954:	bl	137fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
    1958:	movs	r1, #1
    195a:	ldr	r0, [pc, #436]	; (1b10 <storage_configure()+0x4e8>)
    195c:	bl	11df8 <usb_serial_write>
    1960:	mov	r2, r9
    1962:	ldr	r3, [sp, #28]
    1964:	ldr	r0, [pc, #380]	; (1ae4 <storage_configure()+0x4bc>)
    1966:	stmia.w	sp, {r7, r8}
    196a:	bl	137fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
      }
    }
    #endif

    #if USE_LFS_SPI==1
    for(int ii=0; ii<nfs_spi;ii++)
    196e:	adds	r6, #1
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    1970:	ldr	r0, [pc, #368]	; (1ae4 <storage_configure()+0x4bc>)
    1972:	bl	137b0 <Print::println()>
    1976:	cmp	r6, #4
    1978:	add.w	r4, r4, #216	; 0xd8
    197c:	add.w	sl, sl, #4
    1980:	beq.n	19be <storage_configure()+0x396>
    1982:	ldr	r3, [sp, #8]
    {
      if(!spifs[ii].begin(lfs_cs[ii])) 
    1984:	ldr	r2, [pc, #376]	; (1b00 <storage_configure()+0x4d8>)
    1986:	ldr.w	r7, [r3, #4]!
    198a:	str	r3, [sp, #8]
    198c:	uxtb	r1, r7
    198e:	mov	r0, r4
    1990:	bl	d840 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)>
    1994:	cmp	r0, #0
    1996:	bne.n	18c4 <storage_configure()+0x29c>
      { Serial.printf("SPIFlash Storage %d %d %s failed or missing",ii,lfs_cs[ii],lfs_spi_str[ii]); Serial.println();
    1998:	ldr.w	r3, [sl]
    199c:	str	r3, [sp, #0]
    199e:	mov	r2, r6
    19a0:	mov	r3, r7
    19a2:	ldr	r1, [pc, #368]	; (1b14 <storage_configure()+0x4ec>)
    19a4:	ldr	r0, [pc, #316]	; (1ae4 <storage_configure()+0x4bc>)
    19a6:	bl	137e0 <Print::printf(char const*, ...)>
      }
    }
    #endif

    #if USE_LFS_SPI==1
    for(int ii=0; ii<nfs_spi;ii++)
    19aa:	adds	r6, #1
    {
      if(!spifs[ii].begin(lfs_cs[ii])) 
      { Serial.printf("SPIFlash Storage %d %d %s failed or missing",ii,lfs_cs[ii],lfs_spi_str[ii]); Serial.println();
    19ac:	ldr	r0, [pc, #308]	; (1ae4 <storage_configure()+0x4bc>)
    19ae:	bl	137b0 <Print::println()>
      }
    }
    #endif

    #if USE_LFS_SPI==1
    for(int ii=0; ii<nfs_spi;ii++)
    19b2:	cmp	r6, #4
    19b4:	add.w	r4, r4, #216	; 0xd8
    19b8:	add.w	sl, sl, #4
    19bc:	bne.n	1982 <storage_configure()+0x35a>
        uint64_t usedSize  = spifs[ii].usedSize();
        Serial.printf("SPIFlash Storage %d %d %s ",ii,lfs_cs[ii],lfs_spi_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
      }
    }
    #endif
}
    19be:	add	sp, #76	; 0x4c
    19c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19c4:	movs	r7, #10
          }
        }
        else if(cs[ii]<BUILTIN_SDCARD)
      #endif
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
    19c6:	uxtb.w	r8, r7
    19ca:	mov	r0, r8
    19cc:	movs	r1, #1
    19ce:	bl	125b0 <pinMode>
    19d2:	mov.w	lr, #0
    19d6:	strb.w	r8, [sp, #36]	; 0x24
    19da:	str.w	fp, [sp, #40]	; 0x28
    19de:	strb.w	lr, [sp, #37]	; 0x25
    19e2:	str.w	lr, [sp, #44]	; 0x2c
    19e6:	add	r3, sp, #36	; 0x24
    19e8:	ldmia.w	r3, {r0, r1, r2}
    19ec:	add	r3, sp, #48	; 0x30
    19ee:	stmia.w	r3, {r0, r1, r2}
    19f2:	strb.w	r8, [sp, #48]	; 0x30
    19f6:	strb.w	lr, [sp, #49]	; 0x31
    19fa:	str.w	lr, [sp, #56]	; 0x38
    19fe:	str.w	fp, [sp, #52]	; 0x34
    1a02:	ldmia.w	r3, {r0, r1, r2}
    1a06:	add	r3, sp, #60	; 0x3c
    1a08:	stmia.w	r3, {r0, r1, r2}
			}
			#endif
		}
	} else {
		if (val) {
			*portSetRegister(pin) = digitalPinToBitMask(pin);
    1a0c:	ldr	r2, [pc, #264]	; (1b18 <storage_configure()+0x4f0>)
    1a0e:	ldr.w	r2, [r2, r8, lsl #3]
    1a12:	movs	r1, #1
    1a14:	add.w	r8, r4, #1176	; 0x498
    1a18:	strb.w	r1, [r2, #128]	; 0x80
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    1a1c:	mov	r0, r8
    1a1e:	ldmia	r3, {r1, r2, r3}
    1a20:	bl	c05c <SdSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    1a24:	ldrb.w	r3, [r4, #1195]	; 0x4ab
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    1a28:	str.w	r8, [r4, #1160]	; 0x488
    1a2c:	adds	r0, r4, #4
    return m_card && !m_card->errorCode();
    1a2e:	cmp	r3, #0
    1a30:	beq.w	1c20 <storage_configure()+0x5f8>
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
    1a34:	ldr	r3, [r6, #0]
    1a36:	str	r3, [sp, #0]
    1a38:	mov	r2, r5
    1a3a:	mov	r3, r7
    1a3c:	ldr	r1, [pc, #220]	; (1b1c <storage_configure()+0x4f4>)
    1a3e:	ldr	r0, [pc, #164]	; (1ae4 <storage_configure()+0x4bc>)
    1a40:	bl	137e0 <Print::printf(char const*, ...)>
    1a44:	ldr	r0, [pc, #156]	; (1ae4 <storage_configure()+0x4bc>)
    1a46:	bl	137b0 <Print::println()>
    1a4a:	b.n	168a <storage_configure()+0x62>
    1a4c:	ldr	r1, [pc, #184]	; (1b08 <storage_configure()+0x4e0>)
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    1a4e:	str	r5, [sp, #16]
    1a50:	cmp	r3, r1
    1a52:	bne.n	1a5a <storage_configure()+0x432>
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
    1a54:	mov	r9, r5
    1a56:	str	r5, [sp, #28]
    1a58:	b.n	1936 <storage_configure()+0x30e>
      }
      else
      {
        storage.addFilesystem(spifs[ii], lfs_spi_str[ii]);
        uint64_t totalSize = spifs[ii].totalSize();
        uint64_t usedSize  = spifs[ii].usedSize();
    1a5a:	mov	r0, r4
    1a5c:	blx	r3
    1a5e:	ldr.w	r2, [sl]
    1a62:	str	r1, [sp, #28]
    1a64:	mov	r9, r0
    1a66:	b.n	1936 <storage_configure()+0x30e>
      { Serial.printf("SPIFlash Storage %d %d %s failed or missing",ii,lfs_cs[ii],lfs_spi_str[ii]); Serial.println();
      }
      else
      {
        storage.addFilesystem(spifs[ii], lfs_spi_str[ii]);
        uint64_t totalSize = spifs[ii].totalSize();
    1a68:	mov	r0, r4
    1a6a:	blx	r1
        uint64_t usedSize  = spifs[ii].usedSize();
    1a6c:	ldr	r3, [r4, #0]
    1a6e:	ldr	r2, [pc, #152]	; (1b08 <storage_configure()+0x4e0>)
    1a70:	ldr	r3, [r3, #24]
      { Serial.printf("SPIFlash Storage %d %d %s failed or missing",ii,lfs_cs[ii],lfs_spi_str[ii]); Serial.println();
      }
      else
      {
        storage.addFilesystem(spifs[ii], lfs_spi_str[ii]);
        uint64_t totalSize = spifs[ii].totalSize();
    1a72:	str	r1, [sp, #16]
    1a74:	cmp	r3, r2
    1a76:	mov	r5, r0
    1a78:	bne.n	1a5a <storage_configure()+0x432>
    1a7a:	ldrb	r0, [r4, #5]
    1a7c:	cmp	r0, #0
    1a7e:	bne.w	190e <storage_configure()+0x2e6>
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    1a82:	mov	r9, r0
    1a84:	str	r0, [sp, #28]
    1a86:	ldr.w	r2, [sl]
    1a8a:	b.n	1936 <storage_configure()+0x30e>
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    1a8c:	ldr	r3, [r4, #0]
    1a8e:	ldr	r2, [pc, #116]	; (1b04 <storage_configure()+0x4dc>)
    1a90:	ldr	r3, [r3, #28]
    1a92:	cmp	r3, r2
    1a94:	bne.n	1a5a <storage_configure()+0x432>
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    1a96:	ldrb	r0, [r4, #5]
    1a98:	cmp	r0, #0
    1a9a:	beq.n	1a82 <storage_configure()+0x45a>
		return config.block_count * config.block_size;
    1a9c:	ldr.w	r3, [r4, #160]	; 0xa0
    1aa0:	ldr.w	r0, [r4, #156]	; 0x9c
    1aa4:	ldr.w	r2, [sl]
    1aa8:	mul.w	r9, r0, r3
    1aac:	movs	r3, #0
    1aae:	str	r3, [sp, #28]
    1ab0:	b.n	1936 <storage_configure()+0x30e>
      }
      else
      {
        storage.addFilesystem(ramfs[ii], lfs_ram_str[ii]);
        uint64_t totalSize = ramfs[ii].totalSize();
        uint64_t usedSize  = ramfs[ii].usedSize();
    1ab2:	mov	r0, r4
    1ab4:	blx	r3
    1ab6:	ldr	r3, [r6, #0]
    1ab8:	mov	r7, r0
    1aba:	mov	fp, r1
    1abc:	b.n	17bc <storage_configure()+0x194>
      { Serial.printf("Ram Storage %d %s failed or missing",ii,lfs_ram_str[ii]); Serial.println();
      }
      else
      {
        storage.addFilesystem(ramfs[ii], lfs_ram_str[ii]);
        uint64_t totalSize = ramfs[ii].totalSize();
    1abe:	mov	r0, r4
    1ac0:	blx	r2
        uint64_t usedSize  = ramfs[ii].usedSize();
    1ac2:	ldr	r3, [r4, #0]
    1ac4:	ldr	r2, [pc, #64]	; (1b08 <storage_configure()+0x4e0>)
    1ac6:	ldr	r3, [r3, #24]
      { Serial.printf("Ram Storage %d %s failed or missing",ii,lfs_ram_str[ii]); Serial.println();
      }
      else
      {
        storage.addFilesystem(ramfs[ii], lfs_ram_str[ii]);
        uint64_t totalSize = ramfs[ii].totalSize();
    1ac8:	str	r1, [sp, #8]
    1aca:	cmp	r3, r2
    1acc:	mov	sl, r0
    1ace:	bne.n	1ab2 <storage_configure()+0x48a>
	}
	bool rmdir(const char *filepath) {
		return remove(filepath);
	}
	uint64_t usedSize() {
		if (!mounted) return 0;
    1ad0:	ldrb	r0, [r4, #5]
    1ad2:	cmp	r0, #0
    1ad4:	bne.w	1798 <storage_configure()+0x170>
    1ad8:	mov	r7, r0
    1ada:	mov	fp, r0
    1adc:	ldr	r3, [r6, #0]
    1ade:	b.n	17bc <storage_configure()+0x194>
    1ae0:	.word	0x0001919c
    1ae4:	.word	0x1fff0b20
    1ae8:	.word	0x1fff0998
    1aec:	.word	0x00018ff4
    1af0:	.word	0x000190c8
    1af4:	.word	0x1fff2298
    1af8:	.word	0x1fff098c
    1afc:	.word	0x000190f0
    1b00:	.word	0x1fff09a0
    1b04:	.word	0x000005fd
    1b08:	.word	0x000010c5
    1b0c:	.word	0x00019158
    1b10:	.word	0x000193d8
    1b14:	.word	0x0001912c
    1b18:	.word	0x00019890
    1b1c:	.word	0x00019088
    1b20:	.word	0x1fff097c
    1b24:	.word	0x1fff20b8
    1b28:	add.w	r8, r4, #4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1b2c:	mov	r0, r8
    1b2e:	ldr.w	r1, [r4, #1160]	; 0x488
    1b32:	bl	bd00 <FsVolume::begin(BlockDeviceInterface*)>
    1b36:	cmp	r0, #0
    1b38:	beq.w	1674 <storage_configure()+0x4c>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    1b3c:	ldr.w	r3, [r9, #4]
    1b40:	cmp	r3, #19
    1b42:	bgt.n	1b54 <storage_configure()+0x52c>
        sd_name[fsCount] = name;
    1b44:	add.w	r1, r9, r3, lsl #2
    1b48:	ldr	r0, [r6, #0]
    1b4a:	str	r0, [r1, #8]
        sdx[fsCount++] = &fs;
    1b4c:	adds	r3, #1
    1b4e:	str	r4, [r1, #88]	; 0x58
    1b50:	str.w	r3, [r9, #4]
          { Serial.printf("SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
          }
          else
          {
            storage.addFilesystem(sdx[ii], sd_str[ii]);
            uint64_t totalSize = sdx[ii].totalSize();
    1b54:	ldr	r1, [r4, #0]
    1b56:	ldr	r2, [pc, #564]	; (1d8c <storage_configure()+0x764>)
    1b58:	ldr	r3, [r1, #28]
    1b5a:	cmp	r3, r2
    1b5c:	bne.w	1d1a <storage_configure()+0x6f2>
    1b60:	ldr.w	r0, [r4, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1b64:	cmp	r0, #0
    1b66:	beq.w	1d3a <storage_configure()+0x712>
    1b6a:	ldrb	r7, [r0, #6]
    1b6c:	ldr	r2, [r0, #28]
    1b6e:	mov.w	r3, #512	; 0x200
    1b72:	lsls	r3, r7
    1b74:	subs	r2, #1
    1b76:	uxth	r3, r3
    1b78:	umull	r2, r3, r3, r2
  uint8_t bytesPerClusterShift() {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    1b7c:	strd	r2, r3, [sp, #8]
            uint64_t usedSize  = sdx[ii].usedSize();
    1b80:	ldr	r3, [r1, #24]
    1b82:	ldr	r2, [pc, #524]	; (1d90 <storage_configure()+0x768>)
    1b84:	cmp	r3, r2
    1b86:	bne.w	1d10 <storage_configure()+0x6e8>
    1b8a:	ldr.w	r0, [r4, #1148]	; 0x47c
    1b8e:	cmp	r0, #0
    1b90:	beq.w	1d52 <storage_configure()+0x72a>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    1b94:	ldr	r7, [r0, #28]
    1b96:	subs	r7, #1
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    1b98:	bl	af0c <FatPartition::freeClusterCount()>
    1b9c:	ldr.w	r3, [r4, #1148]	; 0x47c
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    1ba0:	subs	r7, r7, r0
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1ba2:	cmp	r3, #0
    1ba4:	beq.w	1d26 <storage_configure()+0x6fe>
    1ba8:	ldrb	r2, [r3, #6]
    1baa:	mov.w	r3, #512	; 0x200
    1bae:	lsls	r3, r2
    1bb0:	uxth	r3, r3
    1bb2:	umull	r2, r3, r3, r7
  uint8_t bytesPerClusterShift() {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    1bb6:	strd	r2, r3, [sp, #16]
            Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    1bba:	ldr	r3, [r6, #0]
    1bbc:	ldr	r1, [pc, #468]	; (1d94 <storage_configure()+0x76c>)
    1bbe:	str	r3, [sp, #0]
    1bc0:	mov	r2, r5
    1bc2:	movs	r3, #254	; 0xfe
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    1bc4:	mov.w	r8, #0
    1bc8:	movs	r7, #10
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].totalSize();
          uint64_t usedSize  = sdx[ii].usedSize();
          Serial.printf("SD Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    1bca:	ldr	r0, [pc, #460]	; (1d98 <storage_configure()+0x770>)
    1bcc:	bl	137e0 <Print::printf(char const*, ...)>
    1bd0:	ldrd	r2, r3, [sp, #8]
    1bd4:	stmia.w	sp, {r7, r8}
    1bd8:	ldr	r0, [pc, #444]	; (1d98 <storage_configure()+0x770>)
    1bda:	bl	137fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
    1bde:	movs	r1, #1
    1be0:	ldr	r0, [pc, #440]	; (1d9c <storage_configure()+0x774>)
    1be2:	bl	11df8 <usb_serial_write>
    1be6:	stmia.w	sp, {r7, r8}
    1bea:	ldrd	r2, r3, [sp, #16]
    1bee:	ldr	r0, [pc, #424]	; (1d98 <storage_configure()+0x770>)
    1bf0:	bl	137fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    1bf4:	ldr	r0, [pc, #416]	; (1d98 <storage_configure()+0x770>)
    1bf6:	bl	137b0 <Print::println()>
    1bfa:	b.n	168a <storage_configure()+0x62>
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
    1bfc:	ldr	r3, [r4, #0]
    1bfe:	ldr	r3, [r3, #28]
    1c00:	cmp	r3, r7
    1c02:	bne.w	1ab2 <storage_configure()+0x48a>
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    1c06:	ldrb	r7, [r4, #5]
    1c08:	cmp	r7, #0
    1c0a:	beq.n	1cc8 <storage_configure()+0x6a0>
		return config.block_count * config.block_size;
    1c0c:	ldr.w	r2, [r4, #160]	; 0xa0
    1c10:	ldr.w	r7, [r4, #156]	; 0x9c
    1c14:	ldr	r3, [r6, #0]
    1c16:	mul.w	r7, r7, r2
    1c1a:	mov.w	fp, #0
    1c1e:	b.n	17bc <storage_configure()+0x194>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
    1c20:	mov	r1, r8
    1c22:	bl	bd00 <FsVolume::begin(BlockDeviceInterface*)>
    1c26:	cmp	r0, #0
    1c28:	beq.w	1a34 <storage_configure()+0x40c>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    1c2c:	ldr.w	r3, [r9, #4]
    1c30:	cmp	r3, #19
    1c32:	bgt.n	1c44 <storage_configure()+0x61c>
        sd_name[fsCount] = name;
    1c34:	add.w	r1, r9, r3, lsl #2
    1c38:	ldr	r0, [r6, #0]
    1c3a:	str	r0, [r1, #8]
        sdx[fsCount++] = &fs;
    1c3c:	adds	r3, #1
    1c3e:	str	r4, [r1, #88]	; 0x58
    1c40:	str.w	r3, [r9, #4]
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].totalSize();
    1c44:	ldr	r1, [r4, #0]
    1c46:	ldr	r2, [pc, #324]	; (1d8c <storage_configure()+0x764>)
    1c48:	ldr	r3, [r1, #28]
    1c4a:	cmp	r3, r2
    1c4c:	bne.n	1cb2 <storage_configure()+0x68a>
    1c4e:	ldr.w	r0, [r4, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1c52:	cmp	r0, #0
    1c54:	beq.n	1ce4 <storage_configure()+0x6bc>
    1c56:	ldrb.w	lr, [r0, #6]
    1c5a:	ldr	r2, [r0, #28]
    1c5c:	mov.w	r3, #512	; 0x200
    1c60:	lsl.w	r3, r3, lr
    1c64:	subs	r2, #1
    1c66:	uxth	r3, r3
    1c68:	umull	r2, r3, r3, r2
    1c6c:	strd	r2, r3, [sp, #8]
          uint64_t usedSize  = sdx[ii].usedSize();
    1c70:	ldr	r3, [r1, #24]
    1c72:	ldr	r2, [pc, #284]	; (1d90 <storage_configure()+0x768>)
    1c74:	cmp	r3, r2
    1c76:	bne.n	1cbe <storage_configure()+0x696>
    1c78:	ldr.w	r0, [r4, #1148]	; 0x47c
    1c7c:	cmp	r0, #0
    1c7e:	beq.n	1cfe <storage_configure()+0x6d6>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    1c80:	ldr	r3, [r0, #28]
    1c82:	add.w	r8, r3, #4294967295
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    1c86:	bl	af0c <FatPartition::freeClusterCount()>
    1c8a:	ldr.w	r3, [r4, #1148]	; 0x47c
    1c8e:	rsb	r8, r0, r8
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1c92:	cbz	r3, 1cce <storage_configure()+0x6a6>
    1c94:	ldrb	r2, [r3, #6]
    1c96:	mov.w	r3, #512	; 0x200
    1c9a:	lsls	r3, r2
    1c9c:	uxth	r3, r3
    1c9e:	umull	r2, r3, r3, r8
  uint8_t bytesPerClusterShift() {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    1ca2:	strd	r2, r3, [sp, #16]
          Serial.printf("SD Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    1ca6:	ldr	r3, [r6, #0]
    1ca8:	str	r3, [sp, #0]
    1caa:	mov	r2, r5
    1cac:	mov	r3, r7
    1cae:	ldr	r1, [pc, #240]	; (1da0 <storage_configure()+0x778>)
    1cb0:	b.n	1bc4 <storage_configure()+0x59c>
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].totalSize();
    1cb2:	mov	r0, r4
    1cb4:	blx	r3
    1cb6:	strd	r0, r1, [sp, #8]
    1cba:	ldr	r1, [r4, #0]
    1cbc:	b.n	1c70 <storage_configure()+0x648>
          uint64_t usedSize  = sdx[ii].usedSize();
    1cbe:	mov	r0, r4
    1cc0:	blx	r3
    1cc2:	strd	r0, r1, [sp, #16]
    1cc6:	b.n	1ca6 <storage_configure()+0x67e>
		int blocks = lfs_fs_size(&lfs);
		if (blocks < 0 || (lfs_size_t)blocks > config.block_count) return totalSize();
		return blocks * config.block_size;
	}
	uint64_t totalSize() {
		if (!mounted) return 0;
    1cc8:	mov	fp, r7
    1cca:	ldr	r3, [r6, #0]
    1ccc:	b.n	17bc <storage_configure()+0x194>
    1cce:	ldr.w	r3, [r4, #1152]	; 0x480
    1cd2:	cmp	r3, #0
    1cd4:	beq.n	1d64 <storage_configure()+0x73c>
    1cd6:	ldr.w	r3, [r3, #1076]	; 0x434
    1cda:	umull	r2, r3, r8, r3
    1cde:	strd	r2, r3, [sp, #16]
    1ce2:	b.n	1ca6 <storage_configure()+0x67e>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1ce4:	ldr.w	r3, [r4, #1152]	; 0x480
    1ce8:	cmp	r3, #0
    1cea:	beq.n	1d6e <storage_configure()+0x746>
    1cec:	ldr.w	r2, [r3, #1064]	; 0x428
    1cf0:	ldr.w	r3, [r3, #1076]	; 0x434
    1cf4:	umull	r2, r3, r3, r2
    1cf8:	strd	r2, r3, [sp, #8]
    1cfc:	b.n	1c70 <storage_configure()+0x648>
    1cfe:	ldr.w	r3, [r4, #1152]	; 0x480
    1d02:	cbz	r3, 1d64 <storage_configure()+0x73c>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1d04:	mov	r0, r3
    1d06:	ldr.w	r8, [r3, #1064]	; 0x428
    1d0a:	bl	92d4 <ExFatPartition::freeClusterCount()>
    1d0e:	b.n	1c8a <storage_configure()+0x662>
          }
          else
          {
            storage.addFilesystem(sdx[ii], sd_str[ii]);
            uint64_t totalSize = sdx[ii].totalSize();
            uint64_t usedSize  = sdx[ii].usedSize();
    1d10:	mov	r0, r4
    1d12:	blx	r3
    1d14:	strd	r0, r1, [sp, #16]
    1d18:	b.n	1bba <storage_configure()+0x592>
          { Serial.printf("SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
          }
          else
          {
            storage.addFilesystem(sdx[ii], sd_str[ii]);
            uint64_t totalSize = sdx[ii].totalSize();
    1d1a:	mov	r0, r4
    1d1c:	blx	r3
    1d1e:	strd	r0, r1, [sp, #8]
    1d22:	ldr	r1, [r4, #0]
    1d24:	b.n	1b80 <storage_configure()+0x558>
    1d26:	ldr.w	r3, [r4, #1152]	; 0x480
   */
  bool begin(BlockDevice* blockDev);
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    1d2a:	cbz	r3, 1d78 <storage_configure()+0x750>
    1d2c:	ldr.w	r3, [r3, #1076]	; 0x434
    1d30:	umull	r2, r3, r7, r3
    1d34:	strd	r2, r3, [sp, #16]
    1d38:	b.n	1bba <storage_configure()+0x592>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1d3a:	ldr.w	r3, [r4, #1152]	; 0x480
    1d3e:	cbz	r3, 1d82 <storage_configure()+0x75a>
    1d40:	ldr.w	r2, [r3, #1064]	; 0x428
    1d44:	ldr.w	r3, [r3, #1076]	; 0x434
    1d48:	umull	r2, r3, r2, r3
    1d4c:	strd	r2, r3, [sp, #8]
    1d50:	b.n	1b80 <storage_configure()+0x558>
    1d52:	ldr.w	r3, [r4, #1152]	; 0x480
    1d56:	cbz	r3, 1d78 <storage_configure()+0x750>
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    1d58:	mov	r0, r3
    1d5a:	ldr.w	r7, [r3, #1064]	; 0x428
    1d5e:	bl	92d4 <ExFatPartition::freeClusterCount()>
    1d62:	b.n	1b9c <storage_configure()+0x574>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    1d64:	movs	r2, #0
    1d66:	movs	r3, #0
    1d68:	strd	r2, r3, [sp, #16]
    1d6c:	b.n	1ca6 <storage_configure()+0x67e>
    1d6e:	movs	r2, #0
    1d70:	movs	r3, #0
    1d72:	strd	r2, r3, [sp, #8]
    1d76:	b.n	1c70 <storage_configure()+0x648>
    1d78:	movs	r2, #0
    1d7a:	movs	r3, #0
    1d7c:	strd	r2, r3, [sp, #16]
    1d80:	b.n	1bba <storage_configure()+0x592>
    1d82:	movs	r2, #0
    1d84:	movs	r3, #0
    1d86:	strd	r2, r3, [sp, #8]
    1d8a:	b.n	1b80 <storage_configure()+0x558>
    1d8c:	.word	0x00001069
    1d90:	.word	0x00000fad
    1d94:	.word	0x00019070
    1d98:	.word	0x1fff0b20
    1d9c:	.word	0x000193d8
    1da0:	.word	0x000190b0

00001da4 <setup>:
    *time = FS_TIME(hour(), minute(), second());
    *ms10 = second() & 1 ? 100 : 0;
  }

void setup()
{ 
    1da4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1da8:	ldr	r1, [pc, #652]	; (2038 <setup+0x294>)
    1daa:	ldr	r0, [pc, #656]	; (203c <setup+0x298>)
    1dac:	ldr	r5, [pc, #656]	; (2040 <setup+0x29c>)
    1dae:	ldr	r4, [pc, #660]	; (2044 <setup+0x2a0>)
    1db0:	subw	sp, sp, #1060	; 0x424
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1db4:	ldrb	r3, [r1, #0]
    1db6:	cmp	r3, #0
    1db8:	beq.n	1db4 <setup+0x10>
    1dba:	ldrb	r3, [r0, #0]
    1dbc:	lsls	r3, r3, #31
    1dbe:	bpl.n	1db4 <setup+0x10>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1dc0:	ldr	r3, [r5, #0]
    1dc2:	ldr	r2, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1dc4:	subs	r3, r3, r2
    1dc6:	cmp	r3, #14
    1dc8:	bls.n	1db4 <setup+0x10>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1dca:	movs	r1, #8
    1dcc:	ldr	r0, [pc, #632]	; (2048 <setup+0x2a4>)
    1dce:	ldr.w	r9, [pc, #684]	; 207c <setup+0x2d8>
    1dd2:	bl	11df8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1dd6:	ldr	r0, [pc, #628]	; (204c <setup+0x2a8>)
    1dd8:	bl	137b0 <Print::println()>
  #else
    while(!Serial.available()); // comment if you do not want to wait for terminal (otherwise press any key to continue)
  #endif
  Serial.println("MTP_test");

  usb_init_events();
    1ddc:	bl	7578 <usb_init_events>

#if !__has_include("usb_mtp.h")
  usb_mtp_configure();
#endif
  storage_configure();
    1de0:	bl	1628 <storage_configure()>

  #if USE_SD==1
  // Set Time callback // needed for SDFat
  FsDateTime::callback = dateTime;
    1de4:	ldr	r3, [pc, #616]	; (2050 <setup+0x2ac>)
    1de6:	ldr.w	r6, [r9, #1148]	; 0x47c
    1dea:	ldr	r2, [pc, #616]	; (2054 <setup+0x2b0>)
    1dec:	str	r2, [r3, #0]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1dee:	cmp	r6, #0
    1df0:	beq.w	1fd0 <setup+0x22c>
    1df4:	add	r5, sp, #32
    1df6:	movs	r4, #0
    1df8:	mov	r1, r6
    1dfa:	mov	r0, r5
    1dfc:	mov	r3, r4
    1dfe:	ldr	r2, [pc, #600]	; (2058 <setup+0x2b4>)
    1e00:	strb	r4, [r5, #0]
    1e02:	strb	r4, [r5, #1]
    1e04:	strb	r4, [r5, #2]
    1e06:	bl	a28c <FatFile::open(FatVolume*, char const*, int)>

  {
    const char *str = "test1.txt";
    if(sdx[0].exists(str)) sdx[0].remove(str);
    1e0a:	cmp	r0, #0
    1e0c:	bne.w	1ff8 <setup+0x254>
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1e10:	movw	r3, #514	; 0x202
    1e14:	ldr	r2, [pc, #576]	; (2058 <setup+0x2b4>)
    1e16:	ldr	r1, [pc, #580]	; (205c <setup+0x2b8>)
    1e18:	mov	r0, r5
    1e1a:	bl	bdc4 <FsVolume::open(char const*, int)>
    1e1e:	ldr	r3, [r5, #72]	; 0x48
    1e20:	cmp	r3, #0
    1e22:	beq.w	23ec <setup+0x648>
		if (file) return File(new SDFile(file));
    1e26:	movs	r0, #104	; 0x68
    1e28:	bl	138cc <operator new(unsigned int)>
    1e2c:	mov	r7, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1e2e:	ldrb	r4, [r5, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1e30:	ldr	r3, [r5, #8]
    1e32:	ldrb	r2, [r5, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1e34:	ldr	r0, [pc, #552]	; (2060 <setup+0x2bc>)
    1e36:	ldr	r1, [pc, #556]	; (2064 <setup+0x2c0>)
    1e38:	strb	r4, [r7, #24]
{
  public:
	constexpr Print() : write_error(0) {}
    1e3a:	mov.w	r8, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1e3e:	mov.w	fp, #1000	; 0x3e8
    1e42:	add.w	sl, sp, #48	; 0x30
    1e46:	str	r0, [r7, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1e48:	str	r1, [r7, #20]
    1e4a:	str	r3, [r7, #28]
    1e4c:	strb.w	r2, [r7, #32]
    1e50:	add.w	r0, r7, #36	; 0x24
    1e54:	mov	r1, sl
    1e56:	strb.w	r8, [r7, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1e5a:	strb.w	r8, [r7, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1e5e:	str.w	r8, [r7, #16]
    1e62:	str.w	fp, [r7, #8]
    1e66:	bl	bb80 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1e6a:	ldr	r3, [r7, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1e6c:	ldr	r2, [pc, #504]	; (2068 <setup+0x2c4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1e6e:	ldr	r6, [pc, #508]	; (206c <setup+0x2c8>)
    1e70:	str.w	r8, [r7, #100]	; 0x64
    1e74:	add	r4, sp, #12
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1e76:	adds	r3, #1
    1e78:	str	r2, [r7, #20]
    1e7a:	str	r3, [r7, #16]
    1e7c:	str.w	fp, [r4, #8]
    1e80:	strb.w	r8, [r4, #4]
    1e84:	strb.w	r8, [r4, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    1e88:	str	r7, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1e8a:	str	r6, [r4, #0]
    1e8c:	ldr	r3, [pc, #480]	; (2070 <setup+0x2cc>)
    1e8e:	str	r3, [r5, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    1e90:	mov	r0, sl
    1e92:	bl	bbf8 <FsBaseFile::close()>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1e96:	movs	r2, #19
    1e98:	ldr	r1, [pc, #472]	; (2074 <setup+0x2d0>)
    1e9a:	mov	r0, r4
    1e9c:	bl	13784 <Print::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1ea0:	mov	r0, r4
    1ea2:	bl	137b0 <Print::println()>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1ea6:	ldr	r0, [r4, #16]
    1ea8:	cbz	r0, 1eb0 <setup+0x10c>
    1eaa:	ldr	r3, [r0, #0]
    1eac:	ldr	r3, [r3, #64]	; 0x40
    1eae:	blx	r3
    1eb0:	movs	r1, #23
    1eb2:	ldr	r0, [pc, #452]	; (2078 <setup+0x2d4>)
    1eb4:	bl	11df8 <usb_serial_write>
    1eb8:	ldr	r0, [pc, #400]	; (204c <setup+0x2a8>)
    1eba:	bl	137b0 <Print::println()>
    1ebe:	ldr.w	r2, [r9, #1148]	; 0x47c
    1ec2:	ldr	r3, [pc, #440]	; (207c <setup+0x2d8>)
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr) {
    return m_fVol ? m_fVol->ls(pr) :
           m_xVol ? m_xVol->ls(pr) : false;
    1ec4:	cmp	r2, #0
    1ec6:	beq.w	2356 <setup+0x5b2>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags = 0) {
    return m_vwd.ls(pr, flags);
    1eca:	movs	r3, #0
    1ecc:	addw	r0, r2, #1084	; 0x43c
    1ed0:	ldr	r1, [pc, #376]	; (204c <setup+0x2a8>)
    1ed2:	mov	r2, r3
    1ed4:	bl	ab98 <FatFile::ls(Print*, unsigned char, unsigned char)>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1ed8:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1eda:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1edc:	cbz	r2, 1ef0 <setup+0x14c>
    1ede:	ldr	r3, [r2, #16]
    1ee0:	subs	r3, #1
    1ee2:	str	r3, [r2, #16]
    1ee4:	cbnz	r3, 1ef0 <setup+0x14c>
    1ee6:	ldr	r0, [r4, #16]
    1ee8:	cbz	r0, 1ef0 <setup+0x14c>
    1eea:	ldr	r3, [r0, #0]
    1eec:	ldr	r3, [r3, #32]
    1eee:	blx	r3
    1ef0:	ldr.w	r9, [pc, #408]	; 208c <setup+0x2e8>
    sdx[0].sdfs.ls();
  }

  #endif
  #if USE_LFS_RAM==1
    for(int ii=0; ii<10;ii++)
    1ef4:	mov.w	r8, #0
    1ef8:	b.n	1fac <setup+0x208>
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
			}
		} else {
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
    1efa:	movs	r0, #84	; 0x54
    1efc:	bl	146ac <malloc>
			if (!file) return File();
    1f00:	mov	fp, r0
    1f02:	cmp	r0, #0
    1f04:	beq.n	1fbe <setup+0x21a>
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
    1f06:	mov	r1, r0
    1f08:	movw	r3, #259	; 0x103
    1f0c:	mov	r2, r5
    1f0e:	ldr	r0, [pc, #368]	; (2080 <setup+0x2dc>)
    1f10:	bl	11550 <lfs_file_open>
    1f14:	cmp	r0, #0
    1f16:	blt.n	1fbe <setup+0x21a>
				if (mode == FILE_WRITE) {
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
    1f18:	movs	r0, #164	; 0xa4
    1f1a:	bl	138cc <operator new(unsigned int)>
    1f1e:	mov	r7, r0
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
    1f20:	ldr	r3, [pc, #352]	; (2084 <setup+0x2e0>)
    1f22:	str	r3, [r7, #0]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1f24:	mov.w	sl, #0
    1f28:	mov.w	lr, #1000	; 0x3e8
		lfs = lfsin;
    1f2c:	ldr	r3, [pc, #336]	; (2080 <setup+0x2dc>)
    1f2e:	str.w	lr, [r7, #8]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
    1f32:	movs	r2, #128	; 0x80
    1f34:	adds	r0, #36	; 0x24
    1f36:	mov	r1, r5
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
    1f38:	str	r3, [r7, #20]
		file = filein;
    1f3a:	str.w	fp, [r7, #24]
    1f3e:	strb.w	sl, [r7, #4]
    1f42:	strb.w	sl, [r7, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1f46:	str.w	sl, [r7, #16]
		dir = nullptr;
    1f4a:	str.w	sl, [r7, #28]
    1f4e:	str.w	lr, [sp, #4]
		strlcpy(fullpath, name, sizeof(fullpath));
    1f52:	bl	15820 <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1f56:	ldr	r2, [r7, #16]
    1f58:	ldr.w	lr, [sp, #4]
    1f5c:	strb.w	sl, [r4, #4]
    1f60:	adds	r2, #1
    1f62:	str.w	lr, [r4, #8]
    1f66:	strb.w	sl, [r4, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    1f6a:	str	r7, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    1f6c:	str	r6, [r4, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1f6e:	str	r2, [r7, #16]
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1f70:	movs	r2, #19
    1f72:	ldr	r1, [pc, #256]	; (2074 <setup+0x2d0>)
    1f74:	mov	r0, r4
    1f76:	bl	13784 <Print::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1f7a:	mov	r0, r4
    1f7c:	bl	137b0 <Print::println()>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1f80:	ldr	r0, [r4, #16]
    1f82:	cbz	r0, 1fa2 <setup+0x1fe>
    1f84:	ldr	r3, [r0, #0]
    1f86:	ldr	r3, [r3, #64]	; 0x40
    1f88:	blx	r3
    1f8a:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1f8c:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1f8e:	cbz	r2, 1fa2 <setup+0x1fe>
    1f90:	ldr	r3, [r2, #16]
    1f92:	subs	r3, #1
    1f94:	str	r3, [r2, #16]
    1f96:	cbnz	r3, 1fa2 <setup+0x1fe>
    1f98:	ldr	r0, [r4, #16]
    1f9a:	cbz	r0, 1fa2 <setup+0x1fe>
    1f9c:	ldr	r3, [r0, #0]
    1f9e:	ldr	r3, [r3, #32]
    1fa0:	blx	r3
    1fa2:	add.w	r8, r8, #1
    1fa6:	cmp.w	r8, #10
    1faa:	beq.n	2026 <setup+0x282>
    { char filename[80];
      sprintf(filename,"/test_%d.txt",ii);
    1fac:	mov	r2, r8
    1fae:	ldr	r1, [pc, #216]	; (2088 <setup+0x2e4>)
    1fb0:	mov	r0, r5
    1fb2:	bl	152e4 <sprintf>
	}
	bool quickFormat();
	bool lowLevelFormat(char progressChar=0);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		//Serial.println("LittleFS open");
		if (!mounted) return File();
    1fb6:	ldrb.w	r3, [r9, #5]
    1fba:	cmp	r3, #0
    1fbc:	bne.n	1efa <setup+0x156>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1fbe:	movs	r3, #0
    1fc0:	mov.w	r2, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1fc4:	str	r6, [r4, #0]
    1fc6:	strb	r3, [r4, #4]
    1fc8:	strb	r3, [r4, #12]
    1fca:	str	r3, [r4, #16]
    1fcc:	str	r2, [r4, #8]
    1fce:	b.n	1f70 <setup+0x1cc>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1fd0:	ldr.w	r1, [r9, #1152]	; 0x480
    1fd4:	add	r5, sp, #32
    1fd6:	cmp	r1, #0
    1fd8:	beq.w	1e10 <setup+0x6c>
    1fdc:	mov	r3, r6
    1fde:	mov	r0, r5
    1fe0:	ldr	r2, [pc, #116]	; (2058 <setup+0x2b4>)
    1fe2:	strb.w	r6, [r5, #49]	; 0x31
    1fe6:	strb.w	r6, [r5, #50]	; 0x32
    1fea:	strb.w	r6, [r5, #51]	; 0x33
    1fee:	bl	8c28 <ExFatFile::open(ExFatVolume*, char const*, int)>
  // Set Time callback // needed for SDFat
  FsDateTime::callback = dateTime;

  {
    const char *str = "test1.txt";
    if(sdx[0].exists(str)) sdx[0].remove(str);
    1ff2:	cmp	r0, #0
    1ff4:	beq.w	1e10 <setup+0x6c>
    1ff8:	ldr.w	r4, [r9, #1148]	; 0x47c
    1ffc:	ldr	r3, [pc, #124]	; (207c <setup+0x2d8>)
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    1ffe:	cmp	r4, #0
    2000:	beq.w	23be <setup+0x61a>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2004:	mov	r1, r4
    2006:	movs	r3, #1
    2008:	movs	r4, #0
    200a:	ldr	r2, [pc, #76]	; (2058 <setup+0x2b4>)
    200c:	strb	r4, [r5, #0]
    200e:	mov	r0, r5
    2010:	strb	r4, [r5, #1]
    2012:	strb	r4, [r5, #2]
    2014:	bl	a28c <FatFile::open(FatVolume*, char const*, int)>
    2018:	cmp	r0, #0
    201a:	beq.w	1e10 <setup+0x6c>
    201e:	mov	r0, r5
    2020:	bl	b554 <FatFile::remove()>
    2024:	b.n	1e10 <setup+0x6c>
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
		return true;
	}
	bool mkdir(const char *filepath) {
		if (!mounted) return false;
    2026:	ldrb.w	r3, [r9, #5]
    202a:	cmp	r3, #0
    202c:	bne.w	23a2 <setup+0x5fe>
    sdx[0].sdfs.ls();
  }

  #endif
  #if USE_LFS_RAM==1
    for(int ii=0; ii<10;ii++)
    2030:	mov.w	r8, #0
    2034:	b.n	2142 <setup+0x39e>
    2036:	nop
    2038:	.word	0x1fff2c34
    203c:	.word	0x1fff2b2c
    2040:	.word	0x1fff2b30
    2044:	.word	0x1fff2cac
    2048:	.word	0x00019264
    204c:	.word	0x1fff0b20
    2050:	.word	0x1fff2acc
    2054:	.word	0x000006b9
    2058:	.word	0x000191c0
    205c:	.word	0x1fff1504
    2060:	.word	0x00018e74
    2064:	.word	0x00018da8
    2068:	.word	0x00018df0
    206c:	.word	0x00018e14
    2070:	.word	0x00018dcc
    2074:	.word	0x000191cc
    2078:	.word	0x000191e0
    207c:	.word	0x1fff1500
    2080:	.word	0x1fff1e68
    2084:	.word	0x00018efc
    2088:	.word	0x000191f8
    208c:	.word	0x1fff1e60
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
			}
		} else {
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
    2090:	movs	r0, #84	; 0x54
    2092:	bl	146ac <malloc>
			if (!file) return File();
    2096:	mov	fp, r0
    2098:	cmp	r0, #0
    209a:	beq.n	2154 <setup+0x3b0>
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
    209c:	mov	r1, r0
    209e:	movw	r3, #259	; 0x103
    20a2:	mov	r2, r5
    20a4:	ldr	r0, [pc, #712]	; (2370 <setup+0x5cc>)
    20a6:	bl	11550 <lfs_file_open>
    20aa:	cmp	r0, #0
    20ac:	blt.n	2154 <setup+0x3b0>
				if (mode == FILE_WRITE) {
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
    20ae:	movs	r0, #164	; 0xa4
    20b0:	bl	138cc <operator new(unsigned int)>
    20b4:	mov	r7, r0
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
    20b6:	ldr	r3, [pc, #700]	; (2374 <setup+0x5d0>)
    20b8:	str	r3, [r7, #0]
    20ba:	mov.w	sl, #0
    20be:	mov.w	lr, #1000	; 0x3e8
		lfs = lfsin;
    20c2:	ldr	r3, [pc, #684]	; (2370 <setup+0x5cc>)
    20c4:	str.w	lr, [r7, #8]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
    20c8:	movs	r2, #128	; 0x80
    20ca:	adds	r0, #36	; 0x24
    20cc:	mov	r1, r5
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
    20ce:	str	r3, [r7, #20]
		file = filein;
    20d0:	str.w	fp, [r7, #24]
    20d4:	strb.w	sl, [r7, #4]
    20d8:	strb.w	sl, [r7, #12]
    20dc:	str.w	sl, [r7, #16]
		dir = nullptr;
    20e0:	str.w	sl, [r7, #28]
    20e4:	str.w	lr, [sp, #4]
		strlcpy(fullpath, name, sizeof(fullpath));
    20e8:	bl	15820 <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    20ec:	ldr	r2, [r7, #16]
    20ee:	ldr.w	lr, [sp, #4]
    20f2:	strb.w	sl, [r4, #4]
    20f6:	adds	r2, #1
    20f8:	str.w	lr, [r4, #8]
    20fc:	strb.w	sl, [r4, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    2100:	str	r7, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    2102:	str	r6, [r4, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    2104:	str	r2, [r7, #16]
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2106:	movs	r2, #19
    2108:	ldr	r1, [pc, #620]	; (2378 <setup+0x5d4>)
    210a:	mov	r0, r4
    210c:	bl	13784 <Print::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2110:	mov	r0, r4
    2112:	bl	137b0 <Print::println()>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2116:	ldr	r0, [r4, #16]
    2118:	cbz	r0, 2138 <setup+0x394>
    211a:	ldr	r3, [r0, #0]
    211c:	ldr	r3, [r3, #64]	; 0x40
    211e:	blx	r3
    2120:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2122:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2124:	cbz	r2, 2138 <setup+0x394>
    2126:	ldr	r3, [r2, #16]
    2128:	subs	r3, #1
    212a:	str	r3, [r2, #16]
    212c:	cbnz	r3, 2138 <setup+0x394>
    212e:	ldr	r0, [r4, #16]
    2130:	cbz	r0, 2138 <setup+0x394>
    2132:	ldr	r3, [r0, #0]
    2134:	ldr	r3, [r3, #32]
    2136:	blx	r3
      File file=ramfs[0].open(filename,FILE_WRITE_BEGIN);
        file.println("This is a test line");
      file.close();
    }
    ramfs[0].mkdir("Dir0");
    for(int ii=0; ii<10;ii++)
    2138:	add.w	r8, r8, #1
    213c:	cmp.w	r8, #10
    2140:	beq.n	2166 <setup+0x3c2>
    { char filename[80];
      sprintf(filename,"/Dir0/test_%d.txt",ii);
    2142:	mov	r2, r8
    2144:	ldr	r1, [pc, #564]	; (237c <setup+0x5d8>)
    2146:	mov	r0, r5
    2148:	bl	152e4 <sprintf>
	}
	bool quickFormat();
	bool lowLevelFormat(char progressChar=0);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		//Serial.println("LittleFS open");
		if (!mounted) return File();
    214c:	ldrb.w	r3, [r9, #5]
    2150:	cmp	r3, #0
    2152:	bne.n	2090 <setup+0x2ec>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2154:	movs	r3, #0
    2156:	mov.w	r2, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    215a:	str	r6, [r4, #0]
    215c:	strb	r3, [r4, #4]
    215e:	strb	r3, [r4, #12]
    2160:	str	r3, [r4, #16]
    2162:	str	r2, [r4, #8]
    2164:	b.n	2106 <setup+0x362>
		struct lfs_info info;
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
		return true;
	}
	bool mkdir(const char *filepath) {
		if (!mounted) return false;
    2166:	ldrb.w	r3, [r9, #5]
    216a:	cmp	r3, #0
    216c:	bne.w	2398 <setup+0x5f4>
    sdx[0].sdfs.ls();
  }

  #endif
  #if USE_LFS_RAM==1
    for(int ii=0; ii<10;ii++)
    2170:	mov.w	r8, #0
    2174:	b.n	2228 <setup+0x484>
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
			}
		} else {
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
    2176:	movs	r0, #84	; 0x54
    2178:	bl	146ac <malloc>
			if (!file) return File();
    217c:	mov	fp, r0
    217e:	cmp	r0, #0
    2180:	beq.n	223a <setup+0x496>
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
    2182:	mov	r1, r0
    2184:	movw	r3, #259	; 0x103
    2188:	mov	r2, r5
    218a:	ldr	r0, [pc, #484]	; (2370 <setup+0x5cc>)
    218c:	bl	11550 <lfs_file_open>
    2190:	cmp	r0, #0
    2192:	blt.n	223a <setup+0x496>
				if (mode == FILE_WRITE) {
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
    2194:	movs	r0, #164	; 0xa4
    2196:	bl	138cc <operator new(unsigned int)>
    219a:	mov	r7, r0
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
    219c:	ldr	r3, [pc, #468]	; (2374 <setup+0x5d0>)
    219e:	str	r3, [r7, #0]
    21a0:	mov.w	sl, #0
    21a4:	mov.w	lr, #1000	; 0x3e8
		lfs = lfsin;
    21a8:	ldr	r3, [pc, #452]	; (2370 <setup+0x5cc>)
    21aa:	str.w	lr, [r7, #8]
		file = filein;
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
    21ae:	movs	r2, #128	; 0x80
    21b0:	adds	r0, #36	; 0x24
    21b2:	mov	r1, r5
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
    21b4:	str	r3, [r7, #20]
		file = filein;
    21b6:	str.w	fp, [r7, #24]
    21ba:	strb.w	sl, [r7, #4]
    21be:	strb.w	sl, [r7, #12]
    21c2:	str.w	sl, [r7, #16]
		dir = nullptr;
    21c6:	str.w	sl, [r7, #28]
    21ca:	str.w	lr, [sp, #4]
		strlcpy(fullpath, name, sizeof(fullpath));
    21ce:	bl	15820 <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    21d2:	ldr	r2, [r7, #16]
    21d4:	ldr.w	lr, [sp, #4]
    21d8:	strb.w	sl, [r4, #4]
    21dc:	adds	r2, #1
    21de:	str.w	lr, [r4, #8]
    21e2:	strb.w	sl, [r4, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    21e6:	str	r7, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    21e8:	str	r6, [r4, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    21ea:	str	r2, [r7, #16]
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    21ec:	movs	r2, #19
    21ee:	ldr	r1, [pc, #392]	; (2378 <setup+0x5d4>)
    21f0:	mov	r0, r4
    21f2:	bl	13784 <Print::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21f6:	mov	r0, r4
    21f8:	bl	137b0 <Print::println()>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    21fc:	ldr	r0, [r4, #16]
    21fe:	cbz	r0, 221e <setup+0x47a>
    2200:	ldr	r3, [r0, #0]
    2202:	ldr	r3, [r3, #64]	; 0x40
    2204:	blx	r3
    2206:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2208:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    220a:	cbz	r2, 221e <setup+0x47a>
    220c:	ldr	r3, [r2, #16]
    220e:	subs	r3, #1
    2210:	str	r3, [r2, #16]
    2212:	cbnz	r3, 221e <setup+0x47a>
    2214:	ldr	r0, [r4, #16]
    2216:	cbz	r0, 221e <setup+0x47a>
    2218:	ldr	r3, [r0, #0]
    221a:	ldr	r3, [r3, #32]
    221c:	blx	r3
      File file=ramfs[0].open(filename,FILE_WRITE_BEGIN);
        file.println("This is a test line");
      file.close();
    }
    ramfs[0].mkdir("Dir0/dir1");
    for(int ii=0; ii<10;ii++)
    221e:	add.w	r8, r8, #1
    2222:	cmp.w	r8, #10
    2226:	beq.n	224c <setup+0x4a8>
    { char filename[80];
      sprintf(filename,"/Dir0/dir1/test_%d.txt",ii);
    2228:	mov	r2, r8
    222a:	ldr	r1, [pc, #340]	; (2380 <setup+0x5dc>)
    222c:	mov	r0, r5
    222e:	bl	152e4 <sprintf>
	}
	bool quickFormat();
	bool lowLevelFormat(char progressChar=0);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		//Serial.println("LittleFS open");
		if (!mounted) return File();
    2232:	ldrb.w	r3, [r9, #5]
    2236:	cmp	r3, #0
    2238:	bne.n	2176 <setup+0x3d2>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    223a:	movs	r3, #0
    223c:	mov.w	r2, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    2240:	str	r6, [r4, #0]
    2242:	strb	r3, [r4, #4]
    2244:	strb	r3, [r4, #12]
    2246:	str	r3, [r4, #16]
    2248:	str	r2, [r4, #8]
    224a:	b.n	21ec <setup+0x448>
      File file=ramfs[0].open(filename,FILE_WRITE_BEGIN);
        file.println("This is a test line");
      file.close();
    }
    uint32_t buffer[256];
    File file = ramfs[1].open("LargeFile.bin",FILE_WRITE_BEGIN);
    224c:	ldr.w	r2, [r9, #200]	; 0xc8
    2250:	ldr	r3, [pc, #304]	; (2384 <setup+0x5e0>)
    2252:	ldr.w	r8, [r2]
    2256:	ldr	r7, [pc, #304]	; (2388 <setup+0x5e4>)
    2258:	cmp	r8, r3
    225a:	bne.w	23ac <setup+0x608>
    225e:	ldrb.w	r3, [r7, #205]	; 0xcd
    2262:	cmp	r3, #0
    2264:	beq.n	2342 <setup+0x59e>
					return File(new LittleFSFile(&lfs, dir, filepath));
				}
				free(dir);
			}
		} else {
			lfs_file_t *file = (lfs_file_t *)malloc(sizeof(lfs_file_t));
    2266:	movs	r0, #84	; 0x54
    2268:	bl	146ac <malloc>
			if (!file) return File();
    226c:	mov	r9, r0
    226e:	cmp	r0, #0
    2270:	beq.n	2342 <setup+0x59e>
			if (lfs_file_open(&lfs, file, filepath, LFS_O_RDWR | LFS_O_CREAT) >= 0) {
    2272:	add.w	r8, r7, #208	; 0xd0
    2276:	mov	r0, r8
    2278:	movw	r3, #259	; 0x103
    227c:	ldr	r2, [pc, #268]	; (238c <setup+0x5e8>)
    227e:	mov	r1, r9
    2280:	bl	11550 <lfs_file_open>
    2284:	cmp	r0, #0
    2286:	blt.n	2342 <setup+0x59e>
				if (mode == FILE_WRITE) {
					// FILE_WRITE opens at end of file
					lfs_file_seek(&lfs, file, 0, LFS_SEEK_END);
				} // else FILE_WRITE_BEGIN
				return File(new LittleFSFile(&lfs, file, filepath));
    2288:	movs	r0, #164	; 0xa4
    228a:	bl	138cc <operator new(unsigned int)>
    228e:	mov	r7, r0
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
    2290:	str.w	r8, [r0, #20]
private:
	// Classes derived from File are never meant to be constructed from
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
    2294:	ldr	r3, [pc, #220]	; (2374 <setup+0x5d0>)
    2296:	str	r3, [r7, #0]
    2298:	mov.w	r8, #0
    229c:	mov.w	sl, #1000	; 0x3e8
    22a0:	strb.w	r8, [r7, #4]
    22a4:	strb.w	r8, [r7, #12]
    22a8:	str.w	r8, [r7, #16]
		lfs = lfsin;
		file = filein;
		dir = nullptr;
    22ac:	str.w	r8, [r7, #28]
		strlcpy(fullpath, name, sizeof(fullpath));
    22b0:	ldr	r1, [pc, #216]	; (238c <setup+0x5e8>)
	// anywhere other than openNextFile() and open() in their parent FS
	// class.  Only the abstract File class which references these
	// derived classes is meant to have a public constructor!
	LittleFSFile(lfs_t *lfsin, lfs_file_t *filein, const char *name) {
		lfs = lfsin;
		file = filein;
    22b2:	str.w	r9, [r7, #24]
		dir = nullptr;
		strlcpy(fullpath, name, sizeof(fullpath));
    22b6:	adds	r0, #36	; 0x24
    22b8:	movs	r2, #128	; 0x80
    22ba:	str.w	sl, [r7, #8]
    22be:	bl	15820 <strlcpy>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    22c2:	ldr	r3, [r7, #16]
    22c4:	strb.w	r8, [r4, #4]
    22c8:	adds	r3, #1
    22ca:	strb.w	r8, [r4, #12]
    22ce:	str.w	sl, [r4, #8]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    22d2:	str	r7, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    22d4:	str	r6, [r4, #0]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    22d6:	str	r3, [r7, #16]
    22d8:	mov	r8, r7
    for(int ii=0;ii<3000;ii++)
    22da:	mov	r3, r5
    22dc:	movs	r7, #0
    22de:	mov	r5, r8
    22e0:	movw	r9, #3000	; 0xbb8
    22e4:	mov	r8, r3
    { memset(buffer,ii%256,1024);
    22e6:	uxtb	r1, r7
    22e8:	mov.w	r2, #1024	; 0x400
    22ec:	mov	r0, r8
        file.println("This is a test line");
      file.close();
    }
    uint32_t buffer[256];
    File file = ramfs[1].open("LargeFile.bin",FILE_WRITE_BEGIN);
    for(int ii=0;ii<3000;ii++)
    22ee:	adds	r7, #1
    { memset(buffer,ii%256,1024);
    22f0:	bl	14e3c <memset>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    22f4:	cbz	r5, 2306 <setup+0x562>
    22f6:	ldr	r3, [r5, #0]
    22f8:	mov	r0, r5
    22fa:	ldr	r3, [r3, #44]	; 0x2c
    22fc:	mov.w	r2, #1024	; 0x400
    2300:	mov	r1, r8
    2302:	blx	r3
    2304:	ldr	r5, [r4, #16]
        file.println("This is a test line");
      file.close();
    }
    uint32_t buffer[256];
    File file = ramfs[1].open("LargeFile.bin",FILE_WRITE_BEGIN);
    for(int ii=0;ii<3000;ii++)
    2306:	cmp	r7, r9
    2308:	bne.n	22e6 <setup+0x542>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    230a:	cbz	r5, 2314 <setup+0x570>
    230c:	ldr	r3, [r5, #0]
    230e:	mov	r0, r5
    2310:	ldr	r3, [r3, #64]	; 0x40
    2312:	blx	r3
    2314:	movs	r1, #11
    2316:	ldr	r0, [pc, #120]	; (2390 <setup+0x5ec>)
    2318:	bl	11df8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    231c:	ldr	r0, [pc, #116]	; (2394 <setup+0x5f0>)
    231e:	bl	137b0 <Print::println()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2322:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2324:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2326:	cbz	r2, 233a <setup+0x596>
    2328:	ldr	r3, [r2, #16]
    232a:	subs	r3, #1
    232c:	str	r3, [r2, #16]
    232e:	cbnz	r3, 233a <setup+0x596>
    2330:	ldr	r0, [r4, #16]
    2332:	cbz	r0, 233a <setup+0x596>
    2334:	ldr	r3, [r0, #0]
    2336:	ldr	r3, [r3, #32]
    2338:	blx	r3
    file.close();

  #endif

  Serial.println("\nSetup done");
}
    233a:	addw	sp, sp, #1060	; 0x424
    233e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2342:	movs	r3, #0
    2344:	mov.w	r2, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    2348:	str	r6, [r4, #0]
    234a:	strb	r3, [r4, #4]
    234c:	strb	r3, [r4, #12]
    234e:	str	r3, [r4, #16]
    2350:	mov	r8, r3
    2352:	str	r2, [r4, #8]
    2354:	b.n	22da <setup+0x536>
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr) {
    return m_fVol ? m_fVol->ls(pr) :
           m_xVol ? m_xVol->ls(pr) : false;
    2356:	ldr.w	r0, [r3, #1152]	; 0x480
    235a:	cmp	r0, #0
    235c:	beq.w	1ed8 <setup+0x134>
   * LS_R - Recursive list of subdirectories.
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags = 0) {
    return m_vwd.ls(pr, flags);
    2360:	mov	r3, r2
    2362:	ldr	r1, [pc, #48]	; (2394 <setup+0x5f0>)
    2364:	add.w	r0, r0, #1088	; 0x440
    2368:	bl	8cfc <ExFatFile::ls(Print*, unsigned char, unsigned char)>
    236c:	b.n	1ed8 <setup+0x134>
    236e:	nop
    2370:	.word	0x1fff1e68
    2374:	.word	0x00018efc
    2378:	.word	0x000191cc
    237c:	.word	0x00019210
    2380:	.word	0x00019230
    2384:	.word	0x00000b11
    2388:	.word	0x1fff1e60
    238c:	.word	0x00019248
    2390:	.word	0x00019258
    2394:	.word	0x1fff0b20
		if (lfs_stat(&lfs, filepath, &info) < 0) return false;
		return true;
	}
	bool mkdir(const char *filepath) {
		if (!mounted) return false;
		if (lfs_mkdir(&lfs, filepath) < 0) return false;
    2398:	ldr	r1, [pc, #112]	; (240c <setup+0x668>)
    239a:	ldr	r0, [pc, #116]	; (2410 <setup+0x66c>)
    239c:	bl	1107c <lfs_mkdir>
    23a0:	b.n	2170 <setup+0x3cc>
    23a2:	ldr	r1, [pc, #112]	; (2414 <setup+0x670>)
    23a4:	ldr	r0, [pc, #104]	; (2410 <setup+0x66c>)
    23a6:	bl	1107c <lfs_mkdir>
    23aa:	b.n	2030 <setup+0x28c>
      File file=ramfs[0].open(filename,FILE_WRITE_BEGIN);
        file.println("This is a test line");
      file.close();
    }
    uint32_t buffer[256];
    File file = ramfs[1].open("LargeFile.bin",FILE_WRITE_BEGIN);
    23ac:	add.w	r1, r7, #200	; 0xc8
    23b0:	movs	r3, #2
    23b2:	ldr	r2, [pc, #100]	; (2418 <setup+0x674>)
    23b4:	mov	r0, r4
    23b6:	blx	r8
    23b8:	ldr.w	r8, [r4, #16]
    23bc:	b.n	22da <setup+0x536>
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    23be:	ldr.w	r1, [r3, #1152]	; 0x480
    23c2:	cmp	r1, #0
    23c4:	beq.w	1e10 <setup+0x6c>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    23c8:	movs	r3, #1
    23ca:	ldr	r2, [pc, #80]	; (241c <setup+0x678>)
    23cc:	strb.w	r4, [r5, #49]	; 0x31
    23d0:	mov	r0, r5
    23d2:	strb.w	r4, [r5, #50]	; 0x32
    23d6:	strb.w	r4, [r5, #51]	; 0x33
    23da:	bl	8c28 <ExFatFile::open(ExFatVolume*, char const*, int)>
    23de:	cmp	r0, #0
    23e0:	beq.w	1e10 <setup+0x6c>
    23e4:	mov	r0, r5
    23e6:	bl	9480 <ExFatFile::remove()>
    23ea:	b.n	1e10 <setup+0x6c>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    23ec:	ldr	r3, [r5, #76]	; 0x4c
    23ee:	cmp	r3, #0
    23f0:	bne.w	1e26 <setup+0x82>
    23f4:	add	r4, sp, #12
    23f6:	mov.w	r2, #1000	; 0x3e8
    23fa:	ldr	r6, [pc, #36]	; (2420 <setup+0x67c>)
    23fc:	strb	r3, [r4, #4]
    23fe:	strb	r3, [r4, #12]
    2400:	str	r3, [r4, #16]
    2402:	str	r2, [r4, #8]
    2404:	str	r6, [r4, #0]
    2406:	add.w	sl, sp, #48	; 0x30
    240a:	b.n	1e8c <setup+0xe8>
    240c:	.word	0x00019224
    2410:	.word	0x1fff1e68
    2414:	.word	0x00019208
    2418:	.word	0x00019248
    241c:	.word	0x000191c0
    2420:	.word	0x00018e14

00002424 <loop>:

  Serial.println("\nSetup done");
}

void loop()
{ 
    2424:	push	{r4, lr}
  mtpd.loop();
    2426:	ldr	r0, [pc, #60]	; (2464 <loop+0x40>)
    2428:	bl	6f40 <MTPD::loop()>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    242c:	bl	11da4 <usb_serial_available>

#if USE_EVENTS==1
  if(Serial.available())
    2430:	cbnz	r0, 2434 <loop+0x10>
    2432:	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
    2434:	bl	11d2c <usb_serial_getchar>
  {
    char ch=Serial.read();
    2438:	uxtb	r4, r0
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    243a:	mov	r0, r4
    243c:	bl	11f00 <usb_serial_putchar>

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
    2440:	ldr	r0, [pc, #36]	; (2468 <loop+0x44>)
    2442:	bl	137b0 <Print::println()>
    Serial.println(ch);
    if(ch=='r') 
    2446:	cmp	r4, #114	; 0x72
    2448:	bne.n	2432 <loop+0xe>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    244a:	movs	r1, #5
    244c:	ldr	r0, [pc, #28]	; (246c <loop+0x48>)
    244e:	bl	11df8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2452:	ldr	r0, [pc, #20]	; (2468 <loop+0x44>)
    2454:	bl	137b0 <Print::println()>
    {
      Serial.println("Reset");
      mtpd.send_DeviceResetEvent();
    2458:	ldr	r0, [pc, #8]	; (2464 <loop+0x40>)
    }
  }
#endif
}
    245a:	ldmia.w	sp!, {r4, lr}
    char ch=Serial.read();
    Serial.println(ch);
    if(ch=='r') 
    {
      Serial.println("Reset");
      mtpd.send_DeviceResetEvent();
    245e:	b.w	7628 <MTPD::send_DeviceResetEvent()>
    2462:	nop
    2464:	.word	0x1fff2284
    2468:	.word	0x1fff0b20
    246c:	.word	0x00019270

00002470 <_GLOBAL__sub_I__Z17usb_mtp_configurev>:
    }
  }
#endif
}
    2470:	push	{r3, r4, r5, r6, r7, lr}


class SDClass : public FS
{
public:
	SDClass() { }
    2472:	ldr	r3, [pc, #316]	; (25b0 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x140>)
    2474:	ldr	r5, [pc, #316]	; (25b4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x144>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2476:	ldr	r1, [pc, #320]	; (25b8 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x148>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    2478:	ldr	r7, [pc, #320]	; (25bc <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x14c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    247a:	ldr	r6, [pc, #324]	; (25c0 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x150>)
    247c:	str	r5, [r3, #0]
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    247e:	movs	r4, #0
    2480:	str.w	r5, [r3, #1200]	; 0x4b0
    2484:	movs	r5, #40	; 0x28
    2486:	str.w	r1, [r3, #1164]	; 0x48c
    248a:	str.w	r1, [r3, #2364]	; 0x93c
    248e:	str.w	r7, [r3, #1176]	; 0x498
    2492:	str.w	r7, [r3, #2376]	; 0x948
    2496:	str.w	r6, [r3, #1184]	; 0x4a0
    249a:	str.w	r6, [r3, #2384]	; 0x950
    249e:	strb.w	r5, [r3, #1195]	; 0x4ab
    24a2:	strb.w	r5, [r3, #2395]	; 0x95b
    const char *sd_str[]={"sd1"}; // edit to reflect your configuration
    const int cs[] = {10}; // edit to reflect your configuration
  #endif
  const int nsd = sizeof(sd_str)/sizeof(const char *);

SDClass sdx[nsd];
    24a6:	ldr	r2, [pc, #284]	; (25c4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x154>)
    24a8:	str.w	r4, [r3, #1148]	; 0x47c
    24ac:	str.w	r4, [r3, #1152]	; 0x480
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    24b0:	strb.w	r4, [r3, #1172]	; 0x494
    24b4:	strb.w	r4, [r3, #1198]	; 0x4ae
    24b8:	str.w	r4, [r3, #2348]	; 0x92c
    24bc:	str.w	r4, [r3, #2352]	; 0x930
    24c0:	strb.w	r4, [r3, #2372]	; 0x944
    24c4:	strb.w	r4, [r3, #2398]	; 0x95e
    24c8:	ldr	r1, [pc, #252]	; (25c8 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x158>)


class LittleFS_RAM : public LittleFS
{
public:
	LittleFS_RAM() { }
    24ca:	ldr	r5, [pc, #256]	; (25cc <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x15c>)
#else
// TODO: implement for Teensy 3.x...
class LittleFS_Program : public LittleFS
{
public:
	LittleFS_Program() { }
    24cc:	ldr	r7, [pc, #256]	; (25d0 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x160>)
    24ce:	ldr	r6, [pc, #260]	; (25d4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x164>)
    24d0:	mov	r0, r4
    24d2:	bl	139b4 <__aeabi_atexit>

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    24d6:	ldr	r2, [pc, #256]	; (25d8 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x168>)
    24d8:	ldr	r0, [pc, #256]	; (25dc <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x16c>)
    24da:	ldr	r1, [pc, #260]	; (25e0 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x170>)
    24dc:	ldr	r3, [pc, #260]	; (25e4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x174>)
};
#else
class LittleFS_QSPIFlash : public LittleFS
{
public:
	LittleFS_QSPIFlash() { }
    24de:	ldr.w	lr, [pc, #284]	; 25fc <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x18c>

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    24e2:	strb	r4, [r2, #4]
		mounted = false;
    24e4:	strb	r4, [r2, #5]
		config.context = nullptr;
    24e6:	str.w	r4, [r2, #128]	; 0x80

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    24ea:	strb.w	r4, [r2, #204]	; 0xcc
		mounted = false;
    24ee:	strb.w	r4, [r2, #205]	; 0xcd
		config.context = nullptr;
    24f2:	str.w	r4, [r2, #328]	; 0x148


class LittleFS_RAM : public LittleFS
{
public:
	LittleFS_RAM() { }
    24f6:	str	r5, [r2, #0]
    24f8:	str.w	r5, [r2, #200]	; 0xc8

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    24fc:	strb	r4, [r0, #4]
		mounted = false;
    24fe:	strb	r4, [r0, #5]
		config.context = nullptr;
    2500:	str.w	r4, [r0, #128]	; 0x80
};
#else
class LittleFS_QSPIFlash : public LittleFS
{
public:
	LittleFS_QSPIFlash() { }
    2504:	str.w	lr, [r0]

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    2508:	strb	r4, [r1, #4]
		mounted = false;
    250a:	strb	r4, [r1, #5]
		config.context = nullptr;
    250c:	str.w	r4, [r1, #128]	; 0x80
#else
// TODO: implement for Teensy 3.x...
class LittleFS_Program : public LittleFS
{
public:
	LittleFS_Program() { }
    2510:	str	r7, [r1, #0]
    2512:	add.w	r2, r3, #864	; 0x360

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    2516:	strb	r4, [r3, #4]
		mounted = false;
    2518:	strb	r4, [r3, #5]
		config.context = nullptr;
    251a:	str.w	r4, [r3, #128]	; 0x80


class LittleFS_SPIFlash : public LittleFS
{
public:
	LittleFS_SPIFlash() {
    251e:	str	r6, [r3, #0]
		port = nullptr;
    2520:	str.w	r4, [r3, #200]	; 0xc8
    2524:	adds	r3, #216	; 0xd8
#if USE_LFS_SPI==1
  const char *lfs_spi_str[]={"nand1","nand2","nand3","nand4"}; // edit to reflect your configuration
  const int lfs_cs[] = {3,4,5,6}; // edit to reflect your configuration
  const int nfs_spi = sizeof(lfs_spi_str)/sizeof(const char *);

LittleFS_SPIFlash spifs[nfs_spi];
    2526:	cmp	r3, r2

class LittleFS : public FS
{
public:
	LittleFS() {
		configured = false;
    2528:	mov.w	r5, #0
    252c:	bne.n	2516 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0xa6>

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    252e:	ldr	r4, [pc, #184]	; (25e8 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x178>)

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    2530:	ldr	r6, [pc, #184]	; (25ec <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x17c>)
    2532:	ldr	r3, [pc, #188]	; (25f0 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x180>)
    2534:	str	r6, [r4, #0]
    2536:	mov.w	r6, #1000	; 0x3e8
    253a:	str.w	r3, [r4, #168]	; 0xa8
    253e:	str.w	r3, [r4, #188]	; 0xbc
    2542:	str.w	r3, [r4, #208]	; 0xd0
#endif


MTPStorage_SD storage;
    2546:	ldr	r2, [pc, #124]	; (25c4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x154>)
    2548:	ldr	r1, [pc, #168]	; (25f4 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x184>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    254a:	str	r5, [r4, #4]

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    254c:	mvn.w	r7, #1
    2550:	mov	r0, r4
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2552:	strb.w	r5, [r4, #172]	; 0xac
    2556:	strb.w	r5, [r4, #180]	; 0xb4
    255a:	str.w	r5, [r4, #184]	; 0xb8
    255e:	strb.w	r5, [r4, #192]	; 0xc0
    2562:	strb.w	r5, [r4, #200]	; 0xc8
    2566:	str.w	r5, [r4, #204]	; 0xcc
    256a:	strb.w	r5, [r4, #212]	; 0xd4
    256e:	strb.w	r5, [r4, #220]	; 0xdc
    2572:	str.w	r5, [r4, #224]	; 0xe0
    2576:	str.w	r6, [r4, #176]	; 0xb0
    257a:	str.w	r6, [r4, #196]	; 0xc4
    257e:	str.w	r6, [r4, #216]	; 0xd8
    2582:	str.w	r5, [r4, #228]	; 0xe4
    2586:	str.w	r5, [r4, #232]	; 0xe8
    258a:	str.w	r5, [r4, #236]	; 0xec
    258e:	str.w	r5, [r4, #244]	; 0xf4
    2592:	strb.w	r5, [r4, #248]	; 0xf8
    2596:	strb.w	r5, [r4, #249]	; 0xf9
    259a:	str.w	r7, [r4, #240]	; 0xf0
    259e:	bl	139b4 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    25a2:	ldr	r3, [pc, #84]	; (25f8 <_GLOBAL__sub_I__Z17usb_mtp_configurev+0x188>)
    25a4:	stmia.w	r3, {r4, r5}
    25a8:	strb	r5, [r3, #8]
    25aa:	str	r5, [r3, #12]
    25ac:	pop	{r3, r4, r5, r6, r7, pc}
    25ae:	nop
    25b0:	.word	0x1fff1500
    25b4:	.word	0x00018ed4
    25b8:	.word	0x0001961c
    25bc:	.word	0x000195c4
    25c0:	.word	0x38011001
    25c4:	.word	0x1fff0970
    25c8:	.word	0x0000061d
    25cc:	.word	0x00018f5c
    25d0:	.word	0x00018fd4
    25d4:	.word	0x00018f84
    25d8:	.word	0x1fff1e60
    25dc:	.word	0x1fff1ff0
    25e0:	.word	0x1fff21bc
    25e4:	.word	0x1fff2298
    25e8:	.word	0x1fff20b8
    25ec:	.word	0x000192cc
    25f0:	.word	0x00018e14
    25f4:	.word	0x00001555
    25f8:	.word	0x1fff2284
    25fc:	.word	0x00018fac

00002600 <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
    2600:	ldr	r3, [r0, #4]
    2602:	cmp	r3, #19
    2604:	bgt.n	2618 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x18>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    2606:	push	{r4}
    2608:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    260c:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSEMS) {
        sd_name[fsCount] = name;
    260e:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    2610:	str	r3, [r0, #4]
    2612:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    2614:	ldr.w	r4, [sp], #4
    2618:	bx	lr
    261a:	nop

0000261c <MTPStorage_SD::get_FSCount()>:
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void dumpIndexList(void);
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    261c:	ldr	r0, [r0, #4]
    261e:	bx	lr

00002620 <MTPStorage_SD::get_FSName(unsigned long)>:
        sdx[fsCount++] = &fs;
      }
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    2620:	add.w	r1, r0, r1, lsl #2
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void dumpIndexList(void);
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    2624:	ldr	r0, [r1, #8]
    2626:	bx	lr

00002628 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    2628:	movs	r0, #0
    262a:	bx	lr

0000262c <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    262c:	movs	r0, #1
    262e:	bx	lr

00002630 <MTPStorage_SD::totalSize(unsigned long)>:
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }

    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    2630:	add.w	r1, r0, r1, lsl #2
    2634:	ldr	r0, [r1, #88]	; 0x58
    2636:	ldr	r3, [r0, #0]
    2638:	ldr	r3, [r3, #28]
    263a:	bx	r3

0000263c <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    263c:	add.w	r1, r0, r1, lsl #2
    2640:	ldr	r0, [r1, #88]	; 0x58
    2642:	ldr	r3, [r0, #0]
    2644:	ldr	r3, [r3, #24]
    2646:	bx	r3

00002648 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2648:	ldr.w	r0, [r0, #204]	; 0xcc
    264c:	cmp	r0, #0
    264e:	beq.n	26b6 <MTPStorage_SD::write(char const*, unsigned long)+0x6e>
    #endif
    return ret;
  }

  size_t MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    2650:	push	{r4, r5, r6}
    2652:	ldr	r4, [r0, #0]
    2654:	ldr	r3, [pc, #108]	; (26c4 <MTPStorage_SD::write(char const*, unsigned long)+0x7c>)
    2656:	ldr	r4, [r4, #44]	; 0x2c
    2658:	cmp	r4, r3
    265a:	bne.n	26b0 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    265c:	ldr	r0, [r0, #16]
    265e:	cbz	r0, 26aa <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    2660:	ldr	r4, [r0, #0]
    2662:	ldr	r4, [r4, #44]	; 0x2c
    2664:	cmp	r4, r3
    2666:	bne.n	26b0 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    2668:	ldr	r0, [r0, #16]
    266a:	cbz	r0, 26aa <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    266c:	ldr	r4, [r0, #0]
    266e:	ldr	r4, [r4, #44]	; 0x2c
    2670:	cmp	r4, r3
    2672:	bne.n	26b0 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    2674:	ldr	r0, [r0, #16]
    2676:	cbz	r0, 26aa <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    2678:	ldr	r4, [r0, #0]
    267a:	ldr	r4, [r4, #44]	; 0x2c
    267c:	cmp	r4, r3
    267e:	bne.n	26b0 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    2680:	ldr	r0, [r0, #16]
    2682:	cbz	r0, 26aa <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    2684:	mov	r6, r2
    2686:	ldr	r2, [r0, #0]
    2688:	ldr	r4, [r2, #44]	; 0x2c
    268a:	cmp	r4, r3
    268c:	mov	r5, r1
    268e:	bne.n	26ba <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    2690:	ldr	r0, [r0, #16]
    2692:	cbz	r0, 26aa <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    2694:	ldr	r2, [r0, #0]
    2696:	ldr	r4, [r2, #44]	; 0x2c
    2698:	cmp	r4, r3
    269a:	bne.n	26ba <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    269c:	ldr	r0, [r0, #16]
    269e:	cbz	r0, 26aa <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    26a0:	ldr	r3, [r0, #0]
    26a2:	mov	r2, r6
    26a4:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    26a6:	pop	{r4, r5, r6}
    26a8:	bx	r3
    26aa:	movs	r0, #0
    26ac:	pop	{r4, r5, r6}
    26ae:	bx	lr
    26b0:	mov	r3, r4
    26b2:	pop	{r4, r5, r6}
    26b4:	bx	r3
    26b6:	movs	r0, #0
    26b8:	bx	lr
    26ba:	mov	r2, r6
    26bc:	mov	r1, r5
    26be:	mov	r3, r4
    26c0:	pop	{r4, r5, r6}
    26c2:	bx	r3
    26c4:	.word	0x00000489

000026c8 <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    26c8:	push	{r4, lr}
    26ca:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    26cc:	ldr.w	r0, [r0, #184]	; 0xb8
    26d0:	cmp	r0, #0
    26d2:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    26d4:	ldr	r3, [r0, #0]
    26d6:	ldr	r2, [pc, #256]	; (27d8 <MTPStorage_SD::CloseIndex()+0x110>)
    26d8:	ldr	r3, [r3, #68]	; 0x44
    26da:	cmp	r3, r2
    26dc:	bne.n	27c0 <MTPStorage_SD::CloseIndex()+0xf8>
    26de:	ldr	r0, [r0, #16]
    26e0:	cmp	r0, #0
    26e2:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    26e4:	ldr	r2, [r0, #0]
    26e6:	ldr	r2, [r2, #68]	; 0x44
    26e8:	cmp	r2, r3
    26ea:	bne.n	27d2 <MTPStorage_SD::CloseIndex()+0x10a>
    26ec:	ldr	r0, [r0, #16]
    26ee:	cmp	r0, #0
    26f0:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    26f2:	ldr	r3, [r0, #0]
    26f4:	ldr	r3, [r3, #68]	; 0x44
    26f6:	cmp	r3, r2
    26f8:	bne.n	27c0 <MTPStorage_SD::CloseIndex()+0xf8>
    26fa:	ldr	r0, [r0, #16]
    26fc:	cmp	r0, #0
    26fe:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    2700:	ldr	r2, [r0, #0]
    2702:	ldr	r2, [r2, #68]	; 0x44
    2704:	cmp	r2, r3
    2706:	bne.n	27d2 <MTPStorage_SD::CloseIndex()+0x10a>
    2708:	ldr	r0, [r0, #16]
    270a:	cmp	r0, #0
    270c:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    270e:	ldr	r3, [r0, #0]
    2710:	ldr	r3, [r3, #68]	; 0x44
    2712:	cmp	r3, r2
    2714:	bne.n	27c0 <MTPStorage_SD::CloseIndex()+0xf8>
    2716:	ldr	r0, [r0, #16]
    2718:	cmp	r0, #0
    271a:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    271c:	ldr	r3, [r0, #0]
    271e:	ldr	r3, [r3, #68]	; 0x44
    2720:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    2722:	cmp	r0, #0
    2724:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2726:	ldr.w	r0, [r4, #184]	; 0xb8
    272a:	cmp	r0, #0
    272c:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    272e:	ldr	r2, [r0, #0]
    2730:	ldr	r3, [pc, #168]	; (27dc <MTPStorage_SD::CloseIndex()+0x114>)
    2732:	ldr	r2, [r2, #64]	; 0x40
    2734:	cmp	r2, r3
    2736:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    2738:	ldr	r0, [r0, #16]
    273a:	cmp	r0, #0
    273c:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    273e:	ldr	r2, [r0, #0]
    2740:	ldr	r2, [r2, #64]	; 0x40
    2742:	cmp	r2, r3
    2744:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    2746:	ldr	r0, [r0, #16]
    2748:	cmp	r0, #0
    274a:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    274c:	ldr	r2, [r0, #0]
    274e:	ldr	r2, [r2, #64]	; 0x40
    2750:	cmp	r2, r3
    2752:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    2754:	ldr	r0, [r0, #16]
    2756:	cmp	r0, #0
    2758:	beq.n	27b4 <MTPStorage_SD::CloseIndex()+0xec>
    275a:	ldr	r2, [r0, #0]
    275c:	ldr	r2, [r2, #64]	; 0x40
    275e:	cmp	r2, r3
    2760:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    2762:	ldr	r0, [r0, #16]
    2764:	cbz	r0, 27b4 <MTPStorage_SD::CloseIndex()+0xec>
    2766:	ldr	r2, [r0, #0]
    2768:	ldr	r2, [r2, #64]	; 0x40
    276a:	cmp	r2, r3
    276c:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    276e:	ldr	r0, [r0, #16]
    2770:	cbz	r0, 27b4 <MTPStorage_SD::CloseIndex()+0xec>
    2772:	ldr	r2, [r0, #0]
    2774:	ldr	r2, [r2, #64]	; 0x40
    2776:	cmp	r2, r3
    2778:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    277a:	ldr	r0, [r0, #16]
    277c:	cbz	r0, 27b4 <MTPStorage_SD::CloseIndex()+0xec>
    277e:	ldr	r2, [r0, #0]
    2780:	ldr	r2, [r2, #64]	; 0x40
    2782:	cmp	r2, r3
    2784:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    2786:	ldr	r0, [r0, #16]
    2788:	cbz	r0, 27b4 <MTPStorage_SD::CloseIndex()+0xec>
    278a:	ldr	r2, [r0, #0]
    278c:	ldr	r2, [r2, #64]	; 0x40
    278e:	cmp	r2, r3
    2790:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    2792:	ldr	r0, [r0, #16]
    2794:	cbz	r0, 27b4 <MTPStorage_SD::CloseIndex()+0xec>
    2796:	ldr	r2, [r0, #0]
    2798:	ldr	r2, [r2, #64]	; 0x40
    279a:	cmp	r2, r3
    279c:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    279e:	ldr	r0, [r0, #16]
    27a0:	cbz	r0, 27b4 <MTPStorage_SD::CloseIndex()+0xec>
    27a2:	ldr	r2, [r0, #0]
    27a4:	ldr	r2, [r2, #64]	; 0x40
    27a6:	cmp	r2, r3
    27a8:	bne.n	27c4 <MTPStorage_SD::CloseIndex()+0xfc>
    27aa:	ldr	r0, [r0, #16]
    27ac:	cbz	r0, 27b4 <MTPStorage_SD::CloseIndex()+0xec>
    27ae:	ldr	r3, [r0, #0]
    27b0:	ldr	r3, [r3, #64]	; 0x40
    27b2:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    27b4:	movs	r3, #0
    27b6:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    27ba:	str.w	r3, [r4, #244]	; 0xf4
    27be:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    27c0:	blx	r3
    27c2:	b.n	2722 <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    27c4:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    27c6:	movs	r3, #0
    27c8:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    27cc:	str.w	r3, [r4, #244]	; 0xf4
    27d0:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    27d2:	blx	r2
    27d4:	b.n	2722 <MTPStorage_SD::CloseIndex()+0x5a>
    27d6:	nop
    27d8:	.word	0x0000050d
    27dc:	.word	0x00000501

000027e0 <File::invalidate() [clone .isra.0]>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    27e0:	ldr	r2, [r0, #0]
    27e2:	cmp	r2, #0
    27e4:	beq.n	2860 <File::invalidate() [clone .isra.0]+0x80>
    27e6:	ldr	r3, [r2, #16]
    27e8:	subs	r3, #1
    27ea:	str	r3, [r2, #16]
    27ec:	cmp	r3, #0
    27ee:	bne.n	2860 <File::invalidate() [clone .isra.0]+0x80>
	}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
    27f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (f && --(f->refcount) == 0) delete f;
    27f4:	ldr	r4, [r0, #0]
    27f6:	cmp	r4, #0
    27f8:	beq.n	2862 <File::invalidate() [clone .isra.0]+0x82>
    27fa:	ldr	r3, [r4, #0]
    27fc:	ldr	r1, [pc, #120]	; (2878 <File::invalidate() [clone .isra.0]+0x98>)
    27fe:	ldr	r3, [r3, #32]
    2800:	cmp	r3, r1
    2802:	bne.n	2866 <File::invalidate() [clone .isra.0]+0x86>
    2804:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2806:	ldr	r6, [pc, #116]	; (287c <File::invalidate() [clone .isra.0]+0x9c>)
    2808:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    280a:	cbz	r2, 2854 <File::invalidate() [clone .isra.0]+0x74>
    280c:	ldr	r3, [r2, #16]
    280e:	subs	r3, #1
    2810:	str	r3, [r2, #16]
    2812:	cbnz	r3, 2854 <File::invalidate() [clone .isra.0]+0x74>
    2814:	ldr	r5, [r4, #16]
    2816:	cbz	r5, 2854 <File::invalidate() [clone .isra.0]+0x74>
    2818:	ldr	r3, [r5, #0]
    281a:	ldr	r3, [r3, #32]
    281c:	cmp	r3, r1
    281e:	bne.n	286e <File::invalidate() [clone .isra.0]+0x8e>
    2820:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2822:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2824:	cbz	r2, 284c <File::invalidate() [clone .isra.0]+0x6c>
    2826:	ldr	r3, [r2, #16]
    2828:	subs	r3, #1
    282a:	str	r3, [r2, #16]
    282c:	cbnz	r3, 284c <File::invalidate() [clone .isra.0]+0x6c>
    282e:	ldr	r7, [r5, #16]
    2830:	cbz	r7, 284c <File::invalidate() [clone .isra.0]+0x6c>
    2832:	ldr	r3, [r7, #0]
    2834:	ldr	r3, [r3, #32]
    2836:	cmp	r3, r1
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2838:	mov	r0, r7
    283a:	bne.n	2874 <File::invalidate() [clone .isra.0]+0x94>
    283c:	str.w	r6, [r0], #16
		invalidate();
    2840:	bl	27e0 <File::invalidate() [clone .isra.0]>
	}
    2844:	mov	r0, r7
    2846:	movs	r1, #20
    2848:	bl	138d0 <operator delete(void*, unsigned int)>
    284c:	mov	r0, r5
    284e:	movs	r1, #20
    2850:	bl	138d0 <operator delete(void*, unsigned int)>
    2854:	mov	r0, r4
    2856:	movs	r1, #20
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
	}
    2858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    285c:	b.w	138d0 <operator delete(void*, unsigned int)>
    2860:	bx	lr
    2862:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2866:	mov	r0, r4
	}
    2868:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    286c:	bx	r3
    286e:	mov	r0, r5
    2870:	blx	r3
    2872:	b.n	2854 <File::invalidate() [clone .isra.0]+0x74>
    2874:	blx	r3
    2876:	b.n	284c <File::invalidate() [clone .isra.0]+0x6c>
    2878:	.word	0x000014c5
    287c:	.word	0x00018e14

00002880 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    2880:	bx	lr
    2882:	nop

00002884 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    2884:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2888:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    288a:	ldr.w	r0, [r0, #184]	; 0xb8
    288e:	sub	sp, #28
    2890:	cbz	r0, 28e8 <MTPStorage_SD::OpenIndex()+0x64>
    2892:	ldr	r3, [r0, #0]
    2894:	ldr	r2, [pc, #384]	; (2a18 <MTPStorage_SD::OpenIndex()+0x194>)
    2896:	ldr	r3, [r3, #68]	; 0x44
    2898:	cmp	r3, r2
    289a:	bne.w	2b14 <MTPStorage_SD::OpenIndex()+0x290>
    289e:	ldr	r0, [r0, #16]
    28a0:	cbz	r0, 28e8 <MTPStorage_SD::OpenIndex()+0x64>
    28a2:	ldr	r2, [r0, #0]
    28a4:	ldr	r2, [r2, #68]	; 0x44
    28a6:	cmp	r2, r3
    28a8:	bne.w	2b1e <MTPStorage_SD::OpenIndex()+0x29a>
    28ac:	ldr	r0, [r0, #16]
    28ae:	cbz	r0, 28e8 <MTPStorage_SD::OpenIndex()+0x64>
    28b0:	ldr	r3, [r0, #0]
    28b2:	ldr	r3, [r3, #68]	; 0x44
    28b4:	cmp	r3, r2
    28b6:	bne.w	2b14 <MTPStorage_SD::OpenIndex()+0x290>
    28ba:	ldr	r0, [r0, #16]
    28bc:	cbz	r0, 28e8 <MTPStorage_SD::OpenIndex()+0x64>
    28be:	ldr	r2, [r0, #0]
    28c0:	ldr	r2, [r2, #68]	; 0x44
    28c2:	cmp	r2, r3
    28c4:	bne.w	2b1e <MTPStorage_SD::OpenIndex()+0x29a>
    28c8:	ldr	r0, [r0, #16]
    28ca:	cbz	r0, 28e8 <MTPStorage_SD::OpenIndex()+0x64>
    28cc:	ldr	r3, [r0, #0]
    28ce:	ldr	r3, [r3, #68]	; 0x44
    28d0:	cmp	r3, r2
    28d2:	bne.w	2b14 <MTPStorage_SD::OpenIndex()+0x290>
    28d6:	ldr	r0, [r0, #16]
    28d8:	cbz	r0, 28e8 <MTPStorage_SD::OpenIndex()+0x64>
    28da:	ldr	r3, [r0, #0]
    28dc:	ldr	r3, [r3, #68]	; 0x44
    28de:	blx	r3
    28e0:	cbz	r0, 28e8 <MTPStorage_SD::OpenIndex()+0x64>
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    mtp_lock_storage(false);
  }
    28e2:	add	sp, #28
    28e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    28e8:	ldr	r1, [r4, #88]	; 0x58
    28ea:	ldr	r2, [pc, #304]	; (2a1c <MTPStorage_SD::OpenIndex()+0x198>)
    28ec:	ldr	r3, [r1, #0]
    28ee:	add	r0, sp, #4
    28f0:	ldr	r5, [r3, #0]
    28f2:	movs	r3, #2
    28f4:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    28f6:	ldr.w	r3, [r4, #184]	; 0xb8
    28fa:	cbz	r3, 2908 <MTPStorage_SD::OpenIndex()+0x84>
    28fc:	ldr	r2, [r3, #16]
    28fe:	subs	r2, #1
    2900:	str	r2, [r3, #16]
    2902:	cmp	r2, #0
    2904:	beq.w	2a28 <MTPStorage_SD::OpenIndex()+0x1a4>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2908:	ldr	r3, [sp, #20]
    290a:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    290e:	cmp	r3, #0
    2910:	beq.n	28e2 <MTPStorage_SD::OpenIndex()+0x5e>
    2912:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    2914:	ldr	r1, [pc, #264]	; (2a20 <MTPStorage_SD::OpenIndex()+0x19c>)
    2916:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2918:	adds	r2, #1
    291a:	str	r2, [r3, #16]
    291c:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    291e:	cmp	r2, #0
    2920:	beq.n	28e2 <MTPStorage_SD::OpenIndex()+0x5e>
    2922:	ldr	r3, [r2, #16]
    2924:	subs	r3, #1
    2926:	str	r3, [r2, #16]
    2928:	cmp	r3, #0
    292a:	bne.n	28e2 <MTPStorage_SD::OpenIndex()+0x5e>
    292c:	ldr	r4, [sp, #20]
    292e:	cmp	r4, #0
    2930:	beq.n	28e2 <MTPStorage_SD::OpenIndex()+0x5e>
    2932:	ldr	r2, [r4, #0]
    2934:	ldr	r3, [pc, #236]	; (2a24 <MTPStorage_SD::OpenIndex()+0x1a0>)
    2936:	ldr	r2, [r2, #32]
    2938:	cmp	r2, r3
    293a:	bne.w	2b28 <MTPStorage_SD::OpenIndex()+0x2a4>
    293e:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2940:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2942:	cmp	r0, #0
    2944:	beq.n	2a08 <MTPStorage_SD::OpenIndex()+0x184>
    2946:	ldr	r2, [r0, #16]
    2948:	subs	r2, #1
    294a:	str	r2, [r0, #16]
    294c:	cmp	r2, #0
    294e:	bne.n	2a08 <MTPStorage_SD::OpenIndex()+0x184>
    2950:	ldr	r5, [r4, #16]
    2952:	cmp	r5, #0
    2954:	beq.n	2a08 <MTPStorage_SD::OpenIndex()+0x184>
    2956:	ldr	r2, [r5, #0]
    2958:	ldr	r2, [r2, #32]
    295a:	cmp	r2, r3
    295c:	bne.w	2b3a <MTPStorage_SD::OpenIndex()+0x2b6>
    2960:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2962:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2964:	cmp	r0, #0
    2966:	beq.n	2a00 <MTPStorage_SD::OpenIndex()+0x17c>
    2968:	ldr	r2, [r0, #16]
    296a:	subs	r2, #1
    296c:	str	r2, [r0, #16]
    296e:	cmp	r2, #0
    2970:	bne.n	2a00 <MTPStorage_SD::OpenIndex()+0x17c>
    2972:	ldr	r6, [r5, #16]
    2974:	cmp	r6, #0
    2976:	beq.n	2a00 <MTPStorage_SD::OpenIndex()+0x17c>
    2978:	ldr	r2, [r6, #0]
    297a:	ldr	r2, [r2, #32]
    297c:	cmp	r2, r3
    297e:	bne.w	2b46 <MTPStorage_SD::OpenIndex()+0x2c2>
    2982:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2984:	str	r1, [r6, #0]
    2986:	ldr.w	lr, [pc, #152]	; 2a20 <MTPStorage_SD::OpenIndex()+0x19c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    298a:	cmp	r0, #0
    298c:	beq.n	29f8 <MTPStorage_SD::OpenIndex()+0x174>
    298e:	ldr	r2, [r0, #16]
    2990:	subs	r2, #1
    2992:	str	r2, [r0, #16]
    2994:	cbnz	r2, 29f8 <MTPStorage_SD::OpenIndex()+0x174>
    2996:	ldr	r7, [r6, #16]
    2998:	cbz	r7, 29f8 <MTPStorage_SD::OpenIndex()+0x174>
    299a:	ldr	r2, [r7, #0]
    299c:	ldr	r2, [r2, #32]
    299e:	cmp	r2, r3
    29a0:	bne.w	2b52 <MTPStorage_SD::OpenIndex()+0x2ce>
    29a4:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    29a6:	str.w	lr, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29aa:	cbz	r0, 29f0 <MTPStorage_SD::OpenIndex()+0x16c>
    29ac:	ldr	r2, [r0, #16]
    29ae:	subs	r2, #1
    29b0:	str	r2, [r0, #16]
    29b2:	cbnz	r2, 29f0 <MTPStorage_SD::OpenIndex()+0x16c>
    29b4:	ldr.w	r8, [r7, #16]
    29b8:	cmp.w	r8, #0
    29bc:	beq.n	29f0 <MTPStorage_SD::OpenIndex()+0x16c>
    29be:	ldr.w	r2, [r8]
    29c2:	ldr	r2, [r2, #32]
    29c4:	cmp	r2, r3
    29c6:	bne.w	2b5e <MTPStorage_SD::OpenIndex()+0x2da>
    29ca:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    29ce:	str.w	r1, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    29d2:	cbz	r2, 29e8 <MTPStorage_SD::OpenIndex()+0x164>
    29d4:	ldr	r3, [r2, #16]
    29d6:	subs	r3, #1
    29d8:	str	r3, [r2, #16]
    29da:	cbnz	r3, 29e8 <MTPStorage_SD::OpenIndex()+0x164>
    29dc:	ldr.w	r0, [r8, #16]
    29e0:	cbz	r0, 29e8 <MTPStorage_SD::OpenIndex()+0x164>
    29e2:	ldr	r3, [r0, #0]
    29e4:	ldr	r3, [r3, #32]
    29e6:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    29e8:	mov	r0, r8
    29ea:	movs	r1, #20
    29ec:	bl	138d0 <operator delete(void*, unsigned int)>
    29f0:	mov	r0, r7
    29f2:	movs	r1, #20
    29f4:	bl	138d0 <operator delete(void*, unsigned int)>
    29f8:	mov	r0, r6
    29fa:	movs	r1, #20
    29fc:	bl	138d0 <operator delete(void*, unsigned int)>
    2a00:	mov	r0, r5
    2a02:	movs	r1, #20
    2a04:	bl	138d0 <operator delete(void*, unsigned int)>
    2a08:	mov	r0, r4
    2a0a:	movs	r1, #20
    2a0c:	bl	138d0 <operator delete(void*, unsigned int)>
    2a10:	add	sp, #28
    2a12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2a16:	nop
    2a18:	.word	0x0000050d
    2a1c:	.word	0x00019324
    2a20:	.word	0x00018e14
    2a24:	.word	0x000014c5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a28:	ldr.w	r5, [r4, #184]	; 0xb8
    2a2c:	cmp	r5, #0
    2a2e:	beq.w	2908 <MTPStorage_SD::OpenIndex()+0x84>
    2a32:	ldr	r2, [r5, #0]
    2a34:	ldr	r3, [pc, #300]	; (2b64 <MTPStorage_SD::OpenIndex()+0x2e0>)
    2a36:	ldr	r2, [r2, #32]
    2a38:	cmp	r2, r3
    2a3a:	bne.n	2b2e <MTPStorage_SD::OpenIndex()+0x2aa>
    2a3c:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a3e:	ldr	r1, [pc, #296]	; (2b68 <MTPStorage_SD::OpenIndex()+0x2e4>)
    2a40:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a42:	cmp	r0, #0
    2a44:	beq.n	2b0a <MTPStorage_SD::OpenIndex()+0x286>
    2a46:	ldr	r2, [r0, #16]
    2a48:	subs	r2, #1
    2a4a:	str	r2, [r0, #16]
    2a4c:	cmp	r2, #0
    2a4e:	bne.n	2b0a <MTPStorage_SD::OpenIndex()+0x286>
    2a50:	ldr	r6, [r5, #16]
    2a52:	cmp	r6, #0
    2a54:	beq.n	2b0a <MTPStorage_SD::OpenIndex()+0x286>
    2a56:	ldr	r2, [r6, #0]
    2a58:	ldr	r2, [r2, #32]
    2a5a:	cmp	r2, r3
    2a5c:	bne.n	2b34 <MTPStorage_SD::OpenIndex()+0x2b0>
    2a5e:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a60:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a62:	cmp	r0, #0
    2a64:	beq.n	2b02 <MTPStorage_SD::OpenIndex()+0x27e>
    2a66:	ldr	r2, [r0, #16]
    2a68:	subs	r2, #1
    2a6a:	str	r2, [r0, #16]
    2a6c:	cmp	r2, #0
    2a6e:	bne.n	2b02 <MTPStorage_SD::OpenIndex()+0x27e>
    2a70:	ldr	r7, [r6, #16]
    2a72:	cmp	r7, #0
    2a74:	beq.n	2b02 <MTPStorage_SD::OpenIndex()+0x27e>
    2a76:	ldr	r2, [r7, #0]
    2a78:	ldr	r2, [r2, #32]
    2a7a:	cmp	r2, r3
    2a7c:	bne.n	2b40 <MTPStorage_SD::OpenIndex()+0x2bc>
    2a7e:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2a80:	str	r1, [r7, #0]
    2a82:	ldr.w	lr, [pc, #228]	; 2b68 <MTPStorage_SD::OpenIndex()+0x2e4>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2a86:	cmp	r0, #0
    2a88:	beq.n	2afa <MTPStorage_SD::OpenIndex()+0x276>
    2a8a:	ldr	r2, [r0, #16]
    2a8c:	subs	r2, #1
    2a8e:	str	r2, [r0, #16]
    2a90:	cbnz	r2, 2afa <MTPStorage_SD::OpenIndex()+0x276>
    2a92:	ldr.w	r8, [r7, #16]
    2a96:	cmp.w	r8, #0
    2a9a:	beq.n	2afa <MTPStorage_SD::OpenIndex()+0x276>
    2a9c:	ldr.w	r2, [r8]
    2aa0:	ldr	r2, [r2, #32]
    2aa2:	cmp	r2, r3
    2aa4:	bne.n	2b4c <MTPStorage_SD::OpenIndex()+0x2c8>
    2aa6:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2aaa:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2aae:	cbz	r0, 2af2 <MTPStorage_SD::OpenIndex()+0x26e>
    2ab0:	ldr	r2, [r0, #16]
    2ab2:	subs	r2, #1
    2ab4:	str	r2, [r0, #16]
    2ab6:	cbnz	r2, 2af2 <MTPStorage_SD::OpenIndex()+0x26e>
    2ab8:	ldr.w	r9, [r8, #16]
    2abc:	cmp.w	r9, #0
    2ac0:	beq.n	2af2 <MTPStorage_SD::OpenIndex()+0x26e>
    2ac2:	ldr.w	r2, [r9]
    2ac6:	ldr	r2, [r2, #32]
    2ac8:	cmp	r2, r3
    2aca:	bne.n	2b58 <MTPStorage_SD::OpenIndex()+0x2d4>
    2acc:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ad0:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ad4:	cbz	r2, 2aea <MTPStorage_SD::OpenIndex()+0x266>
    2ad6:	ldr	r3, [r2, #16]
    2ad8:	subs	r3, #1
    2ada:	str	r3, [r2, #16]
    2adc:	cbnz	r3, 2aea <MTPStorage_SD::OpenIndex()+0x266>
    2ade:	ldr.w	r0, [r9, #16]
    2ae2:	cbz	r0, 2aea <MTPStorage_SD::OpenIndex()+0x266>
    2ae4:	ldr	r3, [r0, #0]
    2ae6:	ldr	r3, [r3, #32]
    2ae8:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2aea:	mov	r0, r9
    2aec:	movs	r1, #20
    2aee:	bl	138d0 <operator delete(void*, unsigned int)>
    2af2:	mov	r0, r8
    2af4:	movs	r1, #20
    2af6:	bl	138d0 <operator delete(void*, unsigned int)>
    2afa:	mov	r0, r7
    2afc:	movs	r1, #20
    2afe:	bl	138d0 <operator delete(void*, unsigned int)>
    2b02:	mov	r0, r6
    2b04:	movs	r1, #20
    2b06:	bl	138d0 <operator delete(void*, unsigned int)>
    2b0a:	mov	r0, r5
    2b0c:	movs	r1, #20
    2b0e:	bl	138d0 <operator delete(void*, unsigned int)>
    2b12:	b.n	2908 <MTPStorage_SD::OpenIndex()+0x84>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2b14:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    2b16:	cmp	r0, #0
    2b18:	bne.w	28e2 <MTPStorage_SD::OpenIndex()+0x5e>
    2b1c:	b.n	28e8 <MTPStorage_SD::OpenIndex()+0x64>
    2b1e:	blx	r2
    2b20:	cmp	r0, #0
    2b22:	bne.w	28e2 <MTPStorage_SD::OpenIndex()+0x5e>
    2b26:	b.n	28e8 <MTPStorage_SD::OpenIndex()+0x64>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2b28:	mov	r0, r4
    2b2a:	blx	r2
    2b2c:	b.n	28e2 <MTPStorage_SD::OpenIndex()+0x5e>
    2b2e:	mov	r0, r5
    2b30:	blx	r2
    2b32:	b.n	2908 <MTPStorage_SD::OpenIndex()+0x84>
    2b34:	mov	r0, r6
    2b36:	blx	r2
    2b38:	b.n	2b0a <MTPStorage_SD::OpenIndex()+0x286>
    2b3a:	mov	r0, r5
    2b3c:	blx	r2
    2b3e:	b.n	2a08 <MTPStorage_SD::OpenIndex()+0x184>
    2b40:	mov	r0, r7
    2b42:	blx	r2
    2b44:	b.n	2b02 <MTPStorage_SD::OpenIndex()+0x27e>
    2b46:	mov	r0, r6
    2b48:	blx	r2
    2b4a:	b.n	2a00 <MTPStorage_SD::OpenIndex()+0x17c>
    2b4c:	mov	r0, r8
    2b4e:	blx	r2
    2b50:	b.n	2afa <MTPStorage_SD::OpenIndex()+0x276>
    2b52:	mov	r0, r7
    2b54:	blx	r2
    2b56:	b.n	29f8 <MTPStorage_SD::OpenIndex()+0x174>
    2b58:	mov	r0, r9
    2b5a:	blx	r2
    2b5c:	b.n	2af2 <MTPStorage_SD::OpenIndex()+0x26e>
    2b5e:	mov	r0, r8
    2b60:	blx	r2
    2b62:	b.n	29f0 <MTPStorage_SD::OpenIndex()+0x16c>
    2b64:	.word	0x000014c5
    2b68:	.word	0x00018e14

00002b6c <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2b6c:	ldr.w	r3, [r0, #184]	; 0xb8
    2b70:	cmp	r3, #0
    2b72:	beq.n	2be2 <MTPStorage_SD::ResetIndex()+0x76>
    2b74:	ldr	r2, [r3, #0]
    2b76:	ldr	r1, [pc, #112]	; (2be8 <MTPStorage_SD::ResetIndex()+0x7c>)
    2b78:	ldr	r2, [r2, #68]	; 0x44
    2b7a:	cmp	r2, r1
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    2b7c:	push	{r4, lr}
    2b7e:	mov	r4, r0
    2b80:	bne.n	2bdc <MTPStorage_SD::ResetIndex()+0x70>
    2b82:	ldr	r0, [r3, #16]
    2b84:	cbz	r0, 2bda <MTPStorage_SD::ResetIndex()+0x6e>
    2b86:	ldr	r3, [r0, #0]
    2b88:	ldr	r3, [r3, #68]	; 0x44
    2b8a:	cmp	r3, r2
    2b8c:	bne.n	2be4 <MTPStorage_SD::ResetIndex()+0x78>
    2b8e:	ldr	r0, [r0, #16]
    2b90:	cbz	r0, 2bda <MTPStorage_SD::ResetIndex()+0x6e>
    2b92:	ldr	r2, [r0, #0]
    2b94:	ldr	r2, [r2, #68]	; 0x44
    2b96:	cmp	r2, r3
    2b98:	bne.n	2bde <MTPStorage_SD::ResetIndex()+0x72>
    2b9a:	ldr	r0, [r0, #16]
    2b9c:	cbz	r0, 2bda <MTPStorage_SD::ResetIndex()+0x6e>
    2b9e:	ldr	r3, [r0, #0]
    2ba0:	ldr	r3, [r3, #68]	; 0x44
    2ba2:	cmp	r3, r2
    2ba4:	bne.n	2be4 <MTPStorage_SD::ResetIndex()+0x78>
    2ba6:	ldr	r0, [r0, #16]
    2ba8:	cbz	r0, 2bda <MTPStorage_SD::ResetIndex()+0x6e>
    2baa:	ldr	r2, [r0, #0]
    2bac:	ldr	r2, [r2, #68]	; 0x44
    2bae:	cmp	r2, r3
    2bb0:	bne.n	2bde <MTPStorage_SD::ResetIndex()+0x72>
    2bb2:	ldr	r0, [r0, #16]
    2bb4:	cbz	r0, 2bda <MTPStorage_SD::ResetIndex()+0x6e>
    2bb6:	ldr	r3, [r0, #0]
    2bb8:	ldr	r3, [r3, #68]	; 0x44
    2bba:	blx	r3
    if(!sd_isOpen(index_)) return;
    2bbc:	cbz	r0, 2bda <MTPStorage_SD::ResetIndex()+0x6e>
    
    CloseIndex();
    2bbe:	ldr	r3, [r4, #0]
    2bc0:	mov	r0, r4
    2bc2:	ldr	r3, [r3, #64]	; 0x40
    2bc4:	blx	r3
    OpenIndex();
    2bc6:	mov	r0, r4
    2bc8:	bl	2884 <MTPStorage_SD::OpenIndex()>

    all_scanned_ = false;
    2bcc:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    2bce:	mvn.w	r3, #1
    if(!sd_isOpen(index_)) return;
    
    CloseIndex();
    OpenIndex();

    all_scanned_ = false;
    2bd2:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    2bd6:	str.w	r3, [r4, #240]	; 0xf0
    2bda:	pop	{r4, pc}
    2bdc:	mov	r0, r3
    2bde:	blx	r2
    2be0:	b.n	2bbc <MTPStorage_SD::ResetIndex()+0x50>
    2be2:	bx	lr
    2be4:	blx	r3
    2be6:	b.n	2bbc <MTPStorage_SD::ResetIndex()+0x50>
    2be8:	.word	0x0000050d

00002bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    2bec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2bf0:	mov	r6, r0
    2bf2:	sub	sp, #12
    2bf4:	mov	r4, r1
    2bf6:	mov	r7, r2
    2bf8:	bl	2884 <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2bfc:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    2c00:	add.w	r4, r4, r4, lsl #4
    2c04:	cmp	r5, #0
    2c06:	beq.n	2cde <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2c08:	ldr	r0, [r5, #0]
    2c0a:	ldr	r1, [pc, #308]	; (2d40 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    2c0c:	lsls	r2, r4, #4
    2c0e:	ldr	r4, [r0, #52]	; 0x34
    2c10:	cmp	r4, r1
    2c12:	mov.w	ip, #0
    2c16:	bne.n	2d06 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x11a>
    2c18:	ldr	r1, [r5, #16]
    2c1a:	cmp	r1, #0
    2c1c:	beq.n	2cd6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xea>
    2c1e:	ldr	r3, [r1, #0]
    2c20:	ldr.w	r8, [r3, #52]	; 0x34
    2c24:	cmp	r8, r4
    2c26:	bne.n	2d12 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x126>
    2c28:	ldr.w	lr, [r1, #16]
    2c2c:	cmp.w	lr, #0
    2c30:	beq.n	2ce4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    2c32:	ldr.w	r4, [lr]
    2c36:	ldr	r4, [r4, #52]	; 0x34
    2c38:	cmp	r4, r8
    2c3a:	bne.n	2d1e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x132>
    2c3c:	ldr.w	lr, [lr, #16]
    2c40:	cmp.w	lr, #0
    2c44:	beq.n	2ce4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    2c46:	ldr.w	r3, [lr]
    2c4a:	ldr.w	r8, [r3, #52]	; 0x34
    2c4e:	cmp	r8, r4
    2c50:	bne.n	2d2a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13e>
    2c52:	ldr.w	r4, [lr, #16]
    2c56:	cmp	r4, #0
    2c58:	beq.n	2ce4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    2c5a:	ldr	r3, [r4, #0]
    2c5c:	ldr.w	r9, [r3, #52]	; 0x34
    2c60:	cmp	r9, r8
    2c62:	bne.n	2d36 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14a>
    2c64:	ldr	r4, [r4, #16]
    2c66:	cmp	r4, #0
    2c68:	beq.n	2ce4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    2c6a:	ldr	r1, [r4, #0]
    2c6c:	str.w	ip, [sp]
    2c70:	mov	r3, ip
    2c72:	mov	r0, r4
    2c74:	ldr	r1, [r1, #52]	; 0x34
    2c76:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2c78:	ldr.w	r5, [r6, #184]	; 0xb8
    2c7c:	cmp	r5, #0
    2c7e:	beq.n	2cde <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2c80:	ldr	r2, [r5, #0]
    2c82:	ldr	r3, [pc, #192]	; (2d44 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    2c84:	ldr	r4, [r2, #44]	; 0x2c
    2c86:	cmp	r4, r3
    2c88:	bne.n	2cf0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    2c8a:	ldr	r0, [r5, #16]
    2c8c:	cbz	r0, 2cde <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2c8e:	ldr	r2, [r0, #0]
    2c90:	ldr	r4, [r2, #44]	; 0x2c
    2c92:	cmp	r4, r3
    2c94:	bne.n	2d02 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2c96:	ldr	r0, [r0, #16]
    2c98:	cbz	r0, 2cde <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2c9a:	ldr	r2, [r0, #0]
    2c9c:	ldr	r4, [r2, #44]	; 0x2c
    2c9e:	cmp	r4, r3
    2ca0:	bne.n	2d02 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2ca2:	ldr	r0, [r0, #16]
    2ca4:	cbz	r0, 2cde <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2ca6:	ldr	r2, [r0, #0]
    2ca8:	ldr	r4, [r2, #44]	; 0x2c
    2caa:	cmp	r4, r3
    2cac:	bne.n	2d02 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2cae:	ldr	r0, [r0, #16]
    2cb0:	cbz	r0, 2cde <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2cb2:	ldr	r2, [r0, #0]
    2cb4:	ldr	r4, [r2, #44]	; 0x2c
    2cb6:	cmp	r4, r3
    2cb8:	bne.n	2d02 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2cba:	ldr	r0, [r0, #16]
    2cbc:	cbz	r0, 2cde <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2cbe:	ldr	r2, [r0, #0]
    2cc0:	ldr	r4, [r2, #44]	; 0x2c
    2cc2:	cmp	r4, r3
    2cc4:	bne.n	2d02 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    2cc6:	ldr	r0, [r0, #16]
    2cc8:	cbz	r0, 2cde <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2cca:	ldr	r3, [r0, #0]
    2ccc:	mov	r1, r7
    2cce:	ldr	r3, [r3, #44]	; 0x2c
    2cd0:	mov.w	r2, #272	; 0x110
    2cd4:	b.n	2cfa <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10e>
    2cd6:	ldr	r4, [r0, #44]	; 0x2c
    2cd8:	ldr	r3, [pc, #104]	; (2d44 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    2cda:	cmp	r4, r3
    2cdc:	bne.n	2cf0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    2cde:	add	sp, #12
    2ce0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2ce4:	ldr	r4, [r0, #44]	; 0x2c
    2ce6:	ldr	r3, [pc, #92]	; (2d44 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    2ce8:	cmp	r4, r3
    2cea:	bne.n	2cf0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    2cec:	mov	r0, r1
    2cee:	b.n	2c8e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xa2>
    2cf0:	mov	r1, r7
    2cf2:	mov	r0, r5
    2cf4:	mov.w	r2, #272	; 0x110
    2cf8:	mov	r3, r4
    2cfa:	add	sp, #12
    2cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d00:	bx	r3
    2d02:	mov	r1, r7
    2d04:	b.n	2cf4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x108>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2d06:	str.w	ip, [sp]
    2d0a:	mov	r3, ip
    2d0c:	mov	r0, r5
    2d0e:	blx	r4
    2d10:	b.n	2c78 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2d12:	str.w	ip, [sp]
    2d16:	mov	r3, ip
    2d18:	mov	r0, r1
    2d1a:	blx	r8
    2d1c:	b.n	2c78 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2d1e:	str.w	ip, [sp]
    2d22:	mov	r3, ip
    2d24:	mov	r0, lr
    2d26:	blx	r4
    2d28:	b.n	2c78 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2d2a:	str.w	ip, [sp]
    2d2e:	mov	r3, ip
    2d30:	mov	r0, lr
    2d32:	blx	r8
    2d34:	b.n	2c78 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2d36:	movs	r3, #0
    2d38:	mov	r0, r4
    2d3a:	str	r3, [sp, #0]
    2d3c:	blx	r9
    2d3e:	b.n	2c78 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2d40:	.word	0x000004c9
    2d44:	.word	0x00000489

00002d48 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    2d48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d4c:	mov	r5, r0
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    2d4e:	ldr	r0, [r0, #88]	; 0x58
    2d50:	ldr	r1, [pc, #96]	; (2db4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]+0x6c>)
    2d52:	ldr	r3, [r0, #0]
  { if (index_generated) return; 
    index_generated = true;
    2d54:	movs	r7, #1
    2d56:	ldr	r3, [r3, #16]
    2d58:	strb.w	r7, [r5, #248]	; 0xf8
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    2d5c:	sub	sp, #272	; 0x110
    2d5e:	blx	r3
    2d60:	ldr	r3, [r5, #4]
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    2d62:	str.w	r3, [r5, #228]	; 0xe4

    index_entries_ = 0;
    2d66:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2d68:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    2d6a:	str.w	r1, [r5, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2d6e:	ble.n	2dac <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]+0x64>
    2d70:	mov	r4, r1
    {
      r.store = ii; // 
      r.parent = ii;
      r.sibling = 0;
    2d72:	mov	r6, r1
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    2d74:	mov.w	r8, #47	; 0x2f
    2d78:	b.n	2d7e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]+0x36>
    2d7a:	ldr.w	r1, [r5, #244]	; 0xf4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
    2d7e:	strh.w	r4, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    2d82:	adds	r3, r1, #1
    2d84:	str.w	r3, [r5, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    2d88:	mov	r2, sp
    2d8a:	mov	r0, r5
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = ii;
    2d8c:	str	r4, [sp, #0]
      r.sibling = 0;
    2d8e:	str	r6, [sp, #8]
      r.child = 0;
    2d90:	str	r6, [sp, #4]
      r.isdir = true;
    2d92:	strb.w	r7, [sp, #12]
      r.scanned = false;
    2d96:	strb.w	r6, [sp, #13]
      strcpy(r.name, "/");
    2d9a:	strh.w	r8, [sp, #16]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    2d9e:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2da2:	ldr.w	r3, [r5, #228]	; 0xe4
    2da6:	adds	r4, #1
    2da8:	cmp	r3, r4
    2daa:	bgt.n	2d7a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]+0x32>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    2dac:	add	sp, #272	; 0x110
    2dae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2db2:	nop
    2db4:	.word	0x00019324

00002db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    2db8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dbc:	mov	r5, r1
    2dbe:	mov	r4, r2
    2dc0:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    2dc2:	movs	r1, #0
    2dc4:	mov.w	r2, #272	; 0x110
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    2dc8:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    2dca:	bl	14e3c <memset>
    if (i > index_entries_) 
    2dce:	ldr.w	r3, [r5, #244]	; 0xf4
    2dd2:	cmp	r3, r4
    2dd4:	bcc.w	2f4e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x196>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    2dd8:	mov	r0, r5
    2dda:	bl	2884 <MTPStorage_SD::OpenIndex()>
    2dde:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    2de2:	add.w	r4, r4, r4, lsl #4
    2de6:	lsls	r2, r4, #4
    2de8:	mov.w	ip, #0
    2dec:	cmp	r0, #0
    2dee:	beq.w	2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2df2:	ldr	r7, [r0, #0]
    2df4:	ldr	r4, [pc, #456]	; (2fc0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x208>)
    2df6:	ldr	r1, [r7, #52]	; 0x34
    2df8:	cmp	r1, r4
    2dfa:	bne.w	2f7a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    2dfe:	ldr	r1, [r0, #16]
    2e00:	cmp	r1, #0
    2e02:	beq.w	2f62 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1aa>
    2e06:	ldr	r3, [r1, #0]
    2e08:	ldr.w	r8, [r3, #52]	; 0x34
    2e0c:	cmp	r8, r4
    2e0e:	bne.w	2fa8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f0>
    2e12:	ldr.w	lr, [r1, #16]
    2e16:	cmp.w	lr, #0
    2e1a:	beq.n	2ece <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2e1c:	ldr.w	r3, [lr]
    2e20:	ldr.w	r8, [r3, #52]	; 0x34
    2e24:	cmp	r8, r4
    2e26:	bne.w	2f9c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    2e2a:	ldr.w	lr, [lr, #16]
    2e2e:	cmp.w	lr, #0
    2e32:	beq.n	2ece <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2e34:	ldr.w	r3, [lr]
    2e38:	ldr.w	r8, [r3, #52]	; 0x34
    2e3c:	cmp	r8, r4
    2e3e:	bne.w	2f9c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    2e42:	ldr.w	lr, [lr, #16]
    2e46:	cmp.w	lr, #0
    2e4a:	beq.n	2ece <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2e4c:	ldr.w	r3, [lr]
    2e50:	ldr.w	r8, [r3, #52]	; 0x34
    2e54:	cmp	r8, r4
    2e56:	bne.w	2fb4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2e5a:	ldr.w	lr, [lr, #16]
    2e5e:	cmp.w	lr, #0
    2e62:	beq.n	2ece <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2e64:	ldr.w	r3, [lr]
    2e68:	ldr.w	r8, [r3, #52]	; 0x34
    2e6c:	cmp	r8, r4
    2e6e:	bne.w	2fb4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2e72:	ldr.w	lr, [lr, #16]
    2e76:	cmp.w	lr, #0
    2e7a:	beq.n	2ece <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2e7c:	ldr.w	r3, [lr]
    2e80:	ldr.w	r8, [r3, #52]	; 0x34
    2e84:	cmp	r8, r4
    2e86:	bne.w	2fb4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2e8a:	ldr.w	lr, [lr, #16]
    2e8e:	cmp.w	lr, #0
    2e92:	beq.n	2ece <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2e94:	ldr.w	r3, [lr]
    2e98:	ldr.w	r8, [r3, #52]	; 0x34
    2e9c:	cmp	r8, r4
    2e9e:	bne.w	2fb4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2ea2:	ldr.w	lr, [lr, #16]
    2ea6:	cmp.w	lr, #0
    2eaa:	beq.n	2ece <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2eac:	ldr.w	r3, [lr]
    2eb0:	ldr.w	r8, [r3, #52]	; 0x34
    2eb4:	cmp	r8, r4
    2eb6:	bne.n	2fb4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2eb8:	ldr.w	r4, [lr, #16]
    2ebc:	cbz	r4, 2ece <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2ebe:	ldr	r1, [r4, #0]
    2ec0:	str.w	ip, [sp]
    2ec4:	mov	r3, ip
    2ec6:	mov	r0, r4
    2ec8:	ldr	r1, [r1, #52]	; 0x34
    2eca:	blx	r1
    2ecc:	b.n	2f82 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2ece:	ldr	r4, [r7, #40]	; 0x28
    2ed0:	ldr	r3, [pc, #240]	; (2fc4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2ed2:	cmp	r4, r3
    2ed4:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2ed6:	mov	r0, r1
    2ed8:	ldr	r2, [r0, #0]
    2eda:	ldr	r4, [r2, #40]	; 0x28
    2edc:	cmp	r4, r3
    2ede:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2ee0:	ldr	r0, [r0, #16]
    2ee2:	cmp	r0, #0
    2ee4:	beq.n	2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2ee6:	ldr	r2, [r0, #0]
    2ee8:	ldr	r4, [r2, #40]	; 0x28
    2eea:	cmp	r4, r3
    2eec:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2eee:	ldr	r0, [r0, #16]
    2ef0:	cbz	r0, 2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2ef2:	ldr	r2, [r0, #0]
    2ef4:	ldr	r4, [r2, #40]	; 0x28
    2ef6:	cmp	r4, r3
    2ef8:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2efa:	ldr	r0, [r0, #16]
    2efc:	cbz	r0, 2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2efe:	ldr	r2, [r0, #0]
    2f00:	ldr	r4, [r2, #40]	; 0x28
    2f02:	cmp	r4, r3
    2f04:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2f06:	ldr	r0, [r0, #16]
    2f08:	cbz	r0, 2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2f0a:	ldr	r2, [r0, #0]
    2f0c:	ldr	r4, [r2, #40]	; 0x28
    2f0e:	cmp	r4, r3
    2f10:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2f12:	ldr	r0, [r0, #16]
    2f14:	cbz	r0, 2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2f16:	ldr	r2, [r0, #0]
    2f18:	ldr	r4, [r2, #40]	; 0x28
    2f1a:	cmp	r4, r3
    2f1c:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2f1e:	ldr	r0, [r0, #16]
    2f20:	cbz	r0, 2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2f22:	ldr	r2, [r0, #0]
    2f24:	ldr	r4, [r2, #40]	; 0x28
    2f26:	cmp	r4, r3
    2f28:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2f2a:	ldr	r0, [r0, #16]
    2f2c:	cbz	r0, 2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2f2e:	ldr	r2, [r0, #0]
    2f30:	ldr	r4, [r2, #40]	; 0x28
    2f32:	cmp	r4, r3
    2f34:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2f36:	ldr	r0, [r0, #16]
    2f38:	cbz	r0, 2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2f3a:	ldr	r3, [r0, #0]
    2f3c:	mov.w	r2, #272	; 0x110
    2f40:	ldr	r3, [r3, #40]	; 0x28
    2f42:	mov	r1, r6
    2f44:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    2f46:	mov	r0, r6
    2f48:	add	sp, #8
    2f4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    2f4e:	mov.w	r2, #272	; 0x110
    2f52:	movs	r1, #0
    2f54:	mov	r0, r6
    2f56:	bl	14e3c <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    2f5a:	mov	r0, r6
    2f5c:	add	sp, #8
    2f5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f62:	ldr	r4, [r7, #40]	; 0x28
    2f64:	ldr	r3, [pc, #92]	; (2fc4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2f66:	cmp	r4, r3
    2f68:	beq.n	2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2f6a:	mov.w	r2, #272	; 0x110
    2f6e:	mov	r1, r6
    2f70:	blx	r4
    2f72:	mov	r0, r6
    2f74:	add	sp, #8
    2f76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2f7a:	str.w	ip, [sp]
    2f7e:	mov	r3, ip
    2f80:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    2f82:	ldr.w	r0, [r5, #184]	; 0xb8
    2f86:	cmp	r0, #0
    2f88:	beq.n	2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2f8a:	ldr	r2, [r0, #0]
    2f8c:	ldr	r3, [pc, #52]	; (2fc4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2f8e:	ldr	r4, [r2, #40]	; 0x28
    2f90:	cmp	r4, r3
    2f92:	bne.n	2f6a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2f94:	ldr	r0, [r0, #16]
    2f96:	cmp	r0, #0
    2f98:	bne.n	2ed8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x120>
    2f9a:	b.n	2f46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2f9c:	str.w	ip, [sp]
    2fa0:	mov	r3, ip
    2fa2:	mov	r0, lr
    2fa4:	blx	r8
    2fa6:	b.n	2f82 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2fa8:	str.w	ip, [sp]
    2fac:	mov	r3, ip
    2fae:	mov	r0, r1
    2fb0:	blx	r8
    2fb2:	b.n	2f82 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2fb4:	movs	r3, #0
    2fb6:	mov	r0, lr
    2fb8:	str	r3, [sp, #0]
    2fba:	blx	r8
    2fbc:	b.n	2f82 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    2fbe:	nop
    2fc0:	.word	0x000004c9
    2fc4:	.word	0x0000047d

00002fc8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storee)
  {
    2fc8:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    2fca:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storee)
  {
    2fce:	sub	sp, #276	; 0x114
    2fd0:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    2fd2:	cbnz	r5, 2fe8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
    2fd4:	b.n	301e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    2fd6:	ldr	r3, [sp, #8]
    2fd8:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    2fdc:	ldrb.w	r3, [sp, #16]
    2fe0:	cbnz	r3, 3018 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storee)
  {
    while (true) 
    { if (next_ == 0) return 0;
    2fe2:	ldr.w	r5, [r4, #252]	; 0xfc
    2fe6:	cbz	r5, 301e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    2fe8:	mov	r2, r5
    2fea:	mov	r1, r4
    2fec:	mov	r0, sp
    2fee:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    2ff2:	ldrb.w	r2, [r4, #256]	; 0x100
    2ff6:	cmp	r2, #0
    2ff8:	bne.n	2fd6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    2ffa:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    2ffe:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    3002:	adds	r3, #1
    3004:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    3008:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    300a:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    300e:	it	cs
    3010:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    3014:	cmp	r3, #0
    3016:	beq.n	2fe2 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    3018:	mov	r0, r5
    301a:	add	sp, #276	; 0x114
    301c:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  storee)
  {
    while (true) 
    { if (next_ == 0) return 0;
    301e:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    3020:	mov	r0, r5
    3022:	add	sp, #276	; 0x114
    3024:	pop	{r4, r5, pc}
    3026:	nop

00003028 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    3028:	push	{r4, r5, r6, r7, lr}
    302a:	sub	sp, #276	; 0x114
    302c:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    302e:	mov	r2, r1
    3030:	mov	r1, r0
    3032:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    3034:	mov	r5, r3
    3036:	ldr	r6, [sp, #296]	; 0x128
    3038:	ldr	r4, [sp, #300]	; 0x12c
    Record r = ReadIndexRecord(handle);
    303a:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    303e:	mov	r0, r7
    3040:	add	r1, sp, #16
    3042:	bl	156dc <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    3046:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    304a:	ldr	r2, [sp, #0]
    304c:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    304e:	cbnz	r3, 305e <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    3050:	ldr	r3, [sp, #4]
    *store = r.store;
    3052:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    3056:	str	r3, [r5, #0]
    *store = r.store;
    3058:	strh	r2, [r4, #0]
  }
    305a:	add	sp, #276	; 0x114
    305c:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    305e:	mov.w	r3, #4294967295
    3062:	b.n	3052 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

00003064 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    3064:	push	{lr}
    3066:	sub	sp, #276	; 0x114
    return ReadIndexRecord(handle).child;
    3068:	mov	r2, r1
    306a:	mov	r1, r0
    306c:	mov	r0, sp
    306e:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    3072:	ldr	r0, [sp, #4]
    3074:	add	sp, #276	; 0x114
    3076:	ldr.w	pc, [sp], #4
    307a:	nop

0000307c <MTPStorage_SD::close()>:
      mtp_lock_storage(false);
      return ret;
  }

  void MTPStorage_SD::close() 
  {
    307c:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    307e:	ldr.w	r3, [r0, #204]	; 0xcc
    3082:	sub	sp, #272	; 0x110
    3084:	mov	r4, r0
    3086:	cmp	r3, #0
    3088:	beq.n	3124 <MTPStorage_SD::close()+0xa8>
    308a:	ldr	r5, [r3, #0]
    308c:	ldr	r1, [pc, #384]	; (3210 <MTPStorage_SD::close()+0x194>)
    308e:	ldr	r2, [r5, #60]	; 0x3c
    3090:	cmp	r2, r1
    3092:	bne.w	3204 <MTPStorage_SD::close()+0x188>
    3096:	ldr	r2, [r3, #16]
    3098:	cmp	r2, #0
    309a:	beq.w	31f4 <MTPStorage_SD::close()+0x178>
    309e:	ldr	r0, [r2, #0]
    30a0:	ldr	r6, [r0, #60]	; 0x3c
    30a2:	cmp	r6, r1
    30a4:	bne.n	314c <MTPStorage_SD::close()+0xd0>
    30a6:	ldr	r0, [r2, #16]
    30a8:	cmp	r0, #0
    30aa:	beq.n	3116 <MTPStorage_SD::close()+0x9a>
    30ac:	ldr	r6, [r0, #0]
    30ae:	ldr	r6, [r6, #60]	; 0x3c
    30b0:	cmp	r6, r1
    30b2:	bne.n	314e <MTPStorage_SD::close()+0xd2>
    30b4:	ldr	r0, [r0, #16]
    30b6:	cmp	r0, #0
    30b8:	beq.n	3116 <MTPStorage_SD::close()+0x9a>
    30ba:	ldr	r6, [r0, #0]
    30bc:	ldr	r6, [r6, #60]	; 0x3c
    30be:	cmp	r6, r1
    30c0:	bne.n	314e <MTPStorage_SD::close()+0xd2>
    30c2:	ldr	r0, [r0, #16]
    30c4:	cbz	r0, 3116 <MTPStorage_SD::close()+0x9a>
    30c6:	ldr	r6, [r0, #0]
    30c8:	ldr	r6, [r6, #60]	; 0x3c
    30ca:	cmp	r6, r1
    30cc:	bne.n	314e <MTPStorage_SD::close()+0xd2>
    30ce:	ldr	r0, [r0, #16]
    30d0:	cbz	r0, 3116 <MTPStorage_SD::close()+0x9a>
    30d2:	ldr	r6, [r0, #0]
    30d4:	ldr	r6, [r6, #60]	; 0x3c
    30d6:	cmp	r6, r1
    30d8:	bne.n	314e <MTPStorage_SD::close()+0xd2>
    30da:	ldr	r0, [r0, #16]
    30dc:	cbz	r0, 3116 <MTPStorage_SD::close()+0x9a>
    30de:	ldr	r6, [r0, #0]
    30e0:	ldr	r6, [r6, #60]	; 0x3c
    30e2:	cmp	r6, r1
    30e4:	bne.n	314e <MTPStorage_SD::close()+0xd2>
    30e6:	ldr	r0, [r0, #16]
    30e8:	cbz	r0, 3116 <MTPStorage_SD::close()+0x9a>
    30ea:	ldr	r6, [r0, #0]
    30ec:	ldr	r6, [r6, #60]	; 0x3c
    30ee:	cmp	r6, r1
    30f0:	bne.n	314e <MTPStorage_SD::close()+0xd2>
    30f2:	ldr	r0, [r0, #16]
    30f4:	cbz	r0, 3116 <MTPStorage_SD::close()+0x9a>
    30f6:	ldr	r6, [r0, #0]
    30f8:	ldr	r6, [r6, #60]	; 0x3c
    30fa:	cmp	r6, r1
    30fc:	bne.n	314e <MTPStorage_SD::close()+0xd2>
    30fe:	ldr	r0, [r0, #16]
    3100:	cbz	r0, 3116 <MTPStorage_SD::close()+0x9a>
    3102:	ldr	r6, [r0, #0]
    3104:	ldr	r6, [r6, #60]	; 0x3c
    3106:	cmp	r6, r1
    3108:	bne.n	314e <MTPStorage_SD::close()+0xd2>
    310a:	ldr	r0, [r0, #16]
    310c:	cbz	r0, 3116 <MTPStorage_SD::close()+0x9a>
    310e:	ldr	r3, [r0, #0]
    3110:	ldr	r3, [r3, #60]	; 0x3c
    3112:	blx	r3
    3114:	b.n	3150 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    3116:	ldr	r6, [r5, #64]	; 0x40
    3118:	ldr	r1, [pc, #248]	; (3214 <MTPStorage_SD::close()+0x198>)
    311a:	cmp	r6, r1
    311c:	bne.n	320a <MTPStorage_SD::close()+0x18e>
    311e:	mov	r0, r2
    3120:	movs	r5, #0
    3122:	b.n	316a <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    3124:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    3126:	mov	r0, sp
    3128:	ldr.w	r2, [r4, #240]	; 0xf0
    312c:	mov	r1, r4
    312e:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    3132:	mov	r2, sp
    3134:	ldr.w	r1, [r4, #240]	; 0xf0
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    3138:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    313a:	mov	r0, r4
    313c:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    3140:	mvn.w	r3, #1
    3144:	str.w	r3, [r4, #240]	; 0xf0
  }
    3148:	add	sp, #272	; 0x110
    314a:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    314c:	mov	r0, r2
    314e:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    3150:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    3154:	mov	r5, r0
    3156:	cmp	r3, #0
    3158:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    315a:	ldr	r2, [r3, #0]
    315c:	ldr	r1, [pc, #180]	; (3214 <MTPStorage_SD::close()+0x198>)
    315e:	ldr	r6, [r2, #64]	; 0x40
    3160:	cmp	r6, r1
    3162:	bne.n	31fe <MTPStorage_SD::close()+0x182>
    3164:	ldr	r0, [r3, #16]
    3166:	cmp	r0, #0
    3168:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    316a:	ldr	r3, [r0, #0]
    316c:	ldr	r3, [r3, #64]	; 0x40
    316e:	cmp	r3, r1
    3170:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    3172:	ldr	r0, [r0, #16]
    3174:	cmp	r0, #0
    3176:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    3178:	ldr	r3, [r0, #0]
    317a:	ldr	r3, [r3, #64]	; 0x40
    317c:	cmp	r3, r1
    317e:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    3180:	ldr	r0, [r0, #16]
    3182:	cmp	r0, #0
    3184:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    3186:	ldr	r3, [r0, #0]
    3188:	ldr	r3, [r3, #64]	; 0x40
    318a:	cmp	r3, r1
    318c:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    318e:	ldr	r0, [r0, #16]
    3190:	cmp	r0, #0
    3192:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    3194:	ldr	r3, [r0, #0]
    3196:	ldr	r3, [r3, #64]	; 0x40
    3198:	cmp	r3, r1
    319a:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    319c:	ldr	r0, [r0, #16]
    319e:	cmp	r0, #0
    31a0:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    31a2:	ldr	r3, [r0, #0]
    31a4:	ldr	r3, [r3, #64]	; 0x40
    31a6:	cmp	r3, r1
    31a8:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    31aa:	ldr	r0, [r0, #16]
    31ac:	cmp	r0, #0
    31ae:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    31b0:	ldr	r3, [r0, #0]
    31b2:	ldr	r3, [r3, #64]	; 0x40
    31b4:	cmp	r3, r1
    31b6:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    31b8:	ldr	r0, [r0, #16]
    31ba:	cmp	r0, #0
    31bc:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    31be:	ldr	r3, [r0, #0]
    31c0:	ldr	r3, [r3, #64]	; 0x40
    31c2:	cmp	r3, r1
    31c4:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    31c6:	ldr	r0, [r0, #16]
    31c8:	cmp	r0, #0
    31ca:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    31cc:	ldr	r3, [r0, #0]
    31ce:	ldr	r3, [r3, #64]	; 0x40
    31d0:	cmp	r3, r1
    31d2:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    31d4:	ldr	r0, [r0, #16]
    31d6:	cmp	r0, #0
    31d8:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    31da:	ldr	r3, [r0, #0]
    31dc:	ldr	r3, [r3, #64]	; 0x40
    31de:	cmp	r3, r1
    31e0:	bne.n	31f0 <MTPStorage_SD::close()+0x174>
    31e2:	ldr	r0, [r0, #16]
    31e4:	cmp	r0, #0
    31e6:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    31e8:	ldr	r3, [r0, #0]
    31ea:	ldr	r3, [r3, #64]	; 0x40
    31ec:	blx	r3
    31ee:	b.n	3126 <MTPStorage_SD::close()+0xaa>
    31f0:	blx	r3
    31f2:	b.n	3126 <MTPStorage_SD::close()+0xaa>
    31f4:	ldr	r6, [r5, #64]	; 0x40
    31f6:	ldr	r1, [pc, #28]	; (3214 <MTPStorage_SD::close()+0x198>)
    31f8:	cmp	r6, r1
    31fa:	mov	r5, r2
    31fc:	beq.n	3126 <MTPStorage_SD::close()+0xaa>
    31fe:	mov	r0, r3
    3200:	blx	r6
    3202:	b.n	3126 <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3204:	mov	r0, r3
    3206:	blx	r2
    3208:	b.n	3150 <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    320a:	movs	r5, #0
    320c:	b.n	31fe <MTPStorage_SD::close()+0x182>
    320e:	nop
    3210:	.word	0x000004f1
    3214:	.word	0x00000501

00003218 <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    3218:	push	{r4, r5, r6, r7, lr}
    321a:	mov	r6, r1
    321c:	sub	sp, #276	; 0x114
    Record tmp = ReadIndexRecord(i);
    321e:	mov	r1, r0

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    3220:	mov	r7, r0
    3222:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    3224:	mov	r0, sp
    3226:	mov	r2, r6

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    3228:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    322a:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==(unsigned)i) 
    322e:	ldr	r1, [sp, #0]
    3230:	cmp	r6, r1
    3232:	beq.n	326a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x52>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    3234:	mov	r3, r5
    3236:	mov	r2, r4
    3238:	mov	r0, r7
    323a:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    323e:	mov	r0, r4
    3240:	bl	15880 <strlen>
    3244:	add	r0, r4
    3246:	ldrb.w	r3, [r0, #-1]
    324a:	cmp	r3, #47	; 0x2f
    324c:	beq.n	3258 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x40>
    324e:	mov	r2, r5
    3250:	ldr	r1, [pc, #36]	; (3278 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    3252:	mov	r0, r4
    3254:	bl	157cc <strlcat>
      strlcat(out, tmp.name,len);
    3258:	mov	r2, r5
    325a:	mov	r0, r4
    325c:	add	r1, sp, #16
    325e:	bl	157cc <strlcat>
      return tmp.store;
    3262:	ldrh.w	r0, [sp, #14]
    }
  }
    3266:	add	sp, #276	; 0x114
    3268:	pop	{r4, r5, r6, r7, pc}
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    326a:	ldr	r3, [pc, #12]	; (3278 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    326c:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==(unsigned)i) 
    { strcpy(out, "/");
    3270:	ldrh	r3, [r3, #0]
    3272:	strh	r3, [r4, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
      strlcat(out, tmp.name,len);
      return tmp.store;
    }
  }
    3274:	add	sp, #276	; 0x114
    3276:	pop	{r4, r5, r6, r7, pc}
    3278:	.word	0x00019334

0000327c <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    327c:	push	{r4, r5, r6, r7, lr}
    327e:	subw	sp, sp, #1044	; 0x414
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    3282:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    3286:	mov	r7, r2
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    3288:	mov	r2, sp
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    328a:	mov	r5, r1
    328c:	mov	r4, r0
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    328e:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    3292:	mov	r6, r0
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3294:	mov	r0, sp
    3296:	bl	15880 <strlen>
    329a:	mov	r1, r0
    329c:	mov	r0, sp
    329e:	bl	11df8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    32a2:	ldr	r0, [pc, #132]	; (3328 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    32a4:	bl	137b0 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    32a8:	mov	r2, r5
    32aa:	mov	r1, r4
    32ac:	add	r0, sp, #768	; 0x300
    32ae:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    32b2:	add	r1, sp, #784	; 0x310
    32b4:	mov.w	r2, #256	; 0x100
    32b8:	add	r0, sp, #512	; 0x200
    32ba:	bl	15820 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    32be:	mov	r1, r7
    32c0:	mov.w	r2, #256	; 0x100
    32c4:	add	r0, sp, #784	; 0x310
    32c6:	bl	15820 <strlcpy>

    WriteIndexRecord(handle, p1);
    32ca:	add	r2, sp, #768	; 0x300
    32cc:	mov	r1, r5
    32ce:	mov	r0, r4
    32d0:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    32d4:	add	r2, sp, #256	; 0x100
    32d6:	mov.w	r3, #256	; 0x100
    32da:	mov	r1, r5
    32dc:	mov	r0, r4
    32de:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    32e2:	add	r0, sp, #256	; 0x100
    32e4:	bl	15880 <strlen>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    32e8:	add.w	r6, r4, r6, lsl #2
    32ec:	mov	r1, r0
    32ee:	add	r0, sp, #256	; 0x100
    32f0:	bl	11df8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    32f4:	ldr	r0, [pc, #48]	; (3328 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    32f6:	bl	137b0 <Print::println()>
    32fa:	ldr	r0, [r6, #88]	; 0x58
    32fc:	ldr	r3, [r0, #0]
    32fe:	add	r2, sp, #256	; 0x100
    3300:	mov	r1, sp
    3302:	ldr	r3, [r3, #12]
    3304:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    3306:	mov	r6, r0
    3308:	cbnz	r0, 3320 <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    330a:	add	r1, sp, #512	; 0x200
    330c:	mov.w	r2, #256	; 0x100
    3310:	add	r0, sp, #784	; 0x310
    3312:	bl	15820 <strlcpy>
    WriteIndexRecord(handle, p1);
    3316:	add	r2, sp, #768	; 0x300
    3318:	mov	r1, r5
    331a:	mov	r0, r4
    331c:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    3320:	mov	r0, r6
    3322:	addw	sp, sp, #1044	; 0x414
    3326:	pop	{r4, r5, r6, r7, pc}
    3328:	.word	0x1fff0b20

0000332c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    332c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    3330:	ldr.w	r3, [r0, #240]	; 0xf0
    3334:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    3336:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    3338:	beq.w	3730 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    333c:	mov	r6, r2
    char filename[MAX_FILENAME_LEN];
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    333e:	mov.w	r3, #256	; 0x100
    3342:	add	r2, sp, #32
    3344:	mov	r4, r0
    3346:	mov	r5, r1
    3348:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    334c:	mov	r7, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    334e:	ldr.w	r0, [r4, #204]	; 0xcc
    3352:	cmp	r0, #0
    3354:	beq.w	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    3358:	ldr	r2, [r0, #0]
    335a:	ldr	r3, [pc, #348]	; (34b8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    335c:	ldr	r2, [r2, #68]	; 0x44
    335e:	cmp	r2, r3
    3360:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3364:	ldr	r0, [r0, #16]
    3366:	cmp	r0, #0
    3368:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    336a:	ldr	r2, [r0, #0]
    336c:	ldr	r2, [r2, #68]	; 0x44
    336e:	cmp	r2, r3
    3370:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3374:	ldr	r0, [r0, #16]
    3376:	cmp	r0, #0
    3378:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    337a:	ldr	r2, [r0, #0]
    337c:	ldr	r2, [r2, #68]	; 0x44
    337e:	cmp	r2, r3
    3380:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3384:	ldr	r0, [r0, #16]
    3386:	cmp	r0, #0
    3388:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    338a:	ldr	r2, [r0, #0]
    338c:	ldr	r2, [r2, #68]	; 0x44
    338e:	cmp	r2, r3
    3390:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    3394:	ldr	r0, [r0, #16]
    3396:	cmp	r0, #0
    3398:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    339a:	ldr	r2, [r0, #0]
    339c:	ldr	r2, [r2, #68]	; 0x44
    339e:	cmp	r2, r3
    33a0:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    33a4:	ldr	r0, [r0, #16]
    33a6:	cmp	r0, #0
    33a8:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    33aa:	ldr	r2, [r0, #0]
    33ac:	ldr	r2, [r2, #68]	; 0x44
    33ae:	cmp	r2, r3
    33b0:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    33b4:	ldr	r0, [r0, #16]
    33b6:	cmp	r0, #0
    33b8:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    33ba:	ldr	r2, [r0, #0]
    33bc:	ldr	r2, [r2, #68]	; 0x44
    33be:	cmp	r2, r3
    33c0:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    33c4:	ldr	r0, [r0, #16]
    33c6:	cmp	r0, #0
    33c8:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    33ca:	ldr	r2, [r0, #0]
    33cc:	ldr	r2, [r2, #68]	; 0x44
    33ce:	cmp	r2, r3
    33d0:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    33d4:	ldr	r0, [r0, #16]
    33d6:	cmp	r0, #0
    33d8:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    33da:	ldr	r2, [r0, #0]
    33dc:	ldr	r2, [r2, #68]	; 0x44
    33de:	cmp	r2, r3
    33e0:	bne.w	3740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    33e4:	ldr	r0, [r0, #16]
    33e6:	cmp	r0, #0
    33e8:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    33ea:	ldr	r3, [r0, #0]
    33ec:	ldr	r3, [r3, #68]	; 0x44
    33ee:	blx	r3

    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    33f0:	cmp	r0, #0
    33f2:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    33f4:	ldr.w	r0, [r4, #204]	; 0xcc
    33f8:	cmp	r0, #0
    33fa:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    33fc:	ldr	r2, [r0, #0]
    33fe:	ldr	r3, [pc, #188]	; (34bc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    3400:	ldr	r2, [r2, #64]	; 0x40
    3402:	cmp	r2, r3
    3404:	bne.w	3744 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3408:	ldr	r0, [r0, #16]
    340a:	cmp	r0, #0
    340c:	beq.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    340e:	ldr	r2, [r0, #0]
    3410:	ldr	r2, [r2, #64]	; 0x40
    3412:	cmp	r2, r3
    3414:	bne.w	3744 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3418:	ldr	r0, [r0, #16]
    341a:	cbz	r0, 3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    341c:	ldr	r2, [r0, #0]
    341e:	ldr	r2, [r2, #64]	; 0x40
    3420:	cmp	r2, r3
    3422:	bne.w	3744 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3426:	ldr	r0, [r0, #16]
    3428:	cbz	r0, 3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    342a:	ldr	r2, [r0, #0]
    342c:	ldr	r2, [r2, #64]	; 0x40
    342e:	cmp	r2, r3
    3430:	bne.w	3744 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3434:	ldr	r0, [r0, #16]
    3436:	cbz	r0, 3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    3438:	ldr	r2, [r0, #0]
    343a:	ldr	r2, [r2, #64]	; 0x40
    343c:	cmp	r2, r3
    343e:	bne.w	3744 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3442:	ldr	r0, [r0, #16]
    3444:	cbz	r0, 3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    3446:	ldr	r2, [r0, #0]
    3448:	ldr	r2, [r2, #64]	; 0x40
    344a:	cmp	r2, r3
    344c:	bne.w	3744 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    3450:	ldr	r0, [r0, #16]
    3452:	cbz	r0, 3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    3454:	ldr	r2, [r0, #0]
    3456:	ldr	r2, [r2, #64]	; 0x40
    3458:	cmp	r2, r3
    345a:	bne.w	3744 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    345e:	ldr	r0, [r0, #16]
    3460:	cbz	r0, 3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    3462:	ldr	r3, [r0, #0]
    3464:	ldr	r3, [r3, #64]	; 0x40
    3466:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3468:	add.w	r7, r4, r7, lsl #2
    346c:	add	r2, sp, #32
    346e:	ldr	r1, [r7, #88]	; 0x58
    3470:	ldr	r3, [r1, #0]
    3472:	add	r0, sp, #12
    3474:	ldr	r7, [r3, #0]
    3476:	uxtb	r3, r6
    3478:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    347a:	ldr.w	r2, [r4, #204]	; 0xcc
    347e:	cbz	r2, 3488 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    3480:	ldr	r3, [r2, #16]
    3482:	subs	r3, #1
    3484:	str	r3, [r2, #16]
    3486:	cbz	r3, 34c4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3488:	ldr	r2, [sp, #28]
    348a:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    348e:	cbz	r2, 34aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    3490:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    3492:	ldr	r3, [pc, #44]	; (34c0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
    3494:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    3496:	adds	r1, #1
    3498:	str	r1, [r2, #16]
    349a:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    349c:	cbz	r1, 34aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    349e:	ldr	r2, [r1, #16]
    34a0:	subs	r2, #1
    34a2:	str	r2, [r1, #16]
    34a4:	cmp	r2, #0
    34a6:	beq.w	3600 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    34aa:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    34ae:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    34b2:	add	sp, #292	; 0x124
    34b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34b8:	.word	0x0000050d
    34bc:	.word	0x00000501
    34c0:	.word	0x00018e14
    34c4:	ldr.w	r7, [r4, #204]	; 0xcc
    34c8:	cmp	r7, #0
    34ca:	beq.n	3488 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    34cc:	ldr	r3, [r7, #0]
    34ce:	ldr	r1, [pc, #680]	; (3778 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    34d0:	ldr	r3, [r3, #32]
    34d2:	cmp	r3, r1
    34d4:	bne.w	3748 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
    34d8:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34da:	ldr	r3, [pc, #672]	; (377c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
    34dc:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34de:	cmp	r0, #0
    34e0:	beq.w	35f6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    34e4:	ldr	r2, [r0, #16]
    34e6:	subs	r2, #1
    34e8:	str	r2, [r0, #16]
    34ea:	cmp	r2, #0
    34ec:	bne.w	35f6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    34f0:	ldr.w	r8, [r7, #16]
    34f4:	cmp.w	r8, #0
    34f8:	beq.n	35f6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    34fa:	ldr.w	r2, [r8]
    34fe:	ldr	r2, [r2, #32]
    3500:	cmp	r2, r1
    3502:	bne.w	3766 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    3506:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    350a:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    350e:	cmp	r0, #0
    3510:	beq.n	35ee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    3512:	ldr	r2, [r0, #16]
    3514:	subs	r2, #1
    3516:	str	r2, [r0, #16]
    3518:	cmp	r2, #0
    351a:	bne.n	35ee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    351c:	ldr.w	r9, [r8, #16]
    3520:	cmp.w	r9, #0
    3524:	beq.n	35ee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    3526:	ldr.w	r2, [r9]
    352a:	ldr	r2, [r2, #32]
    352c:	cmp	r2, r1
    352e:	bne.w	375a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    3532:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3536:	str.w	r3, [r9]
    353a:	ldr.w	lr, [pc, #576]	; 377c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    353e:	cmp	r0, #0
    3540:	beq.n	35e6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    3542:	ldr	r2, [r0, #16]
    3544:	subs	r2, #1
    3546:	str	r2, [r0, #16]
    3548:	cmp	r2, #0
    354a:	bne.n	35e6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    354c:	ldr.w	sl, [r9, #16]
    3550:	cmp.w	sl, #0
    3554:	beq.n	35e6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    3556:	ldr.w	r2, [sl]
    355a:	ldr	r2, [r2, #32]
    355c:	cmp	r2, r1
    355e:	bne.w	3772 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    3562:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3566:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    356a:	cmp	r0, #0
    356c:	beq.n	35de <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    356e:	ldr	r2, [r0, #16]
    3570:	subs	r2, #1
    3572:	str	r2, [r0, #16]
    3574:	cmp	r2, #0
    3576:	bne.n	35de <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    3578:	ldr.w	fp, [sl, #16]
    357c:	cmp.w	fp, #0
    3580:	beq.n	35de <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    3582:	ldr.w	r2, [fp]
    3586:	ldr	r2, [r2, #32]
    3588:	cmp	r2, r1
    358a:	bne.w	3786 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    358e:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3592:	str.w	r3, [fp]
    3596:	ldr	r0, [pc, #484]	; (377c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3598:	cbz	r2, 35d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    359a:	ldr	r3, [r2, #16]
    359c:	subs	r3, #1
    359e:	str	r3, [r2, #16]
    35a0:	cbnz	r3, 35d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    35a2:	ldr.w	r2, [fp, #16]
    35a6:	cbz	r2, 35d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    35a8:	ldr	r3, [r2, #0]
    35aa:	ldr	r3, [r3, #32]
    35ac:	cmp	r3, r1
    35ae:	bne.w	3792 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    35b2:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    35b4:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    35b6:	cbz	r1, 35ce <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    35b8:	ldr	r3, [r1, #16]
    35ba:	subs	r3, #1
    35bc:	str	r3, [r1, #16]
    35be:	cbnz	r3, 35ce <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    35c0:	ldr	r0, [r2, #16]
    35c2:	cbz	r0, 35ce <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    35c4:	ldr	r3, [r0, #0]
    35c6:	str	r2, [sp, #4]
    35c8:	ldr	r3, [r3, #32]
    35ca:	blx	r3
    35cc:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    35ce:	mov	r0, r2
    35d0:	movs	r1, #20
    35d2:	bl	138d0 <operator delete(void*, unsigned int)>
    35d6:	mov	r0, fp
    35d8:	movs	r1, #20
    35da:	bl	138d0 <operator delete(void*, unsigned int)>
    35de:	mov	r0, sl
    35e0:	movs	r1, #20
    35e2:	bl	138d0 <operator delete(void*, unsigned int)>
    35e6:	mov	r0, r9
    35e8:	movs	r1, #20
    35ea:	bl	138d0 <operator delete(void*, unsigned int)>
    35ee:	mov	r0, r8
    35f0:	movs	r1, #20
    35f2:	bl	138d0 <operator delete(void*, unsigned int)>
    35f6:	mov	r0, r7
    35f8:	movs	r1, #20
    35fa:	bl	138d0 <operator delete(void*, unsigned int)>
    35fe:	b.n	3488 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3600:	ldr	r7, [sp, #28]
    3602:	cmp	r7, #0
    3604:	beq.w	34aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    3608:	ldr	r2, [r7, #0]
    360a:	ldr	r1, [pc, #364]	; (3778 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    360c:	ldr	r2, [r2, #32]
    360e:	cmp	r2, r1
    3610:	bne.w	374e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    3614:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3616:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3618:	cmp	r0, #0
    361a:	beq.w	3726 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    361e:	ldr	r2, [r0, #16]
    3620:	subs	r2, #1
    3622:	str	r2, [r0, #16]
    3624:	cmp	r2, #0
    3626:	bne.n	3726 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    3628:	ldr.w	r8, [r7, #16]
    362c:	cmp.w	r8, #0
    3630:	beq.n	3726 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    3632:	ldr.w	r2, [r8]
    3636:	ldr	r2, [r2, #32]
    3638:	cmp	r2, r1
    363a:	bne.w	3760 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    363e:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3642:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3646:	cmp	r0, #0
    3648:	beq.n	371e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    364a:	ldr	r2, [r0, #16]
    364c:	subs	r2, #1
    364e:	str	r2, [r0, #16]
    3650:	cmp	r2, #0
    3652:	bne.n	371e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    3654:	ldr.w	r9, [r8, #16]
    3658:	cmp.w	r9, #0
    365c:	beq.n	371e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    365e:	ldr.w	r2, [r9]
    3662:	ldr	r2, [r2, #32]
    3664:	cmp	r2, r1
    3666:	bne.n	3754 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    3668:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    366c:	str.w	r3, [r9]
    3670:	ldr.w	lr, [pc, #264]	; 377c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3674:	cmp	r0, #0
    3676:	beq.n	3716 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    3678:	ldr	r2, [r0, #16]
    367a:	subs	r2, #1
    367c:	str	r2, [r0, #16]
    367e:	cmp	r2, #0
    3680:	bne.n	3716 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    3682:	ldr.w	sl, [r9, #16]
    3686:	cmp.w	sl, #0
    368a:	beq.n	3716 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    368c:	ldr.w	r2, [sl]
    3690:	ldr	r2, [r2, #32]
    3692:	cmp	r2, r1
    3694:	bne.n	376c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    3696:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    369a:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    369e:	cmp	r0, #0
    36a0:	beq.n	370e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    36a2:	ldr	r2, [r0, #16]
    36a4:	subs	r2, #1
    36a6:	str	r2, [r0, #16]
    36a8:	cmp	r2, #0
    36aa:	bne.n	370e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    36ac:	ldr.w	fp, [sl, #16]
    36b0:	cmp.w	fp, #0
    36b4:	beq.n	370e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    36b6:	ldr.w	r2, [fp]
    36ba:	ldr	r2, [r2, #32]
    36bc:	cmp	r2, r1
    36be:	bne.n	3780 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    36c0:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    36c4:	str.w	r3, [fp]
    36c8:	ldr	r0, [pc, #176]	; (377c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    36ca:	cbz	r2, 3706 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    36cc:	ldr	r3, [r2, #16]
    36ce:	subs	r3, #1
    36d0:	str	r3, [r2, #16]
    36d2:	cbnz	r3, 3706 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    36d4:	ldr.w	r2, [fp, #16]
    36d8:	cbz	r2, 3706 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    36da:	ldr	r3, [r2, #0]
    36dc:	ldr	r3, [r3, #32]
    36de:	cmp	r3, r1
    36e0:	bne.n	378c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    36e2:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    36e4:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    36e6:	cbz	r1, 36fe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    36e8:	ldr	r3, [r1, #16]
    36ea:	subs	r3, #1
    36ec:	str	r3, [r1, #16]
    36ee:	cbnz	r3, 36fe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    36f0:	ldr	r0, [r2, #16]
    36f2:	cbz	r0, 36fe <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    36f4:	ldr	r3, [r0, #0]
    36f6:	str	r2, [sp, #4]
    36f8:	ldr	r3, [r3, #32]
    36fa:	blx	r3
    36fc:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    36fe:	mov	r0, r2
    3700:	movs	r1, #20
    3702:	bl	138d0 <operator delete(void*, unsigned int)>
    3706:	mov	r0, fp
    3708:	movs	r1, #20
    370a:	bl	138d0 <operator delete(void*, unsigned int)>
    370e:	mov	r0, sl
    3710:	movs	r1, #20
    3712:	bl	138d0 <operator delete(void*, unsigned int)>
    3716:	mov	r0, r9
    3718:	movs	r1, #20
    371a:	bl	138d0 <operator delete(void*, unsigned int)>
    371e:	mov	r0, r8
    3720:	movs	r1, #20
    3722:	bl	138d0 <operator delete(void*, unsigned int)>
    3726:	mov	r0, r7
    3728:	movs	r1, #20
    372a:	bl	138d0 <operator delete(void*, unsigned int)>
    372e:	b.n	34aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    3730:	ldr.w	r3, [r0, #236]	; 0xec
    3734:	cmp	r3, r2
    3736:	bne.w	333c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    373a:	add	sp, #292	; 0x124
    373c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3740:	blx	r2
    3742:	b.n	33f0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3744:	blx	r2
    3746:	b.n	3468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3748:	mov	r0, r7
    374a:	blx	r3
    374c:	b.n	3488 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    374e:	mov	r0, r7
    3750:	blx	r2
    3752:	b.n	34aa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    3754:	mov	r0, r9
    3756:	blx	r2
    3758:	b.n	371e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    375a:	mov	r0, r9
    375c:	blx	r2
    375e:	b.n	35ee <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    3760:	mov	r0, r8
    3762:	blx	r2
    3764:	b.n	3726 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    3766:	mov	r0, r8
    3768:	blx	r2
    376a:	b.n	35f6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    376c:	mov	r0, sl
    376e:	blx	r2
    3770:	b.n	3716 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    3772:	mov	r0, sl
    3774:	blx	r2
    3776:	b.n	35e6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    3778:	.word	0x000014c5
    377c:	.word	0x00018e14
    3780:	mov	r0, fp
    3782:	blx	r2
    3784:	b.n	370e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    3786:	mov	r0, fp
    3788:	blx	r2
    378a:	b.n	35de <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    378c:	mov	r0, r2
    378e:	blx	r3
    3790:	b.n	3706 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    3792:	mov	r0, r2
    3794:	blx	r3
    3796:	b.n	35d6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

00003798 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    3798:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    379c:	mov	r5, r0
    379e:	sub	sp, #8
    37a0:	mov	r7, r2
    OpenFileByIndex(handle);
    37a2:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    37a4:	mov	r8, r3
    37a6:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    37aa:	bl	332c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    37ae:	ldr.w	r4, [r5, #204]	; 0xcc
    37b2:	cmp	r4, #0
    37b4:	beq.n	388c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    37b6:	ldr	r0, [r4, #0]
    37b8:	ldr	r2, [pc, #308]	; (38f0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    37ba:	ldr	r6, [r0, #52]	; 0x34
    37bc:	cmp	r6, r2
    37be:	mov.w	r3, #0
    37c2:	bne.n	38bc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x124>
    37c4:	ldr	r1, [r4, #16]
    37c6:	cmp	r1, #0
    37c8:	beq.n	3884 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xec>
    37ca:	ldr	r2, [r1, #0]
    37cc:	ldr.w	sl, [r2, #52]	; 0x34
    37d0:	cmp	sl, r6
    37d2:	bne.n	38c6 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12e>
    37d4:	ldr.w	lr, [r1, #16]
    37d8:	cmp.w	lr, #0
    37dc:	beq.n	3892 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    37de:	ldr.w	r2, [lr]
    37e2:	ldr	r6, [r2, #52]	; 0x34
    37e4:	cmp	r6, sl
    37e6:	bne.n	38d0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x138>
    37e8:	ldr.w	lr, [lr, #16]
    37ec:	cmp.w	lr, #0
    37f0:	beq.n	3892 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    37f2:	ldr.w	r2, [lr]
    37f6:	ldr.w	sl, [r2, #52]	; 0x34
    37fa:	cmp	sl, r6
    37fc:	bne.n	38da <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x142>
    37fe:	ldr.w	lr, [lr, #16]
    3802:	cmp.w	lr, #0
    3806:	beq.n	3892 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    3808:	ldr.w	r3, [lr]
    380c:	ldr	r6, [r3, #52]	; 0x34
    380e:	cmp	r6, sl
    3810:	bne.n	38e4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14c>
    3812:	ldr.w	r6, [lr, #16]
    3816:	cmp	r6, #0
    3818:	beq.n	3892 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    381a:	ldr	r1, [r6, #0]
    381c:	movs	r3, #0
    381e:	str	r3, [sp, #0]
    3820:	mov	r2, r7
    3822:	mov	r0, r6
    3824:	ldr	r1, [r1, #52]	; 0x34
    3826:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    3828:	ldr.w	r4, [r5, #204]	; 0xcc
    382c:	cmp	r4, #0
    382e:	beq.n	388c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3830:	ldr	r2, [r4, #0]
    3832:	ldr	r3, [pc, #192]	; (38f4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    3834:	ldr	r5, [r2, #40]	; 0x28
    3836:	cmp	r5, r3
    3838:	bne.n	389e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    383a:	ldr	r0, [r4, #16]
    383c:	cbz	r0, 388c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    383e:	ldr	r2, [r0, #0]
    3840:	ldr	r4, [r2, #40]	; 0x28
    3842:	cmp	r4, r3
    3844:	bne.n	38ae <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3846:	ldr	r0, [r0, #16]
    3848:	cbz	r0, 388c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    384a:	ldr	r2, [r0, #0]
    384c:	ldr	r4, [r2, #40]	; 0x28
    384e:	cmp	r4, r3
    3850:	bne.n	38ae <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3852:	ldr	r0, [r0, #16]
    3854:	cbz	r0, 388c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3856:	ldr	r2, [r0, #0]
    3858:	ldr	r4, [r2, #40]	; 0x28
    385a:	cmp	r4, r3
    385c:	bne.n	38ae <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    385e:	ldr	r0, [r0, #16]
    3860:	cbz	r0, 388c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3862:	ldr	r2, [r0, #0]
    3864:	ldr	r4, [r2, #40]	; 0x28
    3866:	cmp	r4, r3
    3868:	bne.n	38ae <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    386a:	ldr	r0, [r0, #16]
    386c:	cbz	r0, 388c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    386e:	ldr	r2, [r0, #0]
    3870:	ldr	r4, [r2, #40]	; 0x28
    3872:	cmp	r4, r3
    3874:	bne.n	38ae <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3876:	ldr	r0, [r0, #16]
    3878:	cbz	r0, 388c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    387a:	ldr	r3, [r0, #0]
    387c:	mov	r2, r9
    387e:	mov	r1, r8
    3880:	ldr	r3, [r3, #40]	; 0x28
    3882:	b.n	38a6 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10e>
    3884:	ldr	r5, [r0, #40]	; 0x28
    3886:	ldr	r3, [pc, #108]	; (38f4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    3888:	cmp	r5, r3
    388a:	bne.n	389e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    388c:	add	sp, #8
    388e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3892:	ldr	r5, [r0, #40]	; 0x28
    3894:	ldr	r3, [pc, #92]	; (38f4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    3896:	cmp	r5, r3
    3898:	bne.n	389e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    389a:	mov	r0, r1
    389c:	b.n	383e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa6>
    389e:	mov	r2, r9
    38a0:	mov	r1, r8
    38a2:	mov	r0, r4
    38a4:	mov	r3, r5
    38a6:	add	sp, #8
    38a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38ac:	bx	r3
    38ae:	mov	r2, r9
    38b0:	mov	r1, r8
    38b2:	mov	r3, r4
    38b4:	add	sp, #8
    38b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38ba:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    38bc:	str	r3, [sp, #0]
    38be:	mov	r2, r7
    38c0:	mov	r0, r4
    38c2:	blx	r6
    38c4:	b.n	3828 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    38c6:	str	r3, [sp, #0]
    38c8:	mov	r2, r7
    38ca:	mov	r0, r1
    38cc:	blx	sl
    38ce:	b.n	3828 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    38d0:	str	r3, [sp, #0]
    38d2:	mov	r2, r7
    38d4:	mov	r0, lr
    38d6:	blx	r6
    38d8:	b.n	3828 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    38da:	str	r3, [sp, #0]
    38dc:	mov	r2, r7
    38de:	mov	r0, lr
    38e0:	blx	sl
    38e2:	b.n	3828 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    38e4:	movs	r3, #0
    38e6:	mov	r2, r7
    38e8:	mov	r0, lr
    38ea:	str	r3, [sp, #0]
    38ec:	blx	r6
    38ee:	b.n	3828 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    38f0:	.word	0x000004c9
    38f4:	.word	0x0000047d

000038f8 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    DeleteObject(object);
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    38f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    38fc:	cmp.w	r2, #4294967295
    3900:	ite	ne
    3902:	movne	r6, r2
    3904:	moveq	r6, r1
    DeleteObject(object);
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    3906:	sub.w	sp, sp, #800	; 0x320
    390a:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    390c:	mov	r2, r6
    DeleteObject(object);
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    390e:	mov	r7, r1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    3910:	mov	r1, r0
    3912:	add	r0, sp, #256	; 0x100
    DeleteObject(object);
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    3914:	mov	r8, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    3916:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    391a:	ldr	r1, [sp, #824]	; 0x338
    391c:	mov.w	r2, #256	; 0x100
    3920:	add	r0, sp, #544	; 0x220
    3922:	bl	15820 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3926:	ldr.w	r5, [r4, #244]	; 0xf4
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    392a:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    392e:	ldr	r2, [sp, #260]	; 0x104
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    3930:	strh.w	r3, [sp, #542]	; 0x21e
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3934:	adds	r1, r5, #1
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    3936:	movs	r3, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3938:	str.w	r1, [r4, #244]	; 0xf4
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    393c:	str	r3, [sp, #532]	; 0x214
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    393e:	mov	r1, r5
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    3940:	movs	r3, #1
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    3942:	str	r2, [sp, #536]	; 0x218
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3944:	mov	r0, r4
    3946:	add	r2, sp, #528	; 0x210
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    3948:	str	r6, [sp, #528]	; 0x210
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    394a:	strb.w	r8, [sp, #540]	; 0x21c
    // New folder is empty, scanned = true.
    r.scanned = 1;
    394e:	strb.w	r3, [sp, #541]	; 0x21d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3952:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    3956:	mov	r1, r6
    3958:	add	r2, sp, #256	; 0x100
    395a:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    395c:	str	r5, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    395e:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    3962:	cmp.w	r8, #0
    3966:	bne.n	397c <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x84>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    3968:	mov	r0, r4
    396a:	movs	r2, #2
    396c:	mov	r1, r5
    396e:	bl	332c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    3972:	mov	r0, r5
    3974:	add.w	sp, sp, #800	; 0x320
    3978:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    397c:	mov	r0, r4
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    397e:	add.w	r4, r4, r7, lsl #2
    3982:	mov	r2, sp
    3984:	mov	r1, r5
    3986:	mov.w	r3, #256	; 0x100
    398a:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    398e:	ldr	r0, [r4, #88]	; 0x58
    3990:	ldr	r3, [r0, #0]
    3992:	mov	r1, sp
    3994:	ldr	r3, [r3, #8]
    3996:	blx	r3
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    3998:	mov	r0, r5
    399a:	add.w	sp, sp, #800	; 0x320
    399e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39a2:	nop

000039a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    39a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39a8:	cmp.w	r2, #4294967295
    39ac:	ite	ne
    39ae:	movne	r6, r2
    39b0:	moveq	r6, r1
    39b2:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    39b6:	mov	r1, r0
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    39b8:	mov	r4, r0
    
    Record record = ReadIndexRecord(i);
    39ba:	mov	r2, r6
    39bc:	add	r0, sp, #16
    39be:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    39c2:	ldrb.w	r3, [sp, #28]
    39c6:	cbz	r3, 39ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    39c8:	ldrb.w	r2, [sp, #29]
    39cc:	cbz	r2, 39d6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    39ce:	add.w	sp, sp, #564	; 0x234
    39d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    39d6:	mov	r0, r4
    39d8:	mov	r1, r6
    39da:	bl	332c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    39de:	ldr.w	r0, [r4, #204]	; 0xcc
    39e2:	cmp	r0, #0
    39e4:	beq.n	39ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    39e6:	ldr	r3, [r0, #0]
    39e8:	ldr.w	r8, [pc, #892]	; 3d68 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c4>
    39ec:	ldr	r3, [r3, #68]	; 0x44
    39ee:	cmp	r3, r8
    39f0:	bne.n	3aac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    39f2:	ldr	r0, [r0, #16]
    39f4:	cmp	r0, #0
    39f6:	beq.n	39ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    39f8:	ldr	r3, [r0, #0]
    39fa:	ldr	r3, [r3, #68]	; 0x44
    39fc:	cmp	r3, r8
    39fe:	bne.n	3aac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3a00:	ldr	r0, [r0, #16]
    3a02:	cmp	r0, #0
    3a04:	beq.n	39ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3a06:	ldr	r3, [r0, #0]
    3a08:	ldr	r3, [r3, #68]	; 0x44
    3a0a:	cmp	r3, r8
    3a0c:	bne.n	3aac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3a0e:	ldr	r0, [r0, #16]
    3a10:	cmp	r0, #0
    3a12:	beq.n	39ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3a14:	ldr	r3, [r0, #0]
    3a16:	ldr	r3, [r3, #68]	; 0x44
    3a18:	cmp	r3, r8
    3a1a:	bne.n	3aac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3a1c:	ldr	r0, [r0, #16]
    3a1e:	cmp	r0, #0
    3a20:	beq.n	39ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3a22:	ldr	r3, [r0, #0]
    3a24:	ldr	r3, [r3, #68]	; 0x44
    3a26:	cmp	r3, r8
    3a28:	bne.n	3aac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3a2a:	ldr	r0, [r0, #16]
    3a2c:	cmp	r0, #0
    3a2e:	beq.n	39ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3a30:	ldr	r3, [r0, #0]
    3a32:	ldr	r3, [r3, #68]	; 0x44
    3a34:	blx	r3
      if (!sd_isOpen(file_)) return;
    3a36:	cmp	r0, #0
    3a38:	beq.n	39ce <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3a3a:	ldr.w	r9, [pc, #804]	; 3d60 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>
    3a3e:	ldr.w	fp, [pc, #812]	; 3d6c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    3a42:	movs	r5, #0
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3a44:	ldr.w	r1, [r4, #204]	; 0xcc
    3a48:	cmp	r1, #0
    3a4a:	beq.n	3ab0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3a4c:	ldr	r3, [r1, #0]
    3a4e:	ldr	r3, [r3, #80]	; 0x50
    3a50:	cmp	r3, fp
    3a52:	bne.w	3f66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3a56:	ldr	r1, [r1, #16]
    3a58:	cbz	r1, 3ab0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3a5a:	ldr	r3, [r1, #0]
    3a5c:	ldr	r3, [r3, #80]	; 0x50
    3a5e:	cmp	r3, fp
    3a60:	bne.w	3f66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3a64:	ldr	r1, [r1, #16]
    3a66:	cbz	r1, 3ab0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3a68:	ldr	r3, [r1, #0]
    3a6a:	ldr	r3, [r3, #80]	; 0x50
    3a6c:	cmp	r3, fp
    3a6e:	bne.w	3f66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3a72:	ldr	r1, [r1, #16]
    3a74:	cbz	r1, 3ab0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3a76:	ldr	r3, [r1, #0]
    3a78:	ldr	r3, [r3, #80]	; 0x50
    3a7a:	cmp	r3, fp
    3a7c:	bne.w	3f66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3a80:	ldr	r1, [r1, #16]
    3a82:	cbz	r1, 3ab0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3a84:	ldr	r3, [r1, #0]
    3a86:	ldr	r3, [r3, #80]	; 0x50
    3a88:	cmp	r3, fp
    3a8a:	bne.w	3f66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3a8e:	ldr	r1, [r1, #16]
    3a90:	cbz	r1, 3ab0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3a92:	ldr	r3, [r1, #0]
    3a94:	ldr	r3, [r3, #80]	; 0x50
    3a96:	cmp	r3, fp
    3a98:	bne.w	3f66 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3a9c:	ldr	r1, [r1, #16]
    3a9e:	cbz	r1, 3ab0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3aa0:	ldr	r3, [r1, #0]
    3aa2:	movs	r2, #0
    3aa4:	ldr	r3, [r3, #80]	; 0x50
    3aa6:	add	r0, sp, #288	; 0x120
    3aa8:	blx	r3
    3aaa:	b.n	3ac6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3aac:	blx	r3
    3aae:	b.n	3a36 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x92>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    3ab0:	movs	r3, #0
    3ab2:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3ab6:	str.w	r9, [sp, #288]	; 0x120
    3aba:	strb.w	r3, [sp, #292]	; 0x124
    3abe:	strb.w	r3, [sp, #300]	; 0x12c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    3ac2:	str	r3, [sp, #304]	; 0x130
    3ac4:	str	r2, [sp, #296]	; 0x128
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3ac6:	ldr.w	r2, [r4, #224]	; 0xe0
    3aca:	cmp	r2, #0
    3acc:	beq.n	3b62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3ace:	ldr	r3, [r2, #16]
    3ad0:	subs	r3, #1
    3ad2:	str	r3, [r2, #16]
    3ad4:	cmp	r3, #0
    3ad6:	bne.n	3b62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3ad8:	ldr.w	r7, [r4, #224]	; 0xe0
    3adc:	cmp	r7, #0
    3ade:	beq.n	3b62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3ae0:	ldr	r3, [r7, #0]
    3ae2:	ldr	r0, [pc, #632]	; (3d5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    3ae4:	ldr	r3, [r3, #32]
    3ae6:	cmp	r3, r0
    3ae8:	bne.w	3f88 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e4>
    3aec:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3aee:	str.w	r9, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3af2:	cbz	r2, 3b5a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3af4:	ldr	r3, [r2, #16]
    3af6:	subs	r3, #1
    3af8:	str	r3, [r2, #16]
    3afa:	cbnz	r3, 3b5a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3afc:	ldr.w	sl, [r7, #16]
    3b00:	cmp.w	sl, #0
    3b04:	beq.n	3b5a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3b06:	ldr.w	r3, [sl]
    3b0a:	ldr	r3, [r3, #32]
    3b0c:	cmp	r3, r0
    3b0e:	bne.w	4156 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b2>
    3b12:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b16:	ldr	r3, [pc, #584]	; (3d60 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    3b18:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b1c:	cbz	r2, 3b52 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3b1e:	ldr	r3, [r2, #16]
    3b20:	subs	r3, #1
    3b22:	str	r3, [r2, #16]
    3b24:	cbnz	r3, 3b52 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3b26:	ldr.w	r3, [sl, #16]
    3b2a:	cbz	r3, 3b52 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3b2c:	ldr	r2, [r3, #0]
    3b2e:	ldr	r2, [r2, #32]
    3b30:	cmp	r2, r0
    3b32:	bne.w	4168 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
    3b36:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b38:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b3c:	cbz	r1, 3b4a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3b3e:	ldr	r2, [r1, #16]
    3b40:	subs	r2, #1
    3b42:	str	r2, [r1, #16]
    3b44:	cmp	r2, #0
    3b46:	beq.w	3fa0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5fc>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3b4a:	mov	r0, r3
    3b4c:	movs	r1, #20
    3b4e:	bl	138d0 <operator delete(void*, unsigned int)>
    3b52:	mov	r0, sl
    3b54:	movs	r1, #20
    3b56:	bl	138d0 <operator delete(void*, unsigned int)>
    3b5a:	mov	r0, r7
    3b5c:	movs	r1, #20
    3b5e:	bl	138d0 <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3b62:	ldr	r3, [sp, #304]	; 0x130
    3b64:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    3b68:	cmp	r3, #0
    3b6a:	beq.n	3c0e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3b6c:	ldr	r2, [r3, #16]
    3b6e:	adds	r2, #1
    3b70:	str	r2, [r3, #16]
    3b72:	ldr	r2, [sp, #304]	; 0x130
		return *this;
	}
	virtual ~File() {
    3b74:	str.w	r9, [sp, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b78:	cmp	r2, #0
    3b7a:	beq.n	3c0e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3b7c:	ldr	r3, [r2, #16]
    3b7e:	subs	r3, #1
    3b80:	str	r3, [r2, #16]
    3b82:	cmp	r3, #0
    3b84:	bne.n	3c0e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3b86:	ldr	r7, [sp, #304]	; 0x130
    3b88:	cmp	r7, #0
    3b8a:	beq.n	3c0e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3b8c:	ldr	r3, [r7, #0]
    3b8e:	ldr	r0, [pc, #460]	; (3d5c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    3b90:	ldr	r3, [r3, #32]
    3b92:	cmp	r3, r0
    3b94:	bne.w	3f82 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5de>
    3b98:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3b9a:	ldr	r3, [pc, #452]	; (3d60 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    3b9c:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3b9e:	cbz	r2, 3c06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3ba0:	ldr	r3, [r2, #16]
    3ba2:	subs	r3, #1
    3ba4:	str	r3, [r2, #16]
    3ba6:	cbnz	r3, 3c06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3ba8:	ldr.w	sl, [r7, #16]
    3bac:	cmp.w	sl, #0
    3bb0:	beq.n	3c06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3bb2:	ldr.w	r3, [sl]
    3bb6:	ldr	r3, [r3, #32]
    3bb8:	cmp	r3, r0
    3bba:	bne.w	415c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b8>
    3bbe:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3bc2:	ldr	r3, [pc, #412]	; (3d60 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    3bc4:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3bc8:	cbz	r2, 3bfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    3bca:	ldr	r3, [r2, #16]
    3bcc:	subs	r3, #1
    3bce:	str	r3, [r2, #16]
    3bd0:	cbnz	r3, 3bfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    3bd2:	ldr.w	r3, [sl, #16]
    3bd6:	cbz	r3, 3bfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    3bd8:	ldr	r2, [r3, #0]
    3bda:	ldr	r2, [r2, #32]
    3bdc:	cmp	r2, r0
    3bde:	bne.w	4162 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7be>
    3be2:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3be4:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3be8:	cbz	r1, 3bf6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    3bea:	ldr	r2, [r1, #16]
    3bec:	subs	r2, #1
    3bee:	str	r2, [r1, #16]
    3bf0:	cmp	r2, #0
    3bf2:	beq.w	407e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6da>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3bf6:	mov	r0, r3
    3bf8:	movs	r1, #20
    3bfa:	bl	138d0 <operator delete(void*, unsigned int)>
    3bfe:	mov	r0, sl
    3c00:	movs	r1, #20
    3c02:	bl	138d0 <operator delete(void*, unsigned int)>
    3c06:	mov	r0, r7
    3c08:	movs	r1, #20
    3c0a:	bl	138d0 <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3c0e:	ldr.w	r0, [r4, #224]	; 0xe0
    3c12:	cmp	r0, #0
    3c14:	beq.w	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c18:	ldr	r3, [r0, #0]
    3c1a:	ldr	r3, [r3, #68]	; 0x44
    3c1c:	cmp	r3, r8
    3c1e:	bne.w	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3c22:	ldr	r0, [r0, #16]
    3c24:	cmp	r0, #0
    3c26:	beq.w	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c2a:	ldr	r3, [r0, #0]
    3c2c:	ldr	r3, [r3, #68]	; 0x44
    3c2e:	cmp	r3, r8
    3c30:	bne.w	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3c34:	ldr	r0, [r0, #16]
    3c36:	cmp	r0, #0
    3c38:	beq.w	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c3c:	ldr	r3, [r0, #0]
    3c3e:	ldr	r3, [r3, #68]	; 0x44
    3c40:	cmp	r3, r8
    3c42:	bne.w	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3c46:	ldr	r0, [r0, #16]
    3c48:	cmp	r0, #0
    3c4a:	beq.n	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c4c:	ldr	r3, [r0, #0]
    3c4e:	ldr	r3, [r3, #68]	; 0x44
    3c50:	cmp	r3, r8
    3c52:	bne.w	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3c56:	ldr	r0, [r0, #16]
    3c58:	cmp	r0, #0
    3c5a:	beq.n	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c5c:	ldr	r3, [r0, #0]
    3c5e:	ldr	r3, [r3, #68]	; 0x44
    3c60:	cmp	r3, r8
    3c62:	bne.n	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3c64:	ldr	r0, [r0, #16]
    3c66:	cmp	r0, #0
    3c68:	beq.n	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c6a:	ldr	r3, [r0, #0]
    3c6c:	ldr	r3, [r3, #68]	; 0x44
    3c6e:	cmp	r3, r8
    3c70:	bne.n	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3c72:	ldr	r0, [r0, #16]
    3c74:	cmp	r0, #0
    3c76:	beq.n	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c78:	ldr	r3, [r0, #0]
    3c7a:	ldr	r3, [r3, #68]	; 0x44
    3c7c:	cmp	r3, r8
    3c7e:	bne.n	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3c80:	ldr	r0, [r0, #16]
    3c82:	cmp	r0, #0
    3c84:	beq.n	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c86:	ldr	r3, [r0, #0]
    3c88:	ldr	r3, [r3, #68]	; 0x44
    3c8a:	cmp	r3, r8
    3c8c:	bne.n	3d58 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3c8e:	ldr	r0, [r0, #16]
    3c90:	cmp	r0, #0
    3c92:	beq.n	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3c94:	ldr	r3, [r0, #0]
    3c96:	ldr	r3, [r3, #68]	; 0x44
    3c98:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    3c9a:	cmp	r0, #0
    3c9c:	beq.n	3d3e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3c9e:	ldr.w	r3, [r4, #224]	; 0xe0

        Record r;
        r.store = record.store;
    3ca2:	ldrh.w	r2, [sp, #30]
        r.parent = i;
    3ca6:	str	r6, [sp, #288]	; 0x120
        r.sibling = sibling;
    3ca8:	str	r5, [sp, #296]	; 0x128
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    3caa:	strh.w	r2, [sp, #302]	; 0x12e
    3cae:	cmp	r3, #0
    3cb0:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3cb4:	ldr	r1, [r3, #0]
    3cb6:	ldr	r2, [pc, #172]	; (3d64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c0>)
    3cb8:	ldr	r1, [r1, #76]	; 0x4c
    3cba:	cmp	r1, r2
    3cbc:	bne.n	3d70 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>
    3cbe:	ldr	r0, [r3, #16]
    3cc0:	cmp	r0, #0
    3cc2:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3cc6:	ldr	r1, [r0, #0]
    3cc8:	ldr	r1, [r1, #76]	; 0x4c
    3cca:	cmp	r1, r2
    3ccc:	bne.n	3d72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3cce:	ldr	r0, [r0, #16]
    3cd0:	cmp	r0, #0
    3cd2:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3cd6:	ldr	r1, [r0, #0]
    3cd8:	ldr	r1, [r1, #76]	; 0x4c
    3cda:	cmp	r1, r2
    3cdc:	bne.n	3d72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3cde:	ldr	r0, [r0, #16]
    3ce0:	cmp	r0, #0
    3ce2:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3ce6:	ldr	r1, [r0, #0]
    3ce8:	ldr	r1, [r1, #76]	; 0x4c
    3cea:	cmp	r1, r2
    3cec:	bne.n	3d72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3cee:	ldr	r0, [r0, #16]
    3cf0:	cmp	r0, #0
    3cf2:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3cf6:	ldr	r1, [r0, #0]
    3cf8:	ldr	r1, [r1, #76]	; 0x4c
    3cfa:	cmp	r1, r2
    3cfc:	bne.n	3d72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3cfe:	ldr	r0, [r0, #16]
    3d00:	cmp	r0, #0
    3d02:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3d06:	ldr	r1, [r0, #0]
    3d08:	ldr	r1, [r1, #76]	; 0x4c
    3d0a:	cmp	r1, r2
    3d0c:	bne.n	3d72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3d0e:	ldr	r0, [r0, #16]
    3d10:	cmp	r0, #0
    3d12:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3d16:	ldr	r1, [r0, #0]
    3d18:	ldr	r1, [r1, #76]	; 0x4c
    3d1a:	cmp	r1, r2
    3d1c:	bne.n	3d72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3d1e:	ldr	r0, [r0, #16]
    3d20:	cmp	r0, #0
    3d22:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3d26:	ldr	r1, [r0, #0]
    3d28:	ldr	r1, [r1, #76]	; 0x4c
    3d2a:	cmp	r1, r2
    3d2c:	bne.n	3d72 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    3d2e:	ldr	r0, [r0, #16]
    3d30:	cmp	r0, #0
    3d32:	beq.w	3eda <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3d36:	ldr	r3, [r0, #0]
    3d38:	ldr	r3, [r3, #76]	; 0x4c
    3d3a:	blx	r3
    3d3c:	b.n	3d74 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3d3e:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    3d40:	mov	r1, r6
    3d42:	mov	r0, r4
    3d44:	add	r2, sp, #16
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    3d46:	str	r5, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3d48:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    3d4c:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    3d50:	add.w	sp, sp, #564	; 0x234
    3d54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3d58:	blx	r3
    3d5a:	b.n	3c9a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2f6>
    3d5c:	.word	0x000014c5
    3d60:	.word	0x00018e14
    3d64:	.word	0x0000052d
    3d68:	.word	0x0000050d
    3d6c:	.word	0x00000539
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3d70:	mov	r0, r3
    3d72:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3d74:	strb.w	r0, [sp, #300]	; 0x12c
    3d78:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3d7c:	cmp	r0, #0
    3d7e:	beq.w	3ee0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53c>
    3d82:	movs	r0, #0
        r.scanned = false;
    3d84:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3d86:	str	r0, [sp, #292]	; 0x124
        r.scanned = false;
    3d88:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3d8c:	cmp	r3, #0
    3d8e:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3d92:	ldr	r1, [r3, #0]
    3d94:	ldr	r2, [pc, #504]	; (3f90 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    3d96:	ldr	r1, [r1, #72]	; 0x48
    3d98:	cmp	r1, r2
    3d9a:	bne.w	3f5a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    3d9e:	ldr	r0, [r3, #16]
    3da0:	cmp	r0, #0
    3da2:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3da6:	ldr	r3, [r0, #0]
    3da8:	ldr	r3, [r3, #72]	; 0x48
    3daa:	cmp	r3, r2
    3dac:	bne.n	3e20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3dae:	ldr	r0, [r0, #16]
    3db0:	cmp	r0, #0
    3db2:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3db6:	ldr	r3, [r0, #0]
    3db8:	ldr	r3, [r3, #72]	; 0x48
    3dba:	cmp	r3, r2
    3dbc:	bne.n	3e20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3dbe:	ldr	r0, [r0, #16]
    3dc0:	cmp	r0, #0
    3dc2:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3dc6:	ldr	r3, [r0, #0]
    3dc8:	ldr	r3, [r3, #72]	; 0x48
    3dca:	cmp	r3, r2
    3dcc:	bne.n	3e20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3dce:	ldr	r0, [r0, #16]
    3dd0:	cmp	r0, #0
    3dd2:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3dd6:	ldr	r3, [r0, #0]
    3dd8:	ldr	r3, [r3, #72]	; 0x48
    3dda:	cmp	r3, r2
    3ddc:	bne.n	3e20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3dde:	ldr	r0, [r0, #16]
    3de0:	cmp	r0, #0
    3de2:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3de6:	ldr	r3, [r0, #0]
    3de8:	ldr	r3, [r3, #72]	; 0x48
    3dea:	cmp	r3, r2
    3dec:	bne.n	3e20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3dee:	ldr	r0, [r0, #16]
    3df0:	cmp	r0, #0
    3df2:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3df6:	ldr	r3, [r0, #0]
    3df8:	ldr	r3, [r3, #72]	; 0x48
    3dfa:	cmp	r3, r2
    3dfc:	bne.n	3e20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3dfe:	ldr	r0, [r0, #16]
    3e00:	cmp	r0, #0
    3e02:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3e06:	ldr	r3, [r0, #0]
    3e08:	ldr	r3, [r3, #72]	; 0x48
    3e0a:	cmp	r3, r2
    3e0c:	bne.n	3e20 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    3e0e:	ldr	r0, [r0, #16]
    3e10:	cmp	r0, #0
    3e12:	beq.w	3f62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3e16:	ldr	r3, [r0, #0]
    3e18:	ldr	r3, [r3, #72]	; 0x48
    3e1a:	blx	r3
    3e1c:	mov	r1, r0
    3e1e:	b.n	3e24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    3e20:	blx	r3
    3e22:	mov	r1, r0
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
    3e24:	mov.w	r2, #256	; 0x100
    3e28:	add	r0, sp, #304	; 0x130
    3e2a:	bl	15820 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3e2e:	ldr.w	r5, [r4, #244]	; 0xf4
    3e32:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    3e34:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3e36:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    3e3a:	mov	r1, r5
    3e3c:	add	r2, sp, #288	; 0x120
    3e3e:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3e42:	ldr.w	r0, [r4, #224]	; 0xe0
    3e46:	cmp	r0, #0
    3e48:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3e4c:	ldr	r2, [r0, #0]
    3e4e:	ldr	r3, [pc, #324]	; (3f94 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>)
    3e50:	ldr	r2, [r2, #64]	; 0x40
    3e52:	cmp	r2, r3
    3e54:	bne.n	3ed6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3e56:	ldr	r0, [r0, #16]
    3e58:	cmp	r0, #0
    3e5a:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3e5e:	ldr	r2, [r0, #0]
    3e60:	ldr	r2, [r2, #64]	; 0x40
    3e62:	cmp	r2, r3
    3e64:	bne.n	3ed6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3e66:	ldr	r0, [r0, #16]
    3e68:	cmp	r0, #0
    3e6a:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3e6e:	ldr	r2, [r0, #0]
    3e70:	ldr	r2, [r2, #64]	; 0x40
    3e72:	cmp	r2, r3
    3e74:	bne.n	3ed6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3e76:	ldr	r0, [r0, #16]
    3e78:	cmp	r0, #0
    3e7a:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3e7e:	ldr	r2, [r0, #0]
    3e80:	ldr	r2, [r2, #64]	; 0x40
    3e82:	cmp	r2, r3
    3e84:	bne.n	3ed6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3e86:	ldr	r0, [r0, #16]
    3e88:	cmp	r0, #0
    3e8a:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3e8e:	ldr	r2, [r0, #0]
    3e90:	ldr	r2, [r2, #64]	; 0x40
    3e92:	cmp	r2, r3
    3e94:	bne.n	3ed6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3e96:	ldr	r0, [r0, #16]
    3e98:	cmp	r0, #0
    3e9a:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3e9e:	ldr	r2, [r0, #0]
    3ea0:	ldr	r2, [r2, #64]	; 0x40
    3ea2:	cmp	r2, r3
    3ea4:	bne.n	3ed6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3ea6:	ldr	r0, [r0, #16]
    3ea8:	cmp	r0, #0
    3eaa:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3eae:	ldr	r2, [r0, #0]
    3eb0:	ldr	r2, [r2, #64]	; 0x40
    3eb2:	cmp	r2, r3
    3eb4:	bne.n	3ed6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3eb6:	ldr	r0, [r0, #16]
    3eb8:	cmp	r0, #0
    3eba:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3ebe:	ldr	r2, [r0, #0]
    3ec0:	ldr	r2, [r2, #64]	; 0x40
    3ec2:	cmp	r2, r3
    3ec4:	bne.n	3ed6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3ec6:	ldr	r0, [r0, #16]
    3ec8:	cmp	r0, #0
    3eca:	beq.w	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3ece:	ldr	r3, [r0, #0]
    3ed0:	ldr	r3, [r3, #64]	; 0x40
    3ed2:	blx	r3
    3ed4:	b.n	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3ed6:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    3ed8:	b.n	3a44 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3eda:	movs	r2, #0
    3edc:	strb.w	r2, [sp, #300]	; 0x12c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3ee0:	cmp	r3, #0
    3ee2:	beq.n	3f78 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d4>
    3ee4:	ldr	r1, [r3, #0]
    3ee6:	ldr	r2, [pc, #176]	; (3f98 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f4>)
    3ee8:	ldr	r1, [r1, #60]	; 0x3c
    3eea:	cmp	r1, r2
    3eec:	bne.n	3f6e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    3eee:	ldr	r0, [r3, #16]
    3ef0:	cbz	r0, 3f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3ef2:	ldr	r1, [r0, #0]
    3ef4:	ldr	r1, [r1, #60]	; 0x3c
    3ef6:	cmp	r1, r2
    3ef8:	bne.n	3f70 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3efa:	ldr	r0, [r0, #16]
    3efc:	cbz	r0, 3f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3efe:	ldr	r1, [r0, #0]
    3f00:	ldr	r1, [r1, #60]	; 0x3c
    3f02:	cmp	r1, r2
    3f04:	bne.n	3f70 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3f06:	ldr	r0, [r0, #16]
    3f08:	cbz	r0, 3f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3f0a:	ldr	r1, [r0, #0]
    3f0c:	ldr	r1, [r1, #60]	; 0x3c
    3f0e:	cmp	r1, r2
    3f10:	bne.n	3f70 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3f12:	ldr	r0, [r0, #16]
    3f14:	cbz	r0, 3f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3f16:	ldr	r1, [r0, #0]
    3f18:	ldr	r1, [r1, #60]	; 0x3c
    3f1a:	cmp	r1, r2
    3f1c:	bne.n	3f70 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3f1e:	ldr	r0, [r0, #16]
    3f20:	cbz	r0, 3f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3f22:	ldr	r1, [r0, #0]
    3f24:	ldr	r1, [r1, #60]	; 0x3c
    3f26:	cmp	r1, r2
    3f28:	bne.n	3f70 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3f2a:	ldr	r0, [r0, #16]
    3f2c:	cbz	r0, 3f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3f2e:	ldr	r1, [r0, #0]
    3f30:	ldr	r1, [r1, #60]	; 0x3c
    3f32:	cmp	r1, r2
    3f34:	bne.n	3f70 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3f36:	ldr	r0, [r0, #16]
    3f38:	cbz	r0, 3f46 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3f3a:	ldr	r3, [r0, #0]
    3f3c:	ldr	r3, [r3, #60]	; 0x3c
    3f3e:	blx	r3
    3f40:	ldr.w	r3, [r4, #224]	; 0xe0
    3f44:	b.n	3d84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3f46:	movs	r2, #0
        r.scanned = false;
    3f48:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3f4c:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3f4e:	str	r2, [sp, #292]	; 0x124
    3f50:	ldr	r1, [r1, #72]	; 0x48
    3f52:	ldr	r2, [pc, #60]	; (3f90 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    3f54:	cmp	r1, r2
    3f56:	beq.w	3d9e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3fa>
    3f5a:	mov	r0, r3
    3f5c:	blx	r1
    3f5e:	mov	r1, r0
    3f60:	b.n	3e24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    3f62:	ldr	r1, [pc, #56]	; (3f9c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3f64:	b.n	3e24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3f66:	movs	r2, #0
    3f68:	add	r0, sp, #288	; 0x120
    3f6a:	blx	r3
    3f6c:	b.n	3ac6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    3f6e:	mov	r0, r3
    3f70:	blx	r1
    3f72:	ldr.w	r3, [r4, #224]	; 0xe0
    3f76:	b.n	3d84 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
    3f78:	str	r3, [sp, #292]	; 0x124
        r.scanned = false;
    3f7a:	strb.w	r3, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3f7e:	ldr	r1, [pc, #28]	; (3f9c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3f80:	b.n	3e24 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f82:	mov	r0, r7
    3f84:	blx	r3
    3f86:	b.n	3c0e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3f88:	mov	r0, r7
    3f8a:	blx	r3
    3f8c:	b.n	3b62 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3f8e:	nop
    3f90:	.word	0x00000519
    3f94:	.word	0x00000501
    3f98:	.word	0x000004f1
    3f9c:	.word	0x00019064
    3fa0:	ldr	r2, [r3, #16]
    3fa2:	cmp	r2, #0
    3fa4:	beq.w	3b4a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3fa8:	ldr	r1, [r2, #0]
    3faa:	ldr	r1, [r1, #32]
    3fac:	cmp	r1, r0
    3fae:	bne.w	4178 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d4>
    3fb2:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fb6:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fba:	cmp.w	lr, #0
    3fbe:	beq.n	4070 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3fc0:	ldr.w	r1, [lr, #16]
    3fc4:	subs	r1, #1
    3fc6:	str.w	r1, [lr, #16]
    3fca:	cmp	r1, #0
    3fcc:	bne.n	4070 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3fce:	ldr	r1, [r2, #16]
    3fd0:	str	r1, [sp, #0]
    3fd2:	cmp	r1, #0
    3fd4:	beq.n	4070 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3fd6:	ldr	r1, [sp, #0]
    3fd8:	ldr	r1, [r1, #0]
    3fda:	ldr	r1, [r1, #32]
    3fdc:	cmp	r1, r0
    3fde:	bne.w	4190 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ec>
    3fe2:	ldr	r1, [sp, #0]
    3fe4:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fe8:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fec:	cmp.w	lr, #0
    3ff0:	beq.n	4060 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    3ff2:	ldr.w	r1, [lr, #16]
    3ff6:	subs	r1, #1
    3ff8:	str.w	r1, [lr, #16]
    3ffc:	cbnz	r1, 4060 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    3ffe:	ldr	r1, [sp, #0]
    4000:	ldr.w	ip, [r1, #16]
    4004:	cmp.w	ip, #0
    4008:	beq.n	4060 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    400a:	ldr.w	r1, [ip]
    400e:	ldr	r1, [r1, #32]
    4010:	cmp	r1, r0
    4012:	bne.w	41ac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x808>
    4016:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    401a:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    401e:	cbz	r0, 4050 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    4020:	ldr	r1, [r0, #16]
    4022:	add.w	lr, r1, #4294967295
    4026:	str.w	lr, [r0, #16]
    402a:	cmp.w	lr, #0
    402e:	bne.n	4050 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    4030:	ldr.w	r0, [ip, #16]
    4034:	cbz	r0, 4050 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    4036:	ldr.w	lr, [r0]
    403a:	str.w	ip, [sp, #12]
    403e:	str	r2, [sp, #8]
    4040:	str	r3, [sp, #4]
    4042:	ldr.w	r3, [lr, #32]
    4046:	blx	r3
    4048:	ldr.w	ip, [sp, #12]
    404c:	ldr	r2, [sp, #8]
    404e:	ldr	r3, [sp, #4]
    4050:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4052:	mov	r0, ip
    4054:	movs	r1, #20
    4056:	str	r3, [sp, #4]
    4058:	bl	138d0 <operator delete(void*, unsigned int)>
    405c:	ldr	r3, [sp, #4]
    405e:	ldr	r2, [sp, #8]
    4060:	ldr	r0, [sp, #0]
    4062:	str	r2, [sp, #8]
    4064:	movs	r1, #20
    4066:	str	r3, [sp, #4]
    4068:	bl	138d0 <operator delete(void*, unsigned int)>
    406c:	ldr	r3, [sp, #4]
    406e:	ldr	r2, [sp, #8]
    4070:	str	r3, [sp, #0]
    4072:	mov	r0, r2
    4074:	movs	r1, #20
    4076:	bl	138d0 <operator delete(void*, unsigned int)>
    407a:	ldr	r3, [sp, #0]
    407c:	b.n	3b4a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    407e:	ldr	r2, [r3, #16]
    4080:	cmp	r2, #0
    4082:	beq.w	3bf6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    4086:	ldr	r1, [r2, #0]
    4088:	ldr	r1, [r1, #32]
    408a:	cmp	r1, r0
    408c:	bne.n	416e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ca>
    408e:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4092:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4096:	cmp.w	lr, #0
    409a:	beq.n	4148 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    409c:	ldr.w	r1, [lr, #16]
    40a0:	subs	r1, #1
    40a2:	str.w	r1, [lr, #16]
    40a6:	cmp	r1, #0
    40a8:	bne.n	4148 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    40aa:	ldr	r1, [r2, #16]
    40ac:	str	r1, [sp, #0]
    40ae:	cmp	r1, #0
    40b0:	beq.n	4148 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    40b2:	ldr	r1, [sp, #0]
    40b4:	ldr	r1, [r1, #0]
    40b6:	ldr	r1, [r1, #32]
    40b8:	cmp	r1, r0
    40ba:	bne.n	4182 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7de>
    40bc:	ldr	r1, [sp, #0]
    40be:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40c2:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40c6:	cmp.w	lr, #0
    40ca:	beq.n	4138 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    40cc:	ldr.w	r1, [lr, #16]
    40d0:	subs	r1, #1
    40d2:	str.w	r1, [lr, #16]
    40d6:	cbnz	r1, 4138 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    40d8:	ldr	r1, [sp, #0]
    40da:	ldr.w	ip, [r1, #16]
    40de:	cmp.w	ip, #0
    40e2:	beq.n	4138 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    40e4:	ldr.w	r1, [ip]
    40e8:	ldr	r1, [r1, #32]
    40ea:	cmp	r1, r0
    40ec:	bne.n	419e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7fa>
    40ee:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40f2:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40f6:	cbz	r0, 4128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    40f8:	ldr	r1, [r0, #16]
    40fa:	add.w	lr, r1, #4294967295
    40fe:	str.w	lr, [r0, #16]
    4102:	cmp.w	lr, #0
    4106:	bne.n	4128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    4108:	ldr.w	r0, [ip, #16]
    410c:	cbz	r0, 4128 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    410e:	ldr.w	lr, [r0]
    4112:	str.w	ip, [sp, #12]
    4116:	str	r2, [sp, #8]
    4118:	str	r3, [sp, #4]
    411a:	ldr.w	r3, [lr, #32]
    411e:	blx	r3
    4120:	ldr.w	ip, [sp, #12]
    4124:	ldr	r2, [sp, #8]
    4126:	ldr	r3, [sp, #4]
    4128:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    412a:	mov	r0, ip
    412c:	movs	r1, #20
    412e:	str	r3, [sp, #4]
    4130:	bl	138d0 <operator delete(void*, unsigned int)>
    4134:	ldr	r3, [sp, #4]
    4136:	ldr	r2, [sp, #8]
    4138:	ldr	r0, [sp, #0]
    413a:	str	r2, [sp, #8]
    413c:	movs	r1, #20
    413e:	str	r3, [sp, #4]
    4140:	bl	138d0 <operator delete(void*, unsigned int)>
    4144:	ldr	r3, [sp, #4]
    4146:	ldr	r2, [sp, #8]
    4148:	str	r3, [sp, #0]
    414a:	mov	r0, r2
    414c:	movs	r1, #20
    414e:	bl	138d0 <operator delete(void*, unsigned int)>
    4152:	ldr	r3, [sp, #0]
    4154:	b.n	3bf6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4156:	mov	r0, sl
    4158:	blx	r3
    415a:	b.n	3b5a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    415c:	mov	r0, sl
    415e:	blx	r3
    4160:	b.n	3c06 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    4162:	mov	r0, r3
    4164:	blx	r2
    4166:	b.n	3bfe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    4168:	mov	r0, r3
    416a:	blx	r2
    416c:	b.n	3b52 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    416e:	str	r3, [sp, #0]
    4170:	mov	r0, r2
    4172:	blx	r1
    4174:	ldr	r3, [sp, #0]
    4176:	b.n	3bf6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    4178:	str	r3, [sp, #0]
    417a:	mov	r0, r2
    417c:	blx	r1
    417e:	ldr	r3, [sp, #0]
    4180:	b.n	3b4a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    4182:	str	r2, [sp, #8]
    4184:	str	r3, [sp, #4]
    4186:	ldr	r0, [sp, #0]
    4188:	blx	r1
    418a:	ldr	r2, [sp, #8]
    418c:	ldr	r3, [sp, #4]
    418e:	b.n	4148 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    4190:	str	r2, [sp, #8]
    4192:	str	r3, [sp, #4]
    4194:	ldr	r0, [sp, #0]
    4196:	blx	r1
    4198:	ldr	r2, [sp, #8]
    419a:	ldr	r3, [sp, #4]
    419c:	b.n	4070 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    419e:	str	r2, [sp, #8]
    41a0:	str	r3, [sp, #4]
    41a2:	mov	r0, ip
    41a4:	blx	r1
    41a6:	ldr	r2, [sp, #8]
    41a8:	ldr	r3, [sp, #4]
    41aa:	b.n	4138 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    41ac:	str	r2, [sp, #8]
    41ae:	str	r3, [sp, #4]
    41b0:	mov	r0, ip
    41b2:	blx	r1
    41b4:	ldr	r2, [sp, #8]
    41b6:	ldr	r3, [sp, #4]
    41b8:	b.n	4060 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    41ba:	nop

000041bc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.9] [clone .constprop.11]>:

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    41bc:	push	{r4, r5, lr}
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = store; // As per initizalization
    41be:	cmp.w	r2, #4294967295
    41c2:	ite	ne
    41c4:	movne	r5, r2
    41c6:	moveq	r5, r1

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    41c8:	mov	r4, r0
    41ca:	sub	sp, #276	; 0x114
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = store; // As per initizalization

      ScanDir(store, parent);
    41cc:	mov	r2, r5
    41ce:	bl	39a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    41d2:	movs	r3, #1
    41d4:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    41d8:	mov	r2, r5
    41da:	mov	r1, r4
    41dc:	mov	r0, sp
    41de:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    41e2:	ldr	r3, [sp, #4]
    41e4:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    41e8:	add	sp, #276	; 0x114
    41ea:	pop	{r4, r5, pc}

000041ec <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    41ec:	ldrb.w	r3, [r0, #248]	; 0xf8
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    41f0:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    41f2:	push	{r4, r5, r6, lr}
    41f4:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    41f6:	strb.w	r2, [r0, #249]	; 0xf9
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    41fa:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    41fc:	cbz	r3, 421c <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    41fe:	ldr.w	r3, [r5, #244]	; 0xf4
    4202:	cbz	r3, 421a <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]+0x2e>
    4204:	movs	r4, #0
    4206:	mov	r2, r4
    4208:	mov	r1, r6
    420a:	mov	r0, r5
    420c:	bl	39a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    4210:	ldr.w	r3, [r5, #244]	; 0xf4
    4214:	adds	r4, #1
    4216:	cmp	r3, r4
    4218:	bhi.n	4206 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]+0x1a>
    421a:	pop	{r4, r5, r6, pc}
    421c:	bl	2d48 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]>
    4220:	b.n	41fe <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]+0x12>
    4222:	nop

00004224 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    4224:	push	{r4, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    4226:	ldrb.w	r3, [r0, #248]	; 0xf8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    422a:	sub	sp, #8
    422c:	mov	r4, r0

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    422e:	cbz	r3, 4254 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    GenerateIndex(store);
    if (parent) 
    4230:	cbz	r2, 423e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1a>
    4232:	mov	r0, r4
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    4234:	add	sp, #8
    4236:	ldmia.w	sp!, {r4, lr}
    423a:	b.w	41bc <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.9] [clone .constprop.11]>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    423e:	ldrb.w	r3, [r4, #249]	; 0xf9
    4242:	cbz	r3, 4262 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    4244:	movs	r2, #0
      next_ = 1;
    4246:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    4248:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    424c:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    4250:	add	sp, #8
    4252:	pop	{r4, pc}
    4254:	stmia.w	sp, {r1, r2}
    4258:	bl	2d48 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.13]>
    425c:	ldmia.w	sp, {r1, r2}
    4260:	b.n	4230 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xc>
    4262:	mov	r0, r4
    4264:	bl	41ec <MTPStorage_SD::ScanAll(unsigned long) [clone .part.8] [clone .constprop.12]>
    4268:	b.n	4244 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x20>
    426a:	nop

0000426c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]>:
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    426c:	push	{r4, r5, r6, r7, lr}
    426e:	subw	sp, sp, #2164	; 0x874
    char filename[MAX_FILENAME_LEN];

    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
      ConstructFilename(object, filename, MAX_FILENAME_LEN);
    4272:	mov.w	r3, #256	; 0x100
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    4276:	mov	r4, r0
    4278:	mov	r6, r1
    char filename[MAX_FILENAME_LEN];

    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
      ConstructFilename(object, filename, MAX_FILENAME_LEN);
    427a:	add	r2, sp, #272	; 0x110
    427c:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    4280:	mov	r2, r6
    4282:	mov	r1, r4
    4284:	add	r0, sp, #528	; 0x210
    4286:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record t = ReadIndexRecord(r.parent);
    428a:	ldr	r2, [sp, #528]	; 0x210
    428c:	mov	r1, r4
    428e:	add	r0, sp, #800	; 0x320
    4290:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record ro = r;
    4294:	add	r1, sp, #528	; 0x210
    4296:	mov.w	r2, #272	; 0x110
    429a:	add.w	r0, sp, #1072	; 0x430
    429e:	bl	11bf8 <memcpy>
    Record to = t;
    42a2:	add	r1, sp, #800	; 0x320
    42a4:	add.w	r0, sp, #1344	; 0x540
    42a8:	mov.w	r2, #272	; 0x110
    42ac:	bl	11bf8 <memcpy>
    Record x;
    Record xo;
    uint32_t is=-1;
    if(!r.isdir || (!r.child && r.scanned)) // if file or empty directory
    42b0:	ldrb.w	r3, [sp, #540]	; 0x21c
    42b4:	cbz	r3, 42fa <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x8e>
    42b6:	ldr	r5, [sp, #532]	; 0x214
    42b8:	ldrb.w	r3, [sp, #541]	; 0x21d
    42bc:	cbz	r5, 42f4 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x88>
           if(is>0)WriteIndexRecord(is, xo);
        }
        return success;
      }
    }
    if(!r.scanned) ScanDir(r.store, object) ; // have no info on directory, so scan it
    42be:	cmp	r3, #0
    42c0:	beq.w	43fe <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x192>
    uint32_t ix = r.child;
    while(ix)
    { Record x= ReadIndexRecord(ix);
    42c4:	mov	r2, r5
    42c6:	mov	r1, r4
    42c8:	add.w	r0, sp, #1888	; 0x760
    42cc:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      DeleteObject(ix);
    42d0:	ldr	r3, [r4, #0]
    42d2:	mov	r1, r5
    42d4:	ldr	r3, [r3, #60]	; 0x3c
    42d6:	mov	r0, r4
    42d8:	blx	r3
      ix=x.sibling;
    42da:	ldr.w	r5, [sp, #1896]	; 0x768
        return success;
      }
    }
    if(!r.scanned) ScanDir(r.store, object) ; // have no info on directory, so scan it
    uint32_t ix = r.child;
    while(ix)
    42de:	cmp	r5, #0
    42e0:	bne.n	42c4 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x58>
    { Record x= ReadIndexRecord(ix);
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    42e2:	ldr	r3, [r4, #0]
    42e4:	mov	r1, r6
    42e6:	ldr	r3, [r3, #60]	; 0x3c
    42e8:	mov	r0, r4
    42ea:	blx	r3
    return true;
    42ec:	movs	r0, #1
  }
    42ee:	addw	sp, sp, #2164	; 0x874
    42f2:	pop	{r4, r5, r6, r7, pc}
    Record ro = r;
    Record to = t;
    Record x;
    Record xo;
    uint32_t is=-1;
    if(!r.isdir || (!r.child && r.scanned)) // if file or empty directory
    42f4:	cmp	r3, #0
    42f6:	beq.w	43fe <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x192>
    { //
      { if(t.child==object)
    42fa:	ldr	r7, [sp, #804]	; 0x324
    42fc:	cmp	r6, r7
    42fe:	beq.n	43ea <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x17e>
        }
        else
        { // link junger to older sibling
          // find junger sibling
          is=t.child; // jungest sibling
          x = ReadIndexRecord(is); 
    4300:	mov	r0, sp
    4302:	mov	r2, r7
    4304:	mov	r1, r4
    4306:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    430a:	mov	r1, sp
    430c:	add.w	r0, sp, #1616	; 0x650
    4310:	mov.w	r2, #272	; 0x110
    4314:	bl	11bf8 <memcpy>
          while((is>r.store) && (x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    4318:	ldrh.w	r3, [sp, #542]	; 0x21e
    431c:	cmp	r7, r3
    431e:	bls.w	4428 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x1bc>
    4322:	ldr.w	r5, [sp, #1624]	; 0x658
    4326:	cmp	r6, r5
    4328:	bne.n	4336 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0xca>
    432a:	b.n	4428 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x1bc>
    432c:	ldr.w	r3, [sp, #1624]	; 0x658
    4330:	cmp	r6, r3
    4332:	beq.n	4356 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0xea>
    4334:	mov	r5, r3
    4336:	mov	r2, r5
    4338:	mov	r1, r4
    433a:	mov	r0, sp
    433c:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    4340:	mov.w	r2, #272	; 0x110
    4344:	mov	r1, sp
    4346:	add.w	r0, sp, #1616	; 0x650
    434a:	bl	11bf8 <memcpy>
    434e:	ldrh.w	r3, [sp, #542]	; 0x21e
    4352:	cmp	r3, r5
    4354:	bcc.n	432c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0xc0>
          // is points now to junder sibling
          xo=x;
    4356:	mov.w	r2, #272	; 0x110
    435a:	add.w	r1, sp, #1616	; 0x650
    435e:	add.w	r0, sp, #1888	; 0x760
    4362:	bl	11bf8 <memcpy>
          x.sibling = r.sibling;
    4366:	ldr	r3, [sp, #536]	; 0x218
    4368:	str.w	r3, [sp, #1624]	; 0x658
          WriteIndexRecord(is, x);
    436c:	add.w	r2, sp, #1616	; 0x650
    4370:	mov	r1, r5
    4372:	mov	r0, r4
    4374:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        }
        // delete now file
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
    4378:	ldrb.w	r3, [sp, #540]	; 0x21c
    437c:	cbz	r3, 43ba <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x14e>
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    437e:	ldrh.w	r3, [sp, #542]	; 0x21e
    4382:	add.w	r3, r4, r3, lsl #2
    4386:	add	r1, sp, #272	; 0x110
    4388:	ldr	r0, [r3, #88]	; 0x58
    438a:	ldr	r3, [r0, #0]
    438c:	ldr	r3, [r3, #20]
    438e:	blx	r3
    4390:	mov	r7, r0
        mtp_lock_storage(false);
        if(success)
        { // mark object as deleted
          r.name[0]=0;
          WriteIndexRecord(object, r);
    4392:	mov	r1, r6
        }
        // delete now file
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
    4394:	cbnz	r7, 43d4 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x168>
          r.name[0]=0;
          WriteIndexRecord(object, r);
        }
        else
        { // undo index manipulation
           WriteIndexRecord(object, ro);
    4396:	add.w	r2, sp, #1072	; 0x430
    439a:	mov	r0, r4
    439c:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
           WriteIndexRecord(ro.parent, to);
    43a0:	add.w	r2, sp, #1344	; 0x540
    43a4:	ldr.w	r1, [sp, #1072]	; 0x430
    43a8:	mov	r0, r4
    43aa:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
           if(is>0)WriteIndexRecord(is, xo);
    43ae:	cmp	r5, #0
    43b0:	bne.n	4414 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x1a8>
    43b2:	mov	r0, r5
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    return true;
  }
    43b4:	addw	sp, sp, #2164	; 0x874
    43b8:	pop	{r4, r5, r6, r7, pc}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    43ba:	ldrh.w	r3, [sp, #542]	; 0x21e
    43be:	add.w	r3, r4, r3, lsl #2
    43c2:	add	r1, sp, #272	; 0x110
    43c4:	ldr	r0, [r3, #88]	; 0x58
    43c6:	ldr	r3, [r0, #0]
    43c8:	ldr	r3, [r3, #16]
    43ca:	blx	r3
    43cc:	mov	r7, r0
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
        { // mark object as deleted
          r.name[0]=0;
          WriteIndexRecord(object, r);
    43ce:	mov	r1, r6
        }
        // delete now file
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
    43d0:	cmp	r7, #0
    43d2:	beq.n	4396 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x12a>
        { // mark object as deleted
          r.name[0]=0;
          WriteIndexRecord(object, r);
    43d4:	mov	r0, r4
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
        { // mark object as deleted
          r.name[0]=0;
    43d6:	movs	r3, #0
          WriteIndexRecord(object, r);
    43d8:	add	r2, sp, #528	; 0x210
        mtp_lock_storage(true);
        bool success = r.isdir ? sd_rmdir(r.store,filename): sd_remove(r.store,filename);
        mtp_lock_storage(false);
        if(success)
        { // mark object as deleted
          r.name[0]=0;
    43da:	strb.w	r3, [sp, #544]	; 0x220
          WriteIndexRecord(object, r);
    43de:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    43e2:	movs	r0, #1
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    return true;
  }
    43e4:	addw	sp, sp, #2164	; 0x874
    43e8:	pop	{r4, r5, r6, r7, pc}
    uint32_t is=-1;
    if(!r.isdir || (!r.child && r.scanned)) // if file or empty directory
    { //
      { if(t.child==object)
        { // we are the jungest, simply relink parent to older sibling
          t.child = r.sibling;
    43ea:	ldr	r3, [sp, #536]	; 0x218
          WriteIndexRecord(r.parent, t);
    43ec:	ldr	r1, [sp, #528]	; 0x210
    uint32_t is=-1;
    if(!r.isdir || (!r.child && r.scanned)) // if file or empty directory
    { //
      { if(t.child==object)
        { // we are the jungest, simply relink parent to older sibling
          t.child = r.sibling;
    43ee:	str	r3, [sp, #804]	; 0x324
          WriteIndexRecord(r.parent, t);
    43f0:	add	r2, sp, #800	; 0x320
    43f2:	mov	r0, r4
    43f4:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    Record ro = r;
    Record to = t;
    Record x;
    Record xo;
    uint32_t is=-1;
    43f8:	mov.w	r5, #4294967295
    43fc:	b.n	4378 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x10c>
           if(is>0)WriteIndexRecord(is, xo);
        }
        return success;
      }
    }
    if(!r.scanned) ScanDir(r.store, object) ; // have no info on directory, so scan it
    43fe:	mov	r2, r6
    4400:	ldrh.w	r1, [sp, #542]	; 0x21e
    4404:	mov	r0, r4
    4406:	bl	39a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    uint32_t ix = r.child;
    440a:	ldr	r5, [sp, #532]	; 0x214
    while(ix)
    440c:	cmp	r5, #0
    440e:	bne.w	42c4 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x58>
    4412:	b.n	42e2 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0x76>
        }
        else
        { // undo index manipulation
           WriteIndexRecord(object, ro);
           WriteIndexRecord(ro.parent, to);
           if(is>0)WriteIndexRecord(is, xo);
    4414:	mov	r0, r4
    4416:	mov	r1, r5
    4418:	add.w	r2, sp, #1888	; 0x760
    441c:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    4420:	mov	r0, r7
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    return true;
  }
    4422:	addw	sp, sp, #2164	; 0x874
    4426:	pop	{r4, r5, r6, r7, pc}
        else
        { // link junger to older sibling
          // find junger sibling
          is=t.child; // jungest sibling
          x = ReadIndexRecord(is); 
          while((is>r.store) && (x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    4428:	mov	r5, r7
    442a:	b.n	4356 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]+0xea>

0000442c <MTPStorage_SD::DeleteObject(unsigned long)>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[MAX_FILENAME_LEN];

    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    442c:	adds	r3, r1, #1
    442e:	beq.n	4434 <MTPStorage_SD::DeleteObject(unsigned long)+0x8>
    4430:	b.w	426c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.7] [clone .constprop.14]>
      DeleteObject(ix);
      ix=x.sibling;
    }
    DeleteObject(object);
    return true;
  }
    4434:	movs	r0, #1
    4436:	bx	lr

00004438 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    4438:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    443c:	add.w	r1, r0, r1, lsl #2
    4440:	mov	r6, r0
    4442:	ldr	r1, [r1, #84]	; 0x54
    4444:	ldr	r0, [r1, #0]
    4446:	subw	sp, sp, #2092	; 0x82c
    444a:	ldr	r4, [r0, #0]
    444c:	mov	r7, r3
    444e:	mov	r0, sp
    4450:	movs	r3, #0
    4452:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4454:	ldr	r3, [sp, #16]
    4456:	cmp	r3, #0
    4458:	beq.w	4882 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x44a>
    445c:	ldr	r2, [r3, #0]
    445e:	ldr	r5, [pc, #624]	; (46d0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x298>)
    4460:	ldr	r2, [r2, #68]	; 0x44
    4462:	cmp	r2, r5
    4464:	bne.w	47e0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a8>
    4468:	ldr	r0, [r3, #16]
    446a:	cmp	r0, #0
    446c:	beq.w	4690 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4470:	ldr	r2, [r0, #0]
    4472:	ldr	r2, [r2, #68]	; 0x44
    4474:	cmp	r2, r5
    4476:	bne.w	47e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    447a:	ldr	r0, [r0, #16]
    447c:	cmp	r0, #0
    447e:	beq.w	4690 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4482:	ldr	r2, [r0, #0]
    4484:	ldr	r2, [r2, #68]	; 0x44
    4486:	cmp	r2, r5
    4488:	bne.w	47e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    448c:	ldr	r0, [r0, #16]
    448e:	cmp	r0, #0
    4490:	beq.w	4690 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4494:	ldr	r2, [r0, #0]
    4496:	ldr	r2, [r2, #68]	; 0x44
    4498:	cmp	r2, r5
    449a:	bne.w	47e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    449e:	ldr	r0, [r0, #16]
    44a0:	cmp	r0, #0
    44a2:	beq.w	4690 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    44a6:	ldr	r2, [r0, #0]
    44a8:	ldr	r2, [r2, #68]	; 0x44
    44aa:	cmp	r2, r5
    44ac:	bne.w	47e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    44b0:	ldr	r0, [r0, #16]
    44b2:	cmp	r0, #0
    44b4:	beq.w	4690 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    44b8:	ldr	r2, [r0, #0]
    44ba:	ldr	r2, [r2, #68]	; 0x44
    44bc:	cmp	r2, r5
    44be:	bne.w	47e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    44c2:	ldr	r0, [r0, #16]
    44c4:	cmp	r0, #0
    44c6:	beq.w	4690 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    44ca:	ldr	r2, [r0, #0]
    44cc:	ldr	r2, [r2, #68]	; 0x44
    44ce:	cmp	r2, r5
    44d0:	bne.w	47e2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    44d4:	ldr	r0, [r0, #16]
    44d6:	cmp	r0, #0
    44d8:	beq.w	4690 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    44dc:	ldr	r3, [r0, #0]
    44de:	ldr	r3, [r3, #68]	; 0x44
    44e0:	blx	r3
    44e2:	mov	r4, r0
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    44e4:	cmp	r4, #0
    44e6:	beq.w	4cca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x892>
    44ea:	add.w	r6, r6, r7, lsl #2
    44ee:	add	r0, sp, #20
    44f0:	ldr	r1, [r6, #84]	; 0x54
    44f2:	ldr.w	r2, [sp, #2128]	; 0x850
    44f6:	ldr	r3, [r1, #0]
    44f8:	ldr	r4, [r3, #0]
    44fa:	movs	r3, #2
    44fc:	blx	r4
    44fe:	ldr	r0, [sp, #36]	; 0x24
    4500:	cmp	r0, #0
    4502:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4506:	ldr	r3, [r0, #0]
    4508:	ldr	r3, [r3, #68]	; 0x44
    450a:	cmp	r3, r5
    450c:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4510:	ldr	r0, [r0, #16]
    4512:	cmp	r0, #0
    4514:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4518:	ldr	r3, [r0, #0]
    451a:	ldr	r3, [r3, #68]	; 0x44
    451c:	cmp	r3, r5
    451e:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4522:	ldr	r0, [r0, #16]
    4524:	cmp	r0, #0
    4526:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    452a:	ldr	r3, [r0, #0]
    452c:	ldr	r3, [r3, #68]	; 0x44
    452e:	cmp	r3, r5
    4530:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4534:	ldr	r0, [r0, #16]
    4536:	cmp	r0, #0
    4538:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    453c:	ldr	r3, [r0, #0]
    453e:	ldr	r3, [r3, #68]	; 0x44
    4540:	cmp	r3, r5
    4542:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4546:	ldr	r0, [r0, #16]
    4548:	cmp	r0, #0
    454a:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    454e:	ldr	r3, [r0, #0]
    4550:	ldr	r3, [r3, #68]	; 0x44
    4552:	cmp	r3, r5
    4554:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4558:	ldr	r0, [r0, #16]
    455a:	cmp	r0, #0
    455c:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4560:	ldr	r3, [r0, #0]
    4562:	ldr	r3, [r3, #68]	; 0x44
    4564:	cmp	r3, r5
    4566:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    456a:	ldr	r0, [r0, #16]
    456c:	cmp	r0, #0
    456e:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4572:	ldr	r3, [r0, #0]
    4574:	ldr	r3, [r3, #68]	; 0x44
    4576:	cmp	r3, r5
    4578:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    457c:	ldr	r0, [r0, #16]
    457e:	cmp	r0, #0
    4580:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4584:	ldr	r3, [r0, #0]
    4586:	ldr	r3, [r3, #68]	; 0x44
    4588:	cmp	r3, r5
    458a:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    458e:	ldr	r0, [r0, #16]
    4590:	cmp	r0, #0
    4592:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4596:	ldr	r3, [r0, #0]
    4598:	ldr	r3, [r3, #68]	; 0x44
    459a:	cmp	r3, r5
    459c:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    45a0:	ldr	r0, [r0, #16]
    45a2:	cmp	r0, #0
    45a4:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    45a8:	ldr	r3, [r0, #0]
    45aa:	ldr	r3, [r3, #68]	; 0x44
    45ac:	cmp	r3, r5
    45ae:	bne.w	49b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    45b2:	ldr	r0, [r0, #16]
    45b4:	cmp	r0, #0
    45b6:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    45ba:	ldr	r3, [r0, #0]
    45bc:	ldr	r3, [r3, #68]	; 0x44
    45be:	blx	r3
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    45c0:	cmp	r0, #0
    45c2:	beq.w	47e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    45c6:	ldr	r5, [pc, #268]	; (46d4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x29c>)
    45c8:	mov.w	r4, #4294967295
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    45cc:	ldr	r3, [sp, #16]
    45ce:	cmp	r3, #0
    45d0:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    45d4:	ldr	r1, [r3, #0]
    45d6:	ldr	r2, [r1, #16]
    45d8:	cmp	r2, r5
    45da:	bne.w	4bc0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x788>
    45de:	ldr	r2, [r3, #16]
    45e0:	cmp	r2, #0
    45e2:	beq.w	4bc6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x78e>
    45e6:	ldr	r0, [r2, #0]
    45e8:	ldr	r6, [r0, #16]
    45ea:	cmp	r6, r5
    45ec:	bne.w	4a68 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x630>
    45f0:	ldr	r0, [r2, #16]
    45f2:	cmp	r0, #0
    45f4:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45f8:	ldr	r6, [r0, #0]
    45fa:	ldr	r6, [r6, #16]
    45fc:	cmp	r6, r5
    45fe:	bne.w	4a6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4602:	ldr	r0, [r0, #16]
    4604:	cmp	r0, #0
    4606:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    460a:	ldr	r6, [r0, #0]
    460c:	ldr	r6, [r6, #16]
    460e:	cmp	r6, r5
    4610:	bne.w	4a6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4614:	ldr	r0, [r0, #16]
    4616:	cmp	r0, #0
    4618:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    461c:	ldr	r6, [r0, #0]
    461e:	ldr	r6, [r6, #16]
    4620:	cmp	r6, r5
    4622:	bne.w	4a6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4626:	ldr	r0, [r0, #16]
    4628:	cmp	r0, #0
    462a:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    462e:	ldr	r6, [r0, #0]
    4630:	ldr	r6, [r6, #16]
    4632:	cmp	r6, r5
    4634:	bne.w	4a6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4638:	ldr	r0, [r0, #16]
    463a:	cmp	r0, #0
    463c:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4640:	ldr	r6, [r0, #0]
    4642:	ldr	r6, [r6, #16]
    4644:	cmp	r6, r5
    4646:	bne.w	4a6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    464a:	ldr	r0, [r0, #16]
    464c:	cmp	r0, #0
    464e:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4652:	ldr	r6, [r0, #0]
    4654:	ldr	r6, [r6, #16]
    4656:	cmp	r6, r5
    4658:	bne.w	4a6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    465c:	ldr	r0, [r0, #16]
    465e:	cmp	r0, #0
    4660:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4664:	ldr	r6, [r0, #0]
    4666:	ldr	r6, [r6, #16]
    4668:	cmp	r6, r5
    466a:	bne.w	4a6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    466e:	ldr	r0, [r0, #16]
    4670:	cmp	r0, #0
    4672:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4676:	ldr	r6, [r0, #0]
    4678:	ldr	r6, [r6, #16]
    467a:	cmp	r6, r5
    467c:	bne.w	4a6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4680:	ldr	r0, [r0, #16]
    4682:	cmp	r0, #0
    4684:	beq.w	49b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4688:	ldr	r3, [r0, #0]
    468a:	ldr	r3, [r3, #16]
    468c:	blx	r3
    468e:	b.n	4a6c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4690:	ldr	r6, [pc, #68]	; (46d8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a0>)
    4692:	str	r6, [sp, #0]
    4694:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4696:	ldr	r2, [r3, #16]
    4698:	subs	r2, #1
    469a:	str	r2, [r3, #16]
    469c:	cbnz	r2, 46c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    469e:	ldr	r5, [sp, #16]
    46a0:	cbz	r5, 46c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    46a2:	ldr	r3, [r5, #0]
    46a4:	ldr	r2, [pc, #52]	; (46dc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a4>)
    46a6:	ldr	r3, [r3, #32]
    46a8:	cmp	r3, r2
    46aa:	bne.w	4c5e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x826>
    46ae:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46b0:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46b2:	cbz	r1, 46bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    46b4:	ldr	r3, [r1, #16]
    46b6:	subs	r3, #1
    46b8:	str	r3, [r1, #16]
    46ba:	cbz	r3, 46e0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a8>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    46bc:	mov	r0, r5
    46be:	movs	r1, #20
    46c0:	bl	138d0 <operator delete(void*, unsigned int)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    46c4:	mov	r0, r4
    46c6:	addw	sp, sp, #2092	; 0x82c
    46ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46ce:	nop
    46d0:	.word	0x0000050d
    46d4:	.word	0x00000495
    46d8:	.word	0x00018e14
    46dc:	.word	0x000014c5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46e0:	ldr	r7, [r5, #16]
    46e2:	cmp	r7, #0
    46e4:	beq.n	46bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    46e6:	ldr	r3, [r7, #0]
    46e8:	ldr	r3, [r3, #32]
    46ea:	cmp	r3, r2
    46ec:	bne.w	4c80 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x848>
    46f0:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46f2:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46f4:	cmp	r1, #0
    46f6:	beq.n	47d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    46f8:	ldr	r3, [r1, #16]
    46fa:	subs	r3, #1
    46fc:	str	r3, [r1, #16]
    46fe:	cmp	r3, #0
    4700:	bne.n	47d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4702:	ldr.w	r8, [r7, #16]
    4706:	cmp.w	r8, #0
    470a:	beq.n	47d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    470c:	ldr.w	r3, [r8]
    4710:	ldr	r3, [r3, #32]
    4712:	cmp	r3, r2
    4714:	bne.w	4ca6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x86e>
    4718:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    471c:	str.w	r6, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4720:	cmp	r1, #0
    4722:	beq.n	47ce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4724:	ldr	r3, [r1, #16]
    4726:	subs	r3, #1
    4728:	str	r3, [r1, #16]
    472a:	cmp	r3, #0
    472c:	bne.n	47ce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    472e:	ldr.w	r9, [r8, #16]
    4732:	cmp.w	r9, #0
    4736:	beq.n	47ce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4738:	ldr.w	r3, [r9]
    473c:	ldr	r3, [r3, #32]
    473e:	cmp	r3, r2
    4740:	bne.w	4cac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x874>
    4744:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4748:	str.w	r6, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    474c:	cmp	r1, #0
    474e:	beq.n	47c6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4750:	ldr	r3, [r1, #16]
    4752:	subs	r3, #1
    4754:	str	r3, [r1, #16]
    4756:	cmp	r3, #0
    4758:	bne.n	47c6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    475a:	ldr.w	sl, [r9, #16]
    475e:	cmp.w	sl, #0
    4762:	beq.n	47c6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4764:	ldr.w	r3, [sl]
    4768:	ldr	r3, [r3, #32]
    476a:	cmp	r3, r2
    476c:	bne.w	4cbe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x886>
    4770:	ldr.w	r1, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4774:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4778:	cbz	r1, 47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    477a:	ldr	r3, [r1, #16]
    477c:	subs	r3, #1
    477e:	str	r3, [r1, #16]
    4780:	cbnz	r3, 47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4782:	ldr.w	fp, [sl, #16]
    4786:	cmp.w	fp, #0
    478a:	beq.n	47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    478c:	ldr.w	r3, [fp]
    4790:	ldr	r3, [r3, #32]
    4792:	cmp	r3, r2
    4794:	bne.w	4cc4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x88c>
    4798:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    479c:	str.w	r6, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    47a0:	cbz	r2, 47b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    47a2:	ldr	r3, [r2, #16]
    47a4:	subs	r3, #1
    47a6:	str	r3, [r2, #16]
    47a8:	cbnz	r3, 47b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    47aa:	ldr.w	r0, [fp, #16]
    47ae:	cbz	r0, 47b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    47b0:	ldr	r3, [r0, #0]
    47b2:	ldr	r3, [r3, #32]
    47b4:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    47b6:	mov	r0, fp
    47b8:	movs	r1, #20
    47ba:	bl	138d0 <operator delete(void*, unsigned int)>
    47be:	mov	r0, sl
    47c0:	movs	r1, #20
    47c2:	bl	138d0 <operator delete(void*, unsigned int)>
    47c6:	mov	r0, r9
    47c8:	movs	r1, #20
    47ca:	bl	138d0 <operator delete(void*, unsigned int)>
    47ce:	mov	r0, r8
    47d0:	movs	r1, #20
    47d2:	bl	138d0 <operator delete(void*, unsigned int)>
    47d6:	mov	r0, r7
    47d8:	movs	r1, #20
    47da:	bl	138d0 <operator delete(void*, unsigned int)>
    47de:	b.n	46bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    47e0:	mov	r0, r3
    47e2:	blx	r2
    47e4:	mov	r4, r0
    47e6:	b.n	44e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xac>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    47e8:	ldr	r0, [sp, #16]
    47ea:	cmp	r0, #0
    47ec:	beq.n	488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47ee:	ldr	r3, [r0, #0]
    47f0:	ldr	r1, [pc, #616]	; (4a5c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    47f2:	ldr	r3, [r3, #64]	; 0x40
    47f4:	cmp	r3, r1
    47f6:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47fa:	ldr	r0, [r0, #16]
    47fc:	cmp	r0, #0
    47fe:	beq.n	488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4800:	ldr	r3, [r0, #0]
    4802:	ldr	r3, [r3, #64]	; 0x40
    4804:	cmp	r3, r1
    4806:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    480a:	ldr	r0, [r0, #16]
    480c:	cmp	r0, #0
    480e:	beq.n	488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4810:	ldr	r3, [r0, #0]
    4812:	ldr	r3, [r3, #64]	; 0x40
    4814:	cmp	r3, r1
    4816:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    481a:	ldr	r0, [r0, #16]
    481c:	cmp	r0, #0
    481e:	beq.n	488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4820:	ldr	r3, [r0, #0]
    4822:	ldr	r3, [r3, #64]	; 0x40
    4824:	cmp	r3, r1
    4826:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    482a:	ldr	r0, [r0, #16]
    482c:	cmp	r0, #0
    482e:	beq.n	488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4830:	ldr	r3, [r0, #0]
    4832:	ldr	r3, [r3, #64]	; 0x40
    4834:	cmp	r3, r1
    4836:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    483a:	ldr	r0, [r0, #16]
    483c:	cbz	r0, 488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    483e:	ldr	r3, [r0, #0]
    4840:	ldr	r3, [r3, #64]	; 0x40
    4842:	cmp	r3, r1
    4844:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4848:	ldr	r0, [r0, #16]
    484a:	cbz	r0, 488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    484c:	ldr	r3, [r0, #0]
    484e:	ldr	r3, [r3, #64]	; 0x40
    4850:	cmp	r3, r1
    4852:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4856:	ldr	r0, [r0, #16]
    4858:	cbz	r0, 488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    485a:	ldr	r3, [r0, #0]
    485c:	ldr	r3, [r3, #64]	; 0x40
    485e:	cmp	r3, r1
    4860:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4864:	ldr	r0, [r0, #16]
    4866:	cbz	r0, 488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4868:	ldr	r3, [r0, #0]
    486a:	ldr	r3, [r3, #64]	; 0x40
    486c:	cmp	r3, r1
    486e:	bne.w	49aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4872:	ldr	r0, [r0, #16]
    4874:	cbz	r0, 488e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4876:	ldr	r3, [r0, #0]
    4878:	ldr	r3, [r3, #64]	; 0x40
    487a:	blx	r3
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    487c:	movs	r4, #0
    487e:	ldr	r3, [sp, #36]	; 0x24
    4880:	b.n	4892 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    4882:	mov	r4, r3
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    4884:	mov	r0, r4
    4886:	addw	sp, sp, #2092	; 0x82c
    488a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    488e:	ldr	r3, [sp, #36]	; 0x24
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4890:	movs	r4, #0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4892:	ldr	r6, [pc, #460]	; (4a60 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
    4894:	str	r6, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4896:	cmp	r3, #0
    4898:	beq.w	499e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    489c:	ldr	r2, [r3, #16]
    489e:	subs	r2, #1
    48a0:	str	r2, [r3, #16]
    48a2:	cmp	r2, #0
    48a4:	bne.n	499e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    48a6:	ldr	r5, [sp, #36]	; 0x24
    48a8:	cmp	r5, #0
    48aa:	beq.n	499e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    48ac:	ldr	r3, [r5, #0]
    48ae:	ldr	r2, [pc, #436]	; (4a64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x62c>)
    48b0:	ldr	r3, [r3, #32]
    48b2:	cmp	r3, r2
    48b4:	bne.w	4c86 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x84e>
    48b8:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    48ba:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    48bc:	cmp	r1, #0
    48be:	beq.n	4996 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    48c0:	ldr	r3, [r1, #16]
    48c2:	subs	r3, #1
    48c4:	str	r3, [r1, #16]
    48c6:	cmp	r3, #0
    48c8:	bne.n	4996 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    48ca:	ldr	r7, [r5, #16]
    48cc:	cmp	r7, #0
    48ce:	beq.n	4996 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    48d0:	ldr	r3, [r7, #0]
    48d2:	ldr	r3, [r3, #32]
    48d4:	cmp	r3, r2
    48d6:	bne.w	4ca0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x868>
    48da:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    48dc:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    48de:	cmp	r1, #0
    48e0:	beq.n	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    48e2:	ldr	r3, [r1, #16]
    48e4:	subs	r3, #1
    48e6:	str	r3, [r1, #16]
    48e8:	cmp	r3, #0
    48ea:	bne.n	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    48ec:	ldr.w	r8, [r7, #16]
    48f0:	cmp.w	r8, #0
    48f4:	beq.n	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    48f6:	ldr.w	r3, [r8]
    48fa:	ldr	r3, [r3, #32]
    48fc:	cmp	r3, r2
    48fe:	bne.w	4cb2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x87a>
    4902:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4906:	str.w	r6, [r8]
    490a:	ldr	r0, [pc, #340]	; (4a60 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    490c:	cmp	r1, #0
    490e:	beq.n	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4910:	ldr	r3, [r1, #16]
    4912:	subs	r3, #1
    4914:	str	r3, [r1, #16]
    4916:	cmp	r3, #0
    4918:	bne.n	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    491a:	ldr.w	r9, [r8, #16]
    491e:	cmp.w	r9, #0
    4922:	beq.n	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4924:	ldr.w	r3, [r9]
    4928:	ldr	r3, [r3, #32]
    492a:	cmp	r3, r2
    492c:	bne.w	4cb8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x880>
    4930:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4934:	str.w	r0, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4938:	cbz	r1, 497e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    493a:	ldr	r3, [r1, #16]
    493c:	subs	r3, #1
    493e:	str	r3, [r1, #16]
    4940:	cbnz	r3, 497e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4942:	ldr.w	sl, [r9, #16]
    4946:	cmp.w	sl, #0
    494a:	beq.n	497e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    494c:	ldr.w	r3, [sl]
    4950:	ldr	r3, [r3, #32]
    4952:	cmp	r3, r2
    4954:	bne.w	4cd4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x89c>
    4958:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    495c:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4960:	cbz	r2, 4976 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    4962:	ldr	r3, [r2, #16]
    4964:	subs	r3, #1
    4966:	str	r3, [r2, #16]
    4968:	cbnz	r3, 4976 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    496a:	ldr.w	r0, [sl, #16]
    496e:	cbz	r0, 4976 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    4970:	ldr	r3, [r0, #0]
    4972:	ldr	r3, [r3, #32]
    4974:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4976:	mov	r0, sl
    4978:	movs	r1, #20
    497a:	bl	138d0 <operator delete(void*, unsigned int)>
    497e:	mov	r0, r9
    4980:	movs	r1, #20
    4982:	bl	138d0 <operator delete(void*, unsigned int)>
    4986:	mov	r0, r8
    4988:	movs	r1, #20
    498a:	bl	138d0 <operator delete(void*, unsigned int)>
    498e:	mov	r0, r7
    4990:	movs	r1, #20
    4992:	bl	138d0 <operator delete(void*, unsigned int)>
    4996:	mov	r0, r5
    4998:	movs	r1, #20
    499a:	bl	138d0 <operator delete(void*, unsigned int)>
    499e:	ldr	r3, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    49a0:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    49a2:	cmp	r3, #0
    49a4:	bne.w	4696 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x25e>
    49a8:	b.n	46c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    49aa:	blx	r3
    49ac:	movs	r4, #0
    49ae:	ldr	r3, [sp, #36]	; 0x24
    49b0:	b.n	4892 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    49b2:	blx	r3
    49b4:	b.n	45c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x188>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    49b6:	ldr	r5, [r1, #64]	; 0x40
    49b8:	ldr	r1, [pc, #160]	; (4a5c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    49ba:	cmp	r5, r1
    49bc:	bne.w	4c8c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    49c0:	mov	r0, r2
    49c2:	ldr	r3, [r0, #0]
    49c4:	ldr	r3, [r3, #64]	; 0x40
    49c6:	cmp	r3, r1
    49c8:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49cc:	ldr	r0, [r0, #16]
    49ce:	cmp	r0, #0
    49d0:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49d4:	ldr	r3, [r0, #0]
    49d6:	ldr	r3, [r3, #64]	; 0x40
    49d8:	cmp	r3, r1
    49da:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49de:	ldr	r0, [r0, #16]
    49e0:	cmp	r0, #0
    49e2:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49e6:	ldr	r3, [r0, #0]
    49e8:	ldr	r3, [r3, #64]	; 0x40
    49ea:	cmp	r3, r1
    49ec:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49f0:	ldr	r0, [r0, #16]
    49f2:	cmp	r0, #0
    49f4:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49f8:	ldr	r3, [r0, #0]
    49fa:	ldr	r3, [r3, #64]	; 0x40
    49fc:	cmp	r3, r1
    49fe:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4a02:	ldr	r0, [r0, #16]
    4a04:	cmp	r0, #0
    4a06:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a0a:	ldr	r3, [r0, #0]
    4a0c:	ldr	r3, [r3, #64]	; 0x40
    4a0e:	cmp	r3, r1
    4a10:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4a14:	ldr	r0, [r0, #16]
    4a16:	cmp	r0, #0
    4a18:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a1c:	ldr	r3, [r0, #0]
    4a1e:	ldr	r3, [r3, #64]	; 0x40
    4a20:	cmp	r3, r1
    4a22:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4a26:	ldr	r0, [r0, #16]
    4a28:	cmp	r0, #0
    4a2a:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a2e:	ldr	r3, [r0, #0]
    4a30:	ldr	r3, [r3, #64]	; 0x40
    4a32:	cmp	r3, r1
    4a34:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4a38:	ldr	r0, [r0, #16]
    4a3a:	cmp	r0, #0
    4a3c:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a40:	ldr	r3, [r0, #0]
    4a42:	ldr	r3, [r3, #64]	; 0x40
    4a44:	cmp	r3, r1
    4a46:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4a4a:	ldr	r0, [r0, #16]
    4a4c:	cmp	r0, #0
    4a4e:	beq.w	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a52:	ldr	r3, [r0, #0]
    4a54:	ldr	r3, [r3, #64]	; 0x40
    4a56:	blx	r3
    4a58:	b.n	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a5a:	nop
    4a5c:	.word	0x00000501
    4a60:	.word	0x00018e14
    4a64:	.word	0x000014c5
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4a68:	mov	r0, r2
    4a6a:	blx	r6

  while(f1.available()>0)
    4a6c:	cmp	r0, #0
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    4a6e:	ldr	r3, [sp, #16]
    4a70:	ble.n	4b1c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e4>
    4a72:	cmp	r3, #0
    4a74:	beq.n	4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a76:	ldr	r1, [r3, #0]
    4a78:	ldr	r2, [pc, #536]	; (4c94 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x85c>)
    4a7a:	ldr	r4, [r1, #40]	; 0x28
    4a7c:	cmp	r4, r2
    4a7e:	bne.n	4afe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c6>
    4a80:	ldr	r0, [r3, #16]
    4a82:	cmp	r0, #0
    4a84:	beq.n	4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a86:	ldr	r1, [r0, #0]
    4a88:	ldr	r4, [r1, #40]	; 0x28
    4a8a:	cmp	r4, r2
    4a8c:	bne.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a8e:	ldr	r0, [r0, #16]
    4a90:	cmp	r0, #0
    4a92:	beq.n	4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a94:	ldr	r1, [r0, #0]
    4a96:	ldr	r4, [r1, #40]	; 0x28
    4a98:	cmp	r4, r2
    4a9a:	bne.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a9c:	ldr	r0, [r0, #16]
    4a9e:	cmp	r0, #0
    4aa0:	beq.n	4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4aa2:	ldr	r1, [r0, #0]
    4aa4:	ldr	r4, [r1, #40]	; 0x28
    4aa6:	cmp	r4, r2
    4aa8:	bne.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4aaa:	ldr	r0, [r0, #16]
    4aac:	cmp	r0, #0
    4aae:	beq.n	4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4ab0:	ldr	r1, [r0, #0]
    4ab2:	ldr	r4, [r1, #40]	; 0x28
    4ab4:	cmp	r4, r2
    4ab6:	bne.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4ab8:	ldr	r0, [r0, #16]
    4aba:	cmp	r0, #0
    4abc:	beq.n	4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4abe:	ldr	r1, [r0, #0]
    4ac0:	ldr	r4, [r1, #40]	; 0x28
    4ac2:	cmp	r4, r2
    4ac4:	bne.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4ac6:	ldr	r0, [r0, #16]
    4ac8:	cbz	r0, 4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4aca:	ldr	r1, [r0, #0]
    4acc:	ldr	r4, [r1, #40]	; 0x28
    4ace:	cmp	r4, r2
    4ad0:	bne.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4ad2:	ldr	r0, [r0, #16]
    4ad4:	cbz	r0, 4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4ad6:	ldr	r1, [r0, #0]
    4ad8:	ldr	r4, [r1, #40]	; 0x28
    4ada:	cmp	r4, r2
    4adc:	bne.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4ade:	ldr	r0, [r0, #16]
    4ae0:	cbz	r0, 4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4ae2:	ldr	r1, [r0, #0]
    4ae4:	ldr	r4, [r1, #40]	; 0x28
    4ae6:	cmp	r4, r2
    4ae8:	bne.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4aea:	ldr	r0, [r0, #16]
    4aec:	cbz	r0, 4b24 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4aee:	ldr	r3, [r0, #0]
    4af0:	mov.w	r2, #2048	; 0x800
    4af4:	ldr	r3, [r3, #40]	; 0x28
    4af6:	add	r1, sp, #40	; 0x28
    4af8:	blx	r3
    4afa:	mov	r2, r0
    4afc:	b.n	4b0a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6d2>
    4afe:	mov	r0, r3
    4b00:	mov.w	r2, #2048	; 0x800
    4b04:	add	r1, sp, #40	; 0x28
    4b06:	blx	r4
    4b08:	mov	r2, r0
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    4b0a:	subs	r4, r2, #0
    4b0c:	blt.n	4b1a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e2>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4b0e:	ldr	r0, [sp, #36]	; 0x24
    4b10:	cbnz	r0, 4b30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6f8>
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    4b12:	cmp.w	r4, #2048	; 0x800
    4b16:	bge.w	45cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x194>
    4b1a:	ldr	r3, [sp, #16]
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4b1c:	cmp	r3, #0
    4b1e:	bne.w	4c6a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x832>
    4b22:	b.n	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4b24:	ldr	r0, [sp, #36]	; 0x24
    4b26:	cmp	r0, #0
    4b28:	beq.w	4c64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x82c>
    4b2c:	movs	r2, #0
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4b2e:	mov	r4, r2
    4b30:	ldr	r1, [r0, #0]
    4b32:	ldr	r3, [pc, #356]	; (4c98 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x860>)
    4b34:	ldr	r6, [r1, #44]	; 0x2c
    4b36:	cmp	r6, r3
    4b38:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b3a:	ldr	r0, [r0, #16]
    4b3c:	cmp	r0, #0
    4b3e:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b40:	ldr	r1, [r0, #0]
    4b42:	ldr	r6, [r1, #44]	; 0x2c
    4b44:	cmp	r6, r3
    4b46:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b48:	ldr	r0, [r0, #16]
    4b4a:	cmp	r0, #0
    4b4c:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b4e:	ldr	r1, [r0, #0]
    4b50:	ldr	r6, [r1, #44]	; 0x2c
    4b52:	cmp	r6, r3
    4b54:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b56:	ldr	r0, [r0, #16]
    4b58:	cmp	r0, #0
    4b5a:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b5c:	ldr	r1, [r0, #0]
    4b5e:	ldr	r6, [r1, #44]	; 0x2c
    4b60:	cmp	r6, r3
    4b62:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b64:	ldr	r0, [r0, #16]
    4b66:	cmp	r0, #0
    4b68:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b6a:	ldr	r1, [r0, #0]
    4b6c:	ldr	r6, [r1, #44]	; 0x2c
    4b6e:	cmp	r6, r3
    4b70:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b72:	ldr	r0, [r0, #16]
    4b74:	cmp	r0, #0
    4b76:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b78:	ldr	r1, [r0, #0]
    4b7a:	ldr	r6, [r1, #44]	; 0x2c
    4b7c:	cmp	r6, r3
    4b7e:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b80:	ldr	r0, [r0, #16]
    4b82:	cmp	r0, #0
    4b84:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b86:	ldr	r1, [r0, #0]
    4b88:	ldr	r6, [r1, #44]	; 0x2c
    4b8a:	cmp	r6, r3
    4b8c:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b8e:	ldr	r0, [r0, #16]
    4b90:	cmp	r0, #0
    4b92:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b94:	ldr	r1, [r0, #0]
    4b96:	ldr	r6, [r1, #44]	; 0x2c
    4b98:	cmp	r6, r3
    4b9a:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b9c:	ldr	r0, [r0, #16]
    4b9e:	cmp	r0, #0
    4ba0:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4ba2:	ldr	r1, [r0, #0]
    4ba4:	ldr	r6, [r1, #44]	; 0x2c
    4ba6:	cmp	r6, r3
    4ba8:	bne.n	4bba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4baa:	ldr	r0, [r0, #16]
    4bac:	cmp	r0, #0
    4bae:	beq.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4bb0:	ldr	r3, [r0, #0]
    4bb2:	add	r1, sp, #40	; 0x28
    4bb4:	ldr	r3, [r3, #44]	; 0x2c
    4bb6:	blx	r3
    4bb8:	b.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4bba:	add	r1, sp, #40	; 0x28
    4bbc:	blx	r6
    4bbe:	b.n	4b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4bc0:	mov	r0, r3
    4bc2:	blx	r2
    4bc4:	b.n	4a6c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4bc6:	ldr	r5, [r1, #64]	; 0x40
    4bc8:	ldr	r2, [pc, #208]	; (4c9c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4bca:	cmp	r5, r2
    4bcc:	bne.n	4c8c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4bce:	ldr	r3, [sp, #36]	; 0x24
    4bd0:	cmp	r3, #0
    4bd2:	beq.n	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bd4:	ldr	r2, [r3, #0]
    4bd6:	ldr	r1, [pc, #196]	; (4c9c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4bd8:	ldr	r2, [r2, #64]	; 0x40
    4bda:	cmp	r2, r1
    4bdc:	bne.n	4c52 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81a>
    4bde:	ldr	r0, [r3, #16]
    4be0:	cmp	r0, #0
    4be2:	beq.n	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4be4:	ldr	r2, [r0, #0]
    4be6:	ldr	r2, [r2, #64]	; 0x40
    4be8:	cmp	r2, r1
    4bea:	bne.n	4c54 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bec:	ldr	r0, [r0, #16]
    4bee:	cmp	r0, #0
    4bf0:	beq.n	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bf2:	ldr	r2, [r0, #0]
    4bf4:	ldr	r2, [r2, #64]	; 0x40
    4bf6:	cmp	r2, r1
    4bf8:	bne.n	4c54 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bfa:	ldr	r0, [r0, #16]
    4bfc:	cmp	r0, #0
    4bfe:	beq.n	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c00:	ldr	r2, [r0, #0]
    4c02:	ldr	r2, [r2, #64]	; 0x40
    4c04:	cmp	r2, r1
    4c06:	bne.n	4c54 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c08:	ldr	r0, [r0, #16]
    4c0a:	cbz	r0, 4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c0c:	ldr	r2, [r0, #0]
    4c0e:	ldr	r2, [r2, #64]	; 0x40
    4c10:	cmp	r2, r1
    4c12:	bne.n	4c54 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c14:	ldr	r0, [r0, #16]
    4c16:	cbz	r0, 4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c18:	ldr	r2, [r0, #0]
    4c1a:	ldr	r2, [r2, #64]	; 0x40
    4c1c:	cmp	r2, r1
    4c1e:	bne.n	4c54 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c20:	ldr	r0, [r0, #16]
    4c22:	cbz	r0, 4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c24:	ldr	r2, [r0, #0]
    4c26:	ldr	r2, [r2, #64]	; 0x40
    4c28:	cmp	r2, r1
    4c2a:	bne.n	4c54 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c2c:	ldr	r0, [r0, #16]
    4c2e:	cbz	r0, 4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c30:	ldr	r2, [r0, #0]
    4c32:	ldr	r2, [r2, #64]	; 0x40
    4c34:	cmp	r2, r1
    4c36:	bne.n	4c54 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c38:	ldr	r0, [r0, #16]
    4c3a:	cbz	r0, 4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c3c:	ldr	r2, [r0, #0]
    4c3e:	ldr	r2, [r2, #64]	; 0x40
    4c40:	cmp	r2, r1
    4c42:	bne.n	4c54 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c44:	ldr	r0, [r0, #16]
    4c46:	cbz	r0, 4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c48:	ldr	r3, [r0, #0]
    4c4a:	ldr	r3, [r3, #64]	; 0x40
    4c4c:	blx	r3
    4c4e:	ldr	r3, [sp, #36]	; 0x24
    4c50:	b.n	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c52:	mov	r0, r3
    4c54:	blx	r2
    4c56:	ldr	r3, [sp, #36]	; 0x24
    if(nd<nbuf) break;  // end of file
  }
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    4c58:	mvns	r4, r4
    4c5a:	lsrs	r4, r4, #31
    4c5c:	b.n	4892 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c5e:	mov	r0, r5
    4c60:	blx	r3
    4c62:	b.n	46c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4c64:	mov	r4, r0
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4c66:	cmp	r3, #0
    4c68:	beq.n	4cd0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x898>
    4c6a:	ldr	r2, [r3, #0]
    4c6c:	ldr	r1, [pc, #44]	; (4c9c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4c6e:	ldr	r5, [r2, #64]	; 0x40
    4c70:	cmp	r5, r1
    4c72:	bne.n	4c8c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4c74:	ldr	r0, [r3, #16]
    4c76:	cmp	r0, #0
    4c78:	beq.n	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4c7a:	b.n	49c2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x58a>
    4c7c:	blx	r3
    4c7e:	b.n	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c80:	mov	r0, r7
    4c82:	blx	r3
    4c84:	b.n	46bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4c86:	mov	r0, r5
    4c88:	blx	r3
    4c8a:	b.n	499e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4c8c:	mov	r0, r3
    4c8e:	blx	r5
    4c90:	b.n	4bce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4c92:	nop
    4c94:	.word	0x0000047d
    4c98:	.word	0x00000489
    4c9c:	.word	0x00000501
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4ca0:	mov	r0, r7
    4ca2:	blx	r3
    4ca4:	b.n	4996 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4ca6:	mov	r0, r8
    4ca8:	blx	r3
    4caa:	b.n	47d6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4cac:	mov	r0, r9
    4cae:	blx	r3
    4cb0:	b.n	47ce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4cb2:	mov	r0, r8
    4cb4:	blx	r3
    4cb6:	b.n	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4cb8:	mov	r0, r9
    4cba:	blx	r3
    4cbc:	b.n	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4cbe:	mov	r0, sl
    4cc0:	blx	r3
    4cc2:	b.n	47c6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4cc4:	mov	r0, fp
    4cc6:	blx	r3
    4cc8:	b.n	47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4cca:	ldr	r3, [sp, #16]
    4ccc:	ldr	r6, [pc, #12]	; (4cdc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8a4>)
    4cce:	b.n	49a0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x568>
    4cd0:	mov	r4, r3
    4cd2:	b.n	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4cd4:	mov	r0, sl
    4cd6:	blx	r3
    4cd8:	b.n	497e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4cda:	nop
    4cdc:	.word	0x00018e14

00004ce0 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4ce0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ce4:	mov	r8, r1
    4ce6:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    4cea:	cmp.w	r3, #4294967295
    4cee:	ite	ne
    4cf0:	movne	r7, r3
    4cf2:	moveq	r7, r2

    Record p1 = ReadIndexRecord(handle);
    4cf4:	mov	r1, r0
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4cf6:	mov	r4, r0
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4cf8:	mov	r2, r8
    4cfa:	add	r0, sp, #520	; 0x208
    4cfc:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    4d00:	mov	r2, r7
    4d02:	mov	r1, r4
    4d04:	add	r0, sp, #792	; 0x318
    4d06:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t newHandle;
    if(p1.isdir)
    4d0a:	ldrb.w	r6, [sp, #532]	; 0x214
    4d0e:	cmp	r6, #0
    4d10:	bne.n	4d98 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0xb8>
      CopyFiles(handle, p2.store, newHandle);
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    4d12:	add	r1, sp, #536	; 0x218
    4d14:	mov.w	r2, #256	; 0x100
    4d18:	add.w	r0, sp, #1080	; 0x438
    4d1c:	bl	15820 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4d20:	ldr.w	r5, [r4, #244]	; 0xf4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4d24:	ldrh.w	r0, [sp, #806]	; 0x326
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4d28:	ldr	r3, [sp, #796]	; 0x31c
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4d2a:	strh.w	r0, [sp, #1078]	; 0x436
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4d2e:	adds	r2, r5, #1
    4d30:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4d34:	mov	r1, r5
    4d36:	add.w	r2, sp, #1064	; 0x428
    4d3a:	mov	r0, r4
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4d3c:	str.w	r3, [sp, #1072]	; 0x430
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
    4d40:	str.w	r7, [sp, #1064]	; 0x428
      r.child = 0;
    4d44:	str.w	r6, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
      r.isdir = 0;
    4d48:	strb.w	r6, [sp, #1076]	; 0x434
      r.scanned = 0;
    4d4c:	strb.w	r6, [sp, #1077]	; 0x435
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4d50:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);
    4d54:	add	r2, sp, #792	; 0x318
    4d56:	mov	r1, r7
    4d58:	mov	r0, r4
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
    4d5a:	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    4d5c:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    4d60:	mov	r1, r8
    4d62:	add	r2, sp, #8
    4d64:	mov.w	r3, #256	; 0x100
    4d68:	mov	r0, r4
    4d6a:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4d6e:	add	r6, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    4d70:	mov	r7, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4d72:	mov	r1, r5
    4d74:	mov	r2, r6
    4d76:	mov.w	r3, #256	; 0x100
    4d7a:	mov	r0, r4
    4d7c:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>

      sd_copy(store0,oldfilename,store1,newfilename);
    4d80:	str	r6, [sp, #0]
    4d82:	mov	r3, r0
    4d84:	add	r2, sp, #8
    4d86:	mov	r1, r7
    4d88:	adds	r0, r4, #4
    4d8a:	bl	4438 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }

    return newHandle;
  }
    4d8e:	mov	r0, r5
    4d90:	add.w	sp, sp, #1336	; 0x538
    4d94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    4d98:	ldrh.w	r1, [sp, #534]	; 0x216
    4d9c:	mov	r2, r8
    4d9e:	mov	r0, r4
    4da0:	adds	r1, #1
    4da2:	bl	39a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4da6:	ldrb.w	r3, [sp, #532]	; 0x214
    4daa:	ldr	r0, [r4, #0]
    4dac:	ldrh.w	r1, [sp, #806]	; 0x326
    4db0:	add	r2, sp, #536	; 0x218
    4db2:	adds	r3, #0
    4db4:	str	r2, [sp, #0]
    4db6:	it	ne
    4db8:	movne	r3, #1
    4dba:	mov	r2, r7
    4dbc:	ldr	r5, [r0, #44]	; 0x2c
    4dbe:	mov	r0, r4
    4dc0:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    4dc2:	ldr	r3, [r4, #0]
    4dc4:	ldrh.w	r2, [sp, #806]	; 0x326
    4dc8:	ldr	r6, [r3, #84]	; 0x54

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4dca:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    4dcc:	mov	r3, r0
    4dce:	mov	r1, r8
    4dd0:	mov	r0, r4
    4dd2:	blx	r6

      sd_copy(store0,oldfilename,store1,newfilename);
    }

    return newHandle;
  }
    4dd4:	mov	r0, r5
    4dd6:	add.w	sp, sp, #1336	; 0x538
    4dda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dde:	nop

00004de0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:

bool MTPStorage_SD::CopyFiles(uint32_t handle, uint32_t store, uint32_t newHandle)
{ // assume handle and newHandle point to existing directories
    4de0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4de4:	mov	r4, r0
    4de6:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    4dea:	cmp.w	r3, #4294967295
    4dee:	ite	ne
    4df0:	movne	r8, r3
    4df2:	moveq	r8, r2
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4df4:	add	r0, sp, #520	; 0x208
    4df6:	mov	r2, r1
    4df8:	mov	r1, r4
    4dfa:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    4dfe:	mov	r2, r8
    4e00:	mov	r1, r4
    4e02:	add	r0, sp, #792	; 0x318
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4e04:	ldrh.w	r9, [sp, #534]	; 0x216
  Record p2=ReadIndexRecord(newHandle);
    4e08:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    4e0c:	ldr	r6, [sp, #524]	; 0x20c
  uint32_t iy= 0;
  while(ix)
    4e0e:	cmp	r6, #0
    4e10:	beq.n	4ee6 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x106>
    4e12:	movs	r5, #0
    4e14:	add	r7, sp, #264	; 0x108

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4e16:	add.w	sl, r4, #4
    4e1a:	b.n	4e50 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    4e1c:	ldrh.w	r3, [sp, #1350]	; 0x546
    4e20:	add.w	r3, r4, r3, lsl #2
    4e24:	ldr	r0, [r3, #88]	; 0x58
    4e26:	ldr	r3, [r0, #0]
    4e28:	ldr	r3, [r3, #8]
    4e2a:	blx	r3

    if(py.isdir) 
    { 
      sd_mkdir(py.store,newfilename);

      ScanDir(p1.store,ix); 
    4e2c:	mov	r2, r6
    4e2e:	mov	r1, r9
    4e30:	mov	r0, r4
    4e32:	bl	39a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    4e36:	ldr	r3, [r4, #0]
    4e38:	ldrh.w	r2, [sp, #806]	; 0x326
    4e3c:	ldr.w	fp, [r3, #84]	; 0x54
    4e40:	mov	r1, r6
    4e42:	mov	r3, r5
    4e44:	mov	r0, r4
    4e46:	blx	fp
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
    4e48:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4e4c:	cmp	r6, #0
    4e4e:	beq.n	4ed0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
  { // get child
    Record px = ReadIndexRecord(ix) ;
    4e50:	mov	r2, r6
    4e52:	mov	r1, r4
    4e54:	add.w	r0, sp, #1064	; 0x428
    4e58:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    4e5c:	mov.w	r2, #272	; 0x110
    4e60:	add.w	r1, sp, #1064	; 0x428
    4e64:	add.w	r0, sp, #1336	; 0x538
    4e68:	bl	11bf8 <memcpy>
    py.store = p2.store;
    py.parent = newHandle;
    py.sibling = iy;
    4e6c:	str.w	r5, [sp, #1344]	; 0x540
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4e70:	ldr.w	r5, [r4, #244]	; 0xf4
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    4e74:	ldrh.w	r3, [sp, #806]	; 0x326
    4e78:	strh.w	r3, [sp, #1350]	; 0x546
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4e7c:	adds	r2, r5, #1
    4e7e:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4e82:	mov	r1, r5
    4e84:	add.w	r2, sp, #1336	; 0x538
    4e88:	mov	r0, r4
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    py.parent = newHandle;
    4e8a:	str.w	r8, [sp, #1336]	; 0x538
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4e8e:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    py.sibling = iy;
    iy = AppendIndexRecord(py);

    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    4e92:	mov.w	r3, #256	; 0x100
    4e96:	add	r2, sp, #8
    4e98:	mov	r1, r6
    4e9a:	mov	r0, r4
    4e9c:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    4ea0:	mov	r1, r5
    4ea2:	mov.w	r3, #256	; 0x100
    4ea6:	mov	r2, r7
    4ea8:	mov	r0, r4
    4eaa:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    if(py.isdir) 
    4eae:	ldrb.w	r3, [sp, #1348]	; 0x544
    4eb2:	mov	r1, r7

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4eb4:	add	r2, sp, #8
    4eb6:	mov	r0, sl
    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);

    if(py.isdir) 
    4eb8:	cmp	r3, #0
    4eba:	bne.n	4e1c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4ebc:	ldrh.w	r3, [sp, #1350]	; 0x546
    4ec0:	str	r7, [sp, #0]
    4ec2:	mov	r1, r9
    4ec4:	bl	4438 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }
    ix = px.sibling;
    4ec8:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4ecc:	cmp	r6, #0
    4ece:	bne.n	4e50 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
  WriteIndexRecord(newHandle,p2);
    4ed0:	mov	r0, r4
    4ed2:	mov	r1, r8
    4ed4:	add	r2, sp, #792	; 0x318
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
    4ed6:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    4ed8:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  return true;
}
    4edc:	movs	r0, #1
    4ede:	addw	sp, sp, #1612	; 0x64c
    4ee2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  #endif

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
    4ee6:	mov	r5, r6
    4ee8:	b.n	4ed0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
    4eea:	nop

00004eec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    4eec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ef0:	mov	r5, r3
    4ef2:	add.w	r3, r0, r3, lsl #2
    4ef6:	mov	r4, r0
    4ef8:	ldr	r0, [r3, #84]	; 0x54
    4efa:	ldr	r6, [sp, #24]
    4efc:	ldr	r3, [r0, #0]
    4efe:	mov	r7, r1
    4f00:	ldr	r3, [r3, #8]
    4f02:	mov	r1, r6
    4f04:	mov	r8, r2
    4f06:	blx	r3

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    4f08:	cbnz	r0, 4f0e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x22>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4f0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f0e:	str	r6, [sp, #24]
    4f10:	mov	r3, r5
    4f12:	mov	r2, r8
    4f14:	mov	r1, r7
    4f16:	mov	r0, r4
    4f18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f1c:	b.w	4f20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>

00004f20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>:
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    4f20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f24:	add.w	sl, r0, r1, lsl #2
    4f28:	mov	r8, r1
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    4f2a:	ldr.w	r1, [sl, #84]	; 0x54
    4f2e:	sub.w	sp, sp, #596	; 0x254
    4f32:	mov	r9, r0
    4f34:	ldr	r0, [r1, #0]
    4f36:	str	r3, [sp, #8]
    4f38:	ldr	r4, [r0, #0]
    4f3a:	str	r2, [sp, #12]
    4f3c:	movs	r3, #0
    4f3e:	add	r0, sp, #40	; 0x28
    4f40:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4f42:	ldr	r3, [sp, #56]	; 0x38
    4f44:	cmp	r3, #0
    4f46:	beq.w	588a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x96a>
    4f4a:	ldr	r2, [r3, #0]
    4f4c:	ldr	r6, [pc, #460]	; (511c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1fc>)
    4f4e:	ldr	r2, [r2, #68]	; 0x44
    4f50:	cmp	r2, r6
    4f52:	bne.w	522a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30a>
    4f56:	ldr	r0, [r3, #16]
    4f58:	cmp	r0, #0
    4f5a:	beq.w	50d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f5e:	ldr	r2, [r0, #0]
    4f60:	ldr	r2, [r2, #68]	; 0x44
    4f62:	cmp	r2, r6
    4f64:	bne.w	522c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f68:	ldr	r0, [r0, #16]
    4f6a:	cmp	r0, #0
    4f6c:	beq.w	50d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f70:	ldr	r2, [r0, #0]
    4f72:	ldr	r2, [r2, #68]	; 0x44
    4f74:	cmp	r2, r6
    4f76:	bne.w	522c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f7a:	ldr	r0, [r0, #16]
    4f7c:	cmp	r0, #0
    4f7e:	beq.w	50d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f82:	ldr	r2, [r0, #0]
    4f84:	ldr	r2, [r2, #68]	; 0x44
    4f86:	cmp	r2, r6
    4f88:	bne.w	522c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f8c:	ldr	r0, [r0, #16]
    4f8e:	cmp	r0, #0
    4f90:	beq.w	50d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f94:	ldr	r2, [r0, #0]
    4f96:	ldr	r2, [r2, #68]	; 0x44
    4f98:	cmp	r2, r6
    4f9a:	bne.w	522c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f9e:	ldr	r0, [r0, #16]
    4fa0:	cmp	r0, #0
    4fa2:	beq.w	50d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4fa6:	ldr	r2, [r0, #0]
    4fa8:	ldr	r2, [r2, #68]	; 0x44
    4faa:	cmp	r2, r6
    4fac:	bne.w	522c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4fb0:	ldr	r0, [r0, #16]
    4fb2:	cmp	r0, #0
    4fb4:	beq.w	50d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4fb8:	ldr	r2, [r0, #0]
    4fba:	ldr	r2, [r2, #68]	; 0x44
    4fbc:	cmp	r2, r6
    4fbe:	bne.w	522c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4fc2:	ldr	r0, [r0, #16]
    4fc4:	cmp	r0, #0
    4fc6:	beq.w	50d8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4fca:	ldr	r3, [r0, #0]
    4fcc:	ldr	r3, [r3, #68]	; 0x44
    4fce:	blx	r3
    4fd0:	mov	r4, r0
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    4fd2:	cmp	r4, #0
    4fd4:	beq.w	5940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa20>
    4fd8:	ldr.w	fp, [pc, #336]	; 512c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    4fdc:	add	r4, sp, #336	; 0x150
  { while(1)
    {
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    4fde:	mov.w	r2, #256	; 0x100
    4fe2:	ldr	r1, [sp, #12]
    4fe4:	add	r0, sp, #80	; 0x50
    4fe6:	bl	15820 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    4fea:	add	r0, sp, #80	; 0x50
    4fec:	bl	15880 <strlen>
    4ff0:	add	r3, sp, #80	; 0x50
    4ff2:	add	r0, r3
    4ff4:	ldrb.w	r3, [r0, #-1]
    4ff8:	cmp	r3, #47	; 0x2f
    4ffa:	beq.n	5008 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xe8>
    4ffc:	mov.w	r2, #256	; 0x100
    5000:	ldr	r1, [pc, #284]	; (5120 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    5002:	add	r0, sp, #80	; 0x50
    5004:	bl	157cc <strlcat>

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    5008:	mov.w	r2, #256	; 0x100
    500c:	ldr	r1, [sp, #632]	; 0x278
    500e:	mov	r0, r4
    5010:	bl	15820 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    5014:	mov	r0, r4
    5016:	bl	15880 <strlen>
    501a:	add	r0, r4
    501c:	ldrb.w	r3, [r0, #-1]
    5020:	cmp	r3, #47	; 0x2f
    5022:	beq.n	5030 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x110>
    5024:	mov.w	r2, #256	; 0x100
    5028:	ldr	r1, [pc, #244]	; (5120 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    502a:	mov	r0, r4
    502c:	bl	157cc <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    5030:	ldr	r1, [sp, #56]	; 0x38
    5032:	cmp	r1, #0
    5034:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5038:	ldr	r3, [r1, #0]
    503a:	ldr	r2, [pc, #232]	; (5124 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x204>)
    503c:	ldr	r3, [r3, #80]	; 0x50
    503e:	cmp	r3, r2
    5040:	bne.w	5314 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5044:	ldr	r1, [r1, #16]
    5046:	cmp	r1, #0
    5048:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    504c:	ldr	r3, [r1, #0]
    504e:	ldr	r3, [r3, #80]	; 0x50
    5050:	cmp	r3, r2
    5052:	bne.w	5314 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5056:	ldr	r1, [r1, #16]
    5058:	cmp	r1, #0
    505a:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    505e:	ldr	r3, [r1, #0]
    5060:	ldr	r3, [r3, #80]	; 0x50
    5062:	cmp	r3, r2
    5064:	bne.w	5314 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5068:	ldr	r1, [r1, #16]
    506a:	cmp	r1, #0
    506c:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5070:	ldr	r3, [r1, #0]
    5072:	ldr	r3, [r3, #80]	; 0x50
    5074:	cmp	r3, r2
    5076:	bne.w	5314 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    507a:	ldr	r1, [r1, #16]
    507c:	cmp	r1, #0
    507e:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5082:	ldr	r3, [r1, #0]
    5084:	ldr	r3, [r3, #80]	; 0x50
    5086:	cmp	r3, r2
    5088:	bne.w	5314 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    508c:	ldr	r1, [r1, #16]
    508e:	cmp	r1, #0
    5090:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5094:	ldr	r3, [r1, #0]
    5096:	ldr	r3, [r3, #80]	; 0x50
    5098:	cmp	r3, r2
    509a:	bne.w	5314 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    509e:	ldr	r1, [r1, #16]
    50a0:	cmp	r1, #0
    50a2:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    50a6:	ldr	r3, [r1, #0]
    50a8:	ldr	r3, [r3, #80]	; 0x50
    50aa:	cmp	r3, r2
    50ac:	bne.w	5314 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    50b0:	ldr	r1, [r1, #16]
    50b2:	cmp	r1, #0
    50b4:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    50b8:	ldr	r3, [r1, #0]
    50ba:	ldr	r3, [r3, #80]	; 0x50
    50bc:	cmp	r3, r2
    50be:	bne.w	5314 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    50c2:	ldr	r1, [r1, #16]
    50c4:	cmp	r1, #0
    50c6:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    50ca:	ldr	r3, [r1, #0]
    50cc:	add	r5, sp, #60	; 0x3c
    50ce:	ldr	r3, [r3, #80]	; 0x50
    50d0:	mov	r0, r5
    50d2:	movs	r2, #0
    50d4:	blx	r3
    50d6:	b.n	531c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3fc>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50d8:	ldr.w	fp, [pc, #80]	; 512c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    50dc:	str.w	fp, [sp, #40]	; 0x28
    50e0:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50e2:	ldr	r2, [r3, #16]
    50e4:	subs	r2, #1
    50e6:	str	r2, [r3, #16]
    50e8:	cbnz	r2, 5112 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    50ea:	ldr	r5, [sp, #56]	; 0x38
    50ec:	cbz	r5, 5112 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    50ee:	ldr	r2, [r5, #0]
    50f0:	ldr	r3, [pc, #52]	; (5128 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x208>)
    50f2:	ldr	r2, [r2, #32]
    50f4:	cmp	r2, r3
    50f6:	bne.w	58a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x984>
    50fa:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50fc:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5100:	cbz	r1, 510a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    5102:	ldr	r2, [r1, #16]
    5104:	subs	r2, #1
    5106:	str	r2, [r1, #16]
    5108:	cbz	r2, 5130 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x210>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    510a:	mov	r0, r5
    510c:	movs	r1, #20
    510e:	bl	138d0 <operator delete(void*, unsigned int)>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    5112:	mov	r0, r4
    5114:	add.w	sp, sp, #596	; 0x254
    5118:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    511c:	.word	0x0000050d
    5120:	.word	0x00019334
    5124:	.word	0x00000539
    5128:	.word	0x000014c5
    512c:	.word	0x00018e14
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5130:	ldr	r6, [r5, #16]
    5132:	cmp	r6, #0
    5134:	beq.n	510a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    5136:	ldr	r2, [r6, #0]
    5138:	ldr	r2, [r2, #32]
    513a:	cmp	r2, r3
    513c:	bne.w	58ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x99a>
    5140:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5142:	str.w	fp, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5146:	cmp	r1, #0
    5148:	beq.n	5220 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    514a:	ldr	r2, [r1, #16]
    514c:	subs	r2, #1
    514e:	str	r2, [r1, #16]
    5150:	cmp	r2, #0
    5152:	bne.n	5220 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5154:	ldr	r7, [r6, #16]
    5156:	cmp	r7, #0
    5158:	beq.n	5220 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    515a:	ldr	r2, [r7, #0]
    515c:	ldr	r2, [r2, #32]
    515e:	cmp	r2, r3
    5160:	bne.w	58d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9b6>
    5164:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5166:	str.w	fp, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    516a:	cmp	r1, #0
    516c:	beq.n	5218 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    516e:	ldr	r2, [r1, #16]
    5170:	subs	r2, #1
    5172:	str	r2, [r1, #16]
    5174:	cmp	r2, #0
    5176:	bne.n	5218 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    5178:	ldr.w	r8, [r7, #16]
    517c:	cmp.w	r8, #0
    5180:	beq.n	5218 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    5182:	ldr.w	r2, [r8]
    5186:	ldr	r2, [r2, #32]
    5188:	cmp	r2, r3
    518a:	bne.w	58ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9cc>
    518e:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5192:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5196:	cmp	r1, #0
    5198:	beq.n	5210 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    519a:	ldr	r2, [r1, #16]
    519c:	subs	r2, #1
    519e:	str	r2, [r1, #16]
    51a0:	cmp	r2, #0
    51a2:	bne.n	5210 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    51a4:	ldr.w	r9, [r8, #16]
    51a8:	cmp.w	r9, #0
    51ac:	beq.n	5210 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    51ae:	ldr.w	r2, [r9]
    51b2:	ldr	r2, [r2, #32]
    51b4:	cmp	r2, r3
    51b6:	bne.w	5914 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9f4>
    51ba:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51be:	str.w	fp, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51c2:	cbz	r1, 5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    51c4:	ldr	r2, [r1, #16]
    51c6:	subs	r2, #1
    51c8:	str	r2, [r1, #16]
    51ca:	cbnz	r2, 5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    51cc:	ldr.w	sl, [r9, #16]
    51d0:	cmp.w	sl, #0
    51d4:	beq.n	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    51d6:	ldr.w	r2, [sl]
    51da:	ldr	r2, [r2, #32]
    51dc:	cmp	r2, r3
    51de:	bne.w	591a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9fa>
    51e2:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51e6:	str.w	fp, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51ea:	cbz	r2, 5200 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    51ec:	ldr	r3, [r2, #16]
    51ee:	subs	r3, #1
    51f0:	str	r3, [r2, #16]
    51f2:	cbnz	r3, 5200 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    51f4:	ldr.w	r0, [sl, #16]
    51f8:	cbz	r0, 5200 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    51fa:	ldr	r3, [r0, #0]
    51fc:	ldr	r3, [r3, #32]
    51fe:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5200:	mov	r0, sl
    5202:	movs	r1, #20
    5204:	bl	138d0 <operator delete(void*, unsigned int)>
    5208:	mov	r0, r9
    520a:	movs	r1, #20
    520c:	bl	138d0 <operator delete(void*, unsigned int)>
    5210:	mov	r0, r8
    5212:	movs	r1, #20
    5214:	bl	138d0 <operator delete(void*, unsigned int)>
    5218:	mov	r0, r7
    521a:	movs	r1, #20
    521c:	bl	138d0 <operator delete(void*, unsigned int)>
    5220:	mov	r0, r6
    5222:	movs	r1, #20
    5224:	bl	138d0 <operator delete(void*, unsigned int)>
    5228:	b.n	510a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    522a:	mov	r0, r3
    522c:	blx	r2
    522e:	mov	r4, r0
    5230:	b.n	4fd2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xb2>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5232:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5236:	ldr	r3, [r2, #16]
    5238:	subs	r3, #1
    523a:	str	r3, [r2, #16]
    523c:	cmp	r3, #0
    523e:	bne.n	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5240:	ldr	r4, [r5, #16]
    5242:	cmp	r4, #0
    5244:	beq.n	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5246:	ldr	r2, [r4, #0]
    5248:	ldr	r3, [pc, #192]	; (530c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ec>)
    524a:	ldr	r2, [r2, #32]
    524c:	cmp	r2, r3
    524e:	bne.w	58c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a6>
    5252:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5254:	str.w	fp, [r4]
    5258:	ldr	r0, [pc, #180]	; (5310 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    525a:	cmp	r1, #0
    525c:	beq.n	52e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    525e:	ldr	r2, [r1, #16]
    5260:	subs	r2, #1
    5262:	str	r2, [r1, #16]
    5264:	cmp	r2, #0
    5266:	bne.n	52e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    5268:	ldr	r5, [r4, #16]
    526a:	cmp	r5, #0
    526c:	beq.n	52e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    526e:	ldr	r2, [r5, #0]
    5270:	ldr	r2, [r2, #32]
    5272:	cmp	r2, r3
    5274:	bne.w	58dc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9bc>
    5278:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    527a:	str	r0, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    527c:	cmp	r1, #0
    527e:	beq.n	52de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5280:	ldr	r2, [r1, #16]
    5282:	subs	r2, #1
    5284:	str	r2, [r1, #16]
    5286:	cbnz	r2, 52de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5288:	ldr	r6, [r5, #16]
    528a:	cbz	r6, 52de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    528c:	ldr	r2, [r6, #0]
    528e:	ldr	r2, [r2, #32]
    5290:	cmp	r2, r3
    5292:	bne.w	5902 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e2>
    5296:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5298:	str.w	fp, [r6]
    529c:	ldr	r0, [pc, #112]	; (5310 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    529e:	cbz	r1, 52d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    52a0:	ldr	r2, [r1, #16]
    52a2:	subs	r2, #1
    52a4:	str	r2, [r1, #16]
    52a6:	cbnz	r2, 52d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    52a8:	ldr	r7, [r6, #16]
    52aa:	cbz	r7, 52d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    52ac:	ldr	r2, [r7, #0]
    52ae:	ldr	r2, [r2, #32]
    52b0:	cmp	r2, r3
    52b2:	bne.w	5908 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e8>
    52b6:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    52b8:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    52ba:	cbz	r2, 52ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    52bc:	ldr	r3, [r2, #16]
    52be:	subs	r3, #1
    52c0:	str	r3, [r2, #16]
    52c2:	cbnz	r3, 52ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    52c4:	ldr	r0, [r7, #16]
    52c6:	cbz	r0, 52ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    52c8:	ldr	r3, [r0, #0]
    52ca:	ldr	r3, [r3, #32]
    52cc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    52ce:	mov	r0, r7
    52d0:	movs	r1, #20
    52d2:	bl	138d0 <operator delete(void*, unsigned int)>
    52d6:	mov	r0, r6
    52d8:	movs	r1, #20
    52da:	bl	138d0 <operator delete(void*, unsigned int)>
    52de:	mov	r0, r5
    52e0:	movs	r1, #20
    52e2:	bl	138d0 <operator delete(void*, unsigned int)>
    52e6:	mov	r0, r4
    52e8:	movs	r1, #20
    52ea:	bl	138d0 <operator delete(void*, unsigned int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    52ee:	ldr.w	r0, [sl, #84]	; 0x54
    52f2:	ldr	r1, [sp, #12]
    52f4:	ldr	r3, [r0, #0]
    52f6:	ldr	r3, [r3, #20]
    52f8:	blx	r3
    52fa:	ldr	r3, [sp, #56]	; 0x38
    52fc:	mov	r4, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    52fe:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5302:	cmp	r3, #0
    5304:	bne.w	50e2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1c2>
    5308:	b.n	5112 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    530a:	nop
    530c:	.word	0x000014c5
    5310:	.word	0x00018e14
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    5314:	add	r5, sp, #60	; 0x3c
    5316:	mov	r0, r5
    5318:	movs	r2, #0
    531a:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    531c:	ldr	r2, [r5, #16]
    531e:	cmp	r2, #0
    5320:	beq.n	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5322:	ldr	r3, [r2, #0]
    5324:	ldr	r3, [r3, #68]	; 0x44
    5326:	cmp	r3, r6
    5328:	bne.w	5858 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x938>
    532c:	ldr	r0, [r2, #16]
    532e:	cmp	r0, #0
    5330:	beq.w	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5334:	ldr	r1, [r0, #0]
    5336:	ldr	r1, [r1, #68]	; 0x44
    5338:	cmp	r1, r6
    533a:	bne.w	586e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    533e:	ldr	r0, [r0, #16]
    5340:	cmp	r0, #0
    5342:	beq.w	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5346:	ldr	r3, [r0, #0]
    5348:	ldr	r3, [r3, #68]	; 0x44
    534a:	cmp	r3, r6
    534c:	bne.w	585a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93a>
    5350:	ldr	r0, [r0, #16]
    5352:	cmp	r0, #0
    5354:	beq.w	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5358:	ldr	r3, [r0, #0]
    535a:	ldr	r3, [r3, #68]	; 0x44
    535c:	cmp	r3, r6
    535e:	bne.w	585a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93a>
    5362:	ldr	r0, [r0, #16]
    5364:	cmp	r0, #0
    5366:	beq.w	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    536a:	ldr	r3, [r0, #0]
    536c:	ldr	r3, [r3, #68]	; 0x44
    536e:	cmp	r3, r6
    5370:	bne.w	585a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93a>
    5374:	ldr	r0, [r0, #16]
    5376:	cmp	r0, #0
    5378:	beq.w	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    537c:	ldr	r3, [r0, #0]
    537e:	ldr	r3, [r3, #68]	; 0x44
    5380:	cmp	r3, r6
    5382:	bne.w	585a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93a>
    5386:	ldr	r0, [r0, #16]
    5388:	cmp	r0, #0
    538a:	beq.w	5232 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    538e:	ldr	r3, [r0, #0]
    5390:	ldr	r3, [r3, #68]	; 0x44
    5392:	blx	r3

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);

      File f2=f1.openNextFile();
      if(!f2) break;
    5394:	cmp	r0, #0
    5396:	beq.w	5932 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa12>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    539a:	ldr	r0, [r5, #16]
    539c:	cmp	r0, #0
    539e:	beq.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    53a2:	ldr	r2, [r0, #0]
    53a4:	ldr	r3, [pc, #696]	; (5660 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    53a6:	ldr	r2, [r2, #72]	; 0x48
    53a8:	cmp	r2, r3
    53aa:	bne.w	585e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    53ae:	ldr	r0, [r0, #16]
    53b0:	cmp	r0, #0
    53b2:	beq.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    53b6:	ldr	r2, [r0, #0]
    53b8:	ldr	r2, [r2, #72]	; 0x48
    53ba:	cmp	r2, r3
    53bc:	bne.w	585e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    53c0:	ldr	r0, [r0, #16]
    53c2:	cmp	r0, #0
    53c4:	beq.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    53c8:	ldr	r2, [r0, #0]
    53ca:	ldr	r2, [r2, #72]	; 0x48
    53cc:	cmp	r2, r3
    53ce:	bne.w	585e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    53d2:	ldr	r0, [r0, #16]
    53d4:	cmp	r0, #0
    53d6:	beq.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    53da:	ldr	r2, [r0, #0]
    53dc:	ldr	r2, [r2, #72]	; 0x48
    53de:	cmp	r2, r3
    53e0:	bne.w	585e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    53e4:	ldr	r0, [r0, #16]
    53e6:	cmp	r0, #0
    53e8:	beq.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    53ec:	ldr	r2, [r0, #0]
    53ee:	ldr	r2, [r2, #72]	; 0x48
    53f0:	cmp	r2, r3
    53f2:	bne.w	585e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    53f6:	ldr	r0, [r0, #16]
    53f8:	cmp	r0, #0
    53fa:	beq.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    53fe:	ldr	r2, [r0, #0]
    5400:	ldr	r2, [r2, #72]	; 0x48
    5402:	cmp	r2, r3
    5404:	bne.w	585e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5408:	ldr	r0, [r0, #16]
    540a:	cmp	r0, #0
    540c:	beq.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x934>
    5410:	ldr	r3, [r0, #0]
    5412:	ldr	r3, [r3, #72]	; 0x48
    5414:	blx	r3
    5416:	mov	r1, r0
      { // generate filenames
        strlcat(tmp0Name,f2.name(),MAX_FILENAME_LEN);
    5418:	mov.w	r2, #256	; 0x100
    541c:	add	r0, sp, #80	; 0x50
    541e:	bl	157cc <strlcat>
    5422:	ldr	r0, [r5, #16]
    5424:	cmp	r0, #0
    5426:	beq.w	5850 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    542a:	ldr	r2, [r0, #0]
    542c:	ldr	r3, [pc, #560]	; (5660 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    542e:	ldr	r2, [r2, #72]	; 0x48
    5430:	cmp	r2, r3
    5432:	bne.w	5868 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5436:	ldr	r0, [r0, #16]
    5438:	cmp	r0, #0
    543a:	beq.w	5850 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    543e:	ldr	r2, [r0, #0]
    5440:	ldr	r2, [r2, #72]	; 0x48
    5442:	cmp	r2, r3
    5444:	bne.w	5868 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5448:	ldr	r0, [r0, #16]
    544a:	cmp	r0, #0
    544c:	beq.w	5850 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    5450:	ldr	r2, [r0, #0]
    5452:	ldr	r2, [r2, #72]	; 0x48
    5454:	cmp	r2, r3
    5456:	bne.w	5868 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    545a:	ldr	r0, [r0, #16]
    545c:	cmp	r0, #0
    545e:	beq.w	5850 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    5462:	ldr	r2, [r0, #0]
    5464:	ldr	r2, [r2, #72]	; 0x48
    5466:	cmp	r2, r3
    5468:	bne.w	5868 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    546c:	ldr	r0, [r0, #16]
    546e:	cmp	r0, #0
    5470:	beq.w	5850 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    5474:	ldr	r2, [r0, #0]
    5476:	ldr	r2, [r2, #72]	; 0x48
    5478:	cmp	r2, r3
    547a:	bne.w	5868 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    547e:	ldr	r0, [r0, #16]
    5480:	cmp	r0, #0
    5482:	beq.w	5850 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    5486:	ldr	r2, [r0, #0]
    5488:	ldr	r2, [r2, #72]	; 0x48
    548a:	cmp	r2, r3
    548c:	bne.w	5868 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5490:	ldr	r0, [r0, #16]
    5492:	cmp	r0, #0
    5494:	beq.w	5850 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x930>
    5498:	ldr	r3, [r0, #0]
    549a:	ldr	r3, [r3, #72]	; 0x48
    549c:	blx	r3
    549e:	mov	r1, r0
        strlcat(tmp1Name,f2.name(),MAX_FILENAME_LEN);
    54a0:	mov.w	r2, #256	; 0x100
    54a4:	mov	r0, r4
    54a6:	bl	157cc <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    54aa:	ldr	r0, [r5, #16]
    54ac:	cmp	r0, #0
    54ae:	beq.w	5730 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54b2:	ldr	r2, [r0, #0]
    54b4:	ldr	r3, [pc, #428]	; (5664 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x744>)
    54b6:	ldr	r2, [r2, #76]	; 0x4c
    54b8:	cmp	r2, r3
    54ba:	bne.w	5864 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    54be:	ldr	r0, [r0, #16]
    54c0:	cmp	r0, #0
    54c2:	beq.w	5730 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54c6:	ldr	r2, [r0, #0]
    54c8:	ldr	r2, [r2, #76]	; 0x4c
    54ca:	cmp	r2, r3
    54cc:	bne.w	5864 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    54d0:	ldr	r0, [r0, #16]
    54d2:	cmp	r0, #0
    54d4:	beq.w	5730 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54d8:	ldr	r2, [r0, #0]
    54da:	ldr	r2, [r2, #76]	; 0x4c
    54dc:	cmp	r2, r3
    54de:	bne.w	5864 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    54e2:	ldr	r0, [r0, #16]
    54e4:	cmp	r0, #0
    54e6:	beq.w	5730 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54ea:	ldr	r2, [r0, #0]
    54ec:	ldr	r2, [r2, #76]	; 0x4c
    54ee:	cmp	r2, r3
    54f0:	bne.w	5864 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    54f4:	ldr	r0, [r0, #16]
    54f6:	cmp	r0, #0
    54f8:	beq.w	5730 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54fc:	ldr	r2, [r0, #0]
    54fe:	ldr	r2, [r2, #76]	; 0x4c
    5500:	cmp	r2, r3
    5502:	bne.w	5864 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5506:	ldr	r0, [r0, #16]
    5508:	cmp	r0, #0
    550a:	beq.w	5730 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    550e:	ldr	r2, [r0, #0]
    5510:	ldr	r2, [r2, #76]	; 0x4c
    5512:	cmp	r2, r3
    5514:	bne.w	5864 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5518:	ldr	r0, [r0, #16]
    551a:	cmp	r0, #0
    551c:	beq.w	5730 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    5520:	ldr	r3, [r0, #0]
    5522:	ldr	r3, [r3, #76]	; 0x4c
    5524:	blx	r3

        if(f2.isDirectory())
    5526:	cmp	r0, #0
    5528:	beq.w	5730 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
        { 
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    552c:	str	r4, [sp, #0]
    552e:	ldr	r3, [sp, #8]
    5530:	add	r2, sp, #80	; 0x50
    5532:	mov	r1, r8
    5534:	mov	r0, r9
    5536:	bl	4eec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    553a:	cmp	r0, #0
    553c:	beq.w	5752 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x832>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5540:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5542:	str.w	fp, [r5]
    5546:	ldr	r1, [pc, #288]	; (5668 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5548:	cmp	r2, #0
    554a:	beq.w	4fde <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    554e:	ldr	r3, [r2, #16]
    5550:	subs	r3, #1
    5552:	str	r3, [r2, #16]
    5554:	cmp	r3, #0
    5556:	bne.w	4fde <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    555a:	ldr	r5, [r5, #16]
    555c:	cmp	r5, #0
    555e:	beq.w	4fde <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    5562:	ldr	r2, [r5, #0]
    5564:	ldr	r3, [pc, #260]	; (566c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x74c>)
    5566:	ldr	r2, [r2, #32]
    5568:	cmp	r2, r3
    556a:	bne.w	5872 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    556e:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5570:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5572:	cmp	r0, #0
    5574:	beq.w	5726 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5578:	ldr	r2, [r0, #16]
    557a:	subs	r2, #1
    557c:	str	r2, [r0, #16]
    557e:	cmp	r2, #0
    5580:	bne.w	5726 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5584:	ldr	r7, [r5, #16]
    5586:	cmp	r7, #0
    5588:	beq.w	5726 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    558c:	ldr	r2, [r7, #0]
    558e:	ldr	r2, [r2, #32]
    5590:	cmp	r2, r3
    5592:	bne.w	587a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95a>
    5596:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5598:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    559a:	cmp	r0, #0
    559c:	beq.w	571e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    55a0:	ldr	r2, [r0, #16]
    55a2:	subs	r2, #1
    55a4:	str	r2, [r0, #16]
    55a6:	cmp	r2, #0
    55a8:	bne.w	571e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    55ac:	ldr	r2, [r7, #16]
    55ae:	cmp	r2, #0
    55b0:	beq.w	571e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    55b4:	ldr	r1, [r2, #0]
    55b6:	ldr	r1, [r1, #32]
    55b8:	cmp	r1, r3
    55ba:	bne.w	5896 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x976>
    55be:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    55c2:	str.w	fp, [r2]
    55c6:	ldr	r0, [pc, #160]	; (5668 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    55c8:	cmp.w	lr, #0
    55cc:	beq.w	5716 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    55d0:	ldr.w	r1, [lr, #16]
    55d4:	subs	r1, #1
    55d6:	str.w	r1, [lr, #16]
    55da:	cmp	r1, #0
    55dc:	bne.w	5716 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    55e0:	ldr	r1, [r2, #16]
    55e2:	str	r1, [sp, #16]
    55e4:	cmp	r1, #0
    55e6:	beq.w	5716 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    55ea:	ldr	r1, [sp, #16]
    55ec:	ldr	r1, [r1, #0]
    55ee:	ldr	r1, [r1, #32]
    55f0:	cmp	r1, r3
    55f2:	bne.w	58aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x98a>
    55f6:	ldr	r1, [sp, #16]
    55f8:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    55fc:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    55fe:	cmp.w	lr, #0
    5602:	beq.w	570a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    5606:	ldr.w	r1, [lr, #16]
    560a:	subs	r1, #1
    560c:	str.w	r1, [lr, #16]
    5610:	cmp	r1, #0
    5612:	bne.n	570a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    5614:	ldr	r1, [sp, #16]
    5616:	ldr	r1, [r1, #16]
    5618:	str	r1, [sp, #20]
    561a:	cmp	r1, #0
    561c:	beq.n	570a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    561e:	ldr	r0, [sp, #20]
    5620:	ldr	r1, [r0, #0]
    5622:	ldr	r1, [r1, #32]
    5624:	cmp	r1, r3
    5626:	bne.w	58cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ac>
    562a:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    562e:	str.w	fp, [r0]
    5632:	ldr	r0, [pc, #52]	; (5668 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5634:	cmp.w	lr, #0
    5638:	beq.n	56fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    563a:	ldr.w	r1, [lr, #16]
    563e:	subs	r1, #1
    5640:	str.w	r1, [lr, #16]
    5644:	cmp	r1, #0
    5646:	bne.n	56fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5648:	ldr	r1, [sp, #20]
    564a:	ldr	r1, [r1, #16]
    564c:	str	r1, [sp, #24]
    564e:	cmp	r1, #0
    5650:	beq.n	56fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5652:	ldr	r1, [sp, #24]
    5654:	ldr	r1, [r1, #0]
    5656:	ldr	r1, [r1, #32]
    5658:	cmp	r1, r3
    565a:	bne.w	58e2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9c2>
    565e:	b.n	5670 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x750>
    5660:	.word	0x00000519
    5664:	.word	0x0000052d
    5668:	.word	0x00018e14
    566c:	.word	0x000014c5
    5670:	ldr	r1, [sp, #24]
    5672:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5676:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5678:	cmp.w	lr, #0
    567c:	beq.n	56f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    567e:	ldr.w	r1, [lr, #16]
    5682:	subs	r1, #1
    5684:	str.w	r1, [lr, #16]
    5688:	cmp	r1, #0
    568a:	bne.n	56f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    568c:	ldr	r1, [sp, #24]
    568e:	ldr	r1, [r1, #16]
    5690:	str	r1, [sp, #28]
    5692:	cbz	r1, 56f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5694:	ldr	r1, [sp, #28]
    5696:	ldr	r1, [r1, #0]
    5698:	ldr	r1, [r1, #32]
    569a:	cmp	r1, r3
    569c:	bne.w	58f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d8>
    56a0:	ldr	r1, [sp, #28]
    56a2:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    56a6:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    56a8:	cmp.w	lr, #0
    56ac:	beq.n	56e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    56ae:	ldr.w	r1, [lr, #16]
    56b2:	subs	r1, #1
    56b4:	str.w	r1, [lr, #16]
    56b8:	cbnz	r1, 56e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    56ba:	ldr	r1, [sp, #28]
    56bc:	ldr	r1, [r1, #16]
    56be:	cbz	r1, 56e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    56c0:	ldr	r0, [r1, #0]
    56c2:	ldr	r0, [r0, #32]
    56c4:	cmp	r0, r3
    56c6:	mov	lr, r0
    56c8:	bne.w	5920 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa00>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    56cc:	mov	r0, r1
    56ce:	str	r2, [sp, #36]	; 0x24
    56d0:	str.w	fp, [r0], #16
    56d4:	str	r1, [sp, #32]
		invalidate();
    56d6:	bl	27e0 <File::invalidate() [clone .isra.0]>
	}
    56da:	ldr	r1, [sp, #32]
    56dc:	mov	r0, r1
    56de:	movs	r1, #20
    56e0:	bl	138d0 <operator delete(void*, unsigned int)>
    56e4:	ldr	r2, [sp, #36]	; 0x24
    56e6:	ldr	r0, [sp, #28]
    56e8:	str	r2, [sp, #32]
    56ea:	movs	r1, #20
    56ec:	bl	138d0 <operator delete(void*, unsigned int)>
    56f0:	ldr	r2, [sp, #32]
    56f2:	ldr	r0, [sp, #24]
    56f4:	str	r2, [sp, #28]
    56f6:	movs	r1, #20
    56f8:	bl	138d0 <operator delete(void*, unsigned int)>
    56fc:	ldr	r2, [sp, #28]
    56fe:	ldr	r0, [sp, #20]
    5700:	str	r2, [sp, #24]
    5702:	movs	r1, #20
    5704:	bl	138d0 <operator delete(void*, unsigned int)>
    5708:	ldr	r2, [sp, #24]
    570a:	ldr	r0, [sp, #16]
    570c:	str	r2, [sp, #20]
    570e:	movs	r1, #20
    5710:	bl	138d0 <operator delete(void*, unsigned int)>
    5714:	ldr	r2, [sp, #20]
    5716:	mov	r0, r2
    5718:	movs	r1, #20
    571a:	bl	138d0 <operator delete(void*, unsigned int)>
    571e:	mov	r0, r7
    5720:	movs	r1, #20
    5722:	bl	138d0 <operator delete(void*, unsigned int)>
    5726:	mov	r0, r5
    5728:	movs	r1, #20
    572a:	bl	138d0 <operator delete(void*, unsigned int)>
    572e:	b.n	4fde <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
        }
        else
        { 
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5730:	str	r4, [sp, #0]
    5732:	ldr	r3, [sp, #8]
    5734:	add	r2, sp, #80	; 0x50
    5736:	mov	r1, r8
    5738:	mov	r0, r9
    573a:	bl	4438 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    573e:	cbz	r0, 5752 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x832>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) { return sdx[store]->remove(filename);  }
    5740:	ldr.w	r0, [sl, #84]	; 0x54
    5744:	ldr	r3, [r0, #0]
    5746:	add	r1, sp, #80	; 0x50
    5748:	ldr	r3, [r3, #16]
    574a:	blx	r3
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    574c:	cmp	r0, #0
    574e:	bne.w	5540 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x620>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5752:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5754:	str.w	fp, [r5]
    5758:	ldr	r1, [pc, #492]	; (5948 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa28>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    575a:	cmp	r2, #0
    575c:	beq.n	584a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92a>
    575e:	ldr	r3, [r2, #16]
    5760:	subs	r3, #1
    5762:	str	r3, [r2, #16]
    5764:	cmp	r3, #0
    5766:	bne.n	584a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92a>
    5768:	ldr	r4, [r5, #16]
    576a:	cmp	r4, #0
    576c:	beq.n	584a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92a>
    576e:	ldr	r2, [r4, #0]
    5770:	ldr	r3, [pc, #472]	; (594c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa2c>)
    5772:	ldr	r2, [r2, #32]
    5774:	cmp	r2, r3
    5776:	bne.w	58c0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a0>
    577a:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    577c:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    577e:	cmp	r0, #0
    5780:	beq.n	5842 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x922>
    5782:	ldr	r2, [r0, #16]
    5784:	subs	r2, #1
    5786:	str	r2, [r0, #16]
    5788:	cmp	r2, #0
    578a:	bne.n	5842 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x922>
    578c:	ldr	r5, [r4, #16]
    578e:	cmp	r5, #0
    5790:	beq.n	5842 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x922>
    5792:	ldr	r2, [r5, #0]
    5794:	ldr	r2, [r2, #32]
    5796:	cmp	r2, r3
    5798:	bne.w	58b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x994>
    579c:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    579e:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    57a0:	cmp	r0, #0
    57a2:	beq.n	583a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91a>
    57a4:	ldr	r2, [r0, #16]
    57a6:	subs	r2, #1
    57a8:	str	r2, [r0, #16]
    57aa:	cmp	r2, #0
    57ac:	bne.n	583a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91a>
    57ae:	ldr	r6, [r5, #16]
    57b0:	cmp	r6, #0
    57b2:	beq.n	583a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91a>
    57b4:	ldr	r2, [r6, #0]
    57b6:	ldr	r2, [r2, #32]
    57b8:	cmp	r2, r3
    57ba:	bne.w	58f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d2>
    57be:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    57c0:	str.w	fp, [r6]
    57c4:	ldr	r0, [pc, #384]	; (5948 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa28>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    57c6:	cmp	r1, #0
    57c8:	beq.n	5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x912>
    57ca:	ldr	r2, [r1, #16]
    57cc:	subs	r2, #1
    57ce:	str	r2, [r1, #16]
    57d0:	cbnz	r2, 5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x912>
    57d2:	ldr	r7, [r6, #16]
    57d4:	cbz	r7, 5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x912>
    57d6:	ldr	r2, [r7, #0]
    57d8:	ldr	r2, [r2, #32]
    57da:	cmp	r2, r3
    57dc:	bne.w	590e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ee>
    57e0:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    57e2:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    57e4:	cbz	r1, 582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x90a>
    57e6:	ldr	r2, [r1, #16]
    57e8:	subs	r2, #1
    57ea:	str	r2, [r1, #16]
    57ec:	cbnz	r2, 582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x90a>
    57ee:	ldr.w	r8, [r7, #16]
    57f2:	cmp.w	r8, #0
    57f6:	beq.n	582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x90a>
    57f8:	ldr.w	r2, [r8]
    57fc:	ldr	r2, [r2, #32]
    57fe:	cmp	r2, r3
    5800:	bne.w	592c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa0c>
    5804:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5808:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    580c:	cbz	r2, 5822 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x902>
    580e:	ldr	r3, [r2, #16]
    5810:	subs	r3, #1
    5812:	str	r3, [r2, #16]
    5814:	cbnz	r3, 5822 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x902>
    5816:	ldr.w	r0, [r8, #16]
    581a:	cbz	r0, 5822 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x902>
    581c:	ldr	r3, [r0, #0]
    581e:	ldr	r3, [r3, #32]
    5820:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5822:	mov	r0, r8
    5824:	movs	r1, #20
    5826:	bl	138d0 <operator delete(void*, unsigned int)>
    582a:	mov	r0, r7
    582c:	movs	r1, #20
    582e:	bl	138d0 <operator delete(void*, unsigned int)>
    5832:	mov	r0, r6
    5834:	movs	r1, #20
    5836:	bl	138d0 <operator delete(void*, unsigned int)>
    583a:	mov	r0, r5
    583c:	movs	r1, #20
    583e:	bl	138d0 <operator delete(void*, unsigned int)>
    5842:	mov	r0, r4
    5844:	movs	r1, #20
    5846:	bl	138d0 <operator delete(void*, unsigned int)>
    584a:	ldr	r3, [sp, #56]	; 0x38
    584c:	movs	r4, #0
    584e:	b.n	52fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5850:	ldr	r1, [pc, #252]	; (5950 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa30>)
    5852:	b.n	54a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
    5854:	ldr	r1, [pc, #248]	; (5950 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa30>)
    5856:	b.n	5418 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    5858:	mov	r0, r2
    585a:	blx	r3
    585c:	b.n	5394 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    585e:	blx	r2
    5860:	mov	r1, r0
    5862:	b.n	5418 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    5864:	blx	r2
    5866:	b.n	5526 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x606>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5868:	blx	r2
    586a:	mov	r1, r0
    586c:	b.n	54a0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    586e:	blx	r1
    5870:	b.n	5394 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5872:	mov	r0, r5
    5874:	blx	r2
    5876:	b.w	4fde <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    587a:	mov	r0, r7
    587c:	blx	r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    587e:	mov	r0, r5
    5880:	movs	r1, #20
    5882:	bl	138d0 <operator delete(void*, unsigned int)>
    5886:	b.w	4fde <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    588a:	mov	r4, r3
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    588c:	mov	r0, r4
    588e:	add.w	sp, sp, #596	; 0x254
    5892:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5896:	mov	r0, r2
    5898:	blx	r1
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    589a:	mov	r0, r7
    589c:	movs	r1, #20
    589e:	bl	138d0 <operator delete(void*, unsigned int)>
    58a2:	b.n	5726 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    58a4:	mov	r0, r5
    58a6:	blx	r2
    58a8:	b.n	5112 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    58aa:	str	r2, [sp, #20]
    58ac:	ldr	r0, [sp, #16]
    58ae:	blx	r1
    58b0:	ldr	r2, [sp, #20]
    58b2:	b.n	5716 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    58b4:	mov	r0, r5
    58b6:	blx	r2
    58b8:	b.n	5842 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x922>
    58ba:	mov	r0, r6
    58bc:	blx	r2
    58be:	b.n	510a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    58c0:	mov	r0, r4
    58c2:	blx	r2
    58c4:	b.n	584a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92a>
    58c6:	mov	r0, r4
    58c8:	blx	r2
    58ca:	b.n	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    58cc:	str	r2, [sp, #24]
    58ce:	ldr	r0, [sp, #20]
    58d0:	blx	r1
    58d2:	ldr	r2, [sp, #24]
    58d4:	b.n	570a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    58d6:	mov	r0, r7
    58d8:	blx	r2
    58da:	b.n	5220 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    58dc:	mov	r0, r5
    58de:	blx	r2
    58e0:	b.n	52e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    58e2:	str	r2, [sp, #28]
    58e4:	ldr	r0, [sp, #24]
    58e6:	blx	r1
    58e8:	ldr	r2, [sp, #28]
    58ea:	b.n	56fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    58ec:	mov	r0, r8
    58ee:	blx	r2
    58f0:	b.n	5218 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    58f2:	mov	r0, r6
    58f4:	blx	r2
    58f6:	b.n	583a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91a>
    58f8:	str	r2, [sp, #32]
    58fa:	ldr	r0, [sp, #28]
    58fc:	blx	r1
    58fe:	ldr	r2, [sp, #32]
    5900:	b.n	56f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5902:	mov	r0, r6
    5904:	blx	r2
    5906:	b.n	52de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5908:	mov	r0, r7
    590a:	blx	r2
    590c:	b.n	52d6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    590e:	mov	r0, r7
    5910:	blx	r2
    5912:	b.n	5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x912>
    5914:	mov	r0, r9
    5916:	blx	r2
    5918:	b.n	5210 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    591a:	mov	r0, sl
    591c:	blx	r2
    591e:	b.n	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    5920:	str	r2, [sp, #32]
    5922:	mov	r0, r1
    5924:	mov	r3, lr
    5926:	blx	r3
    5928:	ldr	r2, [sp, #32]
    592a:	b.n	56e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    592c:	mov	r0, r8
    592e:	blx	r2
    5930:	b.n	582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x90a>
    5932:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5934:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5938:	cmp	r2, #0
    593a:	beq.w	52ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    593e:	b.n	5236 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x316>
    5940:	ldr	r3, [sp, #56]	; 0x38
    5942:	ldr.w	fp, [pc, #4]	; 5948 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa28>
    5946:	b.n	52fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
    5948:	.word	0x00018e14
    594c:	.word	0x000014c5
    5950:	.word	0x00019064

00005954 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5954:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5958:	mov	r6, r1
    595a:	subw	sp, sp, #2696	; 0xa88
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    595e:	cmp.w	r3, #4294967295
    5962:	ite	ne
    5964:	movne	r7, r3
    5966:	moveq	r7, r2
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5968:	mov	r4, r0
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    596a:	mov	r1, r0
    596c:	mov	r2, r6
    596e:	add	r0, sp, #792	; 0x318
    5970:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    5974:	mov	r2, r7
    5976:	mov	r1, r4
    5978:	add.w	r0, sp, #1064	; 0x428
    597c:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    5980:	ldr	r2, [sp, #792]	; 0x318
    5982:	mov	r1, r4
    5984:	add.w	r0, sp, #1336	; 0x538
    5988:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if(p1.isdir) 
    598c:	ldrb.w	r3, [sp, #804]	; 0x324
    5990:	cbz	r3, 599c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    5992:	ldrb.w	r3, [sp, #805]	; 0x325
    5996:	cmp	r3, #0
    5998:	beq.w	5b34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e0>
      { ScanDir(p1.store, handle) ; // in case scan directory
        WriteIndexRecord(handle, p1);
      }
    }

    Record p1o = p1;
    599c:	mov.w	r2, #272	; 0x110
    59a0:	add	r1, sp, #792	; 0x318
    59a2:	add.w	r0, sp, #1608	; 0x648
    59a6:	bl	11bf8 <memcpy>
    Record p2o = p2;
    59aa:	mov.w	r2, #272	; 0x110
    59ae:	add.w	r1, sp, #1064	; 0x428
    59b2:	add.w	r0, sp, #1880	; 0x758
    59b6:	bl	11bf8 <memcpy>
    Record p3o = p3;

    char oldName[MAX_FILENAME_LEN];
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    59ba:	add	r2, sp, #280	; 0x118
    59bc:	mov.w	r3, #256	; 0x100
    59c0:	mov	r1, r6
    59c2:	mov	r0, r4
    59c4:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    uint32_t jx=-1;
    Record pxo;

      // remove index from old parent
      Record px;
      if(p3.child==handle)
    59c8:	ldr.w	r8, [sp, #1340]	; 0x53c
    59cc:	cmp	r6, r8
    59ce:	beq.w	5afa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1a6>
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
    59d2:	add	r0, sp, #8
    59d4:	mov	r2, r8
    59d6:	mov	r1, r4
    59d8:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    59dc:	add	r1, sp, #8
    59de:	mov.w	r2, #272	; 0x110
    59e2:	addw	r0, sp, #2424	; 0x978
    59e6:	bl	11bf8 <memcpy>
        pxo = px;
    59ea:	addw	r1, sp, #2424	; 0x978
    59ee:	addw	r0, sp, #2152	; 0x868
    59f2:	mov.w	r2, #272	; 0x110
    59f6:	bl	11bf8 <memcpy>
        while(handle != px.sibling)
    59fa:	ldr.w	r5, [sp, #2432]	; 0x980
    59fe:	cmp	r6, r5
    5a00:	bne.n	5a06 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb2>
    5a02:	b.n	5b4c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f8>
    5a04:	mov	r5, r3
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
    5a06:	mov	r2, r5
    5a08:	mov	r1, r4
    5a0a:	add	r0, sp, #8
    5a0c:	bl	2db8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5a10:	mov.w	r2, #272	; 0x110
    5a14:	add	r1, sp, #8
    5a16:	addw	r0, sp, #2424	; 0x978
    5a1a:	bl	11bf8 <memcpy>
          pxo = px;
    5a1e:	mov.w	r2, #272	; 0x110
    5a22:	addw	r1, sp, #2424	; 0x978
    5a26:	addw	r0, sp, #2152	; 0x868
    5a2a:	bl	11bf8 <memcpy>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    5a2e:	ldr.w	r3, [sp, #2432]	; 0x980
    5a32:	cmp	r6, r3
    5a34:	bne.n	5a04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb0>
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    5a36:	ldr	r3, [sp, #800]	; 0x320
    5a38:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    5a3c:	addw	r2, sp, #2424	; 0x978
    5a40:	mov	r1, r5
    5a42:	mov	r0, r4
    5a44:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    5a48:	ldrh.w	r0, [sp, #1078]	; 0x436
      p1.sibling = p2.child;
    5a4c:	ldr.w	r3, [sp, #1068]	; 0x42c
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    5a50:	strh.w	r0, [sp, #806]	; 0x326
      p1.sibling = p2.child;
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    5a54:	add	r2, sp, #792	; 0x318
    5a56:	mov	r1, r6
    5a58:	mov	r0, r4
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    5a5a:	str	r3, [sp, #800]	; 0x320
        px.sibling = p1.sibling;
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
    5a5c:	str	r7, [sp, #792]	; 0x318
      p1.store = p2.store;
      p1.sibling = p2.child;
      p2.child = handle;
    5a5e:	str.w	r6, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    5a62:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    5a66:	add.w	r2, sp, #1064	; 0x428
    5a6a:	mov	r1, r7
    5a6c:	mov	r0, r4
    5a6e:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      // now working on disk storage
      char newName[MAX_FILENAME_LEN];
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5a72:	mov.w	r3, #256	; 0x100
    5a76:	mov	r1, r6
    5a78:	add	r2, sp, #536	; 0x218
    5a7a:	mov	r0, r4
    5a7c:	bl	3218 <MTPStorage_SD::ConstructFilename(int, char*, int)>
        Serial.print(p1.store); Serial.print(": ");Serial.println(newName);
        dumpIndexList();
      #endif


    if(p1o.store == p2o.store)
    5a80:	ldrh.w	r1, [sp, #1622]	; 0x656
    5a84:	ldrh.w	r3, [sp, #1894]	; 0x766
    5a88:	cmp	r1, r3
    5a8a:	beq.n	5b12 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1be>
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    5a8c:	ldrb.w	r2, [sp, #1620]	; 0x654
    5a90:	cbz	r2, 5ad4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x180>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    }
    else
    { // move directory cross mtp-disks
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5a92:	add	r2, sp, #536	; 0x218
    5a94:	str	r2, [sp, #0]
    5a96:	adds	r0, r4, #4
    5a98:	add	r2, sp, #280	; 0x118
    5a9a:	bl	4eec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5a9e:	cmp	r0, #0
    5aa0:	bne.n	5b26 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1d2>
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    5aa2:	mov	r1, r5
    5aa4:	addw	r2, sp, #2152	; 0x868
    5aa8:	mov	r0, r4
    5aaa:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    5aae:	add.w	r2, sp, #1608	; 0x648
    5ab2:	mov	r1, r6
    5ab4:	mov	r0, r4
    5ab6:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    5aba:	add.w	r2, sp, #1880	; 0x758
    5abe:	mov	r1, r7
    5ac0:	mov	r0, r4
    5ac2:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    5ac6:	mov.w	r8, #0
  }
    5aca:	mov	r0, r8
    5acc:	addw	sp, sp, #2696	; 0xa88
    5ad0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5ad4:	add	r2, sp, #536	; 0x218
    5ad6:	str	r2, [sp, #0]
    5ad8:	adds	r0, r4, #4
    5ada:	add	r2, sp, #280	; 0x118
    5adc:	bl	4438 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5ae0:	mov	r8, r0
    5ae2:	cmp	r0, #0
    5ae4:	beq.n	5aa2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    5ae6:	ldrh.w	r3, [sp, #1894]	; 0x766
    5aea:	add.w	r4, r4, r3, lsl #2
    5aee:	add	r1, sp, #280	; 0x118
    5af0:	ldr	r0, [r4, #88]	; 0x58
    5af2:	ldr	r3, [r0, #0]
    5af4:	ldr	r3, [r3, #16]
    5af6:	blx	r3
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5af8:	b.n	5aca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x176>

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5afa:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(p1.parent, p3);    
    5afc:	ldr	r1, [sp, #792]	; 0x318

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5afe:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    5b02:	add.w	r2, sp, #1336	; 0x538
    5b06:	mov	r0, r4
    5b08:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    #if DEBUG>1
      Serial.print(p1.store); Serial.print(": "); Serial.println(oldName);
      dumpIndexList();
    #endif

    uint32_t jx=-1;
    5b0c:	mov.w	r5, #4294967295
    5b10:	b.n	5a48 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf4>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    5b12:	add.w	r1, r4, r1, lsl #2
    5b16:	add	r2, sp, #536	; 0x218
    5b18:	ldr	r0, [r1, #88]	; 0x58
    5b1a:	ldr	r3, [r0, #0]
    5b1c:	add	r1, sp, #280	; 0x118
    5b1e:	ldr	r3, [r3, #12]
    5b20:	blx	r3
      #endif


    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5b22:	cmp	r0, #0
    5b24:	beq.n	5aa2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    5b26:	mov.w	r8, #1
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
  }
    5b2a:	mov	r0, r8
    5b2c:	addw	sp, sp, #2696	; 0xa88
    5b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(p1.parent); 

    if(p1.isdir) 
    { if(!p1.scanned) 
      { ScanDir(p1.store, handle) ; // in case scan directory
    5b34:	mov	r2, r6
    5b36:	ldrh.w	r1, [sp, #806]	; 0x326
    5b3a:	mov	r0, r4
    5b3c:	bl	39a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    5b40:	add	r2, sp, #792	; 0x318
    5b42:	mov	r1, r6
    5b44:	mov	r0, r4
    5b46:	bl	2bec <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    5b4a:	b.n	599c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    5b4c:	mov	r5, r8
    5b4e:	b.n	5a36 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>

00005b50 <MTPD::GetNumObjects(unsigned long, unsigned long)>:

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5b50:	push	{r4, r5, r6, lr}
    5b52:	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    5b54:	ldr	r0, [r0, #0]
    5b56:	ldr	r3, [r0, #0]

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5b58:	subs	r5, r1, #1
    storage_->StartGetObjectHandles(store, parent);
    5b5a:	ldr	r3, [r3, #28]
    5b5c:	mov	r1, r5
    5b5e:	blx	r3
    int num = 0;
    5b60:	movs	r4, #0
    5b62:	b.n	5b66 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    while (storage_->GetNextObjectHandle(store)) num++;
    5b64:	adds	r4, #1
    5b66:	ldr	r0, [r6, #0]
    5b68:	ldr	r3, [r0, #0]
    5b6a:	mov	r1, r5
    5b6c:	ldr	r3, [r3, #32]
    5b6e:	blx	r3
    5b70:	cmp	r0, #0
    5b72:	bne.n	5b64 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    return num;
  }
    5b74:	mov	r0, r4
    5b76:	pop	{r4, r5, r6, pc}

00005b78 <MTPD::get_buffer()>:


#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    5b78:	push	{r4, lr}
    5b7a:	mov	r4, r0
    5b7c:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    5b7e:	cbnz	r0, 5b88 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    5b80:	bl	12808 <usb_malloc>
    5b84:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    5b86:	cbz	r0, 5b8a <MTPD::get_buffer()+0x12>
    5b88:	pop	{r4, pc}
    5b8a:	bl	2880 <mtp_yield()>
    5b8e:	b.n	5b7c <MTPD::get_buffer()+0x4>

00005b90 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b90:	cmp	r2, #0
    5b92:	ble.n	5bf2 <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    5b94:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b98:	mov.w	r9, #0
    5b9c:	mov	r6, r2
    5b9e:	mov	r7, r1
    5ba0:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5ba2:	mov	r8, r9
    5ba4:	b.n	5baa <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5ba6:	cmp	r6, r9
    5ba8:	ble.n	5bee <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    5baa:	mov	r0, r5
    5bac:	bl	5b78 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    5bb0:	ldr	r3, [r5, #4]
    5bb2:	ldrh.w	r0, [r3], #8
    5bb6:	rsb	r2, r9, r6
    5bba:	rsb	r4, r0, #64	; 0x40
    5bbe:	cmp	r4, r2
    5bc0:	it	ge
    5bc2:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    5bc4:	add.w	r1, r7, r9
    5bc8:	add	r0, r3
    5bca:	mov	r2, r4
    5bcc:	bl	11bf8 <memcpy>
        data_buffer_->len += to_copy;
    5bd0:	ldr	r1, [r5, #4]
    5bd2:	ldrh	r3, [r1, #0]
    5bd4:	add	r3, r4
    5bd6:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5bd8:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    5bda:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    5bdc:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5bde:	bne.n	5ba6 <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    5be0:	movs	r0, #4
    5be2:	bl	12a04 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5be6:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5be8:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5bec:	bgt.n	5baa <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    5bee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bf2:	bx	lr

00005bf4 <MTPD::writestring(char const*)>:
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5bf4:	push	{r4, r5, lr}
    if (*str) 
    5bf6:	ldrb	r3, [r1, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5bf8:	sub	sp, #12
    5bfa:	mov	r4, r0
    if (*str) 
    5bfc:	cbz	r3, 5c58 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    5bfe:	mov	r0, r1
    5c00:	mov	r5, r1
    5c02:	bl	15880 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c06:	ldrb	r1, [r4, #8]
    5c08:	adds	r0, #1
    5c0a:	strb.w	r0, [sp, #3]
    5c0e:	cbz	r1, 5c6a <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    5c10:	ldr	r3, [r4, #12]
    5c12:	adds	r3, #1
    5c14:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c16:	ldrb	r2, [r5, #0]
    5c18:	cbnz	r2, 5c28 <MTPD::writestring(char const*)+0x34>
    5c1a:	b.n	5c50 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5c1c:	ldr	r3, [r4, #12]
    5c1e:	adds	r3, #2
    5c20:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c22:	ldrb.w	r2, [r5, #1]!
    5c26:	cbz	r2, 5c46 <MTPD::writestring(char const*)+0x52>
    5c28:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c2c:	cmp	r1, #0
    5c2e:	bne.n	5c1c <MTPD::writestring(char const*)+0x28>
    5c30:	movs	r2, #2
    5c32:	add.w	r1, sp, #6
    5c36:	mov	r0, r4
    5c38:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c3c:	ldrb.w	r2, [r5, #1]!
    5c40:	ldrb	r1, [r4, #8]
    5c42:	cmp	r2, #0
    5c44:	bne.n	5c28 <MTPD::writestring(char const*)+0x34>
    5c46:	movs	r3, #0
    5c48:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c4c:	cbz	r1, 5c8e <MTPD::writestring(char const*)+0x9a>
    5c4e:	ldr	r3, [r4, #12]
      write_length_ += len;
    5c50:	adds	r3, #2
    5c52:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5c54:	add	sp, #12
    5c56:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c58:	ldrb	r2, [r0, #8]
    5c5a:	strb.w	r3, [sp, #2]
    5c5e:	cbz	r2, 5c80 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    5c60:	ldr	r3, [r0, #12]
    5c62:	adds	r3, #1
    5c64:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5c66:	add	sp, #12
    5c68:	pop	{r4, r5, pc}
    5c6a:	movs	r2, #1
    5c6c:	add.w	r1, sp, #3
    5c70:	mov	r0, r4
    5c72:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c76:	ldrb	r2, [r5, #0]
    5c78:	ldrb	r1, [r4, #8]
    5c7a:	cmp	r2, #0
    5c7c:	bne.n	5c28 <MTPD::writestring(char const*)+0x34>
    5c7e:	b.n	5c46 <MTPD::writestring(char const*)+0x52>
    5c80:	movs	r2, #1
    5c82:	add.w	r1, sp, #2
    5c86:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    5c8a:	add	sp, #12
    5c8c:	pop	{r4, r5, pc}
    5c8e:	mov	r0, r4
    5c90:	movs	r2, #2
    5c92:	add	r1, sp, #4
    5c94:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5c98:	add	sp, #12
    5c9a:	pop	{r4, r5, pc}

00005c9c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5c9c:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c9e:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5ca0:	sub	sp, #8
    5ca2:	mov	r4, r0
    5ca4:	mov	r5, r1
    5ca6:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5caa:	cbz	r3, 5ce4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    5cac:	ldr	r3, [r0, #12]
    5cae:	movw	r2, #65535	; 0xffff
    5cb2:	adds	r3, #2
    5cb4:	str	r3, [r0, #12]
    5cb6:	strh.w	r2, [sp, #6]
    5cba:	adds	r3, #2
    5cbc:	movs	r2, #0
    5cbe:	str	r3, [r4, #12]
    5cc0:	strb.w	r2, [sp, #2]
    5cc4:	adds	r3, #1
    5cc6:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5cc8:	movw	r3, #54274	; 0xd402
    5ccc:	cmp	r5, r3
    5cce:	beq.n	5d20 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cd0:	ldrb	r3, [r4, #8]
    5cd2:	movs	r2, #0
    5cd4:	strb.w	r2, [sp, #3]
    5cd8:	cbz	r3, 5d3c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    5cda:	ldr	r3, [r4, #12]
    5cdc:	adds	r3, #1
    5cde:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5ce0:	add	sp, #8
    5ce2:	pop	{r4, r5, r6, pc}
    5ce4:	movs	r2, #2
    5ce6:	add	r1, sp, #4
    5ce8:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5cec:	ldrb	r6, [r4, #8]
    5cee:	movw	r3, #65535	; 0xffff
    5cf2:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cf6:	cbnz	r6, 5d4c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    5cf8:	movs	r2, #2
    5cfa:	add.w	r1, sp, #6
    5cfe:	mov	r0, r4
    5d00:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5d04:	ldrb	r3, [r4, #8]
    5d06:	strb.w	r6, [sp, #2]
    5d0a:	cbnz	r3, 5d50 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    5d0c:	movs	r2, #1
    5d0e:	add.w	r1, sp, #2
    5d12:	mov	r0, r4
    5d14:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5d18:	movw	r3, #54274	; 0xd402
    5d1c:	cmp	r5, r3
    5d1e:	bne.n	5cd0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5d20:	ldr	r1, [pc, #48]	; (5d54 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    5d22:	mov	r0, r4
    5d24:	bl	5bf4 <MTPD::writestring(char const*)>
    5d28:	ldr	r1, [pc, #40]	; (5d54 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    5d2a:	mov	r0, r4
    5d2c:	bl	5bf4 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d30:	ldrb	r3, [r4, #8]
    5d32:	movs	r2, #0
    5d34:	strb.w	r2, [sp, #3]
    5d38:	cmp	r3, #0
    5d3a:	bne.n	5cda <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    5d3c:	mov	r0, r4
    5d3e:	movs	r2, #1
    5d40:	add.w	r1, sp, #3
    5d44:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5d48:	add	sp, #8
    5d4a:	pop	{r4, r5, r6, pc}
    5d4c:	ldr	r3, [r4, #12]
    5d4e:	b.n	5cba <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    5d50:	ldr	r3, [r4, #12]
    5d52:	b.n	5cc4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    5d54:	.word	0x0001939c

00005d58 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5d58:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d5a:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5d5c:	sub	sp, #68	; 0x44
    5d5e:	movs	r5, #100	; 0x64
    5d60:	mov	r4, r0
    5d62:	strh.w	r5, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d66:	cmp	r3, #0
    5d68:	beq.w	5eb8 <MTPD::WriteDescriptor()+0x160>
      write_length_ += len;
    5d6c:	ldr	r3, [r0, #12]
    5d6e:	movs	r2, #6
    5d70:	adds	r3, #2
    5d72:	str	r3, [r0, #12]
    5d74:	str	r2, [sp, #24]
    5d76:	adds	r3, #4
    5d78:	movs	r2, #100	; 0x64
    5d7a:	str	r3, [r4, #12]
    5d7c:	strh.w	r2, [sp, #6]
    5d80:	adds	r3, #2
    5d82:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    5d84:	ldr	r1, [pc, #560]	; (5fb8 <MTPD::WriteDescriptor()+0x260>)
    5d86:	mov	r0, r4
    5d88:	bl	5bf4 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d8c:	ldrb	r3, [r4, #8]
    5d8e:	movs	r2, #0
    5d90:	strh.w	r2, [sp, #4]
    5d94:	cmp	r3, #0
    5d96:	beq.w	5f76 <MTPD::WriteDescriptor()+0x21e>
      write_length_ += len;
    5d9a:	ldr	r3, [r4, #12]
    5d9c:	movs	r2, #20
    5d9e:	adds	r3, #2
    5da0:	str	r3, [r4, #12]
    5da2:	str	r2, [sp, #20]
    5da4:	adds	r3, #4
    5da6:	str	r3, [r4, #12]
    5da8:	movs	r6, #1
    5daa:	ldr	r5, [pc, #528]	; (5fbc <MTPD::WriteDescriptor()+0x264>)
    5dac:	movw	r3, #4097	; 0x1001
    5db0:	add.w	r7, r5, #38	; 0x26
    5db4:	b.n	5dc6 <MTPD::WriteDescriptor()+0x6e>
    5db6:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5db8:	cmp	r5, r7
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5dba:	add.w	r3, r3, #2
    5dbe:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5dc0:	beq.n	5de0 <MTPD::WriteDescriptor()+0x88>
    5dc2:	ldrh.w	r3, [r5, #2]!
    5dc6:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5dca:	cmp	r6, #0
    5dcc:	bne.n	5db6 <MTPD::WriteDescriptor()+0x5e>
    5dce:	movs	r2, #2
    5dd0:	add.w	r1, sp, #10
    5dd4:	mov	r0, r4
    5dd6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5dda:	cmp	r5, r7
    5ddc:	ldrb	r6, [r4, #8]
    5dde:	bne.n	5dc2 <MTPD::WriteDescriptor()+0x6a>
    5de0:	movs	r3, #3
    5de2:	str	r3, [sp, #28]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5de4:	cmp	r6, #0
    5de6:	beq.w	5f68 <MTPD::WriteDescriptor()+0x210>
      write_length_ += len;
    5dea:	ldr	r3, [r4, #12]
    5dec:	adds	r3, #4
    5dee:	str	r3, [r4, #12]
    5df0:	ldr	r5, [pc, #460]	; (5fc0 <MTPD::WriteDescriptor()+0x268>)
    5df2:	movw	r3, #16388	; 0x4004
    5df6:	adds	r7, r5, #4
    5df8:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5dfc:	cbz	r6, 5e16 <MTPD::WriteDescriptor()+0xbe>
      write_length_ += len;
    5dfe:	ldr	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5e00:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5e02:	add.w	r3, r3, #2
    5e06:	str	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5e08:	beq.n	5e26 <MTPD::WriteDescriptor()+0xce>
    5e0a:	ldrh.w	r3, [r5, #2]!
    5e0e:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e12:	cmp	r6, #0
    5e14:	bne.n	5dfe <MTPD::WriteDescriptor()+0xa6>
    5e16:	movs	r2, #2
    5e18:	add	r1, sp, #12
    5e1a:	mov	r0, r4
    5e1c:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5e20:	cmp	r7, r5
    5e22:	ldrb	r6, [r4, #8]
    5e24:	bne.n	5e0a <MTPD::WriteDescriptor()+0xb2>
    5e26:	movs	r3, #1
    5e28:	str	r3, [sp, #40]	; 0x28
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e2a:	cmp	r6, #0
    5e2c:	beq.n	5eec <MTPD::WriteDescriptor()+0x194>
      write_length_ += len;
    5e2e:	ldr	r3, [r4, #12]
    5e30:	movw	r2, #54274	; 0xd402
    5e34:	adds	r3, #4
    5e36:	str	r3, [r4, #12]
    5e38:	strh.w	r2, [sp, #18]
    5e3c:	adds	r3, #2
    5e3e:	movs	r2, #0
    5e40:	str	r3, [r4, #12]
    5e42:	str	r2, [sp, #36]	; 0x24
    5e44:	adds	r3, #4
    5e46:	movs	r2, #2
    5e48:	str	r3, [r4, #12]
    5e4a:	str	r2, [sp, #32]
    5e4c:	adds	r3, #4
    5e4e:	mov.w	r2, #12288	; 0x3000
    5e52:	str	r3, [r4, #12]
    5e54:	strh.w	r2, [sp, #16]
    5e58:	adds	r3, #2
    5e5a:	movw	r2, #12289	; 0x3001
    5e5e:	str	r3, [r4, #12]
    5e60:	strh.w	r2, [sp, #14]
    5e64:	adds	r3, #2
    5e66:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    5e68:	ldr	r1, [pc, #344]	; (5fc4 <MTPD::WriteDescriptor()+0x26c>)
    5e6a:	mov	r0, r4
    5e6c:	bl	5bf4 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    5e70:	ldr	r1, [pc, #340]	; (5fc8 <MTPD::WriteDescriptor()+0x270>)
    5e72:	mov	r0, r4
    5e74:	bl	5bf4 <MTPD::writestring(char const*)>
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    5e78:	vldr	s0, [pc, #336]	; 5fcc <MTPD::WriteDescriptor()+0x274>
    5e7c:	add	r2, sp, #44	; 0x2c
    5e7e:	movs	r1, #2
    5e80:	movs	r0, #3
    5e82:	bl	12158 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    5e86:	movs	r2, #20
    5e88:	ldr	r1, [pc, #324]	; (5fd0 <MTPD::WriteDescriptor()+0x278>)
    5e8a:	add	r0, sp, #44	; 0x2c
    5e8c:	bl	157cc <strlcat>
    writestring( buf );    
    5e90:	mov	r0, r4
    5e92:	add	r1, sp, #44	; 0x2c
    5e94:	bl	5bf4 <MTPD::writestring(char const*)>
    5e98:	ldr	r2, [pc, #312]	; (5fd4 <MTPD::WriteDescriptor()+0x27c>)
    5e9a:	add	r3, sp, #44	; 0x2c
    5e9c:	add.w	r0, sp, #54	; 0x36
    
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    5ea0:	ldrh.w	r1, [r2, #2]!
    5ea4:	strb.w	r1, [r3], #1
    5ea8:	cmp	r3, r0
    5eaa:	bne.n	5ea0 <MTPD::WriteDescriptor()+0x148>
    writestring(buf);    
    5eac:	add	r1, sp, #44	; 0x2c
    5eae:	mov	r0, r4
    5eb0:	bl	5bf4 <MTPD::writestring(char const*)>
  }
    5eb4:	add	sp, #68	; 0x44
    5eb6:	pop	{r4, r5, r6, r7, pc}
    5eb8:	movs	r2, #2
    5eba:	add	r1, sp, #8
    5ebc:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5ec0:	ldrb	r3, [r4, #8]
    5ec2:	movs	r2, #6
    5ec4:	str	r2, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ec6:	cmp	r3, #0
    5ec8:	bne.n	5f96 <MTPD::WriteDescriptor()+0x23e>
    5eca:	movs	r2, #4
    5ecc:	add	r1, sp, #24
    5ece:	mov	r0, r4
    5ed0:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5ed4:	ldrb	r3, [r4, #8]
    5ed6:	strh.w	r5, [sp, #6]
    5eda:	cmp	r3, #0
    5edc:	bne.n	5f9a <MTPD::WriteDescriptor()+0x242>
    5ede:	movs	r2, #2
    5ee0:	add.w	r1, sp, #6
    5ee4:	mov	r0, r4
    5ee6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5eea:	b.n	5d84 <MTPD::WriteDescriptor()+0x2c>
    5eec:	movs	r2, #4
    5eee:	add	r1, sp, #40	; 0x28
    5ef0:	mov	r0, r4
    5ef2:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5ef6:	ldrb	r3, [r4, #8]
    5ef8:	movw	r2, #54274	; 0xd402
    5efc:	strh.w	r2, [sp, #18]
    5f00:	cmp	r3, #0
    5f02:	bne.n	5f9e <MTPD::WriteDescriptor()+0x246>
    5f04:	movs	r2, #2
    5f06:	add.w	r1, sp, #18
    5f0a:	mov	r0, r4
    5f0c:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5f10:	ldrb	r3, [r4, #8]
    5f12:	str	r6, [sp, #36]	; 0x24
    5f14:	cmp	r3, #0
    5f16:	bne.n	5fa2 <MTPD::WriteDescriptor()+0x24a>
    5f18:	movs	r2, #4
    5f1a:	add	r1, sp, #36	; 0x24
    5f1c:	mov	r0, r4
    5f1e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5f22:	ldrb	r3, [r4, #8]
    5f24:	movs	r5, #2
    5f26:	str	r5, [sp, #32]
    5f28:	cmp	r3, #0
    5f2a:	bne.n	5fa6 <MTPD::WriteDescriptor()+0x24e>
    5f2c:	movs	r2, #4
    5f2e:	add	r1, sp, #32
    5f30:	mov	r0, r4
    5f32:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5f36:	ldrb	r3, [r4, #8]
    5f38:	mov.w	r2, #12288	; 0x3000
    5f3c:	strh.w	r2, [sp, #16]
    5f40:	cmp	r3, #0
    5f42:	bne.n	5faa <MTPD::WriteDescriptor()+0x252>
    5f44:	mov	r2, r5
    5f46:	add	r1, sp, #16
    5f48:	mov	r0, r4
    5f4a:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5f4e:	ldrb	r3, [r4, #8]
    5f50:	movw	r2, #12289	; 0x3001
    5f54:	strh.w	r2, [sp, #14]
    5f58:	cbnz	r3, 5fae <MTPD::WriteDescriptor()+0x256>
    5f5a:	mov	r2, r5
    5f5c:	add.w	r1, sp, #14
    5f60:	mov	r0, r4
    5f62:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5f66:	b.n	5e68 <MTPD::WriteDescriptor()+0x110>
    5f68:	movs	r2, #4
    5f6a:	add	r1, sp, #28
    5f6c:	mov	r0, r4
    5f6e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5f72:	ldrb	r6, [r4, #8]
    5f74:	b.n	5df0 <MTPD::WriteDescriptor()+0x98>
    5f76:	movs	r2, #2
    5f78:	add	r1, sp, #4
    5f7a:	mov	r0, r4
    5f7c:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5f80:	ldrb	r3, [r4, #8]
    5f82:	movs	r2, #20
    5f84:	str	r2, [sp, #20]
    5f86:	cbnz	r3, 5fb2 <MTPD::WriteDescriptor()+0x25a>
    5f88:	movs	r2, #4
    5f8a:	add	r1, sp, #20
    5f8c:	mov	r0, r4
    5f8e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    5f92:	ldrb	r6, [r4, #8]
    5f94:	b.n	5daa <MTPD::WriteDescriptor()+0x52>
    5f96:	ldr	r3, [r4, #12]
    5f98:	b.n	5d76 <MTPD::WriteDescriptor()+0x1e>
    5f9a:	ldr	r3, [r4, #12]
    5f9c:	b.n	5d80 <MTPD::WriteDescriptor()+0x28>
    5f9e:	ldr	r3, [r4, #12]
    5fa0:	b.n	5e3c <MTPD::WriteDescriptor()+0xe4>
    5fa2:	ldr	r3, [r4, #12]
    5fa4:	b.n	5e44 <MTPD::WriteDescriptor()+0xec>
    5fa6:	ldr	r3, [r4, #12]
    5fa8:	b.n	5e4c <MTPD::WriteDescriptor()+0xf4>
    5faa:	ldr	r3, [r4, #12]
    5fac:	b.n	5e58 <MTPD::WriteDescriptor()+0x100>
    5fae:	ldr	r3, [r4, #12]
    5fb0:	b.n	5e64 <MTPD::WriteDescriptor()+0x10c>
    5fb2:	ldr	r3, [r4, #12]
    5fb4:	b.n	5da4 <MTPD::WriteDescriptor()+0x4c>
    5fb6:	nop
    5fb8:	.word	0x000193a4
    5fbc:	.word	0x00019364
    5fc0:	.word	0x000193ec
    5fc4:	.word	0x000193b8
    5fc8:	.word	0x0001939c
    5fcc:	.word	0x3fc51eb8
    5fd0:	.word	0x000193c0
    5fd4:	.word	0x1fff0b00

00005fd8 <MTPD::WriteStorageIDs()>:
    
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5fd8:	push	{r4, r5, r6, lr}
    5fda:	mov	r5, r0
    uint32_t num=storage_->get_FSCount();
    5fdc:	ldr	r0, [r0, #0]
    5fde:	ldr	r2, [pc, #92]	; (603c <MTPD::WriteStorageIDs()+0x64>)
    5fe0:	ldr	r3, [r0, #0]
    5fe2:	ldr	r3, [r3, #4]
    5fe4:	cmp	r3, r2
    
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5fe6:	sub	sp, #8
    5fe8:	bne.n	6034 <MTPD::WriteStorageIDs()+0x5c>
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
      }
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    5fea:	ldr	r6, [r0, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5fec:	ldrb	r3, [r5, #8]
    5fee:	str	r6, [sp, #0]
    5ff0:	cbz	r3, 6028 <MTPD::WriteStorageIDs()+0x50>
      write_length_ += len;
    5ff2:	ldr	r3, [r5, #12]
    5ff4:	adds	r3, #4
    5ff6:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    5ff8:	cbz	r6, 6024 <MTPD::WriteStorageIDs()+0x4c>
    5ffa:	movs	r4, #0
    5ffc:	b.n	600a <MTPD::WriteStorageIDs()+0x32>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5ffe:	ldr	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    6000:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    6002:	add.w	r3, r3, #4
    6006:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    6008:	beq.n	6024 <MTPD::WriteStorageIDs()+0x4c>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    600a:	ldrb	r3, [r5, #8]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    600c:	adds	r4, #1
    600e:	str	r4, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6010:	cmp	r3, #0
    6012:	bne.n	5ffe <MTPD::WriteStorageIDs()+0x26>
    6014:	movs	r2, #4
    6016:	add.w	r1, sp, r2
    601a:	mov	r0, r5
    601c:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    6020:	cmp	r6, r4
    6022:	bne.n	600a <MTPD::WriteStorageIDs()+0x32>
  }
    6024:	add	sp, #8
    6026:	pop	{r4, r5, r6, pc}
    6028:	movs	r2, #4
    602a:	mov	r1, sp
    602c:	mov	r0, r5
    602e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6032:	b.n	5ff8 <MTPD::WriteStorageIDs()+0x20>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    6034:	blx	r3
    6036:	mov	r6, r0
    6038:	b.n	5fec <MTPD::WriteStorageIDs()+0x14>
    603a:	nop
    603c:	.word	0x0000261d

00006040 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    6040:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    6042:	ldrb	r3, [r0, #8]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    6044:	sub	sp, #8
    6046:	mov	r4, r0
    if (write_get_length_) {
    6048:	cbnz	r3, 6094 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x54>
    604a:	mov	r5, r1
    604c:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    604e:	bl	5b50 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6052:	ldrb	r3, [r4, #8]
    6054:	str	r0, [sp, #0]
    6056:	cbz	r3, 60a2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x62>
      write_length_ += len;
    6058:	ldr	r3, [r4, #12]
    605a:	adds	r3, #4
    605c:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    605e:	ldr	r0, [r4, #0]
    6060:	ldr	r3, [r0, #0]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    6062:	subs	r5, #1
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    6064:	mov	r2, r6
    6066:	ldr	r3, [r3, #28]
    6068:	mov	r1, r5
    606a:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    606c:	ldr	r0, [r4, #0]
    606e:	ldr	r3, [r0, #0]
    6070:	mov	r1, r5
    6072:	ldr	r3, [r3, #32]
    6074:	blx	r3
    6076:	cbz	r0, 609e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6078:	ldrb	r3, [r4, #8]
    607a:	str	r0, [sp, #4]
    607c:	cbz	r3, 6086 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x46>
      write_length_ += len;
    607e:	ldr	r3, [r4, #12]
    6080:	adds	r3, #4
    6082:	str	r3, [r4, #12]
    6084:	b.n	606c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
    6086:	movs	r2, #4
    6088:	add.w	r1, sp, r2
    608c:	mov	r0, r4
    608e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6092:	b.n	606c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    6094:	bl	5b50 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    6098:	adds	r0, #1
    609a:	lsls	r0, r0, #2
    609c:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    }
  }
    609e:	add	sp, #8
    60a0:	pop	{r4, r5, r6, pc}
    60a2:	movs	r2, #4
    60a4:	mov	r1, sp
    60a6:	mov	r0, r4
    60a8:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    60ac:	b.n	605e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
    60ae:	nop

000060b0 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    60b0:	push	{r4, r5, r6, r7, lr}
    60b2:	mov	r4, r0
    60b4:	sub	sp, #332	; 0x14c
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    60b6:	ldr	r0, [r0, #0]
    60b8:	add.w	r6, sp, #10
    60bc:	add	r5, sp, #24
    60be:	ldr	r3, [r0, #0]
    60c0:	stmia.w	sp, {r5, r6}
    60c4:	add	r2, sp, #72	; 0x48
    60c6:	ldr	r7, [r3, #36]	; 0x24
    60c8:	add	r3, sp, #20
    60ca:	blx	r7
    60cc:	ldrh	r3, [r6, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    60ce:	ldrb	r2, [r4, #8]
    60d0:	adds	r3, #1
    60d2:	str	r3, [sp, #28]
    60d4:	cmp	r2, #0
    60d6:	beq.n	618c <MTPD::GetObjectInfo(unsigned long)+0xdc>
      write_length_ += len;
    60d8:	ldr	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60da:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60dc:	adds	r3, #4
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60de:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60e0:	str	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60e2:	beq.w	62bc <MTPD::GetObjectInfo(unsigned long)+0x20c>
    60e6:	movs	r2, #0
    60e8:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60ec:	adds	r3, #2
    60ee:	movs	r2, #0
    60f0:	str	r3, [r4, #12]
    60f2:	strh.w	r2, [sp, #14]
    60f6:	adds	r3, #2
    60f8:	ldr	r2, [sp, #20]
    60fa:	str	r3, [r4, #12]
    60fc:	str	r2, [sp, #60]	; 0x3c
    60fe:	adds	r3, #4
    6100:	movs	r2, #0
    6102:	str	r3, [r4, #12]
    6104:	strh.w	r2, [sp, #12]
    6108:	adds	r3, #2
    610a:	movs	r2, #0
    610c:	str	r3, [r4, #12]
    610e:	str	r2, [sp, #56]	; 0x38
    6110:	adds	r3, #4
    6112:	movs	r2, #0
    6114:	str	r3, [r4, #12]
    6116:	str	r2, [sp, #52]	; 0x34
    6118:	adds	r3, #4
    611a:	movs	r2, #0
    611c:	str	r3, [r4, #12]
    611e:	str	r2, [sp, #48]	; 0x30
    6120:	adds	r3, #4
    6122:	movs	r2, #0
    6124:	str	r3, [r4, #12]
    6126:	str	r2, [sp, #44]	; 0x2c
    6128:	adds	r3, #4
    612a:	movs	r2, #0
    612c:	str	r3, [r4, #12]
    612e:	str	r2, [sp, #40]	; 0x28
    6130:	adds	r3, #4
    6132:	movs	r2, #0
    6134:	str	r3, [r4, #12]
    6136:	str	r2, [sp, #36]	; 0x24
    6138:	adds	r3, #4
    613a:	ldr	r2, [r5, #0]
    613c:	str	r3, [r4, #12]
    613e:	str	r2, [sp, #32]
    6140:	ldr	r2, [sp, #20]
    6142:	sub.w	r2, r2, #4294967295
    6146:	clz	r2, r2
    614a:	lsrs	r2, r2, #5
    614c:	adds	r3, #4
    614e:	str	r3, [r4, #12]
    6150:	strh.w	r2, [sp, #18]
    6154:	adds	r3, #2
    6156:	movs	r2, #0
    6158:	str	r3, [r4, #12]
    615a:	str	r2, [sp, #68]	; 0x44
    615c:	adds	r3, #4
    615e:	movs	r2, #0
    6160:	str	r3, [r4, #12]
    6162:	str	r2, [sp, #64]	; 0x40
    6164:	adds	r3, #4
    6166:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    6168:	add	r1, sp, #72	; 0x48
    616a:	mov	r0, r4
    616c:	bl	5bf4 <MTPD::writestring(char const*)>
    writestring("");  // date created
    6170:	mov	r0, r4
    6172:	ldr	r1, [pc, #396]	; (6300 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    6174:	bl	5bf4 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    6178:	mov	r0, r4
    617a:	ldr	r1, [pc, #388]	; (6300 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    617c:	bl	5bf4 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    6180:	mov	r0, r4
    6182:	ldr	r1, [pc, #380]	; (6300 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    6184:	bl	5bf4 <MTPD::writestring(char const*)>
  }
    6188:	add	sp, #332	; 0x14c
    618a:	pop	{r4, r5, r6, r7, pc}
    618c:	add	r1, sp, #28
    618e:	movs	r2, #4
    6190:	mov	r0, r4
    6192:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    6196:	ldr	r3, [sp, #20]
    6198:	ldrb	r6, [r4, #8]
    619a:	adds	r3, #1
    619c:	movw	r3, #12289	; 0x3001
    61a0:	it	ne
    61a2:	movne	r3, #0
    61a4:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    61a8:	cmp	r6, #0
    61aa:	bne.w	62ce <MTPD::GetObjectInfo(unsigned long)+0x21e>
    61ae:	add	r1, sp, #16
    61b0:	movs	r2, #2
    61b2:	mov	r0, r4
    61b4:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    61b8:	ldrb	r3, [r4, #8]
    61ba:	strh.w	r6, [sp, #14]
    61be:	cmp	r3, #0
    61c0:	bne.w	62d2 <MTPD::GetObjectInfo(unsigned long)+0x222>
    61c4:	movs	r2, #2
    61c6:	add.w	r1, sp, #14
    61ca:	mov	r0, r4
    61cc:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    61d0:	ldrb	r3, [r4, #8]
    61d2:	ldr	r2, [sp, #20]
    61d4:	str	r2, [sp, #60]	; 0x3c
    61d6:	cmp	r3, #0
    61d8:	bne.n	62d6 <MTPD::GetObjectInfo(unsigned long)+0x226>
    61da:	add	r1, sp, #60	; 0x3c
    61dc:	movs	r2, #4
    61de:	mov	r0, r4
    61e0:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    61e4:	ldrb	r3, [r4, #8]
    61e6:	strh.w	r6, [sp, #12]
    61ea:	cmp	r3, #0
    61ec:	bne.n	62da <MTPD::GetObjectInfo(unsigned long)+0x22a>
    61ee:	add	r1, sp, #12
    61f0:	movs	r2, #2
    61f2:	mov	r0, r4
    61f4:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    61f8:	ldrb	r3, [r4, #8]
    61fa:	str	r6, [sp, #56]	; 0x38
    61fc:	cmp	r3, #0
    61fe:	bne.n	62de <MTPD::GetObjectInfo(unsigned long)+0x22e>
    6200:	add	r1, sp, #56	; 0x38
    6202:	movs	r2, #4
    6204:	mov	r0, r4
    6206:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    620a:	ldrb	r3, [r4, #8]
    620c:	str	r6, [sp, #52]	; 0x34
    620e:	cmp	r3, #0
    6210:	bne.n	62e2 <MTPD::GetObjectInfo(unsigned long)+0x232>
    6212:	add	r1, sp, #52	; 0x34
    6214:	movs	r2, #4
    6216:	mov	r0, r4
    6218:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    621c:	ldrb	r3, [r4, #8]
    621e:	str	r6, [sp, #48]	; 0x30
    6220:	cmp	r3, #0
    6222:	bne.n	62e6 <MTPD::GetObjectInfo(unsigned long)+0x236>
    6224:	add	r1, sp, #48	; 0x30
    6226:	movs	r2, #4
    6228:	mov	r0, r4
    622a:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    622e:	ldrb	r3, [r4, #8]
    6230:	str	r6, [sp, #44]	; 0x2c
    6232:	cmp	r3, #0
    6234:	bne.n	62ea <MTPD::GetObjectInfo(unsigned long)+0x23a>
    6236:	add	r1, sp, #44	; 0x2c
    6238:	movs	r2, #4
    623a:	mov	r0, r4
    623c:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6240:	ldrb	r3, [r4, #8]
    6242:	str	r6, [sp, #40]	; 0x28
    6244:	cmp	r3, #0
    6246:	bne.n	62ee <MTPD::GetObjectInfo(unsigned long)+0x23e>
    6248:	add	r1, sp, #40	; 0x28
    624a:	movs	r2, #4
    624c:	mov	r0, r4
    624e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6252:	ldrb	r3, [r4, #8]
    6254:	str	r6, [sp, #36]	; 0x24
    6256:	cmp	r3, #0
    6258:	bne.n	62f2 <MTPD::GetObjectInfo(unsigned long)+0x242>
    625a:	movs	r2, #4
    625c:	add	r1, sp, #36	; 0x24
    625e:	mov	r0, r4
    6260:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6264:	ldrb	r3, [r4, #8]
    6266:	ldr	r2, [r5, #0]
    6268:	str	r2, [sp, #32]
    626a:	cmp	r3, #0
    626c:	bne.n	62f6 <MTPD::GetObjectInfo(unsigned long)+0x246>
    626e:	add	r1, sp, #32
    6270:	movs	r2, #4
    6272:	mov	r0, r4
    6274:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6278:	ldr	r3, [sp, #20]
    627a:	ldrb	r6, [r4, #8]
    627c:	sub.w	r3, r3, #4294967295
    6280:	clz	r3, r3
    6284:	lsrs	r3, r3, #5
    6286:	strh.w	r3, [sp, #18]
    628a:	cmp	r6, #0
    628c:	bne.n	62fa <MTPD::GetObjectInfo(unsigned long)+0x24a>
    628e:	add.w	r1, sp, #18
    6292:	movs	r2, #2
    6294:	mov	r0, r4
    6296:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    629a:	ldrb	r5, [r4, #8]
    629c:	str	r6, [sp, #68]	; 0x44
    629e:	cbnz	r5, 62ca <MTPD::GetObjectInfo(unsigned long)+0x21a>
    62a0:	add	r1, sp, #68	; 0x44
    62a2:	movs	r2, #4
    62a4:	mov	r0, r4
    62a6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    62aa:	ldrb	r3, [r4, #8]
    62ac:	str	r5, [sp, #64]	; 0x40
    62ae:	cbnz	r3, 62c6 <MTPD::GetObjectInfo(unsigned long)+0x216>
    62b0:	add	r1, sp, #64	; 0x40
    62b2:	movs	r2, #4
    62b4:	mov	r0, r4
    62b6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    62ba:	b.n	6168 <MTPD::GetObjectInfo(unsigned long)+0xb8>
    62bc:	movw	r2, #12289	; 0x3001
    62c0:	strh.w	r2, [sp, #16]
    62c4:	b.n	60ec <MTPD::GetObjectInfo(unsigned long)+0x3c>
    62c6:	ldr	r3, [r4, #12]
    62c8:	b.n	6164 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    62ca:	ldr	r3, [r4, #12]
    62cc:	b.n	615c <MTPD::GetObjectInfo(unsigned long)+0xac>
    62ce:	ldr	r3, [r4, #12]
    62d0:	b.n	60ec <MTPD::GetObjectInfo(unsigned long)+0x3c>
    62d2:	ldr	r3, [r4, #12]
    62d4:	b.n	60f6 <MTPD::GetObjectInfo(unsigned long)+0x46>
    62d6:	ldr	r3, [r4, #12]
    62d8:	b.n	60fe <MTPD::GetObjectInfo(unsigned long)+0x4e>
    62da:	ldr	r3, [r4, #12]
    62dc:	b.n	6108 <MTPD::GetObjectInfo(unsigned long)+0x58>
    62de:	ldr	r3, [r4, #12]
    62e0:	b.n	6110 <MTPD::GetObjectInfo(unsigned long)+0x60>
    62e2:	ldr	r3, [r4, #12]
    62e4:	b.n	6118 <MTPD::GetObjectInfo(unsigned long)+0x68>
    62e6:	ldr	r3, [r4, #12]
    62e8:	b.n	6120 <MTPD::GetObjectInfo(unsigned long)+0x70>
    62ea:	ldr	r3, [r4, #12]
    62ec:	b.n	6128 <MTPD::GetObjectInfo(unsigned long)+0x78>
    62ee:	ldr	r3, [r4, #12]
    62f0:	b.n	6130 <MTPD::GetObjectInfo(unsigned long)+0x80>
    62f2:	ldr	r3, [r4, #12]
    62f4:	b.n	6138 <MTPD::GetObjectInfo(unsigned long)+0x88>
    62f6:	ldr	r3, [r4, #12]
    62f8:	b.n	6140 <MTPD::GetObjectInfo(unsigned long)+0x90>
    62fa:	ldr	r3, [r4, #12]
    62fc:	b.n	6154 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    62fe:	nop
    6300:	.word	0x00019064

00006304 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    6304:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    6306:	ldr	r7, [pc, #96]	; (6368 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6308:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    630a:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    630c:	sub	sp, #12
    630e:	mov	r4, r0
    6310:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6312:	cbz	r2, 635a <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    6314:	ldr	r2, [r0, #12]
    6316:	adds	r2, #4
    6318:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    631a:	cbz	r3, 6356 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    631c:	ldr	r6, [pc, #76]	; (636c <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    631e:	movw	r3, #56321	; 0xdc01
    6322:	movs	r5, #0
    6324:	b.n	6338 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    6326:	ldr	r3, [r4, #12]
    6328:	adds	r3, #2
    632a:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    632c:	ldr	r3, [r7, #0]
    632e:	adds	r5, #1
    6330:	cmp	r3, r5
    6332:	bls.n	6356 <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    6334:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6338:	ldrb	r2, [r4, #8]
    633a:	strh.w	r3, [sp, #2]
    633e:	cmp	r2, #0
    6340:	bne.n	6326 <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    6342:	movs	r2, #2
    6344:	add.w	r1, sp, r2
    6348:	mov	r0, r4
    634a:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    634e:	ldr	r3, [r7, #0]
    6350:	adds	r5, #1
    6352:	cmp	r3, r5
    6354:	bhi.n	6334 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    6356:	add	sp, #12
    6358:	pop	{r4, r5, r6, r7, pc}
    635a:	movs	r2, #4
    635c:	add.w	r1, sp, r2
    6360:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6364:	ldr	r3, [r7, #0]
    6366:	b.n	631a <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    6368:	.word	0x1fff099c
    636c:	.word	0x0001938c

00006370 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6370:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6374:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6376:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6378:	sub	sp, #316	; 0x13c
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    637a:	ldr	r3, [r0, #0]
    637c:	add.w	r6, sp, #10
    6380:	add	r7, sp, #20
    6382:	str	r6, [sp, #4]
    6384:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6386:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6388:	ldr.w	r9, [r3, #36]	; 0x24
    638c:	add	r2, sp, #56	; 0x38
    638e:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6390:	mov	r8, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6392:	blx	r9
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
      switch(p2)
    6394:	sub.w	r2, r4, #56320	; 0xdc00
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    6398:	ldrh	r3, [r6, #0]
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    639a:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
      switch(p2)
    639c:	subs	r2, #1
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    639e:	adds	r4, r3, #1
      switch(p2)
    63a0:	cmp	r2, #67	; 0x43
    63a2:	bhi.n	6408 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    63a4:	tbb	[pc, r2]
    63a8:	.word	0x74674b41
    63ac:	.word	0x333a3030
    63b0:	.word	0x305c3033
    63b4:	.word	0x30303030
    63b8:	.word	0x30303030
    63bc:	.word	0x30303030
    63c0:	.word	0x30303030
    63c4:	.word	0x30303030
    63c8:	.word	0x30303030
    63cc:	.word	0x30303030
    63d0:	.word	0x30303030
    63d4:	.word	0x30303030
    63d8:	.word	0x30303030
    63dc:	.word	0x30303030
    63e0:	.word	0x30303030
    63e4:	.word	0x30303030
    63e8:	.word	0x3a303022
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    63ec:	ldrb	r3, [r5, #8]
    63ee:	str.w	r8, [sp, #52]	; 0x34
    63f2:	cmp	r3, #0
    63f4:	beq.n	64a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x130>
      write_length_ += len;
    63f6:	ldr	r3, [r5, #12]
    63f8:	adds	r3, #4
    63fa:	str	r3, [r5, #12]
    63fc:	adds	r3, #4
    63fe:	str	r3, [r5, #12]
    6400:	adds	r3, #4
    6402:	str	r3, [r5, #12]
    6404:	adds	r3, #4
    6406:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6408:	add	sp, #316	; 0x13c
    640a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    640e:	mov	r0, r5
    6410:	ldr	r1, [pc, #268]	; (6520 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b0>)
    6412:	bl	5bf4 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    6416:	add	sp, #316	; 0x13c
    6418:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(parent);
          write32(storage);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    641c:	add	r1, sp, #56	; 0x38
    641e:	mov	r0, r5
    6420:	bl	5bf4 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    6424:	add	sp, #316	; 0x13c
    6426:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    642a:	ldrb	r3, [r5, #8]
    642c:	str	r4, [sp, #24]
    642e:	cmp	r3, #0
    6430:	beq.n	64ec <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17c>
      write_length_ += len;
    6432:	ldr	r3, [r5, #12]
    6434:	adds	r3, #4
    6436:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6438:	add	sp, #316	; 0x13c
    643a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    643e:	adds	r1, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6440:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6442:	movw	r3, #12289	; 0x3001
    6446:	it	ne
    6448:	movne.w	r3, #12288	; 0x3000
    644c:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6450:	cmp	r2, #0
    6452:	beq.n	64e0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    6454:	ldr	r3, [r5, #12]
    6456:	adds	r3, #2
    6458:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    645a:	add	sp, #316	; 0x13c
    645c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6460:	ldrb	r3, [r5, #8]
    6462:	ldr	r2, [r7, #0]
    6464:	str	r2, [sp, #36]	; 0x24
    6466:	cmp	r3, #0
    6468:	bne.n	6432 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc2>
    646a:	add	r1, sp, #36	; 0x24
    646c:	mov	r0, r5
    646e:	movs	r2, #4
    6470:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6474:	b.n	6408 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6476:	ldrb	r3, [r5, #8]
    6478:	movs	r2, #0
    647a:	strh.w	r2, [sp, #14]
    647e:	cmp	r3, #0
    6480:	bne.n	6454 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe4>
    6482:	add.w	r1, sp, #14
    6486:	mov	r0, r5
    6488:	movs	r2, #2
    648a:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    648e:	b.n	6408 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6490:	ldrb	r4, [r5, #8]
    6492:	str	r1, [sp, #32]
    6494:	cmp	r4, #0
    6496:	beq.n	64f8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x188>
      write_length_ += len;
    6498:	ldr	r3, [r5, #12]
    649a:	adds	r3, #4
    649c:	str	r3, [r5, #12]
    649e:	b.n	6404 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    64a0:	movs	r2, #4
    64a2:	add	r1, sp, #52	; 0x34
    64a4:	mov	r0, r5
    64a6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    64aa:	ldrb	r3, [r5, #8]
    64ac:	ldr	r2, [r7, #0]
    64ae:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    64b0:	cmp	r3, #0
    64b2:	bne.n	651c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ac>
    64b4:	add	r1, sp, #48	; 0x30
    64b6:	movs	r2, #4
    64b8:	mov	r0, r5
    64ba:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    64be:	ldrb	r6, [r5, #8]
    64c0:	str	r4, [sp, #44]	; 0x2c
    64c2:	cbnz	r6, 6518 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a8>
    64c4:	add	r1, sp, #44	; 0x2c
    64c6:	movs	r2, #4
    64c8:	mov	r0, r5
    64ca:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    64ce:	ldrb	r3, [r5, #8]
    64d0:	str	r6, [sp, #40]	; 0x28
    64d2:	cbnz	r3, 6514 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a4>
    64d4:	add	r1, sp, #40	; 0x28
    64d6:	mov	r0, r5
    64d8:	movs	r2, #4
    64da:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    64de:	b.n	6408 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64e0:	add	r1, sp, #12
    64e2:	mov	r0, r5
    64e4:	movs	r2, #2
    64e6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    64ea:	b.n	6408 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64ec:	add	r1, sp, #24
    64ee:	mov	r0, r5
    64f0:	movs	r2, #4
    64f2:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    64f6:	b.n	6408 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64f8:	add	r1, sp, #32
    64fa:	movs	r2, #4
    64fc:	mov	r0, r5
    64fe:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6502:	ldrb	r3, [r5, #8]
    6504:	str	r4, [sp, #28]
    6506:	cbnz	r3, 6514 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1a4>
    6508:	add	r1, sp, #28
    650a:	mov	r0, r5
    650c:	movs	r2, #4
    650e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6512:	b.n	6408 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6514:	ldr	r3, [r5, #12]
    6516:	b.n	6404 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    6518:	ldr	r3, [r5, #12]
    651a:	b.n	6400 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    651c:	ldr	r3, [r5, #12]
    651e:	b.n	63fc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8c>
    6520:	.word	0x00019064

00006524 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    6524:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6528:	mov	r4, r0
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    652a:	ldr	r0, [r0, #0]
    652c:	ldr	r3, [r0, #0]
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    652e:	subs	r5, r1, #1
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    6530:	sub	sp, #36	; 0x24
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    6532:	ldr	r3, [r3, #20]
    6534:	mov	r1, r5
    6536:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6538:	ldrb	r3, [r4, #8]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    653a:	cmp	r0, #0
    653c:	ite	eq
    653e:	moveq	r2, #4
    6540:	movne	r2, #1
    6542:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6546:	cmp	r3, #0
    6548:	beq.n	65e4 <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    654a:	ldr	r3, [r4, #12]
    654c:	adds	r3, #2
    654e:	str	r3, [r4, #12]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    6550:	ldr	r0, [r4, #0]
    6552:	ldr	r3, [r0, #0]
    6554:	mov	r1, r5
    6556:	ldr	r3, [r3, #24]
    6558:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    655a:	ldrb	r6, [r4, #8]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    655c:	cmp	r0, #0
    655e:	ite	eq
    6560:	moveq	r3, #1
    6562:	movne	r3, #2
    6564:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6568:	cmp	r6, #0
    656a:	beq.n	662c <MTPD::GetStorageInfo(unsigned long)+0x108>
      write_length_ += len;
    656c:	ldr	r3, [r4, #12]
    656e:	movs	r2, #0
    6570:	adds	r3, #2
    6572:	str	r3, [r4, #12]
    6574:	strh.w	r2, [sp, #8]
    6578:	adds	r3, #2
    657a:	str	r3, [r4, #12]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    657c:	ldr	r0, [r4, #0]
    657e:	ldr	r3, [r0, #0]
    6580:	mov	r1, r5
    6582:	ldr	r3, [r3, #12]
    6584:	blx	r3
    6586:	mov	r6, r0
    uint64_t nused = storage_->usedSize(store) ; 
    6588:	ldr	r0, [r4, #0]
    658a:	ldr	r3, [r0, #0]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    658c:	mov	r7, r1
    uint64_t nused = storage_->usedSize(store) ; 
    658e:	ldr	r3, [r3, #16]
    6590:	mov	r1, r5
    6592:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6594:	ldrb	r3, [r4, #8]
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    uint64_t nused = storage_->usedSize(store) ; 
    6596:	mov	r8, r0
    6598:	mov	r9, r1
    659a:	strd	r6, r7, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    659e:	cbz	r3, 65f2 <MTPD::GetStorageInfo(unsigned long)+0xce>
    65a0:	subs	r6, r6, r0
      write_length_ += len;
    65a2:	ldr	r3, [r4, #12]
    65a4:	sbc.w	r7, r7, r1
    65a8:	strd	r6, r7, [sp, #16]
    65ac:	adds	r3, #8
    65ae:	str	r3, [r4, #12]
    65b0:	adds	r3, #8
    65b2:	mov.w	r2, #4294967295
    65b6:	str	r3, [r4, #12]
    65b8:	str	r2, [sp, #12]
    65ba:	adds	r3, #4
    65bc:	str	r3, [r4, #12]

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    65be:	ldr	r0, [r4, #0]
    65c0:	ldr	r2, [pc, #156]	; (6660 <MTPD::GetStorageInfo(unsigned long)+0x13c>)
    65c2:	ldr	r3, [r0, #0]
    65c4:	ldr	r3, [r3, #8]
    65c6:	cmp	r3, r2
    65c8:	bne.n	664c <MTPD::GetStorageInfo(unsigned long)+0x128>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    65ca:	add.w	r0, r0, r5, lsl #2
    65ce:	ldr	r1, [r0, #8]
    writestring(name);  // storage descriptor
    65d0:	mov	r0, r4
    65d2:	bl	5bf4 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    65d6:	mov	r0, r4
    65d8:	ldr	r1, [pc, #136]	; (6664 <MTPD::GetStorageInfo(unsigned long)+0x140>)
    65da:	bl	5bf4 <MTPD::writestring(char const*)>

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    65de:	add	sp, #36	; 0x24
    65e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    65e4:	movs	r2, #2
    65e6:	add.w	r1, sp, #6
    65ea:	mov	r0, r4
    65ec:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    65f0:	b.n	6550 <MTPD::GetStorageInfo(unsigned long)+0x2c>
    65f2:	movs	r2, #8
    65f4:	add	r1, sp, #24
    65f6:	mov	r0, r4
    65f8:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    65fc:	subs.w	r6, r6, r8
    6600:	ldrb	r3, [r4, #8]
    6602:	sbc.w	r7, r7, r9
    6606:	strd	r6, r7, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    660a:	cbnz	r3, 6658 <MTPD::GetStorageInfo(unsigned long)+0x134>
    660c:	movs	r2, #8
    660e:	add	r1, sp, #16
    6610:	mov	r0, r4
    6612:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6616:	ldrb	r3, [r4, #8]
    6618:	mov.w	r2, #4294967295
    661c:	str	r2, [sp, #12]
    661e:	cbnz	r3, 6654 <MTPD::GetStorageInfo(unsigned long)+0x130>
    6620:	movs	r2, #4
    6622:	add	r1, sp, #12
    6624:	mov	r0, r4
    6626:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    662a:	b.n	65be <MTPD::GetStorageInfo(unsigned long)+0x9a>
    662c:	movs	r2, #2
    662e:	add.w	r1, sp, #10
    6632:	mov	r0, r4
    6634:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6638:	ldrb	r3, [r4, #8]
    663a:	strh.w	r6, [sp, #8]
    663e:	cbnz	r3, 665c <MTPD::GetStorageInfo(unsigned long)+0x138>
    6640:	movs	r2, #2
    6642:	add	r1, sp, #8
    6644:	mov	r0, r4
    6646:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    664a:	b.n	657c <MTPD::GetStorageInfo(unsigned long)+0x58>

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    664c:	mov	r1, r5
    664e:	blx	r3
    6650:	mov	r1, r0
    6652:	b.n	65d0 <MTPD::GetStorageInfo(unsigned long)+0xac>
    6654:	ldr	r3, [r4, #12]
    6656:	b.n	65ba <MTPD::GetStorageInfo(unsigned long)+0x96>
    6658:	ldr	r3, [r4, #12]
    665a:	b.n	65b0 <MTPD::GetStorageInfo(unsigned long)+0x8c>
    665c:	ldr	r3, [r4, #12]
    665e:	b.n	6578 <MTPD::GetStorageInfo(unsigned long)+0x54>
    6660:	.word	0x00002621
    6664:	.word	0x00019064

00006668 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    6668:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    666c:	sub.w	r1, r1, #56320	; 0xdc00
    6670:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    6672:	sub	sp, #148	; 0x94
    6674:	mov	r4, r0
      switch(p1)
    6676:	cmp	r1, #67	; 0x43
    6678:	bhi.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    667a:	tbh	[pc, r1, lsl #1]
    667e:	.short	0x005c
    6680:	.word	0x0080006e
    6684:	.word	0x005900c6
    6688:	.word	0x00d80059
    668c:	.word	0x01690121
    6690:	.word	0x01b10059
    6694:	.word	0x00590059
    6698:	.word	0x00590059
    669c:	.word	0x00590059
    66a0:	.word	0x00590059
    66a4:	.word	0x00590059
    66a8:	.word	0x00590059
    66ac:	.word	0x00590059
    66b0:	.word	0x00590059
    66b4:	.word	0x00590059
    66b8:	.word	0x00590059
    66bc:	.word	0x00590059
    66c0:	.word	0x00590059
    66c4:	.word	0x00590059
    66c8:	.word	0x00590059
    66cc:	.word	0x00590059
    66d0:	.word	0x00590059
    66d4:	.word	0x00590059
    66d8:	.word	0x00590059
    66dc:	.word	0x00590059
    66e0:	.word	0x00590059
    66e4:	.word	0x00590059
    66e8:	.word	0x00590059
    66ec:	.word	0x00590059
    66f0:	.word	0x00590059
    66f4:	.word	0x00590059
    66f8:	.word	0x00590059
    66fc:	.word	0x01f70059
    6700:	.word	0x00590059
    6704:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6706:	ldrb	r3, [r0, #8]
    6708:	movw	r2, #56388	; 0xdc44
    670c:	strh.w	r2, [sp, #70]	; 0x46
    6710:	cmp	r3, #0
    6712:	beq.w	6b90 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    6716:	ldr	r3, [r4, #12]
    6718:	adds	r3, #2
    671a:	str	r3, [r4, #12]
    671c:	adds	r3, #2
    671e:	str	r3, [r4, #12]
    6720:	adds	r3, #1
    6722:	str	r3, [r4, #12]
    6724:	adds	r3, #1
    6726:	str	r3, [r4, #12]
    6728:	adds	r3, #4
    672a:	str	r3, [r4, #12]
    672c:	adds	r3, #1
    672e:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    6730:	add	sp, #148	; 0x94
    6732:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6736:	ldrb	r3, [r0, #8]
    6738:	movw	r2, #56321	; 0xdc01
    673c:	strh.w	r2, [sp, #30]
    6740:	cmp	r3, #0
    6742:	beq.w	6ca4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    6746:	ldr	r3, [r4, #12]
    6748:	adds	r3, #2
    674a:	str	r3, [r4, #12]
    674c:	adds	r3, #2
    674e:	str	r3, [r4, #12]
    6750:	adds	r3, #1
    6752:	str	r3, [r4, #12]
    6754:	adds	r3, #4
    6756:	str	r3, [r4, #12]
    6758:	b.n	6728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    675a:	ldrb	r3, [r0, #8]
    675c:	movw	r2, #56322	; 0xdc02
    6760:	strh.w	r2, [sp, #36]	; 0x24
    6764:	cmp	r3, #0
    6766:	beq.w	6b12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    676a:	ldr	r3, [r4, #12]
    676c:	adds	r3, #2
    676e:	str	r3, [r4, #12]
    6770:	adds	r3, #2
    6772:	str	r3, [r4, #12]
    6774:	adds	r3, #1
    6776:	str	r3, [r4, #12]
    6778:	adds	r3, #2
    677a:	str	r3, [r4, #12]
    677c:	b.n	6728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    677e:	ldrb	r3, [r0, #8]
    6780:	movw	r2, #56323	; 0xdc03
    6784:	strh.w	r2, [sp, #42]	; 0x2a
    6788:	cmp	r3, #0
    678a:	bne.n	676a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    678c:	movs	r2, #2
    678e:	add.w	r1, sp, #42	; 0x2a
    6792:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6796:	ldrb	r7, [r4, #8]
    6798:	movs	r6, #4
    679a:	strh.w	r6, [sp, #40]	; 0x28
    679e:	cmp	r7, #0
    67a0:	bne.w	6d3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    67a4:	movs	r2, #2
    67a6:	add	r1, sp, #40	; 0x28
    67a8:	mov	r0, r4
    67aa:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    67ae:	ldrb	r5, [r4, #8]
    67b0:	strb.w	r7, [sp, #9]
    67b4:	cmp	r5, #0
    67b6:	bne.w	6d36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    67ba:	movs	r2, #1
    67bc:	add.w	r1, sp, #9
    67c0:	mov	r0, r4
    67c2:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    67c6:	ldrb	r7, [r4, #8]
    67c8:	strh.w	r5, [sp, #38]	; 0x26
    67cc:	cmp	r7, #0
    67ce:	bne.w	6d32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    67d2:	movs	r2, #2
    67d4:	add.w	r1, sp, #38	; 0x26
    67d8:	mov	r0, r4
    67da:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    67de:	ldrb	r5, [r4, #8]
    67e0:	str	r7, [sp, #84]	; 0x54
    67e2:	cmp	r5, #0
    67e4:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    67e8:	mov	r2, r6
    67ea:	add	r1, sp, #84	; 0x54
    67ec:	mov	r0, r4
    67ee:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    67f2:	ldrb	r3, [r4, #8]
    67f4:	strb.w	r5, [sp, #8]
    67f8:	cmp	r3, #0
    67fa:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    67fe:	mov	r0, r4
    6800:	movs	r2, #1
    6802:	add	r1, sp, #8
    6804:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6808:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    680a:	ldrb	r3, [r0, #8]
    680c:	movw	r2, #56324	; 0xdc04
    6810:	strh.w	r2, [sp, #46]	; 0x2e
    6814:	cmp	r3, #0
    6816:	beq.w	6a90 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    681a:	ldr	r3, [r0, #12]
    681c:	adds	r3, #2
    681e:	str	r3, [r0, #12]
    6820:	adds	r3, #2
    6822:	str	r3, [r4, #12]
    6824:	adds	r3, #1
    6826:	str	r3, [r4, #12]
    6828:	adds	r3, #8
    682a:	str	r3, [r4, #12]
    682c:	b.n	6728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    682e:	ldrb	r3, [r0, #8]
    6830:	movw	r2, #56327	; 0xdc07
    6834:	strh.w	r2, [sp, #50]	; 0x32
    6838:	cmp	r3, #0
    683a:	bne.w	6716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    683e:	movs	r2, #2
    6840:	add.w	r1, sp, #50	; 0x32
    6844:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6848:	ldrb	r3, [r4, #8]
    684a:	movw	r2, #65535	; 0xffff
    684e:	strh.w	r2, [sp, #48]	; 0x30
    6852:	cmp	r3, #0
    6854:	bne.w	6d22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6858:	movs	r2, #2
    685a:	add	r1, sp, #48	; 0x30
    685c:	mov	r0, r4
    685e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6862:	ldrb	r6, [r4, #8]
    6864:	movs	r5, #1
    6866:	strb.w	r5, [sp, #14]
    686a:	cmp	r6, #0
    686c:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6870:	mov	r2, r5
    6872:	add.w	r1, sp, #14
    6876:	mov	r0, r4
    6878:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    687c:	ldrb	r7, [r4, #8]
    687e:	strb.w	r6, [sp, #13]
    6882:	cmp	r7, #0
    6884:	bne.w	6d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6888:	mov	r2, r5
    688a:	add.w	r1, sp, #13
    688e:	mov	r0, r4
    6890:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6894:	ldrb	r6, [r4, #8]
    6896:	str	r7, [sp, #92]	; 0x5c
    6898:	cmp	r6, #0
    689a:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    689e:	movs	r2, #4
    68a0:	add	r1, sp, #92	; 0x5c
    68a2:	mov	r0, r4
    68a4:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    68a8:	ldrb	r3, [r4, #8]
    68aa:	strb.w	r6, [sp, #12]
    68ae:	cmp	r3, #0
    68b0:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    68b4:	mov	r2, r5
    68b6:	mov	r0, r4
    68b8:	add	r1, sp, #12
    68ba:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    68be:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    68c0:	ldrb	r3, [r0, #8]
    68c2:	movw	r2, #56328	; 0xdc08
    68c6:	strh.w	r2, [sp, #54]	; 0x36
    68ca:	cmp	r3, #0
    68cc:	bne.w	6716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    68d0:	movs	r2, #2
    68d2:	add.w	r1, sp, #54	; 0x36
    68d6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    68da:	ldrb	r6, [r4, #8]
    68dc:	movw	r3, #65535	; 0xffff
    68e0:	strh.w	r3, [sp, #52]	; 0x34
    68e4:	cmp	r6, #0
    68e6:	bne.w	6d22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    68ea:	movs	r2, #2
    68ec:	add	r1, sp, #52	; 0x34
    68ee:	mov	r0, r4
    68f0:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    68f4:	ldrb	r5, [r4, #8]
    68f6:	strb.w	r6, [sp, #17]
    68fa:	cmp	r5, #0
    68fc:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6900:	movs	r2, #1
    6902:	add.w	r1, sp, #17
    6906:	mov	r0, r4
    6908:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    690c:	ldrb	r6, [r4, #8]
    690e:	strb.w	r5, [sp, #16]
    6912:	cmp	r6, #0
    6914:	bne.w	6d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6918:	movs	r2, #1
    691a:	add	r1, sp, #16
    691c:	mov	r0, r4
    691e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6922:	ldrb	r5, [r4, #8]
    6924:	str	r6, [sp, #96]	; 0x60
    6926:	cmp	r5, #0
    6928:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    692c:	movs	r2, #4
    692e:	add	r1, sp, #96	; 0x60
    6930:	mov	r0, r4
    6932:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6936:	ldrb	r3, [r4, #8]
    6938:	strb.w	r5, [sp, #15]
    693c:	cmp	r3, #0
    693e:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6942:	mov	r0, r4
    6944:	movs	r2, #1
    6946:	add.w	r1, sp, #15
    694a:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    694e:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6950:	ldrb	r3, [r0, #8]
    6952:	movw	r2, #56329	; 0xdc09
    6956:	strh.w	r2, [sp, #58]	; 0x3a
    695a:	cmp	r3, #0
    695c:	bne.w	6716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    6960:	movs	r2, #2
    6962:	add.w	r1, sp, #58	; 0x3a
    6966:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    696a:	ldrb	r6, [r4, #8]
    696c:	movw	r3, #65535	; 0xffff
    6970:	strh.w	r3, [sp, #56]	; 0x38
    6974:	cmp	r6, #0
    6976:	bne.w	6d22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    697a:	movs	r2, #2
    697c:	add	r1, sp, #56	; 0x38
    697e:	mov	r0, r4
    6980:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6984:	ldrb	r5, [r4, #8]
    6986:	strb.w	r6, [sp, #20]
    698a:	cmp	r5, #0
    698c:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6990:	movs	r2, #1
    6992:	add	r1, sp, #20
    6994:	mov	r0, r4
    6996:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    699a:	ldrb	r6, [r4, #8]
    699c:	strb.w	r5, [sp, #19]
    69a0:	cmp	r6, #0
    69a2:	bne.w	6d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    69a6:	movs	r2, #1
    69a8:	add.w	r1, sp, #19
    69ac:	mov	r0, r4
    69ae:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    69b2:	ldrb	r5, [r4, #8]
    69b4:	str	r6, [sp, #100]	; 0x64
    69b6:	cmp	r5, #0
    69b8:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    69bc:	movs	r2, #4
    69be:	add	r1, sp, #100	; 0x64
    69c0:	mov	r0, r4
    69c2:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    69c6:	ldrb	r3, [r4, #8]
    69c8:	strb.w	r5, [sp, #18]
    69cc:	cmp	r3, #0
    69ce:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    69d2:	mov	r0, r4
    69d4:	movs	r2, #1
    69d6:	add.w	r1, sp, #18
    69da:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    69de:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    69e0:	ldrb	r3, [r0, #8]
    69e2:	movw	r2, #56331	; 0xdc0b
    69e6:	strh.w	r2, [sp, #62]	; 0x3e
    69ea:	cmp	r3, #0
    69ec:	bne.w	6746 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    69f0:	movs	r2, #2
    69f2:	add.w	r1, sp, #62	; 0x3e
    69f6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    69fa:	ldrb	r6, [r4, #8]
    69fc:	movs	r3, #6
    69fe:	strh.w	r3, [sp, #60]	; 0x3c
    6a02:	cmp	r6, #0
    6a04:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    6a08:	movs	r2, #2
    6a0a:	add	r1, sp, #60	; 0x3c
    6a0c:	mov	r0, r4
    6a0e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6a12:	ldrb	r5, [r4, #8]
    6a14:	strb.w	r6, [sp, #22]
    6a18:	cmp	r5, #0
    6a1a:	bne.w	6d16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    6a1e:	movs	r2, #1
    6a20:	add.w	r1, sp, #22
    6a24:	mov	r0, r4
    6a26:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6a2a:	ldrb	r6, [r4, #8]
    6a2c:	str	r5, [sp, #108]	; 0x6c
    6a2e:	cmp	r6, #0
    6a30:	bne.w	6d12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    6a34:	movs	r2, #4
    6a36:	add	r1, sp, #108	; 0x6c
    6a38:	mov	r0, r4
    6a3a:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6a3e:	ldrb	r5, [r4, #8]
    6a40:	str	r6, [sp, #104]	; 0x68
    6a42:	cmp	r5, #0
    6a44:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6a48:	movs	r2, #4
    6a4a:	add	r1, sp, #104	; 0x68
    6a4c:	mov	r0, r4
    6a4e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6a52:	ldrb	r3, [r4, #8]
    6a54:	strb.w	r5, [sp, #21]
    6a58:	cmp	r3, #0
    6a5a:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6a5e:	mov	r0, r4
    6a60:	movs	r2, #1
    6a62:	add.w	r1, sp, #21
    6a66:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6a6a:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6a6c:	ldrb	r3, [r0, #8]
    6a6e:	movw	r2, #56385	; 0xdc41
    6a72:	strh.w	r2, [sp, #66]	; 0x42
    6a76:	cmp	r3, #0
    6a78:	beq.w	6c12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    6a7c:	ldr	r3, [r0, #12]
    6a7e:	adds	r3, #2
    6a80:	str	r3, [r0, #12]
    6a82:	adds	r3, #2
    6a84:	str	r3, [r4, #12]
    6a86:	adds	r3, #1
    6a88:	str	r3, [r4, #12]
    6a8a:	adds	r3, #8
    6a8c:	str	r3, [r4, #12]
    6a8e:	b.n	6828 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    6a90:	movs	r2, #2
    6a92:	add.w	r1, sp, #46	; 0x2e
    6a96:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6a9a:	ldrb	r6, [r4, #8]
    6a9c:	movs	r5, #8
    6a9e:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6aa2:	cmp	r6, #0
    6aa4:	bne.w	6d2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    6aa8:	movs	r2, #2
    6aaa:	add	r1, sp, #44	; 0x2c
    6aac:	mov	r0, r4
    6aae:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6ab2:	ldrb	r3, [r4, #8]
    6ab4:	strb.w	r6, [sp, #11]
    6ab8:	cmp	r3, #0
    6aba:	bne.w	6d26 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    6abe:	movs	r2, #1
    6ac0:	add.w	r1, sp, #11
    6ac4:	mov	r0, r4
    6ac6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6aca:	ldrb	r6, [r4, #8]
    6acc:	movs	r2, #0
    6ace:	movs	r3, #0
    6ad0:	strd	r2, r3, [sp, #120]	; 0x78
    6ad4:	cmp	r6, #0
    6ad6:	bne.w	6d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6ada:	mov	r2, r5
    6adc:	add	r1, sp, #120	; 0x78
    6ade:	mov	r0, r4
    6ae0:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6ae4:	ldrb	r5, [r4, #8]
    6ae6:	str	r6, [sp, #88]	; 0x58
    6ae8:	cmp	r5, #0
    6aea:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6aee:	movs	r2, #4
    6af0:	add	r1, sp, #88	; 0x58
    6af2:	mov	r0, r4
    6af4:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6af8:	ldrb	r3, [r4, #8]
    6afa:	strb.w	r5, [sp, #10]
    6afe:	cmp	r3, #0
    6b00:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6b04:	mov	r0, r4
    6b06:	movs	r2, #1
    6b08:	add.w	r1, sp, #10
    6b0c:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6b10:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6b12:	movs	r2, #2
    6b14:	add	r1, sp, #36	; 0x24
    6b16:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6b1a:	ldrb	r7, [r4, #8]
    6b1c:	movs	r6, #4
    6b1e:	strh.w	r6, [sp, #34]	; 0x22
    6b22:	cmp	r7, #0
    6b24:	bne.w	6d3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    6b28:	movs	r2, #2
    6b2a:	add.w	r1, sp, #34	; 0x22
    6b2e:	mov	r0, r4
    6b30:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6b34:	ldrb	r5, [r4, #8]
    6b36:	strb.w	r7, [sp, #7]
    6b3a:	cmp	r5, #0
    6b3c:	bne.w	6d36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    6b40:	movs	r2, #1
    6b42:	add.w	r1, sp, #7
    6b46:	mov	r0, r4
    6b48:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6b4c:	ldrb	r7, [r4, #8]
    6b4e:	strh.w	r5, [sp, #32]
    6b52:	cmp	r7, #0
    6b54:	bne.w	6d32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    6b58:	movs	r2, #2
    6b5a:	add	r1, sp, #32
    6b5c:	mov	r0, r4
    6b5e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6b62:	ldrb	r5, [r4, #8]
    6b64:	str	r7, [sp, #80]	; 0x50
    6b66:	cmp	r5, #0
    6b68:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6b6c:	mov	r2, r6
    6b6e:	add	r1, sp, #80	; 0x50
    6b70:	mov	r0, r4
    6b72:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6b76:	ldrb	r3, [r4, #8]
    6b78:	strb.w	r5, [sp, #6]
    6b7c:	cmp	r3, #0
    6b7e:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6b82:	mov	r0, r4
    6b84:	movs	r2, #1
    6b86:	add.w	r1, sp, #6
    6b8a:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6b8e:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6b90:	movs	r2, #2
    6b92:	add.w	r1, sp, #70	; 0x46
    6b96:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6b9a:	ldrb	r6, [r4, #8]
    6b9c:	movw	r3, #65535	; 0xffff
    6ba0:	strh.w	r3, [sp, #68]	; 0x44
    6ba4:	cmp	r6, #0
    6ba6:	bne.w	6d22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6baa:	movs	r2, #2
    6bac:	add	r1, sp, #68	; 0x44
    6bae:	mov	r0, r4
    6bb0:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6bb4:	ldrb	r5, [r4, #8]
    6bb6:	strb.w	r6, [sp, #27]
    6bba:	cmp	r5, #0
    6bbc:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6bc0:	movs	r2, #1
    6bc2:	add.w	r1, sp, #27
    6bc6:	mov	r0, r4
    6bc8:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6bcc:	ldrb	r6, [r4, #8]
    6bce:	strb.w	r5, [sp, #26]
    6bd2:	cmp	r6, #0
    6bd4:	bne.w	6d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6bd8:	movs	r2, #1
    6bda:	add.w	r1, sp, #26
    6bde:	mov	r0, r4
    6be0:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6be4:	ldrb	r5, [r4, #8]
    6be6:	str	r6, [sp, #116]	; 0x74
    6be8:	cmp	r5, #0
    6bea:	bne.w	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6bee:	movs	r2, #4
    6bf0:	add	r1, sp, #116	; 0x74
    6bf2:	mov	r0, r4
    6bf4:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6bf8:	ldrb	r3, [r4, #8]
    6bfa:	strb.w	r5, [sp, #25]
    6bfe:	cmp	r3, #0
    6c00:	bne.w	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6c04:	mov	r0, r4
    6c06:	movs	r2, #1
    6c08:	add.w	r1, sp, #25
    6c0c:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6c10:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6c12:	movs	r2, #2
    6c14:	add.w	r1, sp, #66	; 0x42
    6c18:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6c1c:	ldrb	r5, [r4, #8]
    6c1e:	movs	r3, #10
    6c20:	strh.w	r3, [sp, #64]	; 0x40
    6c24:	cmp	r5, #0
    6c26:	bne.w	6d4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    6c2a:	movs	r2, #2
    6c2c:	add	r1, sp, #64	; 0x40
    6c2e:	mov	r0, r4
    6c30:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6c34:	ldrb	r3, [r4, #8]
    6c36:	strb.w	r5, [sp, #24]
    6c3a:	cmp	r3, #0
    6c3c:	bne.w	6d46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    6c40:	movs	r2, #1
    6c42:	add	r1, sp, #24
    6c44:	mov	r0, r4
    6c46:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6c4a:	ldrb	r3, [r4, #8]
    6c4c:	mov.w	r8, #0
    6c50:	mov.w	r9, #0
    6c54:	strd	r8, r9, [sp, #136]	; 0x88
    6c58:	cmp	r3, #0
    6c5a:	bne.n	6d42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    6c5c:	movs	r2, #8
    6c5e:	add	r1, sp, #136	; 0x88
    6c60:	mov	r0, r4
    6c62:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6c66:	ldrb	r6, [r4, #8]
    6c68:	strd	r8, r9, [sp, #128]	; 0x80
    6c6c:	cmp	r6, #0
    6c6e:	bne.n	6d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6c70:	movs	r2, #8
    6c72:	add	r1, sp, #128	; 0x80
    6c74:	mov	r0, r4
    6c76:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6c7a:	ldrb	r5, [r4, #8]
    6c7c:	str	r6, [sp, #112]	; 0x70
    6c7e:	cmp	r5, #0
    6c80:	bne.n	6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6c82:	movs	r2, #4
    6c84:	add	r1, sp, #112	; 0x70
    6c86:	mov	r0, r4
    6c88:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6c8c:	ldrb	r3, [r4, #8]
    6c8e:	strb.w	r5, [sp, #23]
    6c92:	cmp	r3, #0
    6c94:	bne.n	6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6c96:	mov	r0, r4
    6c98:	movs	r2, #1
    6c9a:	add.w	r1, sp, #23
    6c9e:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6ca2:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6ca4:	movs	r2, #2
    6ca6:	add.w	r1, sp, #30
    6caa:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6cae:	ldrb	r6, [r4, #8]
    6cb0:	movs	r3, #6
    6cb2:	strh.w	r3, [sp, #28]
    6cb6:	cbnz	r6, 6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    6cb8:	movs	r2, #2
    6cba:	add	r1, sp, #28
    6cbc:	mov	r0, r4
    6cbe:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6cc2:	ldrb	r5, [r4, #8]
    6cc4:	strb.w	r6, [sp, #5]
    6cc8:	cbnz	r5, 6d16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    6cca:	movs	r2, #1
    6ccc:	add.w	r1, sp, #5
    6cd0:	mov	r0, r4
    6cd2:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6cd6:	ldrb	r6, [r4, #8]
    6cd8:	str	r5, [sp, #76]	; 0x4c
    6cda:	cbnz	r6, 6d12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    6cdc:	movs	r2, #4
    6cde:	add	r1, sp, #76	; 0x4c
    6ce0:	mov	r0, r4
    6ce2:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6ce6:	ldrb	r5, [r4, #8]
    6ce8:	str	r6, [sp, #72]	; 0x48
    6cea:	cbnz	r5, 6d0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6cec:	movs	r2, #4
    6cee:	add	r1, sp, #72	; 0x48
    6cf0:	mov	r0, r4
    6cf2:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6cf6:	ldrb	r3, [r4, #8]
    6cf8:	strb.w	r5, [sp, #4]
    6cfc:	cbnz	r3, 6d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6cfe:	mov	r0, r4
    6d00:	movs	r2, #1
    6d02:	add	r1, sp, #4
    6d04:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    6d08:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6d0a:	ldr	r3, [r4, #12]
    6d0c:	b.n	672c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    6d0e:	ldr	r3, [r4, #12]
    6d10:	b.n	6728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    6d12:	ldr	r3, [r4, #12]
    6d14:	b.n	6754 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    6d16:	ldr	r3, [r4, #12]
    6d18:	b.n	6750 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    6d1a:	ldr	r3, [r4, #12]
    6d1c:	b.n	674c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    6d1e:	ldr	r3, [r4, #12]
    6d20:	b.n	6720 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    6d22:	ldr	r3, [r4, #12]
    6d24:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    6d26:	ldr	r3, [r4, #12]
    6d28:	b.n	6824 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    6d2a:	ldr	r3, [r4, #12]
    6d2c:	b.n	6820 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    6d2e:	ldr	r3, [r4, #12]
    6d30:	b.n	6724 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    6d32:	ldr	r3, [r4, #12]
    6d34:	b.n	6778 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    6d36:	ldr	r3, [r4, #12]
    6d38:	b.n	6774 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    6d3a:	ldr	r3, [r4, #12]
    6d3c:	b.n	6770 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    6d3e:	ldr	r3, [r4, #12]
    6d40:	b.n	6828 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    6d42:	ldr	r3, [r4, #12]
    6d44:	b.n	6a8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    6d46:	ldr	r3, [r4, #12]
    6d48:	b.n	6a86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    6d4a:	ldr	r3, [r4, #12]
    6d4c:	b.n	6a82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    6d4e:	nop

00006d50 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    6d50:	push	{r4, lr}
    6d52:	mov	r4, r0
    6d54:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    6d56:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    6d58:	cbnz	r3, 6d62 <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    6d5a:	bl	12894 <usb_rx>
    6d5e:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    6d60:	cbz	r0, 6d64 <MTPD::receive_buffer()+0x14>
    6d62:	pop	{r4, pc}
    6d64:	bl	2880 <mtp_yield()>
    6d68:	b.n	6d54 <MTPD::receive_buffer()+0x4>
    6d6a:	nop

00006d6c <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d70:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    6d72:	ldr	r0, [r0, #0]
    6d74:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d76:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    6d78:	ldr	r3, [r3, #40]	; 0x28
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d7a:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    6d7c:	blx	r3
    if (write_get_length_) {
    6d7e:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    6d80:	mov	r7, r0
    if (write_get_length_) {
    6d82:	cbnz	r5, 6ddc <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d84:	cbz	r0, 6dd6 <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6d86:	mov	r9, r5
    6d88:	b.n	6d8e <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d8a:	cmp	r7, r5
    6d8c:	bls.n	6dd6 <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    6d8e:	mov	r0, r6
    6d90:	bl	5b78 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    6d94:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    6d98:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    6d9c:	ldr	r1, [r0, #0]
    6d9e:	subs	r4, r7, r5
    6da0:	rsb	lr, r2, #64	; 0x40
    6da4:	cmp	r4, lr
    6da6:	it	cs
    6da8:	movcs	r4, lr
    6daa:	str	r4, [sp, #0]
    6dac:	add	r3, r2
    6dae:	ldr.w	sl, [r1, #48]	; 0x30
    6db2:	mov	r2, r5
    6db4:	mov	r1, r8
    6db6:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    6db8:	ldr	r1, [r6, #4]
    6dba:	ldrh	r3, [r1, #0]
    6dbc:	add	r3, r4
    6dbe:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6dc0:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    6dc2:	add	r5, r4
        data_buffer_->len += to_copy;
    6dc4:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6dc6:	bne.n	6d8a <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    6dc8:	movs	r0, #4
    6dca:	bl	12a04 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6dce:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6dd0:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6dd4:	bhi.n	6d8e <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6dd6:	add	sp, #8
    6dd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    6ddc:	ldr	r3, [r6, #12]
    6dde:	add	r7, r3
    6de0:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6de2:	add	sp, #8
    6de4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006de8 <MTPD::read(char*, unsigned long)>:
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6de8:	cbz	r2, 6e54 <MTPD::read(char*, unsigned long)+0x6c>
      if(CONTAINER->len>20) printf(" %x", CONTAINER->params[2]); \
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    6dea:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dee:	mov	r6, r0
    6df0:	mov	r5, r1
    while (size) {
    6df2:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    6df4:	movs	r7, #0
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    6df6:	mov	r0, r6
    6df8:	bl	6d50 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6dfc:	ldr	r3, [r6, #4]
    6dfe:	ldrh.w	lr, [r3, #2]
    6e02:	ldrh.w	ip, [r3]
    6e06:	rsb	r4, lr, ip
    6e0a:	cmp	r4, r8
    6e0c:	it	cs
    6e0e:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    6e10:	add.w	r1, r3, #8
    6e14:	add	r1, lr
    6e16:	mov	r0, r5
    6e18:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    6e1a:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    6e1e:	cbz	r5, 6e30 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    6e20:	bl	11bf8 <memcpy>
    6e24:	ldr	r3, [r6, #4]
    6e26:	ldrh.w	lr, [r3, #2]
    6e2a:	ldrh.w	ip, [r3]
        data += to_copy;
    6e2e:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    6e30:	add	r4, lr
    6e32:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    6e34:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    6e36:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    6e38:	beq.n	6e44 <MTPD::read(char*, unsigned long)+0x5c>
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6e3a:	cmp.w	r8, #0
    6e3e:	bne.n	6df6 <MTPD::read(char*, unsigned long)+0xe>
    6e40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    6e44:	mov	r0, r3
    6e46:	bl	12848 <usb_free>
        data_buffer_ = NULL;
    6e4a:	str	r7, [r6, #4]
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6e4c:	cmp.w	r8, #0
    6e50:	bne.n	6df6 <MTPD::read(char*, unsigned long)+0xe>
    6e52:	b.n	6e40 <MTPD::read(char*, unsigned long)+0x58>
    6e54:	bx	lr
    6e56:	nop

00006e58 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e58:	push	{r4, r5, r6, lr}
    6e5a:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e5c:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e5e:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e60:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e64:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e66:	bl	6de8 <MTPD::read(char*, unsigned long)>
    6e6a:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    6e6e:	cbz	r4, 6e90 <MTPD::readstring(char*)+0x38>
    6e70:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e72:	cbz	r2, 6e8c <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e74:	movs	r2, #2
    6e76:	add.w	r1, sp, #6
    6e7a:	mov	r0, r6
    6e7c:	bl	6de8 <MTPD::read(char*, unsigned long)>
    6e80:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    6e84:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e88:	cmp	r5, r4
    6e8a:	bne.n	6e74 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    6e8c:	add	sp, #8
    6e8e:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    6e90:	lsls	r2, r2, #1
    6e92:	mov	r1, r4
    6e94:	mov	r0, r6
    6e96:	bl	6de8 <MTPD::read(char*, unsigned long)>
    6e9a:	b.n	6e8c <MTPD::readstring(char*)+0x34>

00006e9c <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
    }
    storage_->close();
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    6e9c:	push	{r4, r5, lr}
    6e9e:	sub	sp, #260	; 0x104
    6ea0:	mov	r4, r0
    6ea2:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6ea4:	movs	r2, #12
    6ea6:	mov	r1, sp
    6ea8:	bl	6de8 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[MAX_FILENAME_LEN];
        ReadMTPHeader();
        readstring(filename);
    6eac:	mov	r1, sp
    6eae:	mov	r0, r4
    6eb0:	bl	6e58 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    6eb4:	ldr	r0, [r4, #0]
    6eb6:	ldr	r3, [r0, #0]
    6eb8:	mov	r2, sp
    6eba:	mov	r1, r5
    6ebc:	ldr	r3, [r3, #72]	; 0x48
    6ebe:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    6ec0:	movw	r0, #8193	; 0x2001
    6ec4:	add	sp, #260	; 0x104
    6ec6:	pop	{r4, r5, pc}

00006ec8 <MTPD::SendObject()>:
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    6ec8:	push	{r4, r5, r6, r7, lr}
    6eca:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6ecc:	movs	r2, #12
    6ece:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    6ed0:	mov	r6, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6ed2:	bl	6de8 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6ed6:	ldrh.w	r3, [sp, #8]
    6eda:	cmp	r3, #2
    6edc:	beq.n	6eec <MTPD::SendObject()+0x24>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    6ede:	ldr	r0, [r6, #0]
    6ee0:	ldr	r3, [r0, #0]
    6ee2:	ldr	r3, [r3, #56]	; 0x38
    6ee4:	blx	r3
    return true;
    6ee6:	movs	r0, #1
  }
    6ee8:	add	sp, #20
    6eea:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    6eec:	ldr	r7, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    6eee:	subs	r7, #12
    6ef0:	beq.n	6ede <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    6ef2:	movs	r5, #0

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    6ef4:	mov	r0, r6
    6ef6:	bl	6d50 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    6efa:	ldmia.w	r6, {r0, r1}
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6efe:	ldrh	r2, [r1, #2]
    6f00:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    6f04:	ldr	r3, [r0, #0]
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6f06:	subs	r4, r4, r2
    6f08:	cmp	r4, r7
    6f0a:	it	cs
    6f0c:	movcs	r4, r7
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    6f0e:	add	r1, r2
    6f10:	ldr	r3, [r3, #52]	; 0x34
    6f12:	mov	r2, r4
    6f14:	blx	r3
      data_buffer_->index += to_copy;
      len -= to_copy;
    6f16:	subs	r7, r7, r4
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    6f18:	cmp	r0, #0
    6f1a:	beq.n	6ee8 <MTPD::SendObject()+0x20>
      data_buffer_->index += to_copy;
    6f1c:	ldr	r0, [r6, #4]
    6f1e:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    6f20:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    6f22:	add	r4, r3
    6f24:	uxth	r4, r4
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    6f26:	cmp	r2, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    6f28:	strh	r4, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    6f2a:	beq.n	6f32 <MTPD::SendObject()+0x6a>
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    6f2c:	cmp	r7, #0
    6f2e:	bne.n	6ef4 <MTPD::SendObject()+0x2c>
    6f30:	b.n	6ede <MTPD::SendObject()+0x16>
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    6f32:	bl	12848 <usb_free>
        data_buffer_ = NULL;
    6f36:	str	r5, [r6, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    6f38:	cmp	r7, #0
    6f3a:	bne.n	6ef4 <MTPD::SendObject()+0x2c>
    6f3c:	b.n	6ede <MTPD::SendObject()+0x16>
    6f3e:	nop

00006f40 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    6f40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f44:	mov	r5, r0
    6f46:	sub	sp, #36	; 0x24
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    6f48:	movs	r0, #5
    6f4a:	bl	12894 <usb_rx>
    6f4e:	cmp	r0, #0
    6f50:	beq.n	6fba <MTPD::loop()+0x7a>
      printContainer();
    6f52:	ldr	r1, [r0, #16]
    6f54:	ldr	r3, [r0, #8]
    6f56:	ldrh	r2, [r0, #14]
    6f58:	str	r1, [sp, #4]
    6f5a:	ldrh	r1, [r0, #12]
    6f5c:	str	r1, [sp, #0]
    6f5e:	mov	r4, r0
    6f60:	ldr	r1, [pc, #744]	; (724c <MTPD::loop()+0x30c>)
    6f62:	ldr	r0, [pc, #748]	; (7250 <MTPD::loop()+0x310>)
    6f64:	bl	137e0 <Print::printf(char const*, ...)>
    6f68:	ldr	r3, [r4, #8]
    6f6a:	cmp	r3, #12
    6f6c:	bhi.n	7002 <MTPD::loop()+0xc2>
    6f6e:	ldr	r1, [pc, #740]	; (7254 <MTPD::loop()+0x314>)
    6f70:	ldr	r0, [pc, #732]	; (7250 <MTPD::loop()+0x310>)
    6f72:	bl	137e0 <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    6f76:	ldrh	r2, [r4, #0]
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    6f78:	ldr	r6, [r4, #16]
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
    6f7a:	ldrh	r0, [r4, #14]
        int p1 = CONTAINER->params[0];
    6f7c:	ldr	r7, [r4, #20]
        int p2 = CONTAINER->params[1];
    6f7e:	ldr.w	sl, [r4, #24]
        int p3 = CONTAINER->params[2];
    6f82:	ldr	r3, [r4, #28]
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    6f84:	ldr.w	r8, [r4, #8]
        int typ= CONTAINER->type;
    6f88:	ldrh	r1, [r4, #12]
        TID=id;
    6f8a:	str	r6, [r5, #16]

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    6f8c:	cmp	r2, #11
    6f8e:	bls.n	6ffa <MTPD::loop()+0xba>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    6f90:	mov.w	fp, #12
        
        if (typ == 1) { // command
    6f94:	cmp	r1, #1
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    6f96:	strh.w	fp, [r4]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    6f9a:	mov	r9, r7
      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
    6f9c:	beq.n	705a <MTPD::loop()+0x11a>
    6f9e:	mov.w	r0, #8192	; 0x2000
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    6fa2:	movs	r3, #3
        CONTAINER->len=len;
        CONTAINER->op=return_code;
    6fa4:	strh	r0, [r4, #14]
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
        CONTAINER->len=len;
    6fa6:	str.w	r8, [r4, #8]
        CONTAINER->op=return_code;
        CONTAINER->transaction_id=id;
    6faa:	str	r6, [r4, #16]
        CONTAINER->params[0]=p1;
    6fac:	str.w	r9, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    6fb0:	strh	r3, [r4, #12]
        CONTAINER->params[0]=p1;
        #if DEBUG>1
          printContainer();
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    6fb2:	mov	r1, r4
    6fb4:	movs	r0, #4
    6fb6:	bl	12a04 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    6fba:	movs	r0, #6
    6fbc:	bl	12894 <usb_rx>
    6fc0:	mov	r4, r0
    6fc2:	cbz	r0, 6ff4 <MTPD::loop()+0xb4>
      printf("Event: "); printContainer();
    6fc4:	ldr	r1, [pc, #656]	; (7258 <MTPD::loop()+0x318>)
    6fc6:	ldr	r0, [pc, #648]	; (7250 <MTPD::loop()+0x310>)
    6fc8:	bl	137e0 <Print::printf(char const*, ...)>
    6fcc:	ldr	r1, [r4, #16]
    6fce:	ldr	r3, [r4, #8]
    6fd0:	ldrh	r2, [r4, #14]
    6fd2:	str	r1, [sp, #4]
    6fd4:	ldrh	r1, [r4, #12]
    6fd6:	str	r1, [sp, #0]
    6fd8:	ldr	r0, [pc, #628]	; (7250 <MTPD::loop()+0x310>)
    6fda:	ldr	r1, [pc, #624]	; (724c <MTPD::loop()+0x30c>)
    6fdc:	bl	137e0 <Print::printf(char const*, ...)>
    6fe0:	ldr	r3, [r4, #8]
    6fe2:	cmp	r3, #12
    6fe4:	bhi.n	702e <MTPD::loop()+0xee>
    6fe6:	ldr	r1, [pc, #620]	; (7254 <MTPD::loop()+0x314>)
    6fe8:	ldr	r0, [pc, #612]	; (7250 <MTPD::loop()+0x310>)
    6fea:	bl	137e0 <Print::printf(char const*, ...)>
      usb_free(receive_buffer);
    6fee:	mov	r0, r4
    6ff0:	bl	12848 <usb_free>
    }
  }
    6ff4:	add	sp, #36	; 0x24
    6ff6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    6ffa:	mov	r0, r4
    6ffc:	bl	12848 <usb_free>
    7000:	b.n	6fba <MTPD::loop()+0x7a>

  void MTPD::loop(void) 
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
    7002:	ldr	r2, [r4, #20]
    7004:	ldr	r1, [pc, #596]	; (725c <MTPD::loop()+0x31c>)
    7006:	ldr	r0, [pc, #584]	; (7250 <MTPD::loop()+0x310>)
    7008:	bl	137e0 <Print::printf(char const*, ...)>
    700c:	ldr	r3, [r4, #8]
    700e:	cmp	r3, #16
    7010:	bls.n	6f6e <MTPD::loop()+0x2e>
    7012:	ldr	r2, [r4, #24]
    7014:	ldr	r1, [pc, #580]	; (725c <MTPD::loop()+0x31c>)
    7016:	ldr	r0, [pc, #568]	; (7250 <MTPD::loop()+0x310>)
    7018:	bl	137e0 <Print::printf(char const*, ...)>
    701c:	ldr	r3, [r4, #8]
    701e:	cmp	r3, #20
    7020:	bls.n	6f6e <MTPD::loop()+0x2e>
    7022:	ldr	r2, [r4, #28]
    7024:	ldr	r1, [pc, #564]	; (725c <MTPD::loop()+0x31c>)
    7026:	ldr	r0, [pc, #552]	; (7250 <MTPD::loop()+0x310>)
    7028:	bl	137e0 <Print::printf(char const*, ...)>
    702c:	b.n	6f6e <MTPD::loop()+0x2e>
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
      printf("Event: "); printContainer();
    702e:	ldr	r2, [r4, #20]
    7030:	ldr	r1, [pc, #552]	; (725c <MTPD::loop()+0x31c>)
    7032:	ldr	r0, [pc, #540]	; (7250 <MTPD::loop()+0x310>)
    7034:	bl	137e0 <Print::printf(char const*, ...)>
    7038:	ldr	r3, [r4, #8]
    703a:	cmp	r3, #16
    703c:	bls.n	6fe6 <MTPD::loop()+0xa6>
    703e:	ldr	r2, [r4, #24]
    7040:	ldr	r1, [pc, #536]	; (725c <MTPD::loop()+0x31c>)
    7042:	ldr	r0, [pc, #524]	; (7250 <MTPD::loop()+0x310>)
    7044:	bl	137e0 <Print::printf(char const*, ...)>
    7048:	ldr	r3, [r4, #8]
    704a:	cmp	r3, #20
    704c:	bls.n	6fe6 <MTPD::loop()+0xa6>
    704e:	ldr	r2, [r4, #28]
    7050:	ldr	r1, [pc, #520]	; (725c <MTPD::loop()+0x31c>)
    7052:	ldr	r0, [pc, #508]	; (7250 <MTPD::loop()+0x310>)
    7054:	bl	137e0 <Print::printf(char const*, ...)>
    7058:	b.n	6fe6 <MTPD::loop()+0xa6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    705a:	movw	r2, #4107	; 0x100b
    705e:	cmp	r0, r2
    7060:	beq.w	7456 <MTPD::loop()+0x516>
    7064:	bls.n	70ec <MTPD::loop()+0x1ac>
    7066:	movw	r2, #4121	; 0x1019
    706a:	cmp	r0, r2
    706c:	beq.w	747a <MTPD::loop()+0x53a>
    7070:	bls.n	7160 <MTPD::loop()+0x220>
    7072:	movw	r2, #38914	; 0x9802
    7076:	cmp	r0, r2
    7078:	beq.w	7398 <MTPD::loop()+0x458>
    707c:	bhi.w	7260 <MTPD::loop()+0x320>
    7080:	movw	r2, #4122	; 0x101a
    7084:	cmp	r0, r2
    7086:	beq.w	72e4 <MTPD::loop()+0x3a4>
    708a:	movw	r3, #38913	; 0x9801
    708e:	cmp	r0, r3
    7090:	bne.w	7244 <MTPD::loop()+0x304>
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
              else {p1 = return_code; return_code=0x2001;}
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    7094:	movs	r3, #1
    7096:	mov.w	sl, #0
    709a:	strb	r3, [r5, #8]
    709c:	mov	r1, r7
    709e:	mov	r0, r5
    70a0:	str.w	sl, [r5, #12]
    70a4:	bl	6304 <MTPD::getObjectPropsSupported(unsigned long)>
    70a8:	ldr	r3, [r5, #12]
    70aa:	strb.w	sl, [r5, #8]
    70ae:	adds	r3, #12
    70b0:	movs	r2, #2
    70b2:	strh.w	r2, [sp, #24]
    70b6:	str	r3, [sp, #20]
    70b8:	ldrh	r3, [r4, #14]
    70ba:	strh.w	r3, [sp, #26]
    70be:	ldr	r3, [r4, #16]
    70c0:	str	r3, [sp, #28]
    70c2:	add	r1, sp, #20
    70c4:	mov	r0, r5
    70c6:	movs	r2, #12
    70c8:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    70cc:	mov	r1, r7
    70ce:	mov	r0, r5
    70d0:	bl	6304 <MTPD::getObjectPropsSupported(unsigned long)>
    70d4:	mov	r0, r5
    70d6:	bl	5b78 <MTPD::get_buffer()>
    70da:	ldr	r1, [r5, #4]
    70dc:	movs	r0, #4
    70de:	bl	12a04 <usb_tx>
    70e2:	str.w	sl, [r5, #4]
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
              break;
    70e6:	movw	r0, #8193	; 0x2001
    70ea:	b.n	6fa2 <MTPD::loop()+0x62>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    70ec:	movw	r2, #4101	; 0x1005
    70f0:	cmp	r0, r2
    70f2:	beq.w	741c <MTPD::loop()+0x4dc>
    70f6:	bhi.n	71cc <MTPD::loop()+0x28c>
    70f8:	movw	r3, #4098	; 0x1002
    70fc:	cmp	r0, r3
    70fe:	beq.w	74a0 <MTPD::loop()+0x560>
    7102:	bls.w	7292 <MTPD::loop()+0x352>
    7106:	movw	r3, #4099	; 0x1003
    710a:	cmp	r0, r3
    710c:	beq.n	70e6 <MTPD::loop()+0x1a6>
    710e:	movw	r3, #4100	; 0x1004
    7112:	cmp	r0, r3
    7114:	bne.w	7244 <MTPD::loop()+0x304>
              openSession(p1);
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    7118:	movs	r3, #1
    711a:	movs	r7, #0
    711c:	strb	r3, [r5, #8]
    711e:	mov	r0, r5
    7120:	str	r7, [r5, #12]
    7122:	bl	5fd8 <MTPD::WriteStorageIDs()>
    7126:	ldr	r3, [r5, #12]
    7128:	strb	r7, [r5, #8]
    712a:	adds	r3, #12
    712c:	movs	r2, #2
    712e:	strh.w	r2, [sp, #24]
    7132:	str	r3, [sp, #20]
    7134:	ldrh	r3, [r4, #14]
    7136:	strh.w	r3, [sp, #26]
    713a:	ldr	r3, [r4, #16]
    713c:	str	r3, [sp, #28]
    713e:	mov	r0, r5
    7140:	movs	r2, #12
    7142:	add	r1, sp, #20
    7144:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    7148:	mov	r0, r5
    714a:	bl	5fd8 <MTPD::WriteStorageIDs()>
          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
    714e:	mov	r0, r5
    7150:	bl	5b78 <MTPD::get_buffer()>
    7154:	ldr	r1, [r5, #4]
    7156:	movs	r0, #4
    7158:	bl	12a04 <usb_tx>
    715c:	str	r7, [r5, #4]
    715e:	b.n	70e6 <MTPD::loop()+0x1a6>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7160:	movw	r3, #4112	; 0x1010
    7164:	cmp	r0, r3
    7166:	beq.n	7244 <MTPD::loop()+0x304>
    7168:	bls.w	72d0 <MTPD::loop()+0x390>
    716c:	movw	r3, #4116	; 0x1014
    7170:	cmp	r0, r3
    7172:	beq.w	73d6 <MTPD::loop()+0x496>
    7176:	movw	r3, #4117	; 0x1015
    717a:	cmp	r0, r3
    717c:	bne.n	7244 <MTPD::loop()+0x304>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    717e:	movw	r3, #54274	; 0xd402
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7182:	mov.w	sl, #0
    7186:	movs	r2, #1
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7188:	cmp	r7, r3
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    718a:	str.w	sl, [r5, #12]
    718e:	strb	r2, [r5, #8]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7190:	beq.w	750a <MTPD::loop()+0x5ca>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7194:	movs	r3, #2
    7196:	movs	r2, #12
    7198:	strb.w	sl, [r5, #8]
    719c:	str	r2, [sp, #20]
    719e:	strh.w	r3, [sp, #24]
    71a2:	ldrh	r3, [r4, #14]
    71a4:	strh.w	r3, [sp, #26]
    71a8:	ldr	r3, [r4, #16]
    71aa:	str	r3, [sp, #28]
    71ac:	add	r1, sp, #20
    71ae:	mov	r0, r5
    71b0:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    71b4:	mov	r0, r5
    71b6:	bl	5b78 <MTPD::get_buffer()>
    71ba:	movs	r0, #4
    71bc:	ldr	r1, [r5, #4]
    71be:	bl	12a04 <usb_tx>
    71c2:	movs	r3, #0
    71c4:	str	r3, [r5, #4]
              break;
    71c6:	movw	r0, #8193	; 0x2001
    71ca:	b.n	6fa2 <MTPD::loop()+0x62>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    71cc:	movw	r2, #4103	; 0x1007
    71d0:	cmp	r0, r2
    71d2:	beq.w	734e <MTPD::loop()+0x40e>
    71d6:	bcc.w	7340 <MTPD::loop()+0x400>
    71da:	movw	r3, #4104	; 0x1008
    71de:	cmp	r0, r3
    71e0:	beq.w	7306 <MTPD::loop()+0x3c6>
    71e4:	movw	r3, #4105	; 0x1009
    71e8:	cmp	r0, r3
    71ea:	bne.n	7244 <MTPD::loop()+0x304>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
    71ec:	mov.w	sl, #0
    71f0:	movs	r3, #1
    71f2:	strb	r3, [r5, #8]
    71f4:	mov	r1, r7
    71f6:	mov	r0, r5
    71f8:	str.w	sl, [r5, #12]
    71fc:	bl	6d6c <MTPD::GetObject(unsigned long)>
    7200:	ldr	r3, [r5, #12]
    7202:	strb.w	sl, [r5, #8]
    7206:	adds	r3, #12
    7208:	movs	r2, #2
    720a:	strh.w	r2, [sp, #24]
    720e:	str	r3, [sp, #20]
    7210:	ldrh	r3, [r4, #14]
    7212:	strh.w	r3, [sp, #26]
    7216:	ldr	r3, [r4, #16]
    7218:	str	r3, [sp, #28]
    721a:	movs	r2, #12
    721c:	add	r1, sp, #20
    721e:	mov	r0, r5
    7220:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    7224:	mov	r1, r7
    7226:	mov	r0, r5
    7228:	bl	6d6c <MTPD::GetObject(unsigned long)>
    722c:	mov	r0, r5
    722e:	bl	5b78 <MTPD::get_buffer()>
    7232:	movs	r0, #4
    7234:	ldr	r1, [r5, #4]
    7236:	bl	12a04 <usb_tx>
    723a:	str.w	sl, [r5, #4]
              break;
    723e:	movw	r0, #8193	; 0x2001
    7242:	b.n	6fa2 <MTPD::loop()+0x62>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    7244:	movw	r0, #8197	; 0x2005
    7248:	b.n	6fa2 <MTPD::loop()+0x62>
    724a:	nop
    724c:	.word	0x000193cc
    7250:	.word	0x1fff0b20
    7254:	.word	0x000193e0
    7258:	.word	0x000193e4
    725c:	.word	0x000193dc
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7260:	movw	r3, #38915	; 0x9803
    7264:	cmp	r0, r3
    7266:	beq.w	74b2 <MTPD::loop()+0x572>
    726a:	movw	r3, #38916	; 0x9804
    726e:	cmp	r0, r3
    7270:	bne.n	7244 <MTPD::loop()+0x304>
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    7272:	mov	r0, r5
    7274:	bl	6d50 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    7278:	movw	r3, #56327	; 0xdc07
    727c:	cmp	sl, r3
    727e:	bne.n	7244 <MTPD::loop()+0x304>
    7280:	mov	r1, r7
    7282:	mov	r0, r5
    7284:	bl	6e9c <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    7288:	cmp	r0, #0
    728a:	beq.w	6ffa <MTPD::loop()+0xba>
    728e:	uxth	r0, r0
    7290:	b.n	6fa2 <MTPD::loop()+0x62>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7292:	movw	r3, #4097	; 0x1001
    7296:	cmp	r0, r3
    7298:	bne.n	7244 <MTPD::loop()+0x304>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    729a:	movs	r7, #0
    729c:	strb	r1, [r5, #8]
    729e:	mov	r0, r5
    72a0:	str	r7, [r5, #12]
    72a2:	bl	5d58 <MTPD::WriteDescriptor()>
    72a6:	ldr	r3, [r5, #12]
    72a8:	strb	r7, [r5, #8]
    72aa:	adds	r3, #12
    72ac:	movs	r2, #2
    72ae:	strh.w	r2, [sp, #24]
    72b2:	str	r3, [sp, #20]
    72b4:	ldrh	r3, [r4, #14]
    72b6:	strh.w	r3, [sp, #26]
    72ba:	ldr	r3, [r4, #16]
    72bc:	str	r3, [sp, #28]
    72be:	mov	r0, r5
    72c0:	mov	r2, fp
    72c2:	add	r1, sp, #20
    72c4:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    72c8:	mov	r0, r5
    72ca:	bl	5d58 <MTPD::WriteDescriptor()>
    72ce:	b.n	714e <MTPD::loop()+0x20e>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    72d0:	movw	r3, #4109	; 0x100d
    72d4:	cmp	r0, r3
    72d6:	bne.n	7244 <MTPD::loop()+0x304>
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    72d8:	mov	r0, r5
    72da:	bl	6ec8 <MTPD::SendObject()>
              break;
    72de:	movw	r0, #8193	; 0x2001
    72e2:	b.n	6fa2 <MTPD::loop()+0x62>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    }
    
    uint32_t MTPD::copyObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      return storage_->copy(handle,store1,newHandle);
    72e4:	ldr	r0, [r5, #0]
    72e6:	ldr	r1, [r0, #0]
    72e8:	add.w	r2, sl, #4294967295
    72ec:	ldr	r5, [r1, #80]	; 0x50
    72ee:	mov	r1, r7
    72f0:	blx	r5
              len  = receive_buffer->len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
    72f2:	cmp	r0, #0
    72f4:	bne.w	74f0 <MTPD::loop()+0x5b0>
    72f8:	mov.w	r8, #12
    72fc:	strh.w	r8, [r4]
    7300:	movw	r0, #8197	; 0x2005
    7304:	b.n	6fa2 <MTPD::loop()+0x62>
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
    7306:	movs	r7, #0
    7308:	strb	r1, [r5, #8]
    730a:	mov	r0, r5
    730c:	mov	r1, r9
    730e:	str	r7, [r5, #12]
    7310:	bl	60b0 <MTPD::GetObjectInfo(unsigned long)>
    7314:	ldr	r3, [r5, #12]
    7316:	strb	r7, [r5, #8]
    7318:	adds	r3, #12
    731a:	movs	r2, #2
    731c:	strh.w	r2, [sp, #24]
    7320:	str	r3, [sp, #20]
    7322:	ldrh	r3, [r4, #14]
    7324:	strh.w	r3, [sp, #26]
    7328:	ldr	r3, [r4, #16]
    732a:	str	r3, [sp, #28]
    732c:	add	r1, sp, #20
    732e:	mov	r0, r5
    7330:	mov	r2, fp
    7332:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    7336:	mov	r1, r9
    7338:	mov	r0, r5
    733a:	bl	60b0 <MTPD::GetObjectInfo(unsigned long)>
    733e:	b.n	714e <MTPD::loop()+0x20e>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
              break;
            case 0x1006:  // GetNumObjects
              if (p2) {
    7340:	cmp.w	sl, #0
    7344:	beq.w	74f8 <MTPD::loop()+0x5b8>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    7348:	movw	r0, #8212	; 0x2014
    734c:	b.n	6fa2 <MTPD::loop()+0x62>
              } else {
                p1 = GetNumObjects(p1, p3);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
    734e:	cmp.w	sl, #0
    7352:	bne.n	7348 <MTPD::loop()+0x408>
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
    7354:	mov	r2, r3
    7356:	strb	r1, [r5, #8]
    7358:	mov	r0, r5
    735a:	mov	r1, r7
    735c:	str.w	sl, [r5, #12]
    7360:	str	r3, [sp, #12]
    7362:	bl	6040 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7366:	ldr	r2, [r5, #12]
    7368:	strb.w	sl, [r5, #8]
    736c:	adds	r2, #12
    736e:	movs	r1, #2
    7370:	str	r2, [sp, #20]
    7372:	strh.w	r1, [sp, #24]
    7376:	ldrh	r2, [r4, #14]
    7378:	strh.w	r2, [sp, #26]
    737c:	ldr	r1, [r4, #16]
    737e:	str	r1, [sp, #28]
    7380:	mov	r2, fp
    7382:	add	r1, sp, #20
    7384:	mov	r0, r5
    7386:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    738a:	ldr	r3, [sp, #12]
    738c:	mov	r1, r7
    738e:	mov	r2, r3
    7390:	mov	r0, r5
    7392:	bl	6040 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7396:	b.n	70d4 <MTPD::loop()+0x194>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
    7398:	movs	r7, #0
    739a:	strb	r1, [r5, #8]
    739c:	mov	r2, sl
    739e:	mov	r1, r9
    73a0:	mov	r0, r5
    73a2:	str	r7, [r5, #12]
    73a4:	bl	6668 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    73a8:	ldr	r3, [r5, #12]
    73aa:	strb	r7, [r5, #8]
    73ac:	adds	r3, #12
    73ae:	movs	r2, #2
    73b0:	strh.w	r2, [sp, #24]
    73b4:	str	r3, [sp, #20]
    73b6:	ldrh	r3, [r4, #14]
    73b8:	strh.w	r3, [sp, #26]
    73bc:	mov	r2, fp
    73be:	ldr	r3, [r4, #16]
    73c0:	str	r3, [sp, #28]
    73c2:	add	r1, sp, #20
    73c4:	mov	r0, r5
    73c6:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    73ca:	mov	r2, sl
    73cc:	mov	r1, r9
    73ce:	mov	r0, r5
    73d0:	bl	6668 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    73d4:	b.n	714e <MTPD::loop()+0x20e>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    73d6:	movw	r3, #54274	; 0xd402
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    73da:	movs	r2, #0
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    73dc:	cmp	r7, r3
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    73de:	strb	r1, [r5, #8]
    73e0:	str	r2, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    73e2:	beq.w	7540 <MTPD::loop()+0x600>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    73e6:	movs	r1, #0
    73e8:	movs	r2, #12
    73ea:	movs	r3, #2
    73ec:	strb	r1, [r5, #8]
    73ee:	str	r2, [sp, #20]
    73f0:	strh.w	r3, [sp, #24]
    73f4:	ldrh	r3, [r4, #14]
    73f6:	strh.w	r3, [sp, #26]
    73fa:	ldr	r3, [r4, #16]
    73fc:	str	r3, [sp, #28]
    73fe:	add	r1, sp, #20
    7400:	mov	r0, r5
    7402:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7406:	movw	r3, #54274	; 0xd402
    740a:	cmp	r7, r3
    740c:	bne.w	71b4 <MTPD::loop()+0x274>
    7410:	movw	r1, #54274	; 0xd402
    7414:	mov	r0, r5
    7416:	bl	5c9c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    741a:	b.n	71b4 <MTPD::loop()+0x274>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
    741c:	movs	r7, #0
    741e:	strb	r1, [r5, #8]
    7420:	mov	r0, r5
    7422:	mov	r1, r9
    7424:	str	r7, [r5, #12]
    7426:	bl	6524 <MTPD::GetStorageInfo(unsigned long)>
    742a:	ldr	r3, [r5, #12]
    742c:	strb	r7, [r5, #8]
    742e:	adds	r3, #12
    7430:	movs	r2, #2
    7432:	strh.w	r2, [sp, #24]
    7436:	str	r3, [sp, #20]
    7438:	ldrh	r3, [r4, #14]
    743a:	strh.w	r3, [sp, #26]
    743e:	ldr	r3, [r4, #16]
    7440:	str	r3, [sp, #28]
    7442:	add	r1, sp, #20
    7444:	mov	r0, r5
    7446:	mov	r2, fp
    7448:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    744c:	mov	r1, r9
    744e:	mov	r0, r5
    7450:	bl	6524 <MTPD::GetStorageInfo(unsigned long)>
    7454:	b.n	714e <MTPD::loop()+0x20e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    7456:	cmp.w	sl, #0
    745a:	bne.w	7348 <MTPD::loop()+0x408>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(p1)) {
    745e:	ldr	r0, [r5, #0]
    7460:	ldr	r3, [r0, #0]
    7462:	mov	r1, r7
    7464:	ldr	r3, [r3, #60]	; 0x3c
    7466:	blx	r3
    7468:	movw	r3, #8210	; 0x2012
    746c:	movw	r2, #8193	; 0x2001
    7470:	cmp	r0, #0
    7472:	ite	eq
    7474:	moveq	r0, r3
    7476:	movne	r0, r2
    7478:	b.n	6fa2 <MTPD::loop()+0x62>
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    747a:	ldr	r0, [r5, #0]
    747c:	ldr	r1, [r0, #0]
    747e:	add.w	r2, sl, #4294967295
    7482:	ldr	r5, [r1, #76]	; 0x4c
    7484:	mov	r1, r7
    7486:	blx	r5
    7488:	movw	r3, #8197	; 0x2005
    748c:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
    7490:	strh.w	fp, [r4]
              break;
    7494:	mov	r8, fp
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    7496:	cmp	r0, #0
    7498:	ite	eq
    749a:	moveq	r0, r3
    749c:	movne	r0, r2
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
              break;
    749e:	b.n	6fa2 <MTPD::loop()+0x62>
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
      storage_->ResetIndex();
    74a0:	ldr	r0, [r5, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    74a2:	ldr	r2, [pc, #204]	; (7570 <MTPD::loop()+0x630>)
      storage_->ResetIndex();
    74a4:	ldr	r3, [r0, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    74a6:	str	r7, [r2, #0]
      storage_->ResetIndex();
    74a8:	ldr	r3, [r3, #68]	; 0x44
    74aa:	blx	r3
    74ac:	movw	r0, #8193	; 0x2001
    74b0:	b.n	6fa2 <MTPD::loop()+0x62>
          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
    74b2:	movs	r7, #0
    74b4:	strb	r1, [r5, #8]
    74b6:	mov	r2, sl
    74b8:	mov	r1, r9
    74ba:	mov	r0, r5
    74bc:	str	r7, [r5, #12]
    74be:	bl	6370 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    74c2:	ldr	r3, [r5, #12]
    74c4:	strb	r7, [r5, #8]
    74c6:	adds	r3, #12
    74c8:	movs	r2, #2
    74ca:	strh.w	r2, [sp, #24]
    74ce:	str	r3, [sp, #20]
    74d0:	ldrh	r3, [r4, #14]
    74d2:	strh.w	r3, [sp, #26]
    74d6:	mov	r2, fp
    74d8:	ldr	r3, [r4, #16]
    74da:	str	r3, [sp, #28]
    74dc:	add	r1, sp, #20
    74de:	mov	r0, r5
    74e0:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    74e4:	mov	r2, sl
    74e6:	mov	r1, r9
    74e8:	mov	r0, r5
    74ea:	bl	6370 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    74ee:	b.n	714e <MTPD::loop()+0x20e>
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
              else {p1 = return_code; return_code=0x2001;}
    74f0:	mov	r9, r0
    74f2:	movw	r0, #8193	; 0x2001
    74f6:	b.n	6fa2 <MTPD::loop()+0x62>
              break;
            case 0x1006:  // GetNumObjects
              if (p2) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(p1, p3);
    74f8:	mov	r2, r3
    74fa:	mov	r1, r7
    74fc:	mov	r0, r5
    74fe:	bl	5b50 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    7502:	mov	r9, r0
    7504:	movw	r0, #8193	; 0x2001
    7508:	b.n	6fa2 <MTPD::loop()+0x62>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    750a:	mov	r0, r5
    750c:	ldr	r1, [pc, #100]	; (7574 <MTPD::loop()+0x634>)
    750e:	bl	5bf4 <MTPD::writestring(char const*)>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7512:	ldr	r3, [r5, #12]
    7514:	strb.w	sl, [r5, #8]
    7518:	adds	r3, #12
    751a:	movs	r2, #2
    751c:	strh.w	r2, [sp, #24]
    7520:	str	r3, [sp, #20]
    7522:	ldrh	r3, [r4, #14]
    7524:	strh.w	r3, [sp, #26]
    7528:	ldr	r3, [r4, #16]
    752a:	str	r3, [sp, #28]
    752c:	add	r1, sp, #20
    752e:	mov	r0, r5
    7530:	movs	r2, #12
    7532:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    7536:	ldr	r1, [pc, #60]	; (7574 <MTPD::loop()+0x634>)
    7538:	mov	r0, r5
    753a:	bl	5bf4 <MTPD::writestring(char const*)>
    753e:	b.n	71b4 <MTPD::loop()+0x274>
    7540:	mov	r1, r3
    7542:	mov	r0, r5
    7544:	bl	5c9c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7548:	ldr	r3, [r5, #12]
    754a:	movs	r1, #0
    754c:	adds	r3, #12
    754e:	movs	r2, #2
    7550:	strb	r1, [r5, #8]
    7552:	strh.w	r2, [sp, #24]
    7556:	str	r3, [sp, #20]
    7558:	ldrh	r3, [r4, #14]
    755a:	strh.w	r3, [sp, #26]
    755e:	ldr	r3, [r4, #16]
    7560:	str	r3, [sp, #28]
    7562:	movs	r2, #12
    7564:	add	r1, sp, #20
    7566:	mov	r0, r5
    7568:	bl	5b90 <MTPD::write(char const*, int) [clone .part.2]>
    756c:	b.n	7410 <MTPD::loop()+0x4d0>
    756e:	nop
    7570:	.word	0x1fff25f8
    7574:	.word	0x0001939c

00007578 <usb_init_events>:
  extern "C"
  {
    int usb_init_events(void)
    {
        return 1;
    }
    7578:	movs	r0, #1
    757a:	bx	lr

0000757c <usb_mtp_sendEvent>:


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
    757c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7580:	ldr	r5, [pc, #112]	; (75f4 <usb_mtp_sendEvent+0x78>)
      usb_packet_t *tx_packet;
      uint32_t begin = millis();

      while (1) 
      {
        if (!usb_configuration) return -1;
    7582:	ldr	r6, [pc, #116]	; (75f8 <usb_mtp_sendEvent+0x7c>)
    7584:	ldr	r3, [r5, #0]
        return 1;
    }


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
    7586:	sub	sp, #8
    7588:	str	r3, [sp, #0]
	return ret;
    758a:	ldr.w	r8, [sp]
      usb_packet_t *tx_packet;
      uint32_t begin = millis();

      while (1) 
      {
        if (!usb_configuration) return -1;
    758e:	ldrb	r3, [r6, #0]
    7590:	cbz	r3, 75e2 <usb_mtp_sendEvent+0x66>
    7592:	mov	r9, r0
    7594:	mov	r4, r1
    7596:	mov	r7, r2
    7598:	b.n	75b0 <usb_mtp_sendEvent+0x34>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    759a:	ldr	r3, [r5, #0]
    759c:	str	r3, [sp, #4]
	return ret;
    759e:	ldr	r3, [sp, #4]
        if (usb_tx_packet_count(MTP_EVENT_ENDPOINT) < len) {
          tx_packet = usb_malloc();
          if (tx_packet) break;
        }
        if (millis() - begin > timeout) return 0;
    75a0:	rsb	r3, r8, r3
    75a4:	cmp	r3, r7
    75a6:	bhi.n	75ec <usb_mtp_sendEvent+0x70>
        yield();
    75a8:	bl	13598 <yield>
      usb_packet_t *tx_packet;
      uint32_t begin = millis();

      while (1) 
      {
        if (!usb_configuration) return -1;
    75ac:	ldrb	r3, [r6, #0]
    75ae:	cbz	r3, 75e2 <usb_mtp_sendEvent+0x66>
        if (usb_tx_packet_count(MTP_EVENT_ENDPOINT) < len) {
    75b0:	movs	r0, #6
    75b2:	bl	128d0 <usb_tx_packet_count>
    75b6:	cmp	r0, r4
    75b8:	bcs.n	759a <usb_mtp_sendEvent+0x1e>
          tx_packet = usb_malloc();
    75ba:	bl	12808 <usb_malloc>
          if (tx_packet) break;
    75be:	mov	sl, r0
    75c0:	cmp	r0, #0
    75c2:	beq.n	759a <usb_mtp_sendEvent+0x1e>
        }
        if (millis() - begin > timeout) return 0;
        yield();
      }
      memcpy(tx_packet->buf, buffer, len);
    75c4:	mov	r1, r9
    75c6:	mov	r2, r4
    75c8:	adds	r0, #8
    75ca:	bl	11bf8 <memcpy>
      tx_packet->len = len;
    75ce:	strh.w	r4, [sl]
      usb_tx(MTP_EVENT_ENDPOINT, tx_packet);
    75d2:	mov	r1, sl
    75d4:	movs	r0, #6
    75d6:	bl	12a04 <usb_tx>
      return len;
    75da:	mov	r0, r4
    }
    75dc:	add	sp, #8
    75de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      usb_packet_t *tx_packet;
      uint32_t begin = millis();

      while (1) 
      {
        if (!usb_configuration) return -1;
    75e2:	mov.w	r0, #4294967295
      }
      memcpy(tx_packet->buf, buffer, len);
      tx_packet->len = len;
      usb_tx(MTP_EVENT_ENDPOINT, tx_packet);
      return len;
    }
    75e6:	add	sp, #8
    75e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (!usb_configuration) return -1;
        if (usb_tx_packet_count(MTP_EVENT_ENDPOINT) < len) {
          tx_packet = usb_malloc();
          if (tx_packet) break;
        }
        if (millis() - begin > timeout) return 0;
    75ec:	movs	r0, #0
      }
      memcpy(tx_packet->buf, buffer, len);
      tx_packet->len = len;
      usb_tx(MTP_EVENT_ENDPOINT, tx_packet);
      return len;
    }
    75ee:	add	sp, #8
    75f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75f4:	.word	0x1fff2b30
    75f8:	.word	0x1fff2c34

000075fc <MTPD::send_Event(unsigned short)>:

  #endif
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    75fc:	push	{r4, r5, lr}
    75fe:	sub	sp, #36	; 0x24
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7600:	ldr	r3, [r0, #16]

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    7602:	strh.w	r1, [sp, #6]
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    7606:	movs	r4, #12
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7608:	str	r3, [sp, #8]
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    760a:	mov	r1, r4
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    event.params[0]=0;
    760c:	movs	r3, #0
  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    760e:	movs	r5, #4
    event.transaction_id=TID;
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7610:	movs	r2, #60	; 0x3c
    7612:	mov	r0, sp
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    7614:	str	r4, [sp, #0]
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    7616:	strh.w	r5, [sp, #4]
    event.transaction_id=TID;
    event.params[0]=0;
    761a:	str	r3, [sp, #12]
    event.params[1]=0;
    761c:	str	r3, [sp, #16]
    event.params[2]=0;
    761e:	str	r3, [sp, #20]
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7620:	bl	757c <usb_mtp_sendEvent>
  }
    7624:	add	sp, #36	; 0x24
    7626:	pop	{r4, r5, pc}

00007628 <MTPD::send_DeviceResetEvent()>:

  int MTPD::send_addObjectEvent(uint32_t p1) {return send_Event(MTP_EVENT_OBJECT_ADDED, p1); }
  int MTPD::send_removeObjectEvent(uint32_t p1) {return send_Event(MTP_EVENT_OBJECT_REMOVED, p1); }
  int MTPD::send_StorageInfoChangedEvent(uint32_t p1) {return send_Event(MTP_EVENT_STORAGE_INFO_CHANGED, p1);}
  int MTPD::send_StorageRemovedEvent(uint32_t p1) {return send_Event(MTP_EVENT_STORE_REMOVED, p1);}
  int MTPD::send_DeviceResetEvent(void) {return send_Event(MTP_EVENT_DEVICE_RESET); } 
    7628:	movw	r1, #16395	; 0x400b
    762c:	b.w	75fc <MTPD::send_Event(unsigned short)>

00007630 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    7630:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7632:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7634:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7636:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7638:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    763a:	beq.n	7644 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    763c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7640:	b.w	13684 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7644:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    7646:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    764a:	bx	r3

0000764c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    764c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7650:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    7652:	ldr	r5, [r4, #12]
    7654:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    7658:	ldr	r5, [pc, #484]	; (7840 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    765a:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    765c:	bne.n	7704 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    765e:	lsls	r7, r3, #31
    7660:	bpl.w	77ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    7664:	cmp	r1, #0
    7666:	beq.w	7830 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    766a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    766c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    766e:	it	ne
    7670:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    7674:	str	r5, [r4, #52]	; 0x34
    7676:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    7678:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    767c:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    7680:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    7684:	cmp.w	ip, #0
    7688:	beq.w	77dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    768c:	cbz	r1, 7698 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    768e:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    7690:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    7694:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7698:	ldr	r5, [r0, #4]
    769a:	ldrb	r6, [r5, #8]
			if (count == 2)
    769c:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    76a0:	add.w	r6, r6, #4294967295
    76a4:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    76a8:	ite	eq
    76aa:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    76ae:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    76b2:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    76b4:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    76b6:	sub.w	ip, ip, #2
    76ba:	b.n	76ce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    76bc:	cbz	r2, 76c2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    76be:	strb	r4, [r2, #0]
    76c0:	adds	r2, #1
						} 
						count_read--;
    76c2:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    76c4:	and.w	r5, r5, #61440	; 0xf000
    76c8:	cmp	r5, r6
    76ca:	bls.n	76fa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    76cc:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    76ce:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    76d0:	tst.w	r5, #240	; 0xf0
    76d4:	beq.n	76c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    76d6:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    76d8:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    76dc:	mov	r7, r2
    76de:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    76e2:	bne.n	76bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    76e4:	cbz	r2, 76ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    76e6:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    76ea:	strb	r4, [r2, #1]
    76ec:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    76ee:	and.w	r5, r5, #61440	; 0xf000
    76f2:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    76f4:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    76f8:	bhi.n	76cc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    76fa:	cmp.w	ip, #0
    76fe:	beq.n	77dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    7700:	ldr	r4, [r0, #0]
    7702:	b.n	768c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    7704:	lsls	r5, r3, #31
    7706:	bpl.n	77a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    7708:	cmp	r1, #0
    770a:	beq.w	7820 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    770e:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    7710:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7712:	it	ne
    7714:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    7718:	str	r5, [r4, #52]	; 0x34
    771a:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    771c:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    7720:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    7724:	cmp.w	lr, #0
    7728:	beq.n	77ae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    772a:	cbz	r1, 7738 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    772c:	ldrb.w	ip, [r1, #1]
    7730:	ldrb	r5, [r1, #0]
    7732:	adds	r1, #2
    7734:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7738:	ldr	r5, [r0, #4]
    773a:	ldrb	r6, [r5, #8]
			if (count == 2)
    773c:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7740:	add.w	r6, r6, #4294967295
    7744:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    7748:	ite	eq
    774a:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    774e:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7752:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    7754:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    7756:	sub.w	lr, lr, #2
    775a:	b.n	776e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    775c:	cbz	r2, 7762 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    775e:	strb	r4, [r2, #0]
    7760:	adds	r2, #1
						} 
						count_read--;
    7762:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7764:	and.w	r5, r5, #61440	; 0xf000
    7768:	cmp	r5, r6
    776a:	bls.n	7798 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    776c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    776e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    7770:	tst.w	r5, #240	; 0xf0
    7774:	beq.n	7764 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    7776:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    777a:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    777c:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    777e:	bne.n	775c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    7780:	cbz	r2, 778c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    7782:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    7786:	asrs	r4, r4, #8
    7788:	strb	r4, [r2, #1]
    778a:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    778c:	and.w	r5, r5, #61440	; 0xf000
    7790:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    7792:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7796:	bhi.n	776c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    7798:	cmp.w	lr, #0
    779c:	beq.n	77ae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    779e:	ldr	r4, [r0, #0]
    77a0:	b.n	772a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    77a2:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    77a4:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    77a8:	cmp.w	lr, #0
    77ac:	bne.n	772a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    77ae:	cbz	r3, 77f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    77b0:	ldr	r4, [r0, #0]
			sr = port().SR;
    77b2:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    77b4:	tst.w	r1, #240	; 0xf0
    77b8:	beq.n	77b2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    77ba:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    77bc:	lsls	r4, r3, #31
    77be:	bpl.n	77fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    77c0:	cbz	r2, 77c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    77c2:	strb	r1, [r2, #0]
    77c4:	adds	r2, #1
					count_read--;
    77c6:	subs	r3, #1
    77c8:	b.n	77ae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    77ca:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    77ce:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    77d0:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    77d4:	cmp.w	ip, #0
    77d8:	bne.w	768c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    77dc:	cbz	r3, 77f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    77de:	ldr	r4, [r0, #0]
			sr = port().SR;
    77e0:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    77e2:	tst.w	r1, #240	; 0xf0
    77e6:	beq.n	77e0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    77e8:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    77ea:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    77ec:	bpl.n	780e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    77ee:	cbz	r2, 77f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    77f0:	strb	r1, [r2, #0]
    77f2:	adds	r2, #1
					count_read--;
    77f4:	subs	r3, #1
    77f6:	b.n	77dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    77f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    77fc:	cbz	r2, 780a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    77fe:	mov	r4, r2
						*p_read++ = w >> 8;
    7800:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    7802:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    7806:	strb	r5, [r2, #1]
    7808:	mov	r2, r4
					}
					count_read -= 2;
    780a:	subs	r3, #2
    780c:	b.n	77ae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    780e:	cbz	r2, 781c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    7810:	mov	r4, r2
    7812:	asrs	r5, r1, #8
    7814:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    7818:	strb	r1, [r2, #1]
    781a:	mov	r2, r4
					}
					count_read -= 2;
    781c:	subs	r3, #2
    781e:	b.n	77dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7820:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    7824:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7826:	it	ne
    7828:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    782c:	str	r5, [r4, #52]	; 0x34
    782e:	b.n	771c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7830:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    7834:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7836:	it	ne
    7838:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    783c:	str	r5, [r4, #52]	; 0x34
    783e:	b.n	7678 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    7840:	.word	0x801f0400

00007844 <_spi_dma_rxISR1()>:
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7844:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7846:	ldr	r3, [pc, #280]	; (7960 <_spi_dma_rxISR1()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7848:	ldr	r2, [pc, #280]	; (7964 <_spi_dma_rxISR1()+0x120>)
    784a:	ldr	r0, [r3, #56]	; 0x38
    784c:	ldr	r4, [r3, #52]	; 0x34
    784e:	ldrb	r1, [r0, #4]
    7850:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7852:	ldr	r1, [pc, #276]	; (7968 <_spi_dma_rxISR1()+0x124>)
    7854:	ldrb	r2, [r4, #4]
    7856:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    7858:	ldr	r2, [r3, #48]	; 0x30
    785a:	ldrb	r0, [r0, #4]
    785c:	strb	r0, [r1, #0]
    785e:	cmp	r2, #0
    7860:	beq.n	78f0 <_spi_dma_rxISR1()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    7862:	ldr	r1, [r3, #4]
    7864:	ldr	r1, [r1, #12]
    7866:	cmp	r2, r1
    7868:	bhi.n	78e8 <_spi_dma_rxISR1()+0xa4>
    786a:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    786c:	ldrh	r4, [r1, #30]
    786e:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    7870:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7874:	bmi.n	7942 <_spi_dma_rxISR1()+0xfe>
		tcd->BITER = len & 0x7fff;
    7876:	ubfx	r0, r0, #0, #15
    787a:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    787c:	ldrh	r0, [r1, #30]
    787e:	uxth	r0, r0
    7880:	strh	r0, [r1, #22]
    7882:	ldr	r1, [r3, #56]	; 0x38
    7884:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7886:	ldrh	r0, [r1, #30]
    7888:	lsls	r0, r0, #16
    788a:	bmi.n	7932 <_spi_dma_rxISR1()+0xee>
		tcd->BITER = len & 0x7fff;
    788c:	ubfx	r0, r2, #0, #15
    7890:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7892:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    7894:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7896:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7898:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    789c:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    789e:	it	ne
    78a0:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    78a2:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    78a4:	ldr	r1, [r3, #52]	; 0x34
    78a6:	ldr	r0, [pc, #184]	; (7960 <_spi_dma_rxISR1()+0x11c>)
    78a8:	ldr	r1, [r1, #0]
    78aa:	ldr	r5, [r1, #0]
    78ac:	add.w	r4, r0, #44	; 0x2c
    78b0:	cmp	r5, r4
    78b2:	beq.n	7922 <_spi_dma_rxISR1()+0xde>
    78b4:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    78b6:	ldr	r4, [r0, #12]
    78b8:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    78bc:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    78be:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    78c0:	itete	ne
    78c2:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    78c4:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    78c6:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    78c8:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    78ca:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    78ce:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    78d0:	str	r4, [r0, #52]	; 0x34
    78d2:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    78d4:	ldr	r3, [pc, #148]	; (796c <_spi_dma_rxISR1()+0x128>)
    78d6:	ldrb	r1, [r1, #4]
    78d8:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    78da:	ldr	r1, [pc, #132]	; (7960 <_spi_dma_rxISR1()+0x11c>)
		if (should_reenable_tx)
    78dc:	cbz	r2, 78e4 <_spi_dma_rxISR1()+0xa0>
    78de:	ldr	r2, [r1, #52]	; 0x34
    78e0:	ldrb	r2, [r2, #4]
    78e2:	strb	r2, [r3, #0]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    78e4:	pop	{r4, r5, r6, r7}
    78e6:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    78e8:	subs	r2, r2, r1
    78ea:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    78ec:	movs	r2, #1
    78ee:	b.n	78a4 <_spi_dma_rxISR1()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    78f0:	ldr	r0, [r3, #60]	; 0x3c
    78f2:	ldr	r1, [r3, #0]
    78f4:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    78f6:	ldr	r4, [pc, #120]	; (7970 <_spi_dma_rxISR1()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    78f8:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    78fa:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    78fc:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    78fe:	ldr	r5, [r5, #0]
    7900:	ldr	r6, [pc, #112]	; (7974 <_spi_dma_rxISR1()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7902:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7906:	movs	r7, #3
    7908:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    790a:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    790c:	strb.w	r7, [r3, #45]	; 0x2d
    7910:	bne.n	7952 <_spi_dma_rxISR1()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7912:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7914:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7916:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7918:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    791a:	beq.n	795a <_spi_dma_rxISR1()+0x116>
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    791c:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    791e:	b.w	13684 <EventResponder::triggerEventNotImmediate()>
    7922:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7924:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7928:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    792a:	orr.w	r0, r0, #2147483648	; 0x80000000
    792e:	str	r0, [r1, #52]	; 0x34
    7930:	b.n	78d2 <_spi_dma_rxISR1()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7932:	ldrh	r4, [r1, #30]
    7934:	ubfx	r0, r2, #0, #9
    7938:	and.w	r4, r4, #65024	; 0xfe00
    793c:	orrs	r0, r4
    793e:	strh	r0, [r1, #30]
    7940:	b.n	7892 <_spi_dma_rxISR1()+0x4e>
    7942:	ldrh	r4, [r1, #30]
    7944:	ubfx	r0, r0, #0, #9
    7948:	and.w	r4, r4, #65024	; 0xfe00
    794c:	orrs	r0, r4
    794e:	strh	r0, [r1, #30]
    7950:	b.n	787c <_spi_dma_rxISR1()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7952:	mov	r3, r5
    7954:	mov	r1, r2
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7956:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7958:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    795a:	ldr	r3, [r0, #8]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    795c:	pop	{r4, r5, r6, r7}
    795e:	bx	r3
    7960:	.word	0x1fff09e0
    7964:	.word	0x4000801f
    7968:	.word	0x4000801c
    796c:	.word	0x4000801b
    7970:	.word	0xff0f0000
    7974:	.word	0x00007631

00007978 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7978:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    797a:	ldr	r3, [pc, #280]	; (7a94 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    797c:	ldr	r2, [pc, #280]	; (7a98 <_spi_dma_rxISR0()+0x120>)
    797e:	ldr	r0, [r3, #56]	; 0x38
    7980:	ldr	r4, [r3, #52]	; 0x34
    7982:	ldrb	r1, [r0, #4]
    7984:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7986:	ldr	r1, [pc, #276]	; (7a9c <_spi_dma_rxISR0()+0x124>)
    7988:	ldrb	r2, [r4, #4]
    798a:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    798c:	ldr	r2, [r3, #48]	; 0x30
    798e:	ldrb	r0, [r0, #4]
    7990:	strb	r0, [r1, #0]
    7992:	cmp	r2, #0
    7994:	beq.n	7a24 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    7996:	ldr	r1, [r3, #4]
    7998:	ldr	r1, [r1, #12]
    799a:	cmp	r2, r1
    799c:	bhi.n	7a1c <_spi_dma_rxISR0()+0xa4>
    799e:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    79a0:	ldrh	r4, [r1, #30]
    79a2:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    79a4:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    79a8:	bmi.n	7a76 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    79aa:	ubfx	r0, r0, #0, #15
    79ae:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79b0:	ldrh	r0, [r1, #30]
    79b2:	uxth	r0, r0
    79b4:	strh	r0, [r1, #22]
    79b6:	ldr	r1, [r3, #56]	; 0x38
    79b8:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    79ba:	ldrh	r0, [r1, #30]
    79bc:	lsls	r0, r0, #16
    79be:	bmi.n	7a66 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    79c0:	ubfx	r0, r2, #0, #15
    79c4:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79c6:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    79c8:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79ca:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    79cc:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79d0:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    79d2:	it	ne
    79d4:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    79d6:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    79d8:	ldr	r1, [r3, #52]	; 0x34
    79da:	ldr	r0, [pc, #184]	; (7a94 <_spi_dma_rxISR0()+0x11c>)
    79dc:	ldr	r1, [r1, #0]
    79de:	ldr	r5, [r1, #0]
    79e0:	add.w	r4, r0, #44	; 0x2c
    79e4:	cmp	r5, r4
    79e6:	beq.n	7a56 <_spi_dma_rxISR0()+0xde>
    79e8:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    79ea:	ldr	r4, [r0, #12]
    79ec:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    79f0:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    79f2:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    79f4:	itete	ne
    79f6:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    79f8:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    79fa:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    79fc:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    79fe:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7a02:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a04:	str	r4, [r0, #52]	; 0x34
    7a06:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    7a08:	ldr	r3, [pc, #148]	; (7aa0 <_spi_dma_rxISR0()+0x128>)
    7a0a:	ldrb	r1, [r1, #4]
    7a0c:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    7a0e:	ldr	r1, [pc, #132]	; (7a94 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    7a10:	cbz	r2, 7a18 <_spi_dma_rxISR0()+0xa0>
    7a12:	ldr	r2, [r1, #52]	; 0x34
    7a14:	ldrb	r2, [r2, #4]
    7a16:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a18:	pop	{r4, r5, r6, r7}
    7a1a:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    7a1c:	subs	r2, r2, r1
    7a1e:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7a20:	movs	r2, #1
    7a22:	b.n	79d8 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a24:	ldr	r0, [r3, #60]	; 0x3c
    7a26:	ldr	r1, [r3, #0]
    7a28:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7a2a:	ldr	r4, [pc, #120]	; (7aa4 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    7a2c:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7a2e:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a30:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a32:	ldr	r5, [r5, #0]
    7a34:	ldr	r6, [pc, #112]	; (7aa8 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a36:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a3a:	movs	r7, #3
    7a3c:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a3e:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a40:	strb.w	r7, [r3, #45]	; 0x2d
    7a44:	bne.n	7a86 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7a46:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7a48:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7a4a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7a4c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7a4e:	beq.n	7a8e <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a50:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7a52:	b.w	13684 <EventResponder::triggerEventNotImmediate()>
    7a56:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a58:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7a5c:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a5e:	orr.w	r0, r0, #2147483648	; 0x80000000
    7a62:	str	r0, [r1, #52]	; 0x34
    7a64:	b.n	7a06 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7a66:	ldrh	r4, [r1, #30]
    7a68:	ubfx	r0, r2, #0, #9
    7a6c:	and.w	r4, r4, #65024	; 0xfe00
    7a70:	orrs	r0, r4
    7a72:	strh	r0, [r1, #30]
    7a74:	b.n	79c6 <_spi_dma_rxISR0()+0x4e>
    7a76:	ldrh	r4, [r1, #30]
    7a78:	ubfx	r0, r0, #0, #9
    7a7c:	and.w	r4, r4, #65024	; 0xfe00
    7a80:	orrs	r0, r4
    7a82:	strh	r0, [r1, #30]
    7a84:	b.n	79b0 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a86:	mov	r3, r5
    7a88:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a8a:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a8c:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7a8e:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7a90:	pop	{r4, r5, r6, r7}
    7a92:	bx	r3
    7a94:	.word	0x1fff09a0
    7a98:	.word	0x4000801f
    7a9c:	.word	0x4000801c
    7aa0:	.word	0x4000801b
    7aa4:	.word	0xff0f0000
    7aa8:	.word	0x00007631

00007aac <SPIClass::begin()>:
    7aac:	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    7ab0:	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7ab2:	ldr	r4, [r3, #0]
    7ab4:	ldr	r1, [r3, #4]
    7ab6:	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7ab8:	ldr	r7, [pc, #88]	; (7b14 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7aba:	ldr	r6, [pc, #92]	; (7b18 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7abc:	orrs	r1, r5
    7abe:	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7ac0:	ldr	r5, [pc, #88]	; (7b1c <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    7ac2:	ldr	r1, [pc, #92]	; (7b20 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7ac4:	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7ac6:	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7ac8:	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    7aca:	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7acc:	ldrb	r1, [r0, #9]
    7ace:	ldr	r2, [pc, #84]	; (7b24 <SPIClass::begin()+0x78>)
    7ad0:	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    7ad2:	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7ad4:	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    7ad8:	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7adc:	add.w	r1, r2, r4, lsl #3
    7ae0:	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    7ae2:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7ae4:	ldrb	r1, [r0, #8]
    7ae6:	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    7ae8:	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7aec:	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    7aee:	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7af0:	add.w	r1, r2, r4, lsl #3
    7af4:	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    7af6:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7af8:	ldrb	r1, [r0, #10]
    7afa:	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    7afc:	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7b00:	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    7b04:	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7b06:	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    7b0a:	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7b0c:	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    7b0e:	str	r1, [r3, #0]
}
    7b10:	bx	lr
    7b12:	nop
    7b14:	.word	0x001f4001
    7b18:	.word	0x38001001
    7b1c:	.word	0x78001001
    7b20:	.word	0x801f0000
    7b24:	.word	0x00019890

00007b28 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    7b28:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7b2a:	ldr	r3, [pc, #148]	; (7bc0 <SPIClass::setMOSI(unsigned char)+0x98>)
    7b2c:	ldr	r5, [r0, #4]
    7b2e:	cmp	r3, r5
    7b30:	beq.n	7b56 <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    7b32:	ldrb	r3, [r0, #9]
    7b34:	add	r3, r5
    7b36:	ldrb.w	r6, [r3, #44]	; 0x2c
    7b3a:	cmp	r1, r6
    7b3c:	beq.n	7b52 <SPIClass::setMOSI(unsigned char)+0x2a>
    7b3e:	add.w	r2, r5, #43	; 0x2b
    7b42:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    7b44:	ldrb.w	r4, [r2, #1]!
    7b48:	cmp	r4, r1
    7b4a:	beq.n	7b82 <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    7b4c:	adds	r3, #1
    7b4e:	cmp	r3, #4
    7b50:	bne.n	7b44 <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    7b52:	pop	{r4, r5, r6, r7}
    7b54:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    7b56:	cmp	r1, #11
    7b58:	beq.n	7bb4 <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    7b5a:	cmp	r1, #7
    7b5c:	beq.n	7b72 <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    7b5e:	cmp	r1, #28
    7b60:	bne.n	7b32 <SPIClass::setMOSI(unsigned char)+0xa>
    7b62:	ldr	r2, [pc, #96]	; (7bc4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7b64:	ldrb	r3, [r2, #0]
    7b66:	bic.w	r3, r3, #3
    7b6a:	orr.w	r3, r3, #2
    7b6e:	strb	r3, [r2, #0]
    7b70:	b.n	7b32 <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    7b72:	ldr	r2, [pc, #80]	; (7bc4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7b74:	ldrb	r3, [r2, #0]
    7b76:	bic.w	r3, r3, #3
    7b7a:	orr.w	r3, r3, #1
    7b7e:	strb	r3, [r2, #0]
    7b80:	b.n	7b32 <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7b82:	ldmia.w	r5, {r1, r2}
    7b86:	ldr	r1, [r1, #0]
    7b88:	tst	r1, r2
    7b8a:	beq.n	7bae <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7b8c:	ldr	r2, [pc, #56]	; (7bc8 <SPIClass::setMOSI(unsigned char)+0xa0>)
    7b8e:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    7b92:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7b94:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7b96:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    7b98:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7b9a:	ldrb.w	r1, [r1, #44]	; 0x2c
    7b9e:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    7ba2:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7ba6:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    7ba8:	ldr.w	r2, [r5, r1, lsl #2]
    7bac:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    7bae:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    7bb0:	pop	{r4, r5, r6, r7}
    7bb2:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    7bb4:	ldr	r2, [pc, #12]	; (7bc4 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7bb6:	ldrb	r3, [r2, #0]
    7bb8:	bic.w	r3, r3, #3
    7bbc:	strb	r3, [r2, #0]
    7bbe:	b.n	7b32 <SPIClass::setMOSI(unsigned char)+0xa>
    7bc0:	.word	0x000194b8
    7bc4:	.word	0x1fff2c51
    7bc8:	.word	0x00019890

00007bcc <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    7bcc:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7bce:	ldr	r3, [pc, #144]	; (7c60 <SPIClass::setMISO(unsigned char)+0x94>)
    7bd0:	ldr	r5, [r0, #4]
    7bd2:	cmp	r3, r5
    7bd4:	beq.n	7bf8 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    7bd6:	ldrb	r3, [r0, #8]
    7bd8:	add	r3, r5
    7bda:	ldrb	r6, [r3, #24]
    7bdc:	cmp	r1, r6
    7bde:	beq.n	7bf4 <SPIClass::setMISO(unsigned char)+0x28>
    7be0:	add.w	r2, r5, #23
    7be4:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    7be6:	ldrb.w	r4, [r2, #1]!
    7bea:	cmp	r4, r1
    7bec:	beq.n	7c24 <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    7bee:	adds	r3, #1
    7bf0:	cmp	r3, #4
    7bf2:	bne.n	7be6 <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    7bf4:	pop	{r4, r5, r6, r7}
    7bf6:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    7bf8:	cmp	r1, #12
    7bfa:	beq.n	7c52 <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    7bfc:	cmp	r1, #8
    7bfe:	beq.n	7c14 <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    7c00:	cmp	r1, #39	; 0x27
    7c02:	bne.n	7bd6 <SPIClass::setMISO(unsigned char)+0xa>
    7c04:	ldr	r2, [pc, #92]	; (7c64 <SPIClass::setMISO(unsigned char)+0x98>)
    7c06:	ldrb	r3, [r2, #0]
    7c08:	bic.w	r3, r3, #12
    7c0c:	orr.w	r3, r3, #8
    7c10:	strb	r3, [r2, #0]
    7c12:	b.n	7bd6 <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    7c14:	ldr	r2, [pc, #76]	; (7c64 <SPIClass::setMISO(unsigned char)+0x98>)
    7c16:	ldrb	r3, [r2, #0]
    7c18:	bic.w	r3, r3, #12
    7c1c:	orr.w	r3, r3, #4
    7c20:	strb	r3, [r2, #0]
    7c22:	b.n	7bd6 <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7c24:	ldmia.w	r5, {r1, r2}
    7c28:	ldr	r1, [r1, #0]
    7c2a:	tst	r1, r2
    7c2c:	beq.n	7c4c <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7c2e:	ldr	r2, [pc, #56]	; (7c68 <SPIClass::setMISO(unsigned char)+0x9c>)
    7c30:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7c34:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7c36:	ldr	r4, [r6, #4]
					*reg = 0;
    7c38:	movs	r7, #0
    7c3a:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    7c3c:	ldrb	r1, [r1, #24]
    7c3e:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    7c42:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7c46:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    7c48:	ldr	r1, [r5, #28]
    7c4a:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    7c4c:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    7c4e:	pop	{r4, r5, r6, r7}
    7c50:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    7c52:	ldr	r2, [pc, #16]	; (7c64 <SPIClass::setMISO(unsigned char)+0x98>)
    7c54:	ldrb	r3, [r2, #0]
    7c56:	bic.w	r3, r3, #12
    7c5a:	strb	r3, [r2, #0]
    7c5c:	b.n	7bd6 <SPIClass::setMISO(unsigned char)+0xa>
    7c5e:	nop
    7c60:	.word	0x000194b8
    7c64:	.word	0x1fff2c51
    7c68:	.word	0x00019890

00007c6c <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7c6c:	ldr	r2, [pc, #160]	; (7d10 <SPIClass::setSCK(unsigned char)+0xa4>)
    7c6e:	ldr	r3, [r0, #4]
    7c70:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    7c72:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7c74:	beq.n	7ca2 <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    7c76:	ldrb	r2, [r0, #10]
    7c78:	add	r2, r3
    7c7a:	ldrb.w	r2, [r2, #64]	; 0x40
    7c7e:	cmp	r1, r2
    7c80:	beq.n	7c9e <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7c82:	ldrb.w	r4, [r3, #64]	; 0x40
    7c86:	cmp	r4, r1
    7c88:	beq.n	7d0a <SPIClass::setSCK(unsigned char)+0x9e>
    7c8a:	ldrb.w	r4, [r3, #65]	; 0x41
    7c8e:	cmp	r4, r1
    7c90:	beq.n	7cce <SPIClass::setSCK(unsigned char)+0x62>
    7c92:	ldrb.w	r4, [r3, #66]	; 0x42
    7c96:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7c98:	it	eq
    7c9a:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    7c9c:	beq.n	7cd0 <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    7c9e:	pop	{r4, r5, r6}
    7ca0:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    7ca2:	cmp	r1, #13
    7ca4:	beq.n	7cfe <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    7ca6:	cmp	r1, #14
    7ca8:	beq.n	7cbe <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    7caa:	cmp	r1, #27
    7cac:	bne.n	7c76 <SPIClass::setSCK(unsigned char)+0xa>
    7cae:	ldr	r4, [pc, #100]	; (7d14 <SPIClass::setSCK(unsigned char)+0xa8>)
    7cb0:	ldrb	r2, [r4, #0]
    7cb2:	bic.w	r2, r2, #48	; 0x30
    7cb6:	orr.w	r2, r2, #32
    7cba:	strb	r2, [r4, #0]
    7cbc:	b.n	7c76 <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    7cbe:	ldr	r4, [pc, #84]	; (7d14 <SPIClass::setSCK(unsigned char)+0xa8>)
    7cc0:	ldrb	r2, [r4, #0]
    7cc2:	bic.w	r2, r2, #48	; 0x30
    7cc6:	orr.w	r2, r2, #16
    7cca:	strb	r2, [r4, #0]
    7ccc:	b.n	7c76 <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7cce:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7cd0:	ldr	r5, [r3, #0]
    7cd2:	ldr	r4, [r3, #4]
    7cd4:	ldr	r5, [r5, #0]
    7cd6:	tst	r5, r4
    7cd8:	beq.n	7cfa <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7cda:	ldr	r4, [pc, #60]	; (7d18 <SPIClass::setSCK(unsigned char)+0xac>)
    7cdc:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    7ce0:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7ce2:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7ce4:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    7ce6:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    7ce8:	ldrb.w	r2, [r2, #64]	; 0x40
    7cec:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    7cf0:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7cf4:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    7cf6:	ldr	r3, [r3, #68]	; 0x44
    7cf8:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    7cfa:	strb	r1, [r0, #10]
				return;
    7cfc:	b.n	7c9e <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    7cfe:	ldr	r4, [pc, #20]	; (7d14 <SPIClass::setSCK(unsigned char)+0xa8>)
    7d00:	ldrb	r2, [r4, #0]
    7d02:	bic.w	r2, r2, #48	; 0x30
    7d06:	strb	r2, [r4, #0]
    7d08:	b.n	7c76 <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7d0a:	movs	r1, #0
    7d0c:	b.n	7cd0 <SPIClass::setSCK(unsigned char)+0x64>
    7d0e:	nop
    7d10:	.word	0x000194b8
    7d14:	.word	0x1fff2c51
    7d18:	.word	0x00019890

00007d1c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    7d1c:	cbz	r3, 7d22 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7d1e:	b.w	764c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    7d22:	bx	lr

00007d24 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7d24:	ldr	r2, [pc, #400]	; (7eb8 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7d26:	ldr	r3, [pc, #404]	; (7ebc <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    7d28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d2c:	ldr	r6, [pc, #400]	; (7ec0 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d2e:	ldr.w	sl, [pc, #416]	; 7ed0 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d32:	ldr	r4, [pc, #400]	; (7ec4 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7d34:	ldr.w	r9, [pc, #400]	; 7ec8 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7d38:	umull	r5, r2, r2, r0
    7d3c:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d40:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7d44:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d48:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d4c:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7d50:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d52:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7d54:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d58:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d5c:	rsb	r6, fp, r7
    7d60:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7d64:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d66:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d68:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d6a:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7d6e:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d72:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7d76:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d7a:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7d7c:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d80:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7d84:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d88:	adds	r6, #1
    7d8a:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7d8c:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7d8e:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7d90:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7d92:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    7d94:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7d96:	movw	fp, #365	; 0x16d
    7d9a:	mov.w	r8, #100	; 0x64
    7d9e:	mov.w	sl, #400	; 0x190
    7da2:	b.n	7dc2 <breakTime(long, tmElements_t&)+0x9e>
    7da4:	rsb	r5, r6, r5, asr #7
    7da8:	mls	r5, sl, r5, r3
    7dac:	cbnz	r0, 7e0c <breakTime(long, tmElements_t&)+0xe8>
    7dae:	cmp	r5, #0
    7db0:	ite	ne
    7db2:	movne	r0, fp
    7db4:	moveq.w	r0, #366	; 0x16e
    7db8:	add	r2, r0
    7dba:	cmp	ip, r2
    7dbc:	add.w	r4, r4, #1
    7dc0:	bcc.n	7dea <breakTime(long, tmElements_t&)+0xc6>
    7dc2:	uxtb	r7, r4
    7dc4:	addw	r3, r7, #1970	; 0x7b2
    7dc8:	smull	r0, r5, r9, r3
    7dcc:	asrs	r6, r3, #31
    7dce:	rsb	r0, r6, r5, asr #5
    7dd2:	ands.w	lr, r3, #3
    7dd6:	mls	r0, r8, r0, r3
    7dda:	beq.n	7da4 <breakTime(long, tmElements_t&)+0x80>
    7ddc:	movw	r0, #365	; 0x16d
    7de0:	add	r2, r0
    7de2:	cmp	ip, r2
    7de4:	add.w	r4, r4, #1
    7de8:	bcs.n	7dc2 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    7dea:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7dec:	cmp.w	lr, #0
    7df0:	bne.n	7e12 <breakTime(long, tmElements_t&)+0xee>
    7df2:	ldr	r0, [pc, #212]	; (7ec8 <breakTime(long, tmElements_t&)+0x1a4>)
    7df4:	asrs	r6, r3, #31
    7df6:	smull	r4, r0, r0, r3
    7dfa:	rsb	r4, r6, r0, asr #5
    7dfe:	movs	r5, #100	; 0x64
    7e00:	mls	r4, r5, r4, r3
    7e04:	cbz	r4, 7e76 <breakTime(long, tmElements_t&)+0x152>
    7e06:	mov.w	r4, #366	; 0x16e
    7e0a:	b.n	7e18 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7e0c:	mov.w	r0, #366	; 0x16e
    7e10:	b.n	7db8 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7e12:	movw	r4, #365	; 0x16d
    7e16:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7e18:	ldr	r0, [pc, #172]	; (7ec8 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    7e1a:	ldr	r5, [pc, #176]	; (7ecc <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7e1c:	smull	r7, r0, r0, r3
    7e20:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7e24:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7e26:	rsb	r6, r6, r0, asr #7
    7e2a:	movs	r4, #100	; 0x64
    7e2c:	mov.w	r0, #400	; 0x190
    7e30:	mls	r6, r0, r6, r3
    7e34:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7e38:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7e3c:	movs	r0, #1
    7e3e:	movs	r3, #0
    7e40:	b.n	7e48 <breakTime(long, tmElements_t&)+0x124>
    7e42:	adds	r0, #1
    7e44:	uxtb	r0, r0
    7e46:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    7e48:	cmp	r3, #1
    7e4a:	uxtb	r7, r3
    7e4c:	beq.n	7e90 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7e4e:	ldrb	r4, [r3, r5]
    7e50:	cmp	r4, r2
    7e52:	bhi.n	7e68 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7e54:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    7e56:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7e5a:	bne.n	7e42 <breakTime(long, tmElements_t&)+0x11e>
    7e5c:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7e5e:	adds	r2, #1
    7e60:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7e62:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e68:	adds	r7, #1
    7e6a:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7e6c:	adds	r2, #1
    7e6e:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7e70:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7e72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7e76:	mov.w	r4, #400	; 0x190
    7e7a:	rsb	r0, r6, r0, asr #7
    7e7e:	mls	r0, r4, r0, r3
    7e82:	cmp	r0, #0
    7e84:	movw	r4, #365	; 0x16d
    7e88:	it	eq
    7e8a:	moveq.w	r4, #366	; 0x16e
    7e8e:	b.n	7e18 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7e90:	cmp.w	lr, #0
    7e94:	bne.n	7eac <breakTime(long, tmElements_t&)+0x188>
    7e96:	cmp.w	r8, #0
    7e9a:	bne.n	7eb4 <breakTime(long, tmElements_t&)+0x190>
    7e9c:	cmp	r6, #0
    7e9e:	ite	ne
    7ea0:	movne	r4, #28
    7ea2:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7ea4:	cmp	r2, r4
    7ea6:	bcc.n	7eb0 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    7ea8:	subs	r2, r2, r4
    7eaa:	b.n	7e42 <breakTime(long, tmElements_t&)+0x11e>
    7eac:	movs	r4, #28
    7eae:	b.n	7ea4 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7eb0:	movs	r7, #2
    7eb2:	b.n	7e5e <breakTime(long, tmElements_t&)+0x13a>
    7eb4:	movs	r4, #29
    7eb6:	b.n	7ea4 <breakTime(long, tmElements_t&)+0x180>
    7eb8:	.word	0xc22e4507
    7ebc:	.word	0x88888889
    7ec0:	.word	0x91a2b3c5
    7ec4:	.word	0xaaaaaaab
    7ec8:	.word	0x51eb851f
    7ecc:	.word	0x000195a8
    7ed0:	.word	0x24924925

00007ed4 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    7ed4:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    7ed6:	ldr	r1, [pc, #12]	; (7ee4 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    7ed8:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    7eda:	bl	7d24 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    7ede:	ldr	r3, [pc, #8]	; (7ee8 <refreshCache(long) [clone .part.0]+0x14>)
    7ee0:	str	r4, [r3, #0]
    7ee2:	pop	{r4, pc}
    7ee4:	.word	0x1fff2600
    7ee8:	.word	0x1fff25fc

00007eec <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    7eec:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7eee:	ldr	r4, [pc, #128]	; (7f70 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    7ef0:	ldr	r6, [pc, #128]	; (7f74 <now()+0x88>)
    7ef2:	ldr	r3, [r4, #0]
    7ef4:	ldr	r2, [r6, #0]
    7ef6:	ldr	r5, [pc, #128]	; (7f78 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    7ef8:	sub	sp, #12
    7efa:	ldr	r0, [r5, #0]
    7efc:	str	r3, [sp, #0]
	return ret;
    7efe:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    7f00:	subs	r3, r3, r2
    7f02:	cmp.w	r3, #1000	; 0x3e8
    7f06:	bcc.n	7f28 <now()+0x3c>
    7f08:	adds	r0, #1
    7f0a:	b.n	7f0e <now()+0x22>
    7f0c:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7f0e:	ldr	r3, [r4, #0]
    7f10:	str	r3, [sp, #0]
	return ret;
    7f12:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    7f14:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    7f18:	subs	r3, r3, r2
    7f1a:	cmp.w	r3, #1000	; 0x3e8
    7f1e:	add.w	r1, r0, #1
    7f22:	bcs.n	7f0c <now()+0x20>
    7f24:	str	r0, [r5, #0]
    7f26:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    7f28:	ldr	r7, [pc, #80]	; (7f7c <now()+0x90>)
    7f2a:	ldr	r3, [r7, #0]
    7f2c:	cmp	r0, r3
    7f2e:	bcc.n	7f50 <now()+0x64>
    if (getTimePtr != 0) {
    7f30:	ldr	r3, [pc, #76]	; (7f80 <now()+0x94>)
    7f32:	ldr	r3, [r3, #0]
    7f34:	cbz	r3, 7f50 <now()+0x64>
      time_t t = getTimePtr();
    7f36:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7f38:	ldr	r3, [pc, #72]	; (7f84 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    7f3a:	cbnz	r0, 7f54 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7f3c:	ldr	r1, [pc, #72]	; (7f88 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7f3e:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7f40:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7f42:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7f44:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7f46:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7f48:	it	ne
    7f4a:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    7f4c:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    7f4e:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    7f50:	add	sp, #12
    7f52:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7f54:	ldr	r2, [r4, #0]
    7f56:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7f58:	ldr	r3, [r3, #0]
  Status = timeSet;
    7f5a:	ldr	r2, [pc, #44]	; (7f88 <now()+0x9c>)
	return ret;
    7f5c:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    7f5e:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    7f60:	add	r3, r0
  Status = timeSet;
    7f62:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    7f64:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    7f66:	str	r3, [r7, #0]
  Status = timeSet;
    7f68:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    7f6a:	add	sp, #12
    7f6c:	pop	{r4, r5, r6, r7, pc}
    7f6e:	nop
    7f70:	.word	0x1fff2b30
    7f74:	.word	0x1fff2614
    7f78:	.word	0x1fff2608
    7f7c:	.word	0x1fff2618
    7f80:	.word	0x1fff2610
    7f84:	.word	0x1fff0a20
    7f88:	.word	0x1fff260c

00007f8c <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    7f8c:	push	{r3, lr}
  return hour(now()); 
    7f8e:	bl	7eec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7f92:	ldr	r3, [pc, #16]	; (7fa4 <hour()+0x18>)
    7f94:	ldr	r3, [r3, #0]
    7f96:	cmp	r0, r3
    7f98:	beq.n	7f9e <hour()+0x12>
    7f9a:	bl	7ed4 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    7f9e:	ldr	r3, [pc, #8]	; (7fa8 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    7fa0:	ldrb	r0, [r3, #2]
    7fa2:	pop	{r3, pc}
    7fa4:	.word	0x1fff25fc
    7fa8:	.word	0x1fff2600

00007fac <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    7fac:	push	{r3, lr}
  return minute(now()); 
    7fae:	bl	7eec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7fb2:	ldr	r3, [pc, #16]	; (7fc4 <minute()+0x18>)
    7fb4:	ldr	r3, [r3, #0]
    7fb6:	cmp	r0, r3
    7fb8:	beq.n	7fbe <minute()+0x12>
    7fba:	bl	7ed4 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    7fbe:	ldr	r3, [pc, #8]	; (7fc8 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    7fc0:	ldrb	r0, [r3, #1]
    7fc2:	pop	{r3, pc}
    7fc4:	.word	0x1fff25fc
    7fc8:	.word	0x1fff2600

00007fcc <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    7fcc:	push	{r3, lr}
  return second(now()); 
    7fce:	bl	7eec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7fd2:	ldr	r3, [pc, #16]	; (7fe4 <second()+0x18>)
    7fd4:	ldr	r3, [r3, #0]
    7fd6:	cmp	r0, r3
    7fd8:	beq.n	7fde <second()+0x12>
    7fda:	bl	7ed4 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    7fde:	ldr	r3, [pc, #8]	; (7fe8 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    7fe0:	ldrb	r0, [r3, #0]
    7fe2:	pop	{r3, pc}
    7fe4:	.word	0x1fff25fc
    7fe8:	.word	0x1fff2600

00007fec <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    7fec:	push	{r3, lr}
  return(day(now())); 
    7fee:	bl	7eec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    7ff2:	ldr	r3, [pc, #16]	; (8004 <day()+0x18>)
    7ff4:	ldr	r3, [r3, #0]
    7ff6:	cmp	r0, r3
    7ff8:	beq.n	7ffe <day()+0x12>
    7ffa:	bl	7ed4 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    7ffe:	ldr	r3, [pc, #8]	; (8008 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    8000:	ldrb	r0, [r3, #4]
    8002:	pop	{r3, pc}
    8004:	.word	0x1fff25fc
    8008:	.word	0x1fff2600

0000800c <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    800c:	push	{r3, lr}
  return month(now()); 
    800e:	bl	7eec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8012:	ldr	r3, [pc, #16]	; (8024 <month()+0x18>)
    8014:	ldr	r3, [r3, #0]
    8016:	cmp	r0, r3
    8018:	beq.n	801e <month()+0x12>
    801a:	bl	7ed4 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    801e:	ldr	r3, [pc, #8]	; (8028 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    8020:	ldrb	r0, [r3, #5]
    8022:	pop	{r3, pc}
    8024:	.word	0x1fff25fc
    8028:	.word	0x1fff2600

0000802c <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    802c:	push	{r3, lr}
  return year(now()); 
    802e:	bl	7eec <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8032:	ldr	r3, [pc, #20]	; (8048 <year()+0x1c>)
    8034:	ldr	r3, [r3, #0]
    8036:	cmp	r0, r3
    8038:	beq.n	803e <year()+0x12>
    803a:	bl	7ed4 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    803e:	ldr	r3, [pc, #12]	; (804c <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    8040:	ldrb	r0, [r3, #6]
}
    8042:	addw	r0, r0, #1970	; 0x7b2
    8046:	pop	{r3, pc}
    8048:	.word	0x1fff25fc
    804c:	.word	0x1fff2600

00008050 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    8050:	bx	lr
    8052:	nop

00008054 <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    8054:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    8056:	ldr	r3, [pc, #60]	; (8094 <_GLOBAL__sub_I_SD+0x40>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    8058:	ldr	r4, [pc, #60]	; (8098 <_GLOBAL__sub_I_SD+0x44>)
    805a:	str.w	r4, [r3, #1164]	; 0x48c
    805e:	movs	r5, #40	; 0x28
    8060:	movs	r4, #0
    8062:	ldr	r0, [pc, #56]	; (809c <_GLOBAL__sub_I_SD+0x48>)
    8064:	ldr	r7, [pc, #56]	; (80a0 <_GLOBAL__sub_I_SD+0x4c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    8066:	ldr	r6, [pc, #60]	; (80a4 <_GLOBAL__sub_I_SD+0x50>)
    8068:	strb.w	r5, [r3, #1195]	; 0x4ab
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    806c:	strb.w	r4, [r3, #1172]	; 0x494
    8070:	strb.w	r4, [r3, #1198]	; 0x4ae
    8074:	str	r0, [r3, #0]
    8076:	str.w	r7, [r3, #1176]	; 0x498
    807a:	str.w	r6, [r3, #1184]	; 0x4a0
    807e:	str.w	r4, [r3, #1148]	; 0x47c
    8082:	str.w	r4, [r3, #1152]	; 0x480
    8086:	ldr	r2, [pc, #32]	; (80a8 <_GLOBAL__sub_I_SD+0x54>)
    8088:	ldr	r1, [pc, #32]	; (80ac <_GLOBAL__sub_I_SD+0x58>)
    808a:	mov	r0, r3
    808c:	pop	{r4, r5, r6, r7}
    808e:	b.w	139b4 <__aeabi_atexit>
    8092:	nop
    8094:	.word	0x1fff261c
    8098:	.word	0x0001961c
    809c:	.word	0x00018ed4
    80a0:	.word	0x000195c4
    80a4:	.word	0x38011001
    80a8:	.word	0x1fff0970
    80ac:	.word	0x00008051

000080b0 <fmtBase10(char*, unsigned short)>:
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    80b0:	cmp	r1, #9
    80b2:	bls.n	80fc <fmtBase10(char*, unsigned short)+0x4c>
// return q + (r > 9);
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
    80b4:	push	{r4}
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm16(n, r, tmp8);
#else  // USE_STIMMER
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
    80b6:	asrs	r2, r1, #2
    80b8:	add.w	r2, r2, r1, lsr #1
    n = n + (n >> 4);
    80bc:	ubfx	r4, r2, #4, #16
    80c0:	add	r2, r4
    80c2:	uxth	r2, r2
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    80c4:	add.w	r2, r2, r2, lsr #8
    80c8:	ubfx	r3, r2, #3, #13
    uint8_t r = t - (((n << 2) + n) << 1);
    80cc:	uxtb	r4, r3
    80ce:	add.w	r4, r4, r4, lsl #2
    80d2:	sub.w	r2, r1, r4, lsl #1
    80d6:	uxtb	r2, r2
    if (r > 9) {
    80d8:	cmp	r2, #9
    uint16_t t = n;
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    80da:	uxth	r1, r3
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
      r -= 10;
    80dc:	sub.w	r3, r2, #10
    80e0:	itt	hi
    80e2:	uxtbhi	r2, r3
    n = n + (n >> 8);
    // n = n + (n >> 16);  // no code for 16-bit n
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
    80e4:	addhi	r1, #1
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    80e6:	adds	r2, #48	; 0x30
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    80e8:	cmp	r1, #9
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    80ea:	strb.w	r2, [r0, #-1]!
}
*/
//------------------------------------------------------------------------------
// Format 16-bit unsigned
char* fmtBase10(char* str, uint16_t n) {
  while (n > 9) {
    80ee:	bhi.n	80b6 <fmtBase10(char*, unsigned short)+0x6>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  *--str = n + '0';
    80f0:	adds	r1, #48	; 0x30
    80f2:	strb.w	r1, [r0, #-1]!
  return str;
}
    80f6:	ldr.w	r4, [sp], #4
    80fa:	bx	lr
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  *--str = n + '0';
    80fc:	adds	r1, #48	; 0x30
    80fe:	strb.w	r1, [r0, #-1]!
  return str;
}
    8102:	bx	lr

00008104 <fmtBase10(char*, unsigned long)>:
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    8104:	cmp.w	r1, #65536	; 0x10000
    8108:	bcc.n	8150 <fmtBase10(char*, unsigned long)+0x4c>
  *--str = n + '0';
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
    810a:	push	{r4}
#ifdef USE_STIMMER
    uint8_t tmp8, r;
    divmod10_asm32(n, r, tmp8);
#else  //  USE_STIMMER
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
    810c:	lsrs	r3, r1, #2
    810e:	add.w	r3, r3, r1, lsr #1
    n = n + (n >> 4);
    8112:	add.w	r3, r3, r3, lsr #4
    n = n + (n >> 8);
    8116:	add.w	r3, r3, r3, lsr #8
    n = n + (n >> 16);
    811a:	add.w	r3, r3, r3, lsr #16
    n = n >> 3;
    811e:	lsrs	r3, r3, #3
    uint8_t r = t - (((n << 2) + n) << 1);
    8120:	uxtb	r2, r3
    8122:	add.w	r2, r2, r2, lsl #2
    8126:	sub.w	r1, r1, r2, lsl #1
    812a:	uxtb	r2, r1
    if (r > 9) {
    812c:	cmp	r2, #9
      n++;
      r -= 10;
    812e:	sub.w	r4, r2, #10
    8132:	itte	hi
    8134:	uxtbhi	r2, r4
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    uint8_t r = t - (((n << 2) + n) << 1);
    if (r > 9) {
      n++;
    8136:	addhi	r1, r3, #1
    uint32_t t = n;
    n = (n >> 1) + (n >> 2);
    n = n + (n >> 4);
    n = n + (n >> 8);
    n = n + (n >> 16);
    n = n >> 3;
    8138:	movls	r1, r3
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    813a:	adds	r2, #48	; 0x30
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    813c:	cmp.w	r1, #65536	; 0x10000
    if (r > 9) {
      n++;
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
    8140:	strb.w	r2, [r0, #-1]!
  return str;
}
//------------------------------------------------------------------------------
// format 32-bit unsigned
char* fmtBase10(char* str, uint32_t n) {
  while (n > 0XFFFF) {
    8144:	bcs.n	810c <fmtBase10(char*, unsigned long)+0x8>
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  return fmtBase10(str, (uint16_t)n);
    8146:	uxth	r1, r1
}
    8148:	ldr.w	r4, [sp], #4
      r -= 10;
    }
#endif  // USE_STIMMER
    *--str = r + '0';
  }
  return fmtBase10(str, (uint16_t)n);
    814c:	b.w	80b0 <fmtBase10(char*, unsigned short)>
    8150:	uxth	r1, r1
    8152:	b.w	80b0 <fmtBase10(char*, unsigned short)>
    8156:	nop

00008158 <fsFmtDate(char*, unsigned short)>:
    *--str = '0';
  }
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
    8158:	push	{r3, r4, r5, lr}
  str = fsFmtField(str, date & 31, 0);
    815a:	and.w	r5, r1, #31
    *--str = '0';
  }
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
    815e:	mov	r4, r1
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    8160:	mov	r1, r5
    8162:	bl	80b0 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    8166:	cmp	r5, #9
    8168:	bhi.n	8172 <fsFmtDate(char*, unsigned short)+0x1a>
    *--str = '0';
    816a:	movs	r3, #48	; 0x30
    816c:	strb.w	r3, [r0, #-1]
    8170:	subs	r0, #1
  return str;
}
//------------------------------------------------------------------------------
char* fsFmtDate(char* str, uint16_t date) {
  str = fsFmtField(str, date & 31, 0);
  date >>= 5;
    8172:	asrs	r4, r4, #5
  str = fsFmtField(str, date & 15, '-');
    8174:	and.w	r5, r4, #15
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    8178:	movs	r3, #45	; 0x2d
    817a:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    817e:	mov	r1, r5
    8180:	subs	r0, #1
    8182:	bl	80b0 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    8186:	cmp	r5, #9
    8188:	bhi.n	8192 <fsFmtDate(char*, unsigned short)+0x3a>
    *--str = '0';
    818a:	movs	r3, #48	; 0x30
    818c:	strb.w	r3, [r0, #-1]
    8190:	subs	r0, #1
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    8192:	movs	r3, #45	; 0x2d
  }
  str = fmtBase10(str, n);
    8194:	asrs	r1, r4, #4
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    8196:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    819a:	addw	r1, r1, #1980	; 0x7bc
    819e:	subs	r0, #1
  str = fsFmtField(str, date & 31, 0);
  date >>= 5;
  str = fsFmtField(str, date & 15, '-');
  date >>= 4;
  return fsFmtField(str, 1980 + date, '-');
}
    81a0:	ldmia.w	sp!, {r3, r4, r5, lr}
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    81a4:	b.w	80b0 <fmtBase10(char*, unsigned short)>

000081a8 <fsFmtTime(char*, unsigned short)>:
  str = fsFmtField(str, date & 15, '-');
  date >>= 4;
  return fsFmtField(str, 1980 + date, '-');
}
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
    81a8:	push	{r3, r4, r5, lr}
  time >>= 5;
    81aa:	lsrs	r4, r1, #5
  str = fsFmtField(str, time & 63, 0);
    81ac:	and.w	r5, r4, #63	; 0x3f
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
    81b0:	mov	r1, r5
    81b2:	bl	80b0 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    81b6:	cmp	r5, #9
    81b8:	bhi.n	81c2 <fsFmtTime(char*, unsigned short)+0x1a>
    *--str = '0';
    81ba:	movs	r3, #48	; 0x30
    81bc:	strb.w	r3, [r0, #-1]
    81c0:	subs	r0, #1
    81c2:	asrs	r4, r4, #6
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
    81c4:	movs	r3, #58	; 0x3a
    81c6:	strb.w	r3, [r0, #-1]
  }
  str = fmtBase10(str, n);
    81ca:	mov	r1, r4
    81cc:	subs	r0, #1
    81ce:	bl	80b0 <fmtBase10(char*, unsigned short)>
  if (n < 10) {
    81d2:	cmp	r4, #9
    81d4:	bgt.n	81de <fsFmtTime(char*, unsigned short)+0x36>
    *--str = '0';
    81d6:	movs	r3, #48	; 0x30
    81d8:	strb.w	r3, [r0, #-1]
    81dc:	subs	r0, #1
//------------------------------------------------------------------------------
char* fsFmtTime(char* str, uint16_t time) {
  time >>= 5;
  str = fsFmtField(str, time & 63, 0);
  return fsFmtField(str, time >> 6, ':');
}
    81de:	pop	{r3, r4, r5, pc}

000081e0 <fsPrintDateTime(Print*, unsigned short, unsigned short)>:
    } while (str > buf);
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr, uint16_t date, uint16_t time) {
    81e0:	push	{r4, r5, lr}
    81e2:	mov	r4, r0
    81e4:	sub	sp, #20
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    81e6:	cbnz	r1, 8206 <fsPrintDateTime(Print*, unsigned short, unsigned short)+0x26>
    81e8:	add	r1, sp, #16
    81ea:	mov	r2, sp
    str = fsFmtTime(str, time);
    *--str = ' ';
    str = fsFmtDate(str, date);
  } else {
    do {
      *--str = ' ';
    81ec:	movs	r3, #32
    81ee:	strb.w	r3, [r1, #-1]!
    } while (str > buf);
    81f2:	cmp	r1, r2
    81f4:	bne.n	81ee <fsPrintDateTime(Print*, unsigned short, unsigned short)+0xe>
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
    81f6:	ldr	r3, [r4, #0]
    81f8:	add	r2, sp, #16
    81fa:	mov	r0, r4
    81fc:	ldr	r3, [r3, #4]
    81fe:	subs	r2, r2, r1
    8200:	blx	r3
}
    8202:	add	sp, #20
    8204:	pop	{r4, r5, pc}
    8206:	mov	r5, r1
size_t fsPrintDateTime(print_t* pr, uint16_t date, uint16_t time) {
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    str = fsFmtTime(str, time);
    8208:	add	r0, sp, #16
    820a:	mov	r1, r2
    820c:	bl	81a8 <fsFmtTime(char*, unsigned short)>
    *--str = ' ';
    8210:	movs	r3, #32
    str = fsFmtDate(str, date);
    8212:	mov	r1, r5
  // Allow YYYY-MM-DD hh:mm
  char buf[sizeof("YYYY-MM-DD hh:mm") -1];
  char* str = buf + sizeof(buf);
  if (date) {
    str = fsFmtTime(str, time);
    *--str = ' ';
    8214:	strb.w	r3, [r0, #-1]
    str = fsFmtDate(str, date);
    8218:	subs	r0, #1
    821a:	bl	8158 <fsFmtDate(char*, unsigned short)>
    821e:	mov	r1, r0
    8220:	b.n	81f6 <fsPrintDateTime(Print*, unsigned short, unsigned short)+0x16>
    8222:	nop

00008224 <fsPrintDateTime(Print*, unsigned long)>:
  }
  return pr->write(reinterpret_cast<uint8_t*>(str), buf + sizeof(buf) - str);
}
//------------------------------------------------------------------------------
size_t fsPrintDateTime(print_t* pr, uint32_t dateTime) {
  return fsPrintDateTime(pr, dateTime >> 16, dateTime & 0XFFFF);
    8224:	uxth	r2, r1
    8226:	lsrs	r1, r1, #16
    8228:	b.w	81e0 <fsPrintDateTime(Print*, unsigned short, unsigned short)>

0000822c <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    822c:	push	{r4, lr}
    822e:	mov	r4, r0
  bool rtn = sync();
    8230:	bl	970c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    8234:	movs	r3, #0
    8236:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    823a:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    823e:	pop	{r4, pc}

00008240 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    8240:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8244:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    8248:	mov	r6, r0
    824a:	mov	r8, r1
    824c:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    824e:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    8252:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    8254:	ldrb.w	r3, [r6, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8258:	add.w	r9, sp, #4
    825c:	stmia.w	r9, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    8260:	cmp	r3, #0
    8262:	beq.n	82d6 <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8264:	ldrb.w	r3, [r6, #48]	; 0x30
    8268:	cmp	r3, #1
    826a:	bls.n	82e2 <ExFatFile::getName(char*, unsigned int)+0xa2>
    826c:	movs	r7, #1
    826e:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    8270:	cmp	r7, #1
    8272:	ite	eq
    8274:	moveq	r2, #64	; 0x40
    8276:	movne	r2, #32
    8278:	mov	r1, r9
    827a:	ldr	r0, [r6, #32]
    827c:	bl	91c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8280:	cmp	r0, #1
    8282:	bne.n	82d6 <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    8284:	movs	r2, #0
    8286:	mov	r1, r9
    8288:	ldr	r0, [r6, #32]
    828a:	bl	9190 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    828e:	cbz	r0, 82d6 <ExFatFile::getName(char*, unsigned int)+0x96>
    8290:	ldrb	r3, [r0, #0]
    8292:	cmp	r3, #193	; 0xc1
    8294:	bne.n	82d6 <ExFatFile::getName(char*, unsigned int)+0x96>
    8296:	add.w	r1, r0, #30
    829a:	add.w	r2, r8, r4
    829e:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    82a0:	adds	r4, #1
    82a2:	cmp	r4, r5
    82a4:	bcs.n	82c8 <ExFatFile::getName(char*, unsigned int)+0x88>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    82a6:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    82aa:	cmp	r3, #126	; 0x7e
    82ac:	ite	ls
    82ae:	uxtbls	r3, r3
    82b0:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    82b2:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    82b4:	strb.w	r3, [r2], #1
    82b8:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    82ba:	bne.n	82a0 <ExFatFile::getName(char*, unsigned int)+0x60>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    82bc:	adds	r7, #1
    82be:	ldrb.w	r2, [r6, #48]	; 0x30
    82c2:	uxtb	r7, r7
    82c4:	cmp	r2, r7
    82c6:	bhi.n	8270 <ExFatFile::getName(char*, unsigned int)+0x30>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    82c8:	movs	r2, #0
  return n;
    82ca:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    82cc:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    82d0:	add	sp, #20
    82d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    82d6:	movs	r0, #0
    82d8:	strb.w	r0, [r8]
  return 0;
}
    82dc:	add	sp, #20
    82de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    82e2:	movs	r3, #0
    82e4:	b.n	82c8 <ExFatFile::getName(char*, unsigned int)+0x88>
    82e6:	nop

000082e8 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    82e8:	ldrb.w	r2, [r0, #49]	; 0x31
    82ec:	cbz	r2, 82f2 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    82ee:	movs	r0, #0
    82f0:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    82f2:	push	{r3, r4, r5, lr}
    82f4:	mov	r4, r0
    82f6:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    82f8:	mov	r1, r2
    82fa:	movs	r2, #56	; 0x38
    82fc:	bl	14e3c <memset>
  m_attributes = FILE_ATTR_ROOT;
    8300:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8302:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    8304:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8308:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    830c:	str	r5, [r4, #32]
    830e:	pop	{r3, r4, r5, pc}

00008310 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    8310:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    8312:	ldrb	r0, [r1, #0]
    8314:	cmp	r0, #32
    8316:	bne.n	8320 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    8318:	ldrb.w	r0, [r1, #1]!
    831c:	cmp	r0, #32
    831e:	beq.n	8318 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    8320:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    8322:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    8324:	cmp	r0, #0
    8326:	beq.n	83cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    8328:	cmp	r0, #47	; 0x2f
    832a:	beq.n	8384 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    832c:	cmp	r0, #92	; 0x5c
    832e:	beq.n	8372 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    8330:	sub.w	r4, r0, #34	; 0x22
    8334:	uxtb	r4, r4
    8336:	cmp	r4, #29
    8338:	bls.n	8376 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    833a:	ldr.w	lr, [pc, #148]	; 83d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    833e:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8340:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    8342:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    8344:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8348:	mov	r7, r6
    834a:	beq.n	8372 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    834c:	cmp	r5, #94	; 0x5e
    834e:	bhi.n	8372 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    8350:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    8354:	sub.w	r5, r0, #34	; 0x22
    8358:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    835a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    835c:	cbz	r0, 83be <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    835e:	cmp	r0, #47	; 0x2f
    8360:	beq.n	8386 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    8362:	cmp	r0, #92	; 0x5c
    8364:	lsr.w	r7, lr, r5
    8368:	beq.n	8372 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    836a:	cmp	r5, #29
    836c:	bhi.n	8342 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    836e:	lsls	r5, r7, #31
    8370:	bpl.n	8342 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    8372:	movs	r0, #0
    8374:	pop	{r4, r5, r6, r7, pc}
    8376:	ldr	r5, [pc, #88]	; (83d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    8378:	lsr.w	r4, r5, r4
    837c:	lsls	r6, r4, #31
    837e:	bpl.n	833a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    8380:	movs	r0, #0
    8382:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    8384:	movs	r4, #0
    8386:	adds	r7, r1, r4
    8388:	mov	r6, r7
    838a:	mov	r5, r4
    838c:	movs	r0, #47	; 0x2f
    838e:	b.n	8396 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    8390:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    8394:	adds	r5, #1
    8396:	cmp	r0, #32
    8398:	beq.n	8390 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    839a:	cmp	r0, #47	; 0x2f
    839c:	beq.n	8390 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    839e:	add	r1, r5
    83a0:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    83a2:	cbz	r4, 83b6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    83a4:	mov	r1, r7
    c = path[len - 1];
    83a6:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    83aa:	cmp	r3, #46	; 0x2e
    83ac:	beq.n	83b2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    83ae:	cmp	r3, #32
    83b0:	bne.n	83c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    83b2:	subs	r4, #1
    83b4:	bne.n	83a6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    83b6:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    83b8:	str	r0, [r2, #0]
  return true;
    83ba:	movs	r0, #1
    83bc:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    83be:	str	r7, [r3, #0]
    83c0:	adds	r7, r1, r4
    83c2:	b.n	83a4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    83c4:	cmp	r4, #255	; 0xff
    83c6:	ble.n	83b6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    83c8:	movs	r0, #0
    83ca:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    83cc:	str	r1, [r3, #0]
    83ce:	b.n	83b8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    83d0:	.word	0x35000101

000083d4 <ExFatFile::printName(Print*)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    83d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    83d8:	add.w	r3, r0, #36	; 0x24
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    83dc:	mov	r6, r0
    83de:	mov	r8, r1
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    83e0:	ldmia.w	r3, {r0, r1, r2}
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
    83e4:	sub	sp, #36	; 0x24
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  uint8_t in;
  uint8_t buf[15];
  if (!isOpen()) {
    83e6:	ldrb.w	r3, [r6, #49]	; 0x31
  return c;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printName(print_t* pr) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    83ea:	add	r7, sp, #4
    83ec:	stmia.w	r7, {r0, r1, r2}
  size_t n = 0;
  uint8_t in;
  uint8_t buf[15];
  if (!isOpen()) {
    83f0:	cmp	r3, #0
    83f2:	beq.n	847a <ExFatFile::printName(Print*)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    83f4:	ldrb.w	r3, [r6, #48]	; 0x30
    83f8:	cmp	r3, #1
    83fa:	bls.n	847a <ExFatFile::printName(Print*)+0xa6>
    83fc:	movs	r5, #1
    83fe:	mov.w	r9, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    8402:	cmp	r5, #1
    8404:	ite	ne
    8406:	movne	r2, #32
    8408:	moveq	r2, #64	; 0x40
    840a:	mov	r1, r7
    840c:	ldr	r0, [r6, #32]
    840e:	bl	91c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8412:	cmp	r0, #1
    8414:	bne.n	847a <ExFatFile::printName(Print*)+0xa6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    8416:	movs	r2, #0
    8418:	mov	r1, r7
    841a:	ldr	r0, [r6, #32]
    841c:	bl	9190 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    8420:	cbz	r0, 847a <ExFatFile::printName(Print*)+0xa6>
    8422:	ldrb	r3, [r0, #0]
    8424:	cmp	r3, #193	; 0xc1
    8426:	bne.n	847a <ExFatFile::printName(Print*)+0xa6>
    8428:	add.w	r1, sp, #15
    842c:	add.w	lr, r9, #15
    8430:	mov	r4, r9
    8432:	ldrh.w	r3, [r0, #2]!
    8436:	rsb	r2, r9, r4
    843a:	uxtb	r2, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
    843c:	cbz	r3, 8476 <ExFatFile::printName(Print*)+0xa2>
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    843e:	cmp	r3, #126	; 0x7e
      n++;
    8440:	add.w	r4, r4, #1
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    8444:	ite	ls
    8446:	uxtbls	r3, r3
    8448:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
    844a:	cmp	r4, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
    844c:	strb.w	r3, [r1, #1]!
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
    8450:	bne.n	8432 <ExFatFile::printName(Print*)+0x5e>
    8452:	mov	r9, r4
    8454:	movs	r2, #15
        break;;
      }
      buf[in] = c < 0X7f ? c : '?';
      n++;
    }
    pr->write(buf, in);
    8456:	ldr.w	r3, [r8]
    845a:	add	r1, sp, #16
    845c:	ldr	r3, [r3, #4]
    845e:	mov	r0, r8
    8460:	blx	r3
  uint8_t buf[15];
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8462:	adds	r5, #1
    8464:	ldrb.w	r3, [r6, #48]	; 0x30
    8468:	uxtb	r5, r5
    846a:	cmp	r3, r5
    846c:	bhi.n	8402 <ExFatFile::printName(Print*)+0x2e>
    846e:	mov	r0, r4
  }
  return n;

 fail:
  return 0;
}
    8470:	add	sp, #36	; 0x24
    8472:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (!c) {
    8476:	mov	r9, r4
    8478:	b.n	8456 <ExFatFile::printName(Print*)+0x82>
    pr->write(buf, in);
  }
  return n;

 fail:
  return 0;
    847a:	movs	r0, #0
}
    847c:	add	sp, #36	; 0x24
    847e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8482:	nop

00008484 <ExFatFile::read(void*, unsigned int)>:
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    8484:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8488:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    848c:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    848e:	sub	sp, #12
    8490:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    8492:	bpl.w	85ee <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    8496:	lsls	r0, r3, #25
    8498:	mov	r5, r1
    849a:	mov	r6, r2
    849c:	bpl.w	8604 <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    84a0:	ldrd	r0, r1, [r4]
    84a4:	ldrd	r2, r3, [r4, #16]
    84a8:	adds.w	r8, r0, r6
    84ac:	adc.w	r9, r1, #0
    84b0:	cmp	r3, r9
    84b2:	it	eq
    84b4:	cmpeq	r2, r8
    84b6:	bcc.w	8610 <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    84ba:	cmp	r6, #0
    84bc:	beq.w	8614 <ExFatFile::read(void*, unsigned int)+0x190>
    84c0:	mov	r9, r4
    84c2:	ldrd	r2, r3, [r9], #24
    84c6:	mov	r8, r6
    84c8:	b.n	856a <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    84ca:	orrs	r3, r2
    84cc:	bne.n	85a6 <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    84ce:	ldrb.w	r3, [r4, #49]	; 0x31
    84d2:	lsls	r2, r3, #25
    84d4:	ite	mi
    84d6:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    84da:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    84dc:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    84de:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    84e2:	ldr.w	r2, [r0, #1060]	; 0x424
    84e6:	subs	r1, #2
    84e8:	lsrs	r7, r7, #9
    84ea:	lsl.w	lr, r1, ip
    84ee:	adds	r1, r7, r2
    84f0:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    84f2:	cmp.w	sl, #0
    84f6:	bne.n	857e <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    84f8:	cmp.w	r8, #512	; 0x200
    84fc:	bcc.n	857e <ExFatFile::read(void*, unsigned int)+0xfa>
    84fe:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    8502:	cmp	r1, r2
    8504:	beq.n	857e <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    8506:	cmp.w	r8, #1024	; 0x400
    850a:	bcc.n	85b4 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    850c:	movs	r3, #1
    850e:	lsl.w	ip, r3, ip
    8512:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    8516:	mov.w	r3, r8, lsr #9
    851a:	cmp	r7, r3
    851c:	it	cs
    851e:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    8520:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    8522:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    8526:	bhi.n	8540 <ExFatFile::read(void*, unsigned int)+0xbc>
    8528:	adds	r3, r7, r1
    852a:	cmp	r3, r2
    852c:	bls.n	8540 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    852e:	add.w	r0, r0, #524	; 0x20c
    8532:	str	r1, [sp, #4]
    8534:	bl	8f08 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    8538:	cmp	r0, #0
    853a:	beq.n	85ee <ExFatFile::read(void*, unsigned int)+0x16a>
    853c:	ldr	r0, [r4, #32]
    853e:	ldr	r1, [sp, #4]
    8540:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    8544:	ldr	r2, [r0, #0]
    8546:	mov	r3, r7
    8548:	ldr	r7, [r2, #12]
    854a:	mov	r2, r5
    854c:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    854e:	cmp	r0, #0
    8550:	beq.n	85ee <ExFatFile::read(void*, unsigned int)+0x16a>
    8552:	mov	r0, fp
    8554:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    8556:	ldrd	r2, r3, [r4]
    855a:	adds	r2, r2, r0
    855c:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    855e:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    8562:	add	r5, fp
    m_curPosition += n;
    8564:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    8568:	beq.n	8614 <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    856a:	ldr	r0, [r4, #32]
    856c:	ldr.w	r7, [r0, #1072]	; 0x430
    8570:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    8572:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    8576:	cmp	r7, #0
    8578:	beq.n	84ca <ExFatFile::read(void*, unsigned int)+0x46>
    857a:	ldr	r1, [r4, #24]
    857c:	b.n	84de <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    857e:	add.w	r0, r0, #524	; 0x20c
    8582:	movs	r2, #0
    8584:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    8588:	cbz	r0, 85ee <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    858a:	rsb	fp, sl, #512	; 0x200
    858e:	cmp	fp, r8
    8590:	it	cs
    8592:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    8594:	add.w	r1, r0, sl
    8598:	mov	r2, fp
    859a:	mov	r0, r5
    859c:	bl	11bf8 <memcpy>
    85a0:	mov	r0, fp
    85a2:	movs	r1, #0
    85a4:	b.n	8556 <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    85a6:	ldrb.w	r3, [r4, #51]	; 0x33
    85aa:	lsls	r3, r3, #25
    85ac:	bpl.n	85ce <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    85ae:	ldr	r1, [r4, #24]
    85b0:	adds	r1, #1
    85b2:	b.n	84dc <ExFatFile::read(void*, unsigned int)+0x58>
    85b4:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    85b8:	ldr	r3, [r0, #0]
    85ba:	mov	r2, r5
    85bc:	ldr	r3, [r3, #8]
    85be:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    85c0:	cbz	r0, 85ee <ExFatFile::read(void*, unsigned int)+0x16a>
    85c2:	mov.w	r0, #512	; 0x200
    85c6:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    85c8:	mov.w	fp, #512	; 0x200
    85cc:	b.n	8556 <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    85ce:	mov	r2, r9
    85d0:	ldr	r1, [r4, #24]
    85d2:	bl	921c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    85d6:	sxtb	r0, r0
        if (fg < 0) {
    85d8:	cmp	r0, #0
    85da:	blt.n	85ee <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    85dc:	beq.n	85e4 <ExFatFile::read(void*, unsigned int)+0x160>
    85de:	ldr	r0, [r4, #32]
    85e0:	ldr	r1, [r4, #24]
    85e2:	b.n	84de <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    85e4:	ldrb.w	r3, [r4, #49]	; 0x31
    85e8:	tst.w	r3, #80	; 0x50
    85ec:	bne.n	8618 <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    85ee:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    85f2:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    85f6:	orr.w	r3, r3, #2
    85fa:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    85fe:	add	sp, #12
    8600:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    8604:	ldrb.w	r3, [r4, #49]	; 0x31
    8608:	lsls	r1, r3, #28
    860a:	bmi.w	84a0 <ExFatFile::read(void*, unsigned int)+0x1c>
    860e:	b.n	84ba <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    8610:	subs	r6, r2, r0
    8612:	b.n	84ba <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    8614:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    8618:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    861c:	add	sp, #12
    861e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8622:	nop

00008624 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    8624:	push	{r4, r5, r6, r7, lr}
    8626:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8628:	movs	r2, #1
    862a:	add.w	r1, sp, #7
    862e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    8630:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    8634:	ldr	r5, [r0, #24]
    8636:	bl	8484 <ExFatFile::read(void*, unsigned int)>
    863a:	cmp	r0, #1
    863c:	it	eq
    863e:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    8642:	str	r5, [r4, #24]
    8644:	it	ne
    8646:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    864a:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    864e:	add	sp, #12
    8650:	pop	{r4, r5, r6, r7, pc}
    8652:	nop

00008654 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    8654:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8658:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    865c:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    865e:	sub	sp, #12
    8660:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    8662:	cmp.w	lr, #0
    8666:	beq.n	86a0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    8668:	ldrd	r0, r1, [r0]
    866c:	cmp	r1, r3
    866e:	it	eq
    8670:	cmpeq	r0, r2
    8672:	mov	r6, r2
    8674:	mov	r7, r3
    8676:	beq.n	86f0 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    8678:	orrs.w	r3, r6, r7
    867c:	bne.n	868e <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    867e:	movs	r3, #0
    8680:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    8682:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    8684:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    8688:	add	sp, #12
    868a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    868e:	tst.w	lr, #8
    8692:	beq.n	86aa <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    8694:	ldrd	r2, r3, [r4, #16]
    8698:	cmp	r3, r7
    869a:	it	eq
    869c:	cmpeq	r2, r6
    869e:	bcs.n	86aa <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    86a0:	str	r5, [r4, #24]
  return false;
    86a2:	movs	r0, #0
}
    86a4:	add	sp, #12
    86a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    86aa:	ldr	r3, [r4, #32]
    86ac:	str	r3, [sp, #4]
    86ae:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    86b2:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    86b6:	add.w	ip, ip, #9
    86ba:	uxtb.w	ip, ip
    86be:	adds.w	r2, r6, #4294967295
    86c2:	adc.w	r3, r7, #4294967295
    86c6:	rsb	r8, ip, #32
    86ca:	lsl.w	fp, r3, r8
    86ce:	lsr.w	r2, r2, ip
    86d2:	orr.w	r2, r2, fp
    86d6:	sub.w	fp, ip, #32
    86da:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    86de:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    86e2:	orr.w	r2, r2, r3
  if (isContiguous()) {
    86e6:	beq.n	86f4 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    86e8:	ldr	r3, [r4, #28]
    86ea:	add	r2, r3
    86ec:	str	r2, [r4, #24]
    goto done;
    86ee:	b.n	8682 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    86f0:	movs	r0, #1
    86f2:	b.n	86a4 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    86f4:	adds.w	r9, r0, #4294967295
    86f8:	adc.w	sl, r1, #4294967295
    86fc:	lsr.w	ip, r9, ip
    8700:	lsl.w	r8, sl, r8
    8704:	orr.w	ip, ip, r8
    8708:	lsr.w	fp, sl, fp
    870c:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    8710:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    8712:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    8714:	bcs.n	8746 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    8716:	tst.w	lr, #64	; 0x40
    871a:	itet	ne
    871c:	ldrne	r3, [sp, #4]
    871e:	ldreq	r3, [r4, #28]
    8720:	ldrne.w	r3, [r3, #1068]	; 0x42c
    8724:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    8726:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    8728:	add.w	r9, r4, #24
    872c:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    872e:	cmp.w	r8, #0
    8732:	beq.n	8682 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    8734:	ldr	r1, [r4, #24]
    8736:	ldr	r0, [r4, #32]
    8738:	bl	921c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    873c:	add.w	r8, r8, #4294967295
    8740:	cmp	r0, #0
    8742:	bne.n	872c <ExFatFile::seekSet(unsigned long long)+0xd8>
    8744:	b.n	86a0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    8746:	orrs.w	r3, r0, r1
    874a:	beq.n	8716 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    874c:	rsb	r2, ip, r2
    8750:	b.n	8726 <ExFatFile::seekSet(unsigned long long)+0xd2>
    8752:	nop

00008754 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    8754:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8758:	mov	r6, r1
    875a:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    875c:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    8760:	str	r2, [sp, #0]
    8762:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    8764:	cbnz	r1, 8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8766:	mov	sl, r3
    8768:	ldrb.w	r3, [r6, #49]	; 0x31
    876c:	tst.w	r3, #80	; 0x50
    8770:	bne.n	8782 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    8772:	movs	r0, #0
    8774:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    8778:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    877c:	add	sp, #76	; 0x4c
    877e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    8782:	ldr	r3, [sp, #112]	; 0x70
    8784:	and.w	r3, r3, #3
    8788:	cmp	r3, #1
    878a:	beq.n	879a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    878c:	cmp	r3, #2
    878e:	beq.w	89a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    8792:	cmp	r3, #0
    8794:	bne.n	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8796:	movs	r3, #1
    8798:	b.n	879c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    879a:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    879c:	ldr	r2, [sp, #112]	; 0x70
    879e:	and.w	r2, r2, #8
    87a2:	orrs	r3, r2
    87a4:	str	r3, [sp, #4]
  if (name) {
    87a6:	ldr	r3, [sp, #0]
    87a8:	cmp	r3, #0
    87aa:	beq.w	89a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    87ae:	mov	r0, r3
    87b0:	movs	r2, #0
    87b2:	mov	r1, sl
    87b4:	bl	9360 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    87b8:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    87bc:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    87be:	cbz	r3, 87d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    87c0:	ldrd	r2, r3, [r6]
    87c4:	orrs	r3, r2
    87c6:	beq.n	87d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    87c8:	movs	r2, #0
    87ca:	movs	r3, #0
    87cc:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    87d0:	movs	r1, #0
    87d2:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    87d4:	ldr	r2, [pc, #736]	; (8ab8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    87d6:	add.w	r3, sl, #14
    87da:	smull	r1, r2, r2, r3
    87de:	add	r2, r3
    87e0:	asrs	r3, r3, #31
    87e2:	rsb	r3, r3, r2, asr #3
    87e6:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    87e8:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    87ec:	str	r3, [sp, #12]
    87ee:	adds	r3, #2
    87f0:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    87f4:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    87f6:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    87f8:	movs	r2, #32
    87fa:	add	r1, sp, #40	; 0x28
    87fc:	mov	r0, r6
    87fe:	bl	8484 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    8802:	cmp	r0, #0
    8804:	beq.n	8882 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    8806:	cmp	r0, #32
    8808:	bne.n	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    880a:	ldrb.w	r3, [sp, #40]	; 0x28
    880e:	lsls	r2, r3, #24
    8810:	bmi.n	88e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    8812:	cmp	r4, #0
    8814:	bne.n	88da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    8816:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    8818:	ldr	r1, [r6, #24]
    881a:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    881c:	subs	r2, #32
    881e:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    8820:	adds	r4, #1
    8822:	uxtb	r4, r4
      }
      if (!buf[0]) {
    8824:	cbz	r3, 8882 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    8826:	cmp	r3, #192	; 0xc0
    8828:	beq.w	8952 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    882c:	cmp	r3, #193	; 0xc1
    882e:	beq.n	88f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    8830:	cmp	r3, #133	; 0x85
    8832:	bne.n	87f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    8834:	movs	r2, #56	; 0x38
    8836:	movs	r1, #0
    8838:	mov	r0, r5
    883a:	bl	14e3c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    883e:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    8842:	ldrb.w	r2, [sp, #41]	; 0x29
    8846:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    884a:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    884c:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    8850:	it	pl
    8852:	orrpl.w	r2, r2, #8
    8856:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    885a:	ldr	r3, [r6, #0]
    885c:	ldr	r1, [r6, #32]
    885e:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    8860:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    8862:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    8864:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    8866:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    8868:	ldrb.w	r3, [r6, #51]	; 0x33
    886c:	ubfx	r3, r3, #6, #1
    8870:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    8874:	movs	r2, #32
    8876:	add	r1, sp, #40	; 0x28
    8878:	mov	r0, r6
    887a:	bl	8484 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    887e:	cmp	r0, #0
    8880:	bne.n	8806 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    8882:	ldr	r3, [sp, #112]	; 0x70
    8884:	lsls	r1, r3, #22
    8886:	bpl.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    888a:	ldr	r3, [sp, #4]
    888c:	lsls	r2, r3, #30
    888e:	bpl.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8892:	ldr	r3, [sp, #0]
    8894:	cmp	r3, #0
    8896:	beq.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    889a:	cmp	r4, fp
    889c:	bcc.n	88b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    889e:	b.n	89ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    88a0:	cmp	r0, #32
    88a2:	bne.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    88a6:	cbnz	r4, 88b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    88a8:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    88aa:	ldr	r1, [r6, #24]
    88ac:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    88ae:	subs	r2, #32
    88b0:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    88b2:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    88b4:	cmp	fp, r4
    88b6:	bls.n	89ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    88b8:	movs	r2, #32
    88ba:	add	r1, sp, #40	; 0x28
    88bc:	mov	r0, r6
    88be:	bl	8484 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    88c2:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    88c4:	cmp	r0, #0
    88c6:	bne.n	88a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    88c8:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    88ca:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    88cc:	bl	976c <ExFatFile::addDirCluster()>
    88d0:	cmp	r0, #0
    88d2:	beq.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    88d6:	str	r7, [r6, #24]
      continue;
    88d8:	b.n	88b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    88da:	cmp	r4, fp
    88dc:	bcs.n	8824 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    88de:	b.n	8820 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    88e0:	cmp.w	r9, #0
    88e4:	bne.n	8826 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    88e6:	cmp	r4, fp
    88e8:	it	cc
    88ea:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    88ec:	cmp	r3, #133	; 0x85
    88ee:	bne.n	87f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    88f0:	mov.w	r9, #1
    88f4:	b.n	8834 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    88f6:	rsb	r8, r7, sl
    88fa:	uxtb.w	r8, r8
    88fe:	cmp.w	r8, #15
    8902:	it	cs
    8904:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    8908:	mov	r3, r8
    890a:	mov	r2, r7
    890c:	ldr	r1, [sp, #0]
    890e:	add	r0, sp, #40	; 0x28
    8910:	bl	939c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    8914:	cmp	r0, #0
    8916:	beq.n	8992 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    8918:	add	r7, r8
    891a:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    891c:	cmp	sl, r7
    891e:	bne.w	87f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    8922:	ldr	r3, [sp, #112]	; 0x70
    8924:	lsls	r3, r3, #20
    8926:	bmi.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    892a:	ldr	r3, [sp, #112]	; 0x70
    892c:	tst.w	r3, #17408	; 0x4400
    8930:	bne.w	8a74 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    8934:	ldrb.w	r3, [r5, #51]	; 0x33
    8938:	lsls	r7, r3, #30
    893a:	bmi.w	8a74 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    893e:	ldr	r3, [sp, #112]	; 0x70
    8940:	lsls	r3, r3, #21
    8942:	bmi.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    8946:	ldr	r3, [sp, #112]	; 0x70
    8948:	lsls	r0, r3, #17
    894a:	bmi.w	8abc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    894e:	movs	r0, #1
    8950:	b.n	877c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    8952:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    8956:	ldr	r2, [sp, #4]
    8958:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    895c:	lsls	r1, r3, #30
    895e:	bpl.n	8968 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    8960:	orr.w	r3, r2, #64	; 0x40
    8964:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    8968:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    896c:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    8970:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    8974:	ldr	r3, [sp, #60]	; 0x3c
    8976:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    8978:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    897a:	strd	r0, r1, [r5, #8]
        if (!name) {
    897e:	cmp	r3, #0
    8980:	beq.n	8922 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    8982:	ldrb.w	r3, [sp, #43]	; 0x2b
    8986:	cmp	r3, sl
    8988:	beq.n	8996 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    898a:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    898e:	mov	r7, r9
    8990:	b.n	87f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    8992:	mov	r9, r0
    8994:	b.n	87f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    8996:	ldrh.w	r3, [sp, #44]	; 0x2c
    899a:	ldr	r2, [sp, #8]
    899c:	cmp	r3, r2
    899e:	bne.n	898a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    89a0:	movs	r7, #0
    89a2:	b.n	87f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    89a4:	movs	r3, #3
    89a6:	b.n	879c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    89a8:	ldr	r3, [sp, #0]
    89aa:	str	r3, [sp, #8]
    89ac:	b.n	87d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    89ae:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    89b2:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    89b4:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    89b8:	movs	r1, #0
    89ba:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    89bc:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    89c0:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    89c4:	bl	14e3c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    89c8:	ldr	r4, [sp, #12]
    89ca:	ldr	r3, [r6, #32]
    89cc:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    89d0:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    89d4:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    89d8:	movs	r4, #8
    89da:	strb.w	r4, [r5, #49]	; 0x31
    89de:	add.w	r7, sl, #30
  m_dirPos = freePos;
    89e2:	add.w	r4, r5, #36	; 0x24
    89e6:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    89ea:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    89ec:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    89f0:	stmia.w	r4, {r0, r1, r2}
    89f4:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    89f6:	movs	r6, #0
    89f8:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    89fa:	movs	r2, #1
    89fc:	mov	r1, r8
    89fe:	bl	9190 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    8a02:	mov	r4, r0
    8a04:	cmp	r0, #0
    8a06:	beq.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8a0a:	ldrsb.w	r3, [r0]
    8a0e:	cmp	r3, #0
    8a10:	blt.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    8a14:	movs	r2, #32
    8a16:	movs	r1, #0
    8a18:	bl	14e3c <memset>
    if (i == 0) {
    8a1c:	cmp	r6, #0
    8a1e:	beq.n	8aee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    8a20:	cmp	r6, #1
    8a22:	beq.n	8ace <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    8a24:	rsb	r3, r6, r6, lsl #4
    8a28:	cmp	r7, #15
    8a2a:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    8a2e:	mov.w	r2, #193	; 0xc1
    8a32:	mov	r1, r7
    8a34:	it	cs
    8a36:	movcs	r1, #15
    8a38:	uxtb	r3, r3
    8a3a:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    8a3c:	cbz	r1, 8a54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    8a3e:	adds	r4, #2
    8a40:	sxth	r1, r1
    8a42:	add.w	r1, r4, r1, lsl #1
    8a46:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    8a48:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    8a4c:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    8a50:	cmp	r1, r4
    8a52:	bne.n	8a48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    8a54:	adds	r6, #1
    8a56:	uxtb	r6, r6
    8a58:	cmp	fp, r6
    8a5a:	bls.n	8ab0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    8a5c:	movs	r2, #32
    8a5e:	mov	r1, r8
    8a60:	ldr	r0, [r5, #32]
    8a62:	bl	91c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8a66:	cmp	r0, #1
    8a68:	bne.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8a6c:	subs	r7, #15
    8a6e:	uxtb	r7, r7
    8a70:	ldr	r0, [r5, #32]
    8a72:	b.n	89fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    8a74:	ldrb.w	r3, [r5, #49]	; 0x31
    8a78:	tst.w	r3, #17
    8a7c:	bne.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    8a80:	ldr	r3, [sp, #112]	; 0x70
    8a82:	lsls	r6, r3, #21
    8a84:	bpl.w	8946 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    8a88:	ldrb.w	r3, [r5, #51]	; 0x33
    8a8c:	lsls	r4, r3, #30
    8a8e:	bpl.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    8a92:	movs	r2, #0
    8a94:	movs	r3, #0
    8a96:	mov	r0, r5
    8a98:	bl	8654 <ExFatFile::seekSet(unsigned long long)>
    8a9c:	cmp	r0, #0
    8a9e:	beq.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8aa2:	mov	r0, r5
    8aa4:	bl	9a38 <ExFatFile::truncate()>
    8aa8:	cmp	r0, #0
    8aaa:	beq.w	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    8aae:	b.n	894e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    8ab0:	mov	r0, r5
    8ab2:	bl	970c <ExFatFile::sync()>
    8ab6:	b.n	877c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    8ab8:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    8abc:	ldrd	r2, r3, [r5, #16]
    8ac0:	mov	r0, r5
    8ac2:	bl	8654 <ExFatFile::seekSet(unsigned long long)>
    8ac6:	cmp	r0, #0
    8ac8:	bne.w	894e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    8acc:	b.n	8772 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    8ace:	movs	r3, #192	; 0xc0
    8ad0:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    8ad2:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    8ad4:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    8ad6:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    8ada:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    8adc:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    8ae0:	ldrb.w	r3, [sp, #12]
    8ae4:	strb	r3, [r4, #3]
    8ae6:	ldrh.w	r3, [sp, #8]
    8aea:	strh	r3, [r4, #4]
    8aec:	b.n	8a54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    8aee:	movs	r3, #133	; 0x85
    8af0:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    8af2:	ldr	r3, [pc, #48]	; (8b24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    8af4:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    8af8:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    8afc:	ldr	r3, [r3, #0]
    8afe:	cmp	r3, #0
    8b00:	beq.n	8a54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    8b02:	add.w	r2, sp, #23
    8b06:	add.w	r1, sp, #26
    8b0a:	add	r0, sp, #24
    8b0c:	blx	r3
        dirFile->createTimeMs = ms10;
    8b0e:	ldrb.w	r1, [sp, #23]
    8b12:	ldrh.w	r2, [sp, #26]
    8b16:	ldrh.w	r3, [sp, #24]
    8b1a:	strb	r1, [r4, #20]
    8b1c:	strh	r2, [r4, #8]
    8b1e:	strh	r3, [r4, #10]
    8b20:	b.n	8a54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    8b22:	nop
    8b24:	.word	0x1fff2acc

00008b28 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    8b28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8b2c:	mov	r6, r0
    8b2e:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    8b30:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    8b34:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    8b36:	movs	r0, #0
    8b38:	strb.w	r0, [sp, #73]	; 0x49
    8b3c:	strb.w	r0, [sp, #74]	; 0x4a
    8b40:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    8b44:	cbnz	r4, 8b54 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    8b46:	mov	r9, r3
    8b48:	ldrb.w	r3, [r1, #49]	; 0x31
    8b4c:	tst.w	r3, #80	; 0x50
    8b50:	mov	r5, r1
    8b52:	bne.n	8b5c <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    8b54:	movs	r0, #0
}
    8b56:	add	sp, #84	; 0x54
    8b58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    8b5c:	ldrb	r3, [r2, #0]
    8b5e:	cmp	r3, #47	; 0x2f
    8b60:	mov	r4, r2
    8b62:	beq.n	8bca <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    8b64:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    8b68:	mov	r1, r4
    8b6a:	add	r3, sp, #12
    8b6c:	add	r2, sp, #16
    8b6e:	mov	r0, r6
    8b70:	bl	8310 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    8b74:	cmp	r0, #0
    8b76:	beq.n	8b54 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    8b78:	ldr	r3, [sp, #12]
    8b7a:	ldrb	r3, [r3, #0]
    8b7c:	cmp	r3, #0
    8b7e:	beq.n	8bf4 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    8b80:	ldrb.w	r3, [sp, #16]
    8b84:	ldr	r2, [sp, #20]
    8b86:	str.w	r8, [sp]
    8b8a:	mov	r1, r5
    8b8c:	mov	r0, r6
    8b8e:	bl	8754 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    8b92:	cmp	r0, #0
    8b94:	beq.n	8b54 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    8b96:	mov	r4, r6
    8b98:	add	r7, sp, #24
    8b9a:	add.w	lr, r6, #48	; 0x30
    8b9e:	ldr	r0, [r4, #0]
    8ba0:	ldr	r1, [r4, #4]
    8ba2:	ldr	r2, [r4, #8]
    8ba4:	ldr	r3, [r4, #12]
    8ba6:	mov	r5, r7
    8ba8:	stmia	r5!, {r0, r1, r2, r3}
    8baa:	adds	r4, #16
    8bac:	cmp	r4, lr
    8bae:	mov	r7, r5
    8bb0:	bne.n	8b9e <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    8bb2:	ldr	r0, [r4, #0]
    8bb4:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    8bb6:	mov	r0, r6
    8bb8:	bl	970c <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    8bbc:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    8bbe:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    8bc2:	strb.w	r8, [r6, #51]	; 0x33
    8bc6:	ldr	r4, [sp, #12]
    8bc8:	b.n	8b68 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    8bca:	adds	r4, #1
    8bcc:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    8bce:	ldrb	r1, [r4, #0]
    8bd0:	cmp	r1, #47	; 0x2f
    8bd2:	beq.n	8bca <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    8bd4:	cbz	r1, 8c0c <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    8bd6:	movs	r2, #56	; 0x38
    8bd8:	add	r0, sp, #24
    8bda:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    8bdc:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    8bde:	bl	14e3c <memset>
  m_attributes = FILE_ATTR_ROOT;
    8be2:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8be4:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    8be6:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    8be8:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    8bea:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8bee:	strb.w	r3, [sp, #75]	; 0x4b
    8bf2:	b.n	8b64 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    8bf4:	ldrb.w	r3, [sp, #16]
    8bf8:	ldr	r2, [sp, #20]
    8bfa:	str.w	r9, [sp]
    8bfe:	mov	r1, r5
    8c00:	mov	r0, r6
    8c02:	bl	8754 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    8c06:	add	sp, #84	; 0x54
    8c08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    8c0c:	movs	r2, #56	; 0x38
    8c0e:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    8c10:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    8c12:	bl	14e3c <memset>
  m_attributes = FILE_ATTR_ROOT;
    8c16:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8c18:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    8c1a:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    8c1c:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8c20:	strb.w	r0, [r6, #51]	; 0x33
    8c24:	b.n	8b56 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    8c26:	nop

00008c28 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    8c28:	cbz	r1, 8c32 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    8c2a:	add.w	r1, r1, #1088	; 0x440
    8c2e:	b.w	8b28 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    8c32:	mov	r0, r1
    8c34:	bx	lr
    8c36:	nop

00008c38 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    8c38:	ldrb.w	r3, [r0, #49]	; 0x31
    8c3c:	cbnz	r3, 8c54 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    8c3e:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    8c40:	ldrb.w	r4, [r1, #49]	; 0x31
    8c44:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    8c48:	sub	sp, #12
    8c4a:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    8c4c:	bne.n	8c58 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    8c4e:	mov	r0, r4
}
    8c50:	add	sp, #12
    8c52:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    8c54:	movs	r0, #0
}
    8c56:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    8c58:	ldrd	r4, r5, [r5]
    8c5c:	movs	r5, #0
    8c5e:	and.w	r4, r4, #31
    8c62:	orrs	r4, r5
    8c64:	beq.n	8c6c <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    8c66:	mov	r0, r3
}
    8c68:	add	sp, #12
    8c6a:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    8c6c:	str	r2, [sp, #0]
    8c6e:	mov	r2, r3
    8c70:	bl	8754 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    8c74:	add	sp, #12
    8c76:	pop	{r4, r5, pc}

00008c78 <ExFatFile::printFileSize(Print*)>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
    8c78:	push	{r4, r5, r6, lr}
    8c7a:	sub	sp, #24
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
    8c7c:	add	r5, sp, #24
    8c7e:	movs	r2, #0
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
  uint64_t n = m_validLength;
    8c80:	ldr	r4, [r0, #16]
    8c82:	ldr	r3, [r0, #20]
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
    8c84:	strb.w	r2, [r5, #-4]!
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "upcase.h"
#include "ExFatVolume.h"
//-----------------------------------------------------------------------------
size_t ExFatFile::printFileSize(print_t* pr) {
    8c88:	mov	r6, r1
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    uint64_t m = n;
    n /= 10;
    8c8a:	mov	r1, r3
    8c8c:	movs	r2, #10
    8c8e:	movs	r3, #0
    8c90:	mov	r0, r4
    8c92:	bl	142e0 <__aeabi_uldivmod>
    *--str = m - 10*n + '0';
    8c96:	adds	r4, #48	; 0x30
    8c98:	add.w	r3, r0, r0, lsl #2
    8c9c:	sub.w	r4, r4, r3, lsl #1
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    8ca0:	orrs.w	r2, r0, r1
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
    8ca4:	strb.w	r4, [r5, #-1]!
    8ca8:	mov	r3, r1
    8caa:	mov	r4, r0
  uint64_t n = m_validLength;
  char buf[21];
  char *str = &buf[sizeof(buf) - 1];
  char *bgn = str - 12;
  *str = '\0';
  do {
    8cac:	bne.n	8c8a <ExFatFile::printFileSize(Print*)+0x12>
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
  } while (n);
  while (str > bgn) {
    8cae:	add	r3, sp, #8
    8cb0:	cmp	r5, r3
    8cb2:	bls.n	8cc2 <ExFatFile::printFileSize(Print*)+0x4a>
    8cb4:	mov	r1, r5
    *--str = ' ';
    8cb6:	movs	r2, #32
    8cb8:	strb.w	r2, [r1, #-1]!
  do {
    uint64_t m = n;
    n /= 10;
    *--str = m - 10*n + '0';
  } while (n);
  while (str > bgn) {
    8cbc:	cmp	r1, r3
    8cbe:	bne.n	8cb8 <ExFatFile::printFileSize(Print*)+0x40>
    8cc0:	add	r5, sp, #8
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    8cc2:	mov	r0, r5
    8cc4:	bl	15880 <strlen>
    8cc8:	ldr	r3, [r6, #0]
    8cca:	mov	r2, r0
    8ccc:	mov	r1, r5
    8cce:	ldr	r3, [r3, #4]
    8cd0:	mov	r0, r6
    8cd2:	blx	r3
    *--str = ' ';
  }
  return pr->write(str);
}
    8cd4:	add	sp, #24
    8cd6:	pop	{r4, r5, r6, pc}

00008cd8 <ExFatFile::printModifyDateTime(Print*)>:
  return fsPrintDateTime(pr, getLe32(df->createTime));
fail:
  return 0;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printModifyDateTime(print_t* pr) {
    8cd8:	mov	r3, r0
    8cda:	push	{r4, lr}
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    8cdc:	ldr	r0, [r0, #32]
  return fsPrintDateTime(pr, getLe32(df->createTime));
fail:
  return 0;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::printModifyDateTime(print_t* pr) {
    8cde:	mov	r4, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    8ce0:	movs	r2, #0
    8ce2:	add.w	r1, r3, #36	; 0x24
    8ce6:	bl	9190 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    8cea:	cbz	r0, 8cf8 <ExFatFile::printModifyDateTime(Print*)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe32(df->modifyTime));
    8cec:	ldr	r1, [r0, #12]
    8cee:	mov	r0, r4
fail:
  return 0;
}
    8cf0:	ldmia.w	sp!, {r4, lr}
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe32(df->modifyTime));
    8cf4:	b.w	8224 <fsPrintDateTime(Print*, unsigned long)>
fail:
  return 0;
}
    8cf8:	pop	{r4, pc}
    8cfa:	nop

00008cfc <ExFatFile::ls(Print*, unsigned char, unsigned char)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    8cfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ExFatFile file;
  if (!isDir()) {
    8d00:	ldrb.w	r6, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    8d04:	sub	sp, #56	; 0x38
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    8d06:	movs	r4, #0
  ExFatFile file;
  if (!isDir()) {
    8d08:	tst.w	r6, #80	; 0x50
    8d0c:	strb.w	r4, [sp, #49]	; 0x31
    8d10:	strb.w	r4, [sp, #50]	; 0x32
    8d14:	strb.w	r4, [sp, #51]	; 0x33
    8d18:	bne.n	8d22 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x26>
    goto fail;
  }
  return true;

 fail:
  return false;
    8d1a:	movs	r0, #0
}
    8d1c:	add	sp, #56	; 0x38
    8d1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d22:	mov	r9, r0
    8d24:	mov	r8, r2
    8d26:	mov	r7, r3
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    8d28:	movs	r2, #0
    8d2a:	movs	r3, #0
    8d2c:	mov	r5, r1
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    8d2e:	and.w	sl, r8, #2
    8d32:	bl	8654 <ExFatFile::seekSet(unsigned long long)>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    8d36:	movs	r2, #0
    8d38:	mov	r1, r9
    8d3a:	mov	r0, sp
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    8d3c:	uxtb.w	sl, sl
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    8d40:	bl	8c38 <ExFatFile::openNext(ExFatFile*, int)>
    8d44:	cmp	r0, #0
    8d46:	beq.n	8dd0 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xd4>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
    8d48:	ldrb.w	r3, [sp, #49]	; 0x31
    8d4c:	lsls	r3, r3, #30
    8d4e:	bpl.n	8d56 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x5a>
    8d50:	tst.w	r8, #1
    8d54:	beq.n	8dbc <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
      for (uint8_t i = 0; i < indent; i++) {
    8d56:	movs	r4, #0
    8d58:	cbz	r7, 8d6c <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x70>
        pr->write(' ');
    8d5a:	ldr	r3, [r5, #0]
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    8d5c:	adds	r4, #1
        pr->write(' ');
    8d5e:	movs	r1, #32
    8d60:	ldr	r6, [r3, #0]
    8d62:	mov	r0, r5
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    8d64:	uxtb	r4, r4
        pr->write(' ');
    8d66:	blx	r6
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    8d68:	cmp	r7, r4
    8d6a:	bne.n	8d5a <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x5e>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    8d6c:	cmp.w	sl, #0
    8d70:	bne.n	8e08 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x10c>
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
    8d72:	tst.w	r8, #4
    8d76:	bne.n	8df4 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xf8>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
    8d78:	mov	r1, r5
    8d7a:	mov	r0, sp
    8d7c:	bl	83d4 <ExFatFile::printName(Print*)>
      if (file.isDir()) {
    8d80:	ldrb.w	r3, [sp, #49]	; 0x31
    8d84:	tst.w	r3, #80	; 0x50
    8d88:	bne.n	8de8 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xec>
        pr->write('/');
      }
      pr->write('\r');
    8d8a:	ldr	r3, [r5, #0]
    8d8c:	movs	r1, #13
    8d8e:	ldr	r3, [r3, #0]
    8d90:	mov	r0, r5
    8d92:	blx	r3
      pr->write('\n');
    8d94:	ldr	r3, [r5, #0]
    8d96:	movs	r1, #10
    8d98:	ldr	r3, [r3, #0]
    8d9a:	mov	r0, r5
    8d9c:	blx	r3
      if ((flags & LS_R) && file.isDir()) {
    8d9e:	tst.w	r8, #8
    8da2:	beq.n	8dbc <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
    8da4:	ldrb.w	r3, [sp, #49]	; 0x31
    8da8:	tst.w	r3, #80	; 0x50
    8dac:	beq.n	8dbc <ExFatFile::ls(Print*, unsigned char, unsigned char)+0xc0>
        file.ls(pr, flags, indent + 2);
    8dae:	adds	r3, r7, #2
    8db0:	uxtb	r3, r3
    8db2:	mov	r2, r8
    8db4:	mov	r1, r5
    8db6:	mov	r0, sp
    8db8:	bl	8cfc <ExFatFile::ls(Print*, unsigned char, unsigned char)>
      }
    }
    file.close();
    8dbc:	mov	r0, sp
    8dbe:	bl	822c <ExFatFile::close()>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    8dc2:	movs	r2, #0
    8dc4:	mov	r1, r9
    8dc6:	mov	r0, sp
    8dc8:	bl	8c38 <ExFatFile::openNext(ExFatFile*, int)>
    8dcc:	cmp	r0, #0
    8dce:	bne.n	8d48 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x4c>
  void clearWriteError() {
    m_error &= ~WRITE_ERROR;
  }
  /** \return All error bits. */
  uint8_t getError() {
    return isOpen() ? m_error : 0XFF;
    8dd0:	ldrb.w	r3, [r9, #49]	; 0x31
    8dd4:	cmp	r3, #0
    8dd6:	beq.n	8d1a <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x1e>
        file.ls(pr, flags, indent + 2);
      }
    }
    file.close();
  }
  if (getError()) {
    8dd8:	ldrb.w	r0, [r9, #50]	; 0x32
    8ddc:	clz	r0, r0
    8de0:	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    8de2:	add	sp, #56	; 0x38
    8de4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
      if (file.isDir()) {
        pr->write('/');
    8de8:	ldr	r3, [r5, #0]
    8dea:	movs	r1, #47	; 0x2f
    8dec:	ldr	r3, [r3, #0]
    8dee:	mov	r0, r5
    8df0:	blx	r3
    8df2:	b.n	8d8a <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x8e>
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
        file.printFileSize(pr);
    8df4:	mov	r1, r5
    8df6:	mov	r0, sp
    8df8:	bl	8c78 <ExFatFile::printFileSize(Print*)>
        pr->write(' ');
    8dfc:	ldr	r3, [r5, #0]
    8dfe:	movs	r1, #32
    8e00:	ldr	r3, [r3, #0]
    8e02:	mov	r0, r5
    8e04:	blx	r3
    8e06:	b.n	8d78 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x7c>
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
    8e08:	mov	r1, r5
    8e0a:	mov	r0, sp
    8e0c:	bl	8cd8 <ExFatFile::printModifyDateTime(Print*)>
        pr->write(' ');
    8e10:	ldr	r3, [r5, #0]
    8e12:	movs	r1, #32
    8e14:	ldr	r3, [r3, #0]
    8e16:	mov	r0, r5
    8e18:	blx	r3
    8e1a:	b.n	8d72 <ExFatFile::ls(Print*, unsigned char, unsigned char)+0x76>

00008e1c <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    8e1c:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    8e1e:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    8e22:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    8e24:	ldr	r0, [r0, #4]
    8e26:	ldr	r1, [r4, #8]
    8e28:	ldr	r3, [r0, #0]
    8e2a:	ldr	r3, [r3, #24]
    8e2c:	blx	r3
    8e2e:	cbz	r0, 8e38 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    8e30:	ldrb	r3, [r4, #0]
    8e32:	bic.w	r3, r3, #1
    8e36:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    8e38:	pop	{r4, pc}
    8e3a:	nop

00008e3c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    8e3c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    8e3e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    8e42:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    8e44:	str	r3, [r0, #8]
    8e46:	bx	lr

00008e48 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    8e48:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    8e4a:	ldr	r5, [r0, #4]
    8e4c:	cbz	r5, 8e8e <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    8e4e:	ldr	r3, [r0, #8]
    8e50:	cmp	r3, r1
    8e52:	mov	r4, r0
    8e54:	mov	r7, r2
    8e56:	mov	r6, r1
    8e58:	beq.n	8e78 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8e5a:	ldrb	r3, [r0, #0]
    8e5c:	lsls	r2, r3, #31
    8e5e:	bmi.n	8e86 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    8e60:	lsls	r3, r7, #30
    8e62:	bpl.n	8e92 <FsCache::get(unsigned long, unsigned char)+0x4a>
    8e64:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8e68:	and.w	r2, r7, #1
    8e6c:	movs	r3, #0
    8e6e:	orrs	r3, r2
    8e70:	strb	r3, [r4, #0]
    8e72:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    8e74:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    8e76:	pop	{r3, r4, r5, r6, r7, pc}
    8e78:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8e7c:	and.w	r2, r7, #1
    8e80:	orrs	r3, r2
    8e82:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    8e84:	pop	{r3, r4, r5, r6, r7, pc}
    8e86:	bl	8e1c <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    8e8a:	cmp	r0, #0
    8e8c:	bne.n	8e60 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    8e8e:	movs	r0, #0
    8e90:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    8e92:	ldr	r0, [r4, #4]
    8e94:	ldr	r3, [r0, #0]
    8e96:	add.w	r5, r4, #12
    8e9a:	ldr	r3, [r3, #8]
    8e9c:	mov	r2, r5
    8e9e:	mov	r1, r6
    8ea0:	blx	r3
    8ea2:	cmp	r0, #0
    8ea4:	bne.n	8e68 <FsCache::get(unsigned long, unsigned char)+0x20>
    8ea6:	b.n	8e8e <FsCache::get(unsigned long, unsigned char)+0x46>

00008ea8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    8ea8:	push	{r3, r4, r5, lr}
    8eaa:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    8eac:	ldr.w	r1, [r0, #1052]	; 0x41c
    8eb0:	mov	r5, r2
    8eb2:	add.w	r1, r1, r4, lsr #7
    8eb6:	add.w	r0, r0, #524	; 0x20c
    8eba:	movs	r2, #0
    8ebc:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    8ec0:	cbz	r0, 8ed4 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    8ec2:	lsls	r4, r4, #2
    8ec4:	ubfx	r4, r4, #0, #9
    8ec8:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    8eca:	adds	r2, r3, #1
    8ecc:	beq.n	8ed8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    8ece:	str	r3, [r5, #0]
  return 1;
    8ed0:	movs	r0, #1
    8ed2:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    8ed4:	movs	r0, #255	; 0xff
    8ed6:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    8ed8:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    8eda:	pop	{r3, r4, r5, pc}

00008edc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    8edc:	push	{r3, r4, r5, lr}
    8ede:	mov	r4, r1
    8ee0:	ldr.w	r1, [r0, #1052]	; 0x41c
    8ee4:	mov	r5, r2
    8ee6:	add.w	r1, r1, r4, lsr #7
    8eea:	add.w	r0, r0, #524	; 0x20c
    8eee:	movs	r2, #1
    8ef0:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    8ef4:	mov	r3, r0
    8ef6:	cbz	r0, 8f04 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    8ef8:	lsls	r4, r4, #2
    8efa:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    8efe:	movs	r0, #1
    8f00:	str	r5, [r3, r4]
    8f02:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    8f04:	pop	{r3, r4, r5, pc}
    8f06:	nop

00008f08 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8f08:	ldrb	r3, [r0, #0]
    8f0a:	lsls	r3, r3, #31
    8f0c:	bmi.n	8f12 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    8f0e:	movs	r0, #1
    8f10:	bx	lr
    8f12:	b.w	8e1c <FsCache::sync() [clone .part.2]>
    8f16:	nop

00008f18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    8f18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f1c:	mov	r8, r0
    8f1e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    8f20:	mov	fp, r1
    8f22:	cmp	r1, #0
    8f24:	beq.n	8fb0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    8f26:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    8f28:	ldr.w	r3, [r8, #1064]	; 0x428
    8f2c:	cmp	r7, r3
    8f2e:	bcs.n	8fa8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    8f30:	and.w	r5, r7, #7
    8f34:	movs	r3, #1
    8f36:	lsl.w	r5, r3, r5
    8f3a:	uxtb	r5, r5
    8f3c:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    8f40:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    8f42:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    8f44:	ldr.w	r1, [r8, #1060]	; 0x424
    8f48:	movs	r2, #0
    8f4a:	add.w	r1, r1, r4, lsr #12
    8f4e:	mov	r0, r8
    8f50:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    8f54:	cbz	r0, 8f88 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    8f56:	ldrb.w	r1, [r0, sl]
    8f5a:	b.n	8f72 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    8f5c:	cmp	r2, r9
    8f5e:	beq.n	8fb6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    8f60:	cmp	r7, r4
    8f62:	beq.n	8f86 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    8f64:	ldr.w	r2, [r8, #1064]	; 0x428
    8f68:	cmp	r4, r2
    8f6a:	bcs.n	8f9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    8f6c:	ands.w	r5, r3, #255	; 0xff
    8f70:	beq.n	8f8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    8f72:	adds	r4, #1
        if (!(mask & cache[i])) {
    8f74:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    8f76:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    8f7a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    8f7e:	beq.n	8f5c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    8f80:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    8f82:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    8f84:	bne.n	8f64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    8f86:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    8f88:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f8c:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    8f90:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    8f94:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    8f98:	bne.n	8f56 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    8f9a:	b.n	8fa0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    8f9c:	movs	r6, #0
    8f9e:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    8fa0:	mov.w	sl, #0
    8fa4:	movs	r5, #1
    8fa6:	b.n	8f44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    8fa8:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    8faa:	mov	sl, r7
    8fac:	movs	r5, #1
    8fae:	b.n	8f40 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    8fb0:	ldr.w	r7, [r0, #1048]	; 0x418
    8fb4:	b.n	8f28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    8fb6:	cmp.w	fp, #0
    8fba:	bne.n	8fc6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    8fbc:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    8fc0:	it	eq
    8fc2:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    8fc6:	adds	r0, r6, #2
    8fc8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008fcc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    8fcc:	push	{r3, r4, r5, r6, r7, lr}
    8fce:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    8fd0:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    8fd2:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    8fd6:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    8fda:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    8fde:	str	r1, [r0, #4]
    8fe0:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    8fe4:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    8fe6:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    8fe8:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    8fec:	strb	r3, [r4, #0]
    8fee:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    8ff2:	str	r6, [r4, #8]
    8ff4:	str.w	r6, [r4, #532]	; 0x214
    8ff8:	mov	r2, r3
    8ffa:	mov	r1, r3
    8ffc:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    9000:	cmp	r5, #4
    9002:	bhi.n	901e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    9004:	mov	r6, r0
    9006:	cbz	r0, 901e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    9008:	cbnz	r5, 9022 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    900a:	movs	r2, #5
    900c:	ldr	r1, [pc, #152]	; (90a8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    900e:	adds	r0, r6, #3
    9010:	bl	1595c <strncmp>
    9014:	cbnz	r0, 901e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    9016:	ldrb.w	r3, [r6, #108]	; 0x6c
    901a:	cmp	r3, #9
    901c:	beq.n	9052 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    901e:	movs	r0, #0
    9020:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    9022:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    9024:	add.w	r3, r0, r3, lsl #4
    9028:	ldrb.w	r2, [r3, #446]	; 0x1be
    902c:	ands.w	r2, r2, #127	; 0x7f
    9030:	bne.n	901e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    9032:	ldrb.w	r3, [r3, #450]	; 0x1c2
    9036:	cmp	r3, #0
    9038:	beq.n	901e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    903a:	add.w	r5, r0, r5, lsl #4
    903e:	mov	r0, r7
    9040:	ldr.w	r5, [r5, #438]	; 0x1b6
    9044:	mov	r1, r5
    9046:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    904a:	mov	r6, r0
    904c:	cmp	r0, #0
    904e:	bne.n	900a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    9050:	b.n	901e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    9052:	ldr	r3, [r6, #80]	; 0x50
    9054:	add	r3, r5
    9056:	str.w	r3, [r4, #1052]	; 0x41c
    905a:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    905c:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    9060:	ldr	r3, [r6, #88]	; 0x58
    9062:	add	r5, r3
    9064:	str.w	r5, [r4, #1060]	; 0x424
    9068:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    906a:	str.w	r3, [r4, #1064]	; 0x428
    906e:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    9070:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    9074:	ldrb.w	r3, [r6, #109]	; 0x6d
    9078:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    907c:	movs	r5, #1
    907e:	adds	r3, #9
    9080:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    9084:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    9086:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    908a:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    908c:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    9090:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    9094:	mov	r0, r4
    9096:	mov	r2, r5
    9098:	bl	8f18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    909c:	movs	r3, #64	; 0x40
    909e:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    90a2:	mov	r0, r5

 fail:
  return false;
}
    90a4:	pop	{r3, r4, r5, r6, r7, pc}
    90a6:	nop
    90a8:	.word	0x000195b4

000090ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    90ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    90b0:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    90b2:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    90b4:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    90b8:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    90ba:	adds	r2, r1, r2
    90bc:	cmp	r2, r0
    90be:	bhi.n	9132 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    90c0:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    90c2:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    90c6:	cmp.w	sl, #0
    90ca:	bne.n	9138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    90cc:	cmp	r1, r3
      m_bitmapStart = start;
    90ce:	it	cc
    90d0:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    90d4:	and.w	r4, r1, #7
    90d8:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    90da:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    90de:	lsl.w	r4, r2, r4
    90e2:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    90e4:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    90e8:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    90ec:	movs	r2, #1
    90ee:	mov	r1, r9
    90f0:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    90f2:	add	r9, r2
    90f4:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    90f8:	cbz	r0, 9132 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    90fa:	adds	r7, r0, r6
    90fc:	add.w	r0, r0, #512	; 0x200
    9100:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    9104:	tst	r2, r4
    9106:	ite	ne
    9108:	movne	r6, #1
    910a:	moveq	r6, #0
    910c:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    910e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    9112:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    9116:	beq.n	9132 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    9118:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    911a:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    911e:	beq.n	914c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    9120:	ands.w	r4, r4, #255	; 0xff
    9124:	bne.n	9104 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    9126:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    9128:	mov	r6, r4
    912a:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    912e:	bne.n	9100 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    9130:	b.n	90ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    9132:	movs	r0, #0
    9134:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    9138:	cmp	r1, r3
    913a:	bhi.n	90d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    913c:	cmp	r2, r3
    913e:	bls.n	90d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    9140:	cmp	r2, r0
    9142:	it	cs
    9144:	movcs	r2, #0
    9146:	str.w	r2, [r8, #1048]	; 0x418
    914a:	b.n	90d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    914c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    914e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9152:	nop

00009154 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    9154:	push	{r4, r5, r6, lr}
    9156:	sub	sp, #8
    9158:	add	r6, sp, #8
    915a:	mov	r5, r0
    915c:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    9160:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9162:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    9166:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9168:	adds	r3, #1
    916a:	cmp	r1, r3
    916c:	bls.n	9174 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    916e:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    9170:	add	sp, #8
    9172:	pop	{r4, r5, r6, pc}
    9174:	mov	r2, r6
    9176:	mov	r0, r5
    9178:	bl	8ea8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    917c:	sxtb	r0, r0
    if (status < 0) return 0;
    917e:	cmp	r0, #0
    9180:	blt.n	916e <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    9182:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    9186:	bne.n	9162 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    9188:	mov	r0, r4
  } while (status);
  return n;
}
    918a:	add	sp, #8
    918c:	pop	{r4, r5, r6, pc}
    918e:	nop

00009190 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    9190:	push	{r3, r4, r5, r6, r7, lr}
    9192:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    9194:	ldmia.w	r6, {r3, r5}
    9198:	ldr.w	r1, [r0, #1072]	; 0x430
    919c:	ldr.w	r4, [r0, #1060]	; 0x424
    91a0:	ldrb.w	r7, [r0, #1085]	; 0x43d
    91a4:	ands	r1, r5
    91a6:	subs	r3, #2
    91a8:	add.w	r1, r4, r1, lsr #9
    91ac:	lsls	r3, r7
    91ae:	add	r1, r3
    91b0:	add.w	r0, r0, #524	; 0x20c
    91b4:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    91b8:	cbz	r0, 91c2 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    91ba:	ldr	r3, [r6, #4]
    91bc:	ubfx	r3, r3, #0, #9
    91c0:	add	r0, r3
}
    91c2:	pop	{r3, r4, r5, r6, r7, pc}

000091c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    91c4:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    91c6:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    91c8:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    91ca:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    91cc:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    91d0:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    91d2:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    91d6:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    91d8:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    91da:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    91dc:	uxtb	r3, r3
    91de:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    91e2:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    91e4:	cbz	r4, 91f6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    91e6:	ldrb	r3, [r5, #8]
    91e8:	cbz	r3, 91fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    91ea:	ldr	r3, [r5, #0]
    91ec:	adds	r3, #1
    91ee:	str	r3, [r5, #0]
    91f0:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    91f2:	cmp	r4, #0
    91f4:	bne.n	91e6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    91f6:	movs	r0, #1
    91f8:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    91fa:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    91fe:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9200:	adds	r3, #1
    9202:	cmp	r1, r3
    9204:	bls.n	920c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9206:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    920a:	pop	{r4, r5, r6, pc}
    920c:	mov	r2, r5
    920e:	mov	r0, r6
    9210:	bl	8ea8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9214:	sxtb	r0, r0
      if (status != 1) {
    9216:	cmp	r0, #1
    9218:	beq.n	91f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    921a:	pop	{r4, r5, r6, pc}

0000921c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    921c:	ldr.w	r3, [r0, #1064]	; 0x428
    9220:	adds	r3, #1
    9222:	cmp	r3, r1
    9224:	bcs.n	922a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    9226:	movs	r0, #255	; 0xff
    9228:	bx	lr
    922a:	b.w	8ea8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    922e:	nop

00009230 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9230:	cmp	r1, #1
    9232:	bls.n	9250 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    9234:	ldr.w	r3, [r0, #1064]	; 0x428
    9238:	adds	r3, #1
    923a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    923c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    923e:	bls.n	9248 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    9240:	movs	r0, #0
    9242:	ldr.w	r4, [sp], #4
    9246:	bx	lr
    9248:	ldr.w	r4, [sp], #4
    924c:	b.w	8edc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    9250:	movs	r0, #0
    9252:	bx	lr

00009254 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    9254:	push	{r4, r5, r6, r7, lr}
    9256:	mov	r4, r1
    9258:	sub	sp, #12
    925a:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    925c:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    925e:	ldr.w	r3, [r5, #1064]	; 0x428
    9262:	adds	r3, #1
    9264:	cmp	r4, r3
    9266:	bls.n	926e <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    9268:	movs	r0, #0
}
    926a:	add	sp, #12
    926c:	pop	{r4, r5, r6, r7, pc}
    926e:	add	r2, sp, #4
    9270:	mov	r1, r4
    9272:	mov	r0, r5
    9274:	bl	8ea8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    9278:	sxtb	r7, r0
    if (status < 0) {
    927a:	cmp	r7, #0
    927c:	blt.n	9268 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    927e:	cmp	r4, #1
    9280:	bls.n	9268 <ExFatPartition::freeChain(unsigned long)+0x14>
    9282:	ldr.w	r3, [r5, #1064]	; 0x428
    9286:	adds	r3, #1
    9288:	cmp	r4, r3
    928a:	bhi.n	9268 <ExFatPartition::freeChain(unsigned long)+0x14>
    928c:	movs	r2, #0
    928e:	mov	r1, r4
    9290:	mov	r0, r5
    9292:	bl	8edc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    9296:	cmp	r0, #0
    9298:	beq.n	9268 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    929a:	ldr	r3, [sp, #4]
    929c:	adds	r4, #1
    929e:	cmp	r4, r3
    92a0:	bne.n	92ba <ExFatPartition::freeChain(unsigned long)+0x66>
    92a2:	cmp	r7, #0
    92a4:	bne.n	925e <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    92a6:	mov	r3, r7
    92a8:	subs	r2, r4, r6
    92aa:	mov	r1, r6
    92ac:	mov	r0, r5
    92ae:	bl	90ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    92b2:	cmp	r0, #0
    92b4:	beq.n	9268 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    92b6:	add	sp, #12
    92b8:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    92ba:	subs	r2, r4, r6
    92bc:	mov	r1, r6
    92be:	movs	r3, #0
    92c0:	mov	r0, r5
    92c2:	bl	90ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    92c6:	cmp	r0, #0
    92c8:	beq.n	9268 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    92ca:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    92cc:	cmp	r7, #0
    92ce:	beq.n	926a <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    92d0:	mov	r6, r4
    92d2:	b.n	925e <ExFatPartition::freeChain(unsigned long)+0xa>

000092d4 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    92d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    92d8:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    92da:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    92de:	mov	r8, r0
    92e0:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    92e4:	mov	r5, r4
    92e6:	mov	r1, r6
    92e8:	movs	r2, #0
    92ea:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    92ec:	adds	r6, #1
    92ee:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    92f2:	cbz	r0, 9342 <ExFatPartition::freeClusterCount()+0x6e>
    92f4:	add.w	lr, r0, #4294967295
    92f8:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    92fc:	ldrb.w	r0, [lr, #1]!
    9300:	cmp	r0, #255	; 0xff
    9302:	add.w	r9, r5, #4096	; 0x1000
    9306:	beq.n	9330 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    9308:	cbz	r0, 931e <ExFatPartition::freeClusterCount()+0x4a>
    930a:	movs	r2, #8
    930c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    930e:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9310:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    9314:	it	ne
    9316:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9318:	subs	r2, #1
    931a:	uxtb	r3, r1
    931c:	bne.n	930e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    931e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9320:	cmp	ip, r5
    9322:	bls.n	933a <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    9324:	cmp	r5, r9
    9326:	beq.n	92e6 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    9328:	ldrb.w	r0, [lr, #1]!
    932c:	cmp	r0, #255	; 0xff
    932e:	bne.n	9308 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9330:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9332:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    9334:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    9338:	bhi.n	9324 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    933a:	rsb	r0, r4, ip
    933e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    9342:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9346:	nop

00009348 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    9348:	push	{r4, lr}
    934a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    934c:	ldr.w	r1, [r0, #1068]	; 0x42c
    9350:	bl	9154 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    9354:	ldrb.w	r3, [r4, #1085]	; 0x43d
    9358:	adds	r3, #9
    935a:	uxtb	r3, r3
}
    935c:	lsls	r0, r3
    935e:	pop	{r4, pc}

00009360 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9360:	cbz	r1, 9396 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    9362:	push	{r4}
    9364:	add	r1, r0
    9366:	lsls	r3, r2, #15
    9368:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    936c:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    9370:	sub.w	r4, r2, #97	; 0x61
    9374:	cmp	r4, #25
      c -= 'a' - 'A';
    9376:	itt	ls
    9378:	subls	r2, #32
    937a:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    937c:	uxtah	r2, r2, r3
    9380:	uxth	r2, r2
    9382:	lsls	r3, r2, #15
    9384:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9388:	cmp	r1, r0
    938a:	uxth	r2, r2
    938c:	bne.n	9366 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    938e:	mov	r0, r2
    9390:	ldr.w	r4, [sp], #4
    9394:	bx	lr
    9396:	mov	r0, r2
    9398:	bx	lr
    939a:	nop

0000939c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    939c:	cbz	r3, 93f0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    939e:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    93a0:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    93a2:	cmp	r4, #126	; 0x7e
    93a4:	bhi.n	93e4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    93a6:	add	r3, r2
    93a8:	adds	r5, r1, r3
    93aa:	add	r2, r1
    93ac:	adds	r0, #2
    93ae:	ldrb.w	r3, [r2], #1
    93b2:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    93b4:	sub.w	r1, r3, #97	; 0x61
    93b8:	cmp	r1, #25
    93ba:	sub.w	r1, r4, #97	; 0x61
    93be:	ite	ls
    93c0:	movls	r6, #32
    93c2:	movhi	r6, #0
    93c4:	cmp	r1, #25
    93c6:	ite	ls
    93c8:	movls	r1, #32
    93ca:	movhi	r1, #0
    93cc:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    93ce:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    93d0:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    93d2:	uxtb	r4, r4
    93d4:	cmp	r4, r3
    93d6:	bne.n	93e4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    93d8:	cmp	r2, r5
    93da:	beq.n	93ea <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    93dc:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    93e0:	cmp	r4, #126	; 0x7e
    93e2:	bls.n	93ae <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    93e4:	movs	r0, #0
    }
  }
  return true;
}
    93e6:	pop	{r4, r5, r6}
    93e8:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    93ea:	movs	r0, #1
}
    93ec:	pop	{r4, r5, r6}
    93ee:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    93f0:	movs	r0, #1
}
    93f2:	bx	lr

000093f4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    93f4:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    93f6:	push	{r3, r4, r5, r6, r7, lr}
    93f8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    93fa:	ldr	r0, [r0, #32]
    93fc:	cbz	r1, 9400 <ExFatFile::addCluster()+0xc>
    93fe:	adds	r1, #1
    9400:	movs	r2, #1
    9402:	bl	8f18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    9406:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9408:	mov	r6, r0
  if (find < 2) {
    940a:	bls.n	946c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    940c:	movs	r3, #1
    940e:	mov	r1, r0
    9410:	mov	r2, r3
    9412:	ldr	r0, [r4, #32]
    9414:	bl	90ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9418:	mov	r7, r0
    941a:	cbz	r0, 946c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    941c:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    941e:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9422:	cbz	r0, 9472 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    9424:	lsls	r2, r3, #25
    9426:	bpl.n	9450 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    9428:	adds	r2, r0, #1
    942a:	cmp	r6, r2
    942c:	beq.n	947a <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    942e:	bic.w	r2, r3, #64	; 0x40
    9432:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9436:	ldr	r3, [r4, #28]
    9438:	b.n	9446 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    943a:	ldr	r0, [r4, #32]
    943c:	bl	9230 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9440:	cbz	r0, 946c <ExFatFile::addCluster()+0x78>
    9442:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9444:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    9446:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9448:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    944a:	mov	r1, r3
    944c:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    944e:	bcc.n	943a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    9450:	mov.w	r2, #4294967295
    9454:	mov	r1, r6
    9456:	ldr	r0, [r4, #32]
    9458:	bl	9230 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    945c:	cbz	r0, 946c <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    945e:	ldr	r1, [r4, #24]
    9460:	cbz	r1, 947a <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    9462:	mov	r2, r6
    9464:	ldr	r0, [r4, #32]
    9466:	bl	9230 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    946a:	cbnz	r0, 947a <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    946c:	movs	r7, #0
}
    946e:	mov	r0, r7
    9470:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9472:	orr.w	r3, r3, #64	; 0x40
    9476:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    947a:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    947c:	mov	r0, r7
    947e:	pop	{r3, r4, r5, r6, r7, pc}

00009480 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9480:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    9484:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9488:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    948a:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    948e:	sub	sp, #20
    9490:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    9494:	add	r6, sp, #4
    9496:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    949a:	lsls	r2, r3, #30
    949c:	bpl.n	94d6 <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    949e:	ldr	r1, [r5, #28]
    94a0:	cbnz	r1, 94de <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    94a2:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    94a4:	movs	r2, #1
    94a6:	mov	r1, r6
    94a8:	ldr	r0, [r5, #32]
    94aa:	bl	9190 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    94ae:	adds	r4, #1
    94b0:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    94b2:	cbz	r0, 94d6 <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    94b4:	ldrb	r3, [r0, #0]
    94b6:	and.w	r3, r3, #127	; 0x7f
    94ba:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    94bc:	ldrb.w	r3, [r5, #48]	; 0x30
    94c0:	cmp	r3, r4
    94c2:	bcc.n	9528 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    94c4:	cmp	r4, #0
    94c6:	beq.n	94a4 <ExFatFile::remove()+0x24>
    94c8:	movs	r2, #32
    94ca:	mov	r1, r6
    94cc:	ldr	r0, [r5, #32]
    94ce:	bl	91c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    94d2:	cmp	r0, #1
    94d4:	beq.n	94a4 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    94d6:	movs	r0, #0
}
    94d8:	add	sp, #20
    94da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    94de:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    94e0:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    94e2:	bpl.n	951e <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    94e4:	ldrd	r2, r3, [r5, #8]
    94e8:	ldrb.w	r4, [r0, #1085]	; 0x43d
    94ec:	adds	r4, #9
    94ee:	uxtb	r4, r4
    94f0:	adds.w	r8, r2, #4294967295
    94f4:	adc.w	r9, r3, #4294967295
    94f8:	rsb	r7, r4, #32
    94fc:	lsl.w	r7, r9, r7
    9500:	lsr.w	r2, r8, r4
    9504:	sub.w	r3, r4, #32
    9508:	lsr.w	r3, r9, r3
    950c:	orrs	r2, r7
    950e:	orrs	r2, r3
    9510:	adds	r2, #1
    9512:	movs	r3, #0
    9514:	bl	90ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9518:	cmp	r0, #0
    951a:	bne.n	94a2 <ExFatFile::remove()+0x22>
    951c:	b.n	94d6 <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    951e:	bl	9254 <ExFatPartition::freeChain(unsigned long)>
    9522:	cmp	r0, #0
    9524:	bne.n	94a2 <ExFatFile::remove()+0x22>
    9526:	b.n	94d6 <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    9528:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    952a:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    952c:	mov	r0, r4
    952e:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    9532:	strb.w	r3, [r5, #51]	; 0x33
    9536:	bl	8f08 <FsCache::sync()>
    953a:	cmp	r0, #0
    953c:	beq.n	94d6 <ExFatFile::remove()+0x56>
    953e:	add.w	r0, r4, #524	; 0x20c
    9542:	bl	8f08 <FsCache::sync()>
    9546:	cmp	r0, #0
    9548:	beq.n	94d6 <ExFatFile::remove()+0x56>
    954a:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    954e:	ldr	r3, [r0, #0]
    9550:	ldr	r3, [r3, #20]
    9552:	blx	r3
    9554:	b.n	94d8 <ExFatFile::remove()+0x58>
    9556:	nop

00009558 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    9558:	ldrb.w	r3, [r0, #49]	; 0x31
    955c:	lsls	r1, r3, #27
    955e:	bmi.n	9564 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    9560:	movs	r0, #0
}
    9562:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    9564:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    9566:	movs	r2, #0
    9568:	sub	sp, #32
    956a:	movs	r3, #0
    956c:	mov	r4, r0
    956e:	bl	8654 <ExFatFile::seekSet(unsigned long long)>
    9572:	b.n	9582 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    9574:	cmp	r0, #32
    9576:	bne.n	95ac <ExFatFile::rmdir()+0x54>
    9578:	ldrb.w	r3, [sp]
    957c:	lsls	r2, r3, #24
    957e:	bmi.n	95ac <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    9580:	cbz	r3, 9590 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    9582:	movs	r2, #32
    9584:	mov	r1, sp
    9586:	mov	r0, r4
    9588:	bl	8484 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    958c:	cmp	r0, #0
    958e:	bne.n	9574 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    9590:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9594:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    9596:	orr.w	r3, r3, #2
    959a:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    959e:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    95a2:	mov	r0, r4
    95a4:	bl	9480 <ExFatFile::remove()>

fail:
  return false;
}
    95a8:	add	sp, #32
    95aa:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    95ac:	movs	r0, #0
}
    95ae:	add	sp, #32
    95b0:	pop	{r4, pc}
    95b2:	nop

000095b4 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    95b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    95b8:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    95bc:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    95be:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    95c2:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    95c4:	add.w	r8, sp, #12
    95c8:	stmia.w	r8, {r0, r1, r2}
    95cc:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    95ce:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    95d0:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    95d2:	movs	r2, #0
    95d4:	mov	r1, r8
    95d6:	ldr	r0, [r6, #32]
    95d8:	bl	9190 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    95dc:	uxtb.w	r9, r7
    if (!cache) {
    95e0:	mov	r5, r0
    95e2:	cbz	r0, 95f2 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    95e4:	ldrb	r2, [r0, #0]
    95e6:	cmp	r2, #192	; 0xc0
    95e8:	beq.n	9690 <ExFatFile::syncDir()+0xdc>
    95ea:	cmp	r2, #193	; 0xc1
    95ec:	beq.n	9606 <ExFatFile::syncDir()+0x52>
    95ee:	cmp	r2, #133	; 0x85
    95f0:	beq.n	9646 <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    95f2:	ldrb.w	r3, [r6, #50]	; 0x32
    95f6:	orr.w	r3, r3, #1
    95fa:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    95fe:	movs	r0, #0
}
    9600:	add	sp, #28
    9602:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9606:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9608:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    960a:	ldrb	r2, [r5, r1]
    960c:	lsls	r3, r4, #15
    960e:	orr.w	r4, r3, r4, lsr #1
    9612:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    9616:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    9618:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    961a:	add.w	r1, r1, #1
    961e:	beq.n	963c <ExFatFile::syncDir()+0x88>
    9620:	cmp	r1, #31
    9622:	bls.n	960a <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    9624:	cmp	sl, r9
    9626:	beq.n	96cc <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    9628:	movs	r2, #32
    962a:	mov	r1, r8
    962c:	ldr	r0, [r6, #32]
    962e:	bl	91c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9632:	cmp	r0, #1
    9634:	add.w	r7, r7, #1
    9638:	beq.n	95d2 <ExFatFile::syncDir()+0x1e>
    963a:	b.n	95f2 <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    963c:	cmp	r0, #133	; 0x85
    963e:	ite	eq
    9640:	moveq	r1, #4
    9642:	movne	r1, #2
    9644:	b.n	960a <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9646:	ldr	r3, [pc, #192]	; (9708 <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9648:	ldrb.w	r1, [r6, #49]	; 0x31
    964c:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    964e:	ldrb.w	sl, [r0, #1]
    9652:	and.w	r1, r1, #55	; 0x37
    9656:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    9658:	cmp	r3, #0
    965a:	beq.n	9606 <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    965c:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    965e:	ldrb.w	r2, [r1, #524]	; 0x20c
    9662:	orr.w	r2, r2, #1
    9666:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    966a:	add	r0, sp, #8
    966c:	add.w	r2, sp, #7
    9670:	add.w	r1, sp, #10
    9674:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    9676:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    967a:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    967e:	ldrb.w	r1, [sp, #7]
    9682:	strb	r1, [r5, #21]
    9684:	strh	r2, [r5, #12]
    9686:	strh	r2, [r5, #16]
    9688:	strh	r3, [r5, #14]
    968a:	strh	r3, [r5, #18]
    968c:	ldrb	r0, [r5, #0]
    968e:	b.n	9608 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    9690:	ldrb.w	r3, [r6, #51]	; 0x33
    9694:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    9698:	ldrb	r3, [r0, #1]
    969a:	ite	ne
    969c:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    96a0:	biceq.w	r3, r3, #2
    96a4:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    96a6:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    96aa:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    96ae:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    96b2:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    96b4:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    96b6:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    96ba:	ldr	r2, [r6, #32]
    96bc:	ldrb.w	r3, [r2, #524]	; 0x20c
    96c0:	orr.w	r3, r3, #1
    96c4:	strb.w	r3, [r2, #524]	; 0x20c
    96c8:	ldrb	r0, [r0, #0]
    96ca:	b.n	9608 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    96cc:	mov	r1, fp
    96ce:	movs	r2, #1
    96d0:	ldr	r0, [r6, #32]
    96d2:	bl	9190 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    96d6:	cmp	r0, #0
    96d8:	beq.n	95f2 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    96da:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    96dc:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    96de:	mov	r0, r5
    96e0:	bl	8f08 <FsCache::sync()>
    96e4:	cmp	r0, #0
    96e6:	beq.n	95f2 <ExFatFile::syncDir()+0x3e>
    96e8:	add.w	r0, r5, #524	; 0x20c
    96ec:	bl	8f08 <FsCache::sync()>
    96f0:	cmp	r0, #0
    96f2:	beq.w	95f2 <ExFatFile::syncDir()+0x3e>
    96f6:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    96fa:	ldr	r3, [r0, #0]
    96fc:	ldr	r3, [r3, #20]
    96fe:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9700:	cmp	r0, #0
    9702:	beq.w	95f2 <ExFatFile::syncDir()+0x3e>
    9706:	b.n	9600 <ExFatFile::syncDir()+0x4c>
    9708:	.word	0x1fff2acc

0000970c <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    970c:	ldrb.w	r2, [r0, #49]	; 0x31
    9710:	cbz	r2, 9738 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    9712:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    9714:	ldrb.w	r2, [r0, #51]	; 0x33
    9718:	lsls	r1, r2, #24
    971a:	bmi.n	973c <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    971c:	ldr	r5, [r0, #32]
    971e:	mov	r4, r0
    9720:	mov	r0, r5
    9722:	bl	8f08 <FsCache::sync()>
    9726:	cbnz	r0, 974c <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    9728:	ldrb.w	r3, [r4, #50]	; 0x32
    972c:	orr.w	r3, r3, #1
    9730:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    9734:	movs	r0, #0
}
    9736:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    9738:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    973a:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    973c:	and.w	r2, r2, #127	; 0x7f
    9740:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    9744:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    9748:	b.w	95b4 <ExFatFile::syncDir()>
    974c:	add.w	r0, r5, #524	; 0x20c
    9750:	bl	8f08 <FsCache::sync()>
    9754:	cmp	r0, #0
    9756:	beq.n	9728 <ExFatFile::sync()+0x1c>
    9758:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    975c:	ldr	r3, [r0, #0]
    975e:	ldr	r3, [r3, #20]
    9760:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9762:	cmp	r0, #0
    9764:	beq.n	9728 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    9766:	movs	r0, #1
    9768:	pop	{r3, r4, r5, pc}
    976a:	nop

0000976c <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    976c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9770:	ldrb.w	r3, [r0, #49]	; 0x31
    9774:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    9776:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9778:	bmi.n	9842 <ExFatFile::addDirCluster()+0xd6>
    977a:	ldr	r0, [r0, #8]
    977c:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    977e:	ldr.w	r3, [r3, #1076]	; 0x434
    9782:	add	r0, r3
    9784:	cmp.w	r0, #67108864	; 0x4000000
    9788:	bcc.n	9790 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    978a:	movs	r0, #0
    978c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    9790:	mov	r0, r4
    9792:	bl	93f4 <ExFatFile::addCluster()>
    9796:	cmp	r0, #0
    9798:	beq.n	978a <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    979a:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    979c:	ldrb.w	r3, [r6, #524]	; 0x20c
    97a0:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    97a2:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    97a6:	bmi.n	984a <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    97a8:	mov	r0, r5
    return m_cacheBuffer;
    97aa:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    97ae:	bl	8e3c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    97b2:	mov.w	r2, #512	; 0x200
    97b6:	movs	r1, #0
    97b8:	mov	r0, r6
    97ba:	bl	14e3c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    97be:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    97c0:	ldr	r3, [r4, #24]
    97c2:	ldrb.w	r0, [r2, #1085]	; 0x43d
    97c6:	ldr.w	r1, [r2, #1060]	; 0x424
    97ca:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    97ce:	movs	r7, #1
    97d0:	lsl.w	r8, r8, r0
    97d4:	lsls.w	r3, r7, r0
    97d8:	add	r8, r1
    97da:	it	ne
    97dc:	movne	r5, #0
    97de:	beq.n	9804 <ExFatFile::addDirCluster()+0x98>
    97e0:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    97e4:	ldr	r3, [r0, #0]
    97e6:	add.w	r1, r8, r5
    97ea:	ldr	r3, [r3, #24]
    97ec:	mov	r2, r6
    97ee:	blx	r3
    97f0:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    97f2:	cmp	r0, #0
    97f4:	beq.n	978a <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    97f6:	ldr	r2, [r4, #32]
    97f8:	ldrb.w	r3, [r2, #1085]	; 0x43d
    97fc:	lsl.w	r3, r7, r3
    9800:	cmp	r3, r5
    9802:	bhi.n	97e0 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    9804:	ldrb.w	r3, [r4, #49]	; 0x31
    9808:	lsls	r3, r3, #25
    980a:	bmi.n	9838 <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    980c:	ldrb.w	r3, [r4, #51]	; 0x33
    9810:	orn	r3, r3, #127	; 0x7f
    9814:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    9818:	ldr.w	r6, [r2, #1076]	; 0x434
    981c:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    9820:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    9824:	adds	r2, r2, r6
    9826:	mov.w	r7, #0
    982a:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    982c:	adds	r0, r0, r6
    982e:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    9830:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    9834:	strd	r0, r1, [r4, #16]
  }
  return sync();
    9838:	mov	r0, r4

 fail:
  return false;
}
    983a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    983e:	b.w	970c <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    9842:	ldr	r0, [r0, #32]
    9844:	bl	9348 <ExFatPartition::rootLength()>
    9848:	b.n	977c <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    984a:	mov	r0, r5
    984c:	bl	8f08 <FsCache::sync()>
    9850:	cmp	r0, #0
    9852:	bne.n	97a8 <ExFatFile::addDirCluster()+0x3c>
    9854:	b.n	978a <ExFatFile::addDirCluster()+0x1e>
    9856:	nop

00009858 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    9858:	ldrb.w	r3, [r1, #49]	; 0x31
    985c:	tst.w	r3, #80	; 0x50
    9860:	bne.n	9866 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    9862:	movs	r0, #0
    9864:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    9866:	push	{r4, r5, lr}
    9868:	sub	sp, #12
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    986a:	movw	r5, #2562	; 0xa02
    986e:	ldrb	r3, [r2, #0]
    9870:	ldr	r2, [r2, #4]
    9872:	str	r5, [sp, #0]
    9874:	mov	r4, r0
    9876:	bl	8754 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    987a:	cbnz	r0, 9882 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    987c:	movs	r0, #0
    987e:	add	sp, #12
    9880:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    9882:	movs	r3, #16
    9884:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    9888:	mov	r0, r4
    988a:	bl	976c <ExFatFile::addDirCluster()>
    988e:	cmp	r0, #0
    9890:	beq.n	987c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    9892:	ldr	r3, [r4, #24]
    9894:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    9896:	movs	r2, #0
    9898:	movs	r3, #0
    989a:	mov	r0, r4
    989c:	bl	8654 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    98a0:	movs	r3, #193	; 0xc1
  return sync();
    98a2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    98a4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    98a8:	add	sp, #12
    98aa:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    98ae:	b.w	970c <ExFatFile::sync()>
    98b2:	nop

000098b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    98b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    98b8:	mov	r6, r0
    98ba:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    98bc:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    98c0:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    98c2:	movs	r0, #0
    98c4:	strb.w	r0, [sp, #73]	; 0x49
    98c8:	strb.w	r0, [sp, #74]	; 0x4a
    98cc:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    98d0:	cbnz	r5, 98e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    98d2:	mov	r9, r3
    98d4:	ldrb.w	r3, [r1, #49]	; 0x31
    98d8:	tst.w	r3, #80	; 0x50
    98dc:	mov	r4, r1
    98de:	bne.n	98e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    98e0:	movs	r0, #0
}
    98e2:	add	sp, #84	; 0x54
    98e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    98e8:	ldrb	r3, [r2, #0]
    98ea:	cmp	r3, #47	; 0x2f
    98ec:	mov	r1, r2
    98ee:	beq.n	995e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    98f0:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    98f4:	add	r3, sp, #12
    98f6:	add	r2, sp, #16
    98f8:	mov	r0, r6
    98fa:	bl	8310 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    98fe:	cmp	r0, #0
    9900:	beq.n	98e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    9902:	ldr	r3, [sp, #12]
    9904:	ldrb	r3, [r3, #0]
    9906:	cmp	r3, #0
    9908:	beq.n	997a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    990a:	ldrb.w	r3, [sp, #16]
    990e:	ldr	r2, [sp, #20]
    9910:	str.w	r8, [sp]
    9914:	mov	r1, r4
    9916:	mov	r0, r6
    9918:	bl	8754 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    991c:	cbnz	r0, 9932 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    991e:	cmp.w	r9, #0
    9922:	beq.n	98e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    9924:	mov	r1, r4
    9926:	add	r2, sp, #16
    9928:	mov	r0, r6
    992a:	bl	9858 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    992e:	cmp	r0, #0
    9930:	beq.n	98e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    9932:	mov	r4, r6
    9934:	add	r7, sp, #24
    9936:	add.w	lr, r6, #48	; 0x30
    993a:	ldr	r0, [r4, #0]
    993c:	ldr	r1, [r4, #4]
    993e:	ldr	r2, [r4, #8]
    9940:	ldr	r3, [r4, #12]
    9942:	mov	r5, r7
    9944:	stmia	r5!, {r0, r1, r2, r3}
    9946:	adds	r4, #16
    9948:	cmp	r4, lr
    994a:	mov	r7, r5
    994c:	bne.n	993a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    994e:	ldr	r0, [r4, #0]
    9950:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    9952:	mov	r0, r6
    9954:	bl	822c <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    9958:	add	r4, sp, #24
    995a:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    995c:	b.n	98f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    995e:	adds	r1, #1
    9960:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    9962:	ldrb	r3, [r1, #0]
    9964:	cmp	r3, #47	; 0x2f
    9966:	beq.n	995e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    9968:	ldr	r1, [r4, #32]
    996a:	add	r0, sp, #24
    996c:	bl	82e8 <ExFatFile::openRoot(ExFatVolume*)>
    9970:	cmp	r0, #0
    9972:	beq.n	98e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    9974:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    9976:	add	r4, sp, #24
    9978:	b.n	98f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    997a:	add	r2, sp, #16
    997c:	mov	r1, r4
    997e:	mov	r0, r6
    9980:	bl	9858 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    9984:	add	sp, #84	; 0x54
    9986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    998a:	nop

0000998c <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    998c:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    998e:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    9992:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    9994:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    9996:	tst.w	r4, #24
    999a:	strb.w	r3, [sp, #49]	; 0x31
    999e:	strb.w	r3, [sp, #50]	; 0x32
    99a2:	strb.w	r3, [sp, #51]	; 0x33
    99a6:	strb.w	r3, [sp, #105]	; 0x69
    99aa:	strb.w	r3, [sp, #106]	; 0x6a
    99ae:	strb.w	r3, [sp, #107]	; 0x6b
    99b2:	beq.n	99bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    99b4:	ldr	r3, [r1, #32]
    99b6:	ldr	r4, [r0, #32]
    99b8:	cmp	r4, r3
    99ba:	beq.n	99c2 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    99bc:	movs	r0, #0
}
    99be:	add	sp, #116	; 0x74
    99c0:	pop	{r4, r5, r6, r7, pc}
    99c2:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    99c4:	movw	r3, #2561	; 0xa01
    99c8:	mov	r0, sp
    99ca:	bl	8b28 <ExFatFile::open(ExFatFile*, char const*, int)>
    99ce:	cmp	r0, #0
    99d0:	beq.n	99bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    99d2:	add	r7, sp, #56	; 0x38
    99d4:	mov	r5, r4
    99d6:	add.w	lr, r4, #48	; 0x30
    99da:	ldr	r0, [r5, #0]
    99dc:	ldr	r1, [r5, #4]
    99de:	ldr	r2, [r5, #8]
    99e0:	ldr	r3, [r5, #12]
    99e2:	mov	r6, r7
    99e4:	stmia	r6!, {r0, r1, r2, r3}
    99e6:	adds	r5, #16
    99e8:	cmp	r5, lr
    99ea:	mov	r7, r6
    99ec:	bne.n	99da <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    99ee:	ldr	r0, [r5, #0]
    99f0:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    99f2:	add	r3, sp, #36	; 0x24
    99f4:	ldmia.w	r3, {r0, r1, r2}
    99f8:	add.w	r3, r4, #36	; 0x24
    99fc:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    9a00:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    9a04:	ldrb.w	r2, [sp, #48]	; 0x30
    9a08:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    9a0c:	orn	r3, r3, #127	; 0x7f
    9a10:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    9a14:	mov	r0, r4
    9a16:	bl	970c <ExFatFile::sync()>
    9a1a:	cmp	r0, #0
    9a1c:	beq.n	99bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    9a1e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    9a20:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    9a22:	movs	r3, #8
  return oldFile.remove();
    9a24:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    9a26:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    9a28:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    9a2c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    9a30:	bl	9480 <ExFatFile::remove()>
    9a34:	b.n	99be <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    9a36:	nop

00009a38 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    9a38:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    9a3c:	lsls	r2, r3, #30
    9a3e:	bpl.n	9a72 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    9a40:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    9a42:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    9a44:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    9a46:	cbz	r5, 9a6c <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    9a48:	and.w	r3, r3, #64	; 0x40
    9a4c:	mov	r4, r0
    9a4e:	and.w	r0, r3, #255	; 0xff
    9a52:	cbnz	r3, 9a76 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    9a54:	ldr	r1, [r4, #24]
    9a56:	cmp	r1, #0
    9a58:	bne.n	9ade <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    9a5a:	str	r5, [sp, #4]
      m_firstCluster = 0;
    9a5c:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    9a5e:	mov	r1, r5
    9a60:	ldr	r0, [r4, #32]
    9a62:	bl	9254 <ExFatPartition::freeChain(unsigned long)>
    9a66:	cbnz	r0, 9ab6 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    9a68:	movs	r0, #0
    9a6a:	b.n	9a6e <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    9a6c:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    9a6e:	add	sp, #12
    9a70:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    9a72:	movs	r0, #0
}
    9a74:	bx	lr
    9a76:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    9a78:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    9a7a:	ldrb.w	r3, [r0, #1085]	; 0x43d
    9a7e:	ldrd	r6, r7, [r4, #8]
    9a82:	adds	r3, #9
    9a84:	uxtb	r3, r3
    9a86:	adds.w	r6, r6, #4294967295
    9a8a:	rsb	lr, r3, #32
    9a8e:	adc.w	r7, r7, #4294967295
    9a92:	lsr.w	r2, r6, r3
    9a96:	lsl.w	lr, r7, lr
    9a9a:	subs	r3, #32
    9a9c:	orr.w	r2, r2, lr
    9aa0:	lsr.w	r3, r7, r3
    9aa4:	orrs	r2, r3
    9aa6:	adds	r2, #1
    if (m_curCluster) {
    9aa8:	cbz	r1, 9ad8 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    9aaa:	subs	r5, #1
    9aac:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    9aae:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    9ab0:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    9ab2:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    9ab4:	cbnz	r2, 9afa <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    9ab6:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    9aba:	ldrb.w	r3, [r4, #51]	; 0x33
    9abe:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    9ac2:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    9ac6:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    9aca:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    9ace:	mov	r0, r4
    9ad0:	bl	970c <ExFatFile::sync()>

 fail:
  return false;
}
    9ad4:	add	sp, #12
    9ad6:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    9ad8:	str	r5, [sp, #4]
      m_firstCluster = 0;
    9ada:	str	r1, [r4, #28]
    9adc:	b.n	9ab4 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    9ade:	add	r2, sp, #8
    9ae0:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    9ae4:	ldr	r0, [r4, #32]
    9ae6:	bl	921c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    9aea:	sxtb	r0, r0
      if (fg < 0) {
    9aec:	cmp	r0, #0
    9aee:	blt.n	9a68 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    9af0:	bne.n	9b08 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    9af2:	ldr	r5, [sp, #4]
    9af4:	cmp	r5, #0
    9af6:	beq.n	9ab6 <ExFatFile::truncate()+0x7e>
    9af8:	b.n	9a5e <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    9afa:	movs	r3, #0
    9afc:	ldr	r1, [sp, #4]
    9afe:	bl	90ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9b02:	cmp	r0, #0
    9b04:	bne.n	9ab6 <ExFatFile::truncate()+0x7e>
    9b06:	b.n	9a68 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    9b08:	mov.w	r2, #4294967295
    9b0c:	ldr	r1, [r4, #24]
    9b0e:	ldr	r0, [r4, #32]
    9b10:	bl	9230 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9b14:	cmp	r0, #0
    9b16:	bne.n	9af2 <ExFatFile::truncate()+0xba>
    9b18:	b.n	9a68 <ExFatFile::truncate()+0x30>
    9b1a:	nop

00009b1c <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    9b1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b20:	ldrb.w	r3, [r0, #51]	; 0x33
    9b24:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    9b26:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    9b28:	mov	r6, r0
    9b2a:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    9b2c:	bmi.n	9b44 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    9b2e:	ldrb.w	r3, [r6, #50]	; 0x32
    9b32:	orr.w	r3, r3, #1
    9b36:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    9b3a:	mov.w	r0, #4294967295
}
    9b3e:	add	sp, #20
    9b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    9b44:	lsls	r2, r3, #28
    9b46:	mov	sl, r1
    9b48:	bmi.w	9d70 <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    9b4c:	ldr	r3, [sp, #4]
    9b4e:	cmp	r3, #0
    9b50:	beq.w	9d98 <ExFatFile::write(void const*, unsigned int)+0x27c>
    9b54:	mov	r1, r6
    9b56:	ldrd	r2, r3, [r1], #24
    9b5a:	ldr.w	r8, [sp, #4]
    9b5e:	str	r1, [sp, #12]
    9b60:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    9b62:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    9b64:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    9b66:	ldr.w	r4, [r0, #1072]	; 0x430
    9b6a:	mov	r3, fp
    9b6c:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    9b6e:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    9b72:	cbnz	r4, 9bc8 <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    9b74:	cmp	r5, #0
    9b76:	beq.w	9cf6 <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    9b7a:	ldrb.w	r3, [r6, #51]	; 0x33
    9b7e:	lsls	r3, r3, #25
    9b80:	bpl.w	9d3e <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    9b84:	ldrd	r2, r3, [r6, #8]
    9b88:	ldrb.w	r7, [r0, #1085]	; 0x43d
    9b8c:	adds	r7, #9
    9b8e:	uxtb	r7, r7
    9b90:	adds.w	r2, r2, #4294967295
    9b94:	adc.w	r3, r3, #4294967295
    9b98:	rsb	lr, r7, #32
    9b9c:	lsl.w	lr, r3, lr
    9ba0:	lsr.w	r1, r2, r7
    9ba4:	subs	r7, #32
    9ba6:	lsr.w	r7, r3, r7
    9baa:	orr.w	r1, r1, lr
    9bae:	ldr	r3, [r6, #28]
    9bb0:	orrs	r1, r7
    9bb2:	add	r3, r1
    9bb4:	cmp	r5, r3
    9bb6:	bcc.w	9d24 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    9bba:	mov	r0, r6
    9bbc:	bl	93f4 <ExFatFile::addCluster()>
    9bc0:	cmp	r0, #0
    9bc2:	beq.n	9b2e <ExFatFile::write(void const*, unsigned int)+0x12>
    9bc4:	ldr	r0, [r6, #32]
    9bc6:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    9bc8:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    9bcc:	ldrb.w	lr, [r0, #1085]	; 0x43d
    9bd0:	lsrs	r4, r4, #9
    9bd2:	subs	r5, #2
    9bd4:	adds	r1, r4, r7
    9bd6:	lsl.w	r5, r5, lr
    9bda:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    9bdc:	cmp.w	r9, #0
    9be0:	bne.w	9ce8 <ExFatFile::write(void const*, unsigned int)+0x1cc>
    9be4:	cmp.w	r8, #512	; 0x200
    9be8:	bcs.n	9c9a <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    9bea:	ldrd	r2, r3, [r6, #16]
    9bee:	ldrd	r4, r5, [r6]
    9bf2:	cmp.w	r8, #512	; 0x200
    9bf6:	mov	r7, r8
    9bf8:	it	cs
    9bfa:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    9bfe:	cmp	r5, r3
    9c00:	it	eq
    9c02:	cmpeq	r4, r2
    9c04:	ite	cc
    9c06:	movcc	r2, #1
    9c08:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    9c0a:	add.w	r0, r0, #524	; 0x20c
    9c0e:	bl	8e48 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    9c12:	cmp	r0, #0
    9c14:	beq.n	9b2e <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    9c16:	add	r0, r9
    9c18:	mov	r2, r7
    9c1a:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9c1c:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    9c1e:	bl	11bf8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9c22:	cmp.w	r9, #512	; 0x200
    9c26:	beq.w	9d4e <ExFatFile::write(void const*, unsigned int)+0x232>
    9c2a:	mov	r0, r7
    9c2c:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    9c2e:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    9c32:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    9c36:	adds.w	fp, r2, r0
    9c3a:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    9c3e:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    9c40:	mov	r2, fp
    9c42:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    9c44:	it	eq
    9c46:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    9c48:	add	sl, r7
    toWrite -= n;
    9c4a:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    9c4e:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    9c52:	bcs.n	9c68 <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    9c54:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    9c58:	mov	r4, ip
    9c5a:	mov	r3, fp
    9c5c:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    9c60:	orn	r1, r1, #127	; 0x7f
    9c64:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    9c68:	cmp.w	r8, #0
    9c6c:	bne.w	9b62 <ExFatFile::write(void const*, unsigned int)+0x46>
    9c70:	mov	r2, fp
    9c72:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    9c74:	ldrd	r0, r1, [r6, #8]
    9c78:	cmp	r1, r3
    9c7a:	it	eq
    9c7c:	cmpeq	r0, r2
    9c7e:	bcc.n	9d80 <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    9c80:	ldr	r3, [pc, #284]	; (9da0 <ExFatFile::write(void const*, unsigned int)+0x284>)
    9c82:	ldr	r3, [r3, #0]
    9c84:	cmp	r3, #0
    9c86:	beq.w	9d94 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9c8a:	ldrb.w	r3, [r6, #51]	; 0x33
    9c8e:	ldr	r0, [sp, #4]
    9c90:	orn	r3, r3, #127	; 0x7f
    9c94:	strb.w	r3, [r6, #51]	; 0x33
    9c98:	b.n	9b3e <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    9c9a:	cmp.w	r8, #1024	; 0x400
    9c9e:	bcc.n	9cfe <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    9ca0:	movs	r3, #1
    9ca2:	lsl.w	lr, r3, lr
    9ca6:	rsb	lr, r4, lr
    9caa:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    9cae:	mov.w	r4, r8, lsr #9
    9cb2:	cmp	r4, lr
    9cb4:	it	cs
    9cb6:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    9cb8:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    9cba:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    9cbe:	bhi.n	9cd4 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    9cc0:	adds	r2, r4, r1
    9cc2:	cmp	r2, r3
    9cc4:	bls.n	9cd4 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    9cc6:	add.w	r0, r0, #524	; 0x20c
    9cca:	str	r1, [sp, #8]
    9ccc:	bl	8e3c <FsCache::invalidate()>
    9cd0:	ldr	r0, [r6, #32]
    9cd2:	ldr	r1, [sp, #8]
    9cd4:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    9cd8:	ldr	r5, [r0, #0]
    9cda:	mov	r3, r4
    9cdc:	mov	r2, sl
    9cde:	ldr	r4, [r5, #28]
    9ce0:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    9ce2:	cmp	r0, #0
    9ce4:	bne.n	9c2a <ExFatFile::write(void const*, unsigned int)+0x10e>
    9ce6:	b.n	9b2e <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    9ce8:	rsb	r7, r9, #512	; 0x200
    9cec:	cmp	r7, r8
    9cee:	it	cs
    9cf0:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    9cf2:	movs	r2, #1
    9cf4:	b.n	9c0a <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    9cf6:	ldr	r5, [r6, #28]
    9cf8:	cbz	r5, 9d2a <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    9cfa:	str	r5, [r6, #24]
    9cfc:	b.n	9bc8 <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    9cfe:	ldr.w	r3, [r0, #532]	; 0x214
    9d02:	cmp	r1, r3
    9d04:	beq.n	9d60 <ExFatFile::write(void const*, unsigned int)+0x244>
    9d06:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    9d0a:	ldr	r3, [r0, #0]
    9d0c:	mov	r2, sl
    9d0e:	ldr	r3, [r3, #24]
    9d10:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    9d12:	cmp	r0, #0
    9d14:	beq.w	9b2e <ExFatFile::write(void const*, unsigned int)+0x12>
    9d18:	mov.w	r0, #512	; 0x200
    9d1c:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    9d1e:	mov.w	r7, #512	; 0x200
    9d22:	b.n	9c2e <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    9d24:	adds	r5, #1
    9d26:	str	r5, [r6, #24]
    9d28:	b.n	9bc8 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    9d2a:	mov	r0, r6
    9d2c:	bl	93f4 <ExFatFile::addCluster()>
    9d30:	cmp	r0, #0
    9d32:	beq.w	9b2e <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    9d36:	ldr	r5, [r6, #24]
    9d38:	str	r5, [r6, #28]
    9d3a:	ldr	r0, [r6, #32]
    9d3c:	b.n	9bc8 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9d3e:	mov	r1, r5
    9d40:	ldr	r2, [sp, #12]
    9d42:	bl	921c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    9d46:	cmp	r0, #0
    9d48:	bne.w	9bc4 <ExFatFile::write(void const*, unsigned int)+0xa8>
    9d4c:	b.n	9bba <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    9d4e:	ldr	r0, [r6, #32]
    9d50:	add.w	r0, r0, #524	; 0x20c
    9d54:	bl	8f08 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    9d58:	cmp	r0, #0
    9d5a:	bne.w	9c2a <ExFatFile::write(void const*, unsigned int)+0x10e>
    9d5e:	b.n	9b2e <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    9d60:	add.w	r0, r0, #524	; 0x20c
    9d64:	str	r1, [sp, #8]
    9d66:	bl	8e3c <FsCache::invalidate()>
    9d6a:	ldr	r0, [r6, #32]
    9d6c:	ldr	r1, [sp, #8]
    9d6e:	b.n	9d06 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    9d70:	ldrd	r2, r3, [r0, #16]
    9d74:	bl	8654 <ExFatFile::seekSet(unsigned long long)>
    9d78:	cmp	r0, #0
    9d7a:	beq.w	9b2e <ExFatFile::write(void const*, unsigned int)+0x12>
    9d7e:	b.n	9b4c <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9d80:	ldrb.w	r1, [r6, #51]	; 0x33
    9d84:	ldr	r0, [sp, #4]
    9d86:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    9d8a:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9d8e:	strb.w	r1, [r6, #51]	; 0x33
    9d92:	b.n	9b3e <ExFatFile::write(void const*, unsigned int)+0x22>
    9d94:	ldr	r0, [sp, #4]
    9d96:	b.n	9b3e <ExFatFile::write(void const*, unsigned int)+0x22>
    9d98:	ldrd	r2, r3, [r6]
    9d9c:	b.n	9c74 <ExFatFile::write(void const*, unsigned int)+0x158>
    9d9e:	nop
    9da0:	.word	0x1fff2acc

00009da4 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    9da4:	push	{r3, r4, r5, lr}
    9da6:	mov	r4, r0
    9da8:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    9daa:	movs	r2, #36	; 0x24
    9dac:	movs	r1, #0
    9dae:	bl	14e3c <memset>

  m_vol = vol;
    9db2:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    9db4:	ldrb	r3, [r5, #7]
    9db6:	cmp	r3, #16
    9db8:	beq.n	9dcc <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    9dba:	cmp	r3, #32
    9dbc:	bne.n	9dc8 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    9dbe:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    9dc0:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    9dc2:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    9dc4:	strb	r0, [r4, #2]
    9dc6:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    9dc8:	movs	r0, #0
}
    9dca:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    9dcc:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    9dce:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    9dd0:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    9dd2:	strb	r0, [r4, #2]
    9dd4:	pop	{r3, r4, r5, pc}
    9dd6:	nop

00009dd8 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    9dd8:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    9dda:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    9ddc:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    9de0:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    9de2:	mov	r1, r5
    9de4:	ldr	r0, [r0, #8]
    9de6:	bl	ae4c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    9dea:	cbz	r0, 9e02 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    9dec:	cbz	r5, 9e04 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    9dee:	ldr	r3, [r4, #16]
    9df0:	adds	r5, #1
    9df2:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    9df4:	ldrb	r3, [r4, #2]
    9df6:	it	ne
    9df8:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    9dfc:	orn	r3, r3, #127	; 0x7f
    9e00:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    9e02:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9e04:	ldrb	r3, [r4, #2]
    9e06:	orr.w	r3, r3, #64	; 0x40
    9e0a:	b.n	9dfc <FatFile::addCluster()+0x24>

00009e0c <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    9e0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    9e10:	ldrb	r3, [r0, #0]
    9e12:	and.w	r3, r3, #32
    9e16:	cbnz	r3, 9e24 <FatFile::addDirCluster()+0x18>
    9e18:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    9e1c:	ldr	r1, [r0, #20]
    9e1e:	ldr	r3, [pc, #124]	; (9e9c <FatFile::addDirCluster()+0x90>)
    9e20:	cmp	r1, r3
    9e22:	bls.n	9e2c <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    9e24:	movs	r6, #0
}
    9e26:	mov	r0, r6
    9e28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e2c:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    9e2e:	bl	9dd8 <FatFile::addCluster()>
    9e32:	mov	r6, r0
    9e34:	cmp	r0, #0
    9e36:	beq.n	9e24 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    9e38:	ldr	r1, [r5, #16]
    9e3a:	ldr	r0, [r5, #8]
    9e3c:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
    9e40:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    9e42:	ldr	r0, [r5, #8]
    9e44:	mov	r1, r7
    9e46:	adds	r0, #36	; 0x24
    9e48:	movs	r2, #5
    9e4a:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    9e4e:	mov	r8, r0
    9e50:	cmp	r0, #0
    9e52:	beq.n	9e24 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    9e54:	mov.w	r2, #512	; 0x200
    9e58:	mov	r1, r4
    9e5a:	bl	14e3c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    9e5e:	ldr	r3, [r5, #8]
    9e60:	ldrb	r2, [r3, #4]
    9e62:	cmp	r2, #1
    9e64:	bls.n	9e88 <FatFile::addDirCluster()+0x7c>
    9e66:	movs	r4, #1
    9e68:	b.n	9e72 <FatFile::addDirCluster()+0x66>
    9e6a:	ldr	r3, [r5, #8]
    9e6c:	ldrb	r2, [r3, #4]
    9e6e:	cmp	r2, r4
    9e70:	bls.n	9e88 <FatFile::addDirCluster()+0x7c>
    9e72:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    9e74:	ldr	r3, [r0, #0]
    9e76:	adds	r1, r4, r7
    9e78:	ldr	r3, [r3, #24]
    9e7a:	mov	r2, r8
    9e7c:	blx	r3
    9e7e:	adds	r4, #1
    9e80:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    9e82:	cmp	r0, #0
    9e84:	bne.n	9e6a <FatFile::addDirCluster()+0x5e>
    9e86:	b.n	9e24 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    9e88:	ldrb	r3, [r3, #6]
    9e8a:	ldr	r1, [r5, #20]
    9e8c:	mov.w	r2, #512	; 0x200
    9e90:	lsl.w	r3, r2, r3
    9e94:	uxtah	r3, r1, r3
    9e98:	str	r3, [r5, #20]
    9e9a:	b.n	9e26 <FatFile::addDirCluster()+0x1a>
    9e9c:	.word	0x001ffdff

00009ea0 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    9ea0:	push	{r4, lr}
    9ea2:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    9ea4:	ldr	r0, [r0, #8]
    9ea6:	mov	r2, r1
    9ea8:	adds	r0, #36	; 0x24
    9eaa:	ldr	r1, [r4, #24]
    9eac:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    9eb0:	cbz	r0, 9ebc <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    9eb2:	ldrh	r3, [r4, #4]
    9eb4:	and.w	r3, r3, #15
    9eb8:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    9ebc:	pop	{r4, pc}
    9ebe:	nop

00009ec0 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    9ec0:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    9ec2:	ldrsb.w	r3, [r0, #2]
    9ec6:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    9ec8:	sub	sp, #8
    9eca:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    9ecc:	blt.n	9f02 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    9ece:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9ed0:	add.w	r0, r5, #36	; 0x24
    9ed4:	bl	ad58 <FatCache::sync()>
    9ed8:	cbnz	r0, 9ee8 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    9eda:	ldrb	r3, [r4, #1]
    9edc:	orr.w	r3, r3, #1
    9ee0:	strb	r3, [r4, #1]
  return false;
    9ee2:	movs	r0, #0
}
    9ee4:	add	sp, #8
    9ee6:	pop	{r4, r5, r6, pc}
    9ee8:	add.w	r0, r5, #560	; 0x230
    9eec:	bl	ad58 <FatCache::sync()>
    9ef0:	cmp	r0, #0
    9ef2:	beq.n	9eda <FatFile::sync() [clone .part.40]+0x1a>
    9ef4:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9ef6:	ldr	r3, [r0, #0]
    9ef8:	ldr	r3, [r3, #20]
    9efa:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9efc:	cmp	r0, #0
    9efe:	beq.n	9eda <FatFile::sync() [clone .part.40]+0x1a>
    9f00:	b.n	9ee4 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    9f02:	movs	r1, #1
    9f04:	bl	9ea0 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    9f08:	mov	r5, r0
    9f0a:	cmp	r0, #0
    9f0c:	beq.n	9eda <FatFile::sync() [clone .part.40]+0x1a>
    9f0e:	ldrb	r3, [r0, #0]
    9f10:	cmp	r3, #229	; 0xe5
    9f12:	beq.n	9eda <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    9f14:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    9f16:	ldr	r2, [pc, #56]	; (9f50 <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    9f18:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    9f1a:	itt	mi
    9f1c:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    9f1e:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    9f20:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    9f22:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    9f24:	strh	r3, [r0, #26]
    9f26:	lsrs	r3, r3, #16
    9f28:	strh	r3, [r0, #20]
    9f2a:	cbz	r6, 9f46 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    9f2c:	add.w	r2, sp, #3
    9f30:	add.w	r1, sp, #6
    9f34:	add	r0, sp, #4
    9f36:	blx	r6
      setLe16(dir->modifyDate, date);
    9f38:	ldrh.w	r3, [sp, #4]
    9f3c:	ldrh.w	r2, [sp, #6]
    9f40:	strh	r3, [r5, #24]
    9f42:	strh	r3, [r5, #18]
    9f44:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    9f46:	ldrb	r3, [r4, #2]
    9f48:	and.w	r3, r3, #127	; 0x7f
    9f4c:	strb	r3, [r4, #2]
    9f4e:	b.n	9ece <FatFile::sync() [clone .part.40]+0xe>
    9f50:	.word	0x1fff2acc

00009f54 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    9f54:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9f56:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    9f58:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9f5a:	cbnz	r3, 9f66 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    9f5c:	movs	r3, #0
    9f5e:	strb	r3, [r4, #0]
  m_flags = 0;
    9f60:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    9f62:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    9f64:	pop	{r4, pc}
    9f66:	bl	9ec0 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    9f6a:	movs	r3, #0
    9f6c:	strb	r3, [r4, #0]
  m_flags = 0;
    9f6e:	strb	r3, [r4, #2]
  return rtn;
}
    9f70:	pop	{r4, pc}
    9f72:	nop

00009f74 <FatFile::dirEntry(DirFat_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    9f74:	push	{r3, r4, r5, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9f76:	ldrb	r3, [r0, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    9f78:	mov	r5, r0
    9f7a:	mov	r4, r1
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    9f7c:	cbnz	r3, 9fac <FatFile::dirEntry(DirFat_t*)+0x38>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    9f7e:	mov	r0, r5
    9f80:	movs	r1, #0
    9f82:	bl	9ea0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9f86:	cbz	r0, 9fb4 <FatFile::dirEntry(DirFat_t*)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
    9f88:	ldr	r1, [r0, #0]
    9f8a:	ldr	r2, [r0, #4]
    9f8c:	ldr	r3, [r0, #8]
    9f8e:	ldr	r5, [r0, #12]
    9f90:	str	r5, [r4, #12]
    9f92:	str	r1, [r4, #0]
    9f94:	str	r2, [r4, #4]
    9f96:	str	r3, [r4, #8]
    9f98:	ldr	r1, [r0, #16]
    9f9a:	ldr	r2, [r0, #20]
    9f9c:	ldr	r3, [r0, #24]
    9f9e:	ldr	r5, [r0, #28]
    9fa0:	str	r5, [r4, #28]
    9fa2:	str	r1, [r4, #16]
    9fa4:	str	r2, [r4, #20]
    9fa6:	str	r3, [r4, #24]
  return true;
    9fa8:	movs	r0, #1

fail:
  return false;
}
    9faa:	pop	{r3, r4, r5, pc}
    9fac:	bl	9ec0 <FatFile::sync() [clone .part.40]>
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
  DirFat_t* dir;
  // Make sure fields on device are correct.
  if (!sync()) {
    9fb0:	cmp	r0, #0
    9fb2:	bne.n	9f7e <FatFile::dirEntry(DirFat_t*)+0xa>
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
  return true;

fail:
  return false;
    9fb4:	movs	r0, #0
    9fb6:	pop	{r3, r4, r5, pc}

00009fb8 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    9fb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    9fbc:	ldrb	r5, [r1, #0]
    9fbe:	tst.w	r5, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    9fc2:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    9fc4:	bne.n	9fce <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    9fc6:	movs	r0, #0
    9fc8:	add	sp, #36	; 0x24
    9fca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    9fce:	movw	r3, #2562	; 0xa02
    9fd2:	mov	r4, r0
    9fd4:	mov	r5, r1
    9fd6:	bl	b734 <FatFile::open(FatFile*, fname_t*, int)>
    9fda:	cmp	r0, #0
    9fdc:	beq.n	9fc6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    9fde:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    9fe0:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    9fe2:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    9fe4:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    9fe6:	mov	r0, r4
    9fe8:	bl	9e0c <FatFile::addDirCluster()>
    9fec:	cmp	r0, #0
    9fee:	beq.n	9fc6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    9ff0:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    9ff2:	ldr	r2, [r4, #16]
    9ff4:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    9ff6:	cmp	r3, #0
    9ff8:	bne.n	a0e6 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    9ffa:	movs	r1, #1
    9ffc:	mov	r0, r4
    9ffe:	bl	9ea0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a002:	mov	r6, r0
    a004:	cmp	r0, #0
    a006:	beq.n	9fc6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    a008:	movs	r3, #16
    a00a:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a00c:	ldr	r2, [r0, #8]
    a00e:	ldr	r1, [r6, #4]
    a010:	ldr	r3, [r6, #12]
    a012:	ldr	r0, [r0, #0]
    a014:	ldrh.w	r8, [r6, #20]
    a018:	ldrh.w	r9, [r6, #26]
    a01c:	mov	r7, sp
    a01e:	stmia	r7!, {r0, r1, r2, r3}
    a020:	ldr	r1, [r6, #20]
    a022:	ldr	r2, [r6, #24]
    a024:	ldr	r3, [r6, #28]
    a026:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    a028:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a02a:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    a02c:	movs	r3, #46	; 0x2e
    a02e:	strb.w	r3, [r6, #-32]!
    a032:	add.w	r1, sp, #10
    a036:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    a038:	movs	r2, #32
    a03a:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    a03e:	cmp	r1, r3
    a040:	bne.n	a03a <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    a042:	ldr	r1, [r4, #32]
    a044:	ldr	r0, [r4, #8]
    a046:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    a04a:	ldr	r3, [r4, #8]
    a04c:	mov	r1, r0
    a04e:	movs	r2, #1
    a050:	add.w	r0, r3, #36	; 0x24
    a054:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    a058:	mov	lr, r0
    a05a:	cmp	r0, #0
    a05c:	beq.n	9fc6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    a05e:	mov	r7, r6
    a060:	strh.w	r8, [sp, #20]
    a064:	strh.w	r9, [sp, #26]
    a068:	ldmia	r7!, {r0, r1, r2, r3}
    a06a:	str.w	r0, [lr]
    a06e:	str.w	r1, [lr, #4]
    a072:	str.w	r2, [lr, #8]
    a076:	str.w	r3, [lr, #12]
    a07a:	ldmia	r7!, {r0, r1, r2, r3}
    a07c:	str.w	r0, [lr, #16]
    a080:	str.w	r1, [lr, #20]
    a084:	str.w	r2, [lr, #24]
    a088:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    a08c:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a08e:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    a092:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a094:	lsrs	r3, r3, #16
    a096:	mov	r5, r6
    a098:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    a09c:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    a0a0:	ldmia	r5!, {r0, r1, r2, r3}
    a0a2:	add.w	r6, lr, #32
    a0a6:	str.w	r0, [lr, #32]
    a0aa:	str	r1, [r6, #4]
    a0ac:	str	r2, [r6, #8]
    a0ae:	str	r3, [r6, #12]
    a0b0:	ldmia	r5!, {r0, r1, r2, r3}
    a0b2:	str	r0, [r6, #16]
    a0b4:	str	r1, [r6, #20]
    a0b6:	str	r2, [r6, #24]
    a0b8:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    a0ba:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a0bc:	add.w	r0, r4, #36	; 0x24
    a0c0:	bl	ad58 <FatCache::sync()>
    a0c4:	cmp	r0, #0
    a0c6:	beq.w	9fc6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    a0ca:	add.w	r0, r4, #560	; 0x230
    a0ce:	bl	ad58 <FatCache::sync()>
    a0d2:	cmp	r0, #0
    a0d4:	beq.w	9fc6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    a0d8:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a0da:	ldr	r3, [r0, #0]
    a0dc:	ldr	r3, [r3, #20]

fail:
  return false;
}
    a0de:	add	sp, #36	; 0x24
    a0e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a0e4:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a0e6:	ldr	r3, [r4, #20]
    a0e8:	cbz	r3, a0f8 <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a0ea:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a0ec:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a0ee:	bic.w	r3, r3, #32
    a0f2:	strb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a0f4:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    a0f6:	str	r2, [r4, #20]
    a0f8:	mov	r0, r4
    a0fa:	bl	9ec0 <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    a0fe:	cmp	r0, #0
    a100:	beq.w	9fc6 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    a104:	b.n	9ffa <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    a106:	nop

0000a108 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    a108:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a10c:	mov	r6, r0
    a10e:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a110:	ldrb	r5, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    a112:	str	r2, [sp, #4]
    a114:	movs	r0, #0
    a116:	strb.w	r0, [sp, #36]	; 0x24
    a11a:	strb.w	r0, [sp, #37]	; 0x25
    a11e:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a122:	cbnz	r5, a130 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    a124:	mov	r8, r3
    a126:	ldrb	r3, [r1, #0]
    a128:	tst.w	r3, #112	; 0x70
    a12c:	mov	r4, r1
    a12e:	bne.n	a138 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    a130:	movs	r0, #0
}
    a132:	add	sp, #72	; 0x48
    a134:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    a138:	ldrb	r3, [r2, #0]
    a13a:	cmp	r3, #47	; 0x2f
    a13c:	mov	r0, r2
    a13e:	beq.n	a196 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a140:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a142:	add	r2, sp, #4
    a144:	add	r1, sp, #12
    a146:	bl	b24c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a14a:	add	r2, sp, #12
    a14c:	mov	r1, r4
    a14e:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a150:	cmp	r0, #0
    a152:	beq.n	a130 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a154:	ldr	r5, [sp, #4]
    a156:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a158:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a15a:	cmp	r5, #0
    a15c:	beq.n	a1ba <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a15e:	bl	b734 <FatFile::open(FatFile*, fname_t*, int)>
    a162:	cbnz	r0, a178 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    a164:	cmp.w	r8, #0
    a168:	beq.n	a130 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    a16a:	mov	r1, r4
    a16c:	add	r2, sp, #12
    a16e:	mov	r0, r6
    a170:	bl	9fb8 <FatFile::mkdir(FatFile*, fname_t*)>
    a174:	cmp	r0, #0
    a176:	beq.n	a130 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a178:	mov	r5, r6
    a17a:	ldmia	r5!, {r0, r1, r2, r3}
    a17c:	add	r4, sp, #36	; 0x24
    a17e:	stmia	r4!, {r0, r1, r2, r3}
    a180:	ldmia	r5!, {r0, r1, r2, r3}
    a182:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a184:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a186:	ldr	r2, [r5, #0]
    a188:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a18a:	cbnz	r3, a1b2 <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a18c:	strb	r7, [r6, #0]
  m_flags = 0;
    a18e:	strb	r7, [r6, #2]
    a190:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    a192:	add	r4, sp, #36	; 0x24
    a194:	b.n	a142 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    a196:	adds	r0, #1
    a198:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    a19a:	ldrb	r3, [r0, #0]
    a19c:	cmp	r3, #47	; 0x2f
    a19e:	beq.n	a196 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    a1a0:	ldr	r1, [r4, #8]
    a1a2:	add	r0, sp, #36	; 0x24
    a1a4:	bl	9da4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    a1a8:	cmp	r0, #0
    a1aa:	beq.n	a130 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    a1ac:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    a1ae:	add	r4, sp, #36	; 0x24
    a1b0:	b.n	a140 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    a1b2:	mov	r0, r6
    a1b4:	bl	9ec0 <FatFile::sync() [clone .part.40]>
    a1b8:	b.n	a18c <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    a1ba:	add	r2, sp, #12
    a1bc:	mov	r1, r4
    a1be:	mov	r0, r6
    a1c0:	bl	9fb8 <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    a1c4:	add	sp, #72	; 0x48
    a1c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1ca:	nop

0000a1cc <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    a1cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1d0:	mov	r6, r0
    a1d2:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    a1d4:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    a1d6:	str	r2, [sp, #4]
    a1d8:	movs	r0, #0
    a1da:	strb.w	r0, [sp, #36]	; 0x24
    a1de:	strb.w	r0, [sp, #37]	; 0x25
    a1e2:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    a1e6:	cbnz	r5, a1f4 <FatFile::open(FatFile*, char const*, int)+0x28>
    a1e8:	mov	r8, r3
    a1ea:	ldrb	r3, [r1, #0]
    a1ec:	tst.w	r3, #112	; 0x70
    a1f0:	mov	r4, r1
    a1f2:	bne.n	a1fc <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    a1f4:	movs	r0, #0
}
    a1f6:	add	sp, #72	; 0x48
    a1f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    a1fc:	ldrb	r3, [r2, #0]
    a1fe:	cmp	r3, #47	; 0x2f
    a200:	mov	r0, r2
    a202:	beq.n	a250 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    a204:	movs	r7, #0
    a206:	b.n	a210 <FatFile::open(FatFile*, char const*, int)+0x44>
    a208:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a20a:	strb	r7, [r6, #0]
  m_flags = 0;
    a20c:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    a20e:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a210:	add	r2, sp, #4
    a212:	add	r1, sp, #12
    a214:	bl	b24c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    a218:	add	r2, sp, #12
    a21a:	mov	r1, r4
    a21c:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a21e:	cmp	r0, #0
    a220:	beq.n	a1f4 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    a222:	ldr	r5, [sp, #4]
    a224:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    a226:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    a228:	cbz	r5, a26e <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    a22a:	bl	b734 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    a22e:	mov	r5, r6
    a230:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    a232:	cmp	r0, #0
    a234:	beq.n	a1f4 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    a236:	ldmia	r5!, {r0, r1, r2, r3}
    a238:	stmia	r4!, {r0, r1, r2, r3}
    a23a:	ldmia	r5!, {r0, r1, r2, r3}
    a23c:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a23e:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    a240:	ldr	r2, [r5, #0]
    a242:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a244:	cmp	r3, #0
    a246:	beq.n	a208 <FatFile::open(FatFile*, char const*, int)+0x3c>
    a248:	mov	r0, r6
    a24a:	bl	9ec0 <FatFile::sync() [clone .part.40]>
    a24e:	b.n	a208 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    a250:	adds	r0, #1
    a252:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    a254:	ldrb	r3, [r0, #0]
    a256:	cmp	r3, #47	; 0x2f
    a258:	beq.n	a250 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    a25a:	cbz	r3, a280 <FatFile::open(FatFile*, char const*, int)+0xb4>
    a25c:	ldr	r1, [r4, #8]
    a25e:	add	r0, sp, #36	; 0x24
    a260:	bl	9da4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    a264:	cmp	r0, #0
    a266:	beq.n	a1f4 <FatFile::open(FatFile*, char const*, int)+0x28>
    a268:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    a26a:	add	r4, sp, #36	; 0x24
    a26c:	b.n	a204 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    a26e:	mov	r3, r8
    a270:	add	r2, sp, #12
    a272:	mov	r1, r4
    a274:	mov	r0, r6
    a276:	bl	b734 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    a27a:	add	sp, #72	; 0x48
    a27c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a280:	ldr	r1, [r4, #8]
    a282:	mov	r0, r6
    a284:	bl	9da4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    a288:	b.n	a1f6 <FatFile::open(FatFile*, char const*, int)+0x2a>
    a28a:	nop

0000a28c <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    a28c:	cbz	r1, a296 <FatFile::open(FatVolume*, char const*, int)+0xa>
    a28e:	addw	r1, r1, #1084	; 0x43c
    a292:	b.w	a1cc <FatFile::open(FatFile*, char const*, int)>
}
    a296:	mov	r0, r1
    a298:	bx	lr
    a29a:	nop

0000a29c <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    a29c:	ldrb	r3, [r0, #0]
    a29e:	cbz	r3, a2a4 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    a2a0:	movs	r0, #0
    a2a2:	bx	lr
    a2a4:	b.w	9da4 <FatFile::openRoot(FatVolume*) [clone .part.36]>

0000a2a8 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    a2a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    a2ac:	ldrb	r3, [r0, #2]
    a2ae:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    a2b0:	sub	sp, #12
    a2b2:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    a2b4:	bpl.w	a3d6 <FatFile::read(void*, unsigned int)+0x12e>
    a2b8:	mov	r7, r1
    a2ba:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    a2bc:	lsls	r6, r1, #28
    a2be:	mov	r9, r2
    a2c0:	bmi.w	a3e8 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    a2c4:	lsls	r4, r1, #26
    a2c6:	bpl.n	a2da <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    a2c8:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    a2ca:	ldr	r3, [r0, #20]
    a2cc:	ldrh	r2, [r2, #8]
    a2ce:	rsb	r3, r3, r2, lsl #5
    a2d2:	uxth	r3, r3
    a2d4:	cmp	r9, r3
    a2d6:	it	cs
    a2d8:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    a2da:	cmp.w	r9, #0
    a2de:	beq.w	a434 <FatFile::read(void*, unsigned int)+0x18c>
    a2e2:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    a2e4:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    a2e6:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    a2e8:	mov	r6, r9
    a2ea:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    a2ee:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    a2f2:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    a2f6:	bpl.n	a376 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    a2f8:	ldr	r1, [r2, #32]
    a2fa:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    a2fe:	cmp.w	fp, #0
    a302:	bne.n	a3aa <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    a304:	cmp.w	r6, #512	; 0x200
    a308:	bcc.n	a3aa <FatFile::read(void*, unsigned int)+0x102>
    a30a:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    a30c:	cmp	r1, r3
    a30e:	beq.n	a3aa <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    a310:	cmp.w	r6, #1024	; 0x400
    a314:	bcc.n	a3fa <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    a316:	ldrb	r0, [r5, #0]
    a318:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    a31a:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    a31e:	bmi.n	a32c <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    a320:	ldrb	r0, [r2, #4]
    a322:	rsb	r0, r8, r0
    a326:	cmp	fp, r0
    a328:	it	cs
    a32a:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    a32c:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    a32e:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    a332:	bhi.n	a34c <FatFile::read(void*, unsigned int)+0xa4>
    a334:	add	r3, fp
    a336:	cmp	r1, r3
    a338:	bcs.n	a34c <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    a33a:	add.w	r0, r2, #36	; 0x24
    a33e:	str	r1, [sp, #4]
    a340:	bl	ad58 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    a344:	cmp	r0, #0
    a346:	beq.n	a3d6 <FatFile::read(void*, unsigned int)+0x12e>
    a348:	ldr	r2, [r5, #8]
    a34a:	ldr	r1, [sp, #4]
    a34c:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    a34e:	ldr	r2, [r0, #0]
    a350:	mov	r3, fp
    a352:	ldr.w	fp, [r2, #12]
    a356:	mov	r2, r7
    a358:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    a35a:	cmp	r0, #0
    a35c:	beq.n	a3d6 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    a35e:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    a360:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    a362:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    a364:	add	r7, r4
    m_curPosition += n;
    a366:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    a368:	beq.n	a434 <FatFile::read(void*, unsigned int)+0x18c>
    a36a:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    a36c:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    a36e:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    a370:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    a374:	bmi.n	a2f8 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    a376:	ldrb.w	r8, [r2, #5]
    a37a:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    a37e:	cmp.w	fp, #0
    a382:	bne.n	a3f6 <FatFile::read(void*, unsigned int)+0x14e>
    a384:	cmp.w	r8, #0
    a388:	bne.n	a3f6 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    a38a:	cmp	r3, #0
    a38c:	bne.n	a40e <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    a38e:	lsls	r1, r1, #25
    a390:	ite	mi
    a392:	ldrmi	r1, [r2, #32]
    a394:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    a396:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    a398:	mov	r0, r2
    a39a:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
    a39e:	ldr	r2, [r5, #8]
    a3a0:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    a3a4:	cmp.w	fp, #0
    a3a8:	beq.n	a304 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    a3aa:	add.w	r0, r2, #36	; 0x24
    a3ae:	movs	r2, #0
    a3b0:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    a3b4:	cbz	r0, a3d6 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    a3b6:	rsb	r4, fp, #512	; 0x200
    a3ba:	cmp	r4, r6
    a3bc:	it	cs
    a3be:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    a3c0:	add.w	r1, r0, fp
    a3c4:	mov	r2, r4
    a3c6:	mov	r0, r7
    a3c8:	bl	11bf8 <memcpy>
    a3cc:	b.n	a35e <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    a3ce:	ldrb	r3, [r5, #0]
    a3d0:	tst.w	r3, #112	; 0x70
    a3d4:	bne.n	a436 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    a3d6:	ldrb	r3, [r5, #1]
  return -1;
    a3d8:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    a3dc:	orr.w	r3, r3, #2
    a3e0:	strb	r3, [r5, #1]
  return -1;
}
    a3e2:	add	sp, #12
    a3e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    a3e8:	ldr	r3, [r0, #28]
    a3ea:	ldr	r2, [r0, #20]
    a3ec:	subs	r3, r3, r2
    a3ee:	cmp	r9, r3
    a3f0:	it	cs
    a3f2:	movcs	r9, r3
    a3f4:	b.n	a2da <FatFile::read(void*, unsigned int)+0x32>
    a3f6:	ldr	r1, [r5, #16]
    a3f8:	b.n	a398 <FatFile::read(void*, unsigned int)+0xf0>
    a3fa:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    a3fc:	ldr	r3, [r0, #0]
    a3fe:	mov	r2, r7
    a400:	ldr	r3, [r3, #8]
    a402:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    a404:	cmp	r0, #0
    a406:	beq.n	a3d6 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    a408:	mov.w	r4, #512	; 0x200
    a40c:	b.n	a35e <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    a40e:	lsls	r3, r1, #28
    a410:	bpl.n	a41e <FatFile::read(void*, unsigned int)+0x176>
    a412:	ldrb	r3, [r5, #2]
    a414:	lsls	r4, r3, #25
    a416:	bpl.n	a41e <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    a418:	ldr	r1, [r5, #16]
    a41a:	adds	r1, #1
    a41c:	b.n	a396 <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    a41e:	mov	r0, r2
    a420:	ldr	r1, [r5, #16]
    a422:	mov	r2, sl
    a424:	bl	ad74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    a428:	cmp	r0, #0
    a42a:	blt.n	a3d6 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    a42c:	beq.n	a3ce <FatFile::read(void*, unsigned int)+0x126>
    a42e:	ldr	r2, [r5, #8]
    a430:	ldr	r1, [r5, #16]
    a432:	b.n	a398 <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    a434:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    a436:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    a43a:	add	sp, #12
    a43c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a440 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    a440:	push	{r4, r5, r6, lr}
    a442:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    a444:	movs	r2, #1
    a446:	add.w	r1, sp, #7
    a44a:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    a44c:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    a44e:	ldr	r5, [r0, #16]
    a450:	bl	a2a8 <FatFile::read(void*, unsigned int)>
    a454:	cmp	r0, #1
    a456:	it	eq
    a458:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    a45c:	str	r6, [r4, #20]
    a45e:	it	ne
    a460:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    a464:	str	r5, [r4, #16]
  return c;
}
    a466:	add	sp, #8
    a468:	pop	{r4, r5, r6, pc}
    a46a:	nop

0000a46c <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    a46c:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    a46e:	ldr	r3, [r0, #20]
    a470:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    a474:	sub	sp, #12
    a476:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    a478:	cbz	r5, a47c <FatFile::readDirCache(bool)+0x10>
    a47a:	cbnz	r1, a4a0 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    a47c:	movs	r2, #1
    a47e:	add.w	r1, sp, #7
    a482:	mov	r0, r4
    a484:	bl	a2a8 <FatFile::read(void*, unsigned int)>
    a488:	sxtb	r0, r0
    if  (n != 1) {
    a48a:	cmp	r0, #1
    a48c:	bne.n	a4a6 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    a48e:	ldr	r3, [r4, #20]
    a490:	adds	r3, #31
    a492:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    a494:	ldr	r0, [r4, #8]
    a496:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    a498:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    a49c:	add	sp, #12
    a49e:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    a4a0:	adds	r3, #32
    a4a2:	str	r3, [r0, #20]
    a4a4:	b.n	a494 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    a4a6:	movs	r0, #0
}
    a4a8:	add	sp, #12
    a4aa:	pop	{r4, r5, pc}

0000a4ac <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    a4ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a4b0:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    a4b2:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    a4b4:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a4b6:	tst.w	r5, #24
    a4ba:	strb.w	r4, [sp, #32]
    a4be:	strb.w	r4, [sp, #33]	; 0x21
    a4c2:	strb.w	r4, [sp, #34]	; 0x22
    a4c6:	strb.w	r4, [sp, #68]	; 0x44
    a4ca:	strb.w	r4, [sp, #69]	; 0x45
    a4ce:	strb.w	r4, [sp, #70]	; 0x46
    a4d2:	beq.n	a4de <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    a4d4:	ldr	r6, [r0, #8]
    a4d6:	ldr	r5, [r1, #8]
    a4d8:	cmp	r6, r5
    a4da:	mov	r3, r0
    a4dc:	beq.n	a4e6 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    a4de:	movs	r0, #0
}
    a4e0:	add	sp, #104	; 0x68
    a4e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4e6:	mov	r5, r3
    a4e8:	mov	r8, r2
    a4ea:	mov	r6, r1
    a4ec:	bl	9ec0 <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    a4f0:	mov	lr, r5
    a4f2:	ldmia.w	lr!, {r0, r1, r2, r3}
    a4f6:	add	r7, sp, #68	; 0x44
    a4f8:	stmia	r7!, {r0, r1, r2, r3}
    a4fa:	ldmia.w	lr!, {r0, r1, r2, r3}
    a4fe:	stmia	r7!, {r0, r1, r2, r3}
    a500:	ldr.w	r3, [lr]
    a504:	str	r3, [r7, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    a506:	mov	r1, r4
    a508:	mov	r0, r5
    a50a:	bl	9ea0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a50e:	mov	lr, r0
    a510:	cmp	r0, #0
    a512:	beq.n	a4de <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    a514:	ldr.w	r1, [lr, #4]
    a518:	ldr.w	r2, [lr, #8]
    a51c:	ldr.w	r3, [lr, #12]
    a520:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    a522:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    a526:	mov	r7, sp
    a528:	stmia	r7!, {r0, r1, r2, r3}
    a52a:	ldr.w	r1, [lr, #20]
    a52e:	ldr.w	r2, [lr, #24]
    a532:	ldr.w	r3, [lr, #28]
    a536:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    a53a:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    a53e:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    a540:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    a544:	mov	r2, r8
    a546:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    a548:	cmp.w	lr, #0
    a54c:	beq.w	a672 <FatFile::rename(FatFile*, char const*)+0x1c6>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    a550:	movw	r3, #2561	; 0xa01
    a554:	add	r0, sp, #32
    a556:	bl	a1cc <FatFile::open(FatFile*, char const*, int)>
    a55a:	cmp	r0, #0
    a55c:	beq.n	a4de <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    a55e:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    a560:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    a564:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    a568:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    a56a:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    a56c:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    a56e:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    a570:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    a572:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    a574:	movs	r1, #1
    a576:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    a578:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    a57c:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    a580:	bl	9ea0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a584:	cmp	r0, #0
    a586:	beq.n	a4de <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    a588:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    a58a:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    a58e:	ldr.w	r7, [r3, #-91]!
    a592:	str.w	r7, [r0, #13]
    a596:	ldr	r7, [r3, #4]
    a598:	str.w	r7, [r0, #17]
    a59c:	ldr	r7, [r3, #8]
    a59e:	str.w	r7, [r0, #21]
    a5a2:	ldr	r7, [r3, #12]
    a5a4:	str.w	r7, [r0, #25]
    a5a8:	ldrh	r7, [r3, #16]
    a5aa:	ldrb	r3, [r3, #18]
    a5ac:	strh.w	r7, [r0, #29]
    a5b0:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    a5b2:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    a5b4:	cmp	r4, #0
    a5b6:	beq.n	a62e <FatFile::rename(FatFile*, char const*)+0x182>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    a5b8:	mov	r1, r4
    a5ba:	ldr	r0, [r5, #8]
    a5bc:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    a5c0:	ldr	r3, [r5, #8]
    a5c2:	mov	r1, r0
    a5c4:	mov	r2, r6
    a5c6:	add.w	r0, r3, #36	; 0x24
    a5ca:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    a5ce:	cmp	r0, #0
    a5d0:	beq.n	a4de <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    a5d2:	mov	r6, r0
    a5d4:	mov	r7, sp
    a5d6:	ldr.w	r0, [r6, #32]!
    a5da:	ldr	r1, [r6, #4]
    a5dc:	ldr	r2, [r6, #8]
    a5de:	ldr	r3, [r6, #12]
    a5e0:	stmia	r7!, {r0, r1, r2, r3}
    a5e2:	ldr	r0, [r6, #16]
    a5e4:	ldr	r1, [r6, #20]
    a5e6:	ldr	r2, [r6, #24]
    a5e8:	ldr	r3, [r6, #28]
    a5ea:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    a5ec:	mov	r1, r4
    a5ee:	ldr	r0, [r5, #8]
    a5f0:	bl	aed0 <FatPartition::freeChain(unsigned long)>
    a5f4:	cmp	r0, #0
    a5f6:	beq.w	a4de <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    a5fa:	ldr	r1, [r5, #32]
    a5fc:	ldr	r0, [r5, #8]
    a5fe:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
    a602:	ldr	r3, [r5, #8]
    a604:	mov	r1, r0
    a606:	movs	r2, #1
    a608:	add.w	r0, r3, #36	; 0x24
    a60c:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    a610:	mov	r7, r0
    a612:	cmp	r0, #0
    a614:	beq.w	a4de <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    a618:	mov	r4, sp
    a61a:	ldmia	r4!, {r0, r1, r2, r3}
    a61c:	str	r0, [r7, #32]
    a61e:	str	r1, [r7, #36]	; 0x24
    a620:	str	r2, [r7, #40]	; 0x28
    a622:	str	r3, [r7, #44]	; 0x2c
    a624:	ldmia	r4!, {r0, r1, r2, r3}
    a626:	str	r0, [r7, #48]	; 0x30
    a628:	str	r1, [r7, #52]	; 0x34
    a62a:	str	r2, [r7, #56]	; 0x38
    a62c:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a62e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    a630:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    a632:	movs	r3, #8
  if (!oldFile.remove()) {
    a634:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a636:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    a638:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    a63c:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    a640:	bl	b554 <FatFile::remove()>
    a644:	cmp	r0, #0
    a646:	beq.w	a4de <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    a64a:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a64c:	add.w	r0, r4, #36	; 0x24
    a650:	bl	ad58 <FatCache::sync()>
    a654:	cmp	r0, #0
    a656:	beq.w	a4de <FatFile::rename(FatFile*, char const*)+0x32>
    a65a:	add.w	r0, r4, #560	; 0x230
    a65e:	bl	ad58 <FatCache::sync()>
    a662:	cmp	r0, #0
    a664:	beq.w	a4de <FatFile::rename(FatFile*, char const*)+0x32>
    a668:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a66a:	ldr	r3, [r0, #0]
    a66c:	ldr	r3, [r3, #20]
    a66e:	blx	r3
    a670:	b.n	a4e0 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    a672:	add	r0, sp, #32
    a674:	bl	a108 <FatFile::mkdir(FatFile*, char const*, bool)>
    a678:	cmp	r0, #0
    a67a:	beq.w	a4de <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    a67e:	ldr	r4, [sp, #64]	; 0x40
    a680:	b.n	a55e <FatFile::rename(FatFile*, char const*)+0xb2>
    a682:	nop

0000a684 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    a684:	ldrb	r3, [r0, #0]
    a686:	lsls	r2, r3, #27
    a688:	bpl.n	a6c0 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a68a:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    a68c:	push	{r4, lr}
    a68e:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a690:	cbz	r3, a6a0 <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a692:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a694:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a696:	bic.w	r3, r3, #32
    a69a:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    a69c:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    a69e:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    a6a0:	movs	r1, #1
    a6a2:	mov	r0, r4
    a6a4:	bl	a46c <FatFile::readDirCache(bool)>
    if (!dir) {
    a6a8:	cbz	r0, a6c4 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    a6aa:	ldrb	r3, [r0, #0]
    a6ac:	cbz	r3, a6ca <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    a6ae:	cmp	r3, #229	; 0xe5
    a6b0:	beq.n	a6a0 <FatFile::rmdir()+0x1c>
    a6b2:	cmp	r3, #46	; 0x2e
    a6b4:	beq.n	a6a0 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    a6b6:	ldrb	r3, [r0, #11]
    a6b8:	lsls	r3, r3, #28
    a6ba:	bmi.n	a6a0 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    a6bc:	movs	r0, #0
    a6be:	pop	{r4, pc}
    a6c0:	movs	r0, #0
    a6c2:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    a6c4:	ldrb	r3, [r4, #1]
    a6c6:	cmp	r3, #0
    a6c8:	bne.n	a6bc <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    a6ca:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    a6cc:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    a6ce:	orr.w	r3, r3, #2
    a6d2:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    a6d4:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    a6d6:	mov	r0, r4

fail:
  return false;
}
    a6d8:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    a6dc:	b.w	b554 <FatFile::remove()>

0000a6e0 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    a6e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6e4:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    a6e6:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    a6e8:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a6ea:	cbz	r3, a71a <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    a6ec:	ldr	r2, [r0, #20]
    a6ee:	cmp	r2, r1
    a6f0:	mov	r6, r1
    a6f2:	beq.n	a76a <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    a6f4:	cbnz	r1, a708 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    a6f6:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a6f8:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    a6fa:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    a6fc:	bic.w	r3, r3, #32
    a700:	strb	r3, [r4, #2]
  return true;
    a702:	movs	r0, #1
    a704:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    a708:	lsls	r0, r3, #28
    a70a:	bmi.n	a722 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    a70c:	lsls	r1, r3, #26
    a70e:	bpl.n	a728 <FatFile::seekSet(unsigned long)+0x48>
    a710:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    a712:	ldrh	r3, [r3, #8]
    a714:	cmp.w	r6, r3, lsl #5
    a718:	bls.n	a6f8 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    a71a:	str	r7, [r4, #16]
  return false;
    a71c:	movs	r0, #0
    a71e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    a722:	ldr	r1, [r4, #28]
    a724:	cmp	r6, r1
    a726:	bhi.n	a71a <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    a728:	ldr.w	lr, [r4, #8]
    a72c:	ldrb.w	r5, [lr, #6]
    a730:	adds	r5, #9
    a732:	uxtb	r1, r5
    a734:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    a736:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    a738:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    a73a:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    a73c:	cmp	r0, r5
    a73e:	bhi.n	a742 <FatFile::seekSet(unsigned long)+0x62>
    a740:	cbnz	r2, a770 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    a742:	lsls	r3, r3, #25
    a744:	ite	mi
    a746:	ldrmi.w	r3, [lr, #32]
    a74a:	ldrpl	r3, [r4, #32]
    a74c:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    a74e:	add.w	r8, r4, #16
    a752:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    a754:	cmp	r5, #0
    a756:	beq.n	a6f8 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    a758:	ldr	r1, [r4, #16]
    a75a:	ldr	r0, [r4, #8]
    a75c:	bl	ad74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    a760:	cmp	r0, #0
    a762:	add.w	r5, r5, #4294967295
    a766:	bgt.n	a752 <FatFile::seekSet(unsigned long)+0x72>
    a768:	b.n	a71a <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    a76a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    a76c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    a770:	subs	r5, r5, r0
    a772:	b.n	a74e <FatFile::seekSet(unsigned long)+0x6e>

0000a774 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    a774:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a778:	mov	r5, r1
    a77a:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    a77c:	movs	r1, #0
    a77e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    a780:	mov	r4, r0
    a782:	mov	r7, r3
    a784:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    a788:	bl	14e3c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    a78c:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    a78e:	ldr	r3, [r5, #32]
    a790:	str	r3, [r4, #12]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    a792:	add.w	r2, r0, #48	; 0x30
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    a796:	and.w	r3, r8, #15
    a79a:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    a79e:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    a7a0:	strh.w	r8, [r4, #4]
    a7a4:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    a7a6:	lsls	r5, r1, #28
    a7a8:	bmi.n	a7d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    a7aa:	and.w	r1, r1, #23
    a7ae:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    a7b0:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    a7b2:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    a7b4:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    a7b8:	it	eq
    a7ba:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    a7be:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    a7c2:	it	eq
    a7c4:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    a7c6:	cmp	r3, #1
    a7c8:	beq.n	a7da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    a7ca:	cmp	r3, #2
    a7cc:	beq.n	a822 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    a7ce:	cbz	r3, a818 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    a7d0:	movs	r0, #0
    a7d2:	strb	r0, [r4, #0]
  m_flags = 0;
    a7d4:	strb	r0, [r4, #2]
  return false;
    a7d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    a7da:	movs	r3, #2
    a7dc:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    a7de:	ldrb	r1, [r4, #0]
    a7e0:	tst.w	r1, #17
    a7e4:	bne.n	a7d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    a7e6:	sxtb	r1, r3
    a7e8:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    a7ec:	and.w	r3, r7, #8
    a7f0:	orrs	r3, r1
    a7f2:	uxtb	r3, r3
    a7f4:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    a7f6:	ldrh.w	lr, [r2, #20]
    a7fa:	ldrh	r1, [r2, #26]
    a7fc:	ldr	r6, [r0, #44]	; 0x2c
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    a7fe:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    a800:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    a804:	cbz	r5, a828 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    a806:	cbnz	r1, a83e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a808:	orn	r3, r3, #127	; 0x7f
    a80c:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    a80e:	lsls	r3, r7, #17
    a810:	bmi.n	a830 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    a812:	movs	r0, #1
    a814:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    a818:	ands.w	r5, r7, #1024	; 0x400
    a81c:	bne.n	a7d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    a81e:	movs	r1, #1
    a820:	b.n	a7ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    a822:	movs	r3, #3
    a824:	strb	r3, [r4, #2]
      break;
    a826:	b.n	a7de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    a828:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    a82a:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    a82c:	str	r3, [r4, #28]
    a82e:	b.n	a80e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    a830:	ldr	r1, [r4, #28]
    a832:	mov	r0, r4
    a834:	bl	a6e0 <FatFile::seekSet(unsigned long)>
    a838:	cmp	r0, #0
    a83a:	bne.n	a812 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    a83c:	b.n	a7d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    a83e:	bl	aed0 <FatPartition::freeChain(unsigned long)>
    a842:	cmp	r0, #0
    a844:	beq.n	a7d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    a846:	ldrb	r3, [r4, #2]
    a848:	b.n	a808 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    a84a:	nop

0000a84c <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    a84c:	ldrb	r3, [r0, #0]
    a84e:	cbnz	r3, a858 <FatFile::openNext(FatFile*, int)+0xc>
    a850:	ldrb	r3, [r1, #0]
    a852:	tst.w	r3, #112	; 0x70
    a856:	bne.n	a85c <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    a858:	movs	r0, #0
}
    a85a:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    a85c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a860:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    a862:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    a866:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    a868:	bne.n	a8ae <FatFile::openNext(FatFile*, int)+0x62>
    a86a:	mov	r9, r2
    a86c:	mov	r5, r1
    a86e:	mov	r8, r0
    a870:	mov	sl, r7
    a872:	b.n	a878 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    a874:	movs	r7, #0
    a876:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    a878:	movs	r1, #0
    a87a:	mov	r0, r5
    a87c:	bl	a46c <FatFile::readDirCache(bool)>
    if (!dir) {
    a880:	cbz	r0, a8ae <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    a882:	ldrb	r3, [r0, #0]
    a884:	cbz	r3, a8ae <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    a886:	cmp	r3, #46	; 0x2e
    a888:	beq.n	a874 <FatFile::openNext(FatFile*, int)+0x28>
    a88a:	cmp	r3, #229	; 0xe5
    a88c:	beq.n	a874 <FatFile::openNext(FatFile*, int)+0x28>
    a88e:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    a890:	lsls	r1, r2, #28
    a892:	bpl.n	a8b6 <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    a894:	cmp	r2, #15
    a896:	bne.n	a874 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    a898:	lsls	r2, r3, #25
    a89a:	bpl.n	a876 <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    a89c:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    a8a0:	ldrb.w	sl, [r0, #13]
    a8a4:	b.n	a876 <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    a8a6:	bl	b0f8 <FatFile::lfnChecksum(unsigned char*)>
    a8aa:	cmp	r0, sl
    a8ac:	beq.n	a8ba <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    a8ae:	movs	r0, #0
}
    a8b0:	add	sp, #8
    a8b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    a8b6:	cmp	r7, #0
    a8b8:	bne.n	a8a6 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    a8ba:	str	r7, [sp, #0]
    a8bc:	mov	r3, r9
    a8be:	ubfx	r2, r6, #5, #16
    a8c2:	mov	r1, r5
    a8c4:	mov	r0, r8
    a8c6:	bl	a774 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    a8ca:	b.n	a8b0 <FatFile::openNext(FatFile*, int)+0x64>

0000a8cc <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a8cc:	ldrb	r3, [r0, #0]
    a8ce:	cbz	r3, a8d4 <FatFile::sync()+0x8>
    a8d0:	b.w	9ec0 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    a8d4:	movs	r0, #1
    a8d6:	bx	lr

0000a8d8 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    a8d8:	ldrb	r3, [r0, #2]
    a8da:	lsls	r3, r3, #30
    a8dc:	bpl.n	a914 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a8de:	ldr	r3, [r0, #32]
    a8e0:	cbz	r3, a910 <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    a8e2:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    a8e4:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    a8e6:	sub	sp, #8
    a8e8:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    a8ea:	cbnz	r1, a92a <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    a8ec:	str	r3, [sp, #4]
    m_firstCluster = 0;
    a8ee:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    a8f0:	mov	r1, r3
    a8f2:	ldr	r0, [r4, #8]
    a8f4:	bl	aed0 <FatPartition::freeChain(unsigned long)>
    a8f8:	cbz	r0, a926 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a8fa:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a8fc:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    a8fe:	ldr	r1, [r4, #20]
    a900:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a902:	orn	r3, r3, #127	; 0x7f
    a906:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a908:	cbnz	r2, a946 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a90a:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    a90c:	add	sp, #8
    a90e:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a910:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    a912:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    a914:	movs	r0, #0
}
    a916:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    a918:	mvn.w	r2, #4026531840	; 0xf0000000
    a91c:	ldr	r1, [r4, #16]
    a91e:	ldr	r0, [r4, #8]
    a920:	bl	ade4 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    a924:	cbnz	r0, a93e <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    a926:	movs	r0, #0
    a928:	b.n	a90c <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    a92a:	add	r2, sp, #8
    a92c:	movs	r3, #0
    a92e:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a932:	ldr	r0, [r0, #8]
    a934:	bl	ad74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    a938:	cmp	r0, #0
    a93a:	blt.n	a926 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    a93c:	bne.n	a918 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    a93e:	ldr	r3, [sp, #4]
    a940:	cmp	r3, #0
    a942:	beq.n	a8fa <FatFile::truncate()+0x22>
    a944:	b.n	a8f0 <FatFile::truncate()+0x18>
    a946:	mov	r0, r4
    a948:	bl	9ec0 <FatFile::sync() [clone .part.40]>
    a94c:	b.n	a90c <FatFile::truncate()+0x34>
    a94e:	nop

0000a950 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    a950:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a954:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    a956:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    a958:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    a95a:	bmi.n	a96c <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a95c:	ldrb	r3, [r4, #1]
    a95e:	orr.w	r3, r3, #1
    a962:	strb	r3, [r4, #1]
  return -1;
    a964:	mov.w	r0, #4294967295
    a968:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a96c:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    a96e:	lsls	r2, r3, #28
    a970:	mov	r8, r1
    a972:	bmi.w	aaf4 <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    a976:	ldr	r2, [r4, #20]
    a978:	mvns	r3, r2
    a97a:	cmp	r9, r3
    a97c:	bhi.n	a95c <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    a97e:	cmp.w	r9, #0
    a982:	beq.w	ab02 <FatFile::write(void const*, unsigned int)+0x1b2>
    a986:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a988:	mov.w	sl, #0
    a98c:	b.n	a9f0 <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    a98e:	cmp	r1, #0
    a990:	beq.n	aa86 <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    a992:	ldrb	r3, [r4, #2]
    a994:	lsls	r3, r3, #25
    a996:	bpl.n	aa94 <FatFile::write(void const*, unsigned int)+0x144>
    a998:	ldr	r3, [r4, #28]
    a99a:	cmp	r3, r2
    a99c:	bls.n	aa94 <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    a99e:	adds	r1, #1
    a9a0:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    a9a2:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    a9a6:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    a9aa:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    a9ac:	bcs.n	aa2a <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    a9ae:	ldr	r2, [r4, #20]
    a9b0:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a9b2:	ldr	r0, [r4, #8]
    a9b4:	cmp.w	r6, #512	; 0x200
    a9b8:	mov	r5, r6
    a9ba:	it	cs
    a9bc:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    a9c0:	cmp	r2, r3
    a9c2:	bcc.n	aab6 <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    a9c4:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    a9c6:	adds	r0, #36	; 0x24
    a9c8:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    a9cc:	cmp	r0, #0
    a9ce:	beq.n	a95c <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    a9d0:	add	r0, r7
    a9d2:	mov	r2, r5
    a9d4:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a9d6:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    a9d8:	bl	11bf8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a9dc:	cmp.w	r7, #512	; 0x200
    a9e0:	beq.n	aad2 <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a9e2:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    a9e4:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a9e6:	add	r2, r5
    src += n;
    a9e8:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a9ea:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    a9ec:	beq.w	ab02 <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    a9f0:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    a9f2:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    a9f4:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    a9f6:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    a9fa:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    a9fe:	bne.n	aa1a <FatFile::write(void const*, unsigned int)+0xca>
    aa00:	cmp	r7, #0
    aa02:	beq.n	a98e <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    aa04:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
    aa08:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    aa0a:	rsb	r5, r7, #512	; 0x200
    aa0e:	cmp	r5, r6
    aa10:	it	cs
    aa12:	movcs	r5, r6
    aa14:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    aa16:	movs	r2, #1
    aa18:	b.n	a9c6 <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    aa1a:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    aa1e:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    aa20:	cmp	r7, #0
    aa22:	bne.n	aa0a <FatFile::write(void const*, unsigned int)+0xba>
    aa24:	cmp.w	r6, #512	; 0x200
    aa28:	bcc.n	a9ae <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    aa2a:	cmp.w	r6, #1024	; 0x400
    aa2e:	ldr	r2, [r4, #8]
    aa30:	bcc.n	aa6a <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    aa32:	ldrb	r3, [r2, #4]
    aa34:	ldr	r7, [r2, #44]	; 0x2c
    aa36:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    aa38:	lsrs	r0, r6, #9
    aa3a:	cmp	r3, r0
    aa3c:	it	cs
    aa3e:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    aa40:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    aa42:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    aa46:	bcc.n	aa5a <FatFile::write(void const*, unsigned int)+0x10a>
    aa48:	add	r7, r3
    aa4a:	cmp	r7, r1
    aa4c:	bls.n	aa5a <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    aa4e:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    aa52:	mov.w	r0, #4294967295
    aa56:	str	r0, [r2, #44]	; 0x2c
    aa58:	ldr	r2, [r4, #8]
    aa5a:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    aa5c:	ldr	r2, [r0, #0]
    aa5e:	ldr	r7, [r2, #28]
    aa60:	mov	r2, r8
    aa62:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    aa64:	cmp	r0, #0
    aa66:	bne.n	a9e2 <FatFile::write(void const*, unsigned int)+0x92>
    aa68:	b.n	a95c <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    aa6a:	ldr	r3, [r2, #44]	; 0x2c
    aa6c:	cmp	r3, r1
    aa6e:	beq.n	aac4 <FatFile::write(void const*, unsigned int)+0x174>
    aa70:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    aa72:	ldr	r3, [r0, #0]
    aa74:	mov	r2, r8
    aa76:	ldr	r3, [r3, #24]
    aa78:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    aa7a:	cmp	r0, #0
    aa7c:	beq.w	a95c <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    aa80:	mov.w	r5, #512	; 0x200
    aa84:	b.n	a9e2 <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    aa86:	ldr	r1, [r4, #32]
    aa88:	cbz	r1, aae0 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    aa8a:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    aa8c:	bl	ad68 <FatPartition::clusterStartSector(unsigned long) const>
    aa90:	mov	r1, r0
    aa92:	b.n	aa24 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    aa94:	add.w	r2, r4, #16
    aa98:	bl	ad74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    aa9c:	cmp	r0, #0
    aa9e:	blt.w	a95c <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    aaa2:	bne.n	aab0 <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    aaa4:	mov	r0, r4
    aaa6:	bl	9dd8 <FatFile::addCluster()>
    aaaa:	cmp	r0, #0
    aaac:	beq.w	a95c <FatFile::write(void const*, unsigned int)+0xc>
    aab0:	ldr	r0, [r4, #8]
    aab2:	ldr	r1, [r4, #16]
    aab4:	b.n	aa8c <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    aab6:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    aab8:	tst.w	r3, #32
    aabc:	ite	eq
    aabe:	moveq	r2, #1
    aac0:	movne	r2, #5
    aac2:	b.n	a9c6 <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    aac4:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    aac8:	mov.w	r3, #4294967295
    aacc:	str	r3, [r2, #44]	; 0x2c
    aace:	ldr	r2, [r4, #8]
    aad0:	b.n	aa70 <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    aad2:	ldr	r0, [r4, #8]
    aad4:	adds	r0, #36	; 0x24
    aad6:	bl	ad58 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    aada:	cmp	r0, #0
    aadc:	bne.n	a9e2 <FatFile::write(void const*, unsigned int)+0x92>
    aade:	b.n	a95c <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    aae0:	mov	r0, r4
    aae2:	bl	9dd8 <FatFile::addCluster()>
    aae6:	cmp	r0, #0
    aae8:	beq.w	a95c <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    aaec:	ldr	r1, [r4, #16]
    aaee:	str	r1, [r4, #32]
    aaf0:	ldr	r0, [r4, #8]
    aaf2:	b.n	aa8c <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    aaf4:	ldr	r1, [r0, #28]
    aaf6:	bl	a6e0 <FatFile::seekSet(unsigned long)>
    aafa:	cmp	r0, #0
    aafc:	beq.w	a95c <FatFile::write(void const*, unsigned int)+0xc>
    ab00:	b.n	a976 <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    ab02:	ldr	r3, [r4, #28]
    ab04:	cmp	r3, r2
    ab06:	bcc.n	ab1c <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    ab08:	ldr	r3, [pc, #40]	; (ab34 <FatFile::write(void const*, unsigned int)+0x1e4>)
    ab0a:	ldr	r3, [r3, #0]
    ab0c:	cbz	r3, ab2c <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    ab0e:	ldrb	r3, [r4, #2]
    ab10:	orn	r3, r3, #127	; 0x7f
    ab14:	strb	r3, [r4, #2]
    ab16:	mov	r0, r9
    ab18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    ab1c:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    ab1e:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    ab20:	orn	r3, r3, #127	; 0x7f
    ab24:	strb	r3, [r4, #2]
    ab26:	mov	r0, r9
    ab28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab2c:	mov	r0, r9
    ab2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab32:	nop
    ab34:	.word	0x1fff2acc

0000ab38 <FatFile::printModifyDateTime(Print*)>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printModifyDateTime(print_t* pr) {
    ab38:	push	{r4, lr}
    ab3a:	sub	sp, #32
    ab3c:	mov	r4, r1
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    ab3e:	mov	r1, sp
    ab40:	bl	9f74 <FatFile::dirEntry(DirFat_t*)>
    ab44:	cbz	r0, ab54 <FatFile::printModifyDateTime(Print*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return fsPrintDateTime(pr, getLe16(dir.modifyDate), getLe16(dir.modifyTime));
    ab46:	mov	r0, r4
    ab48:	ldrh.w	r2, [sp, #22]
    ab4c:	ldrh.w	r1, [sp, #24]
    ab50:	bl	81e0 <fsPrintDateTime(Print*, unsigned short, unsigned short)>

fail:
  return 0;
}
    ab54:	add	sp, #32
    ab56:	pop	{r4, pc}

0000ab58 <FatFile::printFileSize(Print*)>:
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
    ab58:	push	{r4, r5, lr}
    ab5a:	sub	sp, #20
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
    ab5c:	movs	r3, #0

fail:
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
    ab5e:	mov	r5, r1
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
    ab60:	ldr	r1, [r0, #28]
}
//------------------------------------------------------------------------------
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
    ab62:	strb.w	r3, [sp, #14]
  ptr = fmtBase10(ptr, fileSize());
    ab66:	add.w	r0, sp, #14
    ab6a:	bl	8104 <fmtBase10(char*, unsigned long)>
    ab6e:	add	r4, sp, #4
  while (ptr > buf) {
    ab70:	cmp	r0, r4
    *--ptr = ' ';
    ab72:	it	hi
    ab74:	movhi	r3, #32
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
  while (ptr > buf) {
    ab76:	bls.n	ab80 <FatFile::printFileSize(Print*)+0x28>
    *--ptr = ' ';
    ab78:	strb.w	r3, [r0, #-1]!
size_t FatFile::printFileSize(print_t* pr) {
  char buf[11];
  char *ptr = buf + sizeof(buf);
  *--ptr = 0;
  ptr = fmtBase10(ptr, fileSize());
  while (ptr > buf) {
    ab7c:	cmp	r0, r4
    ab7e:	bne.n	ab78 <FatFile::printFileSize(Print*)+0x20>
    ab80:	mov	r0, r4
    ab82:	bl	15880 <strlen>
    ab86:	ldr	r3, [r5, #0]
    ab88:	mov	r2, r0
    ab8a:	mov	r1, r4
    ab8c:	ldr	r3, [r3, #4]
    ab8e:	mov	r0, r5
    ab90:	blx	r3
    *--ptr = ' ';
  }
  return pr->write(buf);
}
    ab92:	add	sp, #20
    ab94:	pop	{r4, r5, pc}
    ab96:	nop

0000ab98 <FatFile::ls(Print*, unsigned char, unsigned char)>:
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    ab98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile file;
  if (!isDir()) {
    ab9c:	ldrb	r4, [r0, #0]
  }
  pr->write('\r');
  pr->write('\n');
}
//------------------------------------------------------------------------------
bool FatFile::ls(print_t* pr, uint8_t flags, uint8_t indent) {
    ab9e:	sub	sp, #40	; 0x28
    aba0:	movs	r6, #0
  FatFile file;
  if (!isDir()) {
    aba2:	ands.w	r4, r4, #112	; 0x70
    aba6:	strb.w	r6, [sp, #4]
    abaa:	strb.w	r6, [sp, #5]
    abae:	strb.w	r6, [sp, #6]
    abb2:	bne.n	abbc <FatFile::ls(Print*, unsigned char, unsigned char)+0x24>
    goto fail;
  }
  return true;

 fail:
  return false;
    abb4:	mov	r0, r4
}
    abb6:	add	sp, #40	; 0x28
    abb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abbc:	mov	r8, r2
    abbe:	mov	r9, r0
    abc0:	mov	r5, r1
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    abc2:	mov	r1, r6
    abc4:	mov	r7, r3
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    abc6:	and.w	sl, r8, #2
    abca:	bl	a6e0 <FatFile::seekSet(unsigned long)>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    abce:	movs	r2, #0
    abd0:	mov	r1, r9
    abd2:	add	r0, sp, #4
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    abd4:	uxtb.w	sl, sl
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    abd8:	bl	a84c <FatFile::openNext(FatFile*, int)>
    abdc:	cmp	r0, #0
    abde:	beq.n	ac68 <FatFile::ls(Print*, unsigned char, unsigned char)+0xd0>
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
    abe0:	ldrb.w	r3, [sp, #4]
    abe4:	lsls	r3, r3, #30
    abe6:	bpl.n	abee <FatFile::ls(Print*, unsigned char, unsigned char)+0x56>
    abe8:	tst.w	r8, #1
    abec:	beq.n	ac54 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
      for (uint8_t i = 0; i < indent; i++) {
    abee:	movs	r4, #0
    abf0:	cbz	r7, ac04 <FatFile::ls(Print*, unsigned char, unsigned char)+0x6c>
        pr->write(' ');
    abf2:	ldr	r3, [r5, #0]
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    abf4:	adds	r4, #1
        pr->write(' ');
    abf6:	movs	r1, #32
    abf8:	ldr	r6, [r3, #0]
    abfa:	mov	r0, r5
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    abfc:	uxtb	r4, r4
        pr->write(' ');
    abfe:	blx	r6
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    // indent for dir level
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
    ac00:	cmp	r7, r4
    ac02:	bne.n	abf2 <FatFile::ls(Print*, unsigned char, unsigned char)+0x5a>
        pr->write(' ');
      }
      if (flags & LS_DATE) {
    ac04:	cmp.w	sl, #0
    ac08:	bne.n	ac98 <FatFile::ls(Print*, unsigned char, unsigned char)+0x100>
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
    ac0a:	tst.w	r8, #4
    ac0e:	bne.n	ac84 <FatFile::ls(Print*, unsigned char, unsigned char)+0xec>
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
    ac10:	mov	r1, r5
    ac12:	add	r0, sp, #4
    ac14:	bl	b498 <FatFile::printName(Print*)>
      if (file.isDir()) {
    ac18:	ldrb.w	r3, [sp, #4]
    ac1c:	tst.w	r3, #112	; 0x70
    ac20:	bne.n	ac78 <FatFile::ls(Print*, unsigned char, unsigned char)+0xe0>
        pr->write('/');
      }
      pr->write('\r');
    ac22:	ldr	r3, [r5, #0]
    ac24:	movs	r1, #13
    ac26:	ldr	r3, [r3, #0]
    ac28:	mov	r0, r5
    ac2a:	blx	r3
      pr->write('\n');
    ac2c:	ldr	r3, [r5, #0]
    ac2e:	movs	r1, #10
    ac30:	ldr	r3, [r3, #0]
    ac32:	mov	r0, r5
    ac34:	blx	r3
      if ((flags & LS_R) && file.isDir()) {
    ac36:	tst.w	r8, #8
    ac3a:	beq.n	ac54 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
    ac3c:	ldrb.w	r3, [sp, #4]
    ac40:	tst.w	r3, #112	; 0x70
    ac44:	beq.n	ac54 <FatFile::ls(Print*, unsigned char, unsigned char)+0xbc>
        file.ls(pr, flags, indent + 2);
    ac46:	adds	r3, r7, #2
    ac48:	uxtb	r3, r3
    ac4a:	mov	r2, r8
    ac4c:	mov	r1, r5
    ac4e:	add	r0, sp, #4
    ac50:	bl	ab98 <FatFile::ls(Print*, unsigned char, unsigned char)>
      }
    }
    file.close();
    ac54:	add	r0, sp, #4
    ac56:	bl	9f54 <FatFile::close()>
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
  while (file.openNext(this, O_RDONLY)) {
    ac5a:	movs	r2, #0
    ac5c:	mov	r1, r9
    ac5e:	add	r0, sp, #4
    ac60:	bl	a84c <FatFile::openNext(FatFile*, int)>
    ac64:	cmp	r0, #0
    ac66:	bne.n	abe0 <FatFile::ls(Print*, unsigned char, unsigned char)+0x48>
        file.ls(pr, flags, indent + 2);
      }
    }
    file.close();
  }
  if (getError()) {
    ac68:	ldrb.w	r0, [r9, #1]
    ac6c:	clz	r0, r0
    ac70:	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    ac72:	add	sp, #40	; 0x28
    ac74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        file.printFileSize(pr);
        pr->write(' ');
      }
      file.printName(pr);
      if (file.isDir()) {
        pr->write('/');
    ac78:	ldr	r3, [r5, #0]
    ac7a:	movs	r1, #47	; 0x2f
    ac7c:	ldr	r3, [r3, #0]
    ac7e:	mov	r0, r5
    ac80:	blx	r3
    ac82:	b.n	ac22 <FatFile::ls(Print*, unsigned char, unsigned char)+0x8a>
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
        pr->write(' ');
      }
      if (flags & LS_SIZE) {
        file.printFileSize(pr);
    ac84:	mov	r1, r5
    ac86:	add	r0, sp, #4
    ac88:	bl	ab58 <FatFile::printFileSize(Print*)>
        pr->write(' ');
    ac8c:	ldr	r3, [r5, #0]
    ac8e:	movs	r1, #32
    ac90:	ldr	r3, [r3, #0]
    ac92:	mov	r0, r5
    ac94:	blx	r3
    ac96:	b.n	ac10 <FatFile::ls(Print*, unsigned char, unsigned char)+0x78>
    if (!file.isHidden() || (flags & LS_A)) {
      for (uint8_t i = 0; i < indent; i++) {
        pr->write(' ');
      }
      if (flags & LS_DATE) {
        file.printModifyDateTime(pr);
    ac98:	mov	r1, r5
    ac9a:	add	r0, sp, #4
    ac9c:	bl	ab38 <FatFile::printModifyDateTime(Print*)>
        pr->write(' ');
    aca0:	ldr	r3, [r5, #0]
    aca2:	movs	r1, #32
    aca4:	ldr	r3, [r3, #0]
    aca6:	mov	r0, r5
    aca8:	blx	r3
    acaa:	b.n	ac0a <FatFile::ls(Print*, unsigned char, unsigned char)+0x72>

0000acac <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    acac:	push	{r3, r4, r5, r6, r7, lr}
    acae:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    acb0:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    acb2:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    acb6:	mov	r4, r0
    acb8:	ldr	r0, [r3, #0]
    acba:	ldr	r3, [r0, #0]
    acbc:	mov	r2, r6
    acbe:	ldr	r3, [r3, #24]
    acc0:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    acc2:	cbz	r0, acd6 <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    acc4:	ldrb	r3, [r4, #0]
    acc6:	lsls	r2, r3, #30
    acc8:	mov	r5, r0
    acca:	bmi.n	acdc <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    accc:	bic.w	r3, r3, #1
    acd0:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    acd2:	mov	r0, r5
    acd4:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    acd6:	movs	r5, #0
}
    acd8:	mov	r0, r5
    acda:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    acdc:	ldr	r3, [r4, #4]
    acde:	ldr	r1, [r4, #8]
    ace0:	ldr	r0, [r3, #0]
    ace2:	ldr	r7, [r3, #16]
    ace4:	ldr	r3, [r0, #0]
    ace6:	mov	r2, r6
    ace8:	add	r1, r7
    acea:	ldr	r3, [r3, #24]
    acec:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    acee:	cmp	r0, #0
    acf0:	beq.n	acd6 <FatCache::sync() [clone .part.8]+0x2a>
    acf2:	ldrb	r3, [r4, #0]
    acf4:	b.n	accc <FatCache::sync() [clone .part.8]+0x20>
    acf6:	nop

0000acf8 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    acf8:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    acfa:	ldr	r3, [r0, #8]
    acfc:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    acfe:	mov	r6, r0
    ad00:	mov	r4, r2
  if (m_lbn != sector) {
    ad02:	beq.n	ad24 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    ad04:	ldrb	r3, [r0, #0]
    ad06:	lsls	r2, r3, #31
    ad08:	mov	r7, r1
    ad0a:	bmi.n	ad32 <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    ad0c:	lsls	r3, r4, #29
    ad0e:	bpl.n	ad3e <FatCache::read(unsigned long, unsigned char)+0x46>
    ad10:	add.w	r5, r6, #12
    ad14:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    ad16:	and.w	r4, r4, #3
    ad1a:	orrs	r4, r3
    ad1c:	strb	r4, [r6, #0]
    ad1e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    ad20:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    ad22:	pop	{r3, r4, r5, r6, r7, pc}
    ad24:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    ad28:	and.w	r4, r4, #3
    ad2c:	orrs	r4, r3
    ad2e:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    ad30:	pop	{r3, r4, r5, r6, r7, pc}
    ad32:	bl	acac <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    ad36:	cmp	r0, #0
    ad38:	bne.n	ad0c <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    ad3a:	movs	r0, #0
    ad3c:	pop	{r3, r4, r5, r6, r7, pc}
    ad3e:	ldr	r3, [r6, #4]
    ad40:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    ad42:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    ad44:	add.w	r5, r6, #12
    ad48:	ldr	r3, [r3, #8]
    ad4a:	mov	r2, r5
    ad4c:	mov	r1, r7
    ad4e:	blx	r3
    ad50:	cmp	r0, #0
    ad52:	bne.n	ad14 <FatCache::read(unsigned long, unsigned char)+0x1c>
    ad54:	b.n	ad3a <FatCache::read(unsigned long, unsigned char)+0x42>
    ad56:	nop

0000ad58 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    ad58:	ldrb	r3, [r0, #0]
    ad5a:	lsls	r3, r3, #31
    ad5c:	bmi.n	ad62 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    ad5e:	movs	r0, #1
    ad60:	bx	lr
    ad62:	b.w	acac <FatCache::sync() [clone .part.8]>
    ad66:	nop

0000ad68 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    ad68:	ldrb	r3, [r0, #6]
    ad6a:	ldr	r0, [r0, #20]
    ad6c:	subs	r1, #2
    ad6e:	lsls	r1, r3
}
    ad70:	add	r0, r1
    ad72:	bx	lr

0000ad74 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    ad74:	cmp	r1, #1
    ad76:	bls.n	addc <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    ad78:	ldr	r3, [r0, #28]
    ad7a:	cmp	r1, r3
    ad7c:	bhi.n	addc <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    ad7e:	push	{r4, r5, r6, lr}
    ad80:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    ad82:	cmp	r3, #32
    ad84:	mov	r6, r2
    ad86:	mov	r5, r0
    ad88:	mov	r4, r1
    ad8a:	beq.n	adbe <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    ad8c:	cmp	r3, #16
    ad8e:	bne.n	adb8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    ad90:	ldr	r3, [r0, #24]
    ad92:	ubfx	r1, r1, #8, #8
    ad96:	add	r1, r3
    ad98:	movs	r2, #2
    ad9a:	add.w	r0, r0, #560	; 0x230
    ad9e:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    ada2:	cbz	r0, adb8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    ada4:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    ada6:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    adaa:	ldr	r2, [r5, #28]
    adac:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    adae:	itte	ls
    adb0:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    adb2:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    adb4:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    adb6:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    adb8:	mov.w	r0, #4294967295
    adbc:	pop	{r4, r5, r6, pc}
    adbe:	ldr	r1, [r0, #24]
    adc0:	movs	r2, #2
    adc2:	add.w	r1, r1, r4, lsr #7
    adc6:	add.w	r0, r0, #560	; 0x230
    adca:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    adce:	cmp	r0, #0
    add0:	beq.n	adb8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    add2:	and.w	r1, r4, #127	; 0x7f
    add6:	ldr.w	r3, [r0, r1, lsl #2]
    adda:	b.n	adaa <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    addc:	mov.w	r0, #4294967295
}
    ade0:	bx	lr
    ade2:	nop

0000ade4 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    ade4:	cmp	r1, #1
    ade6:	bls.n	ae24 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    ade8:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    adea:	ldr	r3, [r0, #28]
    adec:	cmp	r1, r3
    adee:	bhi.n	adfe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    adf0:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    adf2:	cmp	r3, #32
    adf4:	mov	r5, r2
    adf6:	mov	r4, r1
    adf8:	beq.n	ae28 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    adfa:	cmp	r3, #16
    adfc:	beq.n	ae02 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    adfe:	movs	r0, #0
    ae00:	pop	{r3, r4, r5, pc}
    ae02:	ldr	r3, [r0, #24]
    ae04:	ubfx	r1, r1, #8, #8
    ae08:	add	r1, r3
    ae0a:	add.w	r0, r0, #560	; 0x230
    ae0e:	movs	r2, #3
    ae10:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    ae14:	mov	r3, r0
    ae16:	cmp	r0, #0
    ae18:	beq.n	adfe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    ae1a:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    ae1c:	movs	r0, #1
    ae1e:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    ae22:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    ae24:	movs	r0, #0
}
    ae26:	bx	lr
    ae28:	ldr	r1, [r0, #24]
    ae2a:	movs	r2, #3
    ae2c:	add.w	r0, r0, #560	; 0x230
    ae30:	add.w	r1, r1, r4, lsr #7
    ae34:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    ae38:	mov	r3, r0
    ae3a:	cmp	r0, #0
    ae3c:	beq.n	adfe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    ae3e:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    ae42:	movs	r0, #1
    ae44:	str.w	r5, [r3, r1, lsl #2]
    ae48:	pop	{r3, r4, r5, pc}
    ae4a:	nop

0000ae4c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    ae4c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    ae50:	ldr	r4, [r0, #12]
    ae52:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    ae54:	sub	sp, #8
    ae56:	mov	r5, r0
    ae58:	mov	r7, r1
    ae5a:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    ae5c:	itte	cc
    ae5e:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    ae60:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    ae62:	movcs	r6, #1
    ae64:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    ae66:	adds	r4, #1
    if (find > m_lastCluster) {
    ae68:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    ae6a:	add	r2, sp, #4
    ae6c:	mov	r0, r5
    ae6e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    ae70:	bls.n	ae86 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    ae72:	cbnz	r6, aec4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    ae74:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    ae76:	adds	r4, #1
    if (find > m_lastCluster) {
    ae78:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    ae7a:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    ae7e:	add	r2, sp, #4
    ae80:	mov	r0, r5
    ae82:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    ae84:	bhi.n	ae72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    ae86:	cmp	r7, r4
    ae88:	beq.n	aec4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    ae8a:	bl	ad74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    ae8e:	cmp	r0, #0
    ae90:	blt.n	aec4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    ae92:	beq.n	ae64 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    ae94:	ldr	r3, [sp, #4]
    ae96:	cmp	r3, #0
    ae98:	bne.n	ae64 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    ae9a:	cbz	r6, ae9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    ae9c:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    ae9e:	mvn.w	r2, #4026531840	; 0xf0000000
    aea2:	mov	r1, r4
    aea4:	mov	r0, r5
    aea6:	bl	ade4 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    aeaa:	mov	r6, r0
    aeac:	cbz	r0, aec4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    aeae:	cbnz	r7, aeb6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    aeb0:	str.w	r4, [r8]
  return true;
    aeb4:	b.n	aec6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    aeb6:	mov	r1, r7
    aeb8:	mov	r0, r5
    aeba:	mov	r2, r4
    aebc:	bl	ade4 <FatPartition::fatPut(unsigned long, unsigned long)>
    aec0:	cmp	r0, #0
    aec2:	bne.n	aeb0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    aec4:	movs	r6, #0
}
    aec6:	mov	r0, r6
    aec8:	add	sp, #8
    aeca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aece:	nop

0000aed0 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    aed0:	push	{r4, r5, r6, lr}
    aed2:	mov	r5, r0
    aed4:	sub	sp, #8
    aed6:	mov	r4, r1
    aed8:	b.n	aef0 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    aeda:	bl	ade4 <FatPartition::fatPut(unsigned long, unsigned long)>
    aede:	cbz	r0, af06 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    aee0:	ldr	r3, [r5, #12]
    aee2:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    aee4:	itt	cc
    aee6:	addcc.w	r4, r4, #4294967295
    aeea:	strcc	r4, [r5, #12]
    }
    cluster = next;
    aeec:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    aeee:	cbz	r6, af08 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    aef0:	add	r2, sp, #4
    aef2:	mov	r1, r4
    aef4:	mov	r0, r5
    aef6:	bl	ad74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    aefa:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    aefc:	mov	r1, r4
    aefe:	mov.w	r2, #0
    af02:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    af04:	bge.n	aeda <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    af06:	movs	r0, #0
}
    af08:	add	sp, #8
    af0a:	pop	{r4, r5, r6, pc}

0000af0c <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    af0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af10:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    af12:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    af14:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    af16:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    af1a:	beq.n	af28 <FatPartition::freeClusterCount()+0x1c>
    af1c:	cmp	r3, #32
    af1e:	beq.n	af28 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    af20:	mov.w	r0, #4294967295
    af24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    af28:	ldr	r5, [r0, #24]
    while (todo) {
    af2a:	cmp.w	r8, #0
    af2e:	beq.n	afae <FatPartition::freeClusterCount()+0xa2>
    af30:	mov	r6, r0
    af32:	add.w	r7, r0, #560	; 0x230
    af36:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    af38:	mov	r1, r5
    af3a:	movs	r2, #2
    af3c:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    af3e:	adds	r5, #1
    af40:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    af44:	cmp	r0, #0
    af46:	beq.n	af20 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    af48:	ldrb	r3, [r6, #7]
    af4a:	cmp	r3, #16
    af4c:	beq.n	af7c <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    af4e:	cmp.w	r8, #127	; 0x7f
    af52:	bhi.n	afa6 <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    af54:	uxth.w	r1, r8
    af58:	mov	lr, r8
    af5a:	subs	r1, #1
    af5c:	uxth	r1, r1
    af5e:	add.w	r1, r0, r1, lsl #2
    af62:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    af64:	ldr.w	r2, [r3, #4]!
    af68:	cbnz	r2, af6c <FatPartition::freeClusterCount()+0x60>
            free++;
    af6a:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    af6c:	cmp	r3, r1
    af6e:	bne.n	af64 <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    af70:	subs.w	r8, r8, lr
    af74:	bne.n	af38 <FatPartition::freeClusterCount()+0x2c>
    af76:	mov	r0, r4
    af78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    af7c:	cmp.w	r8, #255	; 0xff
    af80:	bls.n	afb4 <FatPartition::freeClusterCount()+0xa8>
    af82:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    af86:	mov	r3, lr
    af88:	subs	r1, r3, #1
    af8a:	uxth	r1, r1
    af8c:	add.w	r1, r0, r1, lsl #1
    af90:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    af92:	ldrh.w	r2, [r3, #2]!
    af96:	cbnz	r2, af9a <FatPartition::freeClusterCount()+0x8e>
            free++;
    af98:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    af9a:	cmp	r1, r3
    af9c:	bne.n	af92 <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    af9e:	subs.w	r8, r8, lr
    afa2:	bne.n	af38 <FatPartition::freeClusterCount()+0x2c>
    afa4:	b.n	af76 <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    afa6:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    afaa:	mov	r1, lr
    afac:	b.n	af5a <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    afae:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    afb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    afb4:	uxth.w	r3, r8
    afb8:	mov	lr, r8
    afba:	b.n	af88 <FatPartition::freeClusterCount()+0x7c>

0000afbc <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    afbc:	push	{r3, r4, r5, r6, r7, lr}
    afbe:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    afc0:	movs	r3, #0
  m_allocSearchStart = 1;
    afc2:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    afc4:	mov.w	r0, #4294967295
    afc8:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    afca:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    afcc:	str	r4, [r4, #40]	; 0x28
    afce:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    afd2:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    afd4:	strb.w	r3, [r4, #36]	; 0x24
    afd8:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    afdc:	str	r0, [r4, #44]	; 0x2c
    afde:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    afe2:	mov	r5, r2
    afe4:	cbz	r2, b01e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    afe6:	cmp	r2, #4
    afe8:	bls.n	afee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    afea:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    afec:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    afee:	add.w	r6, r4, #36	; 0x24
    aff2:	mov	r2, r3
    aff4:	mov	r1, r3
    aff6:	mov	r0, r6
    aff8:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    affc:	add.w	r5, r5, #268435456	; 0x10000000
    b000:	subs	r5, #1
    b002:	lsls	r5, r5, #4
    b004:	add.w	r3, r0, #446	; 0x1be
    b008:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    b00a:	cmp	r0, #0
    b00c:	beq.n	afea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b00e:	ldrb	r1, [r2, #4]
    b010:	cmp	r1, #0
    b012:	beq.n	afea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b014:	ldrb	r3, [r3, r5]
    b016:	lsls	r3, r3, #25
    b018:	bne.n	afea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b01a:	ldr	r5, [r2, #8]
    b01c:	b.n	b022 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    b01e:	add.w	r6, r4, #36	; 0x24
    b022:	mov	r0, r6
    b024:	movs	r2, #0
    b026:	mov	r1, r5
    b028:	bl	acf8 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    b02c:	cmp	r0, #0
    b02e:	beq.n	afea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b030:	ldrb	r3, [r0, #16]
    b032:	cmp	r3, #2
    b034:	bne.n	afea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b036:	ldrh.w	r3, [r0, #11]
    b03a:	cmp.w	r3, #512	; 0x200
    b03e:	bne.n	afea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    b040:	ldrb	r6, [r0, #13]
    b042:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b044:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b046:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b048:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b04a:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b04c:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b04e:	beq.n	b070 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    b050:	movs	r2, #1
    b052:	mov	r1, r2
    b054:	b.n	b058 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    b056:	mov	r2, r3
    b058:	lsls	r1, r1, #1
    b05a:	uxtb	r1, r1
    b05c:	adds	r3, r2, #1
    b05e:	cmp	r6, r1
    b060:	uxtb	r3, r3
    b062:	beq.n	b06e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    b064:	cmp	r3, #9
    b066:	bne.n	b056 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    b068:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    b06a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    b06c:	pop	{r3, r4, r5, r6, r7, pc}
    b06e:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    b070:	ldrh	r1, [r0, #22]
    b072:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    b074:	cbnz	r1, b07a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    b076:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    b078:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b07a:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b07c:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    b080:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b082:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b084:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b086:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b08a:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    b08e:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b092:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b094:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b098:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    b09a:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    b09c:	cbnz	r1, b0a0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b09e:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    b0a0:	subs	r5, r5, r3
    b0a2:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    b0a4:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b0a8:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b0ac:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b0ae:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b0b0:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b0b2:	bls.n	b0ca <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    b0b4:	movw	r3, #65524	; 0xfff4
    b0b8:	cmp	r2, r3
    b0ba:	ittet	hi
    b0bc:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    b0be:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    b0c0:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    b0c2:	movhi	r3, #32
    b0c4:	strb	r3, [r4, #7]
  }
  return true;
    b0c6:	movs	r0, #1
    b0c8:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    b0ca:	movs	r3, #12
    b0cc:	strb	r3, [r4, #7]
    b0ce:	b.n	afea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>

0000b0d0 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    b0d0:	cmp	r1, #4
    b0d2:	bls.n	b0ee <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    b0d4:	cmp	r1, #10
    b0d6:	bls.n	b0e6 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    b0d8:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b0da:	itte	ls
    b0dc:	addls.w	r1, r0, r1, lsl #1
    b0e0:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    b0e2:	movhi	r0, #0
}
    b0e4:	bx	lr
    b0e6:	add.w	r1, r0, r1, lsl #1
    b0ea:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    b0ec:	bx	lr
    b0ee:	add.w	r1, r0, r1, lsl #1
    b0f2:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    b0f6:	bx	lr

0000b0f8 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    b0f8:	push	{r4}
    b0fa:	subs	r2, r0, #1
    b0fc:	add.w	r4, r0, #10
  uint8_t sum = 0;
    b100:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b102:	ldrb.w	r1, [r2, #1]!
    b106:	lsrs	r3, r0, #1
    b108:	orr.w	r0, r3, r0, lsl #7
    b10c:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b110:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b112:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b114:	bne.n	b102 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    b116:	ldr.w	r4, [sp], #4
    b11a:	bx	lr

0000b11c <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    b11c:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    b11e:	ldr	r3, [r1, #12]
    b120:	cbz	r3, b140 <FatFile::openCluster(FatFile*)+0x24>
    b122:	mov	r5, r0
    b124:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    b126:	movs	r2, #36	; 0x24
    b128:	movs	r1, #0
    b12a:	bl	14e3c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    b12e:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    b130:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    b132:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    b134:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    b136:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    b138:	ldr	r3, [r4, #12]
    b13a:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    b13c:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b13e:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b140:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b142:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b146:	b.w	a29c <FatFile::openRoot(FatVolume*)>
    b14a:	nop

0000b14c <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    b14c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b150:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b152:	ldrb	r3, [r0, #0]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    b154:	movs	r4, #0
    b156:	strb.w	r4, [sp, #12]
    b15a:	strb.w	r4, [sp, #13]
    b15e:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    b162:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b164:	cbz	r3, b16c <FatFile::getName(char*, unsigned int)+0x20>
    b166:	cmp	r2, #12
    b168:	mov	r5, r2
    b16a:	bhi.n	b17a <FatFile::getName(char*, unsigned int)+0x2e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    b16c:	movs	r7, #0
    b16e:	strb.w	r7, [r9]
  return false;
}
    b172:	mov	r0, r7
    b174:	add	sp, #52	; 0x34
    b176:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    b17a:	ldrb	r3, [r0, #3]
    b17c:	mov	r8, r0
    b17e:	cmp	r3, #0
    b180:	beq.n	b23a <FatFile::getName(char*, unsigned int)+0xee>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    b182:	add	r0, sp, #12
    b184:	mov	r1, r8
    b186:	bl	b11c <FatFile::openCluster(FatFile*)>
    b18a:	cmp	r0, #0
    b18c:	beq.n	b16c <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b18e:	ldrb.w	r3, [r8, #3]
    b192:	cmp	r3, #0
    b194:	beq.n	b16c <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b196:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b198:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    b19a:	ldrh.w	r1, [r8, #4]
    b19e:	subs	r1, r1, r6
    b1a0:	lsls	r1, r1, #5
    b1a2:	add	r0, sp, #12
    b1a4:	bl	a6e0 <FatFile::seekSet(unsigned long)>
    b1a8:	mov	r7, r0
    b1aa:	cmp	r0, #0
    b1ac:	beq.n	b16c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b1ae:	movs	r1, #0
    b1b0:	add	r0, sp, #12
    b1b2:	bl	a46c <FatFile::readDirCache(bool)>
    if (!ldir) {
    b1b6:	mov	sl, r0
    b1b8:	cmp	r0, #0
    b1ba:	beq.n	b16c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    b1bc:	ldrb	r3, [r0, #11]
    b1be:	cmp	r3, #15
    b1c0:	bne.n	b16c <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    b1c2:	ldrb	r3, [r0, #0]
    b1c4:	and.w	r3, r3, #31
    b1c8:	cmp	r6, r3
    b1ca:	bne.n	b16c <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b1cc:	subs	r3, r6, #1
    b1ce:	add.w	r2, r3, r3, lsl #1
    b1d2:	add.w	r2, r3, r2, lsl #2
    b1d6:	mov	r3, r2
    b1d8:	add.w	r4, r9, r2
    b1dc:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    b1e0:	subs	r1, r3, r2
    b1e2:	uxtb	r1, r1
    b1e4:	mov	r0, sl
    b1e6:	bl	b0d0 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    b1ea:	cbz	r0, b248 <FatFile::getName(char*, unsigned int)+0xfc>
    b1ec:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b1ee:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    b1f2:	bls.n	b218 <FatFile::getName(char*, unsigned int)+0xcc>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b1f4:	cmp	r0, #126	; 0x7e
    b1f6:	ite	ls
    b1f8:	uxtbls	r0, r0
    b1fa:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    b1fc:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b1fe:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    b202:	bne.n	b1e0 <FatFile::getName(char*, unsigned int)+0x94>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    b204:	cmp	r5, fp
    b206:	bls.n	b218 <FatFile::getName(char*, unsigned int)+0xcc>
    b208:	ldrb.w	r3, [sl]
    b20c:	lsls	r2, r3, #25
    name[k] = 0;
    b20e:	itt	mi
    b210:	ldrbmi.w	r3, [sp, #4]
    b214:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    b218:	add.w	r3, r9, r5
    b21c:	ldrb.w	r2, [sp, #4]
    b220:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b224:	ldrb.w	r3, [sl]
    b228:	lsls	r3, r3, #25
    b22a:	bmi.n	b172 <FatFile::getName(char*, unsigned int)+0x26>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b22c:	adds	r6, #1
    b22e:	ldrb.w	r3, [r8, #3]
    b232:	uxtb	r6, r6
    b234:	cmp	r3, r6
    b236:	bcs.n	b19a <FatFile::getName(char*, unsigned int)+0x4e>
    b238:	b.n	b16c <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    b23a:	bl	bb14 <FatFile::getSFN(char*)>
    b23e:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    b240:	mov	r0, r7
    b242:	add	sp, #52	; 0x34
    b244:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    b248:	mov	fp, r3
    b24a:	b.n	b204 <FatFile::getName(char*, unsigned int)+0xb8>

0000b24c <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    b24c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    b250:	ldrb	r3, [r0, #0]
    b252:	cmp	r3, #32
    b254:	bne.n	b25e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    b256:	ldrb.w	r3, [r0, #1]!
    b25a:	cmp	r3, #32
    b25c:	beq.n	b256 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    b25e:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    b260:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    b262:	cmp	r3, #0
    b264:	beq.w	b476 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    b268:	cmp	r3, #47	; 0x2f
    b26a:	beq.n	b2cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b26c:	cmp	r3, #92	; 0x5c
    b26e:	beq.n	b2b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    b270:	sub.w	r4, r3, #34	; 0x22
    b274:	uxtb	r4, r4
    b276:	cmp	r4, #29
    b278:	bls.n	b2bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    b27a:	ldr.w	lr, [pc, #536]	; b494 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    b27e:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    b280:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b282:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    b284:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b288:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    b28a:	beq.n	b2b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    b28c:	cmp	r5, #94	; 0x5e
    b28e:	bhi.n	b2b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    b290:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b294:	sub.w	r5, r3, #34	; 0x22
    b298:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    b29a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    b29c:	cmp	r3, #0
    b29e:	beq.w	b448 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    b2a2:	cmp	r3, #47	; 0x2f
    b2a4:	beq.n	b2ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b2a6:	cmp	r3, #92	; 0x5c
    b2a8:	lsr.w	r7, lr, r5
    b2ac:	beq.n	b2b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    b2ae:	cmp	r5, #29
    b2b0:	bhi.n	b282 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    b2b2:	lsls	r7, r7, #31
    b2b4:	bpl.n	b282 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    b2b6:	movs	r0, #0
    b2b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    b2bc:	ldr	r5, [pc, #468]	; (b494 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    b2be:	lsr.w	r4, r5, r4
    b2c2:	lsls	r4, r4, #31
    b2c4:	bpl.n	b27a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    b2c6:	movs	r0, #0
    b2c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    b2cc:	movs	r4, #0
    b2ce:	adds	r7, r0, r4
    b2d0:	mov	r6, r7
    b2d2:	mov	r5, r4
    b2d4:	movs	r3, #47	; 0x2f
    b2d6:	b.n	b2de <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    b2d8:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    b2dc:	adds	r5, #1
    b2de:	cmp	r3, #32
    b2e0:	beq.n	b2d8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    b2e2:	cmp	r3, #47	; 0x2f
    b2e4:	beq.n	b2d8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    b2e6:	add	r5, r0
    b2e8:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    b2ea:	cbz	r4, b300 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    b2ec:	mov	r2, r7
    c = path[len - 1];
    b2ee:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    b2f2:	cmp	r3, #46	; 0x2e
    b2f4:	beq.n	b2fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    b2f6:	cmp	r3, #32
    b2f8:	bne.w	b44e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    b2fc:	subs	r4, #1
    b2fe:	bne.n	b2ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    b300:	mov.w	r5, #4294967295
    b304:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    b306:	str	r3, [r1, #4]
    b308:	add.w	r6, r1, #23
    b30c:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    b310:	movs	r2, #32
    b312:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    b316:	cmp	r3, r6
    b318:	bne.n	b312 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    b31a:	subs	r6, r0, #1
    b31c:	movs	r2, #0
    b31e:	b.n	b322 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    b320:	adds	r2, #1
    b322:	ldrb.w	r3, [r6, #1]!
    b326:	cmp	r3, #46	; 0x2e
    b328:	beq.n	b320 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    b32a:	cmp	r3, #32
    b32c:	beq.n	b320 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    b32e:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    b332:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    b334:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    b338:	beq.n	b354 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    b33a:	ldrb	r7, [r0, r5]
    b33c:	cmp	r7, #46	; 0x2e
    b33e:	add.w	r6, r0, r5
    b342:	bne.n	b34e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    b344:	b.n	b354 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    b346:	ldrb.w	r7, [r6, #-1]!
    b34a:	cmp	r7, #46	; 0x2e
    b34c:	beq.n	b354 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    b34e:	adds.w	r5, r5, #4294967295
    b352:	bcs.n	b346 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    b354:	cmp	r2, r4
    b356:	mov.w	r9, #0
    b35a:	bge.w	b480 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    b35e:	mov	r6, r9
    b360:	mov	sl, r9
    b362:	movs	r7, #7
    b364:	mov.w	r8, #8
    b368:	b.n	b3b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    b36a:	cmp	r3, #46	; 0x2e
    b36c:	beq.n	b3fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    b36e:	cmp	r3, #34	; 0x22
    b370:	beq.n	b38a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    b372:	cmp	r3, #124	; 0x7c
    b374:	beq.n	b38a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    b376:	sub.w	lr, r3, #42	; 0x2a
    b37a:	cmp.w	lr, #5
    b37e:	bls.n	b412 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    b380:	sub.w	lr, r3, #58	; 0x3a
    b384:	cmp.w	lr, #5
    b388:	bhi.n	b43c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    b38a:	cmp	r5, r2
    b38c:	beq.n	b402 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    b38e:	cmp	r7, r6
    b390:	bcc.n	b3e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    b392:	mov.w	ip, #0
      c = '_';
    b396:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    b398:	add.w	lr, r6, #1
    b39c:	add.w	fp, r1, r6
    b3a0:	uxtb.w	r6, lr
      if (i < 7) {
    b3a4:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    b3a6:	strb.w	r3, [fp, #13]
      if (i < 7) {
    b3aa:	bhi.n	b3ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    b3ac:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    b3ae:	adds	r2, #1
    b3b0:	cmp	r2, r4
    b3b2:	bge.n	b3c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    b3b4:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    b3b6:	cmp	r3, #32
    b3b8:	bne.n	b36a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    b3ba:	adds	r2, #1
    b3bc:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    b3be:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    b3c2:	blt.n	b3b4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    b3c4:	ldrb	r3, [r1, #13]
    b3c6:	cmp	r3, #32
    b3c8:	beq.w	b2b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    b3cc:	cmp.w	ip, #0
    b3d0:	beq.n	b462 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    b3d2:	tst.w	sl, r9
    b3d6:	it	ne
    b3d8:	movne.w	r9, #2
    b3dc:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    b3e0:	movs	r0, #1
    b3e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    b3e6:	cmp	r7, #10
    b3e8:	beq.n	b45a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    b3ea:	cmp	r5, r2
    b3ec:	blt.n	b45a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    b3ee:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    b3f0:	movs	r7, #10
      i = 8;    // Place for extension.
    b3f2:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    b3f4:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    b3f8:	mov.w	ip, #0
    b3fc:	b.n	b3ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    b3fe:	cmp	r5, r2
    b400:	bne.n	b3ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    b402:	cmp	r7, #10
    b404:	beq.n	b45a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    b406:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    b408:	movs	r7, #10
      i = 8;    // Place for extension.
    b40a:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    b40c:	mov.w	r8, #16
    b410:	b.n	b3ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    b412:	cmp	r3, #45	; 0x2d
    b414:	bne.n	b38a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    b416:	sub.w	lr, r3, #33	; 0x21
    b41a:	cmp.w	lr, #93	; 0x5d
    b41e:	bhi.n	b38a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    b420:	cmp	r5, r2
    b422:	beq.n	b402 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    b424:	cmp	r7, r6
    b426:	bcc.n	b3e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    b428:	sub.w	lr, r3, #97	; 0x61
    b42c:	cmp.w	lr, #25
    b430:	bhi.n	b484 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    b432:	subs	r3, #32
    b434:	uxtb	r3, r3
        lc |= bit;
    b436:	orr.w	r9, r8, r9
    b43a:	b.n	b398 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    b43c:	sub.w	lr, r3, #91	; 0x5b
    b440:	cmp.w	lr, #2
    b444:	bls.n	b38a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    b446:	b.n	b416 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    b448:	str	r7, [r2, #0]
    b44a:	adds	r7, r0, r4
    b44c:	b.n	b2ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    b44e:	cmp	r4, #255	; 0xff
    b450:	bgt.w	b2b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    b454:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    b456:	mov	r3, r4
    b458:	b.n	b306 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    b45a:	ldrb	r3, [r1, #13]
    b45c:	cmp	r3, #32
    b45e:	beq.w	b2b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    b462:	ldrb	r3, [r1, #12]
    b464:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    b466:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    b468:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    b46a:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    b46c:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    b46e:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    b470:	strb	r2, [r3, #14]
    b472:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    b476:	str	r0, [r2, #0]
    b478:	mov	r4, r3
    b47a:	mov.w	r5, #4294967295
    b47e:	b.n	b306 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    b480:	mov	sl, r9
    b482:	b.n	b3c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    b484:	sub.w	lr, r3, #65	; 0x41
    b488:	cmp.w	lr, #25
        uc |= bit;
    b48c:	it	ls
    b48e:	orrls.w	sl, r8, sl
    b492:	b.n	b398 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    b494:	.word	0x35000101

0000b498 <FatFile::printName(Print*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printName(print_t* pr) {
    b498:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b49c:	sub	sp, #56	; 0x38
  size_t n = 0;
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
    b49e:	ldrb	r3, [r0, #3]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    b4a0:	movs	r5, #0
    b4a2:	strb.w	r5, [sp, #20]
    b4a6:	strb.w	r5, [sp, #21]
    b4aa:	strb.w	r5, [sp, #22]
    b4ae:	cmp	r3, #0
    b4b0:	beq.n	b548 <FatFile::printName(Print*)+0xb0>
    b4b2:	mov	r7, r0
    b4b4:	mov	r8, r1
    return printSFN(pr);
  }
  if (!dirFile.openCluster(this)) {
    b4b6:	add	r0, sp, #20
    b4b8:	mov	r1, r7
    b4ba:	bl	b11c <FatFile::openCluster(FatFile*)>
    b4be:	cmp	r0, #0
    b4c0:	beq.n	b53c <FatFile::printName(Print*)+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b4c2:	ldrb	r3, [r7, #3]
    b4c4:	cmp	r3, #0
    b4c6:	beq.n	b53c <FatFile::printName(Print*)+0xa4>
    b4c8:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    b4ca:	ldrh	r1, [r7, #4]
    b4cc:	subs	r1, r1, r6
    b4ce:	lsls	r1, r1, #5
    b4d0:	add	r0, sp, #20
    b4d2:	bl	a6e0 <FatFile::seekSet(unsigned long)>
    b4d6:	cbz	r0, b53c <FatFile::printName(Print*)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b4d8:	movs	r1, #0
    b4da:	add	r0, sp, #20
    b4dc:	bl	a46c <FatFile::readDirCache(bool)>
    if (!ldir) {
    b4e0:	mov	r9, r0
    b4e2:	cbz	r0, b53c <FatFile::printName(Print*)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    b4e4:	ldrb	r3, [r0, #11]
    b4e6:	cmp	r3, #15
    b4e8:	bne.n	b53c <FatFile::printName(Print*)+0xa4>
    b4ea:	ldrb	r3, [r0, #0]
    b4ec:	and.w	r3, r3, #31
    b4f0:	cmp	r6, r3
    b4f2:	bne.n	b53c <FatFile::printName(Print*)+0xa4>
    b4f4:	add	r3, sp, #4
    b4f6:	add.w	sl, r5, #13
    b4fa:	mov	r4, r5
    b4fc:	subs	r2, r4, r5
    b4fe:	uxtb	r2, r2
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
    b500:	mov	r1, r2
    b502:	mov	r0, r9
    b504:	bl	b0d0 <lfnGetChar(DirLfn_t*, unsigned char)>
      if (u == 0) {
    b508:	cbz	r0, b544 <FatFile::printName(Print*)+0xac>
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    b50a:	cmp	r0, #126	; 0x7e
      n++;
    b50c:	add.w	r4, r4, #1
      u = lfnGetChar(ldir, i);
      if (u == 0) {
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    b510:	ite	ls
    b512:	uxtbls	r0, r0
    b514:	movhi	r0, #63	; 0x3f
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
    b516:	cmp	r4, sl
      u = lfnGetChar(ldir, i);
      if (u == 0) {
        // End of name.
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
    b518:	strb.w	r0, [r3], #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
    b51c:	bne.n	b4fc <FatFile::printName(Print*)+0x64>
    b51e:	mov	r5, r4
    b520:	movs	r2, #13
        break;
      }
      buf[i] = u < 0X7F ? u : '?';
      n++;
    }
    pr->write(buf, i);
    b522:	ldr.w	r3, [r8]
    b526:	add	r1, sp, #4
    b528:	ldr	r3, [r3, #4]
    b52a:	mov	r0, r8
    b52c:	blx	r3
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b52e:	adds	r6, #1
    b530:	ldrb	r3, [r7, #3]
    b532:	uxtb	r6, r6
    b534:	cmp	r3, r6
    b536:	bcs.n	b4ca <FatFile::printName(Print*)+0x32>
    b538:	mov	r0, r4
    b53a:	b.n	b53e <FatFile::printName(Print*)+0xa6>
    pr->write(buf, i);
  }
  return n;

fail:
  return 0;
    b53c:	movs	r0, #0
}
    b53e:	add	sp, #56	; 0x38
    b540:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (i = 0; i < 13; i++) {
      u = lfnGetChar(ldir, i);
      if (u == 0) {
    b544:	mov	r5, r4
    b546:	b.n	b522 <FatFile::printName(Print*)+0x8a>
  uint16_t u;
  uint8_t buf[13];
  uint8_t i;

  if (!isLFN()) {
    return printSFN(pr);
    b548:	bl	bb34 <FatFile::printSFN(Print*)>
  }
  return n;

fail:
  return 0;
}
    b54c:	add	sp, #56	; 0x38
    b54e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b552:	nop

0000b554 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    b554:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    b558:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    b55a:	sub	sp, #40	; 0x28
    b55c:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    b55e:	lsls	r2, r2, #30
    b560:	strb.w	r3, [sp, #4]
    b564:	strb.w	r3, [sp, #5]
    b568:	strb.w	r3, [sp, #6]
    b56c:	bpl.n	b5b4 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    b56e:	ldr	r1, [r0, #32]
    b570:	mov	r5, r0
    b572:	cbnz	r1, b5be <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    b574:	movs	r1, #1
    b576:	mov	r0, r5
    b578:	bl	9ea0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    b57c:	cbz	r0, b5b4 <FatFile::remove()+0x60>
    b57e:	subs	r1, r0, #1
    b580:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    b584:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b586:	lsrs	r2, r4, #1
    b588:	ldrb.w	r6, [r1, #1]!
    b58c:	orr.w	r3, r2, r4, lsl #7
    b590:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b594:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b596:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b598:	bne.n	b586 <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    b59a:	mov.w	r8, #229	; 0xe5
    b59e:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    b5a2:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    b5a4:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    b5a6:	add.w	r0, r6, #36	; 0x24
    b5aa:	strb	r3, [r5, #0]
  m_flags = 0;
    b5ac:	strb	r3, [r5, #2]
    b5ae:	bl	ad58 <FatCache::sync()>
    b5b2:	cbnz	r0, b5ca <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    b5b4:	movs	r6, #0
}
    b5b6:	mov	r0, r6
    b5b8:	add	sp, #40	; 0x28
    b5ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    b5be:	ldr	r0, [r0, #8]
    b5c0:	bl	aed0 <FatPartition::freeChain(unsigned long)>
    b5c4:	cmp	r0, #0
    b5c6:	bne.n	b574 <FatFile::remove()+0x20>
    b5c8:	b.n	b5b4 <FatFile::remove()+0x60>
    b5ca:	add.w	r0, r6, #560	; 0x230
    b5ce:	bl	ad58 <FatCache::sync()>
    b5d2:	cmp	r0, #0
    b5d4:	beq.n	b5b4 <FatFile::remove()+0x60>
    b5d6:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    b5d8:	ldr	r3, [r0, #0]
    b5da:	ldr	r3, [r3, #20]
    b5dc:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    b5de:	mov	r6, r0
    b5e0:	cmp	r0, #0
    b5e2:	beq.n	b5b4 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    b5e4:	ldrb	r3, [r5, #3]
    b5e6:	cmp	r3, #0
    b5e8:	beq.n	b5b6 <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    b5ea:	add	r0, sp, #4
    b5ec:	mov	r1, r5
    b5ee:	bl	b11c <FatFile::openCluster(FatFile*)>
    b5f2:	cmp	r0, #0
    b5f4:	beq.n	b5b4 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b5f6:	ldrb	r3, [r5, #3]
    b5f8:	cmp	r3, #0
    b5fa:	beq.n	b5b4 <FatFile::remove()+0x60>
    b5fc:	movs	r7, #1
    b5fe:	b.n	b640 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b600:	add	r0, sp, #4
    b602:	bl	a46c <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b606:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    b608:	cmp	r0, #0
    b60a:	beq.n	b5b4 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    b60c:	ldrb	r2, [r0, #11]
    b60e:	cmp	r2, #15
    b610:	bne.n	b5b4 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    b612:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    b614:	and.w	r1, r2, #31
    b618:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b61a:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    b61c:	bne.n	b5b4 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    b61e:	ldrb	r3, [r0, #13]
    b620:	cmp	r3, r4
    b622:	bne.n	b5b4 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    b624:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    b628:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    b62a:	ldrb.w	r3, [r1, #36]	; 0x24
    b62e:	orr.w	r3, r3, #1
    b632:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    b636:	lsls	r3, r2, #25
    b638:	bmi.n	b654 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b63a:	ldrb	r3, [r5, #3]
    b63c:	cmp	r3, r7
    b63e:	bcc.n	b5b4 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    b640:	ldrh	r1, [r5, #4]
    b642:	subs	r1, r1, r7
    b644:	lsls	r1, r1, #5
    b646:	add	r0, sp, #4
    b648:	bl	a6e0 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b64c:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    b64e:	cmp	r0, #0
    b650:	bne.n	b600 <FatFile::remove()+0xac>
    b652:	b.n	b5b4 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    b654:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    b656:	add.w	r0, r4, #36	; 0x24
    b65a:	bl	ad58 <FatCache::sync()>
    b65e:	cmp	r0, #0
    b660:	beq.n	b5b4 <FatFile::remove()+0x60>
    b662:	add.w	r0, r4, #560	; 0x230
    b666:	bl	ad58 <FatCache::sync()>
    b66a:	cmp	r0, #0
    b66c:	beq.n	b5b4 <FatFile::remove()+0x60>
    b66e:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    b670:	ldr	r3, [r0, #0]
    b672:	ldr	r3, [r3, #20]
    b674:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    b676:	cmp	r0, #0
    b678:	beq.n	b5b4 <FatFile::remove()+0x60>
    b67a:	b.n	b5b6 <FatFile::remove()+0x62>

0000b67c <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    b67c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    b680:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    b682:	mov	r6, r1
    b684:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    b686:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    b68a:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    b68e:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    b692:	ldr	r0, [r6, #4]
    b694:	ldr	r1, [r6, #8]
    b696:	add.w	r3, r8, r0
    b69a:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    b69c:	cbz	r0, b6b0 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    b69e:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    b6a0:	ldrb.w	r2, [r1], #1
    b6a4:	add.w	r3, r3, r3, lsl #5
    b6a8:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    b6aa:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    b6ac:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    b6ae:	bne.n	b6a0 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    b6b0:	cmp	r7, #3
    b6b2:	it	cs
    b6b4:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    b6b6:	adds	r2, r7, #4
    b6b8:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    b6ba:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    b6be:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    b6c0:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    b6c2:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    b6c4:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    b6c6:	ite	ls
    b6c8:	addls	r1, #48	; 0x30
    b6ca:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    b6cc:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    b6ce:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    b6d2:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    b6d4:	bcc.n	b6ba <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    b6d6:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    b6d8:	movs	r1, #0
    b6da:	strb.w	r9, [r3, #13]
    b6de:	mov	r0, r4
    b6e0:	bl	a6e0 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    b6e4:	movs	r1, #1
    b6e6:	mov	r0, r4
    b6e8:	bl	a46c <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    b6ec:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    b6ee:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    b6f0:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    b6f2:	cbz	r0, b720 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    b6f4:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    b6f8:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    b6fa:	cmp.w	lr, #0
    b6fe:	beq.n	b72c <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    b700:	ldrb	r3, [r3, #11]
    b702:	lsls	r3, r3, #28
    b704:	bmi.n	b6e4 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    b706:	bl	14d10 <memcmp>
    b70a:	cmp	r0, #0
    b70c:	bne.n	b6e4 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    b70e:	add.w	r8, r8, #1
    b712:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    b716:	cmp.w	r8, #100	; 0x64
    b71a:	bne.n	b692 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    b71c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    b720:	ldrb	r0, [r4, #1]
    b722:	clz	r0, r0
    b726:	lsrs	r0, r0, #5
    b728:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    b72c:	movs	r0, #1
    b72e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b732:	nop

0000b734 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    b734:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    b738:	ldrb	r4, [r1, #0]
    b73a:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    b73e:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    b740:	beq.n	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    b742:	ldrb	r4, [r0, #0]
    b744:	cbz	r4, b74e <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    b746:	movs	r0, #0
}
    b748:	add	sp, #52	; 0x34
    b74a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    b74e:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    b750:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    b754:	lsls	r4, r4, #30
    b756:	bne.n	b7de <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    b758:	mov.w	r8, #1
    b75c:	mov	r6, r1
    b75e:	mov	fp, r2
    b760:	str	r0, [sp, #36]	; 0x24
    b762:	movs	r1, #0
    b764:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    b766:	mov	r7, r1
    b768:	str	r3, [sp, #28]
    b76a:	bl	a6e0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    b76e:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    b772:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    b774:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    b776:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    b778:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    b77a:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    b77c:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    b77e:	movs	r1, #1
    b780:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    b782:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    b784:	bl	a46c <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    b788:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    b78c:	mov	r3, r0
    b78e:	cmp	r0, #0
    b790:	beq.w	b8ac <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    b794:	ldrb	r2, [r0, #0]
    b796:	cmp	r2, #229	; 0xe5
    b798:	beq.n	b810 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    b79a:	cmp	r2, #0
    b79c:	beq.n	b810 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    b79e:	cmp	r4, r8
    b7a0:	it	cc
    b7a2:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    b7a4:	cmp	r2, #46	; 0x2e
    b7a6:	beq.n	b80a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    b7a8:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    b7aa:	cmp	r1, #15
    b7ac:	beq.n	b82c <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    b7ae:	and.w	r1, r1, #8
    b7b2:	and.w	r2, r1, #255	; 0xff
    b7b6:	cbnz	r1, b80a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    b7b8:	cmp.w	r9, #0
    b7bc:	bne.w	ba84 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    b7c0:	mov	r0, r3
    b7c2:	movs	r2, #11
    b7c4:	ldr	r1, [sp, #16]
    b7c6:	bl	14d10 <memcmp>
    b7ca:	cmp	r0, #0
    b7cc:	bne.n	b77e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    b7ce:	ldrb.w	r3, [fp]
    b7d2:	lsls	r0, r3, #31
    b7d4:	bpl.w	baac <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    b7d8:	movs	r3, #1
    b7da:	str	r3, [sp, #20]
    b7dc:	b.n	b77e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    b7de:	ldr	r5, [pc, #724]	; (bab4 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    b7e0:	add.w	r4, sl, #12
    b7e4:	umull	r4, r8, r5, r4
    b7e8:	mov.w	r8, r8, lsr #2
    b7ec:	add.w	r8, r8, #1
    b7f0:	uxtb.w	r8, r8
    b7f4:	b.n	b75c <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    b7f6:	ldr	r1, [sp, #12]
    b7f8:	subs	r1, #1
    b7fa:	uxtb	r1, r1
    b7fc:	cmp	r2, r1
    b7fe:	str	r1, [sp, #12]
    b800:	bne.n	b80a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    b802:	ldrb	r2, [r3, #13]
    b804:	ldr	r1, [sp, #24]
    b806:	cmp	r1, r2
    b808:	beq.n	b842 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    b80a:	mov.w	r9, #0
    b80e:	b.n	b77e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    b810:	cmp	r4, #0
    b812:	it	eq
    b814:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    b816:	cmp	r4, r8
        freeFound++;
    b818:	itt	cc
    b81a:	addcc	r4, #1
    b81c:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    b81e:	cmp	r2, #0
    b820:	beq.n	b8b4 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    b822:	cmp	r2, #229	; 0xe5
    b824:	bne.n	b7a4 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    b826:	mov.w	r9, #0
    b82a:	b.n	b77e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    b82c:	cmp.w	r9, #0
    b830:	bne.n	b7f6 <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    b832:	lsls	r5, r2, #25
    b834:	bpl.n	b77e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    b836:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    b83a:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    b83c:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    b840:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    b842:	ldr	r2, [sp, #12]
    b844:	subs	r2, #1
    b846:	add.w	r5, r2, r2, lsl #1
    b84a:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    b84e:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    b850:	mov	r2, r5
      if (k >= len) {
    b852:	bls.n	b80a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    b854:	add.w	r1, r5, #13
    b858:	str.w	r9, [sp, #32]
    b85c:	mov	r9, r1
    b85e:	b.n	b888 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b860:	ldr.w	r0, [fp, #8]
    b864:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    b866:	cmp.w	ip, #25
    b86a:	it	ls
    b86c:	addls	r1, #32
    b86e:	sub.w	r0, r2, #65	; 0x41
    b872:	it	ls
    b874:	uxtbls	r1, r1
    b876:	cmp	r0, #25
    b878:	itt	ls
    b87a:	addls	r2, #32
    b87c:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b87e:	cmp	r2, r1
    b880:	bne.n	b80a <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    b882:	cmp	lr, r9
    b884:	beq.n	b90c <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    b886:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    b888:	subs	r1, r2, r5
    b88a:	uxtb	r1, r1
    b88c:	mov	r0, r3
    b88e:	bl	b0d0 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b892:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    b894:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    b896:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b89a:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    b89e:	beq.w	ba76 <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    b8a2:	cmp	r0, #255	; 0xff
    b8a4:	bls.n	b860 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    b8a6:	mov.w	r9, #0
    b8aa:	b.n	b77e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    b8ac:	ldrb	r3, [r6, #1]
    b8ae:	cmp	r3, #0
    b8b0:	bne.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    b8b4:	ldr	r2, [sp, #28]
    b8b6:	mov	r3, r2
    b8b8:	lsls	r2, r3, #22
    b8ba:	bpl.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    b8be:	and.w	r3, r3, #3
    b8c2:	subs	r3, #1
    b8c4:	cmp	r3, #1
    b8c6:	bhi.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    b8ca:	cmp	r4, #0
    b8cc:	it	eq
    b8ce:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    b8d0:	cmp	r4, r8
    b8d2:	bcc.n	b8dc <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    b8d4:	b.n	b912 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    b8d6:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    b8d8:	cmp	r8, r4
    b8da:	bls.n	b912 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    b8dc:	movs	r1, #0
    b8de:	mov	r0, r6
    b8e0:	bl	a46c <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    b8e4:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    b8e6:	cmp	r0, #0
    b8e8:	bne.n	b8d6 <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    b8ea:	ldrb	r3, [r6, #1]
    b8ec:	cbz	r3, b8f8 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    b8ee:	b.n	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    b8f0:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    b8f2:	ldrb	r3, [r3, #4]
    b8f4:	cmp	r3, #1
    b8f6:	bhi.n	b912 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    b8f8:	cmp	r8, r4
    b8fa:	bls.n	b912 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    b8fc:	mov	r0, r6
    b8fe:	bl	9e0c <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    b902:	adds	r4, #16
    b904:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    b906:	cmp	r0, #0
    b908:	bne.n	b8f0 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    b90a:	b.n	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    b90c:	ldr.w	r9, [sp, #32]
    b910:	b.n	b77e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    b912:	ldr	r3, [sp, #20]
    b914:	cbz	r3, b924 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    b916:	mov	r1, fp
    b918:	mov	r0, r6
    b91a:	bl	b67c <FatFile::lfnUniqueSfn(fname_t*)>
    b91e:	cmp	r0, #0
    b920:	beq.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    b924:	lsls	r1, r7, #5
    b926:	mov	r0, r6
    b928:	bl	a6e0 <FatFile::seekSet(unsigned long)>
    b92c:	cmp	r0, #0
    b92e:	beq.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    b932:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    b936:	ands.w	r9, r8, #255	; 0xff
    b93a:	beq.n	b9f0 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    b93c:	orr.w	r4, r9, #64	; 0x40
    b940:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    b942:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    b944:	movs	r7, #0
    b946:	movs	r1, #0
    b948:	mov	r0, r6
    b94a:	bl	a46c <FatFile::readDirCache(bool)>
    if (!ldir) {
    b94e:	cmp	r0, #0
    b950:	beq.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    b954:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    b956:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    b95a:	cmp	r9, r5
    b95c:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    b960:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    b964:	ite	ne
    b966:	movne	r1, r5
    b968:	moveq	r1, r4
    b96a:	strb.w	r3, [r2, #36]	; 0x24
    b96e:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    b972:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    b976:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    b978:	strb	r1, [r0, #0]
    b97a:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    b97e:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b980:	ldrb.w	r8, [lr, #1]!
    b984:	lsrs	r2, r3, #1
    b986:	orr.w	r3, r2, r3, lsl #7
    b98a:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b98e:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b990:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b992:	bne.n	b980 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b994:	and.w	r1, r1, #31
    b998:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    b99a:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b99c:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    b9a0:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    b9a4:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b9a6:	add.w	r2, r1, r2, lsl #2
    b9aa:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    b9ac:	movs	r3, #0
    b9ae:	b.n	b9d0 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    b9b0:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    b9b2:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    b9b6:	bls.n	b9e2 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    b9b8:	cmp	r3, #10
    b9ba:	ite	ls
    b9bc:	strhls	r1, [r0, #0]
    b9be:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    b9c0:	adds	r3, #1
    b9c2:	uxtb	r3, r3
    b9c4:	cmp	r3, #13
    b9c6:	add.w	r2, r2, #1
    b9ca:	add.w	r0, r0, #2
    b9ce:	beq.n	b9e8 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    b9d0:	cmp	sl, r2
    b9d2:	bhi.n	b9b0 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    b9d4:	ite	ne
    b9d6:	movne.w	r1, #4294967295
    b9da:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    b9dc:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    b9de:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    b9e0:	bhi.n	b9b8 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    b9e2:	strh.w	r1, [r0, #-3]
    b9e6:	b.n	b9c0 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    b9e8:	subs	r5, #1
    b9ea:	ands.w	r5, r5, #255	; 0xff
    b9ee:	bne.n	b946 <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    b9f0:	movs	r1, #0
    b9f2:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    b9f4:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    b9f6:	bl	a46c <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    b9fa:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    b9fe:	mov	r4, r0
    ba00:	cmp	r0, #0
    ba02:	beq.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    ba06:	movs	r2, #32
    ba08:	movs	r1, #0
    ba0a:	bl	14e3c <memset>
  memcpy(dir->name, fname->sfn, 11);
    ba0e:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    ba10:	ldr	r2, [pc, #164]	; (bab8 <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    ba12:	ldr.w	r1, [r3, #13]!
    ba16:	ldr	r0, [r3, #4]
    ba18:	str	r0, [r4, #4]
    ba1a:	str	r1, [r4, #0]
    ba1c:	ldrh	r1, [r3, #8]
    ba1e:	ldrb	r3, [r3, #10]
    ba20:	strb	r3, [r4, #10]
    ba22:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    ba24:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    ba28:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    ba2a:	and.w	r3, r3, #24
    ba2e:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    ba30:	cbz	r7, ba56 <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    ba32:	add.w	r2, sp, #43	; 0x2b
    ba36:	add.w	r1, sp, #46	; 0x2e
    ba3a:	add	r0, sp, #44	; 0x2c
    ba3c:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    ba3e:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    ba42:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    ba46:	ldrb.w	r1, [sp, #43]	; 0x2b
    ba4a:	strb	r1, [r4, #13]
    ba4c:	strh	r3, [r4, #16]
    ba4e:	strh	r3, [r4, #18]
    ba50:	strh	r3, [r4, #24]
    ba52:	strh	r2, [r4, #14]
    ba54:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    ba56:	ldr	r2, [r6, #8]
    ba58:	ldrb.w	r3, [r2, #36]	; 0x24
    ba5c:	orr.w	r3, r3, #1
    ba60:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    ba64:	str.w	r9, [sp]
    ba68:	ldr	r3, [sp, #28]
    ba6a:	ldr	r0, [sp, #36]	; 0x24
    ba6c:	mov	r2, r5
    ba6e:	mov	r1, r6
    ba70:	bl	a774 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    ba74:	b.n	b748 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    ba76:	cmp	r0, #0
    ba78:	ldr.w	r9, [sp, #32]
    ba7c:	it	ne
    ba7e:	movne.w	r9, #0
    ba82:	b.n	b77e <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    ba84:	ldr	r1, [sp, #12]
    ba86:	cmp	r1, #1
    ba88:	bne.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    ba8c:	subs	r4, r3, #1
    ba8e:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    ba90:	ldrb.w	r0, [r4, #1]!
    ba94:	lsrs	r1, r2, #1
    ba96:	orr.w	r2, r1, r2, lsl #7
    ba9a:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    ba9e:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    baa0:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    baa2:	bne.n	ba90 <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    baa4:	ldr	r3, [sp, #24]
    baa6:	cmp	r3, r2
    baa8:	bne.w	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    baac:	ldr	r3, [sp, #28]
    baae:	lsls	r1, r3, #20
    bab0:	bpl.n	ba64 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    bab2:	b.n	b746 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bab4:	.word	0x4ec4ec4f
    bab8:	.word	0x1fff2acc

0000babc <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    babc:	push	{r3, r4, r5, r6, r7, lr}
    babe:	mov	r6, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    bac0:	movs	r1, #0
    bac2:	bl	9ea0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    bac6:	cbz	r0, bb04 <FatFile::getSFN(char*) [clone .part.2]+0x48>
    bac8:	movs	r2, #0
    baca:	mov	r1, r2
    bacc:	subs	r4, r0, #1
    bace:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    bad0:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    bad4:	ldrb.w	r3, [r4, #1]!
    bad8:	cmp	r3, #32
    bada:	beq.n	baf8 <FatFile::getSFN(char*) [clone .part.2]+0x3c>
      continue;
    }
    if (i == 8) {
    badc:	cmp	r2, #8
    bade:	beq.n	bb06 <FatFile::getSFN(char*) [clone .part.2]+0x4a>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    bae0:	sub.w	r5, r3, #65	; 0x41
    bae4:	cmp	r5, #25
    bae6:	bhi.n	baf2 <FatFile::getSFN(char*) [clone .part.2]+0x36>
    bae8:	ldrb	r5, [r0, #12]
    baea:	tst	r7, r5
      c += 'a' - 'A';
    baec:	itt	ne
    baee:	addne	r3, #32
    baf0:	uxtbne	r3, r3
    }
    name[j++] = c;
    baf2:	strb	r3, [r6, r1]
    baf4:	adds	r1, #1
    baf6:	uxtb	r1, r1
    baf8:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    bafa:	cmp	r2, #11
    bafc:	bne.n	bad4 <FatFile::getSFN(char*) [clone .part.2]+0x18>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    bafe:	movs	r3, #0
    bb00:	strb	r3, [r6, r1]
  return true;
    bb02:	movs	r0, #1

fail:
  return false;
}
    bb04:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    bb06:	strb.w	lr, [r6, r1]
    bb0a:	adds	r1, #1
    bb0c:	uxtb	r1, r1
    bb0e:	ldrb	r3, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    bb10:	movs	r7, #16
    bb12:	b.n	bae0 <FatFile::getSFN(char*) [clone .part.2]+0x24>

0000bb14 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    bb14:	ldrb	r3, [r0, #0]
    bb16:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    bb18:	cbz	r3, bb30 <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    bb1a:	tst.w	r3, #96	; 0x60
    bb1e:	beq.n	bb2c <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    bb20:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    bb22:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    bb24:	strb	r1, [r2, #0]
    name[1] = '\0';
    bb26:	strb	r3, [r2, #1]
    return true;
    bb28:	movs	r0, #1
    bb2a:	bx	lr
    bb2c:	b.w	babc <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    bb30:	mov	r0, r3
}
    bb32:	bx	lr

0000bb34 <FatFile::printSFN(Print*)>:
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    bb34:	ldrb	r3, [r0, #0]
bool FatFile::getSFN(char* name) {
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    bb36:	cbnz	r3, bb3c <FatFile::printSFN(Print*)+0x8>
    goto fail;
  }
  return pr->write(name);

fail:
  return 0;
    bb38:	movs	r0, #0
}
    bb3a:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    bb3c:	push	{r4, r5, lr}

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    bb3e:	tst.w	r3, #96	; 0x60

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
    bb42:	sub	sp, #20
    bb44:	mov	r4, r1

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    bb46:	beq.n	bb6c <FatFile::printSFN(Print*)+0x38>
    name[0] = '/';
    bb48:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    bb4a:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    bb4c:	strb.w	r2, [sp]
    name[1] = '\0';
    bb50:	strb.w	r3, [sp, #1]
    bb54:	mov	r5, sp
    bb56:	mov	r0, r5
    bb58:	bl	15880 <strlen>
    bb5c:	ldr	r3, [r4, #0]
    bb5e:	mov	r2, r0
    bb60:	mov	r1, r5
    bb62:	ldr	r3, [r3, #4]
    bb64:	mov	r0, r4
    bb66:	blx	r3
  }
  return pr->write(name);

fail:
  return 0;
}
    bb68:	add	sp, #20
    bb6a:	pop	{r4, r5, pc}
    bb6c:	mov	r1, sp
    bb6e:	mov	r5, sp
    bb70:	bl	babc <FatFile::getSFN(char*) [clone .part.2]>
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::printSFN(print_t* pr) {
  char name[13];
  if (!getSFN(name)) {
    bb74:	cmp	r0, #0
    bb76:	bne.n	bb56 <FatFile::printSFN(Print*)+0x22>
    goto fail;
  }
  return pr->write(name);

fail:
  return 0;
    bb78:	movs	r0, #0
}
    bb7a:	add	sp, #20
    bb7c:	pop	{r4, r5, pc}
    bb7e:	nop

0000bb80 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    bb80:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    bb82:	movs	r5, #0
    bb84:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    bb86:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    bb88:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    bb8a:	mov	r6, r0
    bb8c:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    bb8e:	cbz	r4, bbb4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    bb90:	mov	r1, r0
    bb92:	movs	r0, #36	; 0x24
    bb94:	bl	bdec <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    bb98:	strb	r5, [r0, #0]
    bb9a:	strb	r5, [r0, #1]
    bb9c:	strb	r5, [r0, #2]
    bb9e:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    bba0:	ldr	r5, [r7, #56]	; 0x38
    bba2:	mov	r4, r0
    bba4:	ldmia	r5!, {r0, r1, r2, r3}
    bba6:	stmia	r4!, {r0, r1, r2, r3}
    bba8:	ldmia	r5!, {r0, r1, r2, r3}
    bbaa:	stmia	r4!, {r0, r1, r2, r3}
    bbac:	ldr	r3, [r5, #0]
    bbae:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    bbb0:	mov	r0, r6
    bbb2:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    bbb4:	ldr	r3, [r1, #60]	; 0x3c
    bbb6:	cmp	r3, #0
    bbb8:	beq.n	bbb0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    bbba:	mov	r1, r0
    bbbc:	movs	r0, #56	; 0x38
    bbbe:	bl	bdec <operator new(unsigned int, unsigned long*)>
    bbc2:	strb.w	r4, [r0, #49]	; 0x31
    bbc6:	strb.w	r4, [r0, #50]	; 0x32
    bbca:	strb.w	r4, [r0, #51]	; 0x33
    bbce:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    bbd0:	ldr	r3, [r7, #60]	; 0x3c
    bbd2:	mov	r2, r0
    bbd4:	add.w	r1, r3, #48	; 0x30
    bbd8:	ldr	r5, [r3, #0]
    bbda:	ldr	r4, [r3, #4]
    bbdc:	ldr	r0, [r3, #8]
    bbde:	ldr	r7, [r3, #12]
    bbe0:	str	r7, [r2, #12]
    bbe2:	adds	r3, #16
    bbe4:	cmp	r3, r1
    bbe6:	str	r5, [r2, #0]
    bbe8:	str	r4, [r2, #4]
    bbea:	str	r0, [r2, #8]
    bbec:	add.w	r2, r2, #16
    bbf0:	bne.n	bbd8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    bbf2:	ldr	r3, [r3, #0]
    bbf4:	str	r3, [r2, #0]
    bbf6:	b.n	bbb0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000bbf8 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    bbf8:	push	{r4, lr}
    bbfa:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    bbfc:	ldr	r0, [r0, #56]	; 0x38
    bbfe:	cbz	r0, bc0c <FsBaseFile::close()+0x14>
    bc00:	bl	9f54 <FatFile::close()>
    bc04:	cbz	r0, bc0c <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    bc06:	movs	r3, #0
    bc08:	str	r3, [r4, #56]	; 0x38
    return true;
    bc0a:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    bc0c:	ldr	r0, [r4, #60]	; 0x3c
    bc0e:	cbz	r0, bc1c <FsBaseFile::close()+0x24>
    bc10:	bl	822c <ExFatFile::close()>
    bc14:	cbz	r0, bc1c <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    bc16:	movs	r3, #0
    bc18:	str	r3, [r4, #60]	; 0x3c
    bc1a:	pop	{r4, pc}
    return true;
  }
  return false;
    bc1c:	movs	r0, #0
}
    bc1e:	pop	{r4, pc}

0000bc20 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    bc20:	cbz	r1, bc96 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    bc22:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc26:	mov	r4, r1
    bc28:	mov	r5, r0
    bc2a:	mov	r8, r3
    bc2c:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    bc2e:	bl	bbf8 <FsBaseFile::close()>
  if (vol->m_fVol) {
    bc32:	ldr.w	r6, [r4, #1144]	; 0x478
    bc36:	cbz	r6, bc64 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    bc38:	mov	r1, r5
    bc3a:	movs	r0, #36	; 0x24
    bc3c:	bl	bdec <operator new(unsigned int, unsigned long*)>
    bc40:	movs	r1, #0
    bc42:	strb	r1, [r0, #0]
    bc44:	strb	r1, [r0, #1]
    bc46:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    bc48:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    bc4c:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    bc4e:	mov	r3, r8
    bc50:	mov	r2, r7
    bc52:	bl	a28c <FatFile::open(FatVolume*, char const*, int)>
    bc56:	cbz	r0, bc5e <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    bc58:	movs	r0, #1
    bc5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    bc5e:	str	r0, [r5, #56]	; 0x38
    return false;
    bc60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    bc64:	ldr.w	r3, [r4, #1148]	; 0x47c
    bc68:	cbz	r3, bc9a <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    bc6a:	mov	r1, r5
    bc6c:	movs	r0, #56	; 0x38
    bc6e:	bl	bdec <operator new(unsigned int, unsigned long*)>
    bc72:	strb.w	r6, [r0, #49]	; 0x31
    bc76:	strb.w	r6, [r0, #50]	; 0x32
    bc7a:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    bc7e:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    bc82:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    bc84:	mov	r3, r8
    bc86:	mov	r2, r7
    bc88:	bl	8c28 <ExFatFile::open(ExFatVolume*, char const*, int)>
    bc8c:	cmp	r0, #0
    bc8e:	bne.n	bc58 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    bc90:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    bc92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    bc96:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    bc98:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    bc9a:	movs	r0, #0
    bc9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bca0 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    bca0:	push	{r3, r4, r5, r6, r7, lr}
    bca2:	mov	r5, r1
    bca4:	mov	r7, r2
    bca6:	mov	r4, r0
  close();
    bca8:	bl	bbf8 <FsBaseFile::close()>
  if (dir->m_fFile) {
    bcac:	ldr	r6, [r5, #56]	; 0x38
    bcae:	cbz	r6, bcd4 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    bcb0:	mov	r1, r4
    bcb2:	movs	r0, #36	; 0x24
    bcb4:	bl	bdec <operator new(unsigned int, unsigned long*)>
    bcb8:	movs	r2, #0
    bcba:	strb	r2, [r0, #0]
    bcbc:	strb	r2, [r0, #1]
    bcbe:	strb	r2, [r0, #2]
    bcc0:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    bcc2:	mov	r2, r7
    bcc4:	ldr	r1, [r5, #56]	; 0x38
    bcc6:	bl	a84c <FatFile::openNext(FatFile*, int)>
    bcca:	cbz	r0, bcd0 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    bccc:	movs	r0, #1
    bcce:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    bcd0:	str	r0, [r4, #56]	; 0x38
    bcd2:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    bcd4:	ldr	r0, [r5, #60]	; 0x3c
    bcd6:	cbz	r0, bcfc <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    bcd8:	mov	r1, r4
    bcda:	movs	r0, #56	; 0x38
    bcdc:	bl	bdec <operator new(unsigned int, unsigned long*)>
    bce0:	strb.w	r6, [r0, #49]	; 0x31
    bce4:	strb.w	r6, [r0, #50]	; 0x32
    bce8:	strb.w	r6, [r0, #51]	; 0x33
    bcec:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    bcee:	mov	r2, r7
    bcf0:	ldr	r1, [r5, #60]	; 0x3c
    bcf2:	bl	8c38 <ExFatFile::openNext(ExFatFile*, int)>
    bcf6:	cmp	r0, #0
    bcf8:	bne.n	bccc <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    bcfa:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    bcfc:	pop	{r3, r4, r5, r6, r7, pc}
    bcfe:	nop

0000bd00 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    bd00:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    bd02:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    bd04:	mov	r5, r0
  m_blockDev = blockDev;
    bd06:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    bd0a:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    bd0e:	mov	r1, r0
    bd10:	mov.w	r0, #1144	; 0x478
    bd14:	bl	bdec <operator new(unsigned int, unsigned long*)>
    bd18:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    bd1a:	str	r6, [r0, #4]
    invalidate();
    bd1c:	bl	8e3c <FsCache::invalidate()>
    bd20:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    bd24:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    bd28:	bl	8e3c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    bd2c:	strb.w	r6, [r4, #1084]	; 0x43c
    bd30:	strb.w	r6, [r4, #1137]	; 0x471
    bd34:	strb.w	r6, [r4, #1138]	; 0x472
    bd38:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    bd3c:	ldr.w	r1, [r5, #1152]	; 0x480
    bd40:	str.w	r4, [r5, #1148]	; 0x47c
    bd44:	mov	r0, r4
    bd46:	movs	r2, #1
    bd48:	bl	8fcc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    bd4c:	cbnz	r0, bd8a <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    bd4e:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    bd50:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    bd52:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    bd56:	mov.w	r0, #1120	; 0x460
    bd5a:	bl	bdec <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    bd5e:	strb	r6, [r0, #7]
    bd60:	strb.w	r6, [r0, #1084]	; 0x43c
    bd64:	strb.w	r6, [r0, #1085]	; 0x43d
    bd68:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    bd6c:	movs	r2, #1
    bd6e:	ldr.w	r1, [r5, #1152]	; 0x480
    bd72:	str.w	r0, [r5, #1144]	; 0x478
    bd76:	mov	r4, r0
    bd78:	bl	afbc <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    bd7c:	cbnz	r0, bda8 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    bd7e:	ldr	r3, [pc, #64]	; (bdc0 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    bd80:	movs	r0, #0
    bd82:	str	r0, [r3, #0]
  m_fVol = nullptr;
    bd84:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    bd88:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    bd8a:	add.w	r6, r4, #1088	; 0x440
    bd8e:	mov	r0, r6
    bd90:	bl	822c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    bd94:	mov	r1, r4
    bd96:	mov	r0, r6
    bd98:	bl	82e8 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    bd9c:	cmp	r0, #0
    bd9e:	beq.n	bd4e <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    bda0:	ldr	r3, [pc, #28]	; (bdc0 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    bda2:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    bda4:	str	r5, [r3, #0]
  return true;
    bda6:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    bda8:	addw	r6, r4, #1084	; 0x43c
    bdac:	mov	r0, r6
    bdae:	bl	9f54 <FatFile::close()>
    return m_vwd.openRoot(this);
    bdb2:	mov	r1, r4
    bdb4:	mov	r0, r6
    bdb6:	bl	a29c <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    bdba:	cmp	r0, #0
    bdbc:	bne.n	bda0 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    bdbe:	b.n	bd7e <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    bdc0:	.word	0x1fff2ad0

0000bdc4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    bdc4:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    bdc6:	movs	r5, #0
    bdc8:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    bdcc:	ldr	r6, [pc, #24]	; (bde8 <FsVolume::open(char const*, int)+0x24>)
    bdce:	str	r7, [r0, #8]
    bdd0:	mov	r4, r0
    bdd2:	strb	r5, [r0, #4]
    bdd4:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    bdd6:	str	r5, [r0, #72]	; 0x48
    bdd8:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    bdda:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    bdde:	bl	bc20 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    bde2:	mov	r0, r4
    bde4:	pop	{r3, r4, r5, r6, r7, pc}
    bde6:	nop
    bde8:	.word	0x00018df0

0000bdec <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    bdec:	mov	r0, r1
    bdee:	bx	lr

0000bdf0 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    bdf0:	ldrb	r0, [r0, #19]
    bdf2:	bx	lr

0000bdf4 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    bdf4:	ldrb	r0, [r0, #21]
    bdf6:	bx	lr

0000bdf8 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    bdf8:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    bdfa:	ldr	r4, [r0, #0]
    bdfc:	ldr	r4, [r4, #12]
    bdfe:	movs	r3, #1
    be00:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    be02:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    be06:	bx	ip

0000be08 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    be08:	ldrb	r0, [r0, #22]
    be0a:	bx	lr

0000be0c <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    be0c:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    be0e:	ldr	r4, [r0, #0]
    be10:	ldr	r4, [r4, #28]
    be12:	movs	r3, #1
    be14:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    be16:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    be1a:	bx	ip

0000be1c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    be1c:	bx	lr
    be1e:	nop

0000be20 <SdSpiCard::~SdSpiCard()>:
    be20:	push	{r4, lr}
    be22:	movs	r1, #24
    be24:	mov	r4, r0
    be26:	bl	138d0 <operator delete(void*, unsigned int)>
    be2a:	mov	r0, r4
    be2c:	pop	{r4, pc}
    be2e:	nop

0000be30 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    be30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be34:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    be36:	ldrb	r1, [r0, #16]
    be38:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    be3a:	mov	r4, r0
    be3c:	mov	r5, r2
    be3e:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    be40:	beq.n	be52 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    be42:	ldr	r3, [r4, #0]
    be44:	mov	r0, r4
    be46:	ldr	r3, [r3, #20]
    be48:	blx	r3
    be4a:	cbnz	r0, be84 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    be4c:	movs	r0, #0
    be4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    be52:	ldr	r3, [r0, #12]
    be54:	cmp	r3, r6
    be56:	bne.n	be42 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    be58:	movs	r6, #0
    be5a:	cbz	r7, be74 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    be5c:	ldr	r3, [r4, #0]
    be5e:	mov	r1, r5
    be60:	ldr	r3, [r3, #68]	; 0x44
    be62:	mov	r0, r4
    be64:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    be66:	adds	r6, #1
    be68:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    be6c:	cmp	r0, #0
    be6e:	beq.n	be4c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    be70:	cmp	r7, r6
    be72:	bne.n	be5c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    be74:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    be76:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    be78:	add	r7, r3
    be7a:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    be7c:	cbnz	r2, be9a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    be7e:	movs	r0, #1
    be80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    be84:	ldr	r3, [r4, #0]
    be86:	mov	r1, r6
    be88:	ldr	r3, [r3, #72]	; 0x48
    be8a:	mov	r0, r4
    be8c:	blx	r3
    be8e:	cmp	r0, #0
    be90:	beq.n	be4c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    be92:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    be94:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    be96:	strb	r3, [r4, #16]
    be98:	b.n	be58 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    be9a:	ldr	r3, [r4, #0]
    be9c:	mov	r0, r4
    be9e:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    bea0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    bea4:	bx	r3
    bea6:	nop

0000bea8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    bea8:	push	{r4, lr}
    beaa:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    beac:	adds	r0, #4
    beae:	bl	d660 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    beb2:	ldrb	r0, [r4, #18]
    beb4:	movs	r1, #0
    beb6:	bl	d838 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    beba:	movs	r3, #1
    bebc:	strb	r3, [r4, #20]
    bebe:	pop	{r4, pc}

0000bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    bec0:	push	{r3, r4, r5, lr}
    bec2:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    bec4:	movs	r1, #1
    bec6:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    bec8:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    beca:	bl	d838 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    bece:	mov	r0, r5
    bed0:	movs	r1, #255	; 0xff
    bed2:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    bed6:	mov	r0, r5
    bed8:	bl	d740 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    bedc:	movs	r3, #0
    bede:	strb	r3, [r4, #20]
    bee0:	pop	{r3, r4, r5, pc}
    bee2:	nop

0000bee4 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    bee4:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    bee6:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    bee8:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    beea:	cbnz	r7, bef0 <SdSpiCard::isBusy()+0xc>
    beec:	bl	bea8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    bef0:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    bef2:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    bef4:	mov	r0, r5
    bef6:	bl	d788 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    befa:	cmp	r0, #255	; 0xff
    befc:	add.w	r3, r4, #4294967295
    bf00:	beq.n	bf1e <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    bf02:	ands.w	r4, r3, #255	; 0xff
    bf06:	bne.n	bef4 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    bf08:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    bf0a:	cbnz	r7, bf10 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bf0c:	ldrb	r3, [r6, #20]
    bf0e:	cbnz	r3, bf14 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    bf10:	mov	r0, r4
    bf12:	pop	{r3, r4, r5, r6, r7, pc}
    bf14:	mov	r0, r6
    bf16:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    bf1a:	mov	r0, r4
    bf1c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    bf1e:	movs	r4, #0
    bf20:	b.n	bf0a <SdSpiCard::isBusy()+0x26>
    bf22:	nop

0000bf24 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    bf24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    bf28:	ldr	r6, [pc, #116]	; (bfa0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    bf2a:	sub	sp, #12
    bf2c:	ldr	r3, [r6, #0]
    bf2e:	str	r3, [sp, #0]
	return ret;
    bf30:	ldr	r5, [sp, #0]
    bf32:	mov	r4, r0
    bf34:	mov	r8, r1
    bf36:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    bf38:	uxth	r5, r5
    bf3a:	adds	r7, r0, #4
    bf3c:	b.n	bf4e <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    bf3e:	ldr	r3, [r6, #0]
    bf40:	str	r3, [sp, #4]
	return ret;
    bf42:	ldr	r3, [sp, #4]
    bf44:	uxth	r3, r3
    bf46:	subs	r3, r3, r5
    bf48:	cmp.w	r3, #300	; 0x12c
    bf4c:	bgt.n	bf74 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    bf4e:	mov	r0, r7
    bf50:	bl	d788 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    bf54:	cmp	r0, #255	; 0xff
    bf56:	strb	r0, [r4, #21]
    bf58:	beq.n	bf3e <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    bf5a:	cmp	r0, #254	; 0xfe
    bf5c:	beq.n	bf7a <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    bf5e:	movs	r3, #24
    bf60:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    bf62:	ldrb	r0, [r4, #20]
    bf64:	cbz	r0, bf6e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    bf66:	mov	r0, r4
    bf68:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    bf6c:	movs	r0, #0
}
    bf6e:	add	sp, #12
    bf70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bf74:	movs	r3, #29
    bf76:	strb	r3, [r4, #19]
    bf78:	b.n	bf62 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    bf7a:	mov	r2, r9
    bf7c:	mov	r1, r8
    bf7e:	mov	r0, r7
    bf80:	bl	d7a4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    bf84:	strb	r0, [r4, #21]
    bf86:	cbz	r0, bf8e <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    bf88:	movs	r3, #36	; 0x24
    bf8a:	strb	r3, [r4, #19]
    bf8c:	b.n	bf62 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    bf8e:	mov	r0, r7
    bf90:	bl	d788 <SdSpiArduinoDriver::receive()>
    bf94:	mov	r0, r7
    bf96:	bl	d788 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    bf9a:	movs	r0, #1
    bf9c:	b.n	bf6e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    bf9e:	nop
    bfa0:	.word	0x1fff2b30

0000bfa4 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    bfa4:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    bfa6:	ldr	r5, [pc, #52]	; (bfdc <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    bfa8:	sub	sp, #12
    bfaa:	ldr	r3, [r5, #0]
    bfac:	str	r3, [sp, #0]
	return ret;
    bfae:	ldr	r4, [sp, #0]
    bfb0:	mov	r7, r1
    bfb2:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    bfb4:	uxth	r4, r4
    bfb6:	b.n	bfc6 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    bfb8:	ldr	r3, [r5, #0]
    bfba:	str	r3, [sp, #4]
	return ret;
    bfbc:	ldr	r3, [sp, #4]
    bfbe:	uxth	r3, r3
    bfc0:	subs	r3, r3, r4
    bfc2:	cmp	r3, r7
    bfc4:	bgt.n	bfd6 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    bfc6:	mov	r0, r6
    bfc8:	bl	d788 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    bfcc:	cmp	r0, #255	; 0xff
    bfce:	bne.n	bfb8 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    bfd0:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    bfd2:	add	sp, #12
    bfd4:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    bfd6:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    bfd8:	add	sp, #12
    bfda:	pop	{r4, r5, r6, r7, pc}
    bfdc:	.word	0x1fff2b30

0000bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    bfe0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    bfe4:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    bfe6:	sub	sp, #8
    bfe8:	mov	r6, r0
    bfea:	mov	r8, r1
    bfec:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    bfee:	cbnz	r3, bff4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    bff0:	bl	bea8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    bff4:	cmp.w	r8, #0
    bff8:	bne.n	c050 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    bffa:	adds	r4, r6, #4
    bffc:	mov	r0, r4
    bffe:	orr.w	r1, r8, #64	; 0x40
    c002:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
    c006:	add	r7, sp, #4
    c008:	add	r5, sp, #8
    c00a:	ldrb.w	r1, [r5, #-1]!
    c00e:	mov	r0, r4
    c010:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    c014:	cmp	r5, r7
    c016:	bne.n	c00a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    c018:	cmp.w	r8, #0
    c01c:	ite	eq
    c01e:	moveq	r1, #149	; 0x95
    c020:	movne	r1, #135	; 0x87
    c022:	mov	r0, r4
    c024:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c028:	mov	r0, r4
    c02a:	bl	d788 <SdSpiArduinoDriver::receive()>
    c02e:	movs	r5, #11
    c030:	mov	r0, r4
    c032:	bl	d788 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c036:	lsls	r3, r0, #24
    c038:	strb	r0, [r6, #21]
    c03a:	bmi.n	c042 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    c03c:	add	sp, #8
    c03e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c042:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c044:	ands.w	r5, r3, #255	; 0xff
    c048:	bne.n	c030 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    c04a:	add	sp, #8
    c04c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    c050:	mov.w	r1, #300	; 0x12c
    c054:	mov	r0, r6
    c056:	bl	bfa4 <SdSpiCard::waitNotBusy(unsigned short)>
    c05a:	b.n	bffa <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

0000c05c <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c05c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c060:	sub	sp, #40	; 0x28
    c062:	add	r5, sp, #4
    c064:	stmia.w	r5, {r1, r2, r3}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c068:	ldr	r7, [pc, #480]	; (c24c <SdSpiCard::begin(SdSpiConfig)+0x1f0>)
    c06a:	ldrb.w	r3, [sp, #4]
    c06e:	ldr	r2, [r7, #0]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    c070:	strb	r3, [r0, #18]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c072:	mov	r6, r0
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    c074:	mov.w	sl, #0
    c078:	str	r2, [sp, #20]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c07a:	mov	r0, r3
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    c07c:	strb.w	sl, [r6, #19]
  m_type = 0;
    c080:	strb.w	sl, [r6, #22]
    c084:	ldrb.w	r4, [sp, #5]
	return ret;
    c088:	ldr.w	r8, [sp, #20]
    c08c:	ldr.w	r9, [sp, #8]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c090:	bl	d830 <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c094:	ldrb	r0, [r6, #18]
    c096:	movs	r1, #1
    c098:	bl	d838 <sdCsWrite(unsigned char, bool)>
    c09c:	ldmia.w	r5, {r0, r1, r2}
    c0a0:	add	r3, sp, #28
    c0a2:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    c0a6:	adds	r5, r6, #4
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    c0a8:	ldr	r2, [pc, #420]	; (c250 <SdSpiCard::begin(SdSpiConfig)+0x1f4>)
    c0aa:	str	r2, [r6, #8]
    c0ac:	mov	r0, r5
    c0ae:	ldmia	r3, {r1, r2, r3}
    c0b0:	bl	d6f0 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    c0b4:	mvns	r3, r4
    c0b6:	ubfx	r3, r3, #7, #1
    c0ba:	strb	r3, [r6, #17]
    c0bc:	mov	r0, r6
  m_spiActive = false;
    c0be:	strb.w	sl, [r6, #20]
  m_curState = IDLE_STATE;
    c0c2:	strb.w	sl, [r6, #16]
    c0c6:	bl	bea8 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c0ca:	ldrb	r0, [r6, #18]
    c0cc:	movs	r1, #1
    c0ce:	bl	d838 <sdCsWrite(unsigned char, bool)>
    c0d2:	movs	r4, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c0d4:	movs	r1, #255	; 0xff
    c0d6:	mov	r0, r5
    c0d8:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
    c0dc:	subs	r3, r4, #1

  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    c0de:	ands.w	r4, r3, #255	; 0xff
    c0e2:	bne.n	c0d4 <SdSpiCard::begin(SdSpiConfig)+0x78>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c0e4:	mov	r1, r4
    c0e6:	ldrb	r0, [r6, #18]
    c0e8:	bl	d838 <sdCsWrite(unsigned char, bool)>
    c0ec:	mov.w	sl, #10
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    c0f0:	movs	r2, #0
    c0f2:	mov	r1, r2
    c0f4:	mov	r0, r6
    c0f6:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c0fa:	cmp	r0, #1
    c0fc:	mov	r4, r0
    c0fe:	beq.n	c13e <SdSpiCard::begin(SdSpiConfig)+0xe2>
    c100:	add.w	r3, sl, #4294967295
      break;
    }
    if (i == SD_CMD0_RETRY) {
    c104:	ands.w	sl, r3, #255	; 0xff
    c108:	beq.n	c122 <SdSpiCard::begin(SdSpiConfig)+0xc6>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c10a:	movs	r1, #253	; 0xfd
    c10c:	mov	r0, r5
    c10e:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
    c112:	mov.w	r4, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c116:	mov	r0, r5
    c118:	bl	d788 <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    c11c:	subs	r4, #1
    c11e:	bne.n	c116 <SdSpiCard::begin(SdSpiConfig)+0xba>
    c120:	b.n	c0f0 <SdSpiCard::begin(SdSpiConfig)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c122:	movs	r3, #1
    c124:	strb	r3, [r6, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c126:	ldrb	r0, [r6, #20]
    c128:	cbnz	r0, c130 <SdSpiCard::begin(SdSpiConfig)+0xd4>
  return true;

fail:
  spiStop();
  return false;
}
    c12a:	add	sp, #40	; 0x28
    c12c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c130:	mov	r0, r6
    c132:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

fail:
  spiStop();
  return false;
    c136:	movs	r0, #0
}
    c138:	add	sp, #40	; 0x28
    c13a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    c13e:	mov.w	r2, #426	; 0x1aa
    c142:	movs	r1, #8
    c144:	mov	r0, r6
    c146:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c14a:	lsls	r3, r0, #29
    c14c:	bpl.n	c1e0 <SdSpiCard::begin(SdSpiConfig)+0x184>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c14e:	strb	r4, [r6, #22]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c150:	ldr	r3, [r6, #0]
    c152:	ldr.w	sl, [pc, #268]	; c260 <SdSpiCard::begin(SdSpiConfig)+0x204>
    c156:	ldr	r3, [r3, #64]	; 0x40
    c158:	cmp	r3, sl
    c15a:	bne.n	c206 <SdSpiCard::begin(SdSpiConfig)+0x1aa>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c15c:	ldrb	r0, [r6, #22]
    c15e:	cmp	r0, #2
    c160:	ite	eq
    c162:	moveq.w	r4, #1073741824	; 0x40000000
    c166:	movne	r4, #0
    c168:	b.n	c17a <SdSpiCard::begin(SdSpiConfig)+0x11e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c16a:	ldr	r3, [r7, #0]
    c16c:	str	r3, [sp, #24]
	return ret;
    c16e:	ldr	r3, [sp, #24]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    c170:	uxth	r3, r3
    c172:	subs	r3, r3, r2
    c174:	cmp.w	r3, #2000	; 0x7d0
    c178:	bgt.n	c200 <SdSpiCard::begin(SdSpiConfig)+0x1a4>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c17a:	movs	r2, #0
    c17c:	movs	r1, #55	; 0x37
    c17e:	mov	r0, r6
    c180:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    c184:	mov	r2, r4
    c186:	movs	r1, #41	; 0x29
    c188:	mov	r0, r6
    c18a:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c18e:	uxth.w	r2, r8
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c192:	cmp	r0, #0
    c194:	bne.n	c16a <SdSpiCard::begin(SdSpiConfig)+0x10e>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c196:	ldr	r3, [r6, #0]
    c198:	ldr	r3, [r3, #64]	; 0x40
    c19a:	cmp	r3, sl
    c19c:	bne.n	c20c <SdSpiCard::begin(SdSpiConfig)+0x1b0>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c19e:	ldrb	r0, [r6, #22]
    c1a0:	cmp	r0, #2
    c1a2:	beq.n	c212 <SdSpiCard::begin(SdSpiConfig)+0x1b6>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c1a4:	ldrb	r3, [r6, #20]
    c1a6:	cbz	r3, c1ae <SdSpiCard::begin(SdSpiConfig)+0x152>
    c1a8:	mov	r0, r6
    c1aa:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    c1ae:	ldr	r1, [pc, #164]	; (c254 <SdSpiCard::begin(SdSpiConfig)+0x1f8>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c1b0:	ldr	r4, [pc, #164]	; (c258 <SdSpiCard::begin(SdSpiConfig)+0x1fc>)
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c1b2:	movs	r3, #0
    c1b4:	b.n	c1bc <SdSpiCard::begin(SdSpiConfig)+0x160>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    c1b6:	cmp	r0, #23
    c1b8:	beq.n	c1cc <SdSpiCard::begin(SdSpiConfig)+0x170>
    c1ba:	mov	r3, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c1bc:	ldrh.w	r2, [r1, #2]!
    c1c0:	sdiv	r2, r4, r2
    c1c4:	cmp	r9, r2
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    c1c6:	add.w	r0, r3, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c1ca:	bcc.n	c1b6 <SdSpiCard::begin(SdSpiConfig)+0x15a>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    c1cc:	ldr	r2, [pc, #140]	; (c25c <SdSpiCard::begin(SdSpiConfig)+0x200>)
    c1ce:	ldr.w	r3, [r2, r3, lsl #2]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    c1d2:	movs	r0, #1
    c1d4:	orr.w	r3, r3, #939524096	; 0x38000000
    c1d8:	str	r3, [r6, #8]

fail:
  spiStop();
  return false;
}
    c1da:	add	sp, #40	; 0x28
    c1dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c1e0:	movs	r3, #2
    c1e2:	strb	r3, [r6, #22]
    c1e4:	movs	r4, #4
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c1e6:	mov	r0, r5
    c1e8:	bl	d788 <SdSpiArduinoDriver::receive()>
    c1ec:	subs	r4, #1
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c1ee:	ands.w	r4, r4, #255	; 0xff
      m_status = spiReceive();
    c1f2:	strb	r0, [r6, #21]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c1f4:	bne.n	c1e6 <SdSpiCard::begin(SdSpiConfig)+0x18a>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    c1f6:	cmp	r0, #170	; 0xaa
    c1f8:	beq.n	c150 <SdSpiCard::begin(SdSpiConfig)+0xf4>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c1fa:	movs	r3, #6
    c1fc:	strb	r3, [r6, #19]
    c1fe:	b.n	c126 <SdSpiCard::begin(SdSpiConfig)+0xca>
    c200:	movs	r3, #23
    c202:	strb	r3, [r6, #19]
    c204:	b.n	c126 <SdSpiCard::begin(SdSpiConfig)+0xca>
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c206:	mov	r0, r6
    c208:	blx	r3
    c20a:	b.n	c15e <SdSpiCard::begin(SdSpiConfig)+0x102>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c20c:	mov	r0, r6
    c20e:	blx	r3
    c210:	b.n	c1a0 <SdSpiCard::begin(SdSpiConfig)+0x144>
    if (cardCommand(CMD58, 0)) {
    c212:	movs	r2, #0
    c214:	movs	r1, #58	; 0x3a
    c216:	mov	r0, r6
    c218:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c21c:	cbz	r0, c224 <SdSpiCard::begin(SdSpiConfig)+0x1c8>
    c21e:	movs	r3, #18
    c220:	strb	r3, [r6, #19]
    c222:	b.n	c126 <SdSpiCard::begin(SdSpiConfig)+0xca>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c224:	mov	r0, r5
    c226:	bl	d788 <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    c22a:	and.w	r0, r0, #192	; 0xc0
    c22e:	cmp	r0, #192	; 0xc0
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c230:	itt	eq
    c232:	moveq	r3, #3
    c234:	strbeq	r3, [r6, #22]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c236:	mov	r0, r5
    c238:	bl	d788 <SdSpiArduinoDriver::receive()>
    c23c:	mov	r0, r5
    c23e:	bl	d788 <SdSpiArduinoDriver::receive()>
    c242:	mov	r0, r5
    c244:	bl	d788 <SdSpiArduinoDriver::receive()>
    c248:	b.n	c1a4 <SdSpiCard::begin(SdSpiConfig)+0x148>
    c24a:	nop
    c24c:	.word	0x1fff2b30
    c250:	.word	0x38005006
    c254:	.word	0x00019486
    c258:	.word	0x02dc6c00
    c25c:	.word	0x0001954c
    c260:	.word	0x0000be09

0000c264 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c264:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    c266:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c268:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    c26a:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c26c:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    c26e:	blx	r3
  if (cardCommand(CMD58, 0)) {
    c270:	mov	r0, r5
    c272:	movs	r2, #0
    c274:	movs	r1, #58	; 0x3a
    c276:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c27a:	cbnz	r0, c298 <SdSpiCard::readOCR(unsigned long*)+0x34>
    c27c:	adds	r7, r5, #4
    c27e:	adds	r4, r6, #4
    c280:	mov	r0, r7
    c282:	bl	d788 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    c286:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    c28a:	cmp	r6, r4
    c28c:	bne.n	c280 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c28e:	ldrb	r4, [r5, #20]
    c290:	cbnz	r4, c2ae <SdSpiCard::readOCR(unsigned long*)+0x4a>
    c292:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    c294:	mov	r0, r4
    c296:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c298:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c29a:	movs	r3, #18
    c29c:	strb	r3, [r5, #19]
    c29e:	cmp	r4, #0
    c2a0:	beq.n	c294 <SdSpiCard::readOCR(unsigned long*)+0x30>
    c2a2:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    c2a4:	movs	r4, #0
    c2a6:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    c2aa:	mov	r0, r4
    c2ac:	pop	{r3, r4, r5, r6, r7, pc}
    c2ae:	mov	r0, r5
    c2b0:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    c2b4:	mov	r0, r4
    c2b6:	pop	{r3, r4, r5, r6, r7, pc}

0000c2b8 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    c2b8:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    c2ba:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    c2bc:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    c2be:	mov	r4, r0
    c2c0:	mov	r5, r1
    c2c2:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    c2c4:	blx	r3
  if (cardCommand(cmd, 0)) {
    c2c6:	mov	r1, r5
    c2c8:	mov	r0, r4
    c2ca:	movs	r2, #0
    c2cc:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c2d0:	cbz	r0, c2e4 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    c2d2:	movs	r3, #27
    c2d4:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c2d6:	ldrb	r0, [r4, #20]
    c2d8:	cbz	r0, c2e2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    c2da:	mov	r0, r4
    c2dc:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    c2e0:	movs	r0, #0
}
    c2e2:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    c2e4:	mov	r1, r6
    c2e6:	movs	r2, #16
    c2e8:	mov	r0, r4
    c2ea:	bl	bf24 <SdSpiCard::readData(unsigned char*, unsigned int)>
    c2ee:	cmp	r0, #0
    c2f0:	beq.n	c2d6 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c2f2:	ldrb	r5, [r4, #20]
    c2f4:	cmp	r5, #0
    c2f6:	beq.n	c2e2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    c2f8:	mov	r0, r4
    c2fa:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    c2fe:	mov	r0, r5
    c300:	pop	{r4, r5, r6, pc}
    c302:	nop

0000c304 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c304:	mov	r2, r1
    c306:	movs	r1, #9
    c308:	b.w	c2b8 <SdSpiCard::readRegister(unsigned char, void*)>

0000c30c <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    c30c:	mov	r2, r1
    c30e:	movs	r1, #10
    c310:	b.w	c2b8 <SdSpiCard::readRegister(unsigned char, void*)>

0000c314 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    c314:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c316:	ldr	r3, [r0, #0]
    c318:	ldr	r2, [pc, #140]	; (c3a8 <SdSpiCard::sectorCount()+0x94>)
    c31a:	ldr	r3, [r3, #52]	; 0x34
    c31c:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    c31e:	sub	sp, #20
    c320:	bne.n	c382 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c322:	mov	r2, sp
    c324:	movs	r1, #9
    c326:	bl	c2b8 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c32a:	cbz	r0, c33c <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    c32c:	ldrb.w	r3, [sp]
    c330:	ands.w	r3, r3, #192	; 0xc0
    c334:	beq.n	c340 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    c336:	cmp	r3, #64	; 0x40
    c338:	beq.n	c388 <SdSpiCard::sectorCount()+0x74>
    c33a:	movs	r0, #0
}
    c33c:	add	sp, #20
    c33e:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    c340:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    c344:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c348:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    c34c:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    c350:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    c354:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    c358:	and.w	r4, r4, #3
    c35c:	lsls	r4, r4, #1
    c35e:	lsls	r2, r2, #2
    c360:	and.w	r3, r3, #3
    c364:	orr.w	r0, r4, r0, lsr #7
    c368:	and.w	r1, r1, #15
    c36c:	orr.w	r3, r2, r3, lsl #10
    c370:	add	r0, r1
    c372:	orr.w	r3, r3, r5, lsr #6
    c376:	adds	r3, #1
    c378:	subs	r0, #7
    c37a:	lsl.w	r0, r3, r0
    c37e:	add	sp, #20
    c380:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c382:	mov	r1, sp
    c384:	blx	r3
    c386:	b.n	c32a <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    c388:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    c38c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    c390:	ldrb.w	r0, [sp, #8]
    c394:	adds	r2, r3, #1
    c396:	and.w	r3, r1, #63	; 0x3f
    c39a:	add.w	r3, r2, r3, lsl #16
    c39e:	add.w	r0, r3, r0, lsl #8
    c3a2:	lsls	r0, r0, #10
}
    c3a4:	add	sp, #20
    c3a6:	pop	{r4, r5, pc}
    c3a8:	.word	0x0000c305

0000c3ac <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    c3ac:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    c3ae:	ldr	r3, [r0, #0]
    c3b0:	ldr	r5, [pc, #68]	; (c3f8 <SdSpiCard::readStart(unsigned long)+0x4c>)
    c3b2:	ldr	r3, [r3, #64]	; 0x40
    c3b4:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    c3b6:	sub	sp, #12
    c3b8:	mov	r4, r0
    c3ba:	mov	r2, r1
    c3bc:	bne.n	c3ee <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c3be:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    c3c0:	cmp	r0, #3
    sector <<= 9;
    c3c2:	it	ne
    c3c4:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    c3c6:	movs	r1, #18
    c3c8:	mov	r0, r4
    c3ca:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c3ce:	cbz	r0, c3e8 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c3d0:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c3d2:	movs	r3, #12
    c3d4:	strb	r3, [r4, #19]
    c3d6:	cbnz	r0, c3dc <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    c3d8:	add	sp, #12
    c3da:	pop	{r4, r5, pc}
    c3dc:	mov	r0, r4
    c3de:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    c3e2:	movs	r0, #0
    c3e4:	add	sp, #12
    c3e6:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    c3e8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    c3ea:	add	sp, #12
    c3ec:	pop	{r4, r5, pc}
    c3ee:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    c3f0:	blx	r3
    c3f2:	ldr	r2, [sp, #4]
    c3f4:	b.n	c3c0 <SdSpiCard::readStart(unsigned long)+0x14>
    c3f6:	nop
    c3f8:	.word	0x0000be09

0000c3fc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    c3fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c400:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    c402:	ldrb	r1, [r0, #16]
    c404:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    c406:	mov	r6, r0
    c408:	mov	r4, r2
    c40a:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    c40c:	beq.n	c41e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    c40e:	ldr	r3, [r6, #0]
    c410:	mov	r0, r6
    c412:	ldr	r3, [r3, #20]
    c414:	blx	r3
    c416:	cbnz	r0, c452 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    c418:	movs	r0, #0
    c41a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    c41e:	ldr	r3, [r0, #12]
    c420:	cmp	r3, r5
    c422:	bne.n	c40e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    c424:	movs	r5, #0
    c426:	cbz	r7, c442 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    c428:	mov	r1, r4
    c42a:	mov.w	r2, #512	; 0x200
    c42e:	mov	r0, r6
    c430:	bl	bf24 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    c434:	adds	r5, #1
    c436:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    c43a:	cmp	r0, #0
    c43c:	beq.n	c418 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    c43e:	cmp	r7, r5
    c440:	bne.n	c428 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    c442:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    c444:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    c446:	add	r7, r3
    c448:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    c44a:	cbnz	r2, c466 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    c44c:	movs	r0, #1
    c44e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    c452:	mov	r1, r5
    c454:	mov	r0, r6
    c456:	bl	c3ac <SdSpiCard::readStart(unsigned long)>
    c45a:	cmp	r0, #0
    c45c:	beq.n	c418 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    c45e:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    c460:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    c462:	strb	r3, [r6, #16]
    c464:	b.n	c424 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    c466:	ldr	r3, [r6, #0]
    c468:	mov	r0, r6
    c46a:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    c46c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    c470:	bx	r3
    c472:	nop

0000c474 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    c474:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    c476:	movs	r2, #0
    c478:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    c47a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    c47c:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c480:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    c482:	cbz	r0, c48e <SdSpiCard::readStop()+0x1a>
    c484:	movs	r3, #9
    c486:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c488:	cbnz	r4, c4a0 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    c48a:	mov	r0, r4
    c48c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c48e:	cbnz	r4, c496 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    c490:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    c492:	mov	r0, r4
    c494:	pop	{r3, r4, r5, pc}
    c496:	mov	r0, r5
    c498:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    c49c:	mov	r0, r4
    c49e:	pop	{r3, r4, r5, pc}
    c4a0:	mov	r0, r5
    c4a2:	movs	r4, #0
    c4a4:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    c4a8:	mov	r0, r4
    c4aa:	pop	{r3, r4, r5, pc}

0000c4ac <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    c4ac:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    c4ae:	ldr	r3, [r0, #0]
    c4b0:	ldr	r5, [pc, #68]	; (c4f8 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    c4b2:	ldr	r3, [r3, #64]	; 0x40
    c4b4:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    c4b6:	sub	sp, #12
    c4b8:	mov	r4, r0
    c4ba:	mov	r2, r1
    c4bc:	bne.n	c4ee <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c4be:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    c4c0:	cmp	r0, #3
    sector <<= 9;
    c4c2:	it	ne
    c4c4:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    c4c6:	movs	r1, #25
    c4c8:	mov	r0, r4
    c4ca:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c4ce:	cbz	r0, c4e8 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c4d0:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c4d2:	movs	r3, #14
    c4d4:	strb	r3, [r4, #19]
    c4d6:	cbnz	r0, c4dc <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    c4d8:	add	sp, #12
    c4da:	pop	{r4, r5, pc}
    c4dc:	mov	r0, r4
    c4de:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    c4e2:	movs	r0, #0
    c4e4:	add	sp, #12
    c4e6:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    c4e8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    c4ea:	add	sp, #12
    c4ec:	pop	{r4, r5, pc}
    c4ee:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    c4f0:	blx	r3
    c4f2:	ldr	r2, [sp, #4]
    c4f4:	b.n	c4c0 <SdSpiCard::writeStart(unsigned long)+0x14>
    c4f6:	nop
    c4f8:	.word	0x0000be09

0000c4fc <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    c4fc:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    c4fe:	ldr	r3, [r0, #0]
    c500:	ldr	r7, [pc, #172]	; (c5b0 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    c502:	ldr	r3, [r3, #52]	; 0x34
    c504:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    c506:	sub	sp, #20
    c508:	mov	r4, r0
    c50a:	mov	r5, r1
    c50c:	mov	r6, r2
    c50e:	bne.n	c56c <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c510:	mov	r2, sp
    c512:	movs	r1, #9
    c514:	bl	c2b8 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    c518:	cbz	r0, c540 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    c51a:	ldrb.w	r3, [sp, #10]
    c51e:	lsls	r2, r3, #25
    c520:	bpl.n	c550 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    c522:	ldrb	r3, [r4, #22]
    c524:	cmp	r3, #3
    firstSector <<= 9;
    c526:	it	ne
    c528:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    c52a:	mov	r2, r5
    c52c:	mov.w	r1, #32
    c530:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    c532:	it	ne
    c534:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    c536:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    c53a:	cbz	r0, c572 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c53c:	movs	r3, #37	; 0x25
    c53e:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c540:	ldrb	r0, [r4, #20]
    c542:	cbz	r0, c54c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    c544:	mov	r0, r4
    c546:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    c54a:	movs	r0, #0
}
    c54c:	add	sp, #20
    c54e:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    c550:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    c554:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    c558:	lsls	r3, r3, #1
    c55a:	adds	r2, r6, #1
    c55c:	orr.w	r3, r3, r1, lsr #7
    c560:	orrs	r2, r5
    c562:	tst	r3, r2
    c564:	beq.n	c522 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    c566:	movs	r3, #38	; 0x26
    c568:	strb	r3, [r4, #19]
    c56a:	b.n	c540 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    c56c:	mov	r1, sp
    c56e:	blx	r3
    c570:	b.n	c518 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    c572:	mov	r2, r6
    c574:	movs	r1, #33	; 0x21
    c576:	mov	r0, r4
    c578:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c57c:	cmp	r0, #0
    c57e:	bne.n	c53c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    c580:	mov	r2, r0
    c582:	movs	r1, #38	; 0x26
    c584:	mov	r0, r4
    c586:	bl	bfe0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c58a:	cmp	r0, #0
    c58c:	bne.n	c53c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    c58e:	movw	r1, #10000	; 0x2710
    c592:	mov	r0, r4
    c594:	bl	bfa4 <SdSpiCard::waitNotBusy(unsigned short)>
    c598:	cbnz	r0, c5a0 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    c59a:	movs	r3, #39	; 0x27
    c59c:	strb	r3, [r4, #19]
    c59e:	b.n	c540 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c5a0:	ldrb	r5, [r4, #20]
    c5a2:	cmp	r5, #0
    c5a4:	beq.n	c54c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    c5a6:	mov	r0, r4
    c5a8:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    c5ac:	mov	r0, r5
    c5ae:	b.n	c54c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    c5b0:	.word	0x0000c305

0000c5b4 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    c5b4:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c5b6:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    c5ba:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c5bc:	bl	bfa4 <SdSpiCard::waitNotBusy(unsigned short)>
    c5c0:	mov	r6, r0
    c5c2:	cbnz	r0, c5dc <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c5c4:	ldrb	r4, [r5, #20]
    c5c6:	movs	r3, #30
    c5c8:	strb	r3, [r5, #19]
    c5ca:	cbnz	r4, c5d0 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    c5cc:	mov	r0, r4
    c5ce:	pop	{r4, r5, r6, pc}
    c5d0:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    c5d2:	mov	r4, r6
    c5d4:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    c5d8:	mov	r0, r4
    c5da:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c5dc:	movs	r1, #253	; 0xfd
    c5de:	adds	r0, r5, #4
    c5e0:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c5e4:	ldrb	r4, [r5, #20]
    c5e6:	cbnz	r4, c5ee <SdSpiCard::writeStop()+0x3a>
    c5e8:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    c5ea:	mov	r0, r4
    c5ec:	pop	{r4, r5, r6, pc}
    c5ee:	mov	r0, r5
    c5f0:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    c5f4:	b.n	c5cc <SdSpiCard::writeStop()+0x18>
    c5f6:	nop

0000c5f8 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    c5f8:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    c5fa:	ldrb	r3, [r0, #16]
    c5fc:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    c5fe:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    c600:	beq.n	c60e <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    c602:	cmp	r3, #2
    c604:	beq.n	c61a <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    c606:	movs	r3, #0
    c608:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    c60a:	movs	r0, #1
    c60c:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    c60e:	bl	c474 <SdSpiCard::readStop()>
    c612:	cmp	r0, #0
    c614:	bne.n	c606 <SdSpiCard::syncDevice()+0xe>
      return false;
    c616:	movs	r0, #0
    c618:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    c61a:	bl	c5b4 <SdSpiCard::writeStop()>
    c61e:	cmp	r0, #0
    c620:	bne.n	c606 <SdSpiCard::syncDevice()+0xe>
    c622:	b.n	c616 <SdSpiCard::syncDevice()+0x1e>

0000c624 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    c624:	push	{r4, r5, r6, lr}
    c626:	adds	r4, r0, #4
    c628:	mov	r6, r2
    c62a:	mov	r5, r0
    c62c:	mov	r0, r4
    c62e:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    c632:	mov.w	r2, #512	; 0x200
    c636:	mov	r1, r6
    c638:	mov	r0, r4
    c63a:	bl	d7dc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c63e:	mov	r0, r4
    c640:	movs	r1, #255	; 0xff
    c642:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
    c646:	mov	r0, r4
    c648:	movs	r1, #255	; 0xff
    c64a:	bl	d7c4 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c64e:	mov	r0, r4
    c650:	bl	d788 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    c654:	and.w	r3, r0, #31
    c658:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    c65a:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    c65c:	beq.n	c672 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c65e:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c660:	movs	r3, #31
    c662:	strb	r3, [r5, #19]
    c664:	cbnz	r0, c668 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    c666:	pop	{r4, r5, r6, pc}
    c668:	mov	r0, r5
    c66a:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    c66e:	movs	r0, #0
    c670:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    c672:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    c674:	pop	{r4, r5, r6, pc}
    c676:	nop

0000c678 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    c678:	push	{r3, r4, r5, lr}
    c67a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c67c:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    c680:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c682:	bl	bfa4 <SdSpiCard::waitNotBusy(unsigned short)>
    c686:	cbnz	r0, c69a <SdSpiCard::writeData(unsigned char const*)+0x22>
    c688:	movs	r3, #35	; 0x23
    c68a:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c68c:	ldrb	r0, [r4, #20]
    c68e:	cbz	r0, c698 <SdSpiCard::writeData(unsigned char const*)+0x20>
    c690:	mov	r0, r4
    c692:	bl	bec0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    c696:	movs	r0, #0
}
    c698:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    c69a:	mov	r2, r5
    c69c:	movs	r1, #252	; 0xfc
    c69e:	mov	r0, r4
    c6a0:	bl	c624 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    c6a4:	cmp	r0, #0
    c6a6:	beq.n	c68c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    c6a8:	pop	{r3, r4, r5, pc}
    c6aa:	nop

0000c6ac <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    c6ac:	push	{r4}
  SDHC_IRQSIGEN = 0;
    c6ae:	ldr	r4, [pc, #28]	; (c6cc <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    c6b0:	ldr	r2, [pc, #28]	; (c6d0 <sdIrs()+0x24>)
    c6b2:	ldr	r1, [pc, #32]	; (c6d4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    c6b4:	ldr	r0, [pc, #32]	; (c6d8 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    c6b6:	movs	r3, #0
    c6b8:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    c6ba:	ldr	r4, [r2, #0]
    c6bc:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    c6be:	ldr	r1, [r1, #0]
    c6c0:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    c6c2:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    c6c6:	strb	r3, [r0, #0]
}
    c6c8:	bx	lr
    c6ca:	nop
    c6cc:	.word	0x400b1038
    c6d0:	.word	0x400b1030
    c6d4:	.word	0x1fff2af8
    c6d8:	.word	0x1fff2b10

0000c6dc <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    c6dc:	ldr	r3, [pc, #12]	; (c6ec <isBusyCommandComplete()+0x10>)
    c6de:	ldr	r0, [pc, #16]	; (c6f0 <isBusyCommandComplete()+0x14>)
    c6e0:	ldr	r3, [r3, #0]
    c6e2:	ands	r0, r3
}
    c6e4:	clz	r0, r0
    c6e8:	lsrs	r0, r0, #5
    c6ea:	bx	lr
    c6ec:	.word	0x400b1030
    c6f0:	.word	0x000f0001

0000c6f4 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    c6f4:	ldr	r3, [pc, #8]	; (c700 <isBusyCommandInhibit()+0xc>)
    c6f6:	ldr	r0, [r3, #0]
}
    c6f8:	and.w	r0, r0, #1
    c6fc:	bx	lr
    c6fe:	nop
    c700:	.word	0x400b1024

0000c704 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    c704:	ldr	r3, [pc, #4]	; (c70c <isBusyDMA()+0x8>)
    c706:	ldrb	r0, [r3, #0]
}
    c708:	bx	lr
    c70a:	nop
    c70c:	.word	0x1fff2b10

0000c710 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c710:	ldr	r3, [pc, #12]	; (c720 <isBusyFifoRead()+0x10>)
    c712:	ldr	r0, [r3, #0]
    c714:	eor.w	r0, r0, #2048	; 0x800
}
    c718:	ubfx	r0, r0, #11, #1
    c71c:	bx	lr
    c71e:	nop
    c720:	.word	0x400b1024

0000c724 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    c724:	ldr	r3, [pc, #12]	; (c734 <isBusyFifoWrite()+0x10>)
    c726:	ldr	r0, [r3, #0]
    c728:	eor.w	r0, r0, #1024	; 0x400
}
    c72c:	ubfx	r0, r0, #10, #1
    c730:	bx	lr
    c732:	nop
    c734:	.word	0x400b1024

0000c738 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c738:	ldr	r3, [pc, #12]	; (c748 <isBusyTransferComplete()+0x10>)
    c73a:	ldr	r0, [pc, #16]	; (c74c <isBusyTransferComplete()+0x14>)
    c73c:	ldr	r3, [r3, #0]
    c73e:	ands	r0, r3
}
    c740:	clz	r0, r0
    c744:	lsrs	r0, r0, #5
    c746:	bx	lr
    c748:	.word	0x400b1030
    c74c:	.word	0x117f0002

0000c750 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    c750:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    c754:	ldr	r3, [pc, #176]	; (c808 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    c756:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    c75a:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    c75c:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    c75e:	bhi.n	c7f8 <setSdclk(unsigned long)+0xa8>
    c760:	ldr	r5, [pc, #168]	; (c80c <setSdclk(unsigned long)+0xbc>)
    c762:	movs	r2, #8
    c764:	movs	r1, #1
    sdclkfs <<= 1;
    c766:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    c768:	lsls	r3, r1, #4
    c76a:	udiv	r3, r5, r3
    c76e:	cmp	r0, r3
    c770:	ldr	r4, [pc, #152]	; (c80c <setSdclk(unsigned long)+0xbc>)
    c772:	bcs.n	c7f0 <setSdclk(unsigned long)+0xa0>
    c774:	subs	r2, #1
    c776:	bne.n	c766 <setSdclk(unsigned long)+0x16>
    c778:	udiv	r4, r4, r1
    c77c:	lsrs	r3, r1, #1
    c77e:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    c780:	cmp	r0, r4
    c782:	bcs.n	c800 <setSdclk(unsigned long)+0xb0>
    c784:	ldr	r6, [pc, #132]	; (c80c <setSdclk(unsigned long)+0xbc>)
    c786:	lsls	r3, r1, #1
    c788:	movs	r2, #1
    c78a:	b.n	c78e <setSdclk(unsigned long)+0x3e>
    c78c:	mov	r3, r4
    c78e:	udiv	r4, r6, r3
    c792:	cmp	r0, r4
    dvs++;
    c794:	add.w	r5, r2, #1
    c798:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    c79c:	bcs.n	c7ec <setSdclk(unsigned long)+0x9c>
    c79e:	cmp	r5, #16
    c7a0:	mov	r2, r5
    c7a2:	bne.n	c78c <setSdclk(unsigned long)+0x3c>
    c7a4:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    c7a6:	ldr	r6, [pc, #104]	; (c810 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    c7a8:	ldr	r4, [pc, #104]	; (c814 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    c7aa:	ldr	r0, [pc, #96]	; (c80c <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    c7ac:	ldr	r1, [pc, #104]	; (c818 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    c7ae:	mov.w	r5, #1000	; 0x3e8
    c7b2:	mul.w	r3, r5, r3
    c7b6:	udiv	r3, r0, r3
    c7ba:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    c7bc:	ldr	r3, [r4, #0]
    c7be:	bic.w	r3, r3, #8
    c7c2:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    c7c4:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    c7c6:	bic.w	r3, r0, #1044480	; 0xff000
    c7ca:	bic.w	r3, r3, #4080	; 0xff0
    c7ce:	orr.w	r3, r3, #917504	; 0xe0000
    c7d2:	orrs	r3, r7
    c7d4:	orrs	r2, r3
    c7d6:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    c7d8:	ldr	r3, [r1, #0]
    c7da:	lsls	r3, r3, #28
    c7dc:	bpl.n	c7d8 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    c7de:	ldr	r2, [pc, #52]	; (c814 <setSdclk(unsigned long)+0xc4>)
    c7e0:	ldr	r3, [r2, #0]
    c7e2:	orr.w	r3, r3, #8
    c7e6:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    c7e8:	pop	{r4, r5, r6, r7}
    c7ea:	bx	lr
    c7ec:	lsls	r2, r2, #4
    c7ee:	b.n	c7a6 <setSdclk(unsigned long)+0x56>
    c7f0:	udiv	r4, r4, r1
    c7f4:	lsls	r7, r1, #7
    c7f6:	b.n	c780 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    c7f8:	ldr	r4, [pc, #16]	; (c80c <setSdclk(unsigned long)+0xbc>)
    c7fa:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    c7fc:	movs	r1, #1
    c7fe:	b.n	c780 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    c800:	mov	r3, r1
    c802:	movs	r2, #0
    c804:	b.n	c7a6 <setSdclk(unsigned long)+0x56>
    c806:	nop
    c808:	.word	0x005b8d7f
    c80c:	.word	0x05b8d800
    c810:	.word	0x1fff2b14
    c814:	.word	0x400b102c
    c818:	.word	0x400b1024

0000c81c <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    c81c:	ldr	r3, [pc, #4]	; (c824 <SdioCard::errorCode() const+0x8>)
}
    c81e:	ldrb	r0, [r3, #0]
    c820:	bx	lr
    c822:	nop
    c824:	.word	0x1fff0a24

0000c828 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    c828:	ldr	r3, [pc, #4]	; (c830 <SdioCard::errorData() const+0x8>)
    c82a:	ldr	r0, [r3, #0]
}
    c82c:	bx	lr
    c82e:	nop
    c830:	.word	0x1fff2af8

0000c834 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    c834:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    c836:	ldr	r4, [pc, #20]	; (c84c <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    c838:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    c83a:	ldmia	r4!, {r0, r1, r2, r3}
    c83c:	str	r0, [r5, #0]
    c83e:	str	r1, [r5, #4]
    c840:	str	r2, [r5, #8]
    c842:	str	r3, [r5, #12]
  return true;
}
    c844:	movs	r0, #1
    c846:	pop	{r4, r5}
    c848:	bx	lr
    c84a:	nop
    c84c:	.word	0x1fff2ad8

0000c850 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    c850:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    c852:	ldr	r4, [pc, #20]	; (c868 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    c854:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    c856:	ldmia	r4!, {r0, r1, r2, r3}
    c858:	str	r0, [r5, #0]
    c85a:	str	r1, [r5, #4]
    c85c:	str	r2, [r5, #8]
    c85e:	str	r3, [r5, #12]
  return true;
}
    c860:	movs	r0, #1
    c862:	pop	{r4, r5}
    c864:	bx	lr
    c866:	nop
    c868:	.word	0x1fff2b00

0000c86c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    c86c:	ldr	r3, [pc, #8]	; (c878 <SdioCard::readOCR(unsigned long*)+0xc>)
    c86e:	ldr	r3, [r3, #0]
    c870:	str	r3, [r1, #0]
  return true;
}
    c872:	movs	r0, #1
    c874:	bx	lr
    c876:	nop
    c878:	.word	0x1fff2af0

0000c87c <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    c87c:	bx	lr
    c87e:	nop

0000c880 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    c880:	push	{r3, r4, r5, r6, r7, lr}
    c882:	mov	r5, r0
  uint32_t m = micros();
    c884:	bl	125bc <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c888:	ldr	r7, [pc, #24]	; (c8a4 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    c88a:	mov	r6, r0
    c88c:	b.n	c898 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c88e:	bl	125bc <micros>
    c892:	subs	r0, r0, r6
    c894:	cmp	r0, r7
    c896:	bhi.n	c8a0 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    c898:	blx	r5
    c89a:	mov	r4, r0
    c89c:	cmp	r0, #0
    c89e:	bne.n	c88e <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    c8a0:	mov	r0, r4
    c8a2:	pop	{r3, r4, r5, r6, r7, pc}
    c8a4:	.word	0x000f4240

0000c8a8 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    c8a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    c8ac:	ldr.w	r8, [pc, #64]	; c8f0 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c8b0:	ldr	r7, [pc, #56]	; (c8ec <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    c8b2:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    c8b6:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    c8b8:	bl	125bc <micros>
    c8bc:	mov	r6, r0
    c8be:	b.n	c8ce <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c8c0:	bl	125bc <micros>
    c8c4:	subs	r0, r0, r6
    c8c6:	cmp	r0, r7
    c8c8:	bhi.n	c8e0 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    c8ca:	bl	13598 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    c8ce:	blx	r5
    c8d0:	mov	r4, r0
    c8d2:	cmp	r0, #0
    c8d4:	bne.n	c8c0 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    c8d6:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    c8da:	mov	r0, r4
    c8dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    c8e0:	movs	r3, #0
    c8e2:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    c8e6:	mov	r0, r4
    c8e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8ec:	.word	0x000f4240
    c8f0:	.word	0x1fff2ae8

0000c8f4 <SdioCard::~SdioCard()>:
    c8f4:	push	{r4, lr}
    c8f6:	movs	r1, #12
    c8f8:	mov	r4, r0
    c8fa:	bl	138d0 <operator delete(void*, unsigned int)>
    c8fe:	mov	r0, r4
    c900:	pop	{r4, pc}
    c902:	nop

0000c904 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    c904:	ldr	r3, [pc, #20]	; (c91c <SdioCard::type() const+0x18>)
    c906:	ldrb	r3, [r3, #0]
    c908:	cbz	r3, c918 <SdioCard::type() const+0x14>
    c90a:	ldr	r3, [pc, #20]	; (c920 <SdioCard::type() const+0x1c>)
    c90c:	ldrb	r3, [r3, #0]
    c90e:	cmp	r3, #0
    c910:	ite	ne
    c912:	movne	r0, #3
    c914:	moveq	r0, #2
    c916:	bx	lr
    c918:	movs	r0, #1
}
    c91a:	bx	lr
    c91c:	.word	0x1fff2ad4
    c920:	.word	0x1fff2aec

0000c924 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    c924:	push	{r3, r4, r5, lr}
    c926:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    c928:	ldr	r0, [pc, #60]	; (c968 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    c92a:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    c92c:	bl	c880 <waitTimeout(bool (*)())>
    c930:	cbz	r0, c936 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    c932:	movs	r0, #0
    c934:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    c936:	ldr	r2, [pc, #52]	; (c96c <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    c938:	ldr	r3, [pc, #52]	; (c970 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    c93a:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    c93c:	ldr	r0, [pc, #52]	; (c974 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    c93e:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    c940:	bl	c880 <waitTimeout(bool (*)())>
    c944:	cmp	r0, #0
    c946:	bne.n	c932 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    c948:	ldr	r2, [pc, #44]	; (c978 <cardCommand(unsigned long, unsigned long)+0x54>)
    c94a:	ldr	r3, [pc, #48]	; (c97c <cardCommand(unsigned long, unsigned long)+0x58>)
    c94c:	ldr	r1, [r2, #0]
    c94e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    c950:	ldr	r1, [r3, #0]
    c952:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    c954:	ldr	r2, [r3, #0]
    c956:	lsls	r2, r2, #31
    c958:	bpl.n	c932 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    c95a:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    c95c:	tst.w	r3, #983040	; 0xf0000
    c960:	bne.n	c932 <cardCommand(unsigned long, unsigned long)+0xe>
    c962:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    c964:	pop	{r3, r4, r5, pc}
    c966:	nop
    c968:	.word	0x0000c6f5
    c96c:	.word	0x400b1008
    c970:	.word	0x400b100c
    c974:	.word	0x0000c6dd
    c978:	.word	0x400b1030
    c97c:	.word	0x1fff2af8

0000c980 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    c980:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c982:	ldr	r3, [pc, #16]	; (c994 <SdioCard::status()+0x14>)
    c984:	ldr	r0, [pc, #16]	; (c998 <SdioCard::status()+0x18>)
    c986:	ldr	r1, [r3, #0]
    c988:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    c98c:	cbz	r0, c992 <SdioCard::status()+0x12>
    c98e:	ldr	r3, [pc, #12]	; (c99c <SdioCard::status()+0x1c>)
    c990:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    c992:	pop	{r3, pc}
    c994:	.word	0x1fff2af4
    c998:	.word	0x0d1a0000
    c99c:	.word	0x400b1010

0000c9a0 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    c9a0:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    c9a2:	ldr	r3, [pc, #84]	; (c9f8 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    c9a4:	sub	sp, #20
    c9a6:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    c9a8:	ldr	r1, [r3, #0]
    c9aa:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    c9ae:	cbz	r0, c9f2 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    c9b0:	ldr	r2, [pc, #72]	; (c9fc <readReg16(unsigned long, void*)+0x5c>)
    c9b2:	ldr	r3, [pc, #76]	; (ca00 <readReg16(unsigned long, void*)+0x60>)
    c9b4:	ldr	r2, [r2, #0]
    c9b6:	str	r2, [sp, #0]
    c9b8:	ldr	r1, [r3, #0]
    c9ba:	str	r1, [sp, #4]
    c9bc:	ldr	r1, [r3, #4]
    c9be:	str	r1, [sp, #8]
    c9c0:	adds	r3, #8
    c9c2:	add.w	r4, r5, #15
    c9c6:	ldr	r3, [r3, #0]
    c9c8:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    c9ca:	movs	r3, #0
    c9cc:	b.n	c9d2 <readReg16(unsigned long, void*)+0x32>
    c9ce:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    c9d2:	and.w	r1, r3, #3
    c9d6:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    c9d8:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    c9da:	lsrs	r2, r1
    c9dc:	add.w	lr, sp, #16
    c9e0:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    c9e4:	cmp	r3, #15
    c9e6:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    c9e8:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    c9ec:	bne.n	c9ce <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    c9ee:	movs	r3, #0
    c9f0:	strb	r3, [r5, #15]
  return true;
}
    c9f2:	add	sp, #20
    c9f4:	pop	{r4, r5, pc}
    c9f6:	nop
    c9f8:	.word	0x1fff2af4
    c9fc:	.word	0x400b1010
    ca00:	.word	0x400b1014

0000ca04 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    ca04:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    ca06:	ldr	r3, [pc, #28]	; (ca24 <isBusyCMD13()+0x20>)
    ca08:	ldr	r0, [pc, #28]	; (ca28 <isBusyCMD13()+0x24>)
    ca0a:	ldr	r1, [r3, #0]
    ca0c:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    ca10:	cbz	r0, ca20 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    ca12:	ldr	r3, [pc, #24]	; (ca2c <isBusyCMD13()+0x28>)
    ca14:	ldr	r0, [r3, #0]
    ca16:	eor.w	r0, r0, #256	; 0x100
    ca1a:	ubfx	r0, r0, #8, #1
    ca1e:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    ca20:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    ca22:	pop	{r3, pc}
    ca24:	.word	0x1fff2af4
    ca28:	.word	0x0d1a0000
    ca2c:	.word	0x400b1010

0000ca30 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ca30:	ldr	r3, [pc, #16]	; (ca44 <SdioCard::isBusy()+0x14>)
    ca32:	ldr	r3, [r3, #0]
    ca34:	cbz	r3, ca38 <SdioCard::isBusy()+0x8>
    ca36:	bx	r3
    ca38:	ldr	r3, [pc, #12]	; (ca48 <SdioCard::isBusy()+0x18>)
    ca3a:	ldrb	r0, [r3, #0]
    ca3c:	cbnz	r0, ca40 <SdioCard::isBusy()+0x10>
}
    ca3e:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ca40:	b.w	ca04 <isBusyCMD13()>
    ca44:	.word	0x1fff2ae8
    ca48:	.word	0x1fff2afc

0000ca4c <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    ca4c:	ldr	r3, [pc, #20]	; (ca64 <waitDmaStatus() [clone .part.6]+0x18>)
    ca4e:	ldr	r0, [r3, #0]
    ca50:	ands.w	r0, r0, #2
    ca54:	beq.n	ca62 <waitDmaStatus() [clone .part.6]+0x16>
    ca56:	ldr	r3, [r3, #0]
    ca58:	ldr	r0, [pc, #12]	; (ca68 <waitDmaStatus() [clone .part.6]+0x1c>)
    ca5a:	ands	r0, r3
    ca5c:	clz	r0, r0
    ca60:	lsrs	r0, r0, #5
}
    ca62:	bx	lr
    ca64:	.word	0x1fff2af8
    ca68:	.word	0x117f0000

0000ca6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    ca6c:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    ca6e:	lsls	r4, r2, #30
    ca70:	bne.n	ca74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    ca72:	cbnz	r3, ca86 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca74:	ldr	r1, [pc, #124]	; (caf4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    ca76:	ldr	r3, [pc, #128]	; (caf8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca78:	movs	r0, #36	; 0x24
  m_errorLine = line;
    ca7a:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ca7e:	strb	r0, [r1, #0]
  m_errorLine = line;
    ca80:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    ca82:	movs	r0, #0
    ca84:	pop	{r3, r4, r5, r6, r7, pc}
    ca86:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    ca88:	ldr	r0, [pc, #112]	; (cafc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    ca8a:	mov	r4, r3
    ca8c:	mov	r7, r1
    ca8e:	mov	r5, r2
    ca90:	bl	c8a8 <yieldTimeout(bool (*)())>
    ca94:	cbnz	r0, cade <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    ca96:	ldr	r1, [pc, #104]	; (cb00 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    ca98:	ldr	r2, [pc, #104]	; (cb04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    ca9a:	ldr.w	lr, [pc, #128]	; cb1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    ca9e:	mov.w	ip, #1
    caa2:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    caa6:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    caa8:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    caaa:	ldr	r4, [pc, #92]	; (cb08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    caac:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    caae:	ldr	r2, [pc, #92]	; (cb0c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    cab0:	ldr	r1, [pc, #92]	; (cb10 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    cab2:	ldr	r0, [pc, #96]	; (cb14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    cab4:	orr.w	r3, r3, #512	; 0x200
    cab8:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    caba:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    cabc:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    cabe:	cbnz	r3, caee <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    cac0:	lsls	r1, r7, #9
    cac2:	mov	r0, r6
    cac4:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    cac8:	cmp	r0, #0
    caca:	beq.n	ca82 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    cacc:	ldr	r0, [pc, #72]	; (cb18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    cace:	bl	c8a8 <yieldTimeout(bool (*)())>
    cad2:	cmp	r0, #0
    cad4:	bne.n	ca82 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    cad6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cada:	b.w	ca4c <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cade:	ldr	r1, [pc, #20]	; (caf4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    cae0:	ldr	r3, [pc, #20]	; (caf8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cae2:	movs	r0, #10
  m_errorLine = line;
    cae4:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cae8:	strb	r0, [r1, #0]
  m_errorLine = line;
    caea:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    caec:	b.n	ca82 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    caee:	mov	r1, r7
    caf0:	b.n	cac2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    caf2:	nop
    caf4:	.word	0x1fff0a24
    caf8:	.word	0x1fff2b18
    cafc:	.word	0x0000ca05
    cb00:	.word	0x1fff2af8
    cb04:	.word	0x400b1000
    cb08:	.word	0x400b1004
    cb0c:	.word	0x1fff2aec
    cb10:	.word	0x400b1038
    cb14:	.word	0x117f0002
    cb18:	.word	0x0000c705
    cb1c:	.word	0x1fff2b10

0000cb20 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    cb20:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    cb22:	ldr	r1, [pc, #100]	; (cb88 <SdioCard::sectorCount()+0x68>)
    cb24:	ldrb	r3, [r1, #0]
    cb26:	ands.w	r3, r3, #192	; 0xc0
    cb2a:	beq.n	cb50 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    cb2c:	cmp	r3, #64	; 0x40
    cb2e:	beq.n	cb36 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    cb30:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    cb32:	pop	{r4, r5, r6}
    cb34:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    cb36:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    cb38:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    cb3a:	ldrb	r0, [r1, #8]
    cb3c:	adds	r2, r3, #1
    cb3e:	and.w	r3, r4, #63	; 0x3f
    cb42:	add.w	r3, r2, r3, lsl #16
    cb46:	add.w	r0, r3, r0, lsl #8
    cb4a:	lsls	r0, r0, #10
    cb4c:	pop	{r4, r5, r6}
    cb4e:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    cb50:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    cb52:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    cb54:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    cb56:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    cb58:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    cb5a:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    cb5c:	and.w	r1, r5, #3
    cb60:	lsls	r1, r1, #1
    cb62:	and.w	r3, r3, #3
    cb66:	lsls	r2, r2, #2
    cb68:	orr.w	r0, r1, r0, lsr #7
    cb6c:	orr.w	r3, r2, r3, lsl #10
    cb70:	and.w	r1, r4, #15
    cb74:	orr.w	r3, r3, r6, lsr #6
    cb78:	add	r0, r1
    cb7a:	subs	r0, #7
    cb7c:	adds	r3, #1
    cb7e:	lsl.w	r0, r3, r0
    cb82:	pop	{r4, r5, r6}
    cb84:	bx	lr
    cb86:	nop
    cb88:	.word	0x1fff2b00

0000cb8c <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    cb8c:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    cb8e:	ldr	r6, [pc, #176]	; (cc40 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    cb90:	ldrb	r3, [r6, #10]
    cb92:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    cb96:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    cb98:	cbnz	r0, cbb2 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    cb9a:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    cb9e:	ldrb	r2, [r6, #11]
    cba0:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    cba4:	lsls	r3, r3, #1
    cba6:	adds	r0, r5, #1
    cba8:	orr.w	r3, r3, r2, lsr #7
    cbac:	orrs	r0, r1
    cbae:	tst	r3, r0
    cbb0:	bne.n	cbf6 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    cbb2:	ldr	r3, [pc, #144]	; (cc44 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    cbb4:	ldrb	r3, [r3, #0]
    cbb6:	cbnz	r3, cbbc <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    cbb8:	lsls	r1, r1, #9
    lastSector <<= 9;
    cbba:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    cbbc:	ldr	r0, [pc, #136]	; (cc48 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    cbbe:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    cbc2:	mov	r4, r0
    cbc4:	cbnz	r0, cbd8 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cbc6:	ldr	r1, [pc, #132]	; (cc4c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    cbc8:	ldr	r3, [pc, #132]	; (cc50 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cbca:	movs	r0, #15
  m_errorLine = line;
    cbcc:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cbd0:	strb	r0, [r1, #0]
  m_errorLine = line;
    cbd2:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    cbd4:	mov	r0, r4
    cbd6:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    cbd8:	mov	r1, r5
    cbda:	ldr	r0, [pc, #120]	; (cc54 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    cbdc:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    cbe0:	mov	r4, r0
    cbe2:	cbnz	r0, cc08 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cbe4:	ldr	r1, [pc, #100]	; (cc4c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    cbe6:	ldr	r3, [pc, #104]	; (cc50 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cbe8:	movs	r0, #16
  m_errorLine = line;
    cbea:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cbee:	strb	r0, [r1, #0]
  m_errorLine = line;
    cbf0:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    cbf2:	mov	r0, r4
    cbf4:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cbf6:	ldr	r1, [pc, #84]	; (cc4c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    cbf8:	ldr	r3, [pc, #84]	; (cc50 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cbfa:	movs	r0, #38	; 0x26
  m_errorLine = line;
    cbfc:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc00:	strb	r0, [r1, #0]
  m_errorLine = line;
    cc02:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    cc04:	mov	r0, r4
    cc06:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    cc08:	movs	r1, #0
    cc0a:	ldr	r0, [pc, #76]	; (cc58 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    cc0c:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    cc10:	mov	r4, r0
    cc12:	cbnz	r0, cc24 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc14:	ldr	r1, [pc, #52]	; (cc4c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    cc16:	ldr	r3, [pc, #56]	; (cc50 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc18:	movs	r0, #17
  m_errorLine = line;
    cc1a:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc1e:	strb	r0, [r1, #0]
  m_errorLine = line;
    cc20:	str	r2, [r3, #0]
    cc22:	b.n	cbd4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    cc24:	ldr	r0, [pc, #52]	; (cc5c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    cc26:	bl	c880 <waitTimeout(bool (*)())>
    cc2a:	cmp	r0, #0
    cc2c:	beq.n	cbd4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc2e:	ldr	r1, [pc, #28]	; (cc4c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    cc30:	ldr	r3, [pc, #28]	; (cc50 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc32:	movs	r0, #39	; 0x27
  m_errorLine = line;
    cc34:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc38:	strb	r0, [r1, #0]
  m_errorLine = line;
    cc3a:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    cc3c:	movs	r4, #0
    cc3e:	b.n	cbd4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    cc40:	.word	0x1fff2b00
    cc44:	.word	0x1fff2aec
    cc48:	.word	0x201a0000
    cc4c:	.word	0x1fff0a24
    cc50:	.word	0x1fff2b18
    cc54:	.word	0x211a0000
    cc58:	.word	0x261b0000
    cc5c:	.word	0x0000ca05

0000cc60 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    cc60:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    cc62:	movs	r1, #0
    cc64:	ldr	r0, [pc, #84]	; (ccbc <transferStop()+0x5c>)
    cc66:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    cc6a:	mov	r4, r0
    cc6c:	cbnz	r0, cc80 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc6e:	ldr	r1, [pc, #80]	; (ccc0 <transferStop()+0x60>)
  m_errorLine = line;
    cc70:	ldr	r3, [pc, #80]	; (ccc4 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc72:	movs	r0, #9
  m_errorLine = line;
    cc74:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cc78:	strb	r0, [r1, #0]
  m_errorLine = line;
    cc7a:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    cc7c:	mov	r0, r4
    cc7e:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    cc80:	ldr	r0, [pc, #68]	; (ccc8 <transferStop()+0x68>)
    cc82:	bl	c8a8 <yieldTimeout(bool (*)())>
    cc86:	cbnz	r0, cca6 <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    cc88:	ldr	r0, [pc, #64]	; (cccc <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    cc8a:	ldr	r1, [pc, #68]	; (ccd0 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    cc8c:	ldr	r5, [pc, #68]	; (ccd4 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    cc8e:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    cc90:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    cc92:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    cc94:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    cc98:	orr.w	r2, r2, #67108864	; 0x4000000
    cc9c:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    cc9e:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    cca0:	str	r3, [r1, #0]
  return true;
}
    cca2:	mov	r0, r4
    cca4:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cca6:	ldr	r1, [pc, #24]	; (ccc0 <transferStop()+0x60>)
  m_errorLine = line;
    cca8:	ldr	r3, [pc, #24]	; (ccc4 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ccaa:	movs	r0, #10
  m_errorLine = line;
    ccac:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ccb0:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    ccb2:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    ccb4:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    ccb6:	mov	r0, r4
    ccb8:	pop	{r4, r5, r6, pc}
    ccba:	nop
    ccbc:	.word	0x0cdb0000
    ccc0:	.word	0x1fff0a24
    ccc4:	.word	0x1fff2b18
    ccc8:	.word	0x0000ca05
    cccc:	.word	0x400b1034
    ccd0:	.word	0x400b1028
    ccd4:	.word	0x400b102c

0000ccd8 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    ccd8:	b.w	cc60 <transferStop()>

0000ccdc <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    ccdc:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    ccde:	ldr	r3, [pc, #160]	; (cd80 <SdioCard::writeData(unsigned char const*)+0xa4>)
    cce0:	ldr	r3, [r3, #0]
    cce2:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    cce4:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    cce6:	bmi.n	ccfa <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    cce8:	ldr	r3, [pc, #152]	; (cd84 <SdioCard::writeData(unsigned char const*)+0xa8>)
    ccea:	ldr	r2, [r3, #0]
    ccec:	bic.w	r2, r2, #65536	; 0x10000
    ccf0:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    ccf2:	ldr	r2, [r3, #0]
    ccf4:	orr.w	r2, r2, #131072	; 0x20000
    ccf8:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ccfa:	ldr	r2, [pc, #136]	; (cd84 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    ccfc:	ldr	r0, [pc, #136]	; (cd88 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ccfe:	ldr	r3, [r2, #0]
    cd00:	orr.w	r3, r3, #65536	; 0x10000
    cd04:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    cd06:	bl	c880 <waitTimeout(bool (*)())>
    cd0a:	cmp	r0, #0
    cd0c:	bne.n	cd6c <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    cd0e:	ldr	r4, [pc, #112]	; (cd80 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    cd10:	ldr	r0, [pc, #120]	; (cd8c <SdioCard::writeData(unsigned char const*)+0xb0>)
    cd12:	subs	r3, r5, #4
    cd14:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    cd18:	ldr	r2, [r4, #0]
    cd1a:	lsls	r1, r2, #21
    cd1c:	bpl.n	cd18 <SdioCard::writeData(unsigned char const*)+0x3c>
    cd1e:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    cd22:	ldr.w	r2, [r3, #4]!
    cd26:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    cd28:	cmp	r1, r3
    cd2a:	bne.n	cd22 <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    cd2c:	cmp	r5, r1
    cd2e:	mov	r3, r1
    cd30:	bne.n	cd18 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    cd32:	ldr	r0, [pc, #92]	; (cd90 <SdioCard::writeData(unsigned char const*)+0xb4>)
    cd34:	bl	c880 <waitTimeout(bool (*)())>
    cd38:	cbnz	r0, cd5a <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    cd3a:	ldr	r2, [pc, #88]	; (cd94 <SdioCard::writeData(unsigned char const*)+0xb8>)
    cd3c:	ldr	r3, [pc, #88]	; (cd98 <SdioCard::writeData(unsigned char const*)+0xbc>)
    cd3e:	ldr	r1, [r2, #0]
    cd40:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    cd42:	ldr	r1, [r3, #0]
    cd44:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    cd46:	ldr	r2, [r3, #0]
    cd48:	lsls	r2, r2, #30
    cd4a:	bpl.n	cd7c <SdioCard::writeData(unsigned char const*)+0xa0>
    cd4c:	ldr	r3, [r3, #0]
    cd4e:	ldr	r0, [pc, #76]	; (cd9c <SdioCard::writeData(unsigned char const*)+0xc0>)
    cd50:	ands	r0, r3
    cd52:	clz	r0, r0
    cd56:	lsrs	r0, r0, #5
    cd58:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cd5a:	ldr	r1, [pc, #68]	; (cda0 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    cd5c:	ldr	r3, [pc, #68]	; (cda4 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cd5e:	movs	r0, #35	; 0x23
  m_errorLine = line;
    cd60:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cd64:	strb	r0, [r1, #0]
  m_errorLine = line;
    cd66:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    cd68:	movs	r0, #0
    cd6a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cd6c:	ldr	r1, [pc, #48]	; (cda0 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    cd6e:	ldr	r3, [pc, #52]	; (cda4 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cd70:	movs	r0, #32
  m_errorLine = line;
    cd72:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cd76:	strb	r0, [r1, #0]
  m_errorLine = line;
    cd78:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    cd7a:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    cd7c:	pop	{r3, r4, r5, pc}
    cd7e:	nop
    cd80:	.word	0x400b1024
    cd84:	.word	0x400b1028
    cd88:	.word	0x0000c725
    cd8c:	.word	0x400b1020
    cd90:	.word	0x0000c739
    cd94:	.word	0x400b1030
    cd98:	.word	0x1fff2af8
    cd9c:	.word	0x117f0000
    cda0:	.word	0x1fff0a24
    cda4:	.word	0x1fff2b18

0000cda8 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    cda8:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    cdaa:	ldr	r0, [pc, #80]	; (cdfc <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    cdac:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    cdae:	bl	c8a8 <yieldTimeout(bool (*)())>
    cdb2:	cbnz	r0, cde8 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    cdb4:	ldr	r2, [pc, #72]	; (ce00 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    cdb6:	ldr	r1, [pc, #76]	; (ce04 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    cdb8:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    cdba:	ldr	r0, [pc, #76]	; (ce08 <SdioCard::writeStart(unsigned long)+0x60>)
    cdbc:	ldr	r5, [pc, #76]	; (ce0c <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    cdbe:	bic.w	r3, r3, #65536	; 0x10000
    cdc2:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    cdc4:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    cdc6:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    cdc8:	cbnz	r3, cde4 <SdioCard::writeStart(unsigned long)+0x3c>
    cdca:	lsls	r1, r4, #9
    cdcc:	ldr	r0, [pc, #64]	; (ce10 <SdioCard::writeStart(unsigned long)+0x68>)
    cdce:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    cdd2:	cbnz	r0, cde2 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cdd4:	ldr	r1, [pc, #60]	; (ce14 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    cdd6:	ldr	r3, [pc, #64]	; (ce18 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cdd8:	movs	r4, #14
  m_errorLine = line;
    cdda:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cdde:	strb	r4, [r1, #0]
  m_errorLine = line;
    cde0:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    cde2:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    cde4:	mov	r1, r4
    cde6:	b.n	cdcc <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cde8:	ldr	r1, [pc, #40]	; (ce14 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    cdea:	ldr	r3, [pc, #44]	; (ce18 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cdec:	movs	r0, #10
  m_errorLine = line;
    cdee:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cdf2:	strb	r0, [r1, #0]
  m_errorLine = line;
    cdf4:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    cdf6:	movs	r0, #0
    cdf8:	pop	{r3, r4, r5, pc}
    cdfa:	nop
    cdfc:	.word	0x0000ca05
    ce00:	.word	0x400b1028
    ce04:	.word	0x1fff2aec
    ce08:	.word	0x400b1004
    ce0c:	.word	0xffff0200
    ce10:	.word	0x193a0022
    ce14:	.word	0x1fff0a24
    ce18:	.word	0x1fff2b18

0000ce1c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    ce1c:	push	{r3, r4, r5, r6, r7, lr}
    ce1e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    ce20:	ldrb	r0, [r0, #8]
    ce22:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    ce24:	mov	r4, r1
    ce26:	mov	r5, r2
    ce28:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    ce2a:	bmi.n	ce54 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    ce2c:	cbz	r3, ce50 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    ce2e:	add	r7, r1
    ce30:	b.n	ce36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    ce32:	cmp	r4, r7
    ce34:	beq.n	ce50 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    ce36:	ldr	r3, [r6, #0]
    ce38:	mov	r2, r5
    ce3a:	mov	r1, r4
    ce3c:	ldr	r3, [r3, #8]
    ce3e:	mov	r0, r6
    ce40:	blx	r3
    ce42:	adds	r4, #1
    ce44:	add.w	r5, r5, #512	; 0x200
    ce48:	cmp	r0, #0
    ce4a:	bne.n	ce32 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    ce4c:	movs	r0, #0
    ce4e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    ce50:	movs	r0, #1
    ce52:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    ce54:	lsls	r0, r2, #30
    ce56:	beq.n	ce7e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    ce58:	cmp	r3, #0
    ce5a:	beq.n	ce50 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    ce5c:	add	r7, r1
    ce5e:	b.n	ce64 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    ce60:	cmp	r7, r4
    ce62:	beq.n	ce50 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    ce64:	ldr	r3, [r6, #0]
    ce66:	mov	r2, r5
    ce68:	mov	r1, r4
    ce6a:	ldr	r3, [r3, #8]
    ce6c:	mov	r0, r6
    ce6e:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    ce70:	adds	r4, #1
    ce72:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    ce76:	cmp	r0, #0
    ce78:	bne.n	ce60 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    ce7a:	movs	r0, #0
    ce7c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    ce7e:	ldr	r0, [pc, #24]	; (ce98 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    ce80:	bl	ca6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    ce84:	cmp	r0, #0
    ce86:	bne.n	ce50 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ce88:	ldr	r1, [pc, #16]	; (ce9c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    ce8a:	ldr	r3, [pc, #20]	; (cea0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ce8c:	movs	r4, #12
  m_errorLine = line;
    ce8e:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    ce92:	strb	r4, [r1, #0]
  m_errorLine = line;
    ce94:	str	r2, [r3, #0]
    ce96:	pop	{r3, r4, r5, r6, r7, pc}
    ce98:	.word	0x123a0037
    ce9c:	.word	0x1fff0a24
    cea0:	.word	0x1fff2b18

0000cea4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    cea4:	push	{r3, r4, r5, r6, r7, lr}
    cea6:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    cea8:	ldrb	r0, [r0, #8]
    ceaa:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    ceac:	mov	r4, r1
    ceae:	mov	r5, r2
    ceb0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    ceb2:	bmi.n	cedc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    ceb4:	cbz	r3, ced8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    ceb6:	add	r7, r1
    ceb8:	b.n	cebe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    ceba:	cmp	r4, r7
    cebc:	beq.n	ced8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    cebe:	ldr	r3, [r6, #0]
    cec0:	mov	r2, r5
    cec2:	mov	r1, r4
    cec4:	ldr	r3, [r3, #24]
    cec6:	mov	r0, r6
    cec8:	blx	r3
    ceca:	adds	r4, #1
    cecc:	add.w	r5, r5, #512	; 0x200
    ced0:	cmp	r0, #0
    ced2:	bne.n	ceba <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    ced4:	movs	r0, #0
    ced6:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    ced8:	movs	r0, #1
    ceda:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    cedc:	lsls	r0, r2, #30
    cede:	beq.n	cf06 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    cee0:	cmp	r3, #0
    cee2:	beq.n	ced8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    cee4:	add	r7, r1
    cee6:	b.n	ceec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    cee8:	cmp	r7, r4
    ceea:	beq.n	ced8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    ceec:	ldr	r3, [r6, #0]
    ceee:	mov	r2, r5
    cef0:	mov	r1, r4
    cef2:	ldr	r3, [r3, #24]
    cef4:	mov	r0, r6
    cef6:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    cef8:	adds	r4, #1
    cefa:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    cefe:	cmp	r0, #0
    cf00:	bne.n	cee8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    cf02:	movs	r0, #0
    cf04:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    cf06:	ldr	r0, [pc, #24]	; (cf20 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    cf08:	bl	ca6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cf0c:	cmp	r0, #0
    cf0e:	bne.n	ced8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cf10:	ldr	r1, [pc, #16]	; (cf24 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    cf12:	ldr	r3, [pc, #20]	; (cf28 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cf14:	movs	r4, #14
  m_errorLine = line;
    cf16:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cf1a:	strb	r4, [r1, #0]
  m_errorLine = line;
    cf1c:	str	r2, [r3, #0]
    cf1e:	pop	{r3, r4, r5, r6, r7, pc}
    cf20:	.word	0x193a0027
    cf24:	.word	0x1fff0a24
    cf28:	.word	0x1fff2b18

0000cf2c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    cf2c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    cf2e:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    cf30:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    cf32:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    cf34:	sub.w	sp, sp, #512	; 0x200
    cf38:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    cf3a:	bpl.n	cf70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    cf3c:	lsls	r3, r5, #30
    cf3e:	beq.n	cf4e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    cf40:	mov	r1, r5
    cf42:	mov	r0, sp
    cf44:	mov.w	r2, #512	; 0x200
    cf48:	bl	11bf8 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    cf4c:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    cf4e:	mov	r2, r5
    cf50:	mov	r1, r6
    cf52:	movs	r3, #1
    cf54:	ldr	r0, [pc, #120]	; (cfd0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    cf56:	bl	ca6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cf5a:	cbnz	r0, cf6a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cf5c:	ldr	r1, [pc, #116]	; (cfd4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    cf5e:	ldr	r3, [pc, #120]	; (cfd8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cf60:	movs	r4, #13
  m_errorLine = line;
    cf62:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    cf66:	strb	r4, [r1, #0]
  m_errorLine = line;
    cf68:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    cf6a:	add.w	sp, sp, #512	; 0x200
    cf6e:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    cf70:	ldrb	r3, [r0, #9]
    cf72:	cmp	r3, #2
    cf74:	mov	r4, r0
    cf76:	beq.n	cf8a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    cf78:	ldr	r3, [r4, #0]
    cf7a:	mov	r0, r4
    cf7c:	ldr	r3, [r3, #20]
    cf7e:	blx	r3
    cf80:	cbnz	r0, cfba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    cf82:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    cf84:	add.w	sp, sp, #512	; 0x200
    cf88:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    cf8a:	ldr	r3, [r0, #4]
    cf8c:	cmp	r1, r3
    cf8e:	bne.n	cf78 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    cf90:	ldr	r3, [r4, #0]
    cf92:	mov	r1, r5
    cf94:	ldr	r3, [r3, #68]	; 0x44
    cf96:	mov	r0, r4
    cf98:	blx	r3
    cf9a:	cmp	r0, #0
    cf9c:	beq.n	cf82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    cf9e:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    cfa0:	ldr	r2, [pc, #56]	; (cfdc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    cfa2:	adds	r3, #1
    cfa4:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    cfa6:	ldr	r3, [r2, #0]
    cfa8:	lsrs	r3, r3, #16
    cfaa:	lsls	r3, r3, #16
    cfac:	cmp	r3, #0
    cfae:	bne.n	cf6a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    cfb0:	ldr	r3, [r4, #0]
    cfb2:	mov	r0, r4
    cfb4:	ldr	r3, [r3, #20]
    cfb6:	blx	r3
    cfb8:	b.n	cf6a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    cfba:	ldr	r3, [r4, #0]
    cfbc:	mov	r1, r6
    cfbe:	ldr	r3, [r3, #72]	; 0x48
    cfc0:	mov	r0, r4
    cfc2:	blx	r3
    cfc4:	cmp	r0, #0
    cfc6:	beq.n	cf82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    cfc8:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    cfca:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    cfcc:	strb	r3, [r4, #9]
    cfce:	b.n	cf90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    cfd0:	.word	0x183a0001
    cfd4:	.word	0x1fff0a24
    cfd8:	.word	0x1fff2b18
    cfdc:	.word	0x400b1004

0000cfe0 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    cfe0:	ldrb	r3, [r0, #9]
    cfe2:	cmp	r3, #1
    cfe4:	beq.n	d000 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    cfe6:	cmp	r3, #2
    cfe8:	beq.n	cfee <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    cfea:	movs	r0, #1
    cfec:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    cfee:	movs	r1, #0
    if (!writeStop()) {
    cff0:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    cff2:	strb	r1, [r0, #9]
    if (!writeStop()) {
    cff4:	ldr	r3, [r3, #76]	; 0x4c
    cff6:	ldr	r2, [pc, #20]	; (d00c <SdioCard::syncDevice()+0x2c>)
    cff8:	cmp	r3, r2
    cffa:	bne.n	d008 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    cffc:	b.w	cc60 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    d000:	movs	r3, #0
    d002:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    d004:	b.w	cc60 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    d008:	bx	r3
    d00a:	nop
    d00c:	.word	0x0000ccd9

0000d010 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    d010:	push	{r3, r4, r5, r6, r7, lr}
    d012:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    d014:	ldr	r0, [pc, #116]	; (d08c <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    d016:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    d018:	bl	c880 <waitTimeout(bool (*)())>
    d01c:	cbz	r0, d030 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d01e:	ldr	r1, [pc, #112]	; (d090 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    d020:	ldr	r3, [pc, #112]	; (d094 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d022:	movs	r0, #10
  m_errorLine = line;
    d024:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d028:	strb	r0, [r1, #0]
  m_errorLine = line;
    d02a:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d02c:	movs	r0, #0
    d02e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    d030:	ldr	r2, [pc, #100]	; (d098 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    d032:	ldr.w	lr, [pc, #132]	; d0b8 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    d036:	ldr	r7, [pc, #100]	; (d09c <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    d038:	ldr	r6, [pc, #100]	; (d0a0 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d03a:	ldr	r3, [pc, #104]	; (d0a4 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    d03c:	mov.w	ip, #1
    d040:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    d044:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    d046:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    d048:	ldr	r5, [pc, #92]	; (d0a8 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d04a:	ldr	r2, [pc, #96]	; (d0ac <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    d04c:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    d04e:	ldr	r0, [pc, #96]	; (d0b0 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    d050:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d052:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    d054:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d058:	cbnz	r0, d06a <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d05a:	ldr	r1, [pc, #52]	; (d090 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    d05c:	ldr	r3, [pc, #52]	; (d094 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d05e:	movs	r4, #4
  m_errorLine = line;
    d060:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d064:	strb	r4, [r1, #0]
  m_errorLine = line;
    d066:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    d068:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    d06a:	ldr	r0, [pc, #72]	; (d0b4 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    d06c:	bl	c8a8 <yieldTimeout(bool (*)())>
    d070:	cbnz	r0, d07a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    d072:	bl	ca4c <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    d076:	cbz	r0, d07a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    d078:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d07a:	ldr	r1, [pc, #20]	; (d090 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    d07c:	ldr	r3, [pc, #20]	; (d094 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d07e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    d080:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d084:	strb	r0, [r1, #0]
  m_errorLine = line;
    d086:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    d088:	movs	r0, #0
    d08a:	pop	{r3, r4, r5, r6, r7, pc}
    d08c:	.word	0x0000ca05
    d090:	.word	0x1fff0a24
    d094:	.word	0x1fff2b18
    d098:	.word	0x1fff2af8
    d09c:	.word	0x400b1000
    d0a0:	.word	0x400b1004
    d0a4:	.word	0x400b1038
    d0a8:	.word	0x00010040
    d0ac:	.word	0x117f0002
    d0b0:	.word	0x063a0011
    d0b4:	.word	0x0000c705
    d0b8:	.word	0x1fff2b10

0000d0bc <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    d0bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    d0c0:	ldr	r5, [pc, #568]	; (d2fc <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    d0c2:	ldr	r4, [pc, #572]	; (d300 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    d0c4:	ldr.w	r8, [pc, #684]	; d374 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    d0c8:	ldr	r7, [pc, #568]	; (d304 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    d0ca:	ldr	r6, [pc, #572]	; (d308 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    d0cc:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    d0ce:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    d0d0:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    d0d2:	strb	r3, [r0, #9]
  m_initDone = false;
    d0d4:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    d0d8:	strb	r3, [r7, #0]
  m_version2 = false;
    d0da:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    d0dc:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    d0de:	ldr	r2, [pc, #556]	; (d30c <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d0e0:	ldr	r0, [pc, #556]	; (d310 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    d0e2:	ldr	r1, [pc, #560]	; (d314 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    d0e4:	ldr.w	lr, [pc, #656]	; d378 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    d0e8:	orr.w	r3, r3, #201326592	; 0xc000000
    d0ec:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    d0ee:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    d0f0:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    d0f4:	orr.w	r3, r3, #131072	; 0x20000
    d0f8:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    d0fa:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    d0fc:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d100:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    d104:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d108:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    d10a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    d10e:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    d110:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    d112:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    d114:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    d116:	ldr	r3, [r2, #0]
    d118:	orr.w	r3, r3, #16777216	; 0x1000000
    d11c:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    d120:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    d122:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    d124:	ldr	r3, [r2, #0]
    d126:	ldr	r4, [pc, #496]	; (d318 <SdioCard::begin(SdioConfig)+0x25c>)
    d128:	lsls	r1, r3, #7
    d12a:	bmi.n	d124 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    d12c:	mov.w	r0, #400	; 0x190
    d130:	bl	c750 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d134:	ldr.w	ip, [pc, #472]	; d310 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    d138:	ldr.w	lr, [pc, #572]	; d378 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    d13c:	ldr	r1, [pc, #468]	; (d314 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    d13e:	ldr	r2, [pc, #476]	; (d31c <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    d140:	ldr	r0, [pc, #476]	; (d320 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d142:	movw	r3, #1091	; 0x443
    d146:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    d14a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    d14e:	mov.w	lr, #1088	; 0x440
    d152:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    d156:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    d158:	add.w	r2, r2, #409600	; 0x64000
    d15c:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    d15e:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    d160:	ldr	r0, [pc, #448]	; (d324 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    d162:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    d164:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    d166:	ldr	r1, [pc, #448]	; (d328 <SdioCard::begin(SdioConfig)+0x26c>)
    d168:	movs	r0, #81	; 0x51
    d16a:	bl	12570 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    d16e:	ldr	r3, [pc, #444]	; (d32c <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    d170:	ldr	r1, [pc, #444]	; (d330 <SdioCard::begin(SdioConfig)+0x274>)
    d172:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    d174:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    d178:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    d17a:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    d17c:	ldr	r3, [r4, #0]
    d17e:	orr.w	r3, r3, #134217728	; 0x8000000
    d182:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    d184:	ldr	r1, [r4, #0]
    d186:	ands.w	r1, r1, #134217728	; 0x8000000
    d18a:	bne.n	d184 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    d18c:	mov	r0, r1
    d18e:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d192:	mov	r4, r0
    d194:	cmp	r0, #0
    d196:	beq.n	d236 <SdioCard::begin(SdioConfig)+0x17a>
    d198:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    d19a:	mov.w	r1, #426	; 0x1aa
    d19e:	ldr	r0, [pc, #404]	; (d334 <SdioCard::begin(SdioConfig)+0x278>)
    d1a0:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d1a4:	cmp	r0, #0
    d1a6:	bne.n	d264 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    d1a8:	subs	r4, #1
    d1aa:	bne.n	d19a <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    d1ac:	ldrb	r3, [r6, #0]
    d1ae:	ldr	r6, [pc, #392]	; (d338 <SdioCard::begin(SdioConfig)+0x27c>)
    d1b0:	cmp	r3, #0
    d1b2:	it	eq
    d1b4:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    d1b8:	bl	125bc <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    d1bc:	ldr	r4, [pc, #380]	; (d33c <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    d1be:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    d1c0:	movs	r1, #0
    d1c2:	ldr	r0, [pc, #380]	; (d340 <SdioCard::begin(SdioConfig)+0x284>)
    d1c4:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d1c8:	cbnz	r0, d1e0 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d1ca:	ldr	r2, [pc, #376]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d1cc:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1d0:	movs	r3, #23
  m_errorLine = line;
    d1d2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1d4:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    d1d6:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    d1d8:	mov	r0, r4
    d1da:	add	sp, #68	; 0x44
    d1dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    d1e0:	mov	r1, r6
    d1e2:	ldr	r0, [pc, #356]	; (d348 <SdioCard::begin(SdioConfig)+0x28c>)
    d1e4:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d1e8:	cmp	r0, #0
    d1ea:	beq.n	d1ca <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    d1ec:	bl	125bc <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    d1f0:	ldr	r3, [pc, #344]	; (d34c <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    d1f2:	ldr	r2, [pc, #328]	; (d33c <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    d1f4:	rsb	r0, r9, r0
    d1f8:	cmp	r0, r3
    d1fa:	bhi.n	d1ca <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    d1fc:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    d1fe:	cmp	r3, #0
    d200:	bge.n	d1c0 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    d202:	ldr	r3, [pc, #332]	; (d350 <SdioCard::begin(SdioConfig)+0x294>)
    d204:	ldr	r1, [r2, #0]
    d206:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    d208:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    d20a:	ldr	r0, [pc, #328]	; (d354 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    d20c:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    d20e:	it	mi
    d210:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    d212:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    d216:	it	mi
    d218:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    d21a:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d21e:	mov	r4, r0
    d220:	cbnz	r0, d24a <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d222:	ldr	r2, [pc, #288]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d224:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d228:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    d22a:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d22c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d22e:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    d230:	add	sp, #68	; 0x44
    d232:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d236:	ldr	r2, [pc, #268]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d238:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d23c:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    d23e:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d240:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d242:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    d244:	add	sp, #68	; 0x44
    d246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    d24a:	movs	r1, #0
    d24c:	ldr	r0, [pc, #264]	; (d358 <SdioCard::begin(SdioConfig)+0x29c>)
    d24e:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d252:	mov	r4, r0
    d254:	cbnz	r0, d286 <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d256:	ldr	r2, [pc, #236]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d258:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d25c:	movs	r3, #3
  m_errorLine = line;
    d25e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d260:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    d262:	b.n	d1d8 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    d264:	ldr	r3, [pc, #212]	; (d33c <SdioCard::begin(SdioConfig)+0x280>)
    d266:	ldr	r3, [r3, #0]
    d268:	cmp.w	r3, #426	; 0x1aa
    d26c:	beq.n	d27e <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d26e:	ldr	r2, [pc, #212]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d270:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d274:	movs	r3, #6
  m_errorLine = line;
    d276:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d278:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    d27a:	movs	r4, #0
    d27c:	b.n	d1d8 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    d27e:	movs	r3, #1
    d280:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    d282:	ldr	r6, [pc, #180]	; (d338 <SdioCard::begin(SdioConfig)+0x27c>)
    d284:	b.n	d1b8 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    d286:	ldr	r3, [pc, #180]	; (d33c <SdioCard::begin(SdioConfig)+0x280>)
    d288:	ldr	r6, [pc, #208]	; (d35c <SdioCard::begin(SdioConfig)+0x2a0>)
    d28a:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    d28c:	ldr	r1, [pc, #208]	; (d360 <SdioCard::begin(SdioConfig)+0x2a4>)
    d28e:	ldr	r0, [pc, #212]	; (d364 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    d290:	lsrs	r3, r3, #16
    d292:	lsls	r3, r3, #16
    d294:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    d296:	bl	c9a0 <readReg16(unsigned long, void*)>
    d29a:	mov	r4, r0
    d29c:	cbnz	r0, d2ac <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d29e:	ldr	r2, [pc, #164]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d2a0:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2a4:	movs	r3, #7
  m_errorLine = line;
    d2a6:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2a8:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    d2aa:	b.n	d1d8 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    d2ac:	ldr	r1, [pc, #184]	; (d368 <SdioCard::begin(SdioConfig)+0x2ac>)
    d2ae:	ldr	r0, [pc, #188]	; (d36c <SdioCard::begin(SdioConfig)+0x2b0>)
    d2b0:	bl	c9a0 <readReg16(unsigned long, void*)>
    d2b4:	mov	r4, r0
    d2b6:	cbnz	r0, d2c6 <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d2b8:	ldr	r2, [pc, #136]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d2ba:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2be:	movs	r3, #8
  m_errorLine = line;
    d2c0:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2c2:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    d2c4:	b.n	d1d8 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    d2c6:	ldr	r1, [r6, #0]
    d2c8:	ldr	r0, [pc, #164]	; (d370 <SdioCard::begin(SdioConfig)+0x2b4>)
    d2ca:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d2ce:	mov	r4, r0
    d2d0:	cbnz	r0, d2e0 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d2d2:	ldr	r2, [pc, #112]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d2d4:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2d8:	movs	r3, #5
  m_errorLine = line;
    d2da:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2dc:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    d2de:	b.n	d1d8 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    d2e0:	ldr	r1, [r6, #0]
    d2e2:	ldr	r0, [pc, #92]	; (d340 <SdioCard::begin(SdioConfig)+0x284>)
    d2e4:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d2e8:	cmp	r0, #0
    d2ea:	bne.n	d37c <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d2ec:	ldr	r2, [pc, #84]	; (d344 <SdioCard::begin(SdioConfig)+0x288>)
    d2ee:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2f2:	movs	r3, #20
  m_errorLine = line;
    d2f4:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2f6:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    d2f8:	movs	r4, #0
    d2fa:	b.n	d1d8 <SdioCard::begin(SdioConfig)+0x11c>
    d2fc:	.word	0x1fff0a24
    d300:	.word	0x4000d800
    d304:	.word	0x1fff2aec
    d308:	.word	0x1fff2ad4
    d30c:	.word	0x40048030
    d310:	.word	0x4004d000
    d314:	.word	0x4004d008
    d318:	.word	0x400b102c
    d31c:	.word	0x4004d00c
    d320:	.word	0x4004d010
    d324:	.word	0x117f000b
    d328:	.word	0x0000c6ad
    d32c:	.word	0xe000e108
    d330:	.word	0xe000e451
    d334:	.word	0x081a0000
    d338:	.word	0x40300000
    d33c:	.word	0x400b1010
    d340:	.word	0x371a0000
    d344:	.word	0x1fff2b18
    d348:	.word	0x29020000
    d34c:	.word	0x000f4240
    d350:	.word	0x1fff2af0
    d354:	.word	0x02090000
    d358:	.word	0x031a0000
    d35c:	.word	0x1fff2af4
    d360:	.word	0x1fff2b00
    d364:	.word	0x09090000
    d368:	.word	0x1fff2ad8
    d36c:	.word	0x0a090000
    d370:	.word	0x071b0000
    d374:	.word	0x1fff2afc
    d378:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    d37c:	movs	r1, #2
    d37e:	ldr	r0, [pc, #168]	; (d428 <SdioCard::begin(SdioConfig)+0x36c>)
    d380:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d384:	mov	r4, r0
    d386:	cmp	r0, #0
    d388:	beq.n	d2ec <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    d38a:	ldr	r3, [pc, #160]	; (d42c <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    d38c:	ldr	r0, [pc, #160]	; (d430 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    d38e:	ldr	r2, [r3, #0]
    d390:	bic.w	r2, r2, #6
    d394:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    d396:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    d398:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    d39c:	orr.w	r2, r2, #2
    d3a0:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    d3a2:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    d3a4:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    d3a6:	mvn.w	r0, #4278190080	; 0xff000000
    d3aa:	bl	d010 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    d3ae:	cbz	r0, d3b8 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    d3b0:	ldrb.w	r3, [sp, #13]
    d3b4:	lsls	r3, r3, #30
    d3b6:	bmi.n	d40a <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    d3b8:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d3bc:	ldr.w	fp, [pc, #132]	; d444 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    d3c0:	ldr.w	sl, [pc, #132]	; d448 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    d3c4:	ldr.w	r9, [pc, #132]	; d44c <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    d3c8:	ldr	r7, [pc, #104]	; (d434 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    d3ca:	ldr	r6, [pc, #108]	; (d438 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    d3cc:	ldr	r5, [pc, #108]	; (d43c <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d3ce:	movw	r3, #259	; 0x103
    d3d2:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    d3d6:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    d3da:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    d3de:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    d3e0:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    d3e2:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    d3e4:	bl	c750 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d3e8:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    d3ec:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    d3f0:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    d3f2:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    d3f6:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    d3fa:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    d3fe:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    d400:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    d402:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    d404:	strb.w	r2, [r8]
  return true;
    d408:	b.n	d1d8 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    d40a:	mov	r1, sp
    d40c:	ldr	r0, [pc, #48]	; (d440 <SdioCard::begin(SdioConfig)+0x384>)
    d40e:	bl	d010 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    d412:	cmp	r0, #0
    d414:	beq.n	d3b8 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    d416:	ldrb.w	r3, [sp, #16]
    d41a:	and.w	r3, r3, #15
    d41e:	cmp	r3, #1
    d420:	bne.n	d3b8 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    d422:	movw	r0, #50000	; 0xc350
    d426:	b.n	d3bc <SdioCard::begin(SdioConfig)+0x300>
    d428:	.word	0x061a0000
    d42c:	.word	0x400b1028
    d430:	.word	0x400b1044
    d434:	.word	0x4004d00c
    d438:	.word	0x4004d010
    d43c:	.word	0x4004d014
    d440:	.word	0x80fffff1
    d444:	.word	0x4004d000
    d448:	.word	0x4004d004
    d44c:	.word	0x4004d008

0000d450 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    d450:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    d452:	ldr	r3, [pc, #160]	; (d4f4 <SdioCard::readData(unsigned char*)+0xa4>)
    d454:	ldr	r3, [r3, #0]
    d456:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    d458:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    d45a:	bmi.n	d47a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d45c:	ldr	r3, [pc, #152]	; (d4f8 <SdioCard::readData(unsigned char*)+0xa8>)
    d45e:	ldr	r2, [r3, #0]
    d460:	bic.w	r2, r2, #65536	; 0x10000
    d464:	str	r2, [r3, #0]
    noInterrupts();
    d466:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    d468:	ldr	r2, [r3, #0]
    d46a:	orr.w	r2, r2, #131072	; 0x20000
    d46e:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d470:	ldr	r2, [r3, #0]
    d472:	orr.w	r2, r2, #65536	; 0x10000
    d476:	str	r2, [r3, #0]
    interrupts();
    d478:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    d47a:	ldr	r0, [pc, #128]	; (d4fc <SdioCard::readData(unsigned char*)+0xac>)
    d47c:	bl	c880 <waitTimeout(bool (*)())>
    d480:	cmp	r0, #0
    d482:	bne.n	d4e2 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    d484:	ldr	r4, [pc, #108]	; (d4f4 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    d486:	ldr	r0, [pc, #120]	; (d500 <SdioCard::readData(unsigned char*)+0xb0>)
    d488:	subs	r3, r5, #4
    d48a:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    d48e:	ldr	r2, [r4, #0]
    d490:	lsls	r1, r2, #20
    d492:	bpl.n	d48e <SdioCard::readData(unsigned char*)+0x3e>
    d494:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    d498:	ldr	r2, [r0, #0]
    d49a:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    d49e:	cmp	r1, r3
    d4a0:	bne.n	d498 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    d4a2:	cmp	r5, r1
    d4a4:	mov	r3, r1
    d4a6:	bne.n	d48e <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    d4a8:	ldr	r0, [pc, #88]	; (d504 <SdioCard::readData(unsigned char*)+0xb4>)
    d4aa:	bl	c880 <waitTimeout(bool (*)())>
    d4ae:	cbnz	r0, d4d0 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    d4b0:	ldr	r2, [pc, #84]	; (d508 <SdioCard::readData(unsigned char*)+0xb8>)
    d4b2:	ldr	r3, [pc, #88]	; (d50c <SdioCard::readData(unsigned char*)+0xbc>)
    d4b4:	ldr	r1, [r2, #0]
    d4b6:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    d4b8:	ldr	r1, [r3, #0]
    d4ba:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    d4bc:	ldr	r2, [r3, #0]
    d4be:	lsls	r2, r2, #30
    d4c0:	bpl.n	d4f2 <SdioCard::readData(unsigned char*)+0xa2>
    d4c2:	ldr	r3, [r3, #0]
    d4c4:	ldr	r0, [pc, #72]	; (d510 <SdioCard::readData(unsigned char*)+0xc0>)
    d4c6:	ands	r0, r3
    d4c8:	clz	r0, r0
    d4cc:	lsrs	r0, r0, #5
    d4ce:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4d0:	ldr	r1, [pc, #64]	; (d514 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    d4d2:	ldr	r3, [pc, #68]	; (d518 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4d4:	movs	r0, #29
  m_errorLine = line;
    d4d6:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4da:	strb	r0, [r1, #0]
  m_errorLine = line;
    d4dc:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    d4de:	movs	r0, #0
    d4e0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4e2:	ldr	r1, [pc, #48]	; (d514 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    d4e4:	ldr	r3, [pc, #48]	; (d518 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4e6:	movs	r0, #26
  m_errorLine = line;
    d4e8:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4ec:	strb	r0, [r1, #0]
  m_errorLine = line;
    d4ee:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    d4f0:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    d4f2:	pop	{r3, r4, r5, pc}
    d4f4:	.word	0x400b1024
    d4f8:	.word	0x400b1028
    d4fc:	.word	0x0000c711
    d500:	.word	0x400b1020
    d504:	.word	0x0000c739
    d508:	.word	0x400b1030
    d50c:	.word	0x1fff2af8
    d510:	.word	0x117f0000
    d514:	.word	0x1fff0a24
    d518:	.word	0x1fff2b18

0000d51c <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    d51c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    d51e:	ldr	r0, [pc, #80]	; (d570 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    d520:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    d522:	bl	c8a8 <yieldTimeout(bool (*)())>
    d526:	cbnz	r0, d55c <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d528:	ldr	r2, [pc, #72]	; (d574 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d52a:	ldr	r1, [pc, #76]	; (d578 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d52c:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    d52e:	ldr	r0, [pc, #76]	; (d57c <SdioCard::readStart(unsigned long)+0x60>)
    d530:	ldr	r5, [pc, #76]	; (d580 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d532:	orr.w	r3, r3, #65536	; 0x10000
    d536:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d538:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    d53a:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d53c:	cbnz	r3, d558 <SdioCard::readStart(unsigned long)+0x3c>
    d53e:	lsls	r1, r4, #9
    d540:	ldr	r0, [pc, #64]	; (d584 <SdioCard::readStart(unsigned long)+0x68>)
    d542:	bl	c924 <cardCommand(unsigned long, unsigned long)>
    d546:	cbnz	r0, d556 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d548:	ldr	r1, [pc, #60]	; (d588 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d54a:	ldr	r3, [pc, #64]	; (d58c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d54c:	movs	r4, #12
  m_errorLine = line;
    d54e:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d552:	strb	r4, [r1, #0]
  m_errorLine = line;
    d554:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    d556:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d558:	mov	r1, r4
    d55a:	b.n	d540 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d55c:	ldr	r1, [pc, #40]	; (d588 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d55e:	ldr	r3, [pc, #44]	; (d58c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d560:	movs	r0, #10
  m_errorLine = line;
    d562:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d566:	strb	r0, [r1, #0]
  m_errorLine = line;
    d568:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d56a:	movs	r0, #0
    d56c:	pop	{r3, r4, r5, pc}
    d56e:	nop
    d570:	.word	0x0000ca05
    d574:	.word	0x400b1028
    d578:	.word	0x1fff2aec
    d57c:	.word	0x400b1004
    d580:	.word	0xffff0200
    d584:	.word	0x123a0032
    d588:	.word	0x1fff0a24
    d58c:	.word	0x1fff2b18

0000d590 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    d590:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    d592:	ldrb	r3, [r0, #8]
    d594:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    d596:	sub.w	sp, sp, #512	; 0x200
    d59a:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    d59c:	bpl.n	d5c4 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    d59e:	lsls	r3, r2, #30
    d5a0:	beq.n	d5e2 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    d5a2:	mov	r2, sp
    d5a4:	movs	r3, #1
    d5a6:	ldr	r0, [pc, #168]	; (d650 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    d5a8:	bl	ca6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d5ac:	cbz	r0, d5ee <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    d5ae:	mov	r1, sp
    d5b0:	mov	r0, r5
    d5b2:	mov.w	r2, #512	; 0x200
    d5b6:	bl	11bf8 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    d5ba:	movs	r5, #1
}
    d5bc:	mov	r0, r5
    d5be:	add.w	sp, sp, #512	; 0x200
    d5c2:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    d5c4:	ldrb	r3, [r0, #9]
    d5c6:	cmp	r3, #1
    d5c8:	mov	r4, r0
    d5ca:	mov	r6, r1
    d5cc:	beq.n	d606 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    d5ce:	ldr	r3, [r4, #0]
    d5d0:	mov	r0, r4
    d5d2:	ldr	r3, [r3, #20]
    d5d4:	blx	r3
    d5d6:	cbnz	r0, d62c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    d5d8:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d5da:	mov	r0, r5
    d5dc:	add.w	sp, sp, #512	; 0x200
    d5e0:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    d5e2:	movs	r3, #1
    d5e4:	ldr	r0, [pc, #104]	; (d650 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    d5e6:	bl	ca6c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d5ea:	cmp	r0, #0
    d5ec:	bne.n	d5ba <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5ee:	ldr	r1, [pc, #100]	; (d654 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    d5f0:	ldr	r3, [pc, #100]	; (d658 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5f2:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    d5f4:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d5f6:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5fa:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d5fc:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d5fe:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d600:	add.w	sp, sp, #512	; 0x200
    d604:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    d606:	ldr	r3, [r0, #4]
    d608:	cmp	r1, r3
    d60a:	bne.n	d5ce <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    d60c:	mov	r1, r5
    d60e:	mov	r0, r4
    d610:	bl	d450 <SdioCard::readData(unsigned char*)>
    d614:	mov	r5, r0
    d616:	cmp	r0, #0
    d618:	beq.n	d5d8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    d61a:	ldr	r3, [pc, #64]	; (d65c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    d61c:	ldr	r3, [r3, #0]
    d61e:	lsrs	r3, r3, #16
    d620:	lsls	r3, r3, #16
    d622:	cbz	r3, d640 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    d624:	ldr	r3, [r4, #4]
    d626:	adds	r3, #1
    d628:	str	r3, [r4, #4]
    d62a:	b.n	d5da <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    d62c:	mov	r1, r6
    d62e:	mov	r0, r4
    d630:	bl	d51c <SdioCard::readStart(unsigned long)>
    d634:	cmp	r0, #0
    d636:	beq.n	d5d8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    d638:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    d63a:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    d63c:	strb	r3, [r4, #9]
    d63e:	b.n	d60c <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    d640:	ldr	r3, [r4, #0]
    d642:	mov	r0, r4
    d644:	ldr	r3, [r3, #20]
    d646:	blx	r3
    d648:	cmp	r0, #0
    d64a:	bne.n	d624 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    d64c:	b.n	d5d8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    d64e:	nop
    d650:	.word	0x113a0011
    d654:	.word	0x1fff0a24
    d658:	.word	0x1fff2b18
    d65c:	.word	0x400b1004

0000d660 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    d660:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    d662:	ldr	r3, [r0, #0]
    d664:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    d666:	ldrb	r1, [r3, #11]
    d668:	cbz	r1, d6aa <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    d66a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    d66c:	ldrb	r1, [r3, #11]
    d66e:	lsls	r0, r1, #31
    d670:	bpl.n	d680 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    d672:	ldr	r0, [pc, #100]	; (d6d8 <SdSpiArduinoDriver::activate()+0x78>)
    d674:	ldr	r1, [r3, #12]
    d676:	ldr	r4, [r0, #0]
    d678:	ands	r1, r4
    d67a:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    d67c:	str	r1, [r0, #0]
    d67e:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    d680:	lsls	r4, r1, #30
    d682:	bpl.n	d692 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    d684:	ldr	r0, [pc, #84]	; (d6dc <SdSpiArduinoDriver::activate()+0x7c>)
    d686:	ldr	r1, [r3, #16]
    d688:	ldr	r4, [r0, #0]
    d68a:	ands	r1, r4
    d68c:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    d68e:	str	r1, [r0, #0]
    d690:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    d692:	lsls	r0, r1, #29
    d694:	bpl.n	d6a4 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    d696:	ldr	r0, [pc, #72]	; (d6e0 <SdSpiArduinoDriver::activate()+0x80>)
    d698:	ldr	r1, [r3, #20]
    d69a:	ldr	r4, [r0, #0]
    d69c:	ands	r1, r4
    d69e:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    d6a0:	str	r1, [r0, #0]
    d6a2:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    d6a4:	lsls	r1, r1, #28
    d6a6:	bmi.n	d6c8 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    d6a8:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    d6aa:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    d6ac:	ldr	r1, [r3, #12]
    d6ae:	cmp	r1, r2
    d6b0:	beq.n	d6c2 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    d6b2:	ldr	r0, [pc, #48]	; (d6e4 <SdSpiArduinoDriver::activate()+0x84>)
    d6b4:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    d6b6:	ldr	r1, [pc, #48]	; (d6e8 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    d6b8:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    d6ba:	orr.w	r0, r2, #1073741824	; 0x40000000
    d6be:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    d6c0:	str	r1, [r3, #0]
}
    d6c2:	ldr.w	r4, [sp], #4
    d6c6:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    d6c8:	ldr	r0, [pc, #32]	; (d6ec <SdSpiArduinoDriver::activate()+0x8c>)
    d6ca:	ldr	r1, [r3, #24]
    d6cc:	ldr	r4, [r0, #0]
    d6ce:	ands	r1, r4
    d6d0:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    d6d2:	str	r1, [r0, #0]
    d6d4:	b.n	d6a8 <SdSpiArduinoDriver::activate()+0x48>
    d6d6:	nop
    d6d8:	.word	0xe000e180
    d6dc:	.word	0xe000e184
    d6e0:	.word	0xe000e188
    d6e4:	.word	0x003f4001
    d6e8:	.word	0x803f0000
    d6ec:	.word	0xe000e18c

0000d6f0 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    d6f0:	push	{r4, lr}
    d6f2:	sub	sp, #16
    d6f4:	add	r4, sp, #16
    d6f6:	stmdb	r4, {r1, r2, r3}
    d6fa:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    d6fc:	cbz	r3, d70c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1c>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    d6fe:	str	r3, [r0, #0]
    d700:	mov	r0, r3
  }
  m_spi->begin();
}
    d702:	add	sp, #16
    d704:	ldmia.w	sp!, {r4, lr}
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    d708:	b.w	7aac <SPIClass::begin()>
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    d70c:	ldrb.w	r3, [sp, #4]
    d710:	cmp	r3, #62	; 0x3e
    d712:	beq.n	d718 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x28>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    d714:	ldr	r3, [pc, #32]	; (d738 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x48>)
    d716:	b.n	d6fe <SdSpiArduinoDriver::begin(SdSpiConfig)+0xe>
    d718:	mov	r4, r0
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    m_spi = &SDCARD_SPI;
    d71a:	ldr	r0, [pc, #32]	; (d73c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x4c>)
    d71c:	str	r0, [r4, #0]
    m_spi->setMISO(SDCARD_MISO_PIN);
    d71e:	movs	r1, #59	; 0x3b
    d720:	bl	7bcc <SPIClass::setMISO(unsigned char)>
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    d724:	movs	r1, #61	; 0x3d
    d726:	ldr	r0, [r4, #0]
    d728:	bl	7b28 <SPIClass::setMOSI(unsigned char)>
    m_spi->setSCK(SDCARD_SCK_PIN);
    d72c:	ldr	r0, [r4, #0]
    d72e:	movs	r1, #60	; 0x3c
    d730:	bl	7c6c <SPIClass::setSCK(unsigned char)>
    d734:	ldr	r0, [r4, #0]
    d736:	b.n	d702 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x12>
    d738:	.word	0x1fff09a0
    d73c:	.word	0x1fff09e0

0000d740 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    d740:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    d742:	ldrb	r3, [r2, #11]
    d744:	cbz	r3, d774 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    d746:	lsls	r1, r3, #31
    d748:	bpl.n	d752 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    d74a:	ldr	r3, [pc, #44]	; (d778 <SdSpiArduinoDriver::deactivate()+0x38>)
    d74c:	ldr	r1, [r2, #28]
    d74e:	str	r1, [r3, #0]
    d750:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    d752:	lsls	r0, r3, #30
    d754:	bpl.n	d75e <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    d756:	ldr	r3, [pc, #36]	; (d77c <SdSpiArduinoDriver::deactivate()+0x3c>)
    d758:	ldr	r1, [r2, #32]
    d75a:	str	r1, [r3, #0]
    d75c:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    d75e:	lsls	r1, r3, #29
    d760:	bpl.n	d76a <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    d762:	ldr	r3, [pc, #28]	; (d780 <SdSpiArduinoDriver::deactivate()+0x40>)
    d764:	ldr	r1, [r2, #36]	; 0x24
    d766:	str	r1, [r3, #0]
    d768:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    d76a:	lsls	r3, r3, #28
    d76c:	bpl.n	d774 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    d76e:	ldr	r3, [pc, #20]	; (d784 <SdSpiArduinoDriver::deactivate()+0x44>)
    d770:	ldr	r2, [r2, #40]	; 0x28
    d772:	str	r2, [r3, #0]
    d774:	bx	lr
    d776:	nop
    d778:	.word	0xe000e100
    d77c:	.word	0xe000e104
    d780:	.word	0xe000e108
    d784:	.word	0xe000e10c

0000d788 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    d788:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    d78a:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    d78c:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    d790:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    d792:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    d794:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    d796:	ldr	r3, [r2, #44]	; 0x2c
    d798:	cmp	r3, #0
    d79a:	bge.n	d796 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    d79c:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    d79e:	uxtb	r0, r0
    d7a0:	bx	lr
    d7a2:	nop

0000d7a4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    d7a4:	push	{r4, r5, r6, lr}
    d7a6:	mov	r5, r0
    d7a8:	mov	r4, r1
    d7aa:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    d7ac:	mov	r0, r1
    d7ae:	movs	r1, #255	; 0xff
    d7b0:	bl	14e3c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    d7b4:	ldr	r0, [r5, #0]
    d7b6:	mov	r3, r6
    d7b8:	mov	r2, r4
    d7ba:	mov	r1, r4
    d7bc:	bl	7d1c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    d7c0:	movs	r0, #0
    d7c2:	pop	{r4, r5, r6, pc}

0000d7c4 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    d7c4:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    d7c6:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    d7c8:	mov.w	r3, #2147483648	; 0x80000000
    d7cc:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    d7ce:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    d7d0:	ldr	r3, [r2, #44]	; 0x2c
    d7d2:	cmp	r3, #0
    d7d4:	bge.n	d7d0 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    d7d6:	ldr	r3, [r2, #56]	; 0x38
    d7d8:	bx	lr
    d7da:	nop

0000d7dc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    d7dc:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    d7de:	subs	r5, r2, #1
    d7e0:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    d7e4:	sub.w	sp, sp, #516	; 0x204
    d7e8:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    d7ea:	bcc.n	d812 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    d7ec:	cbz	r2, d80c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    d7ee:	ldr	r2, [r0, #0]
    d7f0:	ldr	r2, [r2, #0]
    d7f2:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    d7f4:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    d7f8:	ldrb.w	r3, [r1], #1
    d7fc:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    d7fe:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    d800:	ldr	r3, [r2, #44]	; 0x2c
    d802:	cmp	r3, #0
    d804:	bge.n	d800 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    d806:	cmp	r1, r0
		return port().POPR;
    d808:	ldr	r3, [r2, #56]	; 0x38
    d80a:	bne.n	d7f8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    d80c:	add.w	sp, sp, #516	; 0x204
    d810:	pop	{r4, r5, pc}
    d812:	mov	r5, r0
    d814:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    d816:	mov	r0, sp
    d818:	bl	11bf8 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    d81c:	mov	r3, r4
    d81e:	mov	r2, sp
    d820:	mov	r1, sp
    d822:	ldr	r0, [r5, #0]
    d824:	bl	7d1c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    d828:	add.w	sp, sp, #516	; 0x204
    d82c:	pop	{r4, r5, pc}
    d82e:	nop

0000d830 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    d830:	movs	r1, #1
    d832:	b.w	125b0 <pinMode>
    d836:	nop

0000d838 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    d838:	b.w	125a4 <digitalWrite>

0000d83c <LittleFS_SPIFlash::static_sync(lfs_config const*)>:
		//Serial.printf("  flash er: block=%d\n", block);
		return ((LittleFS_SPIFlash *)(c->context))->erase(block);
	}
	static int static_sync(const struct lfs_config *c) {
		return 0;
	}
    d83c:	movs	r0, #0
    d83e:	bx	lr

0000d840 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)>:
	return nullptr;
}

FLASHMEM
bool LittleFS_SPIFlash::begin(uint8_t cspin, SPIClass &spiport)
{
    d840:	push	{r4, r5, r6, r7, lr}
    d842:	mov	r5, r0
	pin = cspin;
	port = &spiport;

	//Serial.println("flash begin");
	configured = false;
    d844:	movs	r4, #0
	return nullptr;
}

FLASHMEM
bool LittleFS_SPIFlash::begin(uint8_t cspin, SPIClass &spiport)
{
    d846:	sub	sp, #20
	pin = cspin;
	port = &spiport;
    d848:	str.w	r2, [r0, #200]	; 0xc8
}

FLASHMEM
bool LittleFS_SPIFlash::begin(uint8_t cspin, SPIClass &spiport)
{
	pin = cspin;
    d84c:	strb.w	r1, [r0, #204]	; 0xcc
	port = &spiport;

	//Serial.println("flash begin");
	configured = false;
	digitalWrite(pin, HIGH);
    d850:	mov	r0, r1
{
	pin = cspin;
	port = &spiport;

	//Serial.println("flash begin");
	configured = false;
    d852:	strb	r4, [r5, #4]
	digitalWrite(pin, HIGH);
    d854:	movs	r1, #1
    d856:	bl	125a4 <digitalWrite>
	pinMode(pin, OUTPUT);
    d85a:	movs	r1, #1
    d85c:	ldrb.w	r0, [r5, #204]	; 0xcc
    d860:	bl	125b0 <pinMode>
	port->begin();
    d864:	ldr.w	r0, [r5, #200]	; 0xc8
    d868:	bl	7aac <SPIClass::begin()>

	uint8_t buf[5] = {0x9F, 0, 0, 0, 0};
	port->beginTransaction(SPICONFIG);
    d86c:	ldr.w	r3, [r5, #200]	; 0xc8
	configured = false;
	digitalWrite(pin, HIGH);
	pinMode(pin, OUTPUT);
	port->begin();

	uint8_t buf[5] = {0x9F, 0, 0, 0, 0};
    d870:	strb.w	r4, [sp, #9]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    d874:	ldrb	r2, [r3, #11]
    d876:	strb.w	r4, [sp, #10]
    d87a:	movs	r1, #159	; 0x9f
    d87c:	strb.w	r4, [sp, #11]
    d880:	strb.w	r4, [sp, #12]
    d884:	strb.w	r1, [sp, #8]
    d888:	cmp	r2, #0
    d88a:	beq.n	d8dc <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x9c>
			__disable_irq();
    d88c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    d88e:	ldrb	r2, [r3, #11]
    d890:	lsls	r0, r2, #31
    d892:	bpl.n	d8a6 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x66>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    d894:	add.w	r1, r1, #3758153728	; 0xe000e000
    d898:	adds	r1, #225	; 0xe1
    d89a:	ldr	r2, [r3, #12]
    d89c:	ldr	r0, [r1, #0]
    d89e:	ands	r2, r0
    d8a0:	str	r2, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    d8a2:	str	r2, [r1, #0]
    d8a4:	ldrb	r2, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    d8a6:	lsls	r1, r2, #30
    d8a8:	bpl.n	d8b8 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x78>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    d8aa:	ldr	r1, [pc, #504]	; (daa4 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x264>)
    d8ac:	ldr	r2, [r3, #16]
    d8ae:	ldr	r0, [r1, #0]
    d8b0:	ands	r2, r0
    d8b2:	str	r2, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    d8b4:	str	r2, [r1, #0]
    d8b6:	ldrb	r2, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    d8b8:	lsls	r7, r2, #29
    d8ba:	bpl.n	d8ca <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x8a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    d8bc:	ldr	r1, [pc, #488]	; (daa8 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x268>)
    d8be:	ldr	r2, [r3, #20]
    d8c0:	ldr	r0, [r1, #0]
    d8c2:	ands	r2, r0
    d8c4:	str	r2, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    d8c6:	str	r2, [r1, #0]
    d8c8:	ldrb	r2, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    d8ca:	lsls	r6, r2, #28
    d8cc:	bpl.n	d8da <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x9a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    d8ce:	ldr	r1, [pc, #476]	; (daac <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x26c>)
    d8d0:	ldr	r2, [r3, #24]
    d8d2:	ldr	r0, [r1, #0]
    d8d4:	ands	r2, r0
    d8d6:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    d8d8:	str	r2, [r1, #0]
			}
			#endif
			__enable_irq();
    d8da:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    d8dc:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    d8de:	ldr	r2, [r3, #12]
    d8e0:	cmp.w	r2, #3087007744	; 0xb8000000
    d8e4:	beq.n	d8fa <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0xba>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    d8e6:	ldr	r1, [pc, #456]	; (dab0 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x270>)
    d8e8:	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    d8ea:	ldr	r2, [pc, #456]	; (dab4 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x274>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    d8ec:	mov.w	r0, #3087007744	; 0xb8000000
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    d8f0:	mov.w	r1, #4160749568	; 0xf8000000
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    d8f4:	str	r0, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    d8f6:	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    d8f8:	str	r2, [r3, #0]
	port->beginTransaction(SPICONFIG);
	digitalWrite(pin, LOW);
    d8fa:	movs	r1, #0
    d8fc:	ldrb.w	r0, [r5, #204]	; 0xcc
    d900:	bl	125a4 <digitalWrite>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    d904:	add	r2, sp, #8
    d906:	mov	r1, r2
    d908:	movs	r3, #5
    d90a:	ldr.w	r0, [r5, #200]	; 0xc8
    d90e:	bl	7d1c <SPIClass::transfer(void const*, void*, unsigned int)>
	port->transfer(buf, 5);
	digitalWrite(pin, HIGH);
    d912:	movs	r1, #1
    d914:	ldrb.w	r0, [r5, #204]	; 0xcc
    d918:	bl	125a4 <digitalWrite>
	port->endTransaction();
    d91c:	ldr.w	r2, [r5, #200]	; 0xc8
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    d920:	ldrb	r3, [r2, #11]
    d922:	cmp	r3, #0
    d924:	bne.w	da4a <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x20a>

	Serial.printf("Flash ID: %02X %02X %02X %02X\r\n", buf[1], buf[2], buf[3], buf[4]);
    d928:	ldrb.w	r0, [sp, #12]
    d92c:	ldrb.w	r1, [sp, #11]
    d930:	ldr	r4, [pc, #388]	; (dab8 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x278>)
    d932:	ldrb.w	r3, [sp, #10]
    d936:	ldrb.w	r2, [sp, #9]
    d93a:	str	r0, [sp, #4]
    d93c:	str	r1, [sp, #0]
    d93e:	ldr	r0, [pc, #380]	; (dabc <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x27c>)
    d940:	ldr	r1, [pc, #380]	; (dac0 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x280>)
    d942:	bl	137e0 <Print::printf(char const*, ...)>
    d946:	ldrb.w	r0, [sp, #9]
    d94a:	ldrb.w	r7, [sp, #10]
static const struct chipinfo * chip_lookup(const uint8_t *id)
{
	const unsigned int numchips = sizeof(known_chips) / sizeof(struct chipinfo);
	for (unsigned int i=0; i < numchips; i++) {
		const uint8_t *chip = known_chips[i].id;
		if (id[0] == chip[0] && id[1] == chip[1] && id[2] == chip[2]) {
    d94e:	ldrb.w	ip, [sp, #11]
    d952:	mov	lr, r4
    d954:	mov	r3, r4


static const struct chipinfo * chip_lookup(const uint8_t *id)
{
	const unsigned int numchips = sizeof(known_chips) / sizeof(struct chipinfo);
	for (unsigned int i=0; i < numchips; i++) {
    d956:	movs	r2, #0
    d958:	b.n	d964 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x124>
    d95a:	adds	r2, #1
    d95c:	cmp	r2, #13
    d95e:	add.w	r3, r3, #24
    d962:	beq.n	da16 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x1d6>
		const uint8_t *chip = known_chips[i].id;
		if (id[0] == chip[0] && id[1] == chip[1] && id[2] == chip[2]) {
    d964:	ldrb	r1, [r3, #0]
    d966:	cmp	r1, r0
    d968:	bne.n	d95a <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x11a>
    d96a:	ldrb	r1, [r3, #1]
    d96c:	cmp	r1, r7
    d96e:	bne.n	d95a <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x11a>
    d970:	ldrb	r1, [r3, #2]
    d972:	cmp	r1, ip
    d974:	bne.n	d95a <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x11a>
			return known_chips + i;
    d976:	add.w	r2, r2, r2, lsl #1
	digitalWrite(pin, HIGH);
	port->endTransaction();

	Serial.printf("Flash ID: %02X %02X %02X %02X\r\n", buf[1], buf[2], buf[3], buf[4]);
	const struct chipinfo *info = chip_lookup(buf + 1);
	if(!info) info = chip_lookup(buf + 2);
    d97a:	adds.w	r6, lr, r2, lsl #3
    d97e:	beq.n	da16 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x1d6>
	if (!info) return false;
	//Serial.printf("Flash size is %.2f Mbyte\n", (float)info->chipsize / 1048576.0f);

	memset(&lfs, 0, sizeof(lfs));
    d980:	add.w	r4, r5, #8
    d984:	movs	r2, #120	; 0x78
    d986:	movs	r1, #0
	memset(&config, 0, sizeof(config));
    d988:	add.w	r7, r5, #128	; 0x80
	const struct chipinfo *info = chip_lookup(buf + 1);
	if(!info) info = chip_lookup(buf + 2);
	if (!info) return false;
	//Serial.printf("Flash size is %.2f Mbyte\n", (float)info->chipsize / 1048576.0f);

	memset(&lfs, 0, sizeof(lfs));
    d98c:	mov	r0, r4
    d98e:	bl	14e3c <memset>
	memset(&config, 0, sizeof(config));
    d992:	movs	r2, #72	; 0x48
    d994:	movs	r1, #0
    d996:	mov	r0, r7
    d998:	bl	14e3c <memset>
	config.prog = &static_prog;
	config.erase = &static_erase;
	config.sync = &static_sync;
	config.read_size = info->progsize;
	config.prog_size = info->progsize;
	config.block_size = info->erasesize;
    d99c:	ldr	r1, [r6, #8]
	config.context = (void *)this;
	config.read = &static_read;
	config.prog = &static_prog;
	config.erase = &static_erase;
	config.sync = &static_sync;
	config.read_size = info->progsize;
    d99e:	ldrh	r3, [r6, #4]
	config.prog_size = info->progsize;
	config.block_size = info->erasesize;
	config.block_count = info->chipsize / info->erasesize;
    d9a0:	ldr	r2, [r6, #12]
	//Serial.printf("Flash size is %.2f Mbyte\n", (float)info->chipsize / 1048576.0f);

	memset(&lfs, 0, sizeof(lfs));
	memset(&config, 0, sizeof(config));
	config.context = (void *)this;
	config.read = &static_read;
    d9a2:	ldr.w	ip, [pc, #312]	; dadc <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x29c>
	config.prog = &static_prog;
	config.erase = &static_erase;
	config.sync = &static_sync;
	config.read_size = info->progsize;
    d9a6:	str.w	r3, [r5, #148]	; 0x94
	config.prog_size = info->progsize;
	config.block_size = info->erasesize;
	config.block_count = info->chipsize / info->erasesize;
    d9aa:	udiv	r2, r2, r1
	config.read = &static_read;
	config.prog = &static_prog;
	config.erase = &static_erase;
	config.sync = &static_sync;
	config.read_size = info->progsize;
	config.prog_size = info->progsize;
    d9ae:	str.w	r3, [r5, #152]	; 0x98
	config.block_size = info->erasesize;
	config.block_count = info->chipsize / info->erasesize;
    d9b2:	str.w	r2, [r5, #160]	; 0xa0
	config.prog = &static_prog;
	config.erase = &static_erase;
	config.sync = &static_sync;
	config.read_size = info->progsize;
	config.prog_size = info->progsize;
	config.block_size = info->erasesize;
    d9b6:	str.w	r1, [r5, #156]	; 0x9c
	config.block_count = info->chipsize / info->erasesize;
	config.block_cycles = 400;
	config.cache_size = info->progsize;
    d9ba:	str.w	r3, [r5, #168]	; 0xa8
	config.lookahead_size = info->progsize;
    d9be:	str.w	r3, [r5, #172]	; 0xac

	memset(&lfs, 0, sizeof(lfs));
	memset(&config, 0, sizeof(config));
	config.context = (void *)this;
	config.read = &static_read;
	config.prog = &static_prog;
    d9c2:	ldr.w	lr, [pc, #284]	; dae0 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x2a0>
	config.erase = &static_erase;
    d9c6:	ldr	r0, [pc, #252]	; (dac4 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x284>)
	config.sync = &static_sync;
    d9c8:	ldr	r1, [pc, #252]	; (dac8 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x288>)
	memset(&lfs, 0, sizeof(lfs));
	memset(&config, 0, sizeof(config));
	config.context = (void *)this;
	config.read = &static_read;
	config.prog = &static_prog;
	config.erase = &static_erase;
    d9ca:	str.w	r0, [r5, #140]	; 0x8c
	config.sync = &static_sync;
	config.read_size = info->progsize;
	config.prog_size = info->progsize;
	config.block_size = info->erasesize;
	config.block_count = info->chipsize / info->erasesize;
	config.block_cycles = 400;
    d9ce:	mov.w	r2, #400	; 0x190
	config.cache_size = info->progsize;
	config.lookahead_size = info->progsize;
	config.name_max = LFS_NAME_MAX;
    d9d2:	movs	r3, #39	; 0x27
	memset(&config, 0, sizeof(config));
	config.context = (void *)this;
	config.read = &static_read;
	config.prog = &static_prog;
	config.erase = &static_erase;
	config.sync = &static_sync;
    d9d4:	str.w	r1, [r5, #144]	; 0x90
	config.read_size = info->progsize;
	config.prog_size = info->progsize;
	config.block_size = info->erasesize;
	config.block_count = info->chipsize / info->erasesize;
	config.block_cycles = 400;
    d9d8:	str.w	r2, [r5, #164]	; 0xa4
	if (!info) return false;
	//Serial.printf("Flash size is %.2f Mbyte\n", (float)info->chipsize / 1048576.0f);

	memset(&lfs, 0, sizeof(lfs));
	memset(&config, 0, sizeof(config));
	config.context = (void *)this;
    d9dc:	str.w	r5, [r5, #128]	; 0x80
	config.read = &static_read;
    d9e0:	str.w	ip, [r5, #132]	; 0x84
	config.prog = &static_prog;
    d9e4:	str.w	lr, [r5, #136]	; 0x88
	config.block_size = info->erasesize;
	config.block_count = info->chipsize / info->erasesize;
	config.block_cycles = 400;
	config.cache_size = info->progsize;
	config.lookahead_size = info->progsize;
	config.name_max = LFS_NAME_MAX;
    d9e8:	str.w	r3, [r5, #188]	; 0xbc
	addrbits = info->addrbits;
    d9ec:	ldrb	r3, [r6, #3]
    d9ee:	strb.w	r3, [r5, #205]	; 0xcd
	progtime = info->progtime;
    d9f2:	ldr	r3, [r6, #16]
	erasetime = info->erasetime;
    d9f4:	ldr	r2, [r6, #20]
	config.block_cycles = 400;
	config.cache_size = info->progsize;
	config.lookahead_size = info->progsize;
	config.name_max = LFS_NAME_MAX;
	addrbits = info->addrbits;
	progtime = info->progtime;
    d9f6:	str.w	r3, [r5, #208]	; 0xd0
	erasetime = info->erasetime;
	configured = true;
    d9fa:	movs	r3, #1
	config.cache_size = info->progsize;
	config.lookahead_size = info->progsize;
	config.name_max = LFS_NAME_MAX;
	addrbits = info->addrbits;
	progtime = info->progtime;
	erasetime = info->erasetime;
    d9fc:	str.w	r2, [r5, #212]	; 0xd4
	configured = true;

	//Serial.println("attempting to mount existing media");
	if (lfs_mount(&lfs, &config) < 0) {
    da00:	mov	r1, r7
    da02:	mov	r0, r4
	config.lookahead_size = info->progsize;
	config.name_max = LFS_NAME_MAX;
	addrbits = info->addrbits;
	progtime = info->progtime;
	erasetime = info->erasetime;
	configured = true;
    da04:	strb	r3, [r5, #4]

	//Serial.println("attempting to mount existing media");
	if (lfs_mount(&lfs, &config) < 0) {
    da06:	bl	f960 <lfs_mount>
    da0a:	cmp	r0, #0
    da0c:	blt.n	da84 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x244>
			//Serial.println("mount after format failed :(");
			port = nullptr;
			return false;
		}
	}
	mounted = true;
    da0e:	movs	r0, #1
    da10:	strb	r0, [r5, #5]
	//Serial.println("success");
	return true;
}
    da12:	add	sp, #20
    da14:	pop	{r4, r5, r6, r7, pc}
static const struct chipinfo * chip_lookup(const uint8_t *id)
{
	const unsigned int numchips = sizeof(known_chips) / sizeof(struct chipinfo);
	for (unsigned int i=0; i < numchips; i++) {
		const uint8_t *chip = known_chips[i].id;
		if (id[0] == chip[0] && id[1] == chip[1] && id[2] == chip[2]) {
    da16:	ldrb.w	r1, [sp, #12]
    da1a:	movs	r3, #0
    da1c:	b.n	da28 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x1e8>


static const struct chipinfo * chip_lookup(const uint8_t *id)
{
	const unsigned int numchips = sizeof(known_chips) / sizeof(struct chipinfo);
	for (unsigned int i=0; i < numchips; i++) {
    da1e:	adds	r3, #1
    da20:	cmp	r3, #13
    da22:	add.w	r4, r4, #24
    da26:	beq.n	da7e <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x23e>
		const uint8_t *chip = known_chips[i].id;
		if (id[0] == chip[0] && id[1] == chip[1] && id[2] == chip[2]) {
    da28:	ldrb	r2, [r4, #0]
    da2a:	cmp	r2, r7
    da2c:	bne.n	da1e <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x1de>
    da2e:	ldrb	r2, [r4, #1]
    da30:	cmp	r2, ip
    da32:	bne.n	da1e <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x1de>
    da34:	ldrb	r2, [r4, #2]
    da36:	cmp	r2, r1
    da38:	bne.n	da1e <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x1de>
			return known_chips + i;
    da3a:	add.w	r3, r3, r3, lsl #1
	port->endTransaction();

	Serial.printf("Flash ID: %02X %02X %02X %02X\r\n", buf[1], buf[2], buf[3], buf[4]);
	const struct chipinfo *info = chip_lookup(buf + 1);
	if(!info) info = chip_lookup(buf + 2);
	if (!info) return false;
    da3e:	adds.w	r6, lr, r3, lsl #3
    da42:	it	eq
    da44:	moveq	r0, r6
    da46:	beq.n	da80 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x240>
    da48:	b.n	d980 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x140>
			if (interruptMasksUsed & 0x01) {
    da4a:	lsls	r4, r3, #31
    da4c:	bpl.n	da56 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x216>
				NVIC_ISER0 = interruptSave[0];
    da4e:	ldr	r3, [pc, #124]	; (dacc <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x28c>)
    da50:	ldr	r1, [r2, #28]
    da52:	str	r1, [r3, #0]
    da54:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    da56:	lsls	r0, r3, #30
    da58:	bpl.n	da62 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x222>
				NVIC_ISER1 = interruptSave[1];
    da5a:	ldr	r3, [pc, #116]	; (dad0 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x290>)
    da5c:	ldr	r1, [r2, #32]
    da5e:	str	r1, [r3, #0]
    da60:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    da62:	lsls	r1, r3, #29
    da64:	bmi.n	da74 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x234>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    da66:	lsls	r3, r3, #28
    da68:	bpl.w	d928 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0xe8>
				NVIC_ISER3 = interruptSave[3];
    da6c:	ldr	r3, [pc, #100]	; (dad4 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x294>)
    da6e:	ldr	r2, [r2, #40]	; 0x28
    da70:	str	r2, [r3, #0]
    da72:	b.n	d928 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0xe8>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    da74:	ldr	r3, [pc, #96]	; (dad8 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x298>)
    da76:	ldr	r1, [r2, #36]	; 0x24
    da78:	str	r1, [r3, #0]
    da7a:	ldrb	r3, [r2, #11]
    da7c:	b.n	da66 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x226>
    da7e:	movs	r0, #0
		}
	}
	mounted = true;
	//Serial.println("success");
	return true;
}
    da80:	add	sp, #20
    da82:	pop	{r4, r5, r6, r7, pc}
	configured = true;

	//Serial.println("attempting to mount existing media");
	if (lfs_mount(&lfs, &config) < 0) {
		//Serial.println("couldn't mount media, attemping to format");
		if (lfs_format(&lfs, &config) < 0) {
    da84:	mov	r1, r7
    da86:	mov	r0, r4
    da88:	bl	11a3c <lfs_format>
    da8c:	cmp	r0, #0
    da8e:	blt.n	da9c <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x25c>
			//Serial.println("format failed :(");
			port = nullptr;
			return false;
		}
		//Serial.println("attempting to mount freshly formatted media");
		if (lfs_mount(&lfs, &config) < 0) {
    da90:	mov	r1, r7
    da92:	mov	r0, r4
    da94:	bl	f960 <lfs_mount>
    da98:	cmp	r0, #0
    da9a:	bge.n	da0e <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x1ce>
	//Serial.println("attempting to mount existing media");
	if (lfs_mount(&lfs, &config) < 0) {
		//Serial.println("couldn't mount media, attemping to format");
		if (lfs_format(&lfs, &config) < 0) {
			//Serial.println("format failed :(");
			port = nullptr;
    da9c:	movs	r0, #0
    da9e:	str.w	r0, [r5, #200]	; 0xc8
			return false;
    daa2:	b.n	da80 <LittleFS_SPIFlash::begin(unsigned char, SPIClass&)+0x240>
    daa4:	.word	0xe000e184
    daa8:	.word	0xe000e188
    daac:	.word	0xe000e18c
    dab0:	.word	0x003f4001
    dab4:	.word	0x803f0000
    dab8:	.word	0x0001968c
    dabc:	.word	0x1fff0b20
    dac0:	.word	0x0001966c
    dac4:	.word	0x0000e0f1
    dac8:	.word	0x0000d83d
    dacc:	.word	0xe000e100
    dad0:	.word	0xe000e104
    dad4:	.word	0xe000e10c
    dad8:	.word	0xe000e108
    dadc:	.word	0x0000dc5d
    dae0:	.word	0x0000df51

0000dae4 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)>:
//	while (len--) Serial.printf("%02X ", *p++);
//	Serial.println();
}

int LittleFS_SPIFlash::read(lfs_block_t block, lfs_off_t offset, void *buf, lfs_size_t size)
{
    dae4:	push	{r4, r5, r6, lr}
	if (!port) return LFS_ERR_IO;
    dae6:	ldr.w	r4, [r0, #200]	; 0xc8
//	while (len--) Serial.printf("%02X ", *p++);
//	Serial.println();
}

int LittleFS_SPIFlash::read(lfs_block_t block, lfs_off_t offset, void *buf, lfs_size_t size)
{
    daea:	sub	sp, #8
	if (!port) return LFS_ERR_IO;
    daec:	cmp	r4, #0
    daee:	beq.w	dc2e <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x14a>
	const uint32_t addr = block * config.block_size + offset;
	const uint8_t cmd = (addrbits == 24) ? 0x03 : 0x13; // standard read command
    daf2:	ldrb.w	r4, [r0, #205]	; 0xcd
}

int LittleFS_SPIFlash::read(lfs_block_t block, lfs_off_t offset, void *buf, lfs_size_t size)
{
	if (!port) return LFS_ERR_IO;
	const uint32_t addr = block * config.block_size + offset;
    daf6:	ldr.w	r5, [r0, #156]	; 0x9c
	const uint8_t cmd = (addrbits == 24) ? 0x03 : 0x13; // standard read command
    dafa:	cmp	r4, #24
}

int LittleFS_SPIFlash::read(lfs_block_t block, lfs_off_t offset, void *buf, lfs_size_t size)
{
	if (!port) return LFS_ERR_IO;
	const uint32_t addr = block * config.block_size + offset;
    dafc:	mla	r1, r5, r1, r2
	const uint8_t cmd = (addrbits == 24) ? 0x03 : 0x13; // standard read command
    db00:	beq.w	dc16 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x132>
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    db04:	movs	r6, #19
	if (addrbits == 24) {
		buf[1] = addr >> 16;
		buf[2] = addr >> 8;
		buf[3] = addr;
	} else {
		buf[1] = addr >> 24;
    db06:	lsrs	r5, r1, #24
		buf[2] = addr >> 16;
    db08:	lsrs	r4, r1, #16
		buf[3] = addr >> 8;
    db0a:	lsrs	r2, r1, #8
		buf[4] = addr;
    db0c:	strb.w	r1, [sp, #4]
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    db10:	strb.w	r6, [sp]
	if (addrbits == 24) {
		buf[1] = addr >> 16;
		buf[2] = addr >> 8;
		buf[3] = addr;
	} else {
		buf[1] = addr >> 24;
    db14:	strb.w	r5, [sp, #1]
		buf[2] = addr >> 16;
    db18:	strb.w	r4, [sp, #2]
		buf[3] = addr >> 8;
    db1c:	strb.w	r2, [sp, #3]
    db20:	mov	r4, r0
	const uint8_t cmd = (addrbits == 24) ? 0x03 : 0x13; // standard read command
	uint8_t cmdaddr[5];
	//Serial.printf("  addrbits=%d\n", addrbits);
	make_command_and_address(cmdaddr, cmd, addr, addrbits);
//	printtbuf(cmdaddr, 1 + (addrbits >> 3));
	memset(buf, 0, size);
    db22:	ldr	r2, [sp, #24]
    db24:	mov	r0, r3
    db26:	movs	r1, #0
    db28:	mov	r5, r3
    db2a:	bl	14e3c <memset>
	port->beginTransaction(SPICONFIG);
    db2e:	ldr.w	r2, [r4, #200]	; 0xc8

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    db32:	ldrb	r3, [r2, #11]
    db34:	cmp	r3, #0
    db36:	bne.n	dbc8 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0xe4>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    db38:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    db3a:	ldr	r2, [r3, #12]
    db3c:	cmp.w	r2, #3087007744	; 0xb8000000
    db40:	beq.n	db56 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x72>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    db42:	ldr	r1, [pc, #240]	; (dc34 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x150>)
    db44:	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    db46:	ldr	r2, [pc, #240]	; (dc38 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x154>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    db48:	mov.w	r0, #3087007744	; 0xb8000000
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    db4c:	mov.w	r1, #4160749568	; 0xf8000000
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    db50:	str	r0, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    db52:	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    db54:	str	r2, [r3, #0]
	digitalWrite(pin, LOW);
    db56:	movs	r1, #0
    db58:	ldrb.w	r0, [r4, #204]	; 0xcc
    db5c:	bl	125a4 <digitalWrite>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    db60:	ldrb.w	r3, [r4, #205]	; 0xcd
    db64:	ldr.w	r0, [r4, #200]	; 0xc8
    db68:	asrs	r3, r3, #3
    db6a:	adds	r3, #1
    db6c:	mov	r2, sp
    db6e:	mov	r1, sp
    db70:	bl	7d1c <SPIClass::transfer(void const*, void*, unsigned int)>
    db74:	ldr	r3, [sp, #24]
    db76:	ldr.w	r0, [r4, #200]	; 0xc8
    db7a:	mov	r2, r5
    db7c:	mov	r1, r5
    db7e:	bl	7d1c <SPIClass::transfer(void const*, void*, unsigned int)>
	port->transfer(cmdaddr, 1 + (addrbits >> 3));
	port->transfer(buf, size);
	digitalWrite(pin, HIGH);
    db82:	movs	r1, #1
    db84:	ldrb.w	r0, [r4, #204]	; 0xcc
    db88:	bl	125a4 <digitalWrite>
	port->endTransaction();
    db8c:	ldr.w	r2, [r4, #200]	; 0xc8
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    db90:	ldrb	r3, [r2, #11]
    db92:	cbz	r3, dbc2 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0xde>
			if (interruptMasksUsed & 0x01) {
    db94:	lsls	r4, r3, #31
    db96:	bpl.n	dba0 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0xbc>
				NVIC_ISER0 = interruptSave[0];
    db98:	ldr	r3, [pc, #160]	; (dc3c <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x158>)
    db9a:	ldr	r1, [r2, #28]
    db9c:	str	r1, [r3, #0]
    db9e:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    dba0:	lsls	r0, r3, #30
    dba2:	bpl.n	dbac <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0xc8>
				NVIC_ISER1 = interruptSave[1];
    dba4:	ldr	r3, [pc, #152]	; (dc40 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x15c>)
    dba6:	ldr	r1, [r2, #32]
    dba8:	str	r1, [r3, #0]
    dbaa:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    dbac:	lsls	r1, r3, #29
    dbae:	bpl.n	dbb8 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0xd4>
				NVIC_ISER2 = interruptSave[2];
    dbb0:	ldr	r3, [pc, #144]	; (dc44 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x160>)
    dbb2:	ldr	r1, [r2, #36]	; 0x24
    dbb4:	str	r1, [r3, #0]
    dbb6:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    dbb8:	lsls	r3, r3, #28
    dbba:	bpl.n	dbc2 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0xde>
				NVIC_ISER3 = interruptSave[3];
    dbbc:	ldr	r3, [pc, #136]	; (dc48 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x164>)
    dbbe:	ldr	r2, [r2, #40]	; 0x28
    dbc0:	str	r2, [r3, #0]
//	printtbuf(buf, 20);
	return 0;
    dbc2:	movs	r0, #0
}
    dbc4:	add	sp, #8
    dbc6:	pop	{r4, r5, r6, pc}
	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
			__disable_irq();
    dbc8:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    dbca:	ldrb	r3, [r2, #11]
    dbcc:	lsls	r6, r3, #31
    dbce:	bpl.n	dbde <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0xfa>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    dbd0:	ldr	r1, [pc, #120]	; (dc4c <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x168>)
    dbd2:	ldr	r3, [r2, #12]
    dbd4:	ldr	r0, [r1, #0]
    dbd6:	ands	r3, r0
    dbd8:	str	r3, [r2, #28]
				NVIC_ICER0 = interruptSave[0];
    dbda:	str	r3, [r1, #0]
    dbdc:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    dbde:	lsls	r0, r3, #30
    dbe0:	bpl.n	dbf0 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x10c>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    dbe2:	ldr	r1, [pc, #108]	; (dc50 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x16c>)
    dbe4:	ldr	r3, [r2, #16]
    dbe6:	ldr	r0, [r1, #0]
    dbe8:	ands	r3, r0
    dbea:	str	r3, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
    dbec:	str	r3, [r1, #0]
    dbee:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    dbf0:	lsls	r1, r3, #29
    dbf2:	bpl.n	dc02 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x11e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    dbf4:	ldr	r1, [pc, #92]	; (dc54 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x170>)
    dbf6:	ldr	r3, [r2, #20]
    dbf8:	ldr	r0, [r1, #0]
    dbfa:	ands	r3, r0
    dbfc:	str	r3, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    dbfe:	str	r3, [r1, #0]
    dc00:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    dc02:	lsls	r6, r3, #28
    dc04:	bpl.n	dc12 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x12e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    dc06:	ldr	r1, [pc, #80]	; (dc58 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x174>)
    dc08:	ldr	r3, [r2, #24]
    dc0a:	ldr	r0, [r1, #0]
    dc0c:	ands	r3, r0
    dc0e:	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    dc10:	str	r3, [r1, #0]
			}
			#endif
			__enable_irq();
    dc12:	cpsie	i
    dc14:	b.n	db38 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x54>
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    dc16:	movs	r5, #3
	if (addrbits == 24) {
		buf[1] = addr >> 16;
    dc18:	lsrs	r4, r1, #16
		buf[2] = addr >> 8;
    dc1a:	lsrs	r2, r1, #8
		buf[3] = addr;
    dc1c:	strb.w	r1, [sp, #3]
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    dc20:	strb.w	r5, [sp]
	if (addrbits == 24) {
		buf[1] = addr >> 16;
    dc24:	strb.w	r4, [sp, #1]
		buf[2] = addr >> 8;
    dc28:	strb.w	r2, [sp, #2]
    dc2c:	b.n	db20 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0x3c>
//	Serial.println();
}

int LittleFS_SPIFlash::read(lfs_block_t block, lfs_off_t offset, void *buf, lfs_size_t size)
{
	if (!port) return LFS_ERR_IO;
    dc2e:	mvn.w	r0, #4
    dc32:	b.n	dbc4 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)+0xe0>
    dc34:	.word	0x003f4001
    dc38:	.word	0x803f0000
    dc3c:	.word	0xe000e100
    dc40:	.word	0xe000e104
    dc44:	.word	0xe000e108
    dc48:	.word	0xe000e10c
    dc4c:	.word	0xe000e180
    dc50:	.word	0xe000e184
    dc54:	.word	0xe000e188
    dc58:	.word	0xe000e18c

0000dc5c <LittleFS_SPIFlash::static_read(lfs_config const*, unsigned long, unsigned long, void*, unsigned long)>:
	int erase(lfs_block_t block);
	int wait(uint32_t microseconds);
	static int static_read(const struct lfs_config *c, lfs_block_t block,
	  lfs_off_t offset, void *buffer, lfs_size_t size) {
		//Serial.printf("  flash rd: block=%d, offset=%d, size=%d\n", block, offset, size);
		return ((LittleFS_SPIFlash *)(c->context))->read(block, offset, buffer, size);
    dc5c:	ldr	r0, [r0, #0]
    dc5e:	b.w	dae4 <LittleFS_SPIFlash::read(unsigned long, unsigned long, void*, unsigned long)>
    dc62:	nop

0000dc64 <LittleFS_SPIFlash::wait(unsigned long)>:
	port->endTransaction();
	return wait(erasetime);
}

int LittleFS_SPIFlash::wait(uint32_t microseconds)
{
    dc64:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc68:	mov	r4, r0
    dc6a:	mov	r6, r1
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
    dc6c:	bl	125bc <micros>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    dc70:	ldr.w	sl, [pc, #292]	; dd98 <LittleFS_SPIFlash::wait(unsigned long)+0x134>
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    dc74:	ldr.w	r9, [pc, #292]	; dd9c <LittleFS_SPIFlash::wait(unsigned long)+0x138>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
				NVIC_ICER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    dc78:	ldr.w	r8, [pc, #292]	; dda0 <LittleFS_SPIFlash::wait(unsigned long)+0x13c>
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
			__disable_irq();
			if (interruptMasksUsed & 0x01) {
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    dc7c:	ldr	r7, [pc, #248]	; (dd78 <LittleFS_SPIFlash::wait(unsigned long)+0x114>)
    dc7e:	mov	r5, r0
	elapsedMicros usec = 0;
	while (1) {
		port->beginTransaction(SPICONFIG);
    dc80:	ldr.w	r3, [r4, #200]	; 0xc8

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    dc84:	ldrb	r2, [r3, #11]
    dc86:	cbz	r2, dcd8 <LittleFS_SPIFlash::wait(unsigned long)+0x74>
			__disable_irq();
    dc88:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    dc8a:	ldrb	r2, [r3, #11]
    dc8c:	lsls	r0, r2, #31
    dc8e:	bpl.n	dc9c <LittleFS_SPIFlash::wait(unsigned long)+0x38>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    dc90:	ldr	r1, [r7, #0]
    dc92:	ldr	r2, [r3, #12]
    dc94:	ands	r2, r1
    dc96:	str	r2, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    dc98:	str	r2, [r7, #0]
    dc9a:	ldrb	r2, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    dc9c:	lsls	r1, r2, #30
    dc9e:	bpl.n	dcb0 <LittleFS_SPIFlash::wait(unsigned long)+0x4c>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    dca0:	ldr.w	r1, [r8]
    dca4:	ldr	r2, [r3, #16]
    dca6:	ands	r2, r1
    dca8:	str	r2, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    dcaa:	str.w	r2, [r8]
    dcae:	ldrb	r2, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    dcb0:	lsls	r0, r2, #29
    dcb2:	bpl.n	dcc4 <LittleFS_SPIFlash::wait(unsigned long)+0x60>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    dcb4:	ldr.w	r1, [r9]
    dcb8:	ldr	r2, [r3, #20]
    dcba:	ands	r2, r1
    dcbc:	str	r2, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    dcbe:	str.w	r2, [r9]
    dcc2:	ldrb	r2, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    dcc4:	lsls	r1, r2, #28
    dcc6:	bpl.n	dcd6 <LittleFS_SPIFlash::wait(unsigned long)+0x72>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    dcc8:	ldr.w	r1, [sl]
    dccc:	ldr	r2, [r3, #24]
    dcce:	ands	r2, r1
    dcd0:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    dcd2:	str.w	r2, [sl]
			}
			#endif
			__enable_irq();
    dcd6:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    dcd8:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    dcda:	ldr	r2, [r3, #12]
    dcdc:	cmp.w	r2, #3087007744	; 0xb8000000
    dce0:	beq.n	dcf6 <LittleFS_SPIFlash::wait(unsigned long)+0x92>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    dce2:	ldr	r1, [pc, #152]	; (dd7c <LittleFS_SPIFlash::wait(unsigned long)+0x118>)
    dce4:	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
    dce6:	mov.w	r1, #3087007744	; 0xb8000000
    dcea:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    dcec:	ldr	r2, [pc, #144]	; (dd80 <LittleFS_SPIFlash::wait(unsigned long)+0x11c>)
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    dcee:	mov.w	r1, #4160749568	; 0xf8000000
    dcf2:	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    dcf4:	str	r2, [r3, #0]
		digitalWrite(pin, LOW);
    dcf6:	movs	r1, #0
    dcf8:	ldrb.w	r0, [r4, #204]	; 0xcc
    dcfc:	bl	125a4 <digitalWrite>
    dd00:	ldr.w	r2, [r4, #200]	; 0xc8
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    dd04:	ldr	r3, [pc, #124]	; (dd84 <LittleFS_SPIFlash::wait(unsigned long)+0x120>)
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    dd06:	ldr	r2, [r2, #0]
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    dd08:	mov.w	r1, #2147483648	; 0x80000000
    dd0c:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    dd0e:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    dd10:	ldr	r3, [r2, #44]	; 0x2c
    dd12:	cmp	r3, #0
    dd14:	bge.n	dd10 <LittleFS_SPIFlash::wait(unsigned long)+0xac>
		uint16_t status = port->transfer16(0x0500); // 0x05 = get status
		digitalWrite(pin, HIGH);
    dd16:	movs	r1, #1
    dd18:	ldrb.w	r0, [r4, #204]	; 0xcc
		return port().POPR;
    dd1c:	ldr.w	fp, [r2, #56]	; 0x38
    dd20:	bl	125a4 <digitalWrite>
		port->endTransaction();
    dd24:	ldr.w	r1, [r4, #200]	; 0xc8
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    dd28:	ldrb	r3, [r1, #11]
    dd2a:	cbz	r3, dd5a <LittleFS_SPIFlash::wait(unsigned long)+0xf6>
			if (interruptMasksUsed & 0x01) {
    dd2c:	lsls	r2, r3, #31
    dd2e:	bpl.n	dd38 <LittleFS_SPIFlash::wait(unsigned long)+0xd4>
				NVIC_ISER0 = interruptSave[0];
    dd30:	ldr	r3, [pc, #84]	; (dd88 <LittleFS_SPIFlash::wait(unsigned long)+0x124>)
    dd32:	ldr	r0, [r1, #28]
    dd34:	str	r0, [r3, #0]
    dd36:	ldrb	r3, [r1, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    dd38:	lsls	r0, r3, #30
    dd3a:	bpl.n	dd44 <LittleFS_SPIFlash::wait(unsigned long)+0xe0>
				NVIC_ISER1 = interruptSave[1];
    dd3c:	ldr	r3, [pc, #76]	; (dd8c <LittleFS_SPIFlash::wait(unsigned long)+0x128>)
    dd3e:	ldr	r0, [r1, #32]
    dd40:	str	r0, [r3, #0]
    dd42:	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    dd44:	lsls	r2, r3, #29
    dd46:	bpl.n	dd50 <LittleFS_SPIFlash::wait(unsigned long)+0xec>
				NVIC_ISER2 = interruptSave[2];
    dd48:	ldr	r2, [pc, #68]	; (dd90 <LittleFS_SPIFlash::wait(unsigned long)+0x12c>)
    dd4a:	ldr	r3, [r1, #36]	; 0x24
    dd4c:	str	r3, [r2, #0]
    dd4e:	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    dd50:	lsls	r3, r3, #28
    dd52:	bpl.n	dd5a <LittleFS_SPIFlash::wait(unsigned long)+0xf6>
				NVIC_ISER3 = interruptSave[3];
    dd54:	ldr	r2, [pc, #60]	; (dd94 <LittleFS_SPIFlash::wait(unsigned long)+0x130>)
    dd56:	ldr	r3, [r1, #40]	; 0x28
    dd58:	str	r3, [r2, #0]
		if (!(status & 1)) break;
    dd5a:	ands.w	r0, fp, #1
    dd5e:	beq.n	dd74 <LittleFS_SPIFlash::wait(unsigned long)+0x110>
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    dd60:	bl	125bc <micros>
		if (usec > microseconds) return LFS_ERR_IO; // timeout
    dd64:	subs	r0, r0, r5
    dd66:	cmp	r6, r0
    dd68:	bcc.n	dd70 <LittleFS_SPIFlash::wait(unsigned long)+0x10c>
		yield();
    dd6a:	bl	13598 <yield>
}

int LittleFS_SPIFlash::wait(uint32_t microseconds)
{
	elapsedMicros usec = 0;
	while (1) {
    dd6e:	b.n	dc80 <LittleFS_SPIFlash::wait(unsigned long)+0x1c>
		digitalWrite(pin, LOW);
		uint16_t status = port->transfer16(0x0500); // 0x05 = get status
		digitalWrite(pin, HIGH);
		port->endTransaction();
		if (!(status & 1)) break;
		if (usec > microseconds) return LFS_ERR_IO; // timeout
    dd70:	mvn.w	r0, #4
		yield();
	}
	//Serial.printf("  waited %u us\n", (unsigned int)usec);
	return 0; // success
}
    dd74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd78:	.word	0xe000e180
    dd7c:	.word	0x003f4001
    dd80:	.word	0x803f0000
    dd84:	.word	0x10000500
    dd88:	.word	0xe000e100
    dd8c:	.word	0xe000e104
    dd90:	.word	0xe000e108
    dd94:	.word	0xe000e10c
    dd98:	.word	0xe000e18c
    dd9c:	.word	0xe000e188
    dda0:	.word	0xe000e184

0000dda4 <LittleFS_SPIFlash::prog(unsigned long, unsigned long, void const*, unsigned long)>:
//	printtbuf(buf, 20);
	return 0;
}

int LittleFS_SPIFlash::prog(lfs_block_t block, lfs_off_t offset, const void *buf, lfs_size_t size)
{
    dda4:	push	{r4, r5, r6, r7, lr}
	if (!port) return LFS_ERR_IO;
    dda6:	ldr.w	r5, [r0, #200]	; 0xc8
//	printtbuf(buf, 20);
	return 0;
}

int LittleFS_SPIFlash::prog(lfs_block_t block, lfs_off_t offset, const void *buf, lfs_size_t size)
{
    ddaa:	sub	sp, #12
	if (!port) return LFS_ERR_IO;
    ddac:	cmp	r5, #0
    ddae:	beq.w	df20 <L_2023_delayNanoseconds+0xea>
	const uint32_t addr = block * config.block_size + offset;
	const uint8_t cmd = (addrbits == 24) ? 0x02 : 0x12; // page program
    ddb2:	ldrb.w	r4, [r0, #205]	; 0xcd
}

int LittleFS_SPIFlash::prog(lfs_block_t block, lfs_off_t offset, const void *buf, lfs_size_t size)
{
	if (!port) return LFS_ERR_IO;
	const uint32_t addr = block * config.block_size + offset;
    ddb6:	ldr.w	r7, [r0, #156]	; 0x9c
	const uint8_t cmd = (addrbits == 24) ? 0x02 : 0x12; // page program
    ddba:	cmp	r4, #24
}

int LittleFS_SPIFlash::prog(lfs_block_t block, lfs_off_t offset, const void *buf, lfs_size_t size)
{
	if (!port) return LFS_ERR_IO;
	const uint32_t addr = block * config.block_size + offset;
    ddbc:	mla	r2, r7, r1, r2
	const uint8_t cmd = (addrbits == 24) ? 0x02 : 0x12; // page program
    ddc0:	beq.w	defe <L_2023_delayNanoseconds+0xc8>
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    ddc4:	movs	r6, #18
	if (addrbits == 24) {
		buf[1] = addr >> 16;
		buf[2] = addr >> 8;
		buf[3] = addr;
	} else {
		buf[1] = addr >> 24;
    ddc6:	lsrs	r7, r2, #24
		buf[2] = addr >> 16;
    ddc8:	lsrs	r4, r2, #16
		buf[3] = addr >> 8;
    ddca:	lsrs	r1, r2, #8
		buf[4] = addr;
    ddcc:	strb.w	r2, [sp, #4]
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    ddd0:	strb.w	r6, [sp]
	if (addrbits == 24) {
		buf[1] = addr >> 16;
		buf[2] = addr >> 8;
		buf[3] = addr;
	} else {
		buf[1] = addr >> 24;
    ddd4:	strb.w	r7, [sp, #1]
		buf[2] = addr >> 16;
    ddd8:	strb.w	r4, [sp, #2]
		buf[3] = addr >> 8;
    dddc:	strb.w	r1, [sp, #3]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    dde0:	ldrb	r2, [r5, #11]
    dde2:	cmp	r2, #0
    dde4:	bne.n	de88 <L_2023_delayNanoseconds+0x52>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    dde6:	ldr	r2, [r5, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    dde8:	ldr	r1, [r2, #12]
    ddea:	cmp.w	r1, #3087007744	; 0xb8000000
    ddee:	beq.n	de04 <LittleFS_SPIFlash::prog(unsigned long, unsigned long, void const*, unsigned long)+0x60>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    ddf0:	ldr	r4, [pc, #308]	; (df28 <L_2023_delayNanoseconds+0xf2>)
    ddf2:	str	r4, [r2, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    ddf4:	ldr	r1, [pc, #308]	; (df2c <L_2023_delayNanoseconds+0xf6>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    ddf6:	mov.w	r5, #3087007744	; 0xb8000000
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    ddfa:	mov.w	r4, #4160749568	; 0xf8000000
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    ddfe:	str	r5, [r2, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    de00:	str	r4, [r2, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    de02:	str	r1, [r2, #0]
    de04:	mov	r4, r0
	const uint8_t cmd = (addrbits == 24) ? 0x02 : 0x12; // page program
	uint8_t cmdaddr[5];
	make_command_and_address(cmdaddr, cmd, addr, addrbits);
//	printtbuf(cmdaddr, 1 + (addrbits >> 3));
	port->beginTransaction(SPICONFIG);
	digitalWrite(pin, LOW);
    de06:	movs	r1, #0
    de08:	ldrb.w	r0, [r0, #204]	; 0xcc
    de0c:	mov	r6, r3
    de0e:	bl	125a4 <digitalWrite>
    de12:	ldr.w	r3, [r4, #200]	; 0xc8
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    de16:	ldr	r5, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    de18:	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    de1c:	movs	r3, #6
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    de1e:	str	r2, [r5, #44]	; 0x2c
		port().PUSHR = data;
    de20:	str	r3, [r5, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    de22:	ldr	r2, [r5, #44]	; 0x2c
    de24:	cmp	r2, #0
    de26:	bge.n	de22 <LittleFS_SPIFlash::prog(unsigned long, unsigned long, void const*, unsigned long)+0x7e>
	port->transfer(0x06); // 0x06 = write enable
	digitalWrite(pin, HIGH);
    de28:	movs	r1, #1
    de2a:	ldrb.w	r0, [r4, #204]	; 0xcc
		return port().POPR;
    de2e:	ldr	r3, [r5, #56]	; 0x38
    de30:	bl	125a4 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayNanoseconds"		"\n"
		: "+r" (n) :
#endif
	);
    de34:	movs	r2, #7

0000de36 <L_2023_delayNanoseconds>:
    de36:	subs	r2, #1
    de38:	bne.n	de36 <L_2023_delayNanoseconds>
	delayNanoseconds(250);
	digitalWrite(pin, LOW);
    de3a:	movs	r1, #0
    de3c:	ldrb.w	r0, [r4, #204]	; 0xcc
    de40:	bl	125a4 <digitalWrite>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    de44:	ldrb.w	r3, [r4, #205]	; 0xcd
    de48:	ldr.w	r0, [r4, #200]	; 0xc8
    de4c:	asrs	r3, r3, #3
    de4e:	adds	r3, #1
    de50:	mov	r2, sp
    de52:	mov	r1, sp
    de54:	bl	7d1c <SPIClass::transfer(void const*, void*, unsigned int)>
	port->transfer(cmdaddr, 1 + (addrbits >> 3));
	port->transfer(buf, nullptr, size);
    de58:	ldr	r3, [sp, #32]
    de5a:	ldr.w	r0, [r4, #200]	; 0xc8
    de5e:	movs	r2, #0
    de60:	mov	r1, r6
    de62:	bl	7d1c <SPIClass::transfer(void const*, void*, unsigned int)>
	digitalWrite(pin, HIGH);
    de66:	ldrb.w	r0, [r4, #204]	; 0xcc
    de6a:	movs	r1, #1
    de6c:	bl	125a4 <digitalWrite>
	port->endTransaction();
    de70:	ldr.w	r2, [r4, #200]	; 0xc8
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    de74:	ldrb	r3, [r2, #11]
    de76:	cmp	r3, #0
    de78:	bne.n	ded6 <L_2023_delayNanoseconds+0xa0>
//	printtbuf(buf, 20);
	return wait(progtime);
    de7a:	ldr.w	r1, [r4, #208]	; 0xd0
    de7e:	mov	r0, r4
    de80:	bl	dc64 <LittleFS_SPIFlash::wait(unsigned long)>
}
    de84:	add	sp, #12
    de86:	pop	{r4, r5, r6, r7, pc}
	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
			__disable_irq();
    de88:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    de8a:	ldrb	r2, [r5, #11]
    de8c:	lsls	r4, r2, #31
    de8e:	bpl.n	de9e <L_2023_delayNanoseconds+0x68>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    de90:	ldr	r1, [pc, #156]	; (df30 <L_2023_delayNanoseconds+0xfa>)
    de92:	ldr	r2, [r5, #12]
    de94:	ldr	r4, [r1, #0]
    de96:	ands	r2, r4
    de98:	str	r2, [r5, #28]
				NVIC_ICER0 = interruptSave[0];
    de9a:	str	r2, [r1, #0]
    de9c:	ldrb	r2, [r5, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    de9e:	lsls	r1, r2, #30
    dea0:	bpl.n	deb0 <L_2023_delayNanoseconds+0x7a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    dea2:	ldr	r1, [pc, #144]	; (df34 <L_2023_delayNanoseconds+0xfe>)
    dea4:	ldr	r2, [r5, #16]
    dea6:	ldr	r4, [r1, #0]
    dea8:	ands	r2, r4
    deaa:	str	r2, [r5, #32]
				NVIC_ICER1 = interruptSave[1];
    deac:	str	r2, [r1, #0]
    deae:	ldrb	r2, [r5, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    deb0:	lsls	r7, r2, #29
    deb2:	bpl.n	dec2 <L_2023_delayNanoseconds+0x8c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    deb4:	ldr	r1, [pc, #128]	; (df38 <L_2023_delayNanoseconds+0x102>)
    deb6:	ldr	r2, [r5, #20]
    deb8:	ldr	r4, [r1, #0]
    deba:	ands	r2, r4
    debc:	str	r2, [r5, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    debe:	str	r2, [r1, #0]
    dec0:	ldrb	r2, [r5, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    dec2:	lsls	r6, r2, #28
    dec4:	bpl.n	ded2 <L_2023_delayNanoseconds+0x9c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    dec6:	ldr	r1, [pc, #116]	; (df3c <L_2023_delayNanoseconds+0x106>)
    dec8:	ldr	r2, [r5, #24]
    deca:	ldr	r4, [r1, #0]
    decc:	ands	r2, r4
    dece:	str	r2, [r5, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    ded0:	str	r2, [r1, #0]
			}
			#endif
			__enable_irq();
    ded2:	cpsie	i
    ded4:	b.n	dde6 <LittleFS_SPIFlash::prog(unsigned long, unsigned long, void const*, unsigned long)+0x42>
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) {
    ded6:	lsls	r5, r3, #31
    ded8:	bpl.n	dee2 <L_2023_delayNanoseconds+0xac>
				NVIC_ISER0 = interruptSave[0];
    deda:	ldr	r3, [pc, #100]	; (df40 <L_2023_delayNanoseconds+0x10a>)
    dedc:	ldr	r1, [r2, #28]
    dede:	str	r1, [r3, #0]
    dee0:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    dee2:	lsls	r0, r3, #30
    dee4:	bpl.n	deee <L_2023_delayNanoseconds+0xb8>
				NVIC_ISER1 = interruptSave[1];
    dee6:	ldr	r3, [pc, #92]	; (df44 <L_2023_delayNanoseconds+0x10e>)
    dee8:	ldr	r1, [r2, #32]
    deea:	str	r1, [r3, #0]
    deec:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    deee:	lsls	r1, r3, #29
    def0:	bmi.n	df16 <L_2023_delayNanoseconds+0xe0>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    def2:	lsls	r3, r3, #28
    def4:	bpl.n	de7a <L_2023_delayNanoseconds+0x44>
				NVIC_ISER3 = interruptSave[3];
    def6:	ldr	r3, [pc, #80]	; (df48 <L_2023_delayNanoseconds+0x112>)
    def8:	ldr	r2, [r2, #40]	; 0x28
    defa:	str	r2, [r3, #0]
    defc:	b.n	de7a <L_2023_delayNanoseconds+0x44>
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    defe:	movs	r6, #2
	if (addrbits == 24) {
		buf[1] = addr >> 16;
    df00:	lsrs	r4, r2, #16
		buf[2] = addr >> 8;
    df02:	lsrs	r1, r2, #8
		buf[3] = addr;
    df04:	strb.w	r2, [sp, #3]
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    df08:	strb.w	r6, [sp]
	if (addrbits == 24) {
		buf[1] = addr >> 16;
    df0c:	strb.w	r4, [sp, #1]
		buf[2] = addr >> 8;
    df10:	strb.w	r1, [sp, #2]
    df14:	b.n	dde0 <LittleFS_SPIFlash::prog(unsigned long, unsigned long, void const*, unsigned long)+0x3c>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    df16:	ldr	r3, [pc, #52]	; (df4c <L_2023_delayNanoseconds+0x116>)
    df18:	ldr	r1, [r2, #36]	; 0x24
    df1a:	str	r1, [r3, #0]
    df1c:	ldrb	r3, [r2, #11]
    df1e:	b.n	def2 <L_2023_delayNanoseconds+0xbc>
	return 0;
}

int LittleFS_SPIFlash::prog(lfs_block_t block, lfs_off_t offset, const void *buf, lfs_size_t size)
{
	if (!port) return LFS_ERR_IO;
    df20:	mvn.w	r0, #4
    df24:	b.n	de84 <L_2023_delayNanoseconds+0x4e>
    df26:	nop
    df28:	.word	0x003f4001
    df2c:	.word	0x803f0000
    df30:	.word	0xe000e180
    df34:	.word	0xe000e184
    df38:	.word	0xe000e188
    df3c:	.word	0xe000e18c
    df40:	.word	0xe000e100
    df44:	.word	0xe000e104
    df48:	.word	0xe000e10c
    df4c:	.word	0xe000e108

0000df50 <LittleFS_SPIFlash::static_prog(lfs_config const*, unsigned long, unsigned long, void const*, unsigned long)>:
	}
	static int static_prog(const struct lfs_config *c, lfs_block_t block,
	  lfs_off_t offset, const void *buffer, lfs_size_t size) {
		//Serial.printf("  flash wr: block=%d, offset=%d, size=%d\n", block, offset, size);
		return ((LittleFS_SPIFlash *)(c->context))->prog(block, offset, buffer, size);
    df50:	ldr	r0, [r0, #0]
    df52:	b.w	dda4 <LittleFS_SPIFlash::prog(unsigned long, unsigned long, void const*, unsigned long)>
    df56:	nop

0000df58 <LittleFS_SPIFlash::erase(unsigned long)>:
	return wait(progtime);
}

int LittleFS_SPIFlash::erase(lfs_block_t block)
{
	if (!port) return LFS_ERR_IO;
    df58:	ldr.w	r2, [r0, #200]	; 0xc8
    df5c:	cmp	r2, #0
    df5e:	beq.w	e0c0 <L_2582_delayNanoseconds+0xd8>
//	printtbuf(buf, 20);
	return wait(progtime);
}

int LittleFS_SPIFlash::erase(lfs_block_t block)
{
    df62:	push	{r4, r5, r6, lr}
	if (!port) return LFS_ERR_IO;
	const uint32_t addr = block * config.block_size;
	const uint8_t cmd = (addrbits == 24) ? 0x20 : 0x21; // erase sector
    df64:	ldrb.w	r4, [r0, #205]	; 0xcd
}

int LittleFS_SPIFlash::erase(lfs_block_t block)
{
	if (!port) return LFS_ERR_IO;
	const uint32_t addr = block * config.block_size;
    df68:	ldr.w	r3, [r0, #156]	; 0x9c
	const uint8_t cmd = (addrbits == 24) ? 0x20 : 0x21; // erase sector
    df6c:	cmp	r4, #24
//	printtbuf(buf, 20);
	return wait(progtime);
}

int LittleFS_SPIFlash::erase(lfs_block_t block)
{
    df6e:	sub	sp, #8
	if (!port) return LFS_ERR_IO;
	const uint32_t addr = block * config.block_size;
    df70:	mul.w	r1, r3, r1
	const uint8_t cmd = (addrbits == 24) ? 0x20 : 0x21; // erase sector
    df74:	beq.w	e09e <L_2582_delayNanoseconds+0xb6>
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    df78:	movs	r6, #33	; 0x21
	if (addrbits == 24) {
		buf[1] = addr >> 16;
		buf[2] = addr >> 8;
		buf[3] = addr;
	} else {
		buf[1] = addr >> 24;
    df7a:	lsrs	r5, r1, #24
		buf[2] = addr >> 16;
    df7c:	lsrs	r4, r1, #16
		buf[3] = addr >> 8;
    df7e:	lsrs	r3, r1, #8
		buf[4] = addr;
    df80:	strb.w	r1, [sp, #4]
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    df84:	strb.w	r6, [sp]
	if (addrbits == 24) {
		buf[1] = addr >> 16;
		buf[2] = addr >> 8;
		buf[3] = addr;
	} else {
		buf[1] = addr >> 24;
    df88:	strb.w	r5, [sp, #1]
		buf[2] = addr >> 16;
    df8c:	strb.w	r4, [sp, #2]
		buf[3] = addr >> 8;
    df90:	strb.w	r3, [sp, #3]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    df94:	ldrb	r3, [r2, #11]
    df96:	cmp	r3, #0
    df98:	bne.n	e050 <L_2582_delayNanoseconds+0x68>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    df9a:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    df9c:	ldr	r2, [r3, #12]
    df9e:	cmp.w	r2, #3087007744	; 0xb8000000
    dfa2:	beq.n	dfb8 <LittleFS_SPIFlash::erase(unsigned long)+0x60>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    dfa4:	ldr	r1, [pc, #288]	; (e0c8 <L_2582_delayNanoseconds+0xe0>)
    dfa6:	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    dfa8:	ldr	r2, [pc, #288]	; (e0cc <L_2582_delayNanoseconds+0xe4>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    dfaa:	mov.w	r4, #3087007744	; 0xb8000000
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    dfae:	mov.w	r1, #4160749568	; 0xf8000000
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    dfb2:	str	r4, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    dfb4:	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    dfb6:	str	r2, [r3, #0]
    dfb8:	mov	r4, r0
	const uint8_t cmd = (addrbits == 24) ? 0x20 : 0x21; // erase sector
	uint8_t cmdaddr[5];
	make_command_and_address(cmdaddr, cmd, addr, addrbits);
//	printtbuf(cmdaddr, 1 + (addrbits >> 3));
	port->beginTransaction(SPICONFIG);
	digitalWrite(pin, LOW);
    dfba:	movs	r1, #0
    dfbc:	ldrb.w	r0, [r0, #204]	; 0xcc
    dfc0:	bl	125a4 <digitalWrite>
    dfc4:	ldr.w	r3, [r4, #200]	; 0xc8
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    dfc8:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    dfca:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    dfce:	movs	r3, #6
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    dfd0:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    dfd2:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    dfd4:	ldr	r3, [r2, #44]	; 0x2c
    dfd6:	cmp	r3, #0
    dfd8:	bge.n	dfd4 <LittleFS_SPIFlash::erase(unsigned long)+0x7c>
	port->transfer(0x06); // 0x06 = write enable
	digitalWrite(pin, HIGH);
    dfda:	movs	r1, #1
    dfdc:	ldrb.w	r0, [r4, #204]	; 0xcc
		return port().POPR;
    dfe0:	ldr	r3, [r2, #56]	; 0x38
    dfe2:	bl	125a4 <digitalWrite>
    dfe6:	movs	r3, #7

0000dfe8 <L_2582_delayNanoseconds>:
    dfe8:	subs	r3, #1
    dfea:	bne.n	dfe8 <L_2582_delayNanoseconds>
	delayNanoseconds(250);
	digitalWrite(pin, LOW);
    dfec:	movs	r1, #0
    dfee:	ldrb.w	r0, [r4, #204]	; 0xcc
    dff2:	bl	125a4 <digitalWrite>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    dff6:	ldrb.w	r3, [r4, #205]	; 0xcd
    dffa:	ldr.w	r0, [r4, #200]	; 0xc8
    dffe:	asrs	r3, r3, #3
    e000:	adds	r3, #1
    e002:	mov	r2, sp
    e004:	mov	r1, sp
    e006:	bl	7d1c <SPIClass::transfer(void const*, void*, unsigned int)>
	port->transfer(cmdaddr, 1 + (addrbits >> 3));
	digitalWrite(pin, HIGH);
    e00a:	ldrb.w	r0, [r4, #204]	; 0xcc
    e00e:	movs	r1, #1
    e010:	bl	125a4 <digitalWrite>
	port->endTransaction();
    e014:	ldr.w	r2, [r4, #200]	; 0xc8
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    e018:	ldrb	r3, [r2, #11]
    e01a:	cbz	r3, e042 <L_2582_delayNanoseconds+0x5a>
			if (interruptMasksUsed & 0x01) {
    e01c:	lsls	r5, r3, #31
    e01e:	bpl.n	e028 <L_2582_delayNanoseconds+0x40>
				NVIC_ISER0 = interruptSave[0];
    e020:	ldr	r3, [pc, #172]	; (e0d0 <L_2582_delayNanoseconds+0xe8>)
    e022:	ldr	r1, [r2, #28]
    e024:	str	r1, [r3, #0]
    e026:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    e028:	lsls	r0, r3, #30
    e02a:	bpl.n	e034 <L_2582_delayNanoseconds+0x4c>
				NVIC_ISER1 = interruptSave[1];
    e02c:	ldr	r3, [pc, #164]	; (e0d4 <L_2582_delayNanoseconds+0xec>)
    e02e:	ldr	r1, [r2, #32]
    e030:	str	r1, [r3, #0]
    e032:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    e034:	lsls	r1, r3, #29
    e036:	bmi.n	e0b6 <L_2582_delayNanoseconds+0xce>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    e038:	lsls	r3, r3, #28
    e03a:	bpl.n	e042 <L_2582_delayNanoseconds+0x5a>
				NVIC_ISER3 = interruptSave[3];
    e03c:	ldr	r3, [pc, #152]	; (e0d8 <L_2582_delayNanoseconds+0xf0>)
    e03e:	ldr	r2, [r2, #40]	; 0x28
    e040:	str	r2, [r3, #0]
	return wait(erasetime);
    e042:	ldr.w	r1, [r4, #212]	; 0xd4
    e046:	mov	r0, r4
    e048:	bl	dc64 <LittleFS_SPIFlash::wait(unsigned long)>
}
    e04c:	add	sp, #8
    e04e:	pop	{r4, r5, r6, pc}
	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
			__disable_irq();
    e050:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    e052:	ldrb	r3, [r2, #11]
    e054:	lsls	r5, r3, #31
    e056:	bpl.n	e066 <L_2582_delayNanoseconds+0x7e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    e058:	ldr	r1, [pc, #128]	; (e0dc <L_2582_delayNanoseconds+0xf4>)
    e05a:	ldr	r3, [r2, #12]
    e05c:	ldr	r4, [r1, #0]
    e05e:	ands	r3, r4
    e060:	str	r3, [r2, #28]
				NVIC_ICER0 = interruptSave[0];
    e062:	str	r3, [r1, #0]
    e064:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    e066:	lsls	r4, r3, #30
    e068:	bpl.n	e078 <L_2582_delayNanoseconds+0x90>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    e06a:	ldr	r1, [pc, #116]	; (e0e0 <L_2582_delayNanoseconds+0xf8>)
    e06c:	ldr	r3, [r2, #16]
    e06e:	ldr	r4, [r1, #0]
    e070:	ands	r3, r4
    e072:	str	r3, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
    e074:	str	r3, [r1, #0]
    e076:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    e078:	lsls	r1, r3, #29
    e07a:	bpl.n	e08a <L_2582_delayNanoseconds+0xa2>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    e07c:	ldr	r1, [pc, #100]	; (e0e4 <L_2582_delayNanoseconds+0xfc>)
    e07e:	ldr	r3, [r2, #20]
    e080:	ldr	r4, [r1, #0]
    e082:	ands	r3, r4
    e084:	str	r3, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    e086:	str	r3, [r1, #0]
    e088:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    e08a:	lsls	r6, r3, #28
    e08c:	bpl.n	e09a <L_2582_delayNanoseconds+0xb2>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    e08e:	ldr	r1, [pc, #88]	; (e0e8 <L_2582_delayNanoseconds+0x100>)
    e090:	ldr	r3, [r2, #24]
    e092:	ldr	r4, [r1, #0]
    e094:	ands	r3, r4
    e096:	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    e098:	str	r3, [r1, #0]
			}
			#endif
			__enable_irq();
    e09a:	cpsie	i
    e09c:	b.n	df9a <LittleFS_SPIFlash::erase(unsigned long)+0x42>
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    e09e:	movs	r5, #32
	if (addrbits == 24) {
		buf[1] = addr >> 16;
    e0a0:	lsrs	r4, r1, #16
		buf[2] = addr >> 8;
    e0a2:	lsrs	r3, r1, #8
		buf[3] = addr;
    e0a4:	strb.w	r1, [sp, #3]
	return quickFormat();
}

static void make_command_and_address(uint8_t *buf, uint8_t cmd, uint32_t addr, uint8_t addrbits)
{
	buf[0] = cmd;
    e0a8:	strb.w	r5, [sp]
	if (addrbits == 24) {
		buf[1] = addr >> 16;
    e0ac:	strb.w	r4, [sp, #1]
		buf[2] = addr >> 8;
    e0b0:	strb.w	r3, [sp, #2]
    e0b4:	b.n	df94 <LittleFS_SPIFlash::erase(unsigned long)+0x3c>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    e0b6:	ldr	r3, [pc, #52]	; (e0ec <L_2582_delayNanoseconds+0x104>)
    e0b8:	ldr	r1, [r2, #36]	; 0x24
    e0ba:	str	r1, [r3, #0]
    e0bc:	ldrb	r3, [r2, #11]
    e0be:	b.n	e038 <L_2582_delayNanoseconds+0x50>
	return wait(progtime);
}

int LittleFS_SPIFlash::erase(lfs_block_t block)
{
	if (!port) return LFS_ERR_IO;
    e0c0:	mvn.w	r0, #4
	digitalWrite(pin, LOW);
	port->transfer(cmdaddr, 1 + (addrbits >> 3));
	digitalWrite(pin, HIGH);
	port->endTransaction();
	return wait(erasetime);
}
    e0c4:	bx	lr
    e0c6:	nop
    e0c8:	.word	0x003f4001
    e0cc:	.word	0x803f0000
    e0d0:	.word	0xe000e100
    e0d4:	.word	0xe000e104
    e0d8:	.word	0xe000e10c
    e0dc:	.word	0xe000e180
    e0e0:	.word	0xe000e184
    e0e4:	.word	0xe000e188
    e0e8:	.word	0xe000e18c
    e0ec:	.word	0xe000e108

0000e0f0 <LittleFS_SPIFlash::static_erase(lfs_config const*, unsigned long)>:
	}
	static int static_erase(const struct lfs_config *c, lfs_block_t block) {
		//Serial.printf("  flash er: block=%d\n", block);
		return ((LittleFS_SPIFlash *)(c->context))->erase(block);
    e0f0:	ldr	r0, [r0, #0]
    e0f2:	b.w	df58 <LittleFS_SPIFlash::erase(unsigned long)>
    e0f6:	nop

0000e0f8 <lfs_alloc_lookahead>:

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
            + lfs->cfg->block_count) % lfs->cfg->block_count;
    e0f8:	ldr	r2, [r0, #104]	; 0x68
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
    e0fa:	ldr	r3, [r0, #84]	; 0x54
static int lfs1_traverse(lfs_t *lfs,
        int (*cb)(void*, lfs_block_t), void *data);
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    e0fc:	push	{r4}
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
            + lfs->cfg->block_count) % lfs->cfg->block_count;
    e0fe:	ldr	r4, [r2, #32]

    if (off < lfs->free.size) {
    e100:	ldr	r2, [r0, #88]	; 0x58
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
    e102:	subs	r3, r4, r3
    e104:	add	r1, r3
    e106:	udiv	r3, r1, r4
    e10a:	mls	r1, r4, r3, r1
            + lfs->cfg->block_count) % lfs->cfg->block_count;

    if (off < lfs->free.size) {
    e10e:	cmp	r1, r2
    e110:	bcs.n	e12a <lfs_alloc_lookahead+0x32>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
    e112:	ldr	r2, [r0, #100]	; 0x64
    e114:	lsrs	r0, r1, #5
    e116:	movs	r3, #1
    e118:	ldr.w	r4, [r2, r0, lsl #2]
    e11c:	and.w	r1, r1, #31
    e120:	lsl.w	r1, r3, r1
    e124:	orrs	r1, r4
    e126:	str.w	r1, [r2, r0, lsl #2]
    }

    return 0;
}
    e12a:	movs	r0, #0
    e12c:	ldr.w	r4, [sp], #4
    e130:	bx	lr
    e132:	nop

0000e134 <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
    e134:	push	{r4}
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
    e136:	ldr	r2, [r0, #0]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
    e138:	ldr	r4, [pc, #96]	; (e19c <lfs_dir_traverse_filter+0x68>)
    e13a:	ldr	r3, [pc, #100]	; (e1a0 <lfs_dir_traverse_filter+0x6c>)
    e13c:	tst.w	r1, #268435456	; 0x10000000
    e140:	it	eq
    e142:	moveq	r3, r4

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
    e144:	eor.w	r4, r1, r2
    e148:	tst	r4, r3
    e14a:	beq.n	e17c <lfs_dir_traverse_filter+0x48>
    e14c:	sbfx	r3, r2, #0, #10
    e150:	adds	r3, #1
    e152:	beq.n	e17c <lfs_dir_traverse_filter+0x48>
            lfs_tag_isdelete(*filtertag) ||
    e154:	ldr	r3, [pc, #76]	; (e1a4 <lfs_dir_traverse_filter+0x70>)
    e156:	ldr	r4, [pc, #72]	; (e1a0 <lfs_dir_traverse_filter+0x6c>)
    e158:	ands	r3, r2
    e15a:	orr.w	r3, r3, #1333788672	; 0x4f800000
    e15e:	orr.w	r3, r3, #7340032	; 0x700000
    e162:	ands	r4, r1
    e164:	cmp	r4, r3
    e166:	beq.n	e17c <lfs_dir_traverse_filter+0x48>
static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
}

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
    e168:	lsrs	r3, r1, #20
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    e16a:	and.w	r4, r3, #1792	; 0x700
    e16e:	cmp.w	r4, #1024	; 0x400
    e172:	beq.n	e184 <lfs_dir_traverse_filter+0x50>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
    e174:	movs	r0, #0
}
    e176:	ldr.w	r4, [sp], #4
    e17a:	bx	lr
    if ((mask & tag) == (mask & *filtertag) ||
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
        return true;
    e17c:	movs	r0, #1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
}
    e17e:	ldr.w	r4, [sp], #4
    e182:	bx	lr
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    e184:	ubfx	r1, r1, #10, #10
    e188:	ubfx	r4, r2, #10, #10
    e18c:	cmp	r4, r1
    e18e:	bcc.n	e174 <lfs_dir_traverse_filter+0x40>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    e190:	sxtb	r3, r3
    e192:	add.w	r2, r2, r3, lsl #10
    e196:	str	r2, [r0, #0]
    }

    return false;
    e198:	movs	r0, #0
    e19a:	b.n	e17e <lfs_dir_traverse_filter+0x4a>
    e19c:	.word	0x700ffc00
    e1a0:	.word	0x7ffffc00
    e1a4:	.word	0x000ffc00

0000e1a8 <lfs_dir_commit_size>:

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
    e1a8:	ldr	r3, [r0, #0]
    e1aa:	sbfx	r2, r1, #0, #10
    e1ae:	cmp.w	r2, #4294967295
    e1b2:	it	eq
    e1b4:	addeq	r1, #1
    e1b6:	adds	r3, #4
    e1b8:	ubfx	r1, r1, #0, #10
    e1bc:	add	r1, r3
    e1be:	str	r1, [r0, #0]
    return 0;
}
    e1c0:	movs	r0, #0
    e1c2:	bx	lr

0000e1c4 <lfs_fs_size_count>:
    }

    return 0;
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    e1c4:	mov	r2, r0
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}
    e1c6:	movs	r0, #0
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
    e1c8:	ldr	r3, [r2, #0]
    e1ca:	adds	r3, #1
    e1cc:	str	r3, [r2, #0]
    return 0;
}
    e1ce:	bx	lr

0000e1d0 <lfs_deinit>:
    return err;
}

static int lfs_deinit(lfs_t *lfs) {
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
    e1d0:	ldr	r3, [r0, #104]	; 0x68
    e1d2:	ldr	r2, [r3, #48]	; 0x30
cleanup:
    lfs_deinit(lfs);
    return err;
}

static int lfs_deinit(lfs_t *lfs) {
    e1d4:	push	{r4, lr}
    e1d6:	mov	r4, r0
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
    e1d8:	cbz	r2, e1f0 <lfs_deinit+0x20>
        lfs_free(lfs->rcache.buffer);
    }

    if (!lfs->cfg->prog_buffer) {
    e1da:	ldr	r2, [r3, #52]	; 0x34
    e1dc:	cbz	r2, e1fa <lfs_deinit+0x2a>
        lfs_free(lfs->pcache.buffer);
    }

    if (!lfs->cfg->lookahead_buffer) {
    e1de:	ldr	r3, [r3, #56]	; 0x38
    e1e0:	cbz	r3, e1e6 <lfs_deinit+0x16>
        lfs_free(lfs->free.buffer);
    }

    return 0;
}
    e1e2:	movs	r0, #0
    e1e4:	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
    e1e6:	ldr	r0, [r4, #100]	; 0x64
    e1e8:	bl	146bc <free>
    e1ec:	movs	r0, #0
    e1ee:	pop	{r4, pc}
    e1f0:	ldr	r0, [r0, #12]
    e1f2:	bl	146bc <free>
    e1f6:	ldr	r3, [r4, #104]	; 0x68
    e1f8:	b.n	e1da <lfs_deinit+0xa>
    e1fa:	ldr	r0, [r4, #28]
    e1fc:	bl	146bc <free>
    e200:	ldr	r3, [r4, #104]	; 0x68
    e202:	b.n	e1de <lfs_deinit+0xe>

0000e204 <lfs_init>:
    return err;
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
    e204:	push	{r4, r5, r6, lr}
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);


    // setup read cache
    if (lfs->cfg->read_buffer) {
    e206:	ldr	r3, [r1, #48]	; 0x30
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
    lfs->cfg = cfg;
    e208:	str	r1, [r0, #104]	; 0x68
    return err;
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
    e20a:	sub	sp, #8
    e20c:	mov	r4, r0
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);


    // setup read cache
    if (lfs->cfg->read_buffer) {
    e20e:	cmp	r3, #0
    e210:	beq.n	e2a4 <lfs_init+0xa0>
    e212:	ldr	r2, [r1, #40]	; 0x28
        lfs->rcache.buffer = lfs->cfg->read_buffer;
    e214:	str	r3, [r0, #12]
            goto cleanup;
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
    e216:	ldr	r3, [r1, #52]	; 0x34
    e218:	cmp	r3, #0
    e21a:	beq.n	e288 <lfs_init+0x84>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
    e21c:	str	r3, [r4, #28]
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    e21e:	movs	r1, #255	; 0xff
    e220:	ldr	r0, [r4, #12]
    e222:	bl	14e3c <memset>
    pcache->block = LFS_BLOCK_NULL;
    e226:	mov.w	r6, #4294967295
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    e22a:	ldr	r3, [r4, #104]	; 0x68
    pcache->block = LFS_BLOCK_NULL;
    e22c:	str	r6, [r4, #0]
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    e22e:	ldr	r2, [r3, #40]	; 0x28
    e230:	ldr	r0, [r4, #28]
    e232:	movs	r1, #255	; 0xff
    e234:	bl	14e3c <memset>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
    e238:	ldr	r5, [r4, #104]	; 0x68
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
    e23a:	str	r6, [r4, #16]

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
    e23c:	ldr	r3, [r5, #56]	; 0x38
    e23e:	cmp	r3, #0
    e240:	beq.n	e2ba <lfs_init+0xb6>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
    e242:	str	r3, [r4, #100]	; 0x64
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
    lfs->name_max = lfs->cfg->name_max;
    e244:	ldr	r3, [r5, #60]	; 0x3c
    if (!lfs->name_max) {
    e246:	cbnz	r3, e24a <lfs_init+0x46>
        lfs->name_max = LFS_NAME_MAX;
    e248:	movs	r3, #39	; 0x27
    e24a:	str	r3, [r4, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
    lfs->file_max = lfs->cfg->file_max;
    e24c:	ldr	r3, [r5, #64]	; 0x40
    if (!lfs->file_max) {
    e24e:	cbz	r3, e282 <lfs_init+0x7e>
        lfs->file_max = LFS_FILE_MAX;
    e250:	str	r3, [r4, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
    lfs->attr_max = lfs->cfg->attr_max;
    e252:	ldr	r3, [r5, #68]	; 0x44
    if (!lfs->attr_max) {
    e254:	cbnz	r3, e25a <lfs_init+0x56>
        lfs->attr_max = LFS_ATTR_MAX;
    e256:	movw	r3, #1022	; 0x3fe
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
    e25a:	mov.w	r0, #4294967295
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
    lfs->attr_max = lfs->cfg->attr_max;
    if (!lfs->attr_max) {
        lfs->attr_max = LFS_ATTR_MAX;
    e25e:	str	r3, [r4, #116]	; 0x74
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
    lfs->root[1] = LFS_BLOCK_NULL;
    lfs->mlist = NULL;
    e260:	movs	r3, #0
    if (!lfs->attr_max) {
        lfs->attr_max = LFS_ATTR_MAX;
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
    e262:	str	r0, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
    e264:	str	r0, [r4, #36]	; 0x24
    lfs->mlist = NULL;
    e266:	str	r3, [r4, #40]	; 0x28
    lfs->seed = 0;
    e268:	str	r3, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
    e26a:	str	r3, [r4, #60]	; 0x3c
    lfs->gdelta = (lfs_gstate_t){0};
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
    e26c:	mov	r0, r3
    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
    lfs->root[1] = LFS_BLOCK_NULL;
    lfs->mlist = NULL;
    lfs->seed = 0;
    lfs->gdisk = (lfs_gstate_t){0};
    e26e:	str	r3, [r4, #64]	; 0x40
    e270:	str	r3, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
    e272:	str	r3, [r4, #48]	; 0x30
    e274:	str	r3, [r4, #52]	; 0x34
    e276:	str	r3, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
    e278:	str	r3, [r4, #72]	; 0x48
    e27a:	str	r3, [r4, #76]	; 0x4c
    e27c:	str	r3, [r4, #80]	; 0x50
    return 0;

cleanup:
    lfs_deinit(lfs);
    return err;
}
    e27e:	add	sp, #8
    e280:	pop	{r4, r5, r6, pc}
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
    lfs->file_max = lfs->cfg->file_max;
    if (!lfs->file_max) {
        lfs->file_max = LFS_FILE_MAX;
    e282:	mvn.w	r3, #2147483648	; 0x80000000
    e286:	b.n	e250 <lfs_init+0x4c>

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
    e288:	mov	r0, r2
    e28a:	str	r2, [sp, #4]
    e28c:	bl	146ac <malloc>
    // setup program cache
    if (lfs->cfg->prog_buffer) {
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
        if (!lfs->pcache.buffer) {
    e290:	ldr	r2, [sp, #4]

    // setup program cache
    if (lfs->cfg->prog_buffer) {
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
    e292:	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
    e294:	cmp	r0, #0
    e296:	bne.n	e21e <lfs_init+0x1a>
#endif

    return 0;

cleanup:
    lfs_deinit(lfs);
    e298:	mov	r0, r4
    e29a:	bl	e1d0 <lfs_deinit>
    return err;
    e29e:	mvn.w	r0, #11
    e2a2:	b.n	e27e <lfs_init+0x7a>

    // setup read cache
    if (lfs->cfg->read_buffer) {
        lfs->rcache.buffer = lfs->cfg->read_buffer;
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
    e2a4:	ldr	r5, [r1, #40]	; 0x28
    e2a6:	str	r1, [sp, #4]
    e2a8:	mov	r0, r5
    e2aa:	bl	146ac <malloc>
    e2ae:	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
    e2b0:	cmp	r0, #0
    e2b2:	beq.n	e298 <lfs_init+0x94>
    e2b4:	mov	r2, r5
    e2b6:	ldr	r1, [sp, #4]
    e2b8:	b.n	e216 <lfs_init+0x12>
    e2ba:	ldr	r0, [r5, #44]	; 0x2c
    e2bc:	bl	146ac <malloc>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
    e2c0:	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
    e2c2:	cmp	r0, #0
    e2c4:	bne.n	e244 <lfs_init+0x40>
    e2c6:	b.n	e298 <lfs_init+0x94>

0000e2c8 <lfs_bd_read.isra.15>:
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
}

static int lfs_bd_read(lfs_t *lfs,
    e2c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (block >= lfs->cfg->block_count ||
    e2cc:	ldr	r6, [r0, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
}

static int lfs_bd_read(lfs_t *lfs,
    e2ce:	sub	sp, #20
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (block >= lfs->cfg->block_count ||
    e2d0:	ldr	r4, [r6, #32]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
}

static int lfs_bd_read(lfs_t *lfs,
    e2d2:	ldr	r7, [sp, #56]	; 0x38
    e2d4:	ldr	r5, [sp, #60]	; 0x3c
    e2d6:	ldr.w	r8, [sp, #68]	; 0x44
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (block >= lfs->cfg->block_count ||
    e2da:	cmp	r4, r7
    e2dc:	bls.w	e420 <lfs_bd_read.isra.15+0x158>
    e2e0:	ldr	r4, [r6, #28]
    e2e2:	add.w	lr, r5, r8
    e2e6:	cmp	lr, r4
    e2e8:	bhi.w	e420 <lfs_bd_read.isra.15+0x158>
            off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    e2ec:	cmp.w	r8, #0
    e2f0:	beq.n	e3dc <lfs_bd_read.isra.15+0x114>
    e2f2:	mov	sl, r3
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    e2f4:	subs	r3, #1
    e2f6:	mov	r6, r2
    e2f8:	mov	r9, r1
    e2fa:	mov	fp, r0
    e2fc:	str	r3, [sp, #8]
        lfs_size_t diff = size;

        if (pcache && block == pcache->block &&
    e2fe:	cmp.w	r9, #0
    e302:	beq.n	e30c <lfs_bd_read.isra.15+0x44>
    e304:	ldr.w	r3, [r9]
    e308:	cmp	r7, r3
    e30a:	beq.n	e372 <lfs_bd_read.isra.15+0xaa>

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (block == rcache->block &&
    e30c:	ldr	r2, [r6, #0]
    e30e:	cmp	r7, r2
    }

    while (size > 0) {
        lfs_size_t diff = size;

        if (pcache && block == pcache->block &&
    e310:	mov	r3, r8

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (block == rcache->block &&
    e312:	beq.n	e392 <lfs_bd_read.isra.15+0xca>

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
    e314:	ldr.w	r0, [fp]
    e318:	ldr	r1, [r0, #20]
    e31a:	udiv	r2, r5, r1
    e31e:	cmp	sl, r8
    e320:	mls	r2, r1, r2, r5
    e324:	bhi.n	e32c <lfs_bd_read.isra.15+0x64>
    e326:	cbnz	r2, e32c <lfs_bd_read.isra.15+0x64>
    e328:	cmp	r1, r8
    e32a:	bls.n	e3aa <lfs_bd_read.isra.15+0xe2>
    e32c:	ldr	r3, [sp, #8]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    e32e:	ldr.w	lr, [r0, #28]
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    e332:	add	r3, r5
    e334:	add	r3, r1
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    e336:	udiv	r4, r3, r1
    e33a:	mls	r1, r1, r4, r3
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    e33e:	subs	r2, r5, r2
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    e340:	ldr	r4, [r0, #40]	; 0x28
            continue;
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
        rcache->block = block;
    e342:	str	r7, [r6, #0]
    e344:	subs	r1, r3, r1
    e346:	cmp	r1, lr
    e348:	ite	ls
    e34a:	rsbls	r3, r2, r1
    e34e:	rsbhi	r3, r2, lr
    e352:	cmp	r3, r4
    e354:	it	cs
    e356:	movcs	r3, r4
    e358:	mov	r1, r3
                lfs_min(
                    lfs_alignup(off+hint, lfs->cfg->read_size),
                    lfs->cfg->block_size)
                - rcache->off,
                lfs->cfg->cache_size);
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
    e35a:	ldr	r3, [r6, #12]
    e35c:	str	r1, [sp, #0]
    e35e:	ldr	r4, [r0, #4]

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
        rcache->block = block;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
        rcache->size = lfs_min(
    e360:	str	r1, [r6, #8]
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
        rcache->block = block;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
    e362:	str	r2, [r6, #4]
                lfs_min(
                    lfs_alignup(off+hint, lfs->cfg->read_size),
                    lfs->cfg->block_size)
                - rcache->off,
                lfs->cfg->cache_size);
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
    e364:	mov	r1, r7
    e366:	blx	r4
                rcache->off, rcache->buffer, rcache->size);
        LFS_ASSERT(err <= 0);
        if (err) {
    e368:	cmp	r0, #0
    e36a:	beq.n	e2fe <lfs_bd_read.isra.15+0x36>
            return err;
        }
    }

    return 0;
}
    e36c:	add	sp, #20
    e36e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    while (size > 0) {
        lfs_size_t diff = size;

        if (pcache && block == pcache->block &&
                off < pcache->off + pcache->size) {
    e372:	ldr.w	r3, [r9, #4]
    e376:	ldr.w	r2, [r9, #8]
    e37a:	add	r2, r3
    }

    while (size > 0) {
        lfs_size_t diff = size;

        if (pcache && block == pcache->block &&
    e37c:	cmp	r2, r5
    e37e:	bls.n	e30c <lfs_bd_read.isra.15+0x44>
                off < pcache->off + pcache->size) {
            if (off >= pcache->off) {
    e380:	cmp	r3, r5
    e382:	bls.n	e410 <lfs_bd_read.isra.15+0x148>
    e384:	subs	r3, r3, r5

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (block == rcache->block &&
    e386:	ldr	r2, [r6, #0]
    e388:	cmp	r3, r8
    e38a:	it	cs
    e38c:	movcs	r3, r8
    e38e:	cmp	r7, r2
    e390:	bne.n	e314 <lfs_bd_read.isra.15+0x4c>
                off < rcache->off + rcache->size) {
    e392:	ldr	r1, [r6, #4]
    e394:	ldr	r2, [r6, #8]
    e396:	add	r2, r1

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (block == rcache->block &&
    e398:	cmp	r2, r5
    e39a:	bls.n	e314 <lfs_bd_read.isra.15+0x4c>
                off < rcache->off + rcache->size) {
            if (off >= rcache->off) {
    e39c:	cmp	r1, r5
    e39e:	bls.n	e3e4 <lfs_bd_read.isra.15+0x11c>
    e3a0:	subs	r1, r1, r5
    e3a2:	cmp	r3, r1
    e3a4:	it	cs
    e3a6:	movcs	r3, r1
    e3a8:	b.n	e314 <lfs_bd_read.isra.15+0x4c>
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    e3aa:	udiv	r2, r3, r1
    e3ae:	mls	r1, r1, r2, r3
    e3b2:	subs	r1, r3, r1

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
                size >= lfs->cfg->read_size) {
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
    e3b4:	str	r1, [sp, #0]
    e3b6:	ldr	r3, [r0, #4]
    e3b8:	str	r1, [sp, #12]
    e3ba:	mov	r4, r3
    e3bc:	mov	r2, r5
    e3be:	ldr	r3, [sp, #64]	; 0x40
    e3c0:	mov	r1, r7
    e3c2:	blx	r4
            if (err) {
    e3c4:	cmp	r0, #0
    e3c6:	bne.n	e36c <lfs_bd_read.isra.15+0xa4>
                return err;
            }

            data += diff;
    e3c8:	ldr	r2, [sp, #12]
    e3ca:	ldr	r3, [sp, #64]	; 0x40
            off += diff;
            size -= diff;
    e3cc:	rsb	r8, r2, r8
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
            if (err) {
                return err;
            }

            data += diff;
    e3d0:	add	r3, r2
    e3d2:	str	r3, [sp, #64]	; 0x40
            off += diff;
    e3d4:	add	r5, r2
    if (block >= lfs->cfg->block_count ||
            off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    e3d6:	cmp.w	r8, #0
    e3da:	bne.n	e2fe <lfs_bd_read.isra.15+0x36>
        if (err) {
            return err;
        }
    }

    return 0;
    e3dc:	movs	r0, #0
}
    e3de:	add	sp, #20
    e3e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    e3e4:	subs	r4, r2, r5
    e3e6:	cmp	r4, r3
        if (block == rcache->block &&
                off < rcache->off + rcache->size) {
            if (off >= rcache->off) {
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
    e3e8:	ldr	r2, [r6, #12]
    e3ea:	it	cs
    e3ec:	movcs	r4, r3
    e3ee:	subs	r1, r5, r1
    e3f0:	add	r1, r2
    e3f2:	ldr	r0, [sp, #64]	; 0x40
    e3f4:	mov	r2, r4
    e3f6:	bl	11bf8 <memcpy>

                data += diff;
    e3fa:	ldr	r3, [sp, #64]	; 0x40
                off += diff;
                size -= diff;
    e3fc:	rsb	r8, r4, r8
            if (off >= rcache->off) {
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);

                data += diff;
    e400:	add	r3, r4
                off += diff;
    e402:	add	r5, r4
            if (off >= rcache->off) {
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);

                data += diff;
    e404:	str	r3, [sp, #64]	; 0x40
    if (block >= lfs->cfg->block_count ||
            off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    e406:	cmp.w	r8, #0
    e40a:	bne.w	e2fe <lfs_bd_read.isra.15+0x36>
    e40e:	b.n	e3dc <lfs_bd_read.isra.15+0x114>
    e410:	subs	r4, r2, r5
    e412:	cmp	r4, r8
        if (pcache && block == pcache->block &&
                off < pcache->off + pcache->size) {
            if (off >= pcache->off) {
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
    e414:	ldr.w	r2, [r9, #12]
    e418:	it	cs
    e41a:	movcs	r4, r8
    e41c:	subs	r1, r5, r3
    e41e:	b.n	e3f0 <lfs_bd_read.isra.15+0x128>
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (block >= lfs->cfg->block_count ||
            off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    e420:	mvn.w	r0, #83	; 0x53
    e424:	b.n	e36c <lfs_bd_read.isra.15+0xa4>
    e426:	nop

0000e428 <lfs_fs_parent_match>:
    lfs_t *lfs;
    const lfs_block_t pair[2];
};

static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
    e428:	push	{r4, r5, r6, r7, lr}
    e42a:	mov	r3, r2
    struct lfs_fs_parent_match *find = data;
    lfs_t *lfs = find->lfs;
    e42c:	ldr	r2, [r0, #0]
    const struct lfs_diskoff *disk = buffer;
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
    e42e:	ldr	r1, [r3, #4]
    e430:	ldr	r7, [r3, #0]
    lfs_t *lfs;
    const lfs_block_t pair[2];
};

static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
    e432:	sub	sp, #28
    e434:	mov	r4, r0
    lfs_t *lfs = find->lfs;
    const struct lfs_diskoff *disk = buffer;
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
    e436:	ldr	r0, [r2, #104]	; 0x68
    e438:	movs	r6, #8
    e43a:	add	r5, sp, #16
    e43c:	ldr	r3, [r0, #28]
    e43e:	str	r1, [sp, #4]
    e440:	add.w	r0, r2, #104	; 0x68
    e444:	add.w	r1, r2, #16
    e448:	str	r7, [sp, #0]
    e44a:	str	r6, [sp, #12]
    e44c:	str	r5, [sp, #8]
    e44e:	bl	e2c8 <lfs_bd_read.isra.15>
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
    e452:	cbnz	r0, e46e <lfs_fs_parent_match+0x46>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e454:	ldr	r3, [sp, #16]
    e456:	ldr	r2, [r4, #4]
    e458:	cmp	r2, r3
    e45a:	beq.n	e46e <lfs_fs_parent_match+0x46>
    e45c:	ldr	r1, [r4, #8]
    e45e:	ldr	r4, [sp, #20]
    e460:	cmp	r4, r1
    e462:	beq.n	e46e <lfs_fs_parent_match+0x46>
    e464:	cmp	r3, r1
    e466:	beq.n	e46e <lfs_fs_parent_match+0x46>
    e468:	subs	r0, r2, r4
    e46a:	it	ne
    e46c:	movne	r0, #1
        return err;
    }

    lfs_pair_fromle32(child);
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
}
    e46e:	add	sp, #28
    e470:	pop	{r4, r5, r6, r7, pc}
    e472:	nop

0000e474 <lfs_dir_fetchmatch>:
}

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    e474:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // scanning the entire directory
    lfs_stag_t besttag = -1;

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
    e478:	ldr	r4, [r0, #104]	; 0x68
    e47a:	ldr	r6, [r2, #0]
    e47c:	ldr	r4, [r4, #32]
    e47e:	cmp	r6, r4
}

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    e480:	sub	sp, #92	; 0x5c
    // scanning the entire directory
    lfs_stag_t besttag = -1;

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
    e482:	bcs.w	e740 <lfs_dir_fetchmatch+0x2cc>
    e486:	ldr	r5, [r2, #4]
    e488:	cmp	r4, r5
    e48a:	bls.w	e740 <lfs_dir_fetchmatch+0x2cc>
        return LFS_ERR_CORRUPT;
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
    e48e:	movs	r5, #0
    e490:	mov	sl, r0
    e492:	str	r3, [sp, #24]
    e494:	mov	r4, r2
    e496:	add.w	r8, r0, #104	; 0x68
    int r = 0;
    for (int i = 0; i < 2; i++) {
        int err = lfs_bd_read(lfs,
    e49a:	add	r2, sp, #64	; 0x40
    e49c:	movs	r3, #4
    e49e:	mov	fp, r1
    e4a0:	str	r2, [sp, #8]
    e4a2:	str	r6, [sp, #0]
    e4a4:	str	r5, [sp, #4]
    e4a6:	mov	r1, r5
    e4a8:	str	r3, [sp, #12]
    e4aa:	mov	r0, r8
    e4ac:	mov	r2, sl
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
        return LFS_ERR_CORRUPT;
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
    e4ae:	str	r5, [sp, #64]	; 0x40
    e4b0:	str	r5, [sp, #68]	; 0x44
    int r = 0;
    for (int i = 0; i < 2; i++) {
        int err = lfs_bd_read(lfs,
    e4b2:	bl	e2c8 <lfs_bd_read.isra.15>
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
        revs[i] = lfs_fromle32(revs[i]);
        if (err && err != LFS_ERR_CORRUPT) {
    e4b6:	cbz	r0, e4c0 <lfs_dir_fetchmatch+0x4c>
    e4b8:	cmn.w	r0, #84	; 0x54
    e4bc:	bne.w	e744 <lfs_dir_fetchmatch+0x2d0>

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
    int r = 0;
    for (int i = 0; i < 2; i++) {
        int err = lfs_bd_read(lfs,
    e4c0:	ldr	r2, [r4, #4]
    e4c2:	str	r2, [sp, #0]
    e4c4:	add	r1, sp, #68	; 0x44
    e4c6:	movs	r5, #0
    e4c8:	movs	r3, #4
    e4ca:	str	r1, [sp, #8]
    e4cc:	str	r3, [sp, #12]
    e4ce:	str	r5, [sp, #4]
    e4d0:	mov	r1, r5
    e4d2:	mov	r2, sl
    e4d4:	mov	r0, r8
    e4d6:	bl	e2c8 <lfs_bd_read.isra.15>
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
        revs[i] = lfs_fromle32(revs[i]);
        if (err && err != LFS_ERR_CORRUPT) {
    e4da:	cmp	r0, #0
    e4dc:	bne.w	e7b2 <lfs_dir_fetchmatch+0x33e>
    e4e0:	ldr	r3, [sp, #68]	; 0x44
    e4e2:	ldr	r5, [sp, #64]	; 0x40
    e4e4:	subs	r5, r3, r5
    e4e6:	cmp	r5, #0
    e4e8:	ite	le
    e4ea:	movle	r5, #0
    e4ec:	movgt	r5, #1
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
            r = i;
        }
    }

    dir->pair[0] = pair[(r+0)%2];
    e4ee:	ldr.w	r3, [r4, r5, lsl #2]
    e4f2:	str.w	r3, [fp]
    dir->pair[1] = pair[(r+1)%2];
    e4f6:	eor.w	r3, r5, #1
    e4fa:	str	r3, [sp, #48]	; 0x30
    e4fc:	ldr.w	r3, [r4, r3, lsl #2]
    e500:	str.w	r3, [fp, #4]
    dir->rev = revs[(r+0)%2];
    e504:	add	r2, sp, #88	; 0x58
    dir->off = 0; // nonzero = found some commits
    e506:	movs	r3, #0
        }
    }

    dir->pair[0] = pair[(r+0)%2];
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    e508:	add.w	r5, r2, r5, lsl #2
    dir->off = 0; // nonzero = found some commits
    e50c:	str.w	r3, [fp, #12]
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
    e510:	str	r3, [sp, #32]
    e512:	add.w	r3, fp, #8
    e516:	str	r3, [sp, #44]	; 0x2c
    }

    dir->pair[0] = pair[(r+0)%2];
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits
    e518:	movs	r3, #2
        }
    }

    dir->pair[0] = pair[(r+0)%2];
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    e51a:	ldr.w	r2, [r5, #-24]
    dir->off = 0; // nonzero = found some commits
    e51e:	str	r3, [sp, #36]	; 0x24
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
    e520:	mov.w	r3, #4294967295
        }
    }

    dir->pair[0] = pair[(r+0)%2];
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    e524:	str.w	r2, [fp, #8]
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
    e528:	str	r3, [sp, #40]	; 0x28
    for (int i = 0; i < 2; i++) {
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
    e52a:	ldr	r3, [pc, #748]	; (e818 <lfs_dir_fetchmatch+0x3a4>)
    e52c:	ldmia.w	r3, {r0, r1}
    e530:	add	r3, sp, #72	; 0x48
    e532:	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    e536:	movs	r2, #4
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
    e538:	movs	r3, #0
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    e53a:	ldr	r1, [sp, #44]	; 0x2c
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
    e53c:	str	r3, [sp, #52]	; 0x34
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    e53e:	mov.w	r0, #4294967295
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
    e542:	mov	r4, r3
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    e544:	bl	11bc0 <lfs_crc>
    e548:	ldr	r3, [sp, #40]	; 0x28
    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;

        uint16_t tempcount = 0;
    e54a:	str	r4, [sp, #20]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    e54c:	mov	r5, r0
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
        lfs_off_t off = 0;
    e54e:	mov	r7, r4
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
        bool tempsplit = false;
        lfs_stag_t tempbesttag = besttag;

        dir->rev = lfs_tole32(dir->rev);
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    e550:	str	r3, [sp, #28]
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
        lfs_off_t off = 0;
        lfs_tag_t ptag = 0xffffffff;
    e552:	mov.w	r6, #4294967295
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
                uint8_t dat;
                err = lfs_bd_read(lfs,
    e556:	mov.w	r9, #1
        dir->rev = lfs_fromle32(dir->rev);

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
    e55a:	sbfx	r2, r6, #0, #10
    e55e:	cmp.w	r2, #4294967295
    e562:	ite	ne
    e564:	movne	r2, r6
    e566:	addeq	r2, r6, #1
            int err = lfs_bd_read(lfs,
    e568:	movs	r0, #4
        dir->rev = lfs_fromle32(dir->rev);

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
    e56a:	ubfx	r2, r2, #0, #10
            int err = lfs_bd_read(lfs,
    e56e:	ldr.w	r3, [sl, #104]	; 0x68
    e572:	ldr.w	r1, [fp]
    e576:	ldr	r3, [r3, #28]
    e578:	str	r0, [sp, #12]
        dir->rev = lfs_fromle32(dir->rev);

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
    e57a:	add	r2, r0
    e57c:	add	r7, r2
            int err = lfs_bd_read(lfs,
    e57e:	add	r2, sp, #56	; 0x38
    e580:	str	r2, [sp, #8]
    e582:	str	r1, [sp, #0]
    e584:	str	r7, [sp, #4]
    e586:	mov	r2, sl
    e588:	movs	r1, #0
    e58a:	mov	r0, r8
    e58c:	bl	e2c8 <lfs_bd_read.isra.15>
                    NULL, &lfs->rcache, lfs->cfg->block_size,
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
    e590:	mov	r4, r0
    e592:	cmp	r0, #0
    e594:	bne.w	e83e <lfs_dir_fetchmatch+0x3ca>
                    break;
                }
                return err;
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
    e598:	mov	r0, r5
    e59a:	movs	r2, #4
    e59c:	add	r1, sp, #56	; 0x38
    e59e:	bl	11bc0 <lfs_crc>
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    e5a2:	ldr	r3, [sp, #56]	; 0x38
    e5a4:	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
    e5a6:	eors	r3, r6

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
    e5a8:	cmp	r3, #0
                    break;
                }
                return err;
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
    e5aa:	mov	r5, r0
            tag = lfs_frombe32(tag) ^ ptag;
    e5ac:	str	r3, [sp, #16]
    e5ae:	str	r3, [sp, #56]	; 0x38

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
    e5b0:	blt.w	e848 <lfs_dir_fetchmatch+0x3d4>
static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
}

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    e5b4:	ldr	r1, [sp, #16]
    e5b6:	sbfx	r2, r1, #0, #10
    e5ba:	mov	r3, r1
    e5bc:	cmp.w	r2, #4294967295
    e5c0:	it	eq
    e5c2:	addeq	r3, #1
    e5c4:	mov	r2, r3
            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
                        dir->off % lfs->cfg->prog_size == 0);
                break;
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
    e5c6:	ldr.w	r3, [sl, #104]	; 0x68
static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
}

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    e5ca:	ubfx	r2, r2, #0, #10
    e5ce:	adds	r2, #4
            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
                        dir->off % lfs->cfg->prog_size == 0);
                break;
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
    e5d0:	ldr	r3, [r3, #28]
    e5d2:	adds	r1, r7, r2
    e5d4:	cmp	r1, r3
    e5d6:	bhi.w	e834 <lfs_dir_fetchmatch+0x3c0>
static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
}

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
    e5da:	ldr	r1, [sp, #16]
    e5dc:	lsrs	r6, r1, #20
    e5de:	and.w	r0, r6, #1792	; 0x700
                break;
            }

            ptag = tag;

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
    e5e2:	cmp.w	r0, #1280	; 0x500
    e5e6:	beq.n	e6dc <lfs_dir_fetchmatch+0x268>
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    e5e8:	cmp	r2, #4
    e5ea:	beq.w	e7bc <lfs_dir_fetchmatch+0x348>
    e5ee:	movs	r4, #4
    e5f0:	add	r6, sp, #60	; 0x3c
    e5f2:	b.n	e61c <lfs_dir_fetchmatch+0x1a8>
                        break;
                    }
                    return err;
                }

                crc = lfs_crc(crc, &dat, 1);
    e5f4:	mov	r0, r5
    e5f6:	bl	11bc0 <lfs_crc>
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    e5fa:	ldr	r1, [sp, #56]	; 0x38
    e5fc:	sbfx	r3, r1, #0, #10
    e600:	cmp.w	r3, #4294967295
    e604:	ite	ne
    e606:	movne	r3, r1
    e608:	addeq	r3, r1, #1
    e60a:	ubfx	r3, r3, #0, #10
    e60e:	adds	r3, #4
    e610:	cmp	r4, r3
                        break;
                    }
                    return err;
                }

                crc = lfs_crc(crc, &dat, 1);
    e612:	mov	r5, r0
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    e614:	bcs.n	e6b4 <lfs_dir_fetchmatch+0x240>
    e616:	ldr.w	r3, [sl, #104]	; 0x68
    e61a:	ldr	r3, [r3, #28]
                uint8_t dat;
                err = lfs_bd_read(lfs,
    e61c:	ldr.w	r2, [fp]
    e620:	str	r2, [sp, #0]
    e622:	adds	r1, r7, r4
    e624:	str	r1, [sp, #4]
    e626:	mov	r2, sl
    e628:	movs	r1, #0
    e62a:	str.w	r9, [sp, #12]
    e62e:	str	r6, [sp, #8]
    e630:	mov	r0, r8
    e632:	bl	e2c8 <lfs_bd_read.isra.15>
                        break;
                    }
                    return err;
                }

                crc = lfs_crc(crc, &dat, 1);
    e636:	movs	r2, #1
    e638:	mov	r1, r6
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    e63a:	add	r4, r2
                uint8_t dat;
                err = lfs_bd_read(lfs,
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
    e63c:	cmp	r0, #0
    e63e:	beq.n	e5f4 <lfs_dir_fetchmatch+0x180>
                    if (err == LFS_ERR_CORRUPT) {
    e640:	cmn.w	r0, #84	; 0x54
    e644:	bne.n	e744 <lfs_dir_fetchmatch+0x2d0>
    e646:	ldr	r1, [sp, #56]	; 0x38
                        dir->erased = false;
    e648:	ldrb.w	r3, [sp, #32]
    e64c:	strb.w	r3, [fp, #22]
    e650:	lsrs	r6, r1, #20
    e652:	and.w	r0, r6, #1792	; 0x700

                crc = lfs_crc(crc, &dat, 1);
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    e656:	cbnz	r0, e676 <lfs_dir_fetchmatch+0x202>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
    e658:	ldr	r2, [sp, #20]
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    e65a:	ubfx	r3, r1, #10, #10
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
    e65e:	cmp	r2, r3
    e660:	bhi.n	e666 <lfs_dir_fetchmatch+0x1f2>
                    tempcount = lfs_tag_id(tag) + 1;
    e662:	adds	r3, #1
    e664:	str	r3, [sp, #20]
                }
                lfs_pair_fromle32(temptail);
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
    e666:	ldr	r3, [sp, #128]	; 0x80
    e668:	ldr	r2, [sp, #24]
    e66a:	eors	r3, r1
    e66c:	ands.w	r4, r3, r2
    e670:	beq.n	e6bc <lfs_dir_fetchmatch+0x248>
    e672:	ldr	r6, [sp, #16]
    e674:	b.n	e55a <lfs_dir_fetchmatch+0xe6>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
    e676:	cmp.w	r0, #1024	; 0x400
    e67a:	beq.n	e770 <lfs_dir_fetchmatch+0x2fc>
                    tempbesttag |= 0x80000000;
                } else if (tempbesttag != -1 &&
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
    e67c:	cmp.w	r0, #1536	; 0x600
    e680:	bne.n	e666 <lfs_dir_fetchmatch+0x1f2>
                tempsplit = (lfs_tag_chunk(tag) & 1);

                err = lfs_bd_read(lfs,
    e682:	ldr.w	r3, [sl, #104]	; 0x68
    e686:	ldr.w	r2, [fp]
    e68a:	ldr	r3, [r3, #28]
    e68c:	str	r2, [sp, #0]
    e68e:	add	r1, sp, #72	; 0x48
    e690:	str	r1, [sp, #8]
    e692:	movs	r0, #8
    e694:	adds	r1, r7, #4
    e696:	str	r0, [sp, #12]
    e698:	str	r1, [sp, #4]
    e69a:	mov	r2, sl
    e69c:	movs	r1, #0
    e69e:	mov	r0, r8
                } else if (tempbesttag != -1 &&
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
                tempsplit = (lfs_tag_chunk(tag) & 1);
    e6a0:	and.w	r4, r6, #1
    e6a4:	str	r4, [sp, #52]	; 0x34

                err = lfs_bd_read(lfs,
    e6a6:	bl	e2c8 <lfs_bd_read.isra.15>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
    e6aa:	cmn.w	r0, #84	; 0x54
    e6ae:	beq.n	e704 <lfs_dir_fetchmatch+0x290>
    e6b0:	ldr	r1, [sp, #56]	; 0x38
    e6b2:	b.n	e666 <lfs_dir_fetchmatch+0x1f2>
    e6b4:	lsrs	r6, r1, #20
    e6b6:	and.w	r0, r6, #1792	; 0x700
    e6ba:	b.n	e656 <lfs_dir_fetchmatch+0x1e2>
                lfs_pair_fromle32(temptail);
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
                int res = cb(data, tag, &(struct lfs_diskoff){
    e6bc:	ldr.w	r3, [fp]
    e6c0:	str	r3, [sp, #80]	; 0x50
    e6c2:	adds	r3, r7, #4
    e6c4:	str	r3, [sp, #84]	; 0x54
    e6c6:	add	r2, sp, #80	; 0x50
    e6c8:	ldr	r0, [sp, #140]	; 0x8c
    e6ca:	ldr	r3, [sp, #136]	; 0x88
    e6cc:	blx	r3
                        dir->pair[0], off+sizeof(tag)});
                if (res < 0) {
    e6ce:	cmp	r0, #0
    e6d0:	blt.w	e82e <lfs_dir_fetchmatch+0x3ba>
                        break;
                    }
                    return res;
                }

                if (res == LFS_CMP_EQ) {
    e6d4:	bne.n	e74a <lfs_dir_fetchmatch+0x2d6>
                    // found a match
                    tempbesttag = tag;
    e6d6:	ldr	r3, [sp, #56]	; 0x38
    e6d8:	str	r3, [sp, #28]
    e6da:	b.n	e672 <lfs_dir_fetchmatch+0x1fe>
            ptag = tag;

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
    e6dc:	ldr.w	r2, [fp]
    e6e0:	str	r2, [sp, #0]
    e6e2:	adds	r0, r7, #4
    e6e4:	movs	r1, #4
    e6e6:	add	r6, sp, #60	; 0x3c
    e6e8:	str	r1, [sp, #12]
    e6ea:	str	r0, [sp, #4]
    e6ec:	mov	r1, r4
    e6ee:	str	r6, [sp, #8]
    e6f0:	mov	r2, sl
    e6f2:	mov	r0, r8
    e6f4:	bl	e2c8 <lfs_bd_read.isra.15>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
    e6f8:	cmp	r0, #0
    e6fa:	bne.w	e8c8 <lfs_dir_fetchmatch+0x454>
                    }
                    return err;
                }
                dcrc = lfs_fromle32(dcrc);

                if (crc != dcrc) {
    e6fe:	ldr	r3, [sp, #60]	; 0x3c
    e700:	cmp	r5, r3
    e702:	beq.n	e7c0 <lfs_dir_fetchmatch+0x34c>
                err = lfs_bd_read(lfs,
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
                        dir->erased = false;
    e704:	ldrb.w	r3, [sp, #32]
    e708:	strb.w	r3, [fp, #22]
    e70c:	ldr.w	r3, [fp, #12]
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
    e710:	cmp	r3, #0
    e712:	bne.w	e87a <lfs_dir_fetchmatch+0x406>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
        dir->rev = revs[(r+1)%2];
    e716:	ldr	r3, [sp, #48]	; 0x30


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
    lfs_block_t t = pair[0];
    e718:	ldr.w	r2, [fp]
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
        dir->rev = revs[(r+1)%2];
    e71c:	add	r1, sp, #88	; 0x58
    e71e:	add.w	r3, r1, r3, lsl #2
    e722:	ldr.w	r1, [r3, #-24]

/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
    lfs_block_t t = pair[0];
    pair[0] = pair[1];
    e726:	ldr.w	r3, [fp, #4]
    e72a:	str.w	r3, [fp]
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
    e72e:	ldr	r3, [sp, #36]	; 0x24
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
        dir->rev = revs[(r+1)%2];
    e730:	str.w	r1, [fp, #8]
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
    e734:	subs	r3, #1
/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
    lfs_block_t t = pair[0];
    pair[0] = pair[1];
    pair[1] = t;
    e736:	str.w	r2, [fp, #4]
    dir->pair[1] = pair[(r+1)%2];
    dir->rev = revs[(r+0)%2];
    dir->off = 0; // nonzero = found some commits

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
    e73a:	str	r3, [sp, #36]	; 0x24
    e73c:	bne.w	e52a <lfs_dir_fetchmatch+0xb6>
    lfs_stag_t besttag = -1;

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
        return LFS_ERR_CORRUPT;
    e740:	mvn.w	r0, #83	; 0x53
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
}
    e744:	add	sp, #92	; 0x5c
    e746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }

                if (res == LFS_CMP_EQ) {
                    // found a match
                    tempbesttag = tag;
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
    e74a:	ldr	r2, [sp, #56]	; 0x38
    e74c:	ldr	r1, [sp, #28]
    e74e:	ldr	r3, [pc, #204]	; (e81c <lfs_dir_fetchmatch+0x3a8>)
    e750:	eors	r1, r2
    e752:	ands	r3, r1
    e754:	cbz	r3, e7aa <lfs_dir_fetchmatch+0x336>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
                } else if (res == LFS_CMP_GT &&
    e756:	cmp	r0, #2
    e758:	bne.n	e672 <lfs_dir_fetchmatch+0x1fe>
    e75a:	ldr	r3, [sp, #28]
    e75c:	ubfx	r1, r2, #10, #10
    e760:	ubfx	r3, r3, #10, #10
    e764:	cmp	r3, r1
    e766:	bcc.n	e672 <lfs_dir_fetchmatch+0x1fe>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
    e768:	orr.w	r3, r2, #2147483648	; 0x80000000
    e76c:	str	r3, [sp, #28]
    e76e:	b.n	e672 <lfs_dir_fetchmatch+0x1fe>
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    e770:	ldr	r2, [sp, #28]
    e772:	ldr	r3, [pc, #172]	; (e820 <lfs_dir_fetchmatch+0x3ac>)
    e774:	ands	r3, r2
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);
    e776:	ldr	r2, [sp, #20]
static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
    return (tag & 0x0ff00000) >> 20;
}

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
    e778:	sxtb	r6, r6
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    e77a:	orr.w	r3, r3, #1333788672	; 0x4f800000
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);
    e77e:	add	r2, r6

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    e780:	orr.w	r3, r3, #7340032	; 0x700000
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);
    e784:	uxth	r2, r2

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    e786:	cmp	r3, r1
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
                    tempcount = lfs_tag_id(tag) + 1;
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);
    e788:	str	r2, [sp, #20]

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    e78a:	beq.n	e824 <lfs_dir_fetchmatch+0x3b0>
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
                    tempbesttag |= 0x80000000;
                } else if (tempbesttag != -1 &&
    e78c:	ldr	r0, [sp, #28]
    e78e:	adds	r3, r0, #1
    e790:	beq.w	e666 <lfs_dir_fetchmatch+0x1f2>
    e794:	ubfx	r3, r0, #10, #10
    e798:	ubfx	r2, r1, #10, #10
    e79c:	cmp	r3, r2
    e79e:	bcc.w	e666 <lfs_dir_fetchmatch+0x1f2>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    e7a2:	add.w	r3, r0, r6, lsl #10
    e7a6:	str	r3, [sp, #28]
    e7a8:	b.n	e666 <lfs_dir_fetchmatch+0x1f2>
                    tempbesttag = tag;
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
    e7aa:	mov.w	r3, #4294967295
    e7ae:	str	r3, [sp, #28]
    e7b0:	b.n	e672 <lfs_dir_fetchmatch+0x1fe>
    for (int i = 0; i < 2; i++) {
        int err = lfs_bd_read(lfs,
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
        revs[i] = lfs_fromle32(revs[i]);
        if (err && err != LFS_ERR_CORRUPT) {
    e7b2:	cmn.w	r0, #84	; 0x54
    e7b6:	beq.w	e4ee <lfs_dir_fetchmatch+0x7a>
    e7ba:	b.n	e744 <lfs_dir_fetchmatch+0x2d0>
                crc = 0xffffffff;
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    e7bc:	ldr	r1, [sp, #16]
    e7be:	b.n	e656 <lfs_dir_fetchmatch+0x1e2>
                    dir->erased = false;
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    e7c0:	ldr	r1, [sp, #56]	; 0x38

                // toss our crc into the filesystem seed for
                // pseudorandom numbers
                lfs->seed ^= crc;
    e7c2:	ldr.w	r2, [sl, #44]	; 0x2c
                    dir->erased = false;
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    e7c6:	ldr	r0, [sp, #16]
                // pseudorandom numbers
                lfs->seed ^= crc;

                // update with what's found so far
                besttag = tempbesttag;
                dir->off = off + lfs_tag_dsize(tag);
    e7c8:	sbfx	r3, r1, #0, #10
    e7cc:	cmp.w	r3, #4294967295
    e7d0:	ite	ne
    e7d2:	movne	r3, r1
    e7d4:	addeq	r3, r1, #1
    e7d6:	ubfx	r3, r3, #0, #10
    e7da:	adds	r3, #4
    e7dc:	add	r3, r7
                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;

                // toss our crc into the filesystem seed for
                // pseudorandom numbers
                lfs->seed ^= crc;
    e7de:	eors	r2, r5
    e7e0:	str.w	r2, [sl, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
                dir->off = off + lfs_tag_dsize(tag);
    e7e4:	str.w	r3, [fp, #12]
                dir->etag = ptag;
                dir->count = tempcount;
    e7e8:	ldrh.w	r3, [sp, #20]
    e7ec:	strh.w	r3, [fp, #20]
                    dir->erased = false;
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    e7f0:	lsrs	r1, r1, #20
                dir->off = off + lfs_tag_dsize(tag);
                dir->etag = ptag;
                dir->count = tempcount;
                dir->tail[0] = temptail[0];
                dir->tail[1] = temptail[1];
                dir->split = tempsplit;
    e7f2:	ldrb.w	r3, [sp, #52]	; 0x34
    e7f6:	strb.w	r3, [fp, #23]
                    dir->erased = false;
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    e7fa:	eor.w	r6, r0, r1, lsl #31
    e7fe:	ldr	r3, [sp, #28]
                // update with what's found so far
                besttag = tempbesttag;
                dir->off = off + lfs_tag_dsize(tag);
                dir->etag = ptag;
                dir->count = tempcount;
                dir->tail[0] = temptail[0];
    e800:	ldr	r0, [sp, #72]	; 0x48
                dir->tail[1] = temptail[1];
    e802:	ldr	r1, [sp, #76]	; 0x4c
                lfs->seed ^= crc;

                // update with what's found so far
                besttag = tempbesttag;
                dir->off = off + lfs_tag_dsize(tag);
                dir->etag = ptag;
    e804:	str.w	r6, [fp, #16]
                dir->count = tempcount;
                dir->tail[0] = temptail[0];
    e808:	str.w	r0, [fp, #24]
                dir->tail[1] = temptail[1];
    e80c:	str.w	r1, [fp, #28]
    e810:	str	r3, [sp, #40]	; 0x28
                dir->split = tempsplit;

                // reset crc
                crc = 0xffffffff;
    e812:	mov.w	r5, #4294967295
    e816:	b.n	e55a <lfs_dir_fetchmatch+0xe6>
    e818:	.word	0x000197c4
    e81c:	.word	0x7ffffc00
    e820:	.word	0x000ffc00
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
                tempcount += lfs_tag_splice(tag);

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
                    tempbesttag |= 0x80000000;
    e824:	ldr	r3, [sp, #28]
    e826:	orr.w	r3, r3, #2147483648	; 0x80000000
    e82a:	str	r3, [sp, #28]
    e82c:	b.n	e666 <lfs_dir_fetchmatch+0x1f2>
            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
                int res = cb(data, tag, &(struct lfs_diskoff){
                        dir->pair[0], off+sizeof(tag)});
                if (res < 0) {
                    if (res == LFS_ERR_CORRUPT) {
    e82e:	cmn.w	r0, #84	; 0x54
    e832:	bne.n	e744 <lfs_dir_fetchmatch+0x2d0>
                        dir->erased = false;
    e834:	strb.w	r4, [fp, #22]
    e838:	ldr.w	r3, [fp, #12]
                        break;
    e83c:	b.n	e710 <lfs_dir_fetchmatch+0x29c>
            off += lfs_tag_dsize(ptag);
            int err = lfs_bd_read(lfs,
                    NULL, &lfs->rcache, lfs->cfg->block_size,
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    e83e:	cmn.w	r0, #84	; 0x54
    e842:	beq.w	e704 <lfs_dir_fetchmatch+0x290>
    e846:	b.n	e744 <lfs_dir_fetchmatch+0x2d0>
            crc = lfs_crc(crc, &tag, sizeof(tag));
            tag = lfs_frombe32(tag) ^ ptag;

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    e848:	lsrs	r3, r6, #20
    e84a:	and.w	r3, r3, #1792	; 0x700
    e84e:	cmp.w	r3, #1280	; 0x500
    e852:	beq.n	e860 <lfs_dir_fetchmatch+0x3ec>
    e854:	ldr.w	r3, [fp, #12]
    e858:	movs	r2, #0
    e85a:	strb.w	r2, [fp, #22]
                        dir->off % lfs->cfg->prog_size == 0);
                break;
    e85e:	b.n	e710 <lfs_dir_fetchmatch+0x29c>
            tag = lfs_frombe32(tag) ^ ptag;

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
                        dir->off % lfs->cfg->prog_size == 0);
    e860:	ldr.w	r2, [sl, #104]	; 0x68
    e864:	ldr.w	r3, [fp, #12]
            crc = lfs_crc(crc, &tag, sizeof(tag));
            tag = lfs_frombe32(tag) ^ ptag;

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    e868:	ldr	r1, [r2, #24]
    e86a:	udiv	r2, r3, r1
    e86e:	mls	r2, r1, r2, r3
    e872:	cmp	r2, #0
    e874:	bne.n	e858 <lfs_dir_fetchmatch+0x3e4>
    e876:	movs	r2, #1
    e878:	b.n	e85a <lfs_dir_fetchmatch+0x3e6>
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e87a:	ldr.w	r3, [sl, #60]	; 0x3c
    e87e:	lsrs	r2, r3, #20
    e880:	tst.w	r2, #1792	; 0x700
    e884:	beq.n	e8a6 <lfs_dir_fetchmatch+0x432>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e886:	ldr.w	r4, [sl, #64]	; 0x40
    e88a:	ldr.w	r1, [fp]
    e88e:	cmp	r4, r1
    e890:	beq.n	e8d2 <lfs_dir_fetchmatch+0x45e>
    e892:	ldr.w	r2, [sl, #68]	; 0x44
    e896:	ldr.w	r0, [fp, #4]
    e89a:	cmp	r2, r0
    e89c:	beq.n	e8d2 <lfs_dir_fetchmatch+0x45e>
    e89e:	cmp	r4, r0
    e8a0:	beq.n	e8d2 <lfs_dir_fetchmatch+0x45e>
    e8a2:	cmp	r1, r2
    e8a4:	beq.n	e8d2 <lfs_dir_fetchmatch+0x45e>
                    besttag -= LFS_MKTAG(0, 1, 0);
                }
            }

            // found tag? or found best id?
            if (id) {
    e8a6:	ldr	r3, [sp, #132]	; 0x84
    e8a8:	cbz	r3, e8be <lfs_dir_fetchmatch+0x44a>
    e8aa:	ldr	r3, [sp, #40]	; 0x28
    e8ac:	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
    e8b0:	ldrh.w	r2, [fp, #20]
    e8b4:	cmp	r3, r2
    e8b6:	it	cs
    e8b8:	movcs	r3, r2
    e8ba:	ldr	r2, [sp, #132]	; 0x84
    e8bc:	strh	r3, [r2, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
    e8be:	ldr	r3, [sp, #40]	; 0x28
    e8c0:	cmp	r3, #0
    e8c2:	blt.n	e8f2 <lfs_dir_fetchmatch+0x47e>
    e8c4:	ldr	r0, [sp, #40]	; 0x28
    e8c6:	b.n	e744 <lfs_dir_fetchmatch+0x2d0>
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
                        NULL, &lfs->rcache, lfs->cfg->block_size,
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
    e8c8:	cmn.w	r0, #84	; 0x54
    e8cc:	beq.w	e704 <lfs_dir_fetchmatch+0x290>
    e8d0:	b.n	e744 <lfs_dir_fetchmatch+0x2d0>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    e8d2:	ldr	r2, [sp, #40]	; 0x28
    e8d4:	ubfx	r3, r3, #10, #10
    e8d8:	ubfx	r2, r2, #10, #10

        // consider what we have good enough
        if (dir->off > 0) {
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    e8dc:	cmp	r2, r3
    e8de:	beq.n	e912 <lfs_dir_fetchmatch+0x49e>
                    besttag |= 0x80000000;
                } else if (besttag != -1 &&
    e8e0:	ldr	r0, [sp, #40]	; 0x28
    e8e2:	adds	r4, r0, #1
    e8e4:	beq.n	e906 <lfs_dir_fetchmatch+0x492>
    e8e6:	cmp	r2, r3
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
                    besttag -= LFS_MKTAG(0, 1, 0);
    e8e8:	itt	hi
    e8ea:	subhi.w	r3, r0, #1024	; 0x400
    e8ee:	strhi	r3, [sp, #40]	; 0x28
    e8f0:	b.n	e8a6 <lfs_dir_fetchmatch+0x432>
    e8f2:	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
            }

            if (lfs_tag_isvalid(besttag)) {
                return besttag;
            } else if (lfs_tag_id(besttag) < dir->count) {
    e8f6:	ldrh.w	r2, [fp, #20]
                return LFS_ERR_NOENT;
    e8fa:	cmp	r2, r3
    e8fc:	ite	ls
    e8fe:	movls	r0, #0
    e900:	mvnhi.w	r0, #1
    e904:	b.n	e744 <lfs_dir_fetchmatch+0x2d0>
    e906:	movw	r3, #1023	; 0x3ff
                    besttag -= LFS_MKTAG(0, 1, 0);
                }
            }

            // found tag? or found best id?
            if (id) {
    e90a:	ldr	r2, [sp, #132]	; 0x84
    e90c:	cmp	r2, #0
    e90e:	bne.n	e8b0 <lfs_dir_fetchmatch+0x43c>
    e910:	b.n	e8f6 <lfs_dir_fetchmatch+0x482>
        // consider what we have good enough
        if (dir->off > 0) {
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
                    besttag |= 0x80000000;
    e912:	ldr	r3, [sp, #40]	; 0x28
    e914:	orr.w	r3, r3, #2147483648	; 0x80000000
    e918:	str	r3, [sp, #40]	; 0x28
    e91a:	ubfx	r3, r3, #10, #10
    e91e:	b.n	e90a <lfs_dir_fetchmatch+0x496>

0000e920 <lfs_fs_parent>:
    lfs_pair_fromle32(child);
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
}

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
    e920:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    parent->tail[1] = 1;
    e924:	movs	r3, #1
}

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    e926:	movs	r5, #0
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    e928:	ldr.w	sl, [pc, #116]	; e9a0 <lfs_fs_parent+0x80>
    e92c:	ldr.w	r9, [pc, #116]	; e9a4 <lfs_fs_parent+0x84>

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    parent->tail[1] = 1;
    e930:	str	r3, [r2, #28]
    lfs_pair_fromle32(child);
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
}

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
    e932:	sub	sp, #32
    e934:	mov	r4, r2
    e936:	mov	r6, r0
    e938:	mov	r8, r1
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    e93a:	str	r5, [r2, #24]
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e93c:	ldr	r7, [r4, #28]
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    e93e:	ldr	r3, [pc, #92]	; (e99c <lfs_fs_parent+0x7c>)
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e940:	adds	r7, #1
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    e942:	mov.w	lr, #0
    e946:	add.w	r2, r4, #24
    e94a:	mov	r1, r4
    e94c:	mov	r0, r6
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e94e:	beq.n	e986 <lfs_fs_parent+0x66>
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
    parent->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(parent->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    e950:	ldr	r7, [r6, #104]	; 0x68
    e952:	ldr	r7, [r7, #32]
    e954:	cmp.w	r5, r7, lsr #1
    e958:	bcs.n	e990 <lfs_fs_parent+0x70>
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    e95a:	stmia.w	sp, {r9, lr}
    e95e:	add	r7, sp, #20
    e960:	str	r7, [sp, #12]
    e962:	str.w	sl, [sp, #8]
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    e966:	ldr.w	r7, [r8]
    e96a:	str	r7, [sp, #24]
    e96c:	ldr.w	r7, [r8, #4]
    e970:	str	r6, [sp, #20]
    e972:	str	r7, [sp, #28]
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    e974:	bl	e474 <lfs_dir_fetchmatch>
    while (!lfs_pair_isnull(parent->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;
    e978:	adds	r5, #1
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
                    lfs, {pair[0], pair[1]}});
        if (tag && tag != LFS_ERR_NOENT) {
    e97a:	cbz	r0, e980 <lfs_fs_parent+0x60>
    e97c:	adds	r3, r0, #2
    e97e:	bne.n	e98a <lfs_fs_parent+0x6a>
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e980:	ldr	r3, [r4, #24]
    e982:	adds	r3, #1
    e984:	bne.n	e93c <lfs_fs_parent+0x1c>
        if (tag && tag != LFS_ERR_NOENT) {
            return tag;
        }
    }

    return LFS_ERR_NOENT;
    e986:	mvn.w	r0, #1
}
    e98a:	add	sp, #32
    e98c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    parent->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(parent->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
    e990:	mvn.w	r0, #83	; 0x53
            return tag;
        }
    }

    return LFS_ERR_NOENT;
}
    e994:	add	sp, #32
    e996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e99a:	nop
    e99c:	.word	0x7ff003ff
    e9a0:	.word	0x0000e429
    e9a4:	.word	0x20000008

0000e9a8 <lfs_fs_pred>:
    LFS_TRACE("lfs_fs_traverse -> %d", 0);
    return err;
}

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
    e9a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9ac:	mov	r6, r2
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    e9ae:	movs	r3, #0
    pdir->tail[1] = 1;
    e9b0:	movs	r2, #1
    LFS_TRACE("lfs_fs_traverse -> %d", 0);
    return err;
}

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
    e9b2:	sub	sp, #20
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    pdir->tail[1] = 1;
    e9b4:	mov	r4, r3
    LFS_TRACE("lfs_fs_traverse -> %d", 0);
    return err;
}

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
    e9b6:	mov	r9, r0
    e9b8:	mov	sl, r1
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    pdir->tail[1] = 1;
    e9ba:	str	r2, [r6, #28]
}

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    e9bc:	str	r3, [r6, #24]
    pdir->tail[1] = 1;
    lfs_block_t cycle = 0;
    e9be:	mov	r5, r3

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    e9c0:	mov	r8, r3

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
            return 0;
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
    e9c2:	add.w	fp, r6, #24
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e9c6:	ldr.w	lr, [r6, #28]
    e9ca:	cmp.w	lr, #4294967295
    e9ce:	beq.n	ea20 <lfs_fs_pred+0x78>
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    pdir->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(pdir->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    e9d0:	ldr.w	r7, [r9, #104]	; 0x68
    e9d4:	ldr	r7, [r7, #32]
    e9d6:	cmp.w	r5, r7, lsr #1

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    e9da:	mov.w	r3, #4294967295
    e9de:	mov	r2, fp
    e9e0:	mov	r1, r6
    e9e2:	mov	r0, r9
    while (!lfs_pair_isnull(pdir->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;
    e9e4:	add.w	r5, r5, #1
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
    pdir->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(pdir->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    e9e8:	bcs.n	ea32 <lfs_fs_pred+0x8a>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e9ea:	ldr.w	ip, [sl]
    e9ee:	cmp	ip, r4
    e9f0:	beq.n	ea2a <lfs_fs_pred+0x82>
    e9f2:	ldr.w	r7, [sl, #4]
    e9f6:	cmp	r7, lr
    e9f8:	beq.n	ea2a <lfs_fs_pred+0x82>
    e9fa:	cmp	r7, r4
    e9fc:	beq.n	ea2a <lfs_fs_pred+0x82>
    e9fe:	cmp	ip, lr
    ea00:	beq.n	ea2a <lfs_fs_pred+0x82>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    ea02:	mov.w	r4, #4294967295
    ea06:	str.w	r8, [sp, #12]
    ea0a:	str.w	r8, [sp, #8]
    ea0e:	str.w	r8, [sp, #4]
    ea12:	str	r4, [sp, #0]
    ea14:	bl	e474 <lfs_dir_fetchmatch>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
            return 0;
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
        if (err) {
    ea18:	cbnz	r0, ea24 <lfs_fs_pred+0x7c>
    ea1a:	ldr	r4, [r6, #24]
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    ea1c:	adds	r3, r4, #1
    ea1e:	bne.n	e9c6 <lfs_fs_pred+0x1e>
        if (err) {
            return err;
        }
    }

    return LFS_ERR_NOENT;
    ea20:	mvn.w	r0, #1
}
    ea24:	add	sp, #20
    ea26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
            return 0;
    ea2a:	movs	r0, #0
            return err;
        }
    }

    return LFS_ERR_NOENT;
}
    ea2c:	add	sp, #20
    ea2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pdir->tail[1] = 1;
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(pdir->tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
    ea32:	mvn.w	r0, #83	; 0x53
    ea36:	b.n	ea24 <lfs_fs_pred+0x7c>

0000ea38 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    ea38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea3c:	sub	sp, #92	; 0x5c
        } else {
            return 0;
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    ea3e:	ldr.w	r8, [pc, #488]	; ec28 <lfs_dir_traverse+0x1f0>
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    ea42:	ldrsh.w	r5, [sp, #152]	; 0x98
    ea46:	str	r5, [sp, #48]	; 0x30
    ea48:	ldrh.w	r5, [sp, #144]	; 0x90
    ea4c:	str	r5, [sp, #56]	; 0x38
    ea4e:	ldrh.w	r5, [sp, #148]	; 0x94
    ea52:	ldr	r4, [sp, #136]	; 0x88
    ea54:	str	r5, [sp, #68]	; 0x44
    ea56:	mov	r5, r3
                if (err) {
                    return err;
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    ea58:	ldr	r3, [sp, #48]	; 0x30
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    ea5a:	ldr	r6, [sp, #128]	; 0x80
    ea5c:	ldr	r7, [sp, #132]	; 0x84
    ea5e:	str	r0, [sp, #44]	; 0x2c
    ea60:	mov	sl, r2
                if (err) {
                    return err;
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    ea62:	lsls	r3, r3, #10
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    ea64:	ubfx	r2, r4, #10, #10
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    ea68:	mov	r9, r1
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    ea6a:	str	r2, [sp, #40]	; 0x28
        } else {
            return 0;
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    ea6c:	and.w	r8, r4, r8
                if (err) {
                    return err;
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    ea70:	str	r3, [sp, #52]	; 0x34
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
    ea72:	sbfx	r4, r5, #0, #10
    ea76:	cmp.w	r4, #4294967295
    ea7a:	ite	ne
    ea7c:	movne	r4, r5
    ea7e:	addeq	r4, r5, #1
    ea80:	ubfx	r3, r4, #0, #10
    ea84:	ldr.w	r2, [r9, #12]
    ea88:	add.w	r4, sl, #4
    ea8c:	add	r4, r3
    ea8e:	cmp	r4, r2
    ea90:	bcc.n	eb2c <lfs_dir_traverse+0xf4>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
            disk.block = dir->pair[0];
            disk.off = off+sizeof(lfs_tag_t);
            buffer = &disk;
            ptag = tag;
        } else if (attrcount > 0) {
    ea92:	cmp	r7, #0
    ea94:	ble.w	ec18 <lfs_dir_traverse+0x1e0>
            tag = attrs[0].tag;
    ea98:	ldr	r1, [r6, #0]
            buffer = attrs[0].buffer;
    ea9a:	ldr	r4, [r6, #4]
            disk.block = dir->pair[0];
            disk.off = off+sizeof(lfs_tag_t);
            buffer = &disk;
            ptag = tag;
        } else if (attrcount > 0) {
            tag = attrs[0].tag;
    ea9c:	str	r1, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
            attrs += 1;
            attrcount -= 1;
    ea9e:	subs	r7, #1
            buffer = &disk;
            ptag = tag;
        } else if (attrcount > 0) {
            tag = attrs[0].tag;
            buffer = attrs[0].buffer;
            attrs += 1;
    eaa0:	adds	r6, #8
        } else {
            return 0;
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    eaa2:	ldr	r3, [sp, #140]	; 0x8c
    eaa4:	eors	r3, r1
    eaa6:	ands.w	r3, r3, r8
    eaaa:	bne.n	ea72 <lfs_dir_traverse+0x3a>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
    eaac:	ldr	r2, [sp, #40]	; 0x28
    eaae:	cmp	r2, #0
    eab0:	bne.n	eb6a <lfs_dir_traverse+0x132>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    eab2:	ubfx	r3, r1, #20, #11
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    eab6:	cmp	r3, #0
    eab8:	beq.n	ea72 <lfs_dir_traverse+0x3a>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
    eaba:	movw	r2, #257	; 0x101
    eabe:	cmp	r3, r2
    eac0:	beq.w	ebce <lfs_dir_traverse+0x196>
                    fromid, fromid+1, toid-fromid+diff,
                    cb, data);
            if (err) {
                return err;
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
    eac4:	cmp.w	r3, #258	; 0x102
    eac8:	bne.n	ebac <lfs_dir_traverse+0x174>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    eaca:	ubfx	r3, r1, #0, #10
    eace:	cmp	r3, #0
    ead0:	beq.n	ea72 <lfs_dir_traverse+0x3a>
    ead2:	mov.w	fp, #0
    ead6:	str.w	r9, [sp, #60]	; 0x3c
    eada:	str.w	sl, [sp, #64]	; 0x40
    eade:	str	r6, [sp, #128]	; 0x80
    eae0:	adds	r4, #8
    eae2:	mov	r6, fp
    eae4:	ldr.w	r9, [sp, #48]	; 0x30
    eae8:	ldr.w	sl, [sp, #160]	; 0xa0
    eaec:	mov	fp, r5
    eaee:	ldr	r5, [sp, #156]	; 0x9c
    eaf0:	b.n	eafc <lfs_dir_traverse+0xc4>
    eaf2:	ldr	r1, [sp, #76]	; 0x4c
    eaf4:	ubfx	r2, r1, #0, #10
    eaf8:	cmp	r6, r2
    eafa:	bcs.n	ebc0 <lfs_dir_traverse+0x188>
                const struct lfs_attr *a = buffer;
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    eafc:	ldrb.w	lr, [r4, #-8]
    eb00:	ldr	r3, [r4, #0]
    eb02:	ldr.w	r2, [r4, #-4]
    eb06:	ubfx	r1, r1, #10, #10
    eb0a:	add.w	r0, r1, r9
    eb0e:	orr.w	r0, r3, r0, lsl #10
    eb12:	add.w	r1, lr, #768	; 0x300
    eb16:	orr.w	r1, r0, r1, lsl #20
    eb1a:	mov	r0, sl
    eb1c:	blx	r5
                    cb, data);
            if (err) {
                return err;
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    eb1e:	adds	r6, #1
    eb20:	adds	r4, #12
                const struct lfs_attr *a = buffer;
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
                if (err) {
    eb22:	cmp	r0, #0
    eb24:	beq.n	eaf2 <lfs_dir_traverse+0xba>
            if (err) {
                return err;
            }
        }
    }
}
    eb26:	add	sp, #92	; 0x5c
    eb28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
            off += lfs_tag_dsize(ptag);
            int err = lfs_bd_read(lfs,
    eb2c:	ldr	r0, [sp, #44]	; 0x2c
    eb2e:	ldr.w	r2, [r9]
    eb32:	str	r2, [sp, #0]
    eb34:	add	r1, sp, #76	; 0x4c
    eb36:	movs	r3, #4
    eb38:	str	r1, [sp, #8]
    eb3a:	mov	r2, r0
    eb3c:	str	r4, [sp, #4]
    eb3e:	str	r3, [sp, #12]
    eb40:	movs	r1, #0
    eb42:	adds	r0, #104	; 0x68
    eb44:	bl	e2c8 <lfs_bd_read.isra.15>
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
    eb48:	cmp	r0, #0
    eb4a:	bne.n	eb26 <lfs_dir_traverse+0xee>
    eb4c:	ldr	r3, [sp, #76]	; 0x4c
                return err;
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
            disk.block = dir->pair[0];
    eb4e:	ldr.w	r2, [r9]
    eb52:	str	r2, [sp, #80]	; 0x50
    eb54:	rev	r3, r3
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
                return err;
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
    eb56:	eors	r5, r3
    eb58:	orr.w	r5, r5, #2147483648	; 0x80000000
            disk.block = dir->pair[0];
            disk.off = off+sizeof(lfs_tag_t);
    eb5c:	adds	r3, r4, #4
    eb5e:	mov	sl, r4
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
                return err;
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
    eb60:	str	r5, [sp, #76]	; 0x4c
    eb62:	mov	r1, r5
            disk.block = dir->pair[0];
            disk.off = off+sizeof(lfs_tag_t);
    eb64:	str	r3, [sp, #84]	; 0x54
            buffer = &disk;
    eb66:	add	r4, sp, #80	; 0x50
    eb68:	b.n	eaa2 <lfs_dir_traverse+0x6a>

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
    eb6a:	add	r2, sp, #76	; 0x4c
    eb6c:	ldr	r1, [pc, #176]	; (ec20 <lfs_dir_traverse+0x1e8>)
    eb6e:	str	r1, [sp, #28]
    eb70:	str	r3, [sp, #24]
    eb72:	str	r3, [sp, #20]
    eb74:	str	r3, [sp, #16]
    eb76:	str	r3, [sp, #12]
    eb78:	str	r3, [sp, #8]
    eb7a:	str	r2, [sp, #32]
    eb7c:	stmia.w	sp, {r6, r7}
    eb80:	mov	r3, r5
    eb82:	mov	r2, sl
    eb84:	mov	r1, r9
    eb86:	ldr	r0, [sp, #44]	; 0x2c
    eb88:	bl	ea38 <lfs_dir_traverse>
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
    eb8c:	cmp	r0, #0
    eb8e:	blt.n	eb26 <lfs_dir_traverse+0xee>
                return filter;
            }

            if (filter) {
    eb90:	bne.w	ea72 <lfs_dir_traverse+0x3a>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
    eb94:	ldr	r1, [sp, #76]	; 0x4c
    eb96:	ldr	r2, [sp, #56]	; 0x38
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    eb98:	ubfx	r3, r1, #10, #10
            if (filter) {
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
    eb9c:	cmp	r2, r3
    eb9e:	bhi.w	ea72 <lfs_dir_traverse+0x3a>
    eba2:	ldr	r2, [sp, #68]	; 0x44
    eba4:	cmp	r2, r3
    eba6:	bls.w	ea72 <lfs_dir_traverse+0x3a>
    ebaa:	b.n	eab2 <lfs_dir_traverse+0x7a>
                if (err) {
                    return err;
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    ebac:	ldr	r3, [sp, #52]	; 0x34
    ebae:	ldr	r0, [sp, #160]	; 0xa0
    ebb0:	add	r1, r3
    ebb2:	mov	r2, r4
    ebb4:	ldr	r3, [sp, #156]	; 0x9c
    ebb6:	blx	r3
            if (err) {
    ebb8:	cmp	r0, #0
    ebba:	beq.w	ea72 <lfs_dir_traverse+0x3a>
    ebbe:	b.n	eb26 <lfs_dir_traverse+0xee>
    ebc0:	ldr.w	r9, [sp, #60]	; 0x3c
    ebc4:	ldr.w	sl, [sp, #64]	; 0x40
    ebc8:	ldr	r6, [sp, #128]	; 0x80
    ebca:	mov	r5, fp
    ebcc:	b.n	ea72 <lfs_dir_traverse+0x3a>

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
            uint16_t fromid = lfs_tag_size(tag);
    ebce:	ubfx	r0, r1, #0, #10
            uint16_t toid = lfs_tag_id(tag);
            int err = lfs_dir_traverse(lfs,
    ebd2:	ubfx	r3, r1, #10, #10
    ebd6:	ldr	r2, [sp, #48]	; 0x30
    ebd8:	str	r0, [sp, #16]
    ebda:	subs	r3, r3, r0
    ebdc:	add	r3, r2
    ebde:	ldr	r2, [sp, #160]	; 0xa0
    ebe0:	str	r2, [sp, #32]
    ebe2:	ldr	r2, [sp, #156]	; 0x9c
    ebe4:	str	r2, [sp, #28]
    ebe6:	ldr	r2, [pc, #60]	; (ec24 <lfs_dir_traverse+0x1ec>)
    ebe8:	str	r2, [sp, #8]
    ebea:	sxth	r3, r3
    ebec:	add.w	ip, r0, #1
    ebf0:	movs	r2, #0
    ebf2:	mov.w	lr, #536870912	; 0x20000000
    ebf6:	str	r3, [sp, #24]
    ebf8:	mov	r1, r4
    ebfa:	str.w	ip, [sp, #20]
    ebfe:	str.w	lr, [sp, #12]
    ec02:	str	r2, [sp, #4]
    ec04:	str	r2, [sp, #0]
    ec06:	mov.w	r3, #4294967295
    ec0a:	ldr	r0, [sp, #44]	; 0x2c
    ec0c:	bl	ea38 <lfs_dir_traverse>
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
                    cb, data);
            if (err) {
    ec10:	cmp	r0, #0
    ec12:	beq.w	ea72 <lfs_dir_traverse+0x3a>
    ec16:	b.n	eb26 <lfs_dir_traverse+0xee>
            tag = attrs[0].tag;
            buffer = attrs[0].buffer;
            attrs += 1;
            attrcount -= 1;
        } else {
            return 0;
    ec18:	movs	r0, #0
            if (err) {
                return err;
            }
        }
    }
}
    ec1a:	add	sp, #92	; 0x5c
    ec1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec20:	.word	0x0000e135
    ec24:	.word	0x600ffc00
    ec28:	.word	0x7ff00000

0000ec2c <lfs_dir_getslice>:
}

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    ec2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec30:	mov	sl, r1
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ec32:	ldr	r1, [r0, #60]	; 0x3c
/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    ec34:	ldr.w	r4, [sl, #16]

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    ec38:	ldr.w	r5, [sl, #12]
}

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    ec3c:	sub	sp, #36	; 0x24
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ec3e:	mov.w	r8, r1, lsr #20
    ec42:	ands.w	r8, r8, #1792	; 0x700
}

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    ec46:	mov	r9, r0
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    ec48:	str	r4, [sp, #28]
}

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    ec4a:	mov	r6, r2
    ec4c:	mov	fp, r3
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ec4e:	beq.n	ec70 <lfs_dir_getslice+0x44>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    ec50:	ldr	r3, [r0, #64]	; 0x40
    ec52:	ldr.w	r2, [sl]
    ec56:	cmp	r2, r3
    ec58:	beq.n	ed2e <lfs_dir_getslice+0x102>
    ec5a:	ldr	r7, [r0, #68]	; 0x44
    ec5c:	ldr.w	r0, [sl, #4]
    ec60:	cmp	r0, r7
    ec62:	beq.n	ed2e <lfs_dir_getslice+0x102>
    ec64:	cmp	r0, r3
    ec66:	beq.n	ed2e <lfs_dir_getslice+0x102>
    ec68:	cmp	r7, r2
    ec6a:	beq.n	ed2e <lfs_dir_getslice+0x102>
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    lfs_stag_t gdiff = 0;
    ec6c:	mov.w	r8, #0
    ec70:	lsrs	r3, r6, #10
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    ec72:	ubfx	r3, r3, #0, #10
    ec76:	str	r3, [sp, #20]
    ec78:	add.w	r3, r9, #104	; 0x68
    ec7c:	str	r3, [sp, #16]
    ec7e:	b.n	ec98 <lfs_dir_getslice+0x6c>
static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
}

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
    ec80:	lsrs	r2, r4, #20
            return err;
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;

        if (lfs_tag_id(gmask) != 0 &&
    ec82:	and.w	r1, r2, #1792	; 0x700
    ec86:	cmp.w	r1, #1024	; 0x400
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
    ec8a:	rsb	r1, r8, fp
            return err;
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;

        if (lfs_tag_id(gmask) != 0 &&
    ec8e:	beq.n	ed4c <lfs_dir_getslice+0x120>

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
    ec90:	eors	r1, r4
    ec92:	ands	r1, r6
    ec94:	beq.n	ecf6 <lfs_dir_getslice+0xca>
    ec96:	mov	r4, r3
static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
    return !(tag & 0x80000000);
}

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
    ec98:	sbfx	r7, r4, #0, #10
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    ec9c:	cmp.w	r7, #4294967295
    eca0:	ite	ne
    eca2:	movne	r3, r4
    eca4:	addeq	r3, r4, #1
    eca6:	ubfx	r3, r3, #0, #10
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    ecaa:	add.w	r1, r3, #8
    ecae:	mvn.w	r2, #3
    ecb2:	cmp	r5, r1
    ecb4:	sub.w	r2, r2, r3
    ecb8:	bcc.n	ed78 <lfs_dir_getslice+0x14c>
        off -= lfs_tag_dsize(ntag);
    ecba:	add	r5, r2
        lfs_tag_t tag = ntag;
        int err = lfs_bd_read(lfs,
    ecbc:	movs	r2, #4
    ecbe:	ldr.w	r3, [sl]
    ecc2:	str	r2, [sp, #12]
    ecc4:	add	r2, sp, #28
    ecc6:	str	r2, [sp, #8]
    ecc8:	str	r3, [sp, #0]
    ecca:	str	r5, [sp, #4]
    eccc:	movs	r3, #4
    ecce:	mov	r2, r9
    ecd0:	movs	r1, #0
    ecd2:	ldr	r0, [sp, #16]
    ecd4:	bl	e2c8 <lfs_bd_read.isra.15>
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
    ecd8:	cbnz	r0, ed28 <lfs_dir_getslice+0xfc>
    ecda:	ldr	r3, [sp, #28]
            return err;
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;

        if (lfs_tag_id(gmask) != 0 &&
    ecdc:	ldr	r2, [sp, #20]
    ecde:	rev	r3, r3
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
            return err;
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
    ece0:	eors	r3, r4
    ece2:	bic.w	r3, r3, #2147483648	; 0x80000000
    ece6:	str	r3, [sp, #28]

        if (lfs_tag_id(gmask) != 0 &&
    ece8:	cmp	r2, #0
    ecea:	bne.n	ec80 <lfs_dir_getslice+0x54>
    ecec:	rsb	r1, r8, fp

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
    ecf0:	eors	r1, r4
    ecf2:	ands	r1, r6
    ecf4:	bne.n	ec96 <lfs_dir_getslice+0x6a>
            if (lfs_tag_isdelete(tag)) {
    ecf6:	adds	r7, #1
    ecf8:	beq.n	ed78 <lfs_dir_getslice+0x14c>
                return LFS_ERR_NOENT;
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
            err = lfs_bd_read(lfs,
    ecfa:	ldr.w	r2, [sl]
    ecfe:	ldr	r3, [sp, #72]	; 0x48
    ed00:	str	r2, [sp, #0]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    ed02:	ldr	r2, [sp, #80]	; 0x50
    ed04:	ldr	r0, [sp, #16]
    ed06:	ubfx	r6, r4, #0, #10
    ed0a:	cmp	r6, r2
    ed0c:	add.w	r3, r3, #4
    ed10:	it	cs
    ed12:	movcs	r6, r2
    ed14:	add	r5, r3
    ed16:	ldr	r3, [sp, #76]	; 0x4c
    ed18:	str	r3, [sp, #8]
    ed1a:	mov	r2, r9
    ed1c:	str	r6, [sp, #12]
    ed1e:	mov	r3, r6
    ed20:	str	r5, [sp, #4]
    ed22:	bl	e2c8 <lfs_bd_read.isra.15>
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
            if (err) {
    ed26:	cbz	r0, ed82 <lfs_dir_getslice+0x156>
            return tag + gdiff;
        }
    }

    return LFS_ERR_NOENT;
}
    ed28:	add	sp, #36	; 0x24
    ed2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    lfs_stag_t gdiff = 0;

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    ed2e:	lsrs	r3, r6, #10
    ed30:	ubfx	r2, r3, #0, #10
    ed34:	cbz	r2, ed74 <lfs_dir_getslice+0x148>
            lfs_tag_id(gmask) != 0 &&
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
    ed36:	ldr	r2, [pc, #96]	; (ed98 <lfs_dir_getslice+0x16c>)
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    lfs_stag_t gdiff = 0;

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
            lfs_tag_id(gmask) != 0 &&
    ed38:	ubfx	r1, r1, #10, #10
    ed3c:	ubfx	r8, fp, #10, #10
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
    ed40:	cmp	r8, r1
    ed42:	ite	cs
    ed44:	movcs	r8, r2
    ed46:	movcc.w	r8, #0
    ed4a:	b.n	ec72 <lfs_dir_getslice+0x46>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;

        if (lfs_tag_id(gmask) != 0 &&
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    ed4c:	ubfx	lr, r1, #10, #10
    ed50:	ubfx	r0, r4, #10, #10
    ed54:	cmp	lr, r0
    ed56:	bcc.n	ec90 <lfs_dir_getslice+0x64>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
    ed58:	ldr	r0, [pc, #64]	; (ed9c <lfs_dir_getslice+0x170>)
    ed5a:	ands	r0, r1
    ed5c:	orr.w	r1, r0, #1073741824	; 0x40000000
    ed60:	orr.w	r1, r1, #1048576	; 0x100000
    ed64:	cmp	r1, r4
    ed66:	beq.n	ed78 <lfs_dir_getslice+0x14c>
                // found where we were created
                return LFS_ERR_NOENT;
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    ed68:	sxtb	r2, r2
    ed6a:	add.w	r8, r8, r2, lsl #10
    ed6e:	rsb	r1, r8, fp
    ed72:	b.n	ecf0 <lfs_dir_getslice+0xc4>
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    lfs_off_t off = dir->off;
    lfs_tag_t ntag = dir->etag;
    lfs_stag_t gdiff = 0;
    ed74:	mov	r8, r2
    ed76:	b.n	ec72 <lfs_dir_getslice+0x46>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
                // found where we were created
                return LFS_ERR_NOENT;
    ed78:	mvn.w	r0, #1
            return tag + gdiff;
        }
    }

    return LFS_ERR_NOENT;
}
    ed7c:	add	sp, #36	; 0x24
    ed7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
            if (err) {
                return err;
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
    ed82:	ldr	r3, [sp, #80]	; 0x50
    ed84:	subs	r2, r3, r6
    ed86:	ldr	r3, [sp, #76]	; 0x4c
    ed88:	mov	r1, r0
    ed8a:	adds	r0, r3, r6
    ed8c:	bl	14e3c <memset>

            return tag + gdiff;
    ed90:	add.w	r0, r8, r4
    ed94:	b.n	ed28 <lfs_dir_getslice+0xfc>
    ed96:	nop
    ed98:	.word	0xfffffc00
    ed9c:	.word	0x000ffc00

0000eda0 <lfs_dir_getgstate>:
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
    eda0:	push	{r4, r5, r6, lr}
    eda2:	sub	sp, #32
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    eda4:	movs	r3, #0
    eda6:	movs	r6, #12
    eda8:	add	r5, sp, #20
    edaa:	stmia.w	sp, {r3, r5, r6}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
    edae:	mov	r4, r2
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    edb0:	ldr	r3, [pc, #44]	; (ede0 <lfs_dir_getgstate+0x40>)
    edb2:	ldr	r2, [pc, #48]	; (ede4 <lfs_dir_getgstate+0x44>)
    edb4:	bl	ec2c <lfs_dir_getslice>
static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
    edb8:	cmp	r0, #0
    edba:	blt.n	edd8 <lfs_dir_getgstate+0x38>
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    edbc:	ldr	r6, [r4, #0]
    edbe:	ldr	r5, [r4, #4]
    edc0:	ldr	r0, [r4, #8]
    edc2:	ldr	r1, [sp, #20]
    edc4:	ldr	r2, [sp, #24]
    edc6:	ldr	r3, [sp, #28]
    edc8:	eors	r1, r6
    edca:	eors	r2, r5
    edcc:	eors	r3, r0
    edce:	stmia.w	r4, {r1, r2, r3}
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
        lfs_gstate_xor(gstate, &temp);
    }

    return 0;
    edd2:	movs	r0, #0
}
    edd4:	add	sp, #32
    edd6:	pop	{r4, r5, r6, pc}
static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
    edd8:	adds	r3, r0, #2
    edda:	beq.n	edd2 <lfs_dir_getgstate+0x32>
        lfs_gstate_fromle32(&temp);
        lfs_gstate_xor(gstate, &temp);
    }

    return 0;
}
    eddc:	add	sp, #32
    edde:	pop	{r4, r5, r6, pc}
    ede0:	.word	0x7ff0000c
    ede4:	.word	0x7ff00000

0000ede8 <lfs_dir_find>:
    // found a match!
    return LFS_CMP_EQ;
}

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
    ede8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edec:	sub	sp, #52	; 0x34
    edee:	mov	r7, r0
    edf0:	str	r2, [sp, #24]
    // we reduce path to a single name if we can find it
    const char *name = *path;
    edf2:	ldr	r2, [r2, #0]
    edf4:	str	r2, [sp, #20]
    // found a match!
    return LFS_CMP_EQ;
}

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
    edf6:	mov	r6, r1
    // we reduce path to a single name if we can find it
    const char *name = *path;
    if (id) {
    edf8:	mov	r2, r3
    edfa:	str	r3, [sp, #28]
    edfc:	cbz	r3, ee04 <lfs_dir_find+0x1c>
        *id = 0x3ff;
    edfe:	movw	r3, #1023	; 0x3ff
    ee02:	strh	r3, [r2, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
    dir->tail[0] = lfs->root[0];
    ee04:	ldr	r2, [r7, #32]
    dir->tail[1] = lfs->root[1];
    ee06:	ldr	r3, [r7, #36]	; 0x24
    if (id) {
        *id = 0x3ff;
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
    ee08:	ldr.w	r8, [pc, #340]	; ef60 <lfs_dir_find+0x178>
    dir->tail[0] = lfs->root[0];
    ee0c:	str	r2, [r6, #24]
    dir->tail[1] = lfs->root[1];
    ee0e:	str	r3, [r6, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
    ee10:	ldr	r4, [sp, #20]
    ee12:	ldr	r1, [pc, #320]	; (ef54 <lfs_dir_find+0x16c>)
    ee14:	mov	r0, r4
    ee16:	bl	15a20 <strspn>
    ee1a:	add	r4, r0
    ee1c:	mov	r9, r0
        lfs_size_t namelen = strcspn(name, "/");
    ee1e:	ldr	r1, [pc, #308]	; (ef54 <lfs_dir_find+0x16c>)
    ee20:	mov	r0, r4
    ee22:	bl	15798 <strcspn>

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    ee26:	cmp	r0, #1

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
        lfs_size_t namelen = strcspn(name, "/");
    ee28:	mov	r5, r0

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    ee2a:	beq.n	ef1a <lfs_dir_find+0x132>
    ee2c:	cmp	r0, #2
    ee2e:	beq.n	ef2a <lfs_dir_find+0x142>
            name += namelen;
            goto nextname;
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
    ee30:	adds	r3, r4, r5
    ee32:	str	r3, [sp, #20]
    ee34:	mov	fp, r3
        lfs_size_t sufflen;
        int depth = 1;
    ee36:	mov.w	r9, #1
    ee3a:	mov	sl, r4
        while (true) {
            suffix += strspn(suffix, "/");
    ee3c:	ldr	r1, [pc, #276]	; (ef54 <lfs_dir_find+0x16c>)
    ee3e:	mov	r0, fp
    ee40:	bl	15a20 <strspn>
    ee44:	add	fp, r0
            sufflen = strcspn(suffix, "/");
    ee46:	mov	r0, fp
    ee48:	ldr	r1, [pc, #264]	; (ef54 <lfs_dir_find+0x16c>)
    ee4a:	bl	15798 <strcspn>
            if (sufflen == 0) {
    ee4e:	mov	r4, r0
    ee50:	cbz	r0, ee7a <lfs_dir_find+0x92>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
    ee52:	cmp	r0, #2
    ee54:	beq.n	ee5e <lfs_dir_find+0x76>
                if (depth == 0) {
                    name = suffix + sufflen;
                    goto nextname;
                }
            } else {
                depth += 1;
    ee56:	add.w	r9, r9, #1
            }

            suffix += sufflen;
    ee5a:	add	fp, r4
        }
    ee5c:	b.n	ee3c <lfs_dir_find+0x54>
            sufflen = strcspn(suffix, "/");
            if (sufflen == 0) {
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
    ee5e:	mov	r2, r0
    ee60:	ldr	r1, [pc, #244]	; (ef58 <lfs_dir_find+0x170>)
    ee62:	mov	r0, fp
    ee64:	bl	14d10 <memcmp>
    ee68:	cmp	r0, #0
    ee6a:	bne.n	ee56 <lfs_dir_find+0x6e>
                depth -= 1;
                if (depth == 0) {
    ee6c:	subs.w	r9, r9, #1
    ee70:	bne.n	ee5a <lfs_dir_find+0x72>
                    name = suffix + sufflen;
    ee72:	add.w	r3, fp, #2
    ee76:	str	r3, [sp, #20]
                    goto nextname;
    ee78:	b.n	ee10 <lfs_dir_find+0x28>
    ee7a:	mov	r4, sl

            suffix += sufflen;
        }

        // found path
        if (name[0] == '\0') {
    ee7c:	ldrb	r3, [r4, #0]
    ee7e:	cmp	r3, #0
    ee80:	beq.n	eeea <lfs_dir_find+0x102>

        // update what we've found so far
        *path = name;

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    ee82:	ubfx	r3, r8, #20, #11
        if (name[0] == '\0') {
            return tag;
        }

        // update what we've found so far
        *path = name;
    ee86:	ldr	r2, [sp, #24]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    ee88:	cmp	r3, #2
        if (name[0] == '\0') {
            return tag;
        }

        // update what we've found so far
        *path = name;
    ee8a:	str	r4, [r2, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    ee8c:	bne.n	ef4e <lfs_dir_find+0x166>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    ee8e:	ubfx	r8, r8, #10, #10
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
            return LFS_ERR_NOTDIR;
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
    ee92:	movw	r3, #1023	; 0x3ff
    ee96:	cmp	r8, r3
    ee98:	bne.n	eef2 <lfs_dir_find+0x10a>
    ee9a:	add.w	r9, r6, #24
    ee9e:	add.w	fp, sp, #36	; 0x24
    eea2:	ldr.w	sl, [pc, #192]	; ef64 <lfs_dir_find+0x17c>
    eea6:	ldr.w	r8, [sp, #28]
    eeaa:	b.n	eeb4 <lfs_dir_find+0xcc>
                        lfs, name, namelen});
            if (tag < 0) {
                return tag;
            }

            if (tag) {
    eeac:	bne.n	ef40 <lfs_dir_find+0x158>
                break;
            }

            if (!dir->split) {
    eeae:	ldrb	r3, [r6, #23]
    eeb0:	cmp	r3, #0
    eeb2:	beq.n	ef44 <lfs_dir_find+0x15c>
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
    eeb4:	movs	r1, #47	; 0x2f
    eeb6:	mov	r0, r4
    eeb8:	bl	15330 <strchr>
            lfs_pair_fromle32(dir->tail);
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    eebc:	cmp	r0, #0
    eebe:	ite	eq
    eec0:	moveq	r3, r8
    eec2:	movne	r3, #0
    eec4:	str	r3, [sp, #4]
    eec6:	str.w	fp, [sp, #12]
    eeca:	str.w	sl, [sp, #8]
    eece:	str	r5, [sp, #0]
    eed0:	mov.w	r3, #2013265920	; 0x78000000
    eed4:	mov	r2, r9
    eed6:	mov	r1, r6
    eed8:	mov	r0, r7
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
    eeda:	str	r7, [sp, #36]	; 0x24
    eedc:	str	r4, [sp, #40]	; 0x28
    eede:	str	r5, [sp, #44]	; 0x2c
            lfs_pair_fromle32(dir->tail);
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    eee0:	bl	e474 <lfs_dir_fetchmatch>
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
                        lfs, name, namelen});
            if (tag < 0) {
    eee4:	cmp	r0, #0
    eee6:	bge.n	eeac <lfs_dir_find+0xc4>
    eee8:	mov	r8, r0
            lfs_pair_fromle32(dir->tail);
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    eeea:	mov	r0, r8
        }

        // to next name
        name += namelen;
    }
}
    eeec:	add	sp, #52	; 0x34
    eeee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    eef2:	mov.w	r3, r8, lsl #10
    eef6:	movs	r2, #8
    eef8:	orr.w	r3, r3, #536870912	; 0x20000000
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
    eefc:	add.w	r9, r6, #24
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    ef00:	orrs	r3, r2
    ef02:	str	r0, [sp, #0]
    ef04:	str	r2, [sp, #8]
    ef06:	str.w	r9, [sp, #4]
    ef0a:	ldr	r2, [pc, #80]	; (ef5c <lfs_dir_find+0x174>)
    ef0c:	mov	r1, r6
    ef0e:	mov	r0, r7
    ef10:	bl	ec2c <lfs_dir_getslice>

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
            if (res < 0) {
    ef14:	cmp	r0, #0
    ef16:	bge.n	ee9e <lfs_dir_find+0xb6>
    ef18:	b.n	eeec <lfs_dir_find+0x104>
        // skip slashes
        name += strspn(name, "/");
        lfs_size_t namelen = strcspn(name, "/");

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    ef1a:	ldr	r3, [sp, #20]
    ef1c:	ldrb.w	r3, [r3, r9]
    ef20:	cmp	r3, #46	; 0x2e
    ef22:	bne.n	ee30 <lfs_dir_find+0x48>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
            name += namelen;
    ef24:	adds	r3, r4, r5
    ef26:	str	r3, [sp, #20]
            goto nextname;
    ef28:	b.n	ee10 <lfs_dir_find+0x28>
        name += strspn(name, "/");
        lfs_size_t namelen = strcspn(name, "/");

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
    ef2a:	mov	r2, r0
    ef2c:	ldr	r1, [pc, #40]	; (ef58 <lfs_dir_find+0x170>)
    ef2e:	mov	r0, r4
    ef30:	bl	14d10 <memcmp>
    ef34:	cmp	r0, #0
    ef36:	bne.w	ee30 <lfs_dir_find+0x48>
            name += namelen;
    ef3a:	adds	r3, r4, r5
    ef3c:	str	r3, [sp, #20]
    ef3e:	b.n	ee10 <lfs_dir_find+0x28>
    ef40:	mov	r8, r0
    ef42:	b.n	ee10 <lfs_dir_find+0x28>
            if (tag) {
                break;
            }

            if (!dir->split) {
                return LFS_ERR_NOENT;
    ef44:	mvn.w	r0, #1
        }

        // to next name
        name += namelen;
    }
}
    ef48:	add	sp, #52	; 0x34
    ef4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        // update what we've found so far
        *path = name;

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
            return LFS_ERR_NOTDIR;
    ef4e:	mvn.w	r0, #19
    ef52:	b.n	eeec <lfs_dir_find+0x104>
    ef54:	.word	0x00019334
    ef58:	.word	0x0001906c
    ef5c:	.word	0x700ffc00
    ef60:	.word	0x002ffc00
    ef64:	.word	0x0000f70d

0000ef68 <lfs_dir_getinfo>:

    return 0;
}

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
    ef68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (id == 0x3ff) {
    ef6c:	movw	r4, #1023	; 0x3ff
    ef70:	cmp	r2, r4

    return 0;
}

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
    ef72:	sub	sp, #24
    if (id == 0x3ff) {
    ef74:	beq.n	efe4 <lfs_dir_getinfo+0x7c>
    ef76:	mov	r5, r3
        strcpy(info->name, "/");
        info->type = LFS_TYPE_DIR;
        return 0;
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
    ef78:	ldr	r3, [r0, #108]	; 0x6c
    ef7a:	mov	r4, r2
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    ef7c:	lsls	r4, r4, #10
        strcpy(info->name, "/");
        info->type = LFS_TYPE_DIR;
        return 0;
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
    ef7e:	adds	r3, #1
    ef80:	orrs	r3, r4
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    ef82:	ubfx	r6, r3, #0, #10
        info->type = LFS_TYPE_DIR;
        return 0;
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    ef86:	add.w	lr, r5, #8
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    ef8a:	str	r6, [sp, #8]
    ef8c:	movs	r6, #0
    ef8e:	ldr	r2, [pc, #112]	; (f000 <lfs_dir_getinfo+0x98>)
    ef90:	stmia.w	sp, {r6, lr}
    ef94:	mov	r7, r0
    ef96:	mov	r8, r1
    ef98:	bl	ec2c <lfs_dir_getslice>
        return 0;
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    if (tag < 0) {
    ef9c:	cmp	r0, #0
    ef9e:	blt.n	efde <lfs_dir_getinfo+0x76>
        return (int)tag;
    }

    info->type = lfs_tag_type3(tag);
    efa0:	lsrs	r0, r0, #20
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    efa2:	orr.w	r3, r4, #536870912	; 0x20000000
    efa6:	add	r2, sp, #16
    efa8:	movs	r4, #8
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    if (tag < 0) {
        return (int)tag;
    }

    info->type = lfs_tag_type3(tag);
    efaa:	strb	r0, [r5, #0]
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    efac:	orrs	r3, r4
    efae:	str	r2, [sp, #4]
    efb0:	str	r6, [sp, #0]
    efb2:	mov	r1, r8
    efb4:	mov	r0, r7
    efb6:	str	r4, [sp, #8]
    efb8:	ldr	r2, [pc, #72]	; (f004 <lfs_dir_getinfo+0x9c>)
    efba:	bl	ec2c <lfs_dir_getslice>
    info->type = lfs_tag_type3(tag);

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
    if (tag < 0) {
    efbe:	cmp	r0, #0
    efc0:	blt.n	efde <lfs_dir_getinfo+0x76>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    efc2:	lsrs	r3, r0, #20
    if (tag < 0) {
        return (int)tag;
    }
    lfs_ctz_fromle32(&ctz);

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    efc4:	movw	r2, #514	; 0x202
    efc8:	cmp	r3, r2
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    efca:	uxth	r1, r3
    if (tag < 0) {
        return (int)tag;
    }
    lfs_ctz_fromle32(&ctz);

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    efcc:	beq.n	eff6 <lfs_dir_getinfo+0x8e>
        info->size = ctz.size;
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    efce:	movw	r3, #513	; 0x201
    efd2:	cmp	r1, r3
        info->size = lfs_tag_size(tag);
    efd4:	itt	eq
    efd6:	ubfxeq	r0, r0, #0, #10
    efda:	streq	r0, [r5, #4]
    }

    return 0;
    efdc:	mov	r0, r6
}
    efde:	add	sp, #24
    efe0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
    if (id == 0x3ff) {
        // special case for root
        strcpy(info->name, "/");
    efe4:	ldr	r1, [pc, #32]	; (f008 <lfs_dir_getinfo+0xa0>)
    efe6:	ldrh	r1, [r1, #0]
    efe8:	strh	r1, [r3, #8]
        info->type = LFS_TYPE_DIR;
    efea:	movs	r2, #2
        return 0;
    efec:	movs	r0, #0
static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
    if (id == 0x3ff) {
        // special case for root
        strcpy(info->name, "/");
        info->type = LFS_TYPE_DIR;
    efee:	strb	r2, [r3, #0]
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        info->size = lfs_tag_size(tag);
    }

    return 0;
}
    eff0:	add	sp, #24
    eff2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return (int)tag;
    }
    lfs_ctz_fromle32(&ctz);

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
        info->size = ctz.size;
    eff6:	ldr	r3, [sp, #20]
    eff8:	str	r3, [r5, #4]
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        info->size = lfs_tag_size(tag);
    }

    return 0;
    effa:	mov	r0, r6
    effc:	b.n	efde <lfs_dir_getinfo+0x76>
    effe:	nop
    f000:	.word	0x780ffc00
    f004:	.word	0x700ffc00
    f008:	.word	0x00019334

0000f00c <lfs_ctz_traverse.part.19>:
        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
    }
}

static int lfs_ctz_traverse(lfs_t *lfs,
    f00c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f010:	mov	r9, r0
    f012:	sub	sp, #28


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    f014:	ldr	r0, [r0, #104]	; 0x68
        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
    }
}

static int lfs_ctz_traverse(lfs_t *lfs,
    f016:	ldr	r7, [sp, #64]	; 0x40


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    f018:	ldr	r0, [r0, #28]
        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
    }
}

static int lfs_ctz_traverse(lfs_t *lfs,
    f01a:	ldr	r6, [sp, #68]	; 0x44
    f01c:	ldr	r5, [sp, #72]	; 0x48


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    f01e:	sub.w	r8, r0, #8
        int (*cb)(void*, lfs_block_t), void *data) {
    if (size == 0) {
        return 0;
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    f022:	subs	r7, #1
        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
    }
}

static int lfs_ctz_traverse(lfs_t *lfs,
    f024:	mov	sl, r1
    f026:	mov	fp, r2
    f028:	mov	r4, r3

/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    f02a:	udiv	r0, r7, r8
    if (i == 0) {
    f02e:	cmp	r0, #0
    f030:	beq.n	f0a0 <lfs_ctz_traverse.part.19+0x94>
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
    f032:	subs	r0, #1
    f034:	bl	14310 <__popcountsi2>
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    f038:	adds	r0, #2
    f03a:	sub.w	r7, r7, r0, lsl #2
    f03e:	udiv	r8, r7, r8
    f042:	add.w	r9, r9, #104	; 0x68
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});

    while (true) {
        int err = cb(data, head);
    f046:	mov	r1, r4
    f048:	mov	r0, r5
    f04a:	blx	r6
        if (err) {
    f04c:	cbnz	r0, f09a <lfs_ctz_traverse.part.19+0x8e>
            return err;
        }

        if (index == 0) {
    f04e:	cmp.w	r8, #0
    f052:	beq.n	f098 <lfs_ctz_traverse.part.19+0x8c>
            return 0;
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
    f054:	and.w	r7, r8, #1
    f058:	rsb	r7, r7, #2
        err = lfs_bd_read(lfs,
    f05c:	add	r2, sp, #16
                pcache, rcache, count*sizeof(head),
                head, 0, &heads, count*sizeof(head));
    f05e:	lsls	r3, r7, #2
            return 0;
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
        err = lfs_bd_read(lfs,
    f060:	str	r0, [sp, #4]
    f062:	str	r2, [sp, #8]
    f064:	str	r4, [sp, #0]
    f066:	str	r3, [sp, #12]
    f068:	mov	r2, fp
    f06a:	mov	r1, sl
    f06c:	mov	r0, r9
    f06e:	bl	e2c8 <lfs_bd_read.isra.15>
                pcache, rcache, count*sizeof(head),
                head, 0, &heads, count*sizeof(head));
        heads[0] = lfs_fromle32(heads[0]);
        heads[1] = lfs_fromle32(heads[1]);
        if (err) {
    f072:	cbnz	r0, f09a <lfs_ctz_traverse.part.19+0x8e>
    f074:	mov	r3, r0
    f076:	subs	r4, r7, #1
    f078:	b.n	f082 <lfs_ctz_traverse.part.19+0x76>
            return err;
        }

        for (int i = 0; i < count-1; i++) {
            err = cb(data, heads[i]);
    f07a:	ldr	r1, [sp, #16]
    f07c:	blx	r6
        heads[1] = lfs_fromle32(heads[1]);
        if (err) {
            return err;
        }

        for (int i = 0; i < count-1; i++) {
    f07e:	movs	r3, #1
            err = cb(data, heads[i]);
            if (err) {
    f080:	cbnz	r0, f09a <lfs_ctz_traverse.part.19+0x8e>
        heads[1] = lfs_fromle32(heads[1]);
        if (err) {
            return err;
        }

        for (int i = 0; i < count-1; i++) {
    f082:	cmp	r3, r4
            err = cb(data, heads[i]);
    f084:	mov	r0, r5
        heads[1] = lfs_fromle32(heads[1]);
        if (err) {
            return err;
        }

        for (int i = 0; i < count-1; i++) {
    f086:	blt.n	f07a <lfs_ctz_traverse.part.19+0x6e>
            if (err) {
                return err;
            }
        }

        head = heads[count-1];
    f088:	add	r3, sp, #24
    f08a:	add.w	r4, r3, r4, lsl #2
        index -= count;
    f08e:	rsb	r8, r7, r8
            if (err) {
                return err;
            }
        }

        head = heads[count-1];
    f092:	ldr.w	r4, [r4, #-8]
    f096:	b.n	f046 <lfs_ctz_traverse.part.19+0x3a>
        if (err) {
            return err;
        }

        if (index == 0) {
            return 0;
    f098:	mov	r0, r8
        }

        head = heads[count-1];
        index -= count;
    }
}
    f09a:	add	sp, #28
    f09c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    if (i == 0) {
    f0a0:	mov	r8, r0
    f0a2:	b.n	f042 <lfs_ctz_traverse.part.19+0x36>

0000f0a4 <lfs_ctz_find.constprop.24>:
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    *off = size - b*i - 4*lfs_popc(i);
    return i;
}

static int lfs_ctz_find(lfs_t *lfs,
    f0a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0a8:	sub	sp, #28
    f0aa:	str	r2, [sp, #20]
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
    if (size == 0) {
    f0ac:	cmp	r3, #0
    f0ae:	beq.n	f16a <lfs_ctz_find.constprop.24+0xc6>


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    f0b0:	ldr	r2, [r0, #104]	; 0x68
    f0b2:	ldr	r2, [r2, #28]
    f0b4:	mov	r7, r0
        *block = LFS_BLOCK_NULL;
        *off = 0;
        return 0;
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    f0b6:	subs	r4, r3, #1


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    f0b8:	sub.w	r9, r2, #8
    f0bc:	mov	r8, r1
    lfs_off_t i = size / b;
    f0be:	udiv	r0, r4, r9
    if (i == 0) {
    f0c2:	cmp	r0, #0
    f0c4:	beq.n	f13a <lfs_ctz_find.constprop.24+0x96>
    f0c6:	subs	r0, #1
    f0c8:	bl	14310 <__popcountsi2>
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    f0cc:	adds	r0, #2

/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    f0ce:	ldr	r3, [sp, #64]	; 0x40
    f0d0:	udiv	r6, r3, r9
    if (i == 0) {
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    f0d4:	sub.w	r5, r4, r0, lsl #2
    f0d8:	udiv	r5, r5, r9
/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    if (i == 0) {
    f0dc:	cbnz	r6, f144 <lfs_ctz_find.constprop.24+0xa0>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    lfs_off_t target = lfs_ctz_index(lfs, &pos);

    while (current > target) {
    f0de:	cmp	r5, r6
    f0e0:	bls.n	f17e <lfs_ctz_find.constprop.24+0xda>
    f0e2:	adds	r7, #104	; 0x68
    f0e4:	add.w	fp, sp, #20
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
    f0e8:	mov.w	sl, #4
        head = lfs_fromle32(head);
        if (err) {
            return err;
        }

        current -= 1 << skip;
    f0ec:	mov.w	r9, #1
    f0f0:	b.n	f0f6 <lfs_ctz_find.constprop.24+0x52>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    lfs_off_t target = lfs_ctz_index(lfs, &pos);

    while (current > target) {
    f0f2:	cmp	r5, r6
    f0f4:	bls.n	f17e <lfs_ctz_find.constprop.24+0xda>
}

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
    f0f6:	subs	r3, r5, r6

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
    f0f8:	rbit	r4, r5
}

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
    f0fc:	clz	r3, r3

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
    f100:	clz	r4, r4
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    f104:	rsb	r3, r3, #31
    f108:	cmp	r4, r3
    f10a:	it	cs
    f10c:	movcs	r4, r3
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
    f10e:	lsls	r2, r4, #2
    f110:	ldr	r3, [sp, #20]
    f112:	str	r2, [sp, #4]
    f114:	str	r3, [sp, #0]
    f116:	str.w	sl, [sp, #12]
    f11a:	str.w	fp, [sp, #8]
    f11e:	movs	r3, #4
    f120:	mov	r2, r8
    f122:	movs	r1, #0
    f124:	mov	r0, r7
    f126:	bl	e2c8 <lfs_bd_read.isra.15>
        head = lfs_fromle32(head);
        if (err) {
            return err;
        }

        current -= 1 << skip;
    f12a:	lsl.w	r4, r9, r4
    f12e:	subs	r5, r5, r4

        int err = lfs_bd_read(lfs,
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
        if (err) {
    f130:	cmp	r0, #0
    f132:	beq.n	f0f2 <lfs_ctz_find.constprop.24+0x4e>
    }

    *block = head;
    *off = pos;
    return 0;
}
    f134:	add	sp, #28
    f136:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
    lfs_off_t i = size / b;
    f13a:	ldr	r3, [sp, #64]	; 0x40
    f13c:	udiv	r6, r3, r9
    if (i == 0) {
    f140:	cbz	r6, f17e <lfs_ctz_find.constprop.24+0xda>
        *block = LFS_BLOCK_NULL;
        *off = 0;
        return 0;
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
    f142:	mov	r5, r0
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
    f144:	subs	r0, r6, #1
    f146:	bl	14310 <__popcountsi2>
    lfs_off_t i = size / b;
    if (i == 0) {
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
    f14a:	ldr	r3, [sp, #64]	; 0x40
    f14c:	adds	r0, #2
    f14e:	sub.w	r6, r3, r0, lsl #2
    f152:	udiv	r6, r6, r9
    f156:	mov	r0, r6
    f158:	bl	14310 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
    f15c:	ldr	r3, [sp, #64]	; 0x40
    f15e:	mls	r9, r6, r9, r3
    f162:	sub.w	r3, r9, r0, lsl #2
    f166:	str	r3, [sp, #64]	; 0x40
    f168:	b.n	f0de <lfs_ctz_find.constprop.24+0x3a>
static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
    if (size == 0) {
        *block = LFS_BLOCK_NULL;
    f16a:	ldr	r1, [sp, #68]	; 0x44
    f16c:	mov.w	r2, #4294967295
    f170:	str	r2, [r1, #0]
        *off = 0;
    f172:	ldr	r2, [sp, #72]	; 0x48
        return 0;
    f174:	mov	r0, r3
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
    if (size == 0) {
        *block = LFS_BLOCK_NULL;
        *off = 0;
    f176:	str	r3, [r2, #0]
    }

    *block = head;
    *off = pos;
    return 0;
}
    f178:	add	sp, #28
    f17a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }

        current -= 1 << skip;
    }

    *block = head;
    f17e:	ldr	r2, [sp, #68]	; 0x44
    f180:	ldr	r3, [sp, #20]
    f182:	str	r3, [r2, #0]
    *off = pos;
    f184:	ldr	r3, [sp, #72]	; 0x48
    f186:	mov	r2, r3
    f188:	ldr	r3, [sp, #64]	; 0x40
    f18a:	str	r3, [r2, #0]
    return 0;
    f18c:	movs	r0, #0
}
    f18e:	add	sp, #28
    f190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f194 <lfs_dir_getread.constprop.25>:
    return lfs_dir_getslice(lfs, dir,
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
    f194:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f198:	sub	sp, #28
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
    f19a:	ldr	r4, [r0, #104]	; 0x68
    return lfs_dir_getslice(lfs, dir,
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
    f19c:	ldr	r6, [sp, #68]	; 0x44
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
    f19e:	ldr	r5, [sp, #76]	; 0x4c
    f1a0:	ldr	r4, [r4, #28]
    f1a2:	adds	r7, r6, r5
    f1a4:	cmp	r7, r4
    f1a6:	bhi.n	f258 <lfs_dir_getread.constprop.25+0xc4>
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    f1a8:	cmp	r5, #0
    f1aa:	beq.n	f250 <lfs_dir_getread.constprop.25+0xbc>
    f1ac:	mov	r9, r3
    f1ae:	mov	r5, r2
    f1b0:	mov	r8, r1
    f1b2:	str	r0, [sp, #20]
    f1b4:	b.n	f208 <lfs_dir_getread.constprop.25+0x74>
            diff = lfs_min(diff, rcache->off-off);
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
    f1b6:	ldr	r4, [sp, #20]
    f1b8:	ldr	r4, [r4, #104]	; 0x68
    f1ba:	ldr.w	fp, [r4, #20]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    f1be:	ldr.w	sl, [r4, #40]	; 0x28
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    f1c2:	udiv	lr, r6, fp
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    f1c6:	add.w	r4, fp, #4294967295
    f1ca:	add	r4, r9
    f1cc:	add	r4, r6
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    f1ce:	udiv	ip, r4, fp
    f1d2:	mls	ip, fp, ip, r4
    f1d6:	rsb	ip, ip, r4
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    f1da:	mls	lr, fp, lr, r6
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    f1de:	cmp	ip, sl
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    f1e0:	rsb	r4, lr, r6
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    f1e4:	ldr.w	lr, [r5, #12]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    f1e8:	it	cs
    f1ea:	movcs	ip, sl
            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
    f1ec:	mvn.w	r7, #1
    f1f0:	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
    f1f2:	str.w	ip, [r5, #8]
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    f1f6:	str.w	ip, [sp, #8]
            diff = lfs_min(diff, rcache->off-off);
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
    f1fa:	str	r4, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    f1fc:	stmia.w	sp, {r4, lr}
    f200:	bl	ec2c <lfs_dir_getslice>
                rcache->off, rcache->buffer, rcache->size);
        if (err < 0) {
    f204:	cmp	r0, #0
    f206:	blt.n	f252 <lfs_dir_getread.constprop.25+0xbe>

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
    f208:	ldr	r4, [r5, #0]
        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    f20a:	ldr	r3, [sp, #64]	; 0x40
    f20c:	ldr	r2, [pc, #80]	; (f260 <lfs_dir_getread.constprop.25+0xcc>)
    f20e:	ldr	r0, [sp, #20]

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
    f210:	adds	r4, #2
        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
                lfs->cfg->cache_size);
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
    f212:	mov	r1, r8

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
    f214:	bne.n	f1b6 <lfs_dir_getread.constprop.25+0x22>
                off < rcache->off + rcache->size) {
    f216:	ldr.w	lr, [r5, #4]
    f21a:	ldr	r4, [r5, #8]
    f21c:	add	r4, lr

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
    f21e:	cmp	r6, r4
    f220:	bcs.n	f1b6 <lfs_dir_getread.constprop.25+0x22>
                off < rcache->off + rcache->size) {
            if (off >= rcache->off) {
    f222:	cmp	r6, lr
    f224:	bcc.n	f1b6 <lfs_dir_getread.constprop.25+0x22>
    f226:	ldr	r3, [sp, #76]	; 0x4c
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
    f228:	ldr	r1, [r5, #12]
    f22a:	ldr	r0, [sp, #72]	; 0x48
    f22c:	subs	r4, r4, r6
    f22e:	cmp	r4, r3
    f230:	it	cs
    f232:	movcs	r4, r3
    f234:	rsb	lr, lr, r6
    f238:	add	r1, lr
    f23a:	mov	r2, r4
    f23c:	bl	11bf8 <memcpy>

                data += diff;
    f240:	ldr	r3, [sp, #72]	; 0x48
    f242:	add	r3, r4
    f244:	str	r3, [sp, #72]	; 0x48
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    f246:	ldr	r3, [sp, #76]	; 0x4c
    f248:	subs	r3, r3, r4
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
                memcpy(data, &rcache->buffer[off-rcache->off], diff);

                data += diff;
                off += diff;
    f24a:	add	r6, r4
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    }

    while (size > 0) {
    f24c:	str	r3, [sp, #76]	; 0x4c
    f24e:	bne.n	f208 <lfs_dir_getread.constprop.25+0x74>
        if (err < 0) {
            return err;
        }
    }

    return 0;
    f250:	movs	r0, #0
}
    f252:	add	sp, #28
    f254:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
    uint8_t *data = buffer;
    if (off+size > lfs->cfg->block_size) {
        return LFS_ERR_CORRUPT;
    f258:	mvn.w	r0, #83	; 0x53
    f25c:	b.n	f252 <lfs_dir_getread.constprop.25+0xbe>
    f25e:	nop
    f260:	.word	0xfff7fc00

0000f264 <lfs_bd_cmp.constprop.27>:
    LFS_CMP_EQ = 0,
    LFS_CMP_LT = 1,
    LFS_CMP_GT = 2,
};

static int lfs_bd_cmp(lfs_t *lfs,
    f264:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f268:	sub	sp, #36	; 0x24
    f26a:	ldr	r5, [sp, #80]	; 0x50
    f26c:	ldr	r7, [sp, #76]	; 0x4c
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
    const uint8_t *data = buffer;

    for (lfs_off_t i = 0; i < size; i++) {
    f26e:	cbz	r5, f2c8 <lfs_bd_cmp.constprop.27+0x64>
    f270:	str	r3, [sp, #20]
    f272:	ldr	r3, [sp, #72]	; 0x48
    f274:	mov	r4, r7
    f276:	mov	r9, r1
    f278:	add	r7, r5
    f27a:	add.w	r6, r0, #104	; 0x68
    f27e:	mov	r5, r2
    f280:	rsb	r8, r4, r3
    f284:	add.w	fp, sp, #31
        uint8_t dat;
        int err = lfs_bd_read(lfs,
    f288:	mov.w	sl, #1
    f28c:	b.n	f29e <lfs_bd_cmp.constprop.27+0x3a>
                block, off+i, &dat, 1);
        if (err) {
            return err;
        }

        if (dat != data[i]) {
    f28e:	ldrb.w	r2, [r4], #1
    f292:	ldrb.w	r3, [sp, #31]
    f296:	cmp	r2, r3
    f298:	bne.n	f2d0 <lfs_bd_cmp.constprop.27+0x6c>
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
    const uint8_t *data = buffer;

    for (lfs_off_t i = 0; i < size; i++) {
    f29a:	cmp	r4, r7
    f29c:	beq.n	f2c8 <lfs_bd_cmp.constprop.27+0x64>
        uint8_t dat;
        int err = lfs_bd_read(lfs,
    f29e:	ldr	r2, [sp, #20]
    f2a0:	str.w	sl, [sp, #12]
    f2a4:	add.w	r3, r8, r4
    f2a8:	stmia.w	sp, {r2, r3}
    f2ac:	str.w	fp, [sp, #8]
    f2b0:	mov	r3, r5
    f2b2:	mov	r2, r9
    f2b4:	movs	r1, #0
    f2b6:	mov	r0, r6
    f2b8:	bl	e2c8 <lfs_bd_read.isra.15>
    f2bc:	subs	r5, #1
                pcache, rcache, hint-i,
                block, off+i, &dat, 1);
        if (err) {
    f2be:	cmp	r0, #0
    f2c0:	beq.n	f28e <lfs_bd_cmp.constprop.27+0x2a>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
        }
    }

    return LFS_CMP_EQ;
}
    f2c2:	add	sp, #36	; 0x24
    f2c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (dat != data[i]) {
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
        }
    }

    return LFS_CMP_EQ;
    f2c8:	movs	r0, #0
}
    f2ca:	add	sp, #36	; 0x24
    f2cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err) {
            return err;
        }

        if (dat != data[i]) {
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
    f2d0:	bhi.n	f2da <lfs_bd_cmp.constprop.27+0x76>
    f2d2:	movs	r0, #2
        }
    }

    return LFS_CMP_EQ;
}
    f2d4:	add	sp, #36	; 0x24
    f2d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err) {
            return err;
        }

        if (dat != data[i]) {
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
    f2da:	movs	r0, #1
        }
    }

    return LFS_CMP_EQ;
}
    f2dc:	add	sp, #36	; 0x24
    f2de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2e2:	nop

0000f2e4 <lfs_bd_flush>:

static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
    f2e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f2e8:	mov	r6, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
    f2ea:	ldr	r1, [r1, #0]
    f2ec:	adds	r4, r1, #2
    f2ee:	cmp	r4, #1

    return LFS_CMP_EQ;
}

static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
    f2f0:	sub	sp, #20
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
    f2f2:	bls.n	f366 <lfs_bd_flush+0x82>
    f2f4:	mov	r7, r0
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
    f2f6:	ldr	r0, [r0, #104]	; 0x68
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    f2f8:	ldr	r5, [r6, #8]
    f2fa:	ldr.w	lr, [r0, #24]
    f2fe:	add	r5, lr
    f300:	subs	r4, r5, #1
    return (a < b) ? a : b;
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    f302:	udiv	r5, r4, lr
    f306:	mls	r5, lr, r5, r4
    f30a:	subs	r4, r4, r5
    f30c:	mov	r9, r3
    f30e:	mov	r8, r2
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
    f310:	ldr	r3, [r6, #12]
    f312:	ldr	r2, [r6, #4]
    f314:	str	r4, [sp, #0]
    f316:	ldr	r5, [r0, #8]
    f318:	blx	r5
                pcache->off, pcache->buffer, diff);
        LFS_ASSERT(err <= 0);
        if (err) {
    f31a:	cbnz	r0, f360 <lfs_bd_flush+0x7c>
            return err;
        }

        if (validate) {
    f31c:	cmp.w	r9, #0
    f320:	beq.n	f34c <lfs_bd_flush+0x68>
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    f322:	mov.w	r3, #4294967295
    f326:	str.w	r3, [r8]
        }

        if (validate) {
            // check data on disk
            lfs_cache_drop(lfs, rcache);
            int res = lfs_bd_cmp(lfs,
    f32a:	ldmia.w	r6, {r3, r5}
    f32e:	ldr	r0, [r6, #12]
    f330:	str	r0, [sp, #4]
    f332:	str	r4, [sp, #8]
    f334:	mov	r2, r4
    f336:	mov	r1, r8
    f338:	str	r5, [sp, #0]
    f33a:	mov	r0, r7
    f33c:	bl	f264 <lfs_bd_cmp.constprop.27>
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
            if (res < 0) {
    f340:	cmp	r0, #0
    f342:	blt.n	f360 <lfs_bd_flush+0x7c>
                return res;
            }

            if (res != LFS_CMP_EQ) {
                return LFS_ERR_CORRUPT;
    f344:	it	ne
    f346:	mvnne.w	r0, #83	; 0x53
                    pcache->block, pcache->off, pcache->buffer, diff);
            if (res < 0) {
                return res;
            }

            if (res != LFS_CMP_EQ) {
    f34a:	bne.n	f360 <lfs_bd_flush+0x7c>
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    f34c:	ldr	r3, [r7, #104]	; 0x68
    f34e:	ldr	r0, [r6, #12]
    f350:	ldr	r2, [r3, #40]	; 0x28
    f352:	movs	r1, #255	; 0xff
    f354:	bl	14e3c <memset>
    pcache->block = LFS_BLOCK_NULL;
    f358:	mov.w	r3, #4294967295
    f35c:	str	r3, [r6, #0]
        }

        lfs_cache_zero(lfs, pcache);
    }

    return 0;
    f35e:	movs	r0, #0
}
    f360:	add	sp, #20
    f362:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        }

        lfs_cache_zero(lfs, pcache);
    }

    return 0;
    f366:	movs	r0, #0
}
    f368:	add	sp, #20
    f36a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f36e:	nop

0000f370 <lfs_bd_prog>:
}

static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
    f370:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f374:	sub	sp, #12
    f376:	ldr.w	r8, [sp, #60]	; 0x3c
    f37a:	ldr	r6, [sp, #48]	; 0x30
    f37c:	ldr	r5, [sp, #52]	; 0x34
    f37e:	ldr.w	sl, [sp, #56]	; 0x38
    const uint8_t *data = buffer;
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
    f382:	cmp.w	r8, #0
    f386:	beq.n	f3fc <lfs_bd_prog+0x8c>
    f388:	mov	r4, r1
    f38a:	stmia.w	sp, {r2, r3}
    f38e:	mov	r9, r0
    f390:	ldr	r1, [r0, #104]	; 0x68
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
        pcache->size = 0;
    f392:	movs	r7, #0
    f394:	b.n	f3a8 <lfs_bd_prog+0x38>
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
    f396:	ldr	r2, [r1, #24]
    f398:	udiv	r3, r5, r2
    f39c:	mls	r3, r2, r3, r5
    f3a0:	subs	r3, r5, r3
        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
    f3a2:	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
        pcache->size = 0;
    f3a4:	str	r7, [r4, #8]
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
    f3a6:	str	r3, [r4, #4]
    const uint8_t *data = buffer;
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
        if (block == pcache->block &&
    f3a8:	ldr	r3, [r4, #0]
    f3aa:	cmp	r3, r6
    f3ac:	bne.n	f396 <lfs_bd_prog+0x26>
                off >= pcache->off &&
    f3ae:	ldr	r3, [r4, #4]
    const uint8_t *data = buffer;
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
        if (block == pcache->block &&
    f3b0:	cmp	r5, r3
    f3b2:	bcc.n	f396 <lfs_bd_prog+0x26>
                off >= pcache->off &&
                off < pcache->off + lfs->cfg->cache_size) {
    f3b4:	ldr	r2, [r1, #40]	; 0x28
    f3b6:	add.w	fp, r3, r2
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
        if (block == pcache->block &&
                off >= pcache->off &&
    f3ba:	cmp	r5, fp
    f3bc:	bcs.n	f396 <lfs_bd_prog+0x26>
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    f3be:	rsb	fp, r5, fp
    f3c2:	cmp	fp, r8
                off < pcache->off + lfs->cfg->cache_size) {
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
    f3c4:	ldr	r0, [r4, #12]
    f3c6:	it	cs
    f3c8:	movcs	fp, r8
    f3ca:	subs	r3, r5, r3
    f3cc:	mov	r1, sl
    f3ce:	add	r0, r3
    f3d0:	mov	r2, fp
    f3d2:	bl	11bf8 <memcpy>
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
    f3d6:	ldr	r3, [r4, #4]
    f3d8:	ldr	r2, [r4, #8]
            data += diff;
            off += diff;
            size -= diff;

            pcache->size = lfs_max(pcache->size, off - pcache->off);
            if (pcache->size == lfs->cfg->cache_size) {
    f3da:	ldr.w	r1, [r9, #104]	; 0x68
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
            memcpy(&pcache->buffer[off-pcache->off], data, diff);

            data += diff;
            off += diff;
    f3de:	add	r5, fp
    f3e0:	subs	r3, r5, r3
            size -= diff;

            pcache->size = lfs_max(pcache->size, off - pcache->off);
            if (pcache->size == lfs->cfg->cache_size) {
    f3e2:	ldr	r1, [r1, #40]	; 0x28
    f3e4:	cmp	r3, r2
    f3e6:	it	cc
    f3e8:	movcc	r3, r2
    f3ea:	cmp	r3, r1
                    lfs->cfg->cache_size - (off-pcache->off));
            memcpy(&pcache->buffer[off-pcache->off], data, diff);

            data += diff;
            off += diff;
            size -= diff;
    f3ec:	rsb	r8, fp, r8
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
            memcpy(&pcache->buffer[off-pcache->off], data, diff);

            data += diff;
    f3f0:	add	sl, fp
            off += diff;
            size -= diff;

            pcache->size = lfs_max(pcache->size, off - pcache->off);
    f3f2:	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
    f3f4:	beq.n	f404 <lfs_bd_prog+0x94>
        const void *buffer, lfs_size_t size) {
    const uint8_t *data = buffer;
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
    LFS_ASSERT(off + size <= lfs->cfg->block_size);

    while (size > 0) {
    f3f6:	cmp.w	r8, #0
    f3fa:	bne.n	f416 <lfs_bd_prog+0xa6>
        pcache->block = block;
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
        pcache->size = 0;
    }

    return 0;
    f3fc:	movs	r0, #0
}
    f3fe:	add	sp, #12
    f400:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            size -= diff;

            pcache->size = lfs_max(pcache->size, off - pcache->off);
            if (pcache->size == lfs->cfg->cache_size) {
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
    f404:	ldmia.w	sp, {r2, r3}
    f408:	mov	r1, r4
    f40a:	mov	r0, r9
    f40c:	bl	f2e4 <lfs_bd_flush>
                if (err) {
    f410:	cmp	r0, #0
    f412:	beq.n	f3f6 <lfs_bd_prog+0x86>
    f414:	b.n	f3fe <lfs_bd_prog+0x8e>
    f416:	ldr.w	r1, [r9, #104]	; 0x68
    f41a:	b.n	f3a8 <lfs_bd_prog+0x38>

0000f41c <lfs_dir_commitprog>:
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
    f41c:	push	{r4, r5, r6, r7, lr}
    f41e:	mov	r4, r1
    f420:	sub	sp, #20
    int err = lfs_bd_prog(lfs,
    f422:	ldr	r1, [r1, #4]
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
    f424:	mov	r5, r3
    int err = lfs_bd_prog(lfs,
    f426:	ldr	r3, [r4, #0]
    f428:	str	r3, [sp, #0]
    f42a:	str	r2, [sp, #8]
    f42c:	str	r1, [sp, #4]
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
    f42e:	mov	r7, r2
    int err = lfs_bd_prog(lfs,
    f430:	str	r5, [sp, #12]
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
    f432:	mov	r2, r0
    int err = lfs_bd_prog(lfs,
    f434:	add.w	r1, r0, #16
    f438:	movs	r3, #0
    f43a:	bl	f370 <lfs_bd_prog>
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
    f43e:	mov	r6, r0
    f440:	cbnz	r0, f454 <lfs_dir_commitprog+0x38>
        return err;
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
    f442:	mov	r2, r5
    f444:	mov	r1, r7
    f446:	ldr	r0, [r4, #12]
    f448:	bl	11bc0 <lfs_crc>
    commit->off += size;
    f44c:	ldr	r3, [r4, #4]
            (const uint8_t*)buffer, size);
    if (err) {
        return err;
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
    f44e:	str	r0, [r4, #12]
    commit->off += size;
    f450:	add	r5, r3
    f452:	str	r5, [r4, #4]
    return 0;
}
    f454:	mov	r0, r6
    f456:	add	sp, #20
    f458:	pop	{r4, r5, r6, r7, pc}
    f45a:	nop

0000f45c <lfs_dir_commitattr>:

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    f45c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    f460:	sbfx	r5, r2, #0, #10

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
    if (commit->off + dsize > commit->end) {
    f464:	ldr	r7, [r1, #4]
    f466:	ldr	r4, [r1, #20]
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    f468:	cmp.w	r5, #4294967295
    f46c:	ite	ne
    f46e:	movne	r5, r2
    f470:	addeq	r5, r2, #1
    f472:	ubfx	r5, r5, #0, #10

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
    if (commit->off + dsize > commit->end) {
    f476:	adds	r7, #4
    f478:	add.w	lr, r7, r5
    f47c:	cmp	lr, r4
    commit->off += size;
    return 0;
}

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    f47e:	sub	sp, #36	; 0x24
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
    if (commit->off + dsize > commit->end) {
    f480:	bhi.n	f50c <lfs_dir_commitattr+0xb0>
    f482:	mov	r8, r3
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    f484:	ldr	r3, [r1, #8]
    f486:	mov	r4, r2
        return LFS_ERR_NOSPC;
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
    f488:	bic.w	r2, r2, #2147483648	; 0x80000000
    f48c:	eors	r3, r2
    f48e:	str	r2, [sp, #20]
    f490:	add	r2, sp, #32
    f492:	rev	r3, r3
    f494:	str.w	r3, [r2, #-4]!
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
    f498:	movs	r3, #4
    f49a:	mov	r6, r1
    f49c:	mov	r7, r0
    f49e:	bl	f41c <lfs_dir_commitprog>
    if (err) {
    f4a2:	cbnz	r0, f4bc <lfs_dir_commitattr+0x60>
        return err;
    }

    if (!(tag & 0x80000000)) {
    f4a4:	cmp	r4, #0
    f4a6:	blt.n	f4c2 <lfs_dir_commitattr+0x66>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
    f4a8:	mov	r3, r5
    f4aa:	mov	r2, r8
    f4ac:	mov	r0, r7
    f4ae:	mov	r1, r6
    f4b0:	bl	f41c <lfs_dir_commitprog>
        if (err) {
    f4b4:	cbnz	r0, f4bc <lfs_dir_commitattr+0x60>
                return err;
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
    f4b6:	ldr	r3, [sp, #20]
    f4b8:	str	r3, [r6, #8]
    return 0;
    f4ba:	movs	r0, #0
}
    f4bc:	add	sp, #36	; 0x24
    f4be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return err;
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
    f4c2:	cmp	r5, #0
    f4c4:	beq.n	f4b6 <lfs_dir_commitattr+0x5a>
    f4c6:	mov	r4, r0
    f4c8:	add.w	fp, r7, #104	; 0x68
    f4cc:	add.w	r9, sp, #27
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    f4d0:	mov.w	sl, #1
    f4d4:	b.n	f4e4 <lfs_dir_commitattr+0x88>
                    disk->block, disk->off+i, &dat, 1);
            if (err) {
                return err;
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
    f4d6:	mov	r0, r7
    f4d8:	bl	f41c <lfs_dir_commitprog>
            if (err) {
    f4dc:	cmp	r0, #0
    f4de:	bne.n	f4bc <lfs_dir_commitattr+0x60>
            return err;
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
    f4e0:	cmp	r4, r5
    f4e2:	beq.n	f4b6 <lfs_dir_commitattr+0x5a>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    f4e4:	ldmia.w	r8, {r2, r3}
    f4e8:	add	r3, r4
    f4ea:	stmia.w	sp, {r2, r3, r9}
    f4ee:	movs	r1, #0
    f4f0:	subs	r3, r5, r4
    f4f2:	mov	r2, r7
    f4f4:	str.w	sl, [sp, #12]
    f4f8:	mov	r0, fp
    f4fa:	bl	e2c8 <lfs_bd_read.isra.15>
                    disk->block, disk->off+i, &dat, 1);
            if (err) {
                return err;
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
    f4fe:	movs	r3, #1
    f500:	mov	r2, r9
    f502:	mov	r1, r6
            return err;
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
    f504:	add	r4, r3
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
                    disk->block, disk->off+i, &dat, 1);
            if (err) {
    f506:	cmp	r0, #0
    f508:	beq.n	f4d6 <lfs_dir_commitattr+0x7a>
    f50a:	b.n	f4bc <lfs_dir_commitattr+0x60>
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
    if (commit->off + dsize > commit->end) {
        return LFS_ERR_NOSPC;
    f50c:	mvn.w	r0, #27
    f510:	b.n	f4bc <lfs_dir_commitattr+0x60>
    f512:	nop

0000f514 <lfs_dir_commit_commit>:
struct lfs_dir_commit_commit {
    lfs_t *lfs;
    struct lfs_commit *commit;
};

static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
    f514:	push	{r4}
    f516:	mov	r4, r0
    struct lfs_dir_commit_commit *commit = p;
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
    f518:	mov	r3, r2
    f51a:	ldr	r0, [r0, #0]
    f51c:	mov	r2, r1
    f51e:	ldr	r1, [r4, #4]
}
    f520:	ldr.w	r4, [sp], #4
    struct lfs_commit *commit;
};

static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
    struct lfs_dir_commit_commit *commit = p;
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
    f524:	b.w	f45c <lfs_dir_commitattr>

0000f528 <lfs_dir_commitcrc>:

    commit->ptag = tag & 0x7fffffff;
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    f528:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const lfs_off_t off1 = commit->off;
    const uint32_t crc1 = commit->crc;
    // align to program units
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
    f52c:	ldr	r3, [r0, #104]	; 0x68
    commit->ptag = tag & 0x7fffffff;
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    const lfs_off_t off1 = commit->off;
    f52e:	ldr	r2, [r1, #4]

    commit->ptag = tag & 0x7fffffff;
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    f530:	mov	r4, r1
    f532:	sub	sp, #60	; 0x3c
    const lfs_off_t off1 = commit->off;
    const uint32_t crc1 = commit->crc;
    // align to program units
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
    f534:	ldr	r1, [r3, #24]
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    const lfs_off_t off1 = commit->off;
    const uint32_t crc1 = commit->crc;
    f536:	ldr	r3, [r4, #12]
    f538:	str	r3, [sp, #36]	; 0x24
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
    f53a:	adds	r3, r2, r1
    f53c:	adds	r3, #7

    commit->ptag = tag & 0x7fffffff;
    return 0;
}

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
    f53e:	mov	r5, r0
    const lfs_off_t off1 = commit->off;
    f540:	str	r2, [sp, #28]
    f542:	mov	r0, r2
    return (a < b) ? a : b;
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
    f544:	udiv	r2, r3, r1
    f548:	mls	r2, r1, r2, r3
    f54c:	rsb	fp, r2, r3
            lfs->cfg->prog_size);

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
    f550:	cmp	r0, fp
    f552:	it	cs
    f554:	addcs.w	sl, r5, #16
    f558:	bcs.n	f63e <lfs_dir_commitcrc+0x116>
    f55a:	add.w	r3, r5, #104	; 0x68
    f55e:	str	r3, [sp, #24]
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    f560:	sub.w	r3, fp, #8
    f564:	ldr	r7, [sp, #28]
    f566:	str	r3, [sp, #32]
        if (noff < end) {
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
    f568:	mov.w	r9, #4294967295
    f56c:	mov	r8, r5
    f56e:	b.n	f58c <lfs_dir_commitcrc+0x64>
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
    f570:	ldr	r3, [sp, #44]	; 0x2c
    f572:	ldr	r7, [r4, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
        commit->crc = 0xffffffff; // reset crc for next "commit"
    f574:	str.w	r9, [r4, #12]
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
    f578:	eor.w	r6, r3, r6, lsl #31
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
    f57c:	adds	r7, #4
    f57e:	ubfx	r3, r3, #0, #10
    f582:	add	r7, r3
            lfs->cfg->prog_size);

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
    f584:	cmp	fp, r7
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
    f586:	str	r6, [r4, #8]
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
            return err;
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
    f588:	str	r7, [r4, #4]
            lfs->cfg->prog_size);

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
    f58a:	bls.n	f63c <lfs_dir_commitcrc+0x114>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
        int err = lfs_bd_read(lfs,
    f58c:	mov.w	lr, #4

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
    f590:	add	r7, lr
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
    f592:	rsb	r6, r7, fp
    f596:	movw	r5, #1022	; 0x3fe
    f59a:	cmp	r6, r5
    f59c:	ite	ls
    f59e:	addls	r6, r7, r6
    f5a0:	addhi	r6, r7, r5
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
    f5a2:	add	r3, sp, #56	; 0x38
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
        if (noff < end) {
    f5a4:	cmp	r6, fp
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
    f5a6:	str	r3, [sp, #20]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
        footer[1] = lfs_tole32(commit->crc);
        err = lfs_bd_prog(lfs,
    f5a8:	add.w	sl, r8, #16
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
        int err = lfs_bd_read(lfs,
    f5ac:	mov	r3, lr
    f5ae:	mov	r2, r8
    f5b0:	mov.w	r1, #0
    f5b4:	ldr	r0, [sp, #24]
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
        if (noff < end) {
    f5b6:	bcs.n	f5c0 <lfs_dir_commitcrc+0x98>
    f5b8:	ldr	r5, [sp, #32]
    f5ba:	cmp	r6, r5
    f5bc:	it	cs
    f5be:	movcs	r6, r5
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
        int err = lfs_bd_read(lfs,
    f5c0:	ldr	r5, [r4, #0]
    f5c2:	str	r5, [sp, #0]
    f5c4:	add	r5, sp, #44	; 0x2c
    f5c6:	str.w	lr, [sp, #12]
    f5ca:	str	r5, [sp, #8]
    f5cc:	str	r6, [sp, #4]
        if (noff < end) {
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
    f5ce:	str.w	r9, [sp, #44]	; 0x2c
        int err = lfs_bd_read(lfs,
    f5d2:	bl	e2c8 <lfs_bd_read.isra.15>
            return err;
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
    f5d6:	subs	r7, r6, r7
    f5d8:	orr.w	r7, r7, #1044480	; 0xff000
    f5dc:	orr.w	r7, r7, #3072	; 0xc00

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    f5e0:	movs	r2, #4
        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
        int err = lfs_bd_read(lfs,
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
    f5e2:	cbz	r0, f5ea <lfs_dir_commitcrc+0xc2>
    f5e4:	cmn.w	r0, #84	; 0x54
    f5e8:	bne.n	f636 <lfs_dir_commitcrc+0x10e>
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    f5ea:	ldr	r6, [sp, #44]	; 0x2c
    f5ec:	ldr	r3, [r4, #8]
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
    f5ee:	ldr	r0, [sp, #20]
    f5f0:	rev	r6, r6
        if (err && err != LFS_ERR_CORRUPT) {
            return err;
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
    f5f2:	mvns	r6, r6
    f5f4:	lsrs	r6, r6, #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
    f5f6:	add.w	r1, r6, #1280	; 0x500
    f5fa:	orr.w	r7, r7, r1, lsl #20
    f5fe:	eors	r3, r7
    f600:	rev	r3, r3

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
    f602:	str.w	r3, [r0, #-8]!
    f606:	mov	r5, r0
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    f608:	mov	r1, r5
    f60a:	ldr	r0, [r4, #12]
            return err;
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
    f60c:	str	r7, [sp, #44]	; 0x2c

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    f60e:	bl	11bc0 <lfs_crc>
        footer[1] = lfs_tole32(commit->crc);
        err = lfs_bd_prog(lfs,
    f612:	ldr	r2, [r4, #4]
    f614:	ldr	r3, [r4, #0]
    f616:	str	r5, [sp, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    f618:	mov	r7, r0
        footer[1] = lfs_tole32(commit->crc);
        err = lfs_bd_prog(lfs,
    f61a:	movs	r1, #8
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
    f61c:	str	r7, [r4, #12]
        footer[1] = lfs_tole32(commit->crc);
        err = lfs_bd_prog(lfs,
    f61e:	mov	r0, r8
    f620:	str	r1, [sp, #12]
    f622:	str	r2, [sp, #4]
    f624:	str	r3, [sp, #0]
    f626:	mov	r2, r8
    f628:	movs	r3, #0
    f62a:	mov	r1, sl

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
        footer[1] = lfs_tole32(commit->crc);
    f62c:	str	r7, [sp, #52]	; 0x34
        err = lfs_bd_prog(lfs,
    f62e:	bl	f370 <lfs_bd_prog>
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
    f632:	cmp	r0, #0
    f634:	beq.n	f570 <lfs_dir_commitcrc+0x48>
        }
        noff = off + sizeof(uint32_t);
    }

    return 0;
}
    f636:	add	sp, #60	; 0x3c
    f638:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f63c:	mov	r5, r8
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    f63e:	mov.w	r3, #4294967295
    f642:	str	r3, [r5, #0]

static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
    lfs_cache_drop(lfs, rcache);

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
    f644:	mov	r1, sl
    f646:	movs	r3, #0
    f648:	mov	r2, r5
    f64a:	mov	r0, r5
    f64c:	bl	f2e4 <lfs_bd_flush>
    if (err) {
    f650:	cmp	r0, #0
    f652:	bne.n	f636 <lfs_dir_commitcrc+0x10e>
        return err;
    }

    err = lfs->cfg->sync(lfs->cfg);
    f654:	ldr	r0, [r5, #104]	; 0x68
    f656:	ldr	r3, [r0, #16]
    f658:	blx	r3
        commit->crc = 0xffffffff; // reset crc for next "commit"
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
    if (err) {
    f65a:	cmp	r0, #0
    f65c:	bne.n	f636 <lfs_dir_commitcrc+0x10e>
        return err;
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    f65e:	ldr	r6, [r4, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
    f660:	ldr	r3, [sp, #28]
    while (off < end) {
    f662:	cmp	fp, r6
        return err;
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    f664:	add.w	r3, r3, #4
    f668:	str	r3, [sp, #24]
    while (off < end) {
    f66a:	bls.n	f700 <lfs_dir_commitcrc+0x1d8>
    f66c:	add.w	r3, r5, #104	; 0x68
    f670:	str.w	fp, [sp, #32]
    f674:	str	r3, [sp, #20]
    f676:	mov	sl, r5
    f678:	mov	fp, r4
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
    f67a:	ldr	r3, [sp, #24]
    f67c:	add.w	r9, r3, #4
    f680:	cmp	r9, r6
    f682:	bls.n	f704 <lfs_dir_commitcrc+0x1dc>
    f684:	rsb	r7, r6, r9
    f688:	mov.w	r8, #4294967295
                return LFS_ERR_CORRUPT;
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    f68c:	add	r4, sp, #48	; 0x30
    f68e:	b.n	f69c <lfs_dir_commitcrc+0x174>
                    commit->block, i, &dat, 1);
            if (err) {
                return err;
            }

            crc = lfs_crc(crc, &dat, 1);
    f690:	mov	r0, r8
    f692:	bl	11bc0 <lfs_crc>
    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
    f696:	cmp	r9, r6
                    commit->block, i, &dat, 1);
            if (err) {
                return err;
            }

            crc = lfs_crc(crc, &dat, 1);
    f698:	mov	r8, r0
    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
    f69a:	bls.n	f6d4 <lfs_dir_commitcrc+0x1ac>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
    f69c:	ldr	r5, [sp, #28]
                return LFS_ERR_CORRUPT;
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    f69e:	ldr	r0, [sp, #20]
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
    f6a0:	cmp	r5, r6
                return LFS_ERR_CORRUPT;
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    f6a2:	mov	r3, r7
    f6a4:	mov	r2, sl
    f6a6:	mov.w	r1, #0
    f6aa:	add.w	r7, r7, #4294967295
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
    f6ae:	bne.n	f6b6 <lfs_dir_commitcrc+0x18e>
    f6b0:	ldr	r5, [sp, #36]	; 0x24
    f6b2:	cmp	r5, r8
    f6b4:	bne.n	f704 <lfs_dir_commitcrc+0x1dc>
                return LFS_ERR_CORRUPT;
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
    f6b6:	ldr.w	r5, [fp]
    f6ba:	str	r5, [sp, #0]
    f6bc:	movs	r5, #1
    f6be:	str	r6, [sp, #4]
    f6c0:	str	r5, [sp, #12]
    f6c2:	str	r4, [sp, #8]
    f6c4:	bl	e2c8 <lfs_bd_read.isra.15>
    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
        uint32_t crc = 0xffffffff;
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
    f6c8:	add	r6, r5
                    commit->block, i, &dat, 1);
            if (err) {
                return err;
            }

            crc = lfs_crc(crc, &dat, 1);
    f6ca:	mov	r2, r5
    f6cc:	mov	r1, r4
            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
                    commit->block, i, &dat, 1);
            if (err) {
    f6ce:	cmp	r0, #0
    f6d0:	beq.n	f690 <lfs_dir_commitcrc+0x168>
    f6d2:	b.n	f636 <lfs_dir_commitcrc+0x10e>

            crc = lfs_crc(crc, &dat, 1);
        }

        // detected write error?
        if (crc != 0) {
    f6d4:	cbnz	r0, f704 <lfs_dir_commitcrc+0x1dc>
            return LFS_ERR_CORRUPT;
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
    f6d6:	ldr	r1, [sp, #32]
    f6d8:	ldr	r2, [sp, #24]
    f6da:	movw	r6, #1022	; 0x3fe
    f6de:	subs	r3, r1, r2
    f6e0:	cmp	r3, r6
    f6e2:	ite	ls
    f6e4:	addls	r2, r2, r3
    f6e6:	addhi	r2, r2, r6
    f6e8:	mov	r3, r2
        if (off < end) {
    f6ea:	cmp	r1, r3
    f6ec:	bls.n	f700 <lfs_dir_commitcrc+0x1d8>
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
    f6ee:	sub.w	r6, r1, #8
    f6f2:	cmp	r6, r3
    f6f4:	it	cs
    f6f6:	movcs	r6, r3
            off = lfs_min(off, end - 2*sizeof(uint32_t));
        }
        noff = off + sizeof(uint32_t);
    f6f8:	adds	r3, r6, #4
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
    f6fa:	cmp	r1, r6
        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
        if (off < end) {
            off = lfs_min(off, end - 2*sizeof(uint32_t));
        }
        noff = off + sizeof(uint32_t);
    f6fc:	str	r3, [sp, #24]
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
    lfs_off_t noff = off1 + sizeof(uint32_t);
    while (off < end) {
    f6fe:	bhi.n	f67a <lfs_dir_commitcrc+0x152>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
        }
        noff = off + sizeof(uint32_t);
    }

    return 0;
    f700:	movs	r0, #0
    f702:	b.n	f636 <lfs_dir_commitcrc+0x10e>
            crc = lfs_crc(crc, &dat, 1);
        }

        // detected write error?
        if (crc != 0) {
            return LFS_ERR_CORRUPT;
    f704:	mvn.w	r0, #83	; 0x53
    f708:	b.n	f636 <lfs_dir_commitcrc+0x10e>
    f70a:	nop

0000f70c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
    f70c:	push	{r4, r5, r6, r7, lr}
    f70e:	mov	r4, r0
    f710:	sub	sp, #20
    f712:	ldr	r0, [r0, #8]
    lfs_t *lfs = name->lfs;
    const struct lfs_diskoff *disk = buffer;

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
    int res = lfs_bd_cmp(lfs,
    f714:	ldr	r3, [r2, #0]
    f716:	ldr	r2, [r2, #4]
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
    struct lfs_dir_find_match *name = data;
    lfs_t *lfs = name->lfs;
    f718:	ldr	r7, [r4, #0]
    const struct lfs_diskoff *disk = buffer;

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
    int res = lfs_bd_cmp(lfs,
    f71a:	str	r2, [sp, #0]
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
    f71c:	ubfx	r5, r1, #0, #10
    f720:	cmp	r0, r5
    f722:	mov	r2, r0
    lfs_t *lfs = name->lfs;
    const struct lfs_diskoff *disk = buffer;

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
    int res = lfs_bd_cmp(lfs,
    f724:	ldr	r6, [r4, #4]
    f726:	str	r6, [sp, #4]
    f728:	it	cs
    f72a:	movcs	r2, r5
    f72c:	str	r2, [sp, #8]
    f72e:	mov	r1, r7
    f730:	mov	r0, r7
    f732:	bl	f264 <lfs_bd_cmp.constprop.27>
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
    f736:	cbnz	r0, f744 <lfs_dir_find_match+0x38>
        return res;
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
    f738:	ldr	r3, [r4, #8]
    f73a:	cmp	r3, r5
    f73c:	beq.n	f744 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
    f73e:	ite	cs
    f740:	movcs	r0, #2
    f742:	movcc	r0, #1
    }

    // found a match!
    return LFS_CMP_EQ;
}
    f744:	add	sp, #20
    f746:	pop	{r4, r5, r6, r7, pc}

0000f748 <lfs_dir_open>:

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    f748:	push	{r4, r5, r6, r7, lr}
    f74a:	sub	sp, #36	; 0x24
    f74c:	add	r3, sp, #32
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    f74e:	add.w	r6, r1, #8

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    f752:	str.w	r2, [r3, #-12]!
    f756:	mov	r4, r1
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    f758:	mov	r2, r3
    f75a:	mov	r1, r6
    f75c:	movs	r3, #0

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    f75e:	mov	r5, r0
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    f760:	bl	ede8 <lfs_dir_find>
    if (tag < 0) {
    f764:	cmp	r0, #0
    f766:	blt.n	f7cc <lfs_dir_open+0x84>
        LFS_TRACE("lfs_dir_open -> %"PRId32, tag);
        return tag;
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    f768:	lsrs	r3, r0, #20
    f76a:	cmp	r3, #2
    f76c:	bne.n	f7dc <lfs_dir_open+0x94>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
    f76e:	ubfx	r0, r0, #10, #10
        LFS_TRACE("lfs_dir_open -> %d", LFS_ERR_NOTDIR);
        return LFS_ERR_NOTDIR;
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
    f772:	movw	r3, #1023	; 0x3ff
    f776:	cmp	r0, r3
    f778:	beq.n	f7d0 <lfs_dir_open+0x88>
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    f77a:	lsls	r3, r0, #10
    f77c:	movs	r1, #8
    f77e:	movs	r2, #0
    f780:	orr.w	r3, r3, #536870912	; 0x20000000
    f784:	add	r7, sp, #24
    f786:	orrs	r3, r1
    f788:	str	r1, [sp, #8]
    f78a:	stmia.w	sp, {r2, r7}
    f78e:	mov	r1, r6
    f790:	ldr	r2, [pc, #80]	; (f7e4 <lfs_dir_open+0x9c>)
    f792:	mov	r0, r5
    f794:	bl	ec2c <lfs_dir_getslice>
        pair[1] = lfs->root[1];
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
        if (res < 0) {
    f798:	cmp	r0, #0
    f79a:	blt.n	f7cc <lfs_dir_open+0x84>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    f79c:	movs	r0, #0
    f79e:	mov.w	r3, #4294967295
    f7a2:	str	r0, [sp, #12]
    f7a4:	str	r0, [sp, #8]
    f7a6:	str	r0, [sp, #4]
    f7a8:	mov	r2, r7
    f7aa:	mov	r1, r6
    f7ac:	str	r3, [sp, #0]
    f7ae:	mov	r0, r5
    f7b0:	bl	e474 <lfs_dir_fetchmatch>
        lfs_pair_fromle32(pair);
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
    if (err) {
    f7b4:	cbnz	r0, f7cc <lfs_dir_open+0x84>
    dir->head[1] = dir->m.pair[1];
    dir->id = 0;
    dir->pos = 0;

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
    f7b6:	movs	r3, #2
    f7b8:	strb	r3, [r4, #6]
    dir->next = (lfs_dir_t*)lfs->mlist;
    f7ba:	ldr	r1, [r5, #40]	; 0x28
        LFS_TRACE("lfs_dir_open -> %d", err);
        return err;
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
    f7bc:	ldr	r2, [r4, #8]
    dir->head[1] = dir->m.pair[1];
    f7be:	ldr	r3, [r4, #12]
    dir->id = 0;
    f7c0:	strh	r0, [r4, #4]
    dir->pos = 0;
    f7c2:	str	r0, [r4, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
    dir->next = (lfs_dir_t*)lfs->mlist;
    f7c4:	str	r1, [r4, #0]
        LFS_TRACE("lfs_dir_open -> %d", err);
        return err;
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
    f7c6:	str	r2, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
    f7c8:	str	r3, [r4, #48]	; 0x30
    dir->pos = 0;

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
    dir->next = (lfs_dir_t*)lfs->mlist;
    lfs->mlist = (struct lfs_mlist*)dir;
    f7ca:	str	r4, [r5, #40]	; 0x28

    LFS_TRACE("lfs_dir_open -> %d", 0);
    return 0;
}
    f7cc:	add	sp, #36	; 0x24
    f7ce:	pop	{r4, r5, r6, r7, pc}
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
        // handle root dir separately
        pair[0] = lfs->root[0];
    f7d0:	ldr	r2, [r5, #32]
        pair[1] = lfs->root[1];
    f7d2:	ldr	r3, [r5, #36]	; 0x24
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
        // handle root dir separately
        pair[0] = lfs->root[0];
    f7d4:	str	r2, [sp, #24]
        pair[1] = lfs->root[1];
    f7d6:	str	r3, [sp, #28]
    f7d8:	add	r7, sp, #24
    f7da:	b.n	f79c <lfs_dir_open+0x54>
        return tag;
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
        LFS_TRACE("lfs_dir_open -> %d", LFS_ERR_NOTDIR);
        return LFS_ERR_NOTDIR;
    f7dc:	mvn.w	r0, #19
    f7e0:	b.n	f7cc <lfs_dir_open+0x84>
    f7e2:	nop
    f7e4:	.word	0x700ffc00

0000f7e8 <lfs_dir_close>:
}

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);
    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    f7e8:	ldr	r2, [r0, #40]	; 0x28
    f7ea:	cbz	r2, f7fe <lfs_dir_close+0x16>
        if (*p == (struct lfs_mlist*)dir) {
    f7ec:	cmp	r1, r2
    f7ee:	bne.n	f7f8 <lfs_dir_close+0x10>
    f7f0:	b.n	f802 <lfs_dir_close+0x1a>
    f7f2:	cmp	r1, r3
    f7f4:	beq.n	f808 <lfs_dir_close+0x20>
    f7f6:	mov	r2, r3
}

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);
    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    f7f8:	ldr	r3, [r2, #0]
    f7fa:	cmp	r3, #0
    f7fc:	bne.n	f7f2 <lfs_dir_close+0xa>
        }
    }

    LFS_TRACE("lfs_dir_close -> %d", 0);
    return 0;
}
    f7fe:	movs	r0, #0
    f800:	bx	lr
}

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);
    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
    f802:	add.w	r2, r0, #40	; 0x28
    f806:	mov	r3, r1
        if (*p == (struct lfs_mlist*)dir) {
            *p = (*p)->next;
    f808:	ldr	r3, [r3, #0]
    f80a:	str	r3, [r2, #0]
        }
    }

    LFS_TRACE("lfs_dir_close -> %d", 0);
    return 0;
}
    f80c:	movs	r0, #0
    f80e:	bx	lr

0000f810 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
    f810:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f814:	mov	r5, r1
    f816:	mov	r9, r2
    f818:	sub	sp, #16
    f81a:	mov	r6, r0
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);
    memset(info, 0, sizeof(*info));
    f81c:	movs	r2, #48	; 0x30
    f81e:	mov	r0, r9
    f820:	movs	r1, #0
    f822:	bl	14e3c <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
    f826:	ldr	r0, [r5, #40]	; 0x28
    f828:	cmp	r0, #0
    f82a:	beq.n	f8a2 <lfs_dir_read+0x92>
        info->type = LFS_TYPE_DIR;
        strcpy(info->name, ".");
        dir->pos += 1;
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    } else if (dir->pos == 1) {
    f82c:	cmp	r0, #1
    f82e:	beq.n	f8c6 <lfs_dir_read+0xb6>
    f830:	ldrh	r4, [r5, #4]
            if (!dir->m.split) {
                LFS_TRACE("lfs_dir_read -> %d", false);
                return false;
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
    f832:	add.w	r7, r5, #8
    f836:	add.w	sl, r5, #32

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    f83a:	mov.w	r8, #0
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    }

    while (true) {
        if (dir->id == dir->m.count) {
    f83e:	ldrh.w	ip, [r5, #28]

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    f842:	mov.w	lr, #4294967295
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    }

    while (true) {
        if (dir->id == dir->m.count) {
    f846:	cmp	ip, r4

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    f848:	mov	r3, lr
    f84a:	mov	r2, sl
    f84c:	mov	r1, r7
    f84e:	mov	r0, r6
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    }

    while (true) {
        if (dir->id == dir->m.count) {
    f850:	bne.n	f872 <lfs_dir_read+0x62>
            if (!dir->m.split) {
    f852:	ldrb	r4, [r5, #31]
    f854:	cmp	r4, #0
    f856:	beq.n	f8be <lfs_dir_read+0xae>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    f858:	str.w	r8, [sp, #12]
    f85c:	str.w	r8, [sp, #8]
    f860:	str.w	r8, [sp, #4]
    f864:	str.w	lr, [sp]
    f868:	bl	e474 <lfs_dir_fetchmatch>
                LFS_TRACE("lfs_dir_read -> %d", false);
                return false;
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
            if (err) {
    f86c:	cbnz	r0, f89c <lfs_dir_read+0x8c>
                LFS_TRACE("lfs_dir_read -> %d", err);
                return err;
            }

            dir->id = 0;
    f86e:	strh	r0, [r5, #4]
    f870:	mov	r4, r0
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
    f872:	mov	r2, r4
    f874:	mov	r3, r9
    f876:	mov	r1, r7
    f878:	mov	r0, r6
    f87a:	bl	ef68 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
    f87e:	cbz	r0, f88e <lfs_dir_read+0x7e>
    f880:	adds	r3, r0, #2
    f882:	bne.n	f89c <lfs_dir_read+0x8c>
            LFS_TRACE("lfs_dir_read -> %d", err);
            return err;
        }

        dir->id += 1;
    f884:	ldrh	r4, [r5, #4]
    f886:	adds	r4, #1
    f888:	uxth	r4, r4
    f88a:	strh	r4, [r5, #4]
    f88c:	b.n	f83e <lfs_dir_read+0x2e>
    f88e:	ldrh	r2, [r5, #4]
        if (err != LFS_ERR_NOENT) {
            break;
        }
    }

    dir->pos += 1;
    f890:	ldr	r3, [r5, #40]	; 0x28
        if (err && err != LFS_ERR_NOENT) {
            LFS_TRACE("lfs_dir_read -> %d", err);
            return err;
        }

        dir->id += 1;
    f892:	adds	r2, #1
        if (err != LFS_ERR_NOENT) {
            break;
        }
    }

    dir->pos += 1;
    f894:	adds	r3, #1
        if (err && err != LFS_ERR_NOENT) {
            LFS_TRACE("lfs_dir_read -> %d", err);
            return err;
        }

        dir->id += 1;
    f896:	strh	r2, [r5, #4]
        if (err != LFS_ERR_NOENT) {
            break;
        }
    }

    dir->pos += 1;
    f898:	str	r3, [r5, #40]	; 0x28
    LFS_TRACE("lfs_dir_read -> %d", true);
    return true;
    f89a:	movs	r0, #1
}
    f89c:	add	sp, #16
    f89e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memset(info, 0, sizeof(*info));

    // special offset for '.' and '..'
    if (dir->pos == 0) {
        info->type = LFS_TYPE_DIR;
        strcpy(info->name, ".");
    f8a2:	ldr	r2, [pc, #64]	; (f8e4 <lfs_dir_read+0xd4>)
            (void*)lfs, (void*)dir, (void*)info);
    memset(info, 0, sizeof(*info));

    // special offset for '.' and '..'
    if (dir->pos == 0) {
        info->type = LFS_TYPE_DIR;
    f8a4:	movs	r3, #2
        strcpy(info->name, ".");
    f8a6:	ldrh	r2, [r2, #0]
    f8a8:	strh.w	r2, [r9, #8]
            (void*)lfs, (void*)dir, (void*)info);
    memset(info, 0, sizeof(*info));

    // special offset for '.' and '..'
    if (dir->pos == 0) {
        info->type = LFS_TYPE_DIR;
    f8ac:	strb.w	r3, [r9]
        strcpy(info->name, ".");
        dir->pos += 1;
    f8b0:	ldr	r3, [r5, #40]	; 0x28
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    f8b2:	movs	r0, #1

    // special offset for '.' and '..'
    if (dir->pos == 0) {
        info->type = LFS_TYPE_DIR;
        strcpy(info->name, ".");
        dir->pos += 1;
    f8b4:	adds	r3, #1
    f8b6:	str	r3, [r5, #40]	; 0x28
    }

    dir->pos += 1;
    LFS_TRACE("lfs_dir_read -> %d", true);
    return true;
}
    f8b8:	add	sp, #16
    f8ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    while (true) {
        if (dir->id == dir->m.count) {
            if (!dir->m.split) {
                LFS_TRACE("lfs_dir_read -> %d", false);
                return false;
    f8be:	mov	r0, r4
    }

    dir->pos += 1;
    LFS_TRACE("lfs_dir_read -> %d", true);
    return true;
}
    f8c0:	add	sp, #16
    f8c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        strcpy(info->name, ".");
        dir->pos += 1;
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    } else if (dir->pos == 1) {
        info->type = LFS_TYPE_DIR;
    f8c6:	mov	r3, r9
    f8c8:	movs	r1, #2
        strcpy(info->name, "..");
    f8ca:	ldr	r2, [pc, #28]	; (f8e8 <lfs_dir_read+0xd8>)
        strcpy(info->name, ".");
        dir->pos += 1;
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    } else if (dir->pos == 1) {
        info->type = LFS_TYPE_DIR;
    f8cc:	strb.w	r1, [r3], #8
        strcpy(info->name, "..");
    f8d0:	ldrh	r1, [r2, #0]
    f8d2:	ldrb	r2, [r2, #2]
    f8d4:	strh.w	r1, [r9, #8]
    f8d8:	strb	r2, [r3, #2]
        dir->pos += 1;
    f8da:	ldr	r3, [r5, #40]	; 0x28
    f8dc:	adds	r3, #1
    f8de:	str	r3, [r5, #40]	; 0x28
        LFS_TRACE("lfs_dir_read -> %d", true);
        return true;
    f8e0:	b.n	f89c <lfs_dir_read+0x8c>
    f8e2:	nop
    f8e4:	.word	0x00019068
    f8e8:	.word	0x0001906c

0000f8ec <lfs_dir_rewind>:
    (void)lfs;
    LFS_TRACE("lfs_dir_tell -> %"PRId32, dir->pos);
    return dir->pos;
}

int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {
    f8ec:	push	{r4, r5, lr}
    f8ee:	sub	sp, #20

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    f8f0:	movs	r5, #0
    f8f2:	mov.w	r3, #4294967295
    (void)lfs;
    LFS_TRACE("lfs_dir_tell -> %"PRId32, dir->pos);
    return dir->pos;
}

int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {
    f8f6:	mov	r4, r1

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    f8f8:	add.w	r2, r1, #44	; 0x2c
    f8fc:	str	r5, [sp, #12]
    f8fe:	adds	r1, #8
    f900:	str	r5, [sp, #8]
    f902:	stmia.w	sp, {r3, r5}
    f906:	bl	e474 <lfs_dir_fetchmatch>

int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {
    LFS_TRACE("lfs_dir_rewind(%p, %p)", (void*)lfs, (void*)dir);
    // reload the head dir
    int err = lfs_dir_fetch(lfs, &dir->m, dir->head);
    if (err) {
    f90a:	cbnz	r0, f910 <lfs_dir_rewind+0x24>
        LFS_TRACE("lfs_dir_rewind -> %d", err);
        return err;
    }

    dir->id = 0;
    f90c:	strh	r0, [r4, #4]
    dir->pos = 0;
    f90e:	str	r0, [r4, #40]	; 0x28
    LFS_TRACE("lfs_dir_rewind -> %d", 0);
    return 0;
}
    f910:	add	sp, #20
    f912:	pop	{r4, r5, pc}

0000f914 <lfs_file_tell>:
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    LFS_TRACE("lfs_file_tell -> %"PRId32, file->pos);
    return file->pos;
}
    f914:	ldr	r0, [r1, #52]	; 0x34
    f916:	bx	lr

0000f918 <lfs_file_size>:

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
    f918:	ldr	r3, [r1, #48]	; 0x30
    f91a:	lsls	r3, r3, #14
    f91c:	bmi.n	f922 <lfs_file_size+0xa>
        LFS_TRACE("lfs_file_size -> %"PRId32,
                lfs_max(file->pos, file->ctz.size));
        return lfs_max(file->pos, file->ctz.size);
    } else {
        LFS_TRACE("lfs_file_size -> %"PRId32, file->ctz.size);
        return file->ctz.size;
    f91e:	ldr	r0, [r1, #44]	; 0x2c
    }
}
    f920:	bx	lr
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
        LFS_TRACE("lfs_file_size -> %"PRId32,
                lfs_max(file->pos, file->ctz.size));
        return lfs_max(file->pos, file->ctz.size);
    f922:	ldr	r0, [r1, #52]	; 0x34
    f924:	ldr	r3, [r1, #44]	; 0x2c
    f926:	cmp	r0, r3
    f928:	it	cc
    f92a:	movcc	r0, r3
    f92c:	bx	lr
    f92e:	nop

0000f930 <lfs_stat>:
    }
}


/// General fs operations ///
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
    f930:	push	{r4, r5, lr}
    f932:	sub	sp, #44	; 0x2c
    f934:	add	r3, sp, #40	; 0x28
    f936:	mov	r5, r2
    f938:	str.w	r1, [r3, #-36]!
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    f93c:	add	r1, sp, #8
    f93e:	mov	r2, r3
    f940:	movs	r3, #0
    }
}


/// General fs operations ///
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
    f942:	mov	r4, r0
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    f944:	bl	ede8 <lfs_dir_find>
    if (tag < 0) {
    f948:	cmp	r0, #0
    f94a:	blt.n	f95a <lfs_stat+0x2a>
        LFS_TRACE("lfs_stat -> %"PRId32, tag);
        return (int)tag;
    }

    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
    f94c:	ubfx	r2, r0, #10, #10
    f950:	mov	r3, r5
    f952:	add	r1, sp, #8
    f954:	mov	r0, r4
    f956:	bl	ef68 <lfs_dir_getinfo>
    LFS_TRACE("lfs_stat -> %d", err);
    return err;
}
    f95a:	add	sp, #44	; 0x2c
    f95c:	pop	{r4, r5, pc}
    f95e:	nop

0000f960 <lfs_mount>:
    lfs_deinit(lfs);
    LFS_TRACE("lfs_format -> %d", err);
    return err;
}

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
    f960:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f964:	sub	sp, #92	; 0x5c
    f966:	mov	r4, r0
            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);
    int err = lfs_init(lfs, cfg);
    f968:	bl	e204 <lfs_init>
    if (err) {
    f96c:	mov	r6, r0
    f96e:	cmp	r0, #0
    f970:	bne.w	fa8c <lfs_mount+0x12c>
        LFS_TRACE("lfs_mount -> %d", err);
        return err;
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
    f974:	add	r0, sp, #56	; 0x38
    f976:	movs	r2, #32
    f978:	mov	r1, r6
    f97a:	bl	14e3c <memset>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    f97e:	ldr.w	r9, [pc, #292]	; faa4 <lfs_mount+0x144>
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    f982:	ldr.w	r8, [pc, #292]	; faa8 <lfs_mount+0x148>
        LFS_TRACE("lfs_mount -> %d", err);
        return err;
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
    f986:	movs	r3, #1
    f988:	str	r3, [sp, #84]	; 0x54
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    f98a:	ldr	r3, [sp, #84]	; 0x54
    f98c:	adds	r3, #1
    f98e:	beq.n	fa3c <lfs_mount+0xdc>

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    f990:	ldr	r3, [r4, #104]	; 0x68
    f992:	ldr	r3, [r3, #32]
    f994:	cmp.w	r6, r3, lsr #1
    f998:	bcs.n	fa92 <lfs_mount+0x132>
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    f99a:	ldr	r3, [pc, #252]	; (fa98 <lfs_mount+0x138>)
    f99c:	str.w	r8, [sp, #8]
    f9a0:	add	r2, sp, #20
    f9a2:	movs	r7, #0
    f9a4:	str	r2, [sp, #12]
    f9a6:	stmia.w	sp, {r3, r7}
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    f9aa:	movs	r5, #8
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    f9ac:	ldr	r3, [pc, #236]	; (fa9c <lfs_mount+0x13c>)
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    f9ae:	str	r5, [sp, #28]
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    f9b0:	add	r2, sp, #80	; 0x50
    f9b2:	add	r1, sp, #56	; 0x38
    f9b4:	mov	r0, r4
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    f9b6:	str	r4, [sp, #20]
    f9b8:	str.w	r9, [sp, #24]
            goto cleanup;
        }
        cycle += 1;

        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    f9bc:	bl	e474 <lfs_dir_fetchmatch>
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
                    lfs, "littlefs", 8});
        if (tag < 0) {
    f9c0:	subs	r5, r0, #0
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            err = LFS_ERR_CORRUPT;
            goto cleanup;
        }
        cycle += 1;
    f9c2:	add.w	r6, r6, #1
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
                    lfs, "littlefs", 8});
        if (tag < 0) {
    f9c6:	blt.n	fa84 <lfs_mount+0x124>
            err = tag;
            goto cleanup;
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
    f9c8:	beq.n	fa26 <lfs_mount+0xc6>
    f9ca:	sbfx	r5, r5, #0, #10
    f9ce:	adds	r5, #1
    f9d0:	beq.n	fa26 <lfs_mount+0xc6>
            // update root
            lfs->root[0] = dir.pair[0];
    f9d2:	ldr	r0, [sp, #56]	; 0x38
            lfs->root[1] = dir.pair[1];
    f9d4:	ldr	r1, [sp, #60]	; 0x3c
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    f9d6:	str	r7, [sp, #0]
    f9d8:	movs	r2, #24
    f9da:	add	r3, sp, #32
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
            // update root
            lfs->root[0] = dir.pair[0];
    f9dc:	str	r0, [r4, #32]
            lfs->root[1] = dir.pair[1];
    f9de:	str	r1, [r4, #36]	; 0x24
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    f9e0:	mov	r0, r4
    f9e2:	str	r2, [sp, #8]
    f9e4:	str	r3, [sp, #4]
    f9e6:	ldr	r2, [pc, #180]	; (fa9c <lfs_mount+0x13c>)
    f9e8:	ldr	r3, [pc, #180]	; (faa0 <lfs_mount+0x140>)
    f9ea:	add	r1, sp, #56	; 0x38
    f9ec:	bl	ec2c <lfs_dir_getslice>
            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
    f9f0:	subs	r5, r0, #0
    f9f2:	blt.n	fa84 <lfs_mount+0x124>
                goto cleanup;
            }
            lfs_superblock_fromle32(&superblock);

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
    f9f4:	ldr	r3, [sp, #32]
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
    f9f6:	lsrs	r2, r3, #16
    f9f8:	cmp	r2, #2
            }
            lfs_superblock_fromle32(&superblock);

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
    f9fa:	uxth	r3, r3
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
    f9fc:	bne.n	fa80 <lfs_mount+0x120>
    f9fe:	cmp	r3, #0
    fa00:	bne.n	fa80 <lfs_mount+0x120>
                err = LFS_ERR_INVAL;
                goto cleanup;
            }

            // check superblock configuration
            if (superblock.name_max) {
    fa02:	ldr	r3, [sp, #44]	; 0x2c
    fa04:	cbz	r3, fa0e <lfs_mount+0xae>
                if (superblock.name_max > lfs->name_max) {
    fa06:	ldr	r2, [r4, #108]	; 0x6c
    fa08:	cmp	r3, r2
    fa0a:	bhi.n	fa80 <lfs_mount+0x120>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
                    goto cleanup;
                }

                lfs->name_max = superblock.name_max;
    fa0c:	str	r3, [r4, #108]	; 0x6c
            }

            if (superblock.file_max) {
    fa0e:	ldr	r3, [sp, #48]	; 0x30
    fa10:	cbz	r3, fa1a <lfs_mount+0xba>
                if (superblock.file_max > lfs->file_max) {
    fa12:	ldr	r2, [r4, #112]	; 0x70
    fa14:	cmp	r3, r2
    fa16:	bhi.n	fa80 <lfs_mount+0x120>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
                    goto cleanup;
                }

                lfs->file_max = superblock.file_max;
    fa18:	str	r3, [r4, #112]	; 0x70
            }

            if (superblock.attr_max) {
    fa1a:	ldr	r3, [sp, #52]	; 0x34
    fa1c:	cbz	r3, fa26 <lfs_mount+0xc6>
                if (superblock.attr_max > lfs->attr_max) {
    fa1e:	ldr	r2, [r4, #116]	; 0x74
    fa20:	cmp	r3, r2
    fa22:	bhi.n	fa80 <lfs_mount+0x120>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
                    goto cleanup;
                }

                lfs->attr_max = superblock.attr_max;
    fa24:	str	r3, [r4, #116]	; 0x74
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    fa26:	add.w	r2, r4, #48	; 0x30
    fa2a:	add	r1, sp, #56	; 0x38
    fa2c:	mov	r0, r4
    fa2e:	bl	eda0 <lfs_dir_getgstate>
        if (err) {
    fa32:	mov	r5, r0
    fa34:	cbnz	r0, fa84 <lfs_mount+0x124>
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    fa36:	ldr	r3, [sp, #80]	; 0x50
    fa38:	adds	r3, #1
    fa3a:	bne.n	f98a <lfs_mount+0x2a>
    fa3c:	ldr	r3, [r4, #32]
    fa3e:	adds	r3, #1
    fa40:	beq.n	fa80 <lfs_mount+0x120>
    fa42:	ldr	r3, [r4, #36]	; 0x24
    fa44:	adds	r3, #1
    fa46:	beq.n	fa80 <lfs_mount+0x120>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    fa48:	ldr	r3, [r4, #48]	; 0x30
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    fa4a:	ldr	r2, [r4, #104]	; 0x68
    fa4c:	ldr.w	lr, [r4, #44]	; 0x2c
    fa50:	ldr	r5, [r2, #28]

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    fa52:	ldr	r7, [r2, #32]
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    fa54:	add.w	r3, r3, r3, lsr #31
    fa58:	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
    fa5a:	add.w	r3, r4, #48	; 0x30
    fa5e:	ldmia.w	r3, {r0, r1, r2}
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    fa62:	udiv	r3, lr, r5
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    lfs->gdisk = lfs->gstate;
    fa66:	add.w	r6, r4, #60	; 0x3c
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    fa6a:	mls	r5, r5, r3, lr
    lfs->free.size = 0;
    fa6e:	movs	r3, #0
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    lfs->gdisk = lfs->gstate;
    fa70:	stmia.w	r6, {r0, r1, r2}

    // setup free lookahead
    lfs_alloc_reset(lfs);

    LFS_TRACE("lfs_mount -> %d", 0);
    return 0;
    fa74:	mov	r0, r3

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    fa76:	str	r7, [r4, #96]	; 0x60
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    fa78:	str	r5, [r4, #84]	; 0x54
    lfs->free.size = 0;
    fa7a:	str	r3, [r4, #88]	; 0x58
    lfs->free.i = 0;
    fa7c:	str	r3, [r4, #92]	; 0x5c

    // setup free lookahead
    lfs_alloc_reset(lfs);

    LFS_TRACE("lfs_mount -> %d", 0);
    return 0;
    fa7e:	b.n	fa8c <lfs_mount+0x12c>
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
        err = LFS_ERR_INVAL;
    fa80:	mvn.w	r5, #21
    return err;
}

int lfs_unmount(lfs_t *lfs) {
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
    int err = lfs_deinit(lfs);
    fa84:	mov	r0, r4
    fa86:	bl	e1d0 <lfs_deinit>
    return 0;

cleanup:
    lfs_unmount(lfs);
    LFS_TRACE("lfs_mount -> %d", err);
    return err;
    fa8a:	mov	r0, r5
}
    fa8c:	add	sp, #92	; 0x5c
    fa8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lfs_mdir_t dir = {.tail = {0, 1}};
    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            err = LFS_ERR_CORRUPT;
    fa92:	mvn.w	r5, #83	; 0x53
    fa96:	b.n	fa84 <lfs_mount+0x124>
    fa98:	.word	0x0ff00008
    fa9c:	.word	0x7ffffc00
    faa0:	.word	0x20100018
    faa4:	.word	0x000197cc
    faa8:	.word	0x0000f70d

0000faac <lfs_fs_traverseraw>:


/// Filesystem filesystem operations ///
int lfs_fs_traverseraw(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
    faac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fab0:	sub	sp, #68	; 0x44
    fab2:	mov	r5, r0
    fab4:	mov	r9, r1
    fab6:	mov	sl, r2
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
    fab8:	movs	r1, #0
    faba:	add	r0, sp, #32
    fabc:	movs	r2, #32


/// Filesystem filesystem operations ///
int lfs_fs_traverseraw(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
    fabe:	mov	fp, r3
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
    fac0:	bl	14e3c <memset>
    fac4:	movs	r3, #1
    fac6:	movs	r1, #0
    fac8:	str	r3, [sp, #60]	; 0x3c
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
    faca:	str	r1, [sp, #20]
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    facc:	movs	r6, #8
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    face:	ldr	r3, [sp, #60]	; 0x3c
    fad0:	adds	r3, #1
    fad2:	beq.n	fb92 <lfs_fs_traverseraw+0xe6>
    }
#endif

    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
    fad4:	ldr	r3, [r5, #104]	; 0x68
    fad6:	ldr	r2, [sp, #20]
    fad8:	ldr	r3, [r3, #32]
    fada:	cmp.w	r2, r3, lsr #1
    fade:	bcs.w	fc14 <lfs_fs_traverseraw+0x168>
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        for (int i = 0; i < 2; i++) {
            int err = cb(data, dir.tail[i]);
    fae2:	mov	r0, sl
    fae4:	blx	r9
            if (err) {
    fae6:	cmp	r0, #0
    fae8:	bne.n	fb64 <lfs_fs_traverseraw+0xb8>
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;

        for (int i = 0; i < 2; i++) {
            int err = cb(data, dir.tail[i]);
    faea:	ldr	r1, [sp, #60]	; 0x3c
    faec:	mov	r0, sl
    faee:	blx	r9
            if (err) {
    faf0:	cmp	r0, #0
    faf2:	bne.n	fb64 <lfs_fs_traverseraw+0xb8>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
    faf4:	mov.w	r3, #4294967295
    faf8:	str	r0, [sp, #12]
    fafa:	str	r0, [sp, #8]
    fafc:	str	r0, [sp, #4]
    fafe:	str	r3, [sp, #0]
    fb00:	add	r2, sp, #56	; 0x38
    fb02:	add	r1, sp, #32
    fb04:	mov	r0, r5
    fb06:	bl	e474 <lfs_dir_fetchmatch>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
        if (err) {
    fb0a:	cbnz	r0, fb64 <lfs_fs_traverseraw+0xb8>
            return err;
        }

        for (uint16_t id = 0; id < dir.count; id++) {
    fb0c:	ldrh.w	r3, [sp, #52]	; 0x34
    fb10:	cmp	r3, #0
    fb12:	beq.n	fb86 <lfs_fs_traverseraw+0xda>
    fb14:	mov	r4, r0
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    fb16:	mov	r8, r0
    fb18:	add	r7, sp, #24
    fb1a:	b.n	fb40 <lfs_fs_traverseraw+0x94>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    fb1c:	lsrs	r0, r0, #20
                }
                return tag;
            }
            lfs_ctz_fromle32(&ctz);

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    fb1e:	movw	r3, #514	; 0x202
    fb22:	cmp	r0, r3
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
    fb24:	uxth	r2, r0
                }
                return tag;
            }
            lfs_ctz_fromle32(&ctz);

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    fb26:	beq.n	fb6a <lfs_fs_traverseraw+0xbe>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
                        ctz.head, ctz.size, cb, data);
                if (err) {
                    return err;
                }
            } else if (includeorphans && 
    fb28:	cmp.w	fp, #0
    fb2c:	beq.n	fb34 <lfs_fs_traverseraw+0x88>
    fb2e:	cmp.w	r2, #512	; 0x200
    fb32:	beq.n	fbaa <lfs_fs_traverseraw+0xfe>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
        if (err) {
            return err;
        }

        for (uint16_t id = 0; id < dir.count; id++) {
    fb34:	adds	r4, #1
    fb36:	ldrh.w	r3, [sp, #52]	; 0x34
    fb3a:	uxth	r4, r4
    fb3c:	cmp	r3, r4
    fb3e:	bls.n	fb86 <lfs_fs_traverseraw+0xda>
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
    fb40:	lsls	r3, r4, #10
    fb42:	orr.w	r3, r3, #536870912	; 0x20000000
    fb46:	str	r6, [sp, #8]
    fb48:	str	r7, [sp, #4]
    fb4a:	str.w	r8, [sp]
    fb4e:	orr.w	r3, r3, #8
    fb52:	ldr	r2, [pc, #200]	; (fc1c <lfs_fs_traverseraw+0x170>)
    fb54:	add	r1, sp, #32
    fb56:	mov	r0, r5
    fb58:	bl	ec2c <lfs_dir_getslice>

        for (uint16_t id = 0; id < dir.count; id++) {
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
            if (tag < 0) {
    fb5c:	cmp	r0, #0
    fb5e:	bge.n	fb1c <lfs_fs_traverseraw+0x70>
                if (tag == LFS_ERR_NOENT) {
    fb60:	adds	r3, r0, #2
    fb62:	beq.n	fb34 <lfs_fs_traverseraw+0x88>
            }
        }
    }

    return 0;
}
    fb64:	add	sp, #68	; 0x44
    fb66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return tag;
            }
            lfs_ctz_fromle32(&ctz);

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
    fb6a:	ldr	r2, [sp, #28]

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
    if (size == 0) {
    fb6c:	cmp	r2, #0
    fb6e:	beq.n	fb34 <lfs_fs_traverseraw+0x88>
    fb70:	stmia.w	sp, {r2, r9, sl}
    fb74:	ldr	r3, [sp, #24]
    fb76:	mov	r2, r5
    fb78:	movs	r1, #0
    fb7a:	mov	r0, r5
    fb7c:	bl	f00c <lfs_ctz_traverse.part.19>
            lfs_ctz_fromle32(&ctz);

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
                        ctz.head, ctz.size, cb, data);
                if (err) {
    fb80:	cmp	r0, #0
    fb82:	beq.n	fb34 <lfs_fs_traverseraw+0x88>
    fb84:	b.n	fb64 <lfs_fs_traverseraw+0xb8>
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;
    fb86:	ldr	r3, [sp, #20]
    fb88:	ldr	r1, [sp, #56]	; 0x38
    fb8a:	adds	r3, #1
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    fb8c:	adds	r2, r1, #1
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
        }
        cycle += 1;
    fb8e:	str	r3, [sp, #20]
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    fb90:	bne.n	face <lfs_fs_traverseraw+0x22>
            }
        }
    }

    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    fb92:	ldr	r4, [r5, #40]	; 0x28
    fb94:	cbz	r4, fba6 <lfs_fs_traverseraw+0xfa>
    fb96:	mov	r6, r9
    fb98:	mov	r7, sl
        if (f->type != LFS_TYPE_REG) {
    fb9a:	ldrb	r3, [r4, #6]
    fb9c:	cmp	r3, #1
    fb9e:	beq.n	fbc0 <lfs_fs_traverseraw+0x114>
            }
        }
    }

    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    fba0:	ldr	r4, [r4, #0]
    fba2:	cmp	r4, #0
    fba4:	bne.n	fb9a <lfs_fs_traverseraw+0xee>
                return err;
            }
        }
    }

    return 0;
    fba6:	movs	r0, #0
    fba8:	b.n	fb64 <lfs_fs_traverseraw+0xb8>
                    return err;
                }
            } else if (includeorphans && 
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
                for (int i = 0; i < 2; i++) {
                    err = cb(data, (&ctz.head)[i]);
    fbaa:	ldr	r1, [sp, #24]
    fbac:	mov	r0, sl
    fbae:	blx	r9
                    if (err) {
    fbb0:	cmp	r0, #0
    fbb2:	bne.n	fb64 <lfs_fs_traverseraw+0xb8>
                    return err;
                }
            } else if (includeorphans && 
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
                for (int i = 0; i < 2; i++) {
                    err = cb(data, (&ctz.head)[i]);
    fbb4:	ldr	r1, [sp, #28]
    fbb6:	mov	r0, sl
    fbb8:	blx	r9
                    if (err) {
    fbba:	cmp	r0, #0
    fbbc:	beq.n	fb34 <lfs_fs_traverseraw+0x88>
    fbbe:	b.n	fb64 <lfs_fs_traverseraw+0xb8>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
        if (f->type != LFS_TYPE_REG) {
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
    fbc0:	ldr	r3, [r4, #48]	; 0x30
    fbc2:	and.w	r2, r3, #1114112	; 0x110000
    fbc6:	cmp.w	r2, #65536	; 0x10000
    fbca:	beq.n	fbf4 <lfs_fs_traverseraw+0x148>
            if (err) {
                return err;
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
    fbcc:	and.w	r3, r3, #1179648	; 0x120000
    fbd0:	cmp.w	r3, #131072	; 0x20000
    fbd4:	bne.n	fba0 <lfs_fs_traverseraw+0xf4>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    fbd6:	ldr	r2, [r4, #52]	; 0x34

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
    if (size == 0) {
    fbd8:	cmp	r2, #0
    fbda:	beq.n	fba0 <lfs_fs_traverseraw+0xf4>
    fbdc:	ldr	r3, [r4, #56]	; 0x38
    fbde:	add.w	r1, r4, #64	; 0x40
    fbe2:	stmia.w	sp, {r2, r6, r7}
    fbe6:	mov	r0, r5
    fbe8:	mov	r2, r5
    fbea:	bl	f00c <lfs_ctz_traverse.part.19>
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
                    f->block, f->pos, cb, data);
            if (err) {
    fbee:	cmp	r0, #0
    fbf0:	beq.n	fba0 <lfs_fs_traverseraw+0xf4>
    fbf2:	b.n	fb64 <lfs_fs_traverseraw+0xb8>
        if (f->type != LFS_TYPE_REG) {
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    fbf4:	ldr	r2, [r4, #44]	; 0x2c

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
    if (size == 0) {
    fbf6:	cmp	r2, #0
    fbf8:	beq.n	fbcc <lfs_fs_traverseraw+0x120>
    fbfa:	ldr	r3, [r4, #40]	; 0x28
    fbfc:	add.w	r1, r4, #64	; 0x40
    fc00:	stmia.w	sp, {r2, r6, r7}
    fc04:	mov	r0, r5
    fc06:	mov	r2, r5
    fc08:	bl	f00c <lfs_ctz_traverse.part.19>
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
    fc0c:	cmp	r0, #0
    fc0e:	bne.n	fb64 <lfs_fs_traverseraw+0xb8>
    fc10:	ldr	r3, [r4, #48]	; 0x30
    fc12:	b.n	fbcc <lfs_fs_traverseraw+0x120>

    lfs_block_t cycle = 0;
    while (!lfs_pair_isnull(dir.tail)) {
        if (cycle >= lfs->cfg->block_count/2) {
            // loop detected
            return LFS_ERR_CORRUPT;
    fc14:	mvn.w	r0, #83	; 0x53
    fc18:	b.n	fb64 <lfs_fs_traverseraw+0xb8>
    fc1a:	nop
    fc1c:	.word	0x700ffc00

0000fc20 <lfs_alloc>:
    lfs->free.size = 0;
    lfs->free.i = 0;
    lfs_alloc_ack(lfs);
}

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    fc20:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fc24:	mov	r4, r0
    fc26:	mov	r9, r1
        while (lfs->free.i != lfs->free.size) {
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
            lfs->free.ack -= 1;

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    fc28:	movs	r5, #1
    fc2a:	ldr	r3, [r4, #92]	; 0x5c
    fc2c:	ldr.w	r8, [r4, #88]	; 0x58
    fc30:	ldr	r1, [r4, #96]	; 0x60
    lfs_alloc_ack(lfs);
}

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
    fc32:	b.n	fc46 <lfs_alloc+0x26>
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
            lfs->free.ack -= 1;
    fc34:	subs	r1, #1

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    fc36:	ldr	r7, [r4, #100]	; 0x64
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
            lfs->free.ack -= 1;
    fc38:	str	r1, [r4, #96]	; 0x60

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
    fc3a:	str	r0, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    fc3c:	ldr.w	r6, [r7, lr, lsl #2]
    fc40:	tst	r2, r6
    fc42:	beq.n	fcba <lfs_alloc+0x9a>
    fc44:	mov	r3, r0
    fc46:	and.w	r2, r3, #31
    lfs_alloc_ack(lfs);
}

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
    fc4a:	cmp	r3, r8
            lfs_block_t off = lfs->free.i;
            lfs->free.i += 1;
    fc4c:	add.w	r0, r3, #1
            lfs->free.ack -= 1;

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    fc50:	mov.w	lr, r3, lsr #5
    fc54:	lsl.w	r2, r5, r2
    fc58:	mov.w	ip, #1
    lfs_alloc_ack(lfs);
}

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    while (true) {
        while (lfs->free.i != lfs->free.size) {
    fc5c:	bne.n	fc34 <lfs_alloc+0x14>
                return 0;
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
    fc5e:	cmp	r1, #0
    fc60:	beq.n	fd16 <lfs_alloc+0xf6>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
                % lfs->cfg->block_count;
    fc62:	ldr	r7, [r4, #104]	; 0x68
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    fc64:	ldr	r0, [r4, #84]	; 0x54
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    fc66:	ldr	r2, [r7, #44]	; 0x2c
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    fc68:	ldr	r7, [r7, #32]
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    fc6a:	mov.w	lr, r2, lsl #3
    fc6e:	cmp	r1, lr
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    fc70:	add	r3, r0
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    fc72:	it	cs
    fc74:	movcs	r1, lr
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    fc76:	udiv	r0, r3, r7
    fc7a:	mls	r3, r7, r0, r3
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
        lfs->free.i = 0;
    fc7e:	movs	r7, #0
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    fc80:	str	r1, [r4, #88]	; 0x58
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
    fc82:	str	r3, [r4, #84]	; 0x54
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
        lfs->free.i = 0;

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    fc84:	mov	r1, r7
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
                % lfs->cfg->block_count;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
        lfs->free.i = 0;
    fc86:	str	r7, [r4, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    fc88:	ldr	r0, [r4, #100]	; 0x64
    fc8a:	bl	14e3c <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
    fc8e:	movs	r3, #1
    fc90:	mov	r2, r4
    fc92:	ldr	r1, [pc, #140]	; (fd20 <lfs_alloc+0x100>)
    fc94:	mov	r0, r4
    fc96:	bl	faac <lfs_fs_traverseraw>
        if (err) {
    fc9a:	cmp	r0, #0
    fc9c:	beq.n	fc2a <lfs_alloc+0xa>
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    fc9e:	ldr	r2, [r4, #104]	; 0x68
    fca0:	ldr	r5, [r4, #44]	; 0x2c
    fca2:	ldr	r3, [r2, #28]

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    fca4:	ldr	r1, [r2, #32]
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    fca6:	udiv	r2, r5, r3
    fcaa:	mls	r3, r3, r2, r5

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    fcae:	str	r1, [r4, #96]	; 0x60

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    lfs->free.size = 0;
    fcb0:	str	r7, [r4, #88]	; 0x58
    lfs->free.i = 0;
    fcb2:	str	r7, [r4, #92]	; 0x5c
}

// Invalidate the lookahead buffer. This is done during mounting and
// failed traversals
static void lfs_alloc_reset(lfs_t *lfs) {
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
    fcb4:	str	r3, [r4, #84]	; 0x54
        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
        if (err) {
            lfs_alloc_reset(lfs);
            return err;
    fcb6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lfs->free.i += 1;
            lfs->free.ack -= 1;

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
    fcba:	ldr	r1, [r4, #104]	; 0x68
    fcbc:	ldr	r2, [r4, #84]	; 0x54
    fcbe:	ldr	r1, [r1, #32]
    fcc0:	add	r3, r2
    fcc2:	udiv	r2, r3, r1
    fcc6:	mls	r3, r1, r2, r3
    fcca:	str.w	r3, [r9]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    fcce:	ldr	r3, [r4, #92]	; 0x5c
    fcd0:	ldr	r5, [r4, #88]	; 0x58
    fcd2:	cmp	r5, r3
    fcd4:	beq.n	fd10 <lfs_alloc+0xf0>
                        (lfs->free.buffer[lfs->free.i / 32]
    fcd6:	lsrs	r1, r3, #5
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    fcd8:	and.w	r2, r3, #31
    fcdc:	ldr.w	r1, [r7, r1, lsl #2]
    fce0:	lsl.w	r2, ip, r2
    fce4:	tst	r2, r1
    fce6:	beq.n	fd10 <lfs_alloc+0xf0>
    fce8:	ldr	r1, [r4, #96]	; 0x60
    fcea:	subs	r1, #1
    fcec:	b.n	fcf6 <lfs_alloc+0xd6>
    fcee:	ldr.w	r0, [r7, r0, lsl #2]
    fcf2:	tst	r2, r0
    fcf4:	beq.n	fd10 <lfs_alloc+0xf0>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
    fcf6:	adds	r3, #1
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    fcf8:	and.w	r2, r3, #31
    fcfc:	cmp	r3, r5
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
                    lfs->free.ack -= 1;
    fcfe:	str	r1, [r4, #96]	; 0x60
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
                        (lfs->free.buffer[lfs->free.i / 32]
    fd00:	mov.w	r0, r3, lsr #5
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    fd04:	lsl.w	r2, ip, r2
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
    fd08:	str	r3, [r4, #92]	; 0x5c
    fd0a:	add.w	r1, r1, #4294967295
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
    fd0e:	bne.n	fcee <lfs_alloc+0xce>
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
                    lfs->free.ack -= 1;
                }

                return 0;
    fd10:	movs	r0, #0
    fd12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
    fd16:	mvn.w	r0, #27
        if (err) {
            lfs_alloc_reset(lfs);
            return err;
        }
    }
}
    fd1a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fd1e:	nop
    fd20:	.word	0x0000e0f9

0000fd24 <lfs_dir_alloc>:
    }

    return 0;
}

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
    fd24:	push	{r4, r5, r6, lr}
    fd26:	mov	r4, r1
    fd28:	sub	sp, #16
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
    fd2a:	adds	r1, #4
    }

    return 0;
}

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
    fd2c:	mov	r5, r0
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
    fd2e:	bl	fc20 <lfs_alloc>
        if (err) {
    fd32:	cbnz	r0, fd7e <lfs_dir_alloc+0x5a>
}

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
    fd34:	mov	r1, r4
    fd36:	mov	r0, r5
    fd38:	bl	fc20 <lfs_alloc>
        if (err) {
    fd3c:	cbnz	r0, fd7e <lfs_dir_alloc+0x5a>
            return err;
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
    fd3e:	mov	r2, r4

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
    fd40:	ldr	r6, [r4, #0]
            return err;
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
    fd42:	str.w	r0, [r2, #8]!

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
    fd46:	movs	r3, #4
    fd48:	str	r0, [sp, #4]
    fd4a:	str	r2, [sp, #8]
    fd4c:	mov	r1, r0
    fd4e:	str	r3, [sp, #12]
    fd50:	str	r6, [sp, #0]
    fd52:	mov	r2, r5
    fd54:	add.w	r0, r5, #104	; 0x68
    fd58:	bl	e2c8 <lfs_bd_read.isra.15>
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
    dir->rev = lfs_fromle32(dir->rev);
    if (err && err != LFS_ERR_CORRUPT) {
    fd5c:	cbnz	r0, fd82 <lfs_dir_alloc+0x5e>
    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
    dir->rev = lfs_fromle32(dir->rev);
    fd5e:	ldr	r3, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
        return err;
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
    fd60:	and.w	r2, r3, #1

    // set defaults
    dir->off = sizeof(dir->rev);
    dir->etag = 0xffffffff;
    dir->count = 0;
    fd64:	movs	r0, #0
    if (err && err != LFS_ERR_CORRUPT) {
        return err;
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
    fd66:	add	r3, r2

    // set defaults
    dir->off = sizeof(dir->rev);
    fd68:	movs	r1, #4
    dir->etag = 0xffffffff;
    fd6a:	mov.w	r2, #4294967295
    if (err && err != LFS_ERR_CORRUPT) {
        return err;
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
    fd6e:	str	r3, [r4, #8]

    // set defaults
    dir->off = sizeof(dir->rev);
    fd70:	str	r1, [r4, #12]
    dir->etag = 0xffffffff;
    fd72:	str	r2, [r4, #16]
    dir->count = 0;
    dir->tail[0] = LFS_BLOCK_NULL;
    fd74:	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
    fd76:	str	r2, [r4, #28]
    dir->rev += dir->rev & 1;

    // set defaults
    dir->off = sizeof(dir->rev);
    dir->etag = 0xffffffff;
    dir->count = 0;
    fd78:	strh	r0, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
    dir->tail[1] = LFS_BLOCK_NULL;
    dir->erased = false;
    fd7a:	strb	r0, [r4, #22]
    dir->split = false;
    fd7c:	strb	r0, [r4, #23]

    // don't write out yet, let caller take care of that
    return 0;
}
    fd7e:	add	sp, #16
    fd80:	pop	{r4, r5, r6, pc}
    // the revision may be valid
    int err = lfs_bd_read(lfs,
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
    dir->rev = lfs_fromle32(dir->rev);
    if (err && err != LFS_ERR_CORRUPT) {
    fd82:	cmn.w	r0, #84	; 0x54
    fd86:	beq.n	fd5e <lfs_dir_alloc+0x3a>
    dir->erased = false;
    dir->split = false;

    // don't write out yet, let caller take care of that
    return 0;
}
    fd88:	add	sp, #16
    fd8a:	pop	{r4, r5, r6, pc}

0000fd8c <lfs_file_relocate>:
    file->flags &= ~LFS_F_OPENED;
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}

static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
    fd8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd90:	mov	r6, r1
    fd92:	sub	sp, #36	; 0x24
    fd94:	mov	r5, r0
    fd96:	add.w	sl, r1, #64	; 0x40
                if (err) {
                    return err;
                }
            }

            err = lfs_bd_prog(lfs,
    fd9a:	mov.w	r9, #1
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
    fd9e:	add	r1, sp, #28
    fda0:	mov	r0, r5
    fda2:	bl	fc20 <lfs_alloc>
        if (err) {
    fda6:	cmp	r0, #0
    fda8:	bne.n	fe40 <lfs_file_relocate+0xb4>
    fdaa:	ldr	r0, [r5, #104]	; 0x68
    return 0;
}

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
    LFS_ASSERT(block < lfs->cfg->block_count);
    int err = lfs->cfg->erase(lfs->cfg, block);
    fdac:	ldr	r1, [sp, #28]
    fdae:	ldr	r3, [r0, #12]
    fdb0:	blx	r3
        if (err) {
            return err;
        }

        err = lfs_bd_erase(lfs, nblock);
        if (err) {
    fdb2:	cmp	r0, #0
    fdb4:	bne.n	fe46 <lfs_file_relocate+0xba>
            }
            return err;
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
    fdb6:	ldr.w	lr, [r6, #60]	; 0x3c
    fdba:	cmp.w	lr, #0
    fdbe:	beq.n	fe54 <lfs_file_relocate+0xc8>
    fdc0:	add.w	r3, r5, #104	; 0x68
    fdc4:	mov	r4, r0
    fdc6:	add.w	r8, sp, #27
    fdca:	str	r3, [sp, #20]
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
                err = lfs_dir_getread(lfs, &file->m,
    fdcc:	add.w	fp, r6, #8
    fdd0:	b.n	fe10 <lfs_file_relocate+0x84>
    fdd2:	ldrh	r7, [r6, #4]
    fdd4:	str.w	r9, [sp, #12]
    fdd8:	lsls	r7, r7, #10
    fdda:	orr.w	r7, r7, #536870912	; 0x20000000
    fdde:	orr.w	r7, r7, #1048576	; 0x100000
    fde2:	str.w	r8, [sp, #8]
    fde6:	str	r4, [sp, #4]
    fde8:	str	r7, [sp, #0]
    fdea:	bl	f194 <lfs_dir_getread.constprop.25>
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
                        i, &data, 1);
                if (err) {
    fdee:	cbnz	r0, fe40 <lfs_file_relocate+0xb4>
                if (err) {
                    return err;
                }
            }

            err = lfs_bd_prog(lfs,
    fdf0:	ldr	r3, [sp, #28]
    fdf2:	mov	r2, r5
    fdf4:	stmia.w	sp, {r3, r4, r8, r9}
    fdf8:	add.w	r1, r5, #16
    fdfc:	movs	r3, #1
    fdfe:	mov	r0, r5
    fe00:	bl	f370 <lfs_bd_prog>
            }
            return err;
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
    fe04:	adds	r4, #1
            }

            err = lfs_bd_prog(lfs,
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
    fe06:	cbnz	r0, fe46 <lfs_file_relocate+0xba>
            }
            return err;
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
    fe08:	ldr.w	lr, [r6, #60]	; 0x3c
    fe0c:	cmp	lr, r4
    fe0e:	bls.n	fe54 <lfs_file_relocate+0xc8>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
    fe10:	ldr	r7, [r6, #48]	; 0x30
    fe12:	lsls	r7, r7, #11
                err = lfs_dir_getread(lfs, &file->m,
    fe14:	rsb	r3, r4, lr
    fe18:	mov	r2, sl
    fe1a:	mov	r1, fp
    fe1c:	mov	r0, r5
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
    fe1e:	bmi.n	fdd2 <lfs_file_relocate+0x46>
                        i, &data, 1);
                if (err) {
                    return err;
                }
            } else {
                err = lfs_bd_read(lfs,
    fe20:	ldr	r2, [r6, #56]	; 0x38
    fe22:	str	r2, [sp, #0]
    fe24:	str.w	r9, [sp, #12]
    fe28:	str.w	r8, [sp, #8]
    fe2c:	str	r4, [sp, #4]
    fe2e:	rsb	r3, r4, lr
    fe32:	mov	r2, r5
    fe34:	mov	r1, sl
    fe36:	ldr	r0, [sp, #20]
    fe38:	bl	e2c8 <lfs_bd_read.isra.15>
                        &file->cache, &lfs->rcache, file->off-i,
                        file->block, i, &data, 1);
                if (err) {
    fe3c:	cmp	r0, #0
    fe3e:	beq.n	fdf0 <lfs_file_relocate+0x64>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
    }
}
    fe40:	add	sp, #36	; 0x24
    fe42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

            err = lfs_bd_prog(lfs,
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    fe46:	cmn.w	r0, #84	; 0x54
    fe4a:	bne.n	fe40 <lfs_file_relocate+0xb4>
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
    fe4c:	mov.w	r3, #4294967295
    fe50:	str	r3, [r5, #16]
relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
    }
    fe52:	b.n	fd9e <lfs_file_relocate+0x12>
                return err;
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
    fe54:	ldr	r3, [r5, #104]	; 0x68
    fe56:	ldr	r1, [r5, #28]
    fe58:	ldr	r2, [r3, #40]	; 0x28
    fe5a:	ldr	r0, [r6, #76]	; 0x4c
    fe5c:	bl	11bf8 <memcpy>
        file->cache.block = lfs->pcache.block;
        file->cache.off = lfs->pcache.off;
        file->cache.size = lfs->pcache.size;
    fe60:	add.w	r0, r5, #16
    fe64:	ldmia	r0, {r0, r1, r3}
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    fe66:	ldr	r2, [r5, #104]	; 0x68
    fe68:	ldr	r2, [r2, #40]	; 0x28
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
        file->cache.block = lfs->pcache.block;
    fe6a:	str	r0, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
    fe6c:	str	r1, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
    fe6e:	str	r3, [r6, #72]	; 0x48
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    fe70:	movs	r1, #255	; 0xff
    fe72:	ldr	r0, [r5, #28]
    fe74:	bl	14e3c <memset>
    pcache->block = LFS_BLOCK_NULL;
    fe78:	mov.w	r3, #4294967295
    fe7c:	str	r3, [r5, #16]
        file->cache.off = lfs->pcache.off;
        file->cache.size = lfs->pcache.size;
        lfs_cache_zero(lfs, &lfs->pcache);

        file->block = nblock;
        file->flags |= LFS_F_WRITING;
    fe7e:	ldr	r3, [r6, #48]	; 0x30
        file->cache.block = lfs->pcache.block;
        file->cache.off = lfs->pcache.off;
        file->cache.size = lfs->pcache.size;
        lfs_cache_zero(lfs, &lfs->pcache);

        file->block = nblock;
    fe80:	ldr	r2, [sp, #28]
    fe82:	str	r2, [r6, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
    fe84:	orr.w	r3, r3, #131072	; 0x20000
        return 0;
    fe88:	movs	r0, #0
        file->cache.off = lfs->pcache.off;
        file->cache.size = lfs->pcache.size;
        lfs_cache_zero(lfs, &lfs->pcache);

        file->block = nblock;
        file->flags |= LFS_F_WRITING;
    fe8a:	str	r3, [r6, #48]	; 0x30
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
    }
}
    fe8c:	add	sp, #36	; 0x24
    fe8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe92:	nop

0000fe94 <lfs_file_write>:
    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
    fe94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe98:	mov	r7, r2
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    const uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_READING) {
    fe9a:	ldr	r2, [r1, #48]	; 0x30
    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
    fe9c:	sub	sp, #76	; 0x4c
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    const uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_READING) {
    fe9e:	lsls	r6, r2, #13
    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
    fea0:	mov	sl, r1
    fea2:	str	r3, [sp, #20]
    fea4:	mov	fp, r0
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    const uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_READING) {
    fea6:	bmi.w	10130 <lfs_file_write+0x29c>
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
    feaa:	lsls	r5, r2, #20
    feac:	ldr.w	r4, [sl, #52]	; 0x34
    feb0:	bmi.w	ffc2 <lfs_file_write+0x12e>
        file->pos = file->ctz.size;
    }

    if (file->pos + size > lfs->file_max) {
    feb4:	ldr	r1, [sp, #20]
    feb6:	ldr.w	r3, [fp, #112]	; 0x70
    feba:	add	r1, r4
    febc:	cmp	r1, r3
    febe:	bhi.w	1023c <lfs_file_write+0x3a8>
        // Larger than file limit?
        LFS_TRACE("lfs_file_write -> %d", LFS_ERR_FBIG);
        return LFS_ERR_FBIG;
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
    fec2:	ands.w	r5, r2, #131072	; 0x20000
    fec6:	bne.n	fef6 <lfs_file_write+0x62>
    fec8:	ldr.w	r3, [sl, #44]	; 0x2c
    fecc:	cmp	r3, r4
    fece:	bcs.n	fef6 <lfs_file_write+0x62>
        // fill with zeros
        lfs_off_t pos = file->pos;
        file->pos = file->ctz.size;
    fed0:	str.w	r3, [sl, #52]	; 0x34

        while (file->pos < pos) {
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
    fed4:	movs	r3, #1
    fed6:	add.w	r2, sp, #63	; 0x3f
    feda:	mov	r1, sl
    fedc:	mov	r0, fp
    fede:	strb.w	r5, [sp, #63]	; 0x3f
    fee2:	bl	fe94 <lfs_file_write>
            if (res < 0) {
    fee6:	cmp	r0, #0
    fee8:	blt.n	ff98 <lfs_file_write+0x104>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
        // fill with zeros
        lfs_off_t pos = file->pos;
        file->pos = file->ctz.size;

        while (file->pos < pos) {
    feea:	ldr.w	r3, [sl, #52]	; 0x34
    feee:	cmp	r3, r4
    fef0:	bcc.n	fed4 <lfs_file_write+0x40>
    fef2:	ldr.w	r2, [sl, #48]	; 0x30
                return res;
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
    fef6:	lsls	r4, r2, #11
    fef8:	bmi.n	ffd2 <lfs_file_write+0x13e>
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    while (nsize > 0) {
    fefa:	ldr	r3, [sp, #20]
    fefc:	cmp	r3, #0
    fefe:	beq.n	ff8e <lfs_file_write+0xfa>
    ff00:	add.w	r9, sl, #64	; 0x40
    ff04:	str	r3, [sp, #24]
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
                nhead = lfs_tole32(nhead);
                err = lfs_bd_prog(lfs, pcache, rcache, true,
    ff06:	mov	r6, r7
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
    ff08:	lsls	r0, r2, #14
    ff0a:	bpl.n	ff9e <lfs_file_write+0x10a>
                file->off == lfs->cfg->block_size) {
    ff0c:	ldr.w	r7, [fp, #104]	; 0x68
    ff10:	ldr.w	r4, [sl, #60]	; 0x3c
    ff14:	ldr	r5, [r7, #28]
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
    ff16:	cmp	r4, r5
    ff18:	beq.w	10140 <lfs_file_write+0x2ac>
    ff1c:	ldr.w	r3, [sl, #56]	; 0x38
    ff20:	ldr	r2, [sp, #24]
    ff22:	subs	r5, r5, r4
    ff24:	cmp	r5, r2
    ff26:	it	cs
    ff28:	movcs	r5, r2
    ff2a:	b.n	ff48 <lfs_file_write+0xb4>
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
                    file->block, file->off, data, diff);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    ff2c:	cmn.w	r3, #84	; 0x54
                return err;
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
    ff30:	mov	r0, fp
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
                    file->block, file->off, data, diff);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
    ff32:	bne.w	1011c <lfs_file_write+0x288>
                return err;
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
    ff36:	bl	fd8c <lfs_file_relocate>
            if (err) {
    ff3a:	cmp	r0, #0
    ff3c:	bne.w	1010a <lfs_file_write+0x276>
    ff40:	ldr.w	r4, [sl, #60]	; 0x3c
    ff44:	ldr.w	r3, [sl, #56]	; 0x38
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
    ff48:	str	r5, [sp, #12]
    ff4a:	stmia.w	sp, {r3, r4, r6}
    ff4e:	mov	r1, r9
    ff50:	movs	r3, #1
    ff52:	mov	r2, fp
    ff54:	mov	r0, fp
    ff56:	bl	f370 <lfs_bd_prog>
                return err;
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
    ff5a:	mov	r1, sl
        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
                    file->block, file->off, data, diff);
            if (err) {
    ff5c:	mov	r3, r0
    ff5e:	cmp	r0, #0
    ff60:	bne.n	ff2c <lfs_file_write+0x98>
                return err;
            }
        }

        file->pos += diff;
        file->off += diff;
    ff62:	ldr.w	r3, [sl, #60]	; 0x3c

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    ff66:	ldr.w	r1, [fp, #104]	; 0x68
                LFS_TRACE("lfs_file_write -> %d", err);
                return err;
            }
        }

        file->pos += diff;
    ff6a:	ldr.w	r2, [sl, #52]	; 0x34

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    ff6e:	ldr	r1, [r1, #32]
                return err;
            }
        }

        file->pos += diff;
        file->off += diff;
    ff70:	add	r3, r5
    ff72:	str.w	r3, [sl, #60]	; 0x3c
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    while (nsize > 0) {
    ff76:	ldr	r3, [sp, #24]
                LFS_TRACE("lfs_file_write -> %d", err);
                return err;
            }
        }

        file->pos += diff;
    ff78:	add	r2, r5
    ff7a:	str.w	r2, [sl, #52]	; 0x34
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    while (nsize > 0) {
    ff7e:	subs	r3, r3, r5

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
    ff80:	str.w	r1, [fp, #96]	; 0x60
            }
        }

        file->pos += diff;
        file->off += diff;
        data += diff;
    ff84:	add	r6, r5
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    while (nsize > 0) {
    ff86:	str	r3, [sp, #24]
    ff88:	ldr.w	r2, [sl, #48]	; 0x30
    ff8c:	bne.n	ff08 <lfs_file_write+0x74>
        nsize -= diff;

        lfs_alloc_ack(lfs);
    }

    file->flags &= ~LFS_F_ERRED;
    ff8e:	bic.w	r2, r2, #524288	; 0x80000
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
    ff92:	ldr	r0, [sp, #20]
        nsize -= diff;

        lfs_alloc_ack(lfs);
    }

    file->flags &= ~LFS_F_ERRED;
    ff94:	str.w	r2, [sl, #48]	; 0x30
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
}
    ff98:	add	sp, #76	; 0x4c
    ff9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
    ff9e:	lsls	r1, r2, #11
    ffa0:	bpl.n	1002c <lfs_file_write+0x198>
    ffa2:	ldr.w	r7, [fp, #104]	; 0x68
                    LFS_TRACE("lfs_file_write -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
                file->off = file->pos;
    ffa6:	ldr.w	r4, [sl, #52]	; 0x34
    ffaa:	str.w	r4, [sl, #60]	; 0x3c
                    file->flags |= LFS_F_ERRED;
                    LFS_TRACE("lfs_file_write -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
    ffae:	mvn.w	r3, #1
    ffb2:	str.w	r3, [sl, #56]	; 0x38
                file->off = file->pos;
            }

            file->flags |= LFS_F_WRITING;
    ffb6:	orr.w	r2, r2, #131072	; 0x20000
    ffba:	ldr	r5, [r7, #28]
    ffbc:	str.w	r2, [sl, #48]	; 0x30
    ffc0:	b.n	ff20 <lfs_file_write+0x8c>
            LFS_TRACE("lfs_file_write -> %d", err);
            return err;
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
    ffc2:	ldr.w	r3, [sl, #44]	; 0x2c
    ffc6:	cmp	r4, r3
        file->pos = file->ctz.size;
    ffc8:	itt	cc
    ffca:	strcc.w	r3, [sl, #52]	; 0x34
    ffce:	movcc	r4, r3
    ffd0:	b.n	feb4 <lfs_file_write+0x20>
    }

    if ((file->flags & LFS_F_INLINE) &&
            lfs_max(file->pos+nsize, file->ctz.size) >
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
    ffd2:	ldr.w	r5, [fp, #104]	; 0x68
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
            lfs_max(file->pos+nsize, file->ctz.size) >
    ffd6:	ldr.w	r6, [sl, #52]	; 0x34
                return res;
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
    ffda:	ldr	r0, [r5, #40]	; 0x28
    ffdc:	ldr	r3, [r5, #28]
    ffde:	movw	r4, #1022	; 0x3fe
    ffe2:	cmp	r4, r0
    ffe4:	it	cs
    ffe6:	movcs	r4, r0
    ffe8:	lsrs	r0, r3, #3
    ffea:	ldr	r3, [sp, #20]
    ffec:	cmp	r4, r0
    ffee:	add.w	r1, r3, r6
    fff2:	mov	r3, r4
    fff4:	it	cs
    fff6:	movcs	r3, r0
    fff8:	ldr.w	r0, [sl, #44]	; 0x2c
    fffc:	cmp	r1, r0
    fffe:	it	cc
   10000:	movcc	r1, r0
   10002:	cmp	r1, r3
   10004:	bls.w	fefa <lfs_file_write+0x66>

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   10008:	ldr	r3, [r5, #32]
        lfs_cache_drop(lfs, &lfs->pcache);
    }
}

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
    file->off = file->pos;
   1000a:	str.w	r6, [sl, #60]	; 0x3c
    lfs_alloc_ack(lfs);
    int err = lfs_file_relocate(lfs, file);
   1000e:	mov	r1, sl

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   10010:	str.w	r3, [fp, #96]	; 0x60
}

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
    file->off = file->pos;
    lfs_alloc_ack(lfs);
    int err = lfs_file_relocate(lfs, file);
   10014:	mov	r0, fp
   10016:	bl	fd8c <lfs_file_relocate>
    if (err) {
   1001a:	cmp	r0, #0
   1001c:	bne.n	1010a <lfs_file_write+0x276>
        return err;
    }

    file->flags &= ~LFS_F_INLINE;
   1001e:	ldr.w	r2, [sl, #48]	; 0x30
   10022:	bic.w	r2, r2, #1048576	; 0x100000
   10026:	str.w	r2, [sl, #48]	; 0x30
   1002a:	b.n	fefa <lfs_file_write+0x66>
    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   1002c:	ldr.w	r1, [sl, #52]	; 0x34
   10030:	cmp	r1, #0
   10032:	bne.w	10148 <lfs_file_write+0x2b4>
   10036:	ldr.w	r7, [fp, #104]	; 0x68

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   1003a:	ldr	r3, [r7, #32]
   1003c:	str.w	r3, [fp, #96]	; 0x60
                    lfs_cache_zero(lfs, &file->cache);
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   10040:	ldr.w	r4, [sl, #52]	; 0x34
   10044:	ldr.w	r3, [sl, #56]	; 0x38
   10048:	str	r3, [sp, #44]	; 0x2c
                *block = nblock;
                *off = 0;
                return 0;
            }

            lfs_size_t noff = size - 1;
   1004a:	subs	r3, r4, #1
   1004c:	str	r3, [sp, #40]	; 0x28
   1004e:	str	r4, [sp, #36]	; 0x24
   10050:	str.w	sl, [sp, #32]
   10054:	str	r6, [sp, #48]	; 0x30
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
   10056:	add	r1, sp, #64	; 0x40
   10058:	mov	r0, fp
   1005a:	bl	fc20 <lfs_alloc>
        if (err) {
   1005e:	cmp	r0, #0
   10060:	bne.n	10106 <lfs_file_write+0x272>
   10062:	ldr.w	r0, [fp, #104]	; 0x68
    return 0;
}

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
    LFS_ASSERT(block < lfs->cfg->block_count);
    int err = lfs->cfg->erase(lfs->cfg, block);
   10066:	ldr	r1, [sp, #64]	; 0x40
   10068:	ldr	r3, [r0, #12]
   1006a:	blx	r3
            return err;
        }

        {
            err = lfs_bd_erase(lfs, nblock);
            if (err) {
   1006c:	cmp	r0, #0
   1006e:	bne.w	1018a <lfs_file_write+0x2f6>
                    goto relocate;
                }
                return err;
            }

            if (size == 0) {
   10072:	ldr	r3, [sp, #36]	; 0x24
   10074:	cmp	r3, #0
   10076:	beq.w	1024e <lfs_file_write+0x3ba>
   1007a:	ldr.w	r7, [fp, #104]	; 0x68
                *block = nblock;
                *off = 0;
                return 0;
            }

            lfs_size_t noff = size - 1;
   1007e:	ldr	r6, [sp, #40]	; 0x28


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   10080:	ldr	r4, [r7, #28]
                *block = nblock;
                *off = 0;
                return 0;
            }

            lfs_size_t noff = size - 1;
   10082:	mov	r0, r6


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
    lfs_off_t size = *off;
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   10084:	sub.w	r5, r4, #8
    lfs_off_t i = size / b;
   10088:	udiv	r3, r6, r5
    if (i == 0) {
   1008c:	cbz	r3, 100ae <lfs_file_write+0x21a>
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
   1008e:	subs	r0, r3, #1
   10090:	bl	14310 <__popcountsi2>
        return 0;
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   10094:	adds	r0, #2
   10096:	sub.w	r8, r6, r0, lsl #2
   1009a:	udiv	r8, r8, r5
   1009e:	mov	r0, r8
   100a0:	bl	14310 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
   100a4:	mls	r5, r8, r5, r6
   100a8:	sub.w	r0, r5, r0, lsl #2
   100ac:	mov	r3, r8
                return 0;
            }

            lfs_size_t noff = size - 1;
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
            noff = noff + 1;
   100ae:	adds	r6, r0, #1

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
   100b0:	cmp	r4, r6
   100b2:	beq.n	1019a <lfs_file_write+0x306>
                for (lfs_off_t i = 0; i < noff; i++) {
   100b4:	cmp	r6, #0
   100b6:	beq.w	10242 <lfs_file_write+0x3ae>
   100ba:	add.w	r8, fp, #104	; 0x68
   100be:	movs	r5, #0
   100c0:	add	r4, sp, #68	; 0x44
                    uint8_t data;
                    err = lfs_bd_read(lfs,
   100c2:	movs	r7, #1
   100c4:	ldr.w	sl, [sp, #44]	; 0x2c
   100c8:	b.n	100e6 <lfs_file_write+0x252>
                            head, i, &data, 1);
                    if (err) {
                        return err;
                    }

                    err = lfs_bd_prog(lfs,
   100ca:	ldr	r0, [sp, #64]	; 0x40
   100cc:	str	r7, [sp, #12]
   100ce:	stmia.w	sp, {r0, r5}
   100d2:	str	r4, [sp, #8]
   100d4:	mov	r0, fp
   100d6:	bl	f370 <lfs_bd_prog>
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
            noff = noff + 1;

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
                for (lfs_off_t i = 0; i < noff; i++) {
   100da:	adds	r5, #1
                    }

                    err = lfs_bd_prog(lfs,
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
   100dc:	cmp	r0, #0
   100de:	bne.n	1018a <lfs_file_write+0x2f6>
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
            noff = noff + 1;

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
                for (lfs_off_t i = 0; i < noff; i++) {
   100e0:	cmp	r6, r5
   100e2:	beq.w	10220 <lfs_file_write+0x38c>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
   100e6:	subs	r3, r6, r5
   100e8:	mov	r2, fp
   100ea:	movs	r1, #0
   100ec:	str	r7, [sp, #12]
   100ee:	str	r4, [sp, #8]
   100f0:	str	r5, [sp, #4]
   100f2:	str.w	sl, [sp]
   100f6:	mov	r0, r8
   100f8:	bl	e2c8 <lfs_bd_read.isra.15>
                            head, i, &data, 1);
                    if (err) {
                        return err;
                    }

                    err = lfs_bd_prog(lfs,
   100fc:	movs	r3, #1
   100fe:	mov	r2, fp
   10100:	mov	r1, r9
                for (lfs_off_t i = 0; i < noff; i++) {
                    uint8_t data;
                    err = lfs_bd_read(lfs,
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
   10102:	cmp	r0, #0
   10104:	beq.n	100ca <lfs_file_write+0x236>
   10106:	ldr.w	sl, [sp, #32]
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
        if (err) {
            file->flags |= LFS_F_ERRED;
   1010a:	ldr.w	r3, [sl, #48]	; 0x30
   1010e:	orr.w	r3, r3, #524288	; 0x80000
   10112:	str.w	r3, [sl, #48]	; 0x30
    }

    file->flags &= ~LFS_F_ERRED;
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
}
   10116:	add	sp, #76	; 0x4c
   10118:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    file->block, file->off, data, diff);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
   1011c:	ldr.w	r2, [sl, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   10120:	mov	r0, r3
                    file->block, file->off, data, diff);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
   10122:	orr.w	r2, r2, #524288	; 0x80000
   10126:	str.w	r2, [sl, #48]	; 0x30
    }

    file->flags &= ~LFS_F_ERRED;
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
}
   1012a:	add	sp, #76	; 0x4c
   1012c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_READING) {
        // drop any reads
        int err = lfs_file_flush(lfs, file);
   10130:	bl	10268 <lfs_file_flush>
        if (err) {
   10134:	cmp	r0, #0
   10136:	bne.w	ff98 <lfs_file_write+0x104>
   1013a:	ldr.w	r2, [sl, #48]	; 0x30
   1013e:	b.n	feaa <lfs_file_write+0x16>

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
   10140:	lsls	r3, r2, #11
   10142:	bpl.w	1003a <lfs_file_write+0x1a6>
   10146:	b.n	ffa6 <lfs_file_write+0x112>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   10148:	subs	r1, #1
   1014a:	add.w	r0, sl, #56	; 0x38
   1014e:	add.w	r4, sl, #60	; 0x3c
   10152:	ldr.w	r3, [sl, #44]	; 0x2c
   10156:	ldr.w	r2, [sl, #40]	; 0x28
   1015a:	str	r1, [sp, #0]
   1015c:	str	r0, [sp, #4]
   1015e:	str	r4, [sp, #8]
   10160:	mov	r1, r9
   10162:	mov	r0, fp
   10164:	bl	f0a4 <lfs_ctz_find.constprop.24>
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
                    if (err) {
   10168:	cmp	r0, #0
   1016a:	bne.n	1010a <lfs_file_write+0x276>
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   1016c:	ldr.w	r3, [fp, #104]	; 0x68
   10170:	ldr.w	r0, [sl, #76]	; 0x4c
   10174:	ldr	r2, [r3, #40]	; 0x28
   10176:	movs	r1, #255	; 0xff
   10178:	bl	14e3c <memset>
    pcache->block = LFS_BLOCK_NULL;
   1017c:	mov.w	r3, #4294967295
   10180:	ldr.w	r7, [fp, #104]	; 0x68
   10184:	str.w	r3, [sl, #64]	; 0x40
   10188:	b.n	1003a <lfs_file_write+0x1a6>
                nhead = lfs_tole32(nhead);
                err = lfs_bd_prog(lfs, pcache, rcache, true,
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
   1018a:	cmn.w	r0, #84	; 0x54
   1018e:	bne.n	10106 <lfs_file_write+0x272>
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   10190:	ldr	r2, [sp, #32]
   10192:	mov.w	r3, #4294967295
   10196:	str	r3, [r2, #64]	; 0x40
   10198:	b.n	10056 <lfs_file_write+0x1c2>

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
   1019a:	adds	r3, #1
   1019c:	rbit	r6, r3
            }

            // append block
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
            lfs_block_t nhead = head;
   101a0:	add	r4, sp, #72	; 0x48
   101a2:	clz	r6, r6
   101a6:	ldr	r3, [sp, #44]	; 0x2c
   101a8:	str.w	r3, [r4, #-4]!
                return 0;
            }

            // append block
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
   101ac:	adds	r3, r6, #1
   101ae:	str	r3, [sp, #52]	; 0x34
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
   101b0:	movs	r5, #0
   101b2:	add.w	r8, fp, #104	; 0x68
   101b6:	str	r6, [sp, #28]
   101b8:	mov	sl, r3
                nhead = lfs_tole32(nhead);
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   101ba:	ldr	r3, [sp, #64]	; 0x40
   101bc:	str	r4, [sp, #8]
   101be:	movs	r2, #4
   101c0:	lsls	r7, r5, #2
   101c2:	str	r2, [sp, #12]
   101c4:	stmia.w	sp, {r3, r7}
   101c8:	mov	r2, fp
   101ca:	movs	r3, #1
   101cc:	mov	r1, r9
   101ce:	mov	r0, fp
   101d0:	bl	f370 <lfs_bd_prog>
                    }
                    return err;
                }

                if (i != skips-1) {
                    err = lfs_bd_read(lfs,
   101d4:	movs	r3, #4
   101d6:	mov	r2, fp
   101d8:	mov	r1, r0
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
                nhead = lfs_tole32(nhead);
                err = lfs_bd_prog(lfs, pcache, rcache, true,
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
   101da:	ldr.w	lr, [sp, #68]	; 0x44
                if (err) {
   101de:	cmp	r0, #0
   101e0:	bne.n	1018a <lfs_file_write+0x2f6>
                        goto relocate;
                    }
                    return err;
                }

                if (i != skips-1) {
   101e2:	ldr	r6, [sp, #28]
   101e4:	cmp	r6, r5
                    err = lfs_bd_read(lfs,
   101e6:	mov	r0, r8

            // append block
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
   101e8:	add.w	r5, r5, #1
                        goto relocate;
                    }
                    return err;
                }

                if (i != skips-1) {
   101ec:	beq.n	10202 <lfs_file_write+0x36e>
                    err = lfs_bd_read(lfs,
   101ee:	movs	r6, #4
   101f0:	str	r6, [sp, #12]
   101f2:	str	r4, [sp, #8]
   101f4:	str	r7, [sp, #4]
   101f6:	str.w	lr, [sp]
   101fa:	bl	e2c8 <lfs_bd_read.isra.15>
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
                    if (err) {
   101fe:	cmp	r0, #0
   10200:	bne.n	10106 <lfs_file_write+0x272>

            // append block
            index += 1;
            lfs_size_t skips = lfs_ctz(index) + 1;
            lfs_block_t nhead = head;
            for (lfs_off_t i = 0; i < skips; i++) {
   10202:	cmp	sl, r5
   10204:	bhi.n	101ba <lfs_file_write+0x326>
                    }
                }
            }

            *block = nblock;
            *off = 4*skips;
   10206:	ldr	r3, [sp, #52]	; 0x34
   10208:	ldr.w	sl, [sp, #32]
   1020c:	ldr	r6, [sp, #48]	; 0x30
   1020e:	ldr.w	r7, [fp, #104]	; 0x68
   10212:	lsls	r4, r3, #2
                        return err;
                    }
                }
            }

            *block = nblock;
   10214:	ldr	r3, [sp, #64]	; 0x40
            *off = 4*skips;
   10216:	str.w	r4, [sl, #60]	; 0x3c
                        return err;
                    }
                }
            }

            *block = nblock;
   1021a:	str.w	r3, [sl, #56]	; 0x38
   1021e:	b.n	10236 <lfs_file_write+0x3a2>
   10220:	ldr.w	sl, [sp, #32]
   10224:	ldr	r6, [sp, #48]	; 0x30
   10226:	ldr.w	r7, [fp, #104]	; 0x68
                        }
                        return err;
                    }
                }

                *block = nblock;
   1022a:	ldr	r3, [sp, #64]	; 0x40
                *off = noff;
   1022c:	str.w	r5, [sl, #60]	; 0x3c
   10230:	mov	r4, r5
                        }
                        return err;
                    }
                }

                *block = nblock;
   10232:	str.w	r3, [sl, #56]	; 0x38
   10236:	ldr.w	r2, [sl, #48]	; 0x30
   1023a:	b.n	ffb6 <lfs_file_write+0x122>
    }

    if (file->pos + size > lfs->file_max) {
        // Larger than file limit?
        LFS_TRACE("lfs_file_write -> %d", LFS_ERR_FBIG);
        return LFS_ERR_FBIG;
   1023c:	mvn.w	r0, #26
   10240:	b.n	ff98 <lfs_file_write+0x104>
   10242:	mov	r8, r6
   10244:	ldr.w	sl, [sp, #32]
   10248:	ldr	r6, [sp, #48]	; 0x30
                return 0;
            }

            lfs_size_t noff = size - 1;
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
            noff = noff + 1;
   1024a:	mov	r5, r8
   1024c:	b.n	1022a <lfs_file_write+0x396>
   1024e:	ldr.w	sl, [sp, #32]
   10252:	ldr	r6, [sp, #48]	; 0x30
   10254:	ldr.w	r7, [fp, #104]	; 0x68
   10258:	mov	r4, r3
                }
                return err;
            }

            if (size == 0) {
                *block = nblock;
   1025a:	ldr	r3, [sp, #64]	; 0x40
                *off = 0;
   1025c:	str.w	r4, [sl, #60]	; 0x3c
                }
                return err;
            }

            if (size == 0) {
                *block = nblock;
   10260:	str.w	r3, [sl, #56]	; 0x38
   10264:	b.n	10236 <lfs_file_write+0x3a2>
   10266:	nop

00010268 <lfs_file_flush>:
}

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    if (file->flags & LFS_F_READING) {
   10268:	ldr	r2, [r1, #48]	; 0x30
   1026a:	lsls	r3, r2, #13
   1026c:	bpl.n	10280 <lfs_file_flush+0x18>
        if (!(file->flags & LFS_F_INLINE)) {
   1026e:	lsls	r3, r2, #11
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   10270:	it	pl
   10272:	movpl.w	r3, #4294967295

    if (file->flags & LFS_F_READING) {
        if (!(file->flags & LFS_F_INLINE)) {
            lfs_cache_drop(lfs, &file->cache);
        }
        file->flags &= ~LFS_F_READING;
   10276:	bic.w	r2, r2, #262144	; 0x40000
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   1027a:	it	pl
   1027c:	strpl	r3, [r1, #64]	; 0x40

    if (file->flags & LFS_F_READING) {
        if (!(file->flags & LFS_F_INLINE)) {
            lfs_cache_drop(lfs, &file->cache);
        }
        file->flags &= ~LFS_F_READING;
   1027e:	str	r2, [r1, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
   10280:	ands.w	r3, r2, #131072	; 0x20000
   10284:	beq.n	10336 <lfs_file_flush+0xce>

    file->flags &= ~LFS_F_INLINE;
    return 0;
}

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   10286:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1028a:	mov	r5, r1
        }
        file->flags &= ~LFS_F_READING;
    }

    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;
   1028c:	ldr	r7, [r1, #52]	; 0x34

        if (!(file->flags & LFS_F_INLINE)) {
   1028e:	ands.w	r1, r2, #1048576	; 0x100000

    file->flags &= ~LFS_F_INLINE;
    return 0;
}

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   10292:	sub	sp, #88	; 0x58
   10294:	mov	r4, r0
    }

    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;

        if (!(file->flags & LFS_F_INLINE)) {
   10296:	bne.n	10314 <lfs_file_flush+0xac>
            // copy over anything after current branch
            lfs_file_t orig = {
   10298:	movs	r2, #84	; 0x54
   1029a:	add	r0, sp, #4
   1029c:	bl	14e3c <memset>
   102a0:	ldmia.w	r4, {r0, r1, r2, r3}
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   102a4:	mov.w	ip, #4294967295
    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;

        if (!(file->flags & LFS_F_INLINE)) {
            // copy over anything after current branch
            lfs_file_t orig = {
   102a8:	add.w	lr, sp, #68	; 0x44
   102ac:	stmia.w	lr, {r0, r1, r2, r3}
   102b0:	ldr	r6, [r5, #40]	; 0x28
   102b2:	ldr	r0, [r5, #44]	; 0x2c
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   102b4:	str.w	ip, [r4]
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
   102b8:	ldr	r2, [r5, #52]	; 0x34
   102ba:	ldr	r3, [r5, #44]	; 0x2c
    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;

        if (!(file->flags & LFS_F_INLINE)) {
            // copy over anything after current branch
            lfs_file_t orig = {
   102bc:	ldr	r1, [pc, #176]	; (10370 <lfs_file_flush+0x108>)
   102be:	str	r6, [sp, #44]	; 0x2c
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
   102c0:	cmp	r2, r3
    if (file->flags & LFS_F_WRITING) {
        lfs_off_t pos = file->pos;

        if (!(file->flags & LFS_F_INLINE)) {
            // copy over anything after current branch
            lfs_file_t orig = {
   102c2:	str	r7, [sp, #56]	; 0x38
   102c4:	str	r0, [sp, #48]	; 0x30
   102c6:	str	r1, [sp, #52]	; 0x34
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
   102c8:	bcs.n	1033a <lfs_file_flush+0xd2>
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   102ca:	mov	r8, ip
   102cc:	b.n	102ee <lfs_file_flush+0x86>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
                if (res < 0) {
                    return res;
                }

                res = lfs_file_write(lfs, file, &data, 1);
   102ce:	bl	fe94 <lfs_file_write>
                if (res < 0) {
   102d2:	cmp	r0, #0
   102d4:	blt.n	10330 <lfs_file_flush+0xc8>
                    return res;
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
   102d6:	ldr	r3, [r4, #0]
   102d8:	adds	r3, #1
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   102da:	it	ne
   102dc:	strne.w	r8, [r4]
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
   102e0:	ldr	r2, [r5, #52]	; 0x34
   102e2:	ldr	r3, [r5, #44]	; 0x2c
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   102e4:	it	ne
   102e6:	strne.w	r8, [sp, #68]	; 0x44
                .pos = file->pos,
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);

            while (file->pos < file->ctz.size) {
   102ea:	cmp	r2, r3
   102ec:	bcs.n	1033a <lfs_file_flush+0xd2>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
   102ee:	movs	r3, #1
   102f0:	add.w	r2, sp, #3
   102f4:	add	r1, sp, #4
   102f6:	mov	r0, r4
   102f8:	bl	10374 <lfs_file_read>
                if (res < 0) {
   102fc:	subs	r6, r0, #0
                    return res;
                }

                res = lfs_file_write(lfs, file, &data, 1);
   102fe:	mov.w	r3, #1
   10302:	add.w	r2, sp, #3
   10306:	mov	r1, r5
   10308:	mov	r0, r4
            while (file->pos < file->ctz.size) {
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
                if (res < 0) {
   1030a:	bge.n	102ce <lfs_file_flush+0x66>

            while (file->pos < file->ctz.size) {
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
   1030c:	mov	r0, r6

        file->pos = pos;
    }

    return 0;
}
   1030e:	add	sp, #88	; 0x58
   10310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
   10314:	ldr	r3, [r5, #44]	; 0x2c
   10316:	cmp	r3, r7
   10318:	it	cc
   1031a:	movcc	r3, r7

        // actual file updates
        file->ctz.head = file->block;
        file->ctz.size = file->pos;
        file->flags &= ~LFS_F_WRITING;
        file->flags |= LFS_F_DIRTY;
   1031c:	bic.w	r2, r2, #131072	; 0x20000
   10320:	orr.w	r2, r2, #65536	; 0x10000
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
        }

        // actual file updates
        file->ctz.head = file->block;
   10324:	ldr	r1, [r5, #56]	; 0x38
        file->ctz.size = file->pos;
        file->flags &= ~LFS_F_WRITING;
        file->flags |= LFS_F_DIRTY;
   10326:	str	r2, [r5, #48]	; 0x30
            file->pos = lfs_max(file->pos, file->ctz.size);
        }

        // actual file updates
        file->ctz.head = file->block;
        file->ctz.size = file->pos;
   10328:	str	r3, [r5, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
        file->flags |= LFS_F_DIRTY;

        file->pos = pos;
   1032a:	str	r7, [r5, #52]	; 0x34
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
        }

        // actual file updates
        file->ctz.head = file->block;
   1032c:	str	r1, [r5, #40]	; 0x28
        file->flags |= LFS_F_DIRTY;

        file->pos = pos;
    }

    return 0;
   1032e:	movs	r0, #0
}
   10330:	add	sp, #88	; 0x58
   10332:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        file->flags |= LFS_F_DIRTY;

        file->pos = pos;
    }

    return 0;
   10336:	mov	r0, r3
   10338:	bx	lr
   1033a:	add.w	r6, r5, #64	; 0x40
   1033e:	b.n	10350 <lfs_file_flush+0xe8>

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
   10340:	cmn.w	r3, #84	; 0x54

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
   10344:	mov	r0, r4

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
                if (err) {
                    if (err == LFS_ERR_CORRUPT) {
   10346:	bne.n	1036a <lfs_file_flush+0x102>

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
   10348:	bl	fd8c <lfs_file_relocate>
                if (err) {
   1034c:	cmp	r0, #0
   1034e:	bne.n	10330 <lfs_file_flush+0xc8>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
   10350:	movs	r3, #1
   10352:	mov	r1, r6
   10354:	mov	r2, r4
   10356:	mov	r0, r4
   10358:	bl	f2e4 <lfs_bd_flush>

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
   1035c:	mov	r1, r5
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
                if (err) {
   1035e:	mov	r3, r0
   10360:	cmp	r0, #0
   10362:	bne.n	10340 <lfs_file_flush+0xd8>
   10364:	ldr	r3, [r5, #52]	; 0x34
   10366:	ldr	r2, [r5, #48]	; 0x30
   10368:	b.n	1031c <lfs_file_flush+0xb4>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
   1036a:	mov	r0, r3
   1036c:	b.n	10330 <lfs_file_flush+0xc8>
   1036e:	nop
   10370:	.word	0x00200001

00010374 <lfs_file_read>:
    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
   10374:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10378:	mov	r7, r2
    LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);

    uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_WRITING) {
   1037a:	ldr	r2, [r1, #48]	; 0x30
   1037c:	lsls	r6, r2, #14
    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
   1037e:	sub	sp, #28
   10380:	mov	r4, r1
   10382:	mov	r5, r3
   10384:	mov	r8, r0
    LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);

    uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_WRITING) {
   10386:	bmi.n	1047e <lfs_file_read+0x10a>
            LFS_TRACE("lfs_file_read -> %d", err);
            return err;
        }
    }

    if (file->pos >= file->ctz.size) {
   10388:	ldr	r0, [r4, #52]	; 0x34
   1038a:	ldr	r2, [r4, #44]	; 0x2c
   1038c:	cmp	r0, r2
   1038e:	bcs.n	10476 <lfs_file_read+0x102>
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
   10390:	subs	r2, r2, r0
   10392:	cmp	r2, r5
   10394:	mov	r3, r2
   10396:	it	cs
   10398:	movcs	r3, r5
   1039a:	str	r3, [sp, #20]
    }

    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
   1039c:	cmp	r3, #0
   1039e:	beq.n	1048c <lfs_file_read+0x118>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   103a0:	add.w	r3, r4, #56	; 0x38
   103a4:	add.w	r9, r4, #64	; 0x40
    }

    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
   103a8:	ldr	r6, [sp, #20]
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   103aa:	str	r3, [sp, #16]
                if (err) {
                    LFS_TRACE("lfs_file_read -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
   103ac:	mvn.w	sl, #1
    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   103b0:	add.w	fp, r4, #60	; 0x3c
   103b4:	b.n	10408 <lfs_file_read+0x94>
    nsize = size;

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
   103b6:	ldr.w	r3, [r8, #104]	; 0x68
   103ba:	ldr.w	lr, [r4, #60]	; 0x3c
   103be:	ldr	r3, [r3, #28]
    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
   103c0:	cmp	lr, r3
   103c2:	beq.n	1040e <lfs_file_read+0x9a>
   103c4:	rsb	r5, lr, r3
   103c8:	cmp	r5, r6
   103ca:	it	cs
   103cc:	movcs	r5, r6
            file->flags |= LFS_F_READING;
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        if (file->flags & LFS_F_INLINE) {
   103ce:	ands.w	r1, r1, #1048576	; 0x100000
   103d2:	beq.n	10436 <lfs_file_read+0xc2>
            int err = lfs_dir_getread(lfs, &file->m,
   103d4:	ldrh	r2, [r4, #4]
   103d6:	str	r5, [sp, #12]
   103d8:	lsls	r2, r2, #10
   103da:	orr.w	r2, r2, #536870912	; 0x20000000
   103de:	orr.w	r2, r2, #1048576	; 0x100000
   103e2:	stmia.w	sp, {r2, lr}
   103e6:	str	r7, [sp, #8]
   103e8:	mov	r2, r9
   103ea:	add.w	r1, r4, #8
   103ee:	mov	r0, r8
   103f0:	bl	f194 <lfs_dir_getread.constprop.25>
                    NULL, &file->cache, lfs->cfg->block_size,
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
                    file->off, data, diff);
            if (err) {
   103f4:	cbnz	r0, 1044e <lfs_file_read+0xda>
                LFS_TRACE("lfs_file_read -> %d", err);
                return err;
            }
        }

        file->pos += diff;
   103f6:	ldr	r0, [r4, #52]	; 0x34
        file->off += diff;
   103f8:	ldr	r3, [r4, #60]	; 0x3c
                LFS_TRACE("lfs_file_read -> %d", err);
                return err;
            }
        }

        file->pos += diff;
   103fa:	add	r0, r5
        file->off += diff;
   103fc:	add	r3, r5
    }

    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
   103fe:	subs	r6, r6, r5
            }
        }

        file->pos += diff;
        file->off += diff;
        data += diff;
   10400:	add	r7, r5
                LFS_TRACE("lfs_file_read -> %d", err);
                return err;
            }
        }

        file->pos += diff;
   10402:	str	r0, [r4, #52]	; 0x34
        file->off += diff;
   10404:	str	r3, [r4, #60]	; 0x3c
    }

    size = lfs_min(size, file->ctz.size - file->pos);
    nsize = size;

    while (nsize > 0) {
   10406:	beq.n	1048c <lfs_file_read+0x118>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
   10408:	ldr	r1, [r4, #48]	; 0x30
   1040a:	lsls	r2, r1, #13
   1040c:	bmi.n	103b6 <lfs_file_read+0x42>
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
   1040e:	lsls	r3, r1, #11
   10410:	bpl.n	10454 <lfs_file_read+0xe0>
                    LFS_TRACE("lfs_file_read -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
                file->off = file->pos;
   10412:	mov	lr, r0
   10414:	str	r0, [r4, #60]	; 0x3c
                if (err) {
                    LFS_TRACE("lfs_file_read -> %d", err);
                    return err;
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
   10416:	str.w	sl, [r4, #56]	; 0x38
   1041a:	ldr.w	r3, [r8, #104]	; 0x68
   1041e:	ldr	r3, [r3, #28]
   10420:	rsb	r5, lr, r3
                file->off = file->pos;
            }

            file->flags |= LFS_F_READING;
   10424:	orr.w	r1, r1, #262144	; 0x40000
   10428:	cmp	r5, r6
   1042a:	str	r1, [r4, #48]	; 0x30
   1042c:	it	cs
   1042e:	movcs	r5, r6
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
        if (file->flags & LFS_F_INLINE) {
   10430:	ands.w	r1, r1, #1048576	; 0x100000
   10434:	bne.n	103d4 <lfs_file_read+0x60>
            if (err) {
                LFS_TRACE("lfs_file_read -> %d", err);
                return err;
            }
        } else {
            int err = lfs_bd_read(lfs,
   10436:	ldr	r2, [r4, #56]	; 0x38
   10438:	str	r5, [sp, #12]
   1043a:	stmia.w	sp, {r2, lr}
   1043e:	str	r7, [sp, #8]
   10440:	mov	r2, r9
   10442:	add.w	r0, r8, #104	; 0x68
   10446:	bl	e2c8 <lfs_bd_read.isra.15>
                    NULL, &file->cache, lfs->cfg->block_size,
                    file->block, file->off, data, diff);
            if (err) {
   1044a:	cmp	r0, #0
   1044c:	beq.n	103f6 <lfs_file_read+0x82>
        nsize -= diff;
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}
   1044e:	add	sp, #28
   10450:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
                file->off == lfs->cfg->block_size) {
            if (!(file->flags & LFS_F_INLINE)) {
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   10454:	ldr	r1, [sp, #16]
   10456:	ldr	r3, [r4, #44]	; 0x2c
   10458:	ldr	r2, [r4, #40]	; 0x28
   1045a:	str.w	fp, [sp, #8]
   1045e:	stmia.w	sp, {r0, r1}
   10462:	mov	r1, r9
   10464:	mov	r0, r8
   10466:	bl	f0a4 <lfs_ctz_find.constprop.24>
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
   1046a:	cmp	r0, #0
   1046c:	bne.n	1044e <lfs_file_read+0xda>
   1046e:	ldr	r1, [r4, #48]	; 0x30
   10470:	ldr.w	lr, [r4, #60]	; 0x3c
   10474:	b.n	1041a <lfs_file_read+0xa6>
    }

    if (file->pos >= file->ctz.size) {
        // eof if past end
        LFS_TRACE("lfs_file_read -> %d", 0);
        return 0;
   10476:	movs	r0, #0
        nsize -= diff;
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}
   10478:	add	sp, #28
   1047a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t *data = buffer;
    lfs_size_t nsize = size;

    if (file->flags & LFS_F_WRITING) {
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
   1047e:	bl	10268 <lfs_file_flush>
        if (err) {
   10482:	cmp	r0, #0
   10484:	beq.n	10388 <lfs_file_read+0x14>
        nsize -= diff;
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
}
   10486:	add	sp, #28
   10488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        data += diff;
        nsize -= diff;
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
    return size;
   1048c:	ldr	r0, [sp, #20]
}
   1048e:	add	sp, #28
   10490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010494 <lfs_file_seek>:
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
    return size;
}

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
   10494:	push	{r3, r4, r5, r6, r7, lr}
   10496:	mov	r7, r2
   10498:	mov	r4, r3
   1049a:	mov	r6, r0
   1049c:	mov	r5, r1
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
   1049e:	bl	10268 <lfs_file_flush>
    if (err) {
   104a2:	cbnz	r0, 104b6 <lfs_file_seek+0x22>
        return err;
    }

    // find new pos
    lfs_off_t npos = file->pos;
    if (whence == LFS_SEEK_SET) {
   104a4:	cbnz	r4, 104b8 <lfs_file_seek+0x24>
        npos = off;
   104a6:	mov	r0, r7
        npos = file->pos + off;
    } else if (whence == LFS_SEEK_END) {
        npos = file->ctz.size + off;
    }

    if (npos > lfs->file_max) {
   104a8:	ldr	r3, [r6, #112]	; 0x70
   104aa:	cmp	r3, r0
   104ac:	bcc.n	104b2 <lfs_file_seek+0x1e>
        LFS_TRACE("lfs_file_seek -> %d", LFS_ERR_INVAL);
        return LFS_ERR_INVAL;
    }

    // update pos
    file->pos = npos;
   104ae:	str	r0, [r5, #52]	; 0x34
   104b0:	pop	{r3, r4, r5, r6, r7, pc}
    }

    if (npos > lfs->file_max) {
        // file position out of range
        LFS_TRACE("lfs_file_seek -> %d", LFS_ERR_INVAL);
        return LFS_ERR_INVAL;
   104b2:	mvn.w	r0, #21

    // update pos
    file->pos = npos;
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
    return npos;
}
   104b6:	pop	{r3, r4, r5, r6, r7, pc}

    // find new pos
    lfs_off_t npos = file->pos;
    if (whence == LFS_SEEK_SET) {
        npos = off;
    } else if (whence == LFS_SEEK_CUR) {
   104b8:	cmp	r4, #1
        LFS_TRACE("lfs_file_seek -> %d", err);
        return err;
    }

    // find new pos
    lfs_off_t npos = file->pos;
   104ba:	ldr	r0, [r5, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
        npos = off;
    } else if (whence == LFS_SEEK_CUR) {
   104bc:	beq.n	104c4 <lfs_file_seek+0x30>
        npos = file->pos + off;
    } else if (whence == LFS_SEEK_END) {
   104be:	cmp	r4, #2
   104c0:	bne.n	104a8 <lfs_file_seek+0x14>
        npos = file->ctz.size + off;
   104c2:	ldr	r0, [r5, #44]	; 0x2c
   104c4:	add	r0, r7
   104c6:	b.n	104a8 <lfs_file_seek+0x14>

000104c8 <lfs_file_truncate>:
    LFS_TRACE("lfs_file_truncate(%p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, size);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    if (size > LFS_FILE_MAX) {
   104c8:	cmp	r2, #0
   104ca:	blt.n	10586 <lfs_file_truncate+0xbe>
    file->pos = npos;
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
    return npos;
}

int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   104cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
   104d0:	ldr	r3, [r1, #48]	; 0x30
    if (size > LFS_FILE_MAX) {
        LFS_TRACE("lfs_file_truncate -> %d", LFS_ERR_INVAL);
        return LFS_ERR_INVAL;
    }

    lfs_off_t pos = file->pos;
   104d2:	ldr.w	r8, [r1, #52]	; 0x34

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
   104d6:	tst.w	r3, #131072	; 0x20000
    file->pos = npos;
    LFS_TRACE("lfs_file_seek -> %"PRId32, npos);
    return npos;
}

int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   104da:	sub	sp, #28
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
        LFS_TRACE("lfs_file_size -> %"PRId32,
                lfs_max(file->pos, file->ctz.size));
        return lfs_max(file->pos, file->ctz.size);
   104dc:	ldr	r3, [r1, #44]	; 0x2c

lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_size(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
   104de:	bne.n	10502 <lfs_file_truncate+0x3a>
        return LFS_ERR_INVAL;
    }

    lfs_off_t pos = file->pos;
    lfs_off_t oldsize = lfs_file_size(lfs, file);
    if (size < oldsize) {
   104e0:	cmp	r2, r3
   104e2:	mov	r5, r2
   104e4:	mov	r4, r1
   104e6:	mov	r6, r0
   104e8:	bcc.n	10512 <lfs_file_truncate+0x4a>
        }

        file->ctz.head = file->block;
        file->ctz.size = size;
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
    } else if (size > oldsize) {
   104ea:	bhi.n	1054a <lfs_file_truncate+0x82>
            }
        }
    }

    // restore pos
    lfs_soff_t res = lfs_file_seek(lfs, file, pos, LFS_SEEK_SET);
   104ec:	mov	r2, r8
   104ee:	mov	r1, r4
   104f0:	mov	r0, r6
   104f2:	movs	r3, #0
   104f4:	bl	10494 <lfs_file_seek>
   104f8:	and.w	r0, r0, r0, asr #31
      return (int)res;
    }

    LFS_TRACE("lfs_file_truncate -> %d", 0);
    return 0;
}
   104fc:	add	sp, #28
   104fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    (void)lfs;
    if (file->flags & LFS_F_WRITING) {
        LFS_TRACE("lfs_file_size -> %"PRId32,
                lfs_max(file->pos, file->ctz.size));
        return lfs_max(file->pos, file->ctz.size);
   10502:	cmp	r3, r8
   10504:	it	cc
   10506:	movcc	r3, r8
        return LFS_ERR_INVAL;
    }

    lfs_off_t pos = file->pos;
    lfs_off_t oldsize = lfs_file_size(lfs, file);
    if (size < oldsize) {
   10508:	cmp	r2, r3
   1050a:	mov	r5, r2
   1050c:	mov	r4, r1
   1050e:	mov	r6, r0
   10510:	bcs.n	104ea <lfs_file_truncate+0x22>
        // need to flush since directly changing metadata
        int err = lfs_file_flush(lfs, file);
   10512:	bl	10268 <lfs_file_flush>
        if (err) {
   10516:	cmp	r0, #0
   10518:	bne.n	104fc <lfs_file_truncate+0x34>
            LFS_TRACE("lfs_file_truncate -> %d", err);
            return err;
        }

        // lookup new head in ctz skip list
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   1051a:	add.w	r0, r4, #60	; 0x3c
   1051e:	add.w	r1, r4, #56	; 0x38
   10522:	ldr	r3, [r4, #44]	; 0x2c
   10524:	ldr	r2, [r4, #40]	; 0x28
   10526:	str	r0, [sp, #8]
   10528:	str	r1, [sp, #4]
   1052a:	str	r5, [sp, #0]
   1052c:	add.w	r1, r4, #64	; 0x40
   10530:	mov	r0, r6
   10532:	bl	f0a4 <lfs_ctz_find.constprop.24>
                file->ctz.head, file->ctz.size,
                size, &file->block, &file->off);
        if (err) {
   10536:	cmp	r0, #0
   10538:	bne.n	104fc <lfs_file_truncate+0x34>
            return err;
        }

        file->ctz.head = file->block;
        file->ctz.size = size;
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   1053a:	ldr	r3, [r4, #48]	; 0x30
        if (err) {
            LFS_TRACE("lfs_file_truncate -> %d", err);
            return err;
        }

        file->ctz.head = file->block;
   1053c:	ldr	r2, [r4, #56]	; 0x38
        file->ctz.size = size;
   1053e:	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   10540:	orr.w	r3, r3, #327680	; 0x50000
   10544:	str	r3, [r4, #48]	; 0x30
        if (err) {
            LFS_TRACE("lfs_file_truncate -> %d", err);
            return err;
        }

        file->ctz.head = file->block;
   10546:	str	r2, [r4, #40]	; 0x28
   10548:	b.n	104ec <lfs_file_truncate+0x24>
        file->ctz.size = size;
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
    } else if (size > oldsize) {
        // flush+seek if not already at end
        if (file->pos != oldsize) {
   1054a:	cmp	r8, r3
   1054c:	beq.n	10582 <lfs_file_truncate+0xba>
            lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_END);
   1054e:	movs	r3, #2
   10550:	movs	r2, #0
   10552:	bl	10494 <lfs_file_seek>
            if (res < 0) {
   10556:	cmp	r0, #0
   10558:	blt.n	104fc <lfs_file_truncate+0x34>
   1055a:	ldr	r7, [r4, #52]	; 0x34
            }
        }

        // fill with zeros
        while (file->pos < size) {
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   1055c:	mov.w	r9, #0
   10560:	b.n	10570 <lfs_file_truncate+0xa8>
   10562:	strb.w	r9, [sp, #23]
   10566:	bl	fe94 <lfs_file_write>
            if (res < 0) {
   1056a:	cmp	r0, #0
   1056c:	blt.n	104fc <lfs_file_truncate+0x34>
   1056e:	ldr	r7, [r4, #52]	; 0x34
                return (int)res;
            }
        }

        // fill with zeros
        while (file->pos < size) {
   10570:	cmp	r5, r7
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   10572:	mov.w	r3, #1
   10576:	add.w	r2, sp, #23
   1057a:	mov	r1, r4
   1057c:	mov	r0, r6
                return (int)res;
            }
        }

        // fill with zeros
        while (file->pos < size) {
   1057e:	bhi.n	10562 <lfs_file_truncate+0x9a>
   10580:	b.n	104ec <lfs_file_truncate+0x24>
   10582:	mov	r7, r8
   10584:	b.n	1055c <lfs_file_truncate+0x94>
    LFS_ASSERT(file->flags & LFS_F_OPENED);
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);

    if (size > LFS_FILE_MAX) {
        LFS_TRACE("lfs_file_truncate -> %d", LFS_ERR_INVAL);
        return LFS_ERR_INVAL;
   10586:	mvn.w	r0, #21
   1058a:	bx	lr

0001058c <lfs_dir_compact>:
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
}

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   1058c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10590:	sub	sp, #148	; 0x94
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
   10592:	ldr	r4, [r1, #0]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
}

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   10594:	ldrh.w	r7, [sp, #188]	; 0xbc
   10598:	ldrh.w	sl, [sp, #192]	; 0xc0
   1059c:	str	r1, [sp, #44]	; 0x2c
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
   1059e:	rsb	r9, r7, sl

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
   105a2:	ldr	r1, [r1, #4]
   105a4:	str	r4, [sp, #64]	; 0x40
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
   105a6:	cmp.w	r9, #1
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
}

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   105aa:	mov	fp, r0
   105ac:	str	r2, [sp, #60]	; 0x3c
   105ae:	str	r3, [sp, #52]	; 0x34
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
   105b0:	str	r1, [sp, #68]	; 0x44
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
   105b2:	ble.w	108be <lfs_dir_compact+0x332>
   105b6:	negs	r3, r7
   105b8:	sxth	r3, r3
   105ba:	str	r3, [sp, #56]	; 0x38
   105bc:	add	r3, sp, #112	; 0x70
   105be:	str	r3, [sp, #48]	; 0x30
   105c0:	ldr.w	r8, [sp, #60]	; 0x3c
   105c4:	b.n	1061c <lfs_dir_compact+0x90>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
   105c6:	cmp.w	r9, #254	; 0xfe

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
   105ca:	mov	r0, fp
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
   105cc:	rsb	r9, r7, r4
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
   105d0:	bgt.n	10604 <lfs_dir_compact+0x78>
                size <= lfs_min(lfs->cfg->block_size - 36,
   105d2:	ldr.w	ip, [fp, #104]	; 0x68
   105d6:	ldr.w	r6, [ip, #24]
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
   105da:	ldr.w	r5, [ip, #28]
   105de:	add.w	lr, r6, #4294967295
   105e2:	add.w	r5, lr, r5, lsr #1
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
   105e6:	udiv	lr, r5, r6
   105ea:	mls	lr, r6, lr, r5
   105ee:	ldr.w	r6, [ip, #28]
   105f2:	rsb	lr, lr, r5
   105f6:	subs	r6, #36	; 0x24
   105f8:	cmp	lr, r6
   105fa:	ldr	r5, [sp, #112]	; 0x70
   105fc:	it	cs
   105fe:	movcs	lr, r6
   10600:	cmp	r5, lr
   10602:	bls.n	1067e <lfs_dir_compact+0xf2>

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
   10604:	ldr	r5, [sp, #184]	; 0xb8
   10606:	str.w	sl, [sp, #8]
   1060a:	str	r4, [sp, #4]
   1060c:	str	r5, [sp, #0]
   1060e:	bl	11b14 <lfs_dir_split>
                source, begin+split, end);
        if (err) {
   10612:	cbnz	r0, 10668 <lfs_dir_compact+0xdc>
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
   10614:	cmp.w	r9, #1
   10618:	ble.n	10682 <lfs_dir_compact+0xf6>

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
   1061a:	mov	sl, r4

    // should we split?
    while (end - begin > 1) {
        // find size
        lfs_size_t size = 0;
        int err = lfs_dir_traverse(lfs,
   1061c:	ldr	r3, [sp, #48]	; 0x30
   1061e:	str	r3, [sp, #32]
   10620:	ldr	r3, [pc, #692]	; (108d8 <lfs_dir_compact+0x34c>)
   10622:	str	r3, [sp, #28]
   10624:	ldr	r3, [sp, #56]	; 0x38
   10626:	str	r3, [sp, #24]
   10628:	movs	r3, #0
   1062a:	ldr	r5, [sp, #52]	; 0x34
   1062c:	str	r3, [sp, #12]
   1062e:	ldr	r3, [pc, #684]	; (108dc <lfs_dir_compact+0x350>)
   10630:	str	r3, [sp, #8]
   10632:	movs	r2, #0
   10634:	mov.w	r3, #4294967295
   10638:	ldr	r1, [sp, #184]	; 0xb8
   1063a:	str.w	sl, [sp, #20]
   1063e:	str	r7, [sp, #16]
   10640:	str	r5, [sp, #4]
   10642:	str.w	r8, [sp]
   10646:	mov	r0, fp
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
        // find size
        lfs_size_t size = 0;
   10648:	str	r2, [sp, #112]	; 0x70
        int err = lfs_dir_traverse(lfs,
   1064a:	bl	ea38 <lfs_dir_traverse>

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
   1064e:	add.w	r4, r7, r9, asr #1
   10652:	uxth	r4, r4
   10654:	mov	r3, r5
   10656:	mov	r2, r8
   10658:	ldr	r1, [sp, #44]	; 0x2c
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
   1065a:	cmp	r0, #0
   1065c:	beq.n	105c6 <lfs_dir_compact+0x3a>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
        if (err) {
   1065e:	mov	r5, r0
            return err;
        }
    }

    return 0;
}
   10660:	mov	r0, r5
   10662:	add	sp, #148	; 0x94
   10664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                source, begin+split, end);
        if (err) {
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
   10668:	cmn.w	r0, #28
   1066c:	bne.n	1065e <lfs_dir_compact+0xd2>
   1066e:	ldr.w	ip, [fp, #104]	; 0x68
   10672:	ldr	r2, [sp, #112]	; 0x70
   10674:	ldr.w	r3, [ip, #28]
   10678:	subs	r3, #36	; 0x24
   1067a:	cmp	r3, r2
   1067c:	bcc.n	1065e <lfs_dir_compact+0xd2>
   1067e:	mov	r8, sl
   10680:	b.n	10688 <lfs_dir_compact+0xfc>
   10682:	ldr.w	ip, [fp, #104]	; 0x68
   10686:	mov	r8, r4

        end = begin + split;
    }

    // increment revision count
    dir->rev += 1;
   10688:	ldr	r0, [sp, #44]	; 0x2c
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
   1068a:	ldr.w	r3, [ip, #36]	; 0x24

        end = begin + split;
    }

    // increment revision count
    dir->rev += 1;
   1068e:	ldr	r2, [r0, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
   10690:	cmp	r3, #0

        end = begin + split;
    }

    // increment revision count
    dir->rev += 1;
   10692:	add.w	r2, r2, #1
   10696:	str	r2, [r0, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
   10698:	ble.n	106e4 <lfs_dir_compact+0x158>
   1069a:	adds	r3, #1
   1069c:	orr.w	r3, r3, #1
   106a0:	udiv	r1, r2, r3
   106a4:	mls	r3, r3, r1, r2
   106a8:	cbnz	r3, 106e4 <lfs_dir_compact+0x158>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   106aa:	ldr	r3, [r0, #0]
   106ac:	cmp	r3, #1
   106ae:	bls.n	106ba <lfs_dir_compact+0x12e>
   106b0:	ldr	r3, [r0, #4]
   106b2:	cmp	r3, #1
   106b4:	bls.n	106ba <lfs_dir_compact+0x12e>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
   106b6:	movs	r4, #1
   106b8:	b.n	10714 <lfs_dir_compact+0x188>
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
   106ba:	add	r2, sp, #144	; 0x90
   106bc:	movs	r3, #0
   106be:	str.w	r3, [r2, #-32]!
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
   106c2:	ldr	r1, [pc, #540]	; (108e0 <lfs_dir_compact+0x354>)
   106c4:	mov	r0, fp
   106c6:	bl	faac <lfs_fs_traverseraw>
    if (err) {
   106ca:	cmp	r0, #0
   106cc:	beq.w	10892 <lfs_dir_compact+0x306>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_size(lfs);
            if (res < 0) {
   106d0:	cmp	r0, #0
   106d2:	blt.n	1065e <lfs_dir_compact+0xd2>
                return res;
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
   106d4:	ldr.w	ip, [fp, #104]	; 0x68
   106d8:	ldr.w	r3, [ip, #32]
   106dc:	cmp.w	r0, r3, lsr #1
   106e0:	bcc.w	10896 <lfs_dir_compact+0x30a>
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
   106e4:	movs	r5, #0

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
   106e6:	ldr.w	r3, [ip, #28]
                .block = dir->pair[1],
   106ea:	ldr	r2, [sp, #44]	; 0x2c

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
   106ec:	subs	r3, #8
                .block = dir->pair[1],
   106ee:	ldr	r1, [r2, #4]

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
   106f0:	str	r3, [sp, #132]	; 0x84
   106f2:	movs	r2, #0
   106f4:	mov.w	r4, #4294967295
   106f8:	str	r1, [sp, #112]	; 0x70
   106fa:	str	r2, [sp, #116]	; 0x74
   106fc:	str	r2, [sp, #128]	; 0x80
   106fe:	str	r4, [sp, #120]	; 0x78
   10700:	str	r4, [sp, #124]	; 0x7c
    return 0;
}

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
    LFS_ASSERT(block < lfs->cfg->block_count);
    int err = lfs->cfg->erase(lfs->cfg, block);
   10702:	ldr.w	r3, [ip, #12]
   10706:	mov	r0, ip
   10708:	blx	r3
                .end = lfs->cfg->block_size - 8,
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
            if (err) {
   1070a:	cbz	r0, 10754 <lfs_dir_compact+0x1c8>
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
            if (err) {
                if (err == LFS_ERR_CORRUPT) {
   1070c:	cmn.w	r0, #84	; 0x54
   10710:	bne.n	1065e <lfs_dir_compact+0xd2>
   10712:	movs	r4, #0
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   10714:	mov.w	r3, #4294967295
   10718:	str.w	r3, [fp, #16]
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   1071c:	ldr	r3, [sp, #44]	; 0x2c
   1071e:	ldr	r3, [r3, #0]
   10720:	cmp	r3, #1
   10722:	bls.n	10748 <lfs_dir_compact+0x1bc>
   10724:	ldr	r3, [sp, #44]	; 0x2c
   10726:	ldr	r3, [r3, #4]
   10728:	cmp	r3, #1
   1072a:	bls.n	10748 <lfs_dir_compact+0x1bc>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
   1072c:	ldr	r3, [sp, #44]	; 0x2c
   1072e:	mov	r0, fp
   10730:	adds	r1, r3, #4
   10732:	bl	fc20 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
   10736:	cbz	r0, 10740 <lfs_dir_compact+0x1b4>
   10738:	cmn.w	r0, #28
   1073c:	bne.n	1065e <lfs_dir_compact+0xd2>
   1073e:	cbz	r4, 10748 <lfs_dir_compact+0x1bc>
   10740:	ldr.w	ip, [fp, #104]	; 0x68
        }
        break;

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
   10744:	movs	r5, #1
   10746:	b.n	106e6 <lfs_dir_compact+0x15a>

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
   10748:	mvn.w	r5, #27
            return err;
        }
    }

    return 0;
}
   1074c:	mov	r0, r5
   1074e:	add	sp, #148	; 0x94
   10750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
            err = lfs_dir_commitprog(lfs, &commit,
   10754:	ldr	r2, [sp, #44]	; 0x2c
   10756:	add	r3, sp, #112	; 0x70
   10758:	str	r3, [sp, #48]	; 0x30
   1075a:	mov	r1, r3
   1075c:	adds	r2, #8
   1075e:	movs	r3, #4
   10760:	mov	r0, fp
   10762:	bl	f41c <lfs_dir_commitprog>
                    &dir->rev, sizeof(dir->rev));
            dir->rev = lfs_fromle32(dir->rev);
            if (err) {
   10766:	cmp	r0, #0
   10768:	bne.n	1070c <lfs_dir_compact+0x180>
                }
                return err;
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
   1076a:	negs	r1, r7
   1076c:	sxth	r1, r1
   1076e:	ldr	r3, [sp, #52]	; 0x34
   10770:	ldr	r6, [pc, #368]	; (108e4 <lfs_dir_compact+0x358>)
   10772:	str	r3, [sp, #4]
   10774:	add.w	lr, sp, #72	; 0x48
   10778:	ldr	r3, [sp, #60]	; 0x3c
   1077a:	str	r1, [sp, #24]
   1077c:	ldr	r1, [pc, #348]	; (108dc <lfs_dir_compact+0x350>)
   1077e:	str	r0, [sp, #12]
   10780:	str	r3, [sp, #0]
   10782:	mov	r2, r0
   10784:	mov	r3, r4
   10786:	str	r1, [sp, #8]
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   10788:	ldr	r4, [sp, #48]	; 0x30
                }
                return err;
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
   1078a:	str.w	r8, [sp, #20]
   1078e:	str	r7, [sp, #16]
   10790:	str.w	lr, [sp, #32]
   10794:	str	r6, [sp, #28]
   10796:	ldr	r1, [sp, #184]	; 0xb8
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   10798:	str.w	fp, [sp, #72]	; 0x48
                }
                return err;
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
   1079c:	mov	r0, fp
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   1079e:	str	r4, [sp, #76]	; 0x4c
                }
                return err;
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
   107a0:	bl	ea38 <lfs_dir_traverse>
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
                        lfs, &commit});
            if (err) {
   107a4:	cmp	r0, #0
   107a6:	bne.n	1070c <lfs_dir_compact+0x180>
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   107a8:	ldr	r2, [sp, #44]	; 0x2c
   107aa:	ldr	r3, [r2, #24]
   107ac:	adds	r3, #1
   107ae:	beq.n	107d4 <lfs_dir_compact+0x248>
   107b0:	ldr	r3, [r2, #28]
   107b2:	adds	r3, #1
   107b4:	beq.n	107d4 <lfs_dir_compact+0x248>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
                lfs_pair_tole32(dir->tail);
                err = lfs_dir_commitattr(lfs, &commit,
   107b6:	ldr	r1, [sp, #44]	; 0x2c
   107b8:	ldr	r2, [pc, #300]	; (108e8 <lfs_dir_compact+0x35c>)
   107ba:	ldrb	r3, [r1, #23]
   107bc:	add.w	r3, r3, #1536	; 0x600
   107c0:	lsls	r3, r3, #20
   107c2:	orrs	r2, r3
   107c4:	mov	r3, r1
   107c6:	adds	r3, #24
   107c8:	ldr	r1, [sp, #48]	; 0x30
   107ca:	mov	r0, fp
   107cc:	bl	f45c <lfs_dir_commitattr>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail);
                lfs_pair_fromle32(dir->tail);
                if (err) {
   107d0:	cmp	r0, #0
   107d2:	bne.n	1070c <lfs_dir_compact+0x180>
                    return err;
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
   107d4:	movs	r3, #0
   107d6:	str	r3, [sp, #100]	; 0x64
   107d8:	str	r3, [sp, #104]	; 0x68
            if (!relocated) {
   107da:	cmp	r5, #0
   107dc:	bne.n	108d0 <lfs_dir_compact+0x344>
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   107de:	mov	r2, r3
   107e0:	ldr.w	r1, [fp, #68]	; 0x44
   107e4:	ldr.w	r3, [fp, #64]	; 0x40
   107e8:	ldr.w	r6, [fp, #56]	; 0x38
   107ec:	ldr.w	r0, [fp, #48]	; 0x30
   107f0:	mov	r4, r2
   107f2:	eors	r4, r3
   107f4:	eors	r2, r1
   107f6:	ldr.w	r3, [fp, #60]	; 0x3c
   107fa:	ldr.w	r1, [fp, #52]	; 0x34
   107fe:	eors	r2, r6
   10800:	eors	r4, r1
   10802:	eors	r3, r0
   10804:	ldr.w	r1, [fp, #72]	; 0x48
   10808:	ldr.w	r6, [fp, #76]	; 0x4c
   1080c:	eors	r3, r1
   1080e:	ldr.w	r1, [fp, #80]	; 0x50
            if (!relocated) {
                lfs_gstate_xor(&delta, &lfs->gdisk);
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   10812:	bic.w	r3, r3, #1020	; 0x3fc
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   10816:	eors	r4, r6
            if (!relocated) {
                lfs_gstate_xor(&delta, &lfs->gdisk);
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   10818:	bic.w	r3, r3, #3
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   1081c:	eor.w	r6, r2, r1
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);

            err = lfs_dir_getgstate(lfs, dir, &delta);
   10820:	mov	r0, fp
   10822:	add	r2, sp, #96	; 0x60
   10824:	ldr	r1, [sp, #44]	; 0x2c
            if (!relocated) {
                lfs_gstate_xor(&delta, &lfs->gdisk);
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   10826:	str	r3, [sp, #96]	; 0x60
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   10828:	str	r4, [sp, #100]	; 0x64
   1082a:	str	r6, [sp, #104]	; 0x68
                lfs_gstate_xor(&delta, &lfs->gstate);
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);

            err = lfs_dir_getgstate(lfs, dir, &delta);
   1082c:	bl	eda0 <lfs_dir_getgstate>
            if (err) {
   10830:	cmp	r0, #0
   10832:	bne.w	1065e <lfs_dir_compact+0xd2>
    }
}

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
    for (int i = 0; i < 3; i++) {
        if (((uint32_t*)a)[i] != 0) {
   10836:	ldr	r3, [sp, #96]	; 0x60
   10838:	cmp	r3, #0
   1083a:	bne.n	108ec <lfs_dir_compact+0x360>
   1083c:	ldr	r3, [sp, #100]	; 0x64
   1083e:	cmp	r3, #0
   10840:	bne.n	108ec <lfs_dir_compact+0x360>
   10842:	ldr	r3, [sp, #104]	; 0x68
   10844:	cmp	r3, #0
   10846:	bne.n	108ec <lfs_dir_compact+0x360>
                    return err;
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
   10848:	ldr	r1, [sp, #48]	; 0x30
   1084a:	mov	r0, fp
   1084c:	bl	f528 <lfs_dir_commitcrc>
            if (err) {
   10850:	cmp	r0, #0
   10852:	bne.w	1070c <lfs_dir_compact+0x180>


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
    lfs_block_t t = pair[0];
   10856:	ldr	r6, [sp, #44]	; 0x2c
   10858:	ldr	r2, [r6, #0]
    pair[0] = pair[1];
   1085a:	ldr	r1, [r6, #4]
   1085c:	str	r1, [r6, #0]
    pair[1] = t;
   1085e:	str	r2, [r6, #4]
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
            lfs_pair_swap(dir->pair);
            dir->count = end - begin;
   10860:	rsb	r8, r7, r8
            dir->off = commit.off;
   10864:	ldr	r1, [sp, #116]	; 0x74
            dir->etag = commit.ptag;
   10866:	ldr	r2, [sp, #120]	; 0x78
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
            lfs_pair_swap(dir->pair);
            dir->count = end - begin;
   10868:	strh.w	r8, [r6, #20]
            dir->off = commit.off;
   1086c:	str	r1, [r6, #12]
            dir->etag = commit.ptag;
   1086e:	str	r2, [r6, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
   10870:	str.w	r0, [fp, #72]	; 0x48
   10874:	str.w	r0, [fp, #76]	; 0x4c
   10878:	str.w	r0, [fp, #80]	; 0x50
            if (!relocated) {
   1087c:	cmp	r5, #0
   1087e:	bne.n	10900 <lfs_dir_compact+0x374>
                lfs->gdisk = lfs->gstate;
   10880:	add.w	r3, fp, #48	; 0x30
   10884:	ldmia.w	r3, {r0, r1, r2}
   10888:	add.w	fp, fp, #60	; 0x3c
   1088c:	stmia.w	fp, {r0, r1, r2}
   10890:	b.n	10660 <lfs_dir_compact+0xd4>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
   10892:	ldr	r0, [sp, #112]	; 0x70
   10894:	b.n	106d0 <lfs_dir_compact+0x144>

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   10896:	ldr	r3, [sp, #184]	; 0xb8
   10898:	str	r3, [sp, #0]
   1089a:	str.w	r8, [sp, #8]
   1089e:	str	r7, [sp, #4]
   108a0:	ldr	r3, [sp, #52]	; 0x34
   108a2:	ldr	r2, [sp, #60]	; 0x3c
   108a4:	ldr	r1, [sp, #44]	; 0x2c
   108a6:	mov	r0, fp
   108a8:	bl	11b14 <lfs_dir_split>
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
   108ac:	cbz	r0, 108c6 <lfs_dir_compact+0x33a>
   108ae:	cmn.w	r0, #28
   108b2:	bne.w	1065e <lfs_dir_compact+0xd2>
   108b6:	ldr.w	ip, [fp, #104]	; 0x68
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
   108ba:	movs	r5, #0
   108bc:	b.n	106e6 <lfs_dir_compact+0x15a>
    bool tired = false;

    // should we split?
    while (end - begin > 1) {
   108be:	mov	r8, sl
   108c0:	ldr.w	ip, [r0, #104]	; 0x68
   108c4:	b.n	10688 <lfs_dir_compact+0xfc>
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    bool relocated = false;
   108c6:	mov	r5, r0
   108c8:	ldr.w	ip, [fp, #104]	; 0x68
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
                    end = begin;
   108cc:	mov	r8, r7
   108ce:	b.n	106e6 <lfs_dir_compact+0x15a>
   108d0:	ldr	r2, [sp, #104]	; 0x68
   108d2:	ldr	r4, [sp, #100]	; 0x64
   108d4:	b.n	10804 <lfs_dir_compact+0x278>
   108d6:	nop
   108d8:	.word	0x0000e1a9
   108dc:	.word	0x400ffc00
   108e0:	.word	0x0000e1c5
   108e4:	.word	0x0000f515
   108e8:	.word	0x000ffc08
                return err;
            }

            if (!lfs_gstate_iszero(&delta)) {
                lfs_gstate_tole32(&delta);
                err = lfs_dir_commitattr(lfs, &commit,
   108ec:	add	r3, sp, #96	; 0x60
   108ee:	ldr	r2, [pc, #504]	; (10ae8 <lfs_dir_compact+0x55c>)
   108f0:	ldr	r1, [sp, #48]	; 0x30
   108f2:	mov	r0, fp
   108f4:	bl	f45c <lfs_dir_commitattr>
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
   108f8:	cmp	r0, #0
   108fa:	bne.w	1070c <lfs_dir_compact+0x180>
   108fe:	b.n	10848 <lfs_dir_compact+0x2bc>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10900:	ldr	r2, [sp, #64]	; 0x40
   10902:	ldr.w	r3, [fp, #32]
   10906:	cmp	r2, r3
   10908:	beq.w	10a44 <lfs_dir_compact+0x4b8>
   1090c:	ldr	r1, [sp, #68]	; 0x44
   1090e:	ldr.w	r0, [fp, #36]	; 0x24
   10912:	cmp	r1, r0
   10914:	beq.w	10a44 <lfs_dir_compact+0x4b8>
   10918:	cmp	r2, r0
   1091a:	beq.w	10a44 <lfs_dir_compact+0x4b8>
   1091e:	cmp	r3, r1
   10920:	beq.w	10a44 <lfs_dir_compact+0x4b8>
        lfs->root[0] = newpair[0];
        lfs->root[1] = newpair[1];
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   10924:	ldr.w	r3, [fp, #40]	; 0x28
   10928:	cbz	r3, 10976 <lfs_dir_compact+0x3ea>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   1092a:	ldr	r1, [sp, #68]	; 0x44
   1092c:	ldr	r0, [sp, #44]	; 0x2c
   1092e:	b.n	10948 <lfs_dir_compact+0x3bc>
   10930:	ldr	r5, [r3, #12]
   10932:	cmp	r1, r5
   10934:	beq.n	1094e <lfs_dir_compact+0x3c2>
   10936:	cmp	r2, r5
   10938:	beq.n	1094e <lfs_dir_compact+0x3c2>
   1093a:	cmp	r4, r1
   1093c:	beq.n	1094e <lfs_dir_compact+0x3c2>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
            d->m.pair[0] = newpair[0];
            d->m.pair[1] = newpair[1];
        }

        if (d->type == LFS_TYPE_DIR &&
   1093e:	ldrb	r4, [r3, #6]
   10940:	cmp	r4, #2
   10942:	beq.n	10958 <lfs_dir_compact+0x3cc>
        lfs->root[0] = newpair[0];
        lfs->root[1] = newpair[1];
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   10944:	ldr	r3, [r3, #0]
   10946:	cbz	r3, 10976 <lfs_dir_compact+0x3ea>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10948:	ldr	r4, [r3, #8]
   1094a:	cmp	r2, r4
   1094c:	bne.n	10930 <lfs_dir_compact+0x3a4>
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
            d->m.pair[0] = newpair[0];
   1094e:	ldr	r4, [r0, #0]
   10950:	str	r4, [r3, #8]
            d->m.pair[1] = newpair[1];
   10952:	ldr	r4, [r0, #4]
   10954:	str	r4, [r3, #12]
   10956:	b.n	1093e <lfs_dir_compact+0x3b2>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10958:	ldr	r4, [r3, #44]	; 0x2c
   1095a:	cmp	r2, r4
   1095c:	beq.n	1096c <lfs_dir_compact+0x3e0>
   1095e:	ldr	r5, [r3, #48]	; 0x30
   10960:	cmp	r1, r5
   10962:	beq.n	1096c <lfs_dir_compact+0x3e0>
   10964:	cmp	r2, r5
   10966:	beq.n	1096c <lfs_dir_compact+0x3e0>
   10968:	cmp	r1, r4
   1096a:	bne.n	10944 <lfs_dir_compact+0x3b8>
            d->m.pair[1] = newpair[1];
        }

        if (d->type == LFS_TYPE_DIR &&
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
            ((lfs_dir_t*)d)->head[0] = newpair[0];
   1096c:	ldr	r4, [r0, #0]
   1096e:	str	r4, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
   10970:	ldr	r4, [r0, #4]
   10972:	str	r4, [r3, #48]	; 0x30
   10974:	b.n	10944 <lfs_dir_compact+0x3b8>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
   10976:	add	r1, sp, #64	; 0x40
   10978:	ldr	r2, [sp, #48]	; 0x30
   1097a:	mov	r0, fp
   1097c:	bl	e920 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
   10980:	cmp	r0, #0
   10982:	blt.n	10a54 <lfs_dir_compact+0x4c8>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   10984:	ldr.w	r2, [fp, #48]	; 0x30
   10988:	adds	r2, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   1098a:	ubfx	r3, r2, #0, #10
   1098e:	adds	r3, #0
   10990:	it	ne
   10992:	movne	r3, #1
   10994:	bic.w	r2, r2, #2147483648	; 0x80000000
   10998:	orr.w	r3, r2, r3, lsl #31
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   1099c:	lsrs	r2, r3, #20
   1099e:	ands.w	r2, r2, #1792	; 0x700
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   109a2:	str.w	r3, [fp, #48]	; 0x30
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   109a6:	beq.n	10a40 <lfs_dir_compact+0x4b4>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   109a8:	ldr.w	r5, [fp, #52]	; 0x34
   109ac:	ldr	r1, [sp, #112]	; 0x70
   109ae:	cmp	r5, r1
   109b0:	beq.n	109c4 <lfs_dir_compact+0x438>
   109b2:	ldr.w	r2, [fp, #56]	; 0x38
   109b6:	ldr	r4, [sp, #116]	; 0x74
   109b8:	cmp	r2, r4
   109ba:	beq.n	109c4 <lfs_dir_compact+0x438>
   109bc:	cmp	r5, r4
   109be:	beq.n	109c4 <lfs_dir_compact+0x438>
        lfs_fs_preporphans(lfs, +1);

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
   109c0:	cmp	r1, r2
   109c2:	bne.n	10a40 <lfs_dir_compact+0x4b4>
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   109c4:	ldr	r2, [pc, #292]	; (10aec <lfs_dir_compact+0x560>)
            moveid = lfs_tag_id(lfs->gstate.tag);
            LFS_DEBUG("Fixing move while relocating "
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
            if (moveid < lfs_tag_id(tag)) {
   109c6:	ubfx	r4, r0, #10, #10
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   109ca:	ands	r2, r3
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
   109cc:	ubfx	r3, r3, #10, #10

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   109d0:	movs	r1, #0
            moveid = lfs_tag_id(lfs->gstate.tag);
            LFS_DEBUG("Fixing move while relocating "
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
            if (moveid < lfs_tag_id(tag)) {
   109d2:	cmp	r3, r4
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   109d4:	str.w	r2, [fp, #48]	; 0x30
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   109d8:	str.w	r1, [fp, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   109dc:	str.w	r1, [fp, #56]	; 0x38
            moveid = lfs_tag_id(lfs->gstate.tag);
            LFS_DEBUG("Fixing move while relocating "
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
            if (moveid < lfs_tag_id(tag)) {
   109e0:	bcs.n	10a96 <lfs_dir_compact+0x50a>
                tag -= LFS_MKTAG(0, 1, 0);
   109e2:	sub.w	r0, r0, #1024	; 0x400
            }
        }

        lfs_pair_tole32(newpair);
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   109e6:	lsls	r3, r3, #10
   109e8:	orr.w	r1, r3, #1333788672	; 0x4f800000
   109ec:	orr.w	r1, r1, #7340032	; 0x700000
   109f0:	movs	r4, #0
   109f2:	str	r1, [sp, #96]	; 0x60
   109f4:	str	r0, [sp, #104]	; 0x68
   109f6:	ldr	r5, [sp, #44]	; 0x2c
   109f8:	ldr	r1, [sp, #48]	; 0x30
   109fa:	str	r5, [sp, #108]	; 0x6c
   109fc:	add	r2, sp, #96	; 0x60
   109fe:	movs	r3, #2
   10a00:	mov	r0, fp
   10a02:	str	r4, [sp, #100]	; 0x64
   10a04:	bl	10af4 <lfs_dir_commit>
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
        if (err) {
   10a08:	cmp	r0, #0
   10a0a:	bne.w	1065e <lfs_dir_compact+0xd2>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   10a0e:	ldr.w	r3, [fp, #48]	; 0x30
   10a12:	subs	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   10a14:	ubfx	r2, r3, #0, #10
   10a18:	subs	r2, r2, r4
   10a1a:	it	ne
   10a1c:	movne	r2, #1
   10a1e:	bic.w	r3, r3, #2147483648	; 0x80000000
   10a22:	orr.w	r3, r3, r2, lsl #31
   10a26:	str.w	r3, [fp, #48]	; 0x30
        // next step, clean up orphans
        lfs_fs_preporphans(lfs, -1);
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
   10a2a:	add	r1, sp, #64	; 0x40
   10a2c:	ldr	r2, [sp, #48]	; 0x30
   10a2e:	mov	r0, fp
   10a30:	bl	e9a8 <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
   10a34:	cbz	r0, 10a5c <lfs_dir_compact+0x4d0>
   10a36:	adds	r3, r0, #2
   10a38:	bne.w	1065e <lfs_dir_compact+0xd2>
        if (err) {
            return err;
        }
    }

    return 0;
   10a3c:	movs	r5, #0
   10a3e:	b.n	10660 <lfs_dir_compact+0xd4>
                tag -= LFS_MKTAG(0, 1, 0);
            }
        }

        lfs_pair_tole32(newpair);
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   10a40:	movs	r1, #0
   10a42:	b.n	109f0 <lfs_dir_compact+0x464>

static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
        lfs->root[0] = newpair[0];
   10a44:	ldr	r1, [sp, #44]	; 0x2c
   10a46:	ldr	r3, [r1, #0]
   10a48:	str.w	r3, [fp, #32]
        lfs->root[1] = newpair[1];
   10a4c:	ldr	r3, [r1, #4]
   10a4e:	str.w	r3, [fp, #36]	; 0x24
   10a52:	b.n	10924 <lfs_dir_compact+0x398>
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
    if (tag < 0 && tag != LFS_ERR_NOENT) {
   10a54:	adds	r2, r0, #2
   10a56:	bne.w	1065e <lfs_dir_compact+0xd2>
   10a5a:	b.n	10a2a <lfs_dir_compact+0x49e>
    return lfs_tag_type1(a->tag);
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   10a5c:	ldr.w	r1, [fp, #48]	; 0x30
   10a60:	lsrs	r3, r1, #20
   10a62:	tst.w	r3, #1792	; 0x700
   10a66:	bne.n	10aa0 <lfs_dir_compact+0x514>
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   10a68:	movs	r3, #0
   10a6a:	ldrb.w	r2, [sp, #135]	; 0x87
   10a6e:	ldr	r4, [pc, #128]	; (10af0 <lfs_dir_compact+0x564>)
   10a70:	str	r3, [sp, #80]	; 0x50
   10a72:	add.w	r3, r2, #1536	; 0x600
   10a76:	lsls	r3, r3, #20
   10a78:	orrs	r4, r3
   10a7a:	movs	r5, #0
   10a7c:	ldr	r6, [sp, #44]	; 0x2c
   10a7e:	ldr	r1, [sp, #48]	; 0x30
   10a80:	str	r6, [sp, #92]	; 0x5c
   10a82:	mov	r0, fp
   10a84:	movs	r3, #2
   10a86:	add	r2, sp, #80	; 0x50
   10a88:	str	r4, [sp, #88]	; 0x58
   10a8a:	str	r5, [sp, #84]	; 0x54
   10a8c:	bl	10af4 <lfs_dir_commit>
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
        if (err) {
   10a90:	cmp	r0, #0
   10a92:	beq.n	10a3c <lfs_dir_compact+0x4b0>
   10a94:	b.n	1065e <lfs_dir_compact+0xd2>
                tag -= LFS_MKTAG(0, 1, 0);
            }
        }

        lfs_pair_tole32(newpair);
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   10a96:	movw	r2, #1023	; 0x3ff
   10a9a:	cmp	r3, r2
   10a9c:	bne.n	109e6 <lfs_dir_compact+0x45a>
   10a9e:	b.n	109f0 <lfs_dir_compact+0x464>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10aa0:	ldr.w	r4, [fp, #52]	; 0x34
   10aa4:	ldr	r2, [sp, #112]	; 0x70
   10aa6:	cmp	r4, r2
   10aa8:	beq.n	10abc <lfs_dir_compact+0x530>
   10aaa:	ldr.w	r3, [fp, #56]	; 0x38
   10aae:	ldr	r0, [sp, #116]	; 0x74
   10ab0:	cmp	r3, r0
   10ab2:	beq.n	10abc <lfs_dir_compact+0x530>
   10ab4:	cmp	r4, r0
   10ab6:	beq.n	10abc <lfs_dir_compact+0x530>
    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
   10ab8:	cmp	r2, r3
   10aba:	bne.n	10a68 <lfs_dir_compact+0x4dc>
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   10abc:	ldr	r2, [pc, #44]	; (10aec <lfs_dir_compact+0x560>)
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
   10abe:	ubfx	r3, r1, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   10ac2:	movw	r0, #1023	; 0x3ff
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   10ac6:	ands	r2, r1
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   10ac8:	cmp	r3, r0

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   10aca:	mov.w	r1, #0
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   10ace:	str.w	r2, [fp, #48]	; 0x30
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   10ad2:	str.w	r1, [fp, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   10ad6:	str.w	r1, [fp, #56]	; 0x38
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   10ada:	beq.n	10a68 <lfs_dir_compact+0x4dc>
   10adc:	lsls	r3, r3, #10
   10ade:	orr.w	r3, r3, #1333788672	; 0x4f800000
   10ae2:	orr.w	r3, r3, #7340032	; 0x700000
   10ae6:	b.n	10a6a <lfs_dir_compact+0x4de>
   10ae8:	.word	0x7ffffc0c
   10aec:	.word	0x800003ff
   10af0:	.word	0x000ffc08

00010af4 <lfs_dir_commit>:

    return 0;
}

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
   10af4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   10af8:	ldr	r6, [r0, #40]	; 0x28
   10afa:	ldr	r7, [r1, #0]

    return 0;
}

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
   10afc:	sub	sp, #140	; 0x8c
   10afe:	mov	r9, r0
   10b00:	mov	r4, r1
   10b02:	mov	sl, r2
   10b04:	mov	r8, r3
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   10b06:	cbnz	r6, 10b20 <lfs_dir_commit+0x2c>
   10b08:	b.n	10b80 <lfs_dir_commit+0x8c>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10b0a:	ldr	r1, [r6, #12]
   10b0c:	ldr	r2, [r4, #4]
   10b0e:	cmp	r2, r1
   10b10:	beq.n	10b2e <lfs_dir_commit+0x3a>
   10b12:	cmp	r2, r3
   10b14:	beq.n	10b2e <lfs_dir_commit+0x3a>
   10b16:	cmp	r1, r7
   10b18:	beq.n	10b2e <lfs_dir_commit+0x3a>

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   10b1a:	ldr	r6, [r6, #0]
   10b1c:	cmp	r6, #0
   10b1e:	beq.n	10b80 <lfs_dir_commit+0x8c>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   10b20:	add.w	r3, r6, #8
   10b24:	cmp	r4, r3
   10b26:	beq.n	10b1a <lfs_dir_commit+0x26>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10b28:	ldr	r3, [r6, #8]
   10b2a:	cmp	r3, r7
   10b2c:	bne.n	10b0a <lfs_dir_commit+0x16>
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   10b2e:	ldrb	r3, [r6, #6]
   10b30:	cmp	r3, #1
   10b32:	bne.n	10b1a <lfs_dir_commit+0x26>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   10b34:	ldr	r3, [r6, #48]	; 0x30
   10b36:	lsls	r2, r3, #11
   10b38:	bpl.n	10b1a <lfs_dir_commit+0x26>
                f->ctz.size > lfs->cfg->cache_size) {
   10b3a:	ldr.w	r1, [r9, #104]	; 0x68
        const struct lfs_mattr *attrs, int attrcount) {
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   10b3e:	ldr	r2, [r6, #44]	; 0x2c
   10b40:	ldr	r3, [r1, #40]	; 0x28
   10b42:	cmp	r2, r3
   10b44:	bls.n	10b1a <lfs_dir_commit+0x26>

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   10b46:	ldr	r3, [r1, #32]
        lfs_cache_drop(lfs, &lfs->pcache);
    }
}

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
    file->off = file->pos;
   10b48:	ldr	r2, [r6, #52]	; 0x34
   10b4a:	str	r2, [r6, #60]	; 0x3c
    lfs_alloc_ack(lfs);
    int err = lfs_file_relocate(lfs, file);
   10b4c:	mov	r1, r6

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   10b4e:	str.w	r3, [r9, #96]	; 0x60
}

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
    file->off = file->pos;
    lfs_alloc_ack(lfs);
    int err = lfs_file_relocate(lfs, file);
   10b52:	mov	r0, r9
   10b54:	bl	fd8c <lfs_file_relocate>
    if (err) {
   10b58:	cbz	r0, 10b64 <lfs_dir_commit+0x70>
                f->ctz.size > lfs->cfg->cache_size) {
            int err = lfs_file_outline(lfs, f);
            if (err) {
                return err;
            }
            err = lfs_file_flush(lfs, f);
   10b5a:	mov	lr, r0
            }
        }
    }

    return 0;
}
   10b5c:	mov	r0, lr
   10b5e:	add	sp, #140	; 0x8c
   10b60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int err = lfs_file_relocate(lfs, file);
    if (err) {
        return err;
    }

    file->flags &= ~LFS_F_INLINE;
   10b64:	ldr	r3, [r6, #48]	; 0x30
   10b66:	bic.w	r3, r3, #1048576	; 0x100000
   10b6a:	str	r3, [r6, #48]	; 0x30
                f->ctz.size > lfs->cfg->cache_size) {
            int err = lfs_file_outline(lfs, f);
            if (err) {
                return err;
            }
            err = lfs_file_flush(lfs, f);
   10b6c:	mov	r1, r6
   10b6e:	mov	r0, r9
   10b70:	bl	10268 <lfs_file_flush>
            if (err) {
   10b74:	cmp	r0, #0
   10b76:	bne.n	10b5a <lfs_dir_commit+0x66>

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   10b78:	ldr	r6, [r6, #0]
   10b7a:	ldr	r7, [r4, #0]
   10b7c:	cmp	r6, #0
   10b7e:	bne.n	10b20 <lfs_dir_commit+0x2c>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
   10b80:	mov	r6, r4
   10b82:	ldmia	r6!, {r0, r1, r2, r3}
   10b84:	add	r5, sp, #72	; 0x48
   10b86:	stmia	r5!, {r0, r1, r2, r3}
   10b88:	ldmia.w	r6, {r0, r1, r2, r3}
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
   10b8c:	cmp.w	r8, #0
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
   10b90:	ldr	r6, [r4, #4]
   10b92:	str	r6, [sp, #40]	; 0x28
   10b94:	stmia.w	r5, {r0, r1, r2, r3}
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
   10b98:	ble.n	10bf2 <lfs_dir_commit+0xfe>
   10b9a:	mov	r2, sl
   10b9c:	add.w	r0, sl, r8, lsl #3
   10ba0:	mov.w	lr, #0
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   10ba4:	movw	r1, #1025	; 0x401
            dir->count += 1;
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   10ba8:	movw	r6, #1279	; 0x4ff
   10bac:	b.n	10bc2 <lfs_dir_commit+0xce>
   10bae:	cmp	r5, r6
   10bb0:	beq.w	10ce6 <lfs_dir_commit+0x1f2>
            LFS_ASSERT(dir->count > 0);
            dir->count -= 1;
            hasdelete = true;
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
   10bb4:	cmp.w	r3, #1536	; 0x600
   10bb8:	beq.w	10cf2 <lfs_dir_commit+0x1fe>
   10bbc:	adds	r2, #8
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
   10bbe:	cmp	r2, r0
   10bc0:	beq.n	10be4 <lfs_dir_commit+0xf0>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
   10bc2:	ldr	r3, [r2, #0]
   10bc4:	mov.w	ip, r3, lsr #20
   10bc8:	uxth.w	r3, ip
   10bcc:	ubfx	r5, r3, #0, #11

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   10bd0:	cmp	r5, r1
            dir->count += 1;
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
            LFS_ASSERT(dir->count > 0);
            dir->count -= 1;
            hasdelete = true;
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
   10bd2:	and.w	r3, r3, #1792	; 0x700

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   10bd6:	bne.n	10bae <lfs_dir_commit+0xba>
            dir->count += 1;
   10bd8:	ldrh	r3, [r4, #20]
   10bda:	adds	r2, #8
   10bdc:	adds	r3, #1
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
   10bde:	cmp	r2, r0
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
            dir->count += 1;
   10be0:	strh	r3, [r4, #20]
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
    bool hasdelete = false;
    for (int i = 0; i < attrcount; i++) {
   10be2:	bne.n	10bc2 <lfs_dir_commit+0xce>
            lfs_pair_fromle32(dir->tail);
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
   10be4:	cmp.w	lr, #0
   10be8:	beq.n	10bf2 <lfs_dir_commit+0xfe>
   10bea:	ldrh	r3, [r4, #20]
   10bec:	cmp	r3, #0
   10bee:	beq.w	10e3e <lfs_dir_commit+0x34a>
                return err;
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
   10bf2:	ldrb	r3, [r4, #22]
   10bf4:	cbnz	r3, 10bfe <lfs_dir_commit+0x10a>
   10bf6:	ldrh	r3, [r4, #20]
   10bf8:	cmp	r3, #254	; 0xfe
   10bfa:	bls.w	10d06 <lfs_dir_commit+0x212>
            .off = dir->off,
            .ptag = dir->etag,
            .crc = 0xffffffff,

            .begin = dir->off,
            .end = lfs->cfg->block_size - 8,
   10bfe:	ldr.w	r3, [r9, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
   10c02:	ldr	r2, [pc, #712]	; (10ecc <lfs_dir_commit+0x3d8>)
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
   10c04:	ldr	r5, [r3, #28]
            .block = dir->pair[0],
            .off = dir->off,
   10c06:	ldr	r1, [r4, #12]
            .ptag = dir->etag,
   10c08:	ldr.w	lr, [r4, #16]
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
   10c0c:	str	r2, [sp, #28]
   10c0e:	movs	r3, #0
   10c10:	add	r0, sp, #52	; 0x34
   10c12:	str	r3, [sp, #24]
   10c14:	str	r3, [sp, #20]
   10c16:	str	r3, [sp, #16]
   10c18:	str	r3, [sp, #12]
   10c1a:	str	r3, [sp, #8]
   10c1c:	str.w	r8, [sp, #4]
   10c20:	str.w	sl, [sp]
   10c24:	str	r0, [sp, #32]
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
   10c26:	ldr	r0, [r4, #0]
   10c28:	str	r1, [sp, #108]	; 0x6c
   10c2a:	subs	r5, #8
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
   10c2c:	mov	r2, r1
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
   10c2e:	str	r5, [sp, #124]	; 0x7c
   10c30:	str	r1, [sp, #120]	; 0x78
   10c32:	mov.w	r5, #4294967295
   10c36:	str	r0, [sp, #104]	; 0x68
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
   10c38:	mov	r3, lr
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   10c3a:	add	r6, sp, #104	; 0x68
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
   10c3c:	mov	r1, r4
   10c3e:	mov	r0, r9
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
   10c40:	str	r5, [sp, #116]	; 0x74
        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   10c42:	str.w	r9, [sp, #52]	; 0x34
        }
    }

    if (dir->erased || dir->count >= 0xff) {
        // try to commit
        struct lfs_commit commit = {
   10c46:	str.w	lr, [sp, #112]	; 0x70
        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   10c4a:	str	r6, [sp, #56]	; 0x38
            .end = lfs->cfg->block_size - 8,
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
        int err = lfs_dir_traverse(lfs,
   10c4c:	bl	ea38 <lfs_dir_traverse>
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
        if (err) {
   10c50:	mov	r5, r0
   10c52:	cbnz	r0, 10cbc <lfs_dir_commit+0x1c8>
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   10c54:	ldr.w	r0, [r9, #60]	; 0x3c
   10c58:	ldr.w	r3, [r9, #48]	; 0x30
   10c5c:	ldr.w	r1, [r9, #72]	; 0x48
   10c60:	ldr.w	r2, [r9, #52]	; 0x34
   10c64:	eors	r3, r0
   10c66:	eors	r1, r3
   10c68:	ldr.w	r3, [r9, #68]	; 0x44
   10c6c:	str	r3, [sp, #44]	; 0x2c
   10c6e:	ldr.w	r3, [r9, #56]	; 0x38
   10c72:	ldr.w	r0, [r9, #64]	; 0x40
   10c76:	eors	r2, r5
   10c78:	eors	r5, r3
   10c7a:	ldr	r3, [sp, #44]	; 0x2c
   10c7c:	eors	r0, r2
   10c7e:	eors	r5, r3
   10c80:	ldr.w	r2, [r9, #80]	; 0x50
   10c84:	ldr.w	r3, [r9, #76]	; 0x4c
        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
        lfs_gstate_xor(&delta, &lfs->gstate);
        lfs_gstate_xor(&delta, &lfs->gdisk);
        lfs_gstate_xor(&delta, &lfs->gdelta);
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   10c88:	bic.w	r1, r1, #1020	; 0x3fc
   10c8c:	bic.w	r1, r1, #3
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   10c90:	eors	r0, r3
   10c92:	eors	r2, r5
        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
        lfs_gstate_xor(&delta, &lfs->gstate);
        lfs_gstate_xor(&delta, &lfs->gdisk);
        lfs_gstate_xor(&delta, &lfs->gdelta);
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   10c94:	str	r1, [sp, #60]	; 0x3c
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   10c96:	str	r0, [sp, #64]	; 0x40
   10c98:	str	r2, [sp, #68]	; 0x44
    }
}

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
    for (int i = 0; i < 3; i++) {
        if (((uint32_t*)a)[i] != 0) {
   10c9a:	cmp	r1, #0
   10c9c:	bne.w	10e7a <lfs_dir_commit+0x386>
   10ca0:	cmp	r0, #0
   10ca2:	bne.w	10e7a <lfs_dir_commit+0x386>
   10ca6:	cmp	r2, #0
   10ca8:	bne.w	10e7a <lfs_dir_commit+0x386>
                return err;
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
   10cac:	mov	r1, r6
   10cae:	mov	r0, r9
   10cb0:	bl	f528 <lfs_dir_commitcrc>
        if (err) {
   10cb4:	mov	r5, r0
   10cb6:	cmp	r0, #0
   10cb8:	beq.w	10e54 <lfs_dir_commit+0x360>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
   10cbc:	cmn.w	r5, #28
   10cc0:	beq.n	10d04 <lfs_dir_commit+0x210>
   10cc2:	cmn.w	r5, #84	; 0x54
   10cc6:	beq.n	10d04 <lfs_dir_commit+0x210>
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
                dir, 0, dir->count);
        if (err) {
            *dir = olddir;
   10cc8:	ldr	r3, [sp, #40]	; 0x28
   10cca:	str	r7, [sp, #72]	; 0x48
   10ccc:	str	r3, [sp, #76]	; 0x4c
   10cce:	add	r6, sp, #72	; 0x48
   10cd0:	ldmia	r6!, {r0, r1, r2, r3}
   10cd2:	stmia	r4!, {r0, r1, r2, r3}
   10cd4:	ldmia.w	r6, {r0, r1, r2, r3}
            return err;
   10cd8:	mov	lr, r5
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
                dir, 0, dir->count);
        if (err) {
            *dir = olddir;
   10cda:	stmia.w	r4, {r0, r1, r2, r3}
            }
        }
    }

    return 0;
}
   10cde:	mov	r0, lr
   10ce0:	add	sp, #140	; 0x8c
   10ce2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (int i = 0; i < attrcount; i++) {
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
            dir->count += 1;
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
            LFS_ASSERT(dir->count > 0);
            dir->count -= 1;
   10ce6:	ldrh	r3, [r4, #20]
   10ce8:	subs	r3, #1
   10cea:	strh	r3, [r4, #20]
            hasdelete = true;
   10cec:	mov.w	lr, #1
   10cf0:	b.n	10bbc <lfs_dir_commit+0xc8>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
   10cf2:	ldr	r5, [r2, #4]
   10cf4:	ldr	r3, [r5, #0]
   10cf6:	str	r3, [r4, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
   10cf8:	ldr	r5, [r5, #4]
   10cfa:	str	r5, [r4, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
   10cfc:	and.w	r3, ip, #1
   10d00:	strb	r3, [r4, #23]
   10d02:	b.n	10bbc <lfs_dir_commit+0xc8>
   10d04:	ldrh	r3, [r4, #20]
    } else {
compact:
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
   10d06:	str	r3, [sp, #8]
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   10d08:	mov.w	r2, #4294967295
    } else {
compact:
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
   10d0c:	movs	r3, #0
   10d0e:	str	r4, [sp, #0]
   10d10:	mov	r1, r4
/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
   10d12:	str.w	r2, [r9, #16]
    } else {
compact:
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
   10d16:	mov	r0, r9
   10d18:	str	r3, [sp, #4]
   10d1a:	mov	r2, sl
   10d1c:	mov	r3, r8
   10d1e:	bl	1058c <lfs_dir_compact>
                dir, 0, dir->count);
        if (err) {
   10d22:	mov	r5, r0
   10d24:	cmp	r0, #0
   10d26:	bne.n	10cc8 <lfs_dir_commit+0x1d4>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   10d28:	ldr.w	r6, [r9, #40]	; 0x28
   10d2c:	cmp	r6, #0
   10d2e:	beq.w	10ea2 <lfs_dir_commit+0x3ae>
   10d32:	mov	r5, r6
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   10d34:	movw	fp, #1279	; 0x4ff
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
   10d38:	str	r6, [sp, #44]	; 0x2c
   10d3a:	ldr.w	ip, [sp, #40]	; 0x28
   10d3e:	b.n	10d54 <lfs_dir_commit+0x260>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10d40:	ldr	r2, [r5, #12]
   10d42:	cmp	r2, ip
   10d44:	beq.n	10d62 <lfs_dir_commit+0x26e>
   10d46:	cmp	r3, ip
   10d48:	beq.n	10d62 <lfs_dir_commit+0x26e>
   10d4a:	cmp	r2, r7
   10d4c:	beq.n	10d62 <lfs_dir_commit+0x26e>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   10d4e:	ldr	r5, [r5, #0]
   10d50:	cmp	r5, #0
   10d52:	beq.n	10ddc <lfs_dir_commit+0x2e8>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
   10d54:	add.w	r6, r5, #8
   10d58:	cmp	r4, r6
   10d5a:	beq.n	10d4e <lfs_dir_commit+0x25a>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10d5c:	ldr	r3, [r5, #8]
   10d5e:	cmp	r3, r7
   10d60:	bne.n	10d40 <lfs_dir_commit+0x24c>
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
   10d62:	mov	lr, r4
   10d64:	ldmia.w	lr!, {r0, r1, r2, r3}
   10d68:	stmia	r6!, {r0, r1, r2, r3}
   10d6a:	ldmia.w	lr, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
   10d6e:	cmp.w	r8, #0
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
   10d72:	stmia.w	r6, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
   10d76:	it	gt
   10d78:	movgt	r3, #0
   10d7a:	bgt.n	10d8c <lfs_dir_commit+0x298>
   10d7c:	b.n	10d4e <lfs_dir_commit+0x25a>
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
                    if (d->type == LFS_TYPE_DIR) {
                        ((lfs_dir_t*)d)->pos -= 1;
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   10d7e:	movw	r0, #1025	; 0x401
   10d82:	cmp	r1, r0
   10d84:	beq.n	10db6 <lfs_dir_commit+0x2c2>
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
   10d86:	adds	r3, #1
   10d88:	cmp	r8, r3
   10d8a:	beq.n	10d4e <lfs_dir_commit+0x25a>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   10d8c:	ldr.w	r2, [sl, r3, lsl #3]
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
   10d90:	ubfx	r1, r2, #20, #11
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   10d94:	cmp	r1, fp
   10d96:	bne.n	10d7e <lfs_dir_commit+0x28a>
                        d->id == lfs_tag_id(attrs[i].tag)) {
   10d98:	ldrh	r1, [r5, #4]
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
   10d9a:	ubfx	r2, r2, #10, #10
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   10d9e:	cmp	r1, r2
   10da0:	beq.n	10dd2 <lfs_dir_commit+0x2de>
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
                    d->m.pair[1] = LFS_BLOCK_NULL;
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   10da2:	bls.n	10d86 <lfs_dir_commit+0x292>
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
                    if (d->type == LFS_TYPE_DIR) {
   10da4:	ldrb	r2, [r5, #6]
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
                    d->m.pair[1] = LFS_BLOCK_NULL;
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
   10da6:	subs	r1, #1
                    if (d->type == LFS_TYPE_DIR) {
   10da8:	cmp	r2, #2
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
                    d->m.pair[1] = LFS_BLOCK_NULL;
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
   10daa:	strh	r1, [r5, #4]
                    if (d->type == LFS_TYPE_DIR) {
   10dac:	bne.n	10d86 <lfs_dir_commit+0x292>
                        ((lfs_dir_t*)d)->pos -= 1;
   10dae:	ldr	r2, [r5, #40]	; 0x28
   10db0:	subs	r2, #1
   10db2:	str	r2, [r5, #40]	; 0x28
   10db4:	b.n	10d86 <lfs_dir_commit+0x292>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
                        d->id >= lfs_tag_id(attrs[i].tag)) {
   10db6:	ldrh	r1, [r5, #4]
                        d->id > lfs_tag_id(attrs[i].tag)) {
                    d->id -= 1;
                    if (d->type == LFS_TYPE_DIR) {
                        ((lfs_dir_t*)d)->pos -= 1;
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   10db8:	ubfx	r2, r2, #10, #10
   10dbc:	cmp	r1, r2
   10dbe:	bcc.n	10d86 <lfs_dir_commit+0x292>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
                    d->id += 1;
                    if (d->type == LFS_TYPE_DIR) {
   10dc0:	ldrb	r2, [r5, #6]
                    if (d->type == LFS_TYPE_DIR) {
                        ((lfs_dir_t*)d)->pos -= 1;
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
                        d->id >= lfs_tag_id(attrs[i].tag)) {
                    d->id += 1;
   10dc2:	adds	r1, #1
                    if (d->type == LFS_TYPE_DIR) {
   10dc4:	cmp	r2, #2
                    if (d->type == LFS_TYPE_DIR) {
                        ((lfs_dir_t*)d)->pos -= 1;
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
                        d->id >= lfs_tag_id(attrs[i].tag)) {
                    d->id += 1;
   10dc6:	strh	r1, [r5, #4]
                    if (d->type == LFS_TYPE_DIR) {
   10dc8:	bne.n	10d86 <lfs_dir_commit+0x292>
                        ((lfs_dir_t*)d)->pos += 1;
   10dca:	ldr	r2, [r5, #40]	; 0x28
   10dcc:	adds	r2, #1
   10dce:	str	r2, [r5, #40]	; 0x28
   10dd0:	b.n	10d86 <lfs_dir_commit+0x292>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            d->m = *dir;
            for (int i = 0; i < attrcount; i++) {
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
                        d->id == lfs_tag_id(attrs[i].tag)) {
                    d->m.pair[0] = LFS_BLOCK_NULL;
   10dd2:	mov.w	r2, #4294967295
   10dd6:	str	r2, [r5, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
   10dd8:	str	r2, [r5, #12]
   10dda:	b.n	10d86 <lfs_dir_commit+0x292>
   10ddc:	ldr	r6, [sp, #44]	; 0x2c

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   10dde:	mov.w	fp, #4294967295
   10de2:	b.n	10dfa <lfs_dir_commit+0x306>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10de4:	ldr	r2, [r6, #12]
   10de6:	ldr	r0, [sp, #40]	; 0x28
   10de8:	cmp	r2, r0
   10dea:	beq.n	10e00 <lfs_dir_commit+0x30c>
   10dec:	cmp	r3, r0
   10dee:	beq.n	10e00 <lfs_dir_commit+0x30c>
   10df0:	cmp	r2, r7
   10df2:	beq.n	10e00 <lfs_dir_commit+0x30c>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   10df4:	ldr	r6, [r6, #0]
   10df6:	cmp	r6, #0
   10df8:	beq.n	10ea2 <lfs_dir_commit+0x3ae>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   10dfa:	ldr	r3, [r6, #8]
   10dfc:	cmp	r3, r7
   10dfe:	bne.n	10de4 <lfs_dir_commit+0x2f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
                // we split and id is on tail now
                d->id -= d->m.count;
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   10e00:	add.w	sl, r6, #32
   10e04:	add.w	r8, r6, #8
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
   10e08:	ldrh.w	lr, [r6, #4]
   10e0c:	ldrh	r4, [r6, #28]
   10e0e:	cmp	lr, r4

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   10e10:	mov.w	r3, #4294967295
   10e14:	mov	r2, sl
   10e16:	mov	r1, r8
   10e18:	mov	r0, r9

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
                // we split and id is on tail now
                d->id -= d->m.count;
   10e1a:	rsb	ip, r4, lr
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
   10e1e:	bcc.n	10df4 <lfs_dir_commit+0x300>
   10e20:	ldrb	r4, [r6, #31]
   10e22:	cmp	r4, #0
   10e24:	beq.n	10df4 <lfs_dir_commit+0x300>
                // we split and id is on tail now
                d->id -= d->m.count;
   10e26:	strh.w	ip, [r6, #4]

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   10e2a:	str	r5, [sp, #12]
   10e2c:	str	r5, [sp, #8]
   10e2e:	str	r5, [sp, #4]
   10e30:	str.w	fp, [sp]
   10e34:	bl	e474 <lfs_dir_fetchmatch>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
            while (d->id >= d->m.count && d->m.split) {
                // we split and id is on tail now
                d->id -= d->m.count;
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
                if (err) {
   10e38:	cmp	r0, #0
   10e3a:	beq.n	10e08 <lfs_dir_commit+0x314>
   10e3c:	b.n	10b5a <lfs_dir_commit+0x66>
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
   10e3e:	add	r2, sp, #104	; 0x68
   10e40:	mov	r1, r4
   10e42:	mov	r0, r9
   10e44:	bl	e9a8 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   10e48:	mov	r5, r0
   10e4a:	cbz	r0, 10eae <lfs_dir_commit+0x3ba>
   10e4c:	adds	r3, r0, #2
   10e4e:	bne.w	10cc8 <lfs_dir_commit+0x1d4>
   10e52:	b.n	10bf2 <lfs_dir_commit+0xfe>
        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
        dir->off = commit.off;
        dir->etag = commit.ptag;
        // and update gstate
        lfs->gdisk = lfs->gstate;
   10e54:	add.w	r3, r9, #48	; 0x30
   10e58:	ldmia.w	r3, {r0, r1, r2}
            return err;
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
        dir->off = commit.off;
   10e5c:	ldr	r6, [sp, #108]	; 0x6c
   10e5e:	str	r6, [r4, #12]
        dir->etag = commit.ptag;
   10e60:	ldr	r6, [sp, #112]	; 0x70
   10e62:	str	r6, [r4, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
   10e64:	add.w	r6, r9, #60	; 0x3c
   10e68:	stmia.w	r6, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
   10e6c:	str.w	r5, [r9, #72]	; 0x48
   10e70:	str.w	r5, [r9, #76]	; 0x4c
   10e74:	str.w	r5, [r9, #80]	; 0x50
                return err;
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
   10e78:	b.n	10d28 <lfs_dir_commit+0x234>
        lfs_gstate_xor(&delta, &lfs->gstate);
        lfs_gstate_xor(&delta, &lfs->gdisk);
        lfs_gstate_xor(&delta, &lfs->gdelta);
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
        if (!lfs_gstate_iszero(&delta)) {
            err = lfs_dir_getgstate(lfs, dir, &delta);
   10e7a:	add	r2, sp, #60	; 0x3c
   10e7c:	mov	r1, r4
   10e7e:	mov	r0, r9
   10e80:	bl	eda0 <lfs_dir_getgstate>
            if (err) {
   10e84:	mov	r5, r0
   10e86:	cmp	r0, #0
   10e88:	bne.w	10cc8 <lfs_dir_commit+0x1d4>
                *dir = olddir;
                return err;
            }

            lfs_gstate_tole32(&delta);
            err = lfs_dir_commitattr(lfs, &commit,
   10e8c:	add	r3, sp, #60	; 0x3c
   10e8e:	ldr	r2, [pc, #64]	; (10ed0 <lfs_dir_commit+0x3dc>)
   10e90:	mov	r1, r6
   10e92:	mov	r0, r9
   10e94:	bl	f45c <lfs_dir_commitattr>
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
   10e98:	mov	r5, r0
   10e9a:	cmp	r0, #0
   10e9c:	bne.w	10cbc <lfs_dir_commit+0x1c8>
   10ea0:	b.n	10cac <lfs_dir_commit+0x1b8>
                }
            }
        }
    }

    return 0;
   10ea2:	mov.w	lr, #0
}
   10ea6:	mov	r0, lr
   10ea8:	add	sp, #140	; 0x8c
   10eaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err && err != LFS_ERR_NOENT) {
            *dir = olddir;
            return err;
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
   10eae:	ldrb.w	r3, [sp, #127]	; 0x7f
   10eb2:	cmp	r3, #0
   10eb4:	beq.w	10bf2 <lfs_dir_commit+0xfe>
            err = lfs_dir_drop(lfs, &pdir, dir);
   10eb8:	add	r1, sp, #104	; 0x68
   10eba:	mov	r2, r4
   10ebc:	mov	r0, r9
   10ebe:	bl	10ed4 <lfs_dir_drop>
            if (err) {
   10ec2:	mov	r5, r0
   10ec4:	cmp	r0, #0
   10ec6:	bne.w	10cc8 <lfs_dir_commit+0x1d4>
   10eca:	b.n	10bf2 <lfs_dir_commit+0xfe>
   10ecc:	.word	0x0000f515
   10ed0:	.word	0x7ffffc0c

00010ed4 <lfs_dir_drop>:

    // don't write out yet, let caller take care of that
    return 0;
}

static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   10ed4:	push	{r4, r5, r6, r7, lr}
   10ed6:	mov	r4, r2
   10ed8:	sub	sp, #12
   10eda:	mov	r7, r1
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   10edc:	add.w	r2, r0, #72	; 0x48
   10ee0:	mov	r1, r4

    // don't write out yet, let caller take care of that
    return 0;
}

static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   10ee2:	mov	r5, r0
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   10ee4:	bl	eda0 <lfs_dir_getgstate>
    if (err) {
   10ee8:	cbnz	r0, 10f08 <lfs_dir_drop+0x34>
        return err;
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   10eea:	ldrb	r3, [r4, #23]
   10eec:	ldr	r6, [pc, #28]	; (10f0c <lfs_dir_drop+0x38>)
   10eee:	add.w	r3, r3, #1536	; 0x600
   10ef2:	lsls	r3, r3, #20
   10ef4:	orrs	r6, r3
   10ef6:	adds	r4, #24
   10ef8:	mov	r1, r7
   10efa:	mov	r0, r5
   10efc:	movs	r3, #1
   10efe:	mov	r2, sp
   10f00:	str	r4, [sp, #4]
   10f02:	str	r6, [sp, #0]
   10f04:	bl	10af4 <lfs_dir_commit>
    if (err) {
        return err;
    }

    return 0;
}
   10f08:	add	sp, #12
   10f0a:	pop	{r4, r5, r6, r7, pc}
   10f0c:	.word	0x000ffc08

00010f10 <lfs_fs_forceconsistency>:
    // mark orphans as fixed
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
    return 0;
}

static int lfs_fs_forceconsistency(lfs_t *lfs) {
   10f10:	push	{r4, r5, r6, r7, lr}
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
}

static int lfs_fs_demove(lfs_t *lfs) {
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   10f12:	ldr	r3, [r0, #60]	; 0x3c
   10f14:	lsrs	r3, r3, #20
   10f16:	tst.w	r3, #1792	; 0x700
    // mark orphans as fixed
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
    return 0;
}

static int lfs_fs_forceconsistency(lfs_t *lfs) {
   10f1a:	sub	sp, #140	; 0x8c
   10f1c:	mov	r6, r0
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
}

static int lfs_fs_demove(lfs_t *lfs) {
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   10f1e:	bne.n	10ff2 <lfs_fs_forceconsistency+0xe2>

    return 0;
}

static int lfs_fs_deorphan(lfs_t *lfs) {
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
   10f20:	ldr	r3, [r6, #48]	; 0x30
   10f22:	ubfx	r3, r3, #0, #10
   10f26:	cmp	r3, #0
   10f28:	beq.n	10f98 <lfs_fs_forceconsistency+0x88>
        return 0;
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
   10f2a:	add	r0, sp, #40	; 0x28
   10f2c:	movs	r2, #32
   10f2e:	movs	r1, #0
   10f30:	bl	14e3c <memset>
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
   10f34:	ldr	r7, [pc, #312]	; (11070 <lfs_fs_forceconsistency+0x160>)
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
        return 0;
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
   10f36:	movs	r3, #1
   10f38:	strb.w	r3, [sp, #63]	; 0x3f
   10f3c:	str	r3, [sp, #68]	; 0x44
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   10f3e:	ldr	r3, [sp, #68]	; 0x44
   10f40:	adds	r3, #1
   10f42:	beq.n	10f7c <lfs_fs_forceconsistency+0x6c>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   10f44:	movs	r2, #0
   10f46:	mov.w	r3, #4294967295
   10f4a:	str	r2, [sp, #12]
   10f4c:	str	r2, [sp, #8]
   10f4e:	str	r2, [sp, #4]
   10f50:	add	r1, sp, #72	; 0x48
   10f52:	str	r3, [sp, #0]
   10f54:	add	r2, sp, #64	; 0x40
   10f56:	mov	r0, r6
   10f58:	bl	e474 <lfs_dir_fetchmatch>
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
        if (err) {
   10f5c:	mov	r4, r0
   10f5e:	cbnz	r0, 10f9a <lfs_fs_forceconsistency+0x8a>
            return err;
        }

        // check head blocks for orphans
        if (!pdir.split) {
   10f60:	ldrb.w	r4, [sp, #63]	; 0x3f
   10f64:	cbz	r4, 10fa0 <lfs_fs_forceconsistency+0x90>
                // refetch tail
                continue;
            }
        }

        pdir = dir;
   10f66:	add	r5, sp, #72	; 0x48
   10f68:	ldmia	r5!, {r0, r1, r2, r3}
   10f6a:	add	r4, sp, #40	; 0x28
   10f6c:	stmia	r4!, {r0, r1, r2, r3}
   10f6e:	ldmia.w	r5, {r0, r1, r2, r3}
   10f72:	stmia.w	r4, {r0, r1, r2, r3}
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   10f76:	ldr	r3, [sp, #64]	; 0x40
   10f78:	adds	r3, #1
   10f7a:	bne.n	10f3e <lfs_fs_forceconsistency+0x2e>
   10f7c:	ldr	r2, [r6, #48]	; 0x30
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   10f7e:	negs	r3, r2
   10f80:	sxtab	r3, r2, r3
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   10f84:	ubfx	r2, r3, #0, #10
   10f88:	adds	r2, #0
   10f8a:	it	ne
   10f8c:	movne	r2, #1
   10f8e:	bic.w	r3, r3, #2147483648	; 0x80000000
   10f92:	orr.w	r3, r3, r2, lsl #31
   10f96:	str	r3, [r6, #48]	; 0x30
    err = lfs_fs_deorphan(lfs);
    if (err) {
        return err;
    }

    return 0;
   10f98:	movs	r4, #0
}
   10f9a:	mov	r0, r4
   10f9c:	add	sp, #140	; 0x8c
   10f9e:	pop	{r4, r5, r6, r7, pc}

        // check head blocks for orphans
        if (!pdir.split) {
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
   10fa0:	add	r2, sp, #104	; 0x68
   10fa2:	add	r1, sp, #64	; 0x40
   10fa4:	mov	r0, r6
   10fa6:	bl	e920 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
   10faa:	subs	r3, r0, #0
   10fac:	blt.n	11046 <lfs_fs_forceconsistency+0x136>
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   10fae:	ubfx	r2, r3, #0, #10
   10fb2:	add	r5, sp, #24
   10fb4:	str	r2, [sp, #8]
   10fb6:	str	r4, [sp, #0]
   10fb8:	add	r1, sp, #104	; 0x68
   10fba:	str	r5, [sp, #4]
   10fbc:	ldr	r2, [pc, #180]	; (11074 <lfs_fs_forceconsistency+0x164>)
   10fbe:	mov	r0, r6
   10fc0:	bl	ec2c <lfs_dir_getslice>
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
   10fc4:	cmp	r0, #0
   10fc6:	blt.n	10fea <lfs_fs_forceconsistency+0xda>
}

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   10fc8:	ldr	r3, [sp, #24]
   10fca:	ldr	r1, [sp, #64]	; 0x40
   10fcc:	ldr	r2, [sp, #68]	; 0x44
   10fce:	cmp	r3, r1
   10fd0:	beq.n	1105c <lfs_fs_forceconsistency+0x14c>
   10fd2:	cmp	r3, r2
   10fd4:	beq.n	11064 <lfs_fs_forceconsistency+0x154>
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
   10fd6:	movs	r3, #1
   10fd8:	add	r2, sp, #32
   10fda:	add	r1, sp, #40	; 0x28
   10fdc:	mov	r0, r6
   10fde:	str	r7, [sp, #32]
   10fe0:	str	r5, [sp, #36]	; 0x24
   10fe2:	bl	10af4 <lfs_dir_commit>
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
                if (err) {
   10fe6:	cmp	r0, #0
   10fe8:	beq.n	10f76 <lfs_fs_forceconsistency+0x66>
    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
   10fea:	mov	r4, r0
    if (err) {
        return err;
    }

    return 0;
}
   10fec:	mov	r0, r4
   10fee:	add	sp, #140	; 0x8c
   10ff0:	pop	{r4, r5, r6, r7, pc}

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   10ff2:	movs	r2, #0
   10ff4:	mov.w	r3, #4294967295
   10ff8:	str	r2, [sp, #12]
   10ffa:	str	r2, [sp, #8]
   10ffc:	str	r2, [sp, #4]
   10ffe:	add	r1, sp, #104	; 0x68
   11000:	str	r3, [sp, #0]
   11002:	add.w	r2, r0, #64	; 0x40
   11006:	bl	e474 <lfs_dir_fetchmatch>
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
    if (err) {
   1100a:	mov	r4, r0
   1100c:	cmp	r0, #0
   1100e:	bne.n	10f9a <lfs_fs_forceconsistency+0x8a>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
   11010:	ldr	r3, [r6, #60]	; 0x3c
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   11012:	ldr	r1, [r6, #48]	; 0x30
   11014:	ldr	r2, [pc, #96]	; (11078 <lfs_fs_forceconsistency+0x168>)
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   11016:	str	r0, [r6, #52]	; 0x34
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
   11018:	ubfx	r5, r3, #10, #10
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   1101c:	lsls	r5, r5, #10
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   1101e:	ands	r2, r1
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   11020:	orr.w	r5, r5, #1333788672	; 0x4f800000
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   11024:	str	r0, [r6, #56]	; 0x38
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   11026:	orr.w	r5, r5, #7340032	; 0x700000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   1102a:	str	r2, [r6, #48]	; 0x30
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   1102c:	add	r1, sp, #104	; 0x68
   1102e:	movs	r3, #1
   11030:	add	r2, sp, #16
   11032:	mov	r0, r6
   11034:	str	r4, [sp, #20]
   11036:	str	r5, [sp, #16]
   11038:	bl	10af4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
   1103c:	cmp	r0, #0
   1103e:	beq.w	10f20 <lfs_fs_forceconsistency+0x10>
   11042:	mov	r4, r0
   11044:	b.n	10fec <lfs_fs_forceconsistency+0xdc>
        // check head blocks for orphans
        if (!pdir.split) {
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
            if (tag < 0 && tag != LFS_ERR_NOENT) {
   11046:	adds	r2, r3, #2
   11048:	bne.n	1106c <lfs_fs_forceconsistency+0x15c>
            if (tag == LFS_ERR_NOENT) {
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
   1104a:	add	r2, sp, #72	; 0x48
   1104c:	add	r1, sp, #40	; 0x28
   1104e:	mov	r0, r6
   11050:	bl	10ed4 <lfs_dir_drop>
                if (err) {
   11054:	cmp	r0, #0
   11056:	beq.n	10f76 <lfs_fs_forceconsistency+0x66>
    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
   11058:	mov	r4, r0
   1105a:	b.n	10fec <lfs_fs_forceconsistency+0xdc>
}

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   1105c:	ldr	r0, [sp, #28]
   1105e:	cmp	r0, r2
   11060:	bne.n	10fd2 <lfs_fs_forceconsistency+0xc2>
   11062:	b.n	10f66 <lfs_fs_forceconsistency+0x56>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
   11064:	ldr	r3, [sp, #28]
   11066:	cmp	r1, r3
   11068:	bne.n	10fd6 <lfs_fs_forceconsistency+0xc6>
   1106a:	b.n	10f66 <lfs_fs_forceconsistency+0x56>

        // check head blocks for orphans
        if (!pdir.split) {
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
   1106c:	mov	r4, r3
   1106e:	b.n	10f9a <lfs_fs_forceconsistency+0x8a>
   11070:	.word	0x600ffc08
   11074:	.word	0x7ffffc00
   11078:	.word	0x800003ff

0001107c <lfs_mkdir>:
    return 0;
}


/// Top level directory operations ///
int lfs_mkdir(lfs_t *lfs, const char *path) {
   1107c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11080:	sub	sp, #184	; 0xb8
   11082:	mov	r4, r0
   11084:	str	r1, [sp, #20]
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
   11086:	bl	10f10 <lfs_fs_forceconsistency>
    if (err) {
   1108a:	cbz	r0, 11092 <lfs_mkdir+0x16>
        return err;
    }

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}
   1108c:	add	sp, #184	; 0xb8
   1108e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LFS_TRACE("lfs_mkdir -> %d", err);
        return err;
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
   11092:	ldr	r3, [r4, #40]	; 0x28
   11094:	str	r3, [sp, #144]	; 0x90
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   11096:	add	r1, sp, #152	; 0x98
   11098:	add.w	r3, sp, #30
   1109c:	add	r2, sp, #20
   1109e:	mov	r0, r4
   110a0:	bl	ede8 <lfs_dir_find>
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
   110a4:	adds	r3, r0, #2
   110a6:	beq.n	110b6 <lfs_mkdir+0x3a>
        LFS_TRACE("lfs_mkdir -> %d", (err < 0) ? err : LFS_ERR_EXIST);
        return (err < 0) ? err : LFS_ERR_EXIST;
   110a8:	cmp	r0, #0
   110aa:	it	ge
   110ac:	mvnge.w	r0, #16
        return err;
    }

    LFS_TRACE("lfs_mkdir -> %d", 0);
    return 0;
}
   110b0:	add	sp, #184	; 0xb8
   110b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
   110b6:	ldrh.w	r2, [sp, #30]
   110ba:	movw	r3, #1023	; 0x3ff
   110be:	cmp	r2, r3
   110c0:	beq.n	1108c <lfs_mkdir+0x10>
        LFS_TRACE("lfs_mkdir -> %d", (err < 0) ? err : LFS_ERR_EXIST);
        return (err < 0) ? err : LFS_ERR_EXIST;
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
   110c2:	ldr	r0, [sp, #20]
   110c4:	bl	15880 <strlen>
    if (nlen > lfs->name_max) {
   110c8:	ldr	r3, [r4, #108]	; 0x6c
   110ca:	cmp	r0, r3
        LFS_TRACE("lfs_mkdir -> %d", (err < 0) ? err : LFS_ERR_EXIST);
        return (err < 0) ? err : LFS_ERR_EXIST;
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
   110cc:	mov	r7, r0
    if (nlen > lfs->name_max) {
   110ce:	bhi.n	11188 <lfs_mkdir+0x10c>

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   110d0:	ldr	r3, [r4, #104]	; 0x68
   110d2:	ldr	r3, [r3, #32]
   110d4:	str	r3, [r4, #96]	; 0x60
    }

    // build up new directory
    lfs_alloc_ack(lfs);
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
   110d6:	add	r1, sp, #48	; 0x30
   110d8:	mov	r0, r4
   110da:	bl	fd24 <lfs_dir_alloc>
    if (err) {
   110de:	mov	r5, r0
   110e0:	cmp	r0, #0
   110e2:	bne.n	1108c <lfs_mkdir+0x10>
        LFS_TRACE("lfs_mkdir -> %d", err);
        return err;
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
   110e4:	add.w	lr, sp, #152	; 0x98
   110e8:	ldmia.w	lr!, {r0, r1, r2, r3}
   110ec:	add	r6, sp, #80	; 0x50
   110ee:	stmia	r6!, {r0, r1, r2, r3}
   110f0:	ldmia.w	lr, {r0, r1, r2, r3}

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   110f4:	mov.w	r8, #4294967295
        LFS_TRACE("lfs_mkdir -> %d", err);
        return err;
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
   110f8:	stmia.w	r6, {r0, r1, r2, r3}
    while (pred.split) {
   110fc:	b.n	11110 <lfs_mkdir+0x94>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   110fe:	str	r5, [sp, #12]
   11100:	str	r5, [sp, #8]
   11102:	str	r5, [sp, #4]
   11104:	str.w	r8, [sp]
   11108:	bl	e474 <lfs_dir_fetchmatch>

    // find end of list
    lfs_mdir_t pred = cwd.m;
    while (pred.split) {
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
        if (err) {
   1110c:	cmp	r0, #0
   1110e:	bne.n	1108c <lfs_mkdir+0x10>
        return err;
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
    while (pred.split) {
   11110:	ldrb.w	r6, [sp, #103]	; 0x67

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   11114:	mov.w	r3, #4294967295
   11118:	add	r2, sp, #104	; 0x68
   1111a:	add	r1, sp, #80	; 0x50
   1111c:	mov	r0, r4
        return err;
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
    while (pred.split) {
   1111e:	cmp	r6, #0
   11120:	bne.n	110fe <lfs_mkdir+0x82>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
   11122:	ldr	r5, [pc, #204]	; (111f0 <lfs_mkdir+0x174>)
   11124:	str	r2, [sp, #36]	; 0x24
   11126:	movs	r3, #1
   11128:	add	r2, sp, #32
   1112a:	add	r1, sp, #48	; 0x30
   1112c:	str	r5, [sp, #32]
   1112e:	bl	10af4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
    if (err) {
   11132:	cmp	r0, #0
   11134:	bne.n	1108c <lfs_mkdir+0x10>
        LFS_TRACE("lfs_mkdir -> %d", err);
        return err;
    }

    // current block end of list?
    if (cwd.m.split) {
   11136:	ldrb.w	r2, [sp, #175]	; 0xaf
   1113a:	cbnz	r2, 1118e <lfs_mkdir+0x112>
        lfs_fs_preporphans(lfs, -1);
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
   1113c:	ldrh.w	r5, [sp, #30]
   11140:	ldr	r3, [pc, #172]	; (111f0 <lfs_mkdir+0x174>)
   11142:	lsls	r5, r5, #10
   11144:	cmp	r2, #0
   11146:	orr.w	r2, r5, #1073741824	; 0x40000000
   1114a:	add	r1, sp, #48	; 0x30
   1114c:	orr.w	r6, r5, #2097152	; 0x200000
   11150:	mov	r0, r4
   11152:	orr.w	r2, r2, #1048576	; 0x100000
   11156:	ite	eq
   11158:	moveq	r4, r3
   1115a:	movne	r4, #0
   1115c:	add	r3, sp, #48	; 0x30
   1115e:	orr.w	r5, r5, #536870912	; 0x20000000
   11162:	orrs	r7, r6
   11164:	str	r1, [sp, #132]	; 0x84
   11166:	orr.w	r5, r5, #8
   1116a:	movs	r6, #0
   1116c:	str	r3, [sp, #140]	; 0x8c
   1116e:	str	r2, [sp, #112]	; 0x70
   11170:	str	r4, [sp, #136]	; 0x88
   11172:	add	r1, sp, #152	; 0x98
   11174:	ldr	r4, [sp, #20]
   11176:	str	r7, [sp, #120]	; 0x78
   11178:	movs	r3, #4
   1117a:	add	r2, sp, #112	; 0x70
   1117c:	str	r5, [sp, #128]	; 0x80
   1117e:	str	r6, [sp, #116]	; 0x74
   11180:	str	r4, [sp, #124]	; 0x7c
   11182:	bl	10af4 <lfs_dir_commit>
   11186:	b.n	1108c <lfs_mkdir+0x10>

    // check that name fits
    lfs_size_t nlen = strlen(path);
    if (nlen > lfs->name_max) {
        LFS_TRACE("lfs_mkdir -> %d", LFS_ERR_NAMETOOLONG);
        return LFS_ERR_NAMETOOLONG;
   11188:	mvn.w	r0, #35	; 0x23
   1118c:	b.n	1108c <lfs_mkdir+0x10>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   1118e:	ldr	r3, [r4, #48]	; 0x30

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
   11190:	strb.w	r0, [sp, #150]	; 0x96
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   11194:	adds	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   11196:	ubfx	r2, r3, #0, #10
   1119a:	adds	r2, #0
   1119c:	it	ne
   1119e:	movne	r2, #1
   111a0:	bic.w	r3, r3, #2147483648	; 0x80000000
   111a4:	orr.w	r3, r3, r2, lsl #31
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
        cwd.id = 0;
        lfs->mlist = &cwd;
   111a8:	add	r2, sp, #144	; 0x90
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   111aa:	str	r3, [r4, #48]	; 0x30
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
        cwd.id = 0;
        lfs->mlist = &cwd;
   111ac:	str	r2, [r4, #40]	; 0x28
        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
        cwd.id = 0;
   111ae:	strh.w	r0, [sp, #148]	; 0x94
        lfs->mlist = &cwd;

        lfs_pair_tole32(dir.pair);
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
   111b2:	str	r5, [sp, #40]	; 0x28
   111b4:	add	r1, sp, #80	; 0x50
   111b6:	add	r5, sp, #48	; 0x30
   111b8:	movs	r3, #1
   111ba:	add	r2, sp, #40	; 0x28
   111bc:	mov	r0, r4
   111be:	str	r5, [sp, #44]	; 0x2c
   111c0:	bl	10af4 <lfs_dir_commit>
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
        if (err) {
   111c4:	cbnz	r0, 111e8 <lfs_mkdir+0x16c>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   111c6:	ldr	r3, [r4, #48]	; 0x30
            lfs->mlist = cwd.next;
            LFS_TRACE("lfs_mkdir -> %d", err);
            return err;
        }

        lfs->mlist = cwd.next;
   111c8:	ldr	r2, [sp, #144]	; 0x90
   111ca:	str	r2, [r4, #40]	; 0x28
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   111cc:	subs	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   111ce:	ubfx	r2, r3, #0, #10
   111d2:	adds	r2, #0
   111d4:	it	ne
   111d6:	movne	r2, #1
   111d8:	bic.w	r3, r3, #2147483648	; 0x80000000
   111dc:	orr.w	r3, r3, r2, lsl #31
   111e0:	str	r3, [r4, #48]	; 0x30
   111e2:	ldrb.w	r2, [sp, #175]	; 0xaf
   111e6:	b.n	1113c <lfs_mkdir+0xc0>
        lfs_pair_tole32(dir.pair);
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
        if (err) {
            lfs->mlist = cwd.next;
   111e8:	ldr	r3, [sp, #144]	; 0x90
   111ea:	str	r3, [r4, #40]	; 0x28
            LFS_TRACE("lfs_mkdir -> %d", err);
            return err;
   111ec:	b.n	1108c <lfs_mkdir+0x10>
   111ee:	nop
   111f0:	.word	0x600ffc08

000111f4 <lfs_file_sync>:

int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_sync(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    if (file->flags & LFS_F_ERRED) {
   111f4:	ldr	r2, [r1, #48]	; 0x30
   111f6:	lsls	r3, r2, #12
   111f8:	bpl.n	111fe <lfs_file_sync+0xa>
        // it's not safe to do anything if our file errored
        LFS_TRACE("lfs_file_sync -> %d", 0);
        return 0;
   111fa:	movs	r0, #0
        file->flags &= ~LFS_F_DIRTY;
    }

    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}
   111fc:	bx	lr
    }

    return 0;
}

int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   111fe:	push	{r4, r5, r6, r7, lr}
   11200:	sub	sp, #28
   11202:	mov	r4, r1
   11204:	mov	r5, r0
        // it's not safe to do anything if our file errored
        LFS_TRACE("lfs_file_sync -> %d", 0);
        return 0;
    }

    int err = lfs_file_flush(lfs, file);
   11206:	bl	10268 <lfs_file_flush>
    if (err) {
        file->flags |= LFS_F_ERRED;
   1120a:	ldr	r3, [r4, #48]	; 0x30
        LFS_TRACE("lfs_file_sync -> %d", 0);
        return 0;
    }

    int err = lfs_file_flush(lfs, file);
    if (err) {
   1120c:	cmp	r0, #0
   1120e:	bne.n	11274 <lfs_file_sync+0x80>
        file->flags |= LFS_F_ERRED;
        LFS_TRACE("lfs_file_sync -> %d", err);
        return err;
    }

    if ((file->flags & LFS_F_DIRTY) &&
   11210:	lsls	r2, r3, #15
   11212:	bpl.n	1126e <lfs_file_sync+0x7a>
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   11214:	ldr	r2, [r4, #8]
   11216:	adds	r2, #1
   11218:	beq.n	1126e <lfs_file_sync+0x7a>
   1121a:	ldr	r2, [r4, #12]
   1121c:	adds	r2, #1
   1121e:	beq.n	1126e <lfs_file_sync+0x7a>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
   11220:	lsls	r3, r3, #11
   11222:	bmi.n	1127e <lfs_file_sync+0x8a>
            size = file->ctz.size;
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
   11224:	add.w	r3, r4, #40	; 0x28
   11228:	ldmia.w	r3, {r0, r1}
   1122c:	ldr	r3, [pc, #88]	; (11288 <lfs_file_sync+0x94>)
   1122e:	stmia.w	sp, {r0, r1}
            lfs_ctz_tole32(&ctz);
            buffer = &ctz;
   11232:	mov	r0, sp
            size = sizeof(ctz);
   11234:	movs	r1, #8
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   11236:	ldr	r6, [r4, #80]	; 0x50
   11238:	ldrh	r2, [r4, #4]
   1123a:	ldr	r7, [r6, #8]
   1123c:	ldr	r6, [r6, #4]
   1123e:	str	r0, [sp, #12]
   11240:	orrs	r1, r3
   11242:	orr.w	r7, r7, #270532608	; 0x10200000
   11246:	lsls	r3, r2, #10
   11248:	mov	r0, r5
   1124a:	orrs	r7, r3
   1124c:	orr.w	r5, r1, r3
   11250:	add	r2, sp, #8
   11252:	movs	r3, #2
   11254:	add.w	r1, r4, #8
   11258:	str	r6, [sp, #20]
   1125a:	str	r7, [sp, #16]
   1125c:	str	r5, [sp, #8]
   1125e:	bl	10af4 <lfs_dir_commit>
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
            file->flags |= LFS_F_ERRED;
   11262:	ldr	r3, [r4, #48]	; 0x30
        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
   11264:	cbnz	r0, 11274 <lfs_file_sync+0x80>
            file->flags |= LFS_F_ERRED;
            LFS_TRACE("lfs_file_sync -> %d", err);
            return err;
        }

        file->flags &= ~LFS_F_DIRTY;
   11266:	bic.w	r3, r3, #65536	; 0x10000
   1126a:	str	r3, [r4, #48]	; 0x30
   1126c:	b.n	11270 <lfs_file_sync+0x7c>
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    if (file->flags & LFS_F_ERRED) {
        // it's not safe to do anything if our file errored
        LFS_TRACE("lfs_file_sync -> %d", 0);
        return 0;
   1126e:	movs	r0, #0
        file->flags &= ~LFS_F_DIRTY;
    }

    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}
   11270:	add	sp, #28
   11272:	pop	{r4, r5, r6, r7, pc}
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
            file->flags |= LFS_F_ERRED;
   11274:	orr.w	r3, r3, #524288	; 0x80000
   11278:	str	r3, [r4, #48]	; 0x30
        file->flags &= ~LFS_F_DIRTY;
    }

    LFS_TRACE("lfs_file_sync -> %d", 0);
    return 0;
}
   1127a:	add	sp, #28
   1127c:	pop	{r4, r5, r6, r7, pc}
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
            buffer = file->cache.buffer;
   1127e:	ldr	r0, [r4, #76]	; 0x4c
            size = file->ctz.size;
   11280:	ldr	r1, [r4, #44]	; 0x2c
   11282:	ldr	r3, [pc, #8]	; (1128c <lfs_file_sync+0x98>)
   11284:	b.n	11236 <lfs_file_sync+0x42>
   11286:	nop
   11288:	.word	0x20200000
   1128c:	.word	0x20100000

00011290 <lfs_file_close>:
    int err = lfs_file_opencfg(lfs, file, path, flags, &defaults);
    LFS_TRACE("lfs_file_open -> %d", err);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   11290:	push	{r4, r5, r6, lr}
   11292:	mov	r5, r0
   11294:	mov	r4, r1
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    int err = lfs_file_sync(lfs, file);
   11296:	bl	111f4 <lfs_file_sync>

    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1129a:	ldr	r2, [r5, #40]	; 0x28

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    int err = lfs_file_sync(lfs, file);
   1129c:	mov	r6, r0

    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1129e:	cbz	r2, 112b2 <lfs_file_close+0x22>
        if (*p == (struct lfs_mlist*)file) {
   112a0:	cmp	r4, r2
   112a2:	bne.n	112ac <lfs_file_close+0x1c>
   112a4:	b.n	112c4 <lfs_file_close+0x34>
   112a6:	cmp	r4, r3
   112a8:	beq.n	112ca <lfs_file_close+0x3a>
   112aa:	mov	r2, r3
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    int err = lfs_file_sync(lfs, file);

    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   112ac:	ldr	r3, [r2, #0]
   112ae:	cmp	r3, #0
   112b0:	bne.n	112a6 <lfs_file_close+0x16>
            break;
        }
    }

    // clean up memory
    if (!file->cfg->buffer) {
   112b2:	ldr	r3, [r4, #80]	; 0x50
   112b4:	ldr	r3, [r3, #0]
   112b6:	cbz	r3, 112d6 <lfs_file_close+0x46>
        lfs_free(file->cache.buffer);
    }

    file->flags &= ~LFS_F_OPENED;
   112b8:	ldr	r3, [r4, #48]	; 0x30
   112ba:	bic.w	r3, r3, #2097152	; 0x200000
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}
   112be:	mov	r0, r6
    // clean up memory
    if (!file->cfg->buffer) {
        lfs_free(file->cache.buffer);
    }

    file->flags &= ~LFS_F_OPENED;
   112c0:	str	r3, [r4, #48]	; 0x30
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}
   112c2:	pop	{r4, r5, r6, pc}
    LFS_ASSERT(file->flags & LFS_F_OPENED);

    int err = lfs_file_sync(lfs, file);

    // remove from list of mdirs
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   112c4:	add.w	r2, r5, #40	; 0x28
   112c8:	mov	r3, r4
        if (*p == (struct lfs_mlist*)file) {
            *p = (*p)->next;
   112ca:	ldr	r3, [r3, #0]
   112cc:	str	r3, [r2, #0]
            break;
        }
    }

    // clean up memory
    if (!file->cfg->buffer) {
   112ce:	ldr	r3, [r4, #80]	; 0x50
   112d0:	ldr	r3, [r3, #0]
   112d2:	cmp	r3, #0
   112d4:	bne.n	112b8 <lfs_file_close+0x28>
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
   112d6:	ldr	r0, [r4, #76]	; 0x4c
   112d8:	bl	146bc <free>
   112dc:	b.n	112b8 <lfs_file_close+0x28>
   112de:	nop

000112e0 <lfs_file_opencfg>:


/// Top level file operations ///
int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
   112e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e4:	mov	r7, r3
   112e6:	sub	sp, #52	; 0x34
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);

    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & 3) != LFS_O_RDONLY) {
   112e8:	and.w	r3, r3, #3
   112ec:	cmp	r3, #1


/// Top level file operations ///
int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
   112ee:	mov	r4, r1
   112f0:	str	r2, [sp, #20]
   112f2:	mov	r6, r0
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);

    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & 3) != LFS_O_RDONLY) {
   112f4:	beq.n	112fc <lfs_file_opencfg+0x1c>
        int err = lfs_fs_forceconsistency(lfs);
   112f6:	bl	10f10 <lfs_fs_forceconsistency>
        if (err) {
   112fa:	cbnz	r0, 1134e <lfs_file_opencfg+0x6e>

    // setup simple file details
    int err;
    file->cfg = cfg;
    file->flags = flags | LFS_F_OPENED;
    file->pos = 0;
   112fc:	mov.w	r8, #0
        }
    }

    // setup simple file details
    int err;
    file->cfg = cfg;
   11300:	ldr	r2, [sp, #88]	; 0x58
   11302:	str	r2, [r4, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
   11304:	orr.w	r3, r7, #2097152	; 0x200000
    file->pos = 0;
    file->off = 0;
    file->cache.buffer = NULL;

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   11308:	add.w	r9, r4, #8
    }

    // setup simple file details
    int err;
    file->cfg = cfg;
    file->flags = flags | LFS_F_OPENED;
   1130c:	str	r3, [r4, #48]	; 0x30
    file->pos = 0;
   1130e:	str.w	r8, [r4, #52]	; 0x34
    file->off = 0;
   11312:	str.w	r8, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
   11316:	str.w	r8, [r4, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   1131a:	mov	r1, r9
   1131c:	adds	r3, r4, #4
   1131e:	add	r2, sp, #20
   11320:	mov	r0, r6
   11322:	bl	ede8 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
   11326:	subs	r5, r0, #0
   11328:	blt.n	11404 <lfs_file_opencfg+0x124>
        err = tag;
        goto cleanup;
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
   1132a:	movs	r3, #1
   1132c:	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
   1132e:	ldr	r3, [r6, #40]	; 0x28
   11330:	str	r3, [r4, #0]
            err = LFS_ERR_NAMETOOLONG;
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    } else if (flags & LFS_O_EXCL) {
   11332:	lsls	r3, r7, #22
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
    file->next = (lfs_file_t*)lfs->mlist;
    lfs->mlist = (struct lfs_mlist*)file;
   11334:	str	r4, [r6, #40]	; 0x28
            err = LFS_ERR_NAMETOOLONG;
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    } else if (flags & LFS_O_EXCL) {
   11336:	bpl.n	11354 <lfs_file_opencfg+0x74>
   11338:	ldr	r3, [r4, #48]	; 0x30
        err = LFS_ERR_EXIST;
   1133a:	mvn.w	r5, #16
    LFS_TRACE("lfs_file_opencfg -> %d", 0);
    return 0;

cleanup:
    // clean up lingering resources
    file->flags |= LFS_F_ERRED;
   1133e:	orr.w	r3, r3, #524288	; 0x80000
   11342:	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
   11344:	mov	r1, r4
   11346:	mov	r0, r6
   11348:	bl	11290 <lfs_file_close>
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    return err;
   1134c:	mov	r0, r5
}
   1134e:	add	sp, #52	; 0x34
   11350:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    } else if (flags & LFS_O_EXCL) {
        err = LFS_ERR_EXIST;
        goto cleanup;
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
   11354:	lsrs	r5, r5, #20
   11356:	cmp	r5, #1
   11358:	beq.n	11362 <lfs_file_opencfg+0x82>
        err = LFS_ERR_ISDIR;
   1135a:	mvn.w	r5, #20
   1135e:	ldr	r3, [r4, #48]	; 0x30
   11360:	b.n	1133e <lfs_file_opencfg+0x5e>
        goto cleanup;
    } else if (flags & LFS_O_TRUNC) {
   11362:	ands.w	r7, r7, #1024	; 0x400
   11366:	beq.n	1143c <lfs_file_opencfg+0x15c>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   11368:	ldrh.w	fp, [r4, #4]
        file->flags |= LFS_F_DIRTY;
   1136c:	ldr	r3, [r4, #48]	; 0x30
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
        err = LFS_ERR_ISDIR;
        goto cleanup;
    } else if (flags & LFS_O_TRUNC) {
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   1136e:	mov.w	fp, fp, lsl #10
   11372:	orr.w	fp, fp, #536870912	; 0x20000000
        file->flags |= LFS_F_DIRTY;
   11376:	orr.w	r3, r3, #65536	; 0x10000
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
        err = LFS_ERR_ISDIR;
        goto cleanup;
    } else if (flags & LFS_O_TRUNC) {
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   1137a:	orr.w	fp, fp, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
   1137e:	str	r3, [r4, #48]	; 0x30
        }
        lfs_ctz_fromle32(&file->ctz);
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   11380:	ldr	r5, [r4, #80]	; 0x50
   11382:	ldr	r3, [r5, #8]
   11384:	cmp	r3, #0
   11386:	beq.n	1146e <lfs_file_opencfg+0x18e>
   11388:	movs	r7, #0
   1138a:	mov	r8, r7
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   1138c:	mov	sl, r7
   1138e:	b.n	113de <lfs_file_opencfg+0xfe>
    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   11390:	ldr	r5, [r5, #4]
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   11392:	ldrh	r3, [r4, #4]
   11394:	ldrb.w	ip, [r5, r7]
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   11398:	add.w	lr, r5, r7
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   1139c:	add.w	ip, ip, #768	; 0x300
   113a0:	ldr.w	r5, [lr, #8]
   113a4:	orr.w	r5, r5, r3, lsl #10
   113a8:	orr.w	r3, r5, ip, lsl #20
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   113ac:	ubfx	r5, r3, #0, #10
   113b0:	str	r5, [sp, #8]
   113b2:	ldr.w	r5, [lr, #4]
   113b6:	str	r5, [sp, #4]
   113b8:	str.w	sl, [sp]
   113bc:	bl	ec2c <lfs_dir_getslice>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
            if (res < 0 && res != LFS_ERR_NOENT) {
   113c0:	subs	r5, r0, #0
   113c2:	ldr	r3, [r4, #48]	; 0x30
   113c4:	blt.n	11468 <lfs_file_opencfg+0x188>
                err = res;
                goto cleanup;
            }
        }

        if ((file->flags & 3) != LFS_O_RDONLY) {
   113c6:	and.w	r2, r3, #3
   113ca:	cmp	r2, #1
   113cc:	ldr	r5, [r4, #80]	; 0x50
   113ce:	bne.n	113f0 <lfs_file_opencfg+0x110>
        }
        lfs_ctz_fromle32(&file->ctz);
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   113d0:	ldr	r3, [r5, #8]
   113d2:	add.w	r8, r8, #1
   113d6:	cmp	r3, r8
   113d8:	add.w	r7, r7, #12
   113dc:	bls.n	1146e <lfs_file_opencfg+0x18e>
        if ((file->flags & 3) != LFS_O_WRONLY) {
   113de:	ldr	r3, [r4, #48]	; 0x30
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   113e0:	ldr	r2, [pc, #352]	; (11544 <lfs_file_opencfg+0x264>)
        lfs_ctz_fromle32(&file->ctz);
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
   113e2:	and.w	lr, r3, #3
   113e6:	cmp.w	lr, #2
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   113ea:	mov	r1, r9
   113ec:	mov	r0, r6
        lfs_ctz_fromle32(&file->ctz);
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
        if ((file->flags & 3) != LFS_O_WRONLY) {
   113ee:	bne.n	11390 <lfs_file_opencfg+0xb0>
                goto cleanup;
            }
        }

        if ((file->flags & 3) != LFS_O_RDONLY) {
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   113f0:	ldr	r2, [r5, #4]
   113f2:	ldr	r1, [r6, #116]	; 0x74
   113f4:	add	r2, r7
                err = LFS_ERR_NOSPC;
                goto cleanup;
            }

            file->flags |= LFS_F_DIRTY;
   113f6:	orr.w	r0, r3, #65536	; 0x10000
                goto cleanup;
            }
        }

        if ((file->flags & 3) != LFS_O_RDONLY) {
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   113fa:	ldr	r2, [r2, #8]
   113fc:	cmp	r2, r1
   113fe:	bhi.n	11494 <lfs_file_opencfg+0x1b4>
                err = LFS_ERR_NOSPC;
                goto cleanup;
            }

            file->flags |= LFS_F_DIRTY;
   11400:	str	r0, [r4, #48]	; 0x30
   11402:	b.n	113d0 <lfs_file_opencfg+0xf0>
    file->off = 0;
    file->cache.buffer = NULL;

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
   11404:	adds	r0, r5, #2
   11406:	beq.n	1140c <lfs_file_opencfg+0x12c>
   11408:	ldr	r3, [r4, #48]	; 0x30
   1140a:	b.n	1133e <lfs_file_opencfg+0x5e>
   1140c:	ldrh.w	sl, [r4, #4]
   11410:	movw	r3, #1023	; 0x3ff
   11414:	cmp	sl, r3
   11416:	beq.n	11408 <lfs_file_opencfg+0x128>
        err = tag;
        goto cleanup;
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
   11418:	movs	r3, #1
   1141a:	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
   1141c:	ldr	r3, [r6, #40]	; 0x28
   1141e:	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;

    if (tag == LFS_ERR_NOENT) {
        if (!(flags & LFS_O_CREAT)) {
   11420:	lsls	r1, r7, #23
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
    file->next = (lfs_file_t*)lfs->mlist;
    lfs->mlist = (struct lfs_mlist*)file;
   11422:	str	r4, [r6, #40]	; 0x28

    if (tag == LFS_ERR_NOENT) {
        if (!(flags & LFS_O_CREAT)) {
   11424:	bpl.n	11408 <lfs_file_opencfg+0x128>
            err = LFS_ERR_NOENT;
            goto cleanup;
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
   11426:	ldr	r5, [sp, #20]
   11428:	mov	r0, r5
   1142a:	bl	15880 <strlen>
        if (nlen > lfs->name_max) {
   1142e:	ldr	r3, [r6, #108]	; 0x6c
   11430:	cmp	r0, r3
   11432:	bls.n	1149a <lfs_file_opencfg+0x1ba>
            err = LFS_ERR_NAMETOOLONG;
   11434:	mvn.w	r5, #35	; 0x23
   11438:	ldr	r3, [r4, #48]	; 0x30
   1143a:	b.n	1133e <lfs_file_opencfg+0x5e>
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   1143c:	ldrh	r3, [r4, #4]
   1143e:	str	r7, [sp, #0]
   11440:	lsls	r3, r3, #10
   11442:	movs	r1, #8
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
        file->flags |= LFS_F_DIRTY;
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
   11444:	add.w	r2, r4, #40	; 0x28
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   11448:	orr.w	r3, r3, #536870912	; 0x20000000
   1144c:	orrs	r3, r1
   1144e:	str	r1, [sp, #8]
   11450:	str	r2, [sp, #4]
   11452:	mov	r1, r9
   11454:	ldr	r2, [pc, #240]	; (11548 <lfs_file_opencfg+0x268>)
   11456:	mov	r0, r6
   11458:	bl	ec2c <lfs_dir_getslice>
        file->flags |= LFS_F_DIRTY;
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
        if (tag < 0) {
   1145c:	subs.w	fp, r0, #0
   11460:	bge.n	11380 <lfs_file_opencfg+0xa0>
   11462:	mov	r5, fp
   11464:	ldr	r3, [r4, #48]	; 0x30
   11466:	b.n	1133e <lfs_file_opencfg+0x5e>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
            if (res < 0 && res != LFS_ERR_NOENT) {
   11468:	adds	r2, r5, #2
   1146a:	beq.n	113c6 <lfs_file_opencfg+0xe6>
   1146c:	b.n	1133e <lfs_file_opencfg+0x5e>
            file->flags |= LFS_F_DIRTY;
        }
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
   1146e:	ldr	r0, [r5, #0]
   11470:	cmp	r0, #0
   11472:	beq.n	11530 <lfs_file_opencfg+0x250>
        file->cache.buffer = file->cfg->buffer;
   11474:	str	r0, [r4, #76]	; 0x4c
    rcache->block = LFS_BLOCK_NULL;
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   11476:	ldr	r3, [r6, #104]	; 0x68
   11478:	movs	r1, #255	; 0xff
   1147a:	ldr	r2, [r3, #40]	; 0x28
   1147c:	bl	14e3c <memset>
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   11480:	movw	r3, #513	; 0x201
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
   11484:	mov.w	r2, #4294967295
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   11488:	cmp.w	r3, fp, lsr #20
}

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    pcache->block = LFS_BLOCK_NULL;
   1148c:	str	r2, [r4, #64]	; 0x40
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   1148e:	beq.n	114da <lfs_file_opencfg+0x1fa>
            }
        }
    }

    LFS_TRACE("lfs_file_opencfg -> %d", 0);
    return 0;
   11490:	movs	r0, #0
   11492:	b.n	1134e <lfs_file_opencfg+0x6e>
            }
        }

        if ((file->flags & 3) != LFS_O_RDONLY) {
            if (file->cfg->attrs[i].size > lfs->attr_max) {
                err = LFS_ERR_NOSPC;
   11494:	mvn.w	r5, #27
   11498:	b.n	1133e <lfs_file_opencfg+0x5e>
            err = LFS_ERR_NAMETOOLONG;
            goto cleanup;
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   1149a:	mov.w	sl, sl, lsl #10
   1149e:	orr.w	r3, sl, #1048576	; 0x100000
   114a2:	orr.w	r1, sl, #1073741824	; 0x40000000
   114a6:	orrs	r0, r3
   114a8:	orr.w	r1, r1, #1048576	; 0x100000
   114ac:	str	r5, [sp, #36]	; 0x24
   114ae:	orr.w	r5, sl, #536870912	; 0x20000000
   114b2:	orr.w	r5, r5, #1048576	; 0x100000
   114b6:	str	r1, [sp, #24]
   114b8:	str	r0, [sp, #32]
   114ba:	movs	r3, #3
   114bc:	add	r2, sp, #24
   114be:	mov	r1, r9
   114c0:	mov	r0, r6
   114c2:	str.w	r8, [sp, #28]
   114c6:	str.w	r8, [sp, #44]	; 0x2c
   114ca:	str	r5, [sp, #40]	; 0x28
   114cc:	bl	10af4 <lfs_dir_commit>
                {LFS_MKTAG(LFS_TYPE_CREATE, file->id, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));
        if (err) {
   114d0:	cmp	r0, #0
   114d2:	bne.n	11434 <lfs_file_opencfg+0x154>
            err = LFS_ERR_NAMETOOLONG;
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
   114d4:	ldr.w	fp, [pc, #116]	; 1154c <lfs_file_opencfg+0x26c>
   114d8:	b.n	11380 <lfs_file_opencfg+0xa0>
        file->ctz.head = LFS_BLOCK_INLINE;
        file->ctz.size = lfs_tag_size(tag);
        file->flags |= LFS_F_INLINE;
        file->cache.block = file->ctz.head;
        file->cache.off = 0;
        file->cache.size = lfs->cfg->cache_size;
   114da:	ldr	r1, [r6, #104]	; 0x68

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
        file->ctz.size = lfs_tag_size(tag);
        file->flags |= LFS_F_INLINE;
   114dc:	ldr	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
        file->cache.off = 0;
        file->cache.size = lfs->cfg->cache_size;
   114de:	ldr	r0, [r1, #40]	; 0x28
   114e0:	str	r0, [r4, #72]	; 0x48
    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
   114e2:	mvn.w	r1, #1
static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
}

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
   114e6:	ubfx	r2, fp, #0, #10

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
        file->ctz.size = lfs_tag_size(tag);
        file->flags |= LFS_F_INLINE;
   114ea:	orr.w	r3, r3, #1048576	; 0x100000
        file->cache.block = file->ctz.head;
        file->cache.off = 0;
   114ee:	movs	r5, #0
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
        file->ctz.size = lfs_tag_size(tag);
   114f0:	str	r2, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
   114f2:	str	r3, [r4, #48]	; 0x30
    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
   114f4:	str	r1, [r4, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
        file->flags |= LFS_F_INLINE;
        file->cache.block = file->ctz.head;
   114f6:	str	r1, [r4, #64]	; 0x40
        file->cache.off = 0;
   114f8:	str	r5, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
   114fa:	cmp	r2, #0
   114fc:	beq.n	11490 <lfs_file_opencfg+0x1b0>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   114fe:	movw	r2, #1022	; 0x3fe
   11502:	ldrh	r1, [r4, #4]
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   11504:	str	r5, [sp, #0]

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   11506:	cmp	r0, r2
   11508:	mov	r3, r0
   1150a:	it	cs
   1150c:	movcs	r3, r2
   1150e:	orr.w	r3, r3, r1, lsl #10
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   11512:	ldr	r2, [r4, #76]	; 0x4c
   11514:	str	r2, [sp, #4]
   11516:	ubfx	r1, r3, #0, #10
   1151a:	str	r1, [sp, #8]
   1151c:	orr.w	r3, r3, #536870912	; 0x20000000
   11520:	mov	r1, r9
   11522:	ldr	r2, [pc, #36]	; (11548 <lfs_file_opencfg+0x268>)
   11524:	mov	r0, r6
   11526:	bl	ec2c <lfs_dir_getslice>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
            if (res < 0) {
   1152a:	subs	r5, r0, #0
   1152c:	bge.n	11490 <lfs_file_opencfg+0x1b0>
   1152e:	b.n	11408 <lfs_file_opencfg+0x128>

    // allocate buffer if needed
    if (file->cfg->buffer) {
        file->cache.buffer = file->cfg->buffer;
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
   11530:	ldr	r3, [r6, #104]	; 0x68

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
   11532:	ldr	r0, [r3, #40]	; 0x28
   11534:	bl	146ac <malloc>
   11538:	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
   1153a:	cmp	r0, #0
   1153c:	bne.n	11476 <lfs_file_opencfg+0x196>
            err = LFS_ERR_NOMEM;
   1153e:	mvn.w	r5, #11
   11542:	b.n	11408 <lfs_file_opencfg+0x128>
   11544:	.word	0x7ffffc00
   11548:	.word	0x700ffc00
   1154c:	.word	0x20100000

00011550 <lfs_file_open>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    return err;
}

int lfs_file_open(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
   11550:	push	{r4, lr}
   11552:	sub	sp, #8
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg(lfs, file, path, flags, &defaults);
   11554:	ldr	r4, [pc, #8]	; (11560 <lfs_file_open+0x10>)
   11556:	str	r4, [sp, #0]
   11558:	bl	112e0 <lfs_file_opencfg>
    LFS_TRACE("lfs_file_open -> %d", err);
    return err;
}
   1155c:	add	sp, #8
   1155e:	pop	{r4, pc}
   11560:	.word	0x000197d8

00011564 <lfs_remove>:
    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
    LFS_TRACE("lfs_stat -> %d", err);
    return err;
}

int lfs_remove(lfs_t *lfs, const char *path) {
   11564:	push	{r4, r5, r6, r7, lr}
   11566:	sub	sp, #108	; 0x6c
   11568:	mov	r5, r0
   1156a:	str	r1, [sp, #20]
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
   1156c:	bl	10f10 <lfs_fs_forceconsistency>
    if (err) {
   11570:	mov	r4, r0
   11572:	cbz	r0, 11578 <lfs_remove+0x14>
        }
    }

    LFS_TRACE("lfs_remove -> %d", 0);
    return 0;
}
   11574:	add	sp, #108	; 0x6c
   11576:	pop	{r4, r5, r6, r7, pc}
        LFS_TRACE("lfs_remove -> %d", err);
        return err;
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   11578:	mov	r3, r0
   1157a:	add	r1, sp, #32
   1157c:	add	r2, sp, #20
   1157e:	mov	r0, r5
   11580:	bl	ede8 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   11584:	cmp	r0, #0
   11586:	blt.n	11574 <lfs_remove+0x10>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
   11588:	ubfx	r3, r0, #10, #10
        return err;
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   1158c:	movw	r2, #1023	; 0x3ff
   11590:	cmp	r3, r2
   11592:	beq.n	11682 <lfs_remove+0x11e>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   11594:	lsrs	r0, r0, #20
        LFS_TRACE("lfs_remove -> %"PRId32, (tag < 0) ? tag : LFS_ERR_INVAL);
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
   11596:	ldr	r2, [r5, #40]	; 0x28
   11598:	str	r2, [sp, #64]	; 0x40
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   1159a:	cmp	r0, #2
   1159c:	beq.n	115c0 <lfs_remove+0x5c>
        dir.id = 0;
        lfs->mlist = &dir;
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   1159e:	lsls	r3, r3, #10
   115a0:	orr.w	r6, r3, #1333788672	; 0x4f800000
   115a4:	orr.w	r6, r6, #7340032	; 0x700000
   115a8:	add	r1, sp, #32
   115aa:	movs	r3, #1
   115ac:	add	r2, sp, #24
   115ae:	mov	r0, r5
   115b0:	str	r6, [sp, #24]
   115b2:	str	r4, [sp, #28]
   115b4:	bl	10af4 <lfs_dir_commit>
        lfs->mlist = dir.next;
        LFS_TRACE("lfs_remove -> %d", err);
        return err;
    }

    lfs->mlist = dir.next;
   115b8:	ldr	r3, [sp, #64]	; 0x40
   115ba:	str	r3, [r5, #40]	; 0x28
        }
    }

    LFS_TRACE("lfs_remove -> %d", 0);
    return 0;
}
   115bc:	add	sp, #108	; 0x6c
   115be:	pop	{r4, r5, r6, r7, pc}
    dir.next = lfs->mlist;
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
   115c0:	lsls	r6, r3, #10
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   115c2:	movs	r2, #8
   115c4:	orr.w	r3, r6, #536870912	; 0x20000000
   115c8:	add	r7, sp, #24
   115ca:	orrs	r3, r2
   115cc:	str	r2, [sp, #8]
   115ce:	str	r4, [sp, #0]
   115d0:	str	r7, [sp, #4]
   115d2:	ldr	r2, [pc, #188]	; (11690 <lfs_remove+0x12c>)
   115d4:	add	r1, sp, #32
   115d6:	mov	r0, r5
   115d8:	bl	ec2c <lfs_dir_getslice>
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
        if (res < 0) {
   115dc:	cmp	r0, #0
   115de:	blt.n	11574 <lfs_remove+0x10>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   115e0:	mov.w	r3, #4294967295
   115e4:	str	r4, [sp, #12]
   115e6:	str	r4, [sp, #8]
   115e8:	str	r4, [sp, #4]
   115ea:	add	r1, sp, #72	; 0x48
   115ec:	str	r3, [sp, #0]
   115ee:	mov	r2, r7
   115f0:	mov	r0, r5
   115f2:	bl	e474 <lfs_dir_fetchmatch>
            return (int)res;
        }
        lfs_pair_fromle32(pair);

        err = lfs_dir_fetch(lfs, &dir.m, pair);
        if (err) {
   115f6:	cmp	r0, #0
   115f8:	bne.n	11574 <lfs_remove+0x10>
            LFS_TRACE("lfs_remove -> %d", err);
            return err;
        }

        if (dir.m.count > 0 || dir.m.split) {
   115fa:	ldrh.w	r3, [sp, #92]	; 0x5c
   115fe:	cmp	r3, #0
   11600:	bne.n	11688 <lfs_remove+0x124>
   11602:	ldrb.w	r4, [sp, #95]	; 0x5f
   11606:	cmp	r4, #0
   11608:	bne.n	11688 <lfs_remove+0x124>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   1160a:	ldr	r3, [r5, #48]	; 0x30
        // mark fs as orphaned
        lfs_fs_preporphans(lfs, +1);

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
   1160c:	strb.w	r4, [sp, #70]	; 0x46
        dir.id = 0;
        lfs->mlist = &dir;
   11610:	add	r2, sp, #64	; 0x40
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   11612:	adds	r3, #1

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
        dir.id = 0;
        lfs->mlist = &dir;
   11614:	str	r2, [r5, #40]	; 0x28
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   11616:	ubfx	r2, r3, #0, #10
   1161a:	adds	r2, #0
   1161c:	it	ne
   1161e:	movne	r2, #1
   11620:	bic.w	r3, r3, #2147483648	; 0x80000000
   11624:	orr.w	r3, r3, r2, lsl #31
        dir.id = 0;
        lfs->mlist = &dir;
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   11628:	orr.w	r6, r6, #1333788672	; 0x4f800000
   1162c:	orr.w	r6, r6, #7340032	; 0x700000
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   11630:	str	r3, [r5, #48]	; 0x30
        dir.id = 0;
        lfs->mlist = &dir;
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   11632:	mov	r2, r7
   11634:	movs	r3, #1
   11636:	add	r1, sp, #32
   11638:	mov	r0, r5
   1163a:	str	r6, [sp, #24]
        lfs_fs_preporphans(lfs, +1);

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
        dir.id = 0;
   1163c:	strh.w	r4, [sp, #68]	; 0x44
        lfs->mlist = &dir;
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   11640:	str	r4, [sp, #28]
   11642:	bl	10af4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
   11646:	cmp	r0, #0
   11648:	bne.n	115b8 <lfs_remove+0x54>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   1164a:	ldr	r3, [r5, #48]	; 0x30
        lfs->mlist = dir.next;
        LFS_TRACE("lfs_remove -> %d", err);
        return err;
    }

    lfs->mlist = dir.next;
   1164c:	ldr	r2, [sp, #64]	; 0x40
   1164e:	str	r2, [r5, #40]	; 0x28
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   11650:	subs	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   11652:	ubfx	r2, r3, #0, #10
   11656:	adds	r2, #0
   11658:	it	ne
   1165a:	movne	r2, #1
   1165c:	bic.w	r3, r3, #2147483648	; 0x80000000
   11660:	orr.w	r3, r3, r2, lsl #31
   11664:	str	r3, [r5, #48]	; 0x30
    lfs->mlist = dir.next;
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
        // fix orphan
        lfs_fs_preporphans(lfs, -1);

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
   11666:	add	r2, sp, #32
   11668:	add	r1, sp, #72	; 0x48
   1166a:	mov	r0, r5
   1166c:	bl	e9a8 <lfs_fs_pred>
        if (err) {
   11670:	cmp	r0, #0
   11672:	bne.w	11574 <lfs_remove+0x10>
            LFS_TRACE("lfs_remove -> %d", err);
            return err;
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
   11676:	add	r2, sp, #72	; 0x48
   11678:	add	r1, sp, #32
   1167a:	mov	r0, r5
   1167c:	bl	10ed4 <lfs_dir_drop>
   11680:	b.n	11574 <lfs_remove+0x10>

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
        LFS_TRACE("lfs_remove -> %"PRId32, (tag < 0) ? tag : LFS_ERR_INVAL);
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
   11682:	mvn.w	r0, #21
   11686:	b.n	11574 <lfs_remove+0x10>
            return err;
        }

        if (dir.m.count > 0 || dir.m.split) {
            LFS_TRACE("lfs_remove -> %d", LFS_ERR_NOTEMPTY);
            return LFS_ERR_NOTEMPTY;
   11688:	mvn.w	r0, #38	; 0x26
   1168c:	b.n	11574 <lfs_remove+0x10>
   1168e:	nop
   11690:	.word	0x700ffc00

00011694 <lfs_rename>:

    LFS_TRACE("lfs_remove -> %d", 0);
    return 0;
}

int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
   11694:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11698:	sub	sp, #196	; 0xc4
   1169a:	mov	r5, r0
   1169c:	str	r1, [sp, #28]
   1169e:	str	r2, [sp, #24]
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
   116a0:	bl	10f10 <lfs_fs_forceconsistency>
    if (err) {
   116a4:	cbz	r0, 116ac <lfs_rename+0x18>
        }
    }

    LFS_TRACE("lfs_rename -> %d", 0);
    return 0;
}
   116a6:	add	sp, #196	; 0xc4
   116a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err;
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
   116ac:	mov	r3, r0
   116ae:	add	r1, sp, #48	; 0x30
   116b0:	add	r2, sp, #28
   116b2:	mov	r0, r5
   116b4:	bl	ede8 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   116b8:	subs	r4, r0, #0
   116ba:	blt.w	117dc <lfs_rename+0x148>
static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
    return (int8_t)lfs_tag_chunk(tag);
}

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
    return (tag & 0x000ffc00) >> 10;
   116be:	ubfx	r6, r4, #10, #10
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   116c2:	movw	r8, #1023	; 0x3ff
   116c6:	cmp	r6, r8
   116c8:	beq.w	117d2 <lfs_rename+0x13e>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
   116cc:	add	r1, sp, #80	; 0x50
   116ce:	add.w	r3, sp, #38	; 0x26
   116d2:	add	r2, sp, #24
   116d4:	mov	r0, r5
   116d6:	bl	ede8 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   116da:	subs	r7, r0, #0
   116dc:	blt.w	117ee <lfs_rename+0x15a>
   116e0:	ubfx	r3, r7, #10, #10
   116e4:	cmp	r3, r8
   116e6:	beq.n	117d2 <lfs_rename+0x13e>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   116e8:	ldr.w	r9, [sp, #48]	; 0x30
   116ec:	ldr	r3, [sp, #80]	; 0x50
   116ee:	cmp	r3, r9
   116f0:	beq.n	117e4 <lfs_rename+0x150>
   116f2:	ldr.w	sl, [sp, #52]	; 0x34
   116f6:	ldr	r2, [sp, #84]	; 0x54
   116f8:	cmp	r2, sl
   116fa:	beq.n	117e4 <lfs_rename+0x150>
   116fc:	cmp	r2, r9
   116fe:	beq.w	1192e <lfs_rename+0x29a>
   11702:	subs.w	r8, sl, r3
   11706:	it	ne
   11708:	movne.w	r8, #1
    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
    uint16_t newoldid = lfs_tag_id(oldtag);

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
   1170c:	ldr	r3, [r5, #40]	; 0x28
   1170e:	str	r3, [sp, #112]	; 0x70
    if (prevtag == LFS_ERR_NOENT) {
   11710:	adds	r2, r7, #2
   11712:	beq.w	118da <lfs_rename+0x246>
static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
    return (tag & 0x70000000) >> 20;
}

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
    return (tag & 0x7ff00000) >> 20;
   11716:	lsrs	r4, r4, #20
   11718:	uxth	r2, r4
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
            newoldid += 1;
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   1171a:	ubfx	r3, r7, #20, #11
   1171e:	cmp	r2, r3
   11720:	bne.w	119fe <lfs_rename+0x36a>
        LFS_TRACE("lfs_rename -> %d", LFS_ERR_ISDIR);
        return LFS_ERR_ISDIR;
    } else if (samepair && newid == newoldid) {
   11724:	cmp.w	r8, #0
   11728:	bne.w	1189e <lfs_rename+0x20a>
   1172c:	ldrh.w	r3, [sp, #38]	; 0x26
   11730:	cmp	r3, r6
   11732:	beq.n	117ce <lfs_rename+0x13a>
        // we're renaming to ourselves??
        LFS_TRACE("lfs_rename -> %d", 0);
        return 0;
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   11734:	cmp	r2, #2
   11736:	beq.w	11938 <lfs_rename+0x2a4>
   1173a:	add.w	sl, sp, #152	; 0x98
   1173e:	ldr	r2, [sp, #24]
   11740:	mov	r9, r6
   11742:	mov.w	r8, #0
    if (!samepair) {
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   11746:	lsls	r3, r3, #10
   11748:	orr.w	r0, r3, #1333788672	; 0x4f800000
   1174c:	orr.w	r0, r0, #7340032	; 0x700000
   11750:	orr.w	r1, r3, #1073741824	; 0x40000000
   11754:	orr.w	r1, r1, #1048576	; 0x100000
   11758:	mov.w	fp, #0
   1175c:	str	r0, [sp, #152]	; 0x98
   1175e:	mov	r0, r2
   11760:	str	r3, [sp, #20]
   11762:	str	r2, [sp, #16]
   11764:	str	r1, [sp, #160]	; 0xa0
   11766:	str.w	fp, [sp, #156]	; 0x9c
   1176a:	str.w	fp, [sp, #164]	; 0xa4
   1176e:	bl	15880 <strlen>
   11772:	ldr	r3, [sp, #20]
   11774:	ldr	r2, [sp, #16]
   11776:	str	r2, [sp, #172]	; 0xac
   11778:	orr.w	r1, r9, r3
   1177c:	orrs	r0, r3
   1177e:	orr.w	r1, r1, #268435456	; 0x10000000
   11782:	orr.w	r4, r0, r4, lsl #20
   11786:	orr.w	r1, r1, #1048576	; 0x100000
   1178a:	add	r3, sp, #48	; 0x30
   1178c:	str	r4, [sp, #168]	; 0xa8
   1178e:	str	r1, [sp, #176]	; 0xb0
   11790:	str	r3, [sp, #180]	; 0xb4
   11792:	cmp.w	r8, #0
   11796:	bne.n	1184a <lfs_rename+0x1b6>
   11798:	lsls	r6, r6, #10
   1179a:	orr.w	r6, r6, #1333788672	; 0x4f800000
   1179e:	orr.w	r6, r6, #7340032	; 0x700000
   117a2:	mov	r2, sl
   117a4:	movs	r3, #5
   117a6:	add	r1, sp, #80	; 0x50
   117a8:	mov	r0, r5
   117aa:	str	r6, [sp, #184]	; 0xb8
   117ac:	str.w	r8, [sp, #188]	; 0xbc
   117b0:	bl	10af4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
   117b4:	mov	r4, r0
   117b6:	cmp	r0, #0
   117b8:	bne.w	118ce <lfs_rename+0x23a>
            LFS_TRACE("lfs_rename -> %d", err);
            return err;
        }
    }

    lfs->mlist = prevdir.next;
   117bc:	ldr	r3, [sp, #112]	; 0x70
   117be:	str	r3, [r5, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   117c0:	adds	r3, r7, #2
   117c2:	beq.n	117ce <lfs_rename+0x13a>
   117c4:	ubfx	r7, r7, #20, #11
   117c8:	cmp	r7, #2
   117ca:	beq.w	119ca <lfs_rename+0x336>
        LFS_TRACE("lfs_rename -> %d", LFS_ERR_ISDIR);
        return LFS_ERR_ISDIR;
    } else if (samepair && newid == newoldid) {
        // we're renaming to ourselves??
        LFS_TRACE("lfs_rename -> %d", 0);
        return 0;
   117ce:	movs	r0, #0
   117d0:	b.n	116a6 <lfs_rename+0x12>
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
        LFS_TRACE("lfs_rename -> %"PRId32,
                (oldtag < 0) ? oldtag : LFS_ERR_INVAL);
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
   117d2:	mvn.w	r0, #21
        }
    }

    LFS_TRACE("lfs_rename -> %d", 0);
    return 0;
}
   117d6:	add	sp, #196	; 0xc4
   117d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117dc:	mov	r0, r4
   117de:	add	sp, #196	; 0xc4
   117e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
    uint16_t newoldid = lfs_tag_id(oldtag);

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
   117e4:	ldr	r3, [r5, #40]	; 0x28
   117e6:	str	r3, [sp, #112]	; 0x70
   117e8:	mov.w	r8, #0
   117ec:	b.n	11716 <lfs_rename+0x82>

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   117ee:	adds	r1, r7, #2
   117f0:	bne.n	118d6 <lfs_rename+0x242>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
   117f2:	ldrh.w	fp, [sp, #38]	; 0x26
   117f6:	cmp	fp, r8
   117f8:	beq.n	118d6 <lfs_rename+0x242>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   117fa:	ldr.w	r9, [sp, #48]	; 0x30
   117fe:	ldr	r3, [sp, #80]	; 0x50
   11800:	cmp	r3, r9
   11802:	beq.w	11a0e <lfs_rename+0x37a>
   11806:	ldr.w	sl, [sp, #52]	; 0x34
   1180a:	ldr	r2, [sp, #84]	; 0x54
   1180c:	cmp	r2, sl
   1180e:	bne.w	116fc <lfs_rename+0x68>

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
   11812:	ldr	r2, [sp, #24]
    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
    uint16_t newoldid = lfs_tag_id(oldtag);

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
   11814:	ldr	r3, [r5, #40]	; 0x28
   11816:	str	r3, [sp, #112]	; 0x70
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
   11818:	mov	r0, r2
   1181a:	str	r2, [sp, #16]
   1181c:	bl	15880 <strlen>
        if (nlen > lfs->name_max) {
   11820:	ldr	r3, [r5, #108]	; 0x6c
   11822:	ldr	r2, [sp, #16]
   11824:	cmp	r0, r3
   11826:	bhi.w	11a26 <lfs_rename+0x392>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
   1182a:	cmp	fp, r6
   1182c:	bhi.w	11a04 <lfs_rename+0x370>
            newoldid += 1;
   11830:	adds	r1, r6, #1
   11832:	uxth	r1, r1
    if (!samepair) {
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   11834:	mov.w	r8, #0
   11838:	mov	r9, r6
   1183a:	mov.w	r3, fp, lsl #10
   1183e:	lsrs	r4, r4, #20
   11840:	mov	r6, r1
   11842:	mov	r0, r8
   11844:	add.w	sl, sp, #152	; 0x98
   11848:	b.n	11750 <lfs_rename+0xbc>
   1184a:	mov	r2, sl
   1184c:	movs	r3, #5
   1184e:	add	r1, sp, #80	; 0x50
   11850:	mov	r0, r5
   11852:	str.w	fp, [sp, #184]	; 0xb8
   11856:	str.w	fp, [sp, #188]	; 0xbc
   1185a:	bl	10af4 <lfs_dir_commit>
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
   1185e:	mov	r4, r0
   11860:	cmp	r0, #0
   11862:	bne.n	118ce <lfs_rename+0x23a>
   11864:	ldr	r3, [r5, #48]	; 0x30
        return err;
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   11866:	lsrs	r2, r3, #20
   11868:	tst.w	r2, #1792	; 0x700
   1186c:	beq.n	117bc <lfs_rename+0x128>
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   1186e:	ldr	r2, [pc, #452]	; (11a34 <lfs_rename+0x3a0>)
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   11870:	str	r4, [r5, #52]	; 0x34
    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   11872:	mov.w	r0, r9, lsl #10
   11876:	orr.w	r0, r0, #1333788672	; 0x4f800000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   1187a:	ands	r2, r3
    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   1187c:	orr.w	r0, r0, #7340032	; 0x700000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   11880:	str	r2, [r5, #48]	; 0x30
    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   11882:	str	r0, [sp, #40]	; 0x28
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   11884:	str	r4, [r5, #56]	; 0x38
    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   11886:	add	r1, sp, #48	; 0x30
   11888:	movs	r3, #1
   1188a:	add	r2, sp, #40	; 0x28
   1188c:	mov	r0, r5
   1188e:	str	r4, [sp, #44]	; 0x2c
   11890:	bl	10af4 <lfs_dir_commit>
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
   11894:	cmp	r0, #0
   11896:	beq.n	117bc <lfs_rename+0x128>
            lfs->mlist = prevdir.next;
   11898:	ldr	r3, [sp, #112]	; 0x70
   1189a:	str	r3, [r5, #40]	; 0x28
            LFS_TRACE("lfs_rename -> %d", err);
            return err;
   1189c:	b.n	116a6 <lfs_rename+0x12>
        return LFS_ERR_ISDIR;
    } else if (samepair && newid == newoldid) {
        // we're renaming to ourselves??
        LFS_TRACE("lfs_rename -> %d", 0);
        return 0;
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   1189e:	cmp	r2, #2
   118a0:	beq.n	11934 <lfs_rename+0x2a0>
   118a2:	ldrh.w	fp, [sp, #38]	; 0x26
   118a6:	add.w	sl, sp, #152	; 0x98
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   118aa:	ldr	r2, [r5, #48]	; 0x30
   118ac:	ldr	r1, [pc, #388]	; (11a34 <lfs_rename+0x3a0>)
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   118ae:	str.w	r9, [r5, #52]	; 0x34
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   118b2:	lsls	r3, r6, #10
   118b4:	orr.w	r3, r3, #1333788672	; 0x4f800000
   118b8:	ands	r1, r2
   118ba:	orr.w	r3, r3, #7340032	; 0x700000
   118be:	orrs	r3, r1
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   118c0:	ldr	r2, [sp, #52]	; 0x34
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   118c2:	str	r3, [r5, #48]	; 0x30
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   118c4:	str	r2, [r5, #56]	; 0x38
   118c6:	mov	r3, fp
   118c8:	ldr	r2, [sp, #24]
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
   118ca:	mov	r9, r6
   118cc:	b.n	11746 <lfs_rename+0xb2>
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
        lfs->mlist = prevdir.next;
   118ce:	ldr	r3, [sp, #112]	; 0x70
   118d0:	str	r3, [r5, #40]	; 0x28
        LFS_TRACE("lfs_rename -> %d", err);
        return err;
   118d2:	mov	r0, r4
   118d4:	b.n	116a6 <lfs_rename+0x12>
   118d6:	mov	r0, r7
   118d8:	b.n	116a6 <lfs_rename+0x12>

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
   118da:	ldr	r2, [sp, #24]
   118dc:	str	r2, [sp, #16]
   118de:	mov	r0, r2
   118e0:	bl	15880 <strlen>
        if (nlen > lfs->name_max) {
   118e4:	ldr	r3, [r5, #108]	; 0x6c
   118e6:	cmp	r0, r3
   118e8:	bhi.w	11a26 <lfs_rename+0x392>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
   118ec:	ldr	r2, [sp, #16]
   118ee:	cmp.w	r8, #0
   118f2:	beq.w	11a08 <lfs_rename+0x374>
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   118f6:	ldr	r3, [r5, #48]	; 0x30
   118f8:	ldr.w	lr, [pc, #312]	; 11a34 <lfs_rename+0x3a0>
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   118fc:	str.w	r9, [r5, #52]	; 0x34
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   11900:	lsls	r1, r6, #10
   11902:	orr.w	r1, r1, #1333788672	; 0x4f800000
   11906:	and.w	lr, r3, lr
   1190a:	orr.w	r1, r1, #7340032	; 0x700000
   1190e:	ldrh.w	r3, [sp, #38]	; 0x26
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   11912:	str.w	sl, [r5, #56]	; 0x38
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   11916:	orr.w	r1, lr, r1
   1191a:	lsrs	r4, r4, #20
   1191c:	str	r1, [r5, #48]	; 0x30
   1191e:	lsls	r3, r3, #10
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
   11920:	mov	r9, r6
    if (!samepair) {
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   11922:	mov.w	r8, #1
   11926:	movs	r0, #0
   11928:	add.w	sl, sp, #152	; 0x98
   1192c:	b.n	11750 <lfs_rename+0xbc>
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   1192e:	mov.w	r8, #0
   11932:	b.n	1170c <lfs_rename+0x78>
   11934:	ldrh.w	r3, [sp, #38]	; 0x26
    return LFS_ERR_NOENT;
}

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
    return lfs_dir_getslice(lfs, dir,
   11938:	lsls	r3, r3, #10
   1193a:	movs	r2, #8
   1193c:	orr.w	r3, r3, #536870912	; 0x20000000
   11940:	add.w	sl, sp, #152	; 0x98
   11944:	mov.w	r9, #0
   11948:	orrs	r3, r2
   1194a:	str	r2, [sp, #8]
   1194c:	stmia.w	sp, {r9, sl}
   11950:	ldr	r2, [pc, #228]	; (11a38 <lfs_rename+0x3a4>)
   11952:	add	r1, sp, #80	; 0x50
   11954:	mov	r0, r5
   11956:	bl	ec2c <lfs_dir_getslice>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
        if (res < 0) {
   1195a:	cmp	r0, #0
   1195c:	blt.w	116a6 <lfs_rename+0x12>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   11960:	mov.w	r3, #4294967295
   11964:	str.w	r9, [sp, #12]
   11968:	str.w	r9, [sp, #8]
   1196c:	stmia.w	sp, {r3, r9}
   11970:	mov	r2, sl
   11972:	add	r1, sp, #120	; 0x78
   11974:	mov	r0, r5
   11976:	bl	e474 <lfs_dir_fetchmatch>
        }
        lfs_pair_fromle32(prevpair);

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
        if (err) {
   1197a:	cmp	r0, #0
   1197c:	bne.w	116a6 <lfs_rename+0x12>
            LFS_TRACE("lfs_rename -> %d", err);
            return err;
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
   11980:	ldrh.w	r3, [sp, #140]	; 0x8c
   11984:	cmp	r3, #0
   11986:	bne.n	11a2c <lfs_rename+0x398>
   11988:	ldrb.w	r1, [sp, #143]	; 0x8f
   1198c:	cmp	r1, #0
   1198e:	bne.n	11a2c <lfs_rename+0x398>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   11990:	ldr	r3, [r5, #48]	; 0x30
        // mark fs as orphaned
        lfs_fs_preporphans(lfs, +1);

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
   11992:	strb.w	r1, [sp, #118]	; 0x76
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   11996:	adds	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   11998:	ubfx	r2, r3, #0, #10
   1199c:	subs.w	r2, r2, r9
   119a0:	bic.w	r3, r3, #2147483648	; 0x80000000
   119a4:	it	ne
   119a6:	movne	r2, #1
   119a8:	orr.w	r2, r3, r2, lsl #31
   119ac:	ldrh.w	r3, [sp, #38]	; 0x26
        lfs_fs_preporphans(lfs, +1);

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
        prevdir.id = 0;
   119b0:	strh.w	r1, [sp, #116]	; 0x74
        lfs->mlist = &prevdir;
   119b4:	add	r1, sp, #112	; 0x70
   119b6:	str	r1, [r5, #40]	; 0x28
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   119b8:	str	r2, [r5, #48]	; 0x30
   119ba:	mov	fp, r3
        prevdir.type = 0;
        prevdir.id = 0;
        lfs->mlist = &prevdir;
    }

    if (!samepair) {
   119bc:	cmp.w	r8, #0
   119c0:	beq.w	1173e <lfs_rename+0xaa>
   119c4:	ldr.w	r9, [sp, #48]	; 0x30
   119c8:	b.n	118aa <lfs_rename+0x216>
    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
    lfs->gstate.tag += orphans;
   119ca:	ldr	r3, [r5, #48]	; 0x30
   119cc:	subs	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   119ce:	ubfx	r2, r3, #0, #10
   119d2:	adds	r2, #0
   119d4:	it	ne
   119d6:	movne	r2, #1
   119d8:	bic.w	r3, r3, #2147483648	; 0x80000000
   119dc:	orr.w	r3, r3, r2, lsl #31
   119e0:	str	r3, [r5, #48]	; 0x30
    lfs->mlist = prevdir.next;
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
        // fix orphan
        lfs_fs_preporphans(lfs, -1);

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
   119e2:	add	r1, sp, #120	; 0x78
   119e4:	add	r2, sp, #80	; 0x50
   119e6:	mov	r0, r5
   119e8:	bl	e9a8 <lfs_fs_pred>
        if (err) {
   119ec:	cmp	r0, #0
   119ee:	bne.w	116a6 <lfs_rename+0x12>
            LFS_TRACE("lfs_rename -> %d", err);
            return err;
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
   119f2:	add	r2, sp, #120	; 0x78
   119f4:	add	r1, sp, #80	; 0x50
   119f6:	mov	r0, r5
   119f8:	bl	10ed4 <lfs_dir_drop>
   119fc:	b.n	116a6 <lfs_rename+0x12>
        if (samepair && newid <= newoldid) {
            newoldid += 1;
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
        LFS_TRACE("lfs_rename -> %d", LFS_ERR_ISDIR);
        return LFS_ERR_ISDIR;
   119fe:	mvn.w	r0, #20
   11a02:	b.n	116a6 <lfs_rename+0x12>
   11a04:	mov	r1, r6
   11a06:	b.n	11834 <lfs_rename+0x1a0>
   11a08:	ldrh.w	fp, [sp, #38]	; 0x26
   11a0c:	b.n	1182a <lfs_rename+0x196>

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
   11a0e:	ldr	r2, [sp, #24]
    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
    uint16_t newoldid = lfs_tag_id(oldtag);

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
   11a10:	ldr	r3, [r5, #40]	; 0x28
   11a12:	str	r3, [sp, #112]	; 0x70
    if (prevtag == LFS_ERR_NOENT) {
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
   11a14:	mov	r0, r2
   11a16:	str	r2, [sp, #16]
   11a18:	bl	15880 <strlen>
        if (nlen > lfs->name_max) {
   11a1c:	ldr	r3, [r5, #108]	; 0x6c
   11a1e:	ldr	r2, [sp, #16]
   11a20:	cmp	r3, r0
   11a22:	bcs.w	1182a <lfs_rename+0x196>
            LFS_TRACE("lfs_rename -> %d", LFS_ERR_NAMETOOLONG);
            return LFS_ERR_NAMETOOLONG;
   11a26:	mvn.w	r0, #35	; 0x23
   11a2a:	b.n	116a6 <lfs_rename+0x12>
            return err;
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
            LFS_TRACE("lfs_rename -> %d", LFS_ERR_NOTEMPTY);
            return LFS_ERR_NOTEMPTY;
   11a2c:	mvn.w	r0, #38	; 0x26
   11a30:	b.n	116a6 <lfs_rename+0x12>
   11a32:	nop
   11a34:	.word	0x800003ff
   11a38:	.word	0x700ffc00

00011a3c <lfs_format>:
    }

    return 0;
}

int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
   11a3c:	push	{r4, r5, r6, r7, lr}
   11a3e:	sub	sp, #108	; 0x6c
   11a40:	mov	r5, r0
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);
    int err = 0;
    {
        err = lfs_init(lfs, cfg);
   11a42:	bl	e204 <lfs_init>
        if (err) {
   11a46:	mov	r4, r0
   11a48:	cbz	r0, 11a50 <lfs_format+0x14>
    }

cleanup:
    lfs_deinit(lfs);
    LFS_TRACE("lfs_format -> %d", err);
    return err;
   11a4a:	mov	r0, r4
}
   11a4c:	add	sp, #108	; 0x6c
   11a4e:	pop	{r4, r5, r6, r7, pc}
            LFS_TRACE("lfs_format -> %d", err);
            return err;
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
   11a50:	ldr	r3, [r5, #104]	; 0x68
   11a52:	ldr	r0, [r5, #100]	; 0x64
   11a54:	ldr	r2, [r3, #44]	; 0x2c
   11a56:	mov	r1, r4
   11a58:	bl	14e3c <memset>
        lfs->free.off = 0;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   11a5c:	ldr	r3, [r5, #104]	; 0x68
            return err;
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
        lfs->free.off = 0;
   11a5e:	str	r4, [r5, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   11a60:	ldr	r2, [r3, #44]	; 0x2c
   11a62:	ldr	r3, [r3, #32]

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   11a64:	str	r3, [r5, #96]	; 0x60
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
        lfs->free.off = 0;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   11a66:	lsls	r2, r2, #3
   11a68:	cmp	r3, r2
   11a6a:	it	cs
   11a6c:	movcs	r3, r2
                lfs->cfg->block_count);
        lfs->free.i = 0;
   11a6e:	str	r4, [r5, #92]	; 0x5c
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
        lfs->free.off = 0;
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   11a70:	str	r3, [r5, #88]	; 0x58
        lfs->free.i = 0;
        lfs_alloc_ack(lfs);

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
   11a72:	add	r1, sp, #72	; 0x48
   11a74:	mov	r0, r5
   11a76:	bl	fd24 <lfs_dir_alloc>
        if (err) {
   11a7a:	mov	r4, r0
   11a7c:	cbz	r0, 11a8a <lfs_format+0x4e>
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
   11a7e:	mov	r0, r5
   11a80:	bl	e1d0 <lfs_deinit>
    LFS_TRACE("lfs_format -> %d", err);
    return err;
   11a84:	mov	r0, r4
}
   11a86:	add	sp, #108	; 0x6c
   11a88:	pop	{r4, r5, r6, r7, pc}
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
   11a8a:	ldr	r3, [r5, #104]	; 0x68
        if (err) {
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
   11a8c:	ldr	r6, [r5, #108]	; 0x6c
   11a8e:	ldr	r0, [r3, #28]
   11a90:	ldr	r1, [r3, #32]
   11a92:	ldr	r2, [r5, #112]	; 0x70
   11a94:	ldr	r3, [r5, #116]	; 0x74
            .file_max    = lfs->file_max,
            .attr_max    = lfs->attr_max,
        };

        lfs_superblock_tole32(&superblock);
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   11a96:	str	r4, [sp, #52]	; 0x34
        if (err) {
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
   11a98:	str	r0, [sp, #28]
   11a9a:	mov.w	r4, #131072	; 0x20000
   11a9e:	str	r1, [sp, #32]
            .file_max    = lfs->file_max,
            .attr_max    = lfs->attr_max,
        };

        lfs_superblock_tole32(&superblock);
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   11aa0:	ldr	r0, [pc, #96]	; (11b04 <lfs_format+0xc8>)
   11aa2:	ldr	r1, [pc, #100]	; (11b08 <lfs_format+0xcc>)
        if (err) {
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
   11aa4:	str	r4, [sp, #24]
   11aa6:	str	r6, [sp, #36]	; 0x24
   11aa8:	str	r2, [sp, #40]	; 0x28
            .file_max    = lfs->file_max,
            .attr_max    = lfs->attr_max,
        };

        lfs_superblock_tole32(&superblock);
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   11aaa:	add	r4, sp, #24
        if (err) {
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
   11aac:	str	r3, [sp, #44]	; 0x2c
            .file_max    = lfs->file_max,
            .attr_max    = lfs->attr_max,
        };

        lfs_superblock_tole32(&superblock);
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   11aae:	str	r1, [sp, #56]	; 0x38
   11ab0:	str	r0, [sp, #60]	; 0x3c
   11ab2:	ldr	r7, [pc, #88]	; (11b0c <lfs_format+0xd0>)
   11ab4:	ldr	r6, [pc, #88]	; (11b10 <lfs_format+0xd4>)
   11ab6:	str	r4, [sp, #68]	; 0x44
   11ab8:	movs	r3, #3
   11aba:	add	r2, sp, #48	; 0x30
   11abc:	add	r1, sp, #72	; 0x48
   11abe:	mov	r0, r5
   11ac0:	str	r7, [sp, #48]	; 0x30
   11ac2:	str	r6, [sp, #64]	; 0x40
   11ac4:	bl	10af4 <lfs_dir_commit>
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
   11ac8:	mov	r4, r0
   11aca:	cmp	r0, #0
   11acc:	bne.n	11a7e <lfs_format+0x42>

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   11ace:	mov.w	r3, #4294967295
   11ad2:	str	r0, [sp, #12]
   11ad4:	str	r0, [sp, #8]
   11ad6:	stmia.w	sp, {r3, r4}
        if (err) {
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
   11ada:	movs	r6, #1

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   11adc:	add	r2, sp, #16
   11ade:	add	r1, sp, #72	; 0x48
   11ae0:	mov	r0, r5
        if (err) {
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
   11ae2:	str	r4, [sp, #16]
   11ae4:	str	r6, [sp, #20]

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   11ae6:	bl	e474 <lfs_dir_fetchmatch>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
        if (err) {
   11aea:	mov	r4, r0
   11aec:	cmp	r0, #0
   11aee:	bne.n	11a7e <lfs_format+0x42>
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   11af0:	mov	r3, r0
   11af2:	mov	r2, r0
   11af4:	add	r1, sp, #72	; 0x48
   11af6:	mov	r0, r5
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
   11af8:	strb.w	r4, [sp, #94]	; 0x5e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   11afc:	bl	10af4 <lfs_dir_commit>
   11b00:	mov	r4, r0
   11b02:	b.n	11a7e <lfs_format+0x42>
   11b04:	.word	0x000197cc
   11b08:	.word	0x0ff00008
   11b0c:	.word	0x40100000
   11b10:	.word	0x20100018

00011b14 <lfs_dir_split>:
    return 0;
}

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   11b14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   11b18:	ldr	r5, [r0, #104]	; 0x68
    return 0;
}

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   11b1a:	sub	sp, #52	; 0x34

    return 0;
}

static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
   11b1c:	ldr	r5, [r5, #32]
   11b1e:	str	r5, [r0, #96]	; 0x60
    return 0;
}

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   11b20:	mov	r5, r1
    // create tail directory
    lfs_alloc_ack(lfs);
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
   11b22:	add	r1, sp, #16
    return 0;
}

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   11b24:	mov	r4, r0
   11b26:	mov	r7, r2
   11b28:	mov	r8, r3
   11b2a:	ldrh.w	r6, [sp, #84]	; 0x54
   11b2e:	ldrh.w	r9, [sp, #88]	; 0x58
    // create tail directory
    lfs_alloc_ack(lfs);
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
   11b32:	bl	fd24 <lfs_dir_alloc>
    if (err) {
   11b36:	cbz	r0, 11b3e <lfs_dir_split+0x2a>
        lfs->root[0] = tail.pair[0];
        lfs->root[1] = tail.pair[1];
    }

    return 0;
}
   11b38:	add	sp, #52	; 0x34
   11b3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

    tail.split = dir->split;
    tail.tail[0] = dir->tail[0];
    tail.tail[1] = dir->tail[1];

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   11b3e:	ldr	r3, [sp, #80]	; 0x50
   11b40:	str	r3, [sp, #0]
   11b42:	str.w	r9, [sp, #8]
   11b46:	str	r6, [sp, #4]
    if (err) {
        return err;
    }

    tail.split = dir->split;
    tail.tail[0] = dir->tail[0];
   11b48:	ldr	r0, [r5, #24]
   11b4a:	str	r0, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   11b4c:	mov	r2, r7
    int err = lfs_dir_alloc(lfs, &tail);
    if (err) {
        return err;
    }

    tail.split = dir->split;
   11b4e:	ldrb	r7, [r5, #23]
   11b50:	strb.w	r7, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
    tail.tail[1] = dir->tail[1];

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   11b54:	mov	r3, r8
        return err;
    }

    tail.split = dir->split;
    tail.tail[0] = dir->tail[0];
    tail.tail[1] = dir->tail[1];
   11b56:	ldr	r7, [r5, #28]
   11b58:	str	r7, [sp, #44]	; 0x2c

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   11b5a:	add	r1, sp, #16
   11b5c:	mov	r0, r4
   11b5e:	bl	1058c <lfs_dir_compact>
    if (err) {
   11b62:	cmp	r0, #0
   11b64:	bne.n	11b38 <lfs_dir_split+0x24>
        return err;
    }

    dir->tail[0] = tail.pair[0];
   11b66:	ldr	r2, [sp, #16]
    dir->tail[1] = tail.pair[1];
   11b68:	ldr	r1, [sp, #20]
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
    if (err) {
        return err;
    }

    dir->tail[0] = tail.pair[0];
   11b6a:	str	r2, [r5, #24]
    dir->tail[1] = tail.pair[1];
   11b6c:	str	r1, [r5, #28]
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   11b6e:	ldr	r7, [r4, #32]
   11b70:	ldr	r3, [r5, #0]
        return err;
    }

    dir->tail[0] = tail.pair[0];
    dir->tail[1] = tail.pair[1];
    dir->split = true;
   11b72:	mov.w	lr, #1
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   11b76:	cmp	r3, r7
        return err;
    }

    dir->tail[0] = tail.pair[0];
    dir->tail[1] = tail.pair[1];
    dir->split = true;
   11b78:	strb.w	lr, [r5, #23]
}

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   11b7c:	beq.n	11b90 <lfs_dir_split+0x7c>
   11b7e:	ldr.w	lr, [r5, #4]
   11b82:	ldr	r5, [r4, #36]	; 0x24
   11b84:	cmp	lr, r5
   11b86:	beq.n	11b90 <lfs_dir_split+0x7c>
   11b88:	cmp	r3, r5
   11b8a:	beq.n	11b90 <lfs_dir_split+0x7c>
   11b8c:	cmp	r7, lr
   11b8e:	bne.n	11b38 <lfs_dir_split+0x24>
    dir->tail[0] = tail.pair[0];
    dir->tail[1] = tail.pair[1];
    dir->split = true;

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   11b90:	cbnz	r6, 11b9a <lfs_dir_split+0x86>
        lfs->root[0] = tail.pair[0];
   11b92:	str	r2, [r4, #32]
        lfs->root[1] = tail.pair[1];
   11b94:	str	r1, [r4, #36]	; 0x24
    }

    return 0;
   11b96:	mov	r0, r6
   11b98:	b.n	11b38 <lfs_dir_split+0x24>
   11b9a:	movs	r0, #0
   11b9c:	b.n	11b38 <lfs_dir_split+0x24>
   11b9e:	nop

00011ba0 <lfs_fs_size>:
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
   11ba0:	push	{lr}
   11ba2:	sub	sp, #12
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
   11ba4:	add	r2, sp, #8
   11ba6:	movs	r3, #0
   11ba8:	str.w	r3, [r2, #-4]!
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
   11bac:	ldr	r1, [pc, #12]	; (11bbc <lfs_fs_size+0x1c>)
   11bae:	bl	faac <lfs_fs_traverseraw>
    if (err) {
   11bb2:	cbnz	r0, 11bb6 <lfs_fs_size+0x16>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
   11bb4:	ldr	r0, [sp, #4]
}
   11bb6:	add	sp, #12
   11bb8:	ldr.w	pc, [sp], #4
   11bbc:	.word	0x0000e1c5

00011bc0 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
   11bc0:	cbz	r2, 11bf2 <lfs_crc+0x32>
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
   11bc2:	push	{r4, r5}
   11bc4:	ldr	r5, [pc, #44]	; (11bf4 <lfs_crc+0x34>)
   11bc6:	add	r2, r1
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   11bc8:	ldrb.w	r3, [r1], #1
   11bcc:	eor.w	r4, r3, r0
   11bd0:	and.w	r4, r4, #15
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
   11bd4:	cmp	r2, r1
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   11bd6:	ldr.w	r4, [r5, r4, lsl #2]
   11bda:	eor.w	r0, r4, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
   11bde:	eor.w	r3, r0, r3, lsr #4
   11be2:	and.w	r3, r3, #15
   11be6:	ldr.w	r3, [r5, r3, lsl #2]
   11bea:	eor.w	r0, r3, r0, lsr #4
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
   11bee:	bne.n	11bc8 <lfs_crc+0x8>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    }

    return crc;
}
   11bf0:	pop	{r4, r5}
   11bf2:	bx	lr
   11bf4:	.word	0x000197e4

00011bf8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   11bf8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   11bfa:	orr.w	r3, r1, r0
	ands	r3, r3, #3
   11bfe:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   11c02:	bne.n	11ce0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   11c04:	subs	r2, #64	; 0x40
	blo	.Lmid_block
   11c06:	bcc.n	11c8c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   11c08:	ldr.w	r3, [r1], #4
   11c0c:	str.w	r3, [r0], #4
   11c10:	ldr.w	r3, [r1], #4
   11c14:	str.w	r3, [r0], #4
   11c18:	ldr.w	r3, [r1], #4
   11c1c:	str.w	r3, [r0], #4
   11c20:	ldr.w	r3, [r1], #4
   11c24:	str.w	r3, [r0], #4
   11c28:	ldr.w	r3, [r1], #4
   11c2c:	str.w	r3, [r0], #4
   11c30:	ldr.w	r3, [r1], #4
   11c34:	str.w	r3, [r0], #4
   11c38:	ldr.w	r3, [r1], #4
   11c3c:	str.w	r3, [r0], #4
   11c40:	ldr.w	r3, [r1], #4
   11c44:	str.w	r3, [r0], #4
   11c48:	ldr.w	r3, [r1], #4
   11c4c:	str.w	r3, [r0], #4
   11c50:	ldr.w	r3, [r1], #4
   11c54:	str.w	r3, [r0], #4
   11c58:	ldr.w	r3, [r1], #4
   11c5c:	str.w	r3, [r0], #4
   11c60:	ldr.w	r3, [r1], #4
   11c64:	str.w	r3, [r0], #4
   11c68:	ldr.w	r3, [r1], #4
   11c6c:	str.w	r3, [r0], #4
   11c70:	ldr.w	r3, [r1], #4
   11c74:	str.w	r3, [r0], #4
   11c78:	ldr.w	r3, [r1], #4
   11c7c:	str.w	r3, [r0], #4
   11c80:	ldr.w	r3, [r1], #4
   11c84:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   11c88:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   11c8a:	bcs.n	11c08 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   11c8c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   11c8e:	bcc.n	11cb4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   11c90:	ldr.w	r3, [r1], #4
   11c94:	str.w	r3, [r0], #4
   11c98:	ldr.w	r3, [r1], #4
   11c9c:	str.w	r3, [r0], #4
   11ca0:	ldr.w	r3, [r1], #4
   11ca4:	str.w	r3, [r0], #4
   11ca8:	ldr.w	r3, [r1], #4
   11cac:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   11cb0:	subs	r2, #16
	bhs	.Lmid_block_loop
   11cb2:	bcs.n	11c90 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   11cb4:	adds	r2, #12
	blo	.Lcopy_less_than_4
   11cb6:	bcc.n	11cc4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   11cb8:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   11cbc:	str.w	r3, [r0], #4
	subs	r2, #4
   11cc0:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   11cc2:	bcs.n	11cb8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   11cc4:	adds	r2, #4
	beq	.Ldone
   11cc6:	beq.n	11cda <memcpy+0xe2>

	lsls	r2, r2, #31
   11cc8:	lsls	r2, r2, #31
	itt ne
   11cca:	itt	ne
	ldrbne  r3, [r1], #1
   11ccc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   11cd0:	strbne.w	r3, [r0], #1

	bcc	.Ldone
   11cd4:	bcc.n	11cda <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   11cd6:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   11cd8:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   11cda:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   11cdc:	bx	lr
   11cde:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   11ce0:	cmp	r2, #8
	blo	.Lbyte_copy
   11ce2:	bcc.n	11d0c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   11ce4:	lsls	r3, r1, #30
	beq	.Ldst_aligned
   11ce6:	beq.n	11c04 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   11ce8:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   11cec:	beq.n	11c04 <memcpy+0xc>

	rsb	r3, #4
   11cee:	rsb	r3, r3, #4
	subs	r2, r3
   11cf2:	subs	r2, r2, r3

	lsls    r3, r3, #31
   11cf4:	lsls	r3, r3, #31
	itt ne
   11cf6:	itt	ne
	ldrbne  r3, [r1], #1
   11cf8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   11cfc:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   11d00:	bcc.n	11c04 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   11d02:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   11d06:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   11d0a:	b.n	11c04 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   11d0c:	subs	r2, #4
	blo	.Lcopy_less_than_4
   11d0e:	bcc.n	11cc4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   11d10:	subs	r2, #1
	ldrb    r3, [r1], #1
   11d12:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   11d16:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   11d1a:	bcs.n	11d10 <memcpy+0x118>

	ldrb	r3, [r1]
   11d1c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   11d1e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   11d20:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   11d22:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   11d24:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   11d26:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   11d28:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   11d2a:	bx	lr

00011d2c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
   11d2c:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
   11d2e:	ldr	r5, [pc, #60]	; (11d6c <usb_serial_getchar+0x40>)
   11d30:	ldr	r0, [r5, #0]
   11d32:	cbz	r0, 11d54 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
   11d34:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
   11d36:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
   11d38:	adds	r1, r0, r3
   11d3a:	adds	r3, #1
	if (i >= rx_packet->len) {
   11d3c:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
   11d3e:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
   11d40:	bcs.n	11d48 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
   11d42:	strh	r3, [r0, #2]
	}
	return c;
   11d44:	mov	r0, r4
}
   11d46:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
   11d48:	bl	12848 <usb_free>
		rx_packet = NULL;
   11d4c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
   11d4e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
   11d50:	str	r3, [r5, #0]
   11d52:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
   11d54:	ldr	r3, [pc, #24]	; (11d70 <usb_serial_getchar+0x44>)
   11d56:	ldrb	r3, [r3, #0]
   11d58:	cbz	r3, 11d66 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
   11d5a:	movs	r0, #2
   11d5c:	bl	12894 <usb_rx>
   11d60:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
   11d62:	cmp	r0, #0
   11d64:	bne.n	11d34 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
   11d66:	mov.w	r0, #4294967295
   11d6a:	pop	{r3, r4, r5, pc}
   11d6c:	.word	0x1fff2b28
   11d70:	.word	0x1fff2c34

00011d74 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
   11d74:	push	{r4, lr}
	if (!rx_packet) {
   11d76:	ldr	r4, [pc, #36]	; (11d9c <usb_serial_peekchar+0x28>)
   11d78:	ldr	r0, [r4, #0]
   11d7a:	cbz	r0, 11d84 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
   11d7c:	ldrh	r3, [r0, #2]
   11d7e:	add	r0, r3
   11d80:	ldrb	r0, [r0, #8]
}
   11d82:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
   11d84:	ldr	r3, [pc, #24]	; (11da0 <usb_serial_peekchar+0x2c>)
   11d86:	ldrb	r3, [r3, #0]
   11d88:	cbz	r3, 11d96 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
   11d8a:	movs	r0, #2
   11d8c:	bl	12894 <usb_rx>
   11d90:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
   11d92:	cmp	r0, #0
   11d94:	bne.n	11d7c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
   11d96:	mov.w	r0, #4294967295
   11d9a:	pop	{r4, pc}
   11d9c:	.word	0x1fff2b28
   11da0:	.word	0x1fff2c34

00011da4 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
   11da4:	ldr	r3, [pc, #16]	; (11db8 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
   11da6:	ldr	r2, [pc, #20]	; (11dbc <usb_serial_available+0x18>)
   11da8:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
   11daa:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
   11dac:	cbz	r3, 11db6 <usb_serial_available+0x12>
   11dae:	ldrh	r2, [r3, #0]
   11db0:	ldrh	r3, [r3, #2]
   11db2:	subs	r3, r2, r3
   11db4:	add	r0, r3
	return count;
}
   11db6:	bx	lr
   11db8:	.word	0x1fff2b28
   11dbc:	.word	0x1fff2cb0

00011dc0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
   11dc0:	ldr	r3, [pc, #44]	; (11df0 <usb_serial_flush_input+0x30>)
   11dc2:	ldrb	r3, [r3, #0]
   11dc4:	cbz	r3, 11dee <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
   11dc6:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
   11dc8:	ldr	r4, [pc, #40]	; (11df4 <usb_serial_flush_input+0x34>)
   11dca:	ldr	r0, [r4, #0]
   11dcc:	cbz	r0, 11de2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
   11dce:	bl	12848 <usb_free>
		rx_packet = NULL;
   11dd2:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
   11dd4:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
   11dd6:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
   11dd8:	bl	12894 <usb_rx>
		if (!rx) break;
   11ddc:	cbz	r0, 11dec <usb_serial_flush_input+0x2c>
		usb_free(rx);
   11dde:	bl	12848 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
   11de2:	movs	r0, #2
   11de4:	bl	12894 <usb_rx>
		if (!rx) break;
   11de8:	cmp	r0, #0
   11dea:	bne.n	11dde <usb_serial_flush_input+0x1e>
   11dec:	pop	{r4, pc}
   11dee:	bx	lr
   11df0:	.word	0x1fff2c34
   11df4:	.word	0x1fff2b28

00011df8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
   11df8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
   11dfc:	ldr.w	r9, [pc, #248]	; 11ef8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
   11e00:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
   11e02:	movs	r2, #1
   11e04:	strb.w	r2, [r9]
	while (size > 0) {
   11e08:	str	r1, [sp, #4]
   11e0a:	cbz	r1, 11e68 <usb_serial_write+0x70>
   11e0c:	ldr.w	r8, [pc, #236]	; 11efc <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
   11e10:	ldr	r7, [pc, #216]	; (11eec <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
   11e12:	ldr	r6, [sp, #4]
   11e14:	mov	fp, r0
		if (!tx_packet) {
   11e16:	ldr.w	r0, [r8]
   11e1a:	cbz	r0, 11e8a <usb_serial_write+0x92>
   11e1c:	ldr	r5, [pc, #208]	; (11ef0 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
   11e1e:	ldrh	r4, [r0, #2]
   11e20:	rsb	r1, r4, #64	; 0x40
   11e24:	cmp	r1, r6
   11e26:	it	cs
   11e28:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
   11e2a:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
   11e2e:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
   11e30:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
   11e34:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
   11e36:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
   11e38:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
   11e3c:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
   11e40:	cbz	r1, 11e58 <usb_serial_write+0x60>
   11e42:	subs	r4, #1
   11e44:	add	r2, r4
   11e46:	add	r1, fp
   11e48:	ldrb.w	r4, [fp], #1
   11e4c:	strb.w	r4, [r2, #1]!
   11e50:	cmp	fp, r1
   11e52:	bne.n	11e48 <usb_serial_write+0x50>
   11e54:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
   11e58:	cmp.w	lr, #63	; 0x3f
   11e5c:	bhi.n	11e76 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
   11e5e:	ldr	r2, [pc, #148]	; (11ef4 <usb_serial_write+0xfc>)
   11e60:	movs	r1, #5
   11e62:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
   11e64:	cmp	r6, #0
   11e66:	bne.n	11e16 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
   11e68:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
   11e6a:	movs	r3, #0
   11e6c:	strb.w	r3, [r9]
	return ret;
}
   11e70:	add	sp, #12
   11e72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
   11e76:	movs	r2, #64	; 0x40
   11e78:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
   11e7a:	mov	r1, r0
   11e7c:	movs	r0, #3
   11e7e:	bl	12a04 <usb_tx>
			tx_packet = NULL;
   11e82:	movs	r2, #0
   11e84:	str.w	r2, [r8]
   11e88:	b.n	11e5e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
   11e8a:	ldrb	r2, [r7, #0]
   11e8c:	cbz	r2, 11eda <usb_serial_write+0xe2>
   11e8e:	ldr	r5, [pc, #96]	; (11ef0 <usb_serial_write+0xf8>)
   11e90:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
   11e94:	mov.w	sl, #1
   11e98:	b.n	11eaa <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
   11e9a:	subs	r4, #1
   11e9c:	beq.n	11ecc <usb_serial_write+0xd4>
   11e9e:	ldrb	r2, [r5, #0]
   11ea0:	cbnz	r2, 11ecc <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
   11ea2:	bl	13598 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
   11ea6:	ldrb	r2, [r7, #0]
   11ea8:	cbz	r2, 11eda <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
   11eaa:	movs	r0, #3
   11eac:	bl	128d0 <usb_tx_packet_count>
   11eb0:	cmp	r0, #7
   11eb2:	bhi.n	11e9a <usb_serial_write+0xa2>
					tx_noautoflush = 1;
   11eb4:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
   11eb8:	bl	12808 <usb_malloc>
   11ebc:	str.w	r0, [r8]
					if (tx_packet) break;
   11ec0:	cmp	r0, #0
   11ec2:	bne.n	11e1e <usb_serial_write+0x26>
					tx_noautoflush = 0;
   11ec4:	ldr	r3, [pc, #48]	; (11ef8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
   11ec6:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
   11ec8:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
   11eca:	bne.n	11e9e <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
   11ecc:	movs	r3, #1
					return -1;
   11ece:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
   11ed2:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
   11ed4:	add	sp, #12
   11ed6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
   11eda:	movs	r3, #0
					return -1;
   11edc:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
   11ee0:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
   11ee4:	add	sp, #12
   11ee6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eea:	nop
   11eec:	.word	0x1fff2c34
   11ef0:	.word	0x1fff2b24
   11ef4:	.word	0x1fff2b1c
   11ef8:	.word	0x1fff2b1d
   11efc:	.word	0x1fff2b20

00011f00 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
   11f00:	push	{lr}
   11f02:	sub	sp, #12
   11f04:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
   11f06:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
   11f08:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
   11f0c:	mov	r0, r3
   11f0e:	bl	11df8 <usb_serial_write>
}
   11f12:	add	sp, #12
   11f14:	ldr.w	pc, [sp], #4

00011f18 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
   11f18:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
   11f1a:	ldr	r5, [pc, #56]	; (11f54 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
   11f1c:	ldr	r4, [pc, #56]	; (11f58 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
   11f1e:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
   11f20:	movs	r3, #1
   11f22:	strb	r3, [r4, #0]
	if (!tx_packet) {
   11f24:	cbz	r0, 11f32 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
   11f26:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
   11f28:	movs	r3, #0
   11f2a:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
   11f2c:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
   11f30:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
   11f32:	ldr	r3, [pc, #40]	; (11f5c <usb_serial_write_buffer_free+0x44>)
   11f34:	ldrb	r3, [r3, #0]
   11f36:	cbnz	r3, 11f3e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
   11f38:	movs	r0, #0
   11f3a:	strb	r0, [r4, #0]
			return 0;
   11f3c:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
   11f3e:	movs	r0, #3
   11f40:	bl	128d0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
   11f44:	cmp	r0, #7
   11f46:	bhi.n	11f38 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
   11f48:	bl	12808 <usb_malloc>
   11f4c:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
   11f4e:	cmp	r0, #0
   11f50:	bne.n	11f26 <usb_serial_write_buffer_free+0xe>
   11f52:	b.n	11f38 <usb_serial_write_buffer_free+0x20>
   11f54:	.word	0x1fff2b20
   11f58:	.word	0x1fff2b1d
   11f5c:	.word	0x1fff2c34

00011f60 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
   11f60:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
   11f62:	ldr	r3, [pc, #68]	; (11fa8 <usb_serial_flush_output+0x48>)
   11f64:	ldrb	r3, [r3, #0]
   11f66:	cbz	r3, 11f8c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
   11f68:	ldr	r6, [pc, #64]	; (11fac <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
   11f6a:	ldr	r5, [pc, #68]	; (11fb0 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
   11f6c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
   11f6e:	movs	r7, #1
   11f70:	strb	r7, [r5, #0]
	if (tx_packet) {
   11f72:	cbz	r4, 11f8e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
   11f74:	ldr	r2, [pc, #60]	; (11fb4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
   11f76:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
   11f78:	movs	r7, #0
   11f7a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
   11f7c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
   11f7e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
   11f80:	movs	r0, #3
   11f82:	bl	12a04 <usb_tx>
		tx_packet = NULL;
   11f86:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
   11f88:	movs	r3, #0
   11f8a:	strb	r3, [r5, #0]
   11f8c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
   11f8e:	bl	12808 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
   11f92:	ldr	r3, [pc, #32]	; (11fb4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
   11f94:	cbz	r0, 11fa2 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
   11f96:	mov	r1, r0
   11f98:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
   11f9a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
   11f9c:	bl	12a04 <usb_tx>
   11fa0:	b.n	11f88 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
   11fa2:	strb	r7, [r3, #0]
   11fa4:	b.n	11f88 <usb_serial_flush_output+0x28>
   11fa6:	nop
   11fa8:	.word	0x1fff2c34
   11fac:	.word	0x1fff2b20
   11fb0:	.word	0x1fff2b1d
   11fb4:	.word	0x1fff2b1c

00011fb8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
   11fb8:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
   11fba:	ldr	r3, [pc, #56]	; (11ff4 <usb_serial_flush_callback+0x3c>)
   11fbc:	ldrb	r3, [r3, #0]
   11fbe:	cbnz	r3, 11fde <usb_serial_flush_callback+0x26>
	if (tx_packet) {
   11fc0:	ldr	r4, [pc, #52]	; (11ff8 <usb_serial_flush_callback+0x40>)
   11fc2:	ldr	r1, [r4, #0]
   11fc4:	cbz	r1, 11fe0 <usb_serial_flush_callback+0x28>
   11fc6:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
   11fca:	ldrh	r3, [r1, #2]
   11fcc:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
   11fce:	movs	r0, #3
   11fd0:	bl	12a04 <usb_tx>
		tx_packet = NULL;
   11fd4:	str	r5, [r4, #0]
   11fd6:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
   11fd8:	ldr	r3, [pc, #32]	; (11ffc <usb_serial_flush_callback+0x44>)
   11fda:	movs	r2, #1
   11fdc:	strb	r2, [r3, #0]
   11fde:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
   11fe0:	bl	12808 <usb_malloc>
		if (tx) {
   11fe4:	cmp	r0, #0
   11fe6:	beq.n	11fd8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
   11fe8:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
   11fea:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
   11fee:	movs	r0, #3
   11ff0:	b.w	12a04 <usb_tx>
   11ff4:	.word	0x1fff2b1d
   11ff8:	.word	0x1fff2b20
   11ffc:	.word	0x1fff2b1c

00012000 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
   12000:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
   12002:	ldr	r4, [pc, #64]	; (12044 <fault_isr+0x44>)
   12004:	b.n	12018 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
   12006:	ldr	r3, [r4, #0]
   12008:	lsls	r1, r3, #21
   1200a:	bmi.n	12028 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
   1200c:	ldr	r3, [r4, #0]
   1200e:	lsls	r2, r3, #20
   12010:	bmi.n	12032 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
   12012:	ldr	r3, [r4, #0]
   12014:	lsls	r3, r3, #19
   12016:	bmi.n	1203c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
   12018:	ldr	r3, [r4, #0]
   1201a:	lsls	r0, r3, #13
   1201c:	bpl.n	12006 <fault_isr+0x6>
   1201e:	bl	12a88 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
   12022:	ldr	r3, [r4, #0]
   12024:	lsls	r1, r3, #21
   12026:	bpl.n	1200c <fault_isr+0xc>
   12028:	bl	12048 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
   1202c:	ldr	r3, [r4, #0]
   1202e:	lsls	r2, r3, #20
   12030:	bpl.n	12012 <fault_isr+0x12>
   12032:	bl	12048 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
   12036:	ldr	r3, [r4, #0]
   12038:	lsls	r3, r3, #19
   1203a:	bpl.n	12018 <fault_isr+0x18>
   1203c:	bl	12048 <unused_isr>
   12040:	b.n	12018 <fault_isr+0x18>
   12042:	nop
   12044:	.word	0x40048034

00012048 <unused_isr>:
	}
}

void unused_isr(void)
{
   12048:	push	{r3, lr}
	fault_isr();
   1204a:	bl	12000 <fault_isr>
   1204e:	nop

00012050 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
   12050:	ldr	r3, [pc, #4]	; (12058 <startup_early_hook+0x8>)
   12052:	movs	r2, #16
   12054:	strh	r2, [r3, #0]
   12056:	bx	lr
   12058:	.word	0x40052000

0001205c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
   1205c:	bx	lr
   1205e:	nop

00012060 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
   12060:	ldr	r1, [pc, #36]	; (12088 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
   12062:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
   12064:	ldr	r3, [r1, #0]
	if (incr != 0) {
   12066:	cbz	r0, 12076 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
   12068:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
   1206a:	add	r0, r3
   1206c:	sub.w	r2, r2, #8192	; 0x2000
   12070:	cmp	r0, r2
   12072:	bcs.n	1207a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
   12074:	str	r0, [r1, #0]
	}
	return prev;
   12076:	mov	r0, r3
}
   12078:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
   1207a:	bl	14650 <__errno>
   1207e:	movs	r3, #12
   12080:	str	r3, [r0, #0]
			return (void *)-1;
   12082:	mov.w	r0, #4294967295
   12086:	pop	{r3, pc}
   12088:	.word	0x1fff0a28

0001208c <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
   1208c:	b.n	1208c <__cxa_pure_virtual>
   1208e:	nop

00012090 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
   12090:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
   12092:	ldr	r2, [pc, #96]	; (120f4 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   12094:	ldr	r3, [pc, #96]	; (120f8 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
   12096:	ldr	r1, [pc, #100]	; (120fc <usb_init_serialnumber+0x6c>)
   12098:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   1209a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   1209c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   1209e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   120a0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   120a2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   120a4:	ldrb	r3, [r2, #0]
   120a6:	lsls	r3, r3, #24
   120a8:	bpl.n	120a4 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   120aa:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
   120ac:	ldr	r3, [pc, #80]	; (12100 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   120ae:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
   120b0:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
   120b2:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   120b4:	ldr	r3, [pc, #76]	; (12104 <usb_init_serialnumber+0x74>)
   120b6:	ldr	r4, [pc, #80]	; (12108 <usb_init_serialnumber+0x78>)
   120b8:	cmp	r0, r3
   120ba:	it	ls
   120bc:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
   120c0:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   120c2:	it	ls
   120c4:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
   120c6:	movs	r2, #10
   120c8:	bl	1210c <ultoa>
   120cc:	add	r1, sp, #4
   120ce:	mov	r0, r4
	for (i=0; i<10; i++) {
   120d0:	movs	r3, #0
		char c = buf[i];
   120d2:	ldrb.w	r2, [r1], #1
   120d6:	adds	r3, #1
		if (!c) break;
   120d8:	cbz	r2, 120ea <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   120da:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   120dc:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   120e0:	bne.n	120d2 <usb_init_serialnumber+0x42>
   120e2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   120e4:	strb	r3, [r4, #0]
}
   120e6:	add	sp, #16
   120e8:	pop	{r4, pc}
   120ea:	lsls	r3, r3, #1
   120ec:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   120ee:	strb	r3, [r4, #0]
}
   120f0:	add	sp, #16
   120f2:	pop	{r4, pc}
   120f4:	.word	0x40020004
   120f8:	.word	0x40020000
   120fc:	.word	0x41070000
   12100:	.word	0x4002000c
   12104:	.word	0x0098967f
   12108:	.word	0x1fff0b00

0001210c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   1210c:	push	{r4, r5, r6, r7}
   1210e:	subs	r5, r1, #1
   12110:	mov	r6, r5
	unsigned digit;
	int i=0, j;
   12112:	movs	r4, #0
   12114:	b.n	12118 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   12116:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
   12118:	udiv	r3, r0, r2
   1211c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   12120:	cmp	r0, #9
   12122:	add.w	r7, r0, #48	; 0x30
   12126:	itet	hi
   12128:	addhi	r0, #55	; 0x37
   1212a:	uxtbls	r0, r7
   1212c:	uxtbhi	r0, r0
   1212e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
   12132:	mov	r0, r3
   12134:	cmp	r3, #0
   12136:	bne.n	12116 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
   12138:	adds	r2, r1, r4
   1213a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
   1213c:	cbz	r4, 12152 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
   1213e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
   12140:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
   12144:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   12146:	adds	r3, #1
   12148:	subs	r0, r4, r3
   1214a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
   1214c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
   12150:	blt.n	1213e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
   12152:	mov	r0, r1
   12154:	pop	{r4, r5, r6, r7}
   12156:	bx	lr

00012158 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
   12158:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1215c:	vpush	{d8}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
   12160:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
   12164:	eor.w	r3, r0, r0, asr #31
	if (isnanf(val)) {
   12168:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
   1216c:	sub	sp, #16
   1216e:	vmov.f32	s16, s0
   12172:	mov	r5, r0
   12174:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
   12176:	sub.w	r3, r3, r0, asr #31
	if (isnanf(val)) {
   1217a:	bvs.w	123d8 <dtostrf+0x280>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
   1217e:	vldr	s15, [pc, #800]	; 124a0 <dtostrf+0x348>
   12182:	vabs.f32	s14, s0
   12186:	vcmp.f32	s14, s15
   1218a:	vmrs	APSR_nzcv, fpscr
   1218e:	ble.n	12216 <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
   12190:	vcmpe.f32	s0, #0.0
   12194:	vmrs	APSR_nzcv, fpscr
   12198:	ite	mi
   1219a:	movmi	r0, #4
   1219c:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1219e:	cmp	r0, r3
   121a0:	blt.n	121e6 <dtostrf+0x8e>
		if (width<0) {
   121a2:	cmp	r5, #0
   121a4:	blt.w	1248e <dtostrf+0x336>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   121a8:	movs	r0, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
   121aa:	vcmpe.f32	s16, #0.0
   121ae:	vmrs	APSR_nzcv, fpscr
   121b2:	it	mi
   121b4:	movmi	r3, r4
   121b6:	bmi.n	1220e <dtostrf+0xb6>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   121b8:	movs	r1, #73	; 0x49
   121ba:	movs	r2, #78	; 0x4e
   121bc:	movs	r3, #70	; 0x46
   121be:	strb	r1, [r4, #0]
   121c0:	strb	r2, [r4, #1]
   121c2:	strb	r3, [r4, #2]
   121c4:	adds	r4, #3
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
   121c6:	cmp	r0, #0
   121c8:	beq.w	12496 <dtostrf+0x33e>
   121cc:	add	r0, r4
			*buf++ = ' ';
   121ce:	movs	r3, #32
   121d0:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
   121d4:	cmp	r0, r4
   121d6:	bne.n	121d0 <dtostrf+0x78>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
   121d8:	movs	r3, #0
   121da:	strb	r3, [r0, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
   121dc:	add	sp, #16
   121de:	vpop	{d8}
   121e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
   121e6:	cmp	r5, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   121e8:	sub.w	r0, r3, r0
		if (width<0) {
   121ec:	bge.n	121aa <dtostrf+0x52>
			while (awidth) {
   121ee:	cmp	r0, #0
   121f0:	beq.w	1248e <dtostrf+0x336>
   121f4:	adds	r3, r2, r0
				*buf++ = ' ';
   121f6:	movs	r2, #32
   121f8:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
   121fc:	cmp	r4, r3
   121fe:	bne.n	121f8 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
   12200:	vcmpe.f32	s16, #0.0
   12204:	vmrs	APSR_nzcv, fpscr
   12208:	bpl.w	12444 <dtostrf+0x2ec>
   1220c:	movs	r0, #0
   1220e:	movs	r2, #45	; 0x2d
   12210:	strb	r2, [r3, #0]
   12212:	adds	r4, r3, #1
   12214:	b.n	121b8 <dtostrf+0x60>
   12216:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
   12218:	add	r2, sp, #8
   1221a:	add	r1, sp, #4
   1221c:	mov	r0, r7
   1221e:	bl	1462c <fcvtf>
   12222:	mov	sl, r7
   12224:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
   12226:	ldr.w	r9, [sp, #4]
   1222a:	cmp	r7, #0
   1222c:	beq.n	122e2 <dtostrf+0x18a>
   1222e:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
   12232:	cmp	r3, r7
   12234:	bgt.w	12364 <dtostrf+0x20c>
   12238:	mov	r0, r8
   1223a:	bl	15880 <strlen>
   1223e:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
   12240:	cmp	r9, r6
   12242:	it	lt
   12244:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
   12246:	cmp.w	r9, #0
   1224a:	bne.w	12382 <dtostrf+0x22a>
   1224e:	adds	r6, #1
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
   12250:	ldr.w	lr, [sp, #8]
   12254:	cmp.w	lr, #0
   12258:	beq.n	12306 <dtostrf+0x1ae>
   1225a:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
   1225c:	subs	r0, r5, r6
	if (pad > 0) {
   1225e:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
   12260:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
   12264:	bgt.n	12312 <dtostrf+0x1ba>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
   12266:	mov	r3, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
   12268:	movs	r2, #45	; 0x2d
   1226a:	strb	r2, [r3, #0]
   1226c:	adds	r3, #1
	if (decpt == 0 && precision > 0) {
   1226e:	cmp.w	r9, #0
   12272:	bne.n	12340 <dtostrf+0x1e8>
   12274:	cbz	r7, 12284 <dtostrf+0x12c>
		*p++ = '0';
   12276:	mov	r2, r3
   12278:	movs	r0, #48	; 0x30
   1227a:	strb.w	r0, [r2], #2
		*p++ = '.';
   1227e:	movs	r0, #46	; 0x2e
   12280:	strb	r0, [r3, #1]
   12282:	mov	r3, r2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   12284:	cmp	r3, r1
   12286:	bcs.n	122ca <dtostrf+0x172>
		*p++ = *s++;
   12288:	adds	r7, r3, #1
   1228a:	ldrb.w	r2, [r8]
   1228e:	strb	r2, [r3, #0]
		if (p == e) break;
   12290:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
   12292:	add.w	r8, r8, #1
		if (p == e) break;
   12296:	beq.n	122cc <dtostrf+0x174>
   12298:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
   1229a:	mov.w	lr, #46	; 0x2e
   1229e:	b.n	122b8 <dtostrf+0x160>
   122a0:	strb.w	lr, [r3, #1]
   122a4:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   122a6:	cmp	r3, r1
		*p++ = *s++;
   122a8:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   122ac:	bcs.n	122ca <dtostrf+0x172>
		*p++ = *s++;
   122ae:	ldrb.w	r0, [r8], #1
   122b2:	strb	r0, [r3, #0]
		if (p == e) break;
   122b4:	cmp	r7, r1
   122b6:	beq.n	122cc <dtostrf+0x174>
		if (--decpt == 0) *p++ = '.';
   122b8:	subs	r2, #1
   122ba:	str	r2, [sp, #4]
   122bc:	cmp	r2, #0
   122be:	beq.n	122a0 <dtostrf+0x148>
   122c0:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   122c2:	cmp	r3, r1
		*p++ = *s++;
   122c4:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   122c8:	bcc.n	122ae <dtostrf+0x156>
   122ca:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
   122cc:	cmp	r5, #0
   122ce:	blt.w	12418 <dtostrf+0x2c0>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
   122d2:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
   122d4:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
   122d6:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
   122d8:	add	sp, #16
   122da:	vpop	{d8}
   122de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
   122e2:	cmp.w	r9, #0
   122e6:	bne.n	1222e <dtostrf+0xd6>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
   122e8:	ldrb.w	r8, [r0]
   122ec:	ldr	r1, [pc, #436]	; (124a4 <dtostrf+0x34c>)
   122ee:	ldr	r2, [pc, #440]	; (124a8 <dtostrf+0x350>)
		decpt++;
   122f0:	movs	r3, #1
   122f2:	str	r3, [sp, #4]
   122f4:	mov	r9, r3
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
   122f6:	cmp.w	r8, #52	; 0x34
   122fa:	ite	hi
   122fc:	movhi	r8, r1
   122fe:	movls	r8, r2
		decpt++;
   12300:	mov.w	r3, #4294967295
   12304:	b.n	12232 <dtostrf+0xda>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
   12306:	subs	r0, r5, r6
	if (pad > 0) {
   12308:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
   1230a:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
   1230e:	ble.w	1249a <dtostrf+0x342>
		e += pad;
   12312:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
   12314:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
   12316:	subs	r0, #1
   12318:	mov.w	ip, #32
   1231c:	strb.w	ip, [r2], #1
   12320:	rsb	r3, r2, #1
   12324:	add	r3, r0
   12326:	add	r3, r4
   12328:	cmp	r3, #0
   1232a:	bgt.n	1231c <dtostrf+0x1c4>
   1232c:	bic.w	r3, r0, r0, asr #31
   12330:	adds	r3, #1
   12332:	add	r3, r4
	}
	if (sign) *p++ = '-';
   12334:	cmp.w	lr, #0
   12338:	bne.n	12268 <dtostrf+0x110>
	if (decpt == 0 && precision > 0) {
   1233a:	cmp.w	r9, #0
   1233e:	beq.n	12274 <dtostrf+0x11c>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
   12340:	bge.n	12284 <dtostrf+0x12c>
   12342:	cmp	r7, #0
   12344:	beq.n	12284 <dtostrf+0x12c>
		*p++ = '0';
   12346:	mov	r2, r3
   12348:	movs	r0, #48	; 0x30
   1234a:	strb.w	r0, [r2], #2
		*p++ = '.';
   1234e:	movs	r7, #46	; 0x2e
   12350:	strb	r7, [r3, #1]
   12352:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
   12356:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
   1235a:	cmp	r3, r2
   1235c:	bne.n	12356 <dtostrf+0x1fe>
   1235e:	movs	r2, #0
   12360:	str	r2, [sp, #4]
   12362:	b.n	12284 <dtostrf+0x12c>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
   12364:	rsb	r9, r7, #0
   12368:	movs	r6, #1
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
   1236a:	cmp	r9, r6
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
   1236c:	mov	r0, r6
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
   1236e:	it	lt
   12370:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
   12372:	cmp.w	r9, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
   12376:	ldr.w	r8, [pc, #304]	; 124a8 <dtostrf+0x350>
		decpt = -precision;
   1237a:	str.w	r9, [sp, #4]

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
   1237e:	beq.w	1224e <dtostrf+0xf6>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
   12382:	bge.w	12250 <dtostrf+0xf8>
   12386:	cmp	r7, #0
   12388:	beq.w	12250 <dtostrf+0xf8>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
   1238c:	add.w	r3, r9, r7
   12390:	cmp	r0, r3
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
   12392:	add.w	r6, r7, #2

		if (strlen(s) > precision + decpt) {
   12396:	bls.w	12250 <dtostrf+0xf8>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
   1239a:	cmp	r7, #0
   1239c:	ble.n	123ac <dtostrf+0x254>
				val *= 10.0;
   1239e:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
   123a2:	subs.w	sl, sl, #1
				val *= 10.0;
   123a6:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
   123aa:	bne.n	123a2 <dtostrf+0x24a>
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   123ac:	add	r2, sp, #8
   123ae:	mov	r0, sl
   123b0:	vmov.f32	s0, s16
   123b4:	add	r1, sp, #12
   123b6:	bl	1462c <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   123ba:	ldr.w	r9, [sp, #4]
   123be:	ldr	r2, [sp, #12]
   123c0:	adds	r3, r7, #1
   123c2:	rsb	r2, r9, r2
   123c6:	cmp	r2, r3
   123c8:	it	eq
   123ca:	addeq.w	r9, r9, #1
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   123ce:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   123d0:	it	eq
   123d2:	streq.w	r9, [sp, #4]
   123d6:	b.n	12250 <dtostrf+0xf8>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
   123d8:	vcmpe.f32	s0, #0.0
   123dc:	vmrs	APSR_nzcv, fpscr
   123e0:	ite	mi
   123e2:	movmi	r0, #4
   123e4:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   123e6:	cmp	r0, r3
   123e8:	bge.n	12454 <dtostrf+0x2fc>
		if (width<0) {
   123ea:	cmp	r5, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   123ec:	sub.w	r3, r3, r0
		if (width<0) {
   123f0:	blt.n	12466 <dtostrf+0x30e>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   123f2:	vmov	r2, s16
   123f6:	cmp	r2, #0
   123f8:	blt.n	1245c <dtostrf+0x304>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   123fa:	movs	r2, #78	; 0x4e
   123fc:	movs	r1, #65	; 0x41
   123fe:	strb	r2, [r4, #0]
   12400:	strb	r2, [r4, #2]
   12402:	strb	r1, [r4, #1]
   12404:	adds	r4, #3
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
   12406:	cmp	r3, #0
   12408:	beq.n	12496 <dtostrf+0x33e>
   1240a:	adds	r0, r4, r3
			*buf++ = ' ';
   1240c:	movs	r3, #32
   1240e:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
   12412:	cmp	r4, r0
   12414:	bne.n	1240e <dtostrf+0x2b6>
   12416:	b.n	121d8 <dtostrf+0x80>
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
   12418:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
   1241a:	negs	r3, r0
   1241c:	cmp	r3, #0
   1241e:	mvn.w	r0, r0
   12422:	ble.w	122d2 <dtostrf+0x17a>
   12426:	mov	r2, r1
   12428:	movs	r5, #32
   1242a:	strb.w	r5, [r2], #1
   1242e:	rsb	r3, r2, #1
   12432:	add	r3, r0
   12434:	add	r3, r1
   12436:	cmp	r3, #0
   12438:	bgt.n	1242a <dtostrf+0x2d2>
   1243a:	bic.w	r3, r0, r0, asr #31
   1243e:	adds	r3, #1
   12440:	add	r1, r3
   12442:	b.n	122d2 <dtostrf+0x17a>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   12444:	movs	r0, #73	; 0x49
   12446:	movs	r1, #78	; 0x4e
   12448:	movs	r2, #70	; 0x46
   1244a:	strb	r0, [r3, #0]
   1244c:	strb	r1, [r3, #1]
   1244e:	strb	r2, [r3, #2]
   12450:	adds	r0, r3, #3
   12452:	b.n	121d8 <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
   12454:	cmp	r5, #0
   12456:	blt.n	1248a <dtostrf+0x332>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   12458:	movs	r3, #0
   1245a:	b.n	123f2 <dtostrf+0x29a>
   1245c:	mov	r0, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1245e:	movs	r2, #45	; 0x2d
   12460:	strb	r2, [r0, #0]
   12462:	adds	r4, r0, #1
   12464:	b.n	123fa <dtostrf+0x2a2>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
   12466:	cbz	r3, 1248a <dtostrf+0x332>
   12468:	adds	r0, r2, r3
				*buf++ = ' ';
   1246a:	movs	r3, #32
   1246c:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
   12470:	cmp	r4, r0
   12472:	bne.n	1246c <dtostrf+0x314>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   12474:	vmov	r3, s16
   12478:	cmp	r3, #0
   1247a:	blt.n	12492 <dtostrf+0x33a>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1247c:	movs	r3, #78	; 0x4e
   1247e:	movs	r2, #65	; 0x41
   12480:	strb	r3, [r0, #0]
   12482:	strb	r3, [r0, #2]
   12484:	strb	r2, [r0, #1]
   12486:	adds	r0, #3
   12488:	b.n	121d8 <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
   1248a:	mov	r0, r4
   1248c:	b.n	12474 <dtostrf+0x31c>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
   1248e:	mov	r3, r4
   12490:	b.n	12200 <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   12492:	movs	r3, #0
   12494:	b.n	1245e <dtostrf+0x306>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   12496:	mov	r0, r4
   12498:	b.n	121d8 <dtostrf+0x80>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
   1249a:	mov	r3, r4
   1249c:	b.n	1226e <dtostrf+0x116>
   1249e:	nop
   124a0:	.word	0x7f7fffff
   124a4:	.word	0x0001927c
   124a8:	.word	0x0001988c

000124ac <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
   124ac:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
   124ae:	ldr	r3, [pc, #68]	; (124f4 <digitalWrite.part.1+0x48>)
   124b0:	ldr.w	r2, [r3, r0, lsl #3]
   124b4:	ldrb.w	r4, [r2, #640]	; 0x280
   124b8:	cbz	r4, 124c8 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
   124ba:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
   124bc:	cbz	r1, 124de <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
   124be:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
   124c2:	ldr.w	r4, [sp], #4
   124c6:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
   124c8:	add.w	r3, r3, r0, lsl #3
   124cc:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
   124ce:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
   124d0:	cbnz	r1, 124e8 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
   124d2:	bic.w	r2, r2, #2
   124d6:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
   124d8:	ldr.w	r4, [sp], #4
   124dc:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
   124de:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
   124e2:	ldr.w	r4, [sp], #4
   124e6:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
   124e8:	orr.w	r2, r2, #3
   124ec:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
   124ee:	ldr.w	r4, [sp], #4
   124f2:	bx	lr
   124f4:	.word	0x00019890

000124f8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
   124f8:	ldr	r2, [pc, #112]	; (1256c <pinMode.part.2+0x74>)
   124fa:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   124fe:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
   12500:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   12502:	beq.n	12528 <pinMode.part.2+0x30>
   12504:	cmp	r1, #4
   12506:	beq.n	12540 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
   12508:	ldr.w	r0, [r2, r0, lsl #3]
   1250c:	movs	r2, #0
   1250e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
   12512:	cbz	r1, 12520 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
   12514:	cmp	r1, #2
   12516:	beq.n	1255a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
   12518:	cmp	r1, #3
   1251a:	beq.n	12562 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
   1251c:	str	r2, [r3, #0]
   1251e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
   12520:	mov.w	r2, #256	; 0x100
   12524:	str	r2, [r3, #0]
   12526:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
   12528:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
   1252c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
   12530:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
   12534:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
   12536:	ldr	r2, [r3, #0]
   12538:	bic.w	r2, r2, #32
   1253c:	str	r2, [r3, #0]
   1253e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
   12540:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
   12544:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
   12548:	movs	r0, #1
   1254a:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
   1254e:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
   12550:	ldr	r2, [r3, #0]
   12552:	orr.w	r2, r2, #32
   12556:	str	r2, [r3, #0]
   12558:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
   1255a:	movw	r2, #259	; 0x103
   1255e:	str	r2, [r3, #0]
   12560:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
   12562:	mov.w	r2, #258	; 0x102
   12566:	str	r2, [r3, #0]
   12568:	bx	lr
   1256a:	nop
   1256c:	.word	0x00019890

00012570 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
   12570:	adds	r0, #16
   12572:	ldr	r3, [pc, #8]	; (1257c <attachInterruptVector+0xc>)
   12574:	str.w	r1, [r3, r0, lsl #2]
   12578:	bx	lr
   1257a:	nop
   1257c:	.word	0x1fff0200

00012580 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
   12580:	push	{r4, r5}
	RTC_SR = 0;
   12582:	ldr	r3, [pc, #20]	; (12598 <rtc_set+0x18>)
	RTC_TPR = 0;
   12584:	ldr	r5, [pc, #20]	; (1259c <rtc_set+0x1c>)
	RTC_TSR = t;
   12586:	ldr	r4, [pc, #24]	; (125a0 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
   12588:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
   1258a:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
   1258c:	str	r2, [r3, #0]
	RTC_TPR = 0;
   1258e:	str	r2, [r5, #0]
	RTC_TSR = t;
   12590:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
   12592:	str	r1, [r3, #0]
}
   12594:	pop	{r4, r5}
   12596:	bx	lr
   12598:	.word	0x4003d014
   1259c:	.word	0x4003d004
   125a0:	.word	0x4003d000

000125a4 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
   125a4:	cmp	r0, #63	; 0x3f
   125a6:	bhi.n	125ac <digitalWrite+0x8>
   125a8:	b.w	124ac <digitalWrite.part.1>
   125ac:	bx	lr
   125ae:	nop

000125b0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
   125b0:	cmp	r0, #63	; 0x3f
   125b2:	bhi.n	125b8 <pinMode+0x8>
   125b4:	b.w	124f8 <pinMode.part.2>
   125b8:	bx	lr
   125ba:	nop

000125bc <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
   125bc:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
   125be:	ldr	r1, [pc, #48]	; (125f0 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   125c0:	ldr	r3, [pc, #48]	; (125f4 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   125c2:	ldr	r2, [pc, #52]	; (125f8 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   125c4:	ldr	r3, [r3, #0]
	count = systick_millis_count;
   125c6:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   125c8:	ldr	r2, [r2, #0]
	__enable_irq();
   125ca:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
   125cc:	lsls	r2, r2, #5
   125ce:	bpl.n	125d6 <micros+0x1a>
   125d0:	cmp	r3, #50	; 0x32
   125d2:	it	hi
   125d4:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
   125d6:	ldr	r1, [pc, #36]	; (125fc <micros+0x40>)
   125d8:	rsb	r3, r3, #95744	; 0x17600
   125dc:	mov.w	r2, #1000	; 0x3e8
   125e0:	adds	r3, #255	; 0xff
   125e2:	umull	r1, r3, r1, r3
   125e6:	mul.w	r0, r2, r0
}
   125ea:	add.w	r0, r0, r3, lsr #6
   125ee:	bx	lr
   125f0:	.word	0x1fff2b30
   125f4:	.word	0xe000e018
   125f8:	.word	0xe000ed04
   125fc:	.word	0xaaaaaaab

00012600 <delay>:

void delay(uint32_t ms)
{
   12600:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12604:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
   12606:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
   12608:	ldr	r7, [pc, #128]	; (1268c <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   1260a:	ldr	r3, [pc, #132]	; (12690 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   1260c:	ldr	r2, [pc, #132]	; (12694 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   1260e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
   12610:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   12612:	ldr	r2, [r2, #0]
	__enable_irq();
   12614:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
   12616:	lsls	r2, r2, #5
   12618:	bpl.n	12620 <delay+0x20>
   1261a:	cmp	r3, #50	; 0x32
   1261c:	it	hi
   1261e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
   12620:	cbz	r5, 12688 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
   12622:	rsb	r3, r3, #95744	; 0x17600
   12626:	ldr	r6, [pc, #112]	; (12698 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
   12628:	ldr.w	r9, [pc, #100]	; 12690 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   1262c:	ldr.w	r8, [pc, #100]	; 12694 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
   12630:	adds	r3, #255	; 0xff
   12632:	mov.w	r2, #1000	; 0x3e8
   12636:	umull	r1, r3, r6, r3
   1263a:	mul.w	r4, r2, r4
   1263e:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
   12642:	cpsid	i
	current = SYST_CVR;
   12644:	ldr.w	r1, [r9]
	count = systick_millis_count;
   12648:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
   1264a:	ldr.w	lr, [r8]
	__enable_irq();
   1264e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
   12650:	rsb	r3, r1, #95744	; 0x17600
   12654:	adds	r3, #255	; 0xff
   12656:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
   1265a:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
   1265e:	rsb	r3, r4, r3, lsr #6
   12662:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
   12666:	beq.n	1266e <delay+0x6e>
   12668:	cmp	r1, #50	; 0x32
   1266a:	it	hi
   1266c:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
   1266e:	mla	r3, r0, r2, r3
   12672:	cmp.w	r3, #1000	; 0x3e8
   12676:	bcc.n	12682 <delay+0x82>
				ms--;
				if (ms == 0) return;
   12678:	subs	r5, #1
   1267a:	beq.n	12688 <delay+0x88>
				start += 1000;
   1267c:	add.w	r4, r4, #1000	; 0x3e8
   12680:	b.n	12642 <delay+0x42>
			}
			yield();
   12682:	bl	13598 <yield>
		}
   12686:	b.n	12642 <delay+0x42>
   12688:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1268c:	.word	0x1fff2b30
   12690:	.word	0xe000e018
   12694:	.word	0xe000ed04
   12698:	.word	0xaaaaaaab

0001269c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
   1269c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
   1269e:	ldr	r3, [pc, #312]	; (127d8 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
   126a0:	ldr	r0, [pc, #312]	; (127dc <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
   126a2:	ldr.w	ip, [pc, #348]	; 12800 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
   126a6:	ldr	r4, [pc, #312]	; (127e0 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
   126a8:	ldr	r1, [pc, #312]	; (127e4 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
   126aa:	ldr.w	lr, [pc, #344]	; 12804 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
   126ae:	ldr	r6, [pc, #312]	; (127e8 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
   126b0:	ldr	r5, [pc, #312]	; (127ec <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
   126b2:	ldr	r7, [pc, #316]	; (127f0 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
   126b4:	mov.w	r2, #134217728	; 0x8000000
   126b8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
   126ba:	mov.w	r2, #268435456	; 0x10000000
   126be:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
   126c0:	mov.w	r2, #536870912	; 0x20000000
   126c4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
   126c6:	mov.w	r2, #1073741824	; 0x40000000
   126ca:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
   126cc:	mov.w	r2, #2147483648	; 0x80000000
   126d0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
   126d2:	movs	r2, #0
   126d4:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
   126d6:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
   126d8:	movw	r0, #49151	; 0xbfff
   126dc:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
   126e0:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
   126e4:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
   126e6:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
   126ea:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
   126ec:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
   126ee:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
   126f0:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
   126f4:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
   126f6:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
   126fa:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
   126fc:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
   12700:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
   12702:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
   12706:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
   1270a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
   1270e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
   12712:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
   12716:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
   12718:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
   1271c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
   1271e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
   12720:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
   12722:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
   12726:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
   12728:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
   1272a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   1272c:	ldr	r4, [pc, #196]	; (127f4 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
   1272e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
   12730:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   12732:	movs	r1, #9
   12734:	str	r1, [r4, #0]
	FTM1_CNT = 0;
   12736:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
   1273a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
   1273e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
   12740:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
   12742:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
   12744:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
   12746:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
   12748:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   1274a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
   1274e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
   12752:	add.w	r7, r7, #520192	; 0x7f000
   12756:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
   12758:	addw	r4, r4, #2044	; 0x7fc
   1275c:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
   1275e:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
   12760:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
   12762:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   12764:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
   12768:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
   1276a:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
   1276e:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
   12772:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
   12774:	sub.w	r4, r4, #460800	; 0x70800
   12778:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
   1277c:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
   1277e:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
   12780:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
   12784:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
   12786:	ldr	r0, [pc, #112]	; (127f8 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
   12788:	orr.w	r1, r1, #512	; 0x200
   1278c:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
   1278e:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
   12790:	ldr	r4, [pc, #104]	; (127fc <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
   12792:	add.w	lr, lr, #65280	; 0xff00
   12796:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
   1279a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
   1279e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
   127a2:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
   127a6:	orr.w	r1, r1, #33554432	; 0x2000000
   127aa:	str	r1, [r0, #0]
	TPM1_CNT = 0;
   127ac:	str.w	r2, [lr]
	TPM1_MOD = 32767;
   127b0:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
   127b4:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
   127b6:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
   127b8:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
   127ba:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
   127bc:	str	r2, [r4, #0]
#endif
	analog_init();
   127be:	bl	138d4 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
   127c2:	movs	r0, #25
   127c4:	bl	12600 <delay>
	usb_init();
   127c8:	bl	134d0 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
   127cc:	movw	r0, #275	; 0x113
}
   127d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
   127d4:	b.w	12600 <delay>
   127d8:	.word	0xe000e104
   127dc:	.word	0x40038004
   127e0:	.word	0x40038014
   127e4:	.word	0x4003801c
   127e8:	.word	0x40038024
   127ec:	.word	0x4003802c
   127f0:	.word	0x40038034
   127f4:	.word	0x40038000
   127f8:	.word	0x40048004
   127fc:	.word	0x400c9000
   12800:	.word	0x40038008
   12804:	.word	0x4003800c

00012808 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
   12808:	cpsid	i
	avail = usb_buffer_available;
   1280a:	ldr	r0, [pc, #52]	; (12840 <usb_malloc+0x38>)
   1280c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
   1280e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
   12812:	cmp	r3, #19
   12814:	bgt.n	12838 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
   12816:	mov.w	r1, #2147483648	; 0x80000000
   1281a:	lsrs	r1, r3
   1281c:	bic.w	r2, r2, r1
   12820:	str	r2, [r0, #0]
	__enable_irq();
   12822:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
   12824:	ldr	r0, [pc, #28]	; (12844 <usb_malloc+0x3c>)
   12826:	add.w	r3, r3, r3, lsl #3
   1282a:	lsls	r3, r3, #3
   1282c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
   1282e:	movs	r1, #0
   12830:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
   12832:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
   12834:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
   12836:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
   12838:	cpsie	i
		return NULL;
   1283a:	movs	r0, #0
   1283c:	bx	lr
   1283e:	nop
   12840:	.word	0x1fff0b18
   12844:	.word	0x1fff03d0

00012848 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
   12848:	ldr	r3, [pc, #52]	; (12880 <usb_free+0x38>)
   1284a:	ldr	r2, [pc, #56]	; (12884 <usb_free+0x3c>)
   1284c:	subs	r3, r0, r3
   1284e:	umull	r2, r3, r2, r3
   12852:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
   12854:	cmp	r3, #19
   12856:	bhi.n	12872 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
   12858:	ldr	r2, [pc, #44]	; (12888 <usb_free+0x40>)
   1285a:	ldrb	r2, [r2, #0]
   1285c:	cbnz	r2, 12874 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
   1285e:	cpsid	i
	usb_buffer_available |= mask;
   12860:	ldr	r0, [pc, #40]	; (1288c <usb_free+0x44>)
   12862:	mov.w	r1, #2147483648	; 0x80000000
   12866:	ldr	r2, [r0, #0]
   12868:	lsr.w	r3, r1, r3
   1286c:	orrs	r2, r3
   1286e:	str	r2, [r0, #0]
	__enable_irq();
   12870:	cpsie	i
   12872:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
   12874:	ldr	r2, [pc, #24]	; (12890 <usb_free+0x48>)
   12876:	ldrb	r2, [r2, #0]
   12878:	cmp	r2, #0
   1287a:	beq.n	1285e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
   1287c:	b.w	128fc <usb_rx_memory>
   12880:	.word	0x1fff03d0
   12884:	.word	0x38e38e39
   12888:	.word	0x1fff2c29
   1288c:	.word	0x1fff0b18
   12890:	.word	0x1fff2c34

00012894 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
   12894:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
   12896:	cmp	r3, #5
   12898:	bhi.n	128c4 <usb_rx+0x30>
	__disable_irq();
   1289a:	cpsid	i
	ret = rx_first[endpoint];
   1289c:	ldr	r1, [pc, #40]	; (128c8 <usb_rx+0x34>)
   1289e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
   128a2:	cbz	r0, 128c0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
   128a4:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
   128a6:	ldr	r4, [pc, #36]	; (128cc <usb_rx+0x38>)
   128a8:	ldrh	r5, [r0, #0]
   128aa:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
   128ae:	ldr	r6, [r0, #4]
   128b0:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
   128b4:	subs	r2, r2, r5
   128b6:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
   128ba:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
   128bc:	pop	{r4, r5, r6}
   128be:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
   128c0:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
   128c2:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
   128c4:	movs	r0, #0
   128c6:	bx	lr
   128c8:	.word	0x1fff2b94
   128cc:	.word	0x1fff2cb0

000128d0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
   128d0:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
   128d2:	cmp	r0, #5
   128d4:	bhi.n	128ee <usb_tx_packet_count+0x1e>
	__disable_irq();
   128d6:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
   128d8:	ldr	r3, [pc, #28]	; (128f8 <usb_tx_packet_count+0x28>)
   128da:	ldr.w	r3, [r3, r0, lsl #2]
   128de:	cbz	r3, 128f2 <usb_tx_packet_count+0x22>
   128e0:	movs	r0, #0
   128e2:	ldr	r3, [r3, #4]
   128e4:	adds	r0, #1
   128e6:	cmp	r3, #0
   128e8:	bne.n	128e2 <usb_tx_packet_count+0x12>
	__enable_irq();
   128ea:	cpsie	i
	return count;
   128ec:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
   128ee:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
   128f0:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
   128f2:	mov	r0, r3
   128f4:	b.n	128ea <usb_tx_packet_count+0x1a>
   128f6:	nop
   128f8:	.word	0x1fff2bf0

000128fc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
   128fc:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
   128fe:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   12900:	ldr	r2, [pc, #236]	; (129f0 <usb_rx_memory+0xf4>)
   12902:	ldrb	r3, [r2, #0]
   12904:	lsls	r1, r3, #28
   12906:	bpl.n	12916 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
   12908:	ldr	r3, [pc, #232]	; (129f4 <usb_rx_memory+0xf8>)
   1290a:	ldr	r1, [r3, #32]
   1290c:	cmp	r1, #0
   1290e:	beq.n	129b0 <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   12910:	ldr	r1, [r3, #40]	; 0x28
   12912:	cmp	r1, #0
   12914:	beq.n	129cc <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   12916:	ldrb	r3, [r2, #1]
   12918:	lsls	r3, r3, #28
   1291a:	bpl.n	1292a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
   1291c:	ldr	r3, [pc, #212]	; (129f4 <usb_rx_memory+0xf8>)
   1291e:	ldr	r1, [r3, #64]	; 0x40
   12920:	cmp	r1, #0
   12922:	beq.n	129e0 <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   12924:	ldr	r1, [r3, #72]	; 0x48
   12926:	cmp	r1, #0
   12928:	beq.n	129d0 <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   1292a:	ldrb	r3, [r2, #2]
   1292c:	lsls	r5, r3, #28
   1292e:	bpl.n	1293e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
   12930:	ldr	r3, [pc, #192]	; (129f4 <usb_rx_memory+0xf8>)
   12932:	ldr	r1, [r3, #96]	; 0x60
   12934:	cmp	r1, #0
   12936:	beq.n	129dc <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   12938:	ldr	r1, [r3, #104]	; 0x68
   1293a:	cmp	r1, #0
   1293c:	beq.n	129d4 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   1293e:	ldrb	r3, [r2, #3]
   12940:	lsls	r4, r3, #28
   12942:	bpl.n	12956 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
   12944:	ldr	r3, [pc, #172]	; (129f4 <usb_rx_memory+0xf8>)
   12946:	ldr.w	r1, [r3, #128]	; 0x80
   1294a:	cmp	r1, #0
   1294c:	beq.n	129e4 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   1294e:	ldr.w	r1, [r3, #136]	; 0x88
   12952:	cmp	r1, #0
   12954:	beq.n	129d8 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   12956:	ldrb	r3, [r2, #4]
   12958:	lsls	r1, r3, #28
   1295a:	bpl.n	1296c <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
   1295c:	ldr	r3, [pc, #148]	; (129f4 <usb_rx_memory+0xf8>)
   1295e:	ldr.w	r1, [r3, #160]	; 0xa0
   12962:	cmp	r1, #0
   12964:	beq.n	129ec <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   12966:	ldr.w	r1, [r3, #168]	; 0xa8
   1296a:	cbz	r1, 12992 <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
   1296c:	ldrb	r3, [r2, #5]
   1296e:	lsls	r3, r3, #28
   12970:	bpl.n	12984 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
   12972:	ldr	r3, [pc, #128]	; (129f4 <usb_rx_memory+0xf8>)
   12974:	ldr.w	r2, [r3, #192]	; 0xc0
   12978:	cmp	r2, #0
   1297a:	beq.n	129e8 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   1297c:	ldr.w	r2, [r3, #200]	; 0xc8
   12980:	movs	r4, #25
   12982:	cbz	r2, 12994 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
   12984:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
   12986:	ldr	r3, [pc, #112]	; (129f8 <usb_rx_memory+0xfc>)
   12988:	movs	r2, #0
   1298a:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
   1298c:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
   1298e:	b.w	12848 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   12992:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
   12994:	ldr	r1, [pc, #96]	; (129f8 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   12996:	ldr	r5, [pc, #100]	; (129fc <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
   12998:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   1299a:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
   1299e:	add.w	r3, r3, r4, lsl #3
   129a2:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
   129a4:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
   129a6:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
   129a8:	strb	r2, [r1, #0]
				__enable_irq();
   129aa:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
   129ac:	pop	{r4, r5}
   129ae:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
   129b0:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
   129b2:	ldr	r4, [pc, #68]	; (129f8 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   129b4:	ldr	r5, [pc, #72]	; (12a00 <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
   129b6:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   129b8:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
   129bc:	add.w	r3, r3, r2, lsl #3
   129c0:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
   129c2:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
   129c4:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
   129c6:	strb	r2, [r4, #0]
				__enable_irq();
   129c8:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
   129ca:	b.n	129ac <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
   129cc:	movs	r4, #5
   129ce:	b.n	12994 <usb_rx_memory+0x98>
   129d0:	movs	r4, #9
   129d2:	b.n	12994 <usb_rx_memory+0x98>
   129d4:	movs	r4, #13
   129d6:	b.n	12994 <usb_rx_memory+0x98>
   129d8:	movs	r4, #17
   129da:	b.n	12994 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
   129dc:	movs	r2, #12
   129de:	b.n	129b2 <usb_rx_memory+0xb6>
   129e0:	movs	r2, #8
   129e2:	b.n	129b2 <usb_rx_memory+0xb6>
   129e4:	movs	r2, #16
   129e6:	b.n	129b2 <usb_rx_memory+0xb6>
   129e8:	movs	r2, #24
   129ea:	b.n	129b2 <usb_rx_memory+0xb6>
   129ec:	movs	r2, #20
   129ee:	b.n	129b2 <usb_rx_memory+0xb6>
   129f0:	.word	0x00019824
   129f4:	.word	0x1fff0000
   129f8:	.word	0x1fff2c29
   129fc:	.word	0x004000c8
   12a00:	.word	0x00400088

00012a04 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
   12a04:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
   12a06:	cmp	r3, #5
   12a08:	bhi.n	12a46 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
   12a0a:	ldr	r2, [pc, #108]	; (12a78 <usb_tx+0x74>)
   12a0c:	lsls	r0, r0, #5
   12a0e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
   12a12:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
   12a14:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
   12a16:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
   12a18:	ldr	r4, [pc, #96]	; (12a7c <usb_tx+0x78>)
   12a1a:	ldrb	r2, [r4, r3]
   12a1c:	cmp	r2, #3
   12a1e:	bhi.n	12a58 <usb_tx+0x54>
   12a20:	tbb	[pc, r2]
   12a24:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
   12a28:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   12a2a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
   12a2c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   12a2e:	tst.w	r0, #8
   12a32:	ite	ne
   12a34:	movne	r3, #200	; 0xc8
   12a36:	moveq	r3, #136	; 0x88
   12a38:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
   12a3c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
   12a3e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
   12a40:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
   12a42:	cpsie	i
}
   12a44:	pop	{r4, r5}
   12a46:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
   12a48:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
   12a4a:	movs	r2, #2
		break;
   12a4c:	b.n	12a2a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
   12a4e:	movs	r2, #5
   12a50:	b.n	12a2a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
   12a52:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
   12a54:	movs	r2, #4
		break;
   12a56:	b.n	12a2a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
   12a58:	ldr	r2, [pc, #36]	; (12a80 <usb_tx+0x7c>)
   12a5a:	ldr.w	r0, [r2, r3, lsl #2]
   12a5e:	cbz	r0, 12a70 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
   12a60:	ldr	r2, [pc, #32]	; (12a84 <usb_tx+0x80>)
   12a62:	ldr.w	r0, [r2, r3, lsl #2]
   12a66:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
   12a68:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
   12a6c:	cpsie	i
		return;
   12a6e:	b.n	12a44 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
   12a70:	str.w	r1, [r2, r3, lsl #2]
   12a74:	ldr	r2, [pc, #12]	; (12a84 <usb_tx+0x80>)
   12a76:	b.n	12a68 <usb_tx+0x64>
   12a78:	.word	0x1fff0000
   12a7c:	.word	0x1fff2c38
   12a80:	.word	0x1fff2bf0
   12a84:	.word	0x1fff2c08

00012a88 <usb_isr>:
}



void usb_isr(void)
{
   12a88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
   12a8c:	ldr.w	fp, [pc, #780]	; 12d9c <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
   12a90:	ldr.w	sl, [pc, #780]	; 12da0 <usb_isr+0x318>
}



void usb_isr(void)
{
   12a94:	sub	sp, #28
   12a96:	b.n	12b22 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
   12a98:	ldr	r7, [pc, #692]	; (12d50 <usb_isr+0x2c8>)
   12a9a:	mov.w	r8, r3, lsr #2
   12a9e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
   12aa2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
   12aa4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
   12aa8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
   12aac:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
   12aae:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
   12ab2:	and.w	r4, r3, #255	; 0xff
   12ab6:	cmp	r3, #0
   12ab8:	bne.w	12da4 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
   12abc:	ldr.w	r3, [r7, r8, lsl #3]
   12ac0:	lsrs	r3, r3, #16
   12ac2:	uxth	r1, r3
   12ac4:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
   12ac8:	cmp	r3, #0
   12aca:	beq.w	12d3c <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
   12ace:	ldr	r3, [pc, #644]	; (12d54 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
   12ad0:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
   12ad4:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
   12ad8:	ldr.w	r2, [r3, r6, lsl #2]
   12adc:	cmp	r2, #0
   12ade:	beq.w	12e40 <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
   12ae2:	ldr	r5, [pc, #628]	; (12d58 <usb_isr+0x2d0>)
   12ae4:	ldr.w	r3, [r5, r6, lsl #2]
   12ae8:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
   12aea:	ldr	r4, [pc, #624]	; (12d5c <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
   12aec:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
   12af0:	ldrh.w	r3, [r4, r6, lsl #1]
   12af4:	add	r1, r3
   12af6:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
   12afa:	bl	12808 <usb_malloc>
					if (packet) {
   12afe:	cmp	r0, #0
   12b00:	beq.w	12e32 <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
   12b04:	ldr	r2, [pc, #600]	; (12d60 <usb_isr+0x2d8>)
   12b06:	ldr	r3, [pc, #604]	; (12d64 <usb_isr+0x2dc>)
   12b08:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
   12b0c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
   12b10:	it	ne
   12b12:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
   12b14:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
   12b18:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
   12b1c:	movs	r3, #8
   12b1e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
   12b22:	ldrb.w	r4, [fp]
   12b26:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
   12b28:	lsls	r5, r4, #29
   12b2a:	bpl.n	12b64 <usb_isr+0xdc>
		if (usb_configuration) {
   12b2c:	ldr	r3, [pc, #568]	; (12d68 <usb_isr+0x2e0>)
   12b2e:	ldrb	r3, [r3, #0]
   12b30:	cbz	r3, 12b5e <usb_isr+0xd6>
			t = usb_reboot_timer;
   12b32:	ldr	r1, [pc, #568]	; (12d6c <usb_isr+0x2e4>)
   12b34:	ldrb	r2, [r1, #0]
			if (t) {
   12b36:	and.w	r3, r2, #255	; 0xff
   12b3a:	cbz	r2, 12b48 <usb_isr+0xc0>
				usb_reboot_timer = --t;
   12b3c:	subs	r3, #1
   12b3e:	uxtb	r3, r3
   12b40:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
   12b42:	cmp	r3, #0
   12b44:	beq.w	134c6 <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
   12b48:	ldr	r1, [pc, #548]	; (12d70 <usb_isr+0x2e8>)
   12b4a:	ldrb	r2, [r1, #0]
			if (t) {
   12b4c:	and.w	r3, r2, #255	; 0xff
   12b50:	cbz	r2, 12b5e <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
   12b52:	subs	r3, #1
   12b54:	uxtb	r3, r3
   12b56:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
   12b58:	cmp	r3, #0
   12b5a:	beq.w	12e2c <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
   12b5e:	movs	r3, #4
   12b60:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
   12b64:	and.w	r3, r4, #8
   12b68:	and.w	r2, r3, #255	; 0xff
   12b6c:	cmp	r3, #0
   12b6e:	beq.w	12dfe <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
   12b72:	ldrb.w	r3, [sl]
   12b76:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
   12b78:	lsrs	r6, r3, #4
   12b7a:	bne.n	12a98 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
   12b7c:	lsrs	r0, r3, #2
   12b7e:	ldr.w	r9, [pc, #464]	; 12d50 <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
   12b82:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
   12b86:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
   12b8a:	ubfx	r2, r2, #2, #4
   12b8e:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
   12b90:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
   12b92:	cmp	r2, #12
   12b94:	bhi.w	12d1e <usb_isr+0x296>
   12b98:	tbh	[pc, r2, lsl #1]
   12b9c:	.word	0x00c500c5
   12ba0:	.word	0x00c100c1
   12ba4:	.word	0x00c100c1
   12ba8:	.word	0x00c100c1
   12bac:	.word	0x00c1008b
   12bb0:	.word	0x00c100c1
   12bb4:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
   12bb6:	ldr	r2, [r1, #0]
   12bb8:	ldr	r5, [pc, #440]	; (12d74 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
   12bba:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
   12bbc:	ldr	r7, [pc, #440]	; (12d78 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
   12bbe:	ldr	r6, [pc, #444]	; (12d7c <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
   12bc0:	ldr	r4, [pc, #412]	; (12d60 <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
   12bc2:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   12bc4:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
   12bc6:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
   12bca:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
   12bcc:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
   12bce:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   12bd0:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
   12bd4:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
   12bd6:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
   12bda:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
   12bde:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   12be0:	beq.w	13282 <usb_isr+0x7fa>
   12be4:	bls.w	12e48 <usb_isr+0x3c0>
   12be8:	movw	r4, #8993	; 0x2321
   12bec:	cmp	r1, r4
   12bee:	beq.w	1328c <usb_isr+0x804>
   12bf2:	bhi.w	12f7e <usb_isr+0x4f6>
   12bf6:	movw	r4, #8225	; 0x2021
   12bfa:	cmp	r1, r4
   12bfc:	beq.w	12f94 <usb_isr+0x50c>
   12c00:	movw	r4, #8737	; 0x2221
   12c04:	cmp	r1, r4
   12c06:	beq.w	130de <usb_isr+0x656>
   12c0a:	cmp.w	r1, #2304	; 0x900
   12c0e:	bne.w	12f8e <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
   12c12:	ldr	r2, [pc, #340]	; (12d68 <usb_isr+0x2e0>)
   12c14:	ldr	r4, [pc, #312]	; (12d50 <usb_isr+0x2c8>)
   12c16:	ldrb	r1, [r5, #2]
   12c18:	strb	r1, [r2, #0]
   12c1a:	add.w	r5, r4, #192	; 0xc0
   12c1e:	b.n	12c26 <usb_isr+0x19e>
   12c20:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
   12c22:	cmp	r5, r4
   12c24:	beq.n	12c3a <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
   12c26:	ldr	r3, [r4, #32]
   12c28:	lsls	r0, r3, #24
   12c2a:	bpl.n	12c20 <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
   12c2c:	ldr	r0, [r4, #36]	; 0x24
   12c2e:	adds	r4, #8
   12c30:	subs	r0, #8
   12c32:	bl	12848 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
   12c36:	cmp	r5, r4
   12c38:	bne.n	12c26 <usb_isr+0x19e>
   12c3a:	ldr	r4, [pc, #324]	; (12d80 <usb_isr+0x2f8>)
   12c3c:	ldr	r2, [pc, #276]	; (12d54 <usb_isr+0x2cc>)
   12c3e:	ldr	r1, [pc, #324]	; (12d84 <usb_isr+0x2fc>)
   12c40:	ldr	r0, [pc, #324]	; (12d88 <usb_isr+0x300>)
   12c42:	ldr	r5, [pc, #276]	; (12d58 <usb_isr+0x2d0>)
   12c44:	str	r4, [sp, #4]
   12c46:	movs	r3, #0
   12c48:	ldr	r4, [pc, #272]	; (12d5c <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
   12c4a:	str	r6, [sp, #20]
   12c4c:	str	r5, [sp, #8]
   12c4e:	str	r4, [sp, #12]
   12c50:	mov	r8, r0
   12c52:	str	r7, [sp, #16]
   12c54:	mov	r6, r2
   12c56:	mov	r5, r1
   12c58:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
   12c5a:	ldr	r0, [r6, #0]
			while (p) {
   12c5c:	cbz	r0, 12c6a <usb_isr+0x1e2>
				n = p->next;
   12c5e:	ldr	r7, [r0, #4]
				usb_free(p);
   12c60:	bl	12848 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
   12c64:	mov	r0, r7
   12c66:	cmp	r7, #0
   12c68:	bne.n	12c5e <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
   12c6a:	movs	r3, #0
   12c6c:	str	r3, [r6, #0]
			rx_last[i] = NULL;
   12c6e:	ldr	r3, [sp, #8]
			p = tx_first[i];
   12c70:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
   12c72:	mov	r2, r3
   12c74:	movs	r3, #0
   12c76:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
   12c7a:	cbz	r0, 12c88 <usb_isr+0x200>
				n = p->next;
   12c7c:	ldr	r7, [r0, #4]
				usb_free(p);
   12c7e:	bl	12848 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
   12c82:	mov	r0, r7
   12c84:	cmp	r7, #0
   12c86:	bne.n	12c7c <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
   12c88:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
   12c8a:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
   12c8c:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
   12c8e:	str	r2, [r5, #0]
			tx_last[i] = NULL;
   12c90:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
   12c94:	ldr	r2, [sp, #12]
   12c96:	mov.w	r1, #0
			switch (tx_state[i]) {
   12c9a:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
   12c9c:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
   12ca0:	cmp	r3, #3
   12ca2:	bhi.w	131b8 <usb_isr+0x730>
   12ca6:	tbh	[pc, r3, lsl #1]
   12caa:	.short	0x02e7
   12cac:	.word	0x02e70283
   12cb0:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
   12cb2:	ldr	r7, [pc, #196]	; (12d78 <usb_isr+0x2f0>)
   12cb4:	ldr	r2, [r7, #0]
		if (data) {
   12cb6:	cbz	r2, 12d0a <usb_isr+0x282>
			size = ep0_tx_len;
   12cb8:	ldr	r3, [pc, #208]	; (12d8c <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12cba:	ldr	r6, [pc, #192]	; (12d7c <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12cbc:	ldr	r1, [pc, #208]	; (12d90 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
   12cbe:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12cc0:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12cc2:	ldrb	r5, [r1, #0]
   12cc4:	cmp	r0, #64	; 0x40
   12cc6:	mov	lr, r0
   12cc8:	orr.w	r8, r5, #2
   12ccc:	it	cs
   12cce:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12cd2:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
   12cd4:	eor.w	r4, r4, #1
   12cd8:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
   12cda:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12cde:	ite	eq
   12ce0:	moveq	r4, #136	; 0x88
   12ce2:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12ce4:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
   12ce8:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   12cea:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12cee:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12cf2:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
   12cf4:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12cf6:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
   12cfa:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   12cfc:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
   12cfe:	cbnz	r0, 12d08 <usb_isr+0x280>
   12d00:	cmp.w	lr, #64	; 0x40
   12d04:	it	ne
   12d06:	movne	r2, #0
   12d08:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
   12d0a:	ldr	r3, [pc, #104]	; (12d74 <usb_isr+0x2ec>)
   12d0c:	ldrh	r2, [r3, #0]
   12d0e:	cmp.w	r2, #1280	; 0x500
   12d12:	bne.n	12d1e <usb_isr+0x296>
			setup.bRequest = 0;
   12d14:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
   12d16:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
   12d18:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
   12d1a:	ldr	r3, [pc, #120]	; (12d94 <usb_isr+0x30c>)
   12d1c:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   12d1e:	ldr	r2, [pc, #120]	; (12d98 <usb_isr+0x310>)
   12d20:	movs	r3, #1
   12d22:	strb	r3, [r2, #0]
   12d24:	b.n	12b1c <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
   12d26:	ldr	r2, [pc, #76]	; (12d74 <usb_isr+0x2ec>)
   12d28:	ldrh	r5, [r2, #0]
   12d2a:	movw	r4, #8225	; 0x2021
   12d2e:	cmp	r5, r4
   12d30:	beq.w	12f28 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
   12d34:	ldr	r2, [pc, #40]	; (12d60 <usb_isr+0x2d8>)
   12d36:	str.w	r2, [r9, r0, lsl #3]
   12d3a:	b.n	12d1e <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
   12d3c:	ldr	r2, [pc, #32]	; (12d60 <usb_isr+0x2d8>)
   12d3e:	ldr	r3, [pc, #36]	; (12d64 <usb_isr+0x2dc>)
   12d40:	tst.w	r9, #8
   12d44:	it	ne
   12d46:	movne	r3, r2
   12d48:	str.w	r3, [r7, r8, lsl #3]
   12d4c:	b.n	12b1c <usb_isr+0x94>
   12d4e:	nop
   12d50:	.word	0x1fff0000
   12d54:	.word	0x1fff2b94
   12d58:	.word	0x1fff2b38
   12d5c:	.word	0x1fff2cb0
   12d60:	.word	0x004000c8
   12d64:	.word	0x00400088
   12d68:	.word	0x1fff2c34
   12d6c:	.word	0x1fff2bad
   12d70:	.word	0x1fff2b1c
   12d74:	.word	0x1fff2c20
   12d78:	.word	0x1fff2b34
   12d7c:	.word	0x1fff2bac
   12d80:	.word	0x1fff2c38
   12d84:	.word	0x1fff2bf0
   12d88:	.word	0x1fff2c08
   12d8c:	.word	0x1fff2b50
   12d90:	.word	0x1fff2c28
   12d94:	.word	0x40072098
   12d98:	.word	0x40072094
   12d9c:	.word	0x40072080
   12da0:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
   12da4:	bl	12848 <usb_free>
				packet = tx_first[endpoint];
   12da8:	ldr	r2, [pc, #692]	; (13060 <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
   12daa:	ldr	r1, [pc, #696]	; (13064 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
   12dac:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
   12db0:	cmp	r3, #0
   12db2:	beq.w	12f08 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
   12db6:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
   12db8:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
   12dba:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
   12dbe:	add.w	r2, r3, #8
   12dc2:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
   12dc6:	cmp	r4, #3
   12dc8:	bhi.n	12dd6 <usb_isr+0x34e>
   12dca:	tbb	[pc, r4]
   12dce:	.short	0x0f12
   12dd0:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
   12dd2:	movs	r2, #4
   12dd4:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
   12dd6:	ldrh	r2, [r3, #0]
   12dd8:	tst.w	r9, #8
   12ddc:	ite	eq
   12dde:	moveq	r3, #136	; 0x88
   12de0:	movne	r3, #200	; 0xc8
   12de2:	orr.w	r3, r3, r2, lsl #16
   12de6:	str.w	r3, [r7, r8, lsl #3]
   12dea:	b.n	12b1c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
   12dec:	movs	r2, #2
   12dee:	strb	r2, [r1, r6]
						break;
   12df0:	b.n	12dd6 <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
   12df2:	movs	r2, #3
   12df4:	strb	r2, [r1, r6]
						break;
   12df6:	b.n	12dd6 <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
   12df8:	movs	r2, #5
   12dfa:	strb	r2, [r1, r6]
						break;
   12dfc:	b.n	12dd6 <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
   12dfe:	lsls	r0, r4, #31
   12e00:	bmi.w	12f9c <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
   12e04:	lsls	r1, r4, #24
   12e06:	bmi.w	13038 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
   12e0a:	lsls	r2, r4, #30
   12e0c:	bpl.n	12e1c <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
   12e0e:	ldr	r2, [pc, #600]	; (13068 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
   12e10:	ldr	r1, [pc, #600]	; (1306c <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
   12e12:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
   12e14:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
   12e16:	uxtb	r3, r3
		USB0_ERRSTAT = err;
   12e18:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
   12e1a:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
   12e1c:	lsls	r3, r4, #27
   12e1e:	bpl.n	12e26 <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
   12e20:	ldr	r3, [pc, #584]	; (1306c <usb_isr+0x5e4>)
   12e22:	movs	r2, #16
   12e24:	strb	r2, [r3, #0]
	}

}
   12e26:	add	sp, #28
   12e28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
   12e2c:	bl	11fb8 <usb_serial_flush_callback>
   12e30:	b.n	12b5e <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
   12e32:	ldr	r2, [pc, #572]	; (13070 <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
   12e34:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
   12e38:	ldrb	r3, [r2, #0]
   12e3a:	adds	r3, #1
   12e3c:	strb	r3, [r2, #0]
   12e3e:	b.n	12b1c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
   12e40:	str.w	r0, [r3, r6, lsl #2]
   12e44:	ldr	r5, [pc, #556]	; (13074 <usb_isr+0x5ec>)
   12e46:	b.n	12aea <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   12e48:	movw	r4, #770	; 0x302
   12e4c:	cmp	r1, r4
   12e4e:	beq.w	13294 <usb_isr+0x80c>
   12e52:	bhi.w	12ff6 <usb_isr+0x56e>
   12e56:	cmp	r1, #130	; 0x82
   12e58:	beq.w	1318a <usb_isr+0x702>
   12e5c:	cmp.w	r1, #258	; 0x102
   12e60:	beq.w	130b8 <usb_isr+0x630>
   12e64:	cmp	r1, #128	; 0x80
   12e66:	bne.w	12f8e <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   12e6a:	ldr	r4, [pc, #524]	; (13078 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
   12e6c:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   12e6e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
   12e70:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   12e72:	ldrh	r2, [r5, #6]
   12e74:	cmp	r2, r0
   12e76:	bcs.w	13416 <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12e7a:	ldr	r1, [pc, #512]	; (1307c <usb_isr+0x5f4>)
   12e7c:	ldrb	r5, [r1, #0]
   12e7e:	cmp	r2, #64	; 0x40
   12e80:	mov	lr, r2
   12e82:	orr.w	ip, r5, #2
   12e86:	it	cs
   12e88:	movcs.w	lr, #64	; 0x40
   12e8c:	add.w	r3, r4, lr
   12e90:	add.w	r0, r9, ip, lsl #3
   12e94:	str	r3, [sp, #4]
   12e96:	movs	r3, #1
   12e98:	str	r4, [r0, #4]
   12e9a:	mov.w	r8, lr, lsl #16
   12e9e:	rsb	r0, lr, r2
   12ea2:	str	r3, [sp, #8]
   12ea4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12ea6:	movs	r4, #200	; 0xc8
   12ea8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   12eac:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12eb0:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
   12eb4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
   12eb6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12eb8:	ldr.w	ip, [pc, #472]	; 13094 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
   12ebc:	ldr	r3, [pc, #448]	; (13080 <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
   12ebe:	ldr.w	r8, [pc, #444]	; 1307c <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
   12ec2:	cmp	r0, #0
   12ec4:	bne.w	13120 <usb_isr+0x698>
   12ec8:	cmp.w	lr, #64	; 0x40
   12ecc:	bne.n	12f94 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12ece:	orr.w	ip, r4, #2
   12ed2:	add.w	r3, r9, ip, lsl #3
   12ed6:	ldr	r4, [sp, #4]
   12ed8:	ldr.w	lr, [pc, #440]	; 13094 <usb_isr+0x60c>
   12edc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12ede:	cmp	r2, #0
   12ee0:	bne.w	1314c <usb_isr+0x6c4>
   12ee4:	lsls	r2, r0, #16
   12ee6:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
   12eea:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12eee:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   12ef2:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   12ef4:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
   12ef6:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   12ef8:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
   12efa:	cmp	r0, #64	; 0x40
   12efc:	bne.n	12f94 <usb_isr+0x50c>
   12efe:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
   12f00:	ldr	r2, [pc, #384]	; (13084 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
   12f02:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
   12f04:	strh	r0, [r2, #0]
   12f06:	b.n	12f94 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
   12f08:	ldrb	r3, [r1, r6]
   12f0a:	cmp	r3, #3
   12f0c:	bhi.w	1317c <usb_isr+0x6f4>
   12f10:	add	r2, pc, #4	; (adr r2, 12f18 <usb_isr+0x490>)
   12f12:	ldr.w	pc, [r2, r3, lsl #2]
   12f16:	nop
   12f18:	.word	0x00012b1d
   12f1c:	.word	0x00012b1d
   12f20:	.word	0x00012ff1
   12f24:	.word	0x00012feb
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
   12f28:	ldrh	r2, [r2, #4]
   12f2a:	cbnz	r2, 12f50 <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
   12f2c:	ldr	r2, [pc, #344]	; (13088 <usb_isr+0x600>)
   12f2e:	ldrb	r5, [r1, #0]
   12f30:	ldrb	r4, [r1, #1]
   12f32:	strb	r5, [r2, #0]
   12f34:	strb	r4, [r2, #1]
   12f36:	ldrb	r5, [r1, #2]
   12f38:	ldrb	r4, [r1, #3]
   12f3a:	strb	r5, [r2, #2]
   12f3c:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   12f3e:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
   12f40:	ldrb	r5, [r1, #4]
   12f42:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   12f44:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
   12f46:	ldrb	r5, [r1, #5]
   12f48:	ldrb	r1, [r1, #6]
   12f4a:	strb	r5, [r2, #5]
   12f4c:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   12f4e:	beq.n	1304c <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12f50:	ldr	r1, [pc, #296]	; (1307c <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12f52:	ldr	r6, [pc, #300]	; (13080 <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12f54:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12f56:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   12f58:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12f5c:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12f5e:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   12f62:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   12f64:	ite	eq
   12f66:	moveq	r1, #136	; 0x88
   12f68:	movne	r1, #200	; 0xc8
   12f6a:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12f6e:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   12f72:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12f76:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   12f78:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   12f7a:	str	r1, [r2, #4]
   12f7c:	b.n	12d34 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   12f7e:	movw	r2, #26273	; 0x66a1
   12f82:	cmp	r1, r2
   12f84:	beq.n	12f8e <usb_isr+0x506>
   12f86:	movw	r2, #26529	; 0x67a1
   12f8a:	cmp	r1, r2
   12f8c:	beq.n	13054 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   12f8e:	ldr	r2, [pc, #252]	; (1308c <usb_isr+0x604>)
   12f90:	movs	r3, #15
   12f92:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   12f94:	ldr	r2, [pc, #248]	; (13090 <usb_isr+0x608>)
   12f96:	movs	r3, #1
   12f98:	strb	r3, [r2, #0]
   12f9a:	b.n	12d1e <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
   12f9c:	ldr	r3, [pc, #244]	; (13094 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
   12f9e:	ldr	r0, [pc, #240]	; (13090 <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
   12fa0:	ldr	r1, [pc, #216]	; (1307c <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
   12fa2:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
   12fa4:	mov.w	lr, #2
   12fa8:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   12fac:	ldr	r7, [pc, #220]	; (1308c <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
   12fae:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
   12fb0:	ldr	r1, [pc, #228]	; (13098 <usb_isr+0x610>)
   12fb2:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
   12fb4:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
   12fb6:	ldr	r6, [pc, #176]	; (13068 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
   12fb8:	ldr	r5, [pc, #176]	; (1306c <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
   12fba:	ldr	r4, [pc, #224]	; (1309c <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
   12fbc:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   12fbe:	movs	r1, #13
   12fc0:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
   12fc2:	movs	r1, #255	; 0xff
   12fc4:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
   12fc6:	ldr.w	lr, [pc, #236]	; 130b4 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
   12fca:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
   12fcc:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
   12fce:	ldr	r5, [pc, #208]	; (130a0 <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
   12fd0:	ldr	r2, [pc, #208]	; (130a4 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
   12fd2:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
   12fd6:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
   12fd8:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
   12fda:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
   12fde:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
   12fe0:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
   12fe2:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
   12fe4:	add	sp, #28
   12fe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
   12fea:	movs	r3, #1
   12fec:	strb	r3, [r1, r6]
						break;
   12fee:	b.n	12b1c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
   12ff0:	movs	r3, #0
   12ff2:	strb	r3, [r1, r6]
						break;
   12ff4:	b.n	12b1c <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   12ff6:	cmp.w	r1, #1280	; 0x500
   12ffa:	beq.w	1328c <usb_isr+0x804>
   12ffe:	bcc.n	12f8e <usb_isr+0x506>
   13000:	sub.w	r1, r1, #1664	; 0x680
   13004:	cmp	r1, #1
   13006:	bhi.n	12f8e <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
   13008:	ldr	r2, [pc, #156]	; (130a8 <usb_isr+0x620>)
   1300a:	ldr	r4, [r2, #4]
   1300c:	cmp	r4, #0
   1300e:	beq.n	12f8e <usb_isr+0x506>
   13010:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   13012:	ldrh.w	lr, [r5, #4]
   13016:	b.n	13020 <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
   13018:	adds	r2, #12
			if (list->addr == NULL) break;
   1301a:	ldr	r4, [r2, #4]
   1301c:	cmp	r4, #0
   1301e:	beq.n	12f8e <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   13020:	ldrh	r3, [r2, #0]
   13022:	cmp	r3, r0
   13024:	bne.n	13018 <usb_isr+0x590>
   13026:	ldrh	r3, [r2, #2]
   13028:	cmp	r3, lr
   1302a:	bne.n	13018 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
   1302c:	lsrs	r0, r0, #8
   1302e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
   13030:	ite	eq
   13032:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
   13034:	ldrhne	r0, [r2, #8]
   13036:	b.n	12e72 <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   13038:	ldr	r1, [pc, #80]	; (1308c <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
   1303a:	ldr	r3, [pc, #48]	; (1306c <usb_isr+0x5e4>)
   1303c:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   1303e:	movs	r0, #13
   13040:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
   13042:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
   13044:	lsls	r2, r4, #30
   13046:	bpl.w	12e1c <usb_isr+0x394>
   1304a:	b.n	12e0e <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
   1304c:	ldr	r2, [pc, #92]	; (130ac <usb_isr+0x624>)
   1304e:	movs	r1, #15
   13050:	strb	r1, [r2, #0]
   13052:	b.n	12f50 <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
   13054:	ldr	r4, [pc, #32]	; (13078 <usb_isr+0x5f0>)
   13056:	ldr	r3, [pc, #88]	; (130b0 <usb_isr+0x628>)
   13058:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
   1305a:	movs	r0, #4
   1305c:	b.n	12e72 <usb_isr+0x3ea>
   1305e:	nop
   13060:	.word	0x1fff2bf0
   13064:	.word	0x1fff2c38
   13068:	.word	0x40072088
   1306c:	.word	0x40072080
   13070:	.word	0x1fff2c29
   13074:	.word	0x1fff2b38
   13078:	.word	0x1fff2c2c
   1307c:	.word	0x1fff2c28
   13080:	.word	0x1fff2bac
   13084:	.word	0x1fff2b50
   13088:	.word	0x1fff2ca4
   1308c:	.word	0x400720c0
   13090:	.word	0x40072094
   13094:	.word	0x1fff0000
   13098:	.word	0x00400088
   1309c:	.word	0x40072098
   130a0:	.word	0x1fff2b54
   130a4:	.word	0x1fff2bb0
   130a8:	.word	0x0001982c
   130ac:	.word	0x1fff2bad
   130b0:	.word	0x20010004
   130b4:	.word	0x4007208c
   130b8:	ldrh	r1, [r5, #4]
   130ba:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   130be:	cmp	r1, #6
   130c0:	bhi.w	12f8e <usb_isr+0x506>
   130c4:	ldrh	r2, [r5, #2]
   130c6:	cmp	r2, #0
   130c8:	bne.w	12f8e <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
   130cc:	ldr	r4, [pc, #724]	; (133a4 <usb_isr+0x91c>)
   130ce:	str	r0, [sp, #8]
   130d0:	lsls	r1, r1, #2
   130d2:	add	r4, r1
   130d4:	ldrb	r1, [r4, #0]
   130d6:	bic.w	r1, r1, #2
   130da:	strb	r1, [r4, #0]
   130dc:	b.n	130f8 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
   130de:	ldrh	r1, [r5, #4]
   130e0:	cmp	r1, #0
   130e2:	bne.w	132ba <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   130e6:	ldr	r3, [pc, #704]	; (133a8 <usb_isr+0x920>)
   130e8:	ldr	r2, [pc, #704]	; (133ac <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
   130ea:	ldr	r4, [pc, #708]	; (133b0 <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   130ec:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   130ee:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   130f0:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   130f2:	str	r0, [sp, #8]
   130f4:	mov	r2, r1
   130f6:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   130f8:	movs	r0, #0
   130fa:	str	r0, [sp, #4]
   130fc:	mov	r8, r0
   130fe:	mov	lr, r0
   13100:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   13102:	ldr	r1, [pc, #688]	; (133b4 <usb_isr+0x92c>)
   13104:	ldrb	r5, [r1, #0]
   13106:	orr.w	ip, r5, #2
   1310a:	add.w	r3, r9, ip, lsl #3
   1310e:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   13110:	ldr	r3, [sp, #8]
   13112:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   13114:	ldr	r3, [sp, #12]
   13116:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   13118:	ite	eq
   1311a:	moveq	r4, #136	; 0x88
   1311c:	movne	r4, #200	; 0xc8
   1311e:	b.n	12ea8 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
   13120:	cmp	r0, #64	; 0x40
   13122:	bls.w	12ece <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   13126:	orr.w	r4, r4, #2
   1312a:	add.w	r1, ip, r4, lsl #3
   1312e:	ldr	r6, [sp, #4]
   13130:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   13132:	cbz	r2, 13164 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
   13134:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   13138:	ldr	r2, [pc, #636]	; (133b8 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
   1313a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   1313c:	mov	r3, r6
   1313e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   13140:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   13144:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   13146:	str.w	r2, [ip, r4, lsl #3]
   1314a:	b.n	12f00 <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
   1314c:	ldrb.w	r3, [sp, #8]
   13150:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   13152:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   13154:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   13156:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   13158:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   1315c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1315e:	str.w	r2, [lr, ip, lsl #3]
   13162:	b.n	12efa <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
   13164:	ldrb.w	r1, [sp, #8]
   13168:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   1316a:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1316c:	ldr	r2, [pc, #588]	; (133bc <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   1316e:	strb.w	r5, [r8]
   13172:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   13174:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   13176:	str.w	r2, [ip, r4, lsl #3]
   1317a:	b.n	12f00 <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
   1317c:	tst.w	r9, #8
   13180:	ite	eq
   13182:	moveq	r3, #2
   13184:	movne	r3, #3
   13186:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
   13188:	b.n	12b1c <usb_isr+0x94>
   1318a:	ldrh	r1, [r5, #4]
   1318c:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
   13190:	cmp	r1, #6
   13192:	bhi.w	12f8e <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
   13196:	ldr	r3, [pc, #524]	; (133a4 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
   13198:	ldr	r4, [pc, #548]	; (133c0 <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
   1319a:	lsls	r1, r1, #2
   1319c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
   1319e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
   131a0:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
   131a2:	ldrb	r2, [r3, #0]
   131a4:	lsls	r3, r2, #30
   131a6:	bpl.w	132be <usb_isr+0x836>
   131aa:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
   131ac:	movs	r0, #2
   131ae:	b.n	12e72 <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
   131b0:	ldr	r3, [sp, #4]
   131b2:	mov.w	r2, #1
   131b6:	strb	r2, [r3, #0]
   131b8:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
   131ba:	adds	r4, #1
   131bc:	adds	r3, #1
   131be:	cmp	r4, #6
   131c0:	add.w	r6, r6, #4
   131c4:	add.w	r5, r5, #4
   131c8:	str	r3, [sp, #4]
   131ca:	bne.w	12c5a <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   131ce:	ldr	r5, [pc, #500]	; (133c4 <usb_isr+0x93c>)
			*reg = epconf;
   131d0:	ldr	r1, [pc, #500]	; (133c8 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   131d2:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
   131d4:	ldr	r4, [pc, #500]	; (133cc <usb_isr+0x944>)
   131d6:	ldr	r7, [sp, #16]
   131d8:	ldr	r6, [sp, #20]
   131da:	movs	r0, #0
   131dc:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   131de:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   131e0:	lsls	r1, r2, #28
   131e2:	bmi.w	132f0 <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   131e6:	ldrb	r2, [r5, #1]
			*reg = epconf;
   131e8:	ldr	r1, [pc, #484]	; (133d0 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   131ea:	ldr.w	r8, [pc, #504]	; 133e4 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   131ee:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   131f0:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   131f2:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   131f4:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
   131f8:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   131fc:	bmi.n	132c2 <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   131fe:	ldrb	r2, [r5, #2]
			*reg = epconf;
   13200:	ldr	r1, [pc, #464]	; (133d4 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   13202:	ldr.w	r8, [pc, #480]	; 133e4 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   13206:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   13208:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1320a:	mov.w	r1, #0
   1320e:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
   13212:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   13216:	bmi.w	133ec <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1321a:	ldrb	r2, [r5, #3]
			*reg = epconf;
   1321c:	ldr	r1, [pc, #440]	; (133d8 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1321e:	ldr.w	r8, [pc, #452]	; 133e4 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   13222:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   13224:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   13226:	mov.w	r1, #0
   1322a:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
   1322e:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   13232:	bmi.w	1337a <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   13236:	ldr	r1, [pc, #420]	; (133dc <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   13238:	ldrb	r2, [r5, #4]
			*reg = epconf;
   1323a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1323c:	movs	r1, #0
   1323e:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
   13242:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   13246:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   13248:	ldr.w	r8, [pc, #408]	; 133e4 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   1324c:	bmi.n	1334c <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1324e:	ldrb	r2, [r5, #5]
			*reg = epconf;
   13250:	ldr	r1, [pc, #396]	; (133e0 <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   13252:	ldr	r5, [pc, #400]	; (133e4 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   13254:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   13256:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   13258:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1325a:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
   1325e:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   13262:	bmi.n	1331e <usb_isr+0x896>
   13264:	ldrb	r3, [r6, #0]
   13266:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   13268:	movs	r1, #0
   1326a:	eor.w	r2, r3, #1
   1326e:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
   13272:	str.w	r1, [r9, #216]	; 0xd8
   13276:	b.n	130f8 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
   13278:	ldr	r3, [sp, #4]
   1327a:	mov.w	r2, #0
   1327e:	strb	r2, [r3, #0]
   13280:	b.n	131b8 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   13282:	ldr	r2, [pc, #356]	; (133e8 <usb_isr+0x960>)
   13284:	ldr	r4, [pc, #312]	; (133c0 <usb_isr+0x938>)
   13286:	ldrb	r2, [r2, #0]
   13288:	strb	r2, [r4, #0]
   1328a:	b.n	12e72 <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   1328c:	movs	r3, #1
   1328e:	movs	r2, #0
   13290:	str	r3, [sp, #8]
   13292:	b.n	130f8 <usb_isr+0x670>
   13294:	ldrh	r1, [r5, #4]
   13296:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   1329a:	cmp	r1, #6
   1329c:	bhi.w	12f8e <usb_isr+0x506>
   132a0:	ldrh	r2, [r5, #2]
   132a2:	cmp	r2, #0
   132a4:	bne.w	12f8e <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
   132a8:	ldr	r4, [pc, #248]	; (133a4 <usb_isr+0x91c>)
   132aa:	str	r0, [sp, #8]
   132ac:	lsls	r1, r1, #2
   132ae:	add	r4, r1
   132b0:	ldrb	r1, [r4, #0]
   132b2:	orr.w	r1, r1, #2
   132b6:	strb	r1, [r4, #0]
   132b8:	b.n	130f8 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
   132ba:	str	r0, [sp, #8]
   132bc:	b.n	130f8 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
   132be:	movs	r0, #2
   132c0:	b.n	12e72 <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   132c2:	bl	12808 <usb_malloc>
				if (p) {
   132c6:	cmp	r0, #0
   132c8:	beq.w	134a2 <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
   132cc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   132ce:	ldr	r2, [pc, #236]	; (133bc <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   132d0:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   132d4:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   132d8:	bl	12808 <usb_malloc>
				if (p) {
   132dc:	cmp	r0, #0
   132de:	beq.w	13496 <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
   132e2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   132e4:	ldr	r2, [pc, #208]	; (133b8 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   132e6:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   132ea:	str.w	r2, [r9, #72]	; 0x48
   132ee:	b.n	131fe <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   132f0:	bl	12808 <usb_malloc>
				if (p) {
   132f4:	cmp	r0, #0
   132f6:	beq.w	13472 <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
   132fa:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   132fc:	ldr	r2, [pc, #188]	; (133bc <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   132fe:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   13302:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   13306:	bl	12808 <usb_malloc>
				if (p) {
   1330a:	cmp	r0, #0
   1330c:	beq.w	13466 <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
   13310:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   13312:	ldr	r2, [pc, #164]	; (133b8 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   13314:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   13318:	str.w	r2, [r9, #40]	; 0x28
   1331c:	b.n	131e6 <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   1331e:	bl	12808 <usb_malloc>
				if (p) {
   13322:	cmp	r0, #0
   13324:	beq.w	1345a <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
   13328:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1332a:	ldr	r2, [pc, #144]	; (133bc <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   1332c:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   13330:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   13334:	bl	12808 <usb_malloc>
				if (p) {
   13338:	cmp	r0, #0
   1333a:	beq.w	1344e <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
   1333e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   13340:	ldr	r2, [pc, #116]	; (133b8 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   13342:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   13346:	str.w	r2, [r9, #200]	; 0xc8
   1334a:	b.n	13264 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   1334c:	bl	12808 <usb_malloc>
				if (p) {
   13350:	cmp	r0, #0
   13352:	beq.w	1348a <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
   13356:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   13358:	ldr	r2, [pc, #96]	; (133bc <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   1335a:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1335e:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   13362:	bl	12808 <usb_malloc>
				if (p) {
   13366:	cmp	r0, #0
   13368:	beq.w	1347e <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
   1336c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   1336e:	ldr	r2, [pc, #72]	; (133b8 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   13370:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   13374:	str.w	r2, [r9, #168]	; 0xa8
   13378:	b.n	1324e <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   1337a:	bl	12808 <usb_malloc>
				if (p) {
   1337e:	cmp	r0, #0
   13380:	beq.n	13442 <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
   13382:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   13384:	ldr	r2, [pc, #52]	; (133bc <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   13386:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1338a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   1338e:	bl	12808 <usb_malloc>
				if (p) {
   13392:	cmp	r0, #0
   13394:	beq.n	13436 <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
   13396:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   13398:	ldr	r2, [pc, #28]	; (133b8 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   1339a:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   1339e:	str.w	r2, [r9, #136]	; 0x88
   133a2:	b.n	13236 <usb_isr+0x7ae>
   133a4:	.word	0x400720c0
   133a8:	.word	0x1fff2b30
   133ac:	.word	0x1fff2cac
   133b0:	.word	0x1fff2b2c
   133b4:	.word	0x1fff2c28
   133b8:	.word	0x004000c8
   133bc:	.word	0x00400088
   133c0:	.word	0x1fff2c2c
   133c4:	.word	0x00019824
   133c8:	.word	0x400720c4
   133cc:	.word	0x1fff2c29
   133d0:	.word	0x400720c8
   133d4:	.word	0x400720cc
   133d8:	.word	0x400720d0
   133dc:	.word	0x400720d4
   133e0:	.word	0x400720d8
   133e4:	.word	0x1fff0000
   133e8:	.word	0x1fff2c34
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   133ec:	bl	12808 <usb_malloc>
				if (p) {
   133f0:	cmp	r0, #0
   133f2:	beq.n	134ba <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
   133f4:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   133f6:	ldr	r2, [pc, #208]	; (134c8 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
   133f8:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   133fc:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   13400:	bl	12808 <usb_malloc>
				if (p) {
   13404:	cmp	r0, #0
   13406:	beq.n	134ae <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
   13408:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   1340a:	ldr	r2, [pc, #192]	; (134cc <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   1340c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   13410:	str.w	r2, [r9, #104]	; 0x68
   13414:	b.n	1321a <usb_isr+0x792>
   13416:	cmp	r0, #64	; 0x40
   13418:	mov	lr, r0
   1341a:	it	cs
   1341c:	movcs.w	lr, #64	; 0x40
   13420:	add.w	r3, r4, lr
   13424:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   13426:	movs	r3, #1
   13428:	rsb	r0, lr, r0
   1342c:	mov.w	r8, lr, lsl #16
   13430:	movs	r2, #0
   13432:	str	r3, [sp, #8]
   13434:	b.n	13102 <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   13436:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   13438:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
   1343c:	adds	r2, #1
   1343e:	strb	r2, [r4, #0]
   13440:	b.n	13236 <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   13442:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   13444:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
   13448:	adds	r2, #1
   1344a:	strb	r2, [r4, #0]
   1344c:	b.n	1338e <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   1344e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   13450:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
   13454:	adds	r2, #1
   13456:	strb	r2, [r4, #0]
   13458:	b.n	13264 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   1345a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   1345c:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
   13460:	adds	r2, #1
   13462:	strb	r2, [r4, #0]
   13464:	b.n	13334 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   13466:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   13468:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
   1346c:	adds	r2, #1
   1346e:	strb	r2, [r4, #0]
   13470:	b.n	131e6 <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   13472:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   13474:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
   13478:	adds	r2, #1
   1347a:	strb	r2, [r4, #0]
   1347c:	b.n	13306 <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   1347e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   13480:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
   13484:	adds	r2, #1
   13486:	strb	r2, [r4, #0]
   13488:	b.n	1324e <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   1348a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   1348c:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
   13490:	adds	r2, #1
   13492:	strb	r2, [r4, #0]
   13494:	b.n	13362 <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   13496:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   13498:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
   1349c:	adds	r2, #1
   1349e:	strb	r2, [r4, #0]
   134a0:	b.n	131fe <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   134a2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   134a4:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
   134a8:	adds	r2, #1
   134aa:	strb	r2, [r4, #0]
   134ac:	b.n	132d8 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   134ae:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   134b0:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
   134b4:	adds	r2, #1
   134b6:	strb	r2, [r4, #0]
   134b8:	b.n	1321a <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   134ba:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
   134bc:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
   134c0:	adds	r2, #1
   134c2:	strb	r2, [r4, #0]
   134c4:	b.n	13400 <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
   134c6:	bkpt	0x0000
   134c8:	.word	0x00400088
   134cc:	.word	0x004000c8

000134d0 <usb_init>:
}



void usb_init(void)
{
   134d0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   134d4:	ldr	r4, [pc, #144]	; (13568 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
   134d6:	bl	12090 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
   134da:	movs	r2, #0
   134dc:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
   134e0:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
   134e2:	str	r2, [r3, #0]
		table[i].addr = 0;
   134e4:	str	r2, [r3, #4]
   134e6:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
   134e8:	cmp	r3, r0
		table[i].desc = 0;
   134ea:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
   134ee:	bne.n	134e2 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   134f0:	ldr	r0, [pc, #120]	; (1356c <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
   134f2:	ldr	r2, [pc, #124]	; (13570 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   134f4:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   134f6:	ldr.w	lr, [pc, #144]	; 13588 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   134fa:	ldr	r7, [pc, #120]	; (13574 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   134fc:	ldr	r5, [pc, #120]	; (13578 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
   134fe:	ldr	r6, [pc, #124]	; (1357c <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
   13500:	ldr.w	r8, [pc, #136]	; 1358c <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
   13504:	ldr.w	ip, [pc, #136]	; 13590 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
   13508:	ldr.w	r9, [pc, #136]	; 13594 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   1350c:	orr.w	r3, r3, #262144	; 0x40000
   13510:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
   13512:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   13514:	ldr	r0, [pc, #104]	; (13580 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
   13516:	orr.w	r3, r3, #50331648	; 0x3000000
   1351a:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   1351c:	ubfx	r3, r4, #8, #8
   13520:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   13524:	ubfx	r3, r4, #16, #8
   13528:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   1352a:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
   1352c:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   1352e:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   13532:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   13534:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
   13538:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   1353c:	ldr	r5, [pc, #68]	; (13584 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
   1353e:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
   13542:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
   13544:	movs	r3, #1
   13546:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   1354a:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
   1354c:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   13550:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   13554:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
   13556:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   1355a:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   1355c:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   1355e:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
   13560:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   13564:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13568:	.word	0x1fff0000
   1356c:	.word	0x40048034
   13570:	.word	0x4000d800
   13574:	.word	0x400720b0
   13578:	.word	0x400720b4
   1357c:	.word	0x40072010
   13580:	.word	0xe000e104
   13584:	.word	0xe000e435
   13588:	.word	0x4007209c
   1358c:	.word	0x40072080
   13590:	.word	0x40072088
   13594:	.word	0x40072094

00013598 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
   13598:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
   1359c:	ldr	r6, [pc, #196]	; (13664 <yield+0xcc>)
   1359e:	ldrb	r3, [r6, #0]
   135a0:	cbz	r3, 135c8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
   135a2:	ldr	r7, [pc, #196]	; (13668 <yield+0xd0>)
   135a4:	ldrb	r2, [r7, #0]
   135a6:	cbnz	r2, 135c8 <yield+0x30>
	running = 1;
   135a8:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   135aa:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
   135ac:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   135ae:	bmi.n	1361e <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   135b0:	lsls	r2, r3, #30
   135b2:	bmi.n	135e8 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
   135b4:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   135b6:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
   135b8:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   135ba:	bpl.n	135c8 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
   135bc:	ldr	r3, [pc, #172]	; (1366c <yield+0xd4>)
   135be:	ldr	r2, [r3, #0]
   135c0:	cbz	r2, 135c8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   135c2:	mrs	r2, IPSR
		if (ipsr != 0) return;
   135c6:	cbz	r2, 135cc <yield+0x34>
   135c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   135cc:	mrs	r1, PRIMASK
		__disable_irq();
   135d0:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
   135d2:	ldr	r0, [r3, #0]
		if (first == nullptr) {
   135d4:	cbz	r0, 135de <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
   135d6:	ldr	r4, [pc, #152]	; (13670 <yield+0xd8>)
   135d8:	ldrb	r2, [r4, #0]
   135da:	cmp	r2, #0
   135dc:	beq.n	1363c <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   135de:	cmp	r1, #0
   135e0:	bne.n	135c8 <yield+0x30>
   135e2:	cpsie	i
   135e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   135e8:	ldr.w	r8, [pc, #144]	; 1367c <yield+0xe4>
   135ec:	ldrb.w	r2, [r8]
   135f0:	cmp	r2, #0
   135f2:	beq.n	135b4 <yield+0x1c>
   135f4:	ldr.w	r9, [pc, #136]	; 13680 <yield+0xe8>
   135f8:	movs	r4, #0
   135fa:	b.n	13608 <yield+0x70>
   135fc:	adds	r4, #1
   135fe:	ldrb.w	r3, [r8]
   13602:	uxtb	r4, r4
   13604:	cmp	r3, r4
   13606:	bls.n	1362e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
   13608:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
   1360c:	ldr	r3, [r5, #0]
   1360e:	mov	r0, r5
   13610:	ldr	r3, [r3, #16]
   13612:	blx	r3
   13614:	cmp	r0, #0
   13616:	beq.n	135fc <yield+0x64>
   13618:	ldr	r3, [r5, #16]
   1361a:	blx	r3
   1361c:	b.n	135fc <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
   1361e:	bl	11da4 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   13622:	cbnz	r0, 13658 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
   13624:	ldr	r3, [pc, #76]	; (13674 <yield+0xdc>)
   13626:	ldrb	r3, [r3, #0]
   13628:	cbnz	r3, 13632 <yield+0x9a>
   1362a:	ldrb	r3, [r6, #0]
   1362c:	b.n	135b0 <yield+0x18>
   1362e:	ldrb	r3, [r6, #0]
   13630:	b.n	135b4 <yield+0x1c>
   13632:	ldrb	r3, [r6, #0]
   13634:	and.w	r3, r3, #254	; 0xfe
   13638:	strb	r3, [r6, #0]
   1363a:	b.n	135b0 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
   1363c:	ldr	r5, [r0, #20]
   1363e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   13640:	movs	r3, #1
   13642:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
   13644:	cbz	r5, 1365e <yield+0xc6>
			firstYield->_prev = nullptr;
   13646:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   13648:	cbnz	r1, 1364c <yield+0xb4>
   1364a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   1364c:	movs	r5, #0
   1364e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   13650:	ldr	r3, [r0, #8]
   13652:	blx	r3
		runningFromYield = false;
   13654:	strb	r5, [r4, #0]
   13656:	b.n	135c8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
   13658:	bl	138c8 <serialEvent()>
   1365c:	b.n	13624 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
   1365e:	ldr	r3, [pc, #24]	; (13678 <yield+0xe0>)
   13660:	str	r5, [r3, #0]
   13662:	b.n	13648 <yield+0xb0>
   13664:	.word	0x1fff0b1c
   13668:	.word	0x1fff2c3e
   1366c:	.word	0x1fff2c4c
   13670:	.word	0x1fff2c50
   13674:	.word	0x1fff0b30
   13678:	.word	0x1fff2c48
   1367c:	.word	0x1fff2c6c
   13680:	.word	0x1fff2c54

00013684 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
   13684:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   13686:	mrs	r2, PRIMASK
		__disable_irq();
   1368a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
   1368c:	ldrb	r3, [r0, #29]
   1368e:	cbnz	r3, 1369e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
   13690:	ldrb	r1, [r0, #28]
   13692:	cmp	r1, #1
   13694:	beq.n	136a8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
   13696:	cmp	r1, #3
   13698:	beq.n	136bc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
   1369a:	movs	r3, #1
   1369c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1369e:	cbnz	r2, 136a2 <EventResponder::triggerEventNotImmediate()+0x1e>
   136a0:	cpsie	i
	}
	enableInterrupts(irq);
}
   136a2:	ldr.w	r4, [sp], #4
   136a6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
   136a8:	ldr	r4, [pc, #68]	; (136f0 <EventResponder::triggerEventNotImmediate()+0x6c>)
   136aa:	ldr	r1, [r4, #0]
   136ac:	cbz	r1, 136d8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
   136ae:	ldr	r1, [pc, #68]	; (136f4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
   136b0:	str	r3, [r0, #20]
				_prev = lastYield;
   136b2:	ldr	r3, [r1, #0]
   136b4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
   136b6:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
   136b8:	str	r0, [r3, #20]
   136ba:	b.n	1369a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
   136bc:	ldr	r4, [pc, #56]	; (136f8 <EventResponder::triggerEventNotImmediate()+0x74>)
   136be:	ldr	r1, [r4, #0]
   136c0:	cbz	r1, 136e4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
   136c2:	ldr	r1, [pc, #56]	; (136fc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
   136c4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
   136c6:	ldr	r3, [r1, #0]
   136c8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
   136ca:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
   136cc:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   136ce:	ldr	r3, [pc, #48]	; (13700 <EventResponder::triggerEventNotImmediate()+0x7c>)
   136d0:	mov.w	r1, #268435456	; 0x10000000
   136d4:	str	r1, [r3, #0]
   136d6:	b.n	1369a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
   136d8:	ldr	r3, [pc, #24]	; (136f4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
   136da:	str	r1, [r0, #20]
				_prev = nullptr;
   136dc:	str	r1, [r0, #24]
				firstYield = this;
   136de:	str	r0, [r4, #0]
				lastYield = this;
   136e0:	str	r0, [r3, #0]
   136e2:	b.n	1369a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
   136e4:	ldr	r3, [pc, #20]	; (136fc <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
   136e6:	str	r1, [r0, #20]
				_prev = nullptr;
   136e8:	str	r1, [r0, #24]
				firstInterrupt = this;
   136ea:	str	r0, [r4, #0]
				lastInterrupt = this;
   136ec:	str	r0, [r3, #0]
   136ee:	b.n	136ce <EventResponder::triggerEventNotImmediate()+0x4a>
   136f0:	.word	0x1fff2c4c
   136f4:	.word	0x1fff2c48
   136f8:	.word	0x1fff2c40
   136fc:	.word	0x1fff2c44
   13700:	.word	0xe000ed04

00013704 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
   13704:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   13706:	mrs	r2, PRIMASK
		__disable_irq();
   1370a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   1370c:	ldr	r4, [pc, #48]	; (13740 <EventResponder::runFromInterrupt()+0x3c>)
   1370e:	ldr	r0, [r4, #0]
		if (first) {
   13710:	cbz	r0, 13734 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   13712:	ldr	r6, [pc, #48]	; (13744 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
   13714:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
   13716:	ldr	r3, [r0, #20]
   13718:	str	r3, [r4, #0]
			if (firstInterrupt) {
   1371a:	cbz	r3, 1373a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
   1371c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1371e:	cbnz	r2, 13722 <EventResponder::runFromInterrupt()+0x1e>
   13720:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
   13722:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
   13724:	ldr	r3, [r0, #8]
   13726:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   13728:	mrs	r2, PRIMASK
		__disable_irq();
   1372c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
   1372e:	ldr	r0, [r4, #0]
		if (first) {
   13730:	cmp	r0, #0
   13732:	bne.n	13716 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   13734:	cbnz	r2, 13738 <EventResponder::runFromInterrupt()+0x34>
   13736:	cpsie	i
   13738:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
   1373a:	str	r3, [r6, #0]
   1373c:	b.n	1371e <EventResponder::runFromInterrupt()+0x1a>
   1373e:	nop
   13740:	.word	0x1fff2c40
   13744:	.word	0x1fff2c44

00013748 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
   13748:	b.w	13704 <EventResponder::runFromInterrupt()>

0001374c <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
   1374c:	ldr	r2, [pc, #8]	; (13758 <systick_isr+0xc>)
   1374e:	ldr	r3, [r2, #0]
   13750:	adds	r3, #1
   13752:	str	r3, [r2, #0]
   13754:	bx	lr
   13756:	nop
   13758:	.word	0x1fff2b30

0001375c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
   1375c:	b.w	11dc0 <usb_serial_flush_input>

00013760 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
   13760:	b.w	11d74 <usb_serial_peekchar>

00013764 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
   13764:	b.w	11d2c <usb_serial_getchar>

00013768 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
   13768:	b.w	11da4 <usb_serial_available>

0001376c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   1376c:	b.w	11f60 <usb_serial_flush_output>

00013770 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   13770:	b.w	11f18 <usb_serial_write_buffer_free>

00013774 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   13774:	mov	r0, r1
   13776:	mov	r1, r2
   13778:	b.w	11df8 <usb_serial_write>

0001377c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   1377c:	mov	r0, r1
   1377e:	b.w	11f00 <usb_serial_putchar>
   13782:	nop

00013784 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
   13784:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
   13786:	mov	r6, r1
   13788:	cbz	r1, 137a8 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
   1378a:	cbz	r2, 137ac <Print::write(unsigned char const*, unsigned int)+0x28>
   1378c:	mov	r7, r0
   1378e:	mov	r4, r2
   13790:	movs	r5, #0
   13792:	ldr	r3, [r7, #0]
   13794:	ldrb.w	r1, [r6], #1
   13798:	ldr	r3, [r3, #0]
   1379a:	mov	r0, r7
   1379c:	blx	r3
   1379e:	subs	r4, #1
   137a0:	add	r5, r0
   137a2:	bne.n	13792 <Print::write(unsigned char const*, unsigned int)+0xe>
   137a4:	mov	r0, r5
   137a6:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
   137a8:	mov	r0, r1
   137aa:	pop	{r3, r4, r5, r6, r7, pc}
   137ac:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
   137ae:	pop	{r3, r4, r5, r6, r7, pc}

000137b0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   137b0:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
   137b2:	ldr	r2, [pc, #24]	; (137cc <Print::println()+0x1c>)
	return write(buf, 2);
   137b4:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   137b6:	ldrh	r2, [r2, #0]
	return write(buf, 2);
   137b8:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
   137ba:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
   137bc:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
   137be:	strh.w	r2, [sp, #4]
	return write(buf, 2);
   137c2:	movs	r2, #2
   137c4:	blx	r3
}
   137c6:	add	sp, #12
   137c8:	ldr.w	pc, [sp], #4
   137cc:	.word	0x00019ab8

000137d0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
   137d0:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
   137d2:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
   137d4:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
   137d6:	ldr	r3, [r3, #4]
   137d8:	blx	r3
	return len;
}
   137da:	mov	r0, r4
   137dc:	pop	{r4, pc}
   137de:	nop

000137e0 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
   137e0:	push	{r1, r2, r3}
   137e2:	push	{lr}
   137e4:	sub	sp, #8
   137e6:	add	r2, sp, #12
   137e8:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
   137ec:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
   137ee:	bl	17188 <vdprintf>
#endif
}
   137f2:	add	sp, #8
   137f4:	ldr.w	lr, [sp], #4
   137f8:	add	sp, #12
   137fa:	bx	lr

000137fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
   137fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13800:	sub	sp, #72	; 0x48
   13802:	ldrb.w	r6, [sp, #104]	; 0x68
   13806:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
   1380a:	cmp	r6, #1
   1380c:	bls.n	138ae <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb2>
   1380e:	mov	r4, r2
   13810:	mov	r5, r3
	if (n == 0) {
   13812:	orrs.w	r3, r4, r5
   13816:	mov	r9, r0
   13818:	beq.n	138a2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
   1381a:	uxtb	r6, r6
   1381c:	movs	r7, #0
   1381e:	mov.w	r8, #65	; 0x41
   13822:	b.n	13828 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
   13824:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   13828:	mov	r0, r4
   1382a:	mov	r1, r5
   1382c:	mov	r2, r6
   1382e:	mov	r3, r7
   13830:	bl	142e0 <__aeabi_uldivmod>
   13834:	mov	r1, r3
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   13836:	cmp	r1, #0
   13838:	it	eq
   1383a:	cmpeq	r2, #10
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
   1383c:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
   1383e:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   13840:	add	r4, sp, #72	; 0x48
   13842:	add.w	lr, r3, #48	; 0x30
   13846:	add	r4, r8
   13848:	itte	cs
   1384a:	addcs	r3, #55	; 0x37
   1384c:	uxtbcs.w	lr, r3
   13850:	uxtbcc.w	lr, lr
			n /= base;
   13854:	mov	r3, r7
   13856:	mov	r1, r5
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   13858:	strb.w	lr, [r4, #-68]
			n /= base;
   1385c:	mov	r2, r6
   1385e:	bl	142e0 <__aeabi_uldivmod>
   13862:	mov	r4, r0
   13864:	mov	r5, r1
			if (n == 0) break;
   13866:	orrs.w	r3, r4, r5
			i--;
   1386a:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
   1386e:	bne.n	13824 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
   13870:	cmp.w	sl, #0
   13874:	beq.n	13888 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
   13876:	add.w	r8, r8, #4294967295
   1387a:	uxtb.w	r8, r8
		buf[i] = '-';
   1387e:	add	r3, sp, #72	; 0x48
   13880:	add	r3, r8
   13882:	movs	r2, #45	; 0x2d
   13884:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
   13888:	ldr.w	r3, [r9]
   1388c:	add	r2, sp, #4
   1388e:	add.w	r1, r2, r8
   13892:	ldr	r3, [r3, #4]
   13894:	mov	r0, r9
   13896:	rsb	r2, r8, #66	; 0x42
   1389a:	blx	r3
}
   1389c:	add	sp, #72	; 0x48
   1389e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
   138a2:	movs	r3, #48	; 0x30
   138a4:	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
   138a8:	mov.w	r8, #65	; 0x41
   138ac:	b.n	13870 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x74>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
   138ae:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   138b0:	add	sp, #72	; 0x48
   138b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   138b6:	nop

000138b8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   138b8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   138ba:	bl	1da4 <setup>
	while (1) {
		loop();
   138be:	bl	2424 <loop>
		yield();
   138c2:	bl	13598 <yield>
   138c6:	b.n	138be <main+0x6>

000138c8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
   138c8:	bx	lr
   138ca:	nop

000138cc <operator new(unsigned int)>:
   138cc:	b.w	146ac <malloc>

000138d0 <operator delete(void*, unsigned int)>:
   138d0:	b.w	146bc <free>

000138d4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
   138d4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   138d6:	ldr	r0, [pc, #164]	; (1397c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   138d8:	ldr	r2, [pc, #164]	; (13980 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
   138da:	ldr	r3, [pc, #168]	; (13984 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   138dc:	ldr	r5, [pc, #168]	; (13988 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   138de:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   138e0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
   138e2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
   138e4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
   138e6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   138e8:	ldr	r4, [pc, #160]	; (1398c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
   138ea:	cmp	r3, #8
   138ec:	beq.n	13950 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
   138ee:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   138f0:	ldr	r0, [pc, #156]	; (13990 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   138f2:	ldr	r1, [pc, #160]	; (13994 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
   138f4:	beq.n	13966 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
   138f6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
   138f8:	ite	eq
   138fa:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   138fc:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   138fe:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   13900:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   13902:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
   13904:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
   13906:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   13908:	ldr	r3, [pc, #140]	; (13998 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   1390a:	ldr	r1, [pc, #144]	; (1399c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   1390c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   1390e:	ldr	r2, [pc, #144]	; (139a0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
   13910:	cbz	r3, 13942 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   13912:	movs	r3, #1
   13914:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
   13916:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
   13918:	ldr	r3, [pc, #136]	; (139a4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
   1391a:	ldr	r1, [pc, #140]	; (139a8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
   1391c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
   1391e:	ldr	r2, [pc, #140]	; (139ac <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
   13920:	cmp	r3, #1
   13922:	bls.n	13972 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
   13924:	cmp	r3, #4
   13926:	bls.n	13948 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
   13928:	cmp	r3, #8
   1392a:	bls.n	1396a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
   1392c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
   1392e:	ite	ls
   13930:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
   13932:	movhi	r3, #135	; 0x87
   13934:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
   13936:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
   13938:	ldr	r3, [pc, #116]	; (139b0 <analog_init+0xdc>)
   1393a:	movs	r2, #1
   1393c:	strb	r2, [r3, #0]
}
   1393e:	pop	{r4, r5}
   13940:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
   13942:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
   13944:	str	r3, [r2, #0]
   13946:	b.n	13918 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
   13948:	movs	r3, #132	; 0x84
   1394a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
   1394c:	str	r3, [r2, #0]
   1394e:	b.n	13938 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   13950:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   13954:	ldr	r1, [pc, #60]	; (13994 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   13956:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
   13958:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   1395a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   1395c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   1395e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   13960:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
   13962:	str	r3, [r1, #0]
   13964:	b.n	13908 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
   13966:	movs	r2, #57	; 0x39
   13968:	b.n	1395a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
   1396a:	movs	r3, #133	; 0x85
   1396c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
   1396e:	str	r3, [r2, #0]
   13970:	b.n	13938 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
   13972:	movs	r3, #128	; 0x80
   13974:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
   13976:	str	r3, [r2, #0]
   13978:	b.n	13938 <analog_init+0x64>
   1397a:	nop
   1397c:	.word	0x40074000
   13980:	.word	0x40074001
   13984:	.word	0x1fff0b31
   13988:	.word	0x4003b008
   1398c:	.word	0x4003b00c
   13990:	.word	0x400bb008
   13994:	.word	0x400bb00c
   13998:	.word	0x1fff2c6e
   1399c:	.word	0x4003b020
   139a0:	.word	0x400bb020
   139a4:	.word	0x1fff0b32
   139a8:	.word	0x4003b024
   139ac:	.word	0x400bb024
   139b0:	.word	0x1fff2c6d

000139b4 <__aeabi_atexit>:
   139b4:	mov	r3, r1
   139b6:	mov	r1, r0
   139b8:	mov	r0, r3
   139ba:	b.w	14620 <__cxa_atexit>
   139be:	nop

000139c0 <__aeabi_drsub>:
   139c0:	eor.w	r1, r1, #2147483648	; 0x80000000
   139c4:	b.n	139cc <__adddf3>
   139c6:	nop

000139c8 <__aeabi_dsub>:
   139c8:	eor.w	r3, r3, #2147483648	; 0x80000000

000139cc <__adddf3>:
   139cc:	push	{r4, r5, lr}
   139ce:	mov.w	r4, r1, lsl #1
   139d2:	mov.w	r5, r3, lsl #1
   139d6:	teq	r4, r5
   139da:	it	eq
   139dc:	teqeq	r0, r2
   139e0:	itttt	ne
   139e2:	orrsne.w	ip, r4, r0
   139e6:	orrsne.w	ip, r5, r2
   139ea:	mvnsne.w	ip, r4, asr #21
   139ee:	mvnsne.w	ip, r5, asr #21
   139f2:	beq.w	13bba <__adddf3+0x1ee>
   139f6:	mov.w	r4, r4, lsr #21
   139fa:	rsbs	r5, r4, r5, lsr #21
   139fe:	it	lt
   13a00:	neglt	r5, r5
   13a02:	ble.n	13a1e <__adddf3+0x52>
   13a04:	add	r4, r5
   13a06:	eor.w	r2, r0, r2
   13a0a:	eor.w	r3, r1, r3
   13a0e:	eor.w	r0, r2, r0
   13a12:	eor.w	r1, r3, r1
   13a16:	eor.w	r2, r0, r2
   13a1a:	eor.w	r3, r1, r3
   13a1e:	cmp	r5, #54	; 0x36
   13a20:	it	hi
   13a22:	pophi	{r4, r5, pc}
   13a24:	tst.w	r1, #2147483648	; 0x80000000
   13a28:	mov.w	r1, r1, lsl #12
   13a2c:	mov.w	ip, #1048576	; 0x100000
   13a30:	orr.w	r1, ip, r1, lsr #12
   13a34:	beq.n	13a3c <__adddf3+0x70>
   13a36:	negs	r0, r0
   13a38:	sbc.w	r1, r1, r1, lsl #1
   13a3c:	tst.w	r3, #2147483648	; 0x80000000
   13a40:	mov.w	r3, r3, lsl #12
   13a44:	orr.w	r3, ip, r3, lsr #12
   13a48:	beq.n	13a50 <__adddf3+0x84>
   13a4a:	negs	r2, r2
   13a4c:	sbc.w	r3, r3, r3, lsl #1
   13a50:	teq	r4, r5
   13a54:	beq.w	13ba6 <__adddf3+0x1da>
   13a58:	sub.w	r4, r4, #1
   13a5c:	rsbs	lr, r5, #32
   13a60:	blt.n	13a7e <__adddf3+0xb2>
   13a62:	lsl.w	ip, r2, lr
   13a66:	lsr.w	r2, r2, r5
   13a6a:	adds	r0, r0, r2
   13a6c:	adc.w	r1, r1, #0
   13a70:	lsl.w	r2, r3, lr
   13a74:	adds	r0, r0, r2
   13a76:	asr.w	r3, r3, r5
   13a7a:	adcs	r1, r3
   13a7c:	b.n	13a9c <__adddf3+0xd0>
   13a7e:	sub.w	r5, r5, #32
   13a82:	add.w	lr, lr, #32
   13a86:	cmp	r2, #1
   13a88:	lsl.w	ip, r3, lr
   13a8c:	it	cs
   13a8e:	orrcs.w	ip, ip, #2
   13a92:	asr.w	r3, r3, r5
   13a96:	adds	r0, r0, r3
   13a98:	adcs.w	r1, r1, r3, asr #31
   13a9c:	and.w	r5, r1, #2147483648	; 0x80000000
   13aa0:	bpl.n	13ab2 <__adddf3+0xe6>
   13aa2:	mov.w	lr, #0
   13aa6:	rsbs	ip, ip, #0
   13aaa:	sbcs.w	r0, lr, r0
   13aae:	sbc.w	r1, lr, r1
   13ab2:	cmp.w	r1, #1048576	; 0x100000
   13ab6:	bcc.n	13af0 <__adddf3+0x124>
   13ab8:	cmp.w	r1, #2097152	; 0x200000
   13abc:	bcc.n	13ad8 <__adddf3+0x10c>
   13abe:	lsrs	r1, r1, #1
   13ac0:	movs.w	r0, r0, rrx
   13ac4:	mov.w	ip, ip, rrx
   13ac8:	add.w	r4, r4, #1
   13acc:	mov.w	r2, r4, lsl #21
   13ad0:	cmn.w	r2, #4194304	; 0x400000
   13ad4:	bcs.w	13c0c <__adddf3+0x240>
   13ad8:	cmp.w	ip, #2147483648	; 0x80000000
   13adc:	it	eq
   13ade:	movseq.w	ip, r0, lsr #1
   13ae2:	adcs.w	r0, r0, #0
   13ae6:	adc.w	r1, r1, r4, lsl #20
   13aea:	orr.w	r1, r1, r5
   13aee:	pop	{r4, r5, pc}
   13af0:	movs.w	ip, ip, lsl #1
   13af4:	adcs	r0, r0
   13af6:	adc.w	r1, r1, r1
   13afa:	tst.w	r1, #1048576	; 0x100000
   13afe:	sub.w	r4, r4, #1
   13b02:	bne.n	13ad8 <__adddf3+0x10c>
   13b04:	teq	r1, #0
   13b08:	itt	eq
   13b0a:	moveq	r1, r0
   13b0c:	moveq	r0, #0
   13b0e:	clz	r3, r1
   13b12:	it	eq
   13b14:	addeq	r3, #32
   13b16:	sub.w	r3, r3, #11
   13b1a:	subs.w	r2, r3, #32
   13b1e:	bge.n	13b3a <__adddf3+0x16e>
   13b20:	adds	r2, #12
   13b22:	ble.n	13b36 <__adddf3+0x16a>
   13b24:	add.w	ip, r2, #20
   13b28:	rsb	r2, r2, #12
   13b2c:	lsl.w	r0, r1, ip
   13b30:	lsr.w	r1, r1, r2
   13b34:	b.n	13b50 <__adddf3+0x184>
   13b36:	add.w	r2, r2, #20
   13b3a:	it	le
   13b3c:	rsble	ip, r2, #32
   13b40:	lsl.w	r1, r1, r2
   13b44:	lsr.w	ip, r0, ip
   13b48:	itt	le
   13b4a:	orrle.w	r1, r1, ip
   13b4e:	lslle	r0, r2
   13b50:	subs	r4, r4, r3
   13b52:	ittt	ge
   13b54:	addge.w	r1, r1, r4, lsl #20
   13b58:	orrge	r1, r5
   13b5a:	popge	{r4, r5, pc}
   13b5c:	mvn.w	r4, r4
   13b60:	subs	r4, #31
   13b62:	bge.n	13b9e <__adddf3+0x1d2>
   13b64:	adds	r4, #12
   13b66:	bgt.n	13b86 <__adddf3+0x1ba>
   13b68:	add.w	r4, r4, #20
   13b6c:	rsb	r2, r4, #32
   13b70:	lsr.w	r0, r0, r4
   13b74:	lsl.w	r3, r1, r2
   13b78:	orr.w	r0, r0, r3
   13b7c:	lsr.w	r3, r1, r4
   13b80:	orr.w	r1, r5, r3
   13b84:	pop	{r4, r5, pc}
   13b86:	rsb	r4, r4, #12
   13b8a:	rsb	r2, r4, #32
   13b8e:	lsr.w	r0, r0, r2
   13b92:	lsl.w	r3, r1, r4
   13b96:	orr.w	r0, r0, r3
   13b9a:	mov	r1, r5
   13b9c:	pop	{r4, r5, pc}
   13b9e:	lsr.w	r0, r1, r4
   13ba2:	mov	r1, r5
   13ba4:	pop	{r4, r5, pc}
   13ba6:	teq	r4, #0
   13baa:	eor.w	r3, r3, #1048576	; 0x100000
   13bae:	itte	eq
   13bb0:	eoreq.w	r1, r1, #1048576	; 0x100000
   13bb4:	addeq	r4, #1
   13bb6:	subne	r5, #1
   13bb8:	b.n	13a58 <__adddf3+0x8c>
   13bba:	mvns.w	ip, r4, asr #21
   13bbe:	it	ne
   13bc0:	mvnsne.w	ip, r5, asr #21
   13bc4:	beq.n	13c1a <__adddf3+0x24e>
   13bc6:	teq	r4, r5
   13bca:	it	eq
   13bcc:	teqeq	r0, r2
   13bd0:	beq.n	13bde <__adddf3+0x212>
   13bd2:	orrs.w	ip, r4, r0
   13bd6:	itt	eq
   13bd8:	moveq	r1, r3
   13bda:	moveq	r0, r2
   13bdc:	pop	{r4, r5, pc}
   13bde:	teq	r1, r3
   13be2:	ittt	ne
   13be4:	movne	r1, #0
   13be6:	movne	r0, #0
   13be8:	popne	{r4, r5, pc}
   13bea:	movs.w	ip, r4, lsr #21
   13bee:	bne.n	13bfc <__adddf3+0x230>
   13bf0:	lsls	r0, r0, #1
   13bf2:	adcs	r1, r1
   13bf4:	it	cs
   13bf6:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   13bfa:	pop	{r4, r5, pc}
   13bfc:	adds.w	r4, r4, #4194304	; 0x400000
   13c00:	itt	cc
   13c02:	addcc.w	r1, r1, #1048576	; 0x100000
   13c06:	popcc	{r4, r5, pc}
   13c08:	and.w	r5, r1, #2147483648	; 0x80000000
   13c0c:	orr.w	r1, r5, #2130706432	; 0x7f000000
   13c10:	orr.w	r1, r1, #15728640	; 0xf00000
   13c14:	mov.w	r0, #0
   13c18:	pop	{r4, r5, pc}
   13c1a:	mvns.w	ip, r4, asr #21
   13c1e:	itte	ne
   13c20:	movne	r1, r3
   13c22:	movne	r0, r2
   13c24:	mvnseq.w	ip, r5, asr #21
   13c28:	itt	ne
   13c2a:	movne	r3, r1
   13c2c:	movne	r2, r0
   13c2e:	orrs.w	r4, r0, r1, lsl #12
   13c32:	itte	eq
   13c34:	orrseq.w	r5, r2, r3, lsl #12
   13c38:	teqeq	r1, r3
   13c3c:	orrne.w	r1, r1, #524288	; 0x80000
   13c40:	pop	{r4, r5, pc}
   13c42:	nop

00013c44 <__aeabi_ui2d>:
   13c44:	teq	r0, #0
   13c48:	itt	eq
   13c4a:	moveq	r1, #0
   13c4c:	bxeq	lr
   13c4e:	push	{r4, r5, lr}
   13c50:	mov.w	r4, #1024	; 0x400
   13c54:	add.w	r4, r4, #50	; 0x32
   13c58:	mov.w	r5, #0
   13c5c:	mov.w	r1, #0
   13c60:	b.n	13b04 <__adddf3+0x138>
   13c62:	nop

00013c64 <__aeabi_i2d>:
   13c64:	teq	r0, #0
   13c68:	itt	eq
   13c6a:	moveq	r1, #0
   13c6c:	bxeq	lr
   13c6e:	push	{r4, r5, lr}
   13c70:	mov.w	r4, #1024	; 0x400
   13c74:	add.w	r4, r4, #50	; 0x32
   13c78:	ands.w	r5, r0, #2147483648	; 0x80000000
   13c7c:	it	mi
   13c7e:	negmi	r0, r0
   13c80:	mov.w	r1, #0
   13c84:	b.n	13b04 <__adddf3+0x138>
   13c86:	nop

00013c88 <__aeabi_f2d>:
   13c88:	lsls	r2, r0, #1
   13c8a:	mov.w	r1, r2, asr #3
   13c8e:	mov.w	r1, r1, rrx
   13c92:	mov.w	r0, r2, lsl #28
   13c96:	itttt	ne
   13c98:	andsne.w	r3, r2, #4278190080	; 0xff000000
   13c9c:	teqne	r3, #4278190080	; 0xff000000
   13ca0:	eorne.w	r1, r1, #939524096	; 0x38000000
   13ca4:	bxne	lr
   13ca6:	teq	r2, #0
   13caa:	ite	ne
   13cac:	teqne	r3, #4278190080	; 0xff000000
   13cb0:	bxeq	lr
   13cb2:	push	{r4, r5, lr}
   13cb4:	mov.w	r4, #896	; 0x380
   13cb8:	and.w	r5, r1, #2147483648	; 0x80000000
   13cbc:	bic.w	r1, r1, #2147483648	; 0x80000000
   13cc0:	b.n	13b04 <__adddf3+0x138>
   13cc2:	nop

00013cc4 <__aeabi_ul2d>:
   13cc4:	orrs.w	r2, r0, r1
   13cc8:	it	eq
   13cca:	bxeq	lr
   13ccc:	push	{r4, r5, lr}
   13cce:	mov.w	r5, #0
   13cd2:	b.n	13cea <__aeabi_l2d+0x16>

00013cd4 <__aeabi_l2d>:
   13cd4:	orrs.w	r2, r0, r1
   13cd8:	it	eq
   13cda:	bxeq	lr
   13cdc:	push	{r4, r5, lr}
   13cde:	ands.w	r5, r1, #2147483648	; 0x80000000
   13ce2:	bpl.n	13cea <__aeabi_l2d+0x16>
   13ce4:	negs	r0, r0
   13ce6:	sbc.w	r1, r1, r1, lsl #1
   13cea:	mov.w	r4, #1024	; 0x400
   13cee:	add.w	r4, r4, #50	; 0x32
   13cf2:	movs.w	ip, r1, lsr #22
   13cf6:	beq.w	13ab2 <__adddf3+0xe6>
   13cfa:	mov.w	r2, #3
   13cfe:	movs.w	ip, ip, lsr #3
   13d02:	it	ne
   13d04:	addne	r2, #3
   13d06:	movs.w	ip, ip, lsr #3
   13d0a:	it	ne
   13d0c:	addne	r2, #3
   13d0e:	add.w	r2, r2, ip, lsr #3
   13d12:	rsb	r3, r2, #32
   13d16:	lsl.w	ip, r0, r3
   13d1a:	lsr.w	r0, r0, r2
   13d1e:	lsl.w	lr, r1, r3
   13d22:	orr.w	r0, r0, lr
   13d26:	lsr.w	r1, r1, r2
   13d2a:	add	r4, r2
   13d2c:	b.n	13ab2 <__adddf3+0xe6>
   13d2e:	nop

00013d30 <__aeabi_dmul>:
   13d30:	push	{r4, r5, r6, lr}
   13d32:	mov.w	ip, #255	; 0xff
   13d36:	orr.w	ip, ip, #1792	; 0x700
   13d3a:	ands.w	r4, ip, r1, lsr #20
   13d3e:	ittte	ne
   13d40:	andsne.w	r5, ip, r3, lsr #20
   13d44:	teqne	r4, ip
   13d48:	teqne	r5, ip
   13d4c:	bleq	13f0c <__aeabi_dmul+0x1dc>
   13d50:	add	r4, r5
   13d52:	eor.w	r6, r1, r3
   13d56:	bic.w	r1, r1, ip, lsl #21
   13d5a:	bic.w	r3, r3, ip, lsl #21
   13d5e:	orrs.w	r5, r0, r1, lsl #12
   13d62:	it	ne
   13d64:	orrsne.w	r5, r2, r3, lsl #12
   13d68:	orr.w	r1, r1, #1048576	; 0x100000
   13d6c:	orr.w	r3, r3, #1048576	; 0x100000
   13d70:	beq.n	13de4 <__aeabi_dmul+0xb4>
   13d72:	umull	ip, lr, r0, r2
   13d76:	mov.w	r5, #0
   13d7a:	umlal	lr, r5, r1, r2
   13d7e:	and.w	r2, r6, #2147483648	; 0x80000000
   13d82:	umlal	lr, r5, r0, r3
   13d86:	mov.w	r6, #0
   13d8a:	umlal	r5, r6, r1, r3
   13d8e:	teq	ip, #0
   13d92:	it	ne
   13d94:	orrne.w	lr, lr, #1
   13d98:	sub.w	r4, r4, #255	; 0xff
   13d9c:	cmp.w	r6, #512	; 0x200
   13da0:	sbc.w	r4, r4, #768	; 0x300
   13da4:	bcs.n	13db0 <__aeabi_dmul+0x80>
   13da6:	movs.w	lr, lr, lsl #1
   13daa:	adcs	r5, r5
   13dac:	adc.w	r6, r6, r6
   13db0:	orr.w	r1, r2, r6, lsl #11
   13db4:	orr.w	r1, r1, r5, lsr #21
   13db8:	mov.w	r0, r5, lsl #11
   13dbc:	orr.w	r0, r0, lr, lsr #21
   13dc0:	mov.w	lr, lr, lsl #11
   13dc4:	subs.w	ip, r4, #253	; 0xfd
   13dc8:	it	hi
   13dca:	cmphi.w	ip, #1792	; 0x700
   13dce:	bhi.n	13e0e <__aeabi_dmul+0xde>
   13dd0:	cmp.w	lr, #2147483648	; 0x80000000
   13dd4:	it	eq
   13dd6:	movseq.w	lr, r0, lsr #1
   13dda:	adcs.w	r0, r0, #0
   13dde:	adc.w	r1, r1, r4, lsl #20
   13de2:	pop	{r4, r5, r6, pc}
   13de4:	and.w	r6, r6, #2147483648	; 0x80000000
   13de8:	orr.w	r1, r6, r1
   13dec:	orr.w	r0, r0, r2
   13df0:	eor.w	r1, r1, r3
   13df4:	subs.w	r4, r4, ip, lsr #1
   13df8:	ittt	gt
   13dfa:	rsbsgt	r5, r4, ip
   13dfe:	orrgt.w	r1, r1, r4, lsl #20
   13e02:	popgt	{r4, r5, r6, pc}
   13e04:	orr.w	r1, r1, #1048576	; 0x100000
   13e08:	mov.w	lr, #0
   13e0c:	subs	r4, #1
   13e0e:	bgt.w	13f68 <__aeabi_dmul+0x238>
   13e12:	cmn.w	r4, #54	; 0x36
   13e16:	ittt	le
   13e18:	movle	r0, #0
   13e1a:	andle.w	r1, r1, #2147483648	; 0x80000000
   13e1e:	pople	{r4, r5, r6, pc}
   13e20:	rsb	r4, r4, #0
   13e24:	subs	r4, #32
   13e26:	bge.n	13e94 <__aeabi_dmul+0x164>
   13e28:	adds	r4, #12
   13e2a:	bgt.n	13e64 <__aeabi_dmul+0x134>
   13e2c:	add.w	r4, r4, #20
   13e30:	rsb	r5, r4, #32
   13e34:	lsl.w	r3, r0, r5
   13e38:	lsr.w	r0, r0, r4
   13e3c:	lsl.w	r2, r1, r5
   13e40:	orr.w	r0, r0, r2
   13e44:	and.w	r2, r1, #2147483648	; 0x80000000
   13e48:	bic.w	r1, r1, #2147483648	; 0x80000000
   13e4c:	adds.w	r0, r0, r3, lsr #31
   13e50:	lsr.w	r6, r1, r4
   13e54:	adc.w	r1, r2, r6
   13e58:	orrs.w	lr, lr, r3, lsl #1
   13e5c:	it	eq
   13e5e:	biceq.w	r0, r0, r3, lsr #31
   13e62:	pop	{r4, r5, r6, pc}
   13e64:	rsb	r4, r4, #12
   13e68:	rsb	r5, r4, #32
   13e6c:	lsl.w	r3, r0, r4
   13e70:	lsr.w	r0, r0, r5
   13e74:	lsl.w	r2, r1, r4
   13e78:	orr.w	r0, r0, r2
   13e7c:	and.w	r1, r1, #2147483648	; 0x80000000
   13e80:	adds.w	r0, r0, r3, lsr #31
   13e84:	adc.w	r1, r1, #0
   13e88:	orrs.w	lr, lr, r3, lsl #1
   13e8c:	it	eq
   13e8e:	biceq.w	r0, r0, r3, lsr #31
   13e92:	pop	{r4, r5, r6, pc}
   13e94:	rsb	r5, r4, #32
   13e98:	lsl.w	r2, r0, r5
   13e9c:	orr.w	lr, lr, r2
   13ea0:	lsr.w	r3, r0, r4
   13ea4:	lsl.w	r2, r1, r5
   13ea8:	orr.w	r3, r3, r2
   13eac:	lsr.w	r0, r1, r4
   13eb0:	and.w	r1, r1, #2147483648	; 0x80000000
   13eb4:	lsr.w	r2, r1, r4
   13eb8:	bic.w	r0, r0, r2
   13ebc:	add.w	r0, r0, r3, lsr #31
   13ec0:	orrs.w	lr, lr, r3, lsl #1
   13ec4:	it	eq
   13ec6:	biceq.w	r0, r0, r3, lsr #31
   13eca:	pop	{r4, r5, r6, pc}
   13ecc:	teq	r4, #0
   13ed0:	bne.n	13ef2 <__aeabi_dmul+0x1c2>
   13ed2:	and.w	r6, r1, #2147483648	; 0x80000000
   13ed6:	lsls	r0, r0, #1
   13ed8:	adc.w	r1, r1, r1
   13edc:	tst.w	r1, #1048576	; 0x100000
   13ee0:	it	eq
   13ee2:	subeq	r4, #1
   13ee4:	beq.n	13ed6 <__aeabi_dmul+0x1a6>
   13ee6:	orr.w	r1, r1, r6
   13eea:	teq	r5, #0
   13eee:	it	ne
   13ef0:	bxne	lr
   13ef2:	and.w	r6, r3, #2147483648	; 0x80000000
   13ef6:	lsls	r2, r2, #1
   13ef8:	adc.w	r3, r3, r3
   13efc:	tst.w	r3, #1048576	; 0x100000
   13f00:	it	eq
   13f02:	subeq	r5, #1
   13f04:	beq.n	13ef6 <__aeabi_dmul+0x1c6>
   13f06:	orr.w	r3, r3, r6
   13f0a:	bx	lr
   13f0c:	teq	r4, ip
   13f10:	and.w	r5, ip, r3, lsr #20
   13f14:	it	ne
   13f16:	teqne	r5, ip
   13f1a:	beq.n	13f36 <__aeabi_dmul+0x206>
   13f1c:	orrs.w	r6, r0, r1, lsl #1
   13f20:	it	ne
   13f22:	orrsne.w	r6, r2, r3, lsl #1
   13f26:	bne.n	13ecc <__aeabi_dmul+0x19c>
   13f28:	eor.w	r1, r1, r3
   13f2c:	and.w	r1, r1, #2147483648	; 0x80000000
   13f30:	mov.w	r0, #0
   13f34:	pop	{r4, r5, r6, pc}
   13f36:	orrs.w	r6, r0, r1, lsl #1
   13f3a:	itte	eq
   13f3c:	moveq	r0, r2
   13f3e:	moveq	r1, r3
   13f40:	orrsne.w	r6, r2, r3, lsl #1
   13f44:	beq.n	13f7a <__aeabi_dmul+0x24a>
   13f46:	teq	r4, ip
   13f4a:	bne.n	13f52 <__aeabi_dmul+0x222>
   13f4c:	orrs.w	r6, r0, r1, lsl #12
   13f50:	bne.n	13f7a <__aeabi_dmul+0x24a>
   13f52:	teq	r5, ip
   13f56:	bne.n	13f64 <__aeabi_dmul+0x234>
   13f58:	orrs.w	r6, r2, r3, lsl #12
   13f5c:	itt	ne
   13f5e:	movne	r0, r2
   13f60:	movne	r1, r3
   13f62:	bne.n	13f7a <__aeabi_dmul+0x24a>
   13f64:	eor.w	r1, r1, r3
   13f68:	and.w	r1, r1, #2147483648	; 0x80000000
   13f6c:	orr.w	r1, r1, #2130706432	; 0x7f000000
   13f70:	orr.w	r1, r1, #15728640	; 0xf00000
   13f74:	mov.w	r0, #0
   13f78:	pop	{r4, r5, r6, pc}
   13f7a:	orr.w	r1, r1, #2130706432	; 0x7f000000
   13f7e:	orr.w	r1, r1, #16252928	; 0xf80000
   13f82:	pop	{r4, r5, r6, pc}

00013f84 <__aeabi_ddiv>:
   13f84:	push	{r4, r5, r6, lr}
   13f86:	mov.w	ip, #255	; 0xff
   13f8a:	orr.w	ip, ip, #1792	; 0x700
   13f8e:	ands.w	r4, ip, r1, lsr #20
   13f92:	ittte	ne
   13f94:	andsne.w	r5, ip, r3, lsr #20
   13f98:	teqne	r4, ip
   13f9c:	teqne	r5, ip
   13fa0:	bleq	140f2 <__aeabi_ddiv+0x16e>
   13fa4:	sub.w	r4, r4, r5
   13fa8:	eor.w	lr, r1, r3
   13fac:	orrs.w	r5, r2, r3, lsl #12
   13fb0:	mov.w	r1, r1, lsl #12
   13fb4:	beq.w	140c8 <__aeabi_ddiv+0x144>
   13fb8:	mov.w	r3, r3, lsl #12
   13fbc:	mov.w	r5, #268435456	; 0x10000000
   13fc0:	orr.w	r3, r5, r3, lsr #4
   13fc4:	orr.w	r3, r3, r2, lsr #24
   13fc8:	mov.w	r2, r2, lsl #8
   13fcc:	orr.w	r5, r5, r1, lsr #4
   13fd0:	orr.w	r5, r5, r0, lsr #24
   13fd4:	mov.w	r6, r0, lsl #8
   13fd8:	and.w	r1, lr, #2147483648	; 0x80000000
   13fdc:	cmp	r5, r3
   13fde:	it	eq
   13fe0:	cmpeq	r6, r2
   13fe2:	adc.w	r4, r4, #253	; 0xfd
   13fe6:	add.w	r4, r4, #768	; 0x300
   13fea:	bcs.n	13ff2 <__aeabi_ddiv+0x6e>
   13fec:	lsrs	r3, r3, #1
   13fee:	mov.w	r2, r2, rrx
   13ff2:	subs	r6, r6, r2
   13ff4:	sbc.w	r5, r5, r3
   13ff8:	lsrs	r3, r3, #1
   13ffa:	mov.w	r2, r2, rrx
   13ffe:	mov.w	r0, #1048576	; 0x100000
   14002:	mov.w	ip, #524288	; 0x80000
   14006:	subs.w	lr, r6, r2
   1400a:	sbcs.w	lr, r5, r3
   1400e:	ittt	cs
   14010:	subcs	r6, r6, r2
   14012:	movcs	r5, lr
   14014:	orrcs.w	r0, r0, ip
   14018:	lsrs	r3, r3, #1
   1401a:	mov.w	r2, r2, rrx
   1401e:	subs.w	lr, r6, r2
   14022:	sbcs.w	lr, r5, r3
   14026:	ittt	cs
   14028:	subcs	r6, r6, r2
   1402a:	movcs	r5, lr
   1402c:	orrcs.w	r0, r0, ip, lsr #1
   14030:	lsrs	r3, r3, #1
   14032:	mov.w	r2, r2, rrx
   14036:	subs.w	lr, r6, r2
   1403a:	sbcs.w	lr, r5, r3
   1403e:	ittt	cs
   14040:	subcs	r6, r6, r2
   14042:	movcs	r5, lr
   14044:	orrcs.w	r0, r0, ip, lsr #2
   14048:	lsrs	r3, r3, #1
   1404a:	mov.w	r2, r2, rrx
   1404e:	subs.w	lr, r6, r2
   14052:	sbcs.w	lr, r5, r3
   14056:	ittt	cs
   14058:	subcs	r6, r6, r2
   1405a:	movcs	r5, lr
   1405c:	orrcs.w	r0, r0, ip, lsr #3
   14060:	orrs.w	lr, r5, r6
   14064:	beq.n	14098 <__aeabi_ddiv+0x114>
   14066:	mov.w	r5, r5, lsl #4
   1406a:	orr.w	r5, r5, r6, lsr #28
   1406e:	mov.w	r6, r6, lsl #4
   14072:	mov.w	r3, r3, lsl #3
   14076:	orr.w	r3, r3, r2, lsr #29
   1407a:	mov.w	r2, r2, lsl #3
   1407e:	movs.w	ip, ip, lsr #4
   14082:	bne.n	14006 <__aeabi_ddiv+0x82>
   14084:	tst.w	r1, #1048576	; 0x100000
   14088:	bne.n	140a2 <__aeabi_ddiv+0x11e>
   1408a:	orr.w	r1, r1, r0
   1408e:	mov.w	r0, #0
   14092:	mov.w	ip, #2147483648	; 0x80000000
   14096:	b.n	14006 <__aeabi_ddiv+0x82>
   14098:	tst.w	r1, #1048576	; 0x100000
   1409c:	itt	eq
   1409e:	orreq	r1, r0
   140a0:	moveq	r0, #0
   140a2:	subs.w	ip, r4, #253	; 0xfd
   140a6:	it	hi
   140a8:	cmphi.w	ip, #1792	; 0x700
   140ac:	bhi.w	13e0e <__aeabi_dmul+0xde>
   140b0:	subs.w	ip, r5, r3
   140b4:	itt	eq
   140b6:	subseq.w	ip, r6, r2
   140ba:	movseq.w	ip, r0, lsr #1
   140be:	adcs.w	r0, r0, #0
   140c2:	adc.w	r1, r1, r4, lsl #20
   140c6:	pop	{r4, r5, r6, pc}
   140c8:	and.w	lr, lr, #2147483648	; 0x80000000
   140cc:	orr.w	r1, lr, r1, lsr #12
   140d0:	adds.w	r4, r4, ip, lsr #1
   140d4:	ittt	gt
   140d6:	rsbsgt	r5, r4, ip
   140da:	orrgt.w	r1, r1, r4, lsl #20
   140de:	popgt	{r4, r5, r6, pc}
   140e0:	orr.w	r1, r1, #1048576	; 0x100000
   140e4:	mov.w	lr, #0
   140e8:	subs	r4, #1
   140ea:	b.n	13e0e <__aeabi_dmul+0xde>
   140ec:	orr.w	lr, r5, r6
   140f0:	b.n	13e0e <__aeabi_dmul+0xde>
   140f2:	and.w	r5, ip, r3, lsr #20
   140f6:	teq	r4, ip
   140fa:	it	eq
   140fc:	teqeq	r5, ip
   14100:	beq.w	13f7a <__aeabi_dmul+0x24a>
   14104:	teq	r4, ip
   14108:	bne.n	14120 <__aeabi_ddiv+0x19c>
   1410a:	orrs.w	r4, r0, r1, lsl #12
   1410e:	bne.w	13f7a <__aeabi_dmul+0x24a>
   14112:	teq	r5, ip
   14116:	bne.w	13f64 <__aeabi_dmul+0x234>
   1411a:	mov	r0, r2
   1411c:	mov	r1, r3
   1411e:	b.n	13f7a <__aeabi_dmul+0x24a>
   14120:	teq	r5, ip
   14124:	bne.n	14134 <__aeabi_ddiv+0x1b0>
   14126:	orrs.w	r5, r2, r3, lsl #12
   1412a:	beq.w	13f28 <__aeabi_dmul+0x1f8>
   1412e:	mov	r0, r2
   14130:	mov	r1, r3
   14132:	b.n	13f7a <__aeabi_dmul+0x24a>
   14134:	orrs.w	r6, r0, r1, lsl #1
   14138:	it	ne
   1413a:	orrsne.w	r6, r2, r3, lsl #1
   1413e:	bne.w	13ecc <__aeabi_dmul+0x19c>
   14142:	orrs.w	r4, r0, r1, lsl #1
   14146:	bne.w	13f64 <__aeabi_dmul+0x234>
   1414a:	orrs.w	r5, r2, r3, lsl #1
   1414e:	bne.w	13f28 <__aeabi_dmul+0x1f8>
   14152:	b.n	13f7a <__aeabi_dmul+0x24a>

00014154 <__gedf2>:
   14154:	mov.w	ip, #4294967295
   14158:	b.n	14168 <__cmpdf2+0x4>
   1415a:	nop

0001415c <__ledf2>:
   1415c:	mov.w	ip, #1
   14160:	b.n	14168 <__cmpdf2+0x4>
   14162:	nop

00014164 <__cmpdf2>:
   14164:	mov.w	ip, #1
   14168:	str.w	ip, [sp, #-4]!
   1416c:	mov.w	ip, r1, lsl #1
   14170:	mvns.w	ip, ip, asr #21
   14174:	mov.w	ip, r3, lsl #1
   14178:	it	ne
   1417a:	mvnsne.w	ip, ip, asr #21
   1417e:	beq.n	141b8 <__cmpdf2+0x54>
   14180:	add	sp, #4
   14182:	orrs.w	ip, r0, r1, lsl #1
   14186:	ite	eq
   14188:	orrseq.w	ip, r2, r3, lsl #1
   1418c:	teqne	r1, r3
   14190:	ittt	eq
   14192:	teqeq	r0, r2
   14196:	moveq	r0, #0
   14198:	bxeq	lr
   1419a:	cmn.w	r0, #0
   1419e:	teq	r1, r3
   141a2:	it	pl
   141a4:	cmppl	r1, r3
   141a6:	it	eq
   141a8:	cmpeq	r0, r2
   141aa:	ite	cs
   141ac:	asrcs	r0, r3, #31
   141ae:	mvncc.w	r0, r3, asr #31
   141b2:	orr.w	r0, r0, #1
   141b6:	bx	lr
   141b8:	mov.w	ip, r1, lsl #1
   141bc:	mvns.w	ip, ip, asr #21
   141c0:	bne.n	141c8 <__cmpdf2+0x64>
   141c2:	orrs.w	ip, r0, r1, lsl #12
   141c6:	bne.n	141d8 <__cmpdf2+0x74>
   141c8:	mov.w	ip, r3, lsl #1
   141cc:	mvns.w	ip, ip, asr #21
   141d0:	bne.n	14180 <__cmpdf2+0x1c>
   141d2:	orrs.w	ip, r2, r3, lsl #12
   141d6:	beq.n	14180 <__cmpdf2+0x1c>
   141d8:	ldr.w	r0, [sp], #4
   141dc:	bx	lr
   141de:	nop

000141e0 <__aeabi_cdrcmple>:
   141e0:	mov	ip, r0
   141e2:	mov	r0, r2
   141e4:	mov	r2, ip
   141e6:	mov	ip, r1
   141e8:	mov	r1, r3
   141ea:	mov	r3, ip
   141ec:	b.n	141f0 <__aeabi_cdcmpeq>
   141ee:	nop

000141f0 <__aeabi_cdcmpeq>:
   141f0:	push	{r0, lr}
   141f2:	bl	14164 <__cmpdf2>
   141f6:	cmp	r0, #0
   141f8:	it	mi
   141fa:	cmnmi.w	r0, #0
   141fe:	pop	{r0, pc}

00014200 <__aeabi_dcmpeq>:
   14200:	str.w	lr, [sp, #-8]!
   14204:	bl	141f0 <__aeabi_cdcmpeq>
   14208:	ite	eq
   1420a:	moveq	r0, #1
   1420c:	movne	r0, #0
   1420e:	ldr.w	pc, [sp], #8
   14212:	nop

00014214 <__aeabi_dcmplt>:
   14214:	str.w	lr, [sp, #-8]!
   14218:	bl	141f0 <__aeabi_cdcmpeq>
   1421c:	ite	cc
   1421e:	movcc	r0, #1
   14220:	movcs	r0, #0
   14222:	ldr.w	pc, [sp], #8
   14226:	nop

00014228 <__aeabi_dcmple>:
   14228:	str.w	lr, [sp, #-8]!
   1422c:	bl	141f0 <__aeabi_cdcmpeq>
   14230:	ite	ls
   14232:	movls	r0, #1
   14234:	movhi	r0, #0
   14236:	ldr.w	pc, [sp], #8
   1423a:	nop

0001423c <__aeabi_dcmpge>:
   1423c:	str.w	lr, [sp, #-8]!
   14240:	bl	141e0 <__aeabi_cdrcmple>
   14244:	ite	ls
   14246:	movls	r0, #1
   14248:	movhi	r0, #0
   1424a:	ldr.w	pc, [sp], #8
   1424e:	nop

00014250 <__aeabi_dcmpgt>:
   14250:	str.w	lr, [sp, #-8]!
   14254:	bl	141e0 <__aeabi_cdrcmple>
   14258:	ite	cc
   1425a:	movcc	r0, #1
   1425c:	movcs	r0, #0
   1425e:	ldr.w	pc, [sp], #8
   14262:	nop

00014264 <__aeabi_dcmpun>:
   14264:	mov.w	ip, r1, lsl #1
   14268:	mvns.w	ip, ip, asr #21
   1426c:	bne.n	14274 <__aeabi_dcmpun+0x10>
   1426e:	orrs.w	ip, r0, r1, lsl #12
   14272:	bne.n	1428a <__aeabi_dcmpun+0x26>
   14274:	mov.w	ip, r3, lsl #1
   14278:	mvns.w	ip, ip, asr #21
   1427c:	bne.n	14284 <__aeabi_dcmpun+0x20>
   1427e:	orrs.w	ip, r2, r3, lsl #12
   14282:	bne.n	1428a <__aeabi_dcmpun+0x26>
   14284:	mov.w	r0, #0
   14288:	bx	lr
   1428a:	mov.w	r0, #1
   1428e:	bx	lr

00014290 <__aeabi_d2iz>:
   14290:	mov.w	r2, r1, lsl #1
   14294:	adds.w	r2, r2, #2097152	; 0x200000
   14298:	bcs.n	142c6 <__aeabi_d2iz+0x36>
   1429a:	bpl.n	142c0 <__aeabi_d2iz+0x30>
   1429c:	mvn.w	r3, #992	; 0x3e0
   142a0:	subs.w	r2, r3, r2, asr #21
   142a4:	bls.n	142cc <__aeabi_d2iz+0x3c>
   142a6:	mov.w	r3, r1, lsl #11
   142aa:	orr.w	r3, r3, #2147483648	; 0x80000000
   142ae:	orr.w	r3, r3, r0, lsr #21
   142b2:	tst.w	r1, #2147483648	; 0x80000000
   142b6:	lsr.w	r0, r3, r2
   142ba:	it	ne
   142bc:	negne	r0, r0
   142be:	bx	lr
   142c0:	mov.w	r0, #0
   142c4:	bx	lr
   142c6:	orrs.w	r0, r0, r1, lsl #12
   142ca:	bne.n	142d8 <__aeabi_d2iz+0x48>
   142cc:	ands.w	r0, r1, #2147483648	; 0x80000000
   142d0:	it	eq
   142d2:	mvneq.w	r0, #2147483648	; 0x80000000
   142d6:	bx	lr
   142d8:	mov.w	r0, #0
   142dc:	bx	lr
   142de:	nop

000142e0 <__aeabi_uldivmod>:
   142e0:	cbnz	r3, 142f8 <__aeabi_uldivmod+0x18>
   142e2:	cbnz	r2, 142f8 <__aeabi_uldivmod+0x18>
   142e4:	cmp	r1, #0
   142e6:	it	eq
   142e8:	cmpeq	r0, #0
   142ea:	itt	ne
   142ec:	movne.w	r1, #4294967295
   142f0:	movne.w	r0, #4294967295
   142f4:	b.w	1461c <__aeabi_idiv0>
   142f8:	sub.w	ip, sp, #8
   142fc:	strd	ip, lr, [sp, #-16]!
   14300:	bl	14338 <__udivmoddi4>
   14304:	ldr.w	lr, [sp, #4]
   14308:	ldrd	r2, r3, [sp, #8]
   1430c:	add	sp, #16
   1430e:	bx	lr

00014310 <__popcountsi2>:
   14310:	lsrs	r3, r0, #1
   14312:	and.w	r3, r3, #1431655765	; 0x55555555
   14316:	subs	r0, r0, r3
   14318:	lsrs	r3, r0, #2
   1431a:	and.w	r3, r3, #858993459	; 0x33333333
   1431e:	and.w	r0, r0, #858993459	; 0x33333333
   14322:	add	r0, r3
   14324:	add.w	r0, r0, r0, lsr #4
   14328:	and.w	r0, r0, #252645135	; 0xf0f0f0f
   1432c:	add.w	r0, r0, r0, lsl #8
   14330:	add.w	r0, r0, r0, lsl #16
   14334:	lsrs	r0, r0, #24
   14336:	bx	lr

00014338 <__udivmoddi4>:
   14338:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1433c:	mov	ip, r1
   1433e:	mov	r6, r1
   14340:	mov	r4, r0
   14342:	ldr	r5, [sp, #32]
   14344:	cmp	r3, #0
   14346:	bne.n	143ea <__udivmoddi4+0xb2>
   14348:	cmp	r2, r1
   1434a:	mov	r7, r2
   1434c:	bls.n	14428 <__udivmoddi4+0xf0>
   1434e:	clz	lr, r2
   14352:	cmp.w	lr, #0
   14356:	beq.n	14370 <__udivmoddi4+0x38>
   14358:	rsb	r4, lr, #32
   1435c:	lsr.w	r4, r0, r4
   14360:	lsl.w	r6, r1, lr
   14364:	orr.w	ip, r4, r6
   14368:	lsl.w	r7, r2, lr
   1436c:	lsl.w	r4, r0, lr
   14370:	mov.w	r9, r7, lsr #16
   14374:	lsrs	r2, r4, #16
   14376:	udiv	r0, ip, r9
   1437a:	uxth.w	r8, r7
   1437e:	mls	r6, r9, r0, ip
   14382:	orr.w	r6, r2, r6, lsl #16
   14386:	mul.w	r3, r0, r8
   1438a:	cmp	r3, r6
   1438c:	bls.n	143a2 <__udivmoddi4+0x6a>
   1438e:	adds	r6, r6, r7
   14390:	add.w	r2, r0, #4294967295
   14394:	bcs.w	145dc <__udivmoddi4+0x2a4>
   14398:	cmp	r3, r6
   1439a:	bls.w	145dc <__udivmoddi4+0x2a4>
   1439e:	subs	r0, #2
   143a0:	add	r6, r7
   143a2:	subs	r6, r6, r3
   143a4:	uxth	r2, r4
   143a6:	udiv	r3, r6, r9
   143aa:	mls	r6, r9, r3, r6
   143ae:	orr.w	r4, r2, r6, lsl #16
   143b2:	mul.w	r8, r3, r8
   143b6:	cmp	r8, r4
   143b8:	bls.n	143ce <__udivmoddi4+0x96>
   143ba:	adds	r4, r4, r7
   143bc:	add.w	r2, r3, #4294967295
   143c0:	bcs.w	145d8 <__udivmoddi4+0x2a0>
   143c4:	cmp	r8, r4
   143c6:	bls.w	145d8 <__udivmoddi4+0x2a0>
   143ca:	subs	r3, #2
   143cc:	add	r4, r7
   143ce:	rsb	r4, r8, r4
   143d2:	orr.w	r0, r3, r0, lsl #16
   143d6:	movs	r1, #0
   143d8:	cmp	r5, #0
   143da:	beq.n	144a2 <__udivmoddi4+0x16a>
   143dc:	lsr.w	r4, r4, lr
   143e0:	movs	r3, #0
   143e2:	str	r4, [r5, #0]
   143e4:	str	r3, [r5, #4]
   143e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143ea:	cmp	r3, r1
   143ec:	bls.n	143fe <__udivmoddi4+0xc6>
   143ee:	cmp	r5, #0
   143f0:	beq.n	1449e <__udivmoddi4+0x166>
   143f2:	movs	r1, #0
   143f4:	stmia.w	r5, {r0, r6}
   143f8:	mov	r0, r1
   143fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143fe:	clz	r1, r3
   14402:	cmp	r1, #0
   14404:	bne.w	14528 <__udivmoddi4+0x1f0>
   14408:	cmp	r3, r6
   1440a:	bcc.n	14412 <__udivmoddi4+0xda>
   1440c:	cmp	r2, r0
   1440e:	bhi.w	14602 <__udivmoddi4+0x2ca>
   14412:	subs	r4, r0, r2
   14414:	sbc.w	r6, r6, r3
   14418:	movs	r0, #1
   1441a:	mov	ip, r6
   1441c:	cmp	r5, #0
   1441e:	beq.n	144a2 <__udivmoddi4+0x16a>
   14420:	stmia.w	r5, {r4, ip}
   14424:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14428:	cbnz	r2, 14430 <__udivmoddi4+0xf8>
   1442a:	movs	r7, #1
   1442c:	udiv	r7, r7, r2
   14430:	clz	lr, r7
   14434:	cmp.w	lr, #0
   14438:	bne.n	144a6 <__udivmoddi4+0x16e>
   1443a:	subs	r3, r6, r7
   1443c:	mov.w	r8, r7, lsr #16
   14440:	uxth.w	ip, r7
   14444:	movs	r1, #1
   14446:	udiv	r0, r3, r8
   1444a:	lsrs	r2, r4, #16
   1444c:	mls	r6, r8, r0, r3
   14450:	orr.w	r6, r2, r6, lsl #16
   14454:	mul.w	r3, ip, r0
   14458:	cmp	r3, r6
   1445a:	bls.n	1446c <__udivmoddi4+0x134>
   1445c:	adds	r6, r6, r7
   1445e:	add.w	r2, r0, #4294967295
   14462:	bcs.n	1446a <__udivmoddi4+0x132>
   14464:	cmp	r3, r6
   14466:	bhi.w	14606 <__udivmoddi4+0x2ce>
   1446a:	mov	r0, r2
   1446c:	subs	r6, r6, r3
   1446e:	uxth	r2, r4
   14470:	udiv	r3, r6, r8
   14474:	mls	r6, r8, r3, r6
   14478:	orr.w	r4, r2, r6, lsl #16
   1447c:	mul.w	ip, ip, r3
   14480:	cmp	ip, r4
   14482:	bls.n	14494 <__udivmoddi4+0x15c>
   14484:	adds	r4, r4, r7
   14486:	add.w	r2, r3, #4294967295
   1448a:	bcs.n	14492 <__udivmoddi4+0x15a>
   1448c:	cmp	ip, r4
   1448e:	bhi.w	145fc <__udivmoddi4+0x2c4>
   14492:	mov	r3, r2
   14494:	rsb	r4, ip, r4
   14498:	orr.w	r0, r3, r0, lsl #16
   1449c:	b.n	143d8 <__udivmoddi4+0xa0>
   1449e:	mov	r1, r5
   144a0:	mov	r0, r5
   144a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   144a6:	rsb	r1, lr, #32
   144aa:	lsl.w	r3, r6, lr
   144ae:	lsl.w	r7, r7, lr
   144b2:	lsr.w	r9, r0, r1
   144b6:	mov.w	r8, r7, lsr #16
   144ba:	lsrs	r6, r1
   144bc:	orr.w	r9, r9, r3
   144c0:	udiv	sl, r6, r8
   144c4:	mov.w	r4, r9, lsr #16
   144c8:	mls	r6, r8, sl, r6
   144cc:	uxth.w	ip, r7
   144d0:	orr.w	r3, r4, r6, lsl #16
   144d4:	mul.w	r2, sl, ip
   144d8:	cmp	r2, r3
   144da:	lsl.w	r4, r0, lr
   144de:	bls.n	144f6 <__udivmoddi4+0x1be>
   144e0:	adds	r3, r3, r7
   144e2:	add.w	r1, sl, #4294967295
   144e6:	bcs.w	145f8 <__udivmoddi4+0x2c0>
   144ea:	cmp	r2, r3
   144ec:	bls.w	145f8 <__udivmoddi4+0x2c0>
   144f0:	sub.w	sl, sl, #2
   144f4:	add	r3, r7
   144f6:	subs	r3, r3, r2
   144f8:	uxth.w	r9, r9
   144fc:	udiv	r1, r3, r8
   14500:	mls	r3, r8, r1, r3
   14504:	orr.w	r3, r9, r3, lsl #16
   14508:	mul.w	r6, r1, ip
   1450c:	cmp	r6, r3
   1450e:	bls.n	14520 <__udivmoddi4+0x1e8>
   14510:	adds	r3, r3, r7
   14512:	add.w	r2, r1, #4294967295
   14516:	bcs.n	145f0 <__udivmoddi4+0x2b8>
   14518:	cmp	r6, r3
   1451a:	bls.n	145f0 <__udivmoddi4+0x2b8>
   1451c:	subs	r1, #2
   1451e:	add	r3, r7
   14520:	subs	r3, r3, r6
   14522:	orr.w	r1, r1, sl, lsl #16
   14526:	b.n	14446 <__udivmoddi4+0x10e>
   14528:	rsb	lr, r1, #32
   1452c:	lsr.w	r4, r2, lr
   14530:	lsls	r3, r1
   14532:	orrs	r3, r4
   14534:	lsr.w	r7, r0, lr
   14538:	lsl.w	r4, r6, r1
   1453c:	mov.w	ip, r3, lsr #16
   14540:	lsr.w	r6, r6, lr
   14544:	orrs	r4, r7
   14546:	udiv	r9, r6, ip
   1454a:	lsrs	r7, r4, #16
   1454c:	mls	r6, ip, r9, r6
   14550:	uxth.w	r8, r3
   14554:	orr.w	r6, r7, r6, lsl #16
   14558:	mul.w	r7, r9, r8
   1455c:	cmp	r7, r6
   1455e:	lsl.w	r2, r2, r1
   14562:	lsl.w	sl, r0, r1
   14566:	bls.n	1457a <__udivmoddi4+0x242>
   14568:	adds	r6, r6, r3
   1456a:	add.w	r0, r9, #4294967295
   1456e:	bcs.n	145f4 <__udivmoddi4+0x2bc>
   14570:	cmp	r7, r6
   14572:	bls.n	145f4 <__udivmoddi4+0x2bc>
   14574:	sub.w	r9, r9, #2
   14578:	add	r6, r3
   1457a:	subs	r6, r6, r7
   1457c:	uxth	r0, r4
   1457e:	udiv	r4, r6, ip
   14582:	mls	r6, ip, r4, r6
   14586:	orr.w	r7, r0, r6, lsl #16
   1458a:	mul.w	r8, r4, r8
   1458e:	cmp	r8, r7
   14590:	bls.n	145a2 <__udivmoddi4+0x26a>
   14592:	adds	r7, r7, r3
   14594:	add.w	r0, r4, #4294967295
   14598:	bcs.n	145ec <__udivmoddi4+0x2b4>
   1459a:	cmp	r8, r7
   1459c:	bls.n	145ec <__udivmoddi4+0x2b4>
   1459e:	subs	r4, #2
   145a0:	add	r7, r3
   145a2:	orr.w	r0, r4, r9, lsl #16
   145a6:	rsb	r7, r8, r7
   145aa:	umull	r8, r9, r0, r2
   145ae:	cmp	r7, r9
   145b0:	mov	r4, r8
   145b2:	mov	r6, r9
   145b4:	bcc.n	145e0 <__udivmoddi4+0x2a8>
   145b6:	beq.n	1460c <__udivmoddi4+0x2d4>
   145b8:	cbz	r5, 14614 <__udivmoddi4+0x2dc>
   145ba:	subs.w	r3, sl, r4
   145be:	sbc.w	r7, r7, r6
   145c2:	lsl.w	lr, r7, lr
   145c6:	lsrs	r3, r1
   145c8:	lsrs	r7, r1
   145ca:	orr.w	r3, lr, r3
   145ce:	stmia.w	r5, {r3, r7}
   145d2:	movs	r1, #0
   145d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145d8:	mov	r3, r2
   145da:	b.n	143ce <__udivmoddi4+0x96>
   145dc:	mov	r0, r2
   145de:	b.n	143a2 <__udivmoddi4+0x6a>
   145e0:	subs.w	r4, r8, r2
   145e4:	sbc.w	r6, r9, r3
   145e8:	subs	r0, #1
   145ea:	b.n	145b8 <__udivmoddi4+0x280>
   145ec:	mov	r4, r0
   145ee:	b.n	145a2 <__udivmoddi4+0x26a>
   145f0:	mov	r1, r2
   145f2:	b.n	14520 <__udivmoddi4+0x1e8>
   145f4:	mov	r9, r0
   145f6:	b.n	1457a <__udivmoddi4+0x242>
   145f8:	mov	sl, r1
   145fa:	b.n	144f6 <__udivmoddi4+0x1be>
   145fc:	subs	r3, #2
   145fe:	add	r4, r7
   14600:	b.n	14494 <__udivmoddi4+0x15c>
   14602:	mov	r0, r1
   14604:	b.n	1441c <__udivmoddi4+0xe4>
   14606:	subs	r0, #2
   14608:	add	r6, r7
   1460a:	b.n	1446c <__udivmoddi4+0x134>
   1460c:	cmp	sl, r8
   1460e:	bcc.n	145e0 <__udivmoddi4+0x2a8>
   14610:	mov	r6, r7
   14612:	b.n	145b8 <__udivmoddi4+0x280>
   14614:	mov	r1, r5
   14616:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1461a:	nop

0001461c <__aeabi_idiv0>:
   1461c:	bx	lr
   1461e:	nop

00014620 <__cxa_atexit>:
   14620:	mov	r3, r2
   14622:	mov	r2, r1
   14624:	mov	r1, r0
   14626:	movs	r0, #2
   14628:	b.w	171e8 <__register_exitproc>

0001462c <fcvtf>:
   1462c:	push	{r4, r5, r6, lr}
   1462e:	mov	r4, r0
   14630:	vmov	r0, s0
   14634:	mov	r5, r1
   14636:	mov	r6, r2
   14638:	bl	13c88 <__aeabi_f2d>
   1463c:	mov	r2, r6
   1463e:	vmov	d0, r0, r1
   14642:	movs	r3, #0
   14644:	mov	r1, r5
   14646:	mov	r0, r4
   14648:	ldmia.w	sp!, {r4, r5, r6, lr}
   1464c:	b.w	1820c <fcvtbuf>

00014650 <__errno>:
   14650:	ldr	r3, [pc, #4]	; (14658 <__errno+0x8>)
   14652:	ldr	r0, [r3, #0]
   14654:	bx	lr
   14656:	nop
   14658:	.word	0x1fff0f60

0001465c <__libc_init_array>:
   1465c:	push	{r4, r5, r6, lr}
   1465e:	ldr	r6, [pc, #60]	; (1469c <__libc_init_array+0x40>)
   14660:	ldr	r5, [pc, #60]	; (146a0 <__libc_init_array+0x44>)
   14662:	subs	r6, r6, r5
   14664:	asrs	r6, r6, #2
   14666:	it	ne
   14668:	movne	r4, #0
   1466a:	beq.n	14678 <__libc_init_array+0x1c>
   1466c:	adds	r4, #1
   1466e:	ldr.w	r3, [r5], #4
   14672:	blx	r3
   14674:	cmp	r6, r4
   14676:	bne.n	1466c <__libc_init_array+0x10>
   14678:	ldr	r6, [pc, #40]	; (146a4 <__libc_init_array+0x48>)
   1467a:	ldr	r5, [pc, #44]	; (146a8 <__libc_init_array+0x4c>)
   1467c:	subs	r6, r6, r5
   1467e:	bl	19d3c <_init>
   14682:	asrs	r6, r6, #2
   14684:	it	ne
   14686:	movne	r4, #0
   14688:	beq.n	14698 <__libc_init_array+0x3c>
   1468a:	adds	r4, #1
   1468c:	ldr.w	r3, [r5], #4
   14690:	blx	r3
   14692:	cmp	r6, r4
   14694:	bne.n	1468a <__libc_init_array+0x2e>
   14696:	pop	{r4, r5, r6, pc}
   14698:	pop	{r4, r5, r6, pc}
   1469a:	nop
   1469c:	.word	0x00019d48
   146a0:	.word	0x00019d48
   146a4:	.word	0x00019d58
   146a8:	.word	0x00019d48

000146ac <malloc>:
   146ac:	ldr	r3, [pc, #8]	; (146b8 <malloc+0xc>)
   146ae:	mov	r1, r0
   146b0:	ldr	r0, [r3, #0]
   146b2:	b.w	146cc <_malloc_r>
   146b6:	nop
   146b8:	.word	0x1fff0f60

000146bc <free>:
   146bc:	ldr	r3, [pc, #8]	; (146c8 <free+0xc>)
   146be:	mov	r1, r0
   146c0:	ldr	r0, [r3, #0]
   146c2:	b.w	183d0 <_free_r>
   146c6:	nop
   146c8:	.word	0x1fff0f60

000146cc <_malloc_r>:
   146cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146d0:	add.w	r5, r1, #11
   146d4:	cmp	r5, #22
   146d6:	sub	sp, #12
   146d8:	mov	r6, r0
   146da:	bls.w	1481c <_malloc_r+0x150>
   146de:	bics.w	r5, r5, #7
   146e2:	bmi.w	14864 <_malloc_r+0x198>
   146e6:	cmp	r1, r5
   146e8:	bhi.w	14864 <_malloc_r+0x198>
   146ec:	bl	14ed8 <__malloc_lock>
   146f0:	cmp.w	r5, #504	; 0x1f8
   146f4:	bcc.w	14c30 <_malloc_r+0x564>
   146f8:	lsrs	r3, r5, #9
   146fa:	beq.w	14872 <_malloc_r+0x1a6>
   146fe:	cmp	r3, #4
   14700:	bhi.w	14a0a <_malloc_r+0x33e>
   14704:	lsrs	r0, r5, #6
   14706:	add.w	lr, r0, #57	; 0x39
   1470a:	mov.w	r3, lr, lsl #1
   1470e:	adds	r0, #56	; 0x38
   14710:	ldr	r7, [pc, #784]	; (14a24 <_malloc_r+0x358>)
   14712:	add.w	r3, r7, r3, lsl #2
   14716:	sub.w	r1, r3, #8
   1471a:	ldr	r4, [r3, #4]
   1471c:	cmp	r1, r4
   1471e:	bne.n	14730 <_malloc_r+0x64>
   14720:	b.n	1487c <_malloc_r+0x1b0>
   14722:	cmp	r2, #0
   14724:	bge.w	14880 <_malloc_r+0x1b4>
   14728:	ldr	r4, [r4, #12]
   1472a:	cmp	r1, r4
   1472c:	beq.w	1487c <_malloc_r+0x1b0>
   14730:	ldr	r3, [r4, #4]
   14732:	bic.w	r3, r3, #3
   14736:	subs	r2, r3, r5
   14738:	cmp	r2, #15
   1473a:	ble.n	14722 <_malloc_r+0x56>
   1473c:	ldr	r1, [pc, #740]	; (14a24 <_malloc_r+0x358>)
   1473e:	ldr	r4, [r7, #16]
   14740:	add.w	lr, r1, #8
   14744:	cmp	r4, lr
   14746:	beq.w	14ab0 <_malloc_r+0x3e4>
   1474a:	ldr	r3, [r4, #4]
   1474c:	bic.w	r3, r3, #3
   14750:	subs	r2, r3, r5
   14752:	cmp	r2, #15
   14754:	bgt.w	14a8a <_malloc_r+0x3be>
   14758:	cmp	r2, #0
   1475a:	str.w	lr, [r1, #20]
   1475e:	str.w	lr, [r1, #16]
   14762:	bge.w	148a2 <_malloc_r+0x1d6>
   14766:	cmp.w	r3, #512	; 0x200
   1476a:	bcs.w	14a3c <_malloc_r+0x370>
   1476e:	lsrs	r3, r3, #3
   14770:	add.w	ip, r3, #1
   14774:	movs	r2, #1
   14776:	asrs	r3, r3, #2
   14778:	lsl.w	r3, r2, r3
   1477c:	ldr	r2, [r1, #4]
   1477e:	ldr.w	r8, [r1, ip, lsl #3]
   14782:	str.w	r8, [r4, #8]
   14786:	add.w	r9, r1, ip, lsl #3
   1478a:	orrs	r2, r3
   1478c:	sub.w	r3, r9, #8
   14790:	str	r3, [r4, #12]
   14792:	str	r2, [r1, #4]
   14794:	str.w	r4, [r1, ip, lsl #3]
   14798:	str.w	r4, [r8, #12]
   1479c:	asrs	r3, r0, #2
   1479e:	movs	r4, #1
   147a0:	lsls	r4, r3
   147a2:	cmp	r4, r2
   147a4:	bhi.w	148bc <_malloc_r+0x1f0>
   147a8:	tst	r4, r2
   147aa:	bne.n	147ba <_malloc_r+0xee>
   147ac:	bic.w	r0, r0, #3
   147b0:	lsls	r4, r4, #1
   147b2:	tst	r4, r2
   147b4:	add.w	r0, r0, #4
   147b8:	beq.n	147b0 <_malloc_r+0xe4>
   147ba:	add.w	r9, r7, r0, lsl #3
   147be:	mov	ip, r9
   147c0:	mov	r8, r0
   147c2:	ldr.w	r1, [ip, #12]
   147c6:	cmp	ip, r1
   147c8:	bne.n	147da <_malloc_r+0x10e>
   147ca:	b.n	14ab4 <_malloc_r+0x3e8>
   147cc:	cmp	r2, #0
   147ce:	bge.w	14ad4 <_malloc_r+0x408>
   147d2:	ldr	r1, [r1, #12]
   147d4:	cmp	ip, r1
   147d6:	beq.w	14ab4 <_malloc_r+0x3e8>
   147da:	ldr	r3, [r1, #4]
   147dc:	bic.w	r3, r3, #3
   147e0:	subs	r2, r3, r5
   147e2:	cmp	r2, #15
   147e4:	ble.n	147cc <_malloc_r+0x100>
   147e6:	mov	r4, r1
   147e8:	ldr.w	ip, [r1, #12]
   147ec:	ldr.w	r8, [r4, #8]!
   147f0:	adds	r3, r1, r5
   147f2:	orr.w	r5, r5, #1
   147f6:	str	r5, [r1, #4]
   147f8:	orr.w	r1, r2, #1
   147fc:	str.w	ip, [r8, #12]
   14800:	mov	r0, r6
   14802:	str.w	r8, [ip, #8]
   14806:	str	r3, [r7, #20]
   14808:	str	r3, [r7, #16]
   1480a:	str.w	lr, [r3, #12]
   1480e:	str.w	lr, [r3, #8]
   14812:	str	r1, [r3, #4]
   14814:	str	r2, [r3, r2]
   14816:	bl	14edc <__malloc_unlock>
   1481a:	b.n	1485c <_malloc_r+0x190>
   1481c:	cmp	r1, #16
   1481e:	bhi.n	14864 <_malloc_r+0x198>
   14820:	bl	14ed8 <__malloc_lock>
   14824:	movs	r5, #16
   14826:	movs	r3, #6
   14828:	movs	r0, #2
   1482a:	ldr	r7, [pc, #504]	; (14a24 <_malloc_r+0x358>)
   1482c:	add.w	r3, r7, r3, lsl #2
   14830:	sub.w	r2, r3, #8
   14834:	ldr	r4, [r3, #4]
   14836:	cmp	r4, r2
   14838:	beq.w	14ac6 <_malloc_r+0x3fa>
   1483c:	ldr	r3, [r4, #4]
   1483e:	ldr	r1, [r4, #12]
   14840:	ldr	r5, [r4, #8]
   14842:	bic.w	r3, r3, #3
   14846:	add	r3, r4
   14848:	mov	r0, r6
   1484a:	ldr	r2, [r3, #4]
   1484c:	str	r1, [r5, #12]
   1484e:	orr.w	r2, r2, #1
   14852:	str	r5, [r1, #8]
   14854:	str	r2, [r3, #4]
   14856:	bl	14edc <__malloc_unlock>
   1485a:	adds	r4, #8
   1485c:	mov	r0, r4
   1485e:	add	sp, #12
   14860:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14864:	movs	r4, #0
   14866:	movs	r3, #12
   14868:	mov	r0, r4
   1486a:	str	r3, [r6, #0]
   1486c:	add	sp, #12
   1486e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14872:	movs	r3, #128	; 0x80
   14874:	mov.w	lr, #64	; 0x40
   14878:	movs	r0, #63	; 0x3f
   1487a:	b.n	14710 <_malloc_r+0x44>
   1487c:	mov	r0, lr
   1487e:	b.n	1473c <_malloc_r+0x70>
   14880:	add	r3, r4
   14882:	ldr	r1, [r4, #12]
   14884:	ldr	r2, [r3, #4]
   14886:	ldr	r5, [r4, #8]
   14888:	orr.w	r2, r2, #1
   1488c:	str	r1, [r5, #12]
   1488e:	mov	r0, r6
   14890:	str	r5, [r1, #8]
   14892:	str	r2, [r3, #4]
   14894:	bl	14edc <__malloc_unlock>
   14898:	adds	r4, #8
   1489a:	mov	r0, r4
   1489c:	add	sp, #12
   1489e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148a2:	add	r3, r4
   148a4:	mov	r0, r6
   148a6:	ldr	r2, [r3, #4]
   148a8:	orr.w	r2, r2, #1
   148ac:	str	r2, [r3, #4]
   148ae:	bl	14edc <__malloc_unlock>
   148b2:	adds	r4, #8
   148b4:	mov	r0, r4
   148b6:	add	sp, #12
   148b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148bc:	ldr	r4, [r7, #8]
   148be:	ldr	r3, [r4, #4]
   148c0:	bic.w	r8, r3, #3
   148c4:	cmp	r8, r5
   148c6:	bcc.n	148d2 <_malloc_r+0x206>
   148c8:	rsb	r3, r5, r8
   148cc:	cmp	r3, #15
   148ce:	bgt.w	149ea <_malloc_r+0x31e>
   148d2:	ldr	r3, [pc, #340]	; (14a28 <_malloc_r+0x35c>)
   148d4:	ldr.w	r9, [pc, #352]	; 14a38 <_malloc_r+0x36c>
   148d8:	ldr	r2, [r3, #0]
   148da:	ldr.w	r3, [r9]
   148de:	adds	r3, #1
   148e0:	add	r2, r5
   148e2:	add.w	sl, r4, r8
   148e6:	beq.w	14baa <_malloc_r+0x4de>
   148ea:	add.w	r2, r2, #4096	; 0x1000
   148ee:	adds	r2, #15
   148f0:	bic.w	r2, r2, #4080	; 0xff0
   148f4:	bic.w	r2, r2, #15
   148f8:	mov	r1, r2
   148fa:	mov	r0, r6
   148fc:	str	r2, [sp, #4]
   148fe:	bl	152c0 <_sbrk_r>
   14902:	cmp.w	r0, #4294967295
   14906:	mov	fp, r0
   14908:	ldr	r2, [sp, #4]
   1490a:	beq.w	14bbe <_malloc_r+0x4f2>
   1490e:	cmp	sl, r0
   14910:	bhi.w	14b0c <_malloc_r+0x440>
   14914:	ldr	r3, [pc, #276]	; (14a2c <_malloc_r+0x360>)
   14916:	ldr	r1, [r3, #0]
   14918:	cmp	sl, fp
   1491a:	add	r1, r2
   1491c:	str	r1, [r3, #0]
   1491e:	beq.w	14bc8 <_malloc_r+0x4fc>
   14922:	ldr.w	r0, [r9]
   14926:	ldr.w	lr, [pc, #272]	; 14a38 <_malloc_r+0x36c>
   1492a:	adds	r0, #1
   1492c:	ittet	ne
   1492e:	rsbne	sl, sl, fp
   14932:	addne	r1, sl
   14934:	streq.w	fp, [lr]
   14938:	strne	r1, [r3, #0]
   1493a:	ands.w	r1, fp, #7
   1493e:	beq.w	14b70 <_malloc_r+0x4a4>
   14942:	rsb	r0, r1, #8
   14946:	rsb	r1, r1, #4096	; 0x1000
   1494a:	add	fp, r0
   1494c:	adds	r1, #8
   1494e:	add	r2, fp
   14950:	ubfx	r2, r2, #0, #12
   14954:	rsb	r9, r2, r1
   14958:	mov	r1, r9
   1495a:	mov	r0, r6
   1495c:	str	r3, [sp, #4]
   1495e:	bl	152c0 <_sbrk_r>
   14962:	adds	r3, r0, #1
   14964:	ldr	r3, [sp, #4]
   14966:	beq.w	14be8 <_malloc_r+0x51c>
   1496a:	rsb	r2, fp, r0
   1496e:	add	r2, r9
   14970:	orr.w	r2, r2, #1
   14974:	ldr	r1, [r3, #0]
   14976:	str.w	fp, [r7, #8]
   1497a:	add	r1, r9
   1497c:	cmp	r4, r7
   1497e:	str.w	r2, [fp, #4]
   14982:	str	r1, [r3, #0]
   14984:	ldr.w	r9, [pc, #164]	; 14a2c <_malloc_r+0x360>
   14988:	beq.n	149b8 <_malloc_r+0x2ec>
   1498a:	cmp.w	r8, #15
   1498e:	bls.w	14b8c <_malloc_r+0x4c0>
   14992:	ldr	r2, [r4, #4]
   14994:	sub.w	r3, r8, #12
   14998:	bic.w	r3, r3, #7
   1499c:	adds	r0, r4, r3
   1499e:	and.w	r2, r2, #1
   149a2:	mov.w	lr, #5
   149a6:	orrs	r2, r3
   149a8:	cmp	r3, #15
   149aa:	str	r2, [r4, #4]
   149ac:	str.w	lr, [r0, #4]
   149b0:	str.w	lr, [r0, #8]
   149b4:	bhi.w	14bf0 <_malloc_r+0x524>
   149b8:	ldr	r3, [pc, #116]	; (14a30 <_malloc_r+0x364>)
   149ba:	ldr	r4, [r7, #8]
   149bc:	ldr	r2, [r3, #0]
   149be:	cmp	r1, r2
   149c0:	it	hi
   149c2:	strhi	r1, [r3, #0]
   149c4:	ldr	r3, [pc, #108]	; (14a34 <_malloc_r+0x368>)
   149c6:	ldr	r2, [r3, #0]
   149c8:	cmp	r1, r2
   149ca:	ldr	r2, [r4, #4]
   149cc:	it	hi
   149ce:	strhi	r1, [r3, #0]
   149d0:	bic.w	r2, r2, #3
   149d4:	cmp	r5, r2
   149d6:	sub.w	r3, r2, r5
   149da:	bhi.n	149e0 <_malloc_r+0x314>
   149dc:	cmp	r3, #15
   149de:	bgt.n	149ea <_malloc_r+0x31e>
   149e0:	mov	r0, r6
   149e2:	bl	14edc <__malloc_unlock>
   149e6:	movs	r4, #0
   149e8:	b.n	1485c <_malloc_r+0x190>
   149ea:	adds	r2, r4, r5
   149ec:	orr.w	r3, r3, #1
   149f0:	orr.w	r5, r5, #1
   149f4:	str	r5, [r4, #4]
   149f6:	mov	r0, r6
   149f8:	str	r2, [r7, #8]
   149fa:	str	r3, [r2, #4]
   149fc:	bl	14edc <__malloc_unlock>
   14a00:	adds	r4, #8
   14a02:	mov	r0, r4
   14a04:	add	sp, #12
   14a06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a0a:	cmp	r3, #20
   14a0c:	bls.n	14af2 <_malloc_r+0x426>
   14a0e:	cmp	r3, #84	; 0x54
   14a10:	bhi.w	14b5c <_malloc_r+0x490>
   14a14:	lsrs	r0, r5, #12
   14a16:	add.w	lr, r0, #111	; 0x6f
   14a1a:	mov.w	r3, lr, lsl #1
   14a1e:	adds	r0, #110	; 0x6e
   14a20:	b.n	14710 <_malloc_r+0x44>
   14a22:	nop
   14a24:	.word	0x1fff10d0
   14a28:	.word	0x1fff2c78
   14a2c:	.word	0x1fff2c7c
   14a30:	.word	0x1fff2c74
   14a34:	.word	0x1fff2c70
   14a38:	.word	0x1fff14dc
   14a3c:	lsrs	r2, r3, #9
   14a3e:	cmp	r2, #4
   14a40:	bls.n	14b00 <_malloc_r+0x434>
   14a42:	cmp	r2, #20
   14a44:	bhi.w	14bae <_malloc_r+0x4e2>
   14a48:	add.w	r1, r2, #92	; 0x5c
   14a4c:	lsls	r1, r1, #1
   14a4e:	adds	r2, #91	; 0x5b
   14a50:	add.w	ip, r7, r1, lsl #2
   14a54:	ldr.w	r1, [r7, r1, lsl #2]
   14a58:	ldr.w	r8, [pc, #476]	; 14c38 <_malloc_r+0x56c>
   14a5c:	sub.w	ip, ip, #8
   14a60:	cmp	ip, r1
   14a62:	beq.w	14b76 <_malloc_r+0x4aa>
   14a66:	ldr	r2, [r1, #4]
   14a68:	bic.w	r2, r2, #3
   14a6c:	cmp	r3, r2
   14a6e:	bcs.n	14a76 <_malloc_r+0x3aa>
   14a70:	ldr	r1, [r1, #8]
   14a72:	cmp	ip, r1
   14a74:	bne.n	14a66 <_malloc_r+0x39a>
   14a76:	ldr.w	ip, [r1, #12]
   14a7a:	ldr	r2, [r7, #4]
   14a7c:	str.w	ip, [r4, #12]
   14a80:	str	r1, [r4, #8]
   14a82:	str.w	r4, [ip, #8]
   14a86:	str	r4, [r1, #12]
   14a88:	b.n	1479c <_malloc_r+0xd0>
   14a8a:	adds	r3, r4, r5
   14a8c:	orr.w	r7, r2, #1
   14a90:	orr.w	r5, r5, #1
   14a94:	str	r5, [r4, #4]
   14a96:	mov	r0, r6
   14a98:	str	r3, [r1, #20]
   14a9a:	str	r3, [r1, #16]
   14a9c:	str.w	lr, [r3, #12]
   14aa0:	str.w	lr, [r3, #8]
   14aa4:	str	r7, [r3, #4]
   14aa6:	str	r2, [r3, r2]
   14aa8:	adds	r4, #8
   14aaa:	bl	14edc <__malloc_unlock>
   14aae:	b.n	1485c <_malloc_r+0x190>
   14ab0:	ldr	r2, [r1, #4]
   14ab2:	b.n	1479c <_malloc_r+0xd0>
   14ab4:	add.w	r8, r8, #1
   14ab8:	tst.w	r8, #3
   14abc:	add.w	ip, ip, #8
   14ac0:	bne.w	147c2 <_malloc_r+0xf6>
   14ac4:	b.n	14b28 <_malloc_r+0x45c>
   14ac6:	ldr	r4, [r3, #12]
   14ac8:	cmp	r3, r4
   14aca:	it	eq
   14acc:	addeq	r0, #2
   14ace:	beq.w	1473c <_malloc_r+0x70>
   14ad2:	b.n	1483c <_malloc_r+0x170>
   14ad4:	add	r3, r1
   14ad6:	mov	r4, r1
   14ad8:	ldr	r2, [r3, #4]
   14ada:	ldr	r1, [r1, #12]
   14adc:	ldr.w	r5, [r4, #8]!
   14ae0:	orr.w	r2, r2, #1
   14ae4:	str	r2, [r3, #4]
   14ae6:	mov	r0, r6
   14ae8:	str	r1, [r5, #12]
   14aea:	str	r5, [r1, #8]
   14aec:	bl	14edc <__malloc_unlock>
   14af0:	b.n	1485c <_malloc_r+0x190>
   14af2:	add.w	lr, r3, #92	; 0x5c
   14af6:	add.w	r0, r3, #91	; 0x5b
   14afa:	mov.w	r3, lr, lsl #1
   14afe:	b.n	14710 <_malloc_r+0x44>
   14b00:	lsrs	r2, r3, #6
   14b02:	add.w	r1, r2, #57	; 0x39
   14b06:	lsls	r1, r1, #1
   14b08:	adds	r2, #56	; 0x38
   14b0a:	b.n	14a50 <_malloc_r+0x384>
   14b0c:	cmp	r4, r7
   14b0e:	ldr	r3, [pc, #296]	; (14c38 <_malloc_r+0x56c>)
   14b10:	beq.w	14914 <_malloc_r+0x248>
   14b14:	ldr	r4, [r3, #8]
   14b16:	ldr	r2, [r4, #4]
   14b18:	bic.w	r2, r2, #3
   14b1c:	b.n	149d4 <_malloc_r+0x308>
   14b1e:	ldr.w	r3, [r9], #-8
   14b22:	cmp	r9, r3
   14b24:	bne.w	14c2c <_malloc_r+0x560>
   14b28:	tst.w	r0, #3
   14b2c:	add.w	r0, r0, #4294967295
   14b30:	bne.n	14b1e <_malloc_r+0x452>
   14b32:	ldr	r3, [r7, #4]
   14b34:	bic.w	r3, r3, r4
   14b38:	str	r3, [r7, #4]
   14b3a:	lsls	r4, r4, #1
   14b3c:	cmp	r4, r3
   14b3e:	bhi.w	148bc <_malloc_r+0x1f0>
   14b42:	cmp	r4, #0
   14b44:	beq.w	148bc <_malloc_r+0x1f0>
   14b48:	tst	r4, r3
   14b4a:	mov	r0, r8
   14b4c:	bne.w	147ba <_malloc_r+0xee>
   14b50:	lsls	r4, r4, #1
   14b52:	tst	r4, r3
   14b54:	add.w	r0, r0, #4
   14b58:	beq.n	14b50 <_malloc_r+0x484>
   14b5a:	b.n	147ba <_malloc_r+0xee>
   14b5c:	cmp.w	r3, #340	; 0x154
   14b60:	bhi.n	14b94 <_malloc_r+0x4c8>
   14b62:	lsrs	r0, r5, #15
   14b64:	add.w	lr, r0, #120	; 0x78
   14b68:	mov.w	r3, lr, lsl #1
   14b6c:	adds	r0, #119	; 0x77
   14b6e:	b.n	14710 <_malloc_r+0x44>
   14b70:	mov.w	r1, #4096	; 0x1000
   14b74:	b.n	1494e <_malloc_r+0x282>
   14b76:	movs	r1, #1
   14b78:	ldr.w	r3, [r8, #4]
   14b7c:	asrs	r2, r2, #2
   14b7e:	lsl.w	r2, r1, r2
   14b82:	orrs	r2, r3
   14b84:	str.w	r2, [r8, #4]
   14b88:	mov	r1, ip
   14b8a:	b.n	14a7c <_malloc_r+0x3b0>
   14b8c:	movs	r3, #1
   14b8e:	str.w	r3, [fp, #4]
   14b92:	b.n	149e0 <_malloc_r+0x314>
   14b94:	movw	r2, #1364	; 0x554
   14b98:	cmp	r3, r2
   14b9a:	bhi.n	14bde <_malloc_r+0x512>
   14b9c:	lsrs	r0, r5, #18
   14b9e:	add.w	lr, r0, #125	; 0x7d
   14ba2:	mov.w	r3, lr, lsl #1
   14ba6:	adds	r0, #124	; 0x7c
   14ba8:	b.n	14710 <_malloc_r+0x44>
   14baa:	adds	r2, #16
   14bac:	b.n	148f8 <_malloc_r+0x22c>
   14bae:	cmp	r2, #84	; 0x54
   14bb0:	bhi.n	14c00 <_malloc_r+0x534>
   14bb2:	lsrs	r2, r3, #12
   14bb4:	add.w	r1, r2, #111	; 0x6f
   14bb8:	lsls	r1, r1, #1
   14bba:	adds	r2, #110	; 0x6e
   14bbc:	b.n	14a50 <_malloc_r+0x384>
   14bbe:	ldr	r4, [r7, #8]
   14bc0:	ldr	r2, [r4, #4]
   14bc2:	bic.w	r2, r2, #3
   14bc6:	b.n	149d4 <_malloc_r+0x308>
   14bc8:	ubfx	r0, sl, #0, #12
   14bcc:	cmp	r0, #0
   14bce:	bne.w	14922 <_malloc_r+0x256>
   14bd2:	add	r2, r8
   14bd4:	ldr	r3, [r7, #8]
   14bd6:	orr.w	r2, r2, #1
   14bda:	str	r2, [r3, #4]
   14bdc:	b.n	149b8 <_malloc_r+0x2ec>
   14bde:	movs	r3, #254	; 0xfe
   14be0:	mov.w	lr, #127	; 0x7f
   14be4:	movs	r0, #126	; 0x7e
   14be6:	b.n	14710 <_malloc_r+0x44>
   14be8:	movs	r2, #1
   14bea:	mov.w	r9, #0
   14bee:	b.n	14974 <_malloc_r+0x2a8>
   14bf0:	add.w	r1, r4, #8
   14bf4:	mov	r0, r6
   14bf6:	bl	183d0 <_free_r>
   14bfa:	ldr.w	r1, [r9]
   14bfe:	b.n	149b8 <_malloc_r+0x2ec>
   14c00:	cmp.w	r2, #340	; 0x154
   14c04:	bhi.n	14c12 <_malloc_r+0x546>
   14c06:	lsrs	r2, r3, #15
   14c08:	add.w	r1, r2, #120	; 0x78
   14c0c:	lsls	r1, r1, #1
   14c0e:	adds	r2, #119	; 0x77
   14c10:	b.n	14a50 <_malloc_r+0x384>
   14c12:	movw	r1, #1364	; 0x554
   14c16:	cmp	r2, r1
   14c18:	bhi.n	14c26 <_malloc_r+0x55a>
   14c1a:	lsrs	r2, r3, #18
   14c1c:	add.w	r1, r2, #125	; 0x7d
   14c20:	lsls	r1, r1, #1
   14c22:	adds	r2, #124	; 0x7c
   14c24:	b.n	14a50 <_malloc_r+0x384>
   14c26:	movs	r1, #254	; 0xfe
   14c28:	movs	r2, #126	; 0x7e
   14c2a:	b.n	14a50 <_malloc_r+0x384>
   14c2c:	ldr	r3, [r7, #4]
   14c2e:	b.n	14b3a <_malloc_r+0x46e>
   14c30:	lsrs	r0, r5, #3
   14c32:	adds	r3, r0, #1
   14c34:	lsls	r3, r3, #1
   14c36:	b.n	1482a <_malloc_r+0x15e>
   14c38:	.word	0x1fff10d0

00014c3c <__ascii_mbtowc>:
   14c3c:	sub	sp, #8
   14c3e:	cbz	r1, 14c54 <__ascii_mbtowc+0x18>
   14c40:	cbz	r2, 14c5a <__ascii_mbtowc+0x1e>
   14c42:	cbz	r3, 14c60 <__ascii_mbtowc+0x24>
   14c44:	ldrb	r3, [r2, #0]
   14c46:	str	r3, [r1, #0]
   14c48:	ldrb	r2, [r2, #0]
   14c4a:	adds	r0, r2, #0
   14c4c:	it	ne
   14c4e:	movne	r0, #1
   14c50:	add	sp, #8
   14c52:	bx	lr
   14c54:	add	r1, sp, #4
   14c56:	cmp	r2, #0
   14c58:	bne.n	14c42 <__ascii_mbtowc+0x6>
   14c5a:	mov	r0, r2
   14c5c:	add	sp, #8
   14c5e:	bx	lr
   14c60:	mvn.w	r0, #1
   14c64:	b.n	14c50 <__ascii_mbtowc+0x14>
   14c66:	nop
   14c68:			; <UNDEFINED> instruction: 0xffffffff
   14c6c:			; <UNDEFINED> instruction: 0xffffffff

00014c70 <memchr>:
   14c70:	and.w	r1, r1, #255	; 0xff
   14c74:	cmp	r2, #16
   14c76:	blt.n	14cd0 <memchr+0x60>
   14c78:	tst.w	r0, #7
   14c7c:	beq.n	14c90 <memchr+0x20>
   14c7e:	ldrb.w	r3, [r0], #1
   14c82:	subs	r2, #1
   14c84:	cmp	r3, r1
   14c86:	beq.n	14ce4 <memchr+0x74>
   14c88:	tst.w	r0, #7
   14c8c:	cbz	r2, 14ce0 <memchr+0x70>
   14c8e:	bne.n	14c7e <memchr+0xe>
   14c90:	push	{r4, r5, r6, r7}
   14c92:	orr.w	r1, r1, r1, lsl #8
   14c96:	orr.w	r1, r1, r1, lsl #16
   14c9a:	bic.w	r4, r2, #7
   14c9e:	mvns.w	r7, #0
   14ca2:	movs	r3, #0
   14ca4:	ldrd	r5, r6, [r0], #8
   14ca8:	subs	r4, #8
   14caa:	eor.w	r5, r5, r1
   14cae:	eor.w	r6, r6, r1
   14cb2:	uadd8	r5, r5, r7
   14cb6:	sel	r5, r3, r7
   14cba:	uadd8	r6, r6, r7
   14cbe:	sel	r6, r5, r7
   14cc2:	cbnz	r6, 14ce8 <memchr+0x78>
   14cc4:	bne.n	14ca4 <memchr+0x34>
   14cc6:	pop	{r4, r5, r6, r7}
   14cc8:	and.w	r1, r1, #255	; 0xff
   14ccc:	and.w	r2, r2, #7
   14cd0:	cbz	r2, 14ce0 <memchr+0x70>
   14cd2:	ldrb.w	r3, [r0], #1
   14cd6:	subs	r2, #1
   14cd8:	eor.w	r3, r3, r1
   14cdc:	cbz	r3, 14ce4 <memchr+0x74>
   14cde:	bne.n	14cd2 <memchr+0x62>
   14ce0:	movs	r0, #0
   14ce2:	bx	lr
   14ce4:	subs	r0, #1
   14ce6:	bx	lr
   14ce8:	cmp	r5, #0
   14cea:	itte	eq
   14cec:	moveq	r5, r6
   14cee:	subeq	r0, #3
   14cf0:	subne	r0, #7
   14cf2:	tst.w	r5, #1
   14cf6:	bne.n	14d08 <memchr+0x98>
   14cf8:	adds	r0, #1
   14cfa:	tst.w	r5, #256	; 0x100
   14cfe:	ittt	eq
   14d00:	addeq	r0, #1
   14d02:	tsteq.w	r5, #98304	; 0x18000
   14d06:	addeq	r0, #1
   14d08:	pop	{r4, r5, r6, r7}
   14d0a:	subs	r0, #1
   14d0c:	bx	lr
   14d0e:	nop

00014d10 <memcmp>:
   14d10:	cmp	r2, #3
   14d12:	push	{r4, r5, r6}
   14d14:	bls.n	14d64 <memcmp+0x54>
   14d16:	orr.w	r3, r0, r1
   14d1a:	lsls	r3, r3, #30
   14d1c:	beq.n	14d42 <memcmp+0x32>
   14d1e:	ldrb	r4, [r0, #0]
   14d20:	ldrb	r5, [r1, #0]
   14d22:	cmp	r4, r5
   14d24:	bne.n	14d6c <memcmp+0x5c>
   14d26:	add	r2, r0
   14d28:	adds	r3, r0, #1
   14d2a:	b.n	14d38 <memcmp+0x28>
   14d2c:	ldrb.w	r4, [r3], #1
   14d30:	ldrb.w	r5, [r1, #1]!
   14d34:	cmp	r4, r5
   14d36:	bne.n	14d6c <memcmp+0x5c>
   14d38:	cmp	r3, r2
   14d3a:	bne.n	14d2c <memcmp+0x1c>
   14d3c:	movs	r0, #0
   14d3e:	pop	{r4, r5, r6}
   14d40:	bx	lr
   14d42:	mov	r4, r1
   14d44:	mov	r3, r0
   14d46:	ldr	r6, [r3, #0]
   14d48:	ldr	r5, [r4, #0]
   14d4a:	cmp	r6, r5
   14d4c:	mov	r0, r3
   14d4e:	mov	r1, r4
   14d50:	add.w	r3, r3, #4
   14d54:	add.w	r4, r4, #4
   14d58:	bne.n	14d1e <memcmp+0xe>
   14d5a:	subs	r2, #4
   14d5c:	cmp	r2, #3
   14d5e:	mov	r0, r3
   14d60:	mov	r1, r4
   14d62:	bhi.n	14d46 <memcmp+0x36>
   14d64:	cmp	r2, #0
   14d66:	bne.n	14d1e <memcmp+0xe>
   14d68:	mov	r0, r2
   14d6a:	b.n	14d3e <memcmp+0x2e>
   14d6c:	subs	r0, r4, r5
   14d6e:	pop	{r4, r5, r6}
   14d70:	bx	lr
   14d72:	nop

00014d74 <memmove>:
   14d74:	cmp	r0, r1
   14d76:	push	{r4, r5, r6, r7, lr}
   14d78:	bls.n	14d96 <memmove+0x22>
   14d7a:	adds	r3, r1, r2
   14d7c:	cmp	r0, r3
   14d7e:	bcs.n	14d96 <memmove+0x22>
   14d80:	adds	r1, r0, r2
   14d82:	cmp	r2, #0
   14d84:	beq.n	14e2a <memmove+0xb6>
   14d86:	subs	r2, r3, r2
   14d88:	ldrb.w	r4, [r3, #-1]!
   14d8c:	strb.w	r4, [r1, #-1]!
   14d90:	cmp	r3, r2
   14d92:	bne.n	14d88 <memmove+0x14>
   14d94:	pop	{r4, r5, r6, r7, pc}
   14d96:	cmp	r2, #15
   14d98:	bls.n	14e2c <memmove+0xb8>
   14d9a:	orr.w	r3, r1, r0
   14d9e:	lsls	r3, r3, #30
   14da0:	bne.n	14e30 <memmove+0xbc>
   14da2:	add.w	r4, r0, #16
   14da6:	add.w	r3, r1, #16
   14daa:	mov	r5, r2
   14dac:	ldr.w	r6, [r3, #-16]
   14db0:	str.w	r6, [r4, #-16]
   14db4:	ldr.w	r6, [r3, #-12]
   14db8:	str.w	r6, [r4, #-12]
   14dbc:	ldr.w	r6, [r3, #-8]
   14dc0:	str.w	r6, [r4, #-8]
   14dc4:	subs	r5, #16
   14dc6:	ldr.w	r6, [r3, #-4]
   14dca:	str.w	r6, [r4, #-4]
   14dce:	cmp	r5, #15
   14dd0:	add.w	r3, r3, #16
   14dd4:	add.w	r4, r4, #16
   14dd8:	bhi.n	14dac <memmove+0x38>
   14dda:	sub.w	r3, r2, #16
   14dde:	bic.w	r3, r3, #15
   14de2:	and.w	lr, r2, #15
   14de6:	adds	r3, #16
   14de8:	cmp.w	lr, #3
   14dec:	add	r1, r3
   14dee:	add	r3, r0
   14df0:	bls.n	14e36 <memmove+0xc2>
   14df2:	subs	r6, r3, #4
   14df4:	mov	r5, r1
   14df6:	mov	r4, lr
   14df8:	subs	r4, #4
   14dfa:	ldr.w	r7, [r5], #4
   14dfe:	str.w	r7, [r6, #4]!
   14e02:	cmp	r4, #3
   14e04:	bhi.n	14df8 <memmove+0x84>
   14e06:	sub.w	r4, lr, #4
   14e0a:	bic.w	r4, r4, #3
   14e0e:	adds	r4, #4
   14e10:	add	r3, r4
   14e12:	add	r1, r4
   14e14:	and.w	r2, r2, #3
   14e18:	cbz	r2, 14e34 <memmove+0xc0>
   14e1a:	subs	r3, #1
   14e1c:	add	r2, r1
   14e1e:	ldrb.w	r4, [r1], #1
   14e22:	strb.w	r4, [r3, #1]!
   14e26:	cmp	r2, r1
   14e28:	bne.n	14e1e <memmove+0xaa>
   14e2a:	pop	{r4, r5, r6, r7, pc}
   14e2c:	mov	r3, r0
   14e2e:	b.n	14e18 <memmove+0xa4>
   14e30:	mov	r3, r0
   14e32:	b.n	14e1a <memmove+0xa6>
   14e34:	pop	{r4, r5, r6, r7, pc}
   14e36:	mov	r2, lr
   14e38:	b.n	14e18 <memmove+0xa4>
   14e3a:	nop

00014e3c <memset>:
   14e3c:	push	{r4, r5, r6}
   14e3e:	lsls	r4, r0, #30
   14e40:	beq.n	14ed0 <memset+0x94>
   14e42:	subs	r4, r2, #1
   14e44:	cmp	r2, #0
   14e46:	beq.n	14ecc <memset+0x90>
   14e48:	uxtb	r5, r1
   14e4a:	mov	r3, r0
   14e4c:	b.n	14e54 <memset+0x18>
   14e4e:	subs	r2, r4, #1
   14e50:	cbz	r4, 14ecc <memset+0x90>
   14e52:	mov	r4, r2
   14e54:	strb.w	r5, [r3], #1
   14e58:	lsls	r2, r3, #30
   14e5a:	bne.n	14e4e <memset+0x12>
   14e5c:	cmp	r4, #3
   14e5e:	bls.n	14ebe <memset+0x82>
   14e60:	uxtb	r5, r1
   14e62:	orr.w	r5, r5, r5, lsl #8
   14e66:	cmp	r4, #15
   14e68:	orr.w	r5, r5, r5, lsl #16
   14e6c:	bls.n	14ea2 <memset+0x66>
   14e6e:	add.w	r2, r3, #16
   14e72:	mov	r6, r4
   14e74:	subs	r6, #16
   14e76:	cmp	r6, #15
   14e78:	str.w	r5, [r2, #-16]
   14e7c:	str.w	r5, [r2, #-12]
   14e80:	str.w	r5, [r2, #-8]
   14e84:	str.w	r5, [r2, #-4]
   14e88:	add.w	r2, r2, #16
   14e8c:	bhi.n	14e74 <memset+0x38>
   14e8e:	sub.w	r2, r4, #16
   14e92:	bic.w	r2, r2, #15
   14e96:	and.w	r4, r4, #15
   14e9a:	adds	r2, #16
   14e9c:	cmp	r4, #3
   14e9e:	add	r3, r2
   14ea0:	bls.n	14ebe <memset+0x82>
   14ea2:	mov	r6, r3
   14ea4:	mov	r2, r4
   14ea6:	subs	r2, #4
   14ea8:	cmp	r2, #3
   14eaa:	str.w	r5, [r6], #4
   14eae:	bhi.n	14ea6 <memset+0x6a>
   14eb0:	subs	r2, r4, #4
   14eb2:	bic.w	r2, r2, #3
   14eb6:	adds	r2, #4
   14eb8:	add	r3, r2
   14eba:	and.w	r4, r4, #3
   14ebe:	cbz	r4, 14ecc <memset+0x90>
   14ec0:	uxtb	r1, r1
   14ec2:	add	r4, r3
   14ec4:	strb.w	r1, [r3], #1
   14ec8:	cmp	r3, r4
   14eca:	bne.n	14ec4 <memset+0x88>
   14ecc:	pop	{r4, r5, r6}
   14ece:	bx	lr
   14ed0:	mov	r4, r2
   14ed2:	mov	r3, r0
   14ed4:	b.n	14e5c <memset+0x20>
   14ed6:	nop

00014ed8 <__malloc_lock>:
   14ed8:	bx	lr
   14eda:	nop

00014edc <__malloc_unlock>:
   14edc:	bx	lr
   14ede:	nop

00014ee0 <_realloc_r>:
   14ee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ee4:	mov	r7, r2
   14ee6:	sub	sp, #12
   14ee8:	cmp	r1, #0
   14eea:	beq.w	15070 <_realloc_r+0x190>
   14eee:	mov	r6, r1
   14ef0:	mov	r9, r0
   14ef2:	add.w	r5, r7, #11
   14ef6:	bl	14ed8 <__malloc_lock>
   14efa:	ldr.w	lr, [r6, #-4]
   14efe:	cmp	r5, #22
   14f00:	bic.w	r4, lr, #3
   14f04:	sub.w	r8, r6, #8
   14f08:	bhi.n	14f8c <_realloc_r+0xac>
   14f0a:	movs	r2, #16
   14f0c:	mov	r5, r2
   14f0e:	cmp	r7, r5
   14f10:	bhi.n	14f96 <_realloc_r+0xb6>
   14f12:	cmp	r4, r2
   14f14:	bge.n	15002 <_realloc_r+0x122>
   14f16:	ldr	r3, [pc, #804]	; (1523c <_realloc_r+0x35c>)
   14f18:	ldr	r1, [r3, #8]
   14f1a:	add.w	r0, r8, r4
   14f1e:	cmp	r0, r1
   14f20:	ldr	r1, [r0, #4]
   14f22:	beq.w	150d8 <_realloc_r+0x1f8>
   14f26:	bic.w	r3, r1, #1
   14f2a:	add	r3, r0
   14f2c:	ldr	r3, [r3, #4]
   14f2e:	lsls	r3, r3, #31
   14f30:	bpl.n	1502e <_realloc_r+0x14e>
   14f32:	tst.w	lr, #1
   14f36:	beq.n	14fa4 <_realloc_r+0xc4>
   14f38:	mov	r1, r7
   14f3a:	mov	r0, r9
   14f3c:	bl	146cc <_malloc_r>
   14f40:	mov	r7, r0
   14f42:	cbz	r0, 14f7e <_realloc_r+0x9e>
   14f44:	ldr.w	r3, [r6, #-4]
   14f48:	bic.w	r3, r3, #1
   14f4c:	add	r3, r8
   14f4e:	sub.w	r2, r0, #8
   14f52:	cmp	r2, r3
   14f54:	beq.w	151e0 <_realloc_r+0x300>
   14f58:	subs	r2, r4, #4
   14f5a:	cmp	r2, #36	; 0x24
   14f5c:	bhi.w	151c2 <_realloc_r+0x2e2>
   14f60:	cmp	r2, #19
   14f62:	bhi.w	1516e <_realloc_r+0x28e>
   14f66:	mov	r3, r0
   14f68:	mov	r2, r6
   14f6a:	ldr	r1, [r2, #0]
   14f6c:	str	r1, [r3, #0]
   14f6e:	ldr	r1, [r2, #4]
   14f70:	str	r1, [r3, #4]
   14f72:	ldr	r2, [r2, #8]
   14f74:	str	r2, [r3, #8]
   14f76:	mov	r1, r6
   14f78:	mov	r0, r9
   14f7a:	bl	183d0 <_free_r>
   14f7e:	mov	r0, r9
   14f80:	bl	14edc <__malloc_unlock>
   14f84:	mov	r0, r7
   14f86:	add	sp, #12
   14f88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f8c:	bic.w	r5, r5, #7
   14f90:	cmp	r5, #0
   14f92:	mov	r2, r5
   14f94:	bge.n	14f0e <_realloc_r+0x2e>
   14f96:	movs	r3, #12
   14f98:	movs	r0, #0
   14f9a:	str.w	r3, [r9]
   14f9e:	add	sp, #12
   14fa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa4:	ldr.w	r3, [r6, #-8]
   14fa8:	rsb	sl, r3, r8
   14fac:	ldr.w	r3, [sl, #4]
   14fb0:	bic.w	ip, r3, #3
   14fb4:	add.w	r3, r4, ip
   14fb8:	cmp	r3, r2
   14fba:	blt.n	14f38 <_realloc_r+0x58>
   14fbc:	mov	r7, sl
   14fbe:	ldr.w	r1, [sl, #12]
   14fc2:	ldr.w	r0, [r7, #8]!
   14fc6:	subs	r2, r4, #4
   14fc8:	cmp	r2, #36	; 0x24
   14fca:	str	r1, [r0, #12]
   14fcc:	str	r0, [r1, #8]
   14fce:	bhi.w	15200 <_realloc_r+0x320>
   14fd2:	cmp	r2, #19
   14fd4:	bls.w	151fc <_realloc_r+0x31c>
   14fd8:	ldr	r1, [r6, #0]
   14fda:	str.w	r1, [sl, #8]
   14fde:	ldr	r1, [r6, #4]
   14fe0:	str.w	r1, [sl, #12]
   14fe4:	cmp	r2, #27
   14fe6:	bhi.w	15240 <_realloc_r+0x360>
   14fea:	adds	r6, #8
   14fec:	add.w	r2, sl, #16
   14ff0:	ldr	r1, [r6, #0]
   14ff2:	str	r1, [r2, #0]
   14ff4:	ldr	r1, [r6, #4]
   14ff6:	str	r1, [r2, #4]
   14ff8:	ldr	r1, [r6, #8]
   14ffa:	str	r1, [r2, #8]
   14ffc:	mov	r6, r7
   14ffe:	mov	r4, r3
   15000:	mov	r8, sl
   15002:	subs	r3, r4, r5
   15004:	cmp	r3, #15
   15006:	bhi.n	15044 <_realloc_r+0x164>
   15008:	ldr.w	r3, [r8, #4]
   1500c:	and.w	r3, r3, #1
   15010:	orrs	r3, r4
   15012:	add	r4, r8
   15014:	str.w	r3, [r8, #4]
   15018:	ldr	r3, [r4, #4]
   1501a:	orr.w	r3, r3, #1
   1501e:	str	r3, [r4, #4]
   15020:	mov	r0, r9
   15022:	bl	14edc <__malloc_unlock>
   15026:	mov	r0, r6
   15028:	add	sp, #12
   1502a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1502e:	bic.w	r1, r1, #3
   15032:	add	r1, r4
   15034:	cmp	r1, r2
   15036:	blt.n	1507c <_realloc_r+0x19c>
   15038:	ldr	r3, [r0, #12]
   1503a:	ldr	r2, [r0, #8]
   1503c:	mov	r4, r1
   1503e:	str	r3, [r2, #12]
   15040:	str	r2, [r3, #8]
   15042:	b.n	15002 <_realloc_r+0x122>
   15044:	ldr.w	r2, [r8, #4]
   15048:	add.w	r1, r8, r5
   1504c:	and.w	r2, r2, #1
   15050:	orrs	r5, r2
   15052:	orr.w	r2, r3, #1
   15056:	add	r3, r1
   15058:	str.w	r5, [r8, #4]
   1505c:	str	r2, [r1, #4]
   1505e:	ldr	r2, [r3, #4]
   15060:	orr.w	r2, r2, #1
   15064:	adds	r1, #8
   15066:	str	r2, [r3, #4]
   15068:	mov	r0, r9
   1506a:	bl	183d0 <_free_r>
   1506e:	b.n	15020 <_realloc_r+0x140>
   15070:	mov	r1, r2
   15072:	add	sp, #12
   15074:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15078:	b.w	146cc <_malloc_r>
   1507c:	tst.w	lr, #1
   15080:	bne.w	14f38 <_realloc_r+0x58>
   15084:	ldr.w	r3, [r6, #-8]
   15088:	rsb	sl, r3, r8
   1508c:	ldr.w	r3, [sl, #4]
   15090:	bic.w	ip, r3, #3
   15094:	add.w	lr, r1, ip
   15098:	cmp	lr, r2
   1509a:	blt.n	14fb4 <_realloc_r+0xd4>
   1509c:	ldr	r3, [r0, #12]
   1509e:	ldr	r2, [r0, #8]
   150a0:	mov	r7, sl
   150a2:	str	r3, [r2, #12]
   150a4:	str	r2, [r3, #8]
   150a6:	ldr.w	r1, [r7, #8]!
   150aa:	ldr.w	r3, [sl, #12]
   150ae:	str	r3, [r1, #12]
   150b0:	subs	r2, r4, #4
   150b2:	cmp	r2, #36	; 0x24
   150b4:	str	r1, [r3, #8]
   150b6:	bhi.w	151ec <_realloc_r+0x30c>
   150ba:	cmp	r2, #19
   150bc:	bls.n	15184 <_realloc_r+0x2a4>
   150be:	ldr	r3, [r6, #0]
   150c0:	str.w	r3, [sl, #8]
   150c4:	ldr	r3, [r6, #4]
   150c6:	str.w	r3, [sl, #12]
   150ca:	cmp	r2, #27
   150cc:	bhi.w	15210 <_realloc_r+0x330>
   150d0:	adds	r6, #8
   150d2:	add.w	r3, sl, #16
   150d6:	b.n	15186 <_realloc_r+0x2a6>
   150d8:	bic.w	fp, r1, #3
   150dc:	add	fp, r4
   150de:	add.w	r0, r5, #16
   150e2:	cmp	fp, r0
   150e4:	bge.n	1519a <_realloc_r+0x2ba>
   150e6:	tst.w	lr, #1
   150ea:	bne.w	14f38 <_realloc_r+0x58>
   150ee:	ldr.w	r1, [r6, #-8]
   150f2:	rsb	sl, r1, r8
   150f6:	ldr.w	r1, [sl, #4]
   150fa:	bic.w	ip, r1, #3
   150fe:	add	fp, ip
   15100:	cmp	r0, fp
   15102:	bgt.w	14fb4 <_realloc_r+0xd4>
   15106:	mov	r7, sl
   15108:	ldr.w	r1, [sl, #12]
   1510c:	ldr.w	r0, [r7, #8]!
   15110:	subs	r2, r4, #4
   15112:	cmp	r2, #36	; 0x24
   15114:	str	r1, [r0, #12]
   15116:	str	r0, [r1, #8]
   15118:	bhi.w	15284 <_realloc_r+0x3a4>
   1511c:	cmp	r2, #19
   1511e:	bls.w	1526c <_realloc_r+0x38c>
   15122:	ldr	r1, [r6, #0]
   15124:	str.w	r1, [sl, #8]
   15128:	ldr	r1, [r6, #4]
   1512a:	str.w	r1, [sl, #12]
   1512e:	cmp	r2, #27
   15130:	bhi.w	15292 <_realloc_r+0x3b2>
   15134:	adds	r6, #8
   15136:	add.w	r2, sl, #16
   1513a:	ldr	r1, [r6, #0]
   1513c:	str	r1, [r2, #0]
   1513e:	ldr	r1, [r6, #4]
   15140:	str	r1, [r2, #4]
   15142:	ldr	r1, [r6, #8]
   15144:	str	r1, [r2, #8]
   15146:	add.w	r1, sl, r5
   1514a:	rsb	r2, r5, fp
   1514e:	orr.w	r2, r2, #1
   15152:	str	r1, [r3, #8]
   15154:	str	r2, [r1, #4]
   15156:	ldr.w	r3, [sl, #4]
   1515a:	and.w	r3, r3, #1
   1515e:	orrs	r5, r3
   15160:	mov	r0, r9
   15162:	str.w	r5, [sl, #4]
   15166:	bl	14edc <__malloc_unlock>
   1516a:	mov	r0, r7
   1516c:	b.n	15028 <_realloc_r+0x148>
   1516e:	ldr	r3, [r6, #0]
   15170:	str	r3, [r0, #0]
   15172:	ldr	r3, [r6, #4]
   15174:	str	r3, [r0, #4]
   15176:	cmp	r2, #27
   15178:	bhi.n	151ca <_realloc_r+0x2ea>
   1517a:	add.w	r3, r0, #8
   1517e:	add.w	r2, r6, #8
   15182:	b.n	14f6a <_realloc_r+0x8a>
   15184:	mov	r3, r7
   15186:	ldr	r2, [r6, #0]
   15188:	str	r2, [r3, #0]
   1518a:	ldr	r2, [r6, #4]
   1518c:	str	r2, [r3, #4]
   1518e:	ldr	r2, [r6, #8]
   15190:	str	r2, [r3, #8]
   15192:	mov	r6, r7
   15194:	mov	r4, lr
   15196:	mov	r8, sl
   15198:	b.n	15002 <_realloc_r+0x122>
   1519a:	add.w	r1, r8, r5
   1519e:	rsb	fp, r5, fp
   151a2:	orr.w	r2, fp, #1
   151a6:	str	r1, [r3, #8]
   151a8:	str	r2, [r1, #4]
   151aa:	ldr.w	r3, [r6, #-4]
   151ae:	and.w	r3, r3, #1
   151b2:	orrs	r5, r3
   151b4:	mov	r0, r9
   151b6:	str.w	r5, [r6, #-4]
   151ba:	bl	14edc <__malloc_unlock>
   151be:	mov	r0, r6
   151c0:	b.n	15028 <_realloc_r+0x148>
   151c2:	mov	r1, r6
   151c4:	bl	14d74 <memmove>
   151c8:	b.n	14f76 <_realloc_r+0x96>
   151ca:	ldr	r3, [r6, #8]
   151cc:	str	r3, [r0, #8]
   151ce:	ldr	r3, [r6, #12]
   151d0:	str	r3, [r0, #12]
   151d2:	cmp	r2, #36	; 0x24
   151d4:	beq.n	15228 <_realloc_r+0x348>
   151d6:	add.w	r3, r0, #16
   151da:	add.w	r2, r6, #16
   151de:	b.n	14f6a <_realloc_r+0x8a>
   151e0:	ldr.w	r3, [r0, #-4]
   151e4:	bic.w	r3, r3, #3
   151e8:	add	r4, r3
   151ea:	b.n	15002 <_realloc_r+0x122>
   151ec:	mov	r1, r6
   151ee:	mov	r0, r7
   151f0:	mov	r4, lr
   151f2:	mov	r8, sl
   151f4:	bl	14d74 <memmove>
   151f8:	mov	r6, r7
   151fa:	b.n	15002 <_realloc_r+0x122>
   151fc:	mov	r2, r7
   151fe:	b.n	14ff0 <_realloc_r+0x110>
   15200:	mov	r1, r6
   15202:	mov	r0, r7
   15204:	mov	r4, r3
   15206:	mov	r8, sl
   15208:	bl	14d74 <memmove>
   1520c:	mov	r6, r7
   1520e:	b.n	15002 <_realloc_r+0x122>
   15210:	ldr	r3, [r6, #8]
   15212:	str.w	r3, [sl, #16]
   15216:	ldr	r3, [r6, #12]
   15218:	str.w	r3, [sl, #20]
   1521c:	cmp	r2, #36	; 0x24
   1521e:	beq.n	15258 <_realloc_r+0x378>
   15220:	adds	r6, #16
   15222:	add.w	r3, sl, #24
   15226:	b.n	15186 <_realloc_r+0x2a6>
   15228:	ldr	r3, [r6, #16]
   1522a:	str	r3, [r0, #16]
   1522c:	ldr	r3, [r6, #20]
   1522e:	str	r3, [r0, #20]
   15230:	add.w	r2, r6, #24
   15234:	add.w	r3, r0, #24
   15238:	b.n	14f6a <_realloc_r+0x8a>
   1523a:	nop
   1523c:	.word	0x1fff10d0
   15240:	ldr	r1, [r6, #8]
   15242:	str.w	r1, [sl, #16]
   15246:	ldr	r1, [r6, #12]
   15248:	str.w	r1, [sl, #20]
   1524c:	cmp	r2, #36	; 0x24
   1524e:	beq.n	15270 <_realloc_r+0x390>
   15250:	adds	r6, #16
   15252:	add.w	r2, sl, #24
   15256:	b.n	14ff0 <_realloc_r+0x110>
   15258:	ldr	r3, [r6, #16]
   1525a:	str.w	r3, [sl, #24]
   1525e:	ldr	r3, [r6, #20]
   15260:	str.w	r3, [sl, #28]
   15264:	adds	r6, #24
   15266:	add.w	r3, sl, #32
   1526a:	b.n	15186 <_realloc_r+0x2a6>
   1526c:	mov	r2, r7
   1526e:	b.n	1513a <_realloc_r+0x25a>
   15270:	ldr	r2, [r6, #16]
   15272:	str.w	r2, [sl, #24]
   15276:	ldr	r2, [r6, #20]
   15278:	str.w	r2, [sl, #28]
   1527c:	adds	r6, #24
   1527e:	add.w	r2, sl, #32
   15282:	b.n	14ff0 <_realloc_r+0x110>
   15284:	mov	r1, r6
   15286:	mov	r0, r7
   15288:	str	r3, [sp, #4]
   1528a:	bl	14d74 <memmove>
   1528e:	ldr	r3, [sp, #4]
   15290:	b.n	15146 <_realloc_r+0x266>
   15292:	ldr	r1, [r6, #8]
   15294:	str.w	r1, [sl, #16]
   15298:	ldr	r1, [r6, #12]
   1529a:	str.w	r1, [sl, #20]
   1529e:	cmp	r2, #36	; 0x24
   152a0:	beq.n	152aa <_realloc_r+0x3ca>
   152a2:	adds	r6, #16
   152a4:	add.w	r2, sl, #24
   152a8:	b.n	1513a <_realloc_r+0x25a>
   152aa:	ldr	r2, [r6, #16]
   152ac:	str.w	r2, [sl, #24]
   152b0:	ldr	r2, [r6, #20]
   152b2:	str.w	r2, [sl, #28]
   152b6:	adds	r6, #24
   152b8:	add.w	r2, sl, #32
   152bc:	b.n	1513a <_realloc_r+0x25a>
   152be:	nop

000152c0 <_sbrk_r>:
   152c0:	push	{r3, r4, r5, lr}
   152c2:	ldr	r4, [pc, #28]	; (152e0 <_sbrk_r+0x20>)
   152c4:	movs	r3, #0
   152c6:	mov	r5, r0
   152c8:	mov	r0, r1
   152ca:	str	r3, [r4, #0]
   152cc:	bl	12060 <_sbrk>
   152d0:	adds	r3, r0, #1
   152d2:	beq.n	152d6 <_sbrk_r+0x16>
   152d4:	pop	{r3, r4, r5, pc}
   152d6:	ldr	r3, [r4, #0]
   152d8:	cmp	r3, #0
   152da:	beq.n	152d4 <_sbrk_r+0x14>
   152dc:	str	r3, [r5, #0]
   152de:	pop	{r3, r4, r5, pc}
   152e0:	.word	0x1fff2cbc

000152e4 <sprintf>:
   152e4:	push	{r1, r2, r3}
   152e6:	push	{r4, r5, r6, r7, lr}
   152e8:	sub	sp, #112	; 0x70
   152ea:	add	r3, sp, #132	; 0x84
   152ec:	ldr	r1, [pc, #60]	; (1532c <sprintf+0x48>)
   152ee:	ldr.w	r2, [r3], #4
   152f2:	str	r3, [sp, #4]
   152f4:	mov	r5, r0
   152f6:	mvn.w	r4, #2147483648	; 0x80000000
   152fa:	ldr	r0, [r1, #0]
   152fc:	str	r5, [sp, #8]
   152fe:	mov.w	r7, #520	; 0x208
   15302:	movw	r6, #65535	; 0xffff
   15306:	add	r1, sp, #8
   15308:	str	r5, [sp, #24]
   1530a:	strh.w	r7, [sp, #20]
   1530e:	str	r4, [sp, #16]
   15310:	str	r4, [sp, #28]
   15312:	strh.w	r6, [sp, #22]
   15316:	bl	15a58 <_svfprintf_r>
   1531a:	ldr	r3, [sp, #8]
   1531c:	movs	r2, #0
   1531e:	strb	r2, [r3, #0]
   15320:	add	sp, #112	; 0x70
   15322:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15326:	add	sp, #12
   15328:	bx	lr
   1532a:	nop
   1532c:	.word	0x1fff0f60

00015330 <strchr>:
   15330:	push	{r4, r5, r6}
   15332:	ands.w	r4, r1, #255	; 0xff
   15336:	beq.n	153a2 <strchr+0x72>
   15338:	lsls	r5, r0, #30
   1533a:	beq.n	1535c <strchr+0x2c>
   1533c:	ldrb	r3, [r0, #0]
   1533e:	cmp	r3, #0
   15340:	beq.n	153f8 <strchr+0xc8>
   15342:	cmp	r4, r3
   15344:	beq.n	1539e <strchr+0x6e>
   15346:	adds	r3, r0, #1
   15348:	b.n	15356 <strchr+0x26>
   1534a:	ldrb.w	r2, [r3], #1
   1534e:	cmp	r2, #0
   15350:	beq.n	153f2 <strchr+0xc2>
   15352:	cmp	r4, r2
   15354:	beq.n	1539e <strchr+0x6e>
   15356:	lsls	r2, r3, #30
   15358:	mov	r0, r3
   1535a:	bne.n	1534a <strchr+0x1a>
   1535c:	lsls	r6, r1, #8
   1535e:	and.w	r6, r6, #65280	; 0xff00
   15362:	orrs	r6, r4
   15364:	ldr	r3, [r0, #0]
   15366:	orr.w	r6, r6, r6, lsl #16
   1536a:	b.n	15370 <strchr+0x40>
   1536c:	ldr.w	r3, [r0, #4]!
   15370:	eor.w	r5, r6, r3
   15374:	sub.w	r2, r5, #16843009	; 0x1010101
   15378:	sub.w	r1, r3, #16843009	; 0x1010101
   1537c:	bic.w	r2, r2, r5
   15380:	bic.w	r3, r1, r3
   15384:	orrs	r3, r2
   15386:	tst.w	r3, #2155905152	; 0x80808080
   1538a:	beq.n	1536c <strchr+0x3c>
   1538c:	ldrb	r3, [r0, #0]
   1538e:	cbnz	r3, 1539a <strchr+0x6a>
   15390:	b.n	153f8 <strchr+0xc8>
   15392:	ldrb.w	r3, [r0, #1]!
   15396:	cmp	r3, #0
   15398:	beq.n	153f8 <strchr+0xc8>
   1539a:	cmp	r4, r3
   1539c:	bne.n	15392 <strchr+0x62>
   1539e:	pop	{r4, r5, r6}
   153a0:	bx	lr
   153a2:	lsls	r4, r0, #30
   153a4:	beq.n	153be <strchr+0x8e>
   153a6:	ldrb	r3, [r0, #0]
   153a8:	cmp	r3, #0
   153aa:	beq.n	1539e <strchr+0x6e>
   153ac:	adds	r3, r0, #1
   153ae:	b.n	153b8 <strchr+0x88>
   153b0:	ldrb	r2, [r0, #0]
   153b2:	adds	r3, #1
   153b4:	cmp	r2, #0
   153b6:	beq.n	1539e <strchr+0x6e>
   153b8:	lsls	r1, r3, #30
   153ba:	mov	r0, r3
   153bc:	bne.n	153b0 <strchr+0x80>
   153be:	ldr	r2, [r0, #0]
   153c0:	sub.w	r3, r2, #16843009	; 0x1010101
   153c4:	bic.w	r3, r3, r2
   153c8:	tst.w	r3, #2155905152	; 0x80808080
   153cc:	bne.n	153e0 <strchr+0xb0>
   153ce:	ldr.w	r2, [r0, #4]!
   153d2:	sub.w	r3, r2, #16843009	; 0x1010101
   153d6:	bic.w	r3, r3, r2
   153da:	tst.w	r3, #2155905152	; 0x80808080
   153de:	beq.n	153ce <strchr+0x9e>
   153e0:	ldrb	r3, [r0, #0]
   153e2:	cmp	r3, #0
   153e4:	beq.n	1539e <strchr+0x6e>
   153e6:	ldrb.w	r3, [r0, #1]!
   153ea:	cmp	r3, #0
   153ec:	bne.n	153e6 <strchr+0xb6>
   153ee:	pop	{r4, r5, r6}
   153f0:	bx	lr
   153f2:	mov	r0, r2
   153f4:	pop	{r4, r5, r6}
   153f6:	bx	lr
   153f8:	mov	r0, r3
   153fa:	pop	{r4, r5, r6}
   153fc:	bx	lr
   153fe:	nop
   15400:	sub.w	r0, r2, r3
   15404:	bx	lr
   15406:	nop

00015408 <strcmp>:
   15408:	ldrb	r2, [r0, #0]
   1540a:	ldrb	r3, [r1, #0]
   1540c:	cmp	r2, #1
   1540e:	it	cs
   15410:	cmpcs	r2, r3
   15412:	bne.n	15400 <strchr+0xd0>
   15414:	strd	r4, r5, [sp, #-16]!
   15418:	orr.w	r4, r0, r1
   1541c:	strd	r6, r7, [sp, #8]
   15420:	mvn.w	ip, #0
   15424:	mov.w	r2, r4, lsl #29
   15428:	cbz	r2, 15470 <strcmp+0x68>
   1542a:	eor.w	r4, r0, r1
   1542e:	tst.w	r4, #7
   15432:	bne.n	1550a <strcmp+0x102>
   15434:	and.w	r4, r0, #7
   15438:	bic.w	r0, r0, #7
   1543c:	and.w	r5, r4, #3
   15440:	bic.w	r1, r1, #7
   15444:	mov.w	r5, r5, lsl #3
   15448:	ldrd	r2, r3, [r0], #16
   1544c:	tst.w	r4, #4
   15450:	ldrd	r6, r7, [r1], #16
   15454:	lsl.w	r4, ip, r5
   15458:	orn	r2, r2, r4
   1545c:	orn	r6, r6, r4
   15460:	beq.n	15478 <strcmp+0x70>
   15462:	orn	r3, r3, r4
   15466:	mov	r2, ip
   15468:	orn	r7, r7, r4
   1546c:	mov	r6, ip
   1546e:	b.n	15478 <strcmp+0x70>
   15470:	ldrd	r2, r3, [r0], #16
   15474:	ldrd	r6, r7, [r1], #16
   15478:	uadd8	r5, r2, ip
   1547c:	eor.w	r4, r2, r6
   15480:	sel	r4, r4, ip
   15484:	cbnz	r4, 154e2 <strcmp+0xda>
   15486:	uadd8	r5, r3, ip
   1548a:	eor.w	r5, r3, r7
   1548e:	sel	r5, r5, ip
   15492:	cbnz	r5, 154ba <strcmp+0xb2>
   15494:	ldrd	r2, r3, [r0, #-8]
   15498:	ldrd	r6, r7, [r1, #-8]
   1549c:	uadd8	r5, r2, ip
   154a0:	eor.w	r4, r2, r6
   154a4:	sel	r4, r4, ip
   154a8:	uadd8	r5, r3, ip
   154ac:	eor.w	r5, r3, r7
   154b0:	sel	r5, r5, ip
   154b4:	orrs	r5, r4
   154b6:	beq.n	15470 <strcmp+0x68>
   154b8:	cbnz	r4, 154e2 <strcmp+0xda>
   154ba:	rev	r5, r5
   154bc:	clz	r4, r5
   154c0:	bic.w	r4, r4, #7
   154c4:	lsr.w	r1, r7, r4
   154c8:	ldrd	r6, r7, [sp, #8]
   154cc:	lsr.w	r3, r3, r4
   154d0:	and.w	r0, r3, #255	; 0xff
   154d4:	and.w	r1, r1, #255	; 0xff
   154d8:	ldrd	r4, r5, [sp], #16
   154dc:	sub.w	r0, r0, r1
   154e0:	bx	lr
   154e2:	rev	r4, r4
   154e4:	clz	r4, r4
   154e8:	bic.w	r4, r4, #7
   154ec:	lsr.w	r1, r6, r4
   154f0:	ldrd	r6, r7, [sp, #8]
   154f4:	lsr.w	r2, r2, r4
   154f8:	and.w	r0, r2, #255	; 0xff
   154fc:	and.w	r1, r1, #255	; 0xff
   15500:	ldrd	r4, r5, [sp], #16
   15504:	sub.w	r0, r0, r1
   15508:	bx	lr
   1550a:	tst.w	r4, #3
   1550e:	bne.n	1558a <strcmp+0x182>
   15510:	ands.w	r4, r0, #3
   15514:	bne.n	15568 <strcmp+0x160>
   15516:	ldr.w	r2, [r0], #8
   1551a:	ldr.w	r3, [r1], #8
   1551e:	uadd8	r5, r2, ip
   15522:	eor.w	r5, r2, r3
   15526:	sel	r5, r5, ip
   1552a:	cbnz	r5, 15544 <strcmp+0x13c>
   1552c:	ldr.w	r2, [r0, #-4]
   15530:	ldr.w	r3, [r1, #-4]
   15534:	uadd8	r5, r2, ip
   15538:	eor.w	r5, r2, r3
   1553c:	sel	r5, r5, ip
   15540:	cmp	r5, #0
   15542:	beq.n	15516 <strcmp+0x10e>
   15544:	rev	r5, r5
   15546:	clz	r4, r5
   1554a:	bic.w	r4, r4, #7
   1554e:	lsr.w	r1, r3, r4
   15552:	lsr.w	r2, r2, r4
   15556:	and.w	r0, r2, #255	; 0xff
   1555a:	and.w	r1, r1, #255	; 0xff
   1555e:	ldrd	r4, r5, [sp], #16
   15562:	sub.w	r0, r0, r1
   15566:	bx	lr
   15568:	mov.w	r4, r4, lsl #3
   1556c:	bic.w	r0, r0, #3
   15570:	ldr.w	r2, [r0], #8
   15574:	bic.w	r1, r1, #3
   15578:	ldr.w	r3, [r1], #8
   1557c:	lsl.w	r4, ip, r4
   15580:	orn	r2, r2, r4
   15584:	orn	r3, r3, r4
   15588:	b.n	1551e <strcmp+0x116>
   1558a:	ands.w	r4, r0, #3
   1558e:	beq.n	155c6 <strcmp+0x1be>
   15590:	sub.w	r1, r1, r4
   15594:	bic.w	r0, r0, #3
   15598:	lsls	r4, r4, #31
   1559a:	ldr.w	r2, [r0], #4
   1559e:	beq.n	155ae <strcmp+0x1a6>
   155a0:	bcs.n	155c2 <strcmp+0x1ba>
   155a2:	ldrb	r3, [r1, #2]
   155a4:	uxtb.w	r4, r2, ror #16
   155a8:	subs	r4, r4, r3
   155aa:	bne.n	155ba <strcmp+0x1b2>
   155ac:	cbz	r3, 155ba <strcmp+0x1b2>
   155ae:	ldrb	r3, [r1, #3]
   155b0:	uxtb.w	r4, r2, ror #24
   155b4:	subs	r4, r4, r3
   155b6:	bne.n	155ba <strcmp+0x1b2>
   155b8:	cbnz	r3, 155c2 <strcmp+0x1ba>
   155ba:	mov	r0, r4
   155bc:	ldr.w	r4, [sp], #16
   155c0:	bx	lr
   155c2:	add.w	r1, r1, #4
   155c6:	ldr.w	r2, [r0], #4
   155ca:	lsls	r4, r1, #31
   155cc:	bic.w	r1, r1, #3
   155d0:	ldr.w	r3, [r1], #4
   155d4:	bhi.n	15668 <strcmp+0x260>
   155d6:	bcs.n	15622 <strcmp+0x21a>
   155d8:	bic.w	r4, r2, #4278190080	; 0xff000000
   155dc:	uadd8	r5, r2, ip
   155e0:	eors.w	r5, r4, r3, lsr #8
   155e4:	sel	r5, r5, ip
   155e8:	bne.n	15600 <strcmp+0x1f8>
   155ea:	cbnz	r5, 15606 <strcmp+0x1fe>
   155ec:	ldr.w	r3, [r1], #4
   155f0:	eor.w	r4, r4, r2
   155f4:	cmp.w	r4, r3, lsl #24
   155f8:	bne.n	15618 <strcmp+0x210>
   155fa:	ldr.w	r2, [r0], #4
   155fe:	b.n	155d8 <strcmp+0x1d0>
   15600:	mov.w	r3, r3, lsr #8
   15604:	b.n	156b2 <strcmp+0x2aa>
   15606:	bics.w	r5, r5, #4278190080	; 0xff000000
   1560a:	bne.n	156a8 <strcmp+0x2a0>
   1560c:	ldrb	r0, [r1, #0]
   1560e:	ldrd	r4, r5, [sp], #16
   15612:	rsb	r0, r0, #0
   15616:	bx	lr
   15618:	mov.w	r2, r2, lsr #24
   1561c:	and.w	r3, r3, #255	; 0xff
   15620:	b.n	156b2 <strcmp+0x2aa>
   15622:	and.w	r4, r2, ip, lsr #16
   15626:	uadd8	r5, r2, ip
   1562a:	eors.w	r5, r4, r3, lsr #16
   1562e:	sel	r5, r5, ip
   15632:	bne.n	1564a <strcmp+0x242>
   15634:	cbnz	r5, 15650 <strcmp+0x248>
   15636:	ldr.w	r3, [r1], #4
   1563a:	eor.w	r4, r4, r2
   1563e:	cmp.w	r4, r3, lsl #16
   15642:	bne.n	1565e <strcmp+0x256>
   15644:	ldr.w	r2, [r0], #4
   15648:	b.n	15622 <strcmp+0x21a>
   1564a:	mov.w	r3, r3, lsr #16
   1564e:	b.n	156b2 <strcmp+0x2aa>
   15650:	ands.w	r5, r5, ip, lsr #16
   15654:	bne.n	156a8 <strcmp+0x2a0>
   15656:	ldrh	r3, [r1, #0]
   15658:	mov.w	r2, r2, lsr #16
   1565c:	b.n	156b2 <strcmp+0x2aa>
   1565e:	mov.w	r2, r2, lsr #16
   15662:	and.w	r3, r3, ip, lsr #16
   15666:	b.n	156b2 <strcmp+0x2aa>
   15668:	and.w	r4, r2, #255	; 0xff
   1566c:	uadd8	r5, r2, ip
   15670:	eors.w	r5, r4, r3, lsr #24
   15674:	sel	r5, r5, ip
   15678:	bne.n	15690 <strcmp+0x288>
   1567a:	cbnz	r5, 15696 <strcmp+0x28e>
   1567c:	ldr.w	r3, [r1], #4
   15680:	eor.w	r4, r4, r2
   15684:	cmp.w	r4, r3, lsl #8
   15688:	bne.n	1569e <strcmp+0x296>
   1568a:	ldr.w	r2, [r0], #4
   1568e:	b.n	15668 <strcmp+0x260>
   15690:	mov.w	r3, r3, lsr #24
   15694:	b.n	156b2 <strcmp+0x2aa>
   15696:	tst.w	r5, #255	; 0xff
   1569a:	bne.n	156a8 <strcmp+0x2a0>
   1569c:	ldr	r3, [r1, #0]
   1569e:	mov.w	r2, r2, lsr #8
   156a2:	bic.w	r3, r3, #4278190080	; 0xff000000
   156a6:	b.n	156b2 <strcmp+0x2aa>
   156a8:	mov.w	r0, #0
   156ac:	ldrd	r4, r5, [sp], #16
   156b0:	bx	lr
   156b2:	rev	r2, r2
   156b4:	rev	r3, r3
   156b6:	uadd8	r4, r2, ip
   156ba:	eor.w	r4, r2, r3
   156be:	sel	r5, r4, ip
   156c2:	clz	r4, r5
   156c6:	lsl.w	r2, r2, r4
   156ca:	lsl.w	r3, r3, r4
   156ce:	mov.w	r0, r2, lsr #24
   156d2:	ldrd	r4, r5, [sp], #16
   156d6:	sub.w	r0, r0, r3, lsr #24
   156da:	bx	lr

000156dc <strcpy>:
   156dc:	eor.w	r2, r0, r1
   156e0:	mov	ip, r0
   156e2:	tst.w	r2, #3
   156e6:	bne.n	15788 <strcpy+0xac>
   156e8:	tst.w	r1, #3
   156ec:	bne.n	15754 <strcpy+0x78>
   156ee:	str.w	r4, [sp, #-4]!
   156f2:	tst.w	r1, #4
   156f6:	ldr.w	r3, [r1], #4
   156fa:	beq.n	15714 <strcpy+0x38>
   156fc:	sub.w	r2, r3, #16843009	; 0x1010101
   15700:	bics	r2, r3
   15702:	tst.w	r2, #2155905152	; 0x80808080
   15706:	itt	eq
   15708:	streq.w	r3, [ip], #4
   1570c:	ldreq.w	r3, [r1], #4
   15710:	bne.n	15740 <strcpy+0x64>
   15712:	nop
   15714:	ldr.w	r4, [r1], #4
   15718:	sub.w	r2, r3, #16843009	; 0x1010101
   1571c:	bics	r2, r3
   1571e:	tst.w	r2, #2155905152	; 0x80808080
   15722:	sub.w	r2, r4, #16843009	; 0x1010101
   15726:	bne.n	15740 <strcpy+0x64>
   15728:	str.w	r3, [ip], #4
   1572c:	bics	r2, r4
   1572e:	tst.w	r2, #2155905152	; 0x80808080
   15732:	itt	eq
   15734:	ldreq.w	r3, [r1], #4
   15738:	streq.w	r4, [ip], #4
   1573c:	beq.n	15714 <strcpy+0x38>
   1573e:	mov	r3, r4
   15740:	strb.w	r3, [ip], #1
   15744:	tst.w	r3, #255	; 0xff
   15748:	mov.w	r3, r3, ror #8
   1574c:	bne.n	15740 <strcpy+0x64>
   1574e:	ldr.w	r4, [sp], #4
   15752:	bx	lr
   15754:	tst.w	r1, #1
   15758:	beq.n	15768 <strcpy+0x8c>
   1575a:	ldrb.w	r2, [r1], #1
   1575e:	strb.w	r2, [ip], #1
   15762:	cmp	r2, #0
   15764:	it	eq
   15766:	bxeq	lr
   15768:	tst.w	r1, #2
   1576c:	beq.n	156ee <strcpy+0x12>
   1576e:	ldrh.w	r2, [r1], #2
   15772:	tst.w	r2, #255	; 0xff
   15776:	itet	ne
   15778:	strhne.w	r2, [ip], #2
   1577c:	strbeq.w	r2, [ip]
   15780:	tstne.w	r2, #65280	; 0xff00
   15784:	bne.n	156ee <strcpy+0x12>
   15786:	bx	lr
   15788:	ldrb.w	r2, [r1], #1
   1578c:	strb.w	r2, [ip], #1
   15790:	cmp	r2, #0
   15792:	bne.n	15788 <strcpy+0xac>
   15794:	bx	lr
   15796:	nop

00015798 <strcspn>:
   15798:	push	{r4, r5, r6}
   1579a:	ldrb	r4, [r0, #0]
   1579c:	cbz	r4, 157c6 <strcspn+0x2e>
   1579e:	ldrb	r6, [r1, #0]
   157a0:	mov	r5, r0
   157a2:	cbz	r6, 157b8 <strcspn+0x20>
   157a4:	cmp	r4, r6
   157a6:	beq.n	157c0 <strcspn+0x28>
   157a8:	mov	r2, r1
   157aa:	b.n	157b0 <strcspn+0x18>
   157ac:	cmp	r3, r4
   157ae:	beq.n	157c0 <strcspn+0x28>
   157b0:	ldrb.w	r3, [r2, #1]!
   157b4:	cmp	r3, #0
   157b6:	bne.n	157ac <strcspn+0x14>
   157b8:	ldrb.w	r4, [r5, #1]!
   157bc:	cmp	r4, #0
   157be:	bne.n	157a2 <strcspn+0xa>
   157c0:	subs	r0, r5, r0
   157c2:	pop	{r4, r5, r6}
   157c4:	bx	lr
   157c6:	mov	r0, r4
   157c8:	b.n	157c2 <strcspn+0x2a>
   157ca:	nop

000157cc <strlcat>:
   157cc:	push	{r4, r5, r6, lr}
   157ce:	cbz	r2, 1580e <strlcat+0x42>
   157d0:	ldrb	r6, [r0, #0]
   157d2:	cbz	r6, 1581a <strlcat+0x4e>
   157d4:	adds	r3, r0, #1
   157d6:	adds	r6, r0, r2
   157d8:	b.n	157e0 <strlcat+0x14>
   157da:	ldrb	r5, [r3, #0]
   157dc:	adds	r3, #1
   157de:	cbz	r5, 157e6 <strlcat+0x1a>
   157e0:	cmp	r6, r3
   157e2:	mov	r4, r3
   157e4:	bne.n	157da <strlcat+0xe>
   157e6:	subs	r6, r4, r0
   157e8:	subs	r2, r2, r6
   157ea:	beq.n	15810 <strlcat+0x44>
   157ec:	ldrb	r3, [r1, #0]
   157ee:	mov	r5, r1
   157f0:	cbz	r3, 15806 <strlcat+0x3a>
   157f2:	cmp	r2, #1
   157f4:	beq.n	157fc <strlcat+0x30>
   157f6:	strb	r3, [r4, #0]
   157f8:	subs	r2, #1
   157fa:	adds	r4, #1
   157fc:	ldrb.w	r3, [r5, #1]!
   15800:	cmp	r3, #0
   15802:	bne.n	157f2 <strlcat+0x26>
   15804:	subs	r3, r5, r1
   15806:	movs	r2, #0
   15808:	strb	r2, [r4, #0]
   1580a:	adds	r0, r6, r3
   1580c:	pop	{r4, r5, r6, pc}
   1580e:	mov	r6, r2
   15810:	mov	r0, r1
   15812:	bl	15880 <strlen>
   15816:	add	r0, r6
   15818:	pop	{r4, r5, r6, pc}
   1581a:	mov	r4, r0
   1581c:	b.n	157ec <strlcat+0x20>
   1581e:	nop

00015820 <strlcpy>:
   15820:	push	{r4}
   15822:	mov	r3, r1
   15824:	cbz	r2, 1583a <strlcpy+0x1a>
   15826:	b.n	15832 <strlcpy+0x12>
   15828:	ldrb.w	r4, [r3], #1
   1582c:	strb.w	r4, [r0], #1
   15830:	cbz	r4, 15842 <strlcpy+0x22>
   15832:	subs	r2, #1
   15834:	bne.n	15828 <strlcpy+0x8>
   15836:	movs	r2, #0
   15838:	strb	r2, [r0, #0]
   1583a:	ldrb.w	r2, [r3], #1
   1583e:	cmp	r2, #0
   15840:	bne.n	1583a <strlcpy+0x1a>
   15842:	subs	r0, r3, r1
   15844:	subs	r0, #1
   15846:	ldr.w	r4, [sp], #4
   1584a:	bx	lr
   1584c:			; <UNDEFINED> instruction: 0xffffffff
   15850:			; <UNDEFINED> instruction: 0xffffffff
   15854:			; <UNDEFINED> instruction: 0xffffffff
   15858:			; <UNDEFINED> instruction: 0xffffffff
   1585c:			; <UNDEFINED> instruction: 0xffffffff
   15860:			; <UNDEFINED> instruction: 0xffffffff
   15864:			; <UNDEFINED> instruction: 0xffffffff
   15868:			; <UNDEFINED> instruction: 0xffffffff
   1586c:			; <UNDEFINED> instruction: 0xffffffff
   15870:			; <UNDEFINED> instruction: 0xffffffff
   15874:			; <UNDEFINED> instruction: 0xffffffff
   15878:			; <UNDEFINED> instruction: 0xffffffff
   1587c:			; <UNDEFINED> instruction: 0xffffffff

00015880 <strlen>:
   15880:	pld	[r0]
   15884:	strd	r4, r5, [sp, #-8]!
   15888:	bic.w	r1, r0, #7
   1588c:	mvn.w	ip, #0
   15890:	ands.w	r4, r0, #7
   15894:	pld	[r1, #32]
   15898:	bne.w	1592e <strlen+0xae>
   1589c:	mov.w	r4, #0
   158a0:	mvn.w	r0, #7
   158a4:	ldrd	r2, r3, [r1]
   158a8:	pld	[r1, #64]	; 0x40
   158ac:	add.w	r0, r0, #8
   158b0:	uadd8	r2, r2, ip
   158b4:	sel	r2, r4, ip
   158b8:	uadd8	r3, r3, ip
   158bc:	sel	r3, r2, ip
   158c0:	cbnz	r3, 15916 <strlen+0x96>
   158c2:	ldrd	r2, r3, [r1, #8]
   158c6:	uadd8	r2, r2, ip
   158ca:	add.w	r0, r0, #8
   158ce:	sel	r2, r4, ip
   158d2:	uadd8	r3, r3, ip
   158d6:	sel	r3, r2, ip
   158da:	cbnz	r3, 15916 <strlen+0x96>
   158dc:	ldrd	r2, r3, [r1, #16]
   158e0:	uadd8	r2, r2, ip
   158e4:	add.w	r0, r0, #8
   158e8:	sel	r2, r4, ip
   158ec:	uadd8	r3, r3, ip
   158f0:	sel	r3, r2, ip
   158f4:	cbnz	r3, 15916 <strlen+0x96>
   158f6:	ldrd	r2, r3, [r1, #24]
   158fa:	add.w	r1, r1, #32
   158fe:	uadd8	r2, r2, ip
   15902:	add.w	r0, r0, #8
   15906:	sel	r2, r4, ip
   1590a:	uadd8	r3, r3, ip
   1590e:	sel	r3, r2, ip
   15912:	cmp	r3, #0
   15914:	beq.n	158a4 <strlen+0x24>
   15916:	cmp	r2, #0
   15918:	itt	eq
   1591a:	addeq	r0, #4
   1591c:	moveq	r2, r3
   1591e:	rev	r2, r2
   15920:	clz	r2, r2
   15924:	ldrd	r4, r5, [sp], #8
   15928:	add.w	r0, r0, r2, lsr #3
   1592c:	bx	lr
   1592e:	ldrd	r2, r3, [r1]
   15932:	and.w	r5, r4, #3
   15936:	rsb	r0, r4, #0
   1593a:	mov.w	r5, r5, lsl #3
   1593e:	tst.w	r4, #4
   15942:	pld	[r1, #64]	; 0x40
   15946:	lsl.w	r5, ip, r5
   1594a:	orn	r2, r2, r5
   1594e:	itt	ne
   15950:	ornne	r3, r3, r5
   15954:	movne	r2, ip
   15956:	mov.w	r4, #0
   1595a:	b.n	158b0 <strlen+0x30>

0001595c <strncmp>:
   1595c:	cmp	r2, #0
   1595e:	beq.n	159e4 <strncmp+0x88>
   15960:	orr.w	r3, r0, r1
   15964:	ands.w	r3, r3, #3
   15968:	push	{r4, r5, r6, r7}
   1596a:	bne.n	159b8 <strncmp+0x5c>
   1596c:	cmp	r2, #3
   1596e:	bls.n	159b8 <strncmp+0x5c>
   15970:	ldr	r4, [r0, #0]
   15972:	ldr	r5, [r1, #0]
   15974:	cmp	r4, r5
   15976:	bne.n	159b8 <strncmp+0x5c>
   15978:	subs	r2, #4
   1597a:	beq.n	159e8 <strncmp+0x8c>
   1597c:	sub.w	r5, r4, #16843009	; 0x1010101
   15980:	bic.w	r4, r5, r4
   15984:	tst.w	r4, #2155905152	; 0x80808080
   15988:	bne.n	159ee <strncmp+0x92>
   1598a:	adds	r7, r0, #4
   1598c:	adds	r5, r1, #4
   1598e:	b.n	159ac <strncmp+0x50>
   15990:	ldr.w	r3, [r7], #4
   15994:	ldr	r6, [r1, #0]
   15996:	sub.w	r4, r3, #16843009	; 0x1010101
   1599a:	cmp	r3, r6
   1599c:	bic.w	r4, r4, r3
   159a0:	bne.n	159b8 <strncmp+0x5c>
   159a2:	subs	r2, #4
   159a4:	beq.n	159e8 <strncmp+0x8c>
   159a6:	tst.w	r4, #2155905152	; 0x80808080
   159aa:	bne.n	159f4 <strncmp+0x98>
   159ac:	cmp	r2, #3
   159ae:	mov	r1, r5
   159b0:	mov	r0, r7
   159b2:	add.w	r5, r5, #4
   159b6:	bhi.n	15990 <strncmp+0x34>
   159b8:	ldrb	r3, [r0, #0]
   159ba:	ldrb	r4, [r1, #0]
   159bc:	cmp	r4, r3
   159be:	add.w	r2, r2, #4294967295
   159c2:	bne.n	159de <strncmp+0x82>
   159c4:	cbz	r2, 159e8 <strncmp+0x8c>
   159c6:	cbnz	r4, 159ce <strncmp+0x72>
   159c8:	b.n	159f8 <strncmp+0x9c>
   159ca:	cbz	r2, 159e8 <strncmp+0x8c>
   159cc:	cbz	r3, 159ee <strncmp+0x92>
   159ce:	ldrb.w	r3, [r0, #1]!
   159d2:	ldrb.w	r4, [r1, #1]!
   159d6:	cmp	r3, r4
   159d8:	add.w	r2, r2, #4294967295
   159dc:	beq.n	159ca <strncmp+0x6e>
   159de:	subs	r0, r3, r4
   159e0:	pop	{r4, r5, r6, r7}
   159e2:	bx	lr
   159e4:	mov	r0, r2
   159e6:	bx	lr
   159e8:	mov	r0, r2
   159ea:	pop	{r4, r5, r6, r7}
   159ec:	bx	lr
   159ee:	mov	r0, r3
   159f0:	pop	{r4, r5, r6, r7}
   159f2:	bx	lr
   159f4:	movs	r0, #0
   159f6:	b.n	159e0 <strncmp+0x84>
   159f8:	mov	r0, r4
   159fa:	b.n	159e0 <strncmp+0x84>

000159fc <strrchr>:
   159fc:	cbz	r1, 15a1c <strrchr+0x20>
   159fe:	push	{r3, r4, r5, lr}
   15a00:	mov	r3, r0
   15a02:	mov	r4, r1
   15a04:	movs	r5, #0
   15a06:	b.n	15a0c <strrchr+0x10>
   15a08:	adds	r3, r0, #1
   15a0a:	mov	r5, r0
   15a0c:	mov	r0, r3
   15a0e:	mov	r1, r4
   15a10:	bl	15330 <strchr>
   15a14:	cmp	r0, #0
   15a16:	bne.n	15a08 <strrchr+0xc>
   15a18:	mov	r0, r5
   15a1a:	pop	{r3, r4, r5, pc}
   15a1c:	b.w	15330 <strchr>

00015a20 <strspn>:
   15a20:	push	{r4, r5, r6}
   15a22:	ldrb	r4, [r0, #0]
   15a24:	cbz	r4, 15a50 <strspn+0x30>
   15a26:	ldrb	r6, [r1, #0]
   15a28:	mov	r5, r0
   15a2a:	cbz	r6, 15a40 <strspn+0x20>
   15a2c:	cmp	r4, r6
   15a2e:	beq.n	15a46 <strspn+0x26>
   15a30:	mov	r2, r1
   15a32:	b.n	15a38 <strspn+0x18>
   15a34:	cmp	r3, r4
   15a36:	beq.n	15a46 <strspn+0x26>
   15a38:	ldrb.w	r3, [r2, #1]!
   15a3c:	cmp	r3, #0
   15a3e:	bne.n	15a34 <strspn+0x14>
   15a40:	subs	r0, r5, r0
   15a42:	pop	{r4, r5, r6}
   15a44:	bx	lr
   15a46:	ldrb.w	r4, [r5, #1]!
   15a4a:	cmp	r4, #0
   15a4c:	bne.n	15a2a <strspn+0xa>
   15a4e:	b.n	15a40 <strspn+0x20>
   15a50:	mov	r0, r4
   15a52:	b.n	15a42 <strspn+0x22>
   15a54:			; <UNDEFINED> instruction: 0xffffffff

00015a58 <_svfprintf_r>:
   15a58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a5c:	sub	sp, #260	; 0x104
   15a5e:	mov	r4, r1
   15a60:	str	r1, [sp, #20]
   15a62:	mov	r5, r2
   15a64:	str	r3, [sp, #40]	; 0x28
   15a66:	str	r0, [sp, #24]
   15a68:	bl	185a0 <_localeconv_r>
   15a6c:	ldr	r3, [r0, #0]
   15a6e:	str	r3, [sp, #76]	; 0x4c
   15a70:	mov	r0, r3
   15a72:	bl	15880 <strlen>
   15a76:	ldrh	r3, [r4, #12]
   15a78:	str	r0, [sp, #72]	; 0x48
   15a7a:	lsls	r6, r3, #24
   15a7c:	bpl.n	15a86 <_svfprintf_r+0x2e>
   15a7e:	ldr	r3, [r4, #16]
   15a80:	cmp	r3, #0
   15a82:	beq.w	16ce8 <_svfprintf_r+0x1290>
   15a86:	vldr	d7, [pc, #664]	; 15d20 <_svfprintf_r+0x2c8>
   15a8a:	movs	r3, #0
   15a8c:	vstr	d7, [sp, #64]	; 0x40
   15a90:	str	r3, [sp, #56]	; 0x38
   15a92:	str	r3, [sp, #148]	; 0x94
   15a94:	str	r3, [sp, #144]	; 0x90
   15a96:	str	r3, [sp, #84]	; 0x54
   15a98:	str	r3, [sp, #28]
   15a9a:	ldr.w	sl, [pc, #656]	; 15d2c <_svfprintf_r+0x2d4>
   15a9e:	add	r3, sp, #192	; 0xc0
   15aa0:	str	r3, [sp, #140]	; 0x8c
   15aa2:	mov	r9, r3
   15aa4:	mov	r8, r5
   15aa6:	ldrb.w	r3, [r8]
   15aaa:	mov	r4, r8
   15aac:	cbz	r3, 15aea <_svfprintf_r+0x92>
   15aae:	cmp	r3, #37	; 0x25
   15ab0:	bne.n	15ab8 <_svfprintf_r+0x60>
   15ab2:	b.n	15aea <_svfprintf_r+0x92>
   15ab4:	cmp	r3, #37	; 0x25
   15ab6:	beq.n	15ac0 <_svfprintf_r+0x68>
   15ab8:	ldrb.w	r3, [r4, #1]!
   15abc:	cmp	r3, #0
   15abe:	bne.n	15ab4 <_svfprintf_r+0x5c>
   15ac0:	rsb	r5, r8, r4
   15ac4:	cbz	r5, 15aea <_svfprintf_r+0x92>
   15ac6:	ldr	r3, [sp, #144]	; 0x90
   15ac8:	ldr	r2, [sp, #148]	; 0x94
   15aca:	str.w	r8, [r9]
   15ace:	adds	r3, #1
   15ad0:	add	r2, r5
   15ad2:	cmp	r3, #7
   15ad4:	str.w	r5, [r9, #4]
   15ad8:	str	r2, [sp, #148]	; 0x94
   15ada:	str	r3, [sp, #144]	; 0x90
   15adc:	bgt.w	15c2c <_svfprintf_r+0x1d4>
   15ae0:	add.w	r9, r9, #8
   15ae4:	ldr	r3, [sp, #28]
   15ae6:	add	r3, r5
   15ae8:	str	r3, [sp, #28]
   15aea:	ldrb	r3, [r4, #0]
   15aec:	cmp	r3, #0
   15aee:	beq.w	15c3e <_svfprintf_r+0x1e6>
   15af2:	movs	r3, #0
   15af4:	mov	r2, r3
   15af6:	strb.w	r3, [sp, #111]	; 0x6f
   15afa:	mov	r1, r3
   15afc:	str	r3, [sp, #32]
   15afe:	str	r3, [sp, #12]
   15b00:	mov.w	fp, #4294967295
   15b04:	ldrb	r3, [r4, #1]
   15b06:	add.w	r8, r4, #1
   15b0a:	mov	r5, fp
   15b0c:	add.w	r8, r8, #1
   15b10:	sub.w	r0, r3, #32
   15b14:	cmp	r0, #88	; 0x58
   15b16:	bhi.w	16382 <_svfprintf_r+0x92a>
   15b1a:	tbh	[pc, r0, lsl #1]
   15b1e:	.short	0x03a0
   15b20:	.word	0x04320432
   15b24:	.word	0x043203a8
   15b28:	.word	0x04320432
   15b2c:	.word	0x04320432
   15b30:	.word	0x03af0432
   15b34:	.word	0x043203bd
   15b38:	.word	0x00e2005d
   15b3c:	.word	0x01090432
   15b40:	.word	0x01100110
   15b44:	.word	0x01100110
   15b48:	.word	0x01100110
   15b4c:	.word	0x01100110
   15b50:	.word	0x04320110
   15b54:	.word	0x04320432
   15b58:	.word	0x04320432
   15b5c:	.word	0x04320432
   15b60:	.word	0x04320432
   15b64:	.word	0x01200432
   15b68:	.word	0x04320286
   15b6c:	.word	0x04320286
   15b70:	.word	0x04320432
   15b74:	.word	0x02d40432
   15b78:	.word	0x04320432
   15b7c:	.word	0x043202e5
   15b80:	.word	0x04320432
   15b84:	.word	0x04320432
   15b88:	.word	0x0432030f
   15b8c:	.word	0x033d0432
   15b90:	.word	0x04320432
   15b94:	.word	0x04320432
   15b98:	.word	0x04320432
   15b9c:	.word	0x04320432
   15ba0:	.word	0x04320432
   15ba4:	.word	0x0391037e
   15ba8:	.word	0x02860286
   15bac:	.word	0x03990286
   15bb0:	.word	0x04320391
   15bb4:	.word	0x04070432
   15bb8:	.word	0x04120432
   15bbc:	.word	0x006400a3
   15bc0:	.word	0x043203c2
   15bc4:	.word	0x043203c9
   15bc8:	.word	0x043203ea
   15bcc:	.word	0x03f20432
   15bd0:	ldr	r0, [sp, #32]
   15bd2:	str	r3, [sp, #40]	; 0x28
   15bd4:	negs	r0, r0
   15bd6:	str	r0, [sp, #32]
   15bd8:	ldr	r3, [sp, #12]
   15bda:	orr.w	r3, r3, #4
   15bde:	str	r3, [sp, #12]
   15be0:	ldrb.w	r3, [r8]
   15be4:	b.n	15b0c <_svfprintf_r+0xb4>
   15be6:	ldr	r0, [sp, #40]	; 0x28
   15be8:	mov	fp, r5
   15bea:	movs	r1, #0
   15bec:	ldr	r4, [r0, #0]
   15bee:	strb.w	r1, [sp, #111]	; 0x6f
   15bf2:	adds	r7, r0, #4
   15bf4:	ldr	r0, [sp, #12]
   15bf6:	movs	r3, #48	; 0x30
   15bf8:	movs	r2, #120	; 0x78
   15bfa:	cmp	fp, r1
   15bfc:	strb.w	r3, [sp, #112]	; 0x70
   15c00:	mov.w	r5, #0
   15c04:	strb.w	r2, [sp, #113]	; 0x71
   15c08:	orr.w	r3, r0, #2
   15c0c:	blt.w	163bc <_svfprintf_r+0x964>
   15c10:	bic.w	r3, r0, #128	; 0x80
   15c14:	orr.w	r3, r3, #2
   15c18:	str	r3, [sp, #12]
   15c1a:	orrs.w	r3, r4, r5
   15c1e:	str	r7, [sp, #40]	; 0x28
   15c20:	beq.w	16368 <_svfprintf_r+0x910>
   15c24:	mov	r7, r1
   15c26:	str	r2, [sp, #52]	; 0x34
   15c28:	ldr	r0, [pc, #252]	; (15d28 <_svfprintf_r+0x2d0>)
   15c2a:	b.n	161fa <_svfprintf_r+0x7a2>
   15c2c:	add	r2, sp, #140	; 0x8c
   15c2e:	ldr	r1, [sp, #20]
   15c30:	ldr	r0, [sp, #24]
   15c32:	bl	18be0 <__ssprint_r>
   15c36:	cbnz	r0, 15c4c <_svfprintf_r+0x1f4>
   15c38:	add.w	r9, sp, #192	; 0xc0
   15c3c:	b.n	15ae4 <_svfprintf_r+0x8c>
   15c3e:	ldr	r3, [sp, #148]	; 0x94
   15c40:	cbz	r3, 15c4c <_svfprintf_r+0x1f4>
   15c42:	ldr	r0, [sp, #24]
   15c44:	ldr	r1, [sp, #20]
   15c46:	add	r2, sp, #140	; 0x8c
   15c48:	bl	18be0 <__ssprint_r>
   15c4c:	ldr	r3, [sp, #20]
   15c4e:	ldrh	r3, [r3, #12]
   15c50:	tst.w	r3, #64	; 0x40
   15c54:	ldr	r3, [sp, #28]
   15c56:	it	ne
   15c58:	movne.w	r3, #4294967295
   15c5c:	mov	r0, r3
   15c5e:	add	sp, #260	; 0x104
   15c60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c64:	str	r3, [sp, #52]	; 0x34
   15c66:	mov	fp, r5
   15c68:	cmp	r2, #0
   15c6a:	bne.w	170d4 <_svfprintf_r+0x167c>
   15c6e:	ldr	r2, [sp, #12]
   15c70:	ands.w	r3, r2, #32
   15c74:	beq.w	16104 <_svfprintf_r+0x6ac>
   15c78:	ldr	r7, [sp, #40]	; 0x28
   15c7a:	adds	r7, #7
   15c7c:	bic.w	r3, r7, #7
   15c80:	movs	r7, #0
   15c82:	add.w	r1, r3, #8
   15c86:	cmp	fp, r7
   15c88:	str	r1, [sp, #40]	; 0x28
   15c8a:	ldrd	r4, r5, [r3]
   15c8e:	strb.w	r7, [sp, #111]	; 0x6f
   15c92:	blt.w	16b5a <_svfprintf_r+0x1102>
   15c96:	bic.w	r3, r2, #128	; 0x80
   15c9a:	str	r3, [sp, #12]
   15c9c:	orrs.w	r3, r4, r5
   15ca0:	beq.w	163ac <_svfprintf_r+0x954>
   15ca4:	add	r6, sp, #192	; 0xc0
   15ca6:	lsrs	r2, r4, #3
   15ca8:	orr.w	r2, r2, r5, lsl #29
   15cac:	lsrs	r1, r5, #3
   15cae:	and.w	r3, r4, #7
   15cb2:	mov	r5, r1
   15cb4:	mov	r4, r2
   15cb6:	adds	r3, #48	; 0x30
   15cb8:	orrs.w	r2, r4, r5
   15cbc:	strb.w	r3, [r6, #-1]!
   15cc0:	bne.n	15ca6 <_svfprintf_r+0x24e>
   15cc2:	ldr	r2, [sp, #12]
   15cc4:	lsls	r1, r2, #31
   15cc6:	bpl.w	15de8 <_svfprintf_r+0x390>
   15cca:	cmp	r3, #48	; 0x30
   15ccc:	beq.w	15de8 <_svfprintf_r+0x390>
   15cd0:	movs	r2, #48	; 0x30
   15cd2:	subs	r3, r6, #1
   15cd4:	strb.w	r2, [r6, #-1]
   15cd8:	add	r2, sp, #192	; 0xc0
   15cda:	subs	r2, r2, r3
   15cdc:	str	r2, [sp, #36]	; 0x24
   15cde:	mov	r6, r3
   15ce0:	b.n	15dee <_svfprintf_r+0x396>
   15ce2:	ldrb.w	r3, [r8]
   15ce6:	cmp	r3, #42	; 0x2a
   15ce8:	add.w	r4, r8, #1
   15cec:	beq.w	170b8 <_svfprintf_r+0x1660>
   15cf0:	sub.w	r0, r3, #48	; 0x30
   15cf4:	cmp	r0, #9
   15cf6:	it	ls
   15cf8:	movls	r5, #0
   15cfa:	bhi.w	1700a <_svfprintf_r+0x15b2>
   15cfe:	ldrb.w	r3, [r4], #1
   15d02:	add.w	r5, r5, r5, lsl #2
   15d06:	add.w	r5, r0, r5, lsl #1
   15d0a:	sub.w	r0, r3, #48	; 0x30
   15d0e:	cmp	r0, #9
   15d10:	bls.n	15cfe <_svfprintf_r+0x2a6>
   15d12:	orr.w	r5, r5, r5, asr #31
   15d16:	mov	r8, r4
   15d18:	b.n	15b10 <_svfprintf_r+0xb8>
   15d1a:	nop
   15d1c:	nop.w
	...
   15d28:	.word	0x00019b00
   15d2c:	.word	0x00019acc
   15d30:	ldr	r3, [sp, #12]
   15d32:	orr.w	r3, r3, #128	; 0x80
   15d36:	str	r3, [sp, #12]
   15d38:	ldrb.w	r3, [r8]
   15d3c:	b.n	15b0c <_svfprintf_r+0xb4>
   15d3e:	sub.w	r0, r3, #48	; 0x30
   15d42:	movs	r3, #0
   15d44:	mov	r4, r3
   15d46:	ldrb.w	r3, [r8], #1
   15d4a:	add.w	r4, r4, r4, lsl #2
   15d4e:	add.w	r4, r0, r4, lsl #1
   15d52:	sub.w	r0, r3, #48	; 0x30
   15d56:	cmp	r0, #9
   15d58:	bls.n	15d46 <_svfprintf_r+0x2ee>
   15d5a:	str	r4, [sp, #32]
   15d5c:	b.n	15b10 <_svfprintf_r+0xb8>
   15d5e:	str	r3, [sp, #52]	; 0x34
   15d60:	mov	fp, r5
   15d62:	cmp	r2, #0
   15d64:	bne.w	170f0 <_svfprintf_r+0x1698>
   15d68:	ldr	r3, [sp, #12]
   15d6a:	orr.w	r3, r3, #16
   15d6e:	str	r3, [sp, #12]
   15d70:	ldr	r3, [sp, #12]
   15d72:	lsls	r4, r3, #26
   15d74:	bpl.w	167e6 <_svfprintf_r+0xd8e>
   15d78:	ldr	r7, [sp, #40]	; 0x28
   15d7a:	adds	r7, #7
   15d7c:	bic.w	r7, r7, #7
   15d80:	ldrd	r2, r3, [r7]
   15d84:	add.w	r1, r7, #8
   15d88:	str	r1, [sp, #40]	; 0x28
   15d8a:	mov	r4, r2
   15d8c:	mov	r5, r3
   15d8e:	cmp	r2, #0
   15d90:	sbcs.w	r3, r3, #0
   15d94:	blt.w	1685c <_svfprintf_r+0xe04>
   15d98:	cmp.w	fp, #0
   15d9c:	ldrb.w	r7, [sp, #111]	; 0x6f
   15da0:	blt.w	16822 <_svfprintf_r+0xdca>
   15da4:	ldr	r3, [sp, #12]
   15da6:	bic.w	r3, r3, #128	; 0x80
   15daa:	str	r3, [sp, #12]
   15dac:	orrs.w	r3, r4, r5
   15db0:	beq.w	16184 <_svfprintf_r+0x72c>
   15db4:	cmp	r5, #0
   15db6:	it	eq
   15db8:	cmpeq	r4, #10
   15dba:	bcc.w	1618e <_svfprintf_r+0x736>
   15dbe:	add	r6, sp, #192	; 0xc0
   15dc0:	mov	r0, r4
   15dc2:	mov	r1, r5
   15dc4:	movs	r2, #10
   15dc6:	movs	r3, #0
   15dc8:	bl	142e0 <__aeabi_uldivmod>
   15dcc:	adds	r2, #48	; 0x30
   15dce:	strb.w	r2, [r6, #-1]!
   15dd2:	mov	r0, r4
   15dd4:	mov	r1, r5
   15dd6:	movs	r3, #0
   15dd8:	movs	r2, #10
   15dda:	bl	142e0 <__aeabi_uldivmod>
   15dde:	mov	r4, r0
   15de0:	mov	r5, r1
   15de2:	orrs.w	r3, r4, r5
   15de6:	bne.n	15dc0 <_svfprintf_r+0x368>
   15de8:	add	r3, sp, #192	; 0xc0
   15dea:	subs	r3, r3, r6
   15dec:	str	r3, [sp, #36]	; 0x24
   15dee:	ldr	r3, [sp, #36]	; 0x24
   15df0:	cmp	r3, fp
   15df2:	it	lt
   15df4:	movlt	r3, fp
   15df6:	str	r3, [sp, #16]
   15df8:	movs	r3, #0
   15dfa:	str	r3, [sp, #60]	; 0x3c
   15dfc:	cbz	r7, 15e04 <_svfprintf_r+0x3ac>
   15dfe:	ldr	r3, [sp, #16]
   15e00:	adds	r3, #1
   15e02:	str	r3, [sp, #16]
   15e04:	ldr	r3, [sp, #12]
   15e06:	ands.w	r3, r3, #2
   15e0a:	str	r3, [sp, #44]	; 0x2c
   15e0c:	beq.n	15e14 <_svfprintf_r+0x3bc>
   15e0e:	ldr	r3, [sp, #16]
   15e10:	adds	r3, #2
   15e12:	str	r3, [sp, #16]
   15e14:	ldr	r3, [sp, #12]
   15e16:	ands.w	r3, r3, #132	; 0x84
   15e1a:	str	r3, [sp, #48]	; 0x30
   15e1c:	bne.w	163d6 <_svfprintf_r+0x97e>
   15e20:	ldr	r3, [sp, #32]
   15e22:	ldr	r2, [sp, #16]
   15e24:	subs	r5, r3, r2
   15e26:	cmp	r5, #0
   15e28:	ble.w	163d6 <_svfprintf_r+0x97e>
   15e2c:	cmp	r5, #16
   15e2e:	ldr	r1, [sp, #148]	; 0x94
   15e30:	ldr	r2, [sp, #144]	; 0x90
   15e32:	ldr	r7, [pc, #672]	; (160d4 <_svfprintf_r+0x67c>)
   15e34:	ble.n	15e86 <_svfprintf_r+0x42e>
   15e36:	str	r6, [sp, #80]	; 0x50
   15e38:	mov	r0, r9
   15e3a:	movs	r4, #16
   15e3c:	mov	r9, r7
   15e3e:	ldr	r6, [sp, #20]
   15e40:	mov	r7, r5
   15e42:	ldr	r5, [sp, #24]
   15e44:	b.n	15e50 <_svfprintf_r+0x3f8>
   15e46:	subs	r7, #16
   15e48:	cmp	r7, #16
   15e4a:	add.w	r0, r0, #8
   15e4e:	ble.n	15e7e <_svfprintf_r+0x426>
   15e50:	adds	r2, #1
   15e52:	ldr	r3, [pc, #640]	; (160d4 <_svfprintf_r+0x67c>)
   15e54:	str	r2, [sp, #144]	; 0x90
   15e56:	adds	r1, #16
   15e58:	cmp	r2, #7
   15e5a:	str	r1, [sp, #148]	; 0x94
   15e5c:	stmia.w	r0, {r3, r4}
   15e60:	ble.n	15e46 <_svfprintf_r+0x3ee>
   15e62:	add	r2, sp, #140	; 0x8c
   15e64:	mov	r1, r6
   15e66:	mov	r0, r5
   15e68:	bl	18be0 <__ssprint_r>
   15e6c:	cmp	r0, #0
   15e6e:	bne.w	15c4c <_svfprintf_r+0x1f4>
   15e72:	subs	r7, #16
   15e74:	cmp	r7, #16
   15e76:	ldr	r1, [sp, #148]	; 0x94
   15e78:	ldr	r2, [sp, #144]	; 0x90
   15e7a:	add	r0, sp, #192	; 0xc0
   15e7c:	bgt.n	15e50 <_svfprintf_r+0x3f8>
   15e7e:	ldr	r6, [sp, #80]	; 0x50
   15e80:	mov	r5, r7
   15e82:	mov	r7, r9
   15e84:	mov	r9, r0
   15e86:	adds	r2, #1
   15e88:	adds	r4, r5, r1
   15e8a:	cmp	r2, #7
   15e8c:	str	r4, [sp, #148]	; 0x94
   15e8e:	str	r2, [sp, #144]	; 0x90
   15e90:	str.w	r7, [r9]
   15e94:	str.w	r5, [r9, #4]
   15e98:	bgt.w	166f6 <_svfprintf_r+0xc9e>
   15e9c:	ldrb.w	r7, [sp, #111]	; 0x6f
   15ea0:	add.w	r9, r9, #8
   15ea4:	cbz	r7, 15ec4 <_svfprintf_r+0x46c>
   15ea6:	ldr	r3, [sp, #144]	; 0x90
   15ea8:	adds	r3, #1
   15eaa:	adds	r4, #1
   15eac:	add.w	r1, sp, #111	; 0x6f
   15eb0:	movs	r2, #1
   15eb2:	cmp	r3, #7
   15eb4:	str	r4, [sp, #148]	; 0x94
   15eb6:	str	r3, [sp, #144]	; 0x90
   15eb8:	stmia.w	r9, {r1, r2}
   15ebc:	bgt.w	1660a <_svfprintf_r+0xbb2>
   15ec0:	add.w	r9, r9, #8
   15ec4:	ldr	r3, [sp, #44]	; 0x2c
   15ec6:	cbz	r3, 15ee4 <_svfprintf_r+0x48c>
   15ec8:	ldr	r3, [sp, #144]	; 0x90
   15eca:	adds	r3, #1
   15ecc:	adds	r4, #2
   15ece:	add	r1, sp, #112	; 0x70
   15ed0:	movs	r2, #2
   15ed2:	cmp	r3, #7
   15ed4:	str	r4, [sp, #148]	; 0x94
   15ed6:	str	r3, [sp, #144]	; 0x90
   15ed8:	stmia.w	r9, {r1, r2}
   15edc:	bgt.w	16622 <_svfprintf_r+0xbca>
   15ee0:	add.w	r9, r9, #8
   15ee4:	ldr	r3, [sp, #48]	; 0x30
   15ee6:	cmp	r3, #128	; 0x80
   15ee8:	beq.w	164ae <_svfprintf_r+0xa56>
   15eec:	ldr	r3, [sp, #36]	; 0x24
   15eee:	rsb	r7, r3, fp
   15ef2:	cmp	r7, #0
   15ef4:	ble.n	15f5e <_svfprintf_r+0x506>
   15ef6:	ldr	r2, [pc, #480]	; (160d8 <_svfprintf_r+0x680>)
   15ef8:	ldr	r3, [sp, #144]	; 0x90
   15efa:	str	r2, [sp, #44]	; 0x2c
   15efc:	cmp	r7, #16
   15efe:	ble.n	15f46 <_svfprintf_r+0x4ee>
   15f00:	mov	r2, r4
   15f02:	mov.w	fp, #16
   15f06:	ldr	r5, [sp, #24]
   15f08:	ldr	r4, [sp, #20]
   15f0a:	b.n	15f16 <_svfprintf_r+0x4be>
   15f0c:	subs	r7, #16
   15f0e:	cmp	r7, #16
   15f10:	add.w	r9, r9, #8
   15f14:	ble.n	15f44 <_svfprintf_r+0x4ec>
   15f16:	adds	r3, #1
   15f18:	adds	r2, #16
   15f1a:	cmp	r3, #7
   15f1c:	str	r2, [sp, #148]	; 0x94
   15f1e:	str	r3, [sp, #144]	; 0x90
   15f20:	stmia.w	r9, {sl, fp}
   15f24:	ble.n	15f0c <_svfprintf_r+0x4b4>
   15f26:	add	r2, sp, #140	; 0x8c
   15f28:	mov	r1, r4
   15f2a:	mov	r0, r5
   15f2c:	bl	18be0 <__ssprint_r>
   15f30:	cmp	r0, #0
   15f32:	bne.w	15c4c <_svfprintf_r+0x1f4>
   15f36:	subs	r7, #16
   15f38:	cmp	r7, #16
   15f3a:	ldr	r2, [sp, #148]	; 0x94
   15f3c:	ldr	r3, [sp, #144]	; 0x90
   15f3e:	add.w	r9, sp, #192	; 0xc0
   15f42:	bgt.n	15f16 <_svfprintf_r+0x4be>
   15f44:	mov	r4, r2
   15f46:	adds	r3, #1
   15f48:	ldr	r2, [sp, #44]	; 0x2c
   15f4a:	str	r3, [sp, #144]	; 0x90
   15f4c:	add	r4, r7
   15f4e:	cmp	r3, #7
   15f50:	str	r4, [sp, #148]	; 0x94
   15f52:	stmia.w	r9, {r2, r7}
   15f56:	bgt.w	165f2 <_svfprintf_r+0xb9a>
   15f5a:	add.w	r9, r9, #8
   15f5e:	ldr	r3, [sp, #12]
   15f60:	lsls	r2, r3, #23
   15f62:	bmi.w	163da <_svfprintf_r+0x982>
   15f66:	ldr	r3, [sp, #144]	; 0x90
   15f68:	ldr	r1, [sp, #36]	; 0x24
   15f6a:	str.w	r6, [r9]
   15f6e:	adds	r3, #1
   15f70:	add	r4, r1
   15f72:	cmp	r3, #7
   15f74:	str	r4, [sp, #148]	; 0x94
   15f76:	str.w	r1, [r9, #4]
   15f7a:	str	r3, [sp, #144]	; 0x90
   15f7c:	bgt.w	165c6 <_svfprintf_r+0xb6e>
   15f80:	add.w	r9, r9, #8
   15f84:	ldr	r3, [sp, #12]
   15f86:	lsls	r1, r3, #29
   15f88:	bpl.n	1600a <_svfprintf_r+0x5b2>
   15f8a:	ldr	r3, [sp, #32]
   15f8c:	ldr	r2, [sp, #16]
   15f8e:	subs	r5, r3, r2
   15f90:	cmp	r5, #0
   15f92:	ble.n	1600a <_svfprintf_r+0x5b2>
   15f94:	cmp	r5, #16
   15f96:	ldr	r3, [sp, #144]	; 0x90
   15f98:	ldr	r7, [pc, #312]	; (160d4 <_svfprintf_r+0x67c>)
   15f9a:	ble.n	15fe4 <_svfprintf_r+0x58c>
   15f9c:	mov	r2, r4
   15f9e:	movs	r6, #16
   15fa0:	ldr.w	fp, [sp, #24]
   15fa4:	ldr	r4, [sp, #20]
   15fa6:	b.n	15fb2 <_svfprintf_r+0x55a>
   15fa8:	subs	r5, #16
   15faa:	cmp	r5, #16
   15fac:	add.w	r9, r9, #8
   15fb0:	ble.n	15fe2 <_svfprintf_r+0x58a>
   15fb2:	adds	r3, #1
   15fb4:	ldr	r1, [pc, #284]	; (160d4 <_svfprintf_r+0x67c>)
   15fb6:	str	r3, [sp, #144]	; 0x90
   15fb8:	adds	r2, #16
   15fba:	cmp	r3, #7
   15fbc:	str	r2, [sp, #148]	; 0x94
   15fbe:	stmia.w	r9, {r1, r6}
   15fc2:	ble.n	15fa8 <_svfprintf_r+0x550>
   15fc4:	add	r2, sp, #140	; 0x8c
   15fc6:	mov	r1, r4
   15fc8:	mov	r0, fp
   15fca:	bl	18be0 <__ssprint_r>
   15fce:	cmp	r0, #0
   15fd0:	bne.w	15c4c <_svfprintf_r+0x1f4>
   15fd4:	subs	r5, #16
   15fd6:	cmp	r5, #16
   15fd8:	ldr	r2, [sp, #148]	; 0x94
   15fda:	ldr	r3, [sp, #144]	; 0x90
   15fdc:	add.w	r9, sp, #192	; 0xc0
   15fe0:	bgt.n	15fb2 <_svfprintf_r+0x55a>
   15fe2:	mov	r4, r2
   15fe4:	adds	r3, #1
   15fe6:	add	r4, r5
   15fe8:	cmp	r3, #7
   15fea:	str	r4, [sp, #148]	; 0x94
   15fec:	str	r3, [sp, #144]	; 0x90
   15fee:	str.w	r7, [r9]
   15ff2:	str.w	r5, [r9, #4]
   15ff6:	ble.n	1600a <_svfprintf_r+0x5b2>
   15ff8:	add	r2, sp, #140	; 0x8c
   15ffa:	ldr	r1, [sp, #20]
   15ffc:	ldr	r0, [sp, #24]
   15ffe:	bl	18be0 <__ssprint_r>
   16002:	cmp	r0, #0
   16004:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16008:	ldr	r4, [sp, #148]	; 0x94
   1600a:	ldr	r3, [sp, #28]
   1600c:	ldr	r2, [sp, #32]
   1600e:	ldr	r1, [sp, #16]
   16010:	cmp	r2, r1
   16012:	ite	ge
   16014:	addge	r3, r3, r2
   16016:	addlt	r3, r3, r1
   16018:	str	r3, [sp, #28]
   1601a:	cmp	r4, #0
   1601c:	bne.w	165de <_svfprintf_r+0xb86>
   16020:	movs	r3, #0
   16022:	str	r3, [sp, #144]	; 0x90
   16024:	add.w	r9, sp, #192	; 0xc0
   16028:	b.n	15aa6 <_svfprintf_r+0x4e>
   1602a:	str	r3, [sp, #52]	; 0x34
   1602c:	mov	fp, r5
   1602e:	cmp	r2, #0
   16030:	bne.w	170f8 <_svfprintf_r+0x16a0>
   16034:	ldr	r3, [sp, #12]
   16036:	ldr	r7, [sp, #40]	; 0x28
   16038:	lsls	r2, r3, #28
   1603a:	add.w	r7, r7, #7
   1603e:	bpl.w	16b2a <_svfprintf_r+0x10d2>
   16042:	bic.w	r3, r7, #7
   16046:	vldr	d7, [r3]
   1604a:	vstr	d7, [sp, #64]	; 0x40
   1604e:	add.w	r2, r3, #8
   16052:	str	r2, [sp, #40]	; 0x28
   16054:	ldrd	r1, r2, [sp, #64]	; 0x40
   16058:	bic.w	r3, r2, #2147483648	; 0x80000000
   1605c:	str	r1, [sp, #88]	; 0x58
   1605e:	str	r3, [sp, #92]	; 0x5c
   16060:	ldrd	r4, r5, [sp, #88]	; 0x58
   16064:	mov.w	r2, #4294967295
   16068:	mov	r0, r4
   1606a:	mov	r1, r5
   1606c:	ldr	r3, [pc, #108]	; (160dc <_svfprintf_r+0x684>)
   1606e:	bl	14264 <__aeabi_dcmpun>
   16072:	cmp	r0, #0
   16074:	bne.w	16a2c <_svfprintf_r+0xfd4>
   16078:	mov.w	r2, #4294967295
   1607c:	ldr	r3, [pc, #92]	; (160dc <_svfprintf_r+0x684>)
   1607e:	mov	r0, r4
   16080:	mov	r1, r5
   16082:	bl	14228 <__aeabi_dcmple>
   16086:	cmp	r0, #0
   16088:	bne.w	16a2c <_svfprintf_r+0xfd4>
   1608c:	movs	r2, #0
   1608e:	movs	r3, #0
   16090:	ldrd	r0, r1, [sp, #64]	; 0x40
   16094:	bl	14214 <__aeabi_dcmplt>
   16098:	cmp	r0, #0
   1609a:	bne.w	16f42 <_svfprintf_r+0x14ea>
   1609e:	ldrb.w	r7, [sp, #111]	; 0x6f
   160a2:	ldr	r6, [pc, #60]	; (160e0 <_svfprintf_r+0x688>)
   160a4:	ldr	r3, [pc, #60]	; (160e4 <_svfprintf_r+0x68c>)
   160a6:	ldr	r1, [sp, #12]
   160a8:	bic.w	r1, r1, #128	; 0x80
   160ac:	str	r1, [sp, #12]
   160ae:	ldr	r1, [sp, #52]	; 0x34
   160b0:	movs	r2, #3
   160b2:	mov.w	fp, #0
   160b6:	str	r2, [sp, #16]
   160b8:	cmp	r1, #71	; 0x47
   160ba:	it	le
   160bc:	movle	r6, r3
   160be:	str	r2, [sp, #36]	; 0x24
   160c0:	str.w	fp, [sp, #60]	; 0x3c
   160c4:	b.n	15dfc <_svfprintf_r+0x3a4>
   160c6:	ldr	r3, [sp, #12]
   160c8:	orr.w	r3, r3, #8
   160cc:	str	r3, [sp, #12]
   160ce:	ldrb.w	r3, [r8]
   160d2:	b.n	15b0c <_svfprintf_r+0xb4>
   160d4:	.word	0x00019b1c
   160d8:	.word	0x00019acc
   160dc:	.word	0x7fefffff
   160e0:	.word	0x00019ae0
   160e4:	.word	0x00019adc
   160e8:	str	r3, [sp, #52]	; 0x34
   160ea:	mov	fp, r5
   160ec:	cmp	r2, #0
   160ee:	bne.w	17110 <_svfprintf_r+0x16b8>
   160f2:	ldr	r3, [sp, #12]
   160f4:	orr.w	r3, r3, #16
   160f8:	str	r3, [sp, #12]
   160fa:	ldr	r2, [sp, #12]
   160fc:	ands.w	r3, r2, #32
   16100:	bne.w	15c78 <_svfprintf_r+0x220>
   16104:	ldr	r1, [sp, #12]
   16106:	ands.w	r2, r1, #16
   1610a:	beq.w	169c4 <_svfprintf_r+0xf6c>
   1610e:	ldr	r0, [sp, #40]	; 0x28
   16110:	strb.w	r3, [sp, #111]	; 0x6f
   16114:	cmp.w	fp, #0
   16118:	ldr	r4, [r0, #0]
   1611a:	add.w	r7, r0, #4
   1611e:	mov.w	r5, #0
   16122:	blt.w	16b58 <_svfprintf_r+0x1100>
   16126:	mov	r2, r1
   16128:	bic.w	r2, r2, #128	; 0x80
   1612c:	str	r2, [sp, #12]
   1612e:	orrs.w	r2, r4, r5
   16132:	str	r7, [sp, #40]	; 0x28
   16134:	beq.w	163ac <_svfprintf_r+0x954>
   16138:	mov	r7, r3
   1613a:	b.n	15ca4 <_svfprintf_r+0x24c>
   1613c:	str	r3, [sp, #52]	; 0x34
   1613e:	mov	fp, r5
   16140:	cmp	r2, #0
   16142:	bne.w	17108 <_svfprintf_r+0x16b0>
   16146:	ldr	r3, [sp, #12]
   16148:	orr.w	r3, r3, #16
   1614c:	str	r3, [sp, #12]
   1614e:	ldr	r2, [sp, #12]
   16150:	ands.w	r3, r2, #32
   16154:	beq.w	167b0 <_svfprintf_r+0xd58>
   16158:	ldr	r7, [sp, #40]	; 0x28
   1615a:	adds	r7, #7
   1615c:	bic.w	r3, r7, #7
   16160:	movs	r7, #0
   16162:	add.w	r1, r3, #8
   16166:	cmp	fp, r7
   16168:	str	r1, [sp, #40]	; 0x28
   1616a:	ldrd	r4, r5, [r3]
   1616e:	strb.w	r7, [sp, #111]	; 0x6f
   16172:	blt.w	16822 <_svfprintf_r+0xdca>
   16176:	bic.w	r3, r2, #128	; 0x80
   1617a:	str	r3, [sp, #12]
   1617c:	orrs.w	r3, r4, r5
   16180:	bne.w	15db4 <_svfprintf_r+0x35c>
   16184:	cmp.w	fp, #0
   16188:	beq.w	16376 <_svfprintf_r+0x91e>
   1618c:	movs	r4, #0
   1618e:	add	r6, sp, #256	; 0x100
   16190:	adds	r4, #48	; 0x30
   16192:	strb.w	r4, [r6, #-65]!
   16196:	b.n	15de8 <_svfprintf_r+0x390>
   16198:	str	r3, [sp, #52]	; 0x34
   1619a:	mov	fp, r5
   1619c:	cmp	r2, #0
   1619e:	bne.w	17100 <_svfprintf_r+0x16a8>
   161a2:	ldr	r3, [sp, #12]
   161a4:	ldr	r0, [pc, #700]	; (16464 <_svfprintf_r+0xa0c>)
   161a6:	lsls	r5, r3, #26
   161a8:	bpl.w	16316 <_svfprintf_r+0x8be>
   161ac:	ldr	r7, [sp, #40]	; 0x28
   161ae:	adds	r7, #7
   161b0:	bic.w	r3, r7, #7
   161b4:	ldrd	r4, r5, [r3]
   161b8:	add.w	r2, r3, #8
   161bc:	str	r2, [sp, #40]	; 0x28
   161be:	ldr	r2, [sp, #12]
   161c0:	ands.w	r7, r2, #1
   161c4:	beq.w	1663a <_svfprintf_r+0xbe2>
   161c8:	orrs.w	r3, r4, r5
   161cc:	beq.w	16bd4 <_svfprintf_r+0x117c>
   161d0:	ldrb.w	r2, [sp, #52]	; 0x34
   161d4:	strb.w	r2, [sp, #113]	; 0x71
   161d8:	movs	r7, #0
   161da:	ldr	r2, [sp, #12]
   161dc:	strb.w	r7, [sp, #111]	; 0x6f
   161e0:	movs	r3, #48	; 0x30
   161e2:	cmp	fp, r7
   161e4:	strb.w	r3, [sp, #112]	; 0x70
   161e8:	orr.w	r3, r2, #2
   161ec:	blt.w	16f4c <_svfprintf_r+0x14f4>
   161f0:	bic.w	r3, r2, #128	; 0x80
   161f4:	orr.w	r3, r3, #2
   161f8:	str	r3, [sp, #12]
   161fa:	add	r6, sp, #192	; 0xc0
   161fc:	lsrs	r3, r4, #4
   161fe:	and.w	r1, r4, #15
   16202:	orr.w	r3, r3, r5, lsl #28
   16206:	lsrs	r2, r5, #4
   16208:	mov	r4, r3
   1620a:	mov	r5, r2
   1620c:	ldrb	r3, [r0, r1]
   1620e:	strb.w	r3, [r6, #-1]!
   16212:	orrs.w	r3, r4, r5
   16216:	bne.n	161fc <_svfprintf_r+0x7a4>
   16218:	b.n	15de8 <_svfprintf_r+0x390>
   1621a:	ldr	r1, [sp, #40]	; 0x28
   1621c:	str	r3, [sp, #52]	; 0x34
   1621e:	ldr	r2, [r1, #0]
   16220:	strb.w	r2, [sp, #152]	; 0x98
   16224:	movs	r3, #0
   16226:	mov	r2, r1
   16228:	mov	r7, r3
   1622a:	strb.w	r3, [sp, #111]	; 0x6f
   1622e:	adds	r2, #4
   16230:	movs	r3, #1
   16232:	str	r3, [sp, #16]
   16234:	mov	fp, r7
   16236:	str	r7, [sp, #60]	; 0x3c
   16238:	str	r2, [sp, #40]	; 0x28
   1623a:	str	r3, [sp, #36]	; 0x24
   1623c:	add	r6, sp, #152	; 0x98
   1623e:	b.n	15e04 <_svfprintf_r+0x3ac>
   16240:	str	r3, [sp, #52]	; 0x34
   16242:	mov	fp, r5
   16244:	cmp	r2, #0
   16246:	beq.w	15d70 <_svfprintf_r+0x318>
   1624a:	strb.w	r1, [sp, #111]	; 0x6f
   1624e:	b.n	15d70 <_svfprintf_r+0x318>
   16250:	ldr	r3, [sp, #12]
   16252:	orr.w	r3, r3, #64	; 0x40
   16256:	str	r3, [sp, #12]
   16258:	ldrb.w	r3, [r8]
   1625c:	b.n	15b0c <_svfprintf_r+0xb4>
   1625e:	ldrb.w	r3, [r8]
   16262:	cmp	r1, #0
   16264:	bne.w	15b0c <_svfprintf_r+0xb4>
   16268:	movs	r2, #1
   1626a:	movs	r1, #32
   1626c:	b.n	15b0c <_svfprintf_r+0xb4>
   1626e:	ldr	r3, [sp, #12]
   16270:	orr.w	r3, r3, #1
   16274:	str	r3, [sp, #12]
   16276:	ldrb.w	r3, [r8]
   1627a:	b.n	15b0c <_svfprintf_r+0xb4>
   1627c:	ldr	r4, [sp, #40]	; 0x28
   1627e:	ldr	r3, [r4, #0]
   16280:	str	r3, [sp, #32]
   16282:	mov	r0, r3
   16284:	cmp	r0, #0
   16286:	mov	r3, r4
   16288:	add.w	r3, r3, #4
   1628c:	blt.w	15bd0 <_svfprintf_r+0x178>
   16290:	str	r3, [sp, #40]	; 0x28
   16292:	ldrb.w	r3, [r8]
   16296:	b.n	15b0c <_svfprintf_r+0xb4>
   16298:	ldrb.w	r3, [r8]
   1629c:	movs	r2, #1
   1629e:	movs	r1, #43	; 0x2b
   162a0:	b.n	15b0c <_svfprintf_r+0xb4>
   162a2:	ldr	r3, [sp, #12]
   162a4:	orr.w	r3, r3, #32
   162a8:	str	r3, [sp, #12]
   162aa:	ldrb.w	r3, [r8]
   162ae:	b.n	15b0c <_svfprintf_r+0xb4>
   162b0:	ldr	r2, [sp, #40]	; 0x28
   162b2:	str	r3, [sp, #52]	; 0x34
   162b4:	ldr	r6, [r2, #0]
   162b6:	movs	r4, #0
   162b8:	strb.w	r4, [sp, #111]	; 0x6f
   162bc:	adds	r7, r2, #4
   162be:	cmp	r6, #0
   162c0:	beq.w	16efc <_svfprintf_r+0x14a4>
   162c4:	cmp	r5, #0
   162c6:	blt.w	16d8c <_svfprintf_r+0x1334>
   162ca:	mov	r2, r5
   162cc:	mov	r1, r4
   162ce:	mov	r0, r6
   162d0:	bl	14c70 <memchr>
   162d4:	cmp	r0, #0
   162d6:	beq.w	16fa0 <_svfprintf_r+0x1548>
   162da:	subs	r3, r0, r6
   162dc:	str	r3, [sp, #36]	; 0x24
   162de:	mov	fp, r4
   162e0:	bic.w	r3, r3, r3, asr #31
   162e4:	str	r7, [sp, #40]	; 0x28
   162e6:	str	r3, [sp, #16]
   162e8:	str.w	fp, [sp, #60]	; 0x3c
   162ec:	ldrb.w	r7, [sp, #111]	; 0x6f
   162f0:	b.n	15dfc <_svfprintf_r+0x3a4>
   162f2:	str	r3, [sp, #52]	; 0x34
   162f4:	mov	fp, r5
   162f6:	cmp	r2, #0
   162f8:	beq.w	1614e <_svfprintf_r+0x6f6>
   162fc:	strb.w	r1, [sp, #111]	; 0x6f
   16300:	b.n	1614e <_svfprintf_r+0x6f6>
   16302:	str	r3, [sp, #52]	; 0x34
   16304:	mov	fp, r5
   16306:	cmp	r2, #0
   16308:	bne.w	17128 <_svfprintf_r+0x16d0>
   1630c:	ldr	r3, [sp, #12]
   1630e:	ldr	r0, [pc, #344]	; (16468 <_svfprintf_r+0xa10>)
   16310:	lsls	r5, r3, #26
   16312:	bmi.w	161ac <_svfprintf_r+0x754>
   16316:	ldr	r3, [sp, #12]
   16318:	lsls	r4, r3, #27
   1631a:	bpl.w	16b9a <_svfprintf_r+0x1142>
   1631e:	ldr	r2, [sp, #40]	; 0x28
   16320:	mov	r3, r2
   16322:	adds	r3, #4
   16324:	ldr	r4, [r2, #0]
   16326:	str	r3, [sp, #40]	; 0x28
   16328:	movs	r5, #0
   1632a:	b.n	161be <_svfprintf_r+0x766>
   1632c:	ldrb.w	r3, [r8]
   16330:	cmp	r3, #108	; 0x6c
   16332:	beq.w	16cba <_svfprintf_r+0x1262>
   16336:	ldr	r0, [sp, #12]
   16338:	orr.w	r0, r0, #16
   1633c:	str	r0, [sp, #12]
   1633e:	b.w	15b0c <_svfprintf_r+0xb4>
   16342:	cmp	r2, #0
   16344:	bne.w	17120 <_svfprintf_r+0x16c8>
   16348:	ldr	r3, [sp, #12]
   1634a:	lsls	r3, r3, #26
   1634c:	bpl.w	169fe <_svfprintf_r+0xfa6>
   16350:	ldr	r2, [sp, #40]	; 0x28
   16352:	ldr	r1, [sp, #28]
   16354:	ldr	r3, [r2, #0]
   16356:	asrs	r5, r1, #31
   16358:	mov	r0, r1
   1635a:	adds	r2, #4
   1635c:	mov	r1, r5
   1635e:	str	r2, [sp, #40]	; 0x28
   16360:	strd	r0, r1, [r3]
   16364:	b.w	15aa6 <_svfprintf_r+0x4e>
   16368:	ldr	r0, [pc, #252]	; (16468 <_svfprintf_r+0xa10>)
   1636a:	str	r2, [sp, #52]	; 0x34
   1636c:	cmp.w	fp, #0
   16370:	bne.w	1665c <_svfprintf_r+0xc04>
   16374:	mov	r7, fp
   16376:	mov.w	fp, #0
   1637a:	str.w	fp, [sp, #36]	; 0x24
   1637e:	add	r6, sp, #192	; 0xc0
   16380:	b.n	15dee <_svfprintf_r+0x396>
   16382:	str	r3, [sp, #52]	; 0x34
   16384:	cmp	r2, #0
   16386:	bne.w	17118 <_svfprintf_r+0x16c0>
   1638a:	ldr	r2, [sp, #52]	; 0x34
   1638c:	cmp	r2, #0
   1638e:	beq.w	15c3e <_svfprintf_r+0x1e6>
   16392:	movs	r3, #0
   16394:	movs	r1, #1
   16396:	mov	r7, r3
   16398:	str	r1, [sp, #16]
   1639a:	strb.w	r2, [sp, #152]	; 0x98
   1639e:	strb.w	r3, [sp, #111]	; 0x6f
   163a2:	mov	fp, r3
   163a4:	str	r3, [sp, #60]	; 0x3c
   163a6:	str	r1, [sp, #36]	; 0x24
   163a8:	add	r6, sp, #152	; 0x98
   163aa:	b.n	15e04 <_svfprintf_r+0x3ac>
   163ac:	cmp.w	fp, #0
   163b0:	beq.w	16fd0 <_svfprintf_r+0x1578>
   163b4:	movs	r7, #0
   163b6:	movs	r4, #0
   163b8:	movs	r5, #0
   163ba:	b.n	15ca4 <_svfprintf_r+0x24c>
   163bc:	ldr	r0, [pc, #168]	; (16468 <_svfprintf_r+0xa10>)
   163be:	str	r3, [sp, #12]
   163c0:	str	r2, [sp, #52]	; 0x34
   163c2:	orrs.w	r3, r4, r5
   163c6:	str	r7, [sp, #40]	; 0x28
   163c8:	mov.w	r7, #0
   163cc:	bne.w	161fa <_svfprintf_r+0x7a2>
   163d0:	movs	r4, #0
   163d2:	movs	r5, #0
   163d4:	b.n	161fa <_svfprintf_r+0x7a2>
   163d6:	ldr	r4, [sp, #148]	; 0x94
   163d8:	b.n	15ea4 <_svfprintf_r+0x44c>
   163da:	ldr	r3, [sp, #52]	; 0x34
   163dc:	cmp	r3, #101	; 0x65
   163de:	ble.w	16536 <_svfprintf_r+0xade>
   163e2:	movs	r2, #0
   163e4:	movs	r3, #0
   163e6:	ldrd	r0, r1, [sp, #64]	; 0x40
   163ea:	bl	14200 <__aeabi_dcmpeq>
   163ee:	cmp	r0, #0
   163f0:	beq.w	16660 <_svfprintf_r+0xc08>
   163f4:	ldr	r3, [sp, #144]	; 0x90
   163f6:	ldr	r2, [pc, #116]	; (1646c <_svfprintf_r+0xa14>)
   163f8:	str.w	r2, [r9]
   163fc:	adds	r3, #1
   163fe:	adds	r4, #1
   16400:	movs	r2, #1
   16402:	cmp	r3, #7
   16404:	str	r4, [sp, #148]	; 0x94
   16406:	str	r3, [sp, #144]	; 0x90
   16408:	str.w	r2, [r9, #4]
   1640c:	bgt.w	16bec <_svfprintf_r+0x1194>
   16410:	add.w	r9, r9, #8
   16414:	ldr	r3, [sp, #116]	; 0x74
   16416:	ldr	r2, [sp, #56]	; 0x38
   16418:	cmp	r3, r2
   1641a:	blt.n	16424 <_svfprintf_r+0x9cc>
   1641c:	ldr	r3, [sp, #12]
   1641e:	lsls	r3, r3, #31
   16420:	bpl.w	15f84 <_svfprintf_r+0x52c>
   16424:	ldr	r3, [sp, #144]	; 0x90
   16426:	ldr	r1, [sp, #72]	; 0x48
   16428:	ldr	r2, [sp, #76]	; 0x4c
   1642a:	str.w	r2, [r9]
   1642e:	adds	r3, #1
   16430:	add	r4, r1
   16432:	cmp	r3, #7
   16434:	str	r4, [sp, #148]	; 0x94
   16436:	str.w	r1, [r9, #4]
   1643a:	str	r3, [sp, #144]	; 0x90
   1643c:	bgt.w	16cce <_svfprintf_r+0x1276>
   16440:	add.w	r9, r9, #8
   16444:	ldr	r3, [sp, #56]	; 0x38
   16446:	subs	r5, r3, #1
   16448:	cmp	r5, #0
   1644a:	ble.w	15f84 <_svfprintf_r+0x52c>
   1644e:	ldr	r2, [pc, #32]	; (16470 <_svfprintf_r+0xa18>)
   16450:	ldr	r3, [sp, #144]	; 0x90
   16452:	str	r2, [sp, #44]	; 0x2c
   16454:	cmp	r5, #16
   16456:	ble.w	1682c <_svfprintf_r+0xdd4>
   1645a:	movs	r6, #16
   1645c:	ldr	r7, [sp, #24]
   1645e:	ldr.w	fp, [sp, #20]
   16462:	b.n	16480 <_svfprintf_r+0xa28>
   16464:	.word	0x00019aec
   16468:	.word	0x00019b00
   1646c:	.word	0x0001988c
   16470:	.word	0x00019acc
   16474:	add.w	r9, r9, #8
   16478:	subs	r5, #16
   1647a:	cmp	r5, #16
   1647c:	ble.w	1682c <_svfprintf_r+0xdd4>
   16480:	adds	r3, #1
   16482:	adds	r4, #16
   16484:	cmp	r3, #7
   16486:	str	r4, [sp, #148]	; 0x94
   16488:	str	r3, [sp, #144]	; 0x90
   1648a:	str.w	sl, [r9]
   1648e:	str.w	r6, [r9, #4]
   16492:	ble.n	16474 <_svfprintf_r+0xa1c>
   16494:	add	r2, sp, #140	; 0x8c
   16496:	mov	r1, fp
   16498:	mov	r0, r7
   1649a:	bl	18be0 <__ssprint_r>
   1649e:	cmp	r0, #0
   164a0:	bne.w	15c4c <_svfprintf_r+0x1f4>
   164a4:	ldr	r4, [sp, #148]	; 0x94
   164a6:	ldr	r3, [sp, #144]	; 0x90
   164a8:	add.w	r9, sp, #192	; 0xc0
   164ac:	b.n	16478 <_svfprintf_r+0xa20>
   164ae:	ldr	r3, [sp, #32]
   164b0:	ldr	r2, [sp, #16]
   164b2:	subs	r7, r3, r2
   164b4:	cmp	r7, #0
   164b6:	ble.w	15eec <_svfprintf_r+0x494>
   164ba:	ldr	r2, [pc, #752]	; (167ac <_svfprintf_r+0xd54>)
   164bc:	ldr	r3, [sp, #144]	; 0x90
   164be:	str	r2, [sp, #44]	; 0x2c
   164c0:	cmp	r7, #16
   164c2:	ble.n	1651c <_svfprintf_r+0xac4>
   164c4:	mov	r2, r9
   164c6:	mov	r1, r4
   164c8:	mov	r9, r7
   164ca:	movs	r5, #16
   164cc:	mov	r7, r6
   164ce:	ldr	r4, [sp, #24]
   164d0:	ldr	r6, [sp, #20]
   164d2:	b.n	164e2 <_svfprintf_r+0xa8a>
   164d4:	sub.w	r9, r9, #16
   164d8:	cmp.w	r9, #16
   164dc:	add.w	r2, r2, #8
   164e0:	ble.n	16514 <_svfprintf_r+0xabc>
   164e2:	adds	r3, #1
   164e4:	adds	r1, #16
   164e6:	cmp	r3, #7
   164e8:	str	r1, [sp, #148]	; 0x94
   164ea:	str	r3, [sp, #144]	; 0x90
   164ec:	str.w	sl, [r2]
   164f0:	str	r5, [r2, #4]
   164f2:	ble.n	164d4 <_svfprintf_r+0xa7c>
   164f4:	add	r2, sp, #140	; 0x8c
   164f6:	mov	r1, r6
   164f8:	mov	r0, r4
   164fa:	bl	18be0 <__ssprint_r>
   164fe:	cmp	r0, #0
   16500:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16504:	sub.w	r9, r9, #16
   16508:	cmp.w	r9, #16
   1650c:	ldr	r1, [sp, #148]	; 0x94
   1650e:	ldr	r3, [sp, #144]	; 0x90
   16510:	add	r2, sp, #192	; 0xc0
   16512:	bgt.n	164e2 <_svfprintf_r+0xa8a>
   16514:	mov	r6, r7
   16516:	mov	r4, r1
   16518:	mov	r7, r9
   1651a:	mov	r9, r2
   1651c:	adds	r3, #1
   1651e:	ldr	r2, [sp, #44]	; 0x2c
   16520:	str	r3, [sp, #144]	; 0x90
   16522:	add	r4, r7
   16524:	cmp	r3, #7
   16526:	str	r4, [sp, #148]	; 0x94
   16528:	stmia.w	r9, {r2, r7}
   1652c:	bgt.w	169aa <_svfprintf_r+0xf52>
   16530:	add.w	r9, r9, #8
   16534:	b.n	15eec <_svfprintf_r+0x494>
   16536:	ldr	r3, [sp, #56]	; 0x38
   16538:	ldr	r5, [sp, #144]	; 0x90
   1653a:	cmp	r3, #1
   1653c:	ble.w	16954 <_svfprintf_r+0xefc>
   16540:	adds	r5, #1
   16542:	adds	r4, #1
   16544:	movs	r3, #1
   16546:	cmp	r5, #7
   16548:	str	r4, [sp, #148]	; 0x94
   1654a:	str	r5, [sp, #144]	; 0x90
   1654c:	str.w	r6, [r9]
   16550:	str.w	r3, [r9, #4]
   16554:	bgt.w	16976 <_svfprintf_r+0xf1e>
   16558:	add.w	r9, r9, #8
   1655c:	ldr	r2, [sp, #72]	; 0x48
   1655e:	ldr	r3, [sp, #76]	; 0x4c
   16560:	str.w	r3, [r9]
   16564:	adds	r5, #1
   16566:	add	r4, r2
   16568:	cmp	r5, #7
   1656a:	str	r4, [sp, #148]	; 0x94
   1656c:	str	r5, [sp, #144]	; 0x90
   1656e:	str.w	r2, [r9, #4]
   16572:	bgt.w	16990 <_svfprintf_r+0xf38>
   16576:	add.w	r9, r9, #8
   1657a:	movs	r3, #0
   1657c:	movs	r2, #0
   1657e:	ldrd	r0, r1, [sp, #64]	; 0x40
   16582:	bl	14200 <__aeabi_dcmpeq>
   16586:	ldr	r3, [sp, #56]	; 0x38
   16588:	cmp	r0, #0
   1658a:	bne.w	16714 <_svfprintf_r+0xcbc>
   1658e:	subs	r3, #1
   16590:	adds	r5, #1
   16592:	adds	r6, #1
   16594:	add	r4, r3
   16596:	cmp	r5, #7
   16598:	str	r5, [sp, #144]	; 0x90
   1659a:	str	r4, [sp, #148]	; 0x94
   1659c:	str.w	r6, [r9]
   165a0:	str.w	r3, [r9, #4]
   165a4:	bgt.w	16792 <_svfprintf_r+0xd3a>
   165a8:	add.w	r9, r9, #8
   165ac:	ldr	r2, [sp, #84]	; 0x54
   165ae:	str.w	r2, [r9, #4]
   165b2:	adds	r5, #1
   165b4:	add	r4, r2
   165b6:	add	r3, sp, #124	; 0x7c
   165b8:	cmp	r5, #7
   165ba:	str	r4, [sp, #148]	; 0x94
   165bc:	str	r5, [sp, #144]	; 0x90
   165be:	str.w	r3, [r9]
   165c2:	ble.w	15f80 <_svfprintf_r+0x528>
   165c6:	add	r2, sp, #140	; 0x8c
   165c8:	ldr	r1, [sp, #20]
   165ca:	ldr	r0, [sp, #24]
   165cc:	bl	18be0 <__ssprint_r>
   165d0:	cmp	r0, #0
   165d2:	bne.w	15c4c <_svfprintf_r+0x1f4>
   165d6:	ldr	r4, [sp, #148]	; 0x94
   165d8:	add.w	r9, sp, #192	; 0xc0
   165dc:	b.n	15f84 <_svfprintf_r+0x52c>
   165de:	add	r2, sp, #140	; 0x8c
   165e0:	ldr	r1, [sp, #20]
   165e2:	ldr	r0, [sp, #24]
   165e4:	bl	18be0 <__ssprint_r>
   165e8:	cmp	r0, #0
   165ea:	beq.w	16020 <_svfprintf_r+0x5c8>
   165ee:	b.w	15c4c <_svfprintf_r+0x1f4>
   165f2:	add	r2, sp, #140	; 0x8c
   165f4:	ldr	r1, [sp, #20]
   165f6:	ldr	r0, [sp, #24]
   165f8:	bl	18be0 <__ssprint_r>
   165fc:	cmp	r0, #0
   165fe:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16602:	ldr	r4, [sp, #148]	; 0x94
   16604:	add.w	r9, sp, #192	; 0xc0
   16608:	b.n	15f5e <_svfprintf_r+0x506>
   1660a:	add	r2, sp, #140	; 0x8c
   1660c:	ldr	r1, [sp, #20]
   1660e:	ldr	r0, [sp, #24]
   16610:	bl	18be0 <__ssprint_r>
   16614:	cmp	r0, #0
   16616:	bne.w	15c4c <_svfprintf_r+0x1f4>
   1661a:	ldr	r4, [sp, #148]	; 0x94
   1661c:	add.w	r9, sp, #192	; 0xc0
   16620:	b.n	15ec4 <_svfprintf_r+0x46c>
   16622:	add	r2, sp, #140	; 0x8c
   16624:	ldr	r1, [sp, #20]
   16626:	ldr	r0, [sp, #24]
   16628:	bl	18be0 <__ssprint_r>
   1662c:	cmp	r0, #0
   1662e:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16632:	ldr	r4, [sp, #148]	; 0x94
   16634:	add.w	r9, sp, #192	; 0xc0
   16638:	b.n	15ee4 <_svfprintf_r+0x48c>
   1663a:	cmp.w	fp, #0
   1663e:	strb.w	r7, [sp, #111]	; 0x6f
   16642:	blt.w	16c04 <_svfprintf_r+0x11ac>
   16646:	bic.w	r3, r2, #128	; 0x80
   1664a:	str	r3, [sp, #12]
   1664c:	orrs.w	r3, r4, r5
   16650:	bne.w	161fa <_svfprintf_r+0x7a2>
   16654:	cmp.w	fp, #0
   16658:	beq.w	16374 <_svfprintf_r+0x91c>
   1665c:	movs	r7, #0
   1665e:	b.n	163d0 <_svfprintf_r+0x978>
   16660:	ldr	r5, [sp, #116]	; 0x74
   16662:	cmp	r5, #0
   16664:	ble.w	16c0a <_svfprintf_r+0x11b2>
   16668:	ldr	r3, [sp, #60]	; 0x3c
   1666a:	ldr	r2, [sp, #56]	; 0x38
   1666c:	cmp	r3, r2
   1666e:	it	ge
   16670:	movge	r3, r2
   16672:	cmp	r3, #0
   16674:	mov	r5, r3
   16676:	ble.n	16694 <_svfprintf_r+0xc3c>
   16678:	ldr	r3, [sp, #144]	; 0x90
   1667a:	str.w	r6, [r9]
   1667e:	adds	r3, #1
   16680:	add	r4, r5
   16682:	cmp	r3, #7
   16684:	str	r4, [sp, #148]	; 0x94
   16686:	str.w	r5, [r9, #4]
   1668a:	str	r3, [sp, #144]	; 0x90
   1668c:	bgt.w	16de2 <_svfprintf_r+0x138a>
   16690:	add.w	r9, r9, #8
   16694:	ldr	r3, [sp, #60]	; 0x3c
   16696:	cmp	r5, #0
   16698:	it	ge
   1669a:	subge	r3, r3, r5
   1669c:	cmp	r3, #0
   1669e:	mov	r5, r3
   166a0:	ble.w	16894 <_svfprintf_r+0xe3c>
   166a4:	ldr	r2, [pc, #260]	; (167ac <_svfprintf_r+0xd54>)
   166a6:	ldr	r3, [sp, #144]	; 0x90
   166a8:	str	r2, [sp, #44]	; 0x2c
   166aa:	cmp	r5, #16
   166ac:	ble.w	16bb6 <_svfprintf_r+0x115e>
   166b0:	mov	r2, r4
   166b2:	movs	r7, #16
   166b4:	ldr.w	fp, [sp, #24]
   166b8:	ldr	r4, [sp, #20]
   166ba:	b.n	166c8 <_svfprintf_r+0xc70>
   166bc:	add.w	r9, r9, #8
   166c0:	subs	r5, #16
   166c2:	cmp	r5, #16
   166c4:	ble.w	16bb4 <_svfprintf_r+0x115c>
   166c8:	adds	r3, #1
   166ca:	adds	r2, #16
   166cc:	cmp	r3, #7
   166ce:	str	r2, [sp, #148]	; 0x94
   166d0:	str	r3, [sp, #144]	; 0x90
   166d2:	str.w	sl, [r9]
   166d6:	str.w	r7, [r9, #4]
   166da:	ble.n	166bc <_svfprintf_r+0xc64>
   166dc:	add	r2, sp, #140	; 0x8c
   166de:	mov	r1, r4
   166e0:	mov	r0, fp
   166e2:	bl	18be0 <__ssprint_r>
   166e6:	cmp	r0, #0
   166e8:	bne.w	15c4c <_svfprintf_r+0x1f4>
   166ec:	ldr	r2, [sp, #148]	; 0x94
   166ee:	ldr	r3, [sp, #144]	; 0x90
   166f0:	add.w	r9, sp, #192	; 0xc0
   166f4:	b.n	166c0 <_svfprintf_r+0xc68>
   166f6:	add	r2, sp, #140	; 0x8c
   166f8:	ldr	r1, [sp, #20]
   166fa:	ldr	r0, [sp, #24]
   166fc:	bl	18be0 <__ssprint_r>
   16700:	cmp	r0, #0
   16702:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16706:	ldrb.w	r7, [sp, #111]	; 0x6f
   1670a:	ldr	r4, [sp, #148]	; 0x94
   1670c:	add.w	r9, sp, #192	; 0xc0
   16710:	b.w	15ea4 <_svfprintf_r+0x44c>
   16714:	subs	r6, r3, #1
   16716:	cmp	r6, #0
   16718:	ble.w	165ac <_svfprintf_r+0xb54>
   1671c:	ldr	r3, [pc, #140]	; (167ac <_svfprintf_r+0xd54>)
   1671e:	str	r3, [sp, #44]	; 0x2c
   16720:	cmp	r6, #16
   16722:	ble.n	1677e <_svfprintf_r+0xd26>
   16724:	str.w	r8, [sp, #36]	; 0x24
   16728:	movs	r7, #16
   1672a:	mov	r8, r6
   1672c:	ldr.w	fp, [sp, #24]
   16730:	ldr	r6, [sp, #20]
   16732:	b.n	16742 <_svfprintf_r+0xcea>
   16734:	sub.w	r8, r8, #16
   16738:	cmp.w	r8, #16
   1673c:	add.w	r9, r9, #8
   16740:	ble.n	16778 <_svfprintf_r+0xd20>
   16742:	adds	r5, #1
   16744:	adds	r4, #16
   16746:	cmp	r5, #7
   16748:	str	r4, [sp, #148]	; 0x94
   1674a:	str	r5, [sp, #144]	; 0x90
   1674c:	str.w	sl, [r9]
   16750:	str.w	r7, [r9, #4]
   16754:	ble.n	16734 <_svfprintf_r+0xcdc>
   16756:	add	r2, sp, #140	; 0x8c
   16758:	mov	r1, r6
   1675a:	mov	r0, fp
   1675c:	bl	18be0 <__ssprint_r>
   16760:	cmp	r0, #0
   16762:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16766:	sub.w	r8, r8, #16
   1676a:	cmp.w	r8, #16
   1676e:	ldr	r4, [sp, #148]	; 0x94
   16770:	ldr	r5, [sp, #144]	; 0x90
   16772:	add.w	r9, sp, #192	; 0xc0
   16776:	bgt.n	16742 <_svfprintf_r+0xcea>
   16778:	mov	r6, r8
   1677a:	ldr.w	r8, [sp, #36]	; 0x24
   1677e:	ldr	r3, [sp, #44]	; 0x2c
   16780:	adds	r5, #1
   16782:	add	r4, r6
   16784:	cmp	r5, #7
   16786:	str	r4, [sp, #148]	; 0x94
   16788:	str	r5, [sp, #144]	; 0x90
   1678a:	stmia.w	r9, {r3, r6}
   1678e:	ble.w	165a8 <_svfprintf_r+0xb50>
   16792:	add	r2, sp, #140	; 0x8c
   16794:	ldr	r1, [sp, #20]
   16796:	ldr	r0, [sp, #24]
   16798:	bl	18be0 <__ssprint_r>
   1679c:	cmp	r0, #0
   1679e:	bne.w	15c4c <_svfprintf_r+0x1f4>
   167a2:	ldr	r4, [sp, #148]	; 0x94
   167a4:	ldr	r5, [sp, #144]	; 0x90
   167a6:	add.w	r9, sp, #192	; 0xc0
   167aa:	b.n	165ac <_svfprintf_r+0xb54>
   167ac:	.word	0x00019acc
   167b0:	ldr	r1, [sp, #12]
   167b2:	ands.w	r2, r1, #16
   167b6:	beq.w	16b60 <_svfprintf_r+0x1108>
   167ba:	ldr	r0, [sp, #40]	; 0x28
   167bc:	strb.w	r3, [sp, #111]	; 0x6f
   167c0:	cmp.w	fp, #0
   167c4:	ldr	r4, [r0, #0]
   167c6:	add.w	r7, r0, #4
   167ca:	mov.w	r5, #0
   167ce:	blt.n	1681e <_svfprintf_r+0xdc6>
   167d0:	mov	r2, r1
   167d2:	bic.w	r2, r2, #128	; 0x80
   167d6:	str	r2, [sp, #12]
   167d8:	orrs.w	r2, r4, r5
   167dc:	str	r7, [sp, #40]	; 0x28
   167de:	mov	r7, r3
   167e0:	bne.w	15db4 <_svfprintf_r+0x35c>
   167e4:	b.n	16184 <_svfprintf_r+0x72c>
   167e6:	ldr	r3, [sp, #12]
   167e8:	lsls	r0, r3, #27
   167ea:	bmi.n	16842 <_svfprintf_r+0xdea>
   167ec:	ldr	r3, [sp, #12]
   167ee:	lsls	r1, r3, #25
   167f0:	bpl.n	16842 <_svfprintf_r+0xdea>
   167f2:	ldr	r1, [sp, #40]	; 0x28
   167f4:	ldrsh.w	r4, [r1]
   167f8:	adds	r1, #4
   167fa:	asrs	r5, r4, #31
   167fc:	mov	r2, r4
   167fe:	mov	r3, r5
   16800:	str	r1, [sp, #40]	; 0x28
   16802:	b.w	15d8e <_svfprintf_r+0x336>
   16806:	ldr	r1, [sp, #40]	; 0x28
   16808:	strb.w	r3, [sp, #111]	; 0x6f
   1680c:	cmp.w	fp, #0
   16810:	ldr	r4, [r1, #0]
   16812:	add.w	r7, r1, #4
   16816:	mov.w	r5, #0
   1681a:	bge.w	16cb6 <_svfprintf_r+0x125e>
   1681e:	str	r7, [sp, #40]	; 0x28
   16820:	mov	r7, r3
   16822:	orrs.w	r3, r4, r5
   16826:	bne.w	15db4 <_svfprintf_r+0x35c>
   1682a:	b.n	1618e <_svfprintf_r+0x736>
   1682c:	adds	r3, #1
   1682e:	ldr	r2, [sp, #44]	; 0x2c
   16830:	str	r3, [sp, #144]	; 0x90
   16832:	add	r4, r5
   16834:	cmp	r3, #7
   16836:	str	r4, [sp, #148]	; 0x94
   16838:	stmia.w	r9, {r2, r5}
   1683c:	ble.w	15f80 <_svfprintf_r+0x528>
   16840:	b.n	165c6 <_svfprintf_r+0xb6e>
   16842:	ldr	r2, [sp, #40]	; 0x28
   16844:	ldr	r4, [r2, #0]
   16846:	mov	r3, r2
   16848:	adds	r3, #4
   1684a:	asrs	r5, r4, #31
   1684c:	mov	r2, r4
   1684e:	str	r3, [sp, #40]	; 0x28
   16850:	cmp	r2, #0
   16852:	mov	r3, r5
   16854:	sbcs.w	r3, r3, #0
   16858:	bge.w	15d98 <_svfprintf_r+0x340>
   1685c:	negs	r4, r4
   1685e:	mov.w	r7, #45	; 0x2d
   16862:	sbc.w	r5, r5, r5, lsl #1
   16866:	cmp.w	fp, #0
   1686a:	strb.w	r7, [sp, #111]	; 0x6f
   1686e:	blt.w	15db4 <_svfprintf_r+0x35c>
   16872:	ldr	r3, [sp, #12]
   16874:	bic.w	r3, r3, #128	; 0x80
   16878:	str	r3, [sp, #12]
   1687a:	b.w	15db4 <_svfprintf_r+0x35c>
   1687e:	add	r2, sp, #140	; 0x8c
   16880:	ldr	r1, [sp, #20]
   16882:	ldr	r0, [sp, #24]
   16884:	bl	18be0 <__ssprint_r>
   16888:	cmp	r0, #0
   1688a:	bne.w	15c4c <_svfprintf_r+0x1f4>
   1688e:	ldr	r4, [sp, #148]	; 0x94
   16890:	add.w	r9, sp, #192	; 0xc0
   16894:	ldr	r2, [sp, #60]	; 0x3c
   16896:	ldr	r3, [sp, #116]	; 0x74
   16898:	add	r2, r6
   1689a:	mov	r7, r2
   1689c:	ldr	r2, [sp, #56]	; 0x38
   1689e:	cmp	r3, r2
   168a0:	blt.n	16932 <_svfprintf_r+0xeda>
   168a2:	ldr	r2, [sp, #12]
   168a4:	lsls	r5, r2, #31
   168a6:	bmi.n	16932 <_svfprintf_r+0xeda>
   168a8:	ldr	r1, [sp, #56]	; 0x38
   168aa:	add	r6, r1
   168ac:	subs	r5, r6, r7
   168ae:	subs	r3, r1, r3
   168b0:	cmp	r5, r3
   168b2:	it	ge
   168b4:	movge	r5, r3
   168b6:	cmp	r5, #0
   168b8:	mov	r6, r5
   168ba:	ble.n	168d8 <_svfprintf_r+0xe80>
   168bc:	ldr	r2, [sp, #144]	; 0x90
   168be:	str.w	r7, [r9]
   168c2:	adds	r2, #1
   168c4:	add	r4, r5
   168c6:	cmp	r2, #7
   168c8:	str	r4, [sp, #148]	; 0x94
   168ca:	str.w	r5, [r9, #4]
   168ce:	str	r2, [sp, #144]	; 0x90
   168d0:	bgt.w	16ed0 <_svfprintf_r+0x1478>
   168d4:	add.w	r9, r9, #8
   168d8:	cmp	r6, #0
   168da:	ite	ge
   168dc:	subge	r5, r3, r6
   168de:	movlt	r5, r3
   168e0:	cmp	r5, #0
   168e2:	ble.w	15f84 <_svfprintf_r+0x52c>
   168e6:	ldr	r2, [pc, #744]	; (16bd0 <_svfprintf_r+0x1178>)
   168e8:	ldr	r3, [sp, #144]	; 0x90
   168ea:	str	r2, [sp, #44]	; 0x2c
   168ec:	cmp	r5, #16
   168ee:	ble.n	1682c <_svfprintf_r+0xdd4>
   168f0:	movs	r6, #16
   168f2:	ldr	r7, [sp, #24]
   168f4:	ldr.w	fp, [sp, #20]
   168f8:	b.n	16904 <_svfprintf_r+0xeac>
   168fa:	add.w	r9, r9, #8
   168fe:	subs	r5, #16
   16900:	cmp	r5, #16
   16902:	ble.n	1682c <_svfprintf_r+0xdd4>
   16904:	adds	r3, #1
   16906:	adds	r4, #16
   16908:	cmp	r3, #7
   1690a:	str	r4, [sp, #148]	; 0x94
   1690c:	str	r3, [sp, #144]	; 0x90
   1690e:	str.w	sl, [r9]
   16912:	str.w	r6, [r9, #4]
   16916:	ble.n	168fa <_svfprintf_r+0xea2>
   16918:	add	r2, sp, #140	; 0x8c
   1691a:	mov	r1, fp
   1691c:	mov	r0, r7
   1691e:	bl	18be0 <__ssprint_r>
   16922:	cmp	r0, #0
   16924:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16928:	ldr	r4, [sp, #148]	; 0x94
   1692a:	ldr	r3, [sp, #144]	; 0x90
   1692c:	add.w	r9, sp, #192	; 0xc0
   16930:	b.n	168fe <_svfprintf_r+0xea6>
   16932:	ldr	r2, [sp, #144]	; 0x90
   16934:	ldr	r0, [sp, #72]	; 0x48
   16936:	ldr	r1, [sp, #76]	; 0x4c
   16938:	str.w	r1, [r9]
   1693c:	adds	r2, #1
   1693e:	add	r4, r0
   16940:	cmp	r2, #7
   16942:	str	r4, [sp, #148]	; 0x94
   16944:	str.w	r0, [r9, #4]
   16948:	str	r2, [sp, #144]	; 0x90
   1694a:	bgt.w	16eb6 <_svfprintf_r+0x145e>
   1694e:	add.w	r9, r9, #8
   16952:	b.n	168a8 <_svfprintf_r+0xe50>
   16954:	ldr	r3, [sp, #12]
   16956:	lsls	r0, r3, #31
   16958:	bmi.w	16540 <_svfprintf_r+0xae8>
   1695c:	adds	r5, #1
   1695e:	adds	r4, #1
   16960:	movs	r3, #1
   16962:	cmp	r5, #7
   16964:	str	r4, [sp, #148]	; 0x94
   16966:	str	r5, [sp, #144]	; 0x90
   16968:	str.w	r6, [r9]
   1696c:	str.w	r3, [r9, #4]
   16970:	ble.w	165a8 <_svfprintf_r+0xb50>
   16974:	b.n	16792 <_svfprintf_r+0xd3a>
   16976:	add	r2, sp, #140	; 0x8c
   16978:	ldr	r1, [sp, #20]
   1697a:	ldr	r0, [sp, #24]
   1697c:	bl	18be0 <__ssprint_r>
   16980:	cmp	r0, #0
   16982:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16986:	ldr	r4, [sp, #148]	; 0x94
   16988:	ldr	r5, [sp, #144]	; 0x90
   1698a:	add.w	r9, sp, #192	; 0xc0
   1698e:	b.n	1655c <_svfprintf_r+0xb04>
   16990:	add	r2, sp, #140	; 0x8c
   16992:	ldr	r1, [sp, #20]
   16994:	ldr	r0, [sp, #24]
   16996:	bl	18be0 <__ssprint_r>
   1699a:	cmp	r0, #0
   1699c:	bne.w	15c4c <_svfprintf_r+0x1f4>
   169a0:	ldr	r4, [sp, #148]	; 0x94
   169a2:	ldr	r5, [sp, #144]	; 0x90
   169a4:	add.w	r9, sp, #192	; 0xc0
   169a8:	b.n	1657a <_svfprintf_r+0xb22>
   169aa:	add	r2, sp, #140	; 0x8c
   169ac:	ldr	r1, [sp, #20]
   169ae:	ldr	r0, [sp, #24]
   169b0:	bl	18be0 <__ssprint_r>
   169b4:	cmp	r0, #0
   169b6:	bne.w	15c4c <_svfprintf_r+0x1f4>
   169ba:	ldr	r4, [sp, #148]	; 0x94
   169bc:	add.w	r9, sp, #192	; 0xc0
   169c0:	b.w	15eec <_svfprintf_r+0x494>
   169c4:	ldr	r1, [sp, #12]
   169c6:	ands.w	r3, r1, #64	; 0x40
   169ca:	beq.w	16b40 <_svfprintf_r+0x10e8>
   169ce:	ldr	r0, [sp, #40]	; 0x28
   169d0:	strb.w	r2, [sp, #111]	; 0x6f
   169d4:	mov	r3, r0
   169d6:	cmp.w	fp, #0
   169da:	add.w	r3, r3, #4
   169de:	ldrh	r4, [r0, #0]
   169e0:	mov.w	r5, #0
   169e4:	blt.w	16d68 <_svfprintf_r+0x1310>
   169e8:	bic.w	r1, r1, #128	; 0x80
   169ec:	str	r1, [sp, #12]
   169ee:	orrs.w	r1, r4, r5
   169f2:	str	r3, [sp, #40]	; 0x28
   169f4:	beq.w	163ac <_svfprintf_r+0x954>
   169f8:	mov	r7, r2
   169fa:	b.w	15ca4 <_svfprintf_r+0x24c>
   169fe:	ldr	r3, [sp, #12]
   16a00:	lsls	r7, r3, #27
   16a02:	bmi.n	16a1c <_svfprintf_r+0xfc4>
   16a04:	ldr	r3, [sp, #12]
   16a06:	lsls	r6, r3, #25
   16a08:	bpl.n	16a1c <_svfprintf_r+0xfc4>
   16a0a:	ldr	r2, [sp, #40]	; 0x28
   16a0c:	ldr	r3, [r2, #0]
   16a0e:	adds	r2, #4
   16a10:	str	r2, [sp, #40]	; 0x28
   16a12:	ldrh.w	r2, [sp, #28]
   16a16:	strh	r2, [r3, #0]
   16a18:	b.w	15aa6 <_svfprintf_r+0x4e>
   16a1c:	ldr	r2, [sp, #40]	; 0x28
   16a1e:	ldr	r3, [r2, #0]
   16a20:	adds	r2, #4
   16a22:	str	r2, [sp, #40]	; 0x28
   16a24:	ldr	r2, [sp, #28]
   16a26:	str	r2, [r3, #0]
   16a28:	b.w	15aa6 <_svfprintf_r+0x4e>
   16a2c:	ldrd	r0, r1, [sp, #64]	; 0x40
   16a30:	mov	r2, r0
   16a32:	mov	r3, r1
   16a34:	bl	14264 <__aeabi_dcmpun>
   16a38:	cmp	r0, #0
   16a3a:	bne.w	17038 <_svfprintf_r+0x15e0>
   16a3e:	ldr	r3, [sp, #52]	; 0x34
   16a40:	cmp.w	fp, #4294967295
   16a44:	bic.w	r7, r3, #32
   16a48:	beq.w	16f1a <_svfprintf_r+0x14c2>
   16a4c:	cmp	r7, #71	; 0x47
   16a4e:	beq.w	16d56 <_svfprintf_r+0x12fe>
   16a52:	ldr	r3, [sp, #68]	; 0x44
   16a54:	ldr	r2, [sp, #12]
   16a56:	cmp	r3, #0
   16a58:	orr.w	r2, r2, #256	; 0x100
   16a5c:	str	r2, [sp, #44]	; 0x2c
   16a5e:	blt.w	16f52 <_svfprintf_r+0x14fa>
   16a62:	vldr	d7, [sp, #64]	; 0x40
   16a66:	vstr	d7, [sp, #96]	; 0x60
   16a6a:	movs	r3, #0
   16a6c:	str	r3, [sp, #16]
   16a6e:	ldr	r3, [sp, #52]	; 0x34
   16a70:	cmp	r3, #102	; 0x66
   16a72:	beq.w	16f20 <_svfprintf_r+0x14c8>
   16a76:	cmp	r3, #70	; 0x46
   16a78:	beq.w	16d06 <_svfprintf_r+0x12ae>
   16a7c:	cmp	r7, #69	; 0x45
   16a7e:	ite	eq
   16a80:	addeq.w	r5, fp, #1
   16a84:	movne	r5, fp
   16a86:	add	r2, sp, #132	; 0x84
   16a88:	add	r3, sp, #120	; 0x78
   16a8a:	str	r2, [sp, #4]
   16a8c:	str	r3, [sp, #0]
   16a8e:	mov	r2, r5
   16a90:	add	r3, sp, #116	; 0x74
   16a92:	movs	r1, #2
   16a94:	vldr	d0, [sp, #96]	; 0x60
   16a98:	ldr	r0, [sp, #24]
   16a9a:	bl	173d8 <_dtoa_r>
   16a9e:	ldr	r3, [sp, #52]	; 0x34
   16aa0:	cmp	r3, #103	; 0x67
   16aa2:	mov	r6, r0
   16aa4:	bne.w	16f7e <_svfprintf_r+0x1526>
   16aa8:	ldr	r3, [sp, #12]
   16aaa:	lsls	r2, r3, #31
   16aac:	bpl.w	17022 <_svfprintf_r+0x15ca>
   16ab0:	adds	r4, r6, r5
   16ab2:	movs	r2, #0
   16ab4:	movs	r3, #0
   16ab6:	ldrd	r0, r1, [sp, #96]	; 0x60
   16aba:	bl	14200 <__aeabi_dcmpeq>
   16abe:	cmp	r0, #0
   16ac0:	bne.w	16dde <_svfprintf_r+0x1386>
   16ac4:	ldr	r3, [sp, #132]	; 0x84
   16ac6:	cmp	r4, r3
   16ac8:	bls.n	16ad8 <_svfprintf_r+0x1080>
   16aca:	movs	r1, #48	; 0x30
   16acc:	adds	r2, r3, #1
   16ace:	str	r2, [sp, #132]	; 0x84
   16ad0:	strb	r1, [r3, #0]
   16ad2:	ldr	r3, [sp, #132]	; 0x84
   16ad4:	cmp	r4, r3
   16ad6:	bhi.n	16acc <_svfprintf_r+0x1074>
   16ad8:	subs	r3, r3, r6
   16ada:	cmp	r7, #71	; 0x47
   16adc:	str	r3, [sp, #56]	; 0x38
   16ade:	beq.w	16dd0 <_svfprintf_r+0x1378>
   16ae2:	ldr	r3, [sp, #52]	; 0x34
   16ae4:	cmp	r3, #101	; 0x65
   16ae6:	ble.w	16f9c <_svfprintf_r+0x1544>
   16aea:	ldr	r3, [sp, #52]	; 0x34
   16aec:	cmp	r3, #102	; 0x66
   16aee:	ldr	r3, [sp, #116]	; 0x74
   16af0:	str	r3, [sp, #60]	; 0x3c
   16af2:	beq.w	16fb6 <_svfprintf_r+0x155e>
   16af6:	ldr	r2, [sp, #60]	; 0x3c
   16af8:	ldr	r1, [sp, #56]	; 0x38
   16afa:	cmp	r2, r1
   16afc:	blt.w	16f64 <_svfprintf_r+0x150c>
   16b00:	ldr	r3, [sp, #12]
   16b02:	lsls	r1, r3, #31
   16b04:	bmi.w	17026 <_svfprintf_r+0x15ce>
   16b08:	bic.w	r3, r2, r2, asr #31
   16b0c:	str	r2, [sp, #36]	; 0x24
   16b0e:	movs	r2, #103	; 0x67
   16b10:	str	r2, [sp, #52]	; 0x34
   16b12:	ldr	r2, [sp, #16]
   16b14:	cmp	r2, #0
   16b16:	bne.w	16d78 <_svfprintf_r+0x1320>
   16b1a:	str	r3, [sp, #16]
   16b1c:	ldr	r3, [sp, #44]	; 0x2c
   16b1e:	str	r3, [sp, #12]
   16b20:	mov	fp, r2
   16b22:	ldrb.w	r7, [sp, #111]	; 0x6f
   16b26:	b.w	15dfc <_svfprintf_r+0x3a4>
   16b2a:	bic.w	r7, r7, #7
   16b2e:	vldr	d7, [r7]
   16b32:	add.w	r3, r7, #8
   16b36:	vstr	d7, [sp, #64]	; 0x40
   16b3a:	str	r3, [sp, #40]	; 0x28
   16b3c:	b.w	16054 <_svfprintf_r+0x5fc>
   16b40:	ldr	r1, [sp, #40]	; 0x28
   16b42:	strb.w	r3, [sp, #111]	; 0x6f
   16b46:	cmp.w	fp, #0
   16b4a:	ldr	r4, [r1, #0]
   16b4c:	add.w	r7, r1, #4
   16b50:	mov.w	r5, #0
   16b54:	bge.w	16cb0 <_svfprintf_r+0x1258>
   16b58:	str	r7, [sp, #40]	; 0x28
   16b5a:	movs	r7, #0
   16b5c:	b.w	15ca4 <_svfprintf_r+0x24c>
   16b60:	ldr	r1, [sp, #12]
   16b62:	ands.w	r3, r1, #64	; 0x40
   16b66:	beq.w	16806 <_svfprintf_r+0xdae>
   16b6a:	ldr	r0, [sp, #40]	; 0x28
   16b6c:	strb.w	r2, [sp, #111]	; 0x6f
   16b70:	mov	r3, r0
   16b72:	cmp.w	fp, #0
   16b76:	add.w	r3, r3, #4
   16b7a:	ldrh	r4, [r0, #0]
   16b7c:	mov.w	r5, #0
   16b80:	blt.w	16d62 <_svfprintf_r+0x130a>
   16b84:	bic.w	r1, r1, #128	; 0x80
   16b88:	str	r1, [sp, #12]
   16b8a:	orrs.w	r1, r4, r5
   16b8e:	str	r3, [sp, #40]	; 0x28
   16b90:	mov	r7, r2
   16b92:	bne.w	15db4 <_svfprintf_r+0x35c>
   16b96:	b.w	16184 <_svfprintf_r+0x72c>
   16b9a:	ldr	r3, [sp, #12]
   16b9c:	ldr	r2, [sp, #40]	; 0x28
   16b9e:	tst.w	r3, #64	; 0x40
   16ba2:	mov	r3, r2
   16ba4:	beq.w	16d6c <_svfprintf_r+0x1314>
   16ba8:	adds	r3, #4
   16baa:	ldrh	r4, [r2, #0]
   16bac:	str	r3, [sp, #40]	; 0x28
   16bae:	movs	r5, #0
   16bb0:	b.w	161be <_svfprintf_r+0x766>
   16bb4:	mov	r4, r2
   16bb6:	adds	r3, #1
   16bb8:	ldr	r2, [sp, #44]	; 0x2c
   16bba:	str	r3, [sp, #144]	; 0x90
   16bbc:	add	r4, r5
   16bbe:	cmp	r3, #7
   16bc0:	str	r4, [sp, #148]	; 0x94
   16bc2:	stmia.w	r9, {r2, r5}
   16bc6:	bgt.w	1687e <_svfprintf_r+0xe26>
   16bca:	add.w	r9, r9, #8
   16bce:	b.n	16894 <_svfprintf_r+0xe3c>
   16bd0:	.word	0x00019acc
   16bd4:	movs	r7, #0
   16bd6:	cmp	fp, r7
   16bd8:	strb.w	r7, [sp, #111]	; 0x6f
   16bdc:	blt.w	163d0 <_svfprintf_r+0x978>
   16be0:	ldr	r3, [sp, #12]
   16be2:	bic.w	r3, r3, #128	; 0x80
   16be6:	str	r3, [sp, #12]
   16be8:	b.w	1636c <_svfprintf_r+0x914>
   16bec:	add	r2, sp, #140	; 0x8c
   16bee:	ldr	r1, [sp, #20]
   16bf0:	ldr	r0, [sp, #24]
   16bf2:	bl	18be0 <__ssprint_r>
   16bf6:	cmp	r0, #0
   16bf8:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16bfc:	ldr	r4, [sp, #148]	; 0x94
   16bfe:	add.w	r9, sp, #192	; 0xc0
   16c02:	b.n	16414 <_svfprintf_r+0x9bc>
   16c04:	ldr	r7, [sp, #40]	; 0x28
   16c06:	b.w	163c2 <_svfprintf_r+0x96a>
   16c0a:	ldr	r3, [sp, #144]	; 0x90
   16c0c:	ldr	r2, [pc, #736]	; (16ef0 <_svfprintf_r+0x1498>)
   16c0e:	str.w	r2, [r9]
   16c12:	adds	r3, #1
   16c14:	adds	r4, #1
   16c16:	movs	r2, #1
   16c18:	cmp	r3, #7
   16c1a:	str	r4, [sp, #148]	; 0x94
   16c1c:	str	r3, [sp, #144]	; 0x90
   16c1e:	str.w	r2, [r9, #4]
   16c22:	bgt.w	16d3c <_svfprintf_r+0x12e4>
   16c26:	add.w	r9, r9, #8
   16c2a:	cbnz	r5, 16c38 <_svfprintf_r+0x11e0>
   16c2c:	ldr	r3, [sp, #56]	; 0x38
   16c2e:	cbnz	r3, 16c38 <_svfprintf_r+0x11e0>
   16c30:	ldr	r3, [sp, #12]
   16c32:	lsls	r7, r3, #31
   16c34:	bpl.w	15f84 <_svfprintf_r+0x52c>
   16c38:	ldr	r3, [sp, #144]	; 0x90
   16c3a:	ldr	r1, [sp, #72]	; 0x48
   16c3c:	ldr	r2, [sp, #76]	; 0x4c
   16c3e:	str.w	r2, [r9]
   16c42:	adds	r3, #1
   16c44:	add	r4, r1
   16c46:	cmp	r3, #7
   16c48:	str	r4, [sp, #148]	; 0x94
   16c4a:	str.w	r1, [r9, #4]
   16c4e:	str	r3, [sp, #144]	; 0x90
   16c50:	bgt.w	16fee <_svfprintf_r+0x1596>
   16c54:	add.w	r9, r9, #8
   16c58:	negs	r5, r5
   16c5a:	cmp	r5, #0
   16c5c:	ble.w	16db4 <_svfprintf_r+0x135c>
   16c60:	ldr	r2, [pc, #656]	; (16ef4 <_svfprintf_r+0x149c>)
   16c62:	str	r2, [sp, #44]	; 0x2c
   16c64:	cmp	r5, #16
   16c66:	ble.w	16dfc <_svfprintf_r+0x13a4>
   16c6a:	mov	r2, r4
   16c6c:	movs	r7, #16
   16c6e:	ldr.w	fp, [sp, #24]
   16c72:	ldr	r4, [sp, #20]
   16c74:	b.n	16c82 <_svfprintf_r+0x122a>
   16c76:	add.w	r9, r9, #8
   16c7a:	subs	r5, #16
   16c7c:	cmp	r5, #16
   16c7e:	ble.w	16dfa <_svfprintf_r+0x13a2>
   16c82:	adds	r3, #1
   16c84:	adds	r2, #16
   16c86:	cmp	r3, #7
   16c88:	str	r2, [sp, #148]	; 0x94
   16c8a:	str	r3, [sp, #144]	; 0x90
   16c8c:	str.w	sl, [r9]
   16c90:	str.w	r7, [r9, #4]
   16c94:	ble.n	16c76 <_svfprintf_r+0x121e>
   16c96:	add	r2, sp, #140	; 0x8c
   16c98:	mov	r1, r4
   16c9a:	mov	r0, fp
   16c9c:	bl	18be0 <__ssprint_r>
   16ca0:	cmp	r0, #0
   16ca2:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16ca6:	ldr	r2, [sp, #148]	; 0x94
   16ca8:	ldr	r3, [sp, #144]	; 0x90
   16caa:	add.w	r9, sp, #192	; 0xc0
   16cae:	b.n	16c7a <_svfprintf_r+0x1222>
   16cb0:	ldr	r2, [sp, #12]
   16cb2:	b.w	16128 <_svfprintf_r+0x6d0>
   16cb6:	ldr	r2, [sp, #12]
   16cb8:	b.n	167d2 <_svfprintf_r+0xd7a>
   16cba:	ldr	r3, [sp, #12]
   16cbc:	orr.w	r3, r3, #32
   16cc0:	str	r3, [sp, #12]
   16cc2:	add.w	r8, r8, #1
   16cc6:	ldrb.w	r3, [r8]
   16cca:	b.w	15b0c <_svfprintf_r+0xb4>
   16cce:	add	r2, sp, #140	; 0x8c
   16cd0:	ldr	r1, [sp, #20]
   16cd2:	ldr	r0, [sp, #24]
   16cd4:	bl	18be0 <__ssprint_r>
   16cd8:	cmp	r0, #0
   16cda:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16cde:	ldr	r4, [sp, #148]	; 0x94
   16ce0:	add.w	r9, sp, #192	; 0xc0
   16ce4:	b.w	16444 <_svfprintf_r+0x9ec>
   16ce8:	movs	r1, #64	; 0x40
   16cea:	ldr	r0, [sp, #24]
   16cec:	bl	146cc <_malloc_r>
   16cf0:	ldr	r2, [sp, #20]
   16cf2:	str	r0, [r2, #0]
   16cf4:	str	r0, [r2, #16]
   16cf6:	cmp	r0, #0
   16cf8:	beq.w	170e2 <_svfprintf_r+0x168a>
   16cfc:	ldr	r2, [sp, #20]
   16cfe:	movs	r3, #64	; 0x40
   16d00:	str	r3, [r2, #20]
   16d02:	b.w	15a86 <_svfprintf_r+0x2e>
   16d06:	add	r2, sp, #132	; 0x84
   16d08:	add	r3, sp, #120	; 0x78
   16d0a:	str	r2, [sp, #4]
   16d0c:	str	r3, [sp, #0]
   16d0e:	mov	r2, fp
   16d10:	add	r3, sp, #116	; 0x74
   16d12:	movs	r1, #3
   16d14:	vldr	d0, [sp, #96]	; 0x60
   16d18:	ldr	r0, [sp, #24]
   16d1a:	bl	173d8 <_dtoa_r>
   16d1e:	mov	r5, fp
   16d20:	mov	r6, r0
   16d22:	ldr	r3, [sp, #52]	; 0x34
   16d24:	cmp	r3, #70	; 0x46
   16d26:	add.w	r4, r6, r5
   16d2a:	bne.w	16ab2 <_svfprintf_r+0x105a>
   16d2e:	ldrb	r3, [r6, #0]
   16d30:	cmp	r3, #48	; 0x30
   16d32:	beq.w	17044 <_svfprintf_r+0x15ec>
   16d36:	ldr	r5, [sp, #116]	; 0x74
   16d38:	add	r4, r5
   16d3a:	b.n	16ab2 <_svfprintf_r+0x105a>
   16d3c:	add	r2, sp, #140	; 0x8c
   16d3e:	ldr	r1, [sp, #20]
   16d40:	ldr	r0, [sp, #24]
   16d42:	bl	18be0 <__ssprint_r>
   16d46:	cmp	r0, #0
   16d48:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16d4c:	ldr	r5, [sp, #116]	; 0x74
   16d4e:	ldr	r4, [sp, #148]	; 0x94
   16d50:	add.w	r9, sp, #192	; 0xc0
   16d54:	b.n	16c2a <_svfprintf_r+0x11d2>
   16d56:	cmp.w	fp, #0
   16d5a:	it	eq
   16d5c:	moveq.w	fp, #1
   16d60:	b.n	16a52 <_svfprintf_r+0xffa>
   16d62:	str	r3, [sp, #40]	; 0x28
   16d64:	mov	r7, r2
   16d66:	b.n	16822 <_svfprintf_r+0xdca>
   16d68:	str	r3, [sp, #40]	; 0x28
   16d6a:	b.n	16b5a <_svfprintf_r+0x1102>
   16d6c:	adds	r3, #4
   16d6e:	ldr	r4, [r2, #0]
   16d70:	str	r3, [sp, #40]	; 0x28
   16d72:	movs	r5, #0
   16d74:	b.w	161be <_svfprintf_r+0x766>
   16d78:	movs	r7, #45	; 0x2d
   16d7a:	str	r3, [sp, #16]
   16d7c:	ldr	r3, [sp, #44]	; 0x2c
   16d7e:	str	r3, [sp, #12]
   16d80:	strb.w	r7, [sp, #111]	; 0x6f
   16d84:	mov.w	fp, #0
   16d88:	b.w	15dfe <_svfprintf_r+0x3a6>
   16d8c:	mov	r0, r6
   16d8e:	bl	15880 <strlen>
   16d92:	mov	fp, r4
   16d94:	mov	r3, r0
   16d96:	str	r0, [sp, #36]	; 0x24
   16d98:	b.w	162e0 <_svfprintf_r+0x888>
   16d9c:	add	r2, sp, #140	; 0x8c
   16d9e:	ldr	r1, [sp, #20]
   16da0:	ldr	r0, [sp, #24]
   16da2:	bl	18be0 <__ssprint_r>
   16da6:	cmp	r0, #0
   16da8:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16dac:	ldr	r4, [sp, #148]	; 0x94
   16dae:	ldr	r3, [sp, #144]	; 0x90
   16db0:	add.w	r9, sp, #192	; 0xc0
   16db4:	ldr	r1, [sp, #56]	; 0x38
   16db6:	str.w	r6, [r9]
   16dba:	adds	r3, #1
   16dbc:	add	r4, r1
   16dbe:	cmp	r3, #7
   16dc0:	str	r4, [sp, #148]	; 0x94
   16dc2:	str	r3, [sp, #144]	; 0x90
   16dc4:	str.w	r1, [r9, #4]
   16dc8:	ble.w	15f80 <_svfprintf_r+0x528>
   16dcc:	b.w	165c6 <_svfprintf_r+0xb6e>
   16dd0:	ldr	r3, [sp, #116]	; 0x74
   16dd2:	adds	r5, r3, #3
   16dd4:	blt.n	16e14 <_svfprintf_r+0x13bc>
   16dd6:	cmp	fp, r3
   16dd8:	blt.n	16e14 <_svfprintf_r+0x13bc>
   16dda:	str	r3, [sp, #60]	; 0x3c
   16ddc:	b.n	16af6 <_svfprintf_r+0x109e>
   16dde:	mov	r3, r4
   16de0:	b.n	16ad8 <_svfprintf_r+0x1080>
   16de2:	add	r2, sp, #140	; 0x8c
   16de4:	ldr	r1, [sp, #20]
   16de6:	ldr	r0, [sp, #24]
   16de8:	bl	18be0 <__ssprint_r>
   16dec:	cmp	r0, #0
   16dee:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16df2:	ldr	r4, [sp, #148]	; 0x94
   16df4:	add.w	r9, sp, #192	; 0xc0
   16df8:	b.n	16694 <_svfprintf_r+0xc3c>
   16dfa:	mov	r4, r2
   16dfc:	adds	r3, #1
   16dfe:	ldr	r2, [sp, #44]	; 0x2c
   16e00:	str	r3, [sp, #144]	; 0x90
   16e02:	add	r4, r5
   16e04:	cmp	r3, #7
   16e06:	str	r4, [sp, #148]	; 0x94
   16e08:	stmia.w	r9, {r2, r5}
   16e0c:	bgt.n	16d9c <_svfprintf_r+0x1344>
   16e0e:	add.w	r9, r9, #8
   16e12:	b.n	16db4 <_svfprintf_r+0x135c>
   16e14:	ldr	r2, [sp, #52]	; 0x34
   16e16:	subs	r2, #2
   16e18:	str	r2, [sp, #52]	; 0x34
   16e1a:	subs	r3, #1
   16e1c:	cmp	r3, #0
   16e1e:	ldrb.w	r2, [sp, #52]	; 0x34
   16e22:	str	r3, [sp, #116]	; 0x74
   16e24:	it	lt
   16e26:	neglt	r3, r3
   16e28:	strb.w	r2, [sp, #124]	; 0x7c
   16e2c:	ite	lt
   16e2e:	movlt	r2, #45	; 0x2d
   16e30:	movge	r2, #43	; 0x2b
   16e32:	cmp	r3, #9
   16e34:	strb.w	r2, [sp, #125]	; 0x7d
   16e38:	ble.w	17012 <_svfprintf_r+0x15ba>
   16e3c:	add.w	r0, sp, #139	; 0x8b
   16e40:	mov	r4, r0
   16e42:	ldr	r2, [pc, #180]	; (16ef8 <_svfprintf_r+0x14a0>)
   16e44:	smull	r2, r1, r2, r3
   16e48:	asrs	r2, r3, #31
   16e4a:	rsb	r2, r2, r1, asr #2
   16e4e:	add.w	r1, r2, r2, lsl #2
   16e52:	sub.w	r3, r3, r1, lsl #1
   16e56:	add.w	r1, r3, #48	; 0x30
   16e5a:	cmp	r2, #9
   16e5c:	mov	r3, r2
   16e5e:	strb.w	r1, [r4, #-1]!
   16e62:	bgt.n	16e42 <_svfprintf_r+0x13ea>
   16e64:	mov	r1, r4
   16e66:	adds	r3, #48	; 0x30
   16e68:	uxtb	r2, r3
   16e6a:	strb.w	r2, [r1, #-1]!
   16e6e:	cmp	r0, r1
   16e70:	bls.w	170dc <_svfprintf_r+0x1684>
   16e74:	add.w	r1, sp, #126	; 0x7e
   16e78:	mov	r3, r4
   16e7a:	b.n	16e80 <_svfprintf_r+0x1428>
   16e7c:	ldrb.w	r2, [r3], #1
   16e80:	strb.w	r2, [r1], #1
   16e84:	cmp	r0, r3
   16e86:	bne.n	16e7c <_svfprintf_r+0x1424>
   16e88:	adds	r3, r0, #1
   16e8a:	subs	r3, r3, r4
   16e8c:	add.w	r2, sp, #126	; 0x7e
   16e90:	add	r3, r2
   16e92:	add	r2, sp, #124	; 0x7c
   16e94:	subs	r3, r3, r2
   16e96:	ldr	r2, [sp, #56]	; 0x38
   16e98:	str	r3, [sp, #84]	; 0x54
   16e9a:	cmp	r2, #1
   16e9c:	add	r3, r2
   16e9e:	str	r3, [sp, #36]	; 0x24
   16ea0:	ble.w	17072 <_svfprintf_r+0x161a>
   16ea4:	ldr	r3, [sp, #36]	; 0x24
   16ea6:	ldr	r2, [sp, #72]	; 0x48
   16ea8:	add	r3, r2
   16eaa:	movs	r2, #0
   16eac:	str	r3, [sp, #36]	; 0x24
   16eae:	str	r2, [sp, #60]	; 0x3c
   16eb0:	bic.w	r3, r3, r3, asr #31
   16eb4:	b.n	16b12 <_svfprintf_r+0x10ba>
   16eb6:	add	r2, sp, #140	; 0x8c
   16eb8:	ldr	r1, [sp, #20]
   16eba:	ldr	r0, [sp, #24]
   16ebc:	bl	18be0 <__ssprint_r>
   16ec0:	cmp	r0, #0
   16ec2:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16ec6:	ldr	r3, [sp, #116]	; 0x74
   16ec8:	ldr	r4, [sp, #148]	; 0x94
   16eca:	add.w	r9, sp, #192	; 0xc0
   16ece:	b.n	168a8 <_svfprintf_r+0xe50>
   16ed0:	add	r2, sp, #140	; 0x8c
   16ed2:	ldr	r1, [sp, #20]
   16ed4:	ldr	r0, [sp, #24]
   16ed6:	bl	18be0 <__ssprint_r>
   16eda:	cmp	r0, #0
   16edc:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16ee0:	ldr	r3, [sp, #116]	; 0x74
   16ee2:	ldr	r2, [sp, #56]	; 0x38
   16ee4:	ldr	r4, [sp, #148]	; 0x94
   16ee6:	subs	r3, r2, r3
   16ee8:	add.w	r9, sp, #192	; 0xc0
   16eec:	b.n	168d8 <_svfprintf_r+0xe80>
   16eee:	nop
   16ef0:	.word	0x0001988c
   16ef4:	.word	0x00019acc
   16ef8:	.word	0x66666667
   16efc:	cmp	r5, #6
   16efe:	mov	r3, r5
   16f00:	it	cs
   16f02:	movcs	r3, #6
   16f04:	str	r3, [sp, #36]	; 0x24
   16f06:	bic.w	r3, r3, r3, asr #31
   16f0a:	mov	fp, r6
   16f0c:	str	r7, [sp, #40]	; 0x28
   16f0e:	str	r6, [sp, #60]	; 0x3c
   16f10:	mov	r7, r6
   16f12:	str	r3, [sp, #16]
   16f14:	ldr	r6, [pc, #536]	; (17130 <_svfprintf_r+0x16d8>)
   16f16:	b.w	15dfc <_svfprintf_r+0x3a4>
   16f1a:	mov.w	fp, #6
   16f1e:	b.n	16a52 <_svfprintf_r+0xffa>
   16f20:	add	r2, sp, #132	; 0x84
   16f22:	add	r3, sp, #120	; 0x78
   16f24:	str	r2, [sp, #4]
   16f26:	str	r3, [sp, #0]
   16f28:	mov	r2, fp
   16f2a:	add	r3, sp, #116	; 0x74
   16f2c:	movs	r1, #3
   16f2e:	vldr	d0, [sp, #96]	; 0x60
   16f32:	ldr	r0, [sp, #24]
   16f34:	bl	173d8 <_dtoa_r>
   16f38:	mov	r5, fp
   16f3a:	mov	r6, r0
   16f3c:	add.w	r4, r0, fp
   16f40:	b.n	16d2e <_svfprintf_r+0x12d6>
   16f42:	movs	r7, #45	; 0x2d
   16f44:	strb.w	r7, [sp, #111]	; 0x6f
   16f48:	b.w	160a2 <_svfprintf_r+0x64a>
   16f4c:	str	r3, [sp, #12]
   16f4e:	b.w	161fa <_svfprintf_r+0x7a2>
   16f52:	ldrd	r1, r2, [sp, #64]	; 0x40
   16f56:	add.w	r3, r2, #2147483648	; 0x80000000
   16f5a:	str	r3, [sp, #100]	; 0x64
   16f5c:	movs	r3, #45	; 0x2d
   16f5e:	str	r1, [sp, #96]	; 0x60
   16f60:	str	r3, [sp, #16]
   16f62:	b.n	16a6e <_svfprintf_r+0x1016>
   16f64:	ldr	r2, [sp, #72]	; 0x48
   16f66:	ldr	r3, [sp, #56]	; 0x38
   16f68:	add	r3, r2
   16f6a:	ldr	r2, [sp, #60]	; 0x3c
   16f6c:	str	r3, [sp, #36]	; 0x24
   16f6e:	cmp	r2, #0
   16f70:	ble.w	17086 <_svfprintf_r+0x162e>
   16f74:	movs	r2, #103	; 0x67
   16f76:	bic.w	r3, r3, r3, asr #31
   16f7a:	str	r2, [sp, #52]	; 0x34
   16f7c:	b.n	16b12 <_svfprintf_r+0x10ba>
   16f7e:	ldr	r3, [sp, #52]	; 0x34
   16f80:	cmp	r3, #71	; 0x47
   16f82:	bne.w	16ab0 <_svfprintf_r+0x1058>
   16f86:	ldr	r3, [sp, #12]
   16f88:	lsls	r3, r3, #31
   16f8a:	bmi.w	16d22 <_svfprintf_r+0x12ca>
   16f8e:	ldr	r3, [sp, #132]	; 0x84
   16f90:	cmp	r7, #71	; 0x47
   16f92:	sub.w	r3, r3, r6
   16f96:	str	r3, [sp, #56]	; 0x38
   16f98:	beq.w	16dd0 <_svfprintf_r+0x1378>
   16f9c:	ldr	r3, [sp, #116]	; 0x74
   16f9e:	b.n	16e1a <_svfprintf_r+0x13c2>
   16fa0:	bic.w	r3, r5, r5, asr #31
   16fa4:	str	r7, [sp, #40]	; 0x28
   16fa6:	str	r3, [sp, #16]
   16fa8:	str	r5, [sp, #36]	; 0x24
   16faa:	mov	fp, r0
   16fac:	str	r0, [sp, #60]	; 0x3c
   16fae:	ldrb.w	r7, [sp, #111]	; 0x6f
   16fb2:	b.w	15dfc <_svfprintf_r+0x3a4>
   16fb6:	cmp	r3, #0
   16fb8:	ble.n	17096 <_svfprintf_r+0x163e>
   16fba:	cmp.w	fp, #0
   16fbe:	bne.n	17060 <_svfprintf_r+0x1608>
   16fc0:	ldr	r2, [sp, #12]
   16fc2:	lsls	r4, r2, #31
   16fc4:	bmi.n	17060 <_svfprintf_r+0x1608>
   16fc6:	mov	r2, r3
   16fc8:	str	r2, [sp, #36]	; 0x24
   16fca:	bic.w	r3, r3, r3, asr #31
   16fce:	b.n	16b12 <_svfprintf_r+0x10ba>
   16fd0:	ldr	r3, [sp, #12]
   16fd2:	lsls	r3, r3, #31
   16fd4:	mov	r7, fp
   16fd6:	bpl.n	16fe4 <_svfprintf_r+0x158c>
   16fd8:	add	r6, sp, #256	; 0x100
   16fda:	movs	r3, #48	; 0x30
   16fdc:	strb.w	r3, [r6, #-65]!
   16fe0:	b.w	15de8 <_svfprintf_r+0x390>
   16fe4:	str.w	fp, [sp, #36]	; 0x24
   16fe8:	add	r6, sp, #192	; 0xc0
   16fea:	b.w	15dee <_svfprintf_r+0x396>
   16fee:	add	r2, sp, #140	; 0x8c
   16ff0:	ldr	r1, [sp, #20]
   16ff2:	ldr	r0, [sp, #24]
   16ff4:	bl	18be0 <__ssprint_r>
   16ff8:	cmp	r0, #0
   16ffa:	bne.w	15c4c <_svfprintf_r+0x1f4>
   16ffe:	ldr	r5, [sp, #116]	; 0x74
   17000:	ldr	r4, [sp, #148]	; 0x94
   17002:	ldr	r3, [sp, #144]	; 0x90
   17004:	add.w	r9, sp, #192	; 0xc0
   17008:	b.n	16c58 <_svfprintf_r+0x1200>
   1700a:	mov	r8, r4
   1700c:	movs	r5, #0
   1700e:	b.w	15b10 <_svfprintf_r+0xb8>
   17012:	adds	r3, #48	; 0x30
   17014:	movs	r2, #48	; 0x30
   17016:	strb.w	r3, [sp, #127]	; 0x7f
   1701a:	strb.w	r2, [sp, #126]	; 0x7e
   1701e:	add	r3, sp, #128	; 0x80
   17020:	b.n	16e92 <_svfprintf_r+0x143a>
   17022:	ldr	r3, [sp, #132]	; 0x84
   17024:	b.n	16ad8 <_svfprintf_r+0x1080>
   17026:	ldr	r2, [sp, #72]	; 0x48
   17028:	ldr	r3, [sp, #60]	; 0x3c
   1702a:	add	r3, r2
   1702c:	movs	r2, #103	; 0x67
   1702e:	str	r3, [sp, #36]	; 0x24
   17030:	str	r2, [sp, #52]	; 0x34
   17032:	bic.w	r3, r3, r3, asr #31
   17036:	b.n	16b12 <_svfprintf_r+0x10ba>
   17038:	ldr	r6, [pc, #248]	; (17134 <_svfprintf_r+0x16dc>)
   1703a:	ldr	r3, [pc, #252]	; (17138 <_svfprintf_r+0x16e0>)
   1703c:	ldrb.w	r7, [sp, #111]	; 0x6f
   17040:	b.w	160a6 <_svfprintf_r+0x64e>
   17044:	movs	r2, #0
   17046:	movs	r3, #0
   17048:	ldrd	r0, r1, [sp, #96]	; 0x60
   1704c:	bl	14200 <__aeabi_dcmpeq>
   17050:	cmp	r0, #0
   17052:	bne.w	16d36 <_svfprintf_r+0x12de>
   17056:	rsb	r5, r5, #1
   1705a:	str	r5, [sp, #116]	; 0x74
   1705c:	add	r4, r5
   1705e:	b.n	16ab2 <_svfprintf_r+0x105a>
   17060:	ldr	r3, [sp, #60]	; 0x3c
   17062:	ldr	r2, [sp, #72]	; 0x48
   17064:	adds	r5, r3, r2
   17066:	add.w	r3, r5, fp
   1706a:	str	r3, [sp, #36]	; 0x24
   1706c:	bic.w	r3, r3, r3, asr #31
   17070:	b.n	16b12 <_svfprintf_r+0x10ba>
   17072:	ldr	r3, [sp, #12]
   17074:	ands.w	r3, r3, #1
   17078:	bne.w	16ea4 <_svfprintf_r+0x144c>
   1707c:	str	r3, [sp, #60]	; 0x3c
   1707e:	ldr	r3, [sp, #36]	; 0x24
   17080:	bic.w	r3, r3, r3, asr #31
   17084:	b.n	16b12 <_svfprintf_r+0x10ba>
   17086:	ldr	r3, [sp, #60]	; 0x3c
   17088:	ldr	r2, [sp, #36]	; 0x24
   1708a:	rsb	r3, r3, #1
   1708e:	add	r2, r3
   17090:	mov	r3, r2
   17092:	str	r2, [sp, #36]	; 0x24
   17094:	b.n	16f74 <_svfprintf_r+0x151c>
   17096:	cmp.w	fp, #0
   1709a:	bne.n	170a2 <_svfprintf_r+0x164a>
   1709c:	ldr	r3, [sp, #12]
   1709e:	lsls	r0, r3, #31
   170a0:	bpl.n	170b2 <_svfprintf_r+0x165a>
   170a2:	ldr	r3, [sp, #72]	; 0x48
   170a4:	adds	r5, r3, #1
   170a6:	add.w	r3, r5, fp
   170aa:	str	r3, [sp, #36]	; 0x24
   170ac:	bic.w	r3, r3, r3, asr #31
   170b0:	b.n	16b12 <_svfprintf_r+0x10ba>
   170b2:	movs	r3, #1
   170b4:	str	r3, [sp, #36]	; 0x24
   170b6:	b.n	16b12 <_svfprintf_r+0x10ba>
   170b8:	ldr	r0, [sp, #40]	; 0x28
   170ba:	ldrb.w	r3, [r8, #1]
   170be:	ldr	r5, [r0, #0]
   170c0:	adds	r0, #4
   170c2:	cmp	r5, #0
   170c4:	str	r0, [sp, #40]	; 0x28
   170c6:	mov	r8, r4
   170c8:	bge.w	15b0c <_svfprintf_r+0xb4>
   170cc:	mov.w	r5, #4294967295
   170d0:	b.w	15b0c <_svfprintf_r+0xb4>
   170d4:	strb.w	r1, [sp, #111]	; 0x6f
   170d8:	b.w	15c6e <_svfprintf_r+0x216>
   170dc:	add.w	r3, sp, #126	; 0x7e
   170e0:	b.n	16e92 <_svfprintf_r+0x143a>
   170e2:	ldr	r2, [sp, #24]
   170e4:	movs	r3, #12
   170e6:	str	r3, [r2, #0]
   170e8:	mov.w	r0, #4294967295
   170ec:	b.w	15c5e <_svfprintf_r+0x206>
   170f0:	strb.w	r1, [sp, #111]	; 0x6f
   170f4:	b.w	15d68 <_svfprintf_r+0x310>
   170f8:	strb.w	r1, [sp, #111]	; 0x6f
   170fc:	b.w	16034 <_svfprintf_r+0x5dc>
   17100:	strb.w	r1, [sp, #111]	; 0x6f
   17104:	b.w	161a2 <_svfprintf_r+0x74a>
   17108:	strb.w	r1, [sp, #111]	; 0x6f
   1710c:	b.w	16146 <_svfprintf_r+0x6ee>
   17110:	strb.w	r1, [sp, #111]	; 0x6f
   17114:	b.w	160f2 <_svfprintf_r+0x69a>
   17118:	strb.w	r1, [sp, #111]	; 0x6f
   1711c:	b.w	1638a <_svfprintf_r+0x932>
   17120:	strb.w	r1, [sp, #111]	; 0x6f
   17124:	b.w	16348 <_svfprintf_r+0x8f0>
   17128:	strb.w	r1, [sp, #111]	; 0x6f
   1712c:	b.w	1630c <_svfprintf_r+0x8b4>
   17130:	.word	0x00019b14
   17134:	.word	0x00019ae8
   17138:	.word	0x00019ae4

0001713c <_vdprintf_r>:
   1713c:	push	{r4, r5, r6, r7, lr}
   1713e:	sub.w	sp, sp, #532	; 0x214
   17142:	add	r5, sp, #16
   17144:	str	r3, [sp, #0]
   17146:	mov	r7, r1
   17148:	mov	r3, r2
   1714a:	mov.w	r4, #512	; 0x200
   1714e:	add	r2, sp, #12
   17150:	mov	r1, r5
   17152:	str	r4, [sp, #12]
   17154:	mov	r6, r0
   17156:	bl	18ce0 <_vasnprintf_r>
   1715a:	cbz	r0, 17180 <_vdprintf_r+0x44>
   1715c:	mov	r4, r0
   1715e:	mov	r2, r0
   17160:	mov	r1, r7
   17162:	ldr	r3, [sp, #12]
   17164:	mov	r0, r6
   17166:	bl	171bc <_write_r>
   1716a:	cmp	r4, r5
   1716c:	str	r0, [sp, #12]
   1716e:	beq.n	1717a <_vdprintf_r+0x3e>
   17170:	mov	r0, r6
   17172:	mov	r1, r4
   17174:	bl	183d0 <_free_r>
   17178:	ldr	r0, [sp, #12]
   1717a:	add.w	sp, sp, #532	; 0x214
   1717e:	pop	{r4, r5, r6, r7, pc}
   17180:	mov.w	r0, #4294967295
   17184:	b.n	1717a <_vdprintf_r+0x3e>
   17186:	nop

00017188 <vdprintf>:
   17188:	push	{r4}
   1718a:	ldr	r4, [pc, #16]	; (1719c <vdprintf+0x14>)
   1718c:	mov	r3, r2
   1718e:	mov	r2, r1
   17190:	mov	r1, r0
   17192:	ldr	r0, [r4, #0]
   17194:	ldr.w	r4, [sp], #4
   17198:	b.w	1713c <_vdprintf_r>
   1719c:	.word	0x1fff0f60

000171a0 <__ascii_wctomb>:
   171a0:	cbz	r1, 171ac <__ascii_wctomb+0xc>
   171a2:	cmp	r2, #255	; 0xff
   171a4:	bhi.n	171b0 <__ascii_wctomb+0x10>
   171a6:	strb	r2, [r1, #0]
   171a8:	movs	r0, #1
   171aa:	bx	lr
   171ac:	mov	r0, r1
   171ae:	bx	lr
   171b0:	movs	r3, #138	; 0x8a
   171b2:	str	r3, [r0, #0]
   171b4:	mov.w	r0, #4294967295
   171b8:	bx	lr
   171ba:	nop

000171bc <_write_r>:
   171bc:	push	{r4, r5, r6, lr}
   171be:	mov	r5, r1
   171c0:	ldr	r4, [pc, #32]	; (171e4 <_write_r+0x28>)
   171c2:	mov	r1, r2
   171c4:	mov	r6, r0
   171c6:	mov	r2, r3
   171c8:	mov	r0, r5
   171ca:	movs	r3, #0
   171cc:	str	r3, [r4, #0]
   171ce:	bl	137d0 <_write>
   171d2:	adds	r3, r0, #1
   171d4:	beq.n	171d8 <_write_r+0x1c>
   171d6:	pop	{r4, r5, r6, pc}
   171d8:	ldr	r3, [r4, #0]
   171da:	cmp	r3, #0
   171dc:	beq.n	171d6 <_write_r+0x1a>
   171de:	str	r3, [r6, #0]
   171e0:	pop	{r4, r5, r6, pc}
   171e2:	nop
   171e4:	.word	0x1fff2cbc

000171e8 <__register_exitproc>:
   171e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171ec:	ldr	r4, [pc, #148]	; (17284 <__register_exitproc+0x9c>)
   171ee:	ldr	r5, [r4, #0]
   171f0:	ldr.w	r4, [r5, #328]	; 0x148
   171f4:	mov	r6, r0
   171f6:	mov	r8, r1
   171f8:	mov	sl, r2
   171fa:	mov	r9, r3
   171fc:	cbz	r4, 17270 <__register_exitproc+0x88>
   171fe:	ldr	r0, [r4, #4]
   17200:	cmp	r0, #31
   17202:	bgt.n	17234 <__register_exitproc+0x4c>
   17204:	adds	r3, r0, #1
   17206:	cbz	r6, 17226 <__register_exitproc+0x3e>
   17208:	add.w	r5, r4, r0, lsl #2
   1720c:	movs	r2, #1
   1720e:	str.w	sl, [r5, #136]	; 0x88
   17212:	ldr.w	r1, [r4, #392]	; 0x188
   17216:	lsls	r2, r0
   17218:	orrs	r1, r2
   1721a:	cmp	r6, #2
   1721c:	str.w	r1, [r4, #392]	; 0x188
   17220:	str.w	r9, [r5, #264]	; 0x108
   17224:	beq.n	17264 <__register_exitproc+0x7c>
   17226:	adds	r0, #2
   17228:	str	r3, [r4, #4]
   1722a:	str.w	r8, [r4, r0, lsl #2]
   1722e:	movs	r0, #0
   17230:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17234:	ldr	r3, [pc, #80]	; (17288 <__register_exitproc+0xa0>)
   17236:	cbz	r3, 1727a <__register_exitproc+0x92>
   17238:	mov.w	r0, #400	; 0x190
   1723c:	bl	146ac <malloc>
   17240:	mov	r4, r0
   17242:	cbz	r0, 1727a <__register_exitproc+0x92>
   17244:	ldr.w	r3, [r5, #328]	; 0x148
   17248:	movs	r7, #0
   1724a:	stmia.w	r0, {r3, r7}
   1724e:	str.w	r4, [r5, #328]	; 0x148
   17252:	mov	r0, r7
   17254:	movs	r3, #1
   17256:	str.w	r7, [r4, #392]	; 0x188
   1725a:	str.w	r7, [r4, #396]	; 0x18c
   1725e:	cmp	r6, #0
   17260:	beq.n	17226 <__register_exitproc+0x3e>
   17262:	b.n	17208 <__register_exitproc+0x20>
   17264:	ldr.w	r1, [r4, #396]	; 0x18c
   17268:	orrs	r2, r1
   1726a:	str.w	r2, [r4, #396]	; 0x18c
   1726e:	b.n	17226 <__register_exitproc+0x3e>
   17270:	add.w	r4, r5, #332	; 0x14c
   17274:	str.w	r4, [r5, #328]	; 0x148
   17278:	b.n	171fe <__register_exitproc+0x16>
   1727a:	mov.w	r0, #4294967295
   1727e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17282:	nop
   17284:	.word	0x00019abc
   17288:	.word	0x000146ad

0001728c <register_fini>:
   1728c:	ldr	r3, [pc, #8]	; (17298 <register_fini+0xc>)
   1728e:	cbz	r3, 17296 <register_fini+0xa>
   17290:	ldr	r0, [pc, #8]	; (1729c <register_fini+0x10>)
   17292:	b.w	172a0 <atexit>
   17296:	bx	lr
   17298:	.word	0x00000000
   1729c:	.word	0x0001830d

000172a0 <atexit>:
   172a0:	movs	r3, #0
   172a2:	mov	r1, r0
   172a4:	mov	r2, r3
   172a6:	mov	r0, r3
   172a8:	b.w	171e8 <__register_exitproc>

000172ac <quorem>:
   172ac:	ldr	r2, [r0, #16]
   172ae:	ldr	r3, [r1, #16]
   172b0:	cmp	r3, r2
   172b2:	bgt.w	173d0 <quorem+0x124>
   172b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172ba:	add.w	r8, r3, #4294967295
   172be:	add.w	r7, r1, #20
   172c2:	add.w	fp, r0, #20
   172c6:	ldr.w	r2, [r7, r8, lsl #2]
   172ca:	ldr.w	r3, [fp, r8, lsl #2]
   172ce:	mov.w	r4, r8, lsl #2
   172d2:	sub	sp, #12
   172d4:	adds	r2, #1
   172d6:	udiv	r9, r3, r2
   172da:	add.w	r3, fp, r4
   172de:	str	r4, [sp, #0]
   172e0:	add.w	sl, r7, r4
   172e4:	str	r3, [sp, #4]
   172e6:	cmp.w	r9, #0
   172ea:	beq.n	17360 <quorem+0xb4>
   172ec:	movs	r5, #0
   172ee:	mov	ip, r7
   172f0:	mov	lr, fp
   172f2:	mov	r3, r5
   172f4:	ldr.w	r6, [ip], #4
   172f8:	ldr.w	r2, [lr]
   172fc:	uxth	r4, r6
   172fe:	mla	r5, r9, r4, r5
   17302:	lsrs	r6, r6, #16
   17304:	lsrs	r4, r5, #16
   17306:	mla	r4, r9, r6, r4
   1730a:	uxth	r5, r5
   1730c:	subs	r3, r3, r5
   1730e:	uxth	r6, r4
   17310:	uxtah	r3, r3, r2
   17314:	rsb	r6, r6, r2, lsr #16
   17318:	add.w	r6, r6, r3, asr #16
   1731c:	uxth	r3, r3
   1731e:	orr.w	r3, r3, r6, lsl #16
   17322:	cmp	sl, ip
   17324:	str.w	r3, [lr], #4
   17328:	mov.w	r5, r4, lsr #16
   1732c:	mov.w	r3, r6, asr #16
   17330:	bcs.n	172f4 <quorem+0x48>
   17332:	ldr	r3, [sp, #0]
   17334:	ldr.w	r3, [fp, r3]
   17338:	cbnz	r3, 17360 <quorem+0xb4>
   1733a:	ldr	r4, [sp, #4]
   1733c:	subs	r3, r4, #4
   1733e:	cmp	fp, r3
   17340:	bcs.n	1735c <quorem+0xb0>
   17342:	ldr.w	r3, [r4, #-4]
   17346:	cbnz	r3, 1735c <quorem+0xb0>
   17348:	sub.w	r3, r4, #8
   1734c:	b.n	17354 <quorem+0xa8>
   1734e:	ldr	r2, [r3, #0]
   17350:	subs	r3, #4
   17352:	cbnz	r2, 1735c <quorem+0xb0>
   17354:	cmp	fp, r3
   17356:	add.w	r8, r8, #4294967295
   1735a:	bcc.n	1734e <quorem+0xa2>
   1735c:	str.w	r8, [r0, #16]
   17360:	mov	r4, r0
   17362:	bl	189cc <__mcmp>
   17366:	cmp	r0, #0
   17368:	blt.n	173c8 <quorem+0x11c>
   1736a:	add.w	r9, r9, #1
   1736e:	mov	r5, fp
   17370:	movs	r3, #0
   17372:	ldr.w	r1, [r7], #4
   17376:	ldr	r0, [r5, #0]
   17378:	uxth	r2, r1
   1737a:	subs	r2, r3, r2
   1737c:	lsrs	r1, r1, #16
   1737e:	uxtah	r2, r2, r0
   17382:	rsb	r3, r1, r0, lsr #16
   17386:	add.w	r3, r3, r2, asr #16
   1738a:	uxth	r1, r2
   1738c:	orr.w	r1, r1, r3, lsl #16
   17390:	cmp	sl, r7
   17392:	str.w	r1, [r5], #4
   17396:	mov.w	r3, r3, asr #16
   1739a:	bcs.n	17372 <quorem+0xc6>
   1739c:	ldr.w	r2, [fp, r8, lsl #2]
   173a0:	add.w	r3, fp, r8, lsl #2
   173a4:	cbnz	r2, 173c8 <quorem+0x11c>
   173a6:	subs	r2, r3, #4
   173a8:	cmp	fp, r2
   173aa:	bcs.n	173c4 <quorem+0x118>
   173ac:	ldr.w	r2, [r3, #-4]
   173b0:	cbnz	r2, 173c4 <quorem+0x118>
   173b2:	subs	r3, #8
   173b4:	b.n	173bc <quorem+0x110>
   173b6:	ldr	r2, [r3, #0]
   173b8:	subs	r3, #4
   173ba:	cbnz	r2, 173c4 <quorem+0x118>
   173bc:	cmp	fp, r3
   173be:	add.w	r8, r8, #4294967295
   173c2:	bcc.n	173b6 <quorem+0x10a>
   173c4:	str.w	r8, [r4, #16]
   173c8:	mov	r0, r9
   173ca:	add	sp, #12
   173cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173d0:	movs	r0, #0
   173d2:	bx	lr
   173d4:			; <UNDEFINED> instruction: 0xffffffff

000173d8 <_dtoa_r>:
   173d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173dc:	vmov	r6, r7, d0
   173e0:	sub	sp, #108	; 0x6c
   173e2:	ldr	r4, [r0, #64]	; 0x40
   173e4:	ldr	r5, [sp, #144]	; 0x90
   173e6:	str	r1, [sp, #0]
   173e8:	mov	r9, r0
   173ea:	str	r2, [sp, #20]
   173ec:	str	r3, [sp, #12]
   173ee:	vmov	sl, s0
   173f2:	mov	fp, r7
   173f4:	cbz	r4, 1740c <_dtoa_r+0x34>
   173f6:	ldr	r2, [r0, #68]	; 0x44
   173f8:	str	r2, [r4, #4]
   173fa:	movs	r3, #1
   173fc:	lsls	r3, r2
   173fe:	str	r3, [r4, #8]
   17400:	mov	r1, r4
   17402:	bl	18608 <_Bfree>
   17406:	movs	r3, #0
   17408:	str.w	r3, [r9, #64]	; 0x40
   1740c:	cmp.w	fp, #0
   17410:	mov	r4, fp
   17412:	blt.n	1747e <_dtoa_r+0xa6>
   17414:	movs	r3, #0
   17416:	str	r3, [r5, #0]
   17418:	ldr	r3, [pc, #644]	; (176a0 <_dtoa_r+0x2c8>)
   1741a:	mov	r2, r3
   1741c:	ands	r3, r4
   1741e:	cmp	r3, r2
   17420:	beq.n	17450 <_dtoa_r+0x78>
   17422:	movs	r2, #0
   17424:	movs	r3, #0
   17426:	mov	r0, sl
   17428:	mov	r1, fp
   1742a:	bl	14200 <__aeabi_dcmpeq>
   1742e:	mov	r6, sl
   17430:	mov	r7, fp
   17432:	mov	r8, r0
   17434:	cbz	r0, 1748a <_dtoa_r+0xb2>
   17436:	ldr	r2, [sp, #12]
   17438:	movs	r3, #1
   1743a:	str	r3, [r2, #0]
   1743c:	ldr	r3, [sp, #148]	; 0x94
   1743e:	cmp	r3, #0
   17440:	beq.w	175c0 <_dtoa_r+0x1e8>
   17444:	ldr	r0, [pc, #604]	; (176a4 <_dtoa_r+0x2cc>)
   17446:	str	r0, [r3, #0]
   17448:	subs	r0, #1
   1744a:	add	sp, #108	; 0x6c
   1744c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17450:	ldr	r2, [sp, #12]
   17452:	movw	r3, #9999	; 0x270f
   17456:	str	r3, [r2, #0]
   17458:	cmp.w	sl, #0
   1745c:	beq.w	17594 <_dtoa_r+0x1bc>
   17460:	ldr	r0, [pc, #580]	; (176a8 <_dtoa_r+0x2d0>)
   17462:	ldr	r3, [sp, #148]	; 0x94
   17464:	cmp	r3, #0
   17466:	beq.n	1744a <_dtoa_r+0x72>
   17468:	ldrb	r3, [r0, #3]
   1746a:	cmp	r3, #0
   1746c:	beq.w	175c4 <_dtoa_r+0x1ec>
   17470:	add.w	r3, r0, #8
   17474:	ldr	r2, [sp, #148]	; 0x94
   17476:	str	r3, [r2, #0]
   17478:	add	sp, #108	; 0x6c
   1747a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1747e:	movs	r3, #1
   17480:	bic.w	r4, fp, #2147483648	; 0x80000000
   17484:	str	r3, [r5, #0]
   17486:	mov	fp, r4
   17488:	b.n	17418 <_dtoa_r+0x40>
   1748a:	add	r2, sp, #96	; 0x60
   1748c:	add	r1, sp, #100	; 0x64
   1748e:	vmov	d0, r6, r7
   17492:	mov	r0, r9
   17494:	bl	18b24 <__d2b>
   17498:	lsrs	r5, r4, #20
   1749a:	str	r0, [sp, #40]	; 0x28
   1749c:	bne.w	175a6 <_dtoa_r+0x1ce>
   174a0:	ldr	r5, [sp, #96]	; 0x60
   174a2:	ldr	r6, [sp, #100]	; 0x64
   174a4:	add	r6, r5
   174a6:	addw	r3, r6, #1074	; 0x432
   174aa:	cmp	r3, #32
   174ac:	ble.w	179c0 <_dtoa_r+0x5e8>
   174b0:	rsb	r3, r3, #64	; 0x40
   174b4:	addw	r0, r6, #1042	; 0x412
   174b8:	lsls	r4, r3
   174ba:	lsr.w	r0, sl, r0
   174be:	orrs	r0, r4
   174c0:	bl	13c44 <__aeabi_ui2d>
   174c4:	movs	r3, #1
   174c6:	subs	r4, r6, #1
   174c8:	sub.w	r1, r1, #32505856	; 0x1f00000
   174cc:	str	r3, [sp, #60]	; 0x3c
   174ce:	movs	r2, #0
   174d0:	ldr	r3, [pc, #472]	; (176ac <_dtoa_r+0x2d4>)
   174d2:	bl	139c8 <__aeabi_dsub>
   174d6:	add	r3, pc, #432	; (adr r3, 17688 <_dtoa_r+0x2b0>)
   174d8:	ldrd	r2, r3, [r3]
   174dc:	bl	13d30 <__aeabi_dmul>
   174e0:	add	r3, pc, #428	; (adr r3, 17690 <_dtoa_r+0x2b8>)
   174e2:	ldrd	r2, r3, [r3]
   174e6:	bl	139cc <__adddf3>
   174ea:	mov	r6, r0
   174ec:	mov	r0, r4
   174ee:	mov	r7, r1
   174f0:	bl	13c64 <__aeabi_i2d>
   174f4:	add	r3, pc, #416	; (adr r3, 17698 <_dtoa_r+0x2c0>)
   174f6:	ldrd	r2, r3, [r3]
   174fa:	bl	13d30 <__aeabi_dmul>
   174fe:	mov	r2, r0
   17500:	mov	r3, r1
   17502:	mov	r0, r6
   17504:	mov	r1, r7
   17506:	bl	139cc <__adddf3>
   1750a:	mov	r6, r0
   1750c:	mov	r7, r1
   1750e:	bl	14290 <__aeabi_d2iz>
   17512:	movs	r2, #0
   17514:	str	r0, [sp, #16]
   17516:	movs	r3, #0
   17518:	mov	r0, r6
   1751a:	mov	r1, r7
   1751c:	bl	14214 <__aeabi_dcmplt>
   17520:	cmp	r0, #0
   17522:	bne.w	17976 <_dtoa_r+0x59e>
   17526:	ldr	r6, [sp, #16]
   17528:	cmp	r6, #22
   1752a:	bhi.w	17970 <_dtoa_r+0x598>
   1752e:	ldr	r3, [pc, #384]	; (176b0 <_dtoa_r+0x2d8>)
   17530:	add.w	r3, r3, r6, lsl #3
   17534:	ldrd	r0, r1, [r3]
   17538:	mov	r2, sl
   1753a:	mov	r3, fp
   1753c:	bl	14250 <__aeabi_dcmpgt>
   17540:	cmp	r0, #0
   17542:	beq.w	179ca <_dtoa_r+0x5f2>
   17546:	subs	r3, r6, #1
   17548:	str	r3, [sp, #16]
   1754a:	movs	r3, #0
   1754c:	str	r3, [sp, #52]	; 0x34
   1754e:	subs	r5, r5, r4
   17550:	subs.w	r8, r5, #1
   17554:	bmi.w	179ac <_dtoa_r+0x5d4>
   17558:	movs	r3, #0
   1755a:	str	r3, [sp, #28]
   1755c:	ldr	r3, [sp, #16]
   1755e:	cmp	r3, #0
   17560:	blt.w	1799a <_dtoa_r+0x5c2>
   17564:	add	r8, r3
   17566:	str	r3, [sp, #48]	; 0x30
   17568:	movs	r3, #0
   1756a:	str	r3, [sp, #24]
   1756c:	ldr	r3, [sp, #0]
   1756e:	cmp	r3, #9
   17570:	bhi.n	175c8 <_dtoa_r+0x1f0>
   17572:	cmp	r3, #5
   17574:	ble.w	18200 <_dtoa_r+0xe28>
   17578:	subs	r3, #4
   1757a:	str	r3, [sp, #0]
   1757c:	movs	r6, #0
   1757e:	ldr	r3, [sp, #0]
   17580:	subs	r3, #2
   17582:	cmp	r3, #3
   17584:	bhi.w	181ce <_dtoa_r+0xdf6>
   17588:	tbh	[pc, r3, lsl #1]
   1758c:	.word	0x0224032b
   17590:	.word	0x04500336
   17594:	ldr	r3, [pc, #272]	; (176a8 <_dtoa_r+0x2d0>)
   17596:	ldr	r2, [pc, #284]	; (176b4 <_dtoa_r+0x2dc>)
   17598:	ubfx	r0, r4, #0, #20
   1759c:	cmp	r0, #0
   1759e:	ite	ne
   175a0:	movne	r0, r3
   175a2:	moveq	r0, r2
   175a4:	b.n	17462 <_dtoa_r+0x8a>
   175a6:	ubfx	r3, fp, #0, #20
   175aa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   175ae:	subw	r4, r5, #1023	; 0x3ff
   175b2:	mov	r0, sl
   175b4:	str.w	r8, [sp, #60]	; 0x3c
   175b8:	orr.w	r1, r1, #3145728	; 0x300000
   175bc:	ldr	r5, [sp, #96]	; 0x60
   175be:	b.n	174ce <_dtoa_r+0xf6>
   175c0:	ldr	r0, [pc, #244]	; (176b8 <_dtoa_r+0x2e0>)
   175c2:	b.n	1744a <_dtoa_r+0x72>
   175c4:	adds	r3, r0, #3
   175c6:	b.n	17474 <_dtoa_r+0x9c>
   175c8:	movs	r1, #0
   175ca:	str.w	r1, [r9, #68]	; 0x44
   175ce:	mov	r0, r9
   175d0:	mov	r4, r1
   175d2:	str	r1, [sp, #0]
   175d4:	bl	185bc <_Balloc>
   175d8:	mov.w	r3, #4294967295
   175dc:	str	r3, [sp, #32]
   175de:	str	r3, [sp, #56]	; 0x38
   175e0:	movs	r3, #1
   175e2:	str	r0, [sp, #36]	; 0x24
   175e4:	str.w	r0, [r9, #64]	; 0x40
   175e8:	str	r4, [sp, #20]
   175ea:	str	r3, [sp, #44]	; 0x2c
   175ec:	ldr	r3, [sp, #100]	; 0x64
   175ee:	cmp	r3, #0
   175f0:	blt.w	17794 <_dtoa_r+0x3bc>
   175f4:	ldr	r2, [sp, #16]
   175f6:	cmp	r2, #14
   175f8:	bgt.w	17794 <_dtoa_r+0x3bc>
   175fc:	ldr	r3, [pc, #176]	; (176b0 <_dtoa_r+0x2d8>)
   175fe:	add.w	r3, r3, r2, lsl #3
   17602:	vldr	d7, [r3]
   17606:	ldr	r3, [sp, #20]
   17608:	cmp	r3, #0
   1760a:	vstr	d7, [sp]
   1760e:	blt.w	17c0e <_dtoa_r+0x836>
   17612:	mov	r6, sl
   17614:	mov	r7, fp
   17616:	ldrd	sl, fp, [sp]
   1761a:	mov	r0, r6
   1761c:	mov	r2, sl
   1761e:	mov	r3, fp
   17620:	mov	r1, r7
   17622:	bl	13f84 <__aeabi_ddiv>
   17626:	bl	14290 <__aeabi_d2iz>
   1762a:	mov	r4, r0
   1762c:	bl	13c64 <__aeabi_i2d>
   17630:	mov	r2, sl
   17632:	mov	r3, fp
   17634:	bl	13d30 <__aeabi_dmul>
   17638:	mov	r3, r1
   1763a:	mov	r2, r0
   1763c:	mov	r1, r7
   1763e:	mov	r0, r6
   17640:	bl	139c8 <__aeabi_dsub>
   17644:	ldr	r5, [sp, #36]	; 0x24
   17646:	add.w	r3, r4, #48	; 0x30
   1764a:	strb	r3, [r5, #0]
   1764c:	ldr	r3, [sp, #32]
   1764e:	cmp	r3, #1
   17650:	mov	r6, r0
   17652:	mov	r7, r1
   17654:	add.w	r5, r5, #1
   17658:	beq.n	1771e <_dtoa_r+0x346>
   1765a:	movs	r2, #0
   1765c:	ldr	r3, [pc, #92]	; (176bc <_dtoa_r+0x2e4>)
   1765e:	bl	13d30 <__aeabi_dmul>
   17662:	movs	r2, #0
   17664:	movs	r3, #0
   17666:	mov	r6, r0
   17668:	mov	r7, r1
   1766a:	bl	14200 <__aeabi_dcmpeq>
   1766e:	cmp	r0, #0
   17670:	bne.n	1776e <_dtoa_r+0x396>
   17672:	str.w	r9, [sp, #20]
   17676:	ldr.w	sl, [sp, #32]
   1767a:	ldr.w	fp, [sp, #36]	; 0x24
   1767e:	ldrd	r8, r9, [sp]
   17682:	b.n	176d6 <_dtoa_r+0x2fe>
   17684:	nop.w
   17688:	.word	0x636f4361
   1768c:	.word	0x3fd287a7
   17690:	.word	0x8b60c8b3
   17694:	.word	0x3fc68a28
   17698:	.word	0x509f79fb
   1769c:	.word	0x3fd34413
   176a0:	.word	0x7ff00000
   176a4:	.word	0x0001988d
   176a8:	.word	0x00019c3c
   176ac:	.word	0x3ff80000
   176b0:	.word	0x00019c40
   176b4:	.word	0x00019c30
   176b8:	.word	0x0001988c
   176bc:	.word	0x40240000
   176c0:	bl	13d30 <__aeabi_dmul>
   176c4:	movs	r2, #0
   176c6:	movs	r3, #0
   176c8:	mov	r6, r0
   176ca:	mov	r7, r1
   176cc:	bl	14200 <__aeabi_dcmpeq>
   176d0:	cmp	r0, #0
   176d2:	bne.w	17e32 <_dtoa_r+0xa5a>
   176d6:	mov	r2, r8
   176d8:	mov	r3, r9
   176da:	mov	r0, r6
   176dc:	mov	r1, r7
   176de:	bl	13f84 <__aeabi_ddiv>
   176e2:	bl	14290 <__aeabi_d2iz>
   176e6:	mov	r4, r0
   176e8:	bl	13c64 <__aeabi_i2d>
   176ec:	mov	r2, r8
   176ee:	mov	r3, r9
   176f0:	bl	13d30 <__aeabi_dmul>
   176f4:	mov	r2, r0
   176f6:	mov	r3, r1
   176f8:	mov	r0, r6
   176fa:	mov	r1, r7
   176fc:	bl	139c8 <__aeabi_dsub>
   17700:	add.w	lr, r4, #48	; 0x30
   17704:	strb.w	lr, [r5], #1
   17708:	rsb	lr, fp, r5
   1770c:	cmp	lr, sl
   1770e:	mov	r6, r0
   17710:	mov	r7, r1
   17712:	mov.w	r2, #0
   17716:	ldr	r3, [pc, #696]	; (179d0 <_dtoa_r+0x5f8>)
   17718:	bne.n	176c0 <_dtoa_r+0x2e8>
   1771a:	ldr.w	r9, [sp, #20]
   1771e:	mov	r2, r6
   17720:	mov	r3, r7
   17722:	mov	r0, r6
   17724:	mov	r1, r7
   17726:	bl	139cc <__adddf3>
   1772a:	mov	r6, r0
   1772c:	mov	r7, r1
   1772e:	mov	r2, r0
   17730:	mov	r3, r1
   17732:	ldrd	r0, r1, [sp]
   17736:	bl	14214 <__aeabi_dcmplt>
   1773a:	cbnz	r0, 1774e <_dtoa_r+0x376>
   1773c:	mov	r2, r6
   1773e:	mov	r3, r7
   17740:	ldrd	r0, r1, [sp]
   17744:	bl	14200 <__aeabi_dcmpeq>
   17748:	cbz	r0, 1776e <_dtoa_r+0x396>
   1774a:	lsls	r3, r4, #31
   1774c:	bpl.n	1776e <_dtoa_r+0x396>
   1774e:	ldrb.w	r4, [r5, #-1]
   17752:	ldr	r2, [sp, #36]	; 0x24
   17754:	subs	r3, r5, #1
   17756:	b.n	17762 <_dtoa_r+0x38a>
   17758:	cmp	r2, r3
   1775a:	beq.w	17f56 <_dtoa_r+0xb7e>
   1775e:	ldrb.w	r4, [r3, #-1]!
   17762:	cmp	r4, #57	; 0x39
   17764:	add.w	r5, r3, #1
   17768:	beq.n	17758 <_dtoa_r+0x380>
   1776a:	adds	r4, #1
   1776c:	strb	r4, [r3, #0]
   1776e:	ldr	r1, [sp, #40]	; 0x28
   17770:	mov	r0, r9
   17772:	bl	18608 <_Bfree>
   17776:	movs	r2, #0
   17778:	ldr	r3, [sp, #16]
   1777a:	strb	r2, [r5, #0]
   1777c:	ldr	r2, [sp, #12]
   1777e:	adds	r3, #1
   17780:	str	r3, [r2, #0]
   17782:	ldr	r3, [sp, #148]	; 0x94
   17784:	cmp	r3, #0
   17786:	beq.w	17ec0 <_dtoa_r+0xae8>
   1778a:	ldr	r0, [sp, #36]	; 0x24
   1778c:	str	r5, [r3, #0]
   1778e:	add	sp, #108	; 0x6c
   17790:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17794:	ldr	r2, [sp, #44]	; 0x2c
   17796:	cmp	r2, #0
   17798:	beq.w	179b8 <_dtoa_r+0x5e0>
   1779c:	ldr	r2, [sp, #0]
   1779e:	cmp	r2, #1
   177a0:	ble.w	17c52 <_dtoa_r+0x87a>
   177a4:	ldr	r3, [sp, #32]
   177a6:	ldr	r2, [sp, #24]
   177a8:	subs	r7, r3, #1
   177aa:	cmp	r2, r7
   177ac:	blt.w	17ec6 <_dtoa_r+0xaee>
   177b0:	subs	r7, r2, r7
   177b2:	ldr	r3, [sp, #32]
   177b4:	cmp	r3, #0
   177b6:	blt.w	180ba <_dtoa_r+0xce2>
   177ba:	ldr	r5, [sp, #28]
   177bc:	ldr	r3, [sp, #32]
   177be:	ldr	r2, [sp, #28]
   177c0:	movs	r1, #1
   177c2:	add	r2, r3
   177c4:	mov	r0, r9
   177c6:	str	r2, [sp, #28]
   177c8:	add	r8, r3
   177ca:	bl	18738 <__i2b>
   177ce:	mov	r6, r0
   177d0:	cbz	r5, 177ec <_dtoa_r+0x414>
   177d2:	cmp.w	r8, #0
   177d6:	ble.n	177ec <_dtoa_r+0x414>
   177d8:	cmp	r5, r8
   177da:	ldr	r2, [sp, #28]
   177dc:	mov	r3, r5
   177de:	it	ge
   177e0:	movge	r3, r8
   177e2:	subs	r2, r2, r3
   177e4:	str	r2, [sp, #28]
   177e6:	subs	r5, r5, r3
   177e8:	rsb	r8, r3, r8
   177ec:	ldr	r3, [sp, #24]
   177ee:	cmp	r3, #0
   177f0:	ble.w	17dde <_dtoa_r+0xa06>
   177f4:	ldr	r2, [sp, #44]	; 0x2c
   177f6:	cmp	r2, #0
   177f8:	beq.w	17c00 <_dtoa_r+0x828>
   177fc:	cmp	r7, #0
   177fe:	beq.w	17c00 <_dtoa_r+0x828>
   17802:	mov	r1, r6
   17804:	mov	r2, r7
   17806:	mov	r0, r9
   17808:	bl	1887c <__pow5mult>
   1780c:	ldr	r2, [sp, #40]	; 0x28
   1780e:	mov	r1, r0
   17810:	mov	r6, r0
   17812:	mov	r0, r9
   17814:	bl	1874c <__multiply>
   17818:	ldr	r1, [sp, #40]	; 0x28
   1781a:	mov	r4, r0
   1781c:	mov	r0, r9
   1781e:	bl	18608 <_Bfree>
   17822:	ldr	r3, [sp, #24]
   17824:	subs	r3, r3, r7
   17826:	str	r3, [sp, #24]
   17828:	bne.w	17bfe <_dtoa_r+0x826>
   1782c:	movs	r1, #1
   1782e:	mov	r0, r9
   17830:	bl	18738 <__i2b>
   17834:	ldr	r3, [sp, #48]	; 0x30
   17836:	str	r0, [sp, #24]
   17838:	cmp	r3, #0
   1783a:	beq.w	17c68 <_dtoa_r+0x890>
   1783e:	mov	r1, r0
   17840:	mov	r2, r3
   17842:	mov	r0, r9
   17844:	bl	1887c <__pow5mult>
   17848:	ldr	r3, [sp, #0]
   1784a:	str	r0, [sp, #24]
   1784c:	cmp	r3, #1
   1784e:	ble.w	17e38 <_dtoa_r+0xa60>
   17852:	movs	r7, #0
   17854:	ldr	r2, [sp, #24]
   17856:	ldr	r3, [r2, #16]
   17858:	add.w	r3, r2, r3, lsl #2
   1785c:	ldr	r0, [r3, #16]
   1785e:	bl	1869c <__hi0bits>
   17862:	rsb	r0, r0, #32
   17866:	add	r0, r8
   17868:	ands.w	r0, r0, #31
   1786c:	beq.w	17c64 <_dtoa_r+0x88c>
   17870:	rsb	r3, r0, #32
   17874:	cmp	r3, #4
   17876:	ble.w	181f4 <_dtoa_r+0xe1c>
   1787a:	rsb	r0, r0, #28
   1787e:	ldr	r3, [sp, #28]
   17880:	add	r3, r0
   17882:	str	r3, [sp, #28]
   17884:	add	r5, r0
   17886:	add	r8, r0
   17888:	ldr	r3, [sp, #28]
   1788a:	cmp	r3, #0
   1788c:	ble.n	1789a <_dtoa_r+0x4c2>
   1788e:	mov	r1, r4
   17890:	mov	r2, r3
   17892:	mov	r0, r9
   17894:	bl	1891c <__lshift>
   17898:	mov	r4, r0
   1789a:	cmp.w	r8, #0
   1789e:	ble.n	178ac <_dtoa_r+0x4d4>
   178a0:	mov	r2, r8
   178a2:	ldr	r1, [sp, #24]
   178a4:	mov	r0, r9
   178a6:	bl	1891c <__lshift>
   178aa:	str	r0, [sp, #24]
   178ac:	ldr	r3, [sp, #52]	; 0x34
   178ae:	cmp	r3, #0
   178b0:	bne.w	17da8 <_dtoa_r+0x9d0>
   178b4:	ldr	r3, [sp, #32]
   178b6:	cmp	r3, #0
   178b8:	ble.w	17de2 <_dtoa_r+0xa0a>
   178bc:	ldr	r3, [sp, #44]	; 0x2c
   178be:	cmp	r3, #0
   178c0:	bne.w	17cac <_dtoa_r+0x8d4>
   178c4:	ldr.w	fp, [sp, #36]	; 0x24
   178c8:	ldr	r7, [sp, #32]
   178ca:	ldr.w	r8, [sp, #24]
   178ce:	mov	r5, fp
   178d0:	b.n	178d8 <_dtoa_r+0x500>
   178d2:	bl	1861c <__multadd>
   178d6:	mov	r4, r0
   178d8:	mov	r1, r8
   178da:	mov	r0, r4
   178dc:	bl	172ac <quorem>
   178e0:	add.w	sl, r0, #48	; 0x30
   178e4:	strb.w	sl, [r5], #1
   178e8:	rsb	r3, fp, r5
   178ec:	cmp	r3, r7
   178ee:	mov.w	r2, #10
   178f2:	mov.w	r3, #0
   178f6:	mov	r1, r4
   178f8:	mov	r0, r9
   178fa:	blt.n	178d2 <_dtoa_r+0x4fa>
   178fc:	ldr	r3, [sp, #36]	; 0x24
   178fe:	ldr	r2, [sp, #32]
   17900:	cmp	r2, #1
   17902:	ite	ge
   17904:	addge	r3, r3, r2
   17906:	addlt	r3, #1
   17908:	mov	r5, r3
   1790a:	mov.w	fp, #0
   1790e:	mov	r1, r4
   17910:	movs	r2, #1
   17912:	mov	r0, r9
   17914:	bl	1891c <__lshift>
   17918:	ldr	r1, [sp, #24]
   1791a:	str	r0, [sp, #40]	; 0x28
   1791c:	bl	189cc <__mcmp>
   17920:	cmp	r0, #0
   17922:	ble.w	17f30 <_dtoa_r+0xb58>
   17926:	ldrb.w	r2, [r5, #-1]
   1792a:	ldr	r1, [sp, #36]	; 0x24
   1792c:	subs	r3, r5, #1
   1792e:	b.n	1793a <_dtoa_r+0x562>
   17930:	cmp	r3, r1
   17932:	beq.w	17e1e <_dtoa_r+0xa46>
   17936:	ldrb.w	r2, [r3, #-1]!
   1793a:	cmp	r2, #57	; 0x39
   1793c:	add.w	r5, r3, #1
   17940:	beq.n	17930 <_dtoa_r+0x558>
   17942:	adds	r2, #1
   17944:	strb	r2, [r3, #0]
   17946:	ldr	r1, [sp, #24]
   17948:	mov	r0, r9
   1794a:	bl	18608 <_Bfree>
   1794e:	cmp	r6, #0
   17950:	beq.w	1776e <_dtoa_r+0x396>
   17954:	cmp.w	fp, #0
   17958:	beq.n	17966 <_dtoa_r+0x58e>
   1795a:	cmp	fp, r6
   1795c:	beq.n	17966 <_dtoa_r+0x58e>
   1795e:	mov	r1, fp
   17960:	mov	r0, r9
   17962:	bl	18608 <_Bfree>
   17966:	mov	r1, r6
   17968:	mov	r0, r9
   1796a:	bl	18608 <_Bfree>
   1796e:	b.n	1776e <_dtoa_r+0x396>
   17970:	movs	r3, #1
   17972:	str	r3, [sp, #52]	; 0x34
   17974:	b.n	1754e <_dtoa_r+0x176>
   17976:	ldr.w	r8, [sp, #16]
   1797a:	mov	r0, r8
   1797c:	bl	13c64 <__aeabi_i2d>
   17980:	mov	r2, r0
   17982:	mov	r3, r1
   17984:	mov	r0, r6
   17986:	mov	r1, r7
   17988:	bl	14200 <__aeabi_dcmpeq>
   1798c:	cmp	r0, #0
   1798e:	bne.w	17526 <_dtoa_r+0x14e>
   17992:	add.w	r3, r8, #4294967295
   17996:	str	r3, [sp, #16]
   17998:	b.n	17526 <_dtoa_r+0x14e>
   1799a:	ldr	r2, [sp, #28]
   1799c:	ldr	r3, [sp, #16]
   1799e:	subs	r2, r2, r3
   179a0:	negs	r3, r3
   179a2:	str	r3, [sp, #24]
   179a4:	movs	r3, #0
   179a6:	str	r2, [sp, #28]
   179a8:	str	r3, [sp, #48]	; 0x30
   179aa:	b.n	1756c <_dtoa_r+0x194>
   179ac:	rsb	r3, r8, #0
   179b0:	str	r3, [sp, #28]
   179b2:	mov.w	r8, #0
   179b6:	b.n	1755c <_dtoa_r+0x184>
   179b8:	ldr	r7, [sp, #24]
   179ba:	ldr	r5, [sp, #28]
   179bc:	ldr	r6, [sp, #44]	; 0x2c
   179be:	b.n	177d0 <_dtoa_r+0x3f8>
   179c0:	rsb	r4, r3, #32
   179c4:	lsl.w	r0, sl, r4
   179c8:	b.n	174c0 <_dtoa_r+0xe8>
   179ca:	str	r0, [sp, #52]	; 0x34
   179cc:	b.n	1754e <_dtoa_r+0x176>
   179ce:	nop
   179d0:	.word	0x40240000
   179d4:	movs	r3, #0
   179d6:	str	r3, [sp, #44]	; 0x2c
   179d8:	ldr	r3, [sp, #16]
   179da:	ldr	r2, [sp, #20]
   179dc:	add	r3, r2
   179de:	str	r3, [sp, #56]	; 0x38
   179e0:	adds	r3, #1
   179e2:	cmp	r3, #0
   179e4:	str	r3, [sp, #32]
   179e6:	ble.w	17ee4 <_dtoa_r+0xb0c>
   179ea:	ldr	r4, [sp, #32]
   179ec:	mov	r5, r4
   179ee:	movs	r1, #0
   179f0:	cmp	r5, #23
   179f2:	str.w	r1, [r9, #68]	; 0x44
   179f6:	bls.n	17a10 <_dtoa_r+0x638>
   179f8:	movs	r2, #1
   179fa:	movs	r3, #4
   179fc:	lsls	r3, r3, #1
   179fe:	add.w	r0, r3, #20
   17a02:	cmp	r0, r5
   17a04:	mov	r1, r2
   17a06:	add.w	r2, r2, #1
   17a0a:	bls.n	179fc <_dtoa_r+0x624>
   17a0c:	str.w	r1, [r9, #68]	; 0x44
   17a10:	mov	r0, r9
   17a12:	bl	185bc <_Balloc>
   17a16:	cmp	r4, #14
   17a18:	str	r0, [sp, #36]	; 0x24
   17a1a:	str.w	r0, [r9, #64]	; 0x40
   17a1e:	bhi.w	175ec <_dtoa_r+0x214>
   17a22:	cmp	r6, #0
   17a24:	beq.w	175ec <_dtoa_r+0x214>
   17a28:	ldr	r1, [sp, #16]
   17a2a:	cmp	r1, #0
   17a2c:	strd	sl, fp, [sp, #64]	; 0x40
   17a30:	ble.w	17f68 <_dtoa_r+0xb90>
   17a34:	ldr	r3, [pc, #576]	; (17c78 <_dtoa_r+0x8a0>)
   17a36:	and.w	r2, r1, #15
   17a3a:	asrs	r6, r1, #4
   17a3c:	add.w	r3, r3, r2, lsl #3
   17a40:	lsls	r0, r6, #27
   17a42:	ldrd	r4, r5, [r3]
   17a46:	bpl.w	17ed6 <_dtoa_r+0xafe>
   17a4a:	ldr	r3, [pc, #560]	; (17c7c <_dtoa_r+0x8a4>)
   17a4c:	mov	r0, sl
   17a4e:	mov	r1, fp
   17a50:	ldrd	r2, r3, [r3, #32]
   17a54:	bl	13f84 <__aeabi_ddiv>
   17a58:	strd	r0, r1, [sp, #72]	; 0x48
   17a5c:	and.w	r6, r6, #15
   17a60:	mov.w	sl, #3
   17a64:	cbz	r6, 17a88 <_dtoa_r+0x6b0>
   17a66:	ldr	r7, [pc, #532]	; (17c7c <_dtoa_r+0x8a4>)
   17a68:	lsls	r1, r6, #31
   17a6a:	bpl.n	17a80 <_dtoa_r+0x6a8>
   17a6c:	mov	r0, r4
   17a6e:	mov	r1, r5
   17a70:	ldrd	r2, r3, [r7]
   17a74:	bl	13d30 <__aeabi_dmul>
   17a78:	add.w	sl, sl, #1
   17a7c:	mov	r4, r0
   17a7e:	mov	r5, r1
   17a80:	asrs	r6, r6, #1
   17a82:	add.w	r7, r7, #8
   17a86:	bne.n	17a68 <_dtoa_r+0x690>
   17a88:	mov	r2, r4
   17a8a:	mov	r3, r5
   17a8c:	ldrd	r0, r1, [sp, #72]	; 0x48
   17a90:	bl	13f84 <__aeabi_ddiv>
   17a94:	mov	r6, r0
   17a96:	mov	r7, r1
   17a98:	ldr	r3, [sp, #52]	; 0x34
   17a9a:	cbz	r3, 17aae <_dtoa_r+0x6d6>
   17a9c:	movs	r2, #0
   17a9e:	ldr	r3, [pc, #480]	; (17c80 <_dtoa_r+0x8a8>)
   17aa0:	mov	r0, r6
   17aa2:	mov	r1, r7
   17aa4:	bl	14214 <__aeabi_dcmplt>
   17aa8:	cmp	r0, #0
   17aaa:	bne.w	180e2 <_dtoa_r+0xd0a>
   17aae:	mov	r0, sl
   17ab0:	bl	13c64 <__aeabi_i2d>
   17ab4:	mov	r2, r6
   17ab6:	mov	r3, r7
   17ab8:	bl	13d30 <__aeabi_dmul>
   17abc:	ldr	r3, [pc, #452]	; (17c84 <_dtoa_r+0x8ac>)
   17abe:	movs	r2, #0
   17ac0:	bl	139cc <__adddf3>
   17ac4:	ldr	r3, [sp, #32]
   17ac6:	mov	r4, r0
   17ac8:	sub.w	r5, r1, #54525952	; 0x3400000
   17acc:	cmp	r3, #0
   17ace:	beq.w	17e88 <_dtoa_r+0xab0>
   17ad2:	ldr	r3, [sp, #16]
   17ad4:	str	r3, [sp, #88]	; 0x58
   17ad6:	ldr	r3, [sp, #32]
   17ad8:	str	r3, [sp, #72]	; 0x48
   17ada:	ldr	r3, [sp, #44]	; 0x2c
   17adc:	cmp	r3, #0
   17ade:	beq.w	1800a <_dtoa_r+0xc32>
   17ae2:	ldr	r2, [sp, #72]	; 0x48
   17ae4:	ldr	r3, [pc, #400]	; (17c78 <_dtoa_r+0x8a0>)
   17ae6:	ldr	r1, [pc, #416]	; (17c88 <_dtoa_r+0x8b0>)
   17ae8:	add.w	r3, r3, r2, lsl #3
   17aec:	ldrd	r2, r3, [r3, #-8]
   17af0:	movs	r0, #0
   17af2:	bl	13f84 <__aeabi_ddiv>
   17af6:	mov	r2, r4
   17af8:	mov	r3, r5
   17afa:	bl	139c8 <__aeabi_dsub>
   17afe:	mov	sl, r0
   17b00:	mov	fp, r1
   17b02:	mov	r0, r6
   17b04:	mov	r1, r7
   17b06:	bl	14290 <__aeabi_d2iz>
   17b0a:	mov	r4, r0
   17b0c:	bl	13c64 <__aeabi_i2d>
   17b10:	mov	r2, r0
   17b12:	mov	r3, r1
   17b14:	mov	r0, r6
   17b16:	mov	r1, r7
   17b18:	bl	139c8 <__aeabi_dsub>
   17b1c:	adds	r4, #48	; 0x30
   17b1e:	ldr	r5, [sp, #36]	; 0x24
   17b20:	uxtb	r4, r4
   17b22:	mov	r6, r0
   17b24:	mov	r7, r1
   17b26:	strb	r4, [r5, #0]
   17b28:	mov	r2, r0
   17b2a:	mov	r3, r1
   17b2c:	mov	r0, sl
   17b2e:	mov	r1, fp
   17b30:	adds	r5, #1
   17b32:	bl	14250 <__aeabi_dcmpgt>
   17b36:	cmp	r0, #0
   17b38:	bne.n	17bdc <_dtoa_r+0x804>
   17b3a:	mov	r2, r6
   17b3c:	mov	r3, r7
   17b3e:	movs	r0, #0
   17b40:	ldr	r1, [pc, #316]	; (17c80 <_dtoa_r+0x8a8>)
   17b42:	bl	139c8 <__aeabi_dsub>
   17b46:	mov	r2, r0
   17b48:	mov	r3, r1
   17b4a:	mov	r0, sl
   17b4c:	mov	r1, fp
   17b4e:	bl	14250 <__aeabi_dcmpgt>
   17b52:	cmp	r0, #0
   17b54:	bne.w	18168 <_dtoa_r+0xd90>
   17b58:	ldr	r2, [sp, #72]	; 0x48
   17b5a:	cmp	r2, #1
   17b5c:	ble.w	17f4e <_dtoa_r+0xb76>
   17b60:	ldr	r3, [sp, #72]	; 0x48
   17b62:	ldr	r2, [sp, #36]	; 0x24
   17b64:	str.w	r8, [sp, #72]	; 0x48
   17b68:	add	r3, r2
   17b6a:	mov	r8, r3
   17b6c:	b.n	17b8a <_dtoa_r+0x7b2>
   17b6e:	movs	r0, #0
   17b70:	ldr	r1, [pc, #268]	; (17c80 <_dtoa_r+0x8a8>)
   17b72:	bl	139c8 <__aeabi_dsub>
   17b76:	mov	r2, sl
   17b78:	mov	r3, fp
   17b7a:	bl	14214 <__aeabi_dcmplt>
   17b7e:	cmp	r0, #0
   17b80:	bne.w	18168 <_dtoa_r+0xd90>
   17b84:	cmp	r5, r8
   17b86:	beq.w	17f4a <_dtoa_r+0xb72>
   17b8a:	mov	r0, sl
   17b8c:	mov	r1, fp
   17b8e:	movs	r2, #0
   17b90:	ldr	r3, [pc, #248]	; (17c8c <_dtoa_r+0x8b4>)
   17b92:	bl	13d30 <__aeabi_dmul>
   17b96:	movs	r2, #0
   17b98:	ldr	r3, [pc, #240]	; (17c8c <_dtoa_r+0x8b4>)
   17b9a:	mov	sl, r0
   17b9c:	mov	fp, r1
   17b9e:	mov	r0, r6
   17ba0:	mov	r1, r7
   17ba2:	bl	13d30 <__aeabi_dmul>
   17ba6:	mov	r7, r1
   17ba8:	mov	r6, r0
   17baa:	bl	14290 <__aeabi_d2iz>
   17bae:	mov	r4, r0
   17bb0:	bl	13c64 <__aeabi_i2d>
   17bb4:	mov	r2, r0
   17bb6:	mov	r3, r1
   17bb8:	mov	r0, r6
   17bba:	mov	r1, r7
   17bbc:	bl	139c8 <__aeabi_dsub>
   17bc0:	adds	r4, #48	; 0x30
   17bc2:	uxtb	r4, r4
   17bc4:	mov	r2, sl
   17bc6:	mov	r3, fp
   17bc8:	strb.w	r4, [r5], #1
   17bcc:	mov	r6, r0
   17bce:	mov	r7, r1
   17bd0:	bl	14214 <__aeabi_dcmplt>
   17bd4:	mov	r2, r6
   17bd6:	mov	r3, r7
   17bd8:	cmp	r0, #0
   17bda:	beq.n	17b6e <_dtoa_r+0x796>
   17bdc:	ldr	r3, [sp, #88]	; 0x58
   17bde:	str	r3, [sp, #16]
   17be0:	b.n	1776e <_dtoa_r+0x396>
   17be2:	movs	r3, #0
   17be4:	str	r3, [sp, #44]	; 0x2c
   17be6:	ldr	r3, [sp, #20]
   17be8:	cmp	r3, #0
   17bea:	ble.w	17eee <_dtoa_r+0xb16>
   17bee:	mov	r5, r3
   17bf0:	mov	r4, r3
   17bf2:	str	r3, [sp, #56]	; 0x38
   17bf4:	str	r3, [sp, #32]
   17bf6:	b.n	179ee <_dtoa_r+0x616>
   17bf8:	movs	r3, #1
   17bfa:	str	r3, [sp, #44]	; 0x2c
   17bfc:	b.n	17be6 <_dtoa_r+0x80e>
   17bfe:	str	r4, [sp, #40]	; 0x28
   17c00:	ldr	r2, [sp, #24]
   17c02:	ldr	r1, [sp, #40]	; 0x28
   17c04:	mov	r0, r9
   17c06:	bl	1887c <__pow5mult>
   17c0a:	mov	r4, r0
   17c0c:	b.n	1782c <_dtoa_r+0x454>
   17c0e:	ldr	r3, [sp, #32]
   17c10:	cmp	r3, #0
   17c12:	bgt.w	17612 <_dtoa_r+0x23a>
   17c16:	bne.w	17eb8 <_dtoa_r+0xae0>
   17c1a:	movs	r2, #0
   17c1c:	ldr	r3, [pc, #112]	; (17c90 <_dtoa_r+0x8b8>)
   17c1e:	ldrd	r0, r1, [sp]
   17c22:	bl	13d30 <__aeabi_dmul>
   17c26:	mov	r3, fp
   17c28:	mov	r2, sl
   17c2a:	bl	1423c <__aeabi_dcmpge>
   17c2e:	ldr	r3, [sp, #32]
   17c30:	str	r3, [sp, #24]
   17c32:	mov	r6, r3
   17c34:	cmp	r0, #0
   17c36:	beq.w	17e0e <_dtoa_r+0xa36>
   17c3a:	ldr	r3, [sp, #20]
   17c3c:	ldr	r5, [sp, #36]	; 0x24
   17c3e:	mvns	r3, r3
   17c40:	str	r3, [sp, #16]
   17c42:	ldr	r1, [sp, #24]
   17c44:	mov	r0, r9
   17c46:	bl	18608 <_Bfree>
   17c4a:	cmp	r6, #0
   17c4c:	beq.w	1776e <_dtoa_r+0x396>
   17c50:	b.n	17966 <_dtoa_r+0x58e>
   17c52:	ldr	r2, [sp, #60]	; 0x3c
   17c54:	cmp	r2, #0
   17c56:	beq.w	180ca <_dtoa_r+0xcf2>
   17c5a:	addw	r3, r3, #1075	; 0x433
   17c5e:	ldr	r7, [sp, #24]
   17c60:	ldr	r5, [sp, #28]
   17c62:	b.n	177be <_dtoa_r+0x3e6>
   17c64:	movs	r0, #28
   17c66:	b.n	1787e <_dtoa_r+0x4a6>
   17c68:	ldr	r3, [sp, #0]
   17c6a:	cmp	r3, #1
   17c6c:	ble.w	18170 <_dtoa_r+0xd98>
   17c70:	ldr	r7, [sp, #48]	; 0x30
   17c72:	movs	r0, #1
   17c74:	b.n	17866 <_dtoa_r+0x48e>
   17c76:	nop
   17c78:	.word	0x00019c40
   17c7c:	.word	0x00019d08
   17c80:	.word	0x3ff00000
   17c84:	.word	0x401c0000
   17c88:	.word	0x3fe00000
   17c8c:	.word	0x40240000
   17c90:	.word	0x40140000
   17c94:	mov	r1, r6
   17c96:	movs	r3, #0
   17c98:	movs	r2, #10
   17c9a:	mov	r0, r9
   17c9c:	bl	1861c <__multadd>
   17ca0:	ldr	r3, [sp, #56]	; 0x38
   17ca2:	cmp	r3, #0
   17ca4:	mov	r6, r0
   17ca6:	ble.w	181c4 <_dtoa_r+0xdec>
   17caa:	str	r3, [sp, #32]
   17cac:	cmp	r5, #0
   17cae:	ble.n	17cbc <_dtoa_r+0x8e4>
   17cb0:	mov	r1, r6
   17cb2:	mov	r2, r5
   17cb4:	mov	r0, r9
   17cb6:	bl	1891c <__lshift>
   17cba:	mov	r6, r0
   17cbc:	cmp	r7, #0
   17cbe:	bne.w	17fba <_dtoa_r+0xbe2>
   17cc2:	mov	r8, r6
   17cc4:	ldr	r3, [sp, #32]
   17cc6:	ldr	r2, [sp, #36]	; 0x24
   17cc8:	subs	r3, #1
   17cca:	adds	r3, r2, r3
   17ccc:	str	r3, [sp, #32]
   17cce:	and.w	r3, sl, #1
   17cd2:	str	r3, [sp, #40]	; 0x28
   17cd4:	mov	r7, r2
   17cd6:	ldr.w	fp, [sp, #24]
   17cda:	mov	r0, r4
   17cdc:	mov	r1, fp
   17cde:	bl	172ac <quorem>
   17ce2:	mov	r1, r6
   17ce4:	mov	r5, r0
   17ce6:	mov	r0, r4
   17ce8:	bl	189cc <__mcmp>
   17cec:	mov	r2, r8
   17cee:	mov	r1, fp
   17cf0:	mov	sl, r0
   17cf2:	mov	r0, r9
   17cf4:	bl	18a10 <__mdiff>
   17cf8:	ldr	r2, [r0, #12]
   17cfa:	mov	fp, r0
   17cfc:	add.w	r3, r5, #48	; 0x30
   17d00:	cmp	r2, #0
   17d02:	bne.n	17d98 <_dtoa_r+0x9c0>
   17d04:	mov	r1, r0
   17d06:	mov	r0, r4
   17d08:	str	r3, [sp, #28]
   17d0a:	bl	189cc <__mcmp>
   17d0e:	mov	r1, fp
   17d10:	str	r0, [sp, #20]
   17d12:	mov	r0, r9
   17d14:	bl	18608 <_Bfree>
   17d18:	ldr	r2, [sp, #20]
   17d1a:	ldr	r3, [sp, #28]
   17d1c:	cbnz	r2, 17d2a <_dtoa_r+0x952>
   17d1e:	ldr	r1, [sp, #0]
   17d20:	cbnz	r1, 17d2a <_dtoa_r+0x952>
   17d22:	ldr	r1, [sp, #40]	; 0x28
   17d24:	cmp	r1, #0
   17d26:	beq.w	18194 <_dtoa_r+0xdbc>
   17d2a:	cmp.w	sl, #0
   17d2e:	blt.w	17ef8 <_dtoa_r+0xb20>
   17d32:	bne.n	17d40 <_dtoa_r+0x968>
   17d34:	ldr	r1, [sp, #0]
   17d36:	cbnz	r1, 17d40 <_dtoa_r+0x968>
   17d38:	ldr	r1, [sp, #40]	; 0x28
   17d3a:	cmp	r1, #0
   17d3c:	beq.w	17ef8 <_dtoa_r+0xb20>
   17d40:	cmp	r2, #0
   17d42:	bgt.w	17fe2 <_dtoa_r+0xc0a>
   17d46:	ldr	r2, [sp, #32]
   17d48:	strb	r3, [r7, #0]
   17d4a:	add.w	sl, r7, #1
   17d4e:	cmp	r7, r2
   17d50:	mov	r5, sl
   17d52:	beq.w	17ffa <_dtoa_r+0xc22>
   17d56:	mov	r1, r4
   17d58:	movs	r3, #0
   17d5a:	movs	r2, #10
   17d5c:	mov	r0, r9
   17d5e:	bl	1861c <__multadd>
   17d62:	cmp	r6, r8
   17d64:	mov	r4, r0
   17d66:	mov	r1, r6
   17d68:	mov.w	r3, #0
   17d6c:	mov.w	r2, #10
   17d70:	mov	r0, r9
   17d72:	beq.n	17d8c <_dtoa_r+0x9b4>
   17d74:	bl	1861c <__multadd>
   17d78:	mov	r1, r8
   17d7a:	mov	r6, r0
   17d7c:	movs	r3, #0
   17d7e:	movs	r2, #10
   17d80:	mov	r0, r9
   17d82:	bl	1861c <__multadd>
   17d86:	mov	r7, sl
   17d88:	mov	r8, r0
   17d8a:	b.n	17cd6 <_dtoa_r+0x8fe>
   17d8c:	bl	1861c <__multadd>
   17d90:	mov	r7, sl
   17d92:	mov	r6, r0
   17d94:	mov	r8, r0
   17d96:	b.n	17cd6 <_dtoa_r+0x8fe>
   17d98:	mov	r1, r0
   17d9a:	mov	r0, r9
   17d9c:	str	r3, [sp, #20]
   17d9e:	bl	18608 <_Bfree>
   17da2:	movs	r2, #1
   17da4:	ldr	r3, [sp, #20]
   17da6:	b.n	17d2a <_dtoa_r+0x952>
   17da8:	ldr	r1, [sp, #24]
   17daa:	mov	r0, r4
   17dac:	bl	189cc <__mcmp>
   17db0:	cmp	r0, #0
   17db2:	bge.w	178b4 <_dtoa_r+0x4dc>
   17db6:	mov	r1, r4
   17db8:	ldr	r4, [sp, #16]
   17dba:	movs	r3, #0
   17dbc:	subs	r4, #1
   17dbe:	movs	r2, #10
   17dc0:	mov	r0, r9
   17dc2:	str	r4, [sp, #16]
   17dc4:	bl	1861c <__multadd>
   17dc8:	ldr	r3, [sp, #44]	; 0x2c
   17dca:	mov	r4, r0
   17dcc:	cmp	r3, #0
   17dce:	bne.w	17c94 <_dtoa_r+0x8bc>
   17dd2:	ldr	r3, [sp, #56]	; 0x38
   17dd4:	cmp	r3, #0
   17dd6:	ble.w	181b4 <_dtoa_r+0xddc>
   17dda:	str	r3, [sp, #32]
   17ddc:	b.n	178c4 <_dtoa_r+0x4ec>
   17dde:	ldr	r4, [sp, #40]	; 0x28
   17de0:	b.n	1782c <_dtoa_r+0x454>
   17de2:	ldr	r3, [sp, #0]
   17de4:	cmp	r3, #2
   17de6:	ble.w	178bc <_dtoa_r+0x4e4>
   17dea:	ldr	r3, [sp, #32]
   17dec:	cmp	r3, #0
   17dee:	bne.w	1812c <_dtoa_r+0xd54>
   17df2:	ldr	r1, [sp, #24]
   17df4:	movs	r2, #5
   17df6:	mov	r0, r9
   17df8:	bl	1861c <__multadd>
   17dfc:	mov	r1, r0
   17dfe:	str	r0, [sp, #24]
   17e00:	mov	r0, r4
   17e02:	bl	189cc <__mcmp>
   17e06:	cmp	r0, #0
   17e08:	str	r4, [sp, #40]	; 0x28
   17e0a:	ble.w	17c3a <_dtoa_r+0x862>
   17e0e:	ldr	r2, [sp, #16]
   17e10:	ldr	r1, [sp, #36]	; 0x24
   17e12:	movs	r3, #49	; 0x31
   17e14:	adds	r2, #1
   17e16:	str	r2, [sp, #16]
   17e18:	strb	r3, [r1, #0]
   17e1a:	adds	r5, r1, #1
   17e1c:	b.n	17c42 <_dtoa_r+0x86a>
   17e1e:	ldr	r2, [sp, #16]
   17e20:	adds	r2, #1
   17e22:	str	r2, [sp, #16]
   17e24:	ldr	r2, [sp, #36]	; 0x24
   17e26:	movs	r3, #49	; 0x31
   17e28:	strb	r3, [r2, #0]
   17e2a:	b.n	17946 <_dtoa_r+0x56e>
   17e2c:	movs	r3, #1
   17e2e:	str	r3, [sp, #44]	; 0x2c
   17e30:	b.n	179d8 <_dtoa_r+0x600>
   17e32:	ldr.w	r9, [sp, #20]
   17e36:	b.n	1776e <_dtoa_r+0x396>
   17e38:	cmp.w	sl, #0
   17e3c:	bne.w	17852 <_dtoa_r+0x47a>
   17e40:	ubfx	r3, fp, #0, #20
   17e44:	cmp	r3, #0
   17e46:	bne.w	180c6 <_dtoa_r+0xcee>
   17e4a:	bic.w	r7, fp, #2147483648	; 0x80000000
   17e4e:	lsrs	r7, r7, #20
   17e50:	lsls	r7, r7, #20
   17e52:	cbz	r7, 17e60 <_dtoa_r+0xa88>
   17e54:	ldr	r3, [sp, #28]
   17e56:	adds	r3, #1
   17e58:	str	r3, [sp, #28]
   17e5a:	add.w	r8, r8, #1
   17e5e:	movs	r7, #1
   17e60:	ldr	r3, [sp, #48]	; 0x30
   17e62:	movs	r0, #1
   17e64:	cmp	r3, #0
   17e66:	beq.w	17866 <_dtoa_r+0x48e>
   17e6a:	b.n	17854 <_dtoa_r+0x47c>
   17e6c:	mov	r0, sl
   17e6e:	bl	13c64 <__aeabi_i2d>
   17e72:	mov	r2, r6
   17e74:	mov	r3, r7
   17e76:	bl	13d30 <__aeabi_dmul>
   17e7a:	movs	r2, #0
   17e7c:	ldr	r3, [pc, #764]	; (1817c <_dtoa_r+0xda4>)
   17e7e:	bl	139cc <__adddf3>
   17e82:	mov	r4, r0
   17e84:	sub.w	r5, r1, #54525952	; 0x3400000
   17e88:	mov	r0, r6
   17e8a:	mov	r1, r7
   17e8c:	movs	r2, #0
   17e8e:	ldr	r3, [pc, #752]	; (18180 <_dtoa_r+0xda8>)
   17e90:	bl	139c8 <__aeabi_dsub>
   17e94:	mov	r2, r4
   17e96:	mov	r3, r5
   17e98:	mov	r6, r0
   17e9a:	mov	r7, r1
   17e9c:	bl	14250 <__aeabi_dcmpgt>
   17ea0:	cmp	r0, #0
   17ea2:	bne.w	18002 <_dtoa_r+0xc2a>
   17ea6:	mov	r2, r4
   17ea8:	add.w	r3, r5, #2147483648	; 0x80000000
   17eac:	mov	r0, r6
   17eae:	mov	r1, r7
   17eb0:	bl	14214 <__aeabi_dcmplt>
   17eb4:	cmp	r0, #0
   17eb6:	beq.n	17f4e <_dtoa_r+0xb76>
   17eb8:	movs	r3, #0
   17eba:	str	r3, [sp, #24]
   17ebc:	mov	r6, r3
   17ebe:	b.n	17c3a <_dtoa_r+0x862>
   17ec0:	ldr	r0, [sp, #36]	; 0x24
   17ec2:	b.w	1744a <_dtoa_r+0x72>
   17ec6:	ldr	r3, [sp, #24]
   17ec8:	ldr	r2, [sp, #48]	; 0x30
   17eca:	str	r7, [sp, #24]
   17ecc:	subs	r3, r7, r3
   17ece:	add	r2, r3
   17ed0:	str	r2, [sp, #48]	; 0x30
   17ed2:	movs	r7, #0
   17ed4:	b.n	177b2 <_dtoa_r+0x3da>
   17ed6:	vldr	d7, [sp, #64]	; 0x40
   17eda:	mov.w	sl, #2
   17ede:	vstr	d7, [sp, #72]	; 0x48
   17ee2:	b.n	17a64 <_dtoa_r+0x68c>
   17ee4:	mov	r4, r3
   17ee6:	movs	r1, #0
   17ee8:	str.w	r1, [r9, #68]	; 0x44
   17eec:	b.n	17a10 <_dtoa_r+0x638>
   17eee:	movs	r4, #1
   17ef0:	str	r4, [sp, #56]	; 0x38
   17ef2:	str	r4, [sp, #32]
   17ef4:	str	r4, [sp, #20]
   17ef6:	b.n	17ee6 <_dtoa_r+0xb0e>
   17ef8:	cmp	r2, #0
   17efa:	mov	sl, r3
   17efc:	ble.n	17f22 <_dtoa_r+0xb4a>
   17efe:	mov	r1, r4
   17f00:	movs	r2, #1
   17f02:	mov	r0, r9
   17f04:	bl	1891c <__lshift>
   17f08:	ldr	r1, [sp, #24]
   17f0a:	mov	r4, r0
   17f0c:	bl	189cc <__mcmp>
   17f10:	cmp	r0, #0
   17f12:	ble.w	181a6 <_dtoa_r+0xdce>
   17f16:	cmp.w	sl, #57	; 0x39
   17f1a:	beq.w	18130 <_dtoa_r+0xd58>
   17f1e:	add.w	sl, r5, #49	; 0x31
   17f22:	mov	fp, r6
   17f24:	strb.w	sl, [r7]
   17f28:	adds	r5, r7, #1
   17f2a:	mov	r6, r8
   17f2c:	str	r4, [sp, #40]	; 0x28
   17f2e:	b.n	17946 <_dtoa_r+0x56e>
   17f30:	bne.n	17f3c <_dtoa_r+0xb64>
   17f32:	tst.w	sl, #1
   17f36:	beq.n	17f3c <_dtoa_r+0xb64>
   17f38:	b.n	17926 <_dtoa_r+0x54e>
   17f3a:	mov	r5, r2
   17f3c:	ldrb.w	r3, [r5, #-1]
   17f40:	cmp	r3, #48	; 0x30
   17f42:	add.w	r2, r5, #4294967295
   17f46:	beq.n	17f3a <_dtoa_r+0xb62>
   17f48:	b.n	17946 <_dtoa_r+0x56e>
   17f4a:	ldr.w	r8, [sp, #72]	; 0x48
   17f4e:	ldrd	sl, fp, [sp, #64]	; 0x40
   17f52:	b.w	175ec <_dtoa_r+0x214>
   17f56:	ldr	r1, [sp, #36]	; 0x24
   17f58:	movs	r2, #48	; 0x30
   17f5a:	strb	r2, [r1, #0]
   17f5c:	ldr	r2, [sp, #16]
   17f5e:	ldrb.w	r4, [r5, #-1]
   17f62:	adds	r2, #1
   17f64:	str	r2, [sp, #16]
   17f66:	b.n	1776a <_dtoa_r+0x392>
   17f68:	ldr	r3, [sp, #16]
   17f6a:	negs	r4, r3
   17f6c:	cmp	r4, #0
   17f6e:	beq.w	180d8 <_dtoa_r+0xd00>
   17f72:	ldr	r3, [pc, #528]	; (18184 <_dtoa_r+0xdac>)
   17f74:	and.w	r2, r4, #15
   17f78:	add.w	r3, r3, r2, lsl #3
   17f7c:	ldrd	r2, r3, [r3]
   17f80:	ldrd	r0, r1, [sp, #64]	; 0x40
   17f84:	bl	13d30 <__aeabi_dmul>
   17f88:	asrs	r4, r4, #4
   17f8a:	mov	r6, r0
   17f8c:	mov	r7, r1
   17f8e:	beq.w	181be <_dtoa_r+0xde6>
   17f92:	ldr	r5, [pc, #500]	; (18188 <_dtoa_r+0xdb0>)
   17f94:	mov.w	sl, #2
   17f98:	lsls	r2, r4, #31
   17f9a:	bpl.n	17fb0 <_dtoa_r+0xbd8>
   17f9c:	mov	r0, r6
   17f9e:	mov	r1, r7
   17fa0:	ldrd	r2, r3, [r5]
   17fa4:	bl	13d30 <__aeabi_dmul>
   17fa8:	add.w	sl, sl, #1
   17fac:	mov	r6, r0
   17fae:	mov	r7, r1
   17fb0:	asrs	r4, r4, #1
   17fb2:	add.w	r5, r5, #8
   17fb6:	bne.n	17f98 <_dtoa_r+0xbc0>
   17fb8:	b.n	17a98 <_dtoa_r+0x6c0>
   17fba:	ldr	r1, [r6, #4]
   17fbc:	mov	r0, r9
   17fbe:	bl	185bc <_Balloc>
   17fc2:	ldr	r3, [r6, #16]
   17fc4:	adds	r2, r3, #2
   17fc6:	mov	r5, r0
   17fc8:	lsls	r2, r2, #2
   17fca:	add.w	r1, r6, #12
   17fce:	adds	r0, #12
   17fd0:	bl	11bf8 <memcpy>
   17fd4:	mov	r1, r5
   17fd6:	movs	r2, #1
   17fd8:	mov	r0, r9
   17fda:	bl	1891c <__lshift>
   17fde:	mov	r8, r0
   17fe0:	b.n	17cc4 <_dtoa_r+0x8ec>
   17fe2:	cmp	r3, #57	; 0x39
   17fe4:	beq.w	18130 <_dtoa_r+0xd58>
   17fe8:	add.w	sl, r3, #1
   17fec:	mov	fp, r6
   17fee:	strb.w	sl, [r7]
   17ff2:	adds	r5, r7, #1
   17ff4:	mov	r6, r8
   17ff6:	str	r4, [sp, #40]	; 0x28
   17ff8:	b.n	17946 <_dtoa_r+0x56e>
   17ffa:	mov	fp, r6
   17ffc:	mov	sl, r3
   17ffe:	mov	r6, r8
   18000:	b.n	1790e <_dtoa_r+0x536>
   18002:	movs	r3, #0
   18004:	str	r3, [sp, #24]
   18006:	mov	r6, r3
   18008:	b.n	17e0e <_dtoa_r+0xa36>
   1800a:	ldr	r3, [sp, #72]	; 0x48
   1800c:	ldr	r1, [pc, #372]	; (18184 <_dtoa_r+0xdac>)
   1800e:	subs	r2, r3, #1
   18010:	add.w	r1, r1, r2, lsl #3
   18014:	mov	r3, r5
   18016:	str	r2, [sp, #92]	; 0x5c
   18018:	ldrd	r0, r1, [r1]
   1801c:	mov	r2, r4
   1801e:	bl	13d30 <__aeabi_dmul>
   18022:	strd	r0, r1, [sp, #80]	; 0x50
   18026:	mov	r1, r7
   18028:	mov	r0, r6
   1802a:	bl	14290 <__aeabi_d2iz>
   1802e:	mov	r4, r0
   18030:	bl	13c64 <__aeabi_i2d>
   18034:	mov	r3, r1
   18036:	mov	r2, r0
   18038:	mov	r1, r7
   1803a:	mov	r0, r6
   1803c:	bl	139c8 <__aeabi_dsub>
   18040:	ldr	r3, [sp, #72]	; 0x48
   18042:	mov	r7, r1
   18044:	ldr	r1, [sp, #36]	; 0x24
   18046:	adds	r4, #48	; 0x30
   18048:	cmp	r3, #1
   1804a:	mov	r6, r0
   1804c:	strb	r4, [r1, #0]
   1804e:	add.w	r5, r1, #1
   18052:	beq.n	18096 <_dtoa_r+0xcbe>
   18054:	ldr	r3, [sp, #72]	; 0x48
   18056:	ldr	r2, [sp, #36]	; 0x24
   18058:	add	r3, r2
   1805a:	mov	sl, r3
   1805c:	mov	fp, r5
   1805e:	movs	r2, #0
   18060:	ldr	r3, [pc, #296]	; (1818c <_dtoa_r+0xdb4>)
   18062:	mov	r0, r6
   18064:	mov	r1, r7
   18066:	bl	13d30 <__aeabi_dmul>
   1806a:	mov	r7, r1
   1806c:	mov	r6, r0
   1806e:	bl	14290 <__aeabi_d2iz>
   18072:	mov	r4, r0
   18074:	bl	13c64 <__aeabi_i2d>
   18078:	adds	r4, #48	; 0x30
   1807a:	mov	r2, r0
   1807c:	mov	r3, r1
   1807e:	mov	r0, r6
   18080:	mov	r1, r7
   18082:	bl	139c8 <__aeabi_dsub>
   18086:	strb.w	r4, [fp], #1
   1808a:	cmp	sl, fp
   1808c:	mov	r6, r0
   1808e:	mov	r7, r1
   18090:	bne.n	1805e <_dtoa_r+0xc86>
   18092:	ldr	r3, [sp, #92]	; 0x5c
   18094:	add	r5, r3
   18096:	movs	r2, #0
   18098:	ldr	r3, [pc, #244]	; (18190 <_dtoa_r+0xdb8>)
   1809a:	ldrd	r0, r1, [sp, #80]	; 0x50
   1809e:	bl	139cc <__adddf3>
   180a2:	mov	r2, r6
   180a4:	mov	r3, r7
   180a6:	bl	14214 <__aeabi_dcmplt>
   180aa:	cmp	r0, #0
   180ac:	beq.n	18140 <_dtoa_r+0xd68>
   180ae:	ldr	r3, [sp, #88]	; 0x58
   180b0:	str	r3, [sp, #16]
   180b2:	ldrb.w	r4, [r5, #-1]
   180b6:	b.w	17752 <_dtoa_r+0x37a>
   180ba:	ldr	r3, [sp, #28]
   180bc:	ldr	r2, [sp, #32]
   180be:	subs	r5, r3, r2
   180c0:	movs	r3, #0
   180c2:	b.w	177be <_dtoa_r+0x3e6>
   180c6:	movs	r7, #0
   180c8:	b.n	17e60 <_dtoa_r+0xa88>
   180ca:	ldr	r3, [sp, #96]	; 0x60
   180cc:	ldr	r7, [sp, #24]
   180ce:	ldr	r5, [sp, #28]
   180d0:	rsb	r3, r3, #54	; 0x36
   180d4:	b.w	177be <_dtoa_r+0x3e6>
   180d8:	ldrd	r6, r7, [sp, #64]	; 0x40
   180dc:	mov.w	sl, #2
   180e0:	b.n	17a98 <_dtoa_r+0x6c0>
   180e2:	ldr	r3, [sp, #32]
   180e4:	cmp	r3, #0
   180e6:	beq.w	17e6c <_dtoa_r+0xa94>
   180ea:	ldr	r3, [sp, #56]	; 0x38
   180ec:	cmp	r3, #0
   180ee:	ble.w	17f4e <_dtoa_r+0xb76>
   180f2:	movs	r2, #0
   180f4:	ldr	r3, [pc, #148]	; (1818c <_dtoa_r+0xdb4>)
   180f6:	mov	r0, r6
   180f8:	mov	r1, r7
   180fa:	bl	13d30 <__aeabi_dmul>
   180fe:	mov	r6, r0
   18100:	mov	r7, r1
   18102:	add.w	r0, sl, #1
   18106:	bl	13c64 <__aeabi_i2d>
   1810a:	mov	r2, r6
   1810c:	mov	r3, r7
   1810e:	bl	13d30 <__aeabi_dmul>
   18112:	movs	r2, #0
   18114:	ldr	r3, [pc, #100]	; (1817c <_dtoa_r+0xda4>)
   18116:	bl	139cc <__adddf3>
   1811a:	ldr	r2, [sp, #16]
   1811c:	ldr	r3, [sp, #56]	; 0x38
   1811e:	str	r3, [sp, #72]	; 0x48
   18120:	subs	r2, #1
   18122:	mov	r4, r0
   18124:	sub.w	r5, r1, #54525952	; 0x3400000
   18128:	str	r2, [sp, #88]	; 0x58
   1812a:	b.n	17ada <_dtoa_r+0x702>
   1812c:	str	r4, [sp, #40]	; 0x28
   1812e:	b.n	17c3a <_dtoa_r+0x862>
   18130:	movs	r2, #57	; 0x39
   18132:	mov	fp, r6
   18134:	str	r4, [sp, #40]	; 0x28
   18136:	mov	r6, r8
   18138:	strb	r2, [r7, #0]
   1813a:	adds	r5, r7, #1
   1813c:	b.w	1792a <_dtoa_r+0x552>
   18140:	ldrd	r2, r3, [sp, #80]	; 0x50
   18144:	movs	r0, #0
   18146:	ldr	r1, [pc, #72]	; (18190 <_dtoa_r+0xdb8>)
   18148:	bl	139c8 <__aeabi_dsub>
   1814c:	mov	r2, r6
   1814e:	mov	r3, r7
   18150:	bl	14250 <__aeabi_dcmpgt>
   18154:	cbnz	r0, 1815a <_dtoa_r+0xd82>
   18156:	b.n	17f4e <_dtoa_r+0xb76>
   18158:	mov	r5, r2
   1815a:	ldrb.w	r3, [r5, #-1]
   1815e:	cmp	r3, #48	; 0x30
   18160:	add.w	r2, r5, #4294967295
   18164:	beq.n	18158 <_dtoa_r+0xd80>
   18166:	b.n	17bdc <_dtoa_r+0x804>
   18168:	ldr	r3, [sp, #88]	; 0x58
   1816a:	str	r3, [sp, #16]
   1816c:	b.w	17752 <_dtoa_r+0x37a>
   18170:	cmp.w	sl, #0
   18174:	bne.w	17c70 <_dtoa_r+0x898>
   18178:	b.n	17e40 <_dtoa_r+0xa68>
   1817a:	nop
   1817c:	.word	0x401c0000
   18180:	.word	0x40140000
   18184:	.word	0x00019c40
   18188:	.word	0x00019d08
   1818c:	.word	0x40240000
   18190:	.word	0x3fe00000
   18194:	cmp	r3, #57	; 0x39
   18196:	mov	fp, sl
   18198:	mov	sl, r3
   1819a:	beq.n	18130 <_dtoa_r+0xd58>
   1819c:	cmp.w	fp, #0
   181a0:	bgt.w	17f1e <_dtoa_r+0xb46>
   181a4:	b.n	17f22 <_dtoa_r+0xb4a>
   181a6:	bne.w	17f22 <_dtoa_r+0xb4a>
   181aa:	tst.w	sl, #1
   181ae:	beq.w	17f22 <_dtoa_r+0xb4a>
   181b2:	b.n	17f16 <_dtoa_r+0xb3e>
   181b4:	ldr	r3, [sp, #0]
   181b6:	cmp	r3, #2
   181b8:	bgt.n	18206 <_dtoa_r+0xe2e>
   181ba:	ldr	r3, [sp, #56]	; 0x38
   181bc:	b.n	17dda <_dtoa_r+0xa02>
   181be:	mov.w	sl, #2
   181c2:	b.n	17a98 <_dtoa_r+0x6c0>
   181c4:	ldr	r3, [sp, #0]
   181c6:	cmp	r3, #2
   181c8:	bgt.n	18206 <_dtoa_r+0xe2e>
   181ca:	ldr	r3, [sp, #56]	; 0x38
   181cc:	b.n	17caa <_dtoa_r+0x8d2>
   181ce:	movs	r4, #0
   181d0:	str.w	r4, [r9, #68]	; 0x44
   181d4:	mov	r1, r4
   181d6:	mov	r0, r9
   181d8:	bl	185bc <_Balloc>
   181dc:	mov.w	r3, #4294967295
   181e0:	str	r3, [sp, #32]
   181e2:	str	r3, [sp, #56]	; 0x38
   181e4:	movs	r3, #1
   181e6:	str	r0, [sp, #36]	; 0x24
   181e8:	str	r4, [sp, #20]
   181ea:	str.w	r0, [r9, #64]	; 0x40
   181ee:	str	r3, [sp, #44]	; 0x2c
   181f0:	b.w	175ec <_dtoa_r+0x214>
   181f4:	beq.w	17888 <_dtoa_r+0x4b0>
   181f8:	rsb	r0, r0, #60	; 0x3c
   181fc:	b.w	1787e <_dtoa_r+0x4a6>
   18200:	movs	r6, #1
   18202:	b.w	1757e <_dtoa_r+0x1a6>
   18206:	ldr	r3, [sp, #56]	; 0x38
   18208:	str	r3, [sp, #32]
   1820a:	b.n	17dea <_dtoa_r+0xa12>

0001820c <fcvtbuf>:
   1820c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18210:	vpush	{d8}
   18214:	vmov.f32	s16, s0
   18218:	vmov.f32	s17, s1
   1821c:	ldr	r5, [pc, #224]	; (18300 <fcvtbuf+0xf4>)
   1821e:	sub	sp, #20
   18220:	ldr	r7, [r5, #0]
   18222:	mov	r4, r0
   18224:	mov	r6, r1
   18226:	mov	r8, r2
   18228:	mov	r5, r3
   1822a:	cmp	r3, #0
   1822c:	beq.n	182ca <fcvtbuf+0xbe>
   1822e:	movs	r2, #0
   18230:	ldr	r3, [pc, #208]	; (18304 <fcvtbuf+0xf8>)
   18232:	vmov	r0, r1, d8
   18236:	bl	14214 <__aeabi_dcmplt>
   1823a:	cbnz	r0, 1829c <fcvtbuf+0x90>
   1823c:	vmov.f32	s0, s16
   18240:	vmov.f32	s1, s17
   18244:	add	r3, sp, #12
   18246:	str	r3, [sp, #4]
   18248:	str.w	r8, [sp]
   1824c:	mov	r0, r7
   1824e:	mov	r3, r6
   18250:	mov	r2, r4
   18252:	movs	r1, #3
   18254:	bl	173d8 <_dtoa_r>
   18258:	ldr	r3, [sp, #12]
   1825a:	ldr	r1, [r6, #0]
   1825c:	cmp	r0, r3
   1825e:	rsb	r1, r1, #0
   18262:	bcs.n	182d8 <fcvtbuf+0xcc>
   18264:	subs	r1, r1, r5
   18266:	mov	r3, r5
   18268:	ldrb.w	r2, [r0], #1
   1826c:	strb.w	r2, [r3], #1
   18270:	ldr	r2, [sp, #12]
   18272:	cmp	r2, r0
   18274:	add.w	r6, r3, r1
   18278:	bhi.n	18268 <fcvtbuf+0x5c>
   1827a:	cmp	r4, r6
   1827c:	ble.n	182de <fcvtbuf+0xd2>
   1827e:	subs	r2, r4, r6
   18280:	add	r2, r3
   18282:	movs	r1, #48	; 0x30
   18284:	strb.w	r1, [r3], #1
   18288:	cmp	r2, r3
   1828a:	bne.n	18284 <fcvtbuf+0x78>
   1828c:	movs	r3, #0
   1828e:	strb	r3, [r2, #0]
   18290:	mov	r0, r5
   18292:	add	sp, #20
   18294:	vpop	{d8}
   18298:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1829c:	movs	r2, #0
   1829e:	ldr	r3, [pc, #104]	; (18308 <fcvtbuf+0xfc>)
   182a0:	vmov	r0, r1, d8
   182a4:	bl	14250 <__aeabi_dcmpgt>
   182a8:	cmp	r0, #0
   182aa:	beq.n	1823c <fcvtbuf+0x30>
   182ac:	vmov.f32	s0, s16
   182b0:	vmov.f32	s1, s17
   182b4:	add	r3, sp, #12
   182b6:	str	r3, [sp, #4]
   182b8:	str.w	r8, [sp]
   182bc:	mov	r0, r7
   182be:	mov	r3, r6
   182c0:	mov	r2, r4
   182c2:	movs	r1, #2
   182c4:	bl	173d8 <_dtoa_r>
   182c8:	b.n	18258 <fcvtbuf+0x4c>
   182ca:	ldr	r2, [r7, #80]	; 0x50
   182cc:	add.w	r3, r0, #35	; 0x23
   182d0:	cmp	r2, r3
   182d2:	ble.n	182e2 <fcvtbuf+0xd6>
   182d4:	ldr	r5, [r7, #84]	; 0x54
   182d6:	b.n	1822e <fcvtbuf+0x22>
   182d8:	mov	r6, r1
   182da:	mov	r3, r5
   182dc:	b.n	1827a <fcvtbuf+0x6e>
   182de:	mov	r2, r3
   182e0:	b.n	1828c <fcvtbuf+0x80>
   182e2:	add.w	r9, r0, #36	; 0x24
   182e6:	mov	r2, r9
   182e8:	ldr	r1, [r7, #84]	; 0x54
   182ea:	mov	r0, r7
   182ec:	bl	14ee0 <_realloc_r>
   182f0:	mov	r5, r0
   182f2:	cmp	r0, #0
   182f4:	beq.n	18290 <fcvtbuf+0x84>
   182f6:	str.w	r9, [r7, #80]	; 0x50
   182fa:	str	r0, [r7, #84]	; 0x54
   182fc:	b.n	1822e <fcvtbuf+0x22>
   182fe:	nop
   18300:	.word	0x1fff0f60
   18304:	.word	0x3ff00000
   18308:	.word	0xbff00000

0001830c <__libc_fini_array>:
   1830c:	push	{r3, r4, r5, lr}
   1830e:	ldr	r5, [pc, #28]	; (1832c <__libc_fini_array+0x20>)
   18310:	ldr	r4, [pc, #28]	; (18330 <__libc_fini_array+0x24>)
   18312:	subs	r4, r5, r4
   18314:	asrs	r4, r4, #2
   18316:	beq.n	18324 <__libc_fini_array+0x18>
   18318:	subs	r4, #1
   1831a:	ldr.w	r3, [r5, #-4]!
   1831e:	blx	r3
   18320:	cmp	r4, #0
   18322:	bne.n	18318 <__libc_fini_array+0xc>
   18324:	ldmia.w	sp!, {r3, r4, r5, lr}
   18328:	b.w	19d58 <__init_array_end>
	...

00018334 <_malloc_trim_r>:
   18334:	push	{r3, r4, r5, r6, r7, lr}
   18336:	ldr	r7, [pc, #140]	; (183c4 <_malloc_trim_r+0x90>)
   18338:	mov	r4, r1
   1833a:	mov	r6, r0
   1833c:	bl	14ed8 <__malloc_lock>
   18340:	ldr	r3, [r7, #8]
   18342:	ldr	r5, [r3, #4]
   18344:	bic.w	r5, r5, #3
   18348:	subs	r1, r5, r4
   1834a:	addw	r1, r1, #4079	; 0xfef
   1834e:	bic.w	r1, r1, #4080	; 0xff0
   18352:	bic.w	r1, r1, #15
   18356:	sub.w	r4, r1, #4096	; 0x1000
   1835a:	cmp.w	r4, #4096	; 0x1000
   1835e:	blt.n	18370 <_malloc_trim_r+0x3c>
   18360:	movs	r1, #0
   18362:	mov	r0, r6
   18364:	bl	152c0 <_sbrk_r>
   18368:	ldr	r3, [r7, #8]
   1836a:	add	r3, r5
   1836c:	cmp	r0, r3
   1836e:	beq.n	1837a <_malloc_trim_r+0x46>
   18370:	mov	r0, r6
   18372:	bl	14edc <__malloc_unlock>
   18376:	movs	r0, #0
   18378:	pop	{r3, r4, r5, r6, r7, pc}
   1837a:	negs	r1, r4
   1837c:	mov	r0, r6
   1837e:	bl	152c0 <_sbrk_r>
   18382:	adds	r0, #1
   18384:	beq.n	183a2 <_malloc_trim_r+0x6e>
   18386:	ldr	r3, [pc, #64]	; (183c8 <_malloc_trim_r+0x94>)
   18388:	ldr	r2, [r7, #8]
   1838a:	ldr	r1, [r3, #0]
   1838c:	subs	r5, r5, r4
   1838e:	orr.w	r5, r5, #1
   18392:	mov	r0, r6
   18394:	subs	r1, r1, r4
   18396:	str	r5, [r2, #4]
   18398:	str	r1, [r3, #0]
   1839a:	bl	14edc <__malloc_unlock>
   1839e:	movs	r0, #1
   183a0:	pop	{r3, r4, r5, r6, r7, pc}
   183a2:	movs	r1, #0
   183a4:	mov	r0, r6
   183a6:	bl	152c0 <_sbrk_r>
   183aa:	ldr	r2, [r7, #8]
   183ac:	subs	r3, r0, r2
   183ae:	cmp	r3, #15
   183b0:	ble.n	18370 <_malloc_trim_r+0x3c>
   183b2:	ldr	r4, [pc, #24]	; (183cc <_malloc_trim_r+0x98>)
   183b4:	ldr	r1, [pc, #16]	; (183c8 <_malloc_trim_r+0x94>)
   183b6:	ldr	r4, [r4, #0]
   183b8:	orr.w	r3, r3, #1
   183bc:	subs	r0, r0, r4
   183be:	str	r3, [r2, #4]
   183c0:	str	r0, [r1, #0]
   183c2:	b.n	18370 <_malloc_trim_r+0x3c>
   183c4:	.word	0x1fff10d0
   183c8:	.word	0x1fff2c7c
   183cc:	.word	0x1fff14dc

000183d0 <_free_r>:
   183d0:	cmp	r1, #0
   183d2:	beq.n	18460 <_free_r+0x90>
   183d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183d8:	mov	r5, r1
   183da:	mov	r8, r0
   183dc:	bl	14ed8 <__malloc_lock>
   183e0:	ldr.w	r7, [r5, #-4]
   183e4:	ldr	r1, [pc, #424]	; (18590 <_free_r+0x1c0>)
   183e6:	bic.w	r3, r7, #1
   183ea:	sub.w	r4, r5, #8
   183ee:	adds	r2, r4, r3
   183f0:	ldr	r6, [r1, #8]
   183f2:	ldr	r0, [r2, #4]
   183f4:	cmp	r2, r6
   183f6:	bic.w	r0, r0, #3
   183fa:	beq.n	184c2 <_free_r+0xf2>
   183fc:	lsls	r6, r7, #31
   183fe:	str	r0, [r2, #4]
   18400:	bmi.n	1841a <_free_r+0x4a>
   18402:	ldr.w	r7, [r5, #-8]
   18406:	subs	r4, r4, r7
   18408:	add.w	lr, r1, #8
   1840c:	ldr	r5, [r4, #8]
   1840e:	cmp	r5, lr
   18410:	add	r3, r7
   18412:	beq.n	184f4 <_free_r+0x124>
   18414:	ldr	r7, [r4, #12]
   18416:	str	r7, [r5, #12]
   18418:	str	r5, [r7, #8]
   1841a:	adds	r5, r2, r0
   1841c:	ldr	r5, [r5, #4]
   1841e:	lsls	r5, r5, #31
   18420:	bpl.n	184a8 <_free_r+0xd8>
   18422:	orr.w	r2, r3, #1
   18426:	str	r2, [r4, #4]
   18428:	str	r3, [r4, r3]
   1842a:	cmp.w	r3, #512	; 0x200
   1842e:	bcs.n	18462 <_free_r+0x92>
   18430:	lsrs	r3, r3, #3
   18432:	adds	r2, r3, #1
   18434:	ldr	r5, [r1, #4]
   18436:	ldr.w	r7, [r1, r2, lsl #3]
   1843a:	str	r7, [r4, #8]
   1843c:	movs	r0, #1
   1843e:	asrs	r3, r3, #2
   18440:	lsl.w	r3, r0, r3
   18444:	add.w	r0, r1, r2, lsl #3
   18448:	orrs	r5, r3
   1844a:	subs	r0, #8
   1844c:	str	r0, [r4, #12]
   1844e:	str	r5, [r1, #4]
   18450:	str.w	r4, [r1, r2, lsl #3]
   18454:	str	r4, [r7, #12]
   18456:	mov	r0, r8
   18458:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1845c:	b.w	14edc <__malloc_unlock>
   18460:	bx	lr
   18462:	lsrs	r2, r3, #9
   18464:	cmp	r2, #4
   18466:	bhi.n	18510 <_free_r+0x140>
   18468:	lsrs	r2, r3, #6
   1846a:	add.w	r7, r2, #57	; 0x39
   1846e:	lsls	r7, r7, #1
   18470:	add.w	r5, r2, #56	; 0x38
   18474:	add.w	r0, r1, r7, lsl #2
   18478:	ldr.w	r2, [r1, r7, lsl #2]
   1847c:	ldr	r1, [pc, #272]	; (18590 <_free_r+0x1c0>)
   1847e:	subs	r0, #8
   18480:	cmp	r0, r2
   18482:	beq.n	18520 <_free_r+0x150>
   18484:	ldr	r1, [r2, #4]
   18486:	bic.w	r1, r1, #3
   1848a:	cmp	r3, r1
   1848c:	bcs.n	18494 <_free_r+0xc4>
   1848e:	ldr	r2, [r2, #8]
   18490:	cmp	r0, r2
   18492:	bne.n	18484 <_free_r+0xb4>
   18494:	ldr	r0, [r2, #12]
   18496:	str	r0, [r4, #12]
   18498:	str	r2, [r4, #8]
   1849a:	str	r4, [r0, #8]
   1849c:	str	r4, [r2, #12]
   1849e:	mov	r0, r8
   184a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   184a4:	b.w	14edc <__malloc_unlock>
   184a8:	ldr	r5, [r2, #8]
   184aa:	ldr	r7, [pc, #232]	; (18594 <_free_r+0x1c4>)
   184ac:	cmp	r5, r7
   184ae:	add	r3, r0
   184b0:	beq.n	18532 <_free_r+0x162>
   184b2:	ldr	r0, [r2, #12]
   184b4:	str	r0, [r5, #12]
   184b6:	orr.w	r2, r3, #1
   184ba:	str	r5, [r0, #8]
   184bc:	str	r2, [r4, #4]
   184be:	str	r3, [r4, r3]
   184c0:	b.n	1842a <_free_r+0x5a>
   184c2:	lsls	r7, r7, #31
   184c4:	add	r3, r0
   184c6:	bmi.n	184d8 <_free_r+0x108>
   184c8:	ldr.w	r2, [r5, #-8]
   184cc:	subs	r4, r4, r2
   184ce:	add	r3, r2
   184d0:	ldr	r0, [r4, #8]
   184d2:	ldr	r2, [r4, #12]
   184d4:	str	r2, [r0, #12]
   184d6:	str	r0, [r2, #8]
   184d8:	ldr	r2, [pc, #188]	; (18598 <_free_r+0x1c8>)
   184da:	ldr	r2, [r2, #0]
   184dc:	orr.w	r0, r3, #1
   184e0:	cmp	r3, r2
   184e2:	str	r0, [r4, #4]
   184e4:	str	r4, [r1, #8]
   184e6:	bcc.n	18456 <_free_r+0x86>
   184e8:	ldr	r3, [pc, #176]	; (1859c <_free_r+0x1cc>)
   184ea:	mov	r0, r8
   184ec:	ldr	r1, [r3, #0]
   184ee:	bl	18334 <_malloc_trim_r>
   184f2:	b.n	18456 <_free_r+0x86>
   184f4:	adds	r1, r2, r0
   184f6:	ldr	r1, [r1, #4]
   184f8:	lsls	r1, r1, #31
   184fa:	bmi.n	18586 <_free_r+0x1b6>
   184fc:	ldr	r1, [r2, #8]
   184fe:	ldr	r2, [r2, #12]
   18500:	str	r2, [r1, #12]
   18502:	add	r3, r0
   18504:	orr.w	r0, r3, #1
   18508:	str	r1, [r2, #8]
   1850a:	str	r0, [r4, #4]
   1850c:	str	r3, [r4, r3]
   1850e:	b.n	18456 <_free_r+0x86>
   18510:	cmp	r2, #20
   18512:	bhi.n	18544 <_free_r+0x174>
   18514:	add.w	r7, r2, #92	; 0x5c
   18518:	lsls	r7, r7, #1
   1851a:	add.w	r5, r2, #91	; 0x5b
   1851e:	b.n	18474 <_free_r+0xa4>
   18520:	asrs	r2, r5, #2
   18522:	ldr	r3, [r1, #4]
   18524:	movs	r5, #1
   18526:	lsl.w	r2, r5, r2
   1852a:	orrs	r3, r2
   1852c:	str	r3, [r1, #4]
   1852e:	mov	r2, r0
   18530:	b.n	18496 <_free_r+0xc6>
   18532:	orr.w	r2, r3, #1
   18536:	str	r4, [r1, #20]
   18538:	str	r4, [r1, #16]
   1853a:	str	r5, [r4, #12]
   1853c:	str	r5, [r4, #8]
   1853e:	str	r2, [r4, #4]
   18540:	str	r3, [r4, r3]
   18542:	b.n	18456 <_free_r+0x86>
   18544:	cmp	r2, #84	; 0x54
   18546:	bhi.n	18556 <_free_r+0x186>
   18548:	lsrs	r2, r3, #12
   1854a:	add.w	r7, r2, #111	; 0x6f
   1854e:	lsls	r7, r7, #1
   18550:	add.w	r5, r2, #110	; 0x6e
   18554:	b.n	18474 <_free_r+0xa4>
   18556:	cmp.w	r2, #340	; 0x154
   1855a:	bhi.n	1856a <_free_r+0x19a>
   1855c:	lsrs	r2, r3, #15
   1855e:	add.w	r7, r2, #120	; 0x78
   18562:	lsls	r7, r7, #1
   18564:	add.w	r5, r2, #119	; 0x77
   18568:	b.n	18474 <_free_r+0xa4>
   1856a:	movw	r0, #1364	; 0x554
   1856e:	cmp	r2, r0
   18570:	bhi.n	18580 <_free_r+0x1b0>
   18572:	lsrs	r2, r3, #18
   18574:	add.w	r7, r2, #125	; 0x7d
   18578:	lsls	r7, r7, #1
   1857a:	add.w	r5, r2, #124	; 0x7c
   1857e:	b.n	18474 <_free_r+0xa4>
   18580:	movs	r7, #254	; 0xfe
   18582:	movs	r5, #126	; 0x7e
   18584:	b.n	18474 <_free_r+0xa4>
   18586:	orr.w	r2, r3, #1
   1858a:	str	r2, [r4, #4]
   1858c:	str	r3, [r4, r3]
   1858e:	b.n	18456 <_free_r+0x86>
   18590:	.word	0x1fff10d0
   18594:	.word	0x1fff10d8
   18598:	.word	0x1fff14d8
   1859c:	.word	0x1fff2c78

000185a0 <_localeconv_r>:
   185a0:	ldr	r2, [pc, #16]	; (185b4 <_localeconv_r+0x14>)
   185a2:	ldr	r3, [pc, #20]	; (185b8 <_localeconv_r+0x18>)
   185a4:	ldr	r2, [r2, #0]
   185a6:	ldr	r0, [r2, #52]	; 0x34
   185a8:	cmp	r0, #0
   185aa:	it	eq
   185ac:	moveq	r0, r3
   185ae:	adds	r0, #240	; 0xf0
   185b0:	bx	lr
   185b2:	nop
   185b4:	.word	0x1fff0f60
   185b8:	.word	0x1fff0f64

000185bc <_Balloc>:
   185bc:	ldr	r3, [r0, #76]	; 0x4c
   185be:	push	{r4, r5, r6, lr}
   185c0:	mov	r5, r0
   185c2:	mov	r4, r1
   185c4:	cbz	r3, 185da <_Balloc+0x1e>
   185c6:	ldr.w	r0, [r3, r4, lsl #2]
   185ca:	cbz	r0, 185ee <_Balloc+0x32>
   185cc:	ldr	r2, [r0, #0]
   185ce:	str.w	r2, [r3, r4, lsl #2]
   185d2:	movs	r3, #0
   185d4:	str	r3, [r0, #16]
   185d6:	str	r3, [r0, #12]
   185d8:	pop	{r4, r5, r6, pc}
   185da:	movs	r2, #33	; 0x21
   185dc:	movs	r1, #4
   185de:	bl	18d40 <_calloc_r>
   185e2:	str	r0, [r5, #76]	; 0x4c
   185e4:	mov	r3, r0
   185e6:	cmp	r0, #0
   185e8:	bne.n	185c6 <_Balloc+0xa>
   185ea:	movs	r0, #0
   185ec:	pop	{r4, r5, r6, pc}
   185ee:	movs	r1, #1
   185f0:	lsl.w	r6, r1, r4
   185f4:	adds	r2, r6, #5
   185f6:	mov	r0, r5
   185f8:	lsls	r2, r2, #2
   185fa:	bl	18d40 <_calloc_r>
   185fe:	cmp	r0, #0
   18600:	beq.n	185ea <_Balloc+0x2e>
   18602:	str	r4, [r0, #4]
   18604:	str	r6, [r0, #8]
   18606:	b.n	185d2 <_Balloc+0x16>

00018608 <_Bfree>:
   18608:	cbz	r1, 18618 <_Bfree+0x10>
   1860a:	ldr	r3, [r0, #76]	; 0x4c
   1860c:	ldr	r2, [r1, #4]
   1860e:	ldr.w	r0, [r3, r2, lsl #2]
   18612:	str	r0, [r1, #0]
   18614:	str.w	r1, [r3, r2, lsl #2]
   18618:	bx	lr
   1861a:	nop

0001861c <__multadd>:
   1861c:	push	{r4, r5, r6, r7, lr}
   1861e:	ldr	r4, [r1, #16]
   18620:	sub	sp, #12
   18622:	mov	r5, r1
   18624:	mov	r6, r0
   18626:	add.w	lr, r1, #20
   1862a:	movs	r7, #0
   1862c:	ldr.w	r0, [lr]
   18630:	uxth	r1, r0
   18632:	mla	r1, r2, r1, r3
   18636:	lsrs	r3, r1, #16
   18638:	lsrs	r0, r0, #16
   1863a:	mla	r3, r2, r0, r3
   1863e:	uxth	r1, r1
   18640:	adds	r7, #1
   18642:	add.w	r1, r1, r3, lsl #16
   18646:	cmp	r4, r7
   18648:	str.w	r1, [lr], #4
   1864c:	mov.w	r3, r3, lsr #16
   18650:	bgt.n	1862c <__multadd+0x10>
   18652:	cbz	r3, 18664 <__multadd+0x48>
   18654:	ldr	r2, [r5, #8]
   18656:	cmp	r4, r2
   18658:	bge.n	1866a <__multadd+0x4e>
   1865a:	add.w	r2, r5, r4, lsl #2
   1865e:	adds	r4, #1
   18660:	str	r3, [r2, #20]
   18662:	str	r4, [r5, #16]
   18664:	mov	r0, r5
   18666:	add	sp, #12
   18668:	pop	{r4, r5, r6, r7, pc}
   1866a:	ldr	r1, [r5, #4]
   1866c:	str	r3, [sp, #4]
   1866e:	adds	r1, #1
   18670:	mov	r0, r6
   18672:	bl	185bc <_Balloc>
   18676:	ldr	r2, [r5, #16]
   18678:	adds	r2, #2
   1867a:	add.w	r1, r5, #12
   1867e:	mov	r7, r0
   18680:	lsls	r2, r2, #2
   18682:	adds	r0, #12
   18684:	bl	11bf8 <memcpy>
   18688:	ldr	r2, [r6, #76]	; 0x4c
   1868a:	ldr	r1, [r5, #4]
   1868c:	ldr	r3, [sp, #4]
   1868e:	ldr.w	r0, [r2, r1, lsl #2]
   18692:	str	r0, [r5, #0]
   18694:	str.w	r5, [r2, r1, lsl #2]
   18698:	mov	r5, r7
   1869a:	b.n	1865a <__multadd+0x3e>

0001869c <__hi0bits>:
   1869c:	lsrs	r3, r0, #16
   1869e:	lsls	r3, r3, #16
   186a0:	cbnz	r3, 186d0 <__hi0bits+0x34>
   186a2:	lsls	r0, r0, #16
   186a4:	movs	r3, #16
   186a6:	tst.w	r0, #4278190080	; 0xff000000
   186aa:	itt	eq
   186ac:	lsleq	r0, r0, #8
   186ae:	addeq	r3, #8
   186b0:	tst.w	r0, #4026531840	; 0xf0000000
   186b4:	itt	eq
   186b6:	lsleq	r0, r0, #4
   186b8:	addeq	r3, #4
   186ba:	tst.w	r0, #3221225472	; 0xc0000000
   186be:	itt	eq
   186c0:	lsleq	r0, r0, #2
   186c2:	addeq	r3, #2
   186c4:	cmp	r0, #0
   186c6:	blt.n	186d8 <__hi0bits+0x3c>
   186c8:	lsls	r2, r0, #1
   186ca:	bmi.n	186d4 <__hi0bits+0x38>
   186cc:	movs	r0, #32
   186ce:	bx	lr
   186d0:	movs	r3, #0
   186d2:	b.n	186a6 <__hi0bits+0xa>
   186d4:	adds	r0, r3, #1
   186d6:	bx	lr
   186d8:	mov	r0, r3
   186da:	bx	lr

000186dc <__lo0bits>:
   186dc:	ldr	r3, [r0, #0]
   186de:	ands.w	r2, r3, #7
   186e2:	beq.n	186f4 <__lo0bits+0x18>
   186e4:	lsls	r1, r3, #31
   186e6:	bmi.n	1872a <__lo0bits+0x4e>
   186e8:	lsls	r2, r3, #30
   186ea:	bmi.n	1872e <__lo0bits+0x52>
   186ec:	lsrs	r3, r3, #2
   186ee:	str	r3, [r0, #0]
   186f0:	movs	r0, #2
   186f2:	bx	lr
   186f4:	uxth	r1, r3
   186f6:	cbnz	r1, 186fc <__lo0bits+0x20>
   186f8:	lsrs	r3, r3, #16
   186fa:	movs	r2, #16
   186fc:	tst.w	r3, #255	; 0xff
   18700:	itt	eq
   18702:	lsreq	r3, r3, #8
   18704:	addeq	r2, #8
   18706:	lsls	r1, r3, #28
   18708:	itt	eq
   1870a:	lsreq	r3, r3, #4
   1870c:	addeq	r2, #4
   1870e:	lsls	r1, r3, #30
   18710:	itt	eq
   18712:	lsreq	r3, r3, #2
   18714:	addeq	r2, #2
   18716:	lsls	r1, r3, #31
   18718:	bmi.n	18724 <__lo0bits+0x48>
   1871a:	lsrs	r3, r3, #1
   1871c:	bne.n	18722 <__lo0bits+0x46>
   1871e:	movs	r0, #32
   18720:	bx	lr
   18722:	adds	r2, #1
   18724:	str	r3, [r0, #0]
   18726:	mov	r0, r2
   18728:	bx	lr
   1872a:	movs	r0, #0
   1872c:	bx	lr
   1872e:	lsrs	r3, r3, #1
   18730:	str	r3, [r0, #0]
   18732:	movs	r0, #1
   18734:	bx	lr
   18736:	nop

00018738 <__i2b>:
   18738:	push	{r4, lr}
   1873a:	mov	r4, r1
   1873c:	movs	r1, #1
   1873e:	bl	185bc <_Balloc>
   18742:	movs	r2, #1
   18744:	str	r4, [r0, #20]
   18746:	str	r2, [r0, #16]
   18748:	pop	{r4, pc}
   1874a:	nop

0001874c <__multiply>:
   1874c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18750:	ldr	r5, [r1, #16]
   18752:	ldr	r7, [r2, #16]
   18754:	cmp	r5, r7
   18756:	sub	sp, #12
   18758:	mov	r4, r1
   1875a:	mov	r6, r2
   1875c:	bge.n	18768 <__multiply+0x1c>
   1875e:	mov	r2, r5
   18760:	mov	r4, r6
   18762:	mov	r5, r7
   18764:	mov	r6, r1
   18766:	mov	r7, r2
   18768:	ldr	r3, [r4, #8]
   1876a:	ldr	r1, [r4, #4]
   1876c:	add.w	r8, r5, r7
   18770:	cmp	r8, r3
   18772:	it	gt
   18774:	addgt	r1, #1
   18776:	bl	185bc <_Balloc>
   1877a:	add.w	ip, r0, #20
   1877e:	add.w	r9, ip, r8, lsl #2
   18782:	cmp	ip, r9
   18784:	str	r0, [sp, #0]
   18786:	bcs.n	18794 <__multiply+0x48>
   18788:	mov	r3, ip
   1878a:	movs	r1, #0
   1878c:	str.w	r1, [r3], #4
   18790:	cmp	r9, r3
   18792:	bhi.n	1878c <__multiply+0x40>
   18794:	add.w	r2, r6, #20
   18798:	add.w	sl, r2, r7, lsl #2
   1879c:	add.w	r3, r4, #20
   187a0:	cmp	r2, sl
   187a2:	add.w	lr, r3, r5, lsl #2
   187a6:	bcs.n	18852 <__multiply+0x106>
   187a8:	str.w	r9, [sp, #4]
   187ac:	mov	r9, r3
   187ae:	ldr.w	r3, [r2], #4
   187b2:	uxth.w	fp, r3
   187b6:	cmp.w	fp, #0
   187ba:	beq.n	187fe <__multiply+0xb2>
   187bc:	movs	r0, #0
   187be:	mov	r7, r9
   187c0:	mov	r6, ip
   187c2:	mov	r5, r0
   187c4:	b.n	187c8 <__multiply+0x7c>
   187c6:	mov	r6, r3
   187c8:	ldr.w	r4, [r7], #4
   187cc:	ldr	r0, [r6, #0]
   187ce:	uxth	r1, r4
   187d0:	uxth	r3, r0
   187d2:	mla	r1, fp, r1, r3
   187d6:	lsrs	r4, r4, #16
   187d8:	lsrs	r0, r0, #16
   187da:	adds	r3, r1, r5
   187dc:	mla	r0, fp, r4, r0
   187e0:	add.w	r0, r0, r3, lsr #16
   187e4:	uxth	r1, r3
   187e6:	mov	r3, r6
   187e8:	orr.w	r1, r1, r0, lsl #16
   187ec:	cmp	lr, r7
   187ee:	mov.w	r5, r0, lsr #16
   187f2:	str.w	r1, [r3], #4
   187f6:	bhi.n	187c6 <__multiply+0x7a>
   187f8:	str	r5, [r6, #4]
   187fa:	ldr.w	r3, [r2, #-4]
   187fe:	movs.w	fp, r3, lsr #16
   18802:	beq.n	18846 <__multiply+0xfa>
   18804:	ldr.w	r3, [ip]
   18808:	mov	r7, ip
   1880a:	mov	r0, r3
   1880c:	mov	r5, r9
   1880e:	movs	r1, #0
   18810:	b.n	18814 <__multiply+0xc8>
   18812:	mov	r7, r6
   18814:	ldrh	r4, [r5, #0]
   18816:	lsrs	r0, r0, #16
   18818:	mla	r0, fp, r4, r0
   1881c:	add	r1, r0
   1881e:	uxth	r4, r3
   18820:	mov	r6, r7
   18822:	orr.w	r3, r4, r1, lsl #16
   18826:	str.w	r3, [r6], #4
   1882a:	ldr	r0, [r7, #4]
   1882c:	ldr.w	r4, [r5], #4
   18830:	uxth	r3, r0
   18832:	lsrs	r4, r4, #16
   18834:	mla	r4, fp, r4, r3
   18838:	add.w	r3, r4, r1, lsr #16
   1883c:	cmp	lr, r5
   1883e:	mov.w	r1, r3, lsr #16
   18842:	bhi.n	18812 <__multiply+0xc6>
   18844:	str	r3, [r7, #4]
   18846:	cmp	sl, r2
   18848:	add.w	ip, ip, #4
   1884c:	bhi.n	187ae <__multiply+0x62>
   1884e:	ldr.w	r9, [sp, #4]
   18852:	cmp.w	r8, #0
   18856:	ble.n	18870 <__multiply+0x124>
   18858:	ldr.w	r3, [r9, #-4]
   1885c:	sub.w	r9, r9, #4
   18860:	cbz	r3, 1886a <__multiply+0x11e>
   18862:	b.n	18870 <__multiply+0x124>
   18864:	ldr.w	r3, [r9, #-4]!
   18868:	cbnz	r3, 18870 <__multiply+0x124>
   1886a:	subs.w	r8, r8, #1
   1886e:	bne.n	18864 <__multiply+0x118>
   18870:	ldr	r0, [sp, #0]
   18872:	str.w	r8, [r0, #16]
   18876:	add	sp, #12
   18878:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001887c <__pow5mult>:
   1887c:	ands.w	r3, r2, #3
   18880:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18884:	mov	r4, r2
   18886:	mov	r7, r0
   18888:	bne.n	188e8 <__pow5mult+0x6c>
   1888a:	mov	r6, r1
   1888c:	asrs	r4, r4, #2
   1888e:	beq.n	188ca <__pow5mult+0x4e>
   18890:	ldr	r5, [r7, #72]	; 0x48
   18892:	cbz	r5, 188fa <__pow5mult+0x7e>
   18894:	lsls	r3, r4, #31
   18896:	mov.w	r8, #0
   1889a:	bmi.n	188aa <__pow5mult+0x2e>
   1889c:	asrs	r4, r4, #1
   1889e:	beq.n	188ca <__pow5mult+0x4e>
   188a0:	ldr	r0, [r5, #0]
   188a2:	cbz	r0, 188d0 <__pow5mult+0x54>
   188a4:	mov	r5, r0
   188a6:	lsls	r3, r4, #31
   188a8:	bpl.n	1889c <__pow5mult+0x20>
   188aa:	mov	r2, r5
   188ac:	mov	r1, r6
   188ae:	mov	r0, r7
   188b0:	bl	1874c <__multiply>
   188b4:	cbz	r6, 188e4 <__pow5mult+0x68>
   188b6:	ldr	r2, [r6, #4]
   188b8:	ldr	r3, [r7, #76]	; 0x4c
   188ba:	asrs	r4, r4, #1
   188bc:	ldr.w	r1, [r3, r2, lsl #2]
   188c0:	str	r1, [r6, #0]
   188c2:	str.w	r6, [r3, r2, lsl #2]
   188c6:	mov	r6, r0
   188c8:	bne.n	188a0 <__pow5mult+0x24>
   188ca:	mov	r0, r6
   188cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   188d0:	mov	r2, r5
   188d2:	mov	r1, r5
   188d4:	mov	r0, r7
   188d6:	bl	1874c <__multiply>
   188da:	str	r0, [r5, #0]
   188dc:	str.w	r8, [r0]
   188e0:	mov	r5, r0
   188e2:	b.n	188a6 <__pow5mult+0x2a>
   188e4:	mov	r6, r0
   188e6:	b.n	1889c <__pow5mult+0x20>
   188e8:	subs	r2, r3, #1
   188ea:	ldr	r5, [pc, #44]	; (18918 <__pow5mult+0x9c>)
   188ec:	movs	r3, #0
   188ee:	ldr.w	r2, [r5, r2, lsl #2]
   188f2:	bl	1861c <__multadd>
   188f6:	mov	r6, r0
   188f8:	b.n	1888c <__pow5mult+0x10>
   188fa:	movs	r1, #1
   188fc:	mov	r0, r7
   188fe:	bl	185bc <_Balloc>
   18902:	movw	r1, #625	; 0x271
   18906:	movs	r2, #1
   18908:	movs	r3, #0
   1890a:	str	r1, [r0, #20]
   1890c:	str	r2, [r0, #16]
   1890e:	mov	r5, r0
   18910:	str	r0, [r7, #72]	; 0x48
   18912:	str	r3, [r0, #0]
   18914:	b.n	18894 <__pow5mult+0x18>
   18916:	nop
   18918:	.word	0x00019d30

0001891c <__lshift>:
   1891c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18920:	mov	r9, r2
   18922:	ldr	r2, [r1, #16]
   18924:	ldr	r3, [r1, #8]
   18926:	mov.w	r4, r9, asr #5
   1892a:	add.w	r8, r4, r2
   1892e:	add.w	r5, r8, #1
   18932:	cmp	r5, r3
   18934:	mov	r6, r1
   18936:	mov	sl, r0
   18938:	ldr	r1, [r1, #4]
   1893a:	ble.n	18946 <__lshift+0x2a>
   1893c:	lsls	r3, r3, #1
   1893e:	cmp	r5, r3
   18940:	add.w	r1, r1, #1
   18944:	bgt.n	1893c <__lshift+0x20>
   18946:	mov	r0, sl
   18948:	bl	185bc <_Balloc>
   1894c:	cmp	r4, #0
   1894e:	add.w	r2, r0, #20
   18952:	ble.n	189c6 <__lshift+0xaa>
   18954:	add.w	r3, r2, r4, lsl #2
   18958:	movs	r1, #0
   1895a:	str.w	r1, [r2], #4
   1895e:	cmp	r3, r2
   18960:	bne.n	1895a <__lshift+0x3e>
   18962:	ldr	r4, [r6, #16]
   18964:	add.w	r1, r6, #20
   18968:	ands.w	r9, r9, #31
   1896c:	add.w	lr, r1, r4, lsl #2
   18970:	beq.n	189b6 <__lshift+0x9a>
   18972:	rsb	r2, r9, #32
   18976:	movs	r4, #0
   18978:	ldr	r7, [r1, #0]
   1897a:	lsl.w	ip, r7, r9
   1897e:	orr.w	r4, ip, r4
   18982:	mov	ip, r3
   18984:	str.w	r4, [r3], #4
   18988:	ldr.w	r4, [r1], #4
   1898c:	cmp	lr, r1
   1898e:	lsr.w	r4, r4, r2
   18992:	bhi.n	18978 <__lshift+0x5c>
   18994:	str.w	r4, [ip, #4]
   18998:	cbz	r4, 1899e <__lshift+0x82>
   1899a:	add.w	r5, r8, #2
   1899e:	ldr.w	r3, [sl, #76]	; 0x4c
   189a2:	ldr	r2, [r6, #4]
   189a4:	subs	r5, #1
   189a6:	ldr.w	r1, [r3, r2, lsl #2]
   189aa:	str	r5, [r0, #16]
   189ac:	str	r1, [r6, #0]
   189ae:	str.w	r6, [r3, r2, lsl #2]
   189b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   189b6:	subs	r3, #4
   189b8:	ldr.w	r2, [r1], #4
   189bc:	str.w	r2, [r3, #4]!
   189c0:	cmp	lr, r1
   189c2:	bhi.n	189b8 <__lshift+0x9c>
   189c4:	b.n	1899e <__lshift+0x82>
   189c6:	mov	r3, r2
   189c8:	b.n	18962 <__lshift+0x46>
   189ca:	nop

000189cc <__mcmp>:
   189cc:	ldr	r2, [r0, #16]
   189ce:	ldr	r3, [r1, #16]
   189d0:	subs	r2, r2, r3
   189d2:	bne.n	189fc <__mcmp+0x30>
   189d4:	lsls	r3, r3, #2
   189d6:	adds	r0, #20
   189d8:	adds	r1, #20
   189da:	add	r1, r3
   189dc:	push	{r4}
   189de:	add	r3, r0
   189e0:	b.n	189e6 <__mcmp+0x1a>
   189e2:	cmp	r0, r3
   189e4:	bcs.n	18a00 <__mcmp+0x34>
   189e6:	ldr.w	r4, [r3, #-4]!
   189ea:	ldr.w	r2, [r1, #-4]!
   189ee:	cmp	r4, r2
   189f0:	beq.n	189e2 <__mcmp+0x16>
   189f2:	bcc.n	18a08 <__mcmp+0x3c>
   189f4:	movs	r0, #1
   189f6:	ldr.w	r4, [sp], #4
   189fa:	bx	lr
   189fc:	mov	r0, r2
   189fe:	bx	lr
   18a00:	movs	r0, #0
   18a02:	ldr.w	r4, [sp], #4
   18a06:	bx	lr
   18a08:	mov.w	r0, #4294967295
   18a0c:	b.n	189f6 <__mcmp+0x2a>
   18a0e:	nop

00018a10 <__mdiff>:
   18a10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18a14:	ldr	r3, [r1, #16]
   18a16:	mov	r7, r1
   18a18:	ldr	r1, [r2, #16]
   18a1a:	subs	r3, r3, r1
   18a1c:	cmp	r3, #0
   18a1e:	mov	r8, r2
   18a20:	bne.n	18a52 <__mdiff+0x42>
   18a22:	lsls	r1, r1, #2
   18a24:	add.w	r2, r7, #20
   18a28:	add.w	r5, r8, #20
   18a2c:	adds	r3, r2, r1
   18a2e:	add	r1, r5
   18a30:	b.n	18a36 <__mdiff+0x26>
   18a32:	cmp	r2, r3
   18a34:	bcs.n	18af4 <__mdiff+0xe4>
   18a36:	ldr.w	r6, [r3, #-4]!
   18a3a:	ldr.w	r4, [r1, #-4]!
   18a3e:	cmp	r6, r4
   18a40:	beq.n	18a32 <__mdiff+0x22>
   18a42:	bcs.n	18b06 <__mdiff+0xf6>
   18a44:	mov	r3, r7
   18a46:	mov	r4, r2
   18a48:	mov	r7, r8
   18a4a:	mov.w	r9, #1
   18a4e:	mov	r8, r3
   18a50:	b.n	18a60 <__mdiff+0x50>
   18a52:	blt.n	18b10 <__mdiff+0x100>
   18a54:	add.w	r5, r7, #20
   18a58:	add.w	r4, r2, #20
   18a5c:	mov.w	r9, #0
   18a60:	ldr	r1, [r7, #4]
   18a62:	bl	185bc <_Balloc>
   18a66:	ldr.w	r3, [r8, #16]
   18a6a:	ldr	r6, [r7, #16]
   18a6c:	str.w	r9, [r0, #12]
   18a70:	add.w	ip, r4, r3, lsl #2
   18a74:	mov	lr, r4
   18a76:	add.w	r7, r5, r6, lsl #2
   18a7a:	add.w	r4, r0, #20
   18a7e:	movs	r3, #0
   18a80:	ldr.w	r1, [lr], #4
   18a84:	ldr.w	r8, [r5], #4
   18a88:	uxth	r2, r1
   18a8a:	uxtah	r3, r3, r8
   18a8e:	lsrs	r1, r1, #16
   18a90:	subs	r2, r3, r2
   18a92:	rsb	r3, r1, r8, lsr #16
   18a96:	add.w	r3, r3, r2, asr #16
   18a9a:	uxth	r2, r2
   18a9c:	orr.w	r2, r2, r3, lsl #16
   18aa0:	cmp	ip, lr
   18aa2:	str.w	r2, [r4], #4
   18aa6:	mov.w	r3, r3, asr #16
   18aaa:	bhi.n	18a80 <__mdiff+0x70>
   18aac:	cmp	r7, r5
   18aae:	bls.n	18ae0 <__mdiff+0xd0>
   18ab0:	mov	ip, r4
   18ab2:	mov	r1, r5
   18ab4:	ldr.w	lr, [r1], #4
   18ab8:	uxtah	r2, r3, lr
   18abc:	asrs	r3, r2, #16
   18abe:	add.w	r3, r3, lr, lsr #16
   18ac2:	uxth	r2, r2
   18ac4:	orr.w	r2, r2, r3, lsl #16
   18ac8:	cmp	r7, r1
   18aca:	str.w	r2, [ip], #4
   18ace:	mov.w	r3, r3, asr #16
   18ad2:	bhi.n	18ab4 <__mdiff+0xa4>
   18ad4:	mvns	r5, r5
   18ad6:	add	r5, r7
   18ad8:	bic.w	r5, r5, #3
   18adc:	adds	r5, #4
   18ade:	add	r4, r5
   18ae0:	subs	r4, #4
   18ae2:	cbnz	r2, 18aee <__mdiff+0xde>
   18ae4:	ldr.w	r3, [r4, #-4]!
   18ae8:	subs	r6, #1
   18aea:	cmp	r3, #0
   18aec:	beq.n	18ae4 <__mdiff+0xd4>
   18aee:	str	r6, [r0, #16]
   18af0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18af4:	movs	r1, #0
   18af6:	bl	185bc <_Balloc>
   18afa:	movs	r2, #1
   18afc:	movs	r3, #0
   18afe:	str	r2, [r0, #16]
   18b00:	str	r3, [r0, #20]
   18b02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18b06:	mov	r4, r5
   18b08:	mov.w	r9, #0
   18b0c:	mov	r5, r2
   18b0e:	b.n	18a60 <__mdiff+0x50>
   18b10:	mov	r3, r7
   18b12:	add.w	r4, r7, #20
   18b16:	add.w	r5, r8, #20
   18b1a:	mov	r7, r8
   18b1c:	mov.w	r9, #1
   18b20:	mov	r8, r3
   18b22:	b.n	18a60 <__mdiff+0x50>

00018b24 <__d2b>:
   18b24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b28:	vmov	r6, r7, d0
   18b2c:	sub	sp, #12
   18b2e:	mov	r8, r1
   18b30:	movs	r1, #1
   18b32:	mov	r4, r7
   18b34:	ubfx	r5, r7, #20, #11
   18b38:	mov	r7, r2
   18b3a:	bl	185bc <_Balloc>
   18b3e:	ubfx	r4, r4, #0, #20
   18b42:	mov	r9, r0
   18b44:	cbz	r5, 18b4a <__d2b+0x26>
   18b46:	orr.w	r4, r4, #1048576	; 0x100000
   18b4a:	str	r4, [sp, #4]
   18b4c:	cbz	r6, 18b96 <__d2b+0x72>
   18b4e:	add	r0, sp, #8
   18b50:	str.w	r6, [r0, #-8]!
   18b54:	bl	186dc <__lo0bits>
   18b58:	cmp	r0, #0
   18b5a:	bne.n	18bc6 <__d2b+0xa2>
   18b5c:	ldmia.w	sp, {r2, r3}
   18b60:	str.w	r2, [r9, #20]
   18b64:	cmp	r3, #0
   18b66:	ite	eq
   18b68:	moveq	r1, #1
   18b6a:	movne	r1, #2
   18b6c:	str.w	r3, [r9, #24]
   18b70:	str.w	r1, [r9, #16]
   18b74:	cbnz	r5, 18bae <__d2b+0x8a>
   18b76:	add.w	r3, r9, r1, lsl #2
   18b7a:	subw	r0, r0, #1074	; 0x432
   18b7e:	str.w	r0, [r8]
   18b82:	ldr	r0, [r3, #16]
   18b84:	bl	1869c <__hi0bits>
   18b88:	rsb	r0, r0, r1, lsl #5
   18b8c:	str	r0, [r7, #0]
   18b8e:	mov	r0, r9
   18b90:	add	sp, #12
   18b92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18b96:	add	r0, sp, #4
   18b98:	bl	186dc <__lo0bits>
   18b9c:	ldr	r3, [sp, #4]
   18b9e:	str.w	r3, [r9, #20]
   18ba2:	movs	r1, #1
   18ba4:	adds	r0, #32
   18ba6:	str.w	r1, [r9, #16]
   18baa:	cmp	r5, #0
   18bac:	beq.n	18b76 <__d2b+0x52>
   18bae:	subw	r5, r5, #1075	; 0x433
   18bb2:	add	r5, r0
   18bb4:	rsb	r0, r0, #53	; 0x35
   18bb8:	str.w	r5, [r8]
   18bbc:	str	r0, [r7, #0]
   18bbe:	mov	r0, r9
   18bc0:	add	sp, #12
   18bc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18bc6:	ldmia.w	sp, {r2, r3}
   18bca:	rsb	r1, r0, #32
   18bce:	lsl.w	r1, r3, r1
   18bd2:	orrs	r2, r1
   18bd4:	lsrs	r3, r0
   18bd6:	str	r3, [sp, #4]
   18bd8:	str.w	r2, [r9, #20]
   18bdc:	b.n	18b64 <__d2b+0x40>
   18bde:	nop

00018be0 <__ssprint_r>:
   18be0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18be4:	ldr	r3, [r2, #8]
   18be6:	sub	sp, #12
   18be8:	mov	r8, r2
   18bea:	cmp	r3, #0
   18bec:	beq.n	18cd4 <__ssprint_r+0xf4>
   18bee:	mov	fp, r0
   18bf0:	mov.w	r9, #0
   18bf4:	ldr	r6, [r2, #0]
   18bf6:	ldr	r0, [r1, #0]
   18bf8:	ldr	r3, [r1, #8]
   18bfa:	mov	r5, r1
   18bfc:	mov	r4, r9
   18bfe:	cmp	r4, #0
   18c00:	beq.n	18c8e <__ssprint_r+0xae>
   18c02:	cmp	r4, r3
   18c04:	mov	r7, r3
   18c06:	mov	sl, r3
   18c08:	bcc.n	18c98 <__ssprint_r+0xb8>
   18c0a:	ldrh	r3, [r5, #12]
   18c0c:	tst.w	r3, #1152	; 0x480
   18c10:	beq.n	18c6e <__ssprint_r+0x8e>
   18c12:	ldr	r7, [r5, #20]
   18c14:	ldr	r1, [r5, #16]
   18c16:	add.w	r7, r7, r7, lsl #1
   18c1a:	rsb	sl, r1, r0
   18c1e:	add.w	r7, r7, r7, lsr #31
   18c22:	adds	r0, r4, #1
   18c24:	asrs	r7, r7, #1
   18c26:	add	r0, sl
   18c28:	cmp	r0, r7
   18c2a:	mov	r2, r7
   18c2c:	itt	hi
   18c2e:	movhi	r7, r0
   18c30:	movhi	r2, r7
   18c32:	lsls	r3, r3, #21
   18c34:	bpl.n	18c9e <__ssprint_r+0xbe>
   18c36:	mov	r1, r2
   18c38:	mov	r0, fp
   18c3a:	bl	146cc <_malloc_r>
   18c3e:	cmp	r0, #0
   18c40:	beq.n	18cb2 <__ssprint_r+0xd2>
   18c42:	mov	r2, sl
   18c44:	ldr	r1, [r5, #16]
   18c46:	str	r0, [sp, #4]
   18c48:	bl	11bf8 <memcpy>
   18c4c:	ldrh	r2, [r5, #12]
   18c4e:	ldr	r3, [sp, #4]
   18c50:	bic.w	r2, r2, #1152	; 0x480
   18c54:	orr.w	r2, r2, #128	; 0x80
   18c58:	strh	r2, [r5, #12]
   18c5a:	rsb	r2, sl, r7
   18c5e:	add.w	r0, r3, sl
   18c62:	str	r7, [r5, #20]
   18c64:	str	r3, [r5, #16]
   18c66:	str	r0, [r5, #0]
   18c68:	str	r2, [r5, #8]
   18c6a:	mov	r7, r4
   18c6c:	mov	sl, r4
   18c6e:	mov	r2, sl
   18c70:	mov	r1, r9
   18c72:	bl	14d74 <memmove>
   18c76:	ldr.w	r2, [r8, #8]
   18c7a:	ldr	r3, [r5, #8]
   18c7c:	ldr	r0, [r5, #0]
   18c7e:	subs	r3, r3, r7
   18c80:	add	r0, sl
   18c82:	subs	r4, r2, r4
   18c84:	str	r3, [r5, #8]
   18c86:	str	r0, [r5, #0]
   18c88:	str.w	r4, [r8, #8]
   18c8c:	cbz	r4, 18cd4 <__ssprint_r+0xf4>
   18c8e:	ldr.w	r9, [r6]
   18c92:	ldr	r4, [r6, #4]
   18c94:	adds	r6, #8
   18c96:	b.n	18bfe <__ssprint_r+0x1e>
   18c98:	mov	r7, r4
   18c9a:	mov	sl, r4
   18c9c:	b.n	18c6e <__ssprint_r+0x8e>
   18c9e:	mov	r0, fp
   18ca0:	bl	14ee0 <_realloc_r>
   18ca4:	mov	r3, r0
   18ca6:	cmp	r0, #0
   18ca8:	bne.n	18c5a <__ssprint_r+0x7a>
   18caa:	ldr	r1, [r5, #16]
   18cac:	mov	r0, fp
   18cae:	bl	183d0 <_free_r>
   18cb2:	movs	r3, #12
   18cb4:	str.w	r3, [fp]
   18cb8:	ldrh	r3, [r5, #12]
   18cba:	movs	r2, #0
   18cbc:	orr.w	r3, r3, #64	; 0x40
   18cc0:	mov.w	r0, #4294967295
   18cc4:	strh	r3, [r5, #12]
   18cc6:	str.w	r2, [r8, #8]
   18cca:	str.w	r2, [r8, #4]
   18cce:	add	sp, #12
   18cd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cd4:	movs	r0, #0
   18cd6:	str.w	r0, [r8, #4]
   18cda:	add	sp, #12
   18cdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018ce0 <_vasnprintf_r>:
   18ce0:	push	{r4, r5, r6, lr}
   18ce2:	mov	r5, r2
   18ce4:	sub	sp, #104	; 0x68
   18ce6:	ldr	r4, [r2, #0]
   18ce8:	cbz	r1, 18cee <_vasnprintf_r+0xe>
   18cea:	cmp	r4, #0
   18cec:	bne.n	18d24 <_vasnprintf_r+0x44>
   18cee:	movs	r4, #0
   18cf0:	mov.w	r2, #648	; 0x288
   18cf4:	strh.w	r2, [sp, #12]
   18cf8:	str	r4, [sp, #0]
   18cfa:	str	r4, [sp, #16]
   18cfc:	mov	r2, r3
   18cfe:	movw	r6, #65535	; 0xffff
   18d02:	ldr	r3, [sp, #120]	; 0x78
   18d04:	str	r4, [sp, #8]
   18d06:	mov	r1, sp
   18d08:	str	r4, [sp, #20]
   18d0a:	strh.w	r6, [sp, #14]
   18d0e:	bl	15a58 <_svfprintf_r>
   18d12:	cmp	r0, #0
   18d14:	blt.n	18d3a <_vasnprintf_r+0x5a>
   18d16:	ldr	r3, [sp, #0]
   18d18:	str	r0, [r5, #0]
   18d1a:	movs	r2, #0
   18d1c:	strb	r2, [r3, #0]
   18d1e:	ldr	r0, [sp, #16]
   18d20:	add	sp, #104	; 0x68
   18d22:	pop	{r4, r5, r6, pc}
   18d24:	mov.w	r2, #1544	; 0x608
   18d28:	str	r1, [sp, #0]
   18d2a:	str	r1, [sp, #16]
   18d2c:	strh.w	r2, [sp, #12]
   18d30:	bge.n	18cfc <_vasnprintf_r+0x1c>
   18d32:	movs	r3, #139	; 0x8b
   18d34:	str	r3, [r0, #0]
   18d36:	movs	r0, #0
   18d38:	b.n	18d20 <_vasnprintf_r+0x40>
   18d3a:	movs	r0, #0
   18d3c:	b.n	18d20 <_vasnprintf_r+0x40>
   18d3e:	nop

00018d40 <_calloc_r>:
   18d40:	push	{r4, lr}
   18d42:	mul.w	r1, r2, r1
   18d46:	bl	146cc <_malloc_r>
   18d4a:	mov	r4, r0
   18d4c:	cbz	r0, 18d86 <_calloc_r+0x46>
   18d4e:	ldr.w	r2, [r0, #-4]
   18d52:	bic.w	r2, r2, #3
   18d56:	subs	r2, #4
   18d58:	cmp	r2, #36	; 0x24
   18d5a:	bhi.n	18d8e <_calloc_r+0x4e>
   18d5c:	cmp	r2, #19
   18d5e:	bls.n	18d8a <_calloc_r+0x4a>
   18d60:	movs	r3, #0
   18d62:	cmp	r2, #27
   18d64:	str	r3, [r0, #0]
   18d66:	str	r3, [r0, #4]
   18d68:	bls.n	18d98 <_calloc_r+0x58>
   18d6a:	cmp	r2, #36	; 0x24
   18d6c:	str	r3, [r0, #8]
   18d6e:	str	r3, [r0, #12]
   18d70:	iteee	ne
   18d72:	addne.w	r2, r0, #16
   18d76:	streq	r3, [r0, #16]
   18d78:	streq	r3, [r0, #20]
   18d7a:	addeq.w	r2, r0, #24
   18d7e:	movs	r3, #0
   18d80:	str	r3, [r2, #0]
   18d82:	str	r3, [r2, #4]
   18d84:	str	r3, [r2, #8]
   18d86:	mov	r0, r4
   18d88:	pop	{r4, pc}
   18d8a:	mov	r2, r0
   18d8c:	b.n	18d7e <_calloc_r+0x3e>
   18d8e:	movs	r1, #0
   18d90:	bl	14e3c <memset>
   18d94:	mov	r0, r4
   18d96:	pop	{r4, pc}
   18d98:	add.w	r2, r0, #8
   18d9c:	b.n	18d7e <_calloc_r+0x3e>
   18d9e:	nop

00018da0 <vtable for Stream>:
	...
   18da8:	. ...7..m...q...
   18db8:	. ... ... ..

00018dc4 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   18dcc:	}.......m...Q...
   18ddc:	....1.......

00018de8 <vtable for FsFile>:
	...
   18df0:	}.......m...Q...
   18e00:	....1.......

00018e0c <vtable for File>:
	...
   18e14:	.....7..m.......
   18e24:	....}...........
   18e34:	....!...}.......
   18e44:	................
   18e54:	............-...
   18e64:	9...q...

00018e6c <vtable for SDFile>:
	...
   18e74:	.....7..m...i...
   18e84:	....}...Q.......
   18e94:	....I...9.......
   18ea4:	....]...........
   18eb4:	Q...............
   18ec4:	....i...

00018ecc <vtable for SDClass>:
	...
   18ed4:	................
   18ee4:	....%.......i...

00018ef4 <vtable for LittleFSFile>:
	...
   18efc:	.....7..m.......
   18f0c:	i...}.......m...
   18f1c:	....]...........
   18f2c:	........M...1...
   18f3c:	................
   18f4c:	y...m...

00018f54 <vtable for LittleFS_RAM>:
	...
   18f5c:	................
   18f6c:	....e...........

00018f7c <vtable for LittleFS_SPIFlash>:
	...
   18f84:	................
   18f94:	....e...........

00018fa4 <vtable for LittleFS_QSPIFlash>:
	...
   18fac:	................
   18fbc:	....e...........

00018fcc <vtable for LittleFS_Program>:
	...
   18fd4:	................
   18fe4:	....e...........

00018ff4 <lfs_cs>:
   18ff4:	................
   19004:	  File    this=%
   19014:	x, f=%x.....   S
   19024:	DFile this=%x, r
   19034:	efcount=%u..  Li
   19044:	ttleFSFile this=
   19054:	%x, refcount=%u.
   19064:	............SDIO
   19074:	 Storage %d %d %
   19084:	s ..SD Storage %
   19094:	d %d %s failed o
   190a4:	r missing...SD S
   190b4:	torage %d %d %s 
   190c4:	....Program Stor
   190d4:	age %d %s failed
   190e4:	 or missing.QSPI
   190f4:	 Storage %d %s f
   19104:	ailed or missing
   19114:	....RAM Storage 
   19124:	%d %s ..SPIFlash
   19134:	 Storage %d %d %
   19144:	s failed or miss
   19154:	ing.SPIFlash Sto
   19164:	rage %d %d %s ..
   19174:	SDIO Storage %d 
   19184:	%d %s failed or 
   19194:	missing.Ram Stor
   191a4:	age %d %s failed
   191b4:	 or missing.test
   191c4:	1.txt...This is 
   191d4:	a test line..***
   191e4:	* dir of sd[0] *
   191f4:	***./test_%d.txt
   19204:	....Dir0..../Dir
   19214:	0/test_%d.txt...
   19224:	Dir0/dir1.../Dir
   19234:	0/dir1/test_%d.t
   19244:	xt..LargeFile.bi
   19254:	n....Setup done.
   19264:	MTP_test....Rese
   19274:	t...nand1...nand
   19284:	2...nand3...nand
   19294:	4...PROGM...QSPI
   192a4:	....RAM1....RAM2
   192b4:	....sdio....sd1.

000192c4 <vtable for MTPStorage_SD>:
	...
   192cc:	.&...&..!&..1&..
   192dc:	=&..)&..-&..%B..
   192ec:	./..)0..e0...8..
   192fc:	.7..I&..}0..-D..
   1930c:	.&..m+..}2..UY..
   1931c:	.L...M../mtpinde
   1932c:	x.dat.../...%d: 
   1933c:	%d %d %d %d %d %
   1934c:	s...%d: %d %d %d
   1935c:	 %d %d..

00019364 <supported_op>:
   19364:	................
   19374:	................
   19384:	........

0001938c <propertyList>:
   1938c:	............A.D.
   1939c:	Teensy..microsof
   193ac:	t.com: 1.0;.PJRC
   193bc:	.... / MTP 1.0..
   193cc:	%x %d %d %d: ...
   193dc:	 %x.....Event: .

000193ec <supported_events>:
   193ec:	.@.@.@..

000193f4 <SPIClass::spi1_hardware>:
   193f4:	<..@. ..........
   19404:	....Ex....=;....
   19414:	..............=;
   19424:	................
   19434:	 .<.............
   19444:	..:>?...........
   19454:	................
	...
   1947c:	............

00019488 <SPISettings::ctar_div_table>:
   19488:	................
   19498:	...... .(.8.@.`.
   194a8:	................

000194b8 <SPIClass::spi0_hardware>:
   194b8:	<..@............
   194c8:	....yy....'.....
   194d8:	................
   194e8:	................
   194f8:	................
   19508:	..........-.....
   19518:	................
   19528:	................
   19538:	................
   19548:	.. .

0001954c <SPISettings::ctar_clock_table>:
   1954c:	................
   1955c:	................
   1956c:	. ....... ...0..
   1957c:	. ... ...@...@..
   1958c:	.P...P...`...`..
   1959c:	.p...`...p..

000195a8 <monthDays>:
   195a8:	............EXFA
   195b8:	T...

000195bc <vtable for SdSpiCard>:
	...
   195c4:	....!...........
   195d4:	............1...
   195e4:	................
   195f4:	........e...u...
   19604:	....y...........

00019614 <vtable for SdioCard>:
	...
   1961c:	}...............
   1962c:	!.......-.......
   1963c:	........)...1...
   1964c:	5...Q...m.......
   1965c:	................
   1966c:	Flash ID: %02X %
   1967c:	02X %02X %02X...

0001968c <known_chips>:
   1968c:	.@............ .
   1969c:	.........@......
   196ac:	......@.........
   196bc:	.@..............
   196cc:	.........@......
   196dc:	................
   196ec:	.@. ............
   196fc:	.........@  ....
   1970c:	................
   1971c:	.p..............
   1972c:	.........p......
   1973c:	................
   1974c:	.p. ............
   1975c:	.........p  ....
   1976c:	................
   1977c:	................
   1978c:	.........@......
   1979c:	................
   197ac:	..! ............
   197bc:	................
   197cc:	littlefs....

000197d8 <defaults.6836>:
	...

000197e4 <rtable.5069>:
   197e4:	....d.... n;.0.&
   197f4:	.A.v.QkkXa.M<q.P
   19804:	 ...D.........a.
   19814:	..d.....x.......

00019824 <usb_endpoint_config_table>:
   19824:	........

0001982c <usb_descriptor_list>:
   1982c:	....,...........
   1983c:	X...i...........
   1984c:	................
   1985c:	....@...........
   1986c:	................
	...
   1988c:	0...

00019890 <digital_pin_to_info_PGM>:
   19890:	@..C@..@D..CD..@
   198a0:	...C...@0..C0..@
   198b0:	4..C4..@...C...@
   198c0:	...C...@...C...@
   198d0:	...C...@...C...@
   198e0:	...C...@...C...@
   198f0:	...C...@...C...@
   19900:	...C...@...C...@
   19910:	...C...@...C...@
   19920:	...C...@...C...@
   19930:	...C...@...C...@
   19940:	...C...@...C...@
   19950:	h .Ch..@...C...@
   19960:	8..C8..@<..C<..@
   19970:	@..C@..@H..CH..@
   19980:	L..CL..@(..C(..@
   19990:	,..C,..@` .C`..@
   199a0:	d .Cd..@ ..C ..@
   199b0:	$..C$..@(..C(..@
   199c0:	,..C,..@D..CD..@
   199d0:	p..Cp..@t..Ct..@
   199e0:	h..Ch..@P..CP..@
   199f0:	X..CX..@\..C\..@
   19a00:	T..CT..@ ..C ..@
   19a10:	$..C$..@...C...@
   19a20:	...C...@8..C8..@
   19a30:	4..C4..@0..C0..@
   19a40:	<..C<..@,..C,..@
   19a50:	( .C(..@, .C,..@
   19a60:	. .C...@. .C...@
   19a70:	. .C...@. .C...@
   19a80:	. .C...@. .C...@

00019a90 <vtable for usb_serial_class>:
	...
   19a98:	}7..u7..q7..m7..
   19aa8:	i7..e7..a7..]7..
   19ab8:	....

00019abc <_global_impure_ptr>:
   19abc:	8...C...POSIX...

00019acc <zeroes.7258>:
   19acc:	0000000000000000
   19adc:	INF.inf.NAN.nan.
   19aec:	0123456789ABCDEF
   19afc:	....0123456789ab
   19b0c:	cdef....(null)..

00019b1c <blanks.7257>:
   19b1c:	                

00019b2c <_ctype_>:
   19b2c:	.         ((((( 
   19b3c:	                
   19b4c:	 ...............
   19b5c:	................
   19b6c:	..AAAAAA........
   19b7c:	................
   19b8c:	..BBBBBB........
   19b9c:	................
   19bac:	 ...............
	...
   19c2c:	....Infinity....
   19c3c:	NaN.

00019c40 <__mprec_tens>:
   19c40:	.......?......$@
   19c50:	......Y@.....@.@
   19c60:	.......@.....j.@
   19c70:	.......A......cA
   19c80:	.......A....e..A
   19c90:	... _..B....vH7B
   19ca0:	......mB..@..0.B
   19cb0:	.......B..4&.k.C
   19cc0:	...7y.AC....W4vC
   19cd0:	..Ngm..C.=.`.X.C
   19ce0:	@..x...DP.....KD
   19cf0:	..M....D.J...-.D
   19d00:	...yCx.D

00019d08 <__mprec_bigtens>:
   19d08:	...7y.AC.n.....F
   19d18:	..?..O8M2.0.Hw.Z
   19d28:	<.s..O.u

00019d30 <p05.6087>:
   19d30:	........}...

00019d3c <_init>:
   19d3c:	push	{r3, r4, r5, r6, r7, lr}
   19d3e:	nop
   19d40:	pop	{r3, r4, r5, r6, r7}
   19d42:	pop	{r3}
   19d44:	mov	lr, r3
   19d46:	bx	lr

00019d48 <__init_array_start>:
   19d48:	.word	0x0001728d

00019d4c <__frame_dummy_init_array_entry>:
   19d4c:	5...q$..U...

Disassembly of section .fini:

00019d58 <_fini>:
   19d58:	push	{r3, r4, r5, r6, r7, lr}
   19d5a:	nop
